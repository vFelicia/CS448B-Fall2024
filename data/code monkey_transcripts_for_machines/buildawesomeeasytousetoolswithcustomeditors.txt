in this video we're going to create a custom inspector for our script along with some custom gizmos this is excellent for building awesome easytouse tools by making your classes more designer friendly and easier to work with the inspector shows exactly only what we want and the gizmos help display extra information right on our scene view let's begin this video is sponsored by audio mob audio mob helps developers monetize their games through non interrupting audio ads you can earn more money while having happier players so instead of intrusive video ads that they kept your entire screen you have audio ads playing in the background once the player is enjoying your game so the player continues having fun we want the audio ad plays in the background you can monetize using standard audio ads that allow the user to skip the advert at any time or you also have the rewarded type which allows your player to get rewards by listening to an ad players don't enjoy having their games walk so it's quite possible that this new unintrusive ad type won't become the new standard in the future it's very easy to integrate into your games via their unity plugin click the link in the description to learn more and start monetizing your games through nonintrusive advertising clicking the link also help support the channel so lately I've been working on the interactive tutorials for the code monkey steam app if you haven't yet then please click the link in the description to add it to your wishlist I've been playing around with several possible approaches for teaching the player and I realized I needed to make a scripting system in order to handle timing and clicks and since I have to build tons and tons of content I decided to research how I could make my script very designer friendly to make content building much easier alright so here's what we want to make there's a script to make a bunch of actions and tons of awesome gizmos to be able to easily visualize all the scripted events that are happening let's see it in action here this starts off with that character he goes there and he opens the door he moves forward he says something then this one moves there he says another thing then that one goes away and he causes the nice door so this is all scripted using very simple actions so for here this is the simple script to handle those actions it hasn't known for each action type and each one is supposed to have different type of parameters without the editor script this is what it looks like everything looks very messy so this one for example is an action type of door but over here I can still see the chat bubble parameters and he moved Ramblers so ideally if I pick the door action that means that all I want see are the door parameters and over here on the scene view all I see is an empty game object working like this would be extremely difficult in order to set up all the scripting logic I would need to select each individual game object and here I would have to think about which fields need to be set so that would make content building very difficult and here it is with all the editor scripts enabled and right away you can see that the parameters shown are dependent on the action type so this is a chat bubble it only shows me the check button parameters this one is a move it only show me the move parameters and this from the door and again only shows the door parameters so the custom inspector is showing different fields based on logic of what I have selected in this field and visually the scene view we can also see a bunch of arrows and labels that clearly indicate what each action is doing so for example over here I have a move action and this move action is linked to this unit and it's going to move this unit on to this position then once it's done it goes into this action and you can see that this action is of type open door and it won't open this door right here and once it's done it goes into move which again is going to move down up to this position and so on then this one is a chat bubble so it's going to say this message on top of this unit and so on so thanks to all of these gizmos it's very easy to visualize all of this scripted behavior now like I said I research this while working on the code monkey schema here is a scene with all of its scripted behavior now this object has an action of type mask mesh which is using this object as its mast and leads into this other action now I cover the mesh mask in a previous video so check it out if you want to learn how to make a complex mesh in your UI visually I can clearly see what the scripting is doing managing of this logic without a custom inspector and gizmos would take 10 times longer so here I won't cover how you can make your own custom inspector and gizmos and this is just one possible example of how I use them to make a tool to make my life easier making custom editors is extremely extensible so you can do whatever you want for example having custom gizmos is really helpful if you have some sort of patrolling your axe system and you want to drop some way point positions or visually just to see in the our scene view of the sets for each object in your world custom editor scripts are mentally useful for making all of your tools easy to use and improving your productivity when building content then in the next video we're going to see how we can take this even further by capturing clicks in scene view to automatically fill our fields all right so this our goal let's get to it okay so here we are in our starring scene pretty much is two characters sitting around Adam and here is the editor all right so let's begin by making our underlying script so we make an easy sharp script let's call this our custom action and open it okay now here we're going to keep things as simple as possible we're going to make an enum for the action type and have different parameters for each action type so first we make our public you know all right here this so one won't spawn a chat bubble and the other one will move a character now let's define the parameters for each time all right so here it is we have classes containing all the fields that we need to execute our actions now one thing here in order for our custom classes to show up in the editor we need to add here the attribute system that serializable if we don't then these films would not show up in the editor okay so here we have all that required to complete each action and now that we have of our action panel let's make a simple function to trigger all right so there it is over here I have a main execute action function and we just do a switch on the action type so if we have an action type of chat bubble we trigger the execute action on the chat bubble params class so we triggered this one and if we have move we trigger this one now the behavior for these particular functions isn't relevant to this video here we just want to learn how to make custom inspectors but if you want to learn more I also cover these two in previous videos so the chat bubble is from the chat bubble video and down here the move action that's from the modular character controller video so go ahead check the links in description if you want to learn more about how these two are made in this video and we care about is learning how to make a custom inspector that we can apply to any scenario we want and here let me also make just one simple note in terms of code architecture here I am keeping it as simple as possible and just demonstrate the effects of a custom inspector so that's why I'm placing in both actions in the same script using any new if you'd like to make a custom action script the absolute proper way that would be by having each action in its own script probably by using a proper common interface so here I want to say focus just on the editor script but I also wanted to point out what would be the proper way to expand upon this okay so here we have our very basic custom action class that is set up to execute two different action types now let's go back into the editor and then you know let's make a game object to run our script on our custom action and let's drag our script onto it and you pry the way we see our issue now this one for example we just want it to be a chat bubble action but we're also seeing the move parameters so this is where a custom inspector comes in we can use some logic to show our height parameters so when we select on this in um the check button we only want this one to show and we want this one to be invisible and same thing so like the other one hide this one show this one okay so let's make our custom inspector now for that first we need to make a phone so down here inside the scripts form always create a new folder and this will be our editor folder and inside this folder we're going to add our editor scripts so for our custom inspector and let's give it the same name and add editor at the end so when you see char script call this the custom action editor alright let's open it now here the first thing we need to do is add appear using unity editor this is so we can use editor classes and in here instead of extending model behavior we're going to extend the editor and get rid of the skip part so this is the base class for custom editor script and now in order to make this a custom editor of our script up here we have the attribute custom editor then we pass in the typo and we pass in our actual tank so in this case the custom action so this means that this script won't be applied as a custom inspector whenever we inspect the class of type custom action and now in order to showcase a custom inspector we need to add the override we override on inspector GUI and if we just save this and go back into the editor yep right away our custom inspector no longer shows the default representation so right now it's not showing anything since we didn't tell to show anything all right so with the starting point we can now choose exactly what we want to show so here in this function is where we're going to build our custom inspector now the underlying data for our script is in a civilized object so we access the field civilized object and the first thing we do is update the representation of our object so we call update and now we can decide to show a specific property so the way we do that is use the editor going in layout and we can create a default property field and then here we pass in the property so once again we access the sterilized object we find the property and we give it our type so in this case can go back into the action and let's just show the action type so let's pass in this so just like this we should see the inspector displaying our type and this function automatically identifies the type of the property so in this case since it's an enum it will show the standard dropdown many so we do this end at the end of the un inspector GUI we need to call our serialized object and call apply modified properties so this writes any changes we make back onto the underlying object all right so that's it this is the absolute basics for making a custom inspector and if we test any of there's the custom editor script running it is showing me exactly just the tank filmed which is what we want alright great so now that we have this working let's show the remaining fields wants also applying some logic so for our logic we need to apply a switch on the current select type now the current selected object is stored within target so this is the object being inspected and we can cast this down onto our custom type which is custom action so here we have reference to our selected instance and now here we can do a simple switch we access it access the action type and then let's do a simple case so if we are on chat bubble then let's show the chat bubble friends so we do the exact same thing in this case again go back and use the exact same name chat bubble params and we show this one and here's the other one we show the other all right that should do it back into the editor and you pry the way we can see it working so if I select the chat bubble it shows each at bone params and if I select movie chose the move params so the inspector is only showing you exactly what I need based on the type that I select right great so just like this we already have built a custom smart inspector that only shows the exactly what we want so this is the simplest custom inspector that we can build and here since we have access to the annoying object you can do whatever you want with the inspector for example let's say we want to add an extra button over here on each hat bubble so we go into the GUI and layout in order to create a button and let's call button and just like that and if there it is if we don't like the check but when we see our nice button even if we sound like move we do not see it and right now we're showing the entire chat bubble programs but we can also show each field individually so to do that instead of showing the civilized object of the chat bubble params instead we do this we go into that and then we actually find the property relative to down one so in this case you have bomb crimes as these parameters and let's say we just want to show the text so we just show down and if there it is if we saw my chat bubble we see our button and our text field so just like that you can see how extensible this system is alright so this pretty much covers the basic custom inspector now let's add some gizmos over here on our scene now for this one there are two places we can write our code over here in the editor script we can add the function public Boyd on scene GUI so this function gets called whenever the scene updates so here for example let's draw a simple text and label alright so just like this we should be able to see some text showing the action type right on top of the custom action transform and yep we see it right there there you go the chat bubble highlighted right on the object so just like this we can visually look into the scene view and immediately see alright this is a chat bubble however the unseen gooey method only runs when the object is selected so if I select something else yep there you go the label actually disappears so if we want to display some information at all times and this is not the best approach now the other approach we have for drawing gizmos is on the normal object script so here we are on the custom action script and let's go down here and what we can add is a simple private boy on draw a gizmos so this one gets updated whether the object is selected or not so here we can have the same code alright just like that let's test and if there's the text level so I can select it and you could see some like now that object and yep it's still in there so this label now shows up whether the object is selected or deselect it now in this case I want to show some information at all time so let's go with this approach now there are actually several ways of drawing gizmos so for example for drawing a simple line you can use the handles then you also have gizmos draw a line and then you also have the debug drawn line so all three methods behave in the exact same way so here in the other we can see on line going from the object position on to the origin now I've tried to look for what is the difference between all of them and which one should be used but I couldn't really find anything so if you know how they differ from each other then please let me know in the comments now the one difference that I see is that handles exists inside of unity editor whereas gizmos exists inside of unity engine now in this case I will be mainly using Hamill's in has a lot more options and gizmos and the handles works both in here and also over here on the editor code whereas gizmos cannot be used on the unseen GUI function and since handles uses the unity editor let's go up here to add a using statement and let's also add an if to make sure that this code only runs in the editor and not in a bill alright that should do it so let's draw some lines between all of our fields now this code here is running on this object so we can access all of the fields up here let's start off simple by drawing a line when the chat bubble type is pointing to our unit so we do a switch on our type alright so here this we do a switch on the action type if we are on the chat bubble the first thing we do is we check if the game object film has been set and if so then we draw a line going from this onto the object position so very basic very simple let's see so here we are and right now yep there's no line pointing anywhere since that field is set to no and I would say a drug reference to this unit put in there any of there you go now we see our nice line so you can see that this event is correctly linked on to that unit so we can very easily visualize all the links to our actions awesome all right now let's apply the same thing to our move type so here we just use switch on the other type alright so doing they pretty much the same thing first we test if we have something set to that field if so we drawn line from the action on to the unit game object then we draw another one from the unit game object to its move position and this one just for fun we're adding a different color let's see how this works so here we swap the chat bubble for a move and there you go that link disappears now let's drag our reference and if there it is and it's going on to move position zero zero zero so right there so we can move this any of their your line is moving so without any object selected I can just look at my scene and see they're over here I have a move action it's connected to this unit and it's going to move this unit from this position out position and since we're working with a custom inspector we can very easily add a custom handle to this vector3 so back into our custom action editor script in here we can add a position handle so before all this let's begin to add a change check so that means that the code over here in the middle will be checked if it changes or not so it's in here that we can add our position handle so you into the handles and we create a new position handle so we add a position handle right on the move params move position and now this function returns the new target position and this one returns true if something has changed so if it has changed and let's modify it all right so like this now here the position handle cannot actually be used whilst inside of the unexpected GUI rather it needs to be used on the onscene GUI so let's pass this code in here and again this one is for the move parameters so let's do a switch on our kite all right there it is so if we have the move tab let's show a move position Hamel to update our move position let's see if it works so here we are in select our object and you've there you go now we have a second move position Hamel so we have this one for the actual object position and then we have this one to modify the very nice move position so instead of setting numbers in there we can use this really nice handle right awesome and here let's just make this the complete proper way so let's also add an undo so we record the objects 8 then we change it then we update 0 object so here we are and now if we move it and we press ctrlz if there you go we have nice and do alright great so we've already learned how to make a custom inspector and add some custom gizmos now just for fun let's see how easy it is to add the new action type so let's expand upon our custom actions let's add a door action and once again though you know let's make parameters all right there it is over here we have the new annum type then down here we made some new params and all of the required parameters and the function to execute this action then down here we add it to our switch now in the editor and let's show our property fields there it is and on the gizmos let's show some gizmos all right just like this all right so now back in here we can swap this for a move and select door and there we have our door parameters so here let's pass in this door reference and let's not open it and now let's just make a script to run our very first action here there is a very simple script we just have a reference for our starting action and on start we execute it and here just set this object and we're going to run this action so we should be able to play the game and see the door open and if there is we saw our action and our door open awesome so you can see how easy it is to expand upon our system now if you want to know more about this door it was actually fully created on a previous video I've done three videos covering doors one on the key door system one on various methods of creating doors and one on various ways to interact with any object so if you want to learn more about how door is made then check those out alright so we have our inspectors and our gizmos now let me just punch this up a bit alright so here it is I made this nice function to draw some cool errors it's using the draw a a pawn line in order to draw a nicer antialiased line it also supports drawing in different colors there is a label on the right down the middle sing some text and a bunch of lines to make it look like an actual arrow let's see it in the editor any of there it is so we have some very nice arrows pointing to our targets with some labels providing more context so just by looking at the scene view we can see all the information to understand what is going on so this is a door type and it's pointing and it's linked towards this door and it's going to make it open alright now let's just build the scenario that we saw in the beginning all right so here it is I just sat on the fields and we can very easily see what is happening so it's going to start off with this move action so it's going to move this unit on to this position then once he reaches there he's going to go into this next action this is the door it won't open this door when there are opens then he moves on to this one which will move this unit back into this position then when it does it triggers this chat button so this unit won't say this message then it goes into this one where this unit goes there and then it goes into this chat button where he says something and then he goes into the move which is going to move that one all the way back up there and then finally close the door so we can very easily visualize on fire scripted behavior thanks to all of our very nice gizmos let's see it in action okay there it is using air he opens door he moves foreign he says his message then the other one moves forward says his message then he moves away and finally he causes earth alright awesome so here we have a really nice scripted scene that we built using our very awesome new easytouse tool we have our custom inspector just showing the parameters that we need and we have a bunch of information on our scene view to easily visualize what is going on again this is just one possible example of the benefits of writing a custom editor with custom gizmos you can apply this to whatever you want in your games so before you start manually creating tons of content ask yourself if you can spend just one day building a tool that won't greatly improve your productivity now in the next video I will cover how to capture clicks in the scene view in order to take this tool even further if you're watching this in the future check the link in the description and if not it should be out by next week check out the code monkey app on Steam interactive tutorials complete games and more click going in the description and add it to your wish list this video is made possible thanks to these awesome supporters go to patreon.com/scishow to code monkey to get some perks and help keep the videos free for everyone as always you can download the project ultimate tony's from unity Montcalm subscribe the channel for more indeed turns where seven comes and I'll see you next time