in this video we're going to learn how to instantiate prefabs in unity dots we're going to build our prefabs using normal game objects as usual and then we're going to convert them into superfast entities that we can spawn during runtime let's begin hello and welcome I'm your code monkey and this channel is all about helping you learn how to make your own games with nf2 torrents made by a professional indie game developer so if you find the video helpful consider subscribing okay so here I will cover several ways we can convert a game object prefabs into entity prefabs and several ways to store them for later use that's it's all very much in development so the best practices aren't yet known so that's why I'm going to show as many different ways as possible this video is made possible thanks to these awesome supporters go to patreon.com/scishow code monkey to get some perks and help keep the videos free for everyone ok so here let's start off with a most straightforward way possible so here in my scene let's first build our prefab so lets create a new 3d object and let's make it a quad here my project I have this simple material and just use it alright so just like that here it is a very basic sprint just a mesh filter with a quad and a mesh renderer now for here I have a prefabs folder to just drag it in there and there you go knowing how deep layer so let's call this the prefab game object alright there's our pre found so we can now remove it from the scene and yep there it is ok so now that we have our prefab game object we want to have reference to this prefab that gets converted into an entity when we run the game so let's look at the easiest way possible so here let's make a new script and call it the prefab entity component now inside let's remove model behavior and instead using unity that entities and this will be a I component data and as always this is a struct and now inside let's have a field for a entity called 3 5 and alright so here it is a very simple component which holds an entity however if we go up here and we add the automated attribute generate authoring components and now we go back into the editor and let's make an empty game object and just drag our prefab in T component script and if there we go just like that you can see that that field shows up as a game object field so let's drag the prefab game object as that reference and yep there it is so now any convert to entity script and now if you run the game just like this and here is the game running and we have nothing on the hierarchy so no game objects however on the entity debugger and over here yep you can see you can see that our game object was correctly converted into an entity and it contains our prefab entity component which in itself contains a reference to our prefab game object which again has also been converted into an entity so here it is our prefab as an entity so the randomization everything exactly as intended so here we have our prefab being correctly converted from a game object into an entity and then store it in a nice component field that we can then use so now let's try to use it let's make a basic spawner system so we make a new C sharp script call this the entity spawner system now in here let's make this a component system okay so here let's make a simple timer to sponsor entities all right so here are just some simple logic essentially spawning something every half a second and I'm here in order to spawn our entities let's do a entities dot for each and now in here we can grab our component which was the prefab entity component and in here we can simply call entity manager that instantiate and we're going to instantiate it we use the prefab and component to access our prefab entity all right so just like this we have our entities being spawned now let's just put them in random positions all right so here all we're doing is in saturating our prefab entity and then setting the component for the translation onto a random position all right so let's see and yep there's our prefab being in Senshi ated and if we pause and look at the hierarchy yep there we go we have no game objects so of these are being accentuated as entities and here on the entity debugger we can see indeed our incented entities so just like this we have a game object prefab being converted into an entity and then we're using that entity in order to spawn more entities awesome so here we have the simplest and most refor way of converting prefabs into entities and later spawning them we just make a component with an entity field and we add the generate authoring component attribute in doing so we get a film that we can actually put a game object inside and the conversion system automatically converts it into an entity okay so now let's look at another approach first let's make a script where we can place our prefab reference so let's make a new script let's go on this from the prefab entities and now in here this will indeed be a mana behavior okay so first we have a simple game object field so a public game object for our prefab game object and back in our scene let's create a new game object for our prefab entities and we use our script and there you go we have a field for the normal game object and we just drag our reference okay so far so good and now here back in our code we're going to also add using unity dot and three and now we're also going to implement the interface I convert game object to entity this is the interface that is used by the conversion system in order to convert a game object into an entity so implement the interface which eases this function now that this does is it converts this game object into an entity and afterwards we have the entity that has been very so we can use it to add more stuff so now during the conversion process we want to convert this game object into an entity and now the way that we do that is using the game object conversion utility and this one has a function called convert game object hierarchy and here we take the root which is going to be our prefab game object okay and then we need some settings so for the settings we grab them using this function which grabs the settings from this world which is going to be the world from this entity manager and now we need a blob asset store and just like this so now this one returns the converted entity all right so here we have our entity that has been converted from our prefab game object and now in order for us to use this entity in some source pawner we need to store it somewhere so one very simple way to store something is to use a static field so here what's an a public static entity for our prefab entity then we set our static field so prefab entities are prefab entity we set it to this prefab entity all right so after the conversion and storing it in our field now we can go into our spawner system and here previously we're using this method where we're grabbing it from the components but now instead of doing this we do the same code for spawning our entity except we grab our prefab from our static field so there it is just like that and finally in order to make sure that the conversion system calls our function we're already implementing convert game object to entity so I need to do is back here in our game object that has our prefab entities we also add the convert to entity script alright this should be working let's test any of there you go we have our entities being instantiated the same as previously again no game objects all of them has new entities so we're here we saw a different approach of converting a game object into an entity and we also saw a different approach for storing our converted entity in this case in a static field which over here has the benefit that we do not have to do an entities for each in order to grab a specific component we can access the static field from anywhere in our code alright so this is our second method using the I convert game object to entity and the game object conversion utility now let's look at another approach so let's make a new csharp script let's call this our prefab entity's version two okay and now in here let's remove these but again leave monobehaviour using unity dot entities and now in here we're going to implement the interface I declare reference prefabs so this interface must implement this function which as you can see takes in a list of game objects so let's add our prefab feel just like we did on the previous version and now when we have this function being called we simply go into the referenced prefabs list and we add our new game object so this is adding our prefab game object into the reference list for the conversion system and now in here we're also going to implement the convert game object to entity and are here on the conversion function we're going to use the conversion system and use the function get primary entity this one as you can see takes an object so we get the primary entity that is referenced by this prefab game object this will return an entity for our prefab entity so here we're adding the prefab game object as a reference in the conversion system and then when the conversion system calls this function we're asking the conversion system to get the primary entity that matches the reference for this game object and just like before let's sort in a basic static field all right so there it is and now in the Spanish system will use that film instead and now here back in our code here we have the previous game object so let's replace this prefab entities with the second version and there we go in the inspector it works exactly the same so we have our game object film and there it is alright so let's test any up there it is we have our entity prefabs being instantiated here it is in the entity debugger of them being instantiated awesome ok so here we saw yet another approach for converting a game object prefab into an entity profile we honor a game object as a reference prefab then it gets automatically converted and we just get the entity after it has been converted now there is yet another approach that we could take but for our simple scenario it's a bit overkill so I'll just briefly mention it you can make a system and in that system you can make it of type game object conversion system so this system takes the basic on update as if a component system and it's called on a plate but really it's only ever called once during the game object conversion stage so this is how you make a custom system that works in the middle of the conversion system and now in here you can access authoring components well in the middle of conversion and use the same get primary entity that we did in fact here in order to set all the references so again this is a more advanced topic and a bit overkill for the simple scenario of in sending an entity but just in case you want to run some code during the conversion stage then all you need to do is extend this system alright so here we looked at four possible ways that we can convert a game object prefab into an entity prefab the first method is simply using a normal component with an entity field and then adding the generate authoring component the second method we implement convert game object to entity and we use the game object conversion utility in order to convert our game object into a prefab on the third method we implement declare reference prefabs and we add our game object into the reference list and finally the last method we extend the game object conversion system and hem our conversion again unity dots is still very much in development so not entirely sure what the best practices will end up being so here we have all options now after converting our prefab into an entity the next thing we need is to store that convert an entity and again we also have multiple ways of doing that here we already looked at two ways first we can certainly convert an entity into a normal component and secondly we can store it in a static field when using the component we need to access the component to get the entity prefab whereas with a static field we can easily access it from anywhere however we have another way of accessing the component instead of doing in entities for each if we only have one prefab component as we should then we can access it as a single bit so instead of our for each we just use get singleton up type prefab entity components this returns our prefab entity component and then we can use pretty much the same code as previously so you grab the prefab inside of our component our prefab entity spawn it and so on so let's test any of there you go everything still works so here using Singleton's you have another method of grabbing the prefab entity now yet another approach we have of storing the prefab entity is using a blob asset pob assets are really interesting so I won't be covering them in a dedicated video in the future okay so oh no here we covered four different ways of converting game object prefabs into entity prefabs and we also covered four ways we can store and use our converted entity prefab again as I said the entire that stack is still very much in preview so not entirely sure which one will end up being the correct standard practice so for the time being use the approach that you prefer this video is made possible thanks to these awesome supporters go to patreon.com/scishow to code monkey to get some perks and help keep the videos free for everyone as always you can download the project file the new tony's from unity ma calm subscribe the channel for more ent tutorials puzzling question heaven comes and I'll see you next time