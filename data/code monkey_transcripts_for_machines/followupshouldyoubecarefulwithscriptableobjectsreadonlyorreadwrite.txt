hello and welcome I'm your code monkey here is a quick correction slash clarification on something that I briefly said in my last video which a lot of people pointing out in the comments the video is titled be careful with scriptable objects and the goal with the video was to teach you that scriptable objects have one specific Quirk where they behave very differently in the editor and in the build in the editor they act like persistent state but in a build they do not so if you build your game depending on that persistent State behavior that you see in the editor then you would go crazy when you finally make a build and everything suddenly broke without you knowing why that was the main point that I was trying to get across but in the video I also said they should only be used for static readonly data which is not necessarily correct basically I just said it quickly without thinking too much about it because that wasn't the main purpose of the video and that is indeed how I personally use them but like many people pointing down in the comments that is not correct you can use them for more than just read only that containers you can use them for read write just not for precision that a lot of the comments mentioned an excellent tone call about scriptable objects I definitely encourage you to go watch it if you haven't seen it it's an excellent talk that showcases lots of interesting uses of scriptable objects other than just as readonly data containers it's an interesting architecture but as with everything nothing is perfect and there are always pros and cons depending on your skill set your team composition and size it might be a great architecture or maybe it might not be the main Pro is that it's very designer friendly if your attack types are scriptable objects then your designer doesn't need to bother a programmer to add another value to the enum if your designer wants to add more behavior when the player takes some damage they don't need to touch any code the cons are that you can end up with hundreds or thousands of individual Assets in your project if you use them for every single variable every single event it's also now really very suitable for games with a dynamic number of units like an RTS or Tycoon games which happen to be the time of games that I like to make also it's pretty hard to debug It's tricky to see the stack Trace in the tomoki specifically mentions how they need to build several layers built on top of the Demos in order to make this architecture easier to debug than there are potential performance issues you do all those layers you need to add on top of it to make it more design friendly and he also mentioned in the end the very issue that I pointed out in the last video how script bone objects are persistent in the editor which he does not want so he has another script which then goes through every single scribble object and resets their values so that the behavior in the editor matches the build so it is a valid architecture with some pros and cons and for me since primarily I'm a programmer and I work alone personally I use crypto model objects just like I said in that quick offend remark I use them solely for readonly data like storing a weapon sets or crafting recipe or some general game config however like many people mentioned it is a valid architecture so just because personally I do not like it does not mean you shouldn't like it if it makes sense to you then by all means use it as more than just readonly data containers many people pointed down how they use them for even handling and yep that works again personally I just use regular csharp events and hook them through code but yep script more objects are a valve alternative other people pointed out using them for very long containers and hooking UI elements it's a very designer friendly workflow someone else mentioned how you can call instantiate on a suitable object and indicate a user just like any other data in memory some people pointing out how it's very useful for sharing data between scenes and yep that's right again personally for me I just use static fields for that purpose but a scriptable object works as well although someone else did point out another Quirk which I had never even thought about since read write access only works on the options in memory that means that if the object is cleared from memory then it will lose that previous state so if you do use script objects for sharing data between scenes do make sure you keep a reference to it all the time for example something that I do in my games is I make a separate scene just a hand on loading and nothing else so it acts like an intermediary between any two scenes that I want to load if you did that then the object in memory would be destroyed because there would be no reference to it in the loading scene then some people also mentioned the asset scriptable object Pro which was apparently designed specifically to help solve that persistent problem and add some more features and also someone else posted a simple but very useful comment when building at your game definitely do some testing in your target platform as you're developing don't do it just once right before release so yes to further clarify what I was trying to say and what I should have said in that quick off and remark yes you can use script on objects for more than just readonly data you can use it for read write access that is a valid use case if you find it useful just be very very aware of that one Quirk where they persist in the editor but not in a build so if you do use them for read write access then either create a system to reset all the values just like Ryan mentioned in that talk in order to make the editor Behavior match the build Behavior or alternatively create a system to always save back the changes to a file to make the build Behavior match the editor Behavior also for some more discussion on this topic check out the Game Dev show that just came out they talk about it around the 17 minute Mark and around the one hour mark okay so thank you all for all your comments and let me take this time to point out that please yep do post a comment whenever you feel that I said something wrong or that there's more to something than whatever I said I have quite a lot of experience since I've been programming for over 20 years and using Unity for almost 10 but that absolutely does not mean that I know everything or that I'm immune to mistakes or oversimplifying things and this is also a great example of how when you follow some tutorial you should always read the comments if there is something that the instructor might have missed or something that was wrong or should have more clarification chances are people in the comments won't point it out alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and I'll see you next time foreign