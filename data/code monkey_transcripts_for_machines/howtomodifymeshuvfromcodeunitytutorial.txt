hello and welcome I am your code monkey and in this video we're continuing our mesh creation from code we're going to learn how the UV coordinates work and display a single body part from a spreadsheet let's get started so in the previous video we covered how a mesh is created it is composed of vertices UVs and triangles I mentioned that the UV coordinates are the position in the texture that gets applied to that particular vertex the UV coordinates are represented as a percentage of the texture where the values go from 0 to 1 the lower left corner of the texture has a coordinate of 0 0 and the upper right corner has a coordinate of 1 1 in order to make this easier to manage let's make a function that converts pixels into percentages so let's go into our code go down here and we're going to create a new function public we're going to return a vector 2 that won't be used for our movies we're going to call it convert pixels to UV coordinates so in this function we're going to receive our values as pixels and we're going to convert them into UV coordinates in order to derive we're going to receive an index an int for our Y then we also need an end for our texture width and a end for our texture hi so in here using some very simple math we can convert them into UV coordinates so we're going to return a new vector2 on the X we're going to return the X divide by the texture with and on the Y we're going to return the Y in pixels divided by the texture height and obviously convert these down to float so that the result is not cast down to an end and their young we are now correctly converting from pixels into UV coordinates now with the mesh Square we created previously we are currently displaying the whole texture now let's display only the head the spritesheet is in 512 by 512 and the pixel coordinates for the head are 0 380 with a width of 128 and a height 128 so let's set these values up here I'm going to put an end for my head X which won't be 0 and then for my head Y which is 380 and then for my head with which will be 128 and then for my head height which is also 128 and then for my texture width which is 5 pump and then for my texture height which is also 5 time ok now that we have our values let's apply them to our UVs so UV is 0 we're going to use our function to convert and put the head x and y texture with texture height we're going to use 3 ok now let's set them up correctly so for our UV 0 we want the coordinates of our left top coordinate some left top left is just ahead X top we got the head why was the head height okay for my second UV I want the right top so X plus my head with head what was the head height for my UV 2 I want the left bottom so just head X hat Y and for the 3 I want the right bottom so FX plus head width and just a head why so there you know the UV should now be correctly displaying and the square that we created previously should now display the head let's test it out and there it is we're using UVs to display just a portion of our texture in our mesh so now let's improve the code and make some variables to store the UVs of the various body parts we're going to create a function that will return for UV coordinates representing a body part in our spreadsheet we have to make sure that we're returning the positions the correct pattern that we set up for our vertices so we're going to continue to work in a z shape back to our code go down here and this function should actually be private to keep things nice and clean and we're going to make a new function and it won't be a private return an array of vector two and comelet's get UV rectangle from pixels we're going to return on four positions of a rectangle defined by the pixels in our spreadsheet so in here the families that we require are our X our why you need the width of the body part that we want to select the height and then we also need the texture width and in for picture high now we're going to return an array of vector 2 we're going to return for vector tubes now again remember to keep the Z position so the first one is left top then we've got right top and left bottom and right bottom so let's just add a comment so we don't forget the direction we're moving in so we have 0 1 then we have a 1 1 then we have a 0 0 and then finally we have a 1 0 ok so this is the pattern that we want to make sure we always use so all the UVs and vectors and triangles everything matches ok so now in here we want the 0 1 and we're going to essentially do the same thing that we did in here so actually in here we're not going to return an array of X 2 or rather we're going to use the function that we use since well that's much easier so for the left top I want x4 the top 2 1 2 y plus the height and then picture with and texture high for right top I want the X plus with top I want to y plus height picture with picture right now in here I want at the bottom so just X Y texture with texture height and down here I want right bottom so for write x plus wood for the bottom just the one line and texture with texture height and there you go now we have a nice helper function that will help us convert from pixels and grab for UVs to represent our body parts square now let's make a variable to store the value of a body part UV so up here I'm going to make a private it will be an array of vector 2 and call it head down UV and here we're going to set up the head down UV which we're going to use our function and our X is going to be 0 our Y is going to be 380 the width 1 28 28 next your width and texture hi and now let's comment this out now let's make a function that won't take our body part UV array and apply that to our main UV Iraq go down here and add another one private void apply UV to UV array now in here we're going to receive an array for our UV that we want to apply and we're going to receive a another array for the main UV of our mesh that we're going to pass in to be modified since we want to modify this right we're going to pass it with the wrap now technically we don't need to add where F in here since and raise already a reference type but in order to keep our code clean and make it clear that this function is going to modify this array we're going to add the so in here we're going to apply the UV to our main UV so going to take the main UV of 0 and F 2 are UV 0 3 2 3 so in here let me just make a note with regards to performance since in the end we want the system to be very performant we're going to make the assumption that UV and men UV are correct meaning they are both not know and they both have four elements but when we're developing it might help to always test to make sure our values are correct so let's validate our inputs anyway so here we're going to test if our UV array is known or UV contains less than 4 elements or our main UV is no or the main UV link also has less than 4 elements if it is not we're going to throw a new exception so this one validate our inputs but once the whole system is set up we can comment this out and assume everything won't work correctly performance is all about making assumptions on your data and once the system has been fully tested and you can be confident that you are never sending invalid values into this function you can remove the input validations and make the whole thing more performant so but for now since we are developing the system let's keep the checks on which should never be triggered since we always want to make sure that whenever we call this function we always call it with valid values ok so up here where we define our head down UV we can now use our new function to apply this head down UV into our main UV iraq so we're going to apply UV to UV array we're going to choose the head down UV and apply it passing the reference to our UV and here we can also comment the sound so all we need to make sure is that we are correctly nationalizing with the correct values in here it won't copy our variable UV into our UV array this way we can apply several times without constantly having to do this calculation let's test it out and see if everything is working exactly the same as it should and there you go still working the same no errors nothing awesome now let's add more variables to contain all the body parts in our spreadsheet okay so another note here on my spreadsheet I only have the sprite for the head right I don't have a sprite for the head and left but we can easily mirror our head right UV by sending the reverse coordinates on the X so our width is going to be negative and how our X will be 2 5 6 so the right corner and with negative like that and we can test this out places in here make sure that we are this plane the left head there you go our sprite sheet only has the head facing the right but we can easily mirror it and have left this way we don't have to waste space on our spreadsheet ok I have all my UV setup now let's make some buttons just for fun to modify our UVs in real time I need to go down here so in here I'm going to use the CMD bug class create a button on the UI the button won't be somewhere on the left side and this button won't set up the head down UV and the action trigger you won't use this function to our head down movie and after we apply it to our UV array we have to make sure we update our mesh mesh that usually equals UV essentially the UV array only gets sent to the graphics card once you apply it directly to the mesh this is a property and when he set this it gets automatically uploaded to the graphics card well it's another one body down and another one let's just say the sword sword UV and body down UV okay let's make the buttons under one another it's that in there and there we go yep we have our buttons in here and now we can modify the UV in real time boom there you go head down now it's the body down and now it's a sword yep as you can see we can easily modify the UV in real time and there you have it in this video we covered how to apply the correct UV to our mesh based on the pixel position in our texture and modify that mesh in real time based on this you can see how you could easily do sprite animations if you have a spreadsheet with various frames drawn rather than separate in body parts you would just automatically switch sprites in real time based on the frame rate of your animation in the next video we're going to cover how to add multiple body parts and size them accordingly if you have any questions post them in the comments and I'll do my best answer them ok see you next time