hello and welcome I am your code monkey and this is a quick tip for sorting sprites in a 2d game I usually work on a front topdown perspective sort of like pok√©mon red and blue which means that in terms of sorting that sprites that have a lower world position should appear on top of sprites that have a higher world position so this string here with a Y of three should appear behind this one with a Y of minus six and the player here should obviously update its sorting and show up in front and behind depending on its moving position okay let's start a new C sharp script name it position renderer sorter so in here we're going to have a private field for our renderer and we're going to grab it on the weight my regular equals game object getcomponent till time renderer we're using renderer so that in this case it can work with both the mesh renderer and the sprite renderer so the easiest way to calculate our sorting order is to have a number level function as a sorting order base and subtract our current position from it so let's create a private in sorting order base and down here instead of the update we're going to use the late update to make sure that this executes after this transform has moved and set my render dot sorting order to our sorting order base our transform position Y and cast this down to an end like that let's make our sorting order base serialized so we can set it in d ted etre and give it a default value of let's say 5,000 so now in here add it to all of our positions these are using the sprite renderer and I have the player here using a mesh renderer and since we were using the renderer it works with both types so let's test it out and as you can see the player is correctly showing up and then goes behind now the one problem that we see here is that it's changing on the players origin which happens to be about his neck obviously we want this to only change based on the characters feet so let's add a simple offset let's go back to our script and add a new private in offset okay serialize as well and default to zero and in here we're going to subtract our offset as well so now when we go up to our body and set the offset to 10 and now there you go it is pretty much correct on defeat it is changing I can move back and forth and everything is correctly being sorted so for another minor improvement we can add a toggle to only run once since all of these objects never move so it makes no sense it constantly updated every frame so let's go back in here and add a private ball run only once let's default it to false make it serialized and here if you have run only once then destroy this so now if we have run only once it will on the first update set the sorting order based on its transform dot position and this right sounds so it doesn't waste resources so we want to apply that to all of our fixed sprites so all of these will run once and then this script will destroy its own yep all the sorting is still correctly working and as you can see in here they no longer have that script great for another minor performance improvement let's just make sure that this isn't update every frame since it's probably not necessary what sad a private float timer private flow timer Max and put it at point one out so essentially this will only update every 100 milliseconds and on our lake update we're going to decrease timer by time comp time and if timer goes under zero and we're going to reset the timer and set everything the same so this way it works exactly the same but now it will only do the calculation every hundred milliseconds so it doesn't really affect much but so the effect is the same and every little bit helps and there you have it a very easy way to correctly sort your sprites in a front topdown perspective so if you have any questions post them in the comments and only my best answer them alright see you next time you