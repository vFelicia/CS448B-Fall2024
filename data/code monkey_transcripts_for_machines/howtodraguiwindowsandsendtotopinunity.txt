in this video we're going to write some code to enable us to drag you I wind owes won't be able to click and drag and as we do so they won't also be brought to the front let's begin hello and welcome I'm your code monkey and this channel is all about helping you will learn how to make your own games with enough tutorials made by a professional indie game developer so if you find the video helpful consider subscribing so this is something that is actually very simple to implement but some completely necessary if you have some sort of game that involves a lot of UI windows a lot of my games are management games which means lots of windows with lots of information and being able to drag and sort them is essential so we're here you can see that I've prepared a bunch of random windows they have no codes or anything special in them just essentially text and images they are set up with a very standard window format so we have a town bar and then the content of that window the goal is to be able to click on the town window and be able to drag the windows around okay so let's make our very nice script in here let's make a new csharp script and let's call this dragged window now let's have this script to the part of the window that we want to drag so let's see how the windows are set up so here's a window game object as you can see there's a tunnel game object then inside there's the background image and above it there is the text so those are the two simple components now in here a good way to set things up is essentially to make you title and then put the things behind it this way the title act is a nice container and I could even stretch and modify what's inside okay so on this parent game object and let's drag our dragged window script okay now in here the way we can do our drag is with the event system so we go up here and we add using unity engine event systems inside this namespace is where all the various event types exist over here in the editor you can see that when you create a new UI object it automatically creates the canvas and also creates a event system so this is script that handles only UI interactions now we can go into our code and then here to capture behavior in our scripts all we need to do is implement the various event interfaces so in this case we want to go up here and implement the I drag handler interface okay so this interface requires us to implement the on drag function so we can simply use the help of visual studio to implement interface and there you go the function so this function is called whenever the cursor moves while the player is dragging the mouse so just by implementing this interface the event system will automatically figure out that this script is using it and to call this function when the player drives the mouse so we're hearing let's just do a debug log just make sure that it's working okay so here on now let's click and nothing's triggered but now I move the mouse and there you go there's this dragging event as you can see it only fires when the mouse moves so just like this we are correctly capturing the event awesome now in order to drag our window the first thing we need is to actually know which one is our window since in here we had it our script onto the title but we don't want to move just the title but rather we want to move the entire window so here in the script let's add a nice serialize field for a rect transform and let's call this our drag rect transform so this is the rect transform that we want to drive and now we can go back into the editor here's the script in title and let's drag the parent window onto it just like that and now we go back onto the on drag and in here we simply move the drag rect transform we modify the anchored position and then we can use the event data and in here it has a very nice Delta field which contains the movement from the previous mouse position okay so just like that it should be working let's test okay so here I am now let's click nothing happens is out drag any up there we go the window is following along with the mouse so I click I move it now let go any of there you go the window now stops right great however you can already see an issue let's say I click right up here on the corner now I move it to the left and there you go it is no longer on top of the corner so the window is not perfectly following the mouse position now the issue in this case is due to how the canvas works depending on how you set up the canvas it won't automatically scale things up or down depending on your resolution over here this is the canvas setup that I'm using so you can see screen space overlay and here I have the canvas Candler using a reference resolution of 720p and matching with the height so let's fix our issue it's actually extremely simple all we need to do is increase by the Delta divided by the canvas scale factor that is the field which contains how much the canvas is scaled by so obviously in here we need a reference to our canvas okay so we have our field now let's go back into the editor now in here let's drag the reference here's the canvas and drag it on there okay so let's see the mouse position when we drag the window okay here we are let's grab right on the corner move it to the left any of their you it is perfectly exactly on the corner so where we grab is where the window gets tracked right awesome now let's just quickly apply the same script to these two other windows so again they are built in the very same way so they have a nice title game object so in here just passing the drag window now drag the reference to the parent rect transform and also the canvas and the same thing on this one so here we are now this one can be dragged this one can be dragged and this one can be tracked right great so just like this we already have our drag behavior working correctly now in here just in case we want to have some more complex behavior on drag there are two other interfaces we could implement in here we could add the begin drag Handler and there's also the end drag camera so in here just to test this out let's make our window transparent on begin drag and back to normal after dry okay so here it is some very simple code just to test these two events in here I have a background image and also have a feel for the collar grab the collar on awake then on be in drag let's set the collar alpha 2.4 so it's slightly transparent and we update the background image color and then on the end drag we reset the alpha back to 1 and we apply the color to the background so let's see this in action to see how these two events are being fired okay so here and let's try so I click nothing now I drag any of there you go the background becomes transparent and now I'm let go and you know it's back to normal so it is correctly capturing the on begin and on and drag events alright great so now you know how to implement these three behaviors but now there's one other issue over here being able to drag the windows is pretty great but as you can see we have a pretty bad issue which is the windows are stuck behind one another so dragging is great but in here in order to see what's going on in this window I have to drag it onto here and then this one in here ideally you want whatever you are dragging to be brought to the top so in here we can implement another event let's implement the eye pointer down Hamelin so here it is the on pointer down event so this function is going to be calmed when we press the mouse down well on top of this particular object so when we do that let's make sure that this window is on top of all the others now in here the way the UI handles visibility is by the order that they are in the hierarchy so for here this window is on the top of the hierarchy so it's the first sibling and as you can see it's behind all the others so essentially it renders this window then this and then this one so these two are on top of this one so in order to send this one to the top and we need to do is make it the last sibling and there you go just like that it shows up on top so that's what we want to do through code so now in here in order to send it to the end of the hierarchy we simply go into our drag rect transform and we call set as last civil so this moves the transform to the end of the local list alright that's it let's see ok here we are with that one on top so I move this one it's on top now let's move this one click any of there you know it's brought to the top now this one bring it to the top and then alright so we can now drag our windows and by clicking we can bring them to the top nerve to see what they contain ok so everything is working now let's see how we can make this nice script very easy to use right now in here it's pretty annoying to have to set all these fields directly and if we don't then we get a null error so let's try to make it so that the script automatically locate these references if they are not given ok so here we have the bare essentials for Dragon so let's start off by seeing if we do not have a drag rect transform so if it is no let's try to find it automatically if we only set our windows up following the same center then this is very simple essentially the drag rect transform will always be on this transform parent and we get the rect transform so if you only build your windows using this format where you have the window and right inside it you have the title which you drag if you follow this format then this won't work always so here we automatically get the rect transform for the dragon object and then we need our canvas so in here let's locate our canvas now the UI objects are always children of the canvas so in order to locate this canvas we can simply go up from parent to parent and we will eventually find it so in order to automatically locate our canvas okay so here we have a very simple one so we first start off with this transform parent so well it is not known because eventually we will reach the root so it won't be known but well it isn't no we simply try to we're have the canvas on that transform if there is a canvas attached to it then we simply break out of the cycle and if not then we go to the parent of that test transform so this won't either stop when it finds the canvas or reaches the root of our scene and just like that we've made this script very nice and easy to use so let's make sure that this works so here let's select all of the titles and let's remove all these references so now they all have known references and now let's run the code okay here we're on let's click and drag any of there you go it works perfectly so I can click new drag I can drag it comes to the front and it's draggable and this one and this one and everything works exactly as intended so just like this our scripted very nice and easy to use just add the script and don't even have to bother with any references the script is smart enough to locate the objects he needs to work which makes it extremely easy to use in any sort of project awesome as long as you can download the project from Xena Tony's from unity code monkey calm subscribe the channel for more unity tutorials post any questions you have in the comments and I'll see you next time