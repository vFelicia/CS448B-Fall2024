in this video we're going to explore the power of animation curves now don't be phoned by the name these are extremely versatile and can be used for just about anything we're going to look at three interesting examples of unconventional use cases for animation curves let's begin all right so let's check out animation curves now like i said don't let the name fool you this is an excellent feature that is not limited to just animation they are called animation curves but really they are really just curves and curves are just numbers so you can use them to solve a multitude of problems first let's see how they're used in the standard way and then we're going to see some more unconventional interesting use cases we're going to see how we can use them to define how much health to give the player as in levels up then see how we can use a curve to affect the speed of a dodge roll and lastly see how we can combine multiple curves and use them in an interesting enemy spawning system so we're going to see how the power of animation curves can be applied to those interesting cases now if you've worked with the particle system then you've already worked with animation curves so here i have a very basic particle system just a random explosion and then down here we have the particle system on the inspector and here for example if you expand over here the size over lifetime you see over here we have this one and this shows up down here and yep this is pretty much an animation curve so this one as you can see each particle starts off pretty big and then becomes smaller over time as we have in here we could add something put it down here and all of a sudden they become small then they become huge and then disappear and if there you go big small big so in this case the xaxis stands for the lifetime and the yaxis stands for the size so over here on the left side we start off with one meaning the original particle size and as time goes on over here we have one on the x axis so that's the end of the particle lifetime and at the end the particle lifetime we set it to zero size so essentially starts off big and then disappears so here we have a curve for the size then down here we have another one for the velocity over time so starts off fast and becomes slow and then constant and again you can add as many points as you want over here and it all becomes really strange really weird look at that yep very strange then on each point you also have various types so if you right click on both tangents over here you can set it to free and linear constant or weighted so you can click and drag this and see yep that's how the curve changes alright so this is the standard use case for animation curves you can very easily animated particles and various other systems however an animation curve really is just a graph with an x and y axis so you just have a graph and then on that graph you can place various points to create some really specific shapes and then you can use the x and y axis to represent whatever you want for example the x axis could represent the player level and the yaxis could represent an amount of help so as the player increases in level the health gets great and grid so let's see some interesting use cases of what we can do with animation curves let's start off with that example so over here i have a basic player character with a health bar and its current level and down here some stars where if the player touches them yep there you go he levels up so now level 3 level 4 and so on now let's say that we want the player to gain a ton of health over the first few levels and then we wanted to gain a smaller amount of health on the lateral levels now doing that manually setting each level and corresponding health value would be quite time consuming and very tricky to visualize and doing that with a mathematical function would also be quite tricky to come up with the accurate function to match exactly the behavior that we want so animation covers to the rescue first here is the script attached to the player so it's a pretty simple character controller and then there's a public function to set the health amount another one in order to get the level number we have these two functions and then we have an event that gets fired when the player levels up the implementation for how the player works doesn't really matter you can use whatever implementation you want i've already covered a character controller a health system and a level system in previous videos for example now the important thing is that we have this event and then we can ask for the level and then use this one in order to set the health amount so we have everything we need to implement our specific design now let's make a script to handle it so let's create a new csharp script name this the set health perm level here is the player game object and just drag the script onto it okay now here let me first grab that player script all right so i just do get component of that type of player okay and now in here let's first start off by making the animation curve so that's very simple the way you do it just private of type animation curve and let's name this the health per level animation curve right so that's it and in order to expose it in the editor let's add a serialized field all right now back in the editor and yep over here we have our script and there's our animation curve and as you click on it yep this window shows up so again here you can see we have an x axis and a y axis and you can zoom out zoom in pan around and do anything you want and down here you have some templates so for example make a linear increase now this one we're going to set it to be the health amount based on the level so down here the x axis will be per level and the y axis will be the health amount now if you want you can normalize all of your values and make sure that you work with something from 0 to 1 or you can simply zoom out and use the whole curve so for example let's say that on zero so on the first level we want it to start off at 50 health so you can set the points by either clicking and moving or you can right click go on to edit key and here set them directly so the time is the x so in this case we want on level zero and for the value we want it to be let's say 50. so at level zero he's going to have 50 health and then for this one let's edit the key put it on the end so for the time again this is the xaxis meaning the level so on 30 which is the max level let's put it at a value of say 150. all right so here we see our curve so at level 0 we've got 50 health and at level 30 we've got 150 and right now we have a linear curve so we have our curve set up now all we need to do is see how we can get a value from a position in the curve so over here in the script the way that we graph that is we access our curve and then we call the evaluate function and this one takes a time which again is the x axis so let's put it right down the middle so at 15. so this should give us the value on the y axis right down the middle of our curve so let's add a debug.log and test and if there it is and it does make sense so with our curve which we made a perfect linear curve right down the middle so at level 15 yep we have a hundred help all right so that's how you grab a value from a curve now let's connect this to the actual player so over here is the player component and the player has that event so let's just subscribe to the event and then when that happens we go into the player in order to get the level so this gives us the player level and then then for the player health and for that one we're going to go in the healthcare level animation curve in order to evaluate and evaluate on the player level all right so with this we have our player health and over here you can already see an error and the error is because animation curves works only with floats so the home curve is made up of float values so in this case we want to store an end for the player help so we can simply just do math.round to end so we just round down that value and yep we have our player help then go into the player and call set the health amount and set in this player help all right that's it very simple we get the health we ask the animation curve for the value on that position and then we use that value let's also do unlock for testing and test so debug.log on the player health as well as the level all right here it is let's test okay here we are and we have that amount of health and as we increase if they're going level two and level three and yep you can see that the health bar is increasing very slowly and very smoothly so writing like this yep we have all of our code working so as it levels up it grabs the new position from the curve and it applies that as to our health system down here in the console yep we can see that everything is working so level one two three and it always grabs the correct value okay so all the logic is working and now that the logic is working all that's left to do is to set the curve exactly as we want it so based on the original design we want to gain tons of health in the first few levels and then slow it down for the last few so let's also put the last few a bit higher so on level 30 let's put it at 200 okay so like this and now instead of being a linear curve let's set a point right down the middle so just double click and then move it let's say something like in here and then just play around this one maybe something like this and then click on that one and also set down set the handle kind of like this and yep like this it looks like a pretty nice curve so essentially in the first few levels we're going to gain a ton of health and for the last few we're going to gain a small amount of help okay so let's test so here we have that amount of health and as we grab you there you go increase quite a bit and quite a bit and quite a bit and yep it's growing quite a lot so by level 8 already have a massive health bar and as it increases as the level goes it's going to start growing by smaller and smaller amounts so at level 19 now if i pick up if there you go it barely moved so on the last few levels we no longer gain as much health as on the first few all right so with this you can see how easy it is to make the perfect curve to match your needs so thanks to the animation curve we set up a very interesting graph to our logic now if you're crazy you could play around with this even further so for example say on the first few levels yep the player gains a ton of health but then all of a sudden for no reason down there he goes back down and then back up so let's see okay so here it is and first few levels yep the bar is growing like a massive amount and after a while all of a sudden the bar starts growing smaller and as we keep leveling up yep there you go now the bar is slowly increasing and increasing faster and faster and almost at max level if there you go back into the maximum so as you can see some really really strange behavior but again it perfectly works so here's an example of something that would be very difficult to do either by manually setting on level zero you've got 50 on level one you've got 70 and so on so manually would be a ton of work and coming up with a formula to get this exact shape would also be a ton of work so using this using animation curves we made this work very easily alright so that's one example using animation curves to define how we give health to the player based on the level now let's look at another example so here i have a player character and i can move around normally and now this example is i'm applying it to the character roll speed so if i press space yep there you go he does a really nice notch roll and there you go moves around a bit and then stops so right now the wrong speed is based on a linear curve so it started off at a certain amount and on every frame it drops by a certain amount so let's see how we can modify this to use a animation curve to make a more interesting behavior so here is the player script again i covered the character control in a previous video so go check that out if you want to see how all this works but for our example we only need these ones down here so we've got a function that gets called when it starts rolling another one that gets called on every update in order to handle the wrong speed so it's in here that we're going to want to use an animation curve in order to make the world speed go down a bit faster so it drops the wrong speed then it applies it to the rigid body velocity and then if it's under a certain minimum it goes back into the normal state so let's use a curve first let's go all the way up here let's define a private animation curve this will be our roll speed curve and let's make it a serialized field okay so now we take this and then down here instead of using math to pick it down here when we start rolling we give it a certain amount instead of giving it a fixed value let's go into our wrong speed curve and evaluate on position zero so it's going to start off with that amount okay and then down here instead of reducing the roll speed we do the exact same thing we set it to equals and we're going to evaluate the curve and now in here in our case we are indeed using time for the xaxis so we need to keep track of the wrong time so all the way up here just to find another private fold for the roll time then down here when we start we start off at zero f and then here we increase by time dot of time and we evaluate at this position all right so that's pretty much it very very simple we have our curve over here we evaluate on zero so we should probably use the runtime to make things more clear okay so evaluate the curve and then as the wrong time increases we're going to evaluate on different points on the curve apply to the wrong speed and once it goes under the move minimum then it goes back into the normal alright so that's it now let's go into the editor and there we have our wrong speed curve so click on it and let's start off with a very basic linear drop off so not an increase let's put it pretty much what we had previously so right click in order to set this so let's put it on time of zero let's put it at 100 units so that's how fast it is moving and then on this one let's make it drop down to 40 and after one second so in order to automatically zoom we can either zoom back and try to find it or just close it and reopen and if there we go with automatically scales okay so with this we have a very basic linear drop down so on zero we've got 100 and down here we've got 40 and actually the wrong speed minimum is 50 so let's put it a bit under that so in here let's right click this one and set a4 and let's put 49 okay let's test all right here we are in rome and yep there you go it works pretty much the exact same thing as previously so just a linear drop off and yep it works pretty decent so this works all right but it doesn't really look that good so it's just a very boring very linear drop let's make it feel more punchy by starting off super fast and then quickly dropping down so let's start off faster than that so let's right click edit the key put this one at let's say 200 and now let's make the drop a lot more intense in the beginning so just here and just drag it sort of like this all right let's run like this so here we are and roll and yep there you go now it starts off faster and becomes slower the way we set it up we can also play around over here on the x axis so right now it's taking pretty much one second to do it and let's make it more punchy by taking much less time so let's say just half a second so here we are and yep there you go the roll is now feeling much more like a roll so it's a bit more punchy than the linear drop off and again like previously you can go crazy if you want so let's for example zoom out let's stretch this to the right and let's say start off then become smaller and then all of a sudden for no reason just becomes faster again and then slower again alright so that's a very strange curve let's see so let's roll and you look at that very weird so it rolls once then stops and rolls again so we've got a very strange double row again very strange but using an animation curve we can easily test and figure out if this makes sense or not so in this case this is strange but if you want to do it you can see how easy it is to do using animation curves alright so that's another example and as you saw very easy to add now let's look at the unless example so this one here is all about enemies so there's an enemy wave spawner and every certain amount of time enemies get spawned i can move around and i can shoot them so just like this very simple now right now they come in waves and every wave has the exact same number of enemies and all the enemies have the exact same health amount so we're going to make two curves in order to customize both the number of enemies as well as the amount of health that each one has so here is the enemy wave spawner and as you can see it's a pretty simple small script we just have a very simple timer count it down by a certain amount of time and every six seconds we are calling the spawn wave function and in here we are always spawning five enemies then we got the spawn enemy which takes a health amount so every six seconds we are spawning five enemies all of them with 30 health so it's very basic now instead of using a static number for the enemies per wave let's use the amount from a curve so again up here just to find a private animation curve for the enemy spawn amount curve and again expose it so we have this and then down here on the spawn enemy amount we simply go into the curve and call evaluate now here let's also add just a simple end for the wave index just run away we increase the index and we use that one to evaluate our curve and again this one requires an end so let's just do math f round to end round this float into an it okay so there it is very simple now back in the editor here we have the enemyresponder and again let's set the curve let's start off by setting again the time is the x which in this case is the wave index so on the first wave let's start off with five enemies and again close and reopen or to automatically zoom and let's add another point and now this one let's put it on wave two we're going to spawn seven enemies okay there it is and now again you can always right click in order to set it perfectly or you can just pretty much eyeball it so there we got the two let's move all the way over to the three and on the three let's put something like maybe 10 enemies alright so that's it on the first wave we've got five then on the second wave we've got seven and on the third wave we have ten so let's test here we are first wave with indeed five enemies so just kill them all and wait a bit and here comes the second wave which is one two three four five six seven yep there you go and now on the next one it should have 10 enemies and if there you go there's quite a lot more alright awesome and by the way the way that curves work is they become a constant so now since there's no more values after that point in the curve right now they won't always have the same amount so they won't always have 10. so after the curve ends it's just a constant of the last point alright so our logic for the spawn enemy amount is fully working now let's add the second wave for the enemy health amount so let's make another animation curve for the enemy health amount curve then we go down here and it's a spawn enemy function that takes the health amount so it's in here when we call it we suddenly do the exact same thing just evaluate on the wave index and again this one requires an int and yeah that's pretty much it so you can see how it's really simple to add some curves in order to make some really awesome behavior so back in the editor there's our two curves let's modify the enemy health amount and again let's create a point and first let's edit it put this on wave one let's start off with 30 health then let's make another point let's put it on wave 2 and let's put it on 50 health and then as we increase let's put just one more let's put it on wave 3 we've got let's say 70 help all right so using both of our curves we now have an ever increasing enemy spawn amount and an ever increasing enemy health amount so just a very standard pretty much linear difficulty curve let's test okay and on the first wave yep they have the small amount of health so just stuttering now on the second one there should be more enemies with more health and yep there they are more enemies with a bit more health and as we go into one more and if there you go now they've got even more enemies and even more health alright so the logic is all working now again with the logic working now it's the time to really play around with the animation curves so for example over here on the enemy spot amount let's say that on this curve let's edit it let's put it on wave three and on wave three let's just add just a single enemy so there you go that's the curve and then we go into the health amount and on wave 3 we're going to have essentially pretty much like a boss enemy so let's put it at like 500 so massive amount so start off with a small number of enemies increase then become smaller and then let's add another one afterwards let's put it on wave four and let's say we have three enemies and let's put them all with a tiny amount of hell so add another curve put it on four and this one let's say just 10. all right so this is the curve for the spawn amount and this is the curve for the health amount so you can see we've got some really interesting curves now let's see how this happens so here we are and first wave yep looks pretty normal normal amount of enemies with normal amount of health now for the second wave if there you go a bit more a bit more help but still a normal wave of enemies and now let's see the third wave and yep there you go we've got one massive enemy so just keep shooting and eventually yep there you go take him down and now for the next wave yep a massive amount of enemies all of them with pretty much no health so they all die with pretty much one shot alright so here it is and the logic is all working awesome okay so here is another interesting use case for animation curves you can see how easily we implemented this really strange behavior where we made some normal waves then a boss wave then a wave with tons of enemies and so on so you can imagine how you can expand this to apply this to pretty much anything you use in your game alright so these are animation curves as i said before don't let the name fool you they are awesome and can be used for much much more than just animations we saw three interesting examples first using them to define the health per each level then setting the row speed based on a curve and lastly using curves for the enemy's spawn amount and the health amount so i hope this video gave you some ideas on how animation curves can be hugely helpful in your own projects if you found this video helpful consider liking and subscribing this video is made possible thanks to these awesome supporters go to patreon.com unitycodemonkey to get some perks and help keep the videos free for everyone as always you can download the project files and utilities from unitycodemonkey.com subscribe to the channel for more unity tutorials post any questions i have in comments and i'll see you next time