hello and welcome I'm your code monkey and in this video we're going to expand upon our 10 minute game and make it into a simple RTS let's begin so on the 10 minute challenge I took a different approach from most people instead of making something from scratch I use that video to highlight the power of writing clean reusable code because of that we managed to make a pretty nice complex scene in just those 10 minutes essentially we made the base for a tiny RTS game we can spawn warriors and they move towards each other and attack their enemies now we're going to expand upon it by adding some workers to gather resources and then manually spawning all of our warriors we had an entire series on making the gathering I and here we're going to do something similar over here I have a gaunt node sprite this won't be our main resource so let me drag it onto my scene and I want to make it into a prefab call it PF resource node gold I'm going to place a bunch of them around here okay now I'm going to drag a crate which will be our storage in the tent which won't represent our barracks from where we're going to spawn our warriors okay so this is the scene we're going to make we're going to spawn workers from our storage they are going to mind going from one of these nodes and drop it back into storage that one give us gold onto a global game resource pool and then we're going to use those resources to spawn a warrior from the barracks and then the warrior won't move ahead and there won't be some enemies walking around in the position around here now in this video I'm going to quickly write the code and do a little overview so if you want a more indepth explanation of what I'm going to do check out together AI series playlist so let's begin by making a resource node class so a new csharp script this is our resource node which won't be our class that represents a single one of these resource nodes so in here let's make it a very simple class and we're going to have a constructor for the resource node and we're going to receive a transform for our transform and the public vector3 for our gets position which will return our transform position we could also place this as a component on the transform itself but this way we keep our code nice and separated this mess won't later be more complex but for now all we want is to create this class so we're not dealing directly with the transforms okay so with the base for a resource now let's make the worker we're going to do the same thing with it for the warrior so let's duplicate the base position movement handler class again this is one of my base class that was written months ago and lets me easily set up a character to move into a position so here let's make a function that won't receive the note that he's supposed to mine so make a phony void set resource node and I'm going to receive the resource note that he's meant to mine going to store it as an internal variable now let's also do some basic states like we did for the warrior so a private the noon for our possible States and for the worker he can be idle or moving to resource node gathering resources and moving to storage private state state and by default we start off at idle state equal state dot IO okay so on our update let's do a switch on our state case we are on state dot eyeball then here we're going to ask the game handler to give us a resource node so go into the game Handler and get a resource node we're going to make that function later and it will eventually return a resource node resource node we're only going to do this if our current resource node is equal to null so this is our phone resource node and then if found resource node is not known we're going to set our resource node to be the found resource node okay and finally if the resource node if it is not known then we have a resource notes and let's set the state to state out moving to resource node okay so then on the case state moving to resource node in here let's handle our movement we're going to test if the vector3 distance if the distance between this worker and the resource node docket position if the distance between the two is closed so let's say within five units then here we are close enough to actually start gathering so let's set these state to state dot gathering resources if it is not then we are too far so set the target position to be on the resource node that get the position okay so then on the case state not gathering resources when gathering resources let's play the mining animation and when we finish playing the animation let's set the state to state out moving to the storage and here we're going to get the storage transform which we're going to ask the game handler get storage transform then we check for the distance to our storage transform and if we are close enough then finally drop the resources and go back to idle so state equal state dark I don't okay okay so now we need to go into the game Handler and do these functions so back in the game handler let's go down here and make a public static this one is going to return a resource node we're going to receive a vector3 for the position so up here we need to add some serialize fields one for the storage transform another one for the barracks transform and an array for the goal node transform array then we're going to use the goal node transform array to create resource nodes so let's make a list of resource node which is the resource node and list and we're going to make this list in here on our start okay so we are cycling through the array in creating new resource node objects using each transform in the array so now we can go down here and later we're going to make it to return the closest before now let's just return a random one okay so we're returning a random resource node now the other function we need to make is to get the storage transform now we're simply going to return the instance dot storage transform okay so everything should be set for a very simple gatherer so I just go up here and comment out the spawning of the units and set a spawn a worker for the worker we're going to have another pre found so for the PF worker and let's instantiate them in here there's the worker he goes to the node he minds it and he goes to storage and back to node back to mining it and so on okay great so now that we have the worker let's make a game resources class to keep track of the total amount so let's make a new sea shell script call it game resources and here again a very simple class so let's make a private static int for the gold amount then a function public static void add gone amount I'm going to have an in for the add amount and go on the mount was equals yep then a function to try to spend so public static boom try spending gold amount so this will only actually spend the gold amount if we can so first we tested on the Mount is bigger than the amount if it is then we reduce the gold amount by the amount and return true if not then we return false ok ok so just for testing let's add a popup in here so for that I'm going to use the code mock utilities which as long as you can grab for free from unity code monkey calm so in here just for testing go into CM debug and do a text popup to say how much fun we currently have ok so we can now go into our worker and down here when you drop it off at storage let's do game resources and go on the Mount and we're going to add one gun ok so let's see if we see a popup saying one when the unit reaches the storage there he goes he's mining now he goes back to storage and yep there's the popup we have one gold now he goes mines another one goes and we got two ok good now let's make a UI to display the gold amount instead of using a debug popup so I'm going to go into the UI canvas and here create a new empty game object and we're going to call it the resources window in this window I'm going to put it on the upper left corner and add another empty game object for the gold amount text and it won't simply have a text and it will say gold and then a certain amount okay now let's make the script to control it so a new csharp script this will be the resources window in here on our private void awake let's grab a reference to the text component so a private text which is part of the Unity engine WI and on our private Lloyd update let's update the text okay so we should not be seeing the gunk curriculum displayed on the corner of our screen okay there's the go home saying zero now it drops it now it says one ok great so we now have a counter to correctly display the goal that we are currently carrying so now let's make some UI buttons to spawn workers and warriors so let's make another empty game object call it the unit construction window and here I'm going to play some buttons to construct them okay so here are some very simple buttons with a gold cost now let's make the clasp to handle unit construction so here is the unit construction system class we're going to first have a constructor and on this constructor we're going to receive all the prefabs that we need to construct now we're going to have a build queue so let's make a prevalent for the warrior cube count in order to do the construction I'm going to use the time tech system which you can check out the full video on so I'm going to need a private constant for the warrior construction tick max let's say in 30 ticks so in the game here where I'm going to initialize the time say system and now in here I can subscribe to it pantech system dot on tick and subscribe to that event okay now on the text if the warrior Q count if it is bigger than zero then we have a warrior in the queue so let's construct them if the tick is complete and let's construct them okay now let's have some functions to help us we're going to make a progress bar so for that we need a public float for the get warrior construction progress normalize this will tell us the progress of our current Warrior then some more helper functions okay so we have some nice humper functions the time was how many are in the queue if we are currently constructing and in order to add another one to the queue so now let's deal with the UI so here is the unit construction window now I'm here on our awake let's grab a reference to our button so a transform for the build warrior button and when I click on the button I want to add a warrior to the queue so I'm going to have a private for the unit construction system and that's what I'm going to use to trigger that function in a construction system dot add a warrior to the queue now we need a way to set the unit construction systems all it's editing here and finally let's add a progress bar to our construction so for that I'm going to use the UI bar from the utilities and I'm going to update the bar on our update okay so we should be able to construct and see the progress of the warrior construction so let's see okay so here we are now if I click on the warrior button yep there you go he is spawning and the bar is increasing when it gets the end yep the bar vanishes and the warrior is fun okay so now let's actually make it spin the gold in order to use it and let's make it so that we can also build some workers so let's simply get all this also for the worker so now in the unit construction system let's also add all this for the worker okay so we now have functions for the word and the worker so finally let's actually spend some goal nor to construct them so in here before we add these let's the finaland for the warrior cost and let's say it's two so in here on we need to do is go into the game resources and try to spend the gold amount we don't amount for the warrior cost and if we can spend this then we do add them to the queue and if not then we simply do a pop up so again use the CMD bug to do a pop up saying I cannot afford cost and do the same thing for the worker okay let's see it all in action okay I have zero goal so nope I cannot afford any of them so let me finish that one and I only spawn a warrior and yep there's the bar and as you can see the go into a spent I'm back to zero back to one and the warrior and yep there he is now I have five gone so let me spawn a worker there's the bar increasing and he's constructing the worker and after a while yep there you go a new worker respond and he's straight to work and there you go now we have two workers gathering goods and again I got more for another worker and now he's gonna get there and now I have more for another warrior and so on okay okay so our basic RTS system is working now what we really need obviously is some enemies which is exactly what we did on the previous video so let's just apply that and everything should be functional so on our start let's add some enemies on the right side so let's define a vector3 for the enemy center spawn position so over here in the editor and let me see a random point up here on the right side so about that seems okay so that's on let's say 270 so in here I'm going to spawn them on 270 zero and I'm going to spawn ten of them okay so I'm now spawning ten enemies around this point so now let's just change something on the warrior code in here on our closest function we are checking for the closest to this specific position now we want to add a flow to filter the values to only within a certain max distance so let's set a float for the max distance so here we're simply going to do a test for the vector 3 dot distance the distance between the position and this Warrior Diet position if that distance is further than the max distance then we're going to ignore him now by doing this we can go into our get closest and when it comes to our max distance if we are an enemy then we're going to only look for closeby opponents so let's search for a maximum distance of let's say 4 yeah if we are not an enemy so if we are friendly then let's look at pretty much an infinite distance okay so this way our warriors will always find the enemies but the enemies won't stick around that area until an opponent comes nearby okay let's test okay so here in my scene if I pan the camera to the right side you can see yep there's a bunch of enemies right there so let's go back and let's one a warrior so there he goes he's currently being spawned and when he gets to the end and the prefab is instantiated yep and he immediately finds an enemy goes towards it and those stand by and he only gets within position then they start fighting so he won now he goes for another one and now he dies okay so let's increase the target distance of the enemies a little bit and then everything should be working okay so here we are gathering some gold and let's spawn a warrior and there he goes he's being spawned he's gonna appear right in here yep he's gonna search for an enemy he's gonna head for this one since it's the closest once he gets here yep both of them went for him and he's obviously gonna die okay now we can go back up here and let's create some workers so we can spawn warriors faster so let's make a bunch of workers there's a second worker both them are mining gathering resources okay we now have four workers gathering resources so our resources are increasing quite quickly so now we can spawn a bunch of warriors and as you can see I can add them to the queue and when one and another one starts right away and there you go there's the other one he goes and he's fighting and actually there are two enemies in there so they are fighting and there you go one of them died another one died and there they go and now here are all my guys being spawn and now they are attacking them and they're going one by one so there you have it we expand upon the 10minute game by adding some workers resources and spawning of warriors and workers in the next video we're going to construct buildings give orders to units and make the enemy warriors roam around as always you can download the project files on utilities from unity code monkey comm if you have any questions post them in the comments and I'll do my best answer them subscribe for more videos and I'll see you next time