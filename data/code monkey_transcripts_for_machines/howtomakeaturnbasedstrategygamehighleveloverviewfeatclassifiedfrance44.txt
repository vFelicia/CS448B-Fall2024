hello and welcome I'm your Cod Mony here let's see a high level overview on how to make a turnbas strategy I will cover the basic Mechanics for how pretty much any game in this genre can be made then I'll also cover some mechanics specific to this game that I've been playing classified France 44 it's a really great turnbased strategy game where you control the French Resistance during World War II personally I love games with a gorilla and sabotage theme so this one definitely fits the bill I definitely enjoyed my time playing this it really pushes the genre forward with some really interesting Innovations I made a page on the website with links to all the various tutorials that I'm going to reference many of these are topics that I have covered in detail previously so if you like to make a game in this genre then hopefully this video and all of these links will help point you in the right direction what's cooking okay so let's see a high level overview on how to make a turnbased strategy game like this one here is the mechanic list that we're going to cover so naturally this involves a grid system it involves an action point system some ability some health an OverWatch system there's flanking spray zones Health multiple enemy types map data level scripting and a bunch more let's see how to build this type of game and actually if you're trying to make something in this specific genre and you're looking for a gu path if so then naturally try out my turnbas strategy game course it goes step by step starting completely from scratch until the final polish game it features many of the mechanics that we're going to see here so if you want a guided stepbystep path definitely check it out or if you prefer separate tutorials and I've also covered a lot of these in separate videos basically if you watch all these videos and you put them all together you end up with a game kind of like this one now the core of pretty much this entire genre is using a grid system the entire world is a grid the units move in a grid they should in a grid everything is on a grid I've made a series of videos on how to build a grid system how to create it from scr scratch add some generics then build all kinds of things on top of it and just in case you don't know a grid system is literally just splitting the entire world into multiple grid positions and then on all of those you can apply whatever logic you want making it grid base can help simplify some of your game design rules which lets you as a game designer have a bit more control over all the actions your players can take this is especially great for strategy games they allow you to make some very clear decisions but they're also very useful for many other things I've used my grid system to make a city Builder I've used it to make a house building system like valheim I've bu a nice mini Factory game I built a pixel drawing mechanic also a Tetris inventory game and a bunch bunch more I that grid system make it work with a hex grid so grid systems are really awesome they're extremely versatile I highly recommend you research them then in the case of this game the grid system is used for all kinds of actions like for example the movement and before applying the movement they really just need to know what grid position the player is clicking on that can be done with some simple math or just a basic recast I covered how to get the mosor position both in 2D and 3D in this video moving and then movement of course is going to have some kind of path finding obviously when the character moves you don't want the character to go through walls you can learn how to implement the ASR pathfinding algorithm in this tutorial so pathf finding is really crucial for making your characters move exactly where they're supposed to but it's also very important to work with next core mechanic which is the action point system specifically how in this game the characters spend one action point for each movement they do so in order to identify how far a character can move you need to find first of all the max move distance and then need to calulate the path finding for each of those points to see if they are actually reachable or not the other thing that characters can do other than just movement is do all kinds of abilities like shooting we have ambushed them attack so the game has to stored that ability data somewhere for storing all the data related to each ability like for example how many action points does it take to shoot a weapon of a specific type for that you can sort in a script objects script objects are really awesome they basically let you create individual objects that can sore whatever kind of data you want so they are perfect for things like defining types that can be types of weapons types of equipment or for example types of abilities with all of their related data this is another Super useful thing that you definitely must know about I've made a video teaching all about script objects and I've also used them in many scenarios like for example defining a crafting recipe I've used both a complex and a very simple one then I've also used them to Define weapon parts in my weapon attachment system and a bunch more so script objects are definitely extremely useful make sure you do research them if you don't know about them next mechanic is the stealth mechanic now I really like this one in the context of this game personally I'm always a fan of gorilla sty gameplay where you control basically a small team and you have to sneakily take out a very large enemy Force the game basically has a mechanic where you start off hidden and as long as you are hidden you can take out tons of enemies silently although there is also a really nice noise radius I like how the game gives you perfect information so before you attack you can see okay is this going to make me discovered or not as a game designer you always have both options do you want to give the player perfect information or do you want there to be some Randomness involved in both options are personally valid it just depends on what kind of game you're trying to make in this one you can see exactly how far the enemies will see or here so you do know whether an action is going to make you detectable or not you can see each enemy as they're pointing forward the cone of exactly what they're going to see and if the unit goes inside that cone then naturally the unit becomes detected so for this mechanic you really just need to define a cone by using the enemy's transform. forward that is going to be the forward Vector that is pointing wherever the character is pointing then using that you can do some math or perhaps fire some rast to find the grid positions that are in front of it then fire some more rast in order to find which of those positions are behind objects so do all of that to validate what exactly are the grid positions that are within the enemy's con of view so it's actually pretty similar to what I covered in my line of sight tutorial it's pretty much just in a grid the enemies also have some preset Patrol locations during this stage I'm going to talk about that in a little bit in the map data and level scripting another mechanic that many games on this channel have is an OverWatch system basically this is how you can set a unit to cover an area and if an enemy goes within that area they shoot it automatically building this is exactly like what I just said for the self mechanic so for the player you can choose where you want the OverWatch to aim then you do really the same thing fire a ton of recasts or do some math in order to find all the OverWatch grid positions and then during the enemy turn if they walk inside any of those positions the player automatically shoots yet another mechanic very common in these types of games is some kind of cover system so as you move your units you can get them behind either no cover or Low cover or High cover the cover basically impacts the hit chance that enemies have to hit you so call that hit chance is really just some simple math when attacking a Target when cating the accuracy if the target is in some kind of High cover if so then give a big penalty to the accuracy if it's on Low cover just a slight penalty and if there is no cover then no penalty always remember how really a lot of these games are really just about simple calculations the tricky part is really just balancing all these numbers make it a really satisfying experience to Define what count is cover for that you can have just a simple script on the object themselves just a script that you attach to something like for example a crate and on that script you can just store maybe an enum for defining the cover type then when initializing the grid you just do a rast to find all the objects on each grid position and check if they have that script and if so then they have that cover State on that grid position then when moving a character just check the neighbor grid positions to find what is the best cover available then this game also includes an interesting flanking mechanic basically if an enemy is behind cover but you move your units to a point where the cover is not obstructing in between the enemy and the attacker if so then that unit is flanked basically how you calculate if a character is flanked or not is really depending on if there's cover in between both characters so you can use a ray cast or some M to find all the grid positions between the attacker and Defender and then really just check if the cover point that is next to the unit if that one is in between both the attacker and Defender if there is and there's a normal thing but if not then that character is currently being FL and in terms of what flanking does again it's really the same thing as cover versus no cover it really just applies some kind of negative penalty to the accuracy so if a character is flanked then it's going to be much easier to hit it once again Sur only all just numbers to call in the accuracy watch your fire next mechanic is spray Zone and friendly fire now this is a really interesting mechanic basically if you have a character with rifle you cannot shoot through your own units without damaging them this makes the game have some really interesting decisions basically if you get two clothes up in personally in order to knife an enemy then if another character tries to shoot it you might shoot your own unit as well so that leads to some really interesting decisions on how exactly do you play the game as a player in terms of implementing this actually quite super simple it's really just a rast from attacker to the Target and see if any unit is in range so pretty much the exact same thing as fing out if it is fled or not check all the grid positions from the attacker to the unit and see if any of those grid positions that are going to be shot if any of those contain a unit whether it be friendly or enemy and if so really just apply the exact same accuracy calculations to all of them and if the character is using a weapon kind of like a shotgun or a submachine gun if so those weapons actually have an arc so any units within that Arc whether they be enemies or friendlies any of those are also going to get shot so once again all really the exact same logic the same thing as for how to find out if it is being flanked or finding out for the OverWatch position just get an arc and do a ton of recasts on all positions in order to find all the great positions and any characters within that Arc they're going to head head next we have health and morale now health is pretty simple you can really just use any basic health system for this like for example the fre one that I made quite a while ago it's a great system it's what I use in many of my games so definitely go ahead and just download it for free and use it the health in this game is really just an INT number Super basic but then this game also has a very unique very interesting morale system now the biggest frustration with games like XCOM is the dreaded 98% chance to hit that actually misses that one never feels good that always feels messed up so in this game at least characters have something called morale and if your shot misses it won't deal any health damage but it will still deal morale damage and if their morale goes under half then on the next turn turn they have fewer action points and less chance to hit and if their morale goes to zero they get broken and cannot take a turn personally I really think this is a great system a great mechanic a great addition to this gen it makes the game a lot less random and gives you more control over your own actions in technical terms the morale system is really the exact same thing as the health system it's really just a number that goes down slowly over time so you could use literally the exact same code you could use the exact same Health System just have a second health bar and have that one pretty much just always takes damage even if the shot misses then the game also includes several enemy types each of those with different stats and abilities and for defining all this you can once again use script objects you can Define some kind of enemy so class and in there place all the stats like for example how much health the enemy has how smart should be any special abilities and so on then we come to the map data and now this is always an interesting topic that can be solved in a multitude of ways the simplest one is really just have your Maps as prefabs so you build the entire map the entire world environment in a single prefab then thenly spawn whatever prefab for whatever map you're trying to choose then inside that prefab you can use empty game objects or other prefabs in order to define various positions this makes it really easy for level designers to set up the levels for example all of the enemy Patrol positions that I mentioned a while ago you could position an enemy game object either it could be the enemy prefab itself or just an empty marker that won't be spawned later you can do that then you just need to position all the points all the empty game objects for all the various Patrol positions where the enemy is going to go through just have the enemy script have a reference to all those points and when the game is running it simply just goes from one point to the next then to make it even more designer friendly you can create some simple editor tools to build this I covered how you can do that in two video tutorials there's one on the basics and one on how you can make a really nice cut scene tool and related to that is going to be in level scripting basically all the things that you want to happen in a level in a script manner things like spawning some dialogue or triggering a cut scene once again you can Define some empty game objects to define the trigger positions and then the code you can check whenever a unit moves if a unit reaches that specific R position if so trigger a cut scene or spawn some enemies for this kind of level scripting you can literally just make a simple class that you attach maybe to the map prefab that class will contain all the logic for that map including all the map position references by doing it this way each prefab is essentially selfcontained with the entire map as well as on the logic this is what I did in my turnbas strategy course for making the final level that level has some really interesting level scripting Logic for showing the rooms or waking up some enemies and all of that is handled examp like this next up we have the overall map so this is where you pick the next mission the interesting thing is how the map is actually split into multiple sections so the simple way to implement this would be with some kind of texture you can slice the entire world into basically different images and then you can dynamically color each of those that's exactly what I did for my game hyper knites which feature an overall map that you could conquer then for identifying where exactly you are clicking on for that you can really just make some simple colliders with a rough shape of each region and then just do a very simple mouse recast the characters also sometimes have them dialog it's really just some text and some video playing once again this is something you can build super simply by just finding some script B objects to store all data each character also has a skill tree these are skills that can be unlocked it's a very standard skill tree with some requirements they've got a cost and then also some previous skills that have to be unlocked before that one can be unlocked I made a tutorial on this topic quite a while ago that video is a little bit old the only difference nowadays is I would have built this system using scrip object instead of enom and then the characters can also equip some weapons and some visuals these can either give some bonuses or also apply some visual changes so for some kind of visual character customization you can watch my tutorial on that topic it can be literally as simple as just enabling or disabling game objects on a specific m is done okay so that's a hell level overview on how you can make a turnbased strategy game using this game classified friends 44 as an example I made a page on the website with all the tutorial links that I've mentioned hopefully with this hevel overview video and with all these tutoral links with that hopefully they can point you in the right direction if your goal is to build a game just like this one now if you're looking for a guid path then definitely go ahead and check out my turnbas strategy course it is literally on the making of This Jer it covers the making of game like this starting from absolute nothing including all the steps for making the grid system creating pathfinding algorithm set up the enemy AI the weapons the actions and much more the only thing is really that course is meant for more intermediate users so that course does assume you have some basic knowledge of unity and C so if you are a complete beginner then maybe start with my free kitchen chaos course or for learning the language itself check out my C course all right hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and I'll see you next time oh