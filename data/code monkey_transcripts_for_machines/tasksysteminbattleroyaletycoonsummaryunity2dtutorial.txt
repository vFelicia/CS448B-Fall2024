hello and welcome I'm your code monkey in this video we're going to view a summary of the test system from battle round tycoon series let's begin so the goal in this series is to make the task system as it's used in better morale Tycoon the system is very useful and it's used for most sections in the game like for the transporters or the cleanup of the arena essentially when the arena battle ends the system generates tasks for the quadrants that need to be cleaned and the weapons that need to be picked up then the workers pick up a task when they can and finally execute it this series will teach you everything you need to know to be able to implement your own task system with whatever task types you need so first we're going to create the test system class with a very simple task that tells the worker a position to move to then we're going to create a simple worker class that periodically requests tasks and executes them by moving to that target position in the second video we're going to make multiple task types with different parameters and executions we're going to have a test that tells the worker to go to a specific position and also a different task that tells the worker to play an animation after that we won't set up a complex test that involves the worker going to a certain position then playing an animation then executing an action so all of those together make up the behavior for the worker to clean up a sprite on the floor with that we won't then add the ability to queue and validate tasks that way we can add a task to the test system as soon as we want but we can also add a validate function where the tasks won't stay in the queue until it can actually be executed the next video won't cover a good example for how useful that is we're going to create a test type for the worker to grab a weapon and drop it on an item slot however before that task is executed the test system will validate it by making sure the Adam slot is actually empty and in the final video we're going to take our code and create two separate test systems with different test types so we're going to make a test system that has a task to take a weapon and drop it onto an item slot and then another completely separate task system which will have a task that checks if the item slot has an item and if so we rabbit and take it away each task system won't be completely independent and have one worker and both of them won't work in tandem as the first one drops a weapon into the item slot the second one won't grab it and take it away that shows you how you can combine multiple tasks systems with multiple task types in order to create some really complex behavior so that's a plan for the test system in background tycoon series it's a very useful system especially if your game involves ordering around multiple units the final system is quite complex but the videos go through each part of the system in a slow and clear manner so go watch the playlist and begin learning right now as always you can download the project files in utilities for each video in the series from unity code monkey comm if you have any questions post them in the comments and I'll do my best answer subscribe for more videos and I'll see you next time you