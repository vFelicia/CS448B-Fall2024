hello and welcome i'm your code monkey and here let's look at three methods for how to build a nice and simple scope zoom effect now this is perfect for any game where you have a reference scope with some zoom or maybe just any game where you have some binoculars where you want the player to be able to see further now like i said i'm going to cover multiple methods because there's multiple approaches we can take one is extremely simple but doesn't look very good another one is quite a bit more performant but might not look too good and the final one looks best but also has a certain cost so let's look at all those methods and then it's up to you to decide which one makes more sense for your game if you prefer a more guided path with stepbystep lectures then check out my complete courses learn how to make a builder defender game using sharp just like i make my own steam games or learn how to make games internally using visual scripting or learn all about unity with the ultimate overview course which contains over 13 lectures each covering a different tool or feature of the engine to help you make better games faster i'm always available in the courses q a section answering your questions every single day so check out all the courses with the link in the description okay so let's look at various methods for achieving a zoom effect over here is my demo scene i've got a symbol character and i can just look around i've got my sniper rifle and i can press a button in order to bring it up now for the assets over here this is the cindy studios battleground pack there's a link description if you want to get it and for my reference script it's very basic all it does is just listen to some input and then set the animator parameter to play the animation pulling the rifle up or down and finally just got a bunch of events which we're going to hook into in order to do our various methods now if you don't know about events check out my video on it they are super useful okay so let's start by looking at the very first approach which is the easiest one and possibly the very first thing you would try now as you know cameras have a certain field of view and the easiest way to zoom is simply lower that field of view so for this first method let's first get a reference to our camera and when the rifle comes up we simply change the field of view let's put it on a lower amount and when the rifle goes down let me simply reset it and then i just added some buttons in order to zoom in and out so we can also modify these so that's it extremely simple let's see how this looks okay so here it is everything looks normal i bring the rifle up and there you go it zooms in so the camera is lowering the field of view so everything is zoomed in and as i press the button while i'm in here zoom in even further zoom back and so on and yep there you go it does work now to make this look a bit better we can animate it with lerp just like i covered in another video so here's just some basic warp logic so there it is pretty simple i just got a target film the view and that's the thing that changes and then i'm just using a meth.larp in order to lower from the current one onto the target so here it is looking normal i bring it up and there you go a nice and smooth zoom and i zoom in even further and there you go nice and smooth all right so here is the very first method as you can see it's extremely simple all it does is it just zooms in the main camera now the main benefit of this method is it's extremely performant so you don't have any extra shaders there's no extra cameras it is also extremely simple to implement you'll literally just change the camera fov and that's really it but the main downside is that it doesn't look too good ideally you would want just the scope to be zoomed in but in reality the whole screen zooms in so that doesn't look too good but so this is the very first easiest method which does work now for the second method for this one we're going to use a shader in order to zoom in on the area behind it now i actually made a separate video on this topic because it turned out quite a bit more tricky than i expected so in order to make this work i just place down a sphere directly inside of the scope there you go it's a physical object inside of there now this is a sphere i just made it really flat and then it is using this custom shader as you can see it's a very simple shader pretty small what it does is it takes the scene color so that is the colors of the scene on top of this object then it uses the telling and offset mode and modifies the telling in order to actually zoom in and finally the object screen position so this is the tricky thing you can go watch another video to learn how this works in more detail like i mentioned in that video the main issue was with the object screen position so this needs to be dynamically modified as the scope moves within the screen so for that i just have this other script all it does is just grab the camera world to screen point and feeds it onto the shader so this shader won't zoom in on everything behind it so it just needs to be positioned directly inside of the scope and for the logic itself over here the scope is just attached to the object so we don't need to actually modify anything here to script the only thing we need is over here on the zoom out and zoom in in order to modify the parameter on the actual shader so we just do this in order to modify the float variable inside the shader okay so that's it let's test alright so here it is and as i bring the rifle up yep look at that nice zoom so i can name anywhere and get a really nice zoomed in view for example i want to zoom in on that exposure down there and there you go i can do a really nice zoom in and if i press the button i can zoom in even further alright awesome so it does provide a nice zoomed in view now for the pros and cons of this method now the main pro when compared to the previous method is the fact that it only zooms in on the scope itself just like it should so the area behind it stays nice and normal now the next pro when compared to the following method that we're going to see compared to that one this one is much better in terms of performance so we just got a shader effect the camera just renders once and now of course for the cons there is one potentially huge con depending on when you zoom in and you can see it exactly like that if you zoom in just a small amount and everything looks pretty decent however the more you zoom in the more pixelated the image becomes now that has to do with the fact that the image resolution is fixed to the normal resolution so what this shader is doing is really just increasing the size that image it doesn't actually increase the image resolution so the further you zoom in the more pixelated and ugly it becomes so if you want just a small amount of zoom then it works pretty good but the more you take it the more intense it becomes there's a character all the way over there and there you go which is a pixelated mess okay so this is the second method it's pretty good and especially it's very performant now let's check out the very last method you can probably guess what this method will be once again we're going to use the super awesome render textures feature i cover them in detail in another video if you want to learn more about them essentially you can render a camera directly onto a texture so for this third method we're simply going to create a new camera then we're going to position it right in front now here you could position it directly in there so directly in from the scope or you can position it directly in front of the barrel then you just zoom in by lowering the fov then you create a render texture so a new create create new render texture and over here for the settings the main one is the size so this will depend based on your player's resolution and how big the scope is on the screen so something like 10 24 by 1024 is probably more than big enough so you got the random texture and we just make sure that this camera renders onto this render texture okay we can already see that the render texture contains what the camera can see so this is really pretty much all we need now in order to display the visual inside of our scope we can just place a quad directly inside of the scope and then for the visual realm we just need to render our texture and there you go yep that does work that is a view of our zoomed in camera now there's only one slight issue here which is that our quad is a square but the scope is actually round so you can see over here it leaves on the corners so that doesn't look too good now one super easy way to fix this is with a simple alpha clip so here is a very simple custom shader all it really does is just takes a texture for the alpha clip mask and then feeds it over here onto the alpha and then also has an alpha clip threshold so you just need to go into the graph settings make sure you enable alpha clip and then you can feed in the alpha and define the threshold and if you do that and then over here on the alphabet mask if you select you see simple circular mask so something with alpha zero on the outside and there you go it does clip the edges so everything looks perfectly just on the center alright so the final thing is just in the script over here all we need is really the exact same thing that we did on the film the view camera so we can actually just reuse the script we're just going to drag a different reference over here so instead of dragging the main camera we're going to drag the reference to our actual camera that is rendering onto the texture okay so that's it let's test alright so here we are and as i bring the rifle up and if there you go the scope isn't even looking great now press the button or to zoom in even further and there you go it looks great so i'm looking there look in that corner yep looks great look at the character all the way over there yep i can see him and yep there you go the scope doesn't look great now for the pros and cons one of the pros is just like you said on this one i can zoom in exactly as much as i want and as you can see it doesn't have the pixelated problem like the previous method so i can clearly look that character all the way over there then this one also has an interesting property in that it works perfectly well even when the weapon is down so look at that even as i move i'm still seeing all the view over there so if i look all the way over here yep there you go you can see that my weapon is indeed pointed towards the barrel so that's an interesting nice bonus from this method now another pro is that since i'm using a second camera i can actually do some tricky things with it for example i can use a different post processing setup i can add a simple depth of field effect onto the main camera and with that since the render texture is close to the camera then it's not blurred but everything else is so there you go that's another very nice way so personally i think that this is the best visual of all everything else is blurry and the scope is really nice we're only zoomed in so i can see everything nice and clear then if you wanted you could push this even further in order to use a different post processing on the actual camera that is filming the zoom so you could essentially make the scope a thermal or a night vision while leaving the outer area looking normal now of course this approach does have one potential big con which is performance this is using a render texture in order to render the second camera so essentially the whole scene needs to be rendered twice for this to work now if you're making pc games and that's probably not too big of a cost but if you're making a mobile game then it does become a bit of an issue but if you can afford that performance then clearly this is the best method of all you've got two zooms one on the scope and one on the outside then you can zoom in further everything looks great nice effects everything looks awesome and again with this method when compared to the previous one you can zoom in a massive amount and everything looks nice and crisp alright so there you have it three methods for doing a rifle scope go with the first method if you need absolute performance or the simplest method possible go with the second one if you want to look a bit better than that and go with the final method if you want the absolute best visual as possible now go ahead and pick the right one for your game again if you're looking for a more guided path with stepbystep lectures then check out my complete courses alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and i'll see you next time