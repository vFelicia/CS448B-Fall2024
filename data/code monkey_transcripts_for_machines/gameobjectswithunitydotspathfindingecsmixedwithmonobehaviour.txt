in this video we're going to take our dodge pathfinding and apply to units built as normal game objects this is an excellent example of how you can mix dots with game objects by writing performance intensive operations with dots and the rest using normal game objects let's begin okay so here's our goal over here I have my normal unit just being idle this is using all of the normal systems that I normally use so it's my normal animation system running on a game object with a simple transform if I pause the game yep there it is you can see we have the unit as a game object in our scene so I can select it I can inspect it look at the children and so on here you can see I have the body which has a mesh filter and the mesh renderer which is how I run my animation system however we can also look into the entity debugger and in here as you can see we have a unit entity so the game object has a script which holds a reference to this particular entity then we use this entity in order to communicate with the dot systems back and forth so in this case we're using dots and Hinnom our path finding in super fast jobs then we get the resulting path back into our game object and relative fauit so over here as I click somewhere yep there you go the unit as a game object is moving around but the dots path finding code if we pause here it is we can look at the linked entity in order to see that it does have the path file component as well as the path position dynamic buffer so here we are using the dots path finding code we made in a previous video as well as the easiest path finding to work with our entities so make sure you watch those videos to see just how fast that's about finding is so again here we have the normal grid I can right click in order to make some walls then I can click and it commonly is a path using super fast starts path lining here we have a whole bunch of Units roaming around everything is done using normal game objects and motor behaviors except for the path finding which is running super fast code if you look in the profiler yep there's the path finding running on a first compiled job taking a tiny amount of time well everything else is running on mono behaviors so this is a great practical example of how you can mix game objects with dots in order to solve a very specific performance need this video is made possible thanks to these awesome supporters go to patreon.com/scishow Ginty code monkey to get some perks and help keep the videos free for everyone alright so this is our goal let's get to it okay so here we are in our starting scene over here I have a bunch of Units just roaming around the map and if we pause the game yep you can see there are no game objects in here so all of our scene is running using pure entities so this is the starting scene which is where we ended up after the EECS path fighting video so make sure you watch that video to figure out how we got here we have tons of Units just roaming around brenell everything is working with dots code so as you can see it's insanely fast over here we have a thousand units running at 80 frames per second alright so back in the editor here over here as you can see this is the unit that we were converting into an entity so now let's get rid of this one and instead I have here my normal unit game object so that has the normal components that are using pretty much all game object videos and if we test and yep there it is there's my usual character just sitting around playing an idle animation and if we pause and yep there it is we can see our normal game object with the body holding the animation mesh system if you want to learn more about how this animation system works check they don't like the description it's all about dynamic with modifying meshes in grunta okay so here we have our character as a game object now let's make an entity in order to connect it with our dots path funny now in order to do that we have essentially two options we can create the entity from scratch or we can use e conversion work phone since we're working with game objects let's go with the conversion workflow so here we have the unit game object and inside mode create an empty game object convinced our unit entity and here on let's just add the convert to entity script alright so just like this we're going to have this game object be converted into an entity and if we test everything still runs and if we look into the entity debugger yep there it is over here we have our unit entity and as you can see it was indeed correctly converted alright awesome so now that we have our entity being converted let's make a script in order to capture the entity as it's being converted so for that let's make a new you see sharp script and call this the converted entity holder so this krypton will hold the entity as its converted let's make sure we drag it onto the unit entity game object okay and open it up now in here we're going to hook into the conversion system so in order to do that we're going to implement I convert game object to entity I cover this interface and a few more in the dots at the prefabs video so check that out to learn more here this function is called when the conversion system is converting this game object into an entity so here we can simply store this converting entity and entity manager into a field all right so that's it so we store the converted entity and let's also add a simple debug log just to test that this is running okay that should do it let's test any up over here in the log we have our message so we know our code is running all right awesome okay so now we have this script which holds a converted entity and now with this we can interact with the DOS part of our game now let's make a script to handle our unit game object so a new csharp script and con with our unit game object let's drag it on to our game object okay and now in here let's simply start off by making a field so we can set our convert an empty reference okay just like this and now in the editor there's a script with our references and let's just drag this reference okay and here with this reference let's make a simple start and on start with UE debug log of the entity that is converted so let's also make a function to return our entity okay so here we are exposing our private fields and then in here we're doing a debug log on the yep Anthony alright so let's see this running any of their yo over here we have our log so our monobehaviour script is correctly accessing the entity that was converted awesome now as I said we have two options for making our entity now over here we use the conversion system so essentially we made a game object and automatically convert it into an entity so as you can see in here it works however one potential issue with that approach is that it converts the base components so we're here we end up with a ton of components that we're probably not going to need so over here the rotation the scale and welcome to world these are probably unnecessary so another approach we could have taken would be to manually create the entity through our character script in here so we would for example access the world default game world in order to access the empty manager and create an entity so another approach would be to use this in order to create an empty completely from scratch again both approaches work so I just wanted to mention to make sure that you know you have multiple options so just pick the one that best suits your yeah all right now that we've set this up we can interact with dots through the entity that we convert in any way that we want so here in our unit game object script let's do a simple update in our update let's test for a input get mouse button down so when we click on the elect miles button then let's calculate a simple path so for that if you remember from the previous video all we need to do is add the trance finding params component so here is the component that we use in order to calculate it we have this component with a start and end position and then we have the path finding component system which runs on all the entities that have this parameter and calculates a path so when we press on the left mouse button let's go into the converted and keyholder in order to get the entity and we also get the entity manager and now we use this entity manager in order to add component data on to this entity of type new path finding frames and we pass in a certain start position and a certain end position all right so here this when we press on the in left mouse button we're going to add a path diagrams onto this entity after we do that then our path finding system won't grab that entity and do all of its calculations and as it calculates that we also need the entity to have a dynamic buffer as well as the path file component so for those two we can easily set them up in the editor so I can the editor we have our unit game object and inside we have our unit entity and then here we can add our path position authoring component which won't add the dynamic buffer as well as the path follow and again here put it at minus one so for starters it has an invalid path all right so everything should be working let's test okay so here we are and first let's look into the entity debugger and here we are with the unit entity and you can indeed see that it has the path final component as well as the path position dynamic buffer and back in the game if we click any of their yo over here we have our path being correctly completed so we have the path home then we have our path 0 0 1 0 2 1 3 1 & 4 0 all right awesome so here you can already see the interaction between game objects and dots we have a game object which has a linked entity and through that entity we can add components then the dot system runs logic on those components and puts the result back in some other component and finally the game object can read those components with the camel 8 data so now that we have pathfinding being calculated let's make the game object actually followed that path and now here when it comes to connecting our game objects with our dots code we have a multitude of options so the question is essentially where should we have our connection should it be right on the path finding what we're doing here so just using it to call it or may be dots should also be responsible for moving the entity and the game object it just takes the entity position so we have several places where we can do our connection depending exactly on what our goal is we can use more or less of the dot systems as we prefer here I want to do it on the simplest way possible so all I want from dots is to complete the path finding and that's it I want the game objects with their normal monobehaviour scripts to handle movement and everything else so back in our unit game objects script let's make our follow code now you can do pretty much the same code that we're using when using dots here is our previously used path file system which was moving all the entities and let's pretty much copy all this so here our update let's put this and now it just fixes issues all right so here we have our path final code again we use the empty manager that we grabbed on this script in order to get the component out of type path follow and also the path position buffer and then we do pretty much the exact same thing the only difference is instead of using the translation value here we're using the transform position and everything else is pretty much the same and again we're doing all this inside a monobehaviour script with the game object world the only difference is over here at the end we need to actually tell the entity manager in order to update the paths also set component data so just like this all right so let's test ok here we are there's our unit and click and there you go there's the unit working as a game object but correctly following the path that was calculated in unity dots okay now let's make him phone with the mouse position instead so right now we're doing this one just sent him from a static 0 0 to a 4 0 and here we have the unit move our system that we made in a previous video which is validating the mouse position and doing all that so you can pretty much use the exact same code and let's copy all this all right so over here is the script we just grab the mouse world position we convert that word position into a grid position and validate it do the same thing for the starting position so using the transform table position and finally we add our path finding params component just like we were doing previously all right so let's test ok so here we are and click and yep there you go now the unit is correctly going from the start position to the mouse position so now since we're working with the normal game object I can use my normal animation system so for that the game object already has the character base script ok so there it is now again this implementation is going to depend on what type of animation system you're using for my animation system which again it is based completely on game objects and motor behaviors all I need to do is call this function with the move direction so this should be working let's see ok so here are and click any of their ego he goes to the target Mouse position and he's using the nice game object based animations and again we still have all the paths finally working so let's rightclick to make some walls and now it's time to go here and if there you go he completes a path and again if we pause we can see that this is indeed a unit game object so here in the scene there it is there's the game object but in the entity debugger over here we can also see our unit entity so we have a game object connected to an entity and the entity is being used to call it the path line so we have this working with one unit now let's add a whole bunch of them many appear we have a whole bunch of units they're all animated they're all working with game objects and they're all using super fast dots pathfinding in order to calculate their path so here you see how we can make a game completely using game objects and use dots only for very specific performance intensive operations if we look into the profile and yep there it is over here you can see our path finding running on a birth compound job taking a tiny amount of time so again here we have all of the units all made up of game objects using normal model behaviors and using dots for path line so this is a great practical example of how you can make schema objects with dots this video is made possible thanks to these awesome supporters go to patreon.com/scishow new code monkey to get some perks and help keep the videos free for everyone as long as you can download the project fountain utilities from Unity code Mikiko subscribe to the channel for more EMT tutorials post any question having the comes and I'll see you next time you