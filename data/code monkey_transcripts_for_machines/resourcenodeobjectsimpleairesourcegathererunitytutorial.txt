hello and welcome I'm your code monkey and in this video we're continuing our resource gatherer I let's create a resource node object to keep track of amounts and handle resource depletion let's get started so here's the scene so far we have our gather in here he goes to a gold resource node mines it whereas the resource drops it on the storage and it gets added to the resource bank in here so we're keeping track of the total resource amount but not the amount in each node let's make each node limited in order to do that let's first create a resource node object so make a new csharp script and let's name it resource node inside let's remove all this since we want a nice simple clean class and first let's make a constructor so a public resource node on our constructor we are going to receive the transform for this node and sort internally so a transform and call it resource node transform and we're going to store it internally all right now let's also make a public vector3 called get position and we're going to return our resource node transform that position we're doing this so we can interface directly with this object and never have to deal with transforms so we have our symbol class which is only in the reference to the transform now let's go into our game Handler and let's create and store a reference to our resource node objects make a private list of resource node resource node list we're going to instantiate it on our awake and inside we're going to add a new resource node for each of these goal node so we now have a list of resource nodes containing the references to these three transforms let's s just make sure that there are no errors in our code yep okay everything is still working perfectly fine now let's change or gather a eye to interact with the resource node object instead of a transfer the gatherer requests a resource node through this function which returns a transform so let's swap this out for a resource node and he won't return a random one from this list in here do the same thing for the static function okay so the game handler is now returning resource nodes instead transforms now let's go to our gatherer ai and here as you can see we got an error in here instead of a transform we are simply going to store a resource node object which is of type resource node instead of doing position we use to get position and same thing down here alright there are no errors in here let's test and see if everything is working exactly the same and yep everything seems to be working perfectly fine except now the script is working with our custom objects instead of directly interfacing with transforms so we now have a class to handle our resource node objects let's add a resource amount field to represent the amount of resources present in this node so make a private int resource amount in here let's start off with three and now let's add some functions to deal with that amount so let's create a public void grab resource and here we are going to lower the resource amount and after we do let's spawn a popup to see the internal resource amount in order to do that lets go into the using code monkey to use the code monkey utilities which is always you can grab for free from unity code monkey calm and in there I'm going to go into the CM debug class to spawn a text popup on the mouse position and I'm going to display the resource amount so whenever we grab the resource we lower the internal mountain we show a popup so we can see what value is in there let's also make a public boom has resources and here we're simply going to return if the resource amount is bigger than zero all right so we can now test if this node still has resources so back in our gather a I in here when we are playing the animation when the animation is complete it triggers this action and in here let's go into our resource node and call the function where I've resource so let's test and we should see a popup when togethererer finishes the animation there he is animation and yep there's the popup saying that it has to that one again has to now it goes back that one I should say one and yep there you go one okay great okay so we now have a counter representing the amount of resources in the note let's handle depletion we already have a function in here to test if the node has been depleted so let's test for that when looking for a valid node so on our game handler when the get resource node we are just returning a random one but what we want to do is only return if it is still valid so let's clone our list of resource node Tim resource node list equals a new list which is a clone of our resource node place this is just so we can do a cycle for int temp resource new list account and in here let's remove the invalid notes from this list all right so we are cloning our original resource list we go through the list and we remove the ones that do not have resources and return a random of the ones that do have resources except in here we also need to test if the count is bigger than zero then we return a random one if not then we don't have any resources left so we'll just return no so nothing is available now on the yellow Rai in here when we are looking for a nearby resource node previously we were assuming we always found one but now it may return null if there are none available so in here we are only going to switch the state if our node is not no so if we do have a resource node available then move towards it if not keep waiting okay so this should be working let's just go into the resource node instead of starting with three and let's start with just one and let's test there he is he goes he mines it now has zero goes back I guess this one mines and it zero again and finally that one mines and zero and now he waits because all of them have been depleted great we now have limited amount in our resource notes now I'd swap the sprite when the node is depleted so in here when we grab the resource mount let's test if it is 0 so if resource amount if it is under 0 then let's swap out the sprite so go into our resource node transform get our sprite renderer component and just swap the sprite to the depleted sprite which is in the game assets okay so I'm going to into my game assets class to grab the goal node the plaited sprite the game assets class was created in a previous video so you can check it out to see how this works essentially it allows me to grab a reference to this sprite object through this class alright so now let's see if the sprite changes okay there are years he minds and poof the sprite changes to this play that it has been depleted same thing for that one it's gone and I like that one's life ok great so as you can see the nodes get depleted now our codone trade supports the gatherer holding more than one resource amount so let's make him home three units and set the notes to also have three units so in our gatherer we are only going to move to storage when we have more than three units and on the resource node and let's also start with three units and we can now get rid of the pauper all right so let's test ok there he is mines once twice three times and poof it is now depleted and he goes in takes three two storage same thing for this one three times depleted drops three goes again three takes it there and it's the fleet so there you have it we create the resource node object to make our code cleaner and keep track of resource amounts in each node in the next video we're going to hand on player control if you have any questions post them in the comments and I'll do my best answer them subscribe for more videos and I'll see you next time