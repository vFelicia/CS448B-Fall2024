hello and welcome I'm your code monkey and here is a fun drag racing minigame you pick a car and opponent and go race step on the throttle when the light turns green change gears at the perfect timing hit the Nas and wipe out the competition it's a simple minigame that is very much inspired by the many drag racing flash games that I have played 20 years ago simple but very fun making this game involved building some interesting things like for example using animation curves for the gear ratios I use a nice 3D UI with some gear shift animations and a bunch of tiny effects to really sell these sense of speed you can look at these two shots where both cars are moving at the exact same speed and you can clearly see how one of them sells the sense of speed much better adding all of these tiny effects really makes a big difference I'll mention exactly what they all are in a little bit there is skill involved in this game so go ahead and download the free project files to see how fast you can do it the reason why I made this game is because right now there's an awesome sale happening on the synthy store pretty much all of their packs are currently at Half Price personally I love their low poly Style I covered lots of potential games you could build with these ads in the previous video and on top of the regular discounts they have a flash deal every week with an even deeper discount this week the massive discount is on the street racer pack which is exactly what I use to make this minigame this one has over a thousand prefabs lots of cars with tons of customizable parts you can swap out the wheels a paint job add some spoilers and so on it also includes a bunch of characters with tons of customization options and a really nice looking environment of some docs so check out the entire settle in the street racer pack Link in the description here let's see the game that I made pretty quickly using that pack I think in total I worked on this mini game for about 10 hours and the final result looks pretty great thanks to using these awesome assets you can download the project files for this game link description in there you will find two scenes one which is functional but only has basic Hues and a second one which is using all these assets if you pick up this asset pack just import it directly onto the project and all of the assets should load correctly okay so here let's inspect the game to see what we can learn from it personally see it in action so here it starts off with a simple car selector window I can pick any of these cars they all got varying different sets I can also pick the car from my opponent and I can also set the AI as either easy normal or hard so for example let's go with these cars and Let's Race here we are ready to go so let's start the countdown and there you go three two one and after the light yep going off now I'm changing gears I'm trying to change as quickly as possible There You Go Changing I'm also using the nas there you go super fast speed up and the camera is shaking the car is going super fast and yep there you go look at that I won all right awesome so now let's inspect all of this starting over here from the Carson liked window now this window is actually pretty interesting this window itself is a UI element but as you can see the cars are actually 3D so how this works is the cars are actually over on the side so if I go yep over here so on position zero two thousand zero over here are both cars with a basic animation just rotating them and then as you can see each of them has a camera looking straight at them and for that camera the way that is working is over here on the output instead of outputting to the screen it is outputting to a rendered texture now I cover the red detection detail in another video they are really useful so it renders onto this random texture and then on the campus itself over here there's a simple raw image showing that random texture the rest of this UI is on pretty basic I've got a basic button to change the car which modifies the visual transform and updates stats for the stats themselves they are stored in a simple swordball object so here is the definition pretty basic so just as a transform for the visual prefab the nazimont max the car Speed Max the acceleration and the brake speed then for the visual for these bars I'm just using some film images so it's just an image component with over here the image type set to film horizontal and here it has the film Mount although remember that in order to use this film the mount image setting in order to use this you must have a source image assigned if there is no Sprite here so if I click on delete nope like this you cannot access that so it needs to have a spread assigned over here I'm using the builtin white pixel Sprite if you search for it and you don't see it make sure on the top right corner you click on the eye icon that will show all the builtin Sprites so this I can select any of these cars I can select my car and click on race then here we are waiting for the player input before actually starting the countdown how this handled is by a very simple State machine so this is pretty much excellent like I covered in my free course for the game State machine for that one when the site is going to start then simply waits for player input and 30 counter then also just like in the free course I separated the only logic individuals so on this group there's only the logic for the countdown itself there are no visuals here and then I have another UI script and only this one handles all the visuals the images similarly change color as the timer counts on by the way like I said this game this was inspired by the flash games that I played as Akin so before I actually started working on this game I went to YouTube to look at some gameplay basically whenever you make a game or prototype definitely start off by doing a bit of research first study what other games in the similar genre have done see what works and what doesn't and then give it your own unique twist now for the car itself it's using a prebasic script this is pretty small most of the logic is really just on the update so we're only just about 100 lines this is really only a drag racing game so it doesn't need a complex controller it literally just rides forward and changes gears so over here I've got some simple throttle acceleration input then I've got some braking even though it's really only used when the outer brake is enabled which is after completing the race there's only no point in Breaking the middle then some input for changing gears and then for changing the nose now for the input as you can see over here I'm using a whole bunch of funks so these are delegates I'm using this instead of accessing the input directly I'm going to talk about this a bit more when I talk about the AI but basically it's the same thing that I used to record the trailer for my upcoming steam game Thinking Guardians go ahead and edit your wishlist so here the car controller is pretty simple just move forward change gears and use knots of it pretty basic the more complex part is actually how the gears work and how I handled that was with some animation curves this is a really awesome int feature that a lot of people don't know about they can be used for so much more than just animations I covered lots of use cases in a tutorial video here I'm using them for defining the acceleration curves to essentially handle the gear ratios so I've got all of these curves for each gear and here you can see the curve the vertical yaxis that one is the amount of acceleration and the xaxis that is the total car speed so over here on the first gear you can see it gets a ton of acceleration at load speeds but then quickly goes down if you're trying to use the first gear while the car is near the max speed then you won't get much acceleration then for the second gear it's pretty similar it also has a peak but this the peak starts off a bit more in front then same thing for all the other gears so all of them have a peak slightly a bit more ahead I basically just Googled car acceleration curves you can find all kinds of graphs on how the actual gears actually work basically on any graph there's a certain point where it's actually optimal to change gears to the next one for example here on the first gear it starts going down let's say around 15 to 20 percent of Max Speed it starts going down here with acceleration under 80 percent and then on the second gear you can see between 15 and 20 percent of Max Speed over here the acceleration is over 80 percent so technically around here would be the best spot to change this year now obviously let me point out this is definitely not a physically accurate simulation but for an arcade game this simple process actually works quite well here I am playing and I'm going to stay ages in first year so there you go going up and I'm not changing gears and yep look at that the max speed is actually not increasing too much so it's constantly still going up but as you can see the acceleration is super low whereas if I change gears and if they're going out speeds up quite a bit more so if I try to change gears a bit way too late so let's wait for that one to be really at the end and really at the end keep waiting and okay almost at the end let's see how long so 14.4 seconds okay now let's try again so now I'm going to swap gears a bit more around here which is a bit better so swap it out keep going and let's see how fast it goes and if they go 12.2 seconds so quite a bit difference this is where the skill comes in in a game like this and that is basically how the car works as you can see it's on pretty basic also by the way in order to get a value from the animation curve really you just get the animation curve reference and then you just call the evaluate function pass in the time value and it gives you the Y value then for the UI itself for this I went with a fun 3D UI basically I wanted to only use assets from the street racer asset pack and this pack really only has 3D models and no UI elements so I needed some kind of speedometer and I browse the snls and I found this boost gauge which by the way as you can see this is not exactly the one that I'm using so this is actually a great practical tip for you when you're using some assets from some asset pack remember that you can always take whatever assets are included in that pack and slightly modify them that's exactly what I did personally I have no 3D modeling excuse so I definitely could not build something like this from scratch but given something like this I can definitely modify it to get it looking a bit more example like what I want so I took this original boost gauge and then I just used Pro Builder which is unity's builtin 3D modeling tool this one is somewhat basic but it works great for these kinds of minor changes so as you can see I added a bunch more dashes made them a bit thinner I also elongated the needle a little bit and got exactly what I wanted oh also if you don't know how to make a 3D White just like this as you can see these are all 3D elements just like the other cars they are also played offset so these are on zero one thousand zero so just to be offset from the actual world all the way down there so these are regular 3D models and the way they are shown in the UI is they have a second camera so here I have another object so this is another camera and what you need to do in order to make this a secondary camera is over here on the render type instead of making a base camera make it an overlay camera and then you go back into the main camera itself and over here note how this one is a base camera and then down here you have the stack so this is the camera stack and you can hear at all of the overlay cameras so that way you have the main camera and then on top of that you get the UI camera this is a really interesting way of building a UI it looks great and also importantly with this method of using two separate cameras this second camera will not be affected by the all of the speed effects that won't be applied on the first camera that I'm going to show in a little bit now the rest UI is all pretty basic so for needle itself that one just rotates so that's just a basic rotation on the yaxis so all of it pretty basic the rotation is supposed to be based on the RPM also for calculating the RPM this is not a similar game it's more rkd so this is definitely not a perfect RPM simulation here for the RPM math I just did something super basic basically just went through the animation curve for the acceleration graph I just went through it and basically inverted so this way when the point of the graph is near the top that means low RPM and when it's down here close to the bottom that means Max RPM again not realistic but it's simple and it works actually quite well the DUI also has this basic progress track down here really just two objects moving alongside a normalized position value and then the noise gauge itself here it's a super basic object just got the nas inside got the nas tank and note how the pivot is on the bottom I covered how you can modify the pivot in another video basically it's all to do with how you are clever with positioning the child objects relative to the parent so over here the child object is offset above so this way I can modify over here the Y scale and make some super basic NOS capsule container then the more fun part of the UI is actually down here the gear shifter this one was actually quite fun to make with that additional looks pretty interesting I'm quite happy with this for the visual I actually made this myself it really is just a bunch of cubes in the sphere so this one down here is a cube the dash is over here they're Cube that one is a cylinder and that one is a sphere some of it's super basic but it actually looks quite well I think and the reason why it looks pretty good is because of the animation so here this object has a basic animated component and inside it I've got all the various animations so starting off on Neutron going for Neutron to first the second third and so on the animations are on pretty basic really just goes from one place to the other when seen in action the gear stick actually looks quite nice thanks to all of those interesting animations next for the car visual again like I talked about time and time again in my free course I made sure to separate the visuals from the logic so the car script that I showed a while ago this one only handles the logic and then I've got a separate script this one only handles the visuals so here it's got a reference to the wheels to rotate them the braking lights the exhaust smoke and so on this asset pack actually only has all of the car parts of them separated so that makes handling the visuals actually super easy all of these objects are all separated so I could even modify the hood I can modify any of these things if I wanted but the main one is really just down here the wheels so I've got the wheel objects and I can easily just rotate them in any direction although for this one even though this is simple I actually did have some issues the first time I tried to rotate I actually did it on the wrong axes which was pretty funny then I also had tons of issues where the rotation wasn't working working with rotation is always super tricky usually I prefer using Euler angles because I find them much more intuitive but it wasn't working at all the wheels would just randomly stop rotating at some point so we're here for the wheel on rotation Logic for this one I was actually forced to use good turnips by using this method instead of all our angles with this it actually fix the rotation so the wheels now rotate perfectly for the braking lights they are some very basic lights then here for the original logic just set them as active if the car is breaking so again separating the vision from logic so divisional as the logic script are you breaking or not if so then enables the visual then this asset pack also includes a whole bunch of particle effects one of them is this really nice smoke this one is only triggered when the car actually moves and this one as you can see it's pretty intense so for this one I want to enable it only when the car was essentially peeling out so for that I made some logic to identify that basically if it's on the first gear and if it's accelerating a bit if so then enables that particle effect and just in case you don't know how to modify a particle system through code this is exactly how you do it so you go inside the particle system you grab the emission so this is the emission module then you can just modify that object and you don't need to assign it back into the object so this one is a nice reference so just mod if I do whatever you want with it and changes all happen exactly I mean another small effect is the exhaust backfire so look at the exhaust down there as I change gears so as I change boom there we go there it is and there it is yep that's a nice subtle nice effect the way that works is obviously based on changing gears and here the car actually fires off an event when the year is changed and when it happens we only just set that effect to True pretty simple looks quite nice again the main takeaway from all this is really just separating the logic and visuals that way over here the car visual script this one is pretty Compact and the in logic script this one is also pretty compact each of them handles a different thing a normal logic and nice and contained then for the logic making the easy normally hard for this one I went with a super basic approach since this is really just a simple minigame basically I just played the game for myself and I saw where would I change gear so I intentionally played quite badly and then saw when I change gears so over here when speed is on 66 67 then over here like this and so on so I just did that and stored those values and then I saw those values in three nice scriptable objects so here I've got the easy and there you go you can see the max speed where it actually changes gear so that one changes from the first to the second gear when it's at 26 percent of the total Max Speed then the normal one is going to change a bit earlier and the hard one is going to change a bit more and here is the carrier script which really just matches these on what I did so once it gets to that point it simply swaps the gear and same thing for nose when it gets to that point it simply enables us now the more interesting part is how the AI actually use this inputs The Insider is related to what I mentioned a while ago which are these delegates over here on the car script basically both the player and the AI both of them use the exact same car script in order to control it there are these delegates so the throttle input the brake gear change and the NOS now if you don't know about delegates I cover them in data on another video basically I have these delegates on the main car script and then I have the car Ai and the car player script which actually sets those inputs as you can see for the carplayer for this one does use use the input so the inputs from the player so the usual stuff and for the car AI script it receives that as so with all those values and simply uses those to drive the actual car this way the base card script is shared between both of them which really simplifies things the ion logic really only exists in this one's where this is exactly the same thing that I did in my upcoming steam game dinky Guardians in order to record the announcement trailer right now the game doesn't yet have multiplier implemented so for controlling multiple characters for the trailer for that I made some simple AI Bots to do exactly this so I can control the characters myself or I can have the ad control them of them using this exact same method by doing that through delegates which can be based on player input or some AI by the way go ahead and add dinky Guardians to your wishlist and now for the really fun part the speed effects these are a bunch of small effects that when you put them together they really help sell the sense of speed here are two shots side by side we can easily see the massive difference some of these effects makes this is the same thing that I always say which is how publishes what separates good games from great games adding just add a little bit of Polish to really sell the sense of speed really takes this game to the next level so let's see all the effects that I added don't let you guys don't being handled by this script again to bring the visuals from the logic now the most obvious one for getting that since the Sweden is changing the field of view so here if I were to position the camera right behind the car also by the way one quick tip you can actually modify the film review for the scene camera itself just going to the top right corner and yep over here you can modify the Field view so with 14 it looks like this so if the car was moving it wouldn't work decently fast but as I increase it just like this the edges are much more distorted which really helps out the sensor speed so that's exactly what I'm doing over here in this script now I covered how to modify scene machine parameters through code another video here you can see that I'm grabbing the reference to the version on camera and then over here on late update I'm grabbing the Inland settings and just doing a simple math F download in order to interpolate between the minimum field of view and the maximum feel on The View and going to do that based on the car speed normalized so this is really just the current speed divided by the maximum mean so as the car speeds up the film The View goes closer to the maximum so it goes between 40 fov and 100 fov which is pretty intense then the next effect is the camera position if I just have the camera looking straight from the side and over here I increase the fov that really doesn't change much so the second effect is as the fov increases as the car speed increases the camera also slowly goes behind the car that's this simple line right here so we just grabs the send machine transposer from the virtual camera which by the way this is how the main camera set up so as you can see it just has a transposer so all of it pretty basic by default it's looking from the side so with the phone offset with X and Y and zero on the Zen and then once again it interpolates the values between minimum and maximum based on the car speed normalized and those values are up here so it starts off flowing from the side and ends up looking pretty much from behind and the final effect is the screen shake so for that over here on the virtual camera right over here a noise a basic multichannel Parlin so it has a certain amplitude and frequency and again over here through the script trying to do the exact same thing so it basically gets that multichannel purling it gets it through here the gets in machine component gets sound and when again the exact same thing just using mathapp.orp with the car speed normalized in order to go from 0 to the maximum basically as the car goes faster it's going to shake the camera more and more with all those tiny things as the car speeds up the camera goes behind it increases the fov and starts shaking which really helps out the sensor speed again looking at the side by side you can really tell the difference so I can only say polish is what separates good games from great so definitely make sure you spend some time punishing your games to really make them shine put all that together and this minigame came out quite well nice small and fun go ahead and download the free project files and try to beat my time again the reason why I made this game is because this street racer pack is currently on the flash deal on the synthy sale if you have any idea for which you need a bunch of cars and racing things then definitely check it out the pack has tons of stuff so you could make game like this or maybe make some kind of car mechanic game maybe something like crazy taxi or really just a basic Racer the project files for this video includes one scene without assets and one scene which will automatically allow the racer pack if you import those into the same project beyond that check out everything else on the Cindy store if you like their Style just like I do then definitely give it a look there's tons of awesome stuff on all kinds of themes that you can use to make an endless amount of unique games alright I hope you found this video interesting thank you for watching and I'll see you next time foreign