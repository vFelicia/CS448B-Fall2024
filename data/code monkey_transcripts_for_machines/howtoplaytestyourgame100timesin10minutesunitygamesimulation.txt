in this video we're going to look at unity game simulation this is a fascinating tool that lets you quickly and easily test your game with a variety of parameters you can create a simulation to test your game a thousand times and they will all run in the cloud in parallel so this helps you save a massive amount of time and money let's begin this video is sponsored by unity alright so let's take a look at unity game simulation unity game simulation provides a scalable way to increase the accuracy and efficiency of your qa and game balancing testing efforts by simulating millions of game playthroughs and interactions in the cloud this is a feature that has the potential to be life changing for many small and large studios game balancing and testing is either very time consuming or very expensive or really both normally when testing your game you need to actually play the game so for example let's say you're testing a new weapon and you want to find out what is the best parameter for the damage amount so you set a value then you go play through a level let's say it takes you 10 minutes you get to the end and then analyze if you need to increase or decrease the damage amount so you change it and once again play through the same level and once again analyze the results so right away you can see how much time this home process takes the other approach is hiring some playtesters doing that they can all play at once which saves you some time but naturally that costs you money unit game simulation solves that problem by running multiple builds running at the same time in the cloud using lots of parameter combinations so you input testing parameters upload the build and wait for the cloud instances to finish all the tests and then analyze the results now as you look at this overview you might be asking the question okay so does that mean you need to make the game play itself and the answer is yes the game does need to play itself automatically since it's running on the cloud now in order to do that you have essentially three options the first option is just a fixed series of commands so for example if you were testing a tower defense game you would say at this number of seconds you place the tower on this position then after 30 seconds you place in another position and so on so that's one approach however this option really only works for games that have a relatively fixed design without much randomness so tower defense idle games possibly even some management games and so on if your game is more dynamic then you have the second option which is to make some classic ai so for example on a topdown shooter you would write a classic app for the player just like you did for the enemies so keep trying to reach the goal and look for any nearby enemies and kill them this is the standard ai that every game has to make except in this case you apply it to the player and lastly the third option is the more complex but also more versatile which is to use machine learning machine learning is a whole nother entire topic and something very interesting and very powerful so let me know in the comments if you'd like to see a video on using machine learning in unity essentially the way it works is you give it some parameters and learns how to play the game now depending on your data set and how much time you give it to learn it can be much smarter and faster to create than classic ai again unity already has machine learning called ml agents so let me know if you'd like to see a video on that alright so that's the overview of how unity game simulation works you make your game then you define some parameters you want to test you make a bot to play your game using any of the three methods then you upload the build to the cloud and define the parameter combinations you want to test you'll let the cloud run the build insanely fast with tons of instances running in parallel and then when it's done you analyze the results and apply them to improve your game there's links in the description in order to learn more about unit game simulation alright so now let's see how to actually use it in the simplest test possible okay so in order to get started first you need the unity version as of right now this is only working with the 2019.4 lts version so use that one so down here i already have 2019.4 installed and also the instances on the cloud are running on linux so when you install the unity version you also need to add the linux build module so here i already have 2019.4 with linux install alright so we just want to create a new project with this so over here create a new project and here i just want the most basic thing possible so let's just go with an empty 3d project let's call this unity game simulation alright so here we are in an empty project now in order to install a unity game simulation if you're watching this in the future then chances are you can open up the package manager and then here on the unt registry go down and look for the game simulation package however as of the time of this recording it does not show up here yet so we need to manually add the package which is very simple just close the project go into the project folder where we created the project and here go inside packages and you see the manifest.json file so edit this with any text editor so here i have it open in notepad so just go all the way down here and we're going to add a new line and it's going to be this one here just be careful with the comments so on this line you add a comma then you add online and on this one no com alright so this will add the game simulation package to our project now again like i said if you're watching this a long time in the future then chances are has already been added to the package manager and also if you're watching this just a little bit in the future make sure you check the link description just in case this version has changed okay so with this let's close and save this file and open the project again and now it should automatically download and install the package and you can verify that it installed correctly if you go up here on the file bar go into window and you see the game simulation button so there it is it's correctly installed now click on it and now here we see the game simulation window and right away you should see this message so this is telling us that we need to create a cloud project id in order to be able to use game simulation so let's dock this window down here and let's go up here into window then go into general and open up the services tab yep that one and now here just select your unity id and hit on create alright so that's it very simple now we have a cloud project id and down here on the game simulation we do see the correct window so what we have here is a simple interface to define all of our parameters and then to upload our build to the cloud so without touching anything if we just try running our game and we open up the console yep right away we see some messages in the console so everything is working all right now like i said let's make the most basic example possible so let's just move a cube towards the target area and then our parameter will be the movespeed so on our hierarchy let's just create 3d object make it a cube all right here we have our basic cube then let's make another one next to it this will be our target so just make a simple material all right so we have our basic cube and then we have our cube target and on the collider let's make it a trigger and essentially we're just going to have the cube move towards the target and when it enters the target trigger then we have our win now in order to make the trigger event work on our cube let's just add a rigid body component and let's disable gravity and make it kinematic so let's make a simple script this will be our player queue so just attach our script onto our cube just like that all right so now here let's make a simple update and on update we're going to move transform.position plus equals let's move it to the right so new vector3 one zero okay we're moving to the right let's do it by a certain move speed so let's define up here a float for the move speed and let's default it to a certain amount all right so by move speed and also by time dot delta time all right so we're moving it just like this and our testing results will be based on the total time so let's also store that just a private float for the total time and on update we simply increase it by time dot delta time all right so we have this and now with this right away we only have a single parameter however the big benefit of game simulation is when combining multiple parameters so let's just add another simple parameter let's make it a private float for the wait timer so essentially it won't wait for this amount of time before starting to move so if the wait timer is above zero then we count down and when it's under zero then we actually move our object so very simple then we have our win condition so let's make a on trigger enter so when that happens then we have won the game so here let's just do a debug.log say when and then our total time all right so that's it this is our very basic test let's see here we are and after one second the cube starts moving moves forward and yup enters the collider and we have our win message all right so far so good so here we have our very simple scene now what we want to test is define a parameter 4 in the move speed another one for the wait timer and then we check the total time for each move speed and wait time or parameter combination so for that let's go into the game simulation window over here on the parameter setup let's click down here to add another parameter so here we have a name so for names will be our move speed for the type this will be a float and now here we have the default value so let's put the same thing that we use so let's put in a5 now in here it is very important that the default value is a valid value the game needs to be able to work using this value when the cloud build is validating it won't be using this one in order to make sure it works so for example in this scenario we want to test to make sure that move speed is valid so that it reaches the goal so for example if i were to leave this at zero then it would never reach the gold and the build one found it so make sure this is a valid value so we have this one and let's make another one for the wait timer and again it is also a float and let's default it to one and after you set on the values don't forget to click on save this is now uploading all the parameters onto the cloud project id all right so here we have our parameters now let's actually use them so back in the code here first thing we need is to use the simulation namespace so we add using unity.simulation.games then let's make a private void start and on start the first thing we do is fetch the configuration for this game simulation so we go into the game scene manager we access the static instance and then we call the function fetch config so my name implies this one fetchy configuration with all the parameters so this one takes an action which is a delegate that gets run when the download is complete now if you're not familiar with delegates go check the video link in the description where i cover them in detail so it's an action that has a parameter of game seam config response so let's make it in here all right we have this function and this will be our donut all right so we access the game scene manager instance we tell it to start downloading in fetchy configuration and when that's done it's going to call this function so it's called in here and then in here we can access this object so the game sim config response and here we have a whole bunch of functions to get all of our various parameters now in our case we define two floats so just call getfloat and then we pass in the name for the key so first of all we have move speed and we set our move speed to this one and then the same thing for the weight timer and we set it to this one all right so that's pretty much it for setting the parameters now one thing is we only want the game to start playing after the download has finished and after we apply our parameters so let's make a simple boolean to define if the game is ready to play so here just see simple private goal is ready and let's default it to phones and then on update if we're not ready if not is ready then we simply return so we don't do anything and then in here after we finish the configuration we set is ready to true and that's pretty much it so we start off it is not ready so it's not going to run anything it's going to first wait for the configuration to finish downloading when that is done we assign all the various parameters we set it to true and we start actually playing our game okay so we have downloaded our parameters and now down here we have our win function so it's in here that we set the result of our testing which in this case we want to save our total time so in the game simulation api the output results are called counters so again we go into the game scene manager to access the static instance and then we can write counters to see all the various functions so we have one where we can increment one every time then we have an ability to reset a specific counter we can set a counter to a specific value or we can also take a snapshot of the current state of all the counters so this one saves the current state of all the counters at this point in time so in this case we just want the most basic thing which is setting a specific counter to a specific value so we just call this then for the counter name in here and let's say our total time and we pass in the total time now here one very important thing is the type of the second parameter as you can see this one is long and it only supports log now if you're not familiar with long it's essentially the same thing as an int meaning that it stores whole numbers the difference is it has a much wider range since inside are stored in 32 bits whereas the log is stored in 64 bits but like i said only whole numbers so we cannot use a photon here so one approach would be just to cast this into a loan so this works however what this does is it force the value so for example if our time is 1.9 we end up storing just one now depending on what you're trying to test this can be just fine so for example if you're testing the time to complete the level that is usually about 10 minutes then a precision of one second is probably enough however in our example this scenario won't run for less than 10 seconds so a bit more precision would be helpful so the easy solution is just to multiply it by a certain value like let's say by a thousand so in this case our time will be stored in milliseconds all right so that's it we are saving our counter now the last thing that we need is to make sure that the game quits so to do that we just do application.quit this will stop the game which won't free up resources in the cloud in order to allow another instance to run its place however while we're testing this in the editor we really don't want it to quit itself so we can add a simple compiler if so if we are running in the editor so we can use unity underscore editor so if so then we go into the unity editor namespace in order to access the editor application and simply set is playing into fonts so this will automatically stop the editor and if we are not running this in the editor then we simply call quit all right so that's it and with this we have everything set up so the first thing we do is we fetch the config then we grab one of our parameters and we start our game and when we have our win connection then we set the counter to save our actual value and then finally we quit the game okay so everything is set up let's go back into the editor and in here before we upload anything let's first try playing the game okay here we are with the game running and down here you can see what it's doing you know it's moving and it quits and yep there you go perfect so here you can see everything that happened so it started fetching the app config then it grabbed it and you can see that it grabbed the default value so wait timer of one move speed to five then it ran the game ran the simulation we got to the end we wrote the counters files and we quit the application alright so everything is working now just go into the game simulation window and in here let's go into build upload and here this will create and upload a linux build for our simulation so make sure you take whatever scenes you have here i just have this one and also let's make sure we save it just in case there are any changes and then just give it a build name so here let's just make it test unity game simulation and that's it and let's just do build and upload so like the name implies it is now making the linux build and then it uploads it to the server all right it's done the build has been uploaded you can see over here on the console there you go build succeeded and it correctly uploaded now when that is done you can go here and click on the create simulation button so this will open up the browser to the game simulation dashboard or alternatively you can go there manually so just go directly onto gamesimulation.unity3d.com and here you see all the various project lists so in our case we have the nt game simulation so here we are and this is a list of all of our simulations for this project all right so now we click on create simulation which will take us to the same place as clicking on that button in the editor and over here we can start off by giving it a name so let's give it something like the first test then we select our build from the drop down menu right now we just have one so it's not like this one and then down here we have the really interesting part which are the various parameters so you can see that we have the move speed and the weight timer both of our floats and then in here we have the crucial part of this whole system which are the values for these parameters so in here we can input all the multiple values that we want to test so for example we want to test with the move speed of 5 let's also test with a move speed of 3.5 and let's also test with a move speed of 6 and then on the wait timer let's test with a wait timer of 1 and a wait timer of 0. so each of these will be different distinct values that the simulation won't run with and then down here we can see the number of parameter combinations so we have three possible values in here and two in here so we have a total of six possible combinations so for example the first one will be with move speed of five and with a weight timer of one the next one will be with the movement of five wait time of zero and so on then this setting is the number of runs per each parameter combination so let's set it for example at five so this will run five instances with a move speed of five and a wait timer of one then it will run another five instances with a move speed of five and wait time of zero and so on so using that then we have our total number of runs and then down here we have the max runtime per run in minutes so after this amount of time the build automatically terminates whether it is finished or not now in this case we're testing a very simple example that will take something like 10 seconds per run so let's put it just a simple minute all right so that's it these are all the settings now just click on run to queue up the simulation and if there it is over here we have our simulation all right now all that's left to do is we're only just wait now naturally this will depend on the complexity of the simulation so in this case it should take probably about 30 minutes so i'm going to wait a bit and get back to it alright so here i am a bit later and the simulation has completed so in here we can see our status and it is indeed complete and we can see how many minutes in total the whole simulation took and then we can download the reports so over here we have three types we have raw data aggregate data and plato logs now the raw data contains all the data separated for every single run the aggregate data groups the multiple runs we saw before and the player logs lets you access the unlocks for each individual instance now these are all standard tsv files so just text separated by tabs you can open them in just about any spreadsheet program like for example google sheets so here imported all those files into a symbol on google sheets so here i have all those files nicely imported and first of all we've got the player logs so this one contains a link and with this link you can download the log for each specific run so for example run over here number seven and here it is and you can see it's a standard unity log so for example if something goes wrong and a bug happens in your build you can go through the logs to see exactly what happened then you have the raw data so these are the raw results for every single run so for example we can see all the parameters used so on this run right here with an id of 22 it ran the simulation with a wait timer of zero and a speed of 3.5 and end with a total time of 2500 so again the counter is always long so remember that we multiplied by a thousand so essentially with this move speed and wait time of zero it took 2.5 seconds now you can see how some parameters are duplicated so multiple with weight timer 0 and move speed of 3.5 that is because we set it to run five times on every parameter combo so we have a single line for every single one of our runs and then we have the aggregate results and now this one it aggregates the results of each specific parameter combination so over here we have all of our various combinations and then our aggregate data so you can see the average the maximum the minimum the standard deviation and the sum and how many instances ran with this parameters now in our example we didn't have any randomness so the only difference here is just based on the time dot delta time so the differences here is pretty much just random noise but in a more concrete example this would give you some very useful data and again with all this then you can make your conclusions and figure out what to do about it now in our simplified example the results are pretty obvious so this one is already sorted by the average amount so we can see in our obvious example the fastest way is the highest move speed with a low sweet timer so wait time for zero remove speed of six takes just 1.5 seconds and obviously the slowest will be the one with the highest weight timer and the lowest move speed however let's say that we didn't want to see exactly the fastest time but instead we wanted to end it at let's say 1.8 seconds if so then we would know okay so these are some good parameters for them so with this you can see just how versatile this system is you can imagine a more complex example where you would use this to figure out let's say the best acceleration and top speed in order to have the player finish the race in 60 seconds or perhaps you would have an endless horde mode where you wanted the player to live on average for 3 minutes and you would use this system to define how many enemies to spawn per wave or accomplish other examples depending on exactly what type of vm you're making so this is a really awesome feature that has endless use cases and can really help you save a massive amount of both time and money alright so i hope you like this introduction into unity game simulation the package is in preview and in active development so unity is looking for all the feedback they can get try it out for yourself and if you have any issues go into the forums or email the team directly this is a really fascinating feature that can be a huge help to both small indie developers as well as large studios now stay tuned for more videos on doing some interesting simulations and also let me know in the comments if you're interested in a video on ml agents and combining game simulation with machine alert alright so thanks for watching if you found this video helpful consider liking and subscribing and i'll see you next time you