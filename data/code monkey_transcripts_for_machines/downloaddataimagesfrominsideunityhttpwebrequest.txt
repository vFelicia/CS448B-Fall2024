in this video we're going to learn how we can download data from inside unity this way you can add some really cool stuff to your games like for example a workshop showcase widget that grabs data from the Steam Workshop and displays it in your game let's begin hello and welcome I'm your code monkey and this channel is all about helping you learn how to make your own games with nf2 torrents made by a professional indie game developer so if you find the video helpful consider subscribing okay so our goal here is to learn how to download data from the web while inside unity this can be used for a multitude of scenarios you can build some really complex stuff in your web server and interact with it from unity in here we're going to create a class that we can use to download data very easily one of the possible things you can make is this over here I have a nice widget that displays workshop items for my own latest game pad around Tycoon the game itself includes this widget in the main menu so players can see what come VIPs are on the workshop if you want to see it for yourself you can pick up the game on scene the way the widget works is it grabs the HTML code from this page I made this collection so I can easily add or remove items onto it so the widget goes into this page download the entire HTML code then in that HTML code it locates the various thumbnails for all of the items then it downloads all of those items as textures and finally creates a nice UI element in order to display them doing it this way by contacting an external website means that after the game has been published it will continue to show an update and listen if I want people playing the game right now to see different items on the list all I need to do is just add or remove items into this collection so I don't have to publish an updated build or anything like that that's one of the benefits of using external data again this is just one of the many potential use cases for downloading data from a website you can use this for anything you think of that requires an external connection here we're going to create a class that we can use to download that very easily alright so let's get to it so let's start off by looking at how we can contact the web in unity so in here let's start off with a simple testing script okay now in here the class that we can use in order to contact the web is the unity web world West which is inside the unity engine that networking so this is the class that we can use as you can see there are various methods to contact a certain URL some let's see how we can use this let's start off with the simplest method so we do a basic get request so for that we have a static function called get and in here we pass a URL so let's define it and here just for testing let's simply contact Google so we do this and this now this as you can see returns a unity web request object and here if we see the definition we can see that it implements a disposable so this is an object that should be disposed so the correct way to use it is in here inside the using statement if you're not familiar with the using statement all it does is make sure to call this pose when we exit the code mark so this way we never forget and end up with memory leaks so now that we have this nice object and here we can contact the server by calling send web request and as you can see this returns an async operation so the correct way to implement this is inside a core routine so in here we should do yield return but we can only do a young return inside a core routine so let's do that okay so just like this we are starting our routine correctly now down here we're going to reach this code once the request has been successfully completed so here the request either failed or succeeded so let's do a test on the web request if we have a network error or we have a HTTP error we have any of those let's do a typical on our error and if not then everything succeeded so here let's do a debug log on what we receive inside the web request we have a download Handler and inside that we can simply grab the text all right so this should be working let's test and here we are any of you can see the received and in here we can see the HTML for google.com alright awesome now let's make a text field so we can easily see what we received okay so here I've created a simple text object and then on the testing I add the field for our objects and let's just drag the reference so here in the script as you can see there's the text mesh field and then here when we get we go into our text machine our to set the text okay so let's see any up here we have our download HTML okay great so now here in the code what says for our errors so here in order to force an error and will not simply try to contact Google on a weird port so just like this we should have an error and if there it is we have our nice error okay so far so good now it says for a 404 so in here and let's simply put a random page and if there it is we have a 404 okay great so we are correctly identifying when our download has succeeded or when it failed and what type of failure it had so just like that over here we have a simple code for contacting a web server now let's make this code easier to use let's put the coroutine inside a function okay so here we have simplified to a simple function call and now in here let's also make some delegates so we can pass in actions that define the success and failure okay so here we have an action which again an action is simply a donut that returns void and in this case we have a string parameter and same thing for onsuccess so this is how we're going to return our values from this function so we're here instead of doing our world or setting the text we simply call on error and we pass in our error and do the same thing on success all right so now we're working with these very nice tummy 'its and now we can go up here into our simple function and here we pass in our delegates and yep just like that so now we have this function that is extremely easy to use we simply pass in our URL and then to delegates to handle either the error or success and then here we're doing the same as previously we're doing a debug log on the error and again this one is called from in here inside the coroutine we have our own error delegate and we count in here passing the error on success we pass in the text so just like this we should be able to see the exact same thing as previously except right now we have a very simple function that we can use let's see and yep there's our errors still working and there's our successful download so everything still works great except now our code is much easier to use awesome now let's take this and apply the same thing for the get texture function so here the get texture works pretty much the same way except instead of a unity web request we have a unity web request texture and the function is called get texture so here I've copied pretty much the same thing except our texture won't return a texture 2d on success then here we have the same logic in order to send our web request then we check for an error and if it is not in there then we have succeeded and in here we can now cast this download handler into a download handler texture then we can now use this in order to access our return texture all right so just like that we have our nice texture so now for testing let's go into the editor and then here let's make a simple sprite renderer okay like that now let's go to the code and in here and add a field for our sprite renderer so here in the editor and let's drag our reference so just like that okay and now in here instead of downloading a simple web page let's try downloading a texture inside so a URL so here's the URL for one of the thumbnails for my videos and now in here we're going to use the get texture function so we pass in the URL now an error and our success delegate so if we succeed we print success and then we go into the sprite renderer in order to set the sprite so here let's create a sprite so we do sprite create then we pass in our texture TD all right so just like this we create a sprite and now we can use this bright on our sprite print okay so let's see if our sprite is correctly downloaded and shown in our scene and if there it is the sprite was correctly downloaded from the web and shown in our sprite render so again this texture does not exist in the project files at all it's being grabbed from an external web site and shown inside our game right awesome so over here we have our code working we have a nice function to download the text from a simple URL and then we have a function to get a texture now let's put all this into a nice dedicated class so we can easily reuse it in multiple projects so in here let's make a new script let's call this our web request now in here let's make this a simple static class so get rid of monobehaviour okay now let's copy our code from here so copy both of these functions now here since this is a static list all these methods need to be static okay everything is static now you can already see an issue which is in here a cool routine requires the amount of behavior script to run so we cannot use it directly in a simple static class so some of that we can create an empty mana behavior class in here so here it is just a class that extends mana behavior and it's completely empty now we make a feel for it so now we can use this in order to start our KO routine so just like that now it works however obviously we need to initialize this object so let's make a simple static init function and in here we test that this already exists and if this does not exist then let's make a game okay so if it does not exist then we create a game object and we attach our component onto it so then in these functions all we need to do is call init before we do our code routine and this way this class is working correctly make these two public alright just like that awesome so now we have a nice static class that we can use from anywhere in our project and we can easily copy this into multiple different projects and here all we need to care about is we can use these functions so to get or they get textured and everything else is handled automatically so now we can go back into the testing and now in here we simply go into our web request class and use this function okay so let's see if everything some works any of their days everything some works we're still downloading a sprite from the web and printing our success so now we have this nice class that we can use anywhere on any project awesome and now finally with all of this working let's apply it to a real game so here in my project files I have this workshop showcase script this is the exact same script that is used in the venom raccoon so let's see it in action so here it is the workshop showcase working this is the exact same widget that is shown on the main menu in banner Otakon and what it's doing is it's grabbing all these images from a certain workshop collection here in the editor you can see the very simple setup here I have the object which contains a script then inside it I have a container which contains also a mask then inside the mask we have the actual container that contains all of our thumbnails as you can see they are own printed and then they all move to the left so here they are as you can see they move to the left once they reach the edge they get teleported to the right and they keep going forever all right so let's see the code so here is our script on awake we just grab our references then on start we start downloading the workshop showcase here is where we are downloading we have our URL that contains a link to our collection so here you can see the collection so this is the webpage that we are contacting from inside our game and in here you can see that it's a collection of a bunch of certain VIPs so in here we are using the get function that we just implemented we have our nice error in case something goes wrong then here we have our success we grab the HTML code from that page and then we simply do some string searching in order to locate our preview images so once we locate the URL for each preview image we do a get texture we download that texture we add it to the thumbnail list this is you can see it's just some list of texture TD then we randomize our list and we print them give the randomize does exactly isn't it it just randomizes our thumbnails and then here on our print thumbnails first we destroy the previous ones then we create all of them we go through the entire workshop thumbnail list we instantiate our template will locate it correctly and then we simply have a nice script constantly moving it to the left and then teleporting it to the right the images are shown using a raw image on the UI which this receives a texture 2d so we don't even need to convert it into a sprite again here is the final result and again none of these images actually exist in our project files they are all being grabbed from an external web server I have used this system on several games so here is the workshop showcase for ninja Tycoon and in here the workshop showcase for Hyper nights panels so as you can see I built this widget just once and use it on multiple games doing it this way by contacting an external website means that after the game has been published it won't continue to show an update and list so in this case if I want the people playing the game right now to see a different list all I need to do is add or remove items from this collection I don't have to publish an updated build or anything that's one of the great benefits of using external data so here we have the final effect and here we have our very useful web requests class that we can use in any project as long as you can download the project files in it Tony is from IndyCar Montcalm subscribe to channel for more unity tutorials post any questions you have in the comments and I'll see you next time