in this video we're going to learn csharp basics in just 10 minutes variables ifs functions classes and more alright let's begin okay so let's learn the basics on how to write csharp code now the first thing you need is somewhere to write and compile your code the easiest way is simply to use Visual Studio which has a free version creating a simple console app is the easiest way to start playing around and writing some csharp okay so when you do you have the basic starting file with the main function and you can press the start button up here to run your code and as soon as you do the code compiles and yep it runs it opens the window and it costs now in this channel I cover a game development in unity which runs the code pretty much exactly the same except it does in a game engine rather than a console app alright so let's write some code something that you will use all the time is simply printing a message so you can do that by accessing the console and running the right line function and then just write something so just like this and hit compile and yep it runs the code it prints a message and it causes immediately now you can stop it from quitting instantly by adding a simple console.readkey so run again and if there it is now the console doesn't close instantly so you can easily verify the output okay now one of the core fundamentals of programming are variables which are containers of data so to define a variable first you write e type then the name and then optionally you can initialize it with a value so this variable is of type int it's named I and has the value 56 there's a multitude of types you can use for your variables so you have hints for whole numbers you have floats for floatingpoint numbers double is also a floatingpoint number but doing more precision though for boolean logic so values like true and false char for a character and string for a string of characters or text so those are the basic types and you'll learn more as you go on you can do a simple string concatenation with plus so for example here print that message then plus the I and yep there's the output printing our variable contents another fundamental building block are functions so you define a function by first writing the return type now if you want to return nothing you can simply use void then you the name of the function and then you have parameters within the parentheses if there are any so this function here returns nothing and takes no parameters and this one takes an in parameter and returns a volume to use a function you simply write the function name and then the parameters inside the parentheses if there are any this is related to the fact that we are calling a nonstatic function from inside a static function static SAR a bit more advanced so don't worry about them for now but in here you can simply fix it by making these two also static so you can call a function like this or our second function and we pass in the perimeters within our parenthesis now if a function has a return value you can also store it in a simple variable alright so that's the basics of functions now let's learn about ifs and conditions so it's very simple you just write the if keyword then you write your condition and then you open and close a codemod so a condition is anything that evaluates on to a point so you can do comparisons like this so I less than 10 you can do greater than you can do equal to less than or equal to greater than or equal to and not equal to so the exclamation point here means is not you can also count function so down here we have a function that returns a boolean so we can also call this and again we can use an exclamation point to invert the result then you can also combine conditions so mainly you do that with an end which is two ampersands or an or using two pipes so here this whole thing won't be true if I is under 10 and I equals 5 then you can also group conditions by using parentheses so here we are testing if I is under 0 and I equals 5 or I bigger than 10 and I equals 15 so first this one evaluates and this one evaluates and then you evaluate the entire or so you write your condition and then you have the codon walk which runs if this is true so in this case 5 is under 10 so if we run it there you go we have true then after the codon walk we can also add skee world and another code walk so this is what we'll return if the condition is not true so here make this 15 set so this won't be false any of there you go we have our fault another way of doing conditional logic is with a switch so you do a switch on something and then you have the various cases depending on the value inside here so you write case then the value on this case then in here you write for every code you want and then you do a break to indicate the end of the case you also have the special default which is the code that won't run if the value does not match any of the other cases then you have collections like a raisin lists those are our data types that hold a collection of variables so to define an array you write the type of the array and then square brackets so here we have an array of int and now by default the array won't be set to null so we need to initialize it and to initialize an array with you knew of our array type and in here we need to give it a size and let's say fun so we are initializing this array with five positions that can hold five ends and all of those positions are set to zero which is a default you can also omit the size and initialize the array right in here so just like that we are initializing an int array containing all of these elements with these values so this is our array which is a fixed sized collection now if you need something with a dynamic size you can use lists so you're right listen and the type inside the angle brackets and again by default this won't be known so we need to create the object so we do a new list and again if you want in here we can also initialize some very now the main difference between a list and array is that the array is fixed but unless can expand and contract so here we can do in place and add a value then we can also remove them all right so these are your basic collections now let's learn about loops the easiest way to cycle through a collection is with a simple for each we do for each then we write our iterator variable and then the collection that we want to cycle through so this won't cycle through the whole list and write it on the console if there is one so this works on any collection so it works on the list as well as the array then you also have a simple 4 so the 4 is split into three distinct parts each of them is separated by a semicolon now the first part initializes a iterator variable then we have our end condition so if this is false then the cycle ends and the last part is run after each cycle so usually this just increments our iterator so we can cycle through our own list count which is going to count down the total number of elements so in here we can do a simple right line to print the index position and then the element inside that list in that index position yep there we go on index 0 we have the element 1 then you also have a while so you do 1 then the condition and then the code mark so this code mark will run once this condition is true so in this case don't run 5 times then you also have a dowhile they do while is very similar except it tests for the condition only at the end instead of at the beginning now you can write comments in a single line with two forward slashes or you can do this to open or close comments now comments are useful for adding some text in your code however do keep in mind clean code principles so I the only your code should be fully and easily understood without any comments if it's not then go and rename your variables to make it the code intent more clear you can define your own types and one of the more useful ones are in yems so you write the keyword in them then the name so this is an enumeration of certain specific values so we have this variable with this type meaning it can hold these possible values for example enums are extremely useful for doing a simple switch on a bunch of specific states and csharp being in objectoriented language means that you can create your own quests so write the keyword and then the name then you can create an object of this type by first defining the type then the name and then you do a new and you instantiate your object now by default you have a parameter unless constructor but you can also write your own just like that and then inside your class you can do anything you like like defining feelings and functions so just like that then something very important which are accessories and scope now for accessor z' you have mainly public and private private means that this function is only accessible from inside this class so if up here I try to access that function there you go there is an error because that function is private but if I swap it to public now I can access that in here and if you don't specify anything like for example on this void main' then the default won't be private now these accessories can be applied to functions but also to all of these feelings so these films are private so I cannot go up here and modify it there you go an error and now regarding variable scope a variable this find inside a function only exists inside this function so here we're defining an int variable named I and then we are calling this function and here we have an error because I does not exist whilst inside of this go it's defined here so the variable only exists from here to down here so in order to use a variable over several functions you can find up here as a member variable and just like this now we can use this a my down here alright so that's the basics of csharp in just ten minutes these are the absolute basics so if you want to learn more then check the playlist linked in the description where I covered some more advanced topics in greater detail now programming is all about experience so go ahead and write some code like the video if you found it helpful and subscribe the channel for more videos person equation having it comes and I'll see you next time