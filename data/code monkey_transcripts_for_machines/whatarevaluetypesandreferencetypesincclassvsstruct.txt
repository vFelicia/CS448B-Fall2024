in this video we're going to go over the differences between valley types and reference types in csharp it is extremely important to know differences so you understand what your code is actually doing let's begin okay so in csharp you have several types and mainly they are either valley types or reference types they behave quite differently and can lead to a lot of confusion if you don't know how they actually work reference types store references to their data whereas Valley types directly contain their data an example of valley types are simple types so numeric values like intz or floats and news and boolean our own value types reference types are classes and objects however structs are value types so that's the most important thing to remember especially when it comes to unity dots which is mainly based on struts and not classes arrays of simple types are also reference types as our strengths so with reference types you can have multiple variables holding references to the same exact object whereas with value types each time you do an assignment you are making a copy of the underlying data another difference is reference types can be known whereas value types cannot so for example if you have an a new for your weapon types and the player doesn't have any weapon then you cannot set it to no this video is made possible thanks to these awesome supporters go to patreon.com/scishow code monkey to get some perks and help keep the videos free for everyone let's look at some code to see how they behave differently okay so over here I have a simple script and for example let's define an int which is a value type so here the variable I contains the value 7 but now if we make an object now here the variable does not contain this particular object but rather it contains a reference that points to this object so let's test this with a simple class so down here let's define a class all right so here we have a very simple class that contains a single int field now let's create an object of this type so here we do new my class and we pass in our parameter value okay so here we are creating our object and now let's store it in a variable type my class so here we have this object being assigned to this variable now let's make another variable at the same time and we're going to assign it to the same object okay so here we have two different variables now if we modify the value on the second one so you modify the value on the second one and then let's do a simple log on the first value okay so now let's see what happens is it going to print seven or five and there is the console saying five so what we have here is an example of a reference ID both of these variables are just holding references and not the actual object both of them are referencing the same single instance of this object so by going through either variable and modifying it we are actually modifying the underlying object so that's how reference apps works now let's look at valley types so let's define a simple int now let's define a second int and let's do the same assignment that we did on the class test and now here we modify the value of V so now the question is what do you think the value will be when we look into a sum let's see if it says 7 or 5 and there it is and the answer is 7 so the reason is because an int is a value type and not a reference type so when we assign a to the variable B we are not passing a reference to the original data but rather a copy of that original data so first we assign 7 into a then we're assigning a copy of what's on a so a copy of 7 onto B and then here we're modifying the copy inside B which has no relation to the data inside of a and now the scenario where it's most important to know this difference is when working with structs when writing unity dots code you will mainly be working with structs so it's very important to learn this so here let's go pretty much the same structure of our class except we're going to make it a struct so there it is exactly the same structure except this is a class and this is a struct and now let's go up here and copy the exact same test all right so here we have the same test one with classes and one with structs so we first create our object then we assign a second variable to the first object and we modify the second object and then we print what's on the first object all right so let's test any of their days with a class we have a value of five but with a struct we have a value of seven so here we're doing the exact same actions and this difference is exactly the difference between value types and reference types structs are value types so when we assign this object into this second variable we're not passing a reference to the first object but rather a copy of that object so each of these variables contains a different instance of our struct and when we modify the second one we're only modifying the copy inside the second variable so the first one does not get modified at all whereas with the class we have our variables holding references to the original object so modifying either of them modifies the underlying object that both of them reference so now let's look at what this means in unity dots okay so down here let's make a simple job all right here's our basic job we just implement a job that's it and now as you know one of the limitations inside jobs is we cannot use reference types only value types so we're here we cannot have a field for our my class but we can't have a field for our my struct so inside let's say we want to do some math and increase all of the values inside an array so here as you can see if we try to use a my class inside our native write we have an error we cannot use this but we can use our my Strutt now one thing which is normal arrays are actually reference types but native is a special type of array to work specifically with the job system so now here on our execute method let's simply cycle through all the elements in the array alright so there it is very simple we cycle through the array we grab the element in that position and we increase the underlying value it's now up here let's test this out alright so here we're in Senshi a ting our native array we're starting it with three elements then we create our job we pass in our native array and then we run our job so now afterwards well let's cycle through our native array and do a debug log alright so just like that we should be able to see all these values increase by one let's see and nope what we have here are still the original values so what's happening here is related to structs being a valley type and not a reference type if we were working with a class this would work since we would be modifying the underlying object but since here we are working with structs when we modify this value we're modifying the copy that was a sign into this variable so when working the structs we can modify our data just like this but afterwards we need to place our updated copy back in the array so we go back into the native array on the same index and replace our struct and now if we test and yep there it is now it's correctly incrementing all of the valleys so this one the things you have to watch out for when working with structs now there is one way you can work with value types as if they were reference types so let's saying here we have a function that takes an INT and increments so we have a function that increments an INT appear with fine and we call the function and then we dual Gandhi on now as you might guess what we're doing here is incrementing the copy that this function receives and not the underlying variable in here so just like that we still have a five inside of our variable however what we can do is at the ref keyword we have both on the definition of the parameter as well as in here now what this does is instead of passing a copy of data we're passing the reference even though we're using a value x and yep just like that we are modifying the original variable even though it is a value type also as I said before value x cannot be known so for example we cannot do an int I equals No as you can see it's an error however a csharp has an interesting feature called null bonds so if we define our int and put a question mark at the end by doing so this makes it a knowable so we can now set the variable to not putting a question mark at the end is the same thing as defining it as knowable of type so here this is the underlying type which is you can see it takes the T as a struct or a familytype and you can see it has a bunch of functions to test if it has a value and to get the underlying value for example we could have the enou or our weapon types and here we have a variable for the weapon that player is currently holding and again weapon types is in a new much is a family type so we cannot set it directly to know so in this case for example we could make the snow go and then we could define it as null if the player was not holding any weapons so here we learned about the differences between valley types and reference types this is extremely important to know especially when working with unity dots in order to benefit from the massive performance boosts of the Java system and burst we need to work with structs so we need to know how they won't behave now that you have this knowledge you will no longer be confused when making a job and the contents are not updated this video is made possible thanks to these awesome supporters go to patreon.com/scishow natee code monkey to get some perks and help keep the videos free for everyone as always you can download the project the newton√≠s from mt karma calm subscribe the channel for more unity tutorials post any questions have accounts and I'll see you next time