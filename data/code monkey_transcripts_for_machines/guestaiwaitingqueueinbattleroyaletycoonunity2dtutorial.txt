hello and welcome I'm your code monkey in this video we're continuing to create the waiting queue in battle royale tycoon we're going to make our guess AI more robust and fix some issues that you might have noticed let's get started okay so in the previous videos you might have noticed there are some issues with how our guests move around the queue sometimes the guests won't stop in the middle position and wait for another guest to show up and take the spot in front of him other times the guest won't go directly to his position instead of going to the entrance first and then his position we're going to create a specific class to handle our guests and to fix both those issues the game is stone development so if you like the concept go to the same page add it to your wish list and phone so let's start off by making a class to handle the guest qai so in here making you see sharp script and let's name it p.m. waiting queue guest a I inside let's remove the monobehaviour references since we want this to be a very nice and clean class let's start off by making a constructor see I'm waiting queue guest a I in our constructor and let's receive a guest object which we're going to store and eternally light has also received a vector3 for the entrance position and as soon as this a is created I'm going to go into the guest and move them towards the entrance position this class will be created when a guest is added to the queue and destroyed as soon as he leaves the queue so this a high class only exists while the guest is in the queue that way our code is very clean alright so now in our waiting queue in here when we add a guest to our queue in here we want to create a new instance of the guest a high class so see I'm waiting till yesterday I can't cast a and we're going to instantiate a new one with our guest so previously we're using a guest list so right now let's replace that guest list with a guest list so this is the object we want to contain inside of this listen and let's rename this to guest a I list okay so let's fix all of these errors okay so I have commented out all the Earth's from now just so we can test if we are in Senshi ating our guests say I correctly and the guests should be going into our entrance alright here's my cue let's see if we guest comes in and there you go they go in they stopped exactly attendants okay great now when they reach the entrance position let's send them to their own position we're only going to give him a position after he arrives at the entrance position the bug were trying to solve is the one where two guests get added to the queue but the second one arrives first and still goes to the second position so then he stays there waiting for the other one which arrives later to pass him and go to the front we want the position given to a guest based on when he arrives at the entrance position rather than based on when he was added to our queue so let's go into our guest a yawn and in order to have the guest request a position let's have the waiting queue to the constructor so see I'm waiting queue waiting queue into our constructor and we're going to store a reference and here now when he arrives at the entrance position in here we can have an action that won't be triggered when you rise at that position so when he does and let's go into the waiting queue and trigger a function called guest request set queue position we're going to call that function using this reference so go in here and send this and then here let's make a public void called set the queue position which will receive a vector3 for our queue position this is what's going to be called by the waiting queue through this function and in here we're going to move our guests towards this position so in our waiting queue let's make this function so go down here after yeah the guest let's make a public void guests requests at queue position and in here we're going to receive a guest a I which is guessing I that requests in a position so this is the guest asking for the queue to set his queue positioned let's send him to the position that matches his index so going to the guest ayaat set the cube position and give him the position list that matches with the guest a I enlisted indexed on this yes Taeyang and a pyramid send this as our waiting queue okay so the bug is still happening but what's test and see if our guests are going to their position on the queue all right here's the guest when he gets there he requests the position and he goes in there okay goes okay good now let's finally fix that bug essentially we need to know what the guest is already in the queue or still moving towards the entrance so in our AI in here let's make a private room for a state and the possible states will be going to entrance position and waiting in middle of queue and have a private state state and in here when we create we set the state to going to the entrance position and when he gets the entrance here is where we're going to first set the state to our state that waiting in middle of queue before requesting our position now in here let's make a function public bull is waiting in middle of queue and in here we're simply going to return if the state equals Q so we can test if the guest is waiting in the middle of the queue or still heading towards the entrance so in here when the guest requests to be given a queue position let's calculate which position we should actually give him so in here we're going to cycle through the list and put him ahead of everyone who is still heading to the queue so before we send him his index let's go for in T equals zero less than just a I list dot count I postpone start so in here if the guests stay on list of this index if it is this one then we're simply going to break since we don't care about the ones that are already behind if not then we're testing guests there are before him so if the guests that we are testing in here if that guest is not waiting in the middle of the queue then that means this guest is in the queue before him but he's still heading towards the queue so let's swap their positions and after we swap let's break since we don't care about the ones behind and finally after we have swapped everything then we send him to his correct index position so now this guest should be in front of everyone else who isn't already on the queue okay so now regardless of when the guest was add to the queue he should get the correct position based on when he reaches the entrance position okay so right now our main issue is the fact that guests aren't notifying the queue when they reach their specific position so when you move a guest into his own position when he gets there he needs to call the waiting queue function so this is the function that we need to trigger when we receive a guest although in here we're going to get the guest a I instead of our previous guest object and here the code is going to be very much the same if the STI matches with the first one then we're still going to trigger the event that a guest is waiting in front of the queue so in our AI when the guest reaches his position let's go into the waiting queue and call this function with this one so trigger the section right here okay all right let's see if the event is being fired the guest goes in goes to his position fires the event okay great the event is firing now we just need to actually return the guest object so in our waiting queue in here when we get the first in the queue let's return the object so going to guess our list dot get guest and in here let's make a function public's um guests get yes and it's simply going to return our internal guest object okay here's the cue here's a guest going to the entrance reaches the entrance goes in front fires the event and goes towards the building okay everything is working correctly now there's one issues still happening which is the guests are not being relocated if you can previously we had a bug with against relocation basically guests were going directly into their position on the queue instead of going first to the entrance and then to their position they were doing that because the function was being calmed when the first one moved so everyone got relocated to their positions even the ones that were in the middle of heading towards the entrance but now that we're using our AI class we can easily separate the ones that are going to the entrance from the ones that are already inside so in here when we were relocating our guests we're dealing with guests a guy in here so yes all right and in here we're only going to send him into a new position if guess the I dot is waiting in the middle of the queue so if they're heading towards the queue then we're not going to move them and simply go guess the eye and send him to his position so go up here the exact same code as in here and remove the previous guest code all right let's see if they're being relocated there they are they're all waiting the first thing goes in second goes and everyone relocates okay great so the ones waiting get relocated but the ones that are heading towards the entrance keep going towards the entrance as normal so there you have it we have created a new class specifically to handle the AI of our guests in our queue we managed to fix several bugs that were due to the previous way in which you were moving guests regardless of what state they were in with the AI in its own separate class with only one responsibility our code is more robust and very clean again the game is still in development so if you like the concept go to the same page add it to your wishlist and phone as always you can download the project files in utilities from unity code monkey comm if you have any questions post them in the comments and I'll do my best to answer them subscribe for more videos and I'll see you next time