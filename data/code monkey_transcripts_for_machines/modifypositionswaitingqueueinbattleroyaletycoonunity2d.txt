hello and welcome I'm your code monkey and in this video we're continuing to create the waiting queue in battleground Tycoon we're going to add some buttons to modify the positions in our queue and automatically calculate the entrance position on let's get CERN okay so here's the key we've built so far the yes and join the queue when they reach the front of the queue the building grabs them sends them to a specific position they execute an animation then they leave the building and the next one gets calm and so on so forth the game is still in development so if you like the concept do the same page add to your wishlist and follow so far we've been creating a very static queue we're feeding it a list of positions when it's constructed and that's it now let's add the ability to be able to modify our queue dynamically first of all we need some code to automatically calculate the entrance position based on all the other positions right now we're just placing it to the left of the last position what we want is for the entrance to be following the direction of the last two positions so if the last two positions are going to the left then we do want to place it to the left but if this position was up here the last 2 would be going up and we would want the entrance to be up in order to be able to test our combinations let's first go into our game Handler and add another position so go into my game handler in here and up here in my waiting queue I'm going to add another position in here and it's going to be based on the final position so dot count minus 1 based on the last position and I'm simply going to increase it by 0 minus position sign okay so I'm adding one position in the end down all right as you can see I've had this position and there are previous last position but the entrance position is something like this one in this case we want the entrance position to follow this direction so we place down here so in the waiting queue in here let's remove this code and calculate the direction between the last two positions so going to the position list of position let's count minus one so this is the last position on the list and kind of like difference to this one from this one so that's the direction we're not going to normalize this vector since we want to keep the actual distance between the positions and we're going to set our entrance position to the final position was this direction alright let's test and our entrance position should now be under all right there you go this is the position the last position and the entrance position from that direction okay right now you might be able to see that we have an issue in our code here and that is what if the position list only has one position then this one won't return a error and cause an index out of range so we're only going to calculate this if we have more than one position so if position lists count if it is only under one so if we only have one position then we're going to set our entrance position to this position position minus one so if we only have one position then that one won't be the entrance if not then we're going to calculate it based on the last two all right now let's copy this code into its own function so make a private void calculate entrance position and we're going to copy this code in there and call this function up here okay all right so now that we have the entrance position correctly being calculated and let's set some buttons to modify our queue now we're going to need a function in here to be able to add a position to our queue so let's make a public void add position and we're going to receive a vector3 for the new position in here let's simply add the position to our position Liz so position list add our position after we add position let's calculate the entrance position again and let's also spawn a debug sprite all right so back into my game handler instead of adding it to this position list let's at this final position after we create our waiting to you so first we create then I go into the waiting queue and add a position and it's going to be the same as the previous position so now we should see the exact same thing as before yep there it is everything is still exactly the same although we are dynamically adding this final position and the entrance position is correctly being calculated okay now I'm going to make some buttons to be able to modify our queue first on our waiting queue let's make some helper functions to add positions based on four directions so I'm going to make a public void at position and then here we're simply going to call our normal position based on the position list of positional account minus one so I'm going to grab the final position and in this case since I want to go down I'm going to add it a vector 3 0 minus 1 multiplied by a position signs which we're going to go up here define a private pong float on the position size and let's say 8 F which is what we were using previously so let's make the functions for all the other directions alright now that we have our helper functions let's go back into our game Handler and in here let's go into the CM debug class which is part of the code monkey utilities which as always you can wear out for free from unity code monkey comm we're going to create some buttons on the UI that button won't be placed let's say above no text and it's going to trigger the action which will be the waiting Q dot at position in this case up all right let's add buttons for the other positions all right all 4 buttons should now be spawning ok so here are my buttons and now when I click you can see that I'm adding positions in my list alright great so now that we can successfully add positions let's have the ability to remove them so back into the waiting queue and let's make a public void to remove position this function takes no arguments since the position we're going to remove is always going to be the very last one now before we remove the last position we need to make sure that there's no one there so if the guest list count if it is under the position list dot count then that means that the queue is not completely filled up so we can remove the final position so in here we're simply going to go into the position list and remove the position at count 1 so we're going to remove the very final position and after we do obviously we need to calculate our inference position again so on our game ham learn let's add a button to call our function so copypaste this button and put it somewhere on the right and instead of adding a position in this case we're going to remove a position all right here's my cue I can still add various positions and now I can also remove them so there you have it we have added the ability to add and remove positions to our queue in the next video we're going to make our guess they are more robust and fix some issues that you might have seen again the game is still in development so if you like the concept go to the same page add it to your wish list and follow as always you can download the project fountain utilities from unity code monkey comm if you have any questions post them in the comments and I'll do my best to answer them subscribe for more videos and I'll see you next time