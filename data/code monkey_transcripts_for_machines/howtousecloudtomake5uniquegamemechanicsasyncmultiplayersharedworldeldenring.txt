hello and welcome I'm your code monkey so while ago I was researching the clouds specifically Microsoft Azure it's a really interesting area with tons of potential use cases for game developers I made a getting started video tutorial a while ago if you don't know anything about what is the cloud what is azure and you quickly want to learn Basics and follow a stepbystep tutorial definitely watch that video basically it's a video that I wish I had when I started learning and I also made a second video one of my most detailed video tutorials I've ever done it's all about how to make an online leaderboard using Azure functions and search based on that combination of tools using functions in storage there's a bunch of really interesting cloudbased mechanics that you could build so here let's look at five interesting ones that I built all of them are based on all of the logic that I covered in that video so this one is kind of more of a showcase than a tutorial I just want you to see what you could build to add some interesting mechanics and make your game stand out and for Indie devs all of this can be done pretty much within the free tier or maybe just one or two cents per month so when you hear Cloud Don't Be Afraid right away thinking you need a huge budget to create all these interesting things most of them are probably completely free so we're going to look at how to make asynchronous multiplayer where both players don't need to be online at the same time then how to create your own custom scene Workshop which works on all platforms after that look how to create the player messages like in Elden ring or Dark Souls then how to create a histogram kind of like in the electronics games how to create a shared worm like in this running where a player can build something and other players can see it built and a few more examples okay so let's look at some awesome mechanics we can build using the cloud first example is how you can add asynchronous multiplayer to your game now I recently covered Unity multiplayer using netcode for game objects that tool is excellent if you want realtime multiplayer meaning all the players are connected and playing the game at the exact same time but if your game is something like turn base so maybe something like Civilization then perhaps you don't need a Content connection so here is a super basic tictactoe example I've got two bones they are not directly connected in any way so there's no netcode involved here then up here I can make a move so let's Place one right down the middle and there you go it does synchronize to the other one and now I can't make any more moves so now I need to play with this player down here so let's put a no right in there and if there you go it synchronizes so now it's this one so now this one do something and now this one play again see up here as you can see I'm playing a multiplayer game without needing any direct connection and of course a bonus benefit of not being directly connected is that like I said it's asynchronous so for example in a complex scene like Civilization I could take my turn then my opponent could go and live their life like normal and then when they have time they can come back and they can take their own turn then maybe I could get notified that my opponent took a turn so then I can take my own turn and so on so this is a really awesome feature for people who can't play multiplayer games on top but still would like to play a game against another player to be on this kind of thing is really quite simple you just need some place to store the game say data which of course for that you have Azure storage then you need some way to run logic and update that game data and for that you can use Azure functions so that's exactly what I have working here I have this simple script and then down here on update I'm just testing for a simple mouse input when that happens then over here I'm just connecting to the Azure function by doing a standard HTTP request over here I'm using localhost just for testing but obviously in a final game this would be a regular URL so this is all it does just contacts the Azure function then the Azure function is running this code here it grabs the blob from Azure storage and similarly takes the request and writes it onto the blob and over here we can view the Moab storage so we can click on it to see and then go into edit and if here is all of the entire game state which is a simple structure holding data on each possible board position again all of this is the exact same logic that I covered in the online leaderboard tutorial it's just an Azure function interacting with some persistent storage that's it so when I make a move it simply modifies the game state here is the game set that I'm using it's all pretty basic I just got an array of all of the board positions and I got which one is the current player so when the player clicks really just updating that position set the other one to be the other next turn player just convert the whole thing into Json and send it to the Azure function now obviously in the super simple demo I didn't worry about security at all as usual when it comes to multiplayer the general rule is you really should never trust the client whereas over here I am trusting the client I'm just sending the entire cloud game State and in the function I just write the exact same thing over there onto the blob but of course in the final game you would run some kind of validation Logic on the server just to prevent the client from doing some kind of illegal move so this is the function for setting the aim State and obviously the other one is for getting the game State like I said this is not a constant connection like netcode for game objects so over here it's pretty much just based on polling so every half a second it's going to run this function and again it's going to contact the Azure function it will receive a response simply use Json to parse that response onto to a cloud game State and then simply updates over here is the Azure function which as you can see simply reads from The Blob and simply returns everything in that blob which again the whole thing is just this so in the game I can make a move it sends the state then the other one pumps for the update and simply gets it and sets the visual now of course one big limitation with this simple demo that I have here is there's just one game state of course in a proper game you would expand upon this to have multiple game States you wouldn't want just one game to be available for the home run so there would be some kind of game manager which would manage all of the game state that exists at once another thing is for getting updates so right now it just downloads the entire game State it's not a problem in this simple demo but if your game say it is super large maybe that could be an issue so simple for that would be when getting the game State the only return the things that changed since the last update so as you can see you can build upon this simple demo in many ways but the core of it is really simple it's super easy to add some asynchronous multiplayer tier games which is a really great feature to add especially only for turnbased games for the second example you can make your own custom scene Workshop where players can upload and download mods as you might know the scene Workshop is a really awesome scene feature for helping you easily add money to your game it's basically an online database to store all of the mods that players have built and allow players to easily download any mods they want so it's a really awesome system and works great I've used it in almost some of my Sim games it's great for enabling the player to use custom characters or sharing some levels but the obvious downside is since it's called Steam Workshop it really only works on Steam so if your game is not on Steam so if you are on mobile or consoles then you cannot use that system so there are some reasons for wanting to build your own and you can build that just using the cloud basically only needs is just some way of storing each mod data along with a total model list so here is my demo I have my player character and I can walk around the scene then on the side I can see my model list and mod types that I made for this game is pretty much just adding NPCs if I click on one of these mods it's going to download it so I'm going to click on this one there you go it's satellite mod and there you go it downloaded and added a new NPC onto my world importantly this is using the cloud so this character over here this Sprite sheet this is not included in the game files and also the NPC logic which were the NPCs I can press a button to interact with them so this message is also not anywhere in the base game instead of it was built by perhaps some other random player they created they drew on the spreadsheet they uploaded the mod and then I just downloaded and automatically added it to my game in order to make a mod it's also super simple over here on the left I've got a basic UI first of all I can input the position where I want my NPCs to spawn so let's say I want to spawn somewhere around here so I can pause the game and see that this position is 3.4 and 2.1 so over here let's go 3.4 0 and 2.1 then for the message this is whatever I want the NPC to say let's say nice to meet you and finally I can include a custom texture over here I have some texture so let's go with this one and I just paste the texture name now here obviously on the simple demo I just made this a regular text box but obviously in a final game you would use some buttons basically you would go through the game folder find all of the custom textures and automatically populate the name so I can just go ahead click on upload and it's uploading and there you go it was uploaded and on the right side my model list was automatically updated if I want I can also click here in order to manually update it then I can click to download and there you go on with that there's my awesome new custom character that was just downloaded from the mod server and I can try it and there you go it does say the message that I sent alright awesome how this system works is on pretty simple again it's just clever usage of azure functions and storage here's my storage account and it has as usually modelist.json we can edit and see that it's really just a simple list of of the months then obviously are all of the modern visual files so you can look at the one that we just created here it is this one again a very basic structure it's got a file name the spawn position then a text message for the chat bubble and finally the spreadsheet URL and spreadsheet as you can see was also uploaded to the server so this one is also over here in storage there it is now let's see on the function side first of all here on the empty side for the upload UI when I click the upload button it runs this code it's basically split into two parts so first it's going to upload just the image so it is a put using this image that is going to run this Azure function which is going to open up a mob with right access on the folder mods and then with the upload file name then simply writes directly onto that file with that done if that succeeds then it just generates a mod file name based on the Unix timestamp create a new cloud map structure sets the spawn position the Sprite URL detects messages and so on and again there's another very simple Azure function call then over here for this one simply grabs the model list with read and write access and also writes a new mod name then over here its own prebasic logic and for downloading the entire model list again it's pretty easy it just gets that blob file and just returns it super simple for unloading a specific mod it's also very simple just cause the function to get the mod which again is going to return that Json object then simply use the Json utility to convert that into a quad mod then just another function in order to grab the actual texture and finally just spawn the NPC with all the basic things so here is the working demo I'm walking around my world I'm a bit lonely so I'm going to click on this and there you go it's going to download an NPC I can go and I can interact with it so here is a character that was created by some other players and it was downloaded straight from the cloud alright awesome for the third example here are the player messages like in Elden ring or dark zones so it's just like I showed in the Azure Basics video except in this video I just refactor the code to use Azure functions and precision storage as opposed to the web API which is what I used in that original video so again players anywhere in the world they can write some messages they can go somewhere right and everyone else can download the same messages so the other players playing their own game they can see messages from other players without being directly connected in multiplayer with any of them again it's all based on super basic Azure functions and storage so I got a function which grabs a blob storage and grabs all of the messages that have been added by other players and simply spawns a prefab and I myself can also spawn something so I can press then over here is a nice input window that I made in a previous video I can write my own message so I can write my own message and press OK and there you go with contact C function and then update see pull up storage puts a message there and any player anywhere in the world can now see this brand new message so in terms of logic you can see how building a system like this is really super easy and it's a great way to add some player interaction to your games even if they are mostly in single player for the fourth example storing leaderboards and histograms kind of like in the various Electronics games in those games like spacecam and infinite Monitor and so on when you complete on level you can see how he did compared to all the other players there's a really nice histogram that shows you where you land on the distribution of all the scores so this one is almost exactly like the leaderboard that I covered in detail the only difference here is really you just presented that differently so instead of a line by line leaderboard you show a nice bar graph so the player finishes the level and uploads their score over here I got some nice buttons to test so let's say I got a score between 100 and 200 so I click on it and they're going at a score of 153 and gets out and we can see over here nice visual of the histogram again the code is super simple so click a button generate a random number and add a score for adding the score just contacts the Azure function and uploads the score with a nice Json then the function once again grabs the blob as read and write simply reads the blob adds any score and updates a new blob here you see blob data it's really just a list of all of the scores and the other function simply gets the scores and updates the UI so even though I'm playing in single player I can upload my score and see how I compare to other players in the world once again obviously you would add some Foundation since you don't want people to submit fake scores but yep you can see how easy it is just to add some score sort and so on for the fifth example you could also make a mechanic kind of like the connected Whirlwind that's running if you haven't played it basically there's a way for you to invest in building roads and bridges that other players can also use so even though the game is single player there's this nice connection between player worlds as usual only takes is once again just a way of storing and retrieving living data so here I've Got My Demo which by the way I'm using the cinti SciFi City pack there's only in the description if you want to get it so right now no one has built anything for example I would like to go all the way up there but right now the only way to get up there is to go for a huge detour around this building or another way is I can simply build a teleporter that no one in the world has built just yet so as the first one I can go all the way up here and I can build a teleporter so press a button use resources whatever and there you go it creates that nice teleporter and now I can go I can touch it and there you go it jumps me all the way up here once again the whole point is that it's a connected world so in my single player game I built this now if I stop playing the game and I play again as if I were a completely different player on the other side of the world and look at that the town part is built so thanks to some really helpful player thousands of miles away they built this teleport which is now helping me in my own single player game it would be super easy to also expand upon this to allow the players to upvote other player construct buildings just like in that streaming so here we have another example similar to The Dark Souls one where we have a single player game but we did some asynchronous multiplier mechanics so these are demos that I've built but here's some more mechanics you could build you could make a kind of auction house or trading house like in Eve online or Diablo basically some place where you can say that you want to sell some goods and other players can see what you're selling once again you don't need realtime multiplayer connection to do that again you just need a place to Source some data and interact with it you could also make an update in patching system so have your game connect to a server on the cloud to check if there's any updates if so download them and automatically patch the game you can make a persistent online world so for example in fps like PlanetSide 2 where you find some small skirmishes and then those skirmishes have an impact on the entire world map once again all you need is to store the world State and some function to run logic to update it another possibility is slightly related to the custom CM Workshop is you can upload s to the cloud using Azure storage and then download them in your game but unlike the Steam Workshop demo what I mean is a place where only you developer has access so with that you can add extra content to your game without having to upload a brand new build for example upload assets for adding some more levels some more new weapons or something like a Christmas event this is exactly what ENT cloud content delivery does actually have a lecture on how to use that in my ultimate TNT overview course so if you want to learn more about that check it out and speaking of cloudcon delivery I should also mention that YouTube themselves also have a bunch of these Cloud related Services Under The Brand Indie gaming Services I covered an overview of the 30 or so tools that ENT provides you can watch that video to see all of them and of course there are other services like for example Firebase and playfab so the question is do you want to build a model yourself or do you want to use a prebuilt tool if you build them all yourself then you have phone control to make it work exactly as you wanted whereas with something like Unity gaming Services you can only interact with the premade tools but they might not do exactly what you want so it's really the same question as when using any kind of asset do you want to spend the time and effort making something like a 3D model or do you just buy something from the s store here for example you can combine Azure functions with storage to make some kind of cloud safe tool or you can just use unity's builtin tool and of course the best option of all is simply to use both for for anything that UNT already has a builtin tool go ahead and use that and for anything else that there's no builtin tool go ahead build yourself and use it with the cloud with azure so personally I would not build my own cloud save tool I would just use Unity however for a custom messaging system kind of like the Elden ring for that I would say build yourself since Unity doesn't have a prebuilt to own specifically for that purpose alright so these are a bunch of mechanics and interesting ways you can use the cloud in your games if you'd like to explore this area definitely check out my video on Azure Basics it will quickly teach you the basic terms to help you get certain and of course check out the complete leaderboard tutorial it's made using Azure functions and search exactly like I showed for all of these mechanics so if you found that tutorial you won't be able to build everything that I should here and much more alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and I'll see you next time foreign