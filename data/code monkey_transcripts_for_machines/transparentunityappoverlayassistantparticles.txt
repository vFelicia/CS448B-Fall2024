in this video we're going to learn how to make a transparent unity app the background of our unity window will be transparent allowing us to see what's behind it this is great for many scenarios like making a annotation app or a virtual assistant or some particles falling to mouse or just a simple desktop overlay let's begin this video is sponsored by audio mob audio mob helps developers monetize their games through noninterrupting audio ads you can earn more money while having happier players so instead of intrusive video ads that take up your entire screen you have audio ads playing in the background whilst the player is enjoying your game so the player continues having fun while the audio ad plays in the background you can monetize using standard audio ads that allow the user to skip the advert at any time or you also have the rewarded type which allows your player to get rewards by listening to an ad players don't enjoy having their games locked so it's quite possible that this new unintrusive ad type won't become the new standard in the future it's very easy to integrate into your games via their unity plugin click the link in the description to learn more and start monetizing your games through nonintrusive advertising clicking the link also helps support the channel okay so here let's learn how to make a transparent unity app now i first researched this a while ago because i had a really interesting idea and if you saw the game dev reacts video then you already saw what that is i wanted to be able to write some annotations on top of the video as i explained what was happening so i first went looking for normal annotation apps but i couldn't really find anything decent so eventually i started researching if it could be done with unity and made my own alright so here is the simplest thing i just have a cube moving around and it's on top of the desktop so the background of this unity app is transparent which lets me see the windows behind it so i can interact switch this one switch to this one there you go here is another simple example just some particles being spawned and following the mouse and finally here it is another possible use case just a simple virtual assistant so i can click on this button and there you go he tells a very nice joke he's just standing there playing a normal animation on top of my desktop so i can switch windows and there you go he's always there so note how if i click through it there you go the window app is running on top of everything else and the important thing is that it's fully transparent so i'm interacting with what's behind it there you go just like this and i can also define areas to receive clicks so for example this button i click on it and there you go he tells a nice joke so the important thing is that we're running unity on top of the desktop so whatever you can do with unity you can do it example like this so you can make a really complex virtual assistant maybe to it notify you when you receive an email or remind you of certain things or you can play around and build one of those destroy your desktop games so it's a really cool thing that greatly expands which you can build with unity i have also included links in description to all the results that i found during my research so if you want to dig deeper you can check those out check out the code monkey app on steam interactive tutorials complete games and more click the link in the description and add it to your wishlist this video is made possible thanks to these awesome supporters go to patreon.com unitycodemonkey to get some perks and help keep the videos free for everyone alright so this is our goal let's get to it okay so here we are in our starting scene it's completely empty all i have is this cube here just moving and rotating around so here in the editor everything is pretty much normal let's start off by making the script to run our code so we create a new c sharp script call this our transparent window let's make a game object and add our script okay now in order to make this effect it's actually very simple but also slightly complex meaning it's just a few lines of code but it does involve working directly with the windows api we need to tell the windows api what settings to use for our unity window now the way that we can interact with an external api is by first adding the attribute dll import now this attribute lives inside using system.runtime.interop services this attribute says that we're going to grab a function from an external library so in this case we want to grab it from user32.dll and then from this library we want to grab this function and this function requires an end pointer which lives inside using system all right so this is how we can access functions from external libraries like the various windows apis and through this function we can show a standard windows message box so for testing let's do down here a simple void start and on start let's just test it now the first argument is for the handle of the window so let's pass in just a zero pointer then we have some text then a caption and finally the type so let's use default alright so let's test and yep right away we see a standard windows message box showing up it has our text our caption and a simple okay button all right awesome so this is how we interact with the windows api first we import from a specific dll grab a specific function and then we simply use it now i'm not an expert on the windows api but by using the various libraries you can build just about anything there is this great website called pinvoke.net this one shows all the functions in all the various windows apis so it's a massive wiki it also shows csharp examples for all of the functions so this is extremely useful for learning how to use the windows api and what each parameter requires okay so let's go back to our goal to making the background transparent now in order to do that there are several possible methods again you can check the links in the description which are the results of my research and several people found multiple methods here i will showcase the method that achieved the result that i want so first we're going to need a function here it is it's a function from the dwm api this one allows us to set the window margins so down here on start we can use this function now the first parameter is the handle for the window so that means we also need a function to get the handle for this window so here it is from user32 we get the get active window so down here we get the handle for this window and we use it in this function and now we need our margins and here according to the documentation if we give it a negative number then we get a sheet of glass effect making our background transparent so just like this create our margins with 1 and we pass it in and call this function so that's it that's pretty much the bare minimum that we need however here if we try running it in the editor and nope nothing works yet so in order for this effect to work we need to make a proper build instead of running it in the editor so for that let's go into file open up the build settings now first we add our open scenes onto our build then in here everything is correct let's just open the player settings and now here we have an important option that we need to change down here on the resolution tab we have this option here to use the flip mode on swap chain so it's this one that we need to disable in order for this effect to actually work so we do that and then over here on our full screen mode we also need to make sure that we are in full screen window and we're also using the builtin render pipeline and lastly we just need to go to our camera here it is my main camera and just set the background color to black with zero alpha all right so that's it all of these settings are very important so we need this checkbox to be unticked it needs to be in full screen and the camera needs to be black with no alpha now with all of that we can try clicking on build and run and yep there's our unity app with a completely transparent background awesome so we have our unity build and it's running on top of the desktop so there it is exactly like that and as you can see this was actually very simple all we needed was pretty much just this line of code and everything is working now everything else that we want to do is simply expanding upon this concept for example over here i have this simple particle effect it follows the mouse and drops particles now let's run this as a build and if there it is we have the mouse with the visible desktop behind it and the particles looking nice following it now there's still one very important thing right now this works we have all of our visions on top of the desktop so we have our transparent ent window however even though it's transparent it's still capturing the mouse so as i click nope i cannot interact with what's behind it so let's make that happen now in order to do that we're going to need another function so here it is from user32.then the set window log so this lets us set attributes for a window you can view all the possible attributes in the windows documentation so down here let's call this function we pass in our window handle then we want the type that we're going to change we want to change the extended style so instead of using magic numbers i'm going to add a constant up here and we use this okay and now we set the new flags now to make it click through we need to so we need these two make it layered and transparent and we use them down here now these are flags so in order to add both of them we add one then the bitwise or operator and then the second i covered bitmasks and bitwise operators in another video if you want to learn more so we apply these two and now our window should be clicked through let's build and test okay so here is our window running on top and as i click behind it yep now i'm actually interacting with this window so our app is now click through awesome now one very important thing here which is if we run this code whilst in the editor then everything will end up being messed up so here instead of making a bill let's say i just click on play and yep everything is completely broken so it's broken on top and as i click yep the clicks go through so the editor is now broken to solve this i need to restart unity okay back to normal so as we saw this causes some pretty serious issues if we run it in the editor so in order to prevent that over here we can add an if so this code will only run if we are not on the unity editor so this helps prevent that issue from happening alright so here we have our transparent window which is acting as a click through now the next issue is it doesn't say on top so as i click yep unity comes to the foreground and this one goes to the background all right so let's fix them for that we need another function so another one from user 32 this one is set window pause now down here we're going to call it pass in the window handle now for the insert after we need another constant so we have a constant for the topmost and we use it in here and zero on the rest all right so just with this line let's test so here we are and click and yep the click went through and i'm now interacting with the window behind it but the transparent app is still on top alright so far so good now we see another issue the issue is that the build is not running when it's in the background so only one comes in here doesn't work and down there it's not visible but it's not running so we can fix that very easily down here we go into our build settings into our player settings and we simply take this box to run in background now alternatively we can also do it through code by setting application.run and background to true so let's test all right so it's on the foreground as i click yep there you go it's still running but i'm now interacting with the background all right awesome so here we have a transparent ent window running on top of our desktop so it's running on top of the ent window and now it's running on top of visual studio and so on now finally if we want to make it transparent but also interactable we have two methods one is just based on pixels and one is based on manual logic now the simplest one is based on pixels for that we need a new function here it is we set the layered window attributes then we also need another constant so here it is and now down here instead of set we're no longer passing in these two we only make it layered we do not add the transparent and then we call our set layered window attributes in order to access this window now we have a film for the chroma key a field for the alpha and a film for the flags which is our color key y all right so that's it essentially we're telling everything with a color of zero so completely black with zero alpha won't become click through and everything not won't become clickable so let's test all right so just for testing i add the new sprite with some alpha fade we'll see why in a bit so let's build okay so here's our transparent window running on top now if i click on the transparent part yep there you go now the window behind it is in focus however now if i click on the summit part yep there you go now this one is the one that's actually active so the clicks are not going through behind now let me just add some button behavior all right so here i made a simple button it's using the button sprite script from the utilities which as always you can grab for free from unitycodemonkey.com all i did was just add some behavior to change the color on the mouse over so as the mouse passes it don't change color let's test all right so here's the button down here and as you can see as i pass the mouse over yep it's interacting with the button now i click on transparent and i'm clicking on the window behind it but now if i click on the button yep now this one is active alright so like this you can see how it works very easily between the transparent clickthrough and the song it does not collect through however here this sprite has a fading alpha and now you see the issue with this approach now in order to capture clicks it makes each pixel either fully transparent or fully opaque so it does not deal well with alpha fades now the other approach is simply extending upon what we learned previously so we know how to make the window click through and not all we need to do is apply some logic to it so let's go back into the other method so for that we comment out this function call and in here we add our transparent flag and yep there it is everything is clicked through and right now you can also see the difference between the two methods so this one the alpha is actually correct so it's slowly fading away so with this method i'm just going to add some simple code so here it is just add an update and a simple function to set the clickthrough now we just need to make our window handle an actual field okay we make it a member field we set it in here and then we use it in here and there you go it's extremely simple we're just either adding the transparent or clickthrough or we're taking away and we're using the physics in order to test if there's a collateral beneath the mouse position and if so then it becomes knuckley through and if there isn't anything and it's transparent then becomes connected so very simple now if we run this here we are and if i click on the transparent part yep there you go i'm interacting with behind it however if i click on top of a collider so here on the button i click and there you go now this window is active so click on transparent and go through click on the button and captures on the button now the benefit of this approach is that the alpha phase work and you can also more specifically define what is clickable and unclickable so in here it's perfectly solid but i can click and clicks go through it over here is an example of all of this put together so it's my virtual assistant i can click through the character and interact with the objects behind it and i can click on this button to interact with it and there you go he tells a nice joke so here is everything put into action making an actual proper interesting thing so if you'd like to build an assistant that tells you corny jokes throughout the day there you go here's how you do it so now that you know this go ahead and make something awesome if you found this video helpful consider liking and subscribing also don't forget to check out audio mob to monetize your games and earn more money while keeping happier players clicking the link also helps support the channel check out the code monkey app on steam interactive tutorials complete games and more click the link in the description and add it to your wishlist this video is made possible thanks to these awesome supporters go to patreon.com unitycodemonkey to get some perks and help keep the videos free for everyone as always you can download the project files and utilities from untickoutmonkey.com subscribe to the channel for more unity tutorials post any question comments and i'll see you next time