hello and welcome i'm your code monkey and lately i've been trying out vrising it's an excellent vampire survival game that released a while ago it's exactly the kind of game that i like there's resource gathering crafting some nice combat building and so on as you can guess by the name it's all about vampires you play as a vampire and the game features many interesting vampire mechanics taken from the usual vampire myths so for example there are silver coins in the world vampires are weak to silver so if you pick up some coins you won't be constantly taking damage there's also a feed mechanic so when an enemy is weakened you can jump on them and feast on their blood doing so grants some interesting bonuses based on the quality and the type of one another obvious one is garlic there are some garlic defenses in the world and you need to basically buff up your garlic resistance before you can enter that area the game also has interesting faction mechanics so if a group of skeletons comes across some humans in the open world they won't start to fight it's really fun to just sit back fire some projectiles and watch as two enemy factions destroy one another while you sit back and go in the end and just pick up all the loot there's also a pretty robust base building system you can place down areas in a grid then place down walls and doors and inside your castle you can then place down crafting stations chests and so on it works pretty much exactly like what i've already covered in my house building system video so if you want to learn how to make something like that go watch that one so there's lots of interesting mechanics in v rising now here for this video the mechanic that i'd like to recreate is a pretty unique one that requires some clever trickery it's the satellite mechanic as you might know a big part of being a vampire is avoiding sunlight the game itself has a day night cycle when it's night time you can go anywhere without any issues however when it's daylight if you stay in the sun for too long then the sun starts to burn you and take quite a lot of damage if you don't find cover quickly then you will die thankfully the world is filled with tons of trees rocks and buildings so you can jump around between the shadows to move during the day this is a really interesting unique mechanic that perfectly fits the theme of this game so let's see how it actually works and how we can recreate it which involves some clever trickery and if you like this format and want to learn more about how to recreate various systems from interesting games and check out the entire how it's made playlist learn how the scout pro launcher from ottawa works learn how to clean a mesh like in rover mechanic simulator learn how to interact with worm objects and scan things like in cyberpunk or several others okay so here i've got a working demo recreating that mechanic i have my basic player character and i can walk around if you want to know about the character controller this one is based on unity's official third person controller just with an overhead camera and for the assets both the background and the character are from the cinti horror pack it's a really great pack with some spooky vibes obviously perfect for this video and actually right now this pack is discounted as part of a huge centicell it's their anniversary and pretty much every single pack is at half price really great so if you're a fan of their style just like me then check the link description they have asset packs to cover pretty much any game or theme now by inspecting the game we can look at the core components that make up this mechanic first one is really jesse day night cycle i've been meaning to make a tutorial on how to make a day night cycle for quite some time still haven't done it but it's actually pretty simple the main thing is really you just need to keep track of time for that over here i've got my script the sunlight system and as you can see i'm using a flow to store the daytime so it's just a simple float and then down here on update on every update i'm constantly increasing that one by time.time and in order to make it loop after increasing it i just use the modulo operator and some kind of daytime max now for here the maximum amount is arbitrary you can make it a normalized value or use 12 or 24 or literally anything you want for this case i simply went with 24 just to match the hours so with this logic each day is going to last 24 seconds then of course you can also apply just a basic multiplier if you want to make it faster or slower so if i put the multiplier and define it as 0.5 then each day is now going to last 48 seconds in this case to convert daytime into hours since i made the maximum as 24 with that i can just do a fourth in to get the hour so if i do a simple debug log to get the hour if we see what this says there it is on the console constantly increasing and as soon as it reaches the end the 24 hours because we're using the module it loops back into zero and continues the next day so that's really all you need to define the logic for the day night cycle in this case for this game for the vampire game it is crucial that we know what is day time and what is night time and of course since the goal is you want to be playing at night since that's when you're most powerful because that the game doesn't have a realistic daynight cycle so instead of something like 16 hours of daytime and only 8 hours of night you have pretty much the opposite so over here just a super basic if just get the hours if it's above 4 and less than 11 if so then consider daytime anything else it's nighttime okay so that handles the basic photology to keep track of time and for the visuals it's also pretty simple i just made them using a very simple animation so over here on the directional light i've got a standard light so everything's presented then i've got an animator and on the animator i've got an animation and as you can see as i move the animation there you go it just flips around changes the color and so on so you can see in scene view there it is here is the directional light so on the animation pretty much just rotating around going back and forth and so on and then over here on the light we can see the filter and the temperature so at night time got a very cold color and close the filter just to make it even more blue and then as the sun starts coming up there you go the temperature goes up the filter goes into white then just stays there for a little bit and then once again moves and you can see the shadows so for the visual it really is as simple as this one more thing for this cycle like i saw on the script i'm using a certain multiplier so we're here to control the animation first of all i define the animation exactly the same as i defined the default maximum so i had to find with 24 seconds and over here on the animation this one does last for exactly 24 seconds and then on the animator itself over here i've got just one animation and crucially one thing that you might not know the animator actually has a really nice multiplier field and that field can be based on a parameter so what i did is on the animator i defined a daytime multiplier and it's being applied onto this animation then here on the script i've got a reference to the day knight cycle animator and on awake i simply go in there and i modified the flow to what i have over here so if i want today to be super fast let's have put four in here and yep with that both the logic and the animations they're both perfectly correct then the final visual is just over here the clock so it rotates around when it's daytime the color changes doing that is super simple i've just got a basic canvas inside i've got a game object containing all of the elements i've got a background then a whole bunch of text objects for all the various numbers and then i just have the hand which inside has the actual sprite i made it a child sprite so i can modify the pivot position if you don't know how to do that i actually made a video super long time ago but it's super useful to know basically just offset the child in order to modify the pivot on the parent so with this one on the parent i can simply rotate over here on the z axis and i can rotate the clock around then here for the script controlling it is super simple literally just grabs a reference to the hand transform and modifies the euler angles to rotate it just goes into the sunlight system accesses the instance in order to ask for the date time normalized and multiplies it by 360 degrees then also as if it's daytime if so change the background color to the day color if not change to the night color all of it is really pretty simple and here it is the element in action so it's rotating around and in a bit there you go yep it suddenly turns into sunlight okay so these are all the things that make up a basic day night cycle now for the really important part about this mechanic we need to identify when the player is being hit by sunlight so when does the player in shadow and when are they in sunlight now doing this is actually something that is seemingly simple but it's actually quite a bit complex now you might immediately have guessed the straightforward approach that would be using a raycast you know where the player exists so you can simply spawn a raycast right from the player position fire it towards the sky so there you go just in there technically that would work fire the raycast towards the sun and if there's nothing blocking then the player is in the sun if there is something blocking like for example a tree then the players in the shade so you would think that would work however in most games the physics shape of objects does not match the visual shape for example here on this demo i've got all kinds of trees and objects they all have con letters on them if i try moving there you go i cannot go through the tree the tree trunk is solid however if we inspect the tree don't look at it we can see that it does have a very basic leather this one is using a simple capsule collider and not something that actually has the shape of the mesh so the collider shape does not match the original shape and this is exactly what you should do now technically you could swap out disk and leather for a mesh container and then the raycast method would work but having mesh colliders on every single object especially when using it on complex objects like this tree with tons of tiny leaves using that would massively tank your game's performance look at the massive difference in the complex of the actual shape and even with that we can see that the mesh collider it would simply not function if it had the exact same shape as the object so even that one isn't really accurate so because those reasons that is why the obvious approach of using a raycast and collaterals that is why that would not work but instead we can use the next obvious approach which is perhaps even more obvious which is we can literally look at the sun from the point of view of the player if we can visually see the sun then that means there's nothing blocking it so we must be in sunlight and if not then we must be in the shade so that is the approach that i took and over here on the player game object inside it i have a second camera here it is the czech sunlight camera now this one is not running into the screen and said it is rendering onto a render texture now if you don't know about random textures i made a phone video on them they are super useful for making really interesting use cases like this one so the camera output goes on to this texture and then for this section for the settings over here i made with a pretty small size and zero antianalyzing then for the camera background if you look at it over here for the environment for the background type i went with a solid color and i chose a really nice screen so the goal was if the camera can see this color then that means looking at the sky although that method wasn't actually working too well it has to do with how the background color is still affected by the sunlight color so for the final result i still went with a solid color but more importantly i set the alpha on zero and since i only care about a single pixel that is why the render texture over here is super tiny and again since all i want is really just looks straight at the sun because of that over here the field of view is also super tiny i can increase to see what this camera sees and there you go that's what it sees let's look at it in play mode so put the camera side by side so with this yep there you go as the sun rotates on the sky so does this camera so it's always pointing towards the sun and as i move there you go if it can see the sunlight there you go i'm in sun if not then i'm in the shape and of course again this whole thing works with just one fov one final thing that i also had to change is over here on the camera we've got the clipping planes so the camera just starts seeing at this distance and only sees up until this instance now if i put this at zero then the whole thing breaks because the camera is in there but it's actually looking at the hat that is not what we want we want to see if we can look at the sky from outside the character so that is why over here i set a nice tiny offset so that the camera starts viewing just from up here so that's really it for the camera setup it's just a second camera that is rendering with a super tiny fov rendering onto a texture with a specific color that has alpha of zero then the camera has this simple script attached to it over here it has a reference to the sun which is the directional light then it also grabs the camera target texture then down here i have a function to test if this camera if this character is catching sunlight and really what it does is just cause the read pixels functions in order to read the pixels from the render texture onto a regular texture now if you don't know about this method if you don't understand what this is doing then go watch my video on how to take a screenshot that's pretty much what it's doing here it creates a new texture based on the render texture then just reads the pixels so it reads the pixels from this texture onto this texture then with that to get the sky color i just call getpixel100 to get the sky color and then here like i mentioned i tested out two different approaches for the first one i want to grab this pixel and compare this pixel so get the color difference between the sky color and the camera background color and to do that instead of using just a simple equals since colors are really floats so you should never compare float directly to another float floats have limited precision so you should never ever compare them directly so to compare these two colors i simply made this function it's a super useful function that is part of my utilities so basically what it does just gets all the difference for all the colors so the rgb and a just gets the total difference for all those sums them all up and just returns it then over here i can just test the difference max so if it's under a certain maximum then i consider that the same color which in this case would mean that it's looking at the sky however like it said with this method that was getting some inconsistent results it has to do with how direct and intense the sunlight is if it is too intense and the camera differs from the background color by quite a lot so instead of comparing colors i just went to the second method where literally all i test is just the sky color alpha basically all of the objects in the game they have some alpha they're all solid so if this camera isn't looking at an object that has no alpha then i can be pretty sure that it's looking at the sky and the final thing to make all this work is around just looking straight towards the sun now here you might think that you can instead of doing this just do a simple transform.look at you might think that you can do this this one takes a target for the target transform position however directional lights don't really work like that they don't work based on the position you can move them you can place them anywhere the actual position of this game object has no impact at all the directional light only takes the rotation into account so in this case in order to keep it clean i left the position on zero zero zero so if i had the camera looking straight towards there then to be looking towards that position instead of looking towards the sun this guy so that is why you cannot just do we transform down look at and look at that game object instead you have to take the directional light grab the lights transform forward which is where the light is pointing and then you just invert it and set this one to that with that here it is in the game so look at as how the light rotates around the sky as it moves around you can see the camera is always perfectly pointing and finally for testing i also made this super simple debug element this one is set up as a world space canvas which is super useful check out my video on them if you've never used a world space canvas like i said really useful for adding ui elements onto the world so in this case i just add this one and then inside i just have a very basic image then on this world ui i simply have this script and this script really just has the czech sunlight camera as it is it catching sunlight if so change the color to the day color or the night color so with that i can walk around i've got this nice debug visual that is telling me here i'm in sunlight and if i get into the shade there you go now i'm in the shade now the final thing to make this work is just some basic logic and effects for logic here is the sunlight system script then i've got this function to try to deal sunlight damage and this function is running on every single update and over here the first thing that checks is it daytime so that function once again just says the hour so if so then it's in daytime it checks if it's daytime and then also as the checksum light camera as if the player is catching sunlight if so then it just increases a very basic timer by how long the player has been in sunlight and if this if is false so if it's not a time or the player is not catching sunlight if so then we just reset the timer and for the visuals i just have two basic particle systems so this one just has a handful of particles so the particles are flying away and they've got a nice trail so it looks pretty nice and the second one is pretty much the same thing but a lot more intense and again they also have a simple script doing the same thing to make sure that it looks straight towards the sun then back in logic i just have references to those two so the first one activates if the player has been in sunlight for more than 15 of the maximum time and second one activates after 50 percent and if the player is still there after the maximum amount of time then so the player starts taking damage for damage over here i'm using my own super useful health system that i've been using for many years i've used this in pretty much all of my steam games and a while ago i made it into a proper asset so check it out if you want a simple easy to use and fully featured health system it's completely free so feel free to use it in your own projects and finally the logic also grabs the post crossing volume and modifies the weight so over here i've got a separate game object with a post frosting volume this is a second one so i've got the main one over here is the main post crossing volume so with the main effects and then i've got a second one this one just increased the bloom and increased the color gain this one has a higher priority than the other one so this one has a priority of zero and the burning one has a priority of 10 and then on that script all i'm doing is over here modifying the weight so if the player is not taking damage then we've got the regular view and as soon as the players start taking damage then we increase the weight on this one there you go looks really intense okay so with that here is the final mechanic now if it's nighttime i can walk around anywhere i can look at the clock to see when it's night time and when it's day time so after a while there you go it does become daytime i'm currently in the sun and there you go it starts to become much more intense and after a while i'm going to yep there you go i start taking damage so i better run away get into some shade and there you go in the shade i'm safe even though it's daytime when it's night time once again i can walk around anywhere and the day night cycle continues to loop in loop so here i can run around anywhere i can go anywhere i want and now it's about to become daytime so i better run away i better get in the shade and there you go even though it's daytime over here in the shade i'm fine and if i go outside there you go now i'm going to burn all right awesome so this mechanic is really interesting it's really awesome making this was pretty fun learning how to use the camera to build this was a nice fun challenge to complete so here it is my recreation of the v rising sunlight system and i hope you learned something also if you want to learn more about how the game actually works the developers actually did a really indepth interview with unity on twitch they open up the project and showcase various interesting things for how it works definitely go watch that if you want to learn more about how this game works it's always great to see the behind the scenes of games made with unity that turned out to be excellent games and find massive success and again if you want to learn how to recreate various systems from interesting games then check out the how it's made playlist learn how to make these scout probe launcher from other wilds learn how to clean a mesh like in rover mechanic simulator learn how to interact with world objects and scan things like in cyberpunk and many others and finally if you're still watching this video to the end then thank you and i actually have a gift for you for some reason the v rising devs added my email to their email list now i'm not entirely sure why maybe they confused my channel for a more game playing channel instead of game dev or perhaps since the game is made with unity someone from the team might have learned something from my videos and they intentionally added it to the list anyways whatever the reason was they sent me a bunch of sim keys so as to thank you for sticking with the video to the end if you want to get the game here's some sim keys if you pick them up just let me know in the comments only about 510 people watch the videos to the end so this is a nice gift for you i hope you'll enjoy the game just like i did alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and i'll see you next time you