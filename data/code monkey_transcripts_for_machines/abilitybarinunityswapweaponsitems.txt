in this video we're going to make a hockey bar to select our active weapon each weapon is unique and the player can activate them by clicking on the hotkey bar or using the keyboard the bar is customizable so each weapon or item can be dragged into a different position let's begin hello and welcome I'm your code monkey and this channel is all about helping you learn how to make your own games with NF tutorials made by a professional indie game developer so if you find the video how fun consider subscribing ok so this is what we want to make over here is my player character I can move them around and look around as you can see I'm currently homing a pistol and I can click in order to shoot and there you go I'm shooting my pistol now here on the UI there's this nice hotkey bar with numbered keys so for example I can press 3 and there you go I've equipped the sword I can press 4 to equip a shotgun press 5 to equip my punches and press 1 to consume a health potion so using the keyboard I can very easily swap between weapons or use an item the code behind it is very versatile so I can easily drag each element into a different position on the bar so for example let's swap the sword and the pistol so now when I press 2 I have the sword when I press 3 I have the pistol then another example out here I have a mana potion on a extra bar so right now it's not on the bar so I cannot use it but I can drag it into a valid position so let's put it on 4 and I fire press 4 there you go now I can activate my amount of potion so with this we have a very nice bar with active abilities or items that we can select and customize their action behavior all this code is nicely abstracted so all I need to apply this to your own weapons or items is to have a simple function call alright so this is our goal let's get to it so here we are in the starting scene I have this character in here and I can move around and with the mouse I can shoot my current weapon which is a pistol now over here I have my player class with functions to change the current weapon type as well as some functions to consume a health any mana potion so we want to call these functions through a nice hot bar in the UI and through our keyboard alright so first let's make a testing script to test this out so we make a new C sharp script let's call this testing make a new game object come with testing and drag the script onto it ok alright so now in here would simply do a private void update and on the update let's test for keyboard input here we can use the alpha numbers these are numbers right above the keyboard so when you press the number one let's enable the Epistle so for that we need a reference to our player instance okay here is my film let's go into the editor there's the field and just drag the game object okay it's now with this reference we can use the functions that we saw so in this case we set the weapon type when we press the number one let's enable the pistol then let's add all the others okay so here we have when I press one we're going to enable the pistol onto the shotgun on three the sword on four the punch and on five we're going to consume a health potion okay so let's test this out so here we are with our pistol okay now press two and there you go now we have a nice shotgun okay now press three and now we have a nice sword press four and now we have a simple punch and kick and press five and we have a nice consume health potion all right great so we have our keyboard inputs correctly calling functions in our player to change the active weapon awesome now let's make sure that we write some nice clean code so we're here in our testing we have our hockey code let's put this in a dedicated class instead so we make a new csharp script let's call this the hotkey ability system now in here let's make this a simple class so no mana behavior now let's copy the input code from our testing so we copy the entire update let's make a constructor to receive our player okay just like that now on testing all we have to do is create it and call this function so in here let's make a private void start and on certain with creating a hotkey ability system so on start we instantiate a new instance of our class we pass in the player and on update we're simply calling our update which n is doing the same as previously ok so everything should still be working exactly the same as before let's test ok here we are with a pistol and a shotgun and now they sword and punch and consume the Health Ocean ok great so far so good now right now in here we have our abilities hardcoded so when we press 1 we activate the pistol on to the shotgun and so on so the next step is to swap out these function calls for a nice object so first let's create an enumerable any type okay we have an enum with all of our various abilities now let's make a class to home both the ability type and the action to activate that ability so go down here we make an asset class so a public class let's call this the hotkey ability and inside we're going to have a ability type and we're also going to have a action which is inside the using system namespace so an action and what's gone this deactivate ability action alright so here we have a next class that holds an Anu which is the type of the ability and an action that we use to activate our ability now an action in case you're not familiar is essentially a function that we can store inside a field so using this we can now go all the way up here and we're going to make a private list of hotkey ability so we make the list and now in here we can add our abilities so let's add and we construct a new hotkey ability going to pass in the ability type for this one for the pistil and then for the activate ability action we pass in we were doing in here okay so just like this you can see the pattern that we're going to go with so we added to the list an ability of type pistol and when we activate this action we're going to set the weapon type to pistol now just add the other ones all right so here we have filmed up our list with all of our possible abilities and now using this we can make our code nice and versatile so down here instead of triggering the function directly on the player we're going to access our hotkey ability and list then we're going to access it on a specific index so when we press 1 let's access on index 0 and we call the activate ability action then we do the same for all the others so just like this our abilities are no longer hardcoded directly into our key inputs so for example let's put the health potion on the first ability so let's see if everything changes ok so here we are everything is normal now when I press 1 there you go I consumed a health potion instead of equipping the pistol so you can see how by using a custom object we can now easily swap out what we do on each key ok so now that we have the underlying system working let's make our UI elements so here in our scene I have the game hammer inside the UI component and a canvas here let's make a new game object call this the UI hotkey bar now inside let's make a ability slot template all right so here is the template it's very simple we just have a background then a nice border on top a number for the hacking and then a item image now this is the game object that we're going to duplicate in order to dynamically populate our bar all right so let's make our script so we create a new C char script come with the UI hotkey bar drag it into our game object ok now in here the first thing we need is to grab our template reference ok we have our template then we set it off as hidden so just like this we have this script for the UI and then we have our ability system for the logic now we need to connect them both so on the UI let's make a function to receive our hability system okay will receive it now we need to update our visual and now in here we need to cycle through all the abilities that we have in our hotkey system so back in the system let's make a function to return our list so we do is return the list all right and now in here we can cycle through it now as we cycle through it let's duplicate our template now we need to locate it correctly so you place it correctly okay now we need to set our correct image so in order to get the image let's go inside our hotkey ability and here let's make a function to return our sprite we're going to do a switch on our ability type and now in here we need a reference for the sprite so for that let's use our testing class in order to hold our references okay so here I set up a very simple singleton pattern so we have a static instance and we set it on awake then we have our public fields that we're going to set an access now here I'm just doing it on the testing in order to quickly get this done but if you're using this in a proper game then you would obviously put all of this code in a proper game assets class so but in this case this works let's go into the editor so here on our testing game object we have all of our fields so let's simply drag all the references onto it okay we have our fields back in the code now we have all these fields set and we can access them through our static instance so we go back into our hotkey ability now in here when we get the sprite in case we want a pistol then we simply do a return go into the testing access the static instance and we get the personal sprite all right so that's it now all the same for all the others okay now we have our function to get the sprite so we can go back into UI and in here and let's update these sprites alright so here it is all correct so we have our UI class it contains our ability slot template and actually in here since we start off with the template disabled then we have to reenable it once we instantiate it so we take this one we go to the game object set I click the true okay so here on our update visual we cycle through all of our hotkey abilities then we duplicate our template we set it to visible we correctly unlocated based on the index and then we update our item image based on the get sprite from that hot key building ok so the last thing we need is just to call this function in here so we're going to do that on our testing class all we need is to add another serialize field in this case for our UI hotkey bar so back in the editor we just drag the reference so there's a test thing there's the reference and drag it on there ok and now finally in here we create our hot key value system and then we set it on our you want so there it is very simple all right so just like this we should be able to see our visual bar correctly displaying all of our hot keys let's test any of there it is there's our hotkey bar correctly displaying all of our hotties all we need is to fix the number so very quickly okay here we are in yep there you go they all say one through five and they all correctly display it so if I press one I should yep there you go there's the home potion onto your pistol they sharpen the sword and II punch alright awesome now to make sure that this is wearing correct let's try swapping in one of them out so to do that it's very simple we don't need to deal with the UI at all we just need to go into our billing system and in here and let's swap the sword for the shopkin let's test any of their it is our UI correctly update and then change position the sword is now on three and shotgun on four so if I press three there you go I now have the sword in fair price for now I got the shotgun alright awesome okay so now let's enable click on the UI in order to change our active ability so for that let's go here in the editor onto our template and let's create a script to handle our mouse input so a nice sharp script called this the UI hotkey bar ability slot and let's make sure we drag it on there okay now in here we're going to implement some UI events so for that we need to be using Unity engine that event systems and with that we can now implement various interfaces so in this case and let's implement eye pointer down handler okay here we have our event that gets called whenever we press on this object so when we do we want to activate this ability so for that let's make a function for this object to receive the ability assigned to it okay so just like this we have our hotkey ability assigned we're going to assign it on our UI here when we create our visual let's call this function which is inside in here so we get the component of time our ability slot okay just like that we are passing in our ability and now in here all we have to do is activate it so we can similarly go into our ability and activate the ability action all right so that's it very simple let's test ok here we are with a pistol and you click to shoot works fine now let's select the shotgun so click and there you go now I'm activating shotgun and now blow it up on some health potions and now back into the pistol back into the sword and the punch and so on alright awesome so we can now click and also use the keyboard in order to manipulate our hotkey bar ok now let's see on with dragging and dropping in order to change the position of our abilities so for that we go here into our ability slot script and we can implement a bunch of more interfaces so let's implement the I drag handler and let's also implement the I drop handler ok we have our two new functions now I've done two videos on how to draganddrop various things using our UI events so if you'd like to know more go check out those videos one of them is on dragging a UI window and sending it to the top and another one is on dragging and dropping in here I'm going to just quickly implement both of these okay so I have added the drag code okay so here on drag I'm moving the rect transform by the event that a delta movement now as he saw in those two videos we need to divide it by the canvas scale factor and in order to get our canvas we have the code up here in order to automatically grab it essentially we just go through every parent until we find a canvas so just like this we should be able to drag our ability slots let's test okay there they are and let's click and drag in there yo I can now drag the spot alongside me alright awesome so this is working I can move it around however when I let go it should either be valid only when I drop it on top of another one or if not then it should snap back into the original position so let's first deal with the snap in order to snap back all we need to know is our starting position so in here we store a vector two so on start we grab our start anchored position and here we can reset our position on another drag event so in here let's add the I and drag handler so this one is triggered whenever we stop dragging so it's in here that we can go to direct transform and set the anchor position to our start anchor position okay let's test okay here we are there's the pistil icon click and drag and now let go and there you go it goes back into the position right awesome so now that it automatically snaps back and let's see on with dropping on top of another one so for that we're going to implement our on drop event and now in here we're going to do just like we did on the drive drop video so here we test if we were dragging something and if so then we test if that something contains an ability slot and if so then it's in here that we want to essentially swap so in order to swap let's go into our ability system and in here we want to make a function that swaps two indexes so let's go all the way down here and then here we make a public void swap ability and receive an int for the ability index so we receive two indexes and in here all we need to do is swap them all right so there it is very simple so we can now call this function so let's go into our slot so here first we need our system reference so let's rename this function since we're going to receive multiple things so let's simply rename this to setup and then we're going to receive a system receive an index and our hot key ability or to store all these all right so with our setup we now have a reference to the hot key system and then we can simply go in here and we can swap our abilities we want to swap this one so we pass in this ability index and then we want the target ability index so for that we need to make a function to return this so we make a public return int for the gift abdulhakeem index and we simply return so we go into the target hotkey ability and get that in that's all right so that's pretty much it for the swap logic however we still need to take care of a few things so first of all here Lee setup let's call this one so on the hotkey bar here we are with our setup so we passingly setup then we have to pass in our ability system then pass in this index so it's CI and the ability ok and now here let's do a debug log on both indexes just to see which ones that are being swamped let's test ok here we are now let's drag and drop and there you go it resets ok now let's drag and drop on top of this one and drop it and there you it doesn't quite work if we look at the console there we are swapping the 3 with 3 this is the same issue that we dealt with on the drag and drop video the issue is that this one is capturing both events so when I drop it's not dropping on top of that one but rather dropping on top of itself so let's fix that so to fix we just go into our template and we add a campus group so then in here we just grab it then let's disable the raycast with the I begin drag him more so let's implement this one ok so when we begin dragging we're going to lower the Alpha and stop locking the raycast and when we finish we reset everything so now we should be correctly listening to this event on the correct object okay here we are let's grab the shotgun and drop it on top of the sword and there you go it corrected and over here in the console you can see swap 2 with 3 and as we start dragging there you it becomes transparent we do I have one more issue here though which is this one is currently on top down ok however this one the pistol if we drag it there yo the pistol is behind the sword we wouldn't like the draggable one to be on top so let's fix up so that's very simple over here on the begin drive we simply need to go into the transform dot set as last sibling since the order for which UI objects are on top of another one is dependent on their channel in X so let's see ok here we're on let's drag the pistol and reaches up on top so drag that one you bunt up and on top of all of them right great now here we've actually already implemented our swamp except we can't really see it since everything still looks the same but let's say I swap the five with the four so visually the five still sounds it says the punch but if I click on five three oh I am now equipping the shotgun so the logic is working but the visual is not updating let's see one with that so essentially the UI needs to update whenever we swap the ability so here on the swamp ability and let's use some events so we create a new event event handler let's call it on ability and list change and whenever we modify our own list let's trigger this event so right in here we can't invoke alright so there it is very simple this event is fired whenever we swap in a billing so you can now go into our UI script then here we already have the update visual function except it's only being called once so now when you receive this we go into the system and subscribe to the event whenever the event fires we call our function there it is very simple let's test okay so here we are with the pistol one two and sort on three and let's drag it and swap it and there you go it did in fact swap although we have to deal with another ratio which is deleting the old objects so let's do that so in here whenever we update we just need to delete all the children except for the template okay so here it is very simple we cycle through all the children we ignore the template and we destroy all the others let's see and here we are let's drag the pistol on top of the sword and there you go they correctly change now the pistol is on three insert is on two so if I press two there you go I'm now holding the sword press three and I'm holding the pistol so I can swap all of them and they all work correctly so just like that yep there you go very nice alright awesome so now that we have all this working let's at a simple place for some extra abilities so for that let's go into our system and in here and let's make another list this won't be the extra hotkey ability list so this list won't contain extra abilities that are not currently present on the barn so we cannot activate them we need to drag them out to the bar in order to use them so let's add a mana potion so in here we just had an etype for a mana potion then we just created pretty much like all of the others except we add it to the extra hotkey ability list ok there it is as you can see the object is exactly the same except it's not any different list now let's see on with the UI here we're going to do very much the same thing except put it on the side so here I set it up very simply just for testing so I'm just shifting it onto the side and going through the secondary list just like this obviously if you were using this in your own game you would clean this up since you don't want to have duplicate code now in here we have two options for example we can make the setup and pass in 1 to indicate a extra ability so we would pass in 1 into the ability index and then here we'd swap that ability and in our system we would verify which one of these is extra and which one is not so that's one approach but another approach is in here we already know our abilities so we can simply modify this function to work with hotkey abilities instead of indexes so let's try that approach is to see things differently okay so here I modified the code in order to swap an ability by receiving ability objects instead of indexes so now with this one we can more easily verify which one is on the extra list okay so here this will receive both of our abilities then we check if hotkey a is on the extra ability list if so then we grab the index for the B on the current list we swap it out with ei then we remove the a from the extra and you put the B on the extra if a is not on the external list then we test for the B if so then we do the exact same thing if neither of them then we do what we were doing previously okay so let's test ok so here we are with the pistol alright so far so good and here on the external list I have the mana potion so let's drag it and let's swap it out with the shotgun and there you go it's worked out correctly in position now if I press for there you go now I'm using the mana potion so I can then drag them on the inside and there you go everything all the buttons all the things work perfectly fine so just like this I have an extra ability slot in here and I can drag them onto my hotkeys so just remove the number since that one is not activated on through a key and there it is just like that everything is perfect so press 1 for the health potion press you for the epistle 3 for the sword four for the shotgun 5 for the punch and now pressing Anya their buttons doesn't work for the amount of potion but I can drag the mana potion and swap route with a sword and I press 3 there we go mana potion two on that and so on so I put out now on three I got the shotgun and not four I got the mana potion so I can click on any ability in order to activate them I can drag them to swap their position and I can use the keyboard in order to select my current active weapon all right awesome so this is a great system to add to any game where you have multiple weapons or skills or items the extra bar for example could be the inventory where you would drag objects from the inventory onto the bar in order to use them so that's one possible use case in earth as long as you can download the project files and utilities from unity code monkey comm subscribe the channel for more unity tutorials post any questions in have in the comments and I'll see you next time