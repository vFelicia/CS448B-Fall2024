hello and welcome I'm your code monkey and in this video we're going to make a game in ten minutes using an interesting strategy let's begin okay so you might have seen some videos of this challenge which was first started by Becky's where you try to make a game in ten minutes so you open up a blank scene start a timer and try to do as much as possible in ten minutes I think it's a fun interesting challenge but here I won't be taking a somewhat different approach I will be creating a game in ten minutes however my main goal with this video is to showcase the power of writing clean reusable code the big advantage to reusing code is since we already have it written we can make something pretty complex in just 10 minutes so I won't be using various assets and systems that I've created in the past and many of which I have individual videos that you can check to see how are they were originally created I hope that by the end the video when you see all that was made in just 10 minutes you'll agree with my viewers so how important it is to write clean reusable code so the game we're making is essentially a prototype RTS with two warrior factions the words are spawned they don't look for an enemy move towards that enemy and attack them that's a pretty simple base for an RTS but in reality even without my reasonable code the whole scene still takes 15 minutes to create but I figured it was better to make something interesting rather than being strict on the 10 minute limit nothing of what I'm going to use here was created specifically for this video every ass and I'm using was made for something else in the past the starting scene I have here is the scene I use in all my videos so even this was initially set up six months ago with various improvements over time I have a bunch of generic classes that are very easy to adapt along with the code monkey utilities and my custom animation system alright so with that out of the way let's begin so the clock starts now okay so now first of all the main thing we need is a main script so it's great in you see sheriff script this will be our game handler this is gonna be the main script from which we set up our game so in here let's begin by making a serialize field for a camera phone script now this script was created in a previous video it essentially has a bunch of functions for easily modifying the camera so we can change the position and zoom so on start let's do the chemical setup the setup requires a function for the camera position and one for the zoom so let's define a private member variable for the camera position that's what we're going to pass in as the camera Falls position now on update let's do an input dot get key to get the key down for the wsad keys that's how we're going to pan around our camera so when we press W we simply change the camera position that wide move it up by a certain camera speed multiplied by time dot off the time define the camera speed and copy the same thing for all of the other keys so WI CD on the theme of the right on the a move to the left on the s move down and on TW move up and for the camera zoom let's only give it a fixed value of 70 okay so let's drag the script onto our game hammer object and drag the camera follow component which is placed on the main camera object okay so like that we can now Pan the camera around okay now we're going to duplicate the character position movement handler this is the script that is part of my base scene and it simply already contains some base code for implementing the animation system and moving a character around so first let's make a static whirring list which will contain all of our warriors we're going to add this object into that list and change the animations to work with the sword shield we're going to add a serialize film to define if this is an enemy or not and this way we're going to use the same square for both the enemies and the friendlies so duplicate the game object remove the original script and drag our warrior script leave not as enemies since this one will be the friendly and some we're going to the body and change the material the body is simply the mesh that is used by the animation system and just like that we should have a worry and yet there you go a warrior with a spartan spreadsheet and he's idle okay so now create a prefab so we can instantiate our friendly worried duplicate it to make one for the enemy warrior now the only difference is the enemy won't have is enemy set it true and have a different spreadsheet instead of having the Spartan we're going to use the Persian spreadsheet so now let's make an a new for our state so we can have two different states we have the normal and the busy essentially the busy does nothing and the normal does the normal logic so we start off at normal and on update we do a switch on our current state and we can be in either state dot normal or state dot busy if we are busy we do nothing but if we are normal we are handling the movement and after handling movement we also handle all the attacks so in here make a private boy to handle the attacks so first we're going to grab our target warrior so we're going to use a function to get the closest warrior we're going to give it the target of not is enemy so essentially we want a warrior from the opposing team and make a helper function to get the position which is simply the transform dodge position so let's make the get closest on the way up here make a private static warrior get closest we're going to receive a boolean for our target is enemy and we're going to receive an effector for our position so let's define a closest warrior first of all set it to no and then that's what we're going to return so let's act all through the list now if the warrior that is enemy equals the target that we're searching so essentially it's on the team that we're targeting let's first check if we do not have a closest if we don't then this one is the closest if we do already have a closest warrior then we want to select the one that is actually closer to this position so we do a distance check between this warrior and our position and if that one is closer than the closest then this war it won't become the actual causes so if we do have a territory if territory is not known then we do have a target and if we do the first thing we do is set the target position which simply moves this object towards that target position which is defined in the original script that we used and then we're going to do a simple distance check between this game object and the target and if it is close enough then we're going to start attacking now on the attack first thing we do is set the state to busy so we are no longer executing the movement logic and then we play an animation now the animation again is using the custom animation system so I'm going to use the animation sword shield attack now I need to calculate a direction for that animation so come with the attack direction which is based on the target Direction minus our get position and normalize the whole thing so we play on a complete frame right and then we have an action that is triggered when the animation is complete so it is complete we simply go back to the normal state and then we also have an action when the animation reaches a trigger which is the impact frame and for now do nothing and then set to no okay so now the game can learn let's add some serialize fields for the friendly and the enemy so a serialize film for a transform for the friendly warrior prefab and for the enemy warrior free from then on start let's instantiate a firmly warrior going to put them in a certain position and after the friendly and let's also spawn an enemy okay so let's go to the game hammer object and drag both references now let's test and yep there you go both them were spawn both them move one towards the other and they attack when they are within attack range okay so now let's change their position so they don't always spawn in the exact same position so for that I'm going to use the code monte Tony's to go into the utens class and get a random direction and multiply it by a certain value this just so they don't spawn exactly on 150 and then I'm going to spawn five and place them alongside the vertical axis okay so it's S&C the five friendlies and the five enemies yet there you go five enemies five friendlies and the old chase the closest to them okay so now let's go back into the attack and now we want to actually deal damage so let's first make a function for the private void damage and we're going to receive a parameter for the attacker that is causing damage to this worried so in order to use damage we're going to use the health system which was created in a previous video we're going to give them a max health of a hundred and to find the health system as a member variable so using that health system we can simply call the damage function and give it a certain damage after we damage let's test if this worry is then if he is let's destroy key game object then let's also make a boolean to test if he is dead simply ask the health system if he is that and returns that so when we reach the impact frame if the territory is not dead because he could die once in the middle of the animation so if he is not dead then we're going to damage him using this as the attacker so let's test and see if the enemies are dying okay they are moving towards each other and they attack and after a while you can see some object disappeared but there was an error there is because up here when we are checking the causes we did not ignore the dead ones so in here similarly do if the warrior is dead then simply continue and ignoring from the cycle all right so when we're dealing damage let's first comment like the direction from the attacker and now we can use that direction to spawn some bullet particles which again the bullet handler script was first created for survivor squad so many years ago and scripts still works perfectly fine it takes a position and a direction and it spawned some bullet particles so let's make a health bar using the worm bar which is part of the code monkey Tonys which again was also created previously so let's spawn it on the transform place the warm bar on top of this transform give it a certain size give it a background color frame mark on a red start with it come only filled give a certain roared up so that it is on top of everything else give it a black outline with 1/2 thickness all right so let's store this as a member variable for our world bar will be our health we're on bar and we set it in there and now since we have that member variable we can go into the health system which has an event that triggers when the health is changed so using that we can set the size of our health world bar and set the size based on what the health system is saying so now let's run we should we don't see the point particles and the health bar yep there's the health bars right there and when they hit yep there are the particles and you can see the health bar is going down all right good so now when we are dead let's add a nice flying body effect which again was also created on a previous video it simply takes a prefab and sends that prefund flying away the prefab contains the sprite of the dead flying body and then we place it on the position and we give it a flight direction which is the same as the direction from the attacker so now let's grab some references for the transforms that we're going to use for the prefabs of the flying bodies so for that let's making static instance on the game handler so we can use that from our warrior class we're going to make a poly transform for the Friendly flying body and then one for the enemy flying body since they have different sprites so using that we can go back into the warrior and first define if it is an enemy to pick out which flying body transform we should use so by default use the Friendly flying body and then if it is an enemy set it to the enemy flying body so we have enemy flying but ok so that we are spawning a flying body and now just for some polish let's also do a little bit of camera shake when the enemy actually does so when a unit dies the screen will shake ok so let's create the fine body so I have the sprite create a new prefab name it pf' friendly flying body and it won't simply be this very simple sprite and do the same thing for the enemy flying body and drive the new sprite okay try the references to the game Hamelin and now test out the game okay so there's the enemies they both have health bars and they take damage the young health bar and yep there you go you can see the falling bodies when one of them dies so they attack each other and when they reach zero yep the flying bodies spawn and there's a blood trail and what's very satisfying alright so now let's make a function in order to spawn multiple units so let's copy our code into its own function and first we're going to combat function and then we're going to use the function periodic which is part of the code monkey Tonys which again was written a long time ago in order to spawn the units every three seconds so let's test and yep there's the first wave and they are attacking any of there's another way and they're all attacking they're all working perfectly fine the units are created either as an enemy or as a friendly and they move towards their target and attack each other all right so that's our mini game it took 15 minutes instead of 10 but the final result is quite nice if all of this can be done in 15 minutes then in one hour we could make some workers gathering goods and very quickly create a sort of Age of Empires prototype so this is a great fun challenge but obviously it's not representative of what game development is like I already know the game design in my head and the time it took to organize all of that is not in within the first 15 minutes but still this whole minigame was first conceived in my head and brought to life in a total of around 4 hours thinking about what game I wanted to make what elements I can reuse how they would interact with each other and so on so if you've seen other videos on this challenge you can probably see a massive difference in what we can accomplish from scratch versus if you already have a nice library of prewritten clean reusable code so let's review all of the reuse code so first of all there's the ebay scene whenever I start a new project I just copy the base in folder that way the camera is already very nicely set up into the exactly as I want to be and it has the cameraphone script that I use pretty much on every project the UI in canvas are also very nice and easily set up so I can easily add something in here and make a UI then I've got a bunch of generic based scripts that serve as a base for whatever I want to do so for example I have one for a character that can aim towards the mouse and move using WASD I have one to click to move to a position something that follows various waypoints and a character that uses a sword so for the assets I already have a bunch of characters from previous games for this game we use the Spartan and the Persians which were first created for hyper Knights balance I also have the worker spreadsheet that I want to add to this project which was made from ninja Tycoon and also have this background sprite in here which was first made for hyper Knights I used various scripts that were created in previous videos first of all the camera follow system which is very simple and very easy to use then the flying body which takes a transform and simply moves them away so it looks like an enemies flying and makes for a very nice effect and the health system which was created in the very first video then the inside of the script that we duplicated the character position movement handler it is named that way simple because it supports receiving a target position and it simply moves toward that position very simple and everything is set up to use my custom animation system that system was created almost two years ago for Hyper Nights and I'm constantly improving it and adding new features so in the meantime I've created a very large library of very animations the ones that I'm using in here for the marine idol and marine wonk these were first used for harbor Knights barrels as were the sword shield Idol and won't which was also used for Hyper Knights balance so there you have it we create the game prototype in just 15 minutes I hope this helped you see the importance in writing clean reusable code and keep adding assets and generic elements to your own personal library to make your future work much easier as long as you can download the project files the new Toni's from unity code monkey comm if you have any questions post them in the comments and I'll do my best to answer them subscribe for more videos and I'll see you next time