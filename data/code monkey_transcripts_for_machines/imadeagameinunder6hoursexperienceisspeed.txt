in this video we're going to look at how i made a complete match 3 game in just under 6 hours this is a very popular genre because you can use these underlying mechanics with just about any theme it's easy to learn easy to play and very versatile let's begin alright so let's check out the game i made in under six hours it is a mastery game now i made this because i'm working on a video where i need a mastery game in order to demonstrate something really awesome so stay tuned for that upcoming video and works out great since this is a very popular genre but i haven't covered it in any videos just yet also my goal with this video is to show you the power of experience so if i tried to do this several years ago it would have taken me over a week and perhaps over a month in order to build this but right now thanks to my 20 years of programming experience and almost 10 years of unity i can build something like this very quickly so this works as a great example on why you should focus on getting more and more experience and make as many things as you can that really is the main thing that defines just how good and efficient you are i made not just the base game but also a ton of features in such a short period of time it has the standard match 3 game mechanics so you click and drag to move gems in order to make a match and when a match happens the gems get cleared so that's a standard game but then i also made a fully functioning level editor so i can easily create levels with any grid shape i want and manually design the starting state i also implemented two different goal times so there's a basic score going where you must reach a certain score amount and also a glass going where some gems are encased in glass and it needs to be destroyed i can just right click on a grid position in the level editor in order to encase it in glass and lastly i also made a bot to automatically play the game so it analyzes the board and decides what the best move would be and simply does it so it is smart enough to understand how to win the score goal as well as the glass goal this bot is a requirement for that other video that i'm working on so stay tuned to see how i will use this so in such a short amount of time i made not just a game but also a fully functioning level editor as well as a automated bot to test playing through the game okay so here's how i made it first of all the reason why i managed to do it so quickly is because like i always say you should always write clean code so rather than starting from a completely empty project i start from my base project that i use for all my videos so i already have the project set up with urp and already have tons of helper scripts and classes in the project files so pretty much everything was made in separate videos over the two years that i've been running this channel and in here i already have the grid class implemented so this is a really good real generic class with tons of features and it was funny made in several previous videos so check those out to learn more with this class i can very easily make the underlying grid for the game within a few minutes i have a grid visible and each root position has a word object then i use scriptable objects to hone the gem types i also covered them in detail in a previous video then let you define fields and store assets with all the data so i defined an object for each gem type which really makes it easy to customize each gem as well as easily add more types next again i made sure to write clean code so i separate the visuals from the underlying logic so there's a main match 3 script with a grid and logic and then a match 3 visual script which sets up on the visual representation i made a simple prefab for each gem so pretty much just normal sprite and i made a class to handle the visual representation it is connected to the underlying gem object and that class also has some simple smooth movement implemented so it just has the update method that smoothly moves the transform towards the underlying gem object position then with that i just spawned all the gems on top and they automatically fall into place so again really awesome clean code and as far as the underlying grid logic is concerned there's no animations anywhere the gems are just spawned in their position and that's it the visual script is what handles a nice smooth visual animation then for the player input again i kept it separate from the logic so the underlying match 3 script doesn't know anything about any player input it just has methods to swap positions so this was very useful later on when i made the bot script to play it automatically so i implement the simple state machine for the visual script it stays busy while there's an animation happening and then goes into the state listening for the player input then the input is based on the mouse so when the player presses the mouse button it keeps track of where it was pressed then when the player releases the mouse it knows that second position so with those two we know the starting point and direction of our swap so it just swaps those two gems then working on the logic for the matches this took a bit of work to think of a good approach but afterwards it's quite simple since the game lives on a grid it's easy to look at the grid neighbors so just take a certain grid position then look at how many gems of the same type are right next to it so start by looking the first one on the left and if it is the same then look at the next one and so on so do that for the left right up down directions and then simply keep a counter of how many of the same type are together then if it's more than three horizontally or vertically we have a match next making the matchy gems be clear so after finding a match we simply go through all the link gems and destroy them and again since i organized the project in a nice clean way this is very easy to implement i just added the event to the underlying gem grid object it fires the event when it is clear then the visual just listens to that event and when that happens it destroys the visual game object so i tested that and it worked perfectly fine and afterwards i simply made a nice small particle effect when the gem gets destroyed next up making the gems fall into new empty positions so the logic for this is rather simple just cycle through the whole grid and for every gem look at the positions underneath if there is an empty position then you move that gem to that position so that's it pretty simple and due to the way that i set up the visuals there is nothing else i need to change the visuals already ask for the underlying word position and smoothly move them so as long as the gem grid object changes position then the visual will smoothly follow then handling the spawning of new gems so after all the gems fall down into valid positions i need to spawn some more so this one is also very simple just cycle through the whole grid and look for empty grid positions and suddenly film it again since the code is nicely organized the visual script didn't need to change much it just needed to listen to an event when new gems are created and when that happens it creates the visual representation by spawning the prefab and the visual object so that's it very simple and with this the game is almost only working according to the base game design so the word is set up with gems and i can click and drag to swap them if there is a match then the link gems get destroyed all with a really nice visual and made with some really clean code so at this point it had only been pretty much under two hours so if my goal was just to make a bare bones match three game then this is how fast i could do it but my goal was to expand upon it so i kept going next up making the level editor now i wanted a level editor so i could manually design the starting state of the level and for that i also use the awesome scriptable object to save the data so first defining the structure the level needs a width and height of the underlying grid object then i define the class to home each grid position object so it has the gem type that is meant to be spawned there and all the word positions are stored in a list and then the level also contains a list of all the gem types available for that level so that's it for the definition of the level object then on the level editor script first it checks if the level object list already exists and if not then it creates a random yield level so just cycles through the home width and height and creates random gems on each position then just adding some simple player input so when pressing some keys it looks for the grid position under the mouse and modifies the gem type and that's really pretty much it it's really very simple and of course great for exactly what i want to do i can easily manually design some levels and the whole thing is stored in some really nice discrete scriptable objects then for implementing the class mechanic so some gems start off in case in class at the start of the game this is meant to add a different call type where the player must destroy all the glass positions doing this is very straightforward all it takes is adding a volume to the right position then making the visual show up if the bowling is true and when checking for matches if that position has that only set it to true then it simply turns to phones so that's it very simple then just adding that to the level editor which is also simple just test for the right mouse button click and get the word position then go into the level editor grid object and set the ball into true with that class was implemented then adding the ui the visual setup is very simple i just wanted to showcase the current score the number of moves left and the goal the goal can either be a target score or a class amount so the structure for the ui is very simple just some visual images and a bunch of text objects then for updating the ui i added a bunch of events whenever something happens in the game so when the player gets a match or destroy some glass and event is fire then the ui updates lastly i just made a simple you win or you only screen that again shows up based on the event fire by using events the home code is nicely decoupled so the underlying match 3 and logic script doesn't know anything about any ui element so the logic works both with or without the ui then for implementing the score this is just a basic end so when there's a match it adds a hundred points for each match position and an extra bonus 201 matching four more gems then for implementing the automatic bot now this task took quite a bit of thinking time in order to figure out essentially i need to know what would be a good move to make so i just made a function that goes through the home grid one by one and tests swapping the accurate position with any of its four neighbors and then seeing if doing that move would result in any matches so that's the logic pretty much just brute force going through the grin then for the bot itself it simply listens to events from the visual script when the visual script is waiting for player input that's when the bot makes its move so it makes a move by calling that exact same function that the manual player input calls so the bot only moves when the player could move which means it works pretty flawlessly when the bot wins or loses then that's it doesn't play anymore so by being directly linked with the visual everything is nice and easy so i made the function to get all the possible moves from the grid then i made another function in order to choose the best move from all the possible moves the logic is different depending on the goal type of the level so if it is a score level then looks for the move that gets the most score and if it is a less level then you choose the one that destroys the most class so it's relatively simple and it took a while to implement everything correctly but the end result is pretty great the bot plays automatically and plays quite well always doing some good moves and wins most of the time and finally adding a special explosion mechanic so i want the bonus when the player matches four more gems when that happens there's an explosion that takes down a bunch more gems so adding that was relatively easy just go into the code where the link jams are being destroyed and then check if it's more than four and if so grab the first gem and look at all the neighbors store their positions and in the end try to destroy them so that's it very simple logic so now when the player or the bot matches four in a row there's a nice explosion that takes down a few more gems and with all that the final game was made so in roughly six hours i made this game completely from scratch i made the basic part of the gems implemented the core game design looking for matches and clearing them then i also made a pretty robust level editor in order to manually design some levels added a glass mechanic and implemented the score made a bot to automatically play through the game and lastly added a special explosion mechanic alright so this was an overview of the match for the game that i made this was an interesting new type of video it's the first time that i've recorded the whole process of making a game and then doing an overview video so let me know in the comments if you like this video and maybe if you'd like to see some more like this making this type of video is much faster than doing stepbystep tutorials so if you enjoy this type of content this is something that i could do more often and cover more genres so let me know in the comments as always you can download the project files and utilities from unitycodemonkey.com if you found the video helpful consider liking and subscribing this video is made possible thanks to these awesome supporters go to patreon.com unitycodemonkey to get some perks and help keep the videos free for everyone post any questions have any comments and i'll see you next time you