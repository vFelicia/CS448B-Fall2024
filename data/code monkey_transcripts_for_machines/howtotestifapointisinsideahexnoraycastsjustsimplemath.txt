hello and welcome i'm your code monkey here let's learn how to test if a certain point is inside or outside of a certain hex shape doing this involves a bit of math but don't be scared it's nothing too special personally i'm not very good at math so if i can learn this and definitely you can too this can be done in both 2d and 3d i won't showcase and include both methods in the project files you can download now if you're in a hurry here's the 30 second answer you first you test if the point is inside the horizontal bounds by testing against the width then test for the vertical bounds against the height then for the diagonals you calculate this angle and get the perpendicular direction to it then with a certain test point you calculate the direction from this corner to that test point and then just do the dot product between these two vectors and that will basically tell you if this point is on this side of this line or on this side then you combine all those tests and you have all the logic working now for a more guided explanation keep watching the video this is the kind of thing that even if you don't use it right now it will still improve your math skills just by learning how this is done part of the reason why i'm doing this is to help solidify my own knowledge and also why i started learning this is because lately i've been researching hex words lots of games use them and this would be a great addition to my standard grid system i'm also planning to include hex grids as a free update to my turn based strategy course and i thought that to make that work i needed to figure out the math to test if a point is inside a certain hex position however actually that is not the case for a hex grid you really just need a basic distance check but still i wanted to learn how to test if a certain point is inside a hex and learn all of the math behind it so here i won't cover that and then for the other specific scenario converting a square grid into a hex grid for that i won't cover it in the next video here i just want to get a point and test if it's inside a certain hex shape so let's do this over here is my hex shape now i drew this basic sprite in photoshop photoshop has a tool for drawing perfect hexagons you can just go and use the polygon tool right here this one then on the options under star ratio just pick 100 for number of size pick six and then if you just click it shows up in nice little window so you can make a perfect 100 by 100 hexagon and yep there it is then you can simply rotate it if you want a pointy top or a flat top okay so this is my hexagon now for the shape here it is on the metrics i define a certain size which is used both for the width as well as the height then the distance from the center to the sides this is half the size it's the same thing as the distance from the center point to the bottom or the top then for all of the corners here the upper and lower are just offset by half the size so that's simple but these corner ones to get to this one we need to move to the right by half the size and then move up by only a quarter of the size whereas this one right here go to the right and then down by a quarter then for the names over here is the upper corner down here the lower corner then the upper right corner upper left lower left and lower right again pay attention to the coordinates on all of these points like how this side is to the right of the center point by half the size and specifically how these corners they are out by a quarter of the size these values are going to be very important when doing the actual math so for testing here is my scene i just have my sprite it's positioned on zero zero zero and it has a standard scale of one one one i just flipped it 90 degrees on the x in order to make sure that it is on the xz axis again like i mentioned all the math used here can be used in either 3d or 2d the only difference is really whether you're using the xz axis or the xy axes then i also got my standard mouse 3d script so i can play the game and i got a nice cursor following the mouse if you don't know how to get the mouse position go watch my video on that topic so with that let's begin making our script so let's create a brand new c sharp script call it test point inside hexagon let's make a game object to run this and attach the script now here the first thing we're going to do is create a structure where we can store all of our hexagon corners so that we can later do some math so let's put up here a public class called hexagon now quick note of course we could make this class in a separate file the only reason why i'm writing it here is just so it's easier to read the code for both the testing and the hexagon so here let's store all of our coordinate positions as well as half the size so first the public float for the half size then let's go with vector3 for all the corners so the upper right corner then the upper and left corner then the other ones all right so here's all the data that we need to define our hexagon we've got half the size the center point and all the various corners all right now let's make a constructor so public hexagon and on our constructor let's receive a float for the half size and let's also receive a vector3 for our center point all right now based on just this we can calculate all of the other corners so let's first calculate the top and bottom which are super simple so for the top one so that's the upper corner for this one we're going to take the center point and we just want to move it on the zen and we want to move it by half the size so let's add plus new vector 3 0 0 1 and move it by half the size again going back into our hex shape here we've got the center point so we want to move up by half the size and again the only difference between 2d and 3d is here instead of using xz you would use xy and perhaps instead of using factor threes you'd use vector twos okay so that's the corner and for the lower corner this one is also super simple we just take that and just move down by minus one on the z okay so with this we already have this working let's do a quick test just to verify now one way to unlock this would be to add a manual debug.log on each one of these that would be quite a lot of work so let's do something a bit faster let's go up here into our testing script let's first make a proud void start on start let's construct our hexagon let's put it on new vector 3 of 0 0 0 and let's give it a half size of 0.5 f so that the total size is 1 f like i said for debugging instead of printing all the values one thing we can do is let's use the json utility and convert to json and convert this object into json and do one log on this one so just an easy way of printing out all of the various fields if you don't know what is json you can watch my quick explainer on it pretty simple so here let's see what this prints all right so here's our log let's see the half size is indeed 0.5 that is correct the center point on zero zero zero that is correct and then for the upper corner it is on zero zero and zero point five yep and the lower corner is on zero zero minus point five which we can also verify over here since it has the exact same size exact same shape as this one so we can create a new empty game object and we can position it let's make sure it's on zero on the y and just move it over here to this corner and yep zero zero minus point five and this one zero zero plus point five okay great so both those corners are working correctly now let's calculate those corner positions so referring back to our size reference here in order to get this upper right corner we need to start from the center point we need to move to the right by half the size and then move up by a quarter of the size so another way of getting a quarter of size is really half the half size so let's do that over here let's define that so the upper right corner we start from the center point then we move to the right so one zero zero we move to the right by half the size and then we move up so new vector three zero zero 1 and we're going to move up by a quarter of the size or really half the half size so half size times 0.5 f all right so that should do it let's see okay here's our log let's see the upper right corner it is on 0.5 0.25 so again we can verify let's create an empty game object let's put it on a y of zero and then just move it roughly over there and see if it is correct yep 0.5 0.25 all right awesome so our math is on working correctly now let's do that for pretty much all the other points so up here let's copy that so we've got the upper and left corner then we've got the lower right corner and the lower left corner now for the upper left corner we move based on the center point we move to the left whereas this one we were moving to the right okay then we also move up that is correct and for the lower right corner we move to the right yep and the other left move to the left but then on the lower right corner instead of going plus one on the z we go minus one and minus one all right so that's it let's see if all of our logic worked okay there's our log let's see so the center point on zero zero zero that is correct the upper right corner point five zero point twenty five yep then the upper left is on minus 0.5 and 0.25 yep that is correct then the lower right corner 0.5 minus 0.25 minus 0.5 minus 0.25 okay great so all of the points are correctly positioned now that we have this we can finally start running some basic logic so on our testing script let's go up here let's make a simple private void update and let's just make the hexagon a member variable so private hexagon for our hexagon and we just set it down okay so we have our hexagon and now over here on the update let's first test just if we are inside the horizontal bounds so we need to get the mouse wrong position so again i'm going to use my super helpful script that i made in a previous video get the mouse wrong position so we're going to test if the mouse were on position.x if this one is less than one of the right corners so we can use the upper right or upper left so let's go the upper right corner so that's inside the hexagon the upper right corner and we grab the x so if it's to the left of that one and if it's to the right so let's copy this if the x is bigger than the upper and left corner if so then it's inside the horizontal bounds here let's just do a vector 3 for the test position just so we use this one instead of that one all right so that's our busy code now just for testing let's add a nice visual just so we don't have to look in the log and we have a more visual view let's grab a reference to the mouse game object renderer so let's make it a serialized field in private use a mesh render for the mouse mesh render then let's also have a field for a material let's say green material and then also a red material then if we are inside so if we are inside the bounds let's set this one to material equals the green material and if not then let's put on the red so let's put it up here so this one the red material okay so we set the red material then if it's inside the horizontal mounts we change it to the green material so here in the editor let me just drag the reference of that one and then also the mouse green and the mouse red okay let's test so here we are with the mouse outside and it is in red okay correct and if i move inside yep there you go green and if i go outside yep back to red all right so the horizontal bounce is indeed working now the next thing we want is vertical testing so if we go above the upper point over here it should be red as well as down here so let's do that now that is going to be super simple it's pretty much the same thing so let's actually copy this and put it inside so for this one let's test the zed on the test position and instead of the upper right corner let's use the upper corner so it has to be under the upper corner.z and it has to be above the lower corner.z so this is inside the vertical bounds okay let's see all right outside is red inside is green now if i go outside in there and there you go nice and red and nice and green all right so the basic bounding box is indeed working now let's get to the complex part which is related to diagonals right now if i'm here outside diagonal but still inside the vertical and the horizontal over here says green where it should be red so what we need to test is test if the test position is on this side or this side of this line now thankfully this was actually pretty easy for me to learn how to do because i already researched an interesting game mechanic that relies on the exact same logic the backstab mechanic that i covered in a previous video for that one to work i need to test if the player was behind the enemy and when researching that topic that's when i learned about the vector3 dot product it basically tells you if a vector is pointing in the same or opposite direction of another vector so that's exactly what we're going to do here we basically have this line here and in order to test which side our test point is we just need to grab this direction so we're going to complete the direction from the upper right corner to the upper corner and we get this direction vector then with that vector we're going to apply a 9 degree rotation and we're going to end up with a vector pretty much like this then all that slice is just getting our test point complementing the direction towards the test point and doing the dot product between this vector and this vector okay so let's do this for that first let's calculate this vector and then this vector so here and let's define a vector3 let's call it the direction from the upper right corner to the upper corner now this is a super worthy name but i can't think of a better name that would be equally as descriptive and compact again you should always value readability over compactness so i'm okay with having a super long name as long as it's super accurate so i have this and for this one we just go into the hexagon grab the upper corner and subtract the hexagon dot upper right corner so you grab this vector so with that we have this vector and now we need to apply 90 degree rotation to end up with this vector now for applying a 90 degree rotation thankfully for that i have a super useful function in my utilities which you can download from unt codemonkey.com here i've got a function to apply a rotation to a vector on the xz plane so we're only just taking the quaternion euler with a certain angle multiplied by the vector so over here i'm going to use that function so let's apply the rotation to the vector the rotation is going to be this direction vector and for the angle the way unity works is actually clockwise so what we want is minus 90 degrees so this is going to be the vector 3 let's call this the dot direction upper right corner now just with this let's do a quick log just to make sure that all of our math is working correctly so far so let's do a debug download first on this one and then also on this one okay so let's see if these two are correct all right so here it is and we can see the direction from the upper right corner that is this one going to the upper one is minus 0.5 and plus 0.25 that is correct and the one that is perpendicular that one is going minus 0.25 and minus 0.5 which yep doesn't look to be correct okay so the next thing we need is the direction pointing from the upper right corner towards the test point so over here that's a vector 3 for the direction from the upper right corner to test point and this one is simple so test point minus the hexagon.upper right corner and with these two directions all that's left is the dot product so let's do a vector3 dot let's use the dot direction upper right corner and the deer from upper right corner to the test point in order to make sure that the dot works correctly being between minus one and plus one let's normalize these vectors just like this okay so let's do a debug download to see what this says and let's also make the visual based on this one so let's see if this one is above zero if the dot product is above zero make it green okay let's test so here we are and if i'm on this side it's red and on this side yep it turns green so red green yep it does seem to work and we can see on the console there if we are on this side of the line then we have negative numbers and on this side we get positive numbers and the closer we are to where the actual vector is facing the closer it is to plus one and on the other side would be minus one all right so the logic for this specific corner is already fully working so on the right that is red inside we have green if we are past the vertical line is red then here it is green and on this diagonal if it is on this side red and here green so everything perfectly working now that's left is really just apply the same logic to all the other diagonals so let's do that we just need to do the exact same math around the corners so let me quickly do that all right so here is all the code pretty much just copy pasted the exact same logic the one important thing is over here when applying the rotation to the vectors so again back to this we have this vector we apply minus nine degrees and we end up with this vector so this one is minus nine degrees because unity goes clockwise but then on this one we calculate this vector right here so we have that one and if we get minus 90 degrees then we end up with this one that is not what we want we want this one so that is why on that one we need to apply plus 90. so here on the dot direction for the upper left corner let's put plus 90. then for the lower left corner we've got this vector in order to get this one we are going counter clockwise so this one is minus 90 and then finally for this one in order to get this direction we need plus 90. so the dot here on the left this one is minus 90 and the dot there on the right this one is plus 90. here you can pause the video if you're following along or you can just download the project files link in the description okay so let's test and here we've got the dot product just to make sure everything is working so let's see so here we are and we can see the logs so first the dot upper right corner on the outside we've got minus and over here we've got positive okay now for the dot upper and left so on the upper left over here we've got minus and we got plus then the dot low right over here we have plus and we have minus and the final one over here plus and over here minus see up on the logic is correct so if all of them are positive then we are indeed inside the hex shape alright so here we are now first of all if we are outside on the horizontal here we have red we go inside and we have green then if you go outside through this side yep that is red and if you go above yep red if we have green and over here green go outside and we have red then for diagonals if we are here green and on this side we are red then green red over here green red and green red all right awesome so everything is working on all sides so we can always test if a certain point is inside our hexagon or not with this all of our logic is fully working so this is how you can test if a point is inside a hex using nothing but math so there's no physics no ray casts just some basic math and by learning this you also hopefully leveled up your own math skills just like i did learning how to test if a point was on one side or another side of a certain diagonal line for me as someone with very basic math skills i'm pretty happy that i managed to learn that so here is the code for how to test if a certain point is inside a certain hex shape now like i said the reason why i researched this is because i'm researching how to make a hex grid so i'll be covering that in the next video and after that i will also be taking the results of my research and making a free expansion to my turnbased strategy course converting that game that code base into a hex grid if you don't have the course yet check it out with a link in the description it's a great course it will teach you how to massively improve your programming skills and take you from beginner to advanced and if you already have it then this hex grid update will be a completely free expansion of the course hopefully within next few weeks alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and i'll see you next time