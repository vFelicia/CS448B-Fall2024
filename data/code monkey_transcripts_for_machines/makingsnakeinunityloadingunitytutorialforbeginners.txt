hello and welcome I'm your code monkey made the series were making snake in unity in this video we're going to deal with the loading so we can reload the game when we die let's begin okay so here's our game we have the snake move around we can eat some food whenever we do the body grows and as you can see the score increases and right now if we have enough of the body we can actually trigger a game over so there's the body with a nice size and now if I wrap around it and there you go we got a game over it says dead and everything just stops so right now in order to reset I have to stop and restart the scene so let's deal with loading so we can reload the game scene when we done so in order to deal with loading let's make a dedicated class so in here a new csharp script and this will be our loader now in here this will be a very simple class so first of all let's get rid of monobehaviour and also let's make this a static class that means we can only have static methods and fields we cannot instantiate this class which for a loader class it's exactly what we want so now let's make a simple milk function so we do a public static void load and inside in order to load we need to go up here and do using Unity engine scene management inside that namespace we can now use the scene manager to use the load scene and now in here we need a name for the scene that we want to load now instead of using strings in our code and let's make an a new that has the scene name so in here let's make a public in home and this will be our scene so our currency name as you can see in the editor we named this our game scene so let's use that so define our first value for the game scene and now on the unload function let's receive a scene for the scene to load and our it's unloaded we say Malone our scene and put it to string since this expects a string alright so we now have a very simple function we can count so now let's go back into the game handler and in here on cert let's create a simple testing button so in here using the ECM debug class which again is part of the code monkey tony's i can create a simple button on the you are so this function is very simple it just takes a position where to spawn the button some texts that won't say on the button and finally an action that won't happen when we click on the button so in here we want to test our loading so we're going to do our loader and call the unload function and we're going to load the game scene so that's it very simple we now have a nice button so we can test to make sure our auditor is currently working so let's see and okay here's our nice testing button so if I click on it if there you go the scene reloaded so let's put the snake down there okay so now the snake has a body and let's hit reload and see if everything returns to normal hit reload and if there go the snake went back to zero zero and the new food was spawned all right so the scene apparently reloaded component back to normal however as you can see we have an issue with our score it did not reset when we reload the scene so let's look into why that's happening so here in the game home we are storing the score using this private static field and since it's static that means that when the game hammer instance is destroyed this static variable continues to hold the same value so one solution is to have a function to initialize our static variables and count on awake so let's do that here to make that function and in this function now we're going to do is set the score back to zero and now let's call this on our awake okay so now let's test again and see if this core gets correctly reset when we reload the scene okay here we are there's the snake now let's eat some food now I have a score of 100 and if I hit reload if there you go the score reset back to zero and if I add another one now it goes up to 100 again and so on all right so everything is working correctly now one potential issue we have is that the game hands while loading in this case it's loading pretty fast so you can really see that problem but let's try and century adding some more objects just to see that problem in action so in order to make our game hang on start let's add a bunch of food on our setup okay so here we have some code in order to test the problem that I'm talking about so essentially we are simply instantiate in 50,000 game objects whenever we start this we'll make sure our loading takes quite a while so let's test okay there's a snake let me eat some food okay the snake is dead now I wouldn't like to reload the scene so let's hit reload and see how long this image stays on and I click reload and yep there you go as you can see it's stayed stuck on that image for a while so when we are unloading we don't want to display a static the image which makes it seem like the game has broken so let's add a nice loading scene so for that let's go up here and create a new scene and this will be called our loading and in here let's just create a very simple UI okay so this is it very simple we just have an empty scene just same loading in the corner that way the player can know that the game is currently loading so now let's go back into the unloader class and first let's add a new value to our anu for our loading scene and now on the unload function before we unload our target scene let's load the unloading scene so first we load the loading scene then once that one is visible then we load our target scene right that should do it so let's go back to the game and see if it's working also in order to use the scene management top loading we need to go up here into the build settings and add our scenes so in here let's add the game scene and the unloading scene okay here we are and if I hit the reload scene you can see that nothing actually changed it is still hanging on this screen before reloading the same scene the issue we have right now is that in our code we are loading the unloading scene and then immediately unloading the target scene so we are never leaving anytime for the screen to update between these two statements so what we need is to load the unloading scene and then wait for an update for the screen to refresh and then we can load our target scene so for that let's create a script that waits for one update and then run some code so let's create a new script a new C sharp script and this will be our loader comeback and then here let's wait for our first update so we have just a boolean by default set to true and on the first update we sell it back to false so in here this code will run only once after the very first update so when this happens and let's sound the unloader that the scene has correctly unloaded and we can now run the rest of the code so for that let's go into our loader and make another function so we now have this nice function that we can go back into the loader come back and call it so the loader that call the unloader callback function so we now have this function being called on the very first update after we load something so now when we need this to store an action of what to do when we get this count okay so let's see the code that I have written here first I add the field for the unloader combat action an action is just a function that you can save in a field so when we call the unload function we give it a scene that we want to load and we set the unloader come back action to be an action which won't trigger the load scene of that target scene so essentially when this action is triggered it won't execute this line of code which unload our target scene so first we set our field and then we load our loading scene when the loading scene has finished loading and it updates our screen then this script will run and this script will call our loader combat function and this loader comeback function will check to make sure that our action is not no and if it isn't then we simply call our action which again won't load the target scene so what we should see happening is we unload our loading scene when it finishes loading we unload our targeting some let's see and we also need that script to run so obviously let's create a game object for the unloader come back and drag our script onto it okay so now we are ready to test so here we are with our reload scene button so there's our snake movie now I hit reload scene and there you go it loads a nice black loading screen and then it loaded in our actual scene so I click reload again first it goes into loading then finishes loading and it shows this screen so now we no longer have a static image which makes it seem like the game is broken and again the reset is not working so I can still go all the way up here eat some food eat some more so now my body is large enough so now let's trigger our snake that there you go the snake has died and now in order to play again let's click the reload scene button and there you go we went into loading and now back and we're back into score zero with the size of zero so there you have it create the unloader class to help us load various scenes and took care of bugs related to static fields in the next video we're going to create a game over window as always you can download the project fountain utilities from unity called monkey comm if you have any questions post them in the comments and I'll do my best to answer them subscribe for more videos and I'll see you next time