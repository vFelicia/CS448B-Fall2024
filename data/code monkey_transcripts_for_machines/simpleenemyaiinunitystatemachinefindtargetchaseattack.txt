in this video we're going to make some very simple enemy AI we're going to have our enemies roam around randomly and if the player gets within range they won't switch into attack mode chase and attack him let's begin hello and welcome I'm your code monkey and this channel is all about helping you learn how to make your own games with nf2 torrents made by a professional indie game developer so if you find the video helpful consider subscribing okay so let's check out some very simple AI now the eye we're going to make here is a very simple state machine that can be easily expanded upon to fit whatever your game needs so for example this is what I used on the topdown shooter that I made recently so over here is an enemy and I'm controlling my player now the enemy as you can see he's just roaming around randomly around his firing position so just minding his own business picking a random position however he's also searching for a target so if I approach him and I go within the target range there you go you can see that he's now pointing at me and chasing me so he's currently on the chase State and if I let him get within a Tec range there we go within the attack range he starts shooting and if I go away he can't eat his chasing and shooting and so on and now if I reach way too far there you go he gives up on chasing and goes back into his starting position and then again back into roaming four random positions so just like this over here you can already see some pre based ki I've been using this type of state based AI for many years now and it's very easy to make an easy to adapt to fit whatever needs your game has again you can see it in action in the topdown shooter game I made recently the enemies there have a fine target range attack range and then idle state this video is made possible thanks to these awesome supporters go to patreon.com/scishow to code monkey to get some perks and help keep the videos free for everyone alright so this circle let's get to it okay so here's our starting scene I have my player character that I can move around I can shoot and over there is an enemy and I can shoot and kill him so essentially this bae scene is taken from the topdown shooter I made so go check out that video and play that game the weapon aiming was also covered in a previous video as was the particle system all right so let's handle our enemy here on the scripts folder and let's create a new C sharp script and we're going to call this the enemy AI and let's rump it on top of the enemy prefab okay so first let's make him just roam around random now we want him to roam around randomly around his starting position so first that means we need to store the starting position so let's make a private row it start and we store a vector3 for our starting position and we set this on our start alright we have our starting position now let's make a function to get a random roaming position okay so here let's get a random position around the starting position so for that I can go use the utilities as long as you can download the utilities for free from unity code monkey comm and in the utilities I have details class and get random Direction so here is that function in case we want to make yourself as you can see it just does a random on the X and a random on the Y and normal is the vector so this returns a random vector with random on the x and y so using this we get a random Direction now we apply this to our starting position so starting position policy random Direction multiplied by a random distance okay so here's a function to get a random roaming position we get a random Direction multiplied by a random distance apply to our starting position now in order to handle movement as you can see here on the prefab the enemy has this script to hand on path finding movement this is a simple movement code that uses the path finding that we made in a previous video so it calculates the path and then simply follows it and we have a simple function to set the move to position so let's use this so back in our AI script when starting let's also calculate a roaming position so you get the wrong position and we have to a random one using our function alright and then we have a private void update and then on update we move towards our position so we need a reference to our path finding movement script all right so we have a feel for our path finding movement script we grab it on awake so we do a simple gate component then on start we complete a new roaming position and on update we're going to go into the path finding movement script and we call the function to move to our wrong position so this won't calculate the path finding and move the character towards it then all we need to do is do a simple distance check so we do a if do a vector3 dot distance between our current position so transform that position so the distance between our position and the wrong position we test if it's under a certain amount so if it is under a certain distance then that means we have reached our wrong position so when we do let's calculate a new wrong position all right just like that so with this the enemy should be roaming around randomly let's test ok so here we are and yep there's the enemy just walking around there we go he reach that position went to that one now he's going to that one and now two down there and we can see the path finding and there you go he's doing there now he's going there now he's getting there and yep so he's correctly getting a random roaming position every time he reaches one right awesome so now that we have him roaming around let's make him chase the player so back in our AI script we want the enemy to check if the player is within a target range and if so then we start chasing them so for that let's make a function called find target now here let's keep things simple and make him only able to target the player now the player class has a nice static instance field that we can use so back in our AI we can do a simple distance check to test if the player is within the target range so we do a dozen check and if the pointer is within that range in the player is within our target range so when we do then we want the enemy to start chasing the player so this is where we need to handle a basic state machine so over here on our update we have the code to roam around randomly and then we need the code in order to chase the player so here let's just set the move position straight into the player position so just like this he won't chase the player however obviously we cannot run both states at the same time so let's go all the way up here and we're going to define a private innum in case you don't know an enum is a data type where you can have specific named values so it's perfect for defining States so here we just call it our state and for the various states left roaming and then chase target so those are our two possible states then let's also store a field to store the current state so private of type state and call it state and by default let's set it to roaming so now we have our simple state variable and on our update we can do a very easy switch switch on our state and when we do a case roaming so when we are in the roaming state we're going to run this code and case we are on the chased target state then we run this code all right so that's it over here we have a very basic state machine so our logic depends on our state all we need to do is actually change the states so we're here on our fine target first we're going to look for a target once we are roaming so while roaming we're going to come find target and then when we do find a target let's modify the state to be stata chase target all right that's it let's test ok so here we are and there's the enemy roaming around randomly and now as I approach him and when I get within range up there you go he's now chasing me and moving straight towards me and just like that and now he will never let go alright awesome so we have correctly made two different states with two different behaviors now that we have this working lets him enemy attacking so back in our enemy AI code over here when you have our state was chasing the target let's see if he is within a certain Attack range so again we're doing the same thing just see simple distance check and if he's within attack range then we want to attack him and now here the enemy also has a script that handles all the aiming and shooting so we're going to use that external script the same way we did for the movement so that one it's a script which implements I aim shoot uh names again how this is implemented isn't relevant for the AI so when you make your own games you should make sure that you keep things nicely separated so for example the path finding movement doesn't care about the AI and this animation does not care about the air so they are all completely separate so we get that component and now in there we have two functions one to aim at a target and one to shoot so whilst we are chasing let's simply set the aim target to be on the player position so we're constantly going to be aiming towards the player whilst we're chasing him and when he is within attack range then let's call shoot target so we shoot again towards the player position and when you do what's also stopped blowing okay let's see okay here we are and there's the enemy just roaming around randomly all right now as I approach he's going to go from roaming in to chase and yep there you go he's currently aiming at me alright so let's let him get closer and let's see if he shoots yep there you go he shoots and as you saw that is quite insane but yep there you go he is shooting alright so let's solve this issue now the issue is that he's essentially shooting a bullet every single update so if the game is running at a hundred frames per second then the enemy is shooting a hundred times per second so here let's implement a very simple fire rate now this would normally be built inside a proper weapon class but just for testing let's make something very simple in here so all we need is really just a float in order to know when is the next time that the enemy can shoot so a float for the next shoot time so we go all the way down here we test the fees within attack range and if so then we also test if the next shoot time is valid so we compare it with time time so if the time is past the next shoot time then we want to shoot them and once we do we want to set the next year time equals time that time was a certain fire rate all right so there it is very simple code let's test okay so here we are and let's approach him and there you go he's now aiming let's wait and there you go now he's shooting at a much more reasonable pace still too fast but yep there you go as soon as I go away he's chasing when he gets with an attack range he attacks it so very simple and very nice right awesome now over here I have modified the fire rate to be extremely slow and this will expose an issue so if we go and yep there you go see how he's doing he's essentially cancelling the shooting animation so it shows for just exactly one frame and then he goes back into moving and moving on top of me so the issue is the animation isn't being fully plain so let's fix that now in order to fix that in this case it's extremely simple so here on the shoot target function I already have an action that gets triggered when shooting is complete now this is obviously going to depend heavily on how you set up your animation system but in here I can simply use this action in order to modify our states so you can Europe here and make another state this one is going to be called the shooting target so this state will be active whilst the enemy is shooting the target so whilst the animation is playing and then on update that is essentially a dummy state so k state that shooting target we do nothing so while we are inside this state then we are simply waiting to go back to another valid state so in here when we shoot we set the state equals state our shooting target and when the animation finishes then we go back into our chase target so let's see how this works okay so here we are let's approach him wait for it to shoot and if there you go now he plays the actual shooting animation instead of canceling it on the exact next frame again this one on how you set up your animation system but the takeaway here is that you can add States while a certain animation or different action is being performed so whilst this state is active then this enemies AI will not be doing anything all right so all that's left is to handle our stop chase logic so here we are chasing target all right we are testing for the attack distance and shooting him okay then let's do another distance check so for here again we are doing a simple distance check and if it is way past this distance then we are too far and we want to stop chasing our target so when we do then we want to go back into our original starting position so again it's very simple all we need to do is make another state so let's call it going back to start and then here when we are too far we're going to modify our state to be going back to our start and then we have our case state going back to start and we simply move back into our start position so we move back into the start position then again we do it doesn't check much like this one and when we get back to our start position we simply modify the state back into roaming all right so there this very simple let's test okay so here we are and there's the enemy just roaming around randomly so he's not aiming at me he's completely I don't now I approach and there you go he saw me he's aiming at me and if I get close he starts shooting me okay and if I go way too far there we go he gives up and he goes back into his starting position and once he reaches his starting position yep there you go now he starts roaming around that position as well right awesome so here you can see how our enemy AI has some very basic simple state machine so the enemy roams around randomly he tries to find a target within his range if he does then he starts chasing that target once chasing he tries to shoot an attack target and if the target moves away way too far then he goes back into his original starting position so here in the code as you can see it's extremely simple we just have our state for all of our various states and we do different logic on our update based on the current state that is active so roaming we just pick a random position whilst chasing the target we move towards the target we test distance if close enough then we attack him if not then we test the distance if it is too far if so then we modify into a state going back to the start which goes back to certain back into roaming so again here is an action he's running around randomly I approach he sees me now he's moving towards me when he's close he starts shooting and if he's way too far he gives up and goes back so this pattern with a very simple state machine is pretty much how I always do my air everything that I do is just about expanding upon this space this video is made possible thanks to these awesome supporters go to patreon.com/scishow natee hogmonkey to get some perks and help keep the videos free for everyone as always you can download the project found in eat tony's from unity code matcom subscribe to the channel for more ent tutorials post any questions you have in the comments and I'll see you next time