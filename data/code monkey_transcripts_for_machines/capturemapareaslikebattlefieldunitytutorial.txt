hello and welcome i'm your code monkey so a while ago i made a video with my reaction to the battle film 2042 gameplay trailer in there one of the mechanics that i briefly talked about was the minimap and how battlefield games are all about capturing various areas and how they show up in the map in different colors this is actually quite simple to do with some basic letters and some ui images so let's try to do that we're going to start off with a map and define various areas then by moving our character we're going to capture multiple areas and as an area is captured they change the color on the map okay it's pretty simple so let's do it if you prefer a more guided path with stepbystep lectures then check out my complete courses learn how to make a builder defender game using csharp just like i make my own steam games or learn how to make games internally using visual scripting or learn all about unity with the ultimate overview course which contains over 13 lectures each covering a different tool or feature of the engine to help you make better games faster i'm always available in the courses q a section answering your questions every single day so check out all the courses with the link in the description alright so here let's build a capture area system just like you see in battlefield or even in my own game hypernights the world is divided into areas which can be captured individually so here as a starting point i've got this demo scene this is from the cinti polygon battle royale asset pack there's a link in the description if you want to get it i have my nice character from that same pack and i can move it around for that i'm actually using the third person shooter controller that i made in another video so you can go watch that to see how this was done so i can walk around i can sprint i can aim my weapon and go everywhere alright so first of all we need to define some areas to capture and how we're going to do that is by using some colliders so let's make a new object a new 3d cube and now let's say this container area is one area that i want to capture so let's just scale it roughly like that okay just make sure it occupies on the z as well so that the player can go inside this area okay so there you go that's the area i want to capture now of course this is not meant to have a visual so let's hide the visual and for the clutter itself make sure you set this trigger so this does not work as a solid object and then just one more thing in order to make sure that this collider does not break any other things in the game let's put it in its own layer so for example here let's call it map areas and here we assign it to them okay so we've got our collector and we positioned it now we really just need to know when the player enters this area so for that let's make a simple script to add to it so in easyjet script called map area collider let's rename this object to map area collider and attach the script okay so now here it's really simple we add the trigger collider so we just listen to private void on trigger enter so when that enters then here we've got the other collider that we hit so i need to do is test if this can leather belongs to the player if so then the player has entered this area so to identify the player let's make a proper script to handle all this map various logic so here let's just make an easy sharp script called player map areas and on the player already has a bunch of scripts so just attach this one okay and now here just go into the collider in order to get the component of type player map areas and if this one is not known then that means the player is the one that entered this so over here let's just see with debug.log layer entered okay so let's test okay i've got my character and let's go inside over here the container areas and as soon as i go in yep there you go i've got the log it's right in here yep it's the log saying the player is entered all right so far so good so with this we already have the basic logic for identifying when the player is inside a collider now in order to make this system much more adaptable we're going to make each map area composed of multiple colliders instead of just one that way we can have all kinds of weird shapes so for that let's handle the logic for handling multiple colliders let's first make a parent to hold all the various game objects so let's make another game object call this the map area and now the position for this object doesn't really matter but maybe put it roughly around the same position and then for the map here you can later make it a child with that one okay so there's the map area collector and just for testing let's make this one a bit smaller just so we test with two colliders so let's push this one to the side and there you go so this area is composed of those two colliders and now let's make a script to handle this logic so in uc sharp script come with the map area and attach it to the parent and now here the first thing that we need is to know all the multiple colliders that make up this map area so let's make a first void awake and unawake let's circle through all the children so for each transformed child in transform so this way we are cycling through all the children then we go into the child we get the component of type map area collider all right so cycle through the list if it does have the component of that type if it is not null then we simply add it to the list now that we have all of our mapping collectors let's end on some simple capture progress logic so let's make a product float call it progress so the progress of capture and then we make a simple predroid update and on update let's simply ask each collider if there's a player inside of it so we cycle through it and now we need to ask if the player is inside of it so over here we need to handle that logic all right so here i just defined the list for player map areas emitted on list so we can support multiple players and then just using triget component so if this one succeeds and we've got the component simply add it to the list and then on trigger exit remove it from the list okay so we have all of our players here now we just need to expose this list and here just don't forget to initialize this list okay just like that and back in here now we can go into the map area collider in order to get the player map areas list so you get this one and if we get the count then we know how many players are inside of this collider so we just do define an end for the player count inside map area so start off at zero go through each collider increase by the amount that is on there and then afterwards we're simply going to increase the progress based on the player count inside the map area all right so we just increase the progress based on the player count inside map area based by a certain move speed and multiplied by delta time all right so let's just add some logs okay so like this let's test all right so here it is and we can read the log so we can see the player inside is zero progress is zero okay and now as i approach that area it should go into one and the progress should start increasing so as i go in yeah there we go one n is increasing and yep after one second it reaches a progress of one alright awesome so the logic is indeed working now let's see if this captures faster with two players by the way if you find the video helpful please hit the like button it's a tiny thing but it really does help thanks so over here now this player character really wasn't made to be duplicated but i still think it should work so let's just duplicate pull on the side another one in there now let's see when i resume if it says three and it increases faster and if there it is it does recognize three players and the progress is indeed moving faster all right awesome now there is one potential issue with the logic that we set up here so on map here it's made up of monopolizers okay so that's pretty good however right now we have an issue if the collider is overlapped so if i make this one overlap into that one now these two are overlapping so now let's see what happens when the player goes inside of this area so as i go inside this area it counts as one player okay but now i go here and now it counts the same player twice so this is an issue this is not supposed to happen it's a very similar fix over here when we get the player count inside the map area we just need to add some logic to make sure that this number is actually only counting for uniques all right so instead of just an end with the final list then we cycle through all the child collectors we go through all of them and we ask what players are inside of that map area and then we simply test on this list if it does not contain that current player if not then he simply add it and if it does already contain it then you simply ignore it then down here the same thing just listen to the account and do that okay let's test alright so everything is correctly at zero now as i go in it should say one yep and as i go in here yep it always says one so even when i'm on the overlap area it is still saying one all right great now let's end on the states on the map area so make it neutral or captured so we're here on the map area let's define an enum for the state and it can either be neutral or captured okay we define the state and unawake we start off as neutral and then on update let's set a basic state machine so if it's neutral we're going to do the same thing that we were doing so we're going to capture it and when it is captured let's not do anything then we just need no logic for actually capturing it so over here on the progress so if the progress is above 1f then we simply modify the state into state dot capture here i'm using one f just to make sure that the progress is normalized so i can play around over here with the progress b and put it at 0.5 so it takes actually two seconds all right so let's just add a debug.log here and let's test okay so let's go in i'm inside progress is increasing and as it reaches one yep there you go capture alright great so all of the basic logic is fully working now let's handle the ui visual for that we actually have two methods we can use multiball sprites or we can play around with pixels now if you want to learn the pixel method it's pretty much exactly what i covered in my battleground tycoon guests video you just copy paste some pixels and tint them into a certain color and i also cover another use case in the rover mechanic cleaning mini game video working directly with pixels is one approach you can take but for another one here let's use these price which is really the simpler method so in my project files i've got a texture for the actual map so i just zoomed out took a screenshot and pasted it so this is the normal map texture and then there's one just for the map area a another one for the map area b another one for the map where you see and also note how these textures are in white by being in white that means they can easily be turned in any color okay so let's build the ui element let's first of all make a new ui canvas then on canvas set it up like i normally do so scale with screen size reference 1280 by 720 and measure the height that's just the standard that i like to stick to and now inside let's add an empty game object called the map areas ui and now inside let's add a ui image and for this one i'm going to assign the normal map okay just make sure preserve aspect ratio and let's put it on the corner there all right so there it is nice on the corner now other images for the overlays alright so there is each map area on top of the map now let's make a simple script to handle this so in uc sharp script map areas ui okay so here essentially we need to connect a ui visual to a specific map area so let's define a class to handle that connection so define a class map area image and we need to make this system.serializable in order to make sure it shows up in the editor then for the films we make it of type image so first we need using unity engine.ui and the first one will be an image so this is the ui image and then the other one is going to be a map area okay so now we just need a field for this one all right so serialize field a list of map area image and since this one is serializable it should show up in the editor and if there's the map area cy and we have our list so let's add our three areas okay and on the first one drag the map area a image okay and drag the map area that we just defined now let's just make all the other map areas so make this one a and let's build out the other ones all right so here are all three map areas we don't need to change anything on the map area script since that one already works by searching for all the children so just on the ui let's fill in the rest so my various being okay we have all of our references now we just need to handle the logic of making sure when an area gets captured the ui image changes so let's add some events to know when the map area changes state so on the map area over here let's just make an event so a public event use the standard so even handler using system make it an event handler now if you don't know about events check out the video that i made on it they are super useful so in this case we're going to make an event for on captured so we define this event and then down here when it actually gets captured then we're going to invoke that event all right so we have this super useful event and then on the ui we've got all this okay let's make a private void start so here i'm using start because we're going to access an external reference let's cycle through all of our map area images second through that go into the map area image access the map area and we're going to subscribe to the uncaptured event all right so we are subscribing to the event and also if you don't know about this this is a lambda expression which is a type of delegate so go watch my video on delegates okay so we've got that and when it is captured then we simply want to tint this image so we're going to tint the ui image set the color and let's say color.green alright so just like this it should be working so let's test alright so here i am and if i go inside of a and i wait for two seconds i'm inside and after two seconds if there you go the a turned into green so it was correctly captured and now if i go and let's say i want to skip the b so that's in there and the c is over here on the barracks so if i go in here and i wait around for two seconds yep there you go c was captured all right awesome so what's left is just a ui visual for the capture progress so on our canvas let's make another empty game object this one let's call the map areas capturing ui and for this one let's put it up here right in there okay now inside let's add a ui image and for the image over here i've got a nice circle so let's tint it maybe in green all right so there's our circle and now in order to make it actually fill up over here on the image type instead of simple let's go with filled and then for the film method choose radial okay and then we simply have to move the film out and let's put this one on the top just because i think it looks a bit better okay so now we just have to increase this field in order to see the progress so let's make the script to handle that logic so an ec sharp script this will be the map areas capturing ui okay now here let's first grab the image so here let's actually rename this with a proper name so progress image all right we get our image now we need a list for all of our map areas and make it a serialized field so we can set it in editor okay we have the list so here let's add the map area a then the map area b and finally map where you see okay now in order to show or hide this ui element we need to know when the player enters or exits a certain map area so on the map area let's add some more events okay on player enter and on player exit now we need to listen to that on the colliders so over here let's do the same thing okay over here we have one player enter and on player exit it's not the map areas for each map area collider we just need to listen to that however just like this if we now fire off these events we might have some issues and the issues for that is once again if the collateral is overlapped so if they do overlap then there's a chance that the player might actually exit one collider before entering another one and if it works like that it works okay however there's also a chance that the player might enter the second collider and afterwards exit the first collider so if we were to fire off the events there's a chance that we could have the on player enter and then afterwards the on player exit so if we use that directly in order to show the ui then we would show and then hide even though the player was still inside so when working with multiple colliders you always need to be careful with the order so on enter we can just trigger the normal event and it's only on the exit that we need to be careful with so we need to cycle through all right so when the player exits we check all the colliders and if the player still exists on at least one of those colliders then we do not fire the vent we only fire if there's no player on any of the collectors okay so back in the ui we can now subscribe to those events all right so we listen to the enter next event and we simply show our hide this ui element all that's left is to update the progress image.filmount alright so when the player enters we keep track of what map area they entered and on update we simply set the film amount we go into the map area we ask to get the progress and we set it since the progress is already normalized and this should work perfectly let's see all right so here i am and let's go inside map area and as i go in if there you go there's a progress going up and yep when it's filmed there you go the area is captured now let me just briefly pass through b and there you go that one is filling up let me leave okay so that one is not captured now i go into c i capture it fully yep there you go fully captured knowing to be and yep fully captured alright awesome so here is the system fully working we've got the character we can move around we can define what areas of the map we want to be capturable and when the player goes inside each of those areas they can capture those areas now if you wanted you could easily expand upon this to have multiple themes multiple areas multiple shapes tons of things so you could add some capture areas in red others in blue and have as many colors and as many teams as you want but even without that this is a great system for a coop or a single player game where you want the player to be able to capture some areas again if you're looking for a more guided path with stepbystep lectures then check out my complete courses alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and i'll see you next time