hello and welcome i'm your code monkey let's learn how to make a very simple checkpoint system this is perfect for racing games or really just anything where you want the player or any object to follow a preset path a while ago i made my racing rts game and one of the things that i needed to implement was some way of identifying if the player was indeed following the track correctly so naturally in a racing game you don't want the player to just randomly skip around through huge chunks of the track so that led me to make a basic checkpoint system so over here i have my demo track now the goal is obviously to follow the player to actually go through the correct path so we want to make sure that the player goes through here and makes this turn to go through here rather than just cutting straight through here so let's first think how we can make that logic essentially we need to have multiple checkpoints then we test when the player goes through any of them and then we verify that the player went through the correct right checkpoint so we need to keep track of which one is going to be the next valid checkpoint so first for tracking when the player goes through a checkpoint we can use a simple trigger collider so let's create a new 3d object let's make it a simple cube and by default it already comes with a box letter so just go ahead and make it a trigger so it's not a solid object and then let's just put it all the way up here so just scale it and give it a transparent visual all right there it is there's our checkpoint now let's make a script to detect our collisions the script will be attached to a single checkpoint so let's give it a name make an easy sharp script name it our checkpoint single okay and let's rename this also checkpoint single and just attach the script on there okay now here in order to test for the collisions it's very simple just add a private void on trigger enter so as another collider enters inside of this trigger collider so when we do the first thing that we need to do is verify that it's a player now the player has a simple player component so we can test that so if going to the other get component or rather try get component this one is more performance so try to get component of type player out player player alright so if this succeeds then we know that it is indeed the player that went through this collateral so let's just verify that this is working do a simple debug log let's say checkpoint so here we are and down here is the console and as we move forward and hit it if there you go we have our checkpoint okay so far so good so we are correctly testing when the player goes through that checkpoint now this script is meant to handle only a single checkpoint object now let's make another script that will be responsible for the whole track logic so a new csharp script let's name it the track checkpoints and over here i have the track game object containing all of them and just drag the script onto it okay now this script is going to need to know all the checkpoints in our track so one way we could do that would be just making a simple list of transforms inside of this script and then here in the editor we would add them one by one so that's one approach but an easier way is to put all the single checkpoints as children of a certain checkpoint game object and we cycle through that so let's use that approach instead so inside the track let's create an empty game object name it the checkpoints and then take the checkpoint signal and just place it inside the checkpoint now before we make some more let's go ahead drag it onto the project files just to make it a prefab okay so now we have this one and let's add another one in here and another one in here so go ahead rotate them everything works just as long as the player collides okay and now essentially in our track script we're going to cycle through this container and go through all these objects so here let's first do a private void awake and on awake let's find it so transform find to find the checkpoints container so this is the transform for the checkpoints transform and then we just do a for each transform so checkpoint single transform in the checkpoints transform so what this does is it cycles through all the children of this particular transform so to verify this is working let's simply do a debug log on the checkpoint signal transform to see every single one of them let's see and yep over here on the console we can see we have all of our checkpoints so the first one second one and the third one so with this we are correctly grabbing on children and by the way if you find the video helpful consider subscribing and hitting the like button it really helps out the channel so this method that we're going to use to place all of our checkpoints now one very important thing about this method is the order in the hurricane as you can see here first we grab this one then grab the second one and then the third one so the order as we cycle through the children it goes through from top to bottom so the order in here is very important so back in this script we have the checkpoints in here okay now let's handle a way to have each checkpoint notify this track checkpoint's class when the player goes through it so let's make a function so make a public void let's name it the player through checkpoint and let's receive an argument so we know which checkpoint the player went through so let's receive it of type checkpoint single okay now we need to call this function from the checkpoint signal script so that means that this script needs a reference to the track checkpoints so we can easily do that first of all let's make a field of type track checkpoints and then let's say expose a function that we can set this field so a public void set track checkpoints and we receive of type track checkpoints and we simply set this dot track checkpoints to that one okay and then when we have here the ontrigger enter we trigger that one we say that the player went through the checkpoint and passed in this okay so we are notifying the main class when the player goes through this checkpoint now we just need to call this function from the other one so in here as we're cycling through all of them let's first grab the component of type checkpoint signal so just get component checkpoint signal and then go into the checkpoint single and call settrack checkpoints and pass in this one okay so just like this we should be able to see this function being called for each checkpoint so let's do a debug log on the checkpoint single and let's log the transform name just so we know that it's a different one so let's see so here we are here's the console and as i move up i should be able to see the first one yep the first checkpoint single and the second one and the third okay so far so good with this we are correctly tracking that the player goes through the checkpoints now all we need to do is actually identify the order so for keeping track of the order let's first actually make a list to keep all of our checkpoint signals so a simple private list checkpoint single and it's our checkpoint signal list and on awake we initialize it and every time we go through one we simply add it to the list very simple so we have a list with all of our checkpoints and now all we need to do is just keep track of which one is going to be the next one so here we have a list of all of our checkpoints and then when the player goes through it we can identify the index of the one that the player went through so we can go into the list and trigger index of pass in this checkpoint single and let's do a log on this one let's see here we are and let's go and yep the player went through index zero and index one and then index two all right great so with this you can already guess how we're going to handle this logic so here all we need to do is keep track of the next player checkpoint index so just a private end for the next checkpoint single index and when we start let's set it to zero and then here all we check is just compare this so if the index of the one that the player has just passed is the next one then we have passed the correct checkpoint and if not then we have the wrong checkpoint then if we go into correct checkpoint then we want to go into the next one so just going into the next checkpoint signal index and just increase it very simple let's set some logs so debug download say that it's correct and the wrong let's test so let's go through the first one which should be correct and yep it is correct now let's skip the second one and go straight into the third one and nope we have a wrong so we need to actually go back into the second one and if we hit the second one yep correct and now the third one and yep now it is correct all right great now one more thing we need to add is the ability to do multiple apps so right now i went through the very last checkpoint but if i go through the very first one once again and nope now it's saying wrong so let's fix that here when we increase instead of doing plus plus let's do the next checkpoint index equals that one plus one and then we do a modulo of the list count so checkpoint signal list dot count so this symbol is a modulo operation which returns the remainder of the division so as we go past the count it simply loops back into zero so let's see if we can now do multiple laps so as i go go through the first one and it's correct second one correct third one also correct now let's go back into the first one so here is the first one again let's go through it and yep also correct so now we have support for multiple tracks all right great now with this the system is almost done so we can correctly identify the correct checkpoint now let's punch up the code a bit with some nice events okay so just defining two simple events and firing them off in here okay now let's make a simple ui all right so i just made a very simple visual so on the canvas make a container inside we've got a red image and just some text on it now we just want to show and hide this depending on the checkpoints so up here on the script all we need is a reference to the track checkpoints let's make it a serialized field so we can set the reference in the editor so here just drag the reference on there okay and all we need to do is make a private void start since we should probably subscribe to the events on start and not awake so here just go into the track checkpoints and subscribe to the various events alright so there it is very simple we have our two events and we either show or hide okay that's it we don't need to touch the track checkpoints at all let's test and for each checkpoint single we can also get rid of the visual so we can remove the mesh renderer all it really needs is just the actual unboxing leather so let's see okay so here we are let's go through the first one okay now let's skip the second one and go straight to the third one and as we hit yep there we go we have our wrong checkpoint so we need to go back into that one and if we go through the second one yep that one hides and it's all correct all right let's just visualize the actual correct checkpoint so we can add a simple show and hide on the checkpoint single so just a simple show and hide function and on the traction point when we go through the wrong one let's access the correct one so the checkpoint single let's grab it from the list so we're going to list on the next checkpoint signal index and just grab that one and call show and when we go through it then we call false all right that should do it and just for fun let's add a fun animation all right so here we are let's go through the first one and everything so far so good let's keep the second one and go straight into the third one and yep we have the wrong checkpoint and now we should be able to visualize and yep we can see where the correct checkpoint is all right great now in this case for this simple design that i have here there's only a single player so if we had multiple cars on track we would need to keep track of the current checkpoint for each of them so let's handle that to make this checkpoint system a bit more versatile so here we're tracking a single in for the next checkpoint index in order to support multiple cars all we need to do is really just store multiple ins so instead of just one what story in list of ins next checkpoint single index list okay and now for the size let's also define a list of transforms which will be for all of our cars so a private list of transforms for the car transform list and let's make this a serialized film so we can set it in the editor so here let's make multiple cars so we've got this one let's make this one let's just disable the player script so i'm not controlling both at once and here on the track we have the card transform list and just drag both of them on there so now here on awake let's initialize this list so a new list and then we go for each card transform and for each of them we go into the next checkpoint signal and we add a new element onto our list then here let's rename this function it's no longer the player going through the checkpoint so let's use the very helpful visual studio rename so ctrl r and we can easily rename this so let's call it car through checkpoint we're passing the checkpoint signal and then also transform for the car transform and then in order to get the next checkpoint index so and in for the next checkpoint index let's go into the next checkpoint index list and we're going to access it and find the index of this card transform so on the card transform list do an index of this card transform and with that we get the next checkpoint signal index and here we do the same thing just compare it with that one and then we just increment the one on the exact same position okay that's pretty much it now on the checkpoint signal we just need to pass in the actual car so in this case it's the other dot transform let's test so here we are and i'm currently driving only this car and i go through this one and yep in the log i'm still seeing the correct checkpoint so then i go into this one and okay i went through both checkpoints now let's swap out the other car so i'm now driving this other car and let's see if the correct checkpoint for this other car is in the first one and as i go through if there is in there we have our correct checkpoints all right so we now keep track of the correct checkpoint for each individual car making this system very versatile and easily able to support multiple cars on the same track on different positions so here we have our final system it's really simple and it works great now you can obviously use this for racing games driving around the car that's obvious but over here i have another demo this one is in 2d i have a normal 2d player character and i want to tell the player to go to the right side so i place some checkpoints in here and use the exact same scripts just modify the to support in 2d and if i go into the left into the incorrect checkpoint that's placed in here and there you go now we see that i'm supposed to go through here so go through here then the next one and so on so i just place these checkpoints so pretty much exactly the same thing except using a box on leather 2d and over here instead of on trigger enter just using on trigger and 32d and the track checkpoint script this one didn't need to be touched at all so it all works perfectly fine either in 2d or 3d and as you can see it works great both for normal car games as well as just anything where you want the player to follow a specific path or the player or really any other object so this works great for really any scenario where you want the player or any object to go through a preset path as always you can download the project files and utilities from unitycodemonkey.com this video is made possible thanks to these awesome supporters go to patreon.com unitycodemonkey to get some perks and help keep the videos free for everyone if you found this video helpful consider liking and subscribing post any questions having comments and i'll see you next time