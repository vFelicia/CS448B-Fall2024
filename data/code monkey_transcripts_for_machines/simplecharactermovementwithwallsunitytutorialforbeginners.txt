hello and welcome I'm your code monkey in this video we're going to take our simple character movement and apply a hitbox detection let's begin so here's the character with movement from the previous video it's a simple character and using the keyboard I can move him around he moves in all directions and plays an animation depending on the move direction he can either be walking or idle and he plays he have an animation towards the last move direction so let's check the code so if you haven't seen the previous video the code in here is very simple now on our update we call our Hamill movement function and in that function we simply test for keyboard input based on the keys we set a bunch of floats to either move in the Y or in the x axis then we test if we are idle which is if both of them are zero if so we play an idle animation if we are not I don't then we calculate the move Direction using the move X and move Y that we set in here we normalize that vector and we play a walking animation using that movement direction as our animation direction so it's very simple and works perfectly fine but right now it doesn't check for any type of hitboxes so with just this code we could move through walls so let's go into the editor and add a simple law so in here make a new empty game object you need to call this our wall and give it a sprite renderer and also a box Collider 2d so here is our wall let's give it just a white rectangle just to be able to tint a pixel put it on a grey and increase the size and just like that we have a simple basic wall it's essentially just a box Collider so let's test and verify that the character does indeed completely go through the wall and ignore any collagen so in here I move up and yep there you go it's as if nothing exists okay so we want to make him actually hit the wall so let's go back into our code now in here when we are actually moving after we calculate the movement direction before we actually move them let's define a vector three for the target move position this is a position where we're going to move to so it's essentially our transform that position and then add where we're going to use in here so this is where we want to get to so now that we have our current position and our target position we can do a simple rake and see if there are any hitboxes between any of those two points for that I'm going to use physics 2d dot ray cast I'm using the 2d versions but this code works just the same in 3d so I'm going to do a ray cast starting on my transform dot position the direction I want to move towards is my move deer and for the distance we are moving speed multiplied by time dot the time that's how much we are moving in this frame so this function returns a ray cast hit ray cast hits like that so this ray cast it contains all the information that was returned from this ray cast so in here we can check if it has a Collider so we check if the raycast hit dot Collider if it is no then this essentially means that we can move since there was no hit if it is not known then we cannot move hit something so if we can move we simply do transform that position and we set the position to be our target move position and we can remove this down here and if we cannot move then we do nothing ok so when we move we actually play the animation and we set the last move direction and when we cannot move then we play the idle animation so let's test and see what happens when we touch the wall ok there's the character and if I move up if there you go he no longer goes through the wall he gets to it and he just stops moving so with the code setup like this we have correct collisions we cannot go through that wall which is exactly what we want however we have one annoying issue which is that we cannot slide along the wall so with one above me if I'm pressing W and D at the same time which means moving up and to the right you can see that there is no movement at all since we're hitting the wall so it's completely stopping the movement the correct thing to happen in this situation would be to ignore vertical movement but still add the horizontal movement otherwise it feels like the game is very sluggish since we can get stuck on the wall and it's very weird to move okay so let's go into the code and in here we are essentially looking for hits using our combined move Direction if that one fails that means we hit something so in here we want to test on just one direction so let's define a vector3 for the test moved here which will be a new vector3 first let's test just horizontal movement so we're going to use the movie X and on the wire let's set it to zero and then normalize this vector so let's do the same recast the same combination for the target move position using this test move here instead of the previous move there okay and then we do our previous recast starting from our position moving towards test move nearby speed out the time okay so this is testing your ray cast moving only in the xaxis so in here if the raycast I'll come later if it is no then there's nothing on the horizontal movement so we can move horizontally and if not then we cannot move our example so if we can move let's move in the same that we did previously instead of using the move deer we're using this test move deer and we put them on the target move position exactly now if we cannot move horizontally then we want to test the vertical movement so essentially we're going to do the exact same thing except the test move deer instead of being using the X and zero on the Y we're going to use the Y and set a zero on the X so this is essentially only a vertical movement again we come late using the new test move direction we do the same workout same thing and we check for the competitor if there is no Collider then we can move vertically and if there isn't then we cannot move vertically and if we get to here then that means we can't move at all we can't move diagonally vertically or horizontally so in here we simply go back to I don't and if we can't move then we move in that direction and everything is exactly the same sin here cannot move diagonally test just moving in horizontal direction and here if we cannot move horizontally then we test just moving in the vertical direction so let's see if that is all correct okay so here I am and if I press just W okay he goes up he hit the wall and he stomped now he's currently playing animation that's a separate issue that we're going to solve but now if I press D if there you go he slides on the wall when he gets to the end he moves away so this way the code no longer seems very stuck the character never actually gets stuck and if we go in here and I'm still pressing that one pressing on the other keys and he's sliding alongside the wall when he gets to the edge yep he continues vertically and works the same on the other direction okay so let's just solve this issue which is when we're moving up now he's playing the walking animation when he should be playing the ional animation again the issue is it only happens when I'm pressing just up so let's see why that is so in here if we are not moving in the first direction which this he does find the collider so he doesn't run this and he goes in here now if I'm just pressing up then the move dear done X won't actually be zero so in here he's testing for a movement direction of zero zero so obviously there's no raycast from start to finish when the start and finish are exactly the same thing so we only want to do this free cast if the test move Direction is different from zero so in here we can simply do we can move horizontally if test move deirdr X if it is different from zero F then we are going to move horizontally if not we cannot move it and again the same thing in here we can move vertically if the test move here dot y if it is different from zero F and there's no collider so again if we do the same thing if we just press W then the movie around X won't be zero so this vector three won't be zero zero which means in here it will not pass this if since s move there that X will be zero so this one is false so it goes in this one and again if both of them are zero stops and so on so let's see that and here I am and if I move up yep there you go he stops in there yo he's playing the idle animation I'm still pressing W but again nothing is happening so I can slide and I go to the corner and and the character no longer seems stuck if I'm pressing a key the character is correctly responding to my input so there you have it we added hitbox detection to our movement our character now stops when encountering wants and automatically tries to find the direction that it can move towards as always you can download the project files and utilities from unity code monkey comm if you have any questions post them in the comments and I'll do my best to answer them subscribe for more videos and I'll see you next time