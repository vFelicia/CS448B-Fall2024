in this video we're going to learn how we can do some work and get the output from the unity job system we're going to make a job scheduled it wait for it to complete and then grab the result from the main thread let's begin okay so this is going to be a pretty simple video getting the output is easy when you know how but can be tough to understand that first e2 how the job system works so hopefully this video won't show up in search and help people who have the same question that I had let's start with what seems like the illogical way and then we're going to test to see if it works so here I am in an empty scene and let's start off by making a simple testing script so testing job output let's drag it onto a new game object and just drag the script okay so here let's start off with a very simple job so we need to make a struct for our simple job which implements a job if you're completely new to jobs then first check out the video on getting started it covers how jobs work and how to use them check the link in the description now in here we have our job struct so let's make the simplest job possible all we're going to do is just add two numbers so here we have a field for an INT for our a value another int for the b value and then another end for our result and on our execute all we're going to do is set the result to be a plus B okay so we have a very simple math job calculating a plus B now let's go up here into our start in order to create and test our job so first we have our simple job instance we create a new simple job then we pass in the a and let's put it at one for the beam let's put at 2 and then we won't calculate the result so we have our job instance we call simple job schedule and then we simply wait for the job to complete okay so this is our very simple death setup will create our job instance we give it a value of 1 to the a 2 to the beam we schedule the job we wait for it complete then after the job happens in theory we should have our result variable to contain 1 plus 2 so it should contain 3 and let's just do a debug log to see if that is the case so we love the simple job result okay so let's see if our console doesn't need say 3 and here we are in the console and right away you can see the result is showing 0 which is obviously incorrect so it's here that you might start to ask yourself ok so how exactly do I get output from a job the issue that we have here has to do with how the job system works now in order for the job system to protect you from all the issues that are caused by writing multithreaded code the job system works in a very specific way the way that the job is run is it gets a copy of the data instead of a reference so up here when you create our new simple job struct the job system gets our instance which contains a copy of our data so in this case contains an a of 1 B of 2 and a result of 0 so when we schedule our job the job system works on a copy of these values instead of a reference so down here when the job triggers its execute method and modifies the result to be a plus B it's only modifying the value inside of this copy so the original object that we create them down here it still has a result equals 0 so we need some way for the job to get a reference of data instead of just a copy now the way we do that using our job system is with a native collection which is inside using unity collections the most basic native collection is the native array this is just like a normal array but the job system treats it in a very specific way so here on our simple job instead of having a result to be just an int which would receive a copy we're going to have a result into a native array of pins by passing a native array despite being a struct we're actually passing a reference to a certain position in memory now in here is the part that might seem weird but it's actually the correct way to do it in this case all we want is a single result but as you saw by just passing in an int we're only getting a copy so not a reference as we want so in this case we need to pass in our result which won't be a native array simply with a size of 1 so here we store on result index 0 we store our result and now in here we need to create the array and pass it into our job so we created a native array in order to hold int this will be our result array and here we pass in the length of the array in this case we only want a single element so just one and then a specific allocator in this case we want to use it inside of the job so we just use the allocator temp job and then here we need to make sure to pass our native array into our job instance so again it might seem weird to create an array in order to hold a single value but this is the way that you work with memory shared between the job and the main thread so we create a native array we pass it into our job the job then executes and puts a result on the first position on our array and then after the job completes let's simply read our result from the result array on index 0 and finally when dealing with native array since these are unmanaged memory locations you need to make sure you always dispose of them so always call the array that disposed after you're done with ok so let's see and we should now be able to see a result to print 3 and he appears our console here's our log and it doesn't need say 3 so we are now correctly grabbing the result of a job from our main thread so again this is pretty simple stuff it just requires you to understand how the job system work always remember that when you create an instance if you use a normal field the job won't simply get a copy of that data in order to be able to share that between a job and the rest of your program you need to be able to use a native connection also you have several that you don't have just the array you also have for example the native list which works very much like a list then you have the native hash map and multi hash map and so on any of those native collections are how you share memory essentially between a job and back in your main thread so if you want some sort of output for job passing and native array in order to get that output even if that native rate only has one position and that's it hope you found this video useful if you liked the video subscribe the channel for more intuitive towards post any questions you have in the comments and I'll do my best answer alright see you next time