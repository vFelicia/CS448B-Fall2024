hello and welcome I'm your code monkey and in this video let's learn about the complete basics of the cloud in general and specifically Microsoft Azure let's learn what it is what is the cloud what it can do for you and a quick editing start guide on making a simple web API which we can then call from a unity game there's timestamps in the video and this video is meant as a base which I won't then build upon in future video tutorials making specific cloudbased mechanics and tools things like in leaderboard the messages in Elden ring the online shared world of death stranding and so on now this whole thing the cloud this is something that I started researching myself I'm curious to play around with some more cloudbased mechanics like those that I mentioned and I really just want to understand the cloud in general so I'm making this video partly to help slowly Define my own knowledge and partly because basically I want to make a video that I wish exists when I started learning cloud can seem very overwhelming and confusing at first but once you learn the main terms it actually becomes much more understandable so first the complete Basics what exactly is the cloud that word sounds so mysterious but really what it means is basically just online servers in the old days if you wanted to build any kind of online infrastructure you had to build everything yourself so you had to find a data center rent some physical space you had to buy the hardware in some of the software mention all of the maintenance networking and keep it all running smoothly that's a ton of work even if all you wanted to do was just make a simple online leaderboard whereas nowadays with the cloud you can choose to let someone else handle all of that works and you just focus on the parts that you really want to do meaning just focus on writing logic and making interesting systems instead of having to deal with all the physical hardware and all that specifically for game developers and even more specifically for indie game developers you probably just want to deal with writing the logic and not have to worry about anything physical so for that use case the cloud is perfect something also pretty crucial about the cloud is generally speaking the services are in a payperuse basis so if your user is small if you have a small indie game they use the cloud in some small way in that case chances are it won't be completely free or just cause an extremely low amount in the order of cents to under 10 bucks a month so as developer the ability to add interesting game mechanics without a huge cost that is a huge Plus that's a very high level overview of the cloud and Cloud related things now let's look at Azure specifically and do a quick getting starter guide you can create a commonly free account and sign in they give you a certain amount of free credit that you can use with your free account so this is great for testing out everything and as soon as you log in it can definitely look quite a bit scary you have so many options so many services so many things it's really quite overwhelming for me I've already spent many hours learning all of this and I still have no idea what so many of these resources so many of these Services what they do so over here let's stick with the absolute basics but before that it helps to understand how Azure works on a topdown View and learn some terms you have your Azure Microsoft account then on that account you can have multiple subscriptions this is how you handle invoicing and payment so for more complex use case you can have different invoices for different departments but for a small Indie Dev chances are you have just one subscription then for each of those you can have one or more resource groups and each Resource Group is composed of resources the resources are the actual services that Azure provides for example web API is a resource the SQL database is a resource as is a serverless function virtual machine and so on all of those are various types of resources with resource groups you simply group them so for example you'd have a resource Group for an online leaderboard and inside that Resource Group you'd have a web API resource and a database resource then one Resource Group is assigned to a subscription for billing and all of that is inside your Azure account so that's a basic overview of how it works in the main terms whenever you create a new resource meaning whenever you create something like a web API you select a subscription then the resource Group where you want that resource to be created and just create so now that we know the basic terms let's actually start by building something over here on the Azure dashboard let's click on the button to create a resource then again here you see dozens or even hundreds of resources that exist again don't feel overwhelmed let's start off simple let's find a regular simple API app so you can either find them over here on the side so for an API app this would be under the compute however you also have a nice search bar up here so let's search for API app let's click on enter and up here we do see right away the API app made by Microsoft so let's select it this one as it says here it's a standard restful API this is the example of what we want so fastest way to build in the point and so on so exactly what we want so let's go ahead select this and click on create then over here it asks you for a bunch of things since we already covered all the basic terms this should only be easily understandable so first one is the subscription so just go ahead and select the free subscription then it's the resource Group this one you can use some group you already have or you can create a new one so let's do that let's call this my first web API next is the name this is going to be the hostname we're going to access the web API this one has to be a unique mobile name in the authority of azure so over here on let's say my first web API Code Monkey and yep that's available okay next up we want to publish with code we want to use that rather than using some premade Docker container so let's go with code next up for the runtime stack and here you can see that Azure actually supports a multitude of languages so you can see net Java node.js PHP python Ruby and so on in my case with this being a Unity csharp Channel I want to use.net and again another thing which is a bit confusing are the net versions so a quick explainer on those first you had the.net framework that was meant to run on Windows then after that to make the code multiplatform they created something called.net core with that you could run csharp code on Linux or Mac or so on and then after that since it was a bit confusing to have two separate.net packages they merge them both so now it's called just.net so over here the one that we want is not.net core not asp.net but let's go with net 6. next up for the operating system for this one choose the same one that you use to write the code so in my case I'm working on windows so let's select in Windows then for the region this is just for testing so select the place close to you so in my case I'm going to go with West Europe then down here the app service plan this is the machine specs and how much it costs right now since we're using the free subscription plan we just have an option for a free machine but if you upgrade your subscription then over here you'd see a button where you'd be able to click to see all of the available machines there's tons of options to choose from depending on how demanding your web API is for our case we just want to do some basic testing so the free machine is more than perfect okay everything is set up let's click on next then over here you can integrate with GitHub in various ways again for our simple example we don't want any of this so let's go on next then for networking we also don't need this next for monitoring let's leave the defaults application inside this is one way that you can get data and logs from your application so let's leave it enabled and click on next then tags again nothing we need right now let's continue okay so here we see what we want to create we want to make an API app under our standard subscription we created the new group for it we gave it this name we're going to publish using Code we're going to run.net6 it's going to be located in West Europe running Windows and on a free machine okay everything is correct so let's click on create alright as you can see the deployment is in progress so let's just wait a bit and yep the appointment has completed so let's go to Resource all right here's our resource for our web API and just with this our web API is actually already running over here we can see the URL so if we click on this we can already see it and yep here it is so here is the web API default page all right awesome so far so good now of course we want to upload some custom code to our web API so let's do that back on the API dashboard over here on the left side we've got a really useful quick start so let's go ahead and follow this again I want to write in C sharp so let's go with asp.net it opens up this page where you can choose a development environment so in my case I'm going to be using visual studio then what we want is to pretty much follow all of this guide which is actually pretty simple although technically I should say that this guide is for making a web app as opposed to a web API the difference is that a web app is kind of like a regular web page meaning it's something meant for human Serene with images and text and so on whereas we want a web API so something that is meant for programs to interact with and not really humans so we want to be able to interact with it from ENT that said basically what we're going to do things slightly different from this guide but the basics of connecting and applying to Azure are the same so let's actually follow this to do that we're going to be using visual studio 22 but before doing that if you don't have it go ahead and install it the community version is commonly free and if you already have it installed then before opening up visual studio make sure you have the required modules installed you can run the visual studio installer and this will show you the versions that you have installed and if you already have something installed go ahead and click on modify and for following what we're going to do here make sure you have at least these two modules installed so Azure development and asp.net web development so make sure both those are installed then go ahead and open up visual studio and over here let's create a new project for the template let's choose over here the asp.net core web API again web API not the core web app let's go with the core web API go ahead click on next then let's give it a name like my first web API go ahead choose on location click on next then choose the framework again choose the same one that we picked previously so in this case.net6 yep for authentication let's use non to keep things simple but to use https and everything else leave with defaults okay let's click on create all right here is our basic web API we have a few files created by default so the entry point is over here the program this has some controllers a bunch of things but you don't need to worry about this one then it also has a weather forecast this a simple class with some data and the weather forecast controller which only does some things with that we can just go ahead and hit on play to test out this default template so up top click on the play button now when you do you might see some warnings about SSL and certificates so go ahead and accept the selfsigned certificate then even after doing that you might still see an error if so go ahead and restart Visual Studio then after that you should be able to hit play and it should work although you might see another warning this time from your browser again just make sure you are on localhost which is where you're supposed to be so just go ahead click on advanced in this case we do trust our own machines so let's accept the risk and continue alright so here we have our localhost page working this is using swagger which is a really nice tool for testing out apis and in our case by default Visual Studio creates a sample with a weather forecast API just like we saw so there's this endpoint called weather forecast this one as you can see is a get endpoint and you can see down here an example of what it returns it returns textile plane and inside contains all this data which happens to be our weather forecast and we can even try it out so let's click on try it out this one takes no parameters so let's just execute and up here we did a kernel request on our localhost URL and here we've got the response body alright so it worked we did a simple get request and we got a return value now for on testing let's create a brand new API endpoint you can go ahead and close this window then over here on the installation Explorer let's create a brand new controller so let's right click inside the controllers folder let's add a new controller over here for the template let's go into API and let's choose this one API controller with read and write actions let's go ahead click on ADD then give it a name let's come with testing controller make sure you end the name with controller so in our case we're going to create an API endpoint called just testing but to make sure you add controller to the name make sure there are no typos so go ahead click on ADD and if here it is this is the default template basically this creates an endpoint under API controller these rectangle brackets that you see here this is going to basically interpret this so instead of being under API and then literally spelling controller it's going to be under API and then just testing so we have the main controller class and then over here we've got various things we've got a get under the endpoint API testing then we have another get but this one is under API testing and then some integer value this is one way to pass parameters into your get requests then we also got a post a put and a delete if we just test this right now like this so let's go ahead click on test and appear in Swagger we already see our new endpoints we've got to delete put get post and another get okay now let's simplify our code to make our testing a bit simpler so let's remove all these endpoints and leave just a very simple yet okay just like this and now let's create a custom data type that we want to return we can Define it in a separate file just like we have here for the weather forecast or in this case we're testing let's use it just on this phone it's only two here a public class called testing and let's just add a simple string message field so a public string call it message let's make it a property with a get and a set okay just like this and visual studio doesn't like it when it can be knowable so let's make this a novel Strangers Like This okay so a super simple class with just one field message now over here on the testing controller instead of returning an ineum of strings let's return an object of type testing then over here let's return let's create a new testing and for the message and let's say something this is my message all right that's it so now our get is going to return an object of this time with this value let's see so let's test it out again locally so let's click on the play button so here we see we still have the weather forecast and then the testing so let's go into testing let's go into API testing as you can see the example schema is going to return a string Under the field message so let's try it out let's execute there are no parameters any up over here everything worked so we did a request on the endpoint API testing and the responsibility is a message containing this is my message all right Awesome everything works now finally for the next step let's do connecting and Publishing to an Azure resource and before publishing let's just clean up our code so let's get rid of the weather forecast controller just delete that one and the weather forecast and like that one okay so we've got a very simple we just have our program.cs and then the testingcontroller.cs now for publishing over here on the solution Explorer let's right click on the project so not a solution don't right click on that one right click on the project itself then over here you see a button for publish and for our Target obviously let's go with Azure so let's click on next we made a Windows service so again select that one now make sure you are signed in on the exact same account that you use for Azure then over here you should be able to see your Azure subscription and then over here it should automatically unload all of your app services so let's select the one that we made the my first web API let's open it and yep here we have my first web API Code Monkey so let's select that one and click on next then we've got an option for API management this is an Azure tool for essentially acting like a middleman so you can have API stored in various places then you can use the API management dashboard to decide which one should receive the requests but again that's for a more advanced use case so right now let's just skip this step and click on finish all right so with that the publish profile has been created let's close this and over here we have everything ready for publishing so let's go ahead and click on the nice publish button everything is running the building is starting and it's uploading so let's wait a bit and if that's it our web API has been successfully published we can go to our web API dashboard and over here we can already see some requests and it can also again go to the same URL and if the URL worked although right now it's showing a empty white page the reason for that is because the default index page was deleted so we uploaded just our web API and for using our get endpoint it's super simple so let's just go into our URL and let you send our endpoint so that was API slash testing so if we go to this and if there is here we have our message this is my message all right Awesome everything worked now let's just make a quick change to see if everything is indeed working so back in the test and controller let's give it a different message all right new message the file is saved so again let's go into the publish Tab and now we don't even have to go through that setup we just need to click on the publish button and if everything was published successfully then over here if we refresh this page if there you go here we got our really nice new message alright awesome so with this we have our API project working in Visual Studio and we can easily make changes upload it publish it and have it working on azure and now just for fun over here I have a demo ENT project for accessing our web API is really the same as any other HTTP request I covered that process in detail in another video over here I have the class made in that video although also one important thing is in that video I was focused on showcasing the get so here in this class I upgraded it to also support posts to be able to send some data and importantly be able to send some Json data this entire class is included in the project files for this video if you want to look at it so with that I can do a request to the web API so just so we get request and use the URL that we just made so on the Azure website slash API testing we have our URL then if it's an error it's going to log an error if not we're going to see our nice server response okay so let's run this any up here in the game we do see the server response and our really nice message okay great now over here I have a more complex example I have a game with a mechanic kind of like dark souls or element ring so other players have placed down messages in the world now I can interact with the web API to get the nearby messages and up here we can see the response from the server we get a whole bunch of Json with some positions some messages some rotation and so on then with that data I just spawned some of these objects and if I approach yep I can see the message that that player posted so one message there one message there another one in there then I also have the ability to add more messages so I can go somewhere press a button and here it is a nice input window I made this window in a previous video tutorial so over here I can type my message I can press ok and yep there's my brand new message so I've got this message in those two now I can quit the game and then play again as if I were a completely different player and amp here are all the messages including the one that I just made alright awesome now for the code that is making this work here I have a function which shows my input window then when the player presses okay it creates a new structure of this type that I created so it has the position rotation and the text then it does a web request this time using post and using Json it does that into my API endpoint it sends the message system save single converted into Json and then simply has a response which contains all of the other messages then over here on the web API side for this one I have an add message controller so this is the endpoint the same one that I'm using I've got a simple post that is grabbing the message grabbing this same object type grabbing from the body it adds it to the list of messages now in this simple example this is just stored in memory so this not in any kind of permanent storage this is just memory again just keep it simple just for this demo so it adds the message that it receives adds it to all the other messages and then just Returns the Json with all of the messages then on Unity the code receives the response and loads the save Json then here just grab the message system save signals through all of them and spawns a prefab so here it is a really nice and simple messaging system just like Dark Souls just like London ring all of it made super simple thanks to the usage of the cloud alright so with this everything works this is the absolute Basics we created the service on the cloud and we access it from anywhere including from inside Unity now everything that you really want to build is really just expanding upon this I'm actually working on specific tutorials based on just this some more advanced systems using Azure functions rather than a web API and combining them with storage and so on definitely stay tuned for those interesting tutorials and if you want to learn more about cloud and Azure specifically then I can highly recommend the Microsoft learn site I've gone through a bunch of their learning paths and I learned quite a lot on the alert side you can just go over here on their products like Azure then down here for types you can select the entire learning path or if you want just go with a bunch of modules then here you can see tons of guided paths teaching you everything from a general overview of the cloud to some very more specific use case so if you want to learn more definitely check out the site and with that now you know the base of the cloud how to create a simple web API publish it to Azure and interact with it from a unity game alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and I'll see you next time