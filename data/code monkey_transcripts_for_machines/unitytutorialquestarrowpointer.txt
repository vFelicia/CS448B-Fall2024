hello and welcome I'm your code monkey and in this video we're going to create a quest arrow pointer that won't point to a location in our world let's get Sir so I have my scene here I have my player character and if I go over here to the right I have a tent let's say this is some type of openworld game and we have a quest active telling us to go to this tent we want to display an arrow in our UI showing the direction to the tent when the tent is offscreen and have it placed on top of the tent when it is on screen alright so let's start off by making our UI arrow let's go into the canvas in here and make a new game object name it window quest pointer let's expand it to occupy everything so there you go ok inside let's make another game object name it pointer let's add a image component and set the width and height to 60 and 60 and give it the arrow sprite so this is a sprite that won't be rotated and position pointing towards our tent alright so now let's make our script make a new csharp script and name it window quest pointer so in here let's make a member variable so a private vector3 target position and on our private boy away let's set the target position to our tenth position which in this case is set on 245 let's also grab a reference to the rect transform for our pointer pointer rect transform and let's grab it down here so now let's first just display the direction so we're going to go into our private void update and for direction we need the two positions so a vector 342 position which will be our target position and a vector 3 to our front position which we only use as the camera position so going to camera dot main transform dot position let's reset the front position that said to 0 and contantly the deer which is to minus from dot normalize alright so this is our direction vector now I'm going to go into using code monkey dog mutants which is always you can grab for free from unity code monkey calm and in here in the UTS class and here I have get angle from vector float which converts a vector three Direction into a angle so fold angle equals this and then I'm going to go into the pointer right transform and set the alert on humor angles to zero zero and tango alright let's test and we should see the arrow pointing towards our tent yep there it is the arrow seems to be pointing in that direction and if I move yep you can see that it's pointing down based on where the camera is okay great so now let's move the arrow towards the tenth position instead of being placed in a random position on the screen first of all let's test if the tent is on screen or not so in order to do that and let's make a vector3 for the target position screen point and it's going to be based on the camera dot main and do a worm to screen point of our target position which is a position on the world let's add a boolean for is a screen and essentially we can take the screen point and if the X is under zero then it's off screen to the left if the X is bigger than screamed out width then it's to the right if the Y is under zero then it's below and if the Y is bigger than screen dot height and it's above okay so just for testing let's do a debug log but is our screen and let's also display our screen point okay let's test okay you can see the log in there you can see that it's true that it is off screen and as I move that won't become false as I get yep there you go when it is on screen it's false once outside it's true because it is off screen okay good so now in here if it is off screen then we want to shift the arrow towards the edge of or screen so in here let's make a vector3 and call it a cap target screen position and it's going to be based on the targets screen position so in here on let's just cap it to make sure that it's always on the screen so if it's under zero let's set it to zero and so on all right so now we have a camp screen position we need to convert this into our UI position so in order to do that let's go up here make a private camera and come with the UI camera and we're going to make this a serialized film so we can set it in the editor so we're going to go into the UI camera dot screen world point of the cap target position and this will be a vector three for our pointer world position then I take the rect transform and set the position to this and just to make sure we don't have issues with that offsets being different between the cameras let's just set the local position to itself with an empty Z okay so let's test and the arrow should now be shifted towards the edge pointing towards the tent but it should never be offscreen alright there it is the arrow is on screen and it's correctly updating and pointing towards the tent there you go the tent should be right above me and when I move up yep there it is ok great so right now the arrow is hugging the edge of the screen so let's add a border to our arrow calculations so in here let's start off by making a float name it border size and give it a hundred F and in here on our calculation instead of being under zero we're going to test under the border size and when we're increasing it's the width minus the border size same thing for the height and apply to all the others okay so now the arrow should be pointing and moving but it should not hug the exact edge of our screen okay there it is it's pointing and as you can see it's not at the edge of the screen this way the arrow is much more visible yep there it is okay great so now that we have the arrow pointing let's turn the arrow into a cross when the 10th position is on our screen so in here this is the code if it is off screen and let's make our code when it is onscreen okay so in here let's place our pointer right transform on the target position which we're going to convert into a world position on this UI camera so copy this in there and just like that it should show up exactly on top of our 10 okay there it is there's the arrow you can see it as a border and when I get close it stays exactly on top okay great now let's change that sprite when it is on screen so in our code here and let's start off by making some serialize deals for a sprite for the arrows right another one for the cross sprite in here let's store a reference to our pointer image which is part of the Unity engine dot UI so go down here and grab the image component ok and down here if it is offscreen let's have the sprite to the arrow sprite if it is not offscreen so it is on screen let's display as a cross sprite okay all right there's the arrow pointing and when it gets onscreen it converts into a cross great now let's just remove the rotation from the cross and so that is probably not what you want to do so so in here and let's copy this into a different function so make private void and call it rotate pointer towards target position and we're going to call it only when it is offscreen when it is onscreen let's set the local Euler angles to vector 3.0 so there's the arrow and when Sun screen turns into a cross and back into the arrow begin to cross ok great it's no longer rotating exactly as we want now let's make our class able to receive a target instead of setting it up here on awake so let's make some show and hide functions down here let's first make the public void hi and on hide we're simply going to do game object that's a detective Falls and a public void show which you're going to set the active vacuum true so that it's visible and we're going to receive a vector3 for our target position up here let's remove this and call hide by default and down here let's set the this dot target position equals this target position all right so now in here let's make a script for our game handler that won't set the target that we want we can you see sharp script call it game Handler and here remove on this make a private void start and in here we're going to have a civilized film for a private window quest pointer window quest pointer and on start we're going to call the show function and we're going to give it the same as before okay so right now it should be working exactly the same as previously so there I am there's the arrow and when gets on screen it converts into a cross okay great everything is we're going to say now let's test swapping out the arrow during runtime so in here I'm going to go into the using the code monkey party tunes in order to create a function updater just so we can test this a function updater triggers a action every frame so this is the action and here let's make a in state set it to zero and here to a switch on our state and k zero we're simply going to test if camera dot main dot transform dots position do a vector3 dot distance towards our 245 and if that is under let's say fifty F then we're going to swap into the next one state equals one and let's show a different position so let's show position under down so let's a minus and Kaleigh state one we're going to test on this position and if it is let's just hide our pointer okay so we have in here just a basic state machine just so we can test if we can correctly swap our arrows during runtime so I'm creating a function of data which is going to trigger this function on every update and we're going to start off with a pointer towards this position we're going to test if we are near this position within 50 of this position if so let's swap the state to 1 and show an arrow on a different position so under down 1 then we're going to test again if we are close to that new position if so let's just hide and be done with it ok so let's test that behavior and make sure that everything is working correctly ok here I am the arrow is pointing in the exact same direction and as I get close boom there you go the arrow swamped position and now when I get close to that second position as soon as I get close the arrow should hide go and boom it's gone great yep there it is so there you have it we have created a UI arrow that we can use this point direction towards the position in our game you can use this to direct the player towards a target question location in the next video we're going to add support for multiple arrows as always you can download the project files and utilities from ent code monkey comp if you have any questions post them in the comments and I'll do my best answer them subscribe for more videos and I'll see you next time