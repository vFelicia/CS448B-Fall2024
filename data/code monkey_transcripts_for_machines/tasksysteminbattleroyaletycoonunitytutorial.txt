hello and welcome I am your code monkey and in this video we are going to check out the inner workings of the task system in battle royale tycoon let's begin so in the game most actions are set up as tasks like in here when the arena ends multiple tasks are created that say for example this area needs to be cleaned then these workers as the task system for a new task and execute it the system supports multiple task types so for an arena cleanup tasks the worker goes to a target position executes an animation and cleans up the floor for the item cleanup task the worker goes to a used item grabs the item and takes it to the item slot and finally drops it this whole thing is a good example of the tasks system in action the game is stone development so if you like the concept go to the same page add it to your wishlist and phone so to start off I have an empty class in here named CM task system I'm simply using the CM prefix to avoid naming conflict since I'm doing this in the game's actual codebase so let's begin by creating the basic structure of the task system so inside our task system class let's make a subclass called task only class time this sub class is what won't contain the information related to the task for now let's just leave it as empty so let's make the task system constructor and when we construct the task system we need to initialize a list of tasks so a private list of tasks called task list and we're going to initialize this in here ok now we need a function to request the next task so let's make a public task request next task so this function is called by a worker so worker requesting a task and in here we're certainly going to check if task list dot count if it is bigger than zero that means we have a task so let's simply return the first task on the task list so return test list of zero if we do not have any tasks then no tasks are available and we're simply going to return no so in here before we return the first task we need to also remove it from the list essentially when we were turn the tasks we assume that whoever asked for it will execute it so in here let's store a task reference for the task list of zero then we go into the task list and remove at the position zero and then finally we return the task so here give worker the first task all right so we now have the function to request a task now let's add another function for adding a task so a public boy at task and in here we're going to receive a task object as an argument and we're simply going to add it to our task list all right so the basic task system is now set we can add and request tasks so now let's go into the game handler which is simply a script executing on start in here let's first create a new task system called system new task system now let's do some testing to make sure everything is working perfectly so first we're going to do a debug log of the task system dot request next task so this should return known since for starters the task system doesn't have any tasks then we're going to add a new task so create a task system dot task task equals new task and we're going to go into the task system and add this task then finally we're going to do another debug log which should return this task and then finally do another one which should return no so this one should print no this should print the task and this one should print no all right let's make sure all of this is correct all right as you can see in the log everything is correct first one return no since we had no tasks then we add the new task and correctly grabbed it and finally the task system returned no since there are no more tasks ok so now let's make the worker so let's make a new csharp script and I'm going to name its iam worker tasks AI okay so now inside let's first make a setup function so public void setup and we need this function so we can pass in the worker object object is of type CM I worker worker so let's store this internally this worker object implements this interface in here which contains all the functions we need for our task system right now all we need is the move function in here which moves the worker towards a target position and triggers an action when he arrives there okay so now on the worker tasks let's start off by making some basic states so appear make a protein own called state and for the possible states we can be waiting for next task or executing tap and let's store a state for our state and for starters we're going to start off as waiting for next task so in here let's make a private void update and on the update we're going to do a switch on our state and case we are waiting for the next task in here let's just wait for a timer so we're going to go up here and make a private float waiting timer and in here we're going to reduce the waiting time or by time time and if the timer is under zero then we are going to request a new task so request next task let's make that function down here private Boyd request next task and then here once we request the next task then set the waiting timer back to a certain amount so let's make up here a float waiting timer Max and let's say point to I so he's gonna try to grab a new task every 200 milliseconds okay so the only purpose for this state is for the worker to wait a bit before asking for our next task since it doesn't make sense to ask for a new task every single update so in here he is waiting to request a new time so when we request the next task just to make sure that this function is being called let's spawn a pop up in here now in order to spawn a pop up I'm going to use the code monkey utilities which is always you can grab for free from unity code monkey comm so I'm going to go in there and spawn a text pop up on the mouse position and just say request next task okay this is just so we can visually see when this function is called alright so now that the worker tasking is set up let's go back in the game Handler and in here we want to spawn a new worker so we can remove all of this for now leave the task system initialized and let's spawn a new worker okay so in here I am creating a new worker object which handles the visual and movement of the worker I'm adding the worker tasks AI to that worker and then finally setting it up with this worker object alright so let's test and see if our worker is visible yep there's the worker and as you can see he is requesting a new task every 200 milliseconds so now that we have the worker periodically requesting for a task let's add the ability to execute a given task so let's go into our tasks system in here on our task which is currently empty we're going to add a field in here a public vector 3 and call it target position so essentially the goal of this task is for the worker to go to a certain position this task object is meant to contain all the information that the worker needs to complete the task which in this case means he only needs the target position so that's the task object now on the worker so in here when we are requesting a next task we have to ask the task system so on our setup after we will receive the worker let's also receive a task system now we're going to store it in here and on request next task we are going to go into the tasks system and request the next task we're going to store the task system dot task task won't be stored in here so now in here we need to handle that task so if the task that was returned is no that means the task system currently has no tasks available so we should wait and request again later so in here let's set the state to our state dot waiting for next task and do nothing else so 200 milliseconds later he's gonna ask for another task when he asks again he if he does get a task let's make a function to execute the task as if you task and we're going to give it the task so let's go down here make a private void execute task and we're going to receive a task system task as an argument so here let's start off by making a pop up and say execute task and for this task all we want is to move the worker to a specific position and that position is stored in here in the task object so I'm going to go into the worker object which has the move to function that we saw previously and we're going to move him towards the task dot target position now when he gets there he's going to execute this action in here and the action will simply be reset the state back to waiting for the next task and appear on our switch case we our state that executing the task then we are similarly going to do nothing alright so as you can see on the setup we are receiving the task system and storing it internally we are requesting a new task every 200 milliseconds when we request a task we ask the task system for the task if he returns a notice that means there is no task available so we keep the state waiting for the next task and we wait 200 milliseconds before asking me again if it does receive something then we're going to execute that task in this case our task is simply to move in towards a target position so the worker moves towards that target position when he gets there he executes this action which puts him back again waiting for the next time so we need is in here state equal state at executing the task just to make sure that when he's executing he's not okay so that's the worker tasking I now let's go in our game Handler and first on the setup let's give it the task system as well and now in here and let's add a task after some time so I'm going to use the function timer which is part of the code monkey utilities it simply execute an action after some time so I'm going to create and in here it won't trigger this action and the action we want is to spawn a new task so let's go into the task system dot add a new task and now the task that we want let's create that task in here and it won't simply be a new task which has a target position of let's say 550 500 and then we have that task to the task system and let's do a cm debug dot text pop up just say task Abbott and we're going to execute this after five seconds okay so essentially the worker should be requesting a task and five seconds later a task won't be added he won't grab that task execute a task and move towards this position so let's see if it's working perfectly all right there's the worker he's requesting tasks and getting nothing and now suddenly a task was added he's executing he goes there and now again he's requesting new tasks all right great exactly the behavior that we want okay so now let's go in our game handler in here and simply add tasks on mouse click so I'm going to go up here make a private boy update inside if input get mouse button down of mouse button zero which is the left mouse button so if we press the left mouse button let's spawn a task to send them to move towards the mouse position I'm going to go into the utils class and get the mouse world position and let's comment this out and like that all right so every time we click we should spawn a new task and then the worker will move towards the mouse position all right there's a worker he is constantly requesting for a new task and now if I go up here and I click it won't add a task and he should move there click and yep he grabbed tests now he's going there and again he's requesting click he goes he waits and requests ok great I can also click multiple times which won't queue up the task so let's say you go here then go here and here and he goes execute snowin request another execute stops request execute and here it stops and constantly requests ok great all right so now the way we set up the task system allows multiple workers with no extra effort so let's go in our Kim Hanul in here and spawn another worker all right so as you can see I have two workers in here both of them are waiting for a task and when I click I spawn a task this one got the task he moved there and now he's waiting again the other one is still waiting I can spawn two tasks that one grabs now go and down grabs and they both execute the tasks sequentially so I can click multiple times and as you can see they get executed sequentially a worker grabs the task from the task system and executes it so there you have it we created a task system where we can add tasks and the workers periodically request a task and execute it if available in the next video we're going to cover multiple task types again the game is still in development so if you like the concept you're the same page add it to your wish list and phone as always you can download the project files in utilities from Unity code monkey comm if you have any questions post them in the comments and I'll do my best answer subscribe for more videos and I'll see you next time