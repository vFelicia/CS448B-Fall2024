hello and welcome i'm your code monkey now in the last video i already covered how to do a drawing system to draw sort of like a pen so that one is a very free flow system here instead let's build a pixel art system so you can draw each pixel individually and then of course you can take those pixels turn them into an image to easily add modding to your games or anything like that so i'm going to cover drawing but also saving it as a png so you can use it in any way you want this one is actually pretty easy to do thanks to the super awesome grid system that i've built quite a while ago and in the end you can download the project files for the final scene and easily apply it to your game if you prefer a more guided path with stepbystep lectures then check out my complete courses learn how to make a builder defender game using csharp just like i make my own steam games or learn how to make games internally using visual scripting or learn all about unity with the ultimate overview course which contains over 13 lectures each covering a different tool or feature of the engine to help you make better games faster i'm always available in the courses q a section answering your questions every single day so check out all the courses with the link in the description okay so here let's build a simple pixel art drawing system now i've actually pretty much already built this before when i made the heat map video and i also did something very similar with the tilemap video so if you've been watching the channel for a while then you've already seen me use my grid system in so many occasions and this is yet another one where that system is perfect so once again yet another reminder of why you should write good clean code so you can reuse it many years in the future and use it in tons of different scenarios okay so here let's do it let's begin by making a script let's call it the pixel art drawing system then just make a game object and attach it okay so here the first thing we're going to do is set up the grind okay so i'm creating my grind now again if you're not familiar with this grid system go watch the entire playlist it's pretty easy to understand if you watch those videos so we have a grid and a grid object and the way it works is essentially every single position on the grid won't have an instance of this class so now let's think about what kind of data do we need for the grid object we're trying to draw some pixels and each grid position is essentially going to be one pixel so in here really all we need is just a color so let's just add a simple color now let's just do a quick test to see if all this is working correctly so on the grid class i've got a builtin debug so it shows a bunch of text and things so just set this one to true and yep we've got our 10 by 10 grin which is also over id2 string function and here just return the column without red just the red channel okay and all right so far so good we've got zeros on everything all right now let's do a quick test to be able to click and modify each position so for that let's do a simple price void update let's listen to the mouse button click so get mouse button down on the left mouse button when we do then we need the mouseworm position so i've got a nice function in my utilities to do that so my details class get the mouse wrong position here's the function in case you want to know how it works and also cover this topic in a dedicated video previously so you've got a mouse position now just going to the grid in order to get the grid object on this mouse position and then we just need the function to modify the color okay so we get the amazon position we get the grid object on that position and then we call the function set color and we change the column to red okay let's see so here i am everything on zero i go and i click on this one and there you go turns from zero into one all right awesome so essentially what we have here are our individual pixels and we can now click and modify any of them so the next step is to turn this debug visual into some actual proper visuals so for that i'm going to reuse the tile map class that i made in another video again go watch the whole playlist if you don't understand it the grid system and the grid time map are super easy to understand if you just watch the videos right from the beginning on the very first video this week class was created from scratch so here is the tilemap visual just rename it now here for the logic for the town map we had a specific timelapse for itv so it sorted some coordinates for some specific time map object values then just some logic to actually receive the grid object with the underlying data then it listens when any grid that only changes and if so then on late update it goes to update the mesh then for the mesh here it just cycles through the entire x then the entire y it generates a quad with a certain size based on the get cell size and then for each one of those essentially just adds a quad on that position so i'm just going to remove all the references to the tile map here so don't need any of this okay so i just removed all the references to the tile map so everything is very nice and simple now here we are generating each quad so it's in here that we have to decide what color we want to be now the tricky thing with this system is i really wanted to support pretty much any color so here the grid object has a color value which can be any color but as you know the mesh can only display things that are actually on the material you cannot just say print a random color it has to be somewhere on the material so first thing we need is actually make a texture with all of the possible colors and over here that's exactly what i've got so i'll literally just open up photoshop open up the color picker and just took a screenshot so here i've got all the colors going everything from red green blue and so on going from white into more saturated so i've got tons of colors now here we have an important question over here on the grid object we could technically keep storing just a color value so we color struct with rgb we could do that and then we convert the color into a position on the texture or we can just take the simpler approach so instead of storing the color itself all we do is really just store the position on the texture so let's go with that simpler approach so in here just swap out the film type instead of being a type color let's sort of type color 2 and name it the color uv so just change this so now that we have a vector 2 for the color uv here then over here when we draw the quad it's insanely simple we just need to assign the uv to the actual uv that is stored on the grid object so just going to the grid object and let's get the color uv and we can use the grid uv 0 0 and 1 1 as exactly the same since all we want is really just an exact color okay so just like this it should already be working up here on our testing instead of always using the same color let's make a simple color selector with a keyboard okay so just press a bunch of keys in order to change this one and then just do the same thing set column uv all right so let's test and here of course we also need an object with the visual so let's attach it and for this to work we need to add a mesh filter and a mesh render and we just need to assign the material and also on the script we need to pass in the grid to the visual after it's created so we need to call this function that's pretty much all the setup we need so we can add up here a serialized field and then on private.start we call set grid and pass in the grid all right so here we are and by default every pixel is in white that's because on the texture by default we've got e0 so it's going to be this color now i'm going to press a key to select my color so now i should be painting in red and as i click if there go nice red squares everywhere okay so now i press another color so that is going to set a different color v and i print and there you go yep it does paint correctly alright awesome so just like this we already have the basics only working we could just add some buttons to select the color and really let the player draw anything so we're going to build that in a bit but now with this basic drawing let's actually go into the next task let's convert this into a png so we could then use it as a player sprite or player logo or anything by the way if you find the video helpful please hit the like button it's a tiny thing but it really does help thanks so first up let's do that logic on a key press what's that one so here let's do save image let's make this function okay now the first thing we need is to create the texture 2d that is the class that holds an image so a texture 2d and we're going to set it to the same size as the grid okay so now what we need is just to cycle through the whole thing and get the pixel color so pretty much the exact same thing that we're doing here so let's copy this loop so we cycle through the x and the y then with the grid object over here we've got the color uv so this one is a vector2 so we need to convert that into an actual pixel so that one is really easy we really just need a reference to the actual texture so here let's set a serialized field of type texture td for the color texture 2d and here we just drag the color reference so now using this we can simply do go up here and we call get pixel this one takes an x and y so we just need to do some math in order to convert the quantity uv into a pixel x and y okay so we just convert the normalized uv into an actual pixel value now here one very important note on the get pixel for this one to work we need to make sure that the texture is marked as read write so on the conversation you have up here on the settings here under advanced you see one for read write enabled so make sure this one is ticked okay so we've got the actual pixel so we have the actual color that we want to print so then really on the texture studio we created we're just going to call setpixel on this x this y and the color won't be the one that we get from here okay that's it so we're going through the entire grind and constructing this texture 2d with the exact colored pixels then afterwards we just do texture to the dot apply in order to apply our changes and now with this we can easily encode it into a png so we can go into the texture 2d and we call the function in code we can code into any of these but png is really nice so this one returns a byte array and with this we can go into the basic i system.io in order to file right on bytes and let's write the byte array and write a path okay so that's pretty much it let's try drawing something and saving okay so here let me draw just something okay that's pretty good now just press on p and there you go now it should have saved and yep in the project files here it is my pixel art file now it's super tiny because we just made really a 10 by 10 grid but yep here is our image all right awesome so for the final piece of the puzzle let's just load this image so that is also pretty easy let's make a different script just to handle loading here in order to load let's just do a five void start and on start first thing we need is also a texture 2d now here for the width and height you can leave it at zero when it loads it gets the correct size and for the texture format make sure you select the exact same one then just go into texture 2d and we can use the unload image function this one takes an array of bytes so we just need to get that so essentially just do the exact opposite of this one okay so now really just show this somewhere so we just go into the mesh renderer xsd material and modify the main texture to this texture that we just loaded so here we can just create an object let's make this a simple quad put it off to the side and really just attach the pixel art mode and yep over here is the unloaded image now again since we're just saving a really tiny image just 10 by 10. over here unt by default tries to use some bilinear interpolation if you want to be pixel perfect then in here on the texture 2d just set the filter mode and just set it to filter mode dot point and yep here it is our nice image that we just saved and we are now loading as another example here i've got my character and i can walk around this world and over there is a nice bus stop and instead of being just a boring default image i can press a button and you have to look at that my drawing is now showing up on this billboard all right awesome so you can imagine combining this with some sort of web server or maybe the same workshop and you could have the player draw something and easily share it with others here is my final drawing demo so i just built upon that i added the color picker down here as you can see the texture now has multiple brightnesses so it's not just with one level of saturation also on the edges there are some transparent parts so i can click on it in order to select the color and you can see the color over there the color picker on that side so as i click and i move around i can select any of these colors now as for how this color picker works this one is just placed on a simple quad mesh then i'm doing a raycast and getting the texture coordinate so this is exactly the same thing that i covered in my rubber mechanics simulator video in there i use this method to clean a part and here i'm doing the same thing just to select a simple color so i can pick any color i want let's say i want a nice yellow and then i can just click and drag in order to draw anything i want then over here i also added these buttons in order to change the brush size so i can make it really big and paint tons of pixels or make it really small and just paint the handful so i can draw whatever i want and then over here i also got a really nice save button so i can press on it and there you go it automatically saves the png and over here it loads it to see what it looks like so here is the pixel png found with my image and here it is in the game then of course like i said you can use the png in any way you want so this bombard demo is really just an example of loading that image on that place but you can also use it maybe to let the player draw their own face maybe draw their own icon for a shop maybe draw some decals on a car or anything you want so as you can see there's tons of possibilities for using this system so this one is a really nice pixel drawing system and if you want a more free flow drawing system you can go watch the previous video alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and i'll see you next time you