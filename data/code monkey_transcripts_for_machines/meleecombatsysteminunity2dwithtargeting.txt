in this video we're going to create a simple melee combat system we're going to have our player that we can move around enemies won't be spawned and will be able to attack them the target an enemy won't depend on the attack direction so we can choose which enemy we want to attack let's begin hello and welcome I'm your code monkey and this channel is all about helping you learn how to make your own games with enough tutorials made by a professional indie game developer so if you find the video helpful consider subscribing ok so here's what we want to make over here is my player character and I can move around normally this is using the character controller that I built in a previous video so check it out and as you can see I've set the camera system to phone with the mouse position slightly and by clicking on the mouse I can attack towards the mouse position so I click here attacked it right tected left and so on now I can spawn some enemies and yep there you go there he comes and he comes towards me now he's using the basic enemy AI that I covered in a previous video so essentially the enemy chases me and when he's close enough then he starts attacking and now if I click yep there it is I do my attack towards the enemy that is closest to my attack position when I hit then the enemy gets pushed back and the player moves forward with enough hits then the enemy simply dies now if I do get surrounded so I spawn a whole ton of enemies there yo now I'm surrounded and now since the attack is based on the position towards the mouse I can actually select which enemy I want to target so let's say I want to attack this one I click up there and there you go I'm attacking that one now I want to hit this one and click there and there so I can select individually which enemy do I want to attack so the fine target algorithm is looking for the closest valid target based on the direction towards the mouse and then it attacks that enemy ok so here is our nice and simple melee combat system this is the exact same system that I use in hyper Knights which is the action strategy game that I made which you can play included in the game bundle being able to target individual enemies with an essential part of the game and this is the solution that I used this video is made possible thanks to these awesome supporters go to patreon.com/scishow to code monkey to get some perks and help keep the videos free for everyone alright so the circle let's get to it okay so here's our starting scene I just have the player character standing around doing nothing he's just sitting there playing a simple idle animation if you want to know how my animation system works and check out the mesh video it's own based on dynamically modifying meshes in runtime I can also move them around with some very basic movement okay so in the editor here is the player game object and you can see that it has the character controller script this was fully created from scratch in a previous video so check it out if you haven't seen it yet here is the script and it's actually very simple we just have an update listening to inputs to calculate our move direction vector then we take that move Direction vector and we apply it using our rigid body physics so very simple basic character control and now that we have this the first thing we want is for our character to attack so first let's begin by listening to our mouse click so inside our update let's do a input get mouse button down so when we have a left mouse click just for testing let's do a simple popup so just for testing I'm using this function from the code monkey utilities which is always you can grab for free from unity karmic calm so now when we click we should be able to correctly see a popup let's test ok here and I click any up there you go we have our attack all right so we're listening for mouse input now that we have this let's calculate the direction towards the mouse that's what we're going to use in order to target our enemies so to come with the Direction first we grab the mouse wrong position so again we can use a function from the utilities to get the mouse wrong position here is the function in case you want to make yourself well it really does this takes the world camera and does a screen twirl point on the mouse position so we grab the vector 3 for the mouse position and then in order to complete the vector 3 for our attack direction we just take the mouse position minus this transform position so in ado let's do a popup saying our attack direction and let's also normalize our vector all right so let's test ok here we are let's click on the right side and if there you go 1 0 0 so we have a vector to the right now here on the left minus 1 up we have one in there minus 1 and everything in between all right awesome so we correctly capture our mouse clicks and we have the direction towards the mouse which is going to be our attack direction now let's just play the animation so for the animations again I'm using my animation system and I have a simple function here on the character base just play the attack animation it takes in an attack direction and then a delegate for the animation complete and foreknowledge is ignored alright so let's see if it plays the animations so here we are in click and look at that we did correctly capture the mouse input but there's no actual animation so I can still move and click and nothing now the reason for this is actually pretty simple and if you follow the character controller video then you know exactly what's happening so over here is our code so we have our update or handling our movement and then we're handling our attack so the issue that we have here is the same that we had with our rolling code so we start the attack animation but if we say in this state then on the next frame we're going to go through the update again and we're going to cancel the attack animation with our simple move animation so the solution is the same as the dodge roll that we covered in the character controller video so let's go up here in order to define a new state so we have the normal set and the Italian state now we feel to store our current state and by default we start off at normal ok and now in our update we do our simple switch on our state so we have our normal state and during our normal state we play the normal move animation and then we listen to our inputs and we play the attack animation and seen here that when we play the attack that we need to modify our state into our attacking state and here case we are attacking we're not going to do anything and then when the animation completes let's reset the state back into state 0 alright so that's it let's test ok here we are let's put mouse in here and click any of there you go we have our very nice attack alright so it seems like it's working we have the animation playing correctly towards the correct direction however we still have an issue the issue is if we attack whilst moving so move and and there you go the character keeps sliding so move attack and keep sliding in that direction so the reason is because we set up our character controller in order to work with physics so if you look at how we implemented that here on our update we come later our move direction and then on our fixed update we are setting the rigidbody velocity so when we start attacking let's make sure that we put our move Direction back into the vector 3.0 so we stop sliding what's he okay so here our and clicked some works let's move and click any of there you go now he stomps to attack as he should be all right great now we have one final issue which is the rate of our attack so right now we have to wait for the attack animation to fully complete in order to do another attack so naturally this is going to depend on what type of game you're making so maybe if you're making something like there zones where you want every attack to count then this would be a good system however I want the attack to be snappy so I want to attack every time I press the mouse and I want that to work even once in the middle of another attack so let's do that alright so first of all let's clean up this code so let's make a perfect void count our handle attack function now we're going to pass in our attack code in there and we can also comment out the popup okay so then here we call our handle attack and let's also clean up the movement all right so everything is still behaving the same we just made our code a bit cleaner so we have a function to handle the attack and one to handle our movement so when the state is normal we are handling the movement and handling the attack and now what we need to do in order to make our attack be very snappy is all we need is to make sure that we handle attack also while attacking so that way we can attack while still in the middle of another attack so I'd see okay here we are moving around and click and there you go now if I spam the clicks I can actually spam the attacks so the attacks are now very snappy so if I go and I attack three times any of there you go just like that right great awesome so again this is going to depend on what game you're making but in this case I really like having some very quick very fast attacks okay so we can capture our clicks and play the attack animation now let's actually hit some enemies now I already set it up to spawn some enemies when I press a button so if I spawn there you go some enemies get spawned and they chase me and they get close and they start attacking me so the way they do that is using the basic enemy AI that I covered in a previous video so they come towards an attack but right now I cannot really attack them so I can click on them but nothing really happens so let's figure out how we're going to attack our enemies now the goal here is to attack the enemy nearest where I'm aiming with Mouse so what we're going to do is come like the position and look for the closest enemy so for example I want to be able to click on this one and attack this enemy and then click down here and tack this enemy so we don't want straight up just the enemy closest to the point position we also want to use the mouse position in order to come like the enemy that we're going to attack so instead of the player position we're going to calculate a position towards the mouse and then look for the enemy causes to that so here on our handle attack let's calculate the effector three for our attack position and now the attack position won't be our transform dot position plus our direction towards the mouse so let's rename this instead of a TAC direction to the mouse direction we're going to make our attack position be based on our current pointer position what is the mouse direction and multiplied by a certain amount so if we set the offset to zero then just going to be the enemy closest to the player and if we set it to more than zero then it's going to be more towards the mouse but if we set it too far then we might actually grab a enemy that is very far from the player so let's use a valley that is about two player size so in this case it's about three okay so let's test this out so when you know it's we debug log on our attack position and now let's test okay here we are let's click on the right side so click now let's pause so that's our attack position now let's create the game object just to be able to visualize it so in here put it in there alright so we place the game object on that position and if there you go it is indeed on the right side so we can probably increase the offset by a bit more but yep it is going towards the direction that we want okay so when we click we want to test for the enemy causes the attack position so now let's check out the code inside of the enemy class so first of all here is the enemy spawn or just basic script added into a game object and we're just testing for an input get key down and we're calling the create function on the enemy class so let's look at it so here is the enemy class and we have the function to create which is insensate say prefab and then we just have a very basic enemy AI script again I covered simple enemy AI so check it out to find out how this works but now that we have the enemy class how we're going to find the closest enemy is first of all we need to actually know where all the enemies are so we need to store a list of all of our enemies now we can define it right here so with the following a private make it static so we only want one list for the enemy class let's make it a list of type enemy so we have our mu list and now here we have our spawner function so when we spawn an enemy let's add that enemy onto our list now if we just do like this we're going to have an error since this enemy list won't be known so before we do that we test if the list is known then we create a new list all right so now when an enemy gebt spawn it gets correctly added onto this list now let's also remove that enemies from the list since we don't want to target that enemies so down here there is a die function that gets called when the enemy dies and in here we just going to list and we can remove and fasten this all right so that's it now we have a list that contains all of the alive enemies inside the world so with this list now we can finally look for the closest enemy so here in our class let's make that function let's make it public static we're going to return an enemy and let's say get closest enemy and we're going to have a parameter for the position and a 440 wrench so we want to find the closest enemy within this range closest to this position and now here let's just do a very basic with searching algorithm alright so here we have a very basic list searching algorithm so we start off with the field for the closest enemy and we start off at no then we second through our entire enemy list the first thing we do is we check if this enemy is within the valid range and if not if he is too far then the enemy is too far so we simply skip onto the next enemy if it is within range and the first thing we do is check if we already have a Const enemy and if we do not have one then this one becomes equalist however if we already have a consist enemy then we want to select which one is closer so we do a simple distance between the position and test enemy and if that one is closer than the position and it causes enemy then this one becomes the new causes and at the end we simply return it so that's it a very basic algorithm and just one more thing which is in here we might have the animal is set to null if we try to attack before we try to spawn one so let's simply test for it so if there is no then we just return not all right there it is now that we have this we can go back into our player so here we already have the mouse position Mouse Direction tack offset and the attack position this is what we're going to use so here we go into the enemy class in order to get the closest enemy now the closest to a certain position so in here we're going to use the attack position that we calculated previously and now for the attack range so we want this to be big enough so we can actually find closest enemy but not too big so that we attack someone that's way too far so let's use this and now this returns our target enemy and now this one can be known so we need to make sure we test for them so if this one is not now then we do have the enemy so then the enemies have a function in order to simply cause some damage alright so this should be working well its test okay so here I am now let's press the button or to spawn and me and yep there he is he's attacking me now if I can look straight on to him yep there yo we correctly attacked him but if I put mouse away and I click there you go now I'm not attacking him so this way we can easily target our enemies so if I click here and don't attack him I gotta click near him in order to actually deal damage after a while yep there you go he dies so now let's spawn more enemy so that I'm completely surrounded alright there it is and now yep I can actually target them so I target that guy then I target this guy and there you go now I can individually hit every single one that I want all right awesome okay so now that we have the basics working let's add some Polish first let's make the enemy get knocked back when he gets hit so here on the enemy class let's look at the damage function so there it is right here as you can see it just wants some bought particles which I covered in a previous video and spawns a damaged popup which again also covered in previous video and it has a health system in order to cause some damage which was actually the very first video on this channel so we're already using a whole bunch of interesting effects and now here let's also add a nice nut back now in order to knock back we need to know the direction and in order to calculate the direction we need to know the attacker position so let's receive that in our damage as a parameter so a vector3 for the attacker position and now we can calculate a vector3 for the direction from the attacker so that one's going to be this transform position the attacker position and we normalize it all right so we have direction from the attacker and we can also use that when spawning our particles instead of a random direction okay and now with this direction we can actually apply some knockback so i can modify the transform position plus equals the direction from the attacker times a certain hold for the knock back distance all right that's pretty much it now let's go into the Pointer script and in here when we pass in the damage yep let's fast in this transform position and now since the enemy has a knock back and let's also send the player forward so we're going to send them forward on the attack animation position so we just modify the transform position was equals the Mouse Direction multiplied by a certain float for the dash distance all right so that should do it however in here we're still using the mouse Direction which isn't really accurate right now since the position should actually snap onto the target enemy so instead of using this let's make a vector3 for the attack direction and by default the attack direction won't be the same as the mouse direction except when we have an enemy if we have an enemy then the attack Direction becomes the direction towards the actual enemy and then it's this actual attack direction that we use to play the animation and to do our nice little alright so that should be working so let's test ok here we are let's spawn some enemies and there you go look at that one I know as I punch him yep there you go he gets pushed back and I get pushed forward so just like this it looks very nice so move and hit this guy at this guy now I'm surrounded but I can actually target them and just like that alright so here we have our fully working melee combat system so I have my player that I can move around I can click to attack and the attack goes towards the mouse position then I can spawn some enemies now when they are in range I can click to attack them however if I click away then I do not attack them so I'm using an actual attack position in order to calculate the closest enemy rather than just closest to the player position so they take some damage and after a couple of hits they die yep and if I am completely surrounded then I can use the mouse in order to aim at whatever enemy I actually want to hit so I want to hit that one and I want to hit down and now that one and so on so here is our nice and simple melee combat system this is the exact same system that I use in hyper nights which is the action strategy game that I made that you can play included in the game bundle this video is made possible thanks to these awesome supporters go to patreon.com/scishow to code monkey to get some perks and help keep the videos free for everyone as always you can download the project files in utilities from unity karma comm subscribe to the channel for more unity tutorials post any questions I have in the comments and I'll see you next time