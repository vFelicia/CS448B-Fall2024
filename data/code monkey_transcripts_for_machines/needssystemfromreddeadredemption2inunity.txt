in this video we're going to make the neat system from Red Dead Redemption 2 we have our intercourse and the outer ranks for our health stamina and data we can spend them level up and replenish using items then we're also going to apply this system to the previously made that I effect let's begin hello and welcome I'm your code monkey and this channel is all about helping you learn how to make your own games with indepth tutorials made by a professional indie game developer so if you find the video how fun consider subscribing alright so reddit redemption just came out on PC and I figured this was a great time to look into some more systems when the console version came out I made a video on how to make a nice that eye effect so I can spawn a bunch of enemies then I can enable that I then I can tag my enemies and then when I exit their ego they all get shot so there's a very nice effect that was made completely from scratch in a previous video so go check it out the game slows down the screen is stinted the player marks the enemies then goes back it shoots them alright great effect now in here we're going to make the Aeneid system this is a very interesting and very unique system essentially it's split in two so we have the inner core mount and the outer ring amount so as I'm sprinting I'm spinning the ring amount and as the ring amount is completely empty it starts draining my core amount and once that one is come only empty there you go I can no longer sprint and now the ring amount is rejoining very small so the region is based on how much the inner core amount is full so as I spend it all there go the region it's very slow now I can consume this item to replenish the core mount and there you go now the region works much faster so that's the interaction between the outer ring and the inner core amount we have the health the stamina and eat that I so as I sprint the stamina goes down as I spawn some enemies and they shoot me I have the health amount need going down and then I have the Deadeye there you I enable it and it's coming down and I can tag my enemies and you can see the core constantly going down and if the core reaches empty that eye is automatically cancelled and it's activated there you go all empty and there you go just like that now the region is very slow so i can consume some items in order to replenish my region now this inventory system in here was also created fully from scratch in a previous video so go check that out so you can see that I can easily spawn some specific item types and I can click to consume them which then has a specific effect then with the button I can also move on up each of my stats so I press this one and there you go see my stamina constantly going up and just like this I have max stamina and if I person a little button I can cause to go down and all the needs work in the same way alright so here is our very nice neat system just like it works in Red Dead Redemption 2 we have the tongue the stamina and very cool that I effect alright so this is our goal let's get to it okay so here's our starting point I have my cowboy character here and I can walk around I can spawn enemies that will approach and try to shoot me right now as you can see there's no health or stamina meters so I can spawn a bunch of enemies and I can also use the data effect from a previous video there you go activated and boom boom boom and there it is alright great so this is our starting point now with this let's begin by making the UI elements now over here in the hierarchy I have my canvas so in here let's make a new game object let's call this the UI means and let's extend it to occupy the entire play area so extend set everything to 0 ok now let's start with just our stamina core so inside make another game object called the stamina 4 and now inside let's make a new UI image and here let's use the circle sprite there it is so this circle won't be our ring so let's rename this to the Ring image and now here we can actually use the awesome features from the UI image so here we have the image type and we can select it and change it from simple into filmed and here on the film you can see we have various fill methods and radium 360 is exactly what we want so here we have the fill amount and as you can see look at the sprite yep we have a very nice rotating sprite now instead of having the origin on bottom let's put it on top and you examine like that that's how we want our effect to go ok so for example this one being for the stamina let's in like this we have our character using full stamina and as you spend it it goes down as it regens it goes back up very simple very nice so this is the current ring amount now underneath it we have the total ring image so let's duplicate this call it the total ring image and this one is going to be tinted in black and this one goes under so let's put it behind down yep just like that so you can see we have our current amount and a total amount now on top of DC we have the simple circle background and now on top we have the core image so in this case for the Sam now let's drag the stamina icon just like that this one is also film but it's not radio but rather a vertical so the origin is at the bottom and just like this stem in this phone and just like this it's empty now let's size it accordingly and underneath we have the total core image alright so just like this we have the entire composition for our stem they need UI element we have in here the core image that we can modify the film amount as it depletes and it regenerates then underneath we have the total core image to show the total amount then we have a simple background and behind it we have the ring image which is radial so we move this in order to fill it up and spend it and beneath it we have the turtle ring amount which we're going to increase as our stamina levels up alright so let you see this in game and if there it is there's our awesome UI element ok great now that we have the original working let's see on with some simple logic so over here let's make a new csharp script let's call this the needs system and open it up now in here we're first going to start off simple with just a single need for our stamina and this will also be a simple class to get rid of motor behavior all right now the first thing we're going to need is the ring amount and eternal ring amount that's our current and our total then we also need a core amount now let's make a constructor and in our constructor let's at all of the default values we're going to make them in the range of 0 to 100 so up here let's define a cost for the maximum and let's start off with a bit less than half all right so just like that so on the total we have 40 out of the possible 100 the ring amount starts off commonly foam and then we have our core amount at our maximum so now let's try to use this need so in here we make a public going to return a boolean and call it try use need and we're also going to receive a fold for use a lot so in here first we do a test if the ring amount is bigger than or equal to our use amount if so then that means we can afford it just based on the ring amount so we simply reduce it and if not that means we want to use more than we have available in our ring so we need to check if our core can also withstand this use amount so first we reduce the use amount by our ring amount and now we test if the core mount is higher than what remains so if the core amount is bigger than the use amount then we can still use it so we first set the ring amount to zero since it's all completely spent and we reduce the core mount by our use amount and if not then we simply return false in order to indicate that we don't have enough to spend that certain amount all right so that you do it we try to use a certain use amount of our need and if we can't afford in the ring then we similarly take it from the ring if we can't then we try to check if the core has enough if neither the ring nor the core has enough then we simply return false and we cannot use this need so for testing let's have some logs on the amounts all right we have some logs so we can verify this now let's see how we can test it back in our editor and let's make a new script convert our testing script let's make a testing game object to run this script so testing and drag the script onto it okay now in here let's first add a serialized field for our character so back in the editor we have our film let's drag the reference okay now here let's make our private void awake and let's construct our neat system all right we have created the neat system now we make a fresh Boyd update and here let's do a simple input test and if we press left shift then let's start spreading so let's make a private ball call is sprinting and here we set it to true and Anki up we set it back to false then we check if we are sprinting then it's in here that we want to try to spend our neat amount so you're going to need system and we call try use need so we need our use amount and we try to use this name x time down time so if we can use this need then we keep sprinting and if not then we stop sprinting all right so here we have our very simple logic so if we press on the left shift we start sprinting if we won't let it go then we stop sprinting and if we are sprinting then we check if we can constantly use our sprint need use amount if so we keep sprinting if not then we stop sprinting so very simple let's test okay so here I am walking normally and here is the console so you can see and as soon as I press the left shift there you go we start sprinting and you can see the ring amount constantly going down let's ring amount goes down to zero then the core amount starts being spent and once that one reaches zero so as you can see I'm still sprinting and when that one reaches zero I should go back to normal and there you go the movement speed goes back to normal and we cannot nogger use all right awesome so here is our logic fully working so with a logic working let's connect it to your UI visual first we need to make our visual script so let's make a new csharp script call it the UI needs system drag the script on to our game object okay now in here first we need to grab references to our elements okay so here I've grabbed all of our references so first we grab the stem and I need then inside the salmon indeed we grab the ring image then the turtle ring image and the core image again here is how the UI is set up so we have our main container then inside we have the stamina need then we grab the turtle ring the ring and the core image okay so now in here let's make a function to receive a need system okay all we do is set this field in here now let's make a function to update our core and ring visual so we go into the ring image and this is an image so all we need to modify is our film mount now the film mount works with a normalized value so let's go into the neat system in order to make a function down return the exact value we need so on our neat system let's make a public float call it get ring normalized value and we're simply getting to return the ring amount divided by the maximum that's the ring amount and another one to get the core amount and finally one also for the total bring em up okay we have our very nice three functions to return normalized values so we can go back into the UI and in here we can simply set all of them so we go into the need system in order to get in this case the ring normalized value and the same for the rest all right so that should do it so we set our need system then we update it and we set the fill amount of the various images based on what they need system contains so all we need for this to work is to call this function whenever something changes so for that let's use a very nice event back on the nead system let's go all the way up here and we're going to make a public event type event handler if an Emer is inside the system namespace so we have our event let's count on values change alright so we're going to fire this event whenever our values change so right here we call invoke on this method passing this and event our it's not empty so we triggered this event in here and also in here when we change it just like that okay so we have our event correctly being fired and now we can go back into the UI needs system and when we set the innate system we go into it and we subscribe to the on valley's changed event and whenever that one is triggered we simply update okay so every single thing should be working the only thing we need for all of this to work is to call this function in here so for that we go into our testing and here in our testing let's add another serialize field for the you I need system and when we create our need system we simply call set neat system and test this one all right there it is so let's test okay here we are and we have a complete stamina need now let's move and start sprinting and there you go you can see the rain constantly going down and as it gets depleted it starts depleting the core amount and there you go once everything reaches zero I should go back into a normal movement speed there you go almost on any of there you go back into normal and I can no longer sprint so I'm pressing shift and nope doesn't work alright awesome so we have our basic logic working alongside the visual so now with this working let's handle the region so in our neat system let's make our region based on time so since it's based on time let's make a function that we're going to call on our update since this one does not implement motor behavior we're going to do that elsewhere so in here we make a public voi update okay now in here let's do some very basic region so the way the region works is we increase the ring amount by the region speed multiplied by our time dot off the time however this would be if we only have the ring amount but again based on the design of the game the region is based on how much we have on our core amount so we have the region speed before it's x adult time we multiply it by the get core normalized value so if the core is phone we get this much region speed if the core is empty then we have a lower amount so here in order to make sure that the region is always a bit more than just 0 let's do a math dot max so at least we have a basic of 10% of our region speed now the last thing we need is simply to make sure that the ring amount is clamped between the min and the maximum so we do a simple clamp with the current ring amount on a minimum of 0 and a maximum of our total ring amount okay so that's it and after that we simply fire off the even so the UI is notified ok so now we need to call this function from somewhere so for that one it's going to our testing script I mean here all we need to do is go down into our update and we're going to the need system and call our update function okay that should do it let's test ok so here we are and our ring is completely phone now let's start sprinting and there you go the ring gets depleted let it go and if there you go we have our nice region so it's written correctly now let's try it deplete the core and see the region speed so there we are we deplete the ring once the ring is done then we start going down on the core and once the core is down then we stop sprinting and there you go I cannot sprint and it's growing very slowly so as you can see we have our nice region dependent upon how much we have on our core amount so here we can sprint again and there you go we have the basic region code working right awesome so this is one way to do our region however if you like the game you don't see that region isn't actually constant it's on a thick system to sort of simulate heartbeats so the more fields your core is the more beats per minute so let's make some very simple take code I've done video covering a very nice time take system so go check that out for a complete explanation in here I'm just going to make a simplified version so we have a float for the region timer so on our update we're calling the handle region function and in here we simply decrease the timer by our delta time and whilst it's under zero we increase it by our maximum and we trigger the region tick which is doing what we were doing previously except in here we now have a reference to time down to time so we are retaining a specific fixed amount and then in here we also do not regenerate based on our core normalized value but rather the core normalized values what's going to influence how many texts we have per second so we can also get rid of this so he simply increased by a certain region speed and then we need something to complete the region timer max so in here we have the bass respond timer of 1f so that's how quickly we're going to take once our core is full and then we have our penalty and this is the amount that we're going to add extra if our core is completely empty and if it's in between then we have our inbetween valve so at verse is going to take once per second and at worst once for two seconds so now we need is to complete our region timer whenever the core changes so here first on cert we'd calculate it and then we try to use if we use our core amount then we calculate it as well all right so this should be working let's test okay we're on let's try spending our ring amount and there we go it goes down as the Sprint goes and there you go it's regaining like that so every second tick tick tick and there you go it's wrong now spend it and let's also deplete our core amount so it's going down and down and we still need to deal with the region but let's try and goes down and okay it's empty and now let's see and ticks and two seconds and two seconds and decide and there it is so we now have our region working as if for a heartbeat and if the core is gone then it takes on a lot and if the core is empty then it takes much less okay now let's just make sure that the region only ticks when we are not using it so to do that we can simply store a float for the last use time and when we try to use we set that so we set it to time time okay so now we know the last time that we used our need sent in here we can simply have a boolean called it can region so in here we can only regen if the current time is more than the last each time plus a certain delay so we're only going to regen 0.2 seconds after the last use time so now in here we can simply go in here and we're only going to handle the region if we can't region okay that should do it let's test okay so here we are and let's spend our ring in there you it's going down there's no region and if I let go then the region starts so we no longer have region once we're still using all right awesome so just like this we have pretty much our neat system working we can spend and regen the basic amount we also have the illogic working between the ring and core amounts now let's add some code to be able to level it up leveling up just means that we increase the total ring amount so it's very simple in here we can simply make a public void set total ring round and now we need to do is set our inner variable so that it is extremely simple then once we do that well it's also clamp the current amount just in case we want to lower it so we can leave the ring amount based on this new total and since we changed our values let's trigger our event all right so that's really it now let's go into our testing script and in here let's do some input for testing so when I press this key and let's try to increase our total amount so for LAN let's have the neede system for the current total amount okay we have our get total and now in here we go into the need system and we can set our new total ring amount to be on the current one once let's say 10 so when we press this key we are increasing the total ring amount let's make another one to decrease it all right so that's really all there is to it let's test okay here we are and there's our ring amount and I can press this button to increase it and there you go we're increase then then you saw our region happen so increase it all the way up to maximum and there you go we have our maximum and we can spend it and it regions and so on and by pressing another button we can make a deal go down and said and there you go and just like this we have a very small neat amount there it is and it starts spinning the core right away all right awesome now finally let's add all of the other needs so here in our neat system this last that we build essentially represents you just a single need so it's actually put this inside a nested class and call it just a need okay so I've copied everything into this nested class now this one represents a single need of any time and now I'm here on the needs system class itself let's make it a new for all of our neat times so we have the health stamina and that I now let's or our need instances in a nice dictionary okay so we have a dictionary and we add all of our needs on all the different keys now let's make a function to return need of a certain type and all we do is return from our dictionary and that's pretty much it so we have our inner class to represent a single need of any time and then on our neat system we have a dictionary holding all of our needs so let's go into our testing in here we can see a bunch of errors so before we try to use name we first go into the neat system we get the name we pass any time in this case the stamina and then we try to use our name just like previously so that's all we need to change you know let's also make an update that won't update all of our needs okay so we have an update that updates all the needs so here on the testing we no longer have any errors now let's end on the UI now in here we're going to need to have various ring images and so on for each specific need so let's go into the editor and here let's convert the stamina need in to a prefab call the PF need single ok so we have this need then one on the side and another one on the other side let's call this the stamina need then next week we'd have the dead I need and finally D help me so here we just need to change the core images alright we have our three separate needs of them using the same prefab and now in the UI let's handle each need all right so here on the UI I made a similar pattern so we have a nestled class to handle a single need visual so it receives a knee type and the transform and in here we have on the code as previously so we set the need system subscribe to the on values change and we update it and then awake we similarly created then we pass in the transform so now we just need to pass in the need system alright so there it is just like that all we need is to call this function which we're already doing over here in the testing there you go we're sending the need system all right so we should have connected everything correctly in order to handle all of our three needs now let's test ok so here we are with all three of our needs divisions working now let's see the stamina and you have the center is still working it goes down and regions ok so far so good now let's try out the other ones okay so here we are with all the needs is played and working what's fun a couple of enemies and let them shoot me so there he goes and once he shoots me there you go there's the health going down no the health core is going down now let's try out the Deadeye and there you go data is going down so tag all of them and click the button and there you go that eye engages and as you can see they're both rejoining and these stamina so works the same and now let's go and did that is currently being spent and the rain goes down there you go ring is down and now the core starts going down and after a while the core is almost depleted and once it depletes without me touching anything it forcibly cancels so there are you we have all our three different knee types all correctly working so the enemies shoot them and they shoot me in there yo there's my home and so on and so forth alright great so over here we have our very nice effect now finally here I have the inventory system this was fully created from scratch in a previous video so go check that out to see how this was made so we can create items and use it here on testing I simply create the new inventory with a reference to the UI inventory and create it and set it and whenever an item is used it triggers this function in the inventory code I of the three item types so the burger the energy drink and candy and now here we can use those items in order to replenish our course so here when we use an item we do a switch on the item type and if it's a burger we're going to replenish our HealthCorps amount energy the stamina and the data so here this function very simple it just takes a fold for the replenish it adds to the core mount and it triggers our event alright so there it is very simple let's test ok here we are with our inventory and all of our needs so let's find some enemies and lose some health and there you go they come to me they start shooting and they're you and they keep missing but there you go there's my core going down Oh enable that eye and get rid of all of them and click and shoot and there you go so my core has been spent in the region is very slow but now I can click on it and there you go replenishes my core by eating some burgers so do the same thing on the stamina there you go still full and we have our nice region now spend some more spend it completely and there you go it keeps going down when it sound ok now the region is slow you know let's take some energy drinks and there you go with the region goes up and same thing for the data so then I goes no no it takes a while to regen and let's eat some candy and replenish our core right awesome so over here we have our complete need system we have our three neat types the health stamina and the Jedi we can activate each of them individually so they all work independently and they work with the correct logic between the ring and the core amounts so if I get hit it spends the help name if I sprint it spends East I'm gonna need and if I enable that I it spends East that I need then we have our region based upon our current core amount and we have our items to replenish that core month there you go goes off and region improves as always you can download the project fanzini tony's from in tucumán comm subscribe to the channel for more Eng tutorials post any questions you have in the comments and I'll see you next time you