in this video we're going to create a procedurally generated endlessrunner map we're going to make several handmade parts and connect them all together to infinity let's begin hello and welcome I'm your code monkey and this channel is all about helping you learn how to make your own games with NF tutorials made by a professional indie game developer so if you find the video helpful consider subscribing so this is what we want to create we have our endless runner that starts stopped so I hit space and he starts running and constantly running to the right and here as you can see we have an infinite randomly generated level the level is made of handmade parts so each of these is one section that was individually created and like this drop right here and we simply stitch them together and as the player gets closer to the end more get generated and so on and so on so this goes on forever alright so this is our goal let's get to it so here is my starting scene I just have the player sitting around and when I press space he's gonna start running so pressed there yo he starts running to the right I can jump I can catch coins and if I touch the spikes I die and it allows me to reset so you can see that the scene has physics using gravity and automatic runner player movement I've done a video on a simple character jump so check out the link in the description to see how these simple jump works ok so now let's think of how we're going to take this in order to create an infinite procedurally generated map in order to be infinite that means we need to constantly be creating it through code so here I have my starting platforms and then I need to add something over here at the end so then the question becomes what do we create in order to add at the end there and the answer is manually don't live on parts so we construct a couple of different prefabs that make up level sections and then we randomly pick one and spawn it right at the end of the current map ok so let's get to it here is the editor scene as you can see I have the player and then a level start this contains all of the main level as you can see a simple prefab for the coins another one for the spikes and our platforms so let's start off by making a first part so down here make a new empty game object and we're going to name this in level part 1 now inside we're going to add another platform this platform as you can see it's very simple just the sprite renderer with box Collider and the layers it's on the platform's layer now the origin for this game object this is going to be the place where the last platform ended so essentially the origin for our level part one won't be placed right here so drag it in there and now we can locate our inner platform and let's put it to make a small gap okay that you do it so this is the origin and this is where we place our platform so this should do it to make a nice simple test so again we're going to be in sin cheating prefabs so let's make this into a pre found and now let's make a script in order to generate it so we go in here make a new you see sharp script this won't be the in level generator let's make a game object that won't run this script so in here an empty game object for the unlevel generator and we drag our script okay now in here let's make a perfect void awake and we're going to spawn our level part so in order to do that we need a reference to it so add a serialized field for a private transform for the unlevel part one here in the editor and let's drag our prefab reference okay and then we just instantiate so in sin she ate the 11part one then we need a position so let's manually see where it should be and we're going to place it in there so on one three four and nine okay so that should do it so we should be able to see our eleven part one being accentuated right at that point so let's remove the prefab from our scene and all its tests and see if that part indeed get spawned right in here so let's see here we are start running run to the right any of there you go this is the end of the starting platform and there's the new one okay great now let's put this spawn in a separate function so in here we'll make a private void spawn level part and we're going to receive a vector3 for these fallen position so anyway we're going to do pretty much this and we use the spawn position as the spawn position so here for testing let's spawn our first level part on the same position and then let's also spawn another one to the side so let's put it 70 to the right and another one seventy plus seventy okay so we should be able to see three and level parts being spawn let's see okay here we are on the start start running there's okay yep there's our first part and right there our second and right there our third and the map ends okay great so we can now successfully spawn as many parts as we need however all of our spawn positions are currently hardcoded into our code that's obviously not good not very stable so let's see how we can make these spawn positions based on the editor instead of being numbers in code so here on the 11part start we can I have an empty game object inside it and let's call this the end position this will serve as our in position from where this level part ends and where the next one should begin so let's place it right at the end of the Alliance platform so here we have the end position and let's put it right in there in order to make it visible in the editor and let's simply add a background and make 2d gizmos and if there you go there's our nice end position so this won't be the place where the next level part will be spawned so let's do the same thing for our custom level part here we are in here and let's also add a end position make sure that it's named in position and put it right there at the end of that okay since we're dealing with prefabs don't forget to come here and apply all our changes okay so this should be working now in order to see what we can do with this instead of placing it right there horizontally let's move these two up a bit so essentially right here is the origin of this level part and then it ends in there so it ends higher than it begins so essentially with every single level part being spawned slightly higher we won't have an infinite clamp so this is our editor setup again make sure to update the prefab and now let's go back to the code and in here let's first add a reference for our starting level part so a civilised field or the private transform for the in level part start here in the editor and let's drag our reference here's our let's on generate and drag the 11part okay and on awake before we start generating our level let's first grab the end position from this starting level part so you go to the level parts start and find the end position so this is what we want to use in order to spawn the next level part so we use this inside here and then on this spawn level part we also need to return the transform so we can know how to locate the next one so in here we return a transform and here we grab transform from the in last level part transform he said it as what we get from there and then from this one to use that as the end position so we find the end position and we spawn a bunch of them okay so we should be correctly spawning every level part one instance at the end of the previous one so since we put it higher we should see a nice climb with a bunch of middle part so let's see okay here we are let's start running and start running this is and there's the end of the start and there starts a new one and the new one slightly higher and another one slightly higher and so on ok great so we can now correctly spawn our level parts and manually define where they will so now that we have endpoints placed on our own level parts let's work on making it infinite what that means is essentially every time the player gets closer to the end we spawn some more and keep spawning spawning spawning so let's go back into our code and the first thing we can do is simplify our spawn level part code so let's make a simple function that takes no parameters and automatically calculates the spawn position so a private Boyd spawn level parts all we need this is stored up here a private vector3 for the last in position and in here we spawn in level part on the last end position so this will return a transform reference for the last level part transform and then we set in last and position to be on this one and we find it so this one automatically spawns the in level part and locates it correctly so here all we need is to set the honest and position to the starting and position so the start end position then instead of on this code all we need is to spawn the 11part okay let's make sure if it's working so here we are grab a bunch of coins jump over this and yep there's that one and there's now okay so we now have a very nice simple function now we want the level to be constantly spawned as the player moves along so since we are spawning level parts we can simply define a value for the minimum distance of the player to the very last level part so for that let's make a constant so a private concert for the player distance spawn level parts and here we just put a certain amount so if the player is within this many units of the US level part then let's spawn some more so to test our distance let's make a fresh voice update and on the update we need to test distance between the player and the almost position so that means we need a reference for the player so again another civilized field for the private player reference here we drag our reference okay and now in here if the vector 3 dot distance between the player yet position and the last and position if that distance is under the player distance spawn and level part then we want to spawn another plugin part so very simple so as the player gets closer to the end he spawns another one now an awake let's just preload a bunch of parts so we'll find an end for the starting spawn level parts and let's say we spawned five we do a simple four okay that should do it so just like this our level should now be infinite as the player moves towards the in last end position he's going to spawn more more and more so let's start ok here we are with the game view and the scene view side by side as you can see we have the starting level part then we have a bunch of them being spawned as you go all the way in from there so as we get closer to this one we should be able to see more being spawned so let's start playing there goes the player and he keeps going and going and as he gets closer to the last one yup there you go another one to spawn he gets close and another one is pawn and closing another one so just like this we have created a infinite level and an infinite climb and we can do this forever all right great exactly as intended so the functionality is fully working but obviously it's extremely don't if one we have is just one level part however since we set things up in order to use prefabs it's extremely simple to manually create a bunch of interesting ones and then we randomly pick from them so let's make a bunch more level parts so all we need is to make a new game object the in level part two for testing let's try placing it right there at the end and now we add another platform and the only requirement for each level part is that each of them has its own end position so now I can for example say that this one will have a slight drop and then I can also place the coins so I drag the coin profound so place a coin there another one there another one up there and yep just like that and if I want I can also play some spikes okay so again as you can see it's very easy to manually create a eleven part and again the only thing that we need to be careful is in adding the end position so make sure it's at the end of this platform so the next one knows exactly where it should connect then we need this to make this a prefab so just drag it in there there you go this is now our prefab so now that we have our two prefabs and let's see how we can randomly choose one so here on the eleven generator let's go up here and here we have a reference for the part one now we also need a reference for the part two so instead of adding individual ones let's rename this to the 11part list and here we receive a list of trans ones so here in the outer as you can see we got our level part list let's put two and we drive local part one and level part two there it is like that okay now back in the code and let's go down to the spawn level parts here we have a function that is automatically and takes care of everything then we have this one so for this one let's also receive a transform for the eleven parts and that's the one that he's going to instantiate okay and then this function won't take care of choosing a random own in order to do a transform for the chosen level parts we go into the 11part list and we pick one we grab a random range starting at 0 going into a level parts list up count and just like that so here we are grabbing a random level part and that's the one that we pass in to spawn okay so that should do it let's test ok so here we are let's see for both of our level parts are being randomly spawn so we start running and here we go at the end the start and yep there's the second one being spawned right away so I can jump I can grab these coins and yep just like that and there's the number one there that small jump was the number and again we got another one falling down and that one is up so that's the first part another first part and another second and so on so as you can see we are now correctly randomly picking between two different parts okay so everything is pretty much working now that's left is to create a bunch of level parts that we won't randomly spawn so let's do that so here I have created a bunch of different level parts all we need to make this work is just going to the unlevel generator and add them all to the list so in here drag all six parts drag them onto the list and that's pretty much it so let's test and see if all of our random parts are being used okay here we are started running on the starting level part and yep there's another one and right there jump over that one and there's a different one right there and there's another one right there and yep there it is alright so this is pretty great so just like that you can see that our level is infinite and made up of handmade level parts the eleven parts have coins and spikes and it's up to you to add more things on to it you could add more objects to interact with like for example on moving enemies or moving platforms and if you wanted you could make different level parts per different level so you would have some level parts for an easing level and some for a heart level all you would need to do would be to change the level parts that you use as always you can download the project files in utilities from unity code marcom if you liked the video subscribe the channel for more unity to turrets post any questions you have in the comments and I'll do my best Internet alright see you next time