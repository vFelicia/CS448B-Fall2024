hello and welcome I am your code monkey and in this video we are going to make a camera follow system we're going to build a class they can move the camera towards a target position this position can be the player but it can also be anything else like an NPC or just a random point so we could make a cutscene where the camera pans to a specific point and then goes back to the player ok let's get started okay I have a scene here with a movable player that I can move with the arrow keys and to NPCs that are moving between waypoints and a secondary point that I can move in the back okay so let's start by creating a new csharp script and call it camera followed open the script and now on our update we're going to move the camera towards our position so camera follow position let's just make a new vector3 just above we want to make sure that we keep the same Z position so camera fall position not set equals transform out position that's that okay and that's from down position equals camera follow position now we add this to our main camera and when we run the camera should be moved upwards yep there it is slightly above so instead of having the position in here we're going to make a public void setup that will receive our vector three camera follow position we're going to store it here so on our game handler we're going to add a reference to our camera phone script and on start simply do camera follow dot setup and knowledge is push it downwards okay so add the reference and the camera should now be shifted down yep there it is great okay so obviously we don't want the camera to follow a fixed point but rather to always update the point that it's fallen so instead of getting a vector a fixed vector three we're going to go into the system namespace and grab a phone that will return a vector three and college get camera fall position now a func is just a delegate that returns in this case a vector three so this is what we're going to receive on our setup and in here we're going to have vector three camera fall position which won't contain the result from that function and now in here instead of sending it that we're going to send our position as a function so right now it should still be moving downwards but we can update yep it's pointing down so now let's choose something that actually changes so at a reference to our player transform and here instead of sending a fixed vector we're going to send our player transform dot position so it's compound at the reference to our player and now the camera should be following the player I can move the player with the arrow keys and yep the camera is updating every frame going exactly where the player is great so as you can see the movement is exact every frame it updates exactly to where the player is which might be good but it's not doesn't look very smooth especially if we move the player quickly it looks quite janky so let's add some smoothing to our camera movement so in here on our camera follow instead of setting the position directly let's get a direction that we're going to move the camera towards so camera move there is going to be our camera fall position our current position normalize okay so we got our direction we need quote for our current distance so let's get the distance between the camera fall position and our current position and let's a float for our camera blue speed and let's do it just one app for now so instead of setting our current position we're going to set so our position was our camera move direction times the distance so that we move faster the further away we are times the camera move speed times time comp time so that this is this movement is independent of the current frame rate so let's test it and see if the camera follows a player smoothly yep there it is I can move the player and the camera no longer has that janky movement great so now this code actually has a slight problem here which is what happens when time dot on time is actually very large which happens when the game is running at a very low framerate we can test this out by increasing the move speed and just decreasing our application dot target framerate and just make it run at 5 frames per second and in this way when the camera updates its gonna constantly overshoot the target so as you can see there the camera the player is stopped but the camera is shifting back and forth because it's moving so much in each exact frame that it never actually stops where it should so let's fix this problem by making sure that the camera never overshoots its target so in here first of all we're only going to move it distance is more than zero and when we move we want to do get power make a vector3 new camera position which won't be this and we're going to have a phone which is distance after moving which will be a vector3 that distance between the new camera position and the camera followed position so if our distance after moving is actually bigger than the distance before the move then we have overshot the target overshot the target so let's set the new camera position to our actual camera follow position and then finally we do transform dot position equals our new camera position so this way even on a low framerate the target should never constantly be jumping back and forth it should no longer overshoot the target so no here I have and when I move the player if the camera overshoots it will actually correct itself and stop where it should okay great now let's reset make sure that the frame rate is back and put our camera with the basic moves to be just to F which should be nice and smooth yep there it is great so lets out a new function for changing our get camera formal position func so that we can switch where the camera is actually following so do a public void set get camera follow position phone and it's going to take that funk as an argument and we're going to sit in so now on our Kim Hanul urn let's add some references to the other objects in our scene so character of one transform character to transform and manual movement transform let's just add our references in here okay it's a character character and manual movement so in here instead of following the player I'm gonna change the get camera phone position and I'm gonna send it to actually follow character one position so now instead of following the player the camera should be following the first character yep there it is I can still move the player but the camera is no longer focused on him okay so now in order to make testing easier to switch between which camp which character the camera is actually following let's use some debug buttons using the code monkey utilities as always you can grab the utilities from unity code monkey comm so I'm going into CM debug create the button on the UI put it on the right side and call it player this won't be the button that won't set the camera to actually follow the player so the button won't trigger this function that we'll set to follow the player at the various add a button to follow the first character the second character and the manual character put the buttons we need one another and now the button should pop up and we should be able to click them to switch the cameras target so right now it is following the player and I click on that one and it's not following this character the player is still moving I click the manual now I can move this one and the player and this one okay so as you can see we can very easily switch where the camera is pointing on the next video we're going to add the ability to zoom in and out if you have any questions please post them in the comments and I will do my best to answer them alright see you next time