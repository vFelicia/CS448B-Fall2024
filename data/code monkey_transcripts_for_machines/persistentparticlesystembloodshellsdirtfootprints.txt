in this video we're going to make a persistent particle system this is a great system for when you want to spawn some particles and have them stay on the map like some blood or footprints let's begin hello and welcome I'm your code monkey and this channel is all about helping you learn how to make your own games with indepth tutorials made by a professional indie game developer so if you find the video helpful consider subscribing okay so here's what we want to create over here I have my character I can move them around and when I do you can already see two uses of the persistent particle system when I move you can see dirt being kicked around and vanishing and you can also see some footprints where I went through so as you can see the dirt vanishes but the footprints stay always on the map now another uses with the weapon so whenever I shoot there you go there are some very nice shell particles exiting my weapon and once they stop they stay on the particle system and finally over here I have an enemy and when I shoot him there you go you can see some blood particles and if I shoot him some more he turns into a flying body and leaves behind a nice trail of particles and as you can see once the particles stop moving they remain permanently on the map so these are various uses for the persistent particle system we have particles being spawned they move then they stop in their final destination and they stay there forever alright so this is our goal let's get to it all right so here's our starting scene over here I have the player and I can move them around and shoot and as you can see there are no particles anywhere and over here is an enemy and again I can shoot him but no particles come out and after a while I kill him and there goes the flying body and again no particles ok so this is our starting point now the way we're going to build our system is by making a custom dynamic mesh so if you're not familiar with how to make a custom mesh through code then check out the video linked in the description that video won't teach you everything you need to know about how a mesh is made and what are the elements required to make it so here for our system let's start off with basics and draw a simple quad so first let's make our script a new script let's call this the mesh particle system and here we make a new game object and drag the script on to okay now to make our mesh visible we need to add a mesh filter that's the component that holds a mesh and a mesh renderer which is a component that defines how the mesh is displayed okay so far so good what open up the script okay now in here and let's set up our mesh okay so here's our starting mesh code again if you're not familiar with this then go first check out the mesh video a link in the description once you see that video you won't be able to understand what all this is so essentially we have the vertices the UVs the triangles and all of it makes up our mesh so we create the mesh and we apply it to our mesh filter and if we run this code here with the code running we can see that indeed we have a mesh inside of our mesh filter there you go zero vertices zero triangles but it's in here okay great so now in here let's make a simple quad okay so I've heard a nice function in order to add a quant again in following with what we've learned in the previous video about how a mesh works for quad we need four vertices for UVs and six triangles so here on this function we are modifying these arrays so here we're just setting up the vertices and the triangles so here we define a certain rotation that we want to add into our sprite in this case let's start off simple so at 0 and here we just apply the rotation onto our quad size in order to come up with the all of the corners so by applying the various rotations we can take our quad size and build our quad so in here we are placing the vertex on the lower left corner then we place on the upper left corner then on the upper right corner and finally on the in lower right corner and then we have the triangles which simply connect them so we connect the zero so we're left into the one so upper left and into the two which is on the upper right again if one of this seems some series make sure you check out the previous mesh video and all of this will be clear so let's see this in there it is we have our nice pink square it's pink because we did not add a material nor the UV but if we pass over here with our wireframe enabled you can see our quad is correct so we have our four vertices with our two polygons triangles okay so far so good now in here let's make sure that we take care of our base index automatically so that we can spawn this in order to add a new quad every single time okay so here I've had been in for the current quad index as well as a constant for the max quad amount each mesh is limited to a total of 65,000 vertices so since we are making quads essentially we have a total of 65 thousand divided by four so we have around a total of fifteen thousand maximum quads we can put in a single mesh so with that maximum then we simply update in here if we go past that two meshes phone so let's not do anything we're going to handle this later and then here we simply calculate the vertex index based on the quad index x force since we have four vertices per quad and now the triangle we multiply by six and then at the end of all of this we simply increment the quad index this function also takes in a position which is simply applied into our vertices and finally here when we initialize our vertices we multiply them by the max quad amount so just like that they all have the correct size okay okay so in here we are spawning two quads so we should be able to see two quads let's see and here we are and indeed you can see two different ones and here we can see the two quads being rendered and they are all part of the same mesh okay great so now that we can spawn multiple quads let's deal with the UV okay so here I've added the UV as you can see they use the same indexes as the vertices and in here I just set it to display the entire texture so on the lower left corner we are on 0 0 and on the upper right we are on 11 now here back in the editor all we need to do is create a new material and in here we just drag the sprite just like that and we drag the material into our mesh render ok so let's see and if there is we have our UV being applied so we can see our quads using our texture awesome so now let's add a quad every time we fire our weapon so for that I have a script which fires an event so we can use that so I had the serialized filmed for the character aim handler script so here just drag the script reference on to it now in here we can simply go into it and subscribe to the on shoot event so here how this character aim handler is implemented is not relevant to our mesh particle system all we need is to have enough information in order to be able to spawn our particles so just for testing I'm going to add a text popup so I'm using this function from the utilities which as always you can grab for free from unity code monkey calm so with this we should be able to see when this event is being fired so let's see and here we are when I shoot yep there you go we have the nice event being fired okay great again always remember to keep your code nice and clean and all your systems decoupled so the mesh particle system doesn't care how this character works all it cares is that it has an event so that it can do its thing so this event passes in a gun endpoint position so let's point a pawn on it so we simply call at wand and we pass in the gun endpoint position let's get rid of these two and just like that and here since we're adding a quad after being in sin she ate every time we modify our local arrays we need to update them on the mesh so let's copy this and add it down here okay so we should be able to see a quad spawned whenever we fire our weapon so here I am looking around and I shoot and there we go there's a nice quad being spawned exactly where it's supposed to so click and click and there you go so I can now spawn as many quads as I want whenever I shoot all right great so now that we have this working let's make our quad move so back in our particle system script let's go down here to make a function so we can update each quad so let's make it a public void and we're going to call this update pond and now in here we will receive an int for the quad index then receive a vector3 for the new position and then we can also receive on the other so it holds for the rotation and if we want a vector3 for the quad size so in order to update it we do exactly the same code we were doing in here so let's copy from here and let's put it in here and now up here on this one we call passing the quad index then the position then a rotation and the quad sighs and then we update our mesh arrays just like that okay so we now have a function to add a new quand so essentially it modifies the current quad index and then increment it and then we have a function to modify whatever quad index we give it so now here just for testing let's make it constantly move so here when we call add quad and let's make sure that it returns the current spawned quad index so this one returns an int and we're going to store an end for the spawn quad index and then we return this so that means that here when we spawn a new quad when the character shoots we can have an int for our spawn quad index then we can use this quad index in order to call our update quad to constantly move our quad so here just we're testing I'm going to use the very useful function updater again from the utilities so this one takes in an action that gets called on every update so on every update let's call update quad we pass in our spawned quad index and then let's simply increase the position all right so with this very simple code we should be able to add a quad whenever we should and then that same quad won't constantly be moving up into the right on every single frame so let's try okay here we are now if I shoot and there you go there's the quality it gets spawned and it's moving up and away and shoot some more and every single one of them is independently being moved away all right awesome now let's play around with the rotation and scaling to make sure that it all works all right so here I just had a two fields one for the quantize and for the rotation and again we're doing the same thing increasing on every frame so let's see if this is working okay here we are and let's shoot any of their yo the quad was in sin she ate it and it is constantly increasing in size and rotating on every single frame awesome and again we can spawn a bunch more and yep each one of them is independently being rotated and increasing in size okay now these shells are actually not supposed to be squares but rather there's some rectangles so let's do that now so here we should also modify the add quad in order to receive a starting point for the rotation and a vector three for the quad size and we simply pass it in here okay so now in order to make it a square let's simply put point five on the X and one on the Y and let's see what this looks like and here we are and click and there you go as you can see it is not correct instead of a rectangle we got a square that is slightly rotated so here when we set the vertex positions we need to do some different math in case the squad size is skewed or not okay so if it is skewed we have to apply the rotation only to our actual rotation and then we multiply it by our quad size impacting for each vertex so minus minus minus plus and so on so I need to do is come true on the skew alright let's test here we are and shoot any of there you go we have our sprite displayed as a rectangle now let's apply rotation and scaling and here we are and shoot any of there you go it is rotating in scale okay awesome now instead of always displaying every single quad as an entire texture let's make sure we add some proper UV for each specific texture so over here in our script let's go up here to the finest truck that we're going to set in the editor so we have a struct for our particle UV pixels and we have two vector two ends one for the zero zero so 11 left coordinate and one for the 1 1 so the upper right corner so essentially we're going to input pixel coordinates for the 11 left and upper right and then to UM be automatically calculated into normalized values so in here let's make a serialized field of an array of particle UV pixels and to make it show up in the editor all we need to do is mark this struct as system dot serializable okay now in the editor in here you can see that we have a field for the particle UV pixels array and for surgeon let's just put 1 so here we have one element Aereo for the UV 0 0 & 1 1 & 4 now let's try displaying the entire texture so here is the bullet shell casing as you can see it's a simple 10 by 20 texture so here for 0 0 0 0 0 and for the 1 let's put down 10 by 20 okay that's our field setup so now here our script has all of the UV data inside this array but the mesh works with normalized valves so we need to convert them from pixels into those normalized values so here making a nice internal struct this one contains vector 2 wins for the UV 0 and UV 1 and these won't be the normalized values so now I have a array of UV coordinates so let's fill this out okay so here we have our conversion we go into the mesh renderer in order to grab the material then from that material we grab the texture and with the texture we grab the width and height and then with that we create the new UV chords so we take the values in pixels and divide by the width and height in order to get the normalized bounce so at the end we can set the UV chords array to be this list without alright alright so essentially with this design here where we have two different struts we have one that is a very nice userfriendly structure that we expose in the editor so we can input pixels which are easy and then we have our internal structure which converts those pixels into normalized values that we can then use to run our code right so with all this now we just need to apply this to our quads so when we add a column let's also receive an int for the UV index okay now we go down here and now instead of showing the entire texture for everyone let's apply it down so you go into the UV court array and access the UV index so this returns a UV chords all right so here we're applying everything so on the lower left corner we have the UV zero zero for the upper right we have the 1 1 and for these we calculate the new movies ok so with this we should now be able to define which part of the texture we show in our quad ok so we should be able to see the phone quad just like previous on let's click and if there is everything some works great all right now let's see the proper use case for all of this here instead of having this material let's make a material of the pod which as you can see is a spreadsheet with various stages so here on let's drag the bullet material and here you can see the texture is 128 by 16 so if we put that value 128 by 16 and we click and again we still see the exact same entire texture but that's not what we want so let's stop and instead let's make it just 16 by 16 and now we shoot and there you go now we can only see the very first particle so here just film it up with all of them alright so I've been put all of the pace on coordinates for all of the various elements and now here for testing let's choose a random UV index ok so you hear around let's shoot and there you go there's one more particle and there's another one and as you can see it's different and that one is different and different and different and different so just like this we can input our UV coordinates and they get calculated automatically and used based on a certain index all right awesome ok so with this working now let's make some scripts to hand on the blood and the shell particles so here let's make a new script call this the shell particle system Handler and now here this one already has all the coordinates for the bullets so let's leave this one and set duplicate this what's going this new and each on particle system Handler and drag this script on to it and drag the correct material all right so here we have this one with the correct coordinates the correct material and this script and for now this other one is disabled we will deal with the pallet later so now in this script we're going to have a logic for every single shell so let's start off with a function to spawn any simple shell let's also make this a singleton class so we can easily call this function alright so now we want to use this function so let's take our testing code away from the particle system and into a proper testing class so here we just make in you see sharp script code our testing let's make a testing game object drag the script onto it okay and now here let's who are testing so let's copy all this ok so now our mesh particle system no longer contains any references to the player or anything other than the particle system and here on the testing we have a reference to the player and we are subscribing to the on shoot event so in here let's s our shell so we go into the shell particle system handler we access the instance and we call spawn shell so here we pass in the position and a direction okay so this simple now let's deal with this here on the shell system handler let's create a class that will handle a single shown not only constructor let's receive the position and direction let's also receive the mesh particle system ok so when we create a single we go into the mesh we call our add quad function so this will return our private in for this quad index all right so we instantiate our quad with our position rotation and quad size and then we're going to have a update function and in here we're going to handle our movement so we update the position updated rotation and update our quad alright so this is our single class which represents a single shell so now we can go back up here into our main class and we're going to have a list of single and now on this one we have a private void update and on our update we're simply going to cycle through all of our shells and we simply call the update function ok that's it now in here all we do is go into the single list and we add a new single and passed in the position direction and the mesh particle system so just like that we have this very nice class which takes care of everything related to the shell particles and all we need to do is call this function which we are doing over here in our testing script so we are spawning shells whenever we shoot with our character and they won't be moving up and to the right so let's test ok so here we are let's shoot and there you go there's a particle it was correctly spawn and it's correctly moving all right all right awesome so now we have everything so working like previously except everything is encapsulated into its own nice class now instead of just making them we go up into the right let's make it based on the rotation of the player okay so here I calculated each direction based on the two values that this event fires so it triggers the shoot position which is where we click and the gun endpoint position so using those who we can get the shoot Direction then here just stop setting it backwards so it doesn't spawn the shell exactly on the gun endpoint position but rather more towards where the weapon should be fired and then we have the shall move direction which we just take the shoot direction and we apply a negative 90 degree angle so let's see this so here I am and if I shoot if there you're the particle and leftright from there and went upwards so like this it's going up and then it's going to the left and it's going down just like that right great so now that we have our shells correctly moving away let's make them stop after a while so here just had some slow down speed code okay so here I just had the move speed field then we increase the position by the move speed the same thing with the rotation and then we simply slow down to move speed on every frame so the particle should move quickly and then slow down okay so we are and shoot any of there we go the particle goes away and then stops so shoot a bunch and there you go just like that all right now just add some randomization okay so here we are and I shoot and shoot at same place and there you go I had some randomization on the angles as well as the move speed all right awesome so in here we are spawning shells and we are moving them and now when they're done moving let's update and remove them from our single list so here let's add a public bone is movement complete every similarly return if the move speed is under a certain amount so then we go all the way up here we call update all right and then we ask if the single if the movement is complete then we want to remove it from the list so it's convert this from a 4h into a four all right so we are update we call is moving complete and then if it is complete then we want to remove it from the list so you remove it and then go backwards on the index all right so in here just for testing let's add a debug log on the single list count so you should be able to see this increase once the shell is active and decrease as they stop okay so here we are and on the logs you can see that we have no shells active so now we click there we go we have one and after a while it stops and there you go zero so keep shooting a bunch of them are active and now after a while you have there you go zero active so just like that our code is now spawning and cleaning up after itself awesome so just like this you can already see our very nice particle mesh system so they are ongoing and they spawn and they stay there so I can move over them and they remain in there so we have the code working for persistent particles but we can also use this for particles that disappear so over here I have a nice third spreadsheet so these particles are meant to disappear so here on let's duplicate the shell particle system and this will be our dirt particle system okay so here I have the other particle system handler on a new game object using this script with a dirt material so now here on the system panel let's go into this single and let's add the behavior for the dirt inside of the shell the main thing we're going to remove is the rotation since we don't want the dirt to rotate and just like that okay now on testing so here we can ask the character if it is moving and if it is moving then let's go into the dirt particle system and one access the instance and let's rename that function in order to be not spawn shell so in here just rename this into spawn dirt so we spawn it based on the character position and with direction of the character that I can't move direction x 1 so there it won't be kicking backwards okay so just like this we should be able to see our third sprites being spawned let's see okay here we are and move and there go the dirt particles are indeed being spun now they are way too many since it's going one for each frame so let's reduce that okay so here I've made a nice dolly function we simply store the next spawn time on a float and whenever we spawn we increase that so let's see okay so no particle since we're I don't now move and there you go the particles get spawned and they no longer go exactly one per frame right awesome however again these are guns are not meant to be persistent so let's see on with that in here we have our code for icing on dirt particle okay we check it move incomplete okay and then let's also add a Pollock boy let's call it destroy song and we're going to destroy a particle is actually very simple we simply go into the mesh particle system and we're going to make a function called destroy pond and we pass in the quad in X okay so let's make that function so here we are in the mesh particle system and let's go make a public void destroy quad we receive an int for the quad index in order to destroy it it's actually very simple we simply complete the vertexes so we simply based on the quad we modify all those vertexes in order to go into vector 3 0 so essentially we reduce the entire size of the quad so nothing is visible okay so we have the destroyed quad now back into the third particle system and here we simply need to call this and let's go on the way up here when movement is complete we call the single only to destroy itself and remove it from the way alright so let's see if they vanish ok here we are let's move and there you go there's the particles and after a while if there you go they all start to vanish so after a while when they stop moving think I'm gonna vanish right awesome so we now have disappearing particles now here if we look at the dirt texture you can see that it's actually a spreadsheet it has various frames of animation so let's make sure we add that so first I need to add all of the pixels in here on the mesh particle system all right so I have added all of the pixels for each single fried sheet position on the entire texture and now here the way that we set up our mesh particle system makes it very easy in order to do frame animation in here we already receive the UV index so all we need to do is actually increase it so here on the dirt let's go into our single in order to modify the behavior in here so first we store a private int for the UV index and here we start off at 0 all right so here I just added some simple flip book animation so we have a timer and the timer max so in here we're going to run every 10 frames per second so whenever the timer goes past the max we simply reduce the timer so here that one we reduce the timer and we increase the UV index and that's where we pass on the update quad so that's it very simple then let's test okay here we are and move any of there you go as you can see we have our nice dirt particles being spawned and they are being nicely animated on a framebyframe basis all right that's the effect awesome so here we are with a small prod and pure particles and there you go there's a nice effect all right awesome now one thing we still need to fix is in terms of performance looking at the stats you can see how it goes out massively every time we increase so just like that the more particles we have the much higher this and we also need to fix over here the bouncer ego once we go up here they are vanished that's because the bounce so let's fix both those things first for the bounds we can simply go into the mesh and set the bounce and here we can simply put a very massive size and just like this if we go all the way up here there yo now the mesh and all other vanishes and works all the time and ever so you can go down here shoot and all the particles are still up there and down there alright great if you want you can calculate this into a proper bounce but for most cases just making it huge won't make it work so now for the performance the biggest issue is whenever we update a quant we are uploading it to the mesh so if we have several quads being updated on the same frame we end up calling this and passing our own welcome arrays into our mesh multiple times per frame that is obviously very wasteful so let's make sure we only do this at most once per frame so for that we can go up here and let's make a red phone and call this update vertices update TV and update triangles okay now let's go down here and make a prayer void update and our update if we have update vertices then I simply updating mashedup vertices equals our vertices all right just like that do everything for all the others all right there it is now let's also make sure this runs at the end so instead of updating let's put it on late update and now in here whenever we modify something so on destroy pawn let's set the update vertices in to true then here when we update everything instead of calling this lets update the vertices update the UVs then we also update the triangles so just like this we simply set bones if we wanted we could then break this into three separate functions to update the vertices the UVs are triangles but for now let's leave it like this so we just set it to true and then at the end of the frame if it is true then we update them if not then we'll leave it alone all right so just like this we should greatly have improved our performance and here if we look at the stats previously we were going all the way up to eight milliseconds and now if you move there you go only two and we can move and shoot and a whole bunch of particles and there you go it's now much better all right so now I'm just going to add all the other particles the same way that we have these two all right so I have implemented all of the particles so first of all we still got the shells very nice then we still got the dirt and you can already see the footprints so after some time the footprints get spun there you go they stay there and then we have the bond so whenever I shoot them if they're go somewhat particles going out and when I kill him and it spawns a flying body and there you go he flies away and the flying body spawn some more particles so just like this we have a whole bunch of types of them being spawned and after all the movement ends everything stays nice and stable and they stay on the map forever so just like this we have a very cool persistent particle system awesome however in here we still have two slight issues first is simply the amount of quads in here we defined a max what amount of 15000 so as soon as we go past that in here we are no longer going to spawn any more quads we could solve this by dynamically creating a new mesh every time one of them is full and the second problem has to do with sorting so over here you can see someone now it spawned some shell particles so over here is the enemy now behind them I'm going to place a whole bunch of shell particles there's always some footprints and stuff okay so now when I shoot him and there you go over what particles being spawned and just like that you can see that the blood particles which respond afterwards actually show up behind both the shells and the footprints the issue here is because we have various separate meshes so one of them has to be on top of the other so in order to make sure that new particles stay on top of other particles we would need to use a giant texture appleís that contains both the bullets the footprints the blood and anything where we want place them all inside a giant texture Atlas and use a single mesh with that giant texture Atlas to spawn every single one of our particles so if we merged all of this in the same mesh it would solve our sorting issues so those are the two issues that we still have with this class this video is already super long so let me know in the comments if you'd like to see a video covering the solutions to both those problems and expand upon this further now in the future is something that I really want to do is take this whole system and convert all of it into superfast ECS so stay tuned for that as always you can download the project files in utilities from unity code monkey comm subscribe the channel for more unity tutorials post any questions that have in the comments and I'll see you next time you