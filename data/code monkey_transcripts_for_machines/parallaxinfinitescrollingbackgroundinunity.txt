in this video we're going to make a parallax background effect in unity that also repeats to infinity it won't be a simple script with a single film that we can add to as many backgrounds as we want to achieve our desired effect let's begin hello and welcome I'm your code monkey and this channel is all about helping you learn how to make your own games with nf2 torrents made by a professional indie game developer so if you find the video helpful consider subscribing okay so this is our go over here I have a simple platformer character and you can see the background now as I move if there you go there's a very nice effect where the background is pointed into different layers and each layer moves a different amount so as I move left right or jump you can see them all moving at a different amount for a really great effect giving the illusion of 3d we're also going to make the effect deal with background scrolling so we end up with an infinite background so as I keep moving the background will never ever end you can see here in the editor there's my camera preview and here I can move the camera and no matter how much I move the camera you can see all of the background sprites being moved alongside it so they look seamlessly and I have these two sprites the trees and the mountains also perfectly repeating on the horizontal axis and then I have the clouds which you repeat horizontally but also vertically so just like this we have a floor in there and we can go anywhere and our visuals always look perfect alright so this is our goal let's get to it okay so here I am in my staring scene all I have is some basic platformer movement with no background alright so first let's add our backgrounds over here on the project files that I have these background textures essentially each one will be one level of the parallax effect so let's drag them onto our scene okay there they are now let's sort them okay so they are all basically sordin so the trees are on minus ten then behind it we have the mountains on order in layer minus 20 and then we have the clouds right on top now the one missing is the background now this one is just a simple image there it is now this one is meant to be a simple image I will not have the parallax effect so since we don't want this one to move at all we can simply make it a child at the camera and let's also make sure that these sprites that we dragged our on Z of 0 alright so far so good over here we have our sprites let's run our game and if there it is and we have our character right here then behind it we have the trees the mountains and over there the clouds alright so everything is working correctly so far now let's make our script so a new csharp script let's call this the parallax background and we're going to add it to our three backgrounds so just add them on there okay now in here the way the parallax effect works is essentially we're going to move the background alongside the camera but a bit less for each level so let's make a film to have our camera transform now here we can make this a reference that we could drag in the editor but for most cases we're going to be working with main camera so we can simply grab it automatically so make a start function and in here we're going to simply set the camera transform to be on the camera dot main all right so they're days we automatically capture the main camera now let's make an update and in here we need to figure out how much the camera has moved so that means we need to store the last camera moved position so we store a vector3 for our camera position the last camera position then on start we set it to where it is right now so the transform position okay and now here on our update now we know the previous camera position and we can find out the current camera position so if we do some math we have our Delta movement so just like this we have how much the camera has moved since the previous frame and in order to make sure that this runs after the camera has moved we can run this on the light update instead of just update okay so we can simply take this movement and add it to this background transform position so we modify transform that position by our delta movement and then afterwards we need to make sure to reset our last camera position to the current camera position all right so just like this we should be able to see our background correctly following the camera let's test okay here we are now as I move and if there you go the background is correctly following the camera so it doesn't look like there's any movement whatsoever alright so far so good now obviously we don't want all the backgrounds to follow the camera perfectly so here when we add our Delta movement we're going to multiply it by a certain value so we have a certain effect multiplier and we multiply it by our Delta movement so in this case with 0.5 it means that this background will move half of the movement of the actual camera so if they can remove steny and it's this one will move five lets s okay here we are now as I move and there you go you can see that it is no longer perfectly following the camera but lagging a bit behind all right awesome here it is our very nice effect so just like this our effect is working great with a nice parallax effect both horizontally and vertically okay so let's go back to the code in here instead of hardcoding a effect multiplier let's make it as a film that we can easily edit so we make a serialized film for our float for the parallax effect multiplier and we simply use this one okay so now we can go into the editor so here we have the tree selected and there it is there's our field so let's put the trees at point four and then the mountains which are behind it let's put at point 6 so the trees should look like they're moving more than the mountains let's test okay here we are and as I move and yep there you go the trees are moving a lot more than the mountains are so just like that we already have very nice parallax effect let's also add a little bit on to the clouds any of their it is we have our trees moving a certain amount the mountains another mountain it clouds another amount so just like this we have our effect nicely working the backgrounds are moving alongside the camera but by different amounts giving this very cool illusion right awesome so just like this our effect is working great with a very nice paralyzed effect both horizontally but also vertically however for a lot of games it makes more sense and have a different effect amount for the horizontal and the vertical movement some let's go into our script in here we're just using a float and multiplying it by D Delta movement and we can simply instead use a vector two so here on let's apply our multiplier to the X and the y okay so just like that we should be able to have independent values for the X and the y let's see here in the editor now we have a vector two for our effect multiplier so let's set it all right so here I've set it so the trees have point four point one the mountains have point six point three and finally the clouds have point five point five let's see okay so here we are and if we move mutton right yup the effects on works exactly the same so the trees move a lot more than the mountains and if I jump and there you go now we have a much different vertical movement on the parallax effect being applied so previously we would have an issue where the mountains will move too much and we could see the background behind it and now we don't have that issue since we have the parallax effect on the vertical axis as much smaller than any horizontal one so just like this here we have a really great effect that we can easily modify right awesome so like this the effect is working correctly however let's try to move to the right and there you go we have our issue right there the mountains simply end so let's make our script automatically handle infinite backgrounds as well for that we first go here into our hierarchy and here for our sprites instead of having them be on the draw mode simple we need to swap out in to be tiled so just like this for example let's unlike the mountains put them on tile and there you go the mountain ends right there and if I keep pushing it there you go it repeats very nicely so just like that it keeps going on forever so just like this we can drag our size to make it repeat on the left and on the right and now the way we're going to have an infinite background is we need to make it at least the size of three screens so just drag it pretty much like this and do the same for all of them okay so they are sized to match at least three screens now the reason we need three is because as we move to the right as we go past the texture size we're going to shift the entire texture to the right by the exact amount so when we reach one of the sides the texture will simply move and then we reach again moves again and so on and so forth so the only complex part to do with this has to do with the texture size okay so let's make our script handle our logic so here the first thing we need is to figure out our texture unit size so to figure out that let's grab our spread runner so here we have our sprite texture as well as the pixels per unit okay so we grab our sprite from the sprite runner we grab the texture on that sprite and then we calculate the texture unit size by dividing the width by our pixels per unit so let's just rename this put an X on the end to make sure this is only the unit size on the X then later we're going to work on the Y so here on our late update after remove this transform we need to test the difference between this transform position and the current camera position so if the difference between the camera position and this transfer position if that difference is bigger than our texture unit size then we've moved past by more than our texture size so we can relocate our transform and make it more seamless so what we're going to do is modify our transfer in that position to be based on the camera position and in this case keep the same Y position all right so as the camera moves away we replace it back on a new position however just like this it will be exactly on top of the camera which might not be exact so we also need to come late our offset position so we get the remainder of the position based on our texture unit size then we put it on top of the camera and let's our offset okay so this might seem complex but it all makes sense when you see it in action so let's see here in the editor and let's just try out moving the trees so let's disable the clouds and the mountains and in here let's make sure we set up our texture in order to be able to see the seams so there it is just like that there it is so we won't be able to see this and then it shouldn't look exactly the same as the texture moves for let's see okay so here we are there's the game view and the scene view and as we move forward you can see the texture moves or okay and now as we reach the end and we should be able to see the seam okay there this now as I pass it it should be able to have the texture teleport to the right however when it does the seam should falsely match perfectly so we should not be able to see where is on this tree snap to a different position so let's see as I move for there you go there you go move a bit more and there you go examine like that so this one did not seem like it moved but the whole texture moved so I can keep going and you can see on the scene view as we reach the end it snaps forward and there you go just like this we have a infinite scrolling background so right now we're only the only with the positive and if we go backwards you'll be able to see that it does not snap so there you go let's fix that the fix is extremely simple since here we're dealing with position differences all you really need to know is do a math dot absolute to make sure that this one is positive then we test again see text your unit size then the offset will be positive or negative and everything works so let's test ok here I am let's move to the right and we'll be able to see the seam and then if it snaps perfectly into position now go in to the left and we are reaching the end and as we reach the end that one is empty and if there you go it correctly moved and looks perfect all right so now obviously we should not be able to see the seams so in order to do that all we need to do is increase our pride size so back in the editor that is why we need to have this be the size of more than three times our screen size so you're in the inspector we have a width of 800 and let's just put 2,000 and set all right so there is that's more than big enough in order to not be able to tell the seams so let's test ok here we are with the game view in the scene view let's move to the right and keep going and after a while if there you go the textures snapped into a new position but we could not tell difference from the game view so as you can see on the game view it always looks perfect and you can never tell that something has changed and if there you go example like that so here on the scene view I can manually move the camera so as I move to the left you can see it constantly no matter where I put my camera it constantly snaps into position and it's always visible all right awesome let's enable the other textures ok here we are with all the textures and the parallax effect is working now moving really fast and I can keep going and going and going and there you go the textures never end and we can keep going on for infinity alright so here it is and it looks great we can pause and look at the scene view in here and we can move the main camera in there you go it constantly moves no matter where I place the camera the textures are always behind it alright awesome so this looks great and in this case this is all we need we have it being infinite on the left and on the right side however if we move up and down there you go we don't have any infinity working so in this case we don't need it but in order to make our class nice and robust let's make sure we deal with that as well so here it's very simple we pretty much just copy the exact same logic okay so here it is I pretty much just duplicate the exact same logic so we have a unit size on the X and on the y wonder why we simply use the height instead of the width and then we have the exact same thing working except all of them on the Y so here we are and now the mountains and trees let's just hide them since these are not supposed to be repeatable and let's make sure the logic works with our clouds so in here let's make it big enough in order to not see the seams and there you go just like that now let's test ok so here we are with the camera and now if I move up and yep there you go the sprite changed position and we cannot see the seam at all on our give you so there you go now we can move the camera anywhere on the X on the Y and everything looks perfect there you go the background is always there and always perfect okay so here I just added two more bullying's for infinite horizontal and vertical and here we just test those in order to move it or not and here I made a clouds infinite on the horizontal and vertical but the mountains entry is only infinite on the horizontal so here is the camera and if I move around from left to right you can see over there on the preview it looks very nice everything never ends so just like that and if I move up if there you go the clouds repeat but the other two stay down there so if I go down here yep I'm on the floor and over here I'm all the way up here so just like this this effect works perfectly if you had a platformer that was constantly moving up so this very simple script is very versatile and can be applied to whatever type of parallax effect best suits your game and again here is in game I have my character I'm moving him around and all of the textures are moving at different speeds so we have currently the foreground then we have trees and we have the mountains and the clouds and I can move an infinite amount on either direction updown leftright and everything works perfectly as always you can download the project files in it only is from in Tacoma com subscribe to the channel for more unity tutorials post any questions you have in the comments and I'll see you next time you