hello and welcome I'm your code monkey and in this video we're continuing to check out the inner workings of the task system in Batam Riau tycoon we're going to take the task system we have created so far and figure out how we can use multiple task systems with multiple task types let's begin so we previously made this scene in here we have a complex task that is being executed by the worker the task is to take a weapon to a weapon swap the task can only be executed if the weapons mod is available which is represented when this is an inquiry now the weapons mod itself destroys the weapon that is placed there after five seconds just so it can always keep being empty so if I click on left mouse button I spawn a weapon he occupies that and he goes there now let's move my way just so he can see and spawn another one and another one and when that one vanishes he where I was the other one so he's validating the task to take this weapon to a slot and he only executes it once that slot is available all right so that's our fully functioning tasks system so far the game is still in development so if you like the concept go to the same page add it to your wishlist and phone let's look at the tasks system so in this class in here we have all of the tasks system code we can add can add tasks request tasks queue tests and so on and the main thing we have in here is the task type so right now you can create a task system and it can work with any one of these tasks if you want to add another task to the system it's quite simple we just had another task down here and everything works but if we do things this way then after a while this class won't become huge and contain tasks for completely different logic systems that's not very clean code so let's modify the task system to keep the task list handling in here but the task types defined elsewhere so let's first of all rename this to be called task base since this will be the base task class for every other test we want to create and up here on the task system we're going to make this class with a generic time and we're going to call that generic type t task that won't be the type of task where t task must extend task base so let's copy the task base outside and the same thing with that task so let's copy it out here now again in here let's rename all references of task base in here to be of type T task this is so we can create a specific task system the specific tasks class so let's rename all this alright so we now have the task system set up to use a custom generic class we're going to apply the same thing to the queue task this will also receive 80 tasks where t task implements task phase and here we're not using task base rather t task and down here when we create a queue task is a type T task and same thing in here all right so we have successfully converted the entire task system to now work with generics you'll see why this is important in a second so now we want to take these specific tasks away from the task system so let's go into the game hang on and down here let's make a public class we're going to call it task we're going to copy all of these specific classes that we created previously they're all going to be defined in the game handler class instead of in the task system itself and here all we have is an empty task based class for anything we want to apply to every single task type so in here first of all we need to define the action which is in the system namespace all right and now as you can see the test system has an error because we need to use it with a generic and the generic type we're going to use is a tied task that is defined and here and the type task of course needs to extend the CM task system dot task baits and all of these instead of being of type task base URF type task which obviously itself is a type task base so go up here and we need to set on with these references all right so we now I have completely modified everything to use this test type that is defined in this class in here and now as you can see this all implementation is defined in here instead of being in task system the test system itself does not care how the tasks are implemented he just cares that they extend that space and everything works with it so if you go into game handler we got the task types defined in here and they are executed the same way as previously alright so it says and everything should be working exactly the same as before all right here he is and you're peeking so move it to position I can click he goes and occupies that and everything some works perfectly so everything still works the same but now we have the test types completely decoupled from the task system itself so now you can see the real purpose of doing all of that which is so we can create another task system with a different test type we're still going to have our first worker executing the first type of tasks but we're going to spawn a second worker that won't execute a different type of tasks the second worker won't grab a weapon from a occupied weapon slot and simply take it away so let's go up here and set things up for that so let's create the task that the transporter worker will execute so let's go down here we have this task for the first task system and now let's make another public class call it transporter task is going to also implement a space so in here let's make a subclass following the same pattern that we defined up here and we're going to call it take weapon from slot to position and this will extend the transporter tap inside we need the information that the worker will require so first of all right there three for the weapon slot position then we need a polling factor three for the target position then we need a public action to grab the weapon and a public action to drop the weapon and the action will take the work of task a i as an are you okay great so the transported test type is now set up now we can go up here to create the second task system so here let's say the transporter task system instead of being a test system using the task type we're going to create that system using the transporter task type and down here we're going to instantiate it the same as before alright so as you can see we got two different task systems working with two different task types this system will not accept a task of this type and this system will not accept a test at this time this way our code is very clean and nicely separated now obviously we need to create a second worker that will execute the second task types so in order to do that we need a worker that won't execute different tasks so let's duplicate our worker task AI so let's name this one worker transporter task AI ok so here we have a duplication of our regular worker task AI and now in here as you can see this worker will not be working with this type of task for rather the other the transport type of task that's a test system that he will actually receive so if you go down here when you request the task the task will not be of this time for editor of the transporter task type and you will not have these types as a possibility but rather the transporter task dot tape weapon to slot from slot to position that is the only time that it can now execute and we're going to copy that in there then let's make a function to do that we can remove all these and essentially we're going to do the same as this one so let's name this with this alright so in here we move to the weapon spot position we grab the weapon then we move to the target position and we drop the weapon now when we wrap the weapon as you can see this is an error since we have to use this script so let's go in here on the task type on the definition in here on the action instead of using a worker Taski eye we're using a worker transporter task AI and now in here everything is working so this one receives a transporter task and executes it exactly okay great and now on the game handler let's actually create that second type of worker so we're going to create a worker as previously and let's put it on 550 yeah sure and set up adding the component of worker task AI we're going to add a transporter task AI so this one let's copy and put it in here and when we set it up instead of giving the first task system we're going to give it the transporter task system so let's store a reference to that for the worker transporter task AI and this is what we're going to set it up we need transport there task system alright so the second worker should now be working we are currently not adding anything to this task system so the second work should just stay I don't but let's compile and see if everything is working okay so there's the worker and if I click I can still tell the first worker to move but the second one since he's working with a completely different task system he's not listening to the first task system okay great now let's actually set up the task for the second worker so let's s the second worker only so we're going to spawn a weapon occupy this weapon slot and then create the task for the second worker to take it away so let's go down here into the weapon slot and let's remove the code to automatically destroy since we no longer need this alright good and up here let's spawn a weapon a pistol game object some light spotted right here and we're going to tell the weapon slot to set the weapon transform to this one so as soon as it starts it won't be occupied with this new only created pistol and let's put it on top of there okay right so now as soon as we spawn and as soon as we set the weapon transform when we do that in here now if this one if this is not known then that means something has been added to this weapon slot so it's in here that we want to create the tasks that won't tell the transporter to take whatever is in here and take it away so we're going to create a transporter tasks that take weapon yep that's the task and we're going to create that task which will then be out to the transporter task system so let's go up here and actually make this a static so we can access it from inland inside there so now let's fill out the information for this task for the weapon spot position it's this get position for the target position let's simply push it somewhere to the right so get positioned towards new vector3 and let's push it somewhere on the right for the grab weapon we're going to do very much what we did in here so let's copy this code to keep things simple so a difference being that it doesn't take a worker tasks a ride but rather a work a transporter task AR and for the game object that we're going to move it won't be this weapon transform which is the one that is currently inside so we're going to use to set the parent to that worker transporter and to set the parent back to know now we know I'm gonna need to arrive there anything is wrong okay just like that great and when he does grab the weapon that's when we're going to set this weapon transform back to no alright so we should now be correctly adding a task to take the weapon away whenever a weapon is that so when you call this if you call it without a noun that means something has been added to this weapon slot and we're going to create a task to take whatever is in here and send it away we're going to send it somewhere on the right and we're adding it to the transporter task system and we have this worker the secondary worker the transporter worker is the one listening to that transporter task system alright so let's see if that is all working all right there's the second worker he's going there he grabs it you can see that it's now empty and he's taken away and there he goes okay great so the second worker is working perfectly now let's set it up so we have both workers working at the same time but each of them doing different tasks all right so now in here and let's simply stop it from being occupied at start so at start the weapons watch should be empty and when we press the left mouse button a pistol should be spawned and it won't kill the task to go to the slot and so on and so forth so now both of them should be working at the same time alright as you can see I got my two workers in here I have the first worker and the transporter worker in middle I have a weapon slot now when I click the left mouse button he should spawn a weapons right and this worker won't take the sprite to their place it the weapon in the weapon slot as soon as it's dropped in there this one won't grab it and move it away so let's see if all of that is working I click and yep that one is occupied he's going as soon as he drops this one receives the task he grabs the weapon and he's moving away he drops it and he's requesting another task so I know they're grabbed drop down and is doing the same and I can spawn multiple now that one is waiting now that one is empty he goes he drops it and so on and so forth ok great so now let's add multiple weapon slots to see the whole thing in constant movement alright so let's go up here make a couple more weapon slots we're going to create the weapon slot place instead of just having one so it's the weapon slot looks like this all right so we are now adding multiple slits to the weapon SWAT list and in here when we are when we are looking for a valid wasn't slot so let's go alright so we are going through all the weapon slots in the weapon salt list if we find an empty one then we send them as normal if not we keep searching if we go through all of them and not a single one of them is empty then we simply keep waiting all right so everything else should be working perfectly so let's test all right here are the two workers with the weapon slots in the middle and when I spawn he goes and he's gonna drop in that one when he drops no one goes and he takes it away somewhere to the right and he drops it in there okay great so it's working perfectly fine with just one now let's try spawning multiple pistols so there you go spawn spawn spawn and the tasks are automatically be queued whenever something is empty so let's find a couple more and as you can see he goes he drops him in there and that one when something is drunk he receives a task goes he drops that one and now you can see that he's waiting because I want them are occupied when that one grabs it's empty grounds he goes and he drops ok great so we have a pretty complex system on working perfectly using two different task systems this worker doesn't care doesn't know that someone is taking something away he only knows if this one is occupied or not and this one the same thing doesn't know if someone is grabbing weapons and dropping them in there no one knows if the weapon slot that he wants if it is empty or occupied if it is occupied he simply execute this action and takes it away so we have two systems working in tandem but each of them is completely ignorant of the other one so the code is very nice and cleanly separated so this is a very clear example of how to use the test system to easily create very complex behaviors where different workers are doing different things and as you saw with the creation of the second task type we didn't need to touch the task system at all all we need to do is set up the task types how to spawn the tasks and how to execute them everything else works flawlessly so there you have it we modify the task system to keep it clean and decoupled from the specific task types we can now easily make multiple tasks systems that work with different task types and every different tasks with different executions so in this series we cover the creation of a task system which is an easy way to execute specific tasks you can see the system in action in Batam Riau tycoon it is used for executing all the various tasks that you can see in like taking weapons to their spawn positions cleaning up the arena or grabbing a weapon from the workshop a time slot repairing it and sending it back to the Adam slot so it can be transported away by transporter units again the game is still in development so if you like the concept you're the same page add it to your wish list and phone I hope you enjoy the series and learn something useful from it now go ahead and apply it to your own games if you have any questions post them in the comments and I'll do my best answer them subscribe for more videos and I'll see you next time you