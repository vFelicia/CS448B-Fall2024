hello and welcome I'm your code monkey and in this video we're going to learn all about transform parents and children let's begin so we previously covered the various ways to move rotate and scale a transform now let's see the various interactions between parent and children as I mentioned in the previous video the inspector in here you see the unlock own values so the parent sprite in here is on to 00 and the child is on 1 0 0 but the global position is on 3 0 0 again always keep in mind if you're working in low composition space or the global world position space so let's look at it through code so here I have a script running on my parent transform so first of all let's grab a child reference in order to do that let's set up a transform child transform a reference which we're going to grab through transform find our child transform this is the name of the child transform that we want to grab the reference which is named channel transform so let's print both local and world positions let's do a debug down log of the chunk transform dot position which is the global position and the local position which is the auto composition and after we do that let's set the child transform at position 2 new vector3 on 0 0 0 and see where he ends up so as you can see in the console the world position was on 3 0 0 which makes sense since the parent was on 2 0 0 and each child on one so put them both together and the child is on world 3 0 0 the unlocking position is 1 0 0 and at the end we set the position the global position to be on 0 0 0 so he ended up in there which again if we select in here we see the local values and the local is on minus 2 since it's Friday zone 2 that means it is indeed on the global 0 0 so always keep in mind what space you are trying to place the transform the same thing applies to the rotation so in here let's print out the humor angles and then the local Euler angles and then let's set the global Euler angles back to 0 so let's see how that goes first let's rotate the parent 90 degrees as you can see the spaceships are now pointing upwards so let's see the code right in the console as you can see the global Euler angles show that the child transform is rotated 90 degrees which again since he was matching the parent it was indeed 90 degrees but the unlock own was at zero and then we set the global to be at zero so that put as you can see the rotation is now at zero which means the in local rotation is on minus 90 so if you're working in your game in spawning units I would suggest you only move the parent game object otherwise things yet very messy very quickly so let's look at how you would manage local and global world spaces so first of all let's change the parent name to be spaceship and inside instead of having another spaceship let's have something representative of a health bar and instead of the spaceship sprite let's put it a basic rectangle like that okay let's reset the rotation of the parent spaceship back to zero to make things simple and essentially we want to move the health bar to the left side but let's do that through code so in this case I would suggest that the only things you change are the health bar on local position and the spaceship world position so you would never change the spaceship local position and you would never change the health bar world position that way you keep things nice and simple so on start let's first grab a reference to our health bar transform and then let's set the health of our transform local position to new vector3 and in this case let's put it on minus 0.3 F and zero zero right so let's see if that positions it correctly and yep there you go the health bar is behind the spaceship great and now an update and let's move the spaceship just make sure that the child and parent both move in tandem so in here do the transform dot position which again on the parent we want to move the equivalent position and we're going to set it to transform that position and increase it by new vector3 let's say point zero one and zero zero just move the spaceship to the right yep as you can see the spaceship is moving to the right side and the child health bar is positioned correctly and does not move great all right so now let's dynamically spawn a child object so on our code in here let's first create the new game object let's call it child game object and pull me a new game object let's give it the name child game object and now in order to set the parent we do child game object our transform dot cept parent to the parent that we want which is this transform so in here we are creating a brand new game object and then we said that game objects transform parent to be this very transform so let's run the code and see how our hierarchy yep there's the spaceship and there's the new only created game object you can also cycle through all the children of a transform you can do a very simple for each transform child in transform and this will cycle through all the children in this transform so might simply print out the transforms to do a debugger on wild child so that should print out our health bar and then the child game object let's see yep there you go health bar of type transform and channel game object also of type transform you can also cycle through the children with an index so do a four in e equals zero in less than transform dot child counts I plus pause so in here instead of using child we use transform that get child at the index so high and again let's run the code and should say the same thing as previously yep there you go we are still cycling through all the children of this transform one thing that is also very useful especially in setting up your UI is to modify the sibling position the UI source of visibility based on the hierarchy position so objects below in the hierarchy show on top of the ones before so in here and let's make another game object let's duplicate the health bar and put it on different color just so we can see the visual representation ok so if we run this you can see on the hierarchy we got the health bar the health bar and then the child game object so now let's go through code and set the health bar to be at the bottom so the way we do that we pick up the health bar transform and execute the function set as last sibling and we're going to execute this after we spawn the child game object yep as you can see first we got the blue then we got the child then we got the health bar you can also do the reverse so instead of using this one let's set the child game object the transform dot set as first sibling to move this one to the top yep as you can see first the child and help far then the health bar blue again the hierarchy position is very important in the UI since that is what defines which sprite is on top of which so there you have it we cover the various ways that transform parents and children interact if you have any questions post them in the comments and I'll do my best to answer them subscribe for more videos and I'll see you next time