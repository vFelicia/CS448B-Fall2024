hello and welcome I'm your code Mahim in the series were making snake in unity in this video we're going to handle sounds and save the high score once we all right so here's our snake game we can move this snake around and eat some food when we eat the snake grows and we can now hit escape to pause our game and in here we got a resume and in main menu go back there and in the previous video we create this main menu we got how to play and back to play and quit and so on so everything is working very nice so far now our game is completely muted so let's have some nice sounds over here in the project files I have a sounds folder with a bunch of sounds I have a button click button over snake die snake eat and snake move the sound effects were created with chip tone which is a great free tool to create simple sounds that is actually an expanded version of another excellent tool which is SFX R so let's create a class to help us play our sounds let's go into our scripts create a new C sharp script this will be our sound manager this will be our class responsible for pulling every one of our sounds so let's make it static so we don't accidentally instantiate it remove monobehaviour and put it like that alright so first let's make a very simple function to play a sound in here we're going to create a game object in order to play sound we need to add the audio source component and now we can access the audio source and call the function play one shot now here in the parameters we need an audio clip reference so it's young with that we're going to go just like we've been doing to our game assets in here make a public audio clip and let's try out the snake loop alright so we can go back to the sound manager access the game assets and call these snake move okay great so this is extremely simple so now we can go into our snake class and let's go down to where we are moving our snake and here let's go into the sound manager and call the play sound function alright not you do it now back into the editor let's write the reference to our game assets just like that okay so let's test and yep there's the sound being point whenever these snake moves okay great so we can all play a very simple sound now let's change our code to be able to play different sounds so here in these some manager let's creating a new to keep track of all possible sounds okay these are all of our sounds and now in our play some function let's receive a sound velm now all we need to know is the auto clip that matches that particular sound so let's go into the game assets and here let's create a class to home both an audio clip and a sound value so let's make it a public class sound audio clip inside we have a sound manager loud sound and also a audio clip and let's make this a serializable class so we can set it in the editor so make it serializable and using system alright this should be working and now instead of having an audio clip for a snake moving here let's simply have an array of sound audio clip okay so let's see how this looks in the editor so here in the editor as you can see we got an array of sound audio clips so let's put up five elements and here they are and now we can set them and yep there it is our snake move snake move snake die and so on and so forth so we now have a custom object keeping our audio clip and the sound together so we need this to find the correct audio clip for the sound that we want so let's go into the sound manager and here let's make a function to do that so a private static you don't return a audio clip now let's call it you get audio clip in here we're going to take a sound as a parameter and now in here on we do is we cycle through the array on the game assets and if the sound audio clips sound matches this sound then we returned and in the end if we can find we returned no and let's also do a debug that will have errors since we should never actually get here all right that should be working so now we can go up here instead of using this snake move we simply use the get audio clip and we pass in our sound so we should now be able to play any of these sounds and if we want to add a new sound we would just add another field in here and then add it on our game essence so now let's go to the snake class and in here instead of just play sound we do play sound and we pass in the sound for the snake move yep just like that and now let's deal with the snake eat and die so in here we have a boolean we are asking the level grid if we ate some food if so we do all this then let's also play the sound for the snake and then here we're checking if the snake has died and if this thing is that Ivan let's play the sound snake die alright so all of that should be working let's run the code and see if sound is correctly being point okay so the move sound is working let's see if the eat sound yep there it is the eat sound is correctly working so we have the move and the eat sound and our code is nicely set up to be able to add more sounds and now that our snake is big enough let's test out the die sound any of their yo we got a very nice game over sound all right so as you can see we have our sounds correctly working so now let's deal with the button sounds and for our button sounds we're going to use something really cool a extension method so let's go into the sound manager down here and let's make a function to add the button sounds so this is an extension method you can see it because it has the disc keyword we're essentially adding a Add button sounds method to our button UI class without modifying the code inside that class so this is great for adding functionality to a previously written class so for example we can go into our main menu window down here we have our code setting the click function on the button UI yep and now in here I can get the button UI component and now as you can see I have the function add button sounds and as you can see it is indeed an extension method so I simply call this function like this and this function does not exist on the button UI but rather in here on our sound manager so this is great and now in here we can either our sounds to this button and just like that we are adding to our mouse over function and to our click function we are adding these delegates which 1.8 the correct sounds so this is an extension method which is extremely useful when you want to add functionality to a class without actually having to modify that class all right so let's test and see if the main menu button now has a sound okay so here we are in the main menu now let's see if the play button has a sound any of there you go there's our mouse over sound and if I click yep there was the click sound and now we're in our main menu and all the snake sounds are correctly still working right great now let's appoint sounds to the rest of the buttons so here on the main menu window we simply call this on these other buttons all right just like that all of our buttons should have our sounds now let's also go into the opposed window and here do the same thing alright so all of our buttons should have sound let's test ok here's the main menu yep everything on one of them has a sound when I click it also has sound so now play now let's see the pause menu there's the sound and so on alright great so we have correctly added sounds to our game we set up the sub manager class to be responsible for all sounds and we can play them when needed so now that we have sounds working and let's deal with saving a high score now in here we are on ready correctly calculating and displaying our current score so let's start off by figuring out how we can store data to be able to store a high score for stirring that we're going to use player prefs this is the simplest way to store persistent data in unity the player prefs has a set int function which takes a key and a value that allows us to save our death so first let's test this out by setting a int with a key value of high score and let's present the value of 100 so we do that then we do player preps dots and then let's read that value to make sure that it is working so we do a play preps that get int and the key that we want is on high score and let's do a debug log on this all right so let's test and see if the console says a hundred so here we are and there's the console indeed saying a hundred so as you can see it's extremely simple to save and all that now in here we can now hide the set end and if we run again it won't say a hundred again and if there it is a hundred again okay great so here now you why we have our score window so now let's add another text field to display the current high score all right so we have our high score being displayed in the corner so let's go into the window code now in awaken here we want to read the high score however we don't want to deal with the player perhaps directly from this window so let's make another class dealing with the scores so make a new csharp script this won't be our score now in here let's make this a static class since again we don't want to instantiate this one and let's make a function to return the current high score inside we just to return the player preps that get int and our get int also has a secondary function column which is you can see it takes a keen so our key is high score and then we can also return a default value in case that key does not contain a value so by default we return a zero alright so that's it and now let's go back into our score window and in here on a week we can simply go into our score class and get the high score so with our high score let's simply update our text all right this should be working so let's test and if there's a highscore window saying 100 okay so now here in this corner let's make a function to try to set a new high score so we're going to make a public static ball and call it try set new high score essentially this function won't test to see if the score is a new high score if so it will return true if not it will return false so the first thing we do is get the current high score then we do a test if the current score is higher than the previous high score and if so we want to replace the stored high score and if we did set a new high score then we have correctly set it so we return true and if not we return false so whenever we call this function we know if our given score is a new high score or not okay so just for testing let's go into our game Handler and try to update the high score to 200 so we go into the score class we call try set a new high score to 200 any of there is the high score now says 200 okay great so we can now read the current high score and save a new one now let's call those functions when the snake dies now the snake let's go to the code where the snake has died yep in here and as you can see we are calling our game handler function star in this function when the snake dies we show the game over window and let's also update the high score so we do a score dot try set a new high score and we pass in the score which is currently being stored on this class but now that we have a dedicated score class we should keep all of our score code in that class instead of in here so let's do that all right so we now have all of our score code inside our score class and let's make another function of this one which takes no parameters since this class is the one that contains the sport reason we do this and we return try set new high score with our current score all right this should work now let's also fix the issue on our score window which in here is asking the game handler now in seven life class the score class and here on the snake when we are calling out score instead we tell the score class all right great so now everything is working in here in the game hammer when the snake dies we try to set a new high score however we still have one issue which is on the score window in here we are only updating the high score text on awake so when the snake dies this code will not update so in order to fix that let's go into the store class all the way up here let's make a event call it on high score change so we have that event and now it's trigger event when we set a new high score which is in here after we set the pointer perhaps and we save we check if we have subscribers to this event if so let's fire alright the event should be working so we can now go back into the score window and on awake instead of having this we go into the score coils we subscribe to the on high score changed event and let's make a function to update all right so we got a function to update our high score we call that function on awake and also when the high score has changed so you should be able to save a new high score if you beat the current high score and we should be able to see it updated on the score window so let's test okay so here we are with a high score of two hundred we had a hundred per food we ate so all we need to do is eat more than two and we won't beat our current high score so we have a score of 600 which is bigger than the current high score of two hundreds now let's die and see what happens yep we have done as you can see the high score has correctly increased to 600 and now if we hit retry yep there we go it still saves and it sells as 600 all right so we are correctly saving our high score now one more thing we can do is change the game over window for when we beat the high score first let's go into the score window and make a function to hide it so we can hide this when we show our game over window okay so we can now hide the score window we are doing that so that we hide the score when you show the game over window so let's go in here and well let's first change it in the editor here we have the game over window with a retry button now it's for a text field above it so we have a congratulation message that will appear when we beat the high score we have something showing our score in this run and we have something showing they currently saved score all right so let's deal with that in the code here on the GAMEOVER window first we need to know if we did beat the high score so on our show static you receive a boolean for is new high score and in here if this is a new high score we want to show the message if not then we want to hide so essentially set the text object game object to active based on if it is a new high score and then for the normal score text let's just change that all right so we show the new high score text if this is a new high score if not it is hidden then we show the current score for this run and then we show the currently saved high score so now all we need to do is go into the game hammer and down here when the snake has died we show static then we need to save on this function which returns if this is a new high score so we passed that to that and let's also high D score window all right everything should be working let's test okay here we are everything is so perfectly normal the current high score is 600 so let's try to beat that okay we have 900 now let's lose and see if there you go there's the message saying a new high score we currently saved high score is 900 which is the one we got in this run and as you can see the score window on the background is hidden so everything looks nice and clean now let's try if we don't beat the high score as you can see the high score is currently 900 okay so we have 600 which is under the current high score so let's die and see any of their days it does not say the congratulations message and it does show the current score of 600 for this run and the stored high score of 900 so there you have it we have it sounds to our game for the various actions of the snake as well as for the buttons we also set up a class to handle scoring with the ability to get the current high score and save a new one as always you can download the project from the utilities from unity con monkey comm if you have any questions post any comments and I'll do my best Angela subscribe for more videos and I'll see you next time