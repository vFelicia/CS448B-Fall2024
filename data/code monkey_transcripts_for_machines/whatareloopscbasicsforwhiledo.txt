in this video we're going to learn about loops in csharp loops are an integral part of programming and something you need to be very familiar with since you won't be using them all the time we're going to cover four types of loops that you can use depending on the situation let's begin okay so first of all you know when code runs it runs from top to bottom so first this instruction runs and this one until the end of the code block now loops let you run code inside of a code block multiple times here we're going to cover four types of loops while do wild four and for each we're also going to cover the two keywords related to loops continue and break this videos patreon sponsor is bad adventure bad adventurer is a game development duo currently working on their first game Wayfarers edge it's a RPG focused on exploring and settling unknown frontier lands in a low fantasy and Wild West theme check them out at bat Adventure calm thank you to the patreon sponsor and thank you to these awesome supporters for making this video possible go to patreon.com/scishow code monkey to get some perks and help keep the videos free for everyone so let's start off with these symbols to understand which is the while loop okay so here we are in an empty script and first we write the keyword while and then we input our condition inside parentheses and then we have our code block so this is the basic definition of a one loop and for testing before we do and let's define an int variable and start off at 0 and then we're going to run the code inside of this code block whilst I is under 3 and inside of our code block we're going to do I plus plus so while the I variable is under 3 we're going to run the code in here which is going to increment our I variable then let's just had a simple log just to see what's going on inside so we debug load on the value of I all right so let's test so here we are and yep you can see in our console that we have our code block being executed three times we're doing the log after we increment our I variable so in here first we have 1 we have a 2 then we have a 3 and then we break out of our loop because the next time that occurrence or I only at 3 and 3 is not under 3 so it breaks out now for example if instead of starting at 0 let's say we start off at 5 and we test and there is the loop code block doesn't run at all since it tests for the condition before it runs all right so this is the 1 loop it has a condition and it does something whilst that condition is true now the next type of loop is the dowhile this is extremely similar with one very key difference the difference is that the condition is tested after the loop runs so first we write the keyword do then we add our code block and then we write while and our condition so let's try doing the same thing so I under 3 and in here with 2 I plus plus and the debug mode and now for testing let's leave the eye at 5 as we did previously and if you remember when we did that with the while loop we did not to get anything since our code walk did not run at all since it first test for the condition and 5 is not under 3 so it did not run this not even once however in a dowhile loop that commission is only tested at the end so if we run this code and if there it is we can see that our loop code ran once this is the key difference between while and dowhile on the while you test the condition before the code block runs and on they do while you test the condition after the code block runs so if you have some code that you want to run at least once and then perhaps loop through it then the dowhile might be useful in that scenario so here you have the first two types of loops you have the one loop and they do well now one thing you have to be very careful when using whiles or do else is you need to write your condition very careful here for example on the while if we start off at 0 and I don't increase this then this condition here will remain true forever since I won't always be 0 so if we run this code then this condition won't be true forever so our game won't be stuck running this code block over and over again and we'll have to fortunately close it so when working with ones and do aisles you have to be very careful not to create some endless loops now the next loop type helps prevent that from happening and it's the loop type that I tend to use the most I'm talking about the form loops at first they might seem confusing but there are actually quite simple so you start off by writing the for keyword then you open the parentheses and in here you have actually three code blocks separated by a semicolon now the first one is the initializer which is run only once as this line executes so here normally you want to initialize a certain iterator variable so by normal convention you name an eye for integrator or index and you normally want to use an int so you define the variable in here and you initialize so you usually set it to zero then you have the semicolon and you have the second block now the second block is our condition this is tested every time just before it's loop runs so the same behavior as the one so in here let's say I under three then another semicolon and finally we have the unless code block which runs after the loop runs so normally here you increment your iterator variable so not only just something like I plus plus so this is how the form loop sort of helps you avoid endless loops that you might get with Wiles and do Wiles in here you have to write the in last code block so most of the times you don't forget to increment your iterate although obviously you can still end up with an infinite loop if you do something like I or simply mess around with a different variable okay so let's look at the for loop in action and really should work pretty much the same as our while loop so in here let's just do a debug logged on our I variable let see any of there it is we have zero one two so the first time that the code wok runs we're going to have our I initialize to zero so it runs and we print out a zero then after the in loop code block runs we're going to increment our iterator variable and after doing that then we test out the condition so at that point we have I equals 1 which is some wonder 3 so we run it again then we run this again and test it again run and so on so that's how we end up with 0 1 2 so the for loop tests for the condition before it runs it could walk much like the while and not like they do while now over here on the statement you can actually define more than one variable so you can find an int I equals zero and a J equals five something like that and you can also define it of any type so you can define it of something like a float but normally for most scenarios you'll still just use just one iterator making an intimate eye and on the third statement you can also do more than just increment a single amount so you can do for example int 1 sequence 2 so this will increase the iterator by 2 every time it runs the code block and you can also do I or whatever statement you wish to run at the end of each loop for loops are great for iterating through an array so here for example let's define an array all right so I've defined an array of characters ABCDE and we can use a fourth cycle through it so we define our iterator start off at 0 then we go once the iterator is under the array link and we increase the iterator so this will cycle through the entire array so here we can print out the index and then print out the char or rank on that index so let's see and if there it is we have our 0 a 1 b c d e and so on so here for example let's look at what happens when you do plus equals 2 so we increase the iterator by 2 every time and let's see any up here we have our log skipping over every other character so it skips the 1 and the 3 now speaking of a race we have the last type of loop which is the for each loop this one is great for easily cycling through a list or array so first we write the keyword for each and then we define our iterator element so let's a fan of type char to go through our array so a char C then we use the keyword kin and then the enlist or array or collection that we want to cycle through so here let's cycle through our char array and that's pretty much it so this won't cycle through our array and for each time it runs we're going to have a different element assigned to this variable so here we can do a simple debug log on our char ring and let's test any of there you go we have all of our characters so if you don't need the index then the for each is a more simplified way of cycling through an array the for each works with own collections so for example it works on this array it also works on a list or queue or religious about any collection if you want to go more advanced you can also make your own classes support for each you just need to implement two interfaces so one is the eye innumerable and you also need to implement ienumerator however one thing you cannot do inside of a for each is modify the actual list so here on let's convert this from an array into a list and now here as we're cycling through let's do a mug and then let's do char array dot remove let's remove this character and if we run this if there is we get an error so we cannot modify our collection once in the middle of a for each so if you want to go through a list or collection and remove some elements then one approach you can do is use the normal four and let's say we want to remove the character or index one so we do a simple if if the index equals one then let's go into the char list and remove at index one so this does not work inside of a for each but it does work inside of however if we run like this here you can see that we have another issue you can see that the indexes are indeed working so we went from zero one two three however we went from A to B to D to e so essentially we skipped over C even though I wanted was to actually remove B so the reason why that happened is because as we remove the character on index one all of the other elements after that one were relocated back on the list so as B was removed C went into index one but then we ran our iterator statement and doing so increase the iterator by one which means that by doing that we end up skipping the element that was actually relocated so essentially if you do this if you remove at something you gotta keep in mind that the iterator won't still run so instead of testing for an index let's remove if we find the B character and in order to from skipping over something after we remove them let's move backwards on our iterator okay so now let's test any of there we go now it correctly went through all the elements so first we go into da then we go into the B which is on index one and since it's V we're going to remove it from the list but then in order to not skip the C which gets relocated back into one then we simply go backwards and we test the index one again so again if you're removing elements while cycling through a list pay very close attention to what your code is actually doing now another thing you can do with loops is to skip to the next element or break out of the loop so here for example an hour for each we're cycling through all of our characters okay and before we do our log let's test if this character equals the B character so if it is a big character then we want to skip it and the way we can do that is by using the continuing keyword so this will skip the rest of the code block so essentially it won't skip our debug log and go straight on to the next character so let's see any of it is we have AE CDE so we essentially skipped over B for example I normally use continue when cycling through a list of enemies in order to skip the enemies that are either too far or they're already and continue it works on all other and loop types so you can use continue on a while I wanna do or on a for another thing you can do is break out of a loop so here instead of skipping by using continue we can instead use the keyword break and now if you run any of their it is we just have the a character so essentially as soon as we hit the B character we broke out of our loop and continue the code after that so here we saw a B then we hit break so that means we then I'll run this code and went straight down here and again break works on on leather loop types now one more important thing to know is nested loops so this is when you have a loop inside of another loop so for example you have a for inside of a for so for example this is how you would cycle through some sort of grid so the first four increments the X and goes until the width and then the second inner loop increments the Y in goes until the height now one important thing to know is what happens here when using break so here if the x equals one then we're going to break out let's see and there it is essentially we only run the code when the X is zero so as soon as it becomes one it breaks out so it doesn't run our second loop at all however if instead of breaking here if we break inside of our nests and loop so let's say when I equals one and yep you can see that the x equals one also rent so here we are breaking out of this loop but do not break out a down loop so the break only breaks from the loop that it's actually in it does not break any other loops above it all right so here we looked at loops in csharp we saw four different types well do one for and for each they each work differently which makes the best loop to use the pen on your exact situation and we also covered how we can skip elements in a loop or break out of a loop early so with this knowledge you now know one of the core fundamentals of program this video is made possible thanks to these awesome supporters go to patreon.com/scishow natee code monkey to get some perks and help keep the videos free for everyone if you liked the video hit the like button subscribe the channel for more unity and csharp tutorials posting your questions have in the comments and I'll see you next time