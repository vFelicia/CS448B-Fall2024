hello and welcome I'm your code monkey in the series of creating spiderman in unity today we're going to make some enemies and attack them let's begin all right so here's the scene so far I have my spiderman character I can move them around and he plays attack animation so I click any attacks force a punch then a kick you can also see some particles on the hit position and the camera is following the character all right so now with that let's create an enemy so over here in the code I have the base enemy class and as you can see it is very similar to the base spiderman class I have move animation aisle animation test to see if it's playing the punch or kick animations and I can play the punch or kick animation those are the same as on the Spiderman base and the only difference is in here we have a play hit animation this is the animation that is meant to be played whenever the enemy is hit so let's first make our enemy script in the same way we set up our spiderman script so let's create a new C sharp script and name it enemy inside this won't be set up much like our spiderman class so first let's go up here make a private field for the enemy base enemy base and we're going to grab it on the private Lloyd awake so we're at the enemy base equals game object I get component of type enemy base ok so we now have a reference to our base script now let's create the prefab that won't be used to spawn an enemy so back into our editor in here let's duplicate the spiderman game object since the enemy won't have the same composition we have a main game object then we got the body which contains the mesh that is used by the animation system and a shadow which is just a simple sprite so the difference is in here instead of using the spiderman material that contains the spiderman spreadsheet let's use the enemy spreadsheet and on the main game object let's remove these to add the enemy base and then the enemy script all right so now we can go up here and create a new prefab let's name it PF enemy and drag the game object onto it alright so we now have our enemy prefab now let's run the game and see if our enemy shows up so let's just move him in there and see and yep there he is the enemy just standing around ok so now first let's create a function to spawn the enemies so let's go into our enemy class and up here let's make a public static enemy create function this won't be responsible for instantiating a new enemy and here we're going to receive a vector3 for the spawns position and inside let's instantiate the enemy prefab now in order to do that we need a reference to that prefab so as a helper let's go back into our code and make a new C sharp script called game assets this will essentially be our container for the references that we need let's make a new game object and name it game assets and drag the script onto it so here on the game assets script let's clean this up and we're going to have a public static game assets for our instance let's make a private void awake to set our instance equals this and then we're going to have a bunch of public fields for everything that we need so in this case a only transform for the PF enemy ok so now back in the editor we can see that the script has a public field for our enemy prefab and we can now drag it onto there ok so now we can go back to the enemy class and in here on the insensate we can go into the game assets dot instance and access the EPF enemy prefab all right so let's spawn it on the spawn position and with quaternion dot identity ok so this won't be our enemy transform that is insensitive okay now let's just grab a reference to the enemy script which is on the enemy transform getcomponent of type enemy and then return the enemy script all right so we now have a function to spawn enemies in order to test it let's go into the game handler and in here and let's spawn a bunch of enemies so we're going to do it on private void start which happens after all the awakes alright now in order to spawn a bunch of enemies let's use the function periodic which is part of the code mock utilities that you can grab for free from Unity code monkey calm so in here let's create a function that won't be triggered I've written let's say 2 seconds so the function that won't be triggered will execute the enemy dot create and let's create them in a position around spiderman so get the spiderman dot yet physician was a youth elastic get random dear so we get a random direction and multiply it by and let's say ATF okay so every two seconds a enemy won't be created on a random position within 80 units of spiderman so let's see that and yep there you go that one was spawn no that one was phone and as you can see we are now correctly spawning enemies in their correct position all right so now that we have our enemies being spawn let's make them attack them all so on the enemy script and here we need a function for the enemy to get hit so let's make a public void call it damage and in here we're going to receive a vector3 for the attacker position now in this function we're going to play the hit animation so first let's comment late the vector3 of the dear to attacker which will be the attacker position mine is our position so let's make down here a public factor 3 just a helper function called get position and tone return our transform dot position okay so to come with the direction it's the attacker position minus this position normalize alright so we now have the direction and using that direction we can now play the animation so we go into the enemy base and play the hit animation towards the direction to attacker and when it is complete let's go back to play the enemy base not play the idle animation alright so when we call this function we calculate the direction towards the attacker we use that direction to play the correct animation and when the animation is complete we go back to idle so let's see if that is correct so to test it let's go into the game Handler and in here instead of creating one every second let's just create one for easy testing so now I'm here only to an enemy dot create we're going to spawn him let's say on the right side so on 30 0 we're have that enemy reference and now let's make a function periodic that won't trigger the enemy that damage from the spiderman yet position and trigger that damage every second alright so in here we are spawning a new enemy on the right side then we are creating a function that won't trigger every second every second it won't damage the enemy using the Spider Man as the attacker position so he should be playing the hit animation every second towards spiderman let's see if that is behaving correctly there he is and yep as you can see he is correctly playing the hit animation and if I move them around you can see the direction is being correctly calculated alright so now let's make spiderman be the one to actually cause damage let's go first into game Handler and comment out this code but leave the enemy as being spawned now let's go into the spiderman script let's go down into the handle attack function and in here after we click on the left mouse button let's first define a vector3 Attack Position and by default this will be the get Mouse world position alright now in here we want to check if there's an enemy nearby this attack position so in order to do that we are going to ask the enemy class so we are going to have an enemy for the enemy that is nearby that position and we're going to ask the enemy class to get the closest enemy so let's going to the script and make that function so up here let's make a public static enemy get closest enemy we're going to receive a vector3 for the position and a float for the max range now in order to look for the closest enemy first we need a list of enemies so we need to create a private static list of enemy for our enemy list and on awake let's simply add this enemy to the enemy list alright good so now we can go in here only get Moses enemy first define a variable for the closest enemy instead of two no and this is what we're going to return so in here we're going to do for each and cycle through every enemy the enemy list in here the first thing we're going to do is check if the enemy is within the valid range so if the vector3 that distance between the position and the enemy target position if the distance between these two is less than or equal to the max range then this is a valid enemy if so then we check if the closest equals no then that means we don't have defined a closest enemy yet so we set this one close this sequence this enemy all right if not if we already have a closest enemy then we want to calculate which one is actually the closest so we do an if vector three the distance between the position and this enemy that get position if this one is closer than the vector 3 dot distance between the position and the closest that get position so if this enemy is closer than the previous closest then we set the causes to be this enemy all right that's a very simple script for calculating the closest enemy so with this function setup and correctly returning the closest enemy to a certain position we can now go back into our spiderman script and in here we can grab the closest enemy we give it our position and a max range of let's say 20 F and then we check if enemy is not know then that means there is an enemy within range that we can attack so instead of setting the Attack Position to the position let's set the attack position could be the actual enemy gebt position and we can actually do enemy damage and damage the enemy and give it the attacker position which is this position right here and when commonly in the attack direction instead of using the mouse position use the attack position all right so first by default we set the attack position to be the mouse war on position then we check if there is an enemy near our position if there is an enemy then we set the attack position to be that enemy position and we damage the enemy using our position all right so let's s and we should be able to attack the enemy all right so here's spiderman there's the enemy and if I go in here and I attack out here you can see nothing happens the attacks are perfectly normal heading towards the mouse okay and now if I go near the enemy and I attack yep there you go he was damn and she played the damaged animation so now for testing let's spawn another enemy so we now should have two enemies so let's see and now if I go in the middle of both of them he won't choose one and attack them now this as you can see is not a certainly ideal we want to give a priority to the enemy that is closer to the mouse position not just the generic spiderman position so let's do that so in here on the spiderman instead of looking for the closest to this position let's do for the closest to the mouse position now here I am I go into the middle of both of these enemies and if I click on this side yep I walk on to that enemy and I hit him and if I click on this one yep you know welcome to that one and you hit that one so I can now easily switch targets and hit one hit the other one so there you have it we created some enemies made a function to spawn them and attack the closest one using our spiderman in the next video we're going to setup enemy health so we can actually kill them as always you can download the project files in utilities from unity code monkey comm if you have any questions post them in the comments and I'll do my best to answer them subscribe for more videos and I'll see you next time