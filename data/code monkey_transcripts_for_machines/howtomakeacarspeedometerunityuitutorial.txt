hello and welcome I'm your code monkey in this video we're going to create a car speedometer in the UI let's begin okay so here we are with an empty scene let's start off by making these pedometer visual in the UI so let's go into the UI canvas and here first make a nice window container so let's create an empty game object and call it our speedometer now inside let's add a new UI image for our background and in here in my project files I have a simple speedometer background just like that so this will be the background now on top of it we want a needle that won't rotate from around this position all the way around to this position so let's make that needle visual another UI image for the needle and let's drag this needle texture okay so this is the basic setup as you can see the needle is pointing to the right which matches the rotation of zero in unity so these are the only two visual elements we need so far now through code we want to control needle and what we want to do is rotate it and since we are in the UI we're going to modify the Euler angles that you see in here except the only one we change is easy so as you can see we want our speedometer the needle when it's at zero to be around 220 and when it's at max speed heto to about here about 20 so in here as you can see on the angle field if I increase it you can see it going counterclockwise that is the way unity is working so for our speedometer we are going to have to go into the negatives so we start off at 220 and up and 20 so we have to decrease our Euler angles okay so now let's write the code first make a new csharp script and we're going to call this our speedometer so first on awake let's grab a reference to our needle transform okay so that's our reference and now on our private voi update let's just rotate it now in order to rotate we need a function that will return a rotation so let's make that this will essentially convert a certain speed variable into a Euler angle rotation so let's define some constants to do our math so as we saw in the editor we're going to have zero speed at a rotation of 210 degrees and our maximum speed won't be at minus 20 so these are the constants for the angles that the needle can move in now we also need to define a certain max speed we're going to define as a normal variable instead of a constant so we can change it later and also we need a variable for the current speed okay so we can now go into our get speed rotation function and in here the first thing we need is to know the total amount of angles that we can move through so as you define up here the zero speed is at 210 whereas the max speed is at minus 20 so we need to identify the difference between those two so the total angle size won't be the zero speed angle head to 10 minus the max speed angle which is at minus 20 so our total won't be 230 so now we also need to normalize our speed so now we have our speed as a valley between 0 and 1 so if we are at speed max we want to need them to be at the maximum and if we are at v0 we obviously want to need not to be at zero so we're just going to return our zero speed angle which you can remember in unity the angles go counterclockwise but we want to go clockwise so instead of a plus and here we do a minus the speed normalized multiplied by the total angle silence so if speed is 0 this 1 return 0 so we won't be at 0 speed angle if speed is 1 it will return the total amount of the total angle size so we get the zero speed angle 210 minus 230 so we get our minus 20 all right so all of this should be correct now on our awake let's at least speed to zero and these feed max let's say 200 in here let's say we are defining speed in kilometers per hour and now on the update let's increase the speed every frame so we are increasing the speed by 30 km/h per second just making sure it doesn't go over the maximum and finally we need to set the needle oiler angles to what our function returns all right so all of this should be correct essentially we're just doing math to convert a speed variable into a certain angle so we should now be able to see the needle constantly increasing by 30 kilometers per second so with a maximum of 200 after about 8 seconds it should reach the maximum okay there it is you can see it start off in there which is a zero now it's increasing and around here it won't stop which is the maximum speed yep there you go we got our nice needle going through all of the valid values so now let's make some labels to display the speed at various points in the speedometer so in here back in the editor we're going to create a template that we can then duplicate so let's create an empty game object this will be the speed level template so we want to add some dashes and a text field so let's add an image for our dash so there's the dash image just say white dash now let's add a text label okay so this is the template for our speed level as you can see we're going to duplicate this game object and then rotate it in order to add numbers to the various angles so first let's go back into our code and now in here let's grab the template transform and let's hide the template by simply doing set active to false just like that our template is hidden and now let's make a function to set up the end labels so in here let's start off by defining the number of labels we want and now we need to calculate the total angles like we did previously so we copy the total angle size so now let's do a simple pour in here we're doing less than or equals since we want the last position to also contain a label and I mean here all we need to do is in sin she ate our template transform in here we calculate the speed normalized value for this index on this label and let's rotate our Euler angles using the same code that we did down here then we also set the text on the new level and finally we need to show this since the label template won't be hidden so we simply go into the game object and set the active to truth all right so essentially we are in Senshi ating a label template we are calculating the speed normalized for this label we're using the same code we use down here in order to calculate the angle for that particular position we set the angle on the in label and we set the speed to actually match the speed that should be on that label and finally we simply set it to active since the template is hidden so all we need is to call this up here to create these speed labels and now let's see and yet there are our labels all of them being correctly placed that is zero in there and that is 200 in there now obviously one issue you see is that the text cannot be read like in here this is upside down so let's make sure the text doesn't rotate around with the unlabeled so in order to make sure the text doesn't rotate and let's simply grab that transform and set the Euler angles which these are the global ones after including all the transforms so we simply set this one to vector 3.0 in order to not be rotated so let's see yeah there you go the dashes are correctly rotated but now the numbers are readable now another issue you can see is that the numbers are on top of the needle so let's sort that in the wider in which things are shown is dependent on the hierarchy so in here the needle is above on the hierarchy compared to the other templates so it gets rendered before so the others appear on top so we need to do is drag the needle in order to be on top and then it would be on top so let's do that through code so after creating the speed labels we can simply tell the needle transform to set as last sibling and that point it will go to the end of the hierarchy and should be on top let's see and yep there you go the needle is now on top of the numbers and now since we made our labels dynamically we can easily change how many we have in what they display so for example up here instead of having ten segments let's say just six and we can also go up here and set the maximum speed to be 400 so now let's see a form labels are correct and if there is we now have a maximum speed of 400 and it is split into seven segments seven since we also include the unless one so our speedometer can now display any value for the car that we're drawing so this feed alter would work on a car with a very low maximum speed as well as for one with a very high so now let's add some player controls to our speed variable just to test things out so here in the code and let's do a very simple acceleration deceleration and braking so on the update let's put our code in a function okay so here we have some very simple code just for testing player input so while I'm pressing the up arrow we have an acceleration of 50 so our speed variable will increase by 50 per second that we hone our up error if the apparel is not being pressed and we are decelerating so we reduce it by 20 per second and if you press the down arrow then we are breaking so we're reducing by 100 per second and finally in here in let's just clamp our speed variable to make sure it stays within family ranges and up here we can now remove our testing code and just like that all right so let's see our very simple player input okay there it is everything's on zero now if I press the up arrow if there you go the speed is increasing let go and it's now decreasing increase again and I go up to maximum and if there you go max speed now I press the down arrow and there you go we got a very intense break so there you have it we created a very nice pedometer in the UI it displays the current speed and dynamically creates the labels based on a certain maximum speed any certain amount of labels so this code is very adaptable to whatever car families you use as always you can download the project files in utilities from unity code monkey comm if you have any questions post them in comments do my best answer them subscribe for more videos and I'll see you next time you