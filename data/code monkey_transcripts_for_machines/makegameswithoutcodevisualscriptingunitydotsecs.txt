in this video we're going to look at the current state of visual scripting in unity visual scripting is an excellent learning tool and it opens up unity to a lot more people being dots based means you get epic performance by the font and it also works as a way for programmers to understand the dots and ECS paradigm let's begin hello and welcome I'm your code monkey and this channel is all about helping you learn how to make your own games with nf2 torrents made by a professional indie game developer so if you find the video helpful consider subscribing ok so here we're going to look into how to start using visual scripting and make a simple player character move left and right so first of all I'm mainly a programmer because I love the code I've been writing code for decades and it's definitely something that I love to do but I see a lot of comments from people saying they are scared to learn code because it only looks way too complex programming is mainly about logic and thinking about flow and that's exactly what visual scripting helps in visualizing if you understand of logic behind your visual scripts then all you need to do after that is learn the programming syntax and all of a sudden you know how to code so I'm a huge fan of visual scripting as a great learning tool for helping people get started and being less scared of program ok so here we're going to check out the unity visual scripting package this is still very much in development at the time of recording it is currently only six experimental drop running on unity 20 19.3 so if you're watching this many months in the future then some things unlikely have changed there's normally a new drop every six weeks or so check the link in the description to download it and try it for yourself now one particular thing about visual scripting is that it's fully based on unity dots so that means seven things first of all it means extreme performance your scripts are automatically set up to benefit from bursts and each job system giving you excellent performance another thing and this is very interesting is it also means that visual scripting works as an excellent tool for understanding how unity dots works so even if you're a complete programmer and not interested in visual scripting for production code you can still use it to understand the core concepts behind dots if you're not familiar with dots or in TCS then I won't cover it here but for a more detailed explanation check the links in the description that stands for the data oriented technology stack which is comprised of the ECS or entity component system the job system and bursts so ECS stands for the entity component system and this is a data oriented programming paradigm you have components which hold data then you have entities which hold instances of component and finally you have systems which were logic on entities and components again for a more detailed explanation check the links in the description here after you see the example it'll all become easier to understand so over here I have a component empty unity project and I have in soundy visual scripting package now I can go all the way up here into the window and open up the visual script window and here it is this is the window that pops up right now it's completely empty so let's create a visual script for that we go down here onto our project files and we create not the way down here we have visual script and then let's make a ECS graph let's go about something like player movements ok so here is the window with the player movement script as you can see we have an entity query and a on update running through every entity that matches that query now let's create our player entity so to do that it's very simple to what you're already used to over here on the hierarchy let's create a 3d object let's make it a quand okay so here in the scene you can see a very basic quad right now the current dots implementation doesn't support the sprite renderer so that's why we're using a mesh filter and a mesh renderer alright so here we have a basic player sprite now in order to convert this from a game object into an entity we need to go in here add the component of type convert to entity there yo this one converts a game object into an entity and then destroys the game object so now if we try running our game okay the game is running and now we can go into window in order to open up the entity debugger and there you go you can see that the NT debugger has our player character with all those components and if you pause you can see that the hierarchy is empty alright so our character is now working as an entity great now that we have this working and let's add some logic on to it so here is our visual script window and we can simply drag the player onto it and as soon as you do you can see that it automatically add a player query and in order to view information about this point query we go all the way up here onto this button which shows the blackboard so click on it and there you go we have our point board so here on the blackboard we can see our various queries variables in the current scope so for example we can expand this one and over here you can see all the components that were automatically out this query by dragging our player character onto it so the player character has render bounds welcome to whirl nonuniform scale rotation and so on so now we can get rid of this one previous get rid of that query okay and now we have our player query so we can drag it by clinging here drag it to the side and now we choose an action so let's choose the on update entities and now here to keep things simple let's make sure that we only care about the translation component so you had rid of all these since we're not going to modify them alright so here we have a very simple query so whatever actions that we put in here won't run on every single entity that contains a translation component which in this case all we have is our player so now here we can do something so something like this press space and let's add the translate so this note allows us to translate an entity so move it around so here instead of using a complete form of 3 which is essentially the same as a vector 3 we're going to put by axis and now we can modify them individually so here we can move our entity so let's simply put a certain value on the X and let's say point 1 and now here if we do it like this it won't translate onto x equals point 1 but we want to add it on every frame so we simply select that so this won't translate by an X of point 1 on every single update and that will happen for every single entity that matches this query which is simply the translation component so every entity that contains the translation is going to execute this action which will move it to the right let's see ok here we are and yep there's our player character constantly moving to the right awesome so just like this you can already see how this tool works and how it's useful for both non programmers to make games as well as for programmers to learn about the entity component system and also one thing is over here we have another button this one is for the code viewer so if you click on it there you go it shows up the code viewer window and in here you can see the killed representation of what we were doing with our visual script so here in the code you can see that we have our component system which is our visual script we have an entity query called player query exactly this one on the system create we are creating our entity query which as you can see only has the translation component and then on every update which is this stack we are cycling through every entity that matches their point of queering so for each of those entities we're going to grab the translation component and then in here we're going to modify the translation value X and increase it by 0.1 which is exactly what we're doing in here so this is how this tool can be excellent for programmers you can make a certain visual script and then look at the actual code that's running behind it okay so now let's make some more logic now over here we are moving to the right and let's make it move to the right until it reaches a certain point and then moves left so over here on our update and the stack we can add another node let's add a simple if condition so here as you can see we have an if which takes a condition if condition is true then it'll run this stack and if condition is false it on run this tank so now since we want to move to the right and then to the left we want the condition to be when it goes past a certain point so we want to test the x position and see if it's larger than a certain amount so first we grab the translation component so there it is so we stretch this out then we select the get property node then select the get property press space in order to select whatever properties we want to get and in this case we want to get the X so select that one and yep there you go now we have this node in here which will return the x value inside of the translation component now we need a condition to input into our if here so let's get the condition greater than so this one I'll put true if a is greater than B so we pass in a in there and now on B we select a certain value so we're here in the editor we can see and let's say that our sprite starts in here and we want to move it back when reaches this point so this point is at 7 so we're here this one will return true if a is passed 7 and then we put in this condition in there alright so in here we have our update which first moves our entity then we test if the translation X is past 7 if so then we're going to go into this stack and in this stack let's just add a debug log for testing so over here we can add a simple log and now for the message let's simply put out the valley X ok so here we have very simple script we're going to move our player to the right once it goes past 7 we should be able to see a log on the console let's see ok here we are with our console empty and now our sprite is moving to the right and once he goes past seven and yep there you go we have our condition triggering and now we have our lock awesome so just like this we already have a very simple script here working with some nice logic and again the whole thing is done without having to write any code whatsoever but we can also inspect the code viewer in order to see what's actually happening so we're here we are increasing the translation value on the X then we do an if that valid on X is bigger than seven if so then we do a debug log on the translation value X so now that we have this working and we are identifying when the player goes past it right when that happens let's make a move to the left so for that in here let's make a new component so we're going to create down here onto visual script and over here we have a bunch of options and let's unlike the new component let's make this our move direction so an create a component we see in this window as you can see it's named move directions of type component and over here we can add all the fields inside of this component so let's add a new field let's call this our value and instead of an integer let's make it a float all right so we have a component with one field of type float so now we select the player and we simply drag the move Direction straight onto our player all right so over here we can see our value now this is direction so we're only going to put either one or minus one so let's start with one so it starts going to the right okay so back in our visual script over here we have our player query currently running on all entities with translation and let's also add another required component and in this case it won't be our move Direction component and there you go over here you can already see it at the translation and the move direction so here let's first use our move direction when we translate something so let's drag the move direction there and we push it out and we use a get property on to get property and let's select our value and now we multiply the value by a certain speed which is what we're doing in here so we have our move Direction either one or minus one so going left or right and then we have our movement speed and we simply add a multiply node we multiply our direction by our speed and that's what we pass in to our translation component all right so we're doing examine the same thing as previously here we are and yep there's the player so moving to the right okay so are so good now back into our if down here so doing an if the translation value X goes past seven if that happens and we're going to run this stack and in here instead of doing a log what we're going to have is a set property so this is how we modify something so the something you want to modify is on the move Direction component so we drag it in here we connect that one into that one now we select set property press space and over here we can modify the value so when translation goes past seven let's simply set the value to minus one okay so just like this as soon as the play reaches the right side it should start moving to the left side okay here we are and there's the player and he's going to move and he moves as soon as he gets there yup there you go he modified the move Direction component and now he's moving to the left and we can pause and look at the entity debugger and over here we have our player entity and here is the inspector and we can see indeed the move Direction has value of minus one alright awesome so here we have the player going to the right and then left now let's make him go back to the right once he reaches the edge on the left so what we do is very simple we have our if we go pass to the right side then we set the move direction if not then let's drag it to make another stack on this stack let certain if so again we're going to need our condition like we did previously so we can simply sound like these controlc controlv there you go and I mean here instead of a greater than we want a less than node so we're here if the translation value X if it is under minus seven then this will be true so if that happens then we want to do the same thing in here so we want to do a set property we're going to set the move Direction selective value and we set the value to one alright so over here we have a very simple script working moving our player right and left let's see it in action okay here we are and there's the player going to the right as soon as he reaches the edge there you go he starts going left so they moved their component now has minus one now it reaches the in left side and they're gonna move their component is back to one so he's back to going to the right so here we have some nice simple logic working awesome and again here we can inspect this entity there's move direction currently at minus one so he's going to the left and you can see down here the translation component there's the X currently going to the left as soon as it reaches minus seven it will modify the move Direction component from minus one and yep there we go with modify to one and now he's going to the right all right now let's add a few more things first of all let's make a speed component so we're here we create go down here visual script new component let's go with type move speed in here we'll make it move speed and we add the field call it our value and again this one is a float and hit save there you go there's our move speed proxy component so we select the player we drag the move speed component on there and now we're going to multiply it by a delta x and let's put let's say ten back in our visual script let's open up our query add another required component this one of type moves beam and there it is there's our move speed component and in here instead of using this constant we were using previously we're going to use our move speed so we drag the component on there we push it out we add a get property node then we hit space in order to grab the value so grab the value and multiply it by there so here we have the speed multiplied by the direction and now after doing this lets get a delta time node this is in order for our code to be framerate independent so we get that and we simply multiply it so we add a multiply node between our adult time and our speed result then we take this and we add it on the X all right so here you can actually see our logic very visually we're multiplying the direction by the speed they're multiplying that result by the Delta time to make it frame rate independent and we're simply passing that into the translate by node on the x value and this note is set to add so it will constantly add the vowel that receives in here then we have our simple F testing if the ice goes past seven if so then we're going to run this tag and this type won't set the move Direction up here back to minus one so it will move to the left side and if it is not past the left side then we go into this tag and this tag we do an if if it is under minus seven then we set the move Direction back into one so he goes back into the right all right so here's our very nice script let's see it in action any of there's our player moving with a specific movement speed so we could modify the value inside of that component and it would modify how fast the player is moving and again the whole thing is frame rate independent so you can see we're running at 800 frames per second and with the speed of 10 so everything is working great so over here we have our logic completely working and we made all this happen without writing a single line of code again you can see how this is a great way for beginners to get started with a logic of programming without having to actually write code and thanks to the code viewer this is also excellent for program is in order to understand how the entity component system works so as you can see we are grabbing our entity query we're growing everything with the translation move direction and move speed components then we do an entities for each with this pointer query we're increasing it on the X and over here you can see our multiplication so we multiply the move Direction value by the move speed value and then we're multiplying this whole thing by our delta time and we're applying it to the translation value X then we're doing a simple if past 7f if so then we set the move direction to minus 1 and if not then we test if the value x is under minus 7 and if so we set the move Direction value to 1 so again here we have our nice pride going left and right with some simple magic and over here is the entire visual script running that action if you want to see more visual scripting content please let me know in the comments as always you can download the project files anatoly's from unity code monkey calm subscribe to the channel for more unity tutorials post a new question having two comments and I'll see you next time