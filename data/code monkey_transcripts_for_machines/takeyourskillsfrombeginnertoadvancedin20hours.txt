hello and welcome I'm your code monkey and here's a complete overview of my turnbased strategy course all of these steps that we're going to take starting from a completely empty project until the final polish game and also including the two free bonus expansion this course is targeted for more intermediate users who want to take their skills from beginner to the next level the goal is not just to learn how to make a game like this but rather how to do it properly so it has a heavy focus on writing good clean code and good project structure so you can then expand upon it in many different ways so here's how we're going to do it we're going to start coupling from scratch so the first thing we're going to do is create a brand new project after opening up Unity we're going to set up the layout then we're going to verify that the universal random pipeline is on sound correctly and we're going to import the asset pack that we're going to use after that we're going to set up some basic post processing to make the game look nice without the basic setup won't be done then for starting to actually make the game we're going to begin in the unit movement and unit selection section first by setting up the actual unit again the focus on this course is on build the game and building it directly so it's very important that we are careful with how we set up all of our game objects with the unit setup we're going to begin handling movement then we're going to handle the mouse learn how to do a raycast and learn the differences between screen space and World space with that we're going to calculate the mouse run position and learn about layer masks then we have one of the most important lectures on this course it's all about why you should never make anything public and what is the alternative that you should use then we have everything ready to add the ability to click on the world and have the unit move to that position after that we're going to download some animations and import them into unity and set them up then we're going to learn about the NT animator and how we can add some animations then learn about how to control animations using animator parameters so that the unit has the proper idle and wonk animations of them working correctly with that done we're going to handle the unit rotation to face the move Direction and do it nice and smoothly next we're going to create a unit Action System and add the ability to select the units so we can have multiple units and give different Origins to each one individually with the unit selection working we need some visual so we're going to do that once also learning about another extremely powerful csharp feature called events and the final lecture on this section covers another extremely important topic which is the Singleton pattern and how we're going to use it in this course after that we move on to the crucial section all about the grid system and the camera this is really the core of the game so we're going to spend some time just going over the design that we're going to implement then we start building the grid system creating the class and setting up the basics with that then we're going to create a grid object class that won't be instantiated in every grid position these objects are difficult to see since they really have no visual so we're going to create a nice debug visual object that we can easily see so we can inspect what is going on inside each grid position then with the core grid system done we're going to create a nice level great class that will manage the entire level Grid next we're going to install cinemachine this is a Unity tool that makes camera handling super easy we're going to use it to create a script to move and rotate the camera and then we're going to handle zooming in and out with all that done we move on to the next section covering actions in the UI We Begin by making the most simple action just a basic move action this is another very important lecture because covers something that is extremely important part of game development which is refactoring code with the basic move action working we're going to add some validation logic to match our game rules next we're going to create a grid visual prefab so we can visualize which repositions the unit can move to after that we're going to build our second action again we start off by making something extremely basic just a spin action basically the goal of this is to refenter the code to be able to support multiple actions with multiple actions implemented we're going to handle the logic to make sure only one action can be active at a time then it's going to be time to implement the UI we're going to create the canvas and set it up then build a simple UI so we can see all the actions available on the selected unit after that we handle clicking on the action buttons to select the active action and then once again we're going to refactor some code to create a nice and generic take action function then we're going to handle updating the UI this is another extremely important lecture because it covers how to properly decouple your code by using csharp events the underlying actions and the units they don't care about the UI at all the game runs perfectly fine with or without UI it's completely decoupled next we're going to create a simple element to show while an action is busy then introduce the concept of action points so that units have a limited number of actions they can take and then create a nice certain system which will handle keeping track of the current turn and resetting action point then we move on to the enemies and combat section We Begin by creating an enemy again all while focus on writing good clean code and good project structure so it's going to be based on the regular unit object once we have the enemies the next obvious step is to implement a shoot action so we can damage them with the action logic working we're going to implement the animations to make it nice and visual and then add a nice Bond visual we're going to use the trail render and the particle system to make it look good with the shooting working we need some concepts of homes so we're going to create a nice sound system with health working we're going to implement a very fun thing we're going to use the unity ragdon wizard to make a fun breakdown that won't fall to the floor when the unit dies next we're going to learn all about another very useful ENT feature which is one canvases with this we're going to create a nice UI element on top of each unit to display the health and the action points then we're going to publish our shoot action by adding a nice action camera once again using cinemachine so it's going to be pretty easy next we're going to modify the grid visual to support different colors that way the move action has one color and the shoot action as another then for something pretty important we're going to implement some basic Envy AI just add the logic for the enemy to take their turn and then we're going to build upon that in order to add some more complex AI so the enemies can actually move towards the player units and shoot at a Target once again the focus on this course is writing good clean code that we can expand upon so the pattern that we're going to use to make the AI it can then be expand upon with all kinds of new AI rooms afterwards we get to another very important section this one is all about pathfinding in order to implement this properly the first thing we need to do is actually learn about csharp generics this is another extremely important csharp feature with that knowledge we're going to refactor the grid system to support generics doing that will enable us to reuse the exact same class for both the pathfinding and the grid logic but before we get to where work on implement the pathfinding we're going to look at the design of the algorithm that we're going to implement so we're going to learn how astar pathfinding Works after that we begin by creating the main script and set it up with a great object with all of the pathfinding data that we're going to need and then we begin to actually implement the algorithm this is something that sounds pretty complex but it's actually not it might take a while to click but once you understand how the algorithm works it's actually pretty straightforward with some basic pathfinding working we're going to add support for obstacles and then use some visual assets to make an interesting level after that we just refactor our move action to use our pathfinding algorithm with that done we come to the Polish section we begin with a fun simple effect just adding some screen Shake then we add another phone action a nice grenade that deals damage in radius after the logic is working then we implement the visuals on top next we add some destructible cranes this involves learning how to update the pathfinding when an object is destroying then we're going to learn how to make some nice satisfying destruction in Unity by using Pro Builder which is their builtin modeling tool using that we're going to slice the crate into parts and then make them explode after that for another fun action we're going to make a sword melee attack this one has a very short range but deals a ton of damage next we make a super important action a generic interact action and then we have another extremely important lecture where we're going to make it so that the interact action that one can be used to do all kinds of things like for example opening doors or destroying a prod really this interact action can do anything you can think of and this really just involves learning about csharp interfaces which is another mustknow csharp feature after that we're going to refactor our input to use the new input system package and then we're going to take everything that we've built and make a really nice playable level that has several player units lots of actions a nice one with some level scripting and various enemies with that we're going to have our nice final polish game however that is really just the main course portion since the course was originally released I have since added two free expansions after the main course contents the first expansion is on adding hex word support So how to convert the main course code which has a square grid and convert that into a hex grid thanks to how all of the code is set up in a nice clean way this actually relatively simple change to do this we're going to first look at the design that we're going to implement and how hexes differ from Square grids then we start by implementing the design beginning with the conversion from and to World inquiry position and then we're going to refactor the pathfinding to also work with hexes that's pretty much all it takes to implement this nice expansion with this everything in the game all the actions all the AI everything works on a perfect hexagram and then for the second expansion this one is adding multiforward support and this can be added to either the square Grid or the hex Rin first we're going to refactor the main level Grid to support multiple grid systems then refactor the pathfinding to make it work with multiple Force after that we're going to create a nice editor script for defining pathfinding links then handle the visual for making a proper jump and file animation and finally handle the visibility so the player can still play on the bottom horse alright so that's it that's the overview of the home course including the two free bonus expansions we started coming from scratch and by going through it step by step we end up with a really awesome turnbased strategy game and again the most important thing is you will learn a ton about how to write good clean code and how to manage a complex project by the end you won't have gained the massive amount of knowledge that will enable you to build all kinds of games by either expanding upon this game or making something completely original check the link in the description to get the course and I really hope it helps you on your Learning Journey