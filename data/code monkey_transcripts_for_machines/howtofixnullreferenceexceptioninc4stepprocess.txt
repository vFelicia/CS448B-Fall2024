in this video we're going to learn how to fix a known reference exception in c sharp programming is all about experience so the next time you come across this error you'll know exactly what to do to solve it here i will give you a process that you can follow every time let's begin okay so let's see how to fix a nonreference exception but before we can do that we need to first understand exactly what it means objects in c sharp are reference types which means that when you store a variable of a certain object type you're not really storing that whole object what you're storing is a reference to that object so when you access that variable you are accessing the reference in order to access the object stored somewhere in memory so think of it as a pointer to a location in memory where the actual object is if you have the reference correctly set then you grab that memory location then go into the memory in order to find the actual object however if the reference has no value meaning that it's set to no then the code does not know where else to go so when you do that that's when you get the error the name no reference exception first of all it's an exception meaning an error and the error is due to trying to access a reference that is currently set to no alright so i hope that helped clarify exactly what the error means now let's see some practical examples and how to solve it but what i want you to take away from this video is not how to solve a specific problem instead i want you to understand what caused the error and what is the process you can follow in order to identify and solve it so here i am in a normal csharp script now i'm working inside unity so that's why the script extends this class and it has this start method but if you're working on a normal c sharp program then the logic is exactly the same so this script is really very simple over here i just have a variable of type object and then down here i'm accessing my object and calling the function to string which should give me a string representation of whatever is stored on this object so with this you can probably already see the error but let's test and right away in the console we see we have our known reference exception so the issue that we have here is quite simply that the variable is defined but the value is never set so by default this takes the value no so here we are doing what we saw previously we are accessing this variable to try to get the object but this is set to no so the error happens because we're trying to call the two string function on this object but this object is set to no remember that when you use a dot you are accessing that object so in this case access this object to use this function and the error only happens when you try to use the object that is set to no so for example you could do object second object and assign it to this my object so you can use this object when it says no what you cannot do is actually access it now when you get a nonreference exception your first step should be to look at where the error is happening and think of exactly what could be said to know so over here we have our error and we can see down here on our stack trace that the error is happening on this line so on this script at line number 10. and in here we can just double click on the error and it will automatically go there see if there you go the error is on this line so on line 10 on this script and now here you need to ask yourself which is okay so what in here could possibly be set to null now in this line we're really only doing two things we're accessing this object and calling this function now calling a function simply runs the function and like i said previously the error only happens when you try to access a reference that is set to no so for example even if this function returned no the error wouldn't be here because we're not then accessing this in order to do something else with it so the only possible cause for the error in here is by accessing this object which we're using to call this function so we can verify that this is likely the error that is set to no by looking at what is stored in the variable so let's do a simple print before we run this line now here i'm working in unity so in order to print something on the console i can just use debug.log and then pass in the object that i want to print so my object so this will print whatever is stored on this object however if you're working on a normal c sharp app you can instead just use console.writeline so these two do pretty much the same thing all that matters is that you have way of seeing the current value stored in an object all right so with this let's test and yep we still have the error which is fine now the first step in the process is to identify where the error is happening and then you worry about solving so here in the log we can see that we printed no so here we have our answer the error is that this variable is set to null and then we're trying to access it now the solution here naturally will depend on exactly what you're doing with that object so it either means that you should check for known like this so if my object if it is not null then you do this so that's one approach just check if it's null or not or maybe in this scenario this field should have been set to something before this point so in this example i'm just using the object type which is the base time for every class so down here for example i can just define a normal class so i just got a type test object and then here i can simply do my object equals new test object and if i test now and yep now it works there's no error because that field has indeed been assigned alright so here we have the most basic example now the process for solving a nonreference exception is as follows first you go to the offending line then you analyze what that line is doing and think of all the possible objects that could be set to null then you add some logs before that line to see the values stored in each of those possible objects when you have confirmation of exactly what object is set to null then you decide what you should do about it so maybe it's okay that the object is null and you should do a simple note check or maybe the object should have been set to something at which point you go backwards through your code to see where it should have been set okay so this was a very general example now let's look at some real normal examples so over here i have this script it's just a very basic script essentially takes a target transform and then just calculates the direction and moves towards that target transform so very basic now let's try running this code and yep we have our error so again the first step is going to the offending line so line 11. so here it is it's this line now step number two is to analyze this line and think of all the possible objects in here that could be set to null now if you want go ahead pause the video and try to figure it out this is a pretty simple example okay so here we are calculating the move direction and in order to do that we are using two objects so we're accessing the target transform in order to get the target position and we're accessing this transform in order to get this object position so both of these two objects could possibly be set to null now the next step is to add some logs to identify exactly what is said to know so here just add a debug.log on the target transform and another one on this transform okay so now we run and yep we have our logs now it seems that the second object is fine but the first one is set to no so double click on this log line and yep it's this one so the target is null so down here when you try to access the target position we're going to try to access the position of a known reference and then we get our no reference exception so now that we have confirmation of what object is known now we need to think about what should we do about it so should we perhaps ignore the target if it is null now maybe that could be one approach but in this case according to my particular game design i want the player to always be moving towards the target so based on my design this really should have been set with the correct value previously now in this case the variable is defined up here let's define a private transform for the target transform and it's set up as a serialized field so this is an attribute that you add when you want to expose certain private variables to the unt editor so this tells us that this reference should have been set in the editor so if we go there and yep here we see the issue so we have our move to target script and down here our reference is set to no so in this case the solution is simply to remember to drag the reference so down here is the target just click and drag and there you go and now if we run if there it is now it works the object is moving towards the target so with this we solved our error awesome okay let's look at yet another example so over here i have this game object and then inside it i have a sprite for the player and then inside that one i have a sprite for the helmet now let's say that we want to hide the helmet so here is the script it's very simple we just do a transform we find the player we find the helmet then we access the game object and set it to active to false in order to hide it so let's run and yep there we have our error so again first step double click so the error is on this line now the second step is to analyze this line and try to guess all the possible objects and possible reasons that something could be known here so once again go ahead if you want pause the video and try to figure it out okay so there's really two possible errors in here now in terms of what could theoretically be known the answer is actually four so the transform is a class so it could technically be null then over here each find can return null and then the game object is also class so it could also be technically no however this script is a mono behavior so in order for this run it needs to be attached to a game object and a game object always has a transform component so this transform reference will never be known then we have our two separate finds so these take a name for the child game object and these can indeed return null and lastly we have the game object which is a class which technically could be known however in here we're accessing the game object of whatever transform we come from here so if this one does return transform then it's guaranteed that that transform will also have a game object so just by looking at this line i can tell that the issue is either with this fine or this find so either one of these could possibly be returning no so now let's add some logs before running this line or to identify it now here since one of the fines is a child of the previous fine then we need to make sure that we add the logs in order so first we do a debug.log on the transform.find our player so first we check if that finds 16 and then we check for the other one which is dot find then we have the helmet alright so let's see and yep we have our logs and we can see that one of them is set correctly but the other one is indeed set to no so with this we have correctly identified where the error is now the next step is figure out what to do about it so let's double click to go to the offending line so here it is we can successfully find the player but we cannot find the helmet game object now in this case let's assume that the character is always meant to have a helmet so this line should work so we should not need to do a null checking here and in this case one particular thing is we're using find and the thing we'd find is you have to remember that the name needs to be absolutely exact so here we're calling find on helmet and if we go into the editor and if over here we can see the reason for the error we have helmet typed within uppercase h but in our code we're using a lowercase h now find this case sensitive so this helmet that we're using in here does not match this helmet that we're using in here so since they are not perfectly exact then the find returns no which then causes our error so in this case let's just rename this and write it exactly as we have in the editor and if we run and yep now it works perfectly so the code ran it found the player it found the helmet and it made it invisible okay awesome all right so let's look at one last example over here in my scene i have an object with the script and then inside it there's the circle visual with just this nice visual very simple now let's look at the script okay here it is now what we're doing is we're grabbing the visual then we define a bunch of colors and we do some randomness in order to pick a random color we do all of that just on a weight just once and then on every update we're simply moving the visual transform in order to follow the mouse position so very simple just a circle with a random color following the mouse let's test and yep right away we have our known reference exception so once again let's follow the process so the first step is to go to the offending line so line 26 okay here it is here is the error now step two is analyze and think of what could possibly be set to null here all we're doing is setting a position so the only possible thing that could be known here is just this object so step three is to verify that by adding a log so let's set a debug.log on our circle visual transform and yep we have confirmation that that object is indeed what is said to know so now the final step is to figure out what to do with this null object so in this case it's not meant to be known so that means we need to go back in order to see where this object should have been set now this is a very simple script so in here it's very easy to figure out and by the way here's one quick visual studio tip if you click on an object in order to select it and then press ctrl shift and the up or down arrows you can cycle through all the references where this object is used also if you just place it in you can see them all highlighted now if you want go ahead try to pause the video and figure out why this object has been set to null alright so just by highlighting you can right away see what's actually the issue now you can see that this one is highlighted this one is highlighted and this one as well but this one is not so this tells us that the variable that we're using in these three spaces is different from the one that we're using in here so here we see how c sharp works with regards to member variables and local variables so the goal with this line is to set this field but since we added the type what we're actually doing here is creating a local variable with the exact same name so when we set this to this value we're actually not accessing this field member and since we're not setting this one then this one says no which then caused our error down here so the mistake in this case was simply making this one a local variable if we take away the transform yep there you go now all of our references are indeed referencing the exact same object so one awake we set that one and then on update we can safely use it and if we run and yep there you go now it works exactly as intended so here we have solved yet another possible known reference scenario awesome okay so here we've been solving this problem using debug.log in or to print the values that we think might be known so this is one approach however for a more advanced approach you can also use the debugger so here i am working in visual studio and you can easily add what is called a breakpoint so down here on the left side on this empty space just click and yep it showcases a nice red circle so what this means is that when the code reaches this point it will automatically stop executing so the game is now running and it automatically stopped as soon as it got into this line and down here you have some windows related to debugging so you can click on this one and here you can see the actual value stored in each variable so this is another way that we can see that the circumference will transform so this variable is indeed set to null so this is where we have our error so the debugger is a very useful tool for looking at what the code is doing at any point you can then step through your code step out and so on now personally when it comes to solving known references for me using logs is more than enough and i also like forcing myself to analyze the code and think of what objects could possibly contain the error but you can use whatever approach you prefer alright so i hope this video helped you understand what are null reference exceptions and what caused them and like i said what i hope you take away from this video is not how to solve a specific problem instead i want you to remember the process for solving it so you can fix the error whenever it happens so you first go to the affining line second you analyze and figure out what could possibly be null third you add some logs to see the value stored in edge object and identify which one is set to known and lastly figure out what to do about it depending on the scenario so this is the basic process that can be used to solve the error whatever it may appear so next time you encounter it now you know what to do if you found this video helpful consider liking and subscribing this video is made possible thanks to these awesome supporters go to patreon.com unitycodemonkey to get some perks and help keep the videos free for everyone subscribe to the channel for more unity tutorials post any questions in the comments and i'll see you next time you