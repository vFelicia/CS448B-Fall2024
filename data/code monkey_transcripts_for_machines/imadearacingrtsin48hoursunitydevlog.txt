in this video we're going to look at how i made my entry for the mixing game jam 2020. the theme for the jam was mixing genres so i mixed racing and rts the end result is a really interesting design that involves racing base building resources ordering units and so on let's begin okay so let's check out how i made this game it was a 48 hour game jam so everything was fully built from scratch in that time frame the total working time was about 22 hours out of those 48 in all that time i wrote about 2 000 lines of code so it was definitely very intense you can download the complete project files if you want to inspect all the source code for yourself or just go into the etch page to play the game the gm started on a friday at 6pm and the theme was revealed in a video the theme was mixing genres so first of all i started to think what genres could i mix and for research i use the steam text page it's really useful with tons of genres my first thought was actually making a platformer rts i thought that could be an interesting mix but then i remember that i had some car models that i got recently and i hadn't done a racing game before so i went to the racing rts once i settled on the base idea it was time for coming up with the design usually i like to design on paper so that's exactly what i did just grab the piece of paper and start writing so here is my sort of game design document as you can see there's tons of questions and ideas for mechanics i like to ask lots of questions and see where the design takes me since this is a game jam certain things did not end up in the final game like for example the idea for having multiple car types so that could be an interesting addition let me know in the comments if you'd like to see a video on punishing up a game jam game and after some time i had a rough idea of the design that i want to implement so something where the player controls a car he can drive for resources construct some buildings build some units and attack some enemies with that settled i opened up unity in a completely empty project the rules for jam was that the code must be done completely during the jam but assets can be used so i took this opportunity to use a great asset pack that i got from an asset store bundle tons of cars and racing assets which was perfect for the design that i was going for there's a link in the description for the asset packs that i use in case you want to check it out and with that the first task was to get the car actually moving so this was quite tricky the last car game that i made was all the way back when i was still using flash so i've never done a car game or car controller in unity so this is definitely a very interesting new task it's at this point that i thought it was probably a mistake to go for a game jam with a genre that i've never made before since time is limited you should really do things that you already know how to do so it wasn't very smart of me to try a genre that i've never done before but at the same time game jams are all about experimentation and trying out new things so going for something new is also in keeping with the spirit of the game jack it was definitely very tricky to make the car controller i didn't know whether to use physics or not so i had to learn how the wheel collider works which despite the name it really isn't just a collider the wheel collider already has a bunch of suspension and motors so i spent tons of time trying to get that to work learning about the wheel collider how to make it move forward and turn so it's a pretty complex thing so stay tuned for a video on how to make a proper car controller i still need to do some research on that in the end time was running out so i opted to go for a much simpler car controller it's just a rigid body moving forward and rotating very simple the car only works in the exit plane so it never goes up or down never jumps and has no suspension there's no tire sliding no drifting the car has perfect traction so like i said it's not a perfect car controller it's very simple but for the purposes of a game jam it's definitely good enough and that was pretty much all i did in the first night of the gym i made the design and got the basic car controller working and then i went to bed day two i woke up at my usual time nice and early and got to work on the car ai right away this task seemed like it was going to be very difficult but actually turned out to be relatively easy and the main reason why it was easy is because i wrote the generic card driver script in a nice clean way so the ai works on top of that both the player and the ai share the same underlying card driver script the ai simply looks at where it's at where it's going calculates the angle towards the target position and sends commands to the driver to move forward backwards or turn this is also something that i will cover in a detailed video so stay tuned for that with the car working i started making the truck resource gatherer unit again functionally it's the same as the normal car just a different type of ai that works on top of the same car driver script then i made a simple resource node just a position in the world that spawns some prefabs for each resource object the truck finds the closest resource goes to it grabs the resource then looks for the closest outpost building goes to that drops it and repeats so very simple logic then i built the second part of my design which was the track in terms of building it was very simple thanks to the awesome track parts included in the asset pack that i was using again there's a link in the description if you want to check it out i just took all the track pieces enabled snapping and start building an interesting track i even had to make some modifications because one piece did not perfectly connect and i easily made that using pro bundler that's unity's builtin 3d modeling solution which is very easy to use and in a few seconds i had the track piece perfectly connecting with all the rest and at this point i also started live streaming the development so a big thank you for joining me on this first testing live stream i had no idea if it was going to go well or be a disaster but thankfully it ended up quite well i live stream for about two hours which was actually two very productive hours my first task on the live stream was handling the scene machine cameras essentially i wanted an over camera for the world and behind the camera for the track doing that with cinemachine is extremely easy just set up the two cameras and play around priority very simple next up i handle the checkpoint system i also have a dedicated video on this topic so stay tuned it's a pretty simple system just place some objects with trigger colliders and test the other that the player hits them if they hit them in the right order then everything is fine again also very easy to implement then for a quick fix since this is a game jam game where time is of the essence that means there's no time to do a perfect implementation of some systems for example the car ai works great the car goes towards whatever target position i give it but there's no path finding anywhere the car just moves forward then turns to reach a target meaning that if a solid object appears in front of the target it just keeps jamming against it so the simple hotfix that i added was to check if the car was stuck and if so apply a random rotation to it with some rotation then the car is pointing in a random direction which means it can move forward and the turn radius will likely be enough to avoid the obstacle and here i also made a bug live on the stream so that was interesting i forgot to add a timer for the rotation so the car was randomly rotating on every frame so yeah encountering bugs is definitely part of the process it's just a simple fix and everything was working then for making the resource types if you've seen my builder defender course then this section was very familiar using some nice scriptable objects to define all the types and a simple resource manager with a dictionary to keep track of everything then for making the minimap i already covered this in detail in another video it's very simple just add some sprites to each object and put them on a separate layer then make a second camera that just renders that layer make it render onto a texture and display it in the ui very simple also in terms of how i organize the work that i need to do usually i keep my progress on a simple physical todo list so just a piece of paper placed right next to me here i write whatever tasks i need to do and go ahead and tick the boxes as i do them you can see i have tasks for the building manager making the car ai handling enemies and the minimap and so on then also making some music sound and main menu and lastly submit to itch you also see the specific tasks that i plan to do during the live stream so it's a very simple todo list and a very simple process and it's great for me for helping to keep track of what needs doing okay so back into the game next it was the building manager again using scriptable objects for all the building definitions according to the design there's the main hq building there's the outpost where the trucks drop resources the shop that makes the vehicles and the fuel station which interacts with the fuel system then for handling the unit types again using scriptable objects there's the cars trucks and enemies next up for handling the construction of units in the shop very easy to do just add a simple timer and after some time it instantiates the prefab super easy to make some cars or trucks or just about anything then for the ui this was a tricky thing the game is meant to be a mix of racing and rts which is an interesting idea but if you think about input usually racing games are heavily controller based whereas rts games are more heavily mouse based switching inputs is always a bad idea so i knew i didn't want the player to require the mouse and since the ui is not mouse based i also didn't want it to be positioned like a normal ui so my solution was making a canvas on top of the player it shows the correct ui based on proximity to the objects and it works on button presses rather than mouse input so it took a while but i'm quite happy with how it came out works well and i think it looks good too then for making the interesting funeral system based on my original design i wasn't sure if i was going to implement some sort of health mechanic i thought adding that would make the game a bit too intense and require macro management which would be bad based on the controls so instead i just added fuel so the cars run around and they spend fuel when they run out of fuel they have to go to a fuel station so functionally it works kind of like health and healing the system is very simple the cars have a float for the fuel amount and when that goes under zero they'll look for the closest fuel station and just go there the hq also works as a fuel station then making the ui for the player to construct some buildings i use the same ui method that i used previously so just a button to toggle on the menu and it calls the building manager to construct the building next up the car ai for finding and attacking enemies i went with a very simple design so this was easy to implement the design is for the player to kill an enemy just by touching so that's a simple collateral trigger on the enemy and for the car i just have to place the move target directly on top of the enemy and that's it and everything works then since the cars could attack the enemies it was time to be able to give them orders for that again handling the interface was a bit tricky the solution i came up with was holding down a button to expand the selection area and when the player lets go it selects all the cars within range then with the selected cars i can press another button to give a move order and tell the cars to go there so with that the player now has control over the unit then for handling the ui for the resources the resource manager was implemented long before this but until this point didn't have visual so just a simple ui visual next up making the enemy spawner this just has some simple logic to constantly spawn enemies up until a total maximum and the spawner itself also has a health system and the cars prioritize the spawner over the enemies so the cars first take down the spawner and then take down all the enemies then i needed some way of showing messages to the player so i made the same thing that i did for the interface just add another world canvas with nice red background and a text object then a simple script to manage that with a nice singleton instance so it can be called from anywhere with that i added the ability to be able to show messages like you're going too far or can't afford something so speaking of affording i then added some resource costs i made a simple class to handle a resource amount it just holds a resource type and an int amount then some basic logic on the resource manager to see if the player can afford it next up finally adding some sort of goal to the game i thought about it for a while and since this is a game jam game i went with the simplest goal possible of just clearing the map so the player wins the game when they destroy all the spawners and all the enemies and with it being a racing game i also added a nice timer eventually i wanted to be able to add an online high score table so you could compete with others to win the game faster but suddenly i didn't have time for that then when the player wins the game they go to a simple windscreen so we just display some stats related to the game and a button to go back into the main menu and speaking of that i then made the main menu very basic just the game name the goals of the game and some buttons then for the final mechanic that i want to add gathering resources from the track this way the player has something to do rather than just waiting around for the trucks all the time i simply added the resources to the checkpoints so as the player goes through a checkpoint it gathers one resource then i just added all the checkpoints to the track just duplicating and placing the same game objects all over next up adding a simple visual for how many units are currently selected and then adding a visual for when the player gives a move order and with that it was pretty much done the game that i built here in such a short amount of time is actually quite a bit complex which means that the one big task remaining was how do i teach the player how to play the solution i came up with was adding a nice pointer that would guide the player throughout the various things that i needed to do so just a simple object placed flat on the ground with some basic math to rotate and point towards the target position with that system in place i simply made a tutorial script that handles all the states that teaches the player how to play so first it points into a resource node and teaches how to teleport onto the track then it teaches you how to play some buildings make some cars and so on so it's a simple system but i think it works well then going into the polish stage up until this point the visuals for the game were really just prototype visuals so i polished up the terrain added some flowers grass and rocks then polishing up the track with some more objects alongside it once again adding all of them from the acid pack that i used which is a link in the description then adding some trees just placing a bunch of prefabs all over then polishing up the enemy spawner with some objects for this one i used another awesome low poly pack with tons of props i'm usually not very good at decorating but i think the final result looks pretty good same thing to polish the hq and polishing the outpost and the fuel station then i made a basic logo took me a while to come up with an interesting name so that's always a very different task with that i started to work on sound and music made some simple music with a program called vasquez oil or however you pronounce it so that's a great free tool for making music then i use another one for making sound effects and just play them with various actions next adding some particles when the enemy dies then some smoke coming from the cars added a simple day night cycle and lastly submitted to itch with just a few minutes left for the deadline with that the final game was made so i'm really pleased with the final result it's an interesting unique design that i think plays pretty well it was a bit too complex and feature rich for a game jam so i didn't really have too much time for polishing but i think all the mechanics work pretty well now i hadn't done a game jam in a long time so this was an interesting experience but at the same time it kind of reminded me of why i don't normally do game jams this was definitely a very stressful nonstop weekend out of the total of 48 hours i worked for about 22 in total i wrote about 2 000 lines of code so it was pretty much just nonstop work and sleep i'm happy with the result but it's probably going to be another year before i do another one also one thing that i asked during the live stream was if you would be interested in seeing how i would take a game jam game and punish it to the next level the response was positive so definitely stay tuned for that i think that would make a great video since so many people participate in game jams but then so few people take those ideas and flesh them out into a complete game so make sure you hit the bell icon so you don't miss it alright so that's it like i said you can download the complete project files and inspect all the source code for yourself or just go into the itch page and download the executable 2 plate this video is made possible thanks to these awesome supporters go to patreon.com unitycodemonkey to get some perks and help keep the videos free for everyone if you found this video helpful consider liking and subscribing post any questions you have in the comments and i'll see you next time