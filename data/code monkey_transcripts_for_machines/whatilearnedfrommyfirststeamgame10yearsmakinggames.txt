hello and welcome I'm your code monkey so 10 years ago I made a video that I think is one of the most interesting videos that I've ever done it is basically a development time lapse of my very first steam game called Survivor Squad I'm actually currently working on my eight or nine steam game I don't even know how many in total I've made so far so I thought it would be fun let's rewatch this video and I'll give you some notes and see how things have changed in the 10 years since I've been using Unity all right so it starts off right away on the super old I believe this is Unity 3.5 so this old interface definitely works quite a bit dated right now all the buttons with the gradients kind of funny how you can just look at a UI and be able to see just how old it is and for the game itself you can see here is the very beginning so at the beginning of Development I've only just had the basic field of view mechanics so that was kind of the core thing of the game I had a character that I could click and move around and over there you can see the character has its made and the blue thing over there is actually the pathfinding that's another thing that was absolutely essential and it's actually another thing that I at the time had no skills I was not able to do it by myself so for this you can see over here the ASR this is actually the ASR pathfinding project this is an asset that I've talked about many times on this channel it's pretty much the best pathfinding solution and back then since I did not have the skills of making super fast fast funny I just use this asset I use the free version pretty much right up until the actual release of the game and it was great by using this asset I was actually able to bring my vision to life so yeah being able to rotate and look around that was really interesting there you can see the pathfinding you can see the new map you can see the path being calculated and right there the doors it's actually really interesting again this was 10 years ago this was being developed uh back in 2013 and back then Unity did not have any 2D tools so there was no 2D specific engine so over here that is why you can see these doors these doors Sprites which you can't really see there because it's a bit too dark but those oars those are essentially just cubes those are cubes using 3D collectors 3D physics all of that that is pretty much how I made it work so the camera is top down in orthographic mode but the actual game the actual objects everything over here it's all in 3D honestly when I made this when I made the actual doors moving around that was really awesome I really enjoyed making that it's something that is so simple just being able to add some Physics right there just have the door open as the character moves that is one of those things that is so simple and so satisfying then over here for actually interacting with the objects being able to go there interact with an object and a bunch of items come out and down here we can also see a bit of the UI work we can also see the zombie evidence start to appear so the home game is all about survivors versus Zombies so there you go some basic interactions some basic attacks with zombies once again lots of 3D objects and some quads on top then using a bunch of points I believe these were these spawn points so basically as soon as I played the game there was a script that would go through every single one of these points on the side either to spawn an object there like a zombie or something or make them actually roam around you can see over there that I was using prefabs in order to set up the blocks for the actual cities so the final game actually has quite a bit of interesting procedural generation so all the levels are randomly generated and they are randomly generated based on these parts so these blocks so I pretty much handcrafted a bunch of pieces and then simply put them together randomly so there you go going in opening the door and yep it caused the visibility then it automatically starts to attack so we're here trying to handle some aeon logic that was really interesting then starting to deal with the click and drag in order to actually move the player in that direction then over here this is one of the things that was really tricky this took a ton of work to make it work properly this is essentially the persistent fog of four method so you can see as the player looks around there's a darker area and a semi darker area so pretty much like you have on any kind of RTS game but making it here in this game with this kind of granularity this was really difficult look at that as the character moves it slowly reveals more and more of the map and you have a look at that it's constantly being revealed and with multiple characters and so on so yeah this part was really extremely difficult first it was extremely difficult just to get it working and then it was even more difficult to make it actually performant basically the way that I did is kind of like a grid system on top so on top of the entire game I've got pretty much just the wrong split into grids and pretty much just got tiny quads on every single position above the world and then when a player unit when it calculates this field of view it basically goes into all of those squads and sees okay is this one revealed or not and swaps a bullying in order to actually generate the mesh underneath or not but again making this work was super difficult even on a relatively small map that still will require generating like tens of thousands of quads on top and doing all the logic on the raycast in order to figure out which ones to show which ones to hide this was one of the places where I first realized the super importance about memory optimization and specifically when to use classes versus when to use structs I cover the differences between those two in a previous video that is super important basically how classes are reference types and they are sort of a certain way in memory where Valley time so they are stored in a different way and over here I remember this system this was pretty much unusable when using classes basically because the memory had to jump around all over the place but when I swapped the trucks everything became much much faster which is kind of funny because right now 10 years later Unity dots is finally out of preview it's finally 1.0 and using dots that would make this system much much easier to build so there you go all of them moving and look at that everything being revealed it's kind of funny how as a player you take these kinds of Mechanics for Grant but I remember this was quite a nightmare to actually build and then over here the random generation for the known logic these are basically on the cities so the red cities those have some Infected so basically you would move there then clear the infected then move away move to a different place and so on I remember how generating this logic was actually some pretty fun programming basically the way it works is there are a whole bunch of different circles on different distances so it kind of gets those in order to generate the various positions for the cities to be placed and then you can see there's Logic for calculating the connections again all of this is procedurally generated so it kind of tries to randomly connect some cities together then also it had to make sure that there were some connections between the various circles the various positions so that every one of them is reachable I remember this was really fun to work on this is one of those problems that is really very programmer focused which for me that is perfect that is exactly the kind of problems that I like to solve and if there you go every time that I click there's a brand new map really nice then over here starting to see some UI so that was interesting starting to see the visibility and even the backpack that was another one that was really tricky to make it actually performant then starting to add more Logic for actually Scavenging for resources in order to be able to find them and pick them up then trying to figure out the loadout trying to handle the different survivors this was also another thing that was quite tricky you can obviously see all the programmers that I used you can obviously see how back then I had no idea how to use the answer I don't even know if the assets were actually exists back then so all the art that you're seeing here the reason why it looks terrible is because I draw this myself you can see over there the UI going up and down showing then click to drag move all the positions and so on yeah that was really interesting setting up the loadout for those I don't actually remember how I actually did this did I use some kind of grid system I'm actually not entirely sure just last year I think I made a really interesting Tetris grid inventory system that's a really fun system that is kind of what I did over here so different items they've got different shapes so you got to click and drag in order to place them anywhere then you can equip some weapons some armor some backpack and so on so that was a really interesting system then over here starting to see the tone tip so implementing the dangerous level so different nodes you've got different digital levels some only have a handful of zombies some have tons of them they're the enlarge node so once again that goes back to the procedural generation so some levels are really big and some are really small then also the gas cost so how much is going to cost to actually get there and get back that was a really interesting mechanic foreign ly generate names for the actual cities that one as well as the survivors it's kind of funny I remember looking up just random lists random names of cities and people I had those lists of names so my utilities in order to be able to randomly generate some names and those are actually still there so if you want to see the actual names that I use in the entire game you can see them in my utilities then working quite a bit more with the AI and with the Enemy visibility building some kind of Health System oh then handling the animation so this was another thing that was really interesting and really tricky you can see how the character the Survivor this is actually made up of tons of different pieces so basically there's a quad for the head then one for the body then one for the upper arm one for the lower arms and the legs and so on so everything is separated into different body parts different game objects and this actually became a real big issue in terms of performance which I'm not sure if I mentioned over here in the rest of this video but basically the problem was that I could only have like 10 or 20 infected at the same time because if each character is made up of like 10 or 15 different game objects that really makes things really heavy really quickly my solution ended up being making some kind of tune where I could take all these animations and pretty much just make them into Sprite sheets and that way then the enemies they are simply only one quad where it's constantly rotating the Sprite sheet once I did that then I was able to handle hundreds of infected and everything work great but yep in the beginning you don't work just like this manually making the animations again I didn't know how to use assets so I just built it all myself so there you go on the new animation so trying to knife enemies trying to find them then the animations for the zombies which again tons of game objects so that was really interesting then here I made some really interesting tool to help me with level design basically I was able to place the walls as the entire solid objects and that I made some code that looked for all of the door objects as well as of the window objects and pretty much just figure out where to slice the walls in order to make them so that when the game runs and yep there you go everything gets nice so there are no longer walls on top of doors that was a really useful tool when it came to level design then Jeremy of the various geometry Parts again I made a whole bunch of them by myself and then I automatically generated them using precisional generation and all the characters going in then getting attacked by some special infected with some special skills against a bunch of programmer art with that really ugly car then I started playing around with some lighting effects so that was really interesting and again on the left side you can see the editor View so here I was playing with spawning the blood and all the various things this was another thing that required a lot of work in order to actually make it performant I actually made a video on how I did this system basically it's a persistent particle system so I wanted the blood to actually stay on the floor for how long the player lasted on that level and my solution for doing that was pretty much just generating a mesh several time the player shoots a zombie it spawns out some particles and those particles are part of the mesh and that way I can have I think it was something like 20 000 different bullet splatters and they all rendered on just one mesh which made them super performant then here I've got the intro so that was fun finally got a nice interesting car so the intro that plays that animation then they come out and looks really good then this is the death lab mode which pretty much just randomly generates a nice maze so this was another thing that was really fun to program then trying to add some Polish trying to figure out how to make some nice wheel selection then trying to add some sets trying to improve the visuals do the best of my ability that is and trying to make a nice main menu and yep so that's the end of the trailer so that's the game really interesting and we can see over here on the end so the asset count these are I think it was the files on pretty much the entire assets folder so that went up to 2400 so that's nice and the lines of code were 30 000. it's kind of funny how just recently I did a Sprint in order to make the actual demo for my game dinky Guardians and for that I wrote 16 000 lines of code in about two weeks whereas over here it took me about one year to write 30 000 and these were not on the same level of quality as the code that I write nowadays so if this was on the same level of quality then these 30 000 would probably be around fifteen thousand so it's kind of funny how 10 years ago it took me one year to build a game like this whereas nowadays with my current skill set I could build this in probably maybe a month so yeah this was the development of my very first team game Survivor Squad the game actually had to go through seam green light so this was their service where you had to get a ton of votes in order to actually get on scene so the game I finished the initial version of the game right around may but back then I was only able to actually sell the game on my website so it took me until November to make my very first steam launch so in totally did take about one year to build this game I started it around the end of December 2012 so that was when I first encountered UNT and pretty much one year later here it was on Steam and that's pretty much how I became a professional in the developer it's definitely an interesting game I still quite enjoy the mechanic likes the reviews as you can see are mixed which for a first game six seven percent honestly I'm pretty happy with that and using these same mechanics actually then expand upon it and made a direct sequel now this one did not do as well but in terms of the technicality in terms of the game I was really happy with how this one came out if you like the concept of that field of view mechanic then maybe go try out the game I've got a bundle on the website containing pretty much every single one of my game including D2 Survivor Squad games and don't forget to add my upcoming game then Gardens to your wishlist alright so this was a fun video I really enjoyed rewatching this I hope you found it interesting to hear my comments on this Learning Journey I can't believe it's been 10 years since I actually made this now perhaps in 10 years I'll look back into this video alright so thanks for watching and I'll see you next time foreign