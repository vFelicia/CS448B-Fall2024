hello and welcome I'm your Cod monkey in this video we're going to learn how to use Unity Matchmaker this is a complete matchmaking solution for all of your multiplayer games in order to match players together and automatically start the servers for them to play this is very well integrated with unity game server hosting or as it was previously called multiplay which is the tone that I covered in the previous video with both channels together the players just press a single button in game and in the background the system won't match players together according to whatever rooms you define and automatically start the servers for them to play this is an extremely robust production rate tool it has already been used by big studios like respawn entertainment and Team 17 it works on any engine and on any platform you can Define all kinds of rules with as much or as little complexity as you want easily set up some skill based matchmaking or make it based on location or map type platform or anything you want for the demo for this video I'm going to use my own game kitchen counts which was fully made from scratch in two free courses go watch those if you want to see how the entire project was built and how it got to this point using that as demo I will show you how I implemented the UNT Matchmaker you can download the complete project files to inspect how it all works for yourself and also this video is sponsored by yinty learn more about Matchmaker and Unity gaming services with the link in the description okay so let's begin as usual on the ENT dashboard go ahead and select your project then over here on the left side go into multiplayer then let's scroll down and go into Matchmaker and over here let's set up the Matchmaker so let's follow the usual setup and the first one is integrate Matchmaker with this as you can see it supports unity and real and even a custom engine and for using that you can either use the SDK or the API directly the SDK is the easiest method so let's go with the ntsdk next now we need to link up the project so here I am in unity and first of all up here on the top left corner make sure you are signed in if you see a button saying sign in then close unity and open up the unity Hub then make sure you are signed in there before opening up the project when you are signed in go into edit and project settings then let's go down here into the services Tab and either create a brand new project or use an existing ID I don't really have one so I'm going to select that one okay I have the project selected and I'm just going to link it and if there you go success so if I can set up here and let's go and click on next now we need to install the package this one does not show up on the apexure manager by default so we need to install it through the name and it's very important that you copy the exact name so let's use this button here to copy directly to the clipboard then back into the intl let's go into window package manager and up top click on the plus button then add package by name and make sure you paste in the exact same name make sure you don't make a mistake the name has to be exact and let's go ahead and add and if there you go here is the Matchmaker package so back in the setup everything is done let's go ahead and finish okay so the integration is working the next step is to create a queue this basil is going to represent a specific type of tickets so you would have for example perhaps a rank you then a casual cue maybe a queue for a specific map maybe another one for a specific game mode so let's go ahead and create a queue now let's just give it a name so let's go with default queue then for the maximum number of players on a ticket for example you could make a queue only for summer play and one for Group Play for this one let's keep it simple and just make some a play so maximum of one okay let's create alright the queue is done so now we need to create a pool a pool is how you're going to group tickets together to find a match then you can have multiple which you can then match with filters so for example you would have one default pool then one for just beta players one for a specific version maybe a pool for super highly ranked players another one just for Xbox or Playstation and so on so let's go ahead and create it and let's assign the queue that we just selected then let's give the promo name let's go on this one just default fool and for the timeout in seconds let's say you want to search for 60 seconds and Yep this one this first one is going to be the default boom so we cannot add filters we can only add filters to extra phones so for now let's leave it on default and next then for the hosting settings this tool like I mentioned is very well integrated with game server hosting or multiply this is what I covered in the previous video for automatically spawning up servers in the cloud so you need to have multiply set up in the same project in order to use this let's go ahead select the fleet and select the build config like I mentioned then you could make different pools that use different builds so that's how you would have maybe one phone for regular players and one for beta players you would change it here let's go ahead click on next and now here is the really important part the rules so this is how the players are actually matched up this one is the true power of Matchmaker here you can go as simple or as complex as you like this is going to differ a lot depending on the specifics for each game so I'm going to set up the rules specifically for my kitchen chaos game so first for the match definition let's give it a name let's name it just normal for a normal match then for the region I'm in Europe so I'm going to select Europe and for backfill this basically means you want players to join servers that have already been created with some players or do you only want to make sure that the players in the tickets they create a brand new server every time so imagine for example a game like Battlefield where the game already started in that case you probably do want to allow players to join in the middle of the game this also helps with Team balancing for other games you might not want this you might just want to group The Players together directly in the Matchmaker and nothing else afterwards in my case for my game kitchen chaos we actually already defined rules in multiplayer course where we only want the players to join in the very beginning and never in the middle but then in the multiplayer video I also set it up to only accept layers in the very beginning sectionally the rooms here are also slightly related to the rooms on the game server hosting in my case I'm going to set back film to true in order to allow the players to get grouped together in the character select scene then if someone leaves the game before the game starts they can still join but as soon as the game actually starts at that point backfill will no longer be enabled okay so then we have the team definitions again different games have different rules you can add all kinds of teams you want so for a game like Battlefield you would have probably at least two teams but in a game that is free for all like for example a battle royale or in a game that there's no concept of teams like for example kitchen chaos for here let's just make one team so let's just give this team the name all then the team count so this is the number of replicas for this team basically if you have a game kind of like CounterStrike where you have terrorists and counter terrorists for that kind of game you would make two separate teams but on games where you just have side a and side B for those you could make them rebellious in this case there's only one on team so let's put the minimum and maximum both at one okay so next the player count for kitchen chaos the game is playing about with any number of layers up to 4 so here we would put 1 and 4 but actually let's put it four and four meaning that this will only start the server once four players are ready to be matched together which means this is also a great time to look at range relaxations this is an extremely powerful feature basically we have it set up to only match players if there are four players available so just like this if we only have two players looking for a match they won't do anything don't keep waiting until they find four but like I said for this game the game is actually playable with fewer players so we can make it set up so that it starts looking for groups of four players and then let's add a relaxation this one is going to replace the minimum value and let's replace it instead of four and let's replace it with just three and let's say after maybe 10 seconds so it won't try finding four players to group together for 10 seconds and after 10 seconds if it still does not find them then it won't start looking for groups of three players we can also change here the ticket H type so if the oldest ticket has been waiting for 10 seconds or the youngest or the average of all the tickets so you can add this relaxation then we can add a bunch more so let's say for example after 15 seconds let's start looking just for two players and after say 20 seconds let's just look for one player because again this game this specific game can be played with one or four players but at the same time since we enabled backfill up here that means that even if the server starts with let's say just one player then the other players will still be able to join that same server also by the way just a quick note over here on the right side you've got buttons to collapse on the rooms so if you want to get a better view this can be quite useful okay great so we've got our own team and then we've got rooms for this specific team so here you can do all kinds of logic the first thing you have is over here all kinds of types to do all kinds of logic comparison then you can test if the wrong should pass or should fail you can also add relaxations and so on so for example one of the more common scenarios would be skill based matchmaking so let's name this one the skill rule and then for the type let's go with difference then let's say this room should pass then for the source let's go with data in all the players we can set this data through the package SDK that we're going to see in a bit so let's call the data path the skill and for the number let's go with a difference of say 200. obviously this is up to you what the numbers actually mean and then we could also add some relaxations so for example let's set a relaxation of type let's say disable so after 10 seconds if it still does not find any players that match up this skill rule which means if for 10 seconds it does not find two players that have a skill difference of less than 200 if so then it's going to disable this Rule and it's no longer going to take the scale into account so this is a super simple way in order to add skill based matchmaking to your games and then finally down here we have the match rules now these are the same thing except they apply to the entire match in every single team in our case since we really just defined one single team because that we essentially already have a match rule okay so that's all our really nice logic also by the way one thing up here up top you can see two buttons so one for the logic Builder so this is the one that we're seeing and then you've got one to see pretty much the exact same data but look at it in Json and over here this is all editable so you can edit any of these fields this is just a text box so you can just type anything so if you prefer manual text editing then maybe you can use this one or you can really just using logic Builder which is pretty easy to use okay so with that we have set up all of our rooms so let's go ahead and create and if that's it the pawn has been created and now if you want we can create some additional pools so here let's go ahead select the queue let's go ahead add some different phone name and over here we've got a point with filters so let's just add some number and go into next let's select the fleet and the build config and if then here we have the filters for this phone so for example here we could add a film like platform and for the operator let's say equals and say value equals Xbox so basically with this then you would assign this field in the practice SDK and it would only match Xbox players in this pool so it filters you can really expand upon the pawn system to add all kinds of rules and separate your game into as many pawns as you want but for this tutorial let's stick with the simplest approach so let's not make model components let's just cancel and okay with that the setup is completely done over here on the side we can click on the cues in order to view our cues and up over here we do see the default Hue that we created then over here we can see the settings so the number of players on the ticket we can go and inspect on the pools and if here's our default pool here's the fleet to build config the timeout and so on and if we go inside over here we can change the name and we can also inspect or change any of the rules alright so that's really it for the setup over here on the dashboard now let's go into unity and implement the package SDK so here is the game in unity again I made this entire game in the two free courses go watch them to see how this project started from scratch and how it got to this point and after that they also implement the dedicated server logic from the previous video so here on the lobby scene I just had this Matchmaker UI script it really just adds this button and over here is the code so really just has a button reference and when we click on the button we're going to find the match so that is going to run this function and how it finds a match is it goes inside the Matchmaker service inside the instance and creates a ticket also one very important thing is that this must be called only after initializing the unity services and Authentication that is actually handled over here on the kitchen game Lobby script over here as soon as this one starts it initializes UNT authentication then it goes over here into the unity Services initialize and then the authentication Service now that means that in a proper game you would probably block out this button until the authentication completes but for this simple demo I can really just wait one second before clicking on the button so anyways you initialize Unity service and then you can create a brand new ticket for creating the ticket this one takes in list of players and for the players to find over here Unity Services Matchmaker models player also one reason why this takes a list and not just a single player is to answer a question that some of you might have which is how do you find a match as part of the group well this is exactly how basically the players would get together possibly by using it in the lobby then the lobby owner would send out just one ticket including all the players in that Lobby so this one takes a list of all the players for each player you include the authentication ID and then you can add whatever custom data you want this can be a custom type that you define for example I Define this one up here and I just defined a scale field so just example like I set up the dashboard you can Define whatever that you want you can send either a custom type or really just send a dictionary of string object so either way it works and then the final parameter over here takes in the queue name and for this one make sure this name matches exactly what you wrote on the dashboard perfectly okay so that is basically going to create a brand new ticket however just by doing that it won't actually join the game automatically that just creates a ticket we need to manually handle joining and how you do that is by pulling the state of the ticket so over here it stores the ticket response so this is the one that returns from this function then with this one down here on update we have a simpong timer for the maximum power amount for this one according to the docs you should do it once per second so I just put 1.1 in order to make sure that I don't get rate Limited if you do it too fast you don't start to get errors so do it a little bit less than once per second so that means that every second it is going to run this function to pull the Matchmaker ticket then this one calls the function to get the ticket async so that passes in the ticket ID in order to return a response so this is going to return what is the status of this ticket with that first of all if it returns null that means there have been no updates to this ticket so just keep winning but if it is not known then we're going to check the type and it should always be of this time so the type multiply assignment if so then that means everything is correct and we have some update so then we can just cast the ticket centers response.value as a multiply assignment and on this multiply assignment we can then check out the multiply status then we have all kinds of possible statuses so first we have an in progress this means that it's still searching so let it keep searching then maybe we have a film for some reason like perhaps your multiplayer settings are incorrect and it could not start the server or alternatively we can have a timeout this means that it either could not find a match or it could not start the server within the time limit that you define in the dashboard now in my testing it seems that timeout usually only happened once for the very first time that I was looking for a match it's probably related to how game server hosting synchronize evil data and how it takes a bit longer to do a concert but after that first time I never got a timeout so if it's neither of these states then it's the one up here so it's the phone state if so then really that means that it found a match so with this you can go inside the multiply assignment in order to grab the IP and the port and then with that data then you can go inside the NT transport and as usual set the connection data and finally start the client after that then the game only proceeds as normal so that's really it for the Matchmaker on the client side however there are some other things you must also Implement on the server side if you just do it just like this then it will only create brand new servers with whatever tickets are active so for example if four players are looking for a game at the same time then two indeed make a game with those four players however if one game already has a player waiting in the character select and then afterwards another player tries to find a match if so then just like this it won't actually join that match it won't create a brand new server for that second player meaning that just like this we don't actually have backfill enabled so for that we need to add some code on the server side so over here on the kitchen game Lobby script this is where we added the dedicated server logic in the unless video so if we go down to where we were allocating the server so here we've got the multiple events we allocate the multiplayer and yep here we got this function in order to allocate a server so we get the server config we set up the connection data and over here we set up the backfield tickets now the way that background works is you need a different type of ticket you need a specific backfill ticket these are separate from regular matchmaking tickets and actually multiplayer already automatically generates that how you get it is through this function so multiply service you go through the instance and get the payload allocation this returns an object of this type which you must create so this type is defined over here this is in the builtin type so you need to add this exam like this onto your project now I found out this time because there's actually another function which Returns the same thing if we go into the multiplayer service instance you can get the payload as plain text and if you do that that returns some Json then you can see that these Json structure is exactly the same as this type right here then this type as you can see it contains a background ticket ID so recently up here we get the parallel allocation we grab that one and from that one we grab the background ticket ID and we store it however just like on the client side we also need to constantly pull the API so again we have a simple photo timer so here I Define a timer and a timer Max again there is a rate limit so make sure you don't do it too often so over here just once per second then it just counts on timer and it's going to run this function here is the function that we're going to run on every single second so here it's going to go inside the Matchmaker servers and it's going to call the function to approve the backfill for the ticket meaning that this won't tell Matchmaker that this server has some slots available to backfill then the Matchmaker itself receives that message and allows other players to join the server that is why over here I'm only calling this function if the game itself if that one has available on player slots if it doesn't then it will not call this function and Matchmaker will not send players onto this game another thing you must do is update the Matchmaker so you need to call this function to update the backfill ticket need to do this if something changes like for example if the player list changes or the map changes or something like that in this simple game that I'm using here the only thing that can change is just the number of players so basically I'm just calling this function over here when the player that network list changes which means when a player joins or leaves then it's going to run this and over here I'm just going to update the back film ticket with the new player data and finally you must also delete the backfield ticket when the game is no longer accepting players so that the Matchmaker knows not to send any more over here I'm doing that based on an event here on game starting so this event is fired when all the players are ready and it goes into low the game scene so it's over here that I'm running this event and simply calling the lead back film ticket once you add all that logic here is the final result so I've got multiple builds running also by the way just for debugging purposes in order to have multiple builds running on the same PC I have this code setting the profile to random names this is only necessary for debugging just so I can run multiple Builds on the same PC otherwise all of these would end up with the same player ID which wouldn't work so this year is for testing but obviously you would not use this in the final game so with that here I have multiple builds running and in the dashboard I can see all of the servers are simply available they're not yet running so they're waiting to be allocated and used now on this one let's go ahead and try to find a match and as usual based on our rules it's going to take some time because first is going to try to find a game with four players but there's only one player searching so it will keep looking and relaxing rules until it gets to the room whether it only needs one player to start and if there is connecting and here I am in game okay great we can refresh the dashboard and we can see yep indeed one server was indeed allocated now let's try joining with four players at once so let's get all these prepared and let's go ahead and try to join all of them so try to join all of them and you have to look at what happened since we had four tickets searching for a game right away it created a brand new server for just those four tickets and now if I try to join with just one more once again it's going to count down and relax the rules and yep now he joined this one alright great then here in the dashboard we can see all kinds of stats of the tickets that were created matches and so on and in the servers we can see how many servers are allocated then we can go inside and see the logs and so on so this is the true power of this system once it's set up everything is automatically handled for you the players just press a button and everything automatically happens in the background either they go inside an open server or it creates a brand new one alright awesome okay so this is unity's Matchmaker it's a really powerful tool for adding matchmaking to your games when you combine it with unity game server hosting you end up with a really complete solution for all of your multiplayer needs learn more about it with the link in the description or download the project files for this video and also check out my two free courses to see how this multiplayer game was built from scratch whilst writing some good clean code and some good projects version alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and I'll see you next time foreign