in this video we're going to make a launcher with unity this is very easy to do and it's exactly what i did to make the code monkey steam app it's a great project to build for example to organize all of your prototypes and mini games into one nice complete package let's begin hello and welcome i'm your code monkey and this channel is all about helping you learn how to make your own games with indepth tutorials made by a professional indie game developer so if you find the video helpful consider subscribing okay so this is going to be a very simple video since this is quite easy to do the goal is to make a launcher very much like i did for the free code monkey steam app there's a link in the description in case you want to try it out now over here i have my three other minigames that we're going to launch so there's the top down shooter there's minesweeper and the wash your hands video game these are all standard windows builds and they were all made or showcased in previous videos so check those out link below this video is made possible thanks to these awesome supporters go to patreon.com unitycodemonkey to get some perks and help keep the videos free for everyone so okay here i am in my basic empty scene let's begin by making a basic ui for our launcher so first just go into the canvas and first let's make a container for all of our buttons so let's call this the launcher ui let's extend to occupy the whole thing all right that's the container now inside let's make a container for a button so for example let's call this the top down shooter button and then inside let's make a nice image so we can click on it alright so there it is now let's make this a simple button now if you want you can use the standard unity button here i'm going to use the button ui from the utilities which is always you can grab for free from unitycodemonkey.com and with this button class i can easily add some mouse over behavior just to make it look just a little bit better so let's just make a nice image that's going to be enabled when we mouse over all right now let's see this basic button in action so here it is and as i mouse over yep there you go there's the nice image all right so far so good now let's make our script to handle our actual launcher so a new csharp script call this the launcher ui let's drag it onto the launcher now in here we're going to launch our apps so let's first add the code to our mouse click so we make a private void awake and awake let's find our button we get the button component and we modify the click function so this is the action that will be triggered when we click on the button so it's in here that we want to launch the game now the way we're going to launch an external executable is with the process class and that class is inside using system.diagnostics now we can access the process class and inside we've got a very nice function called start and here you see that we have a string for the file name so that means that we're going to need the path to the actual executable and now in order to find the string for the path we're going to first start off by accessing application in order to get the data path so this will be the path to the assets folder okay so here i am in the explorer and this is our project now the builds for our games are inside this folder and in here we have the builds and the various builds so it's in here that we're going to construct a build for the actual launcher so let's first see that to see where the application.datapath won't go to so here let's just quickly make a build go into build settings and we're going to make a build and choose the belt folder and build okay so here we have our build created and now here the application.datapath will go towards the path inside this data folder so it won't give us this path up here and now our builds are on the folder above it and inside the folder builds so taking our current path we go into the folder above it with dot dot all right so now we're on this folder now we go inside builds and then inside builds in this case we want to launch a topdown shooter and then inside the actual executable is yep like this one all right so that's our complete path and that's all we need to send to our process okay so just like this our topdown shooter should be able to be played when we click on the button let's try so here we make the build again place it in the same place and let it run all right here's our build let's run okay here it is there's the button and click on it and you have the top down shooter starts playing so hit play and there you go now i'm playing the really nice top down shooter so everything works it's the exact same executable all right awesome and as soon as i quit from the actual game now i go back into our launcher alright so we've got the basics pretty much down now we can easily apply this to the other games and then expand upon it alright so i've added two more buttons for the two other games and just for fun i've gone ahead and swap the images for some simple videos so it just looks really nice okay now let's check out the code now here we just have to do the exact same thing for the other buttons so one of them is going to be the mine sweeper button and the wash your hands button now once again we need to modify the path all right so just like that it should be working once again let's test so that means we need to make our build and now one thing here which is previously you saw that launcher was launching on full screen now maybe that's what you want to happen however in this case i think for a launcher it makes more sense to be in an actual window so over here you can click on player settings which opens up this nice window and then in here you can change from full screen mode and set it to windowed and just set it default screen width and height so in this case let's go with 1280 by 720 so just basic 720p so again this is not necessary just i find it better to have the launcher on an actual window rather than on phone screen so that's why it's nicely separated between what is the launcher and what are the games right so just like this let's launch it okay here we are let's open up the launcher and yep we have our very nice launcher window and now click on this one and there you go we are now inside the fully playable topdown shooter so just click roll around and yep everything works all right let's quit next week we've got the minesweeper so let's try and yep here we are now playing some minesweeper so there you go and yep and if there you go it does work and lastly the wash your hands video game and yep here we are inside our build so let's spray everything around on this one to wash his hands and yep there you go this is a really nice game all right so everything is working we can launch any of our games from our separate launcher app awesome okay so with all of the basics of the launcher fully working now let's expand upon it and play around with some things now over here when we call process dot start we can actually grab the active process reference so let's store that in a field so a private process for our process and when we start let's set it and then we can also make a private void update and one of the things that we can ask on the process is going to process and ask has exited so this one will be true if the process has exited okay so with this we know when it has exited and after it has let's set it to null so this one only triggers once and now in here let's show a really nice message here in our canvas let's add something on top okay so we have a nice little message window so we want to show this once the games are active and then hide it when no game is active so for that let's grab our message and by default let's hide it so set active to false then when a process is launched then we set it to true and afterwards when it exits then we set it back to phones all right so very basic very simple let's see if it's working okay here we are and now let's click let's launch minesweeper and if there you go as soon as it starts we can see the message and if i quit right away in here if there you go the message is gone so we are correctly identifying when the process is launched and when the process exits okay now let's customize the message okay we have a reference to our text now let's clean up our code a bit and make a proper function all right we have two separate functions so in here we hide it and on a week we also hide it and then on show we're going to call this function okay the message should be working let's test okay so here are let's run launching the wash your hands and yep we saw the message just briefly so the washer hands game is now running now we can all tab and yep there you go we can see the message so now go back into the game and now let's quit and if there you go the message is gone and now if we open up a different one yep there you go we see a different message and yep there you go it's gone alright so here we have our launcher fully working now as i was making the code monkey steam app i actually found an issue with this system the launcher for the code monkey steam app is actually pretty complex it has tons of videos playing so it was actually using up quite a bit of cpu and gpu so with that being used it was actually causing the underlying games to play much slower since the launcher was taking resources in the background now we can easily solve that by making sure that launcher does not run whilst it's in the background so to do that it's extremely simple over here on the launcher we can do it through code so we just access application and go into run in background and set this to false so don't make sure that the application does not run in the background another thing you can also do related to performance is access application the target frame rate just in case your launcher is running way too fast so you can limit it to let's say just 100 frames per second so just another option in case you have some performance issues so with this it should no longer go above 100 fps and it should not be running on the background another place where you can change that setting is going here onto build settings player settings and if down here you have one for run in background so you can just untick it in here or do it through code whatever you prefer so let's test okay here we are and the launch is running so we can see all the video is currently active now let's launch a game and there you go right away as soon as this window goes into the foreground that one now stops so the launcher is no longer taking up any resources and as soon as you quit and goes back to the foreground if there you go it goes back to being active so doing it this way you're not going to have any performance issues by using launcher to launch your actual games all right so that's pretty much it here we have a real nice launcher that we can use with some custom buttons all of them nicely polished with some nice videos and we can click on it and there you go now we are launching one of the games then click on another one and there you go we're launching another one and click on another one and yep here we are in full screen playing our full game so as you can see this is really simple and it's something you can easily build to organize all of your various prototypes or any games that you've made so perhaps if you're looking for a job you can make a launcher and attach it to your cv and that should help you really showcase your skills or you can also use it to launch anything you want from it you can run any executable you want so you could just make a really simple launcher with some nice visuals to have buttons to run all the programs that you normally use alright so if you found this video helpful consider liking and subscribing this video is made possible thanks to these awesome supporters go to patreon.com unitycodemonkey to get some perks and help keep the videos free for everyone as always you can download the project files and utilities from unitycodemonkey.com subscribe to the channel for more unity tutorials post any questions have any comments and i'll see you next time