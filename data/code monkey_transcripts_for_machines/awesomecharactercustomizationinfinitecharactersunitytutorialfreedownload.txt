hello and welcome I'm your KMI here let's learn how to build some nice character customization the player can choose all kinds of different visuals to customize their character they can pick anything and then they can load into game using their custom character with their customization we're going to build the scenes from scratch and then you can also download the complete project files from the link in the description that is literally the exact same final code that I'm using in my game Thinking Gardens and I'm also going to cover how I handle and synchronizing the customization in multiplayer in my game now this topic is actually a tricky one because there's a million ways you can do something like this and basically all of those ways are all going to be dependent on how your assets are set up in a previous video I already talked about four separate ways you can do that you can change the material you can change the entire mesh or you can add Parts with a skin mesh render or just as a regular preout also quick mention the Cy Store is having their Black Friday sale if you want to pick up the modular character pack that I showed in that video check out the link in the description before the sale ends you can use roughly the same logic that I'm going to Showcase in this video with that asset it's a slightly different method but the logic is mostly the same so you you like the style check out the cyy store Link in the description now in this video I'm actually going to do a stepbystep tutorial on another different method the method we're going to use is based on swapping out individual meshes for each body part the reason for why I chose this method wasn't really chosen by me it was based on the asset pack that I'm using so I'm going to showcase exactly how I handle player customization in my game which by the way the game is actually out now on seam so if you like some automation Colony building and defense mechanics then check it out with a link in description so here is the character customization just like I have in my game so I've got a character right here and I've got kinds of buttons to change all kinds of parts so I can change the player color I change basically the skin color I can modify the hat that the player is wearing I can also remove there if I want and then play around with the various hairstyles I can swap out the shirt I can swap out the pants the shoes and so on so as you can see I can modify pretty much anything and get near endless variation then after customize my own character I can save the character and when I go to play a game yep here I am using my custom character in game so let's build a system exactly like I have it in my game now like I said the various ways to handle character customization are going to be dependent on how exactly your assets are set up here is the asset pack that I'm going to be using in this tutorial and I also use it in my game which by the way this asset is actually currently on sale live right now on the Black Friday sale on the unity accur this is a great pack for making near infinite amount of variations as long as you're looking for a cartoony stylized style this pack has tons of body parts tons of colors I think all the characters look really great really nice so if you need it go ahead and get it while the Black Friday sale is still alive the downloadable project files that I made those were made using this asset now naturally I cannot include this actual asset in the project files I didn't make this asset so I cannot distribute it but if you open the project files and then you load this asset on the same project everything should load correctly okay so let's make our character customization system here I've got the character 7 asset in my project and inside I've got the basic character there's a mesh and there's a nice prefab then if I go inside I can see all the various body parts to see how it's actually set up it's got all the various body parts right here like for example here is a body and then basic L they set up different meshes that have different UVS on the vertices so the whole thing uses just a single material just a single material with a single texture all of the body parts use the same material and then the colors are essentially handled over here by the mesh so if I go there's this body mesh and you can see the body is in yellow then swap to the next one and now it's in blue there's another blue brown red yellow and so on so in order to swap the color of the player or in order to swap any of these attachments in order to do that I simply modify the mesh and don't touch the materials at all this is honestly a pretty clever way to do it there's no need to worry about bones or materials or anything just swap out this one mesh field and everything works great so really the more complex part of the system is just setting up the UI and figuring out how to manage all this data everything else is actually pretty simple so here I've Got My Demo scene and I just dragged my character prefab then I also place the camera just looking at it which by the way here's a quick tip for positioning a camera you can position the scene camera wherever you want it like let's say like this and then you can select the character game object or literally any game object and you can press the shortcut control shift and F and that basically orients to select the game object based on the orientation of the camera on the scene window so just a fun quick way to easily position cameras or really any object okay so that's my scene setup and here is my canvas and it's set up as I normally do so screen space overlay then on the canvas scaler it set up the scale with the screen size for the reference resolution I use 1080p just like I always do and finally match with the height so really the same setup that I always use and now inside let's begin by making our UI windows so let's create an empty one let's name this the character customization UI now inside let's add a new UI image this is going to be the background and just for fun over here in the project files I also have a nice background from another Spacey y pack this is the same one that I used in my game so I'm going to use this but of course you can use whatever UI Vision you want so I'm just going to drag this let's also make it stretch to occupy the entire parent so select it to stretch put everything on Z 0 and let's modify the size of the parent itself then just make some simple elements so so let's make a text here let's say character creator put it in Bowl down the center Center everything disabled width and height both at zero let's anchor it to the top and just move it up there just a bit of fun then for testing let's begin by making a simple button so let's go inside let's create a new UI make it a button this let's name this the color button make it a little bit bigger and inside for text let's say color and put it in white okay so there here's our super basic setup now let's add some logic to it so first let's make a script to run it so let's create a new C script call the same thing so character customization UI let's attach script to the main game object and open okay so now here first thing we need is really just a reference to our button so let's head here and as always let's write some good clean code so make it a serialized field private of type button which exists inside unityengine.ui and let's call on the color button by the way if you don't know what I'm using serialized field private instead of making this public if you don't know know that then go watch my video that's a very important topic back in the editor we have our field so let's drag the color button reference and over here let's just add a click event so let's do a private void awake and on awake let's initialize our color button and let's go into the onclick event and let's set a listener and inside let's do a quick Lambda just to make it easy and right now let's just do debug.log colar button by the way if you don't know this syntax this is a lambdaa or an anonymous function it's a type of delegate and I covered delegates in detail in a previous video and also of course alter L you could just come over here and on the unclick you could just easily add over here the function but personally I prefer to do it through code but either way works okay so let's do a quick test the game is playing there's the character press the color button and there you go we have L okay so far so good now let's end on modifying the character but as always we want to write good clean code meaning we want the character customization to not be dependent on this UI element for example later on let's say we want to load this character in a regular game scene we do not want to be dependent on this UI meaning we do not want to handle the character customization Direct directly inside thei script instead let's make a proper script that applies to the character itself so over here let's create a new C script call it player character customized so now let's select the character itself so here I've got the character so this is the object that I'm going to attach the script to right next to the animator so let's attach a script and now let's open it okay so now like we saw this asset pack this is all based on modifying the mesh object and if we look at how the character set up let's say over here the color so this is the body this has a skin mesh renderer which inside has a mesh Feld this is the only thing we need to modify so basically we just need a reference to this skin mesh renderer and reference to all the various meshes that we want to apply so up here on this script let's add our references so let's make a serialized field private let's begin with the skin mesh render and then let's make another one this is going to be our mesh array and we're going to make it a mesh array we're making an array so we can assign all the meshes with all different colors back here in the editor here's the character script and yep we do have our skin mesh render and our mesh array so for some reason let's just do it with the body so let's just drag the body skin mesh render make sure you drag the external object that contains the skin mesh render so I draged the example that one and then for the mesh array let's add it so here's another quick tip you can actually copy paste elements so if I go inside the body over here I've got the body mesh so now I could click on it in order to be able to see it over here on the project or I can right click on this field and copy then go back inside the basic character and right click and paste and yep there you go there's the body now let's add another element and let's select the next body so this is the one that is in yellow and let's select next one which is in blue then let's set another one let's select the brown and add another one let's select the orange and another one and let's select the red now obviously you would want to select all of them instead of just a handful of them but now for testing just these ones these on too so back in the code all we need is really just a function to change the color something pretty simple let's make it public because we're going to call this from our UI script let's make it void and call it change color and now here let's simply grab the next available mesh so first that means that we need to figure out which mesh are we currently using so we go inside the skin mesh render and we have the mesh this is the mesh that we're currently using the shared mesh we just need to figure out the index inside the mesh array and for that we can go inside the mesh array and we can call a function to get the index of so let's go inside system. array and let's get the index of this takes a parameter the mesh array so let's use our mesh array and then we have the value so that's a value this is going to return an end for the mesh Index this is the index of the mesh that we have currently selected and now we really just want to assign the next one so for the next one we go inside the mesh array and we're going to want to access it on the mesh index plus one except if we do it like this obviously we're going to go past the array Max we want to make sure to loop back to it so as always let's use the modulo operator modulo of the mesh ray. link and let's put this inside parentheses so we get the modulo of the total so with this as we increase the mesh index once it goes past the mesh ray. length it Loops back into zero that way we can constantly change the color then finally we just need to assign this back into our shared mesh okay so this is constantly going to change the color okay that should do it so we really just need to call this function so over here on the UI field obviously we need a reference so let's add a reference to our player character customized okay we have this and now when you click on the color button let's go inside this and just call change color okay that should do it let's test here in the editor let's just assign the reference so inside the character customization UI over here let's just drag the basic character okay let's test so here we are and the character has a yellow body now I click on this button and there you go turns blue and turns brown and turns orange and then sort of red and now if I click again and Y there you go goes back into yellow and swap it out and yep there you go it's swapping all of the colors okay awesome so this is really the core concept behind this system we really just need one more thing to get the absolute Basics working we need to handle all the various body parts now here on this code you might think of the obvious first approach so we have the skin mesh render and array of meshes so we would really just need to copy pastes for every single body part we'd write different variables for each body part now technically this would work but obviously this does not look good so let's do it in a much more elegant manner instead of tons of copy pasting let's make a class that represents data for a single body part so let's do a public class let's call it body part data and now inside we have pretty much those two except over here since this is going to be a subass field let's make them public this is basically just going to be a container of data so let's do a mesh array for the mesh array and also a skin mesh render for the skin mesh render and now instead of having tons of arrays in tons of skin mesh renders for every single body part we just have an array of body part data so just an array of this for the body part data array now let's just comment out these errors just so the code compiles so we see the editor and here in the editor looking at the custom basic character and nope there is no field nothing shows up that's because custom classes do not show up by default in the editor in order to make this class this type visible in the editor in order to do that we need to mark it as serializable so we need to add the attribute system. serializable if we do this and Save and if there it is now we do have our body part data array and inside we have a list so let's add an element and if there you go it is an element that contains both of our pieces of data so we've got the skin mesh render and we have the mesh array so let me just assign this so assign the body skin mesh render and let's also assign the body mesh let's assign the various one so I've got the body let's put the body in blue let's put the body in brown and let's say the body in red okay now let's add another element for this for a different body part and instead of the body let's add a different one so let's say the hat let's modify the Hat then again all we need is to assign the mesh Ray with all the various hats so let's go inside the Hat in order to find all of the various hats they are over here inside the meshes inside the hat and yep here we have all the various hats as you can see there's tons of them that is why this character pack this one can make pretty much infinite variation so here I have assigned some hats and I'm going to also add another special thing which is I'm going to add an element and then I'm going to click to select it and press on delete in order to clear that one so this one has no mesh that is because obviously we also want to add the ability in order to have no hat okay so with this now we have the body with the various colors and the hat with various hats so now here in the code let's modify our function in order to change the color so let's uncomment this and again we've got the skin mesh renderer and really we just need to access the data inside of the body part data which is inside of these ones so for example for the color I know the color is going to be on index zero so let's go index zero grab the mesh array then on index zero grab the skin mesh render and same thing for these okay just like this and by the way right now if you are thinking that hardcoded indexes if you're thinking that looks like some pretty bad code if so then great job on having that thought just hold that thought wait a little bit we're going to see that in a little bit so here we've got the change color and let's make another function so this is going to be the change hat and really this the only thing that we modify is just the index instead of being on index zero let's go into index one okay so now over here on the UI script let's do the same thing so let's add another button for the hat button and we're going to do pretty much exact same thing so on the hat button we add a click and this is our our hat button and we're going to go and change the Hat okay we just need to drag this reference so here in the editor here is the UI script let's duplicate the color button and over here let's put another one underneath this is going to be the hat button and inside for the text let's say hat then on the script just drag the reference okay so with this let's test all right so now if I click on the color and there you go it does change the body color okay so far so good and click on the hat and if there you go it does change the hat so I can modify the Hat I can get it like this sombrero and make it in something like a yellow and there you go everything does work perfectly all right awesome so obviously this system is much better than the original idea of just copy pasting all these fields for every single body part using an actual class that holds all the various data and then using an array of that class type that is much better code however we can still improve upon this further like I mentioned hard code indexes these are not a good thing just looking at this code you can't really tell that index zero is supposed to be the color and index one is supposed to be the Hat there's nothing here that means that's exactly what it means if over here in the editor I just take the element one and I just drag it above there and if we try like this then right now if I modify the color I'm actually modifying the hat so this obviously broken so we do not want to make it based on indexes really what we need is to replace the index with something that makes a lot more sense like for example an enum so up here let's make an enum let's make public enum let's call the body part type and here let's assign all the various body parts so we have the color and then we have the hat with this we have a much better way of referencing each body part type so now inside the body part data we have a list of body part data in order to know which type it is let's simply add a field inside of here so a public body part type and body part type so we just do this and now here in the editor we can assign the proper body part types so for this one this one with various bodies this is indeed the color and this one is indeed going to be the hats so this helps organize our things much better now we do not have any hardcode indexes and now we need to modify these functions and let's actually make a separate function so let's make a public void change change body parts and inside we're going to receive a parameter of type body part type so the body part type and for the logic we're going to do pretty much exactly the same logic except obviously we're not going to use indexes we're going to actually find the body part type that contains this data so let's actually make a helper function to do that so let's do here a private we're going to return body part data and let's call it get body part data and we've got the body part type body part type and now here we just really cycle through array so body part that data inside our body part data array we cycle through it then we see if this body part data if this one. body part type matches the one that we are looking for if so then obviously we want this one so let's return body part data now this should always find something so it should never get down here but in order to make our function valid we need to return something so let's just return all although of course we should really add the arrays for all the body parts so we should never actually get to this point anyway so here we now have a function from which we can get the body part data so P let's grab the body part data body part data and let's simply grab it and pass in this type so we have this and now over here on the function we do literally the same logic and we just replace all this with this and with that we actually also end up removing all this duplicate code so we no longer have a function to change every single different body part we just have one we pass in the body part type and it changes perfectly all we need is over here on the character customization UI so when changing the color instead of using that function we use the other one change body part and now here we access the body part type and we're going to modify the color and on this one change body part and this one we want to modify the Hat okay so let's test so here we are and click the button change the color and yep it works change the hat and yep everything works all right awesome now with this honestly the system is fully working All That Remains is really just filling in these arrays with all of the various body parts this is honestly the part that took the most amount of effort when making my own game as you can see there's 100 hats so I basically had to drag 100 references so making a system like this it's quite laborious in order to drag drag all the references but as you can see the logic is actually pretty straightforward before I show the final system let's just cover one more very important thing which is saving and loading and again this is actually going to be quite simple I'm going to do it the same way that I've always done the same way that I covered in a tutorial video quite a long time ago we're going to make a save object and we're going to save it as a Json string so over here on the player character customize usually I like to put the saving and loading at the end of the file so up here let's make a class for the save object and over here we just need to save the customization data except obviously we have issue right now the data for the customization that data is actually saved on the mesh itself the skin mesh Rand contains the shared mesh for the one that we have selected now we can't directly serialize a mesh so we can't really go into the save object and over here add a mesh field we can't really do that so instead let's use an index instead we need to store both the index and the body part type so let's make another type for it let's make a p class for the body part type index and now inside we just need two pieces of data so the body part type body part type and and then also an INT for the actual selected index and again in order to make this work with our save system we need to make sure this one is serializable so we have this and now over here on the save object we can just store a body part type index array actually let's make this a list just so that it makes it a bit easier to actually save so let's make it a list of body type index list and now all we need is really just a private void save function and over here we just need to construct this list so let's make a temporary variable here just making a list of this and we just need to cycle through all of the various body parts now for that here's a quick tip you can easily cycle through all of the values in a certain inum so up here let's do examply that so let's do a 4 in of body part type body part type and we're going to cycle through it and let's go inside system. inum and inside we've got the get values and basically this returns an array of all the values of a certain enum and we want for the body part type and we just need to make a type of of this type that is going to cycle through all the elements all the various types inside that Eno so we cycle through them then we just need to get the body part data and pretty much just get the mesh index so let's actually copy the exact same thing here so we've got the body part type from that we get the body part data and then from inside the body part data we can get the index that is actually assigned right now so that gives us the mesh index and by the way we can simplify this code since up here we already added using system so we can get rid of all of this extra system so like this just to simplify things a little bit okay so we have the mesh index and then simply go inside this list and let's add and we're going to add new element of type body part type index and inside let's assign the index onto this mesh index and the body part type is this body part type okay so basically we are seconding through every single body part type we are grabbing the actual selected index based on what is selected on the skin mesh render so we get that index we get the body part type and we add it to the list so we have a list of all of the body part types along with the selected index and then we can finally create create the save object so save object any save object and inside we just assign the body type index into the one that we just created and now finally as usual let's go inside the Json utility to convert this to Json let's put the save object and this is going to be our string for our Json let's also do a debug.log just see what this contains and finally in order to save this let's use the simplest save method so really just using player prefs so player prefs in order to save or actually it's not the save it's the set string and let's call it player customization that's for the key and for the value let's store our Json that's the save done so now let's just do a private void load and this one is really just going to be the opposite so first let's go into player prefs in order to get the string the string of type player customization which by the way this is a quick demo so normally I would leave like this but in order to teach some good correct practices let's actually not use strings for our key instead let's go up here and actually write a proper key so private string for player prefs save and we use it here and then down here we can now avoid using strings so let's use and this way we make sure we always use the same string there are no issues okay so anyways we get string and that is going to return our string for Json so this going to be our save Json string then as usual go inside Json utility and load from Json we're going to load of the type save object and the Json is from this Json so that is going to return our save object for the save object okay so now we have the save object and inside we've got the body type index list so now let's just cycle through it so for each the body part type index let's go inside this one inside the save object. body part. index list then now we do really the same thing in order to go inside the index inside the index let's grab the body part type that grabs us the body part data and then we can assign it so pretty much the same thing that we were doing up here except instead of grabbing the next one we go inside the body type data inside the mesh array and you grab from the body part type index we grab the selected index okay so that should really do it we just need to make some save and load buttons so let's actually make this public so that the UI script can call these functions make them both public okay and over here on the UI script let's just add two more buttons one is going to be the load and one is going to be the save and then we're going to run the same logic so these are buttons so let's go into the load button when we click let's do something let's say load and go inside that one and call load and then we have the save button and does pretty much exactly the same thing okay that's it for the code so let's just make these here let's go inside UI we have our buttons let's just do two more so move it down here one for loading one for saving so this going to be the load button underneath the save button then just modify the text inside of it so this is the UN load and this one is going to be the save and finally just drag the references so the unload button and the save button okay so let's test all right so here is the character and let's customize it so let's put like this hat and this can color here we can see the logs and as we click on Save we should be able to see our Json so if I click on Save and there you go it's saved and it saved the body part type index list and saved inside the two lists so the body part type zero and the body part type one this one has the index of three and this one has the index of two so it looks like it did save this is correct Json so now let's stop playing and I'll play again and the character is back on defaults and now if we click on load and if there you go with the exact same character that we just saved all right awesome so with that as you can see everything is working so here is the completed system in my game it works exactly the same thing that we saw in the tutorial so I've got the various parts to change the color change the hair the Hat the shirt and so on by the way for synchronizing the customization in multiplayer I'm doing it like this I've got a network list of type player data this is a custom type that I made and this custom type implements I Network realizable and over here inside I've got a fix ring with 52 bytes for the player customization now this is important obviously the Json string needs to fit inside of this and if you want a more stepbystep guide on how I made the player that and of the stuff this is pretty much exactly what I made in my free multiplayer course so you can go watch that to see how I synchronize the player data over here I literally just added an extra field the only tricky thing is really just over here figuring out the actual amount of bytes for the fix string the first time that I tried to save I use the code pretty much exam like I covered in tutorial so the save object had some proper parameter names but in order to make it a bit shorter over here as you can see I made the parameter names literally just one character that makes it so that the Json save file is much shorter which does then fit inside that fixed ring then here is the character customization seeing in the final game everything is pretty much exactly the same as we just made so I've got a canvas and just has a bit of fun I made this one a screen space camera instead of a screen space overlay just to be able to have this nice slam to the UI I think this looks quite good that's really the only differ see canvas is all set up exactly the same then inside I've got the Character Creator UI and inside I've got all the various buttons for the various body parts I made an individual script on each button just to make it a bit easier in order to figure out which part does which button refer to and here is the final player character customized script so I've got an N for for the body part type I just added all the other body parts then the usual body part type index then I just made a subass for the customization basically if I want to customize a character in order to save that data I'm really just going to save this subass instead of the entire player character customized so just separated a little bit more but all the logic is exactly the same then another slight difference was instead of querying every single skin mesh R to see what mesh it's using instead of that I really just store the body part type index array so this basically stores the current customization State for the actual player character that way there's no need to actually query the skin mesh renders for every single body part in order to figure out which one is being used I already know which one is being used because stored in this array then the same thing just a function to change the index another one to set it another one to get it then a function to randomize which does exam what you expect so just randomizes a certain body part this complete body part data this is what contains all the various body parts so the same body part data type array has the skin mesh renderer the array of the meshes and body part type and then the complete one simply contains an array of the that then some pver functions for getting it also for refreshing it and calculating the maximum index of each type so really just a bit more of a Polish system than what I covered in tutorial then down here just some events for when the character customization changes containing all the data and the current customization just doing some logic in order to get the default one setting a different customization randomizing it resetting change the index and so on so the code is slightly different but it's all pretty much exactly the same exactly the same logic works in the same way as in the tutorial code so here it is in game and I can customize the character and modify literally anything then I can save the character and go into play mode and yep here is my custom character walking around and all the players see the exact same character okay so that's the character customization system you can go ahead and download the project files Link in the description it includes the complete final class just like I'm using in my own steam game and if you also pick up the asset pack that is currently on sale if you import it on the same project it should load all the assets correctly so just with that you should have a character customization system ready to go the Cyber week s end soon so if you need a nice stylized character a customization pack for your game then definitely get it quickly or like I mentioned in the beginning if you prefer the cinti style the logic for using that one should be mostly the same that asset is also on a Black Friday sale on the Cindy store so if you prefer that one get it quickly if you buy through the link in the description it's the same price to you and I get a nice commission so check out both links alongside the free project fils all right hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and I'll see you next time