hello and welcome I'm your code monkey so a while ago I was playing the game hydroneer it's a pretty interesting crafting building automation game one of the more unique things about it is how the game has no UI at all nothing exists outside of the world so there's no virtual inventory all of the items exist in the world itself and there's also no UI to select options like for example what to craft it's a pretty unique mechanic a very unique crafting system and something that is actually quite simple to do so if you want to experiment with making a game with no UI for your next project then let's look at how it's done and before I show you how it's done try to guess how you would make this basically you just need to figure out if a certain item is placed on a certain position like for example above the Anvil that is actually super simple just requires a bit of physics also by the way if you like this format check out the entire How It's Made playlist where I remake various mechanics from various games I've remade some whirl interactions from cyberpunk remade the soil moisture system from Endzone World Part I made the cleaning minigame from Rover mechanic simulator a bunch of interesting effects from Hades and several more so if you want to learn how all those mechanics are made check out those videos If you prefer a more guided path with stepbystep lectures then check out my complete courses learn how to make a builder Defender game using csharp or learn how to make games internally using visual scripting perhaps if you're past the beginner stage and want to make the jump to Advanced then check out my turnbased strategy course to learn how to manage a more complex project and write some good clean code or learn all about Unity with the ultimate unity overview course which contains over 15 lectures each covering a different twohour feature of the engine I'm always available in the Q a section answering your questions every single day so check them all out with the link in the description alright so here let's build this here is my starting demo I have a player character in first person and I can move and walk around this controller is from the official ENT start assets which I covered in another video and then for the assets used in this demo these are from the Cindy polygon fantasy Kingdom pack there's a link in the description if you want to get it so I have this and then I also have a simple script to pick up and drop objects I covered this one in detail in another video go watch that if you want to learn how this system works how to pick up and drop objects with this I can look at any object I can press a button to pick it up it picks up the object and hovers in from the camera and then I can press another button and drop the objects and Falls along with gravity so I have a whole bunch of iron ingots and some gold ingots over here on this table and then over here I've got a whole bunch of gemstones and again I can pick them up on then another script in this demo is for interacting with the info here for selecting the recipe on the player I have this script so it's reasonable just listens to the key down or button down does a Rick has to figure out if the envelope is in front if so tries to get the component identify that it's an anvil and if so then on the E button call the next recipe function and on Mouse click let's call The Craft function then for these two functions over here is the script super simple over here it just Cycles through a list of crafting recipes and for those recipes I'm using a scriptable object I cover the crafting system with script on objects quite a while ago you can go watch that to learn some more Baseline definition is super simple HSA scriptable object that holds a reference to the Sprite object then a list for the input items and finally a output item that's right is what is used over here on the info the envo object inside it has a canvas this is a world space canvas also something that I covered in another video that is how you can place a canvas in the world and use something so over here I've got a recipe image which is just a simple image component and over here it's got a source image so this is a sprite and when pressing button to modify the next recipe it also goes into the recipe image and modifies the new Sprite so this is my basic starting scene I can pick up and drop some items and over here I can interact with the envelope I can tell it to go into a different recipe or I can press a button or to try to craft however trying to craft doesn't actually do anything that's what we want to do so let's build that and like I said all we need to know is to know which items are placed over here on top of the Anvil so over here on the envo script let's go down into the crafting function and over here it's quite simple how we identify things is like I said using physics so we can use physics and over here we've got a bunch of overlap functions each of these has a different shape and what this does is it has if this position this shape overlaps with any other collider in the world in order for this to work all we need is for the objects to have colliders and if we unlock in the inspector we can see over here for example the iron ingots yep they do have a mesh collider so now let's think of which shape makes the most sense in this case for the Anvil it has a bit of a rectangle shame so I think the shape that makes most sense is the overlap box so let's use this function this one as you can see it takes a center position and then half the size now we can write some numbers here to try to find the perfect numbers or for something easier let's just go into the editor and over here let's go inside the interval so here is the Anvil let's create inside an empty new game object let's call it the place items area then over here let's give it a box collider box letter there it is so you can see it that is the box and now we just need to position it correctly and for that we can either modify over here the size so just click and drag all these positions that is one way to do it another one is over here there's the button to edit the calendar this is super helpful so it creates these new gizmos in the scene view there's even little square buttons where you can click and drag in order to reposition and rescale the object so let's use this to position it exactly where we want so let's put it a bit up right on top of there so something like this make it a bit smaller okay so that's pretty good again doesn't have to be perfect this round is just an invisible collider so we just want to test for example if the earning it drops anywhere inside this area so this is correctly set up however one very important thing you might have noticed right now is that if we leave it like this and now I go and I pick up something like this Jewel when I drop it in there there you go everything breaks so the journal is now flying on top of an invisible box this is not what we want so here inside the invo let's just take this object and completely disable this game object that way the collider will no longer have any effect whatsoever we really just want to use these values and also by the way just a quick note over here you might have thought of a different way of doing this you couldn't leave this enabled and just set this one as a trigger and then test for trigger collisions that could work that would be a valid approach however the game that we're remaking here already has tons of physics objects with that the more physics object you have the less performative game becomes so while that would work it would also be unless efficient since you would need to have this physics object always existing in the world whereas here in The Code by doing an overlap box and only calling this on the craft we're going to make sure that we only query the physics world just once when we actually need it but for the most part this is a case of personal preference so if you want you can go ahead and use the trigger method but in my case I'm just going to use this object only to get these values so here on the script let's add a serialized film for that object so a serialized filmed we can make directly of type box collider let's call the place items area box Collider okay let's just go down here let's comment this just so the code compiles so here on the invo let's drag the reference to the place items area and let's drag it over there okay okay so now let's use those values as our parameters so let's go into the place items area boxing letter let's grab the center however here also be careful that the overlap box this one takes a center but that is a gullible position whereas the center on the boxing either this one is in low composition we can see if I'm looking into the place items area over here the center values you can see it's pretty much 0.5 and 0. however if you look at the end volume we can see that the envelope position which is the ignorable position this one is not anywhere near zero zero so what we have here is a low composition but what this function requires is a global position so we need to make sure to add this transform that position onto the center that's how we get the correct position and then for the half extends this one is the place items box collider dot size by the way just a quick note on why this is called half extends that is because previously the boxing letter used to have something called the extents but as you can see this one is now considered deprecating so you should instead be using the size and the reason why that one is half extensive is because this extent used to be double the size but the size already has it correct so anyways just explaining why the name is called that either way half extends equals the size then we can also add another parameter for the orientation so the rotation of the virtual box that we're going to test for the overlap it's over here for the orientation let's go into our boxing leather and on the box lighter itself we don't have any rotation so we need to access the transform in order to gravity rotation and finally optionally we could use a layer mask but over here let's just test for on collisions and then manually see which ones are items okay so we have the overlap box so this is a physics query to get all of the colliders within this position so let's grab a con leather array for all of the collectors so we do it over on the box all right and we have the completed array then from here let's just cycle through so do a for each con later let's grab the color editor from the command letter ring and over here just for testing let's just do a debug download on this collider to see what it says okay so here we are on let's approach and I press the craft button and there you go it does craft and does identify three are actually Four objects so you can see that it found the table so this is one of these tables to the side then it identify the envelope itself twice that's because it has both a meshed on either as well as a box on leather and then also since I'm really close it also identify the player controller and if I grab one of these so let's say grab this Gem and drop it in there and I press the craft button and there you go now it does identify also the item Gem and if I go and I pick up an iron ingot and drop it and I press the craft button again and there you go you have the earning it and the jump all right great so everything is working now we need to do is just identify which one of these objects are items and if they match the recipe input so back in the script here let's identify the items and we can do that very easily because each of the objects actually has an item so holder component here in the editor if we select an iron ingot down here as you can see it does have an item so holder and this one is really just a basic script so here it is literally just has a film for the item as well so this ironing it contains a reference to the iron ingot scriptable object so over here on the info let's just do it let's just go into the collider try to get the component of type item holder so so we try to get this component if so then that means that this object this collider belongs to something within item scriptable object now we need to do is test if this matches of the required input for the recipe for the recipe again I'm also using a script more object and over here inside I've got a list of items so for the input items on list so let's just grab this list so the way we're going to test if everything is inside let's go into the recipe scriptable object and I've got the input items on list and let's just duplicate this one so in your list of item so so the input item list equals a new list and let's duplicate that list you'll see why I'm duplicating in a bit so over here with this duplicating list we don't want to modify the original but on the duplicate let's go into that list and let's come remove and try to remove the one from this item so this one and remove the item so so we get a copy of the input item list then we cycle through all the commanders we get the atomso for that particular object and we try to remove that item so from the list meaning that after this logic is done if down here the input item is on list if this will not count if this one is zero so if the input noise is empty that means we've removed all the required ones which means all the required items are indeed on top of the envelope object so if we have this then we can craft so if the enlist count is zero if so then we have all the required items so we're here on let's just do analog say something and if not say something else okay let's test so by default we've got the dagger recipe and this one takes you our nuggets and if I click right now then unlock I can see nope I don't have the required items and if I drop just one and click on it nope still nope if I grab a gold ingot and I drop it this should not work so yep there it goes then we gotta know so let's take away the gold ingot and drop an iron ingot and now if I click if there go got it yes all right so on logic is indeed working so what's left is over here just spawn the object and destroy the items for spawning the object that is very simple we just go into the crafting recipe so and in that one we've got the output item so and on the ismso over here we've got a prefab so let's instantiate this so instantiate this prefab now we also need to know where exactly we're going to instantiate so we need a Target position let's do that as a serialized film so we can drag it so over here let's make another serialized film a private transform let's go with the item spawn point and also just for fun I also have a prefab with a nice smoke effect so let's also add a film for that one so you private also a transform it's called the VFX spawn item okay so let's drag these references so over here in the editor on the envo let's drag these so first we need to make it so let's right click let's create an empty game object for the item spawn point and then let's just position it right above so something like this okay there's our Point Let's just drag the reference for that one and then for the smoke over here I've got a nice smoke particle effect so let's drag that one okay now we can go down here and we're going to instantiate the prefab and then it asks us for the position where we want to instantiate it so let's use the atom spawn point dot position the atom spawn point dot rotation this will be our spawn item transform and then let's also instantiate that smoke effect so instantiate so the VFX spawn item so the smoke effect on the exact same point exact same position all right so this should already be working no the last thing needed is to just consume the actual items so let's actually keep track of which items are going to be consumed so let's make it a list of type game object let's call it the consume item game object list and then over here let's make sure we add it to the list so let's add this calendar.game object however the way that remove works is this is going to run even if it doesn't find this so we need to make sure that it finds us if we're going to add it to this list so before calling remove let's ask this one if it contains if it contains this item so if so then let's remove it and add it to the list and then down here after spawning it let's cycle through it so for each game object for the consume item game object let's cycle through the list and then just call destroy on this game object okay so we spawned the final item which has a prefab reference inside the atomso again if this seems confusing make sure you watch the scriptable objects video they are super useful this is all super simple stuff then we should spawn the particle effect and we destroy the actual items okay so let's do this so here we are and let's select the recipe and let's begin with dagger so let's pick up just one drop it and try to craft and nope nothing happens all right let's drop a gold ingot and see what happens so let's drop click to craft nope nothing happens now let's drop another iron ingot and now if I click if there you go the iron ingots were consumed and over here I've got my really nice dagger all right awesome let's put it on this thing right here there you go it flies around but yep let's drop it in there and we actually already saw that we can drop as many things as we want in here and it only consumes the things that it requires so if I drop a ruby in there drop another iron ingot and we still have the actual over here the dagger selection so let's wrap this one and drop another one and that one actually fell down but okay let's drop another one and craft and there you go yep it does craft and those objects were not destroyed so it is correctly only destroying the things that are required and now let's talk about the recipe so for the ring so we just need a gold ingot and a ruby a gemstone so let's press and there you go here is my really nice ring look at that really nice all right so here as you can see the crafting system is only working I can interact to select the recipe I can place all the objects that required for the recipe and I can press a button to turn those objects into a completely different object and again the whole thing works without any UI whatsoever there's only one canvas to select the recipe but there's no virtual UI no virtual inventory no virtual nothing everything works perfectly inside the world so this is a really nice really immersive nice system and like I mentioned everything in the home game has no UI so for example how you buy things is you pick them up from the store and drop them on this area then you drop some coins in the bucket and you press a button and again all of this works in the exact same way so it does an overlap box on the buy area to identify the items in the shopping area then there's an overlap sphere on the bucket to end and file the coins and then just triggers a simple interaction with the button so all of it's super simple so if you'd like to experiment with making a game with no UI for your next project then now you know how easy it is to actually do and of course physics queries are super useful in tons of different scenarios so if you weren't familiar with them well now you've gained some really powerful knowledge by the way if you like this format check out the entire How It's Made playlist where I remake various mechanics from various games learn how interacted with the world in cyberpunk it's very similar to this method how I made the path climb animation in Hades how I handle the Scout probe launcher in outer whiles and many more I always enjoy this format of remaking mechanics from interesting games so if you like this format go ahead and hit the like button to let me know again if you want a more guided path with stepbystep lectures then check out my complete courses alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and I'll see you next time foreign