hello and welcome I'm your code monkey and in this video we're continuing to check out the inner workings of the task system in battle royale tycoon we're going to set up a complex task let's begin so this is the scene so far we have multiple workers they are requesting the task system for a task if they get one they execute it before waiting for another task now in the last video we added two different tasks if I click with the right mouse button I can spawn a victory task and whoever grabs that won't do an animation so quick and that one grab does the animation and it's back to request ok great and if I click the left mouse button I can spawn a move to position tasks and the worker won't move to that position so I click here and yep that one grab the task he went there and now he's waiting for another task ok all right so now just moving a worker to a turret position isn't very interesting so let's make a complex task by having them clean up some shells the game is stone development so if you like the concept go to the steam page add it to your wish list and phone so let's begin by creating a sprite to display our shelves in the in handler in here let's make a function down here so make a private void and let's call it spawn or shells we're going to receive a vector3 for our position and this function will spawn a sprite on this target position so let's first create a game object and let's set the game object that get component sprite renderer set the sprite to be a shell sprite which we're going to set up here so let's make a serialize field for a private sprite and call it for shells sprite all right then this pride is what we're going to set down here ok so up here and let's spawn some floor shells on a new vector3 and put it in there all right as you can see these parties correctly being spawned now let's spawn it on mouse click so down here instead of spawning it on start we're going to spawn it in here on left mouse button and we're going to use the mouse world position and that's where we're going to spawn and what's coming out this time so on left mouse click we should now be able to spawn all right there they are and I'm left most like I can now spawn the sprite okay great so this is the sprite that we're going to spawn and now we want the worker to grab a task to go there playing animation and get rid of that sprite so first of all let's comment out the second worker just to keep things nice and simple and now we need to make the cleanup task so let's go into the task system and up here we got the various tasks time so let's add another one make a public class and we're going to call it shown floor cleanup and it won't be of type so inside this class we need to add the fields that the worker will need to execute that task now there are many ways we can do this with differing levels of abstraction an easy way to do it would be just store the transform so a public transform shell sprite transform so let's begin with this since it's the simplest way and then we'll explore other better ways of doing it so let's go into the worker class and so let's make a function to execute our task so private Lloyd execute task shell or cleanup and in here we're going to receive the task system task that shell for cleanup shell for cleanup tasks ok so the way we want this task to be executed is first I want to move the worker so worker dot move to I'm going to move him towards the shell for cleanup dot transform that position that's where it first goes and when he gets there he's going to execute this action now when he gets to the sprite transform position i won to go into the worker not play the cleanup animation when the animation is completed it fires this action so when the animation is actually completed the easiest way is to simply destroy the transform so let's do object destroy of the shelf for cleanup tasks that shall sprite transform that game object so as soon as the animation is completed the game object won't be destroyed and after we do that let's go back to you I don't waiting for the next cat okay so this is correct and now appear when requesting the next task we need to switch on that pastime so up here if it is a shell for cleanup then we execute using this function in here alright great so the workers should be fully working now let's go into the game Handler and down here after we spawn the sprite first of all we need to return the sprite in the air so let's returning game object and we're going to return this right game object this is just because we need the game object up here so let's make a game object for shells game object and now using this game object let's spawn a task so the task that we're going to spawn will be of type shell more cleanup and now for the values in here we have the shell sprite transform so we're going to give it the forward shells game object transform and now let's put the move two on the right instead of the victory all right so everything should now be set up so when we click on the left mouse button we spawn the sprite for the four shells we grab that game object we create a task to clean it up and in that ass the information that it needs is the transform which we give it we add it to the task then the worker will eventually grab the task he won't execute it using this function and in this function he first moves to the transform position when he gets there he plays a clean up animation when the animation is completed he destroys the game object and goes back to idle so let's see phone that behavior is working correctly okay so there's the worker waiting for a new task now on the right mouse button I can spawn the basic move to position town so I right click in here and yep he goes there great and I want the in left mouse button when I click I should spawn a sprite he should grab that task move there plain animation and the sprite should be this right so it's right click yep there it is the task was editing he goes there plays the animation and poof the sprite is vanished ok great exactly the behavior that we want to create all right so now we have both test behaviors working perfectly now let's see another way we could execute this task so here we are storing the transform which as you can see it works perfectly fine however this task is now commonly limited to only working with transforms it won't work if the shells are created in any other form or if they need to be destroyed in a different way other than object not destroyed for example in barrel morale tycoon the shells are spawned using a particle system and not individual transforms so this approach wouldn't work there by using transform in the field we are making this task type very tightly coupled with the transform type the worker needs to know what a transform is and how to dispose of it so let's see how we can implement this in a way that we could use regardless of how you actually implement the visual representation so the first question you need to ask is what does the worker need to execute this task the answer is first of all he needs a position so let's make a following factor 3 for the target position when you go there we want him to play an animation so that is up to the worker but when he finishes the animation we need an action to clean up those challenge so let's make a public action which is part of the system namespace we need to store an action let's say cleanup action an action is simply a function so in here when we create the task that's when we are going to define how the cleanup will actually be executed so by implementing the task this way we are clearly separating the responsibilities between who makes the task and who executes them by implementing the task in this way we can easily adapt the task to a multitude of systems and the code for the worker never actually changes so now let's go into the worker and in here as you can see we are errors since we are no longer using transforms so instead of using the transform dot position the position we're going to move to is the target position and in here instead of using a game object dot destroy or we want to do is go into the shelf for cleanup tasks and execute the cleanup action so this worker this next only care about how the sprite is implemented or if it's even a sprite all he needs is a target position to move to he plays his own animation and when he's done he executes say cleanup action so again the responsibilities are cleanly separated he doesn't care how they are implemented he just executes that task so in the game handler when we create the task instead of giving it a transform we're going to give it different values so the first thing is the target position which in this case we're going to keep the same implementation for now and do the game object out transfer on that position so that is the target position and for the cleanup action let's actually do the same thing as previously just to make sure everything works so do an object destroy of the shelf game object yep exactly so the way we set up our code means that the class responsible for creating the tasks is the one responsible for filling out this information which won't set the target position and the action to destroy it so let's test it should be working exactly the same as before the worker should go to this position he won't execute the cleanup action which does the same as previously which is simply a destroyed so let's see all right there's the worker and if I click yep the sprites phones the tasks phones he goes there points the animation and the sprite is destroyed ok great so we've changed the internal implementation but everything is still working exactly as we wanted to it's now back in here on the game handler let's modify the cleanup action to not use this drawer so in here we're going to give it a function and we want to reduce the Alpha so for now just for fun just for simple let's do a function up later which again the function of data is part of the code monk utilities which you can grab for free from unity code monkey comm now a function updater simply execute an action every update so it's exactly what we need to be able to do a simple alpha fade so let me grab up here a reference to the sprite renderer down here and let's store the Alpha and we're going to reduce sample minus equals downtime and we're going to set the Alpha all right so we got just a very simple code in here so we can test and see that the cleanup action is now different from previously so I am simply grabbing a reference to the sprite renderer then I'm creating a function of data which won't execute this action every frame until it returns true so every frame he's going to reduce this alpha by time.deltatime so it won't be fully reduced to zero in one second and I simply set the sprite renderer color to a new color using that alpha when it is the only zero it returns true and this object destroys itself all right so essentially we have now successfully created a different cleanup action and again the work at STI doesn't care how that action is implemented he simply executed and whatever's in there gets executed so let's test and see if we have a different implementation of our cleanup code all right there he is I click in here and there's this fried T goes plays the animation and yep you can see the alpha vanish great so as you can see he cleaned up the sprite using the cleanup behavior defined in the task itself now the worker no longer knows or needs to know how the cleanup behavior is set up he simply execute the action in that task so we could easily spawn the shells using a particle system and worker behavior would not change at all now just to make sure let's add the other worker just to make sure everything still works exactly the same with multiple workers there they are and I can spawn multiple and they will sequentially go through it execute the animation clean it up and they won't vanish according to their clean up action yep great awesome so there you have it we had the ability to execute a complex task and went over the best practices to keep our code clean in the next video we're going to cover how to queue up tasks again the game is still in development so if you like the concept you're the same page add it to your wishlist and phone as always you can download the project files and utilities from Unity code monkey comm if you have any questions post them in the comments and I'll do my best answer them subscribe for more videos and I'll see you next time