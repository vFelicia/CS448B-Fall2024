hello and welcome I'm your code monkey and here is a simple but really nice weapon attachment system I've got a weapon that I can rotate around I've got these buttons for the very spots and as I click on them I can modify them load out to anything that I want I've got multiple weapon bodies so I can modify a piston only roughly a rifle B I can randomize all of this even though this is pretty simple I did the math and just with this I can already create 237 000 unique weapons so anything from Pistons to SMGs snipers rifles and so on then when I find the load that I like I can save it and yep over here are my nice save files all of them with a nice screenshot and I can click to load any of these weapons then I can also go into play mode and have a character equip my custom weapon you can go ahead and download the project files and inspect the system for yourself the reason why I made this is because right now there's an awesome sale happening on the Senti store pretty much all of their packs are currently at Half Price personally I love their low poly style I covered lots of potential games you could build with these ads in the sale of review video and on top of the Wrangler discounts they have a flash deal every week with an even deeper discount this week the massive discount is on the military pack which is exactly what I use to make this system this one has over 1500 prefabs with a modern military setting it includes lots of very customizable characters several intro bone buildings and environments it has tons of Tanks planes helicopters and regular cars and of course it has tons of weapons including lots of modular Parts which is what I use to make this system check out the entire ceiling the military packing in the description the special deep discount is only running this week so now let's inspect the system that I built it came out quite well thanks to using these awesome assets and building this was actually pretty easy I thought it would be quite a bit more complex but it ended up being a relatively simple system I burnt it in about 10 hours total Muslim logic was actually done during a live stream the rest of time was spent on design and publish so if you want to see how I work in real time you can go ahead and watch that live stream and you can download the project files Link in the description it contains all of the logic you can use it with whatever asset pack you want but if you also pick up the military pack and import it into the same project everything should load correctly so let's see how this symbol system works here I have a weapon and I can swap between the various bases so I can modify a pistol a rifle a or a rifle B now here I see the various attach points for this system so I can modify the barrel scope stock grip and so on then when I'm happy I can save this loadout and if it shows over here on the side then load it out with a real nice screenshot I cover the full tutorial on how to do this in a previous video so here I pretty much just reuse the code from that video I can click on any of these to load these loadouts then I can go into play mode and it appears my character using my weapon with my chosen leather all right great so let's look at all the code that makes this work now I refactored the code quite a bit after the live stream so if you're watching live stream the way that the code is set up now is a bit different and once again this is an excellent example of how refactoring is a perfectly normal part of the process what you saw in the live stream is exactly how I work so first I focus on making it functional and then I clean up the code so instead of having just one script do everything the code is now much better split into multiple Parts there is a weapon complete script that represents the final complete weapon there is a weapon body which holds references to all the various attach points and then there's a weapon part for each part so here on the weapon complete script there is a simple function in order to set a brand new part for each part the data is obviously stored in a nice group model object if you don't know about them go watch my dedicate video they are extremely useful you can create objects at home whatever that you want so in this case they hold all the data for each part here is the entire definition and really there's just a type enum to identify what weapon part it is so it is a barrel a stock grip or so on it holds that and then as well unless you reference to the prefab now also one note here as you can see I made this system just based on visuals but of course you can add whatever that you want in this workable object so if you wanted the parts to modify some kind of weapon stats then you could Define that data here in the same script long object so back in the weapon complete script over here for the set part this function first destroys the currently attached part then just goes into the so grabs the prefab in order to spawn it for spawning it it needs to know where it should spawn that object and for that it's actually handled in a dictionary so if we go up here we see we have a dictionary where the key is of type part type and the value is of this class that I made and this one you can see up here it has the weapon part of the cell and the spawn transform so these are the objects that have been spawned on this part right now as well as this type of parttime attach point and this one here is definition once again just has a part type and then a reference to the transform of where that part attaches so if I inspect the weapon bunny for example here is the referral B body inside I've got a game object for the attach points and inside I've got pretty much just empty game objects defining all of the attached positions so you can see the grip is attached in there so this one's actually reversal like this you can see there's the grip then over there you attach the stock then the scope the barrel and so on also one important thing over here as I said in the code I'm using a dictionary but as you might also know dictionaries do not show up in the editor if you make a serialized field of type dictionary then nothing shows up so to solve that I just expose a simple list of this type then here on the rifle body yep there it is my parttime attachment list here on the elements which as you can see they've got a part type and then the corresponding transform so there you go all the various attached points and then through code over here on the web and complete when we have the awake it just initialize that dictionary it goes in the weapon body gets a list and instantiates the dictionary with all of these keys so that's how I solve the problem where dictionaries do not show up in the editor so with that continuing over here the set part with dictionary now I've got a reference to what should be the parent for the spawn part transform so I just go inside dictionary using the key for the spawn part type for the part that we want to spawn just instantiate it change the parent and also make sure to reset the Euler angles into position just make sure everything is positioned correctly just to that and then finally update the dictionary honestly this is only most of how this system works it's really just this one simple function that makes most of it work it's really just a clever use of scriptable objects attach points and weapon part types as you can see this function is very generic just takes a generic weapon part of the cell then the weapon part defines the part type and so on so just this one function can handle changing barrels changing stock magazine and so on here in the body all of the various attached points they were positioned manually however the one tricky part was actually ending the muzzle this one is tricky because the position of this attached point is originally related to the size of the barrel so if I have this rifle and I've got a tiny barrel then the Muslim position should be here so if I attach something to the barrel light and let's say a silencer now if I make the barrel bigger you can see the Muslim position needs to change and how I solve this problem was also pretty simple for that I made yet another scriptball object type except for this one instead of extending certain object this one extends weapon apart so it extends that one and simply adds an extra film for the muzzle offset this way over here I have all of my various weapon parts Corp objects there you go which is those two Fields however for the barrels you can see they belong to a different script and they have the extra muzzle offset this is a much better option than adding the muzzle offset to all of the weapon parts that way things that don't need any kind of offset they would also have that unnecessary data whereas this way only the barrels have that data this is an excellent example to remember how you can always extend script objects just like you can extend any csharp class then for the UI each body also has a corresponding UI prefab so here it is it's a canvas that is World space the reason why I made them in World space is so that I can move the weapon around and the buttons move with it so that looks really nice I've used World space canvas in a bunch of videos they are really simple you really just make a canvas and you set the render mode into one space finally as the weapon rotates in order to make it action and look towards the camera for that I have a very simple script here it is you can look at camera script really just on late updates at the transformer.thorne equals to the same as the camera main transform forward I also did this exact same thing although with a bit more options in my free course I use the same world space canvas method for the various progress bars in that game and the script for handling the buttons is also pretty simple for defining what button references what part type for that I just created a nice serializable class and once again expose a serialized model list for it so here in the editor I've got the weapon body UI and yep I added all of the films with all of the parts so the barrel and I got a reference to the barrel button and inside the text and so on and then I just sign on through the list and add a click listener to the button and simply go into the weapon attachment system and modify the part on that part time some of the buttons are really pretty simple they are just basic clickable buttons that I can click to modify any part and I also made different prefabs for different bodies since each body has a different number of attach points speaking of bodies that was the most recent thing about making this system handling the various base bodies basically you cannot attach every module part to every base body for example over here on the pistol it does not make sense to have a stock or maybe a longer Barrel and some of the modular Parts on this asset pack are only meant to work with certain types so there's roughly in Rifle B those are very different this roughly is kind of like an M4 whereas the rifle B is kind of like an AK so they have different modular pieces because they have very different body shapes to handle that I just defined another script object for the various body shapes they hold the body type the prefab that spawns just about itself the prefab for the UI without various buttons and then for handling the limitation on the parts each of these bodies has the enlist object this is another Circle object this just holds a list of weapon part so and this one basically is the list of all the parts that I've rallied with this specific body so this is how I can very easily Define that for example rifle a if I go over here and I check the weapon list you can see it only has weapon a stock weapon a MAG and so on and it does not have the script No Object Parts over here for the weapon B so with this I can modify I can choose any of these base bodies and yep they only use the parts that are available to that body another fun feature is just over here the randomize button this one was super easy to implement it's really just this function so it has the weapon complete to give it a list of all of the weapon part types so for example over here the pistol that would return a list which is Scopes muzzles and Max then just Cycles through all those part types generate a random amount between 0 and 50 and just calls change part to change the part that many number of times so really just some super simple logic and yep it randomizes all the parts and really creates some nice interesting results this one is another example of a feature that was super easy to add thanks to how all the code is set up in a nice clean way then for the mechanic to click to drag to rotate the weapon that one is handled over here in this script just on update to see if the mouse is down which by the way of course you could use the new input system I covered it in detail in another video I normally start my projects within Legacy input manager and after a while I converted to use the new input system that's exactly what I did in my free complete course so anyways here I'm using the input manager I simply test if the mouse is down if so I grab the mouse position and then I have field which stores the in last Mouse position so by doing some math I can basically calculate the mouse Delta meaning how far the mouse moved since the last frame and then with that I simply use it to modify the local angles in order to actually rotate the weapon then during the live stream also notice a very strange bug basically if I clicked outside of unity so the ENT win the last focus and then clicked back inside of it sometimes the mouse Delta was huge and sometimes the weapon would just randomly flip 180 degrees that was very strange but it was a simple fix just over here just clamped the mouse down to values so if they are super huge in any direction really just clamp them to a normal amount and everything worked perfectly so making the weapon rotate is really basic really just this grip so less than 15 lines of code if you want to see a system similar to this one then check out my how to inspect objects tutorial that one is a really fun system to add to any game where you want to inspect objects that tutorial is a bit more complex than this one since it involves rotating objects within the UI but the core concept is really the same as here okay so then handling the saving and loading now I covered how I normally handle saving and loading in a video quite a long time ago but despite that video being quite old I still do the exact same thing nowadays so inside the weapon complete script over here I just defined a class for a save object and inside I just put all the data that I need to save which in this case really is just the weapon body so so I know which one is the base body and then just a list of all the parts attached to that loadout now at this point when I made this in the live stream I wasn't actually sure if Json would automatically serialize a script Mall object but thankfully it does so up here for the save function it is all super easy it really just creates a save object assigns all of the various SOS and we'll just use the Json identity to convert into Json and yep that's it everything works perfectly now if you don't know about Json I also covered it in a previous video then for the loading it's also equally easy just takes a Json string as a parameter then use the Json utility to convert back into a save object and then with that save object just cycle through it and set the parts that were loaded so that's it and with that I can very easily save and load any Loadout that I want now just for fun I decided to add another nice save feature which I covered in another video adding a nice screenshot alongside the save file I pretty much just copy paste the code from that video the image is gathered through a second camera the logic for saving the images just like I covered in the video on how to take a screenshot it just listens to the end frame rendering comeback and over here on this function assigns a render texture to the screenshot camera just calls read pixels to read the screen and with that it gets a brand new texture 2D and finally here is the byte structure for the final file so it saves the bytes for the Json save data then also saves the bytes for the PNG screenshot takes those calculates a new header that contains just the Json byte size and really just packs all of those bytes together and finally saves the final file and for loading really just reverse the same thing so it reads all the bytes it reads first the header size then reads the header Json and finally the screenshot texture again I covered all this in detail in the other video once again thanks to the power of reusing some nice link code because that it was pretty easy to implement and this save system really works quite well having a nice screenshot image is much better than having a list of file names and finally the placing so I just made another scene with a character from the same asset pack then I made some super basic pistol and rifle animations for this I use umotion to do it since Unity by default cannot create humanoid animations for unloading the weapon with the custom Loadout it's on this script it really just calls the function to unload and spawn based on this Json so this one once again grabs the save object from the Json instantiates the weapon prefab loads all the parts saved in the Json and returns it and then back in this script it simply parents it to the weapon containing transform so inside the character as a child of the hand bone here is a weapon transform so this is a position and the weapon is simply made as a child of this one and over here you can see the weapon with various attach points and with the various scopes for our own loadout so with this I can randomize any kind of weapon that I want then go into play mode and up here is my character with a nice custom weapon Loadout now in this case I'm just using a static character with some fixed animations but you can imagine how you can use this logic and apply to some kind of third person controller like for example the third person shooter that I covered in a previous video after that they also covered the animation rigging part in another video so you can see after we have the weapon customization system working it is really simple to add it to a brand new character and of course you can use it with a character like this one in third person or you could also use it in the first person put on that together and here is a really nice complete weapon attachment system go ahead and download the free project files to try it out again the reason why I made this system is because this military asset pack is currently on flash deal on the synthy sale the Deeper Discount only lasts for this week if you have any idea for which you need a bunch of weapons or any idea for a modern military game then definitely check it out it could make any kind of shooting game with this pack or maybe something like an RTS or use the include vehicles in some kind of plane or helicopter simulator so there's tons of possible ideas the project files includes all the code for this system and it will automatically load the military asset packs if you import it into the same project and beyond that check out everything on sale on the cine store if you like their Style just like I do then definitely give it a look there's tons of awesome self on all kinds of themes that you can use to make an endless amount of unique games alright I hope you found this video interesting thank you for watching and I'll see you next time