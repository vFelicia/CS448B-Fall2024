hello and welcome I am your code monkey in this video we're going to create the damage circle that shrinks just like in Battle Royale games let's begin so this is what we want to create I have a player character here that I can move with a keyboard and in here you can see that we have a damage circle and the secondary is the target circle where the red circle won't shrink towards and if I go outside of the red circle you can see that I start to take damage if I go inside the damage stops so after a while it shrinks to that and it shows the next shrink position this health system that I'm using is the one from Apex legends which was created in a previous video so check that out if you haven't already all right so let's get to it so here is the starting scene I have a player that I can move around and in the UI and here you can see my current health so let's start off by seeing how we're going to display our damage circle so essentially we need to show a circle which is fully transparent inside and red on the outside now there are several ways we can do this we could use a shader cut out and tint in red outside of it that would allow us to make some special effects like some animation on the outside texture or we can just use a simple circle texture on a sprite renderer which is what we're going to do so over here in the textures folder I have this texture in here as you can see it has a circle red on the outside and transparent on the inside for the pixels per unit I'm going to choose the same as the texture size so just like that if I drag the texture I have my circle shrink and due to the pixels per unit right now it's occupying one unit so this is our circle sprite okay so this looks mostly okay but obviously we need to be tinted in red on the outside as well so for that we are going to create a new sprite render and in here in order to make it visible I'm going to use just a simple white 1x1 pixel this is just a simple pixel that is literally just a texture that is 1 by 1 in white so by using that the sprite is now visible and now I can stretch it and I can tint it in red to match the outside and I need four of these for the four sides outside of the circle and through code we're going to set the size to correctly match the size of the circle so that's pretty much it for how we're going to set up visuals let's just rename this to more proper names and let's put them all inside a container game object let's name this the damage circle and drag everything inside and just like that okay so now let's make a script to handle it so let's make a new csharp script this will be our damage circle and we're going to drag it onto our game object okay so here on our code let's first go into our await to grab all of our references okay so we have our references to the circle and all of our signs now let's make a simple function to set our circle size so we do a private void let's call this set circle signs and in here we're going to receive a vector three for the size and inside and we're going to do is go into the circle transform and set the unwelcome scale to be our size so for testing let's go here onto our awake and let's set the circle size to be let's say 200 all right so let's test for testing let's simply hide the others since we only want to see the circle size all right let's run the code and yep the circle does seem to have a size of 200 let's stop it go into the circle and there it is 200 200 okay great now we need to position and scale the sides and for the size it will depend on the total size of your map it just needs to be stretch enough to where the player can walk so that it is always visible now we could do some really complex calculations to make the size perfectly fit whatever rectangle we want but in here we're simply going for the similar way of just making it very large so in here for example we would stretch it into there to where the player never goes past that same thing for the top and all the other size okay so let's do this through our code so let's start off with the top we're going to set the top transform local scale we're going to put this with the size of a thousand now we need to position it so top transform dot hello composition now if you remember how skin works it scales exactly from the middle so in here we need to move it up by half of our size plus half the size of the circle so we do a new vector3 this is the top transform so for the X we'll leave it on 0 and now for the Y we want half of our local scale plus half of our size so this is our Y times 0.5 up alright so that should do it for the top let's test and if there's the top as you can see it has a very large size of a thousand a thousand and it is correctly placed exactly on top of the circle so in here you can see that there's no seams it's all very seamless all right great now let's do the same thing for the bottom so we're going to set the bottom transform for the in local scale let's do the exact same thing now for the unwelcome position stead of going up we're going down and then down on this alright okay there's the top in there and down here yep there's the bottom alright so far so good now let's see on with the signs first let's set the left side so we take the left transform and set the local scale now for the X let's give it a thousand and now for the Y let's give it the same as our circle size so this is dot Y then we move it to the left so we do an let transform the whole composition and we set it we move to the left by half of our size so we take the left transform dot local scale dot X multiplied by 0.5 up and we shift this to the left side and also by the size dot X also half of it and for the one I will leave it at zero alright so let's see if the left is working correctly if there it is there's the left one and as you can see there are no seams the only left one is in there the top is in there the circle in here and the bottom in here and everything is fixed on perfect now all we on left is the right side let's see so the pretty much exact same thing so then here we do a plus and yet there it is as you can see all of our sides are currently working and now we do have a circle being visually shown right great so we can now dynamically size our circle and everything else gets resized accordingly so now that we have the size working let's set another parameter for the position of the damaged circle now for the position we could shift the circle transform and the table transform now these and that would work however in here as you can see we are using a very nice container so we can simply locate everything on the unload composition inside and on the outside we simply move this container so let's receive a vector3 this will be our position and we simply set the transform position to be on this position so you know let's try putting it on the right side okay so let's test and if they're dizzy circum is now on a hundred one hundred in here and it still has a size of two hundred and all the edges work correctly right great so we have the circle where we want with whatever size we want now obviously we want the circle to cause damage to our player if he is outside of it so let's make a function to testify a certain position is outside of the circle so let's go down here make a private ball and let's call this is outside circle now we're going to receive a vector3 for the position now in here to test this is very simple since it's a circle so we just need to calculate the distance between this point and the circle position and if that distance is more than the circle radius then the position is indeed outside of the circle so let's go up here to store the circle size and position and we're simply going to set it here in our function so we now have these two variables that contain the current size and position of the circle now in here we return the vector three distance we calculate the distance between this position and the circle position and we are outside the circle if the distance between that position in the circle position is bigger than the circle size in this case the circle will always be uniform so we can simply use the X now here however this contains the diameter and not the radius so let's multiply it by 0.5 all right so that's pretty much it now let's make a static function so we can easily call this from the player and let's go up here to make a private static instance so we can simply do a return on the instance that is outside circle all right so we have this function that we can come from anywhere to see if a certain position is outside of the circle so here is my player class don't worry about the code in here since it isn't relevant for the damage circle and here all we need to do is test to see if the player position is outside of the circle so for that I'm going to create a function periodic the function periodic is part of the code monkey Tonys that you can wear out for free from unity code monkey calm it simply triggers an action every certain amount of time so we're going to execute the code in here every 200 milliseconds and the code we want to simply to damage and let's cause 10 damage every 200 milliseconds however we only want to do that if we're outside so let's ask if the damage Circle dot is outside static and we pass in the player position so if the player is outside then caused damage all right so let's test okay so here I am I am inside the circle with foliage pink now if I move outside and yep there you go I'm now taking damage and now I move inside and I stop taking damage go outside take damage inside and you stop taking notes all right great so we can set the circle size and position and the player takes damage if he goes outside of it so so far so good now let's make our circle shrink so here in the code appear we're already storing the circle size and position now let's also store a private vector3 for the target circle size this won't be the size that we want to shrink to now let's make a update and let's get the change vector between both sides all right so using this we can now calculate the new size and we're going to multiply it by a certain circle shrink speed so let's define it up here and then awake let's set it to a certain amount we're defining this as a normal variable so we could easily change the speed now after calculating the new circle size all we need to do is just set it so we set the circle size let's use the same circle position and the new circle size all right that should do it now let's set up our test here on the awake we're positioning it on 0 0 with 200 200 so let's set the target circle size to be 100 100 all right so let's s and see if the circle doesn't need shrink to half its size yep there's a circle and yes it is indeed shrinking to half its size and if I move away take damage move inside stop taking them if I stay at the edge and yep now I'm taking damage and move inside all right great and it's not shrinking once it reached its target size all right so with the size working let's also add movement to our shrink so we already have the circle position now let's making a private vector3 for the target circle position and on update we're going to do pretty much the same thing going to find a vector3 for the circle move direction which will be the target circle position minus the current circle position normalize the whole valley and recalculate the vector3 for the new circle position which will be the current circle position plus the circle move dear x times all the time and by the circle shrink speed and here we use the new circle position all right that should do it let's go up here and set the target sir composition to be somewhere on the right side all right so let's see if these circle shrinks and moves to the right at the same time and yep there it is the circle is indeed shrinking and moving to the right at the same time all right great now let's add a visual to the target circle so let's duplicate our circle and use this texture in here this one just has the outline of the circle now the way we set things up was that we were moving the container instead of the transforms inside so we need to make sure this one is outside and now in here let's add a reference to our target circle so a private transform for the target circle transform and let's make this a serialize field so we can set it in the editor so here we are in the editors unlike the damage circle and drag our target circle reference okay now let's go down here and create a function to set the target circle so a Frank Lloyd set target circle and we're going to receive a vector three for the position and a vector three for the size and in here and we're going to do is set the target circle transform set the position to this position and the Ilocos scale to this size all right so that positions the visual now let's also set the target circle size and targets our composition and now we can use this function when we go up here on our awake we use this function if you move it to the right side so let's send 50 and 0 and 40 sighs let's again use a hundred a hundred all right so let's s and see if everything is still working exactly the same as previously okay so here we are there's the target circle sprite showing where the circle shrink to and as you can see the circle does indeed move towards it and is shrinking towards it and now once it reaches the final size it won't stop shrinking and yep there it is examine like that all right great all right everything is working so far now let's make it shrink but only after some time so here on the saturated circle let's also receive a float for the shrink time this won't be a the amount of time that it waits before it starts to shrink so let's store it up here now we're going to set it down here and now on our update the first thing we're going to do is reduce our shrink timer by time.deltatime and then we're only going to actually modify the circle size if the shrink timer if it is under zero okay so let's test then we're going to start shrinking only after five seconds okay so here it is and everything is stopped and now after five seconds yep there you go it starts to move towards the target all right now let's make it shrink more and more each time so on our update let's figure out when the shrinking has been completed so in here since these are our vectors we can simply use a vector three distance to calculate the difference between them so if the distance between the new circle size and you target circle size if that one is under a certain amount and we also do a test on the new circle position if both the size and position are near their targets then let's shrink again so in here on let's do a set target circle we're going to let's keep the same position so these are composition and for the size let's shrink it a little bit and we're going to shrink after three seconds all right so let's test okay there's the first target size and it's shrinking after five seconds yep there you go and shrinks once it gets there yep it stops and he set the new target size and after three seconds it starts to shrink and again it's gonna shrink again and after five seconds if I stay here in the edge and if there you go I'm outside taking damage and move back in son great so we have all of our shrinking logic working perfectly now only need is to add some randomness so in here instead of always shrinking to the same position and by the same amount let's make a new function this will be our generate target circle and in here let's randomize how much we're going to shrink back so it's a float for the shrink size amount and we're going to simply do a random that range going to shrink by between 5 and 40 so the generate target circle size will be the current certain size minus a new vector3 with our ring size amount and let's also generate a new position so we generate the new position based on the current position then we randomized between minus shrink sized amount and the plus shrink size amount and finally we need the random shrink time and then we set all this so we do set target circle we pass in our generated target position generate a target size and the shrink time all right so now up here instead of using this we use generate our target circle all right everything looks good now let's test okay so here I am and that's the target circle and after five seconds it's going to start to shrink yep there you go once it gets there yep it generates a new circle inside the current circle and after a while it's going to shrink to that one and again generate another one and after a while it will shrink again generate and so on and so forth and in the meantime everything some works and if I move outside yep I'm taking damage move inside and now I'm safe so there you have it we create a damage circle shrink for a battle royale game we can place a circle wherever we want with any size we can think of there's an extremely simple function that we can use to test if a certain position is inside or outside of the circle our sprites are dynamically sized so visually everything looks correct regardless of the total size we could further expand it by adding more logic to change the shrinking speed or take more damage the further from the circle the player is we could also change it to make them moving and scaling always take the exact amount of time on to take would be some simple math so this is a great base to add to your battle round game as always you can download the project fountain utilities from unity code monkey comm if you have any questions post them in the comments and I'll do my best Internet subscribe for more videos and I'll see you next time