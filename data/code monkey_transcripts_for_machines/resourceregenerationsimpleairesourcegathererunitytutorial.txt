hello and welcome I'm your code monkey in this video we're continuing our resource gatherer a I we're going to set up some simple resource regeneration let's begin so here's our scene I have two gathers in here I can select them and tell them to mine so I can tell this one to mine this girl note and I can tell this one to chop this tree so right now they grab the resource until the node is depleted then they look for another nearby node in the previous video we had multiple resource types but when looking for another resource node the gatherers are currently ignoring the time so if we gather is mining go on that no gets depleted and the next nearby one is a tree he won't switch to that that is probably not the behavior that we want to create so let's look at that so here in the editor I'm going to drag this one in there and I'm going to place a tree next to it okay so now I select this one tell him to gather wood from this tree he goes there he chops down the tree one two three the tree is now empty he drops in a storage and now he decided to go and mine some gold so right now they are gathering resources regardless of what the type you told them to mine maybe that's the Sarabande behavior in your game but in this case we want them to stick to the same resource time so that's actually quite simple to change let's go into our game handler in our code in here now down here we have a function to get the nearby resource node this one in here get resource node near the position it checks if the node is nearby this position within max distance okay and now in here we get a position and then we're going to get a game resource the resource ID for our resource type this is the one that we want to search so in here we are duplicating our original list which contains all of the resource nodes and we are removing the ones that do not have resources or are too far so in here let's just simply add another condition and test if the temp resource node list I if this resource node dot get resource type if it is different from the resource type that we want if it is different then we're simply going to ignore it so in here or too far or different resource type so in here we're ignoring it if it no longer has resources if it's too far or if it's not of the type that we want so let's update the static function as well and let's find the references for function and it's right here on the gather AI so we want to keep gathering the same resource type so let's send the resource ID that we're currently gathering so get resource type yep like that okay so let's test okay so I'm going to tell him to gather wood from this tree he goes there starts chopping down three one two three the tree is depleted and yep now he stopped since there are no more trees nearby that one let's test to make sure that the goal he still searches for the second one so tell him to go there he goes one two three all right goes to storage now he should go for that one yep exactly he's going for that one he's mining it one two three now vs origen yep he stopped okay great so the gather is now correctly looking for nearby resource nodes but only if they match the type that he was ordered to all right so that was a quick fix just to make sure that our AI is working exactly as we wanted to so now let's handle the resource regeneration so when note is depleted we wanted to regenerate after some time there are several ways we can do the regeneration we could set it to regenerate one unit for a short amount of time or start a timer and when the timer is depleted we fully regenerate that note let's go with a ladder behavior so here on the resource node script first we need to store the resource amount max so we know the total to revert back to so resource a lot max and here we set the max to three which is what we're setting previously and set it to be full okay now let's go down here and make a function we're going to make a private void reset resource amount and here we're simply going to set the resource amount to be resource amount max so appear when we're grabbing resources from this node when it is depleted so it is under zero so in here node is depleted so we are updating that sprite and after that let's add a timer to reset the resource amount so for that I'm going to use the function timer which is part of the code monkey utilities which as long as you can grab for free from Yenta calm and create a new function timer which will trigger the reset resource amount function and let's say after five seconds so this class creates an object which calls an action in triggers a function after a certain amount of time so after five seconds this function won't be caught and on the reset function let's also reset the sprite so let's make a function dedicated to that so a private void update sprite and in here we're going to test our resource amount so if resource amount if it is bigger than 0 then we have resources if not then the node is depleted though it is depleted or a peer node has resources so let's update it accordingly so in here this is what we're going to do and up here we're going to call update these price and when we reset the resource amount it's also update the sprite and in here let's use a different sprite in case we do have resources skews the goal note sprite and D tree node sprite ok so everything is looking good in here now let's go and test it out ok so let's grab them telling to gather that wood and this one go gather it some gold alright let's see so that one has been depleted and now that one has been depleted as well so let's wait five seconds yep that one was regenerated and that one as well now that is a pleadin the other one is depleted and so on as you can see that one is back to the room ok great so we now have our nose being fully regenerated after 5 seconds and as you can see in this gathering here he's consistently mining and mining again I can select him and now tell him to go mine dhawan which was previously depleted and again he's mining the plates and goes works perfectly ok great so we have no regeneration working perfectly fine on both times now just for fun let's try the other method of creating a constant regeneration so in here let's make another function and let's call it private void regenerate single resource amount and in here essentially we're going to regenerate but only by one amount so do a resource amount plus once and after we do obviously update the sprite but we have to make sure we don't go over the maximum so if it is less than the resource amount max then we're going to do this if not we're not going to do anything okay that's a very simple function now all we need to do is call this function every certain amount of time so on the constructor up here again we're going to use a helper class from the code monkey utilities we're going to create a function periodic which won't trigger the function down here they regenerate single resource amount and we're going to trigger it every in let's say 2 seconds now let's count out the previous regeneration logic ok and just for testing let's create a text updater so up here let's go into the CMD bug class and create a text updater the text updater will constantly print out the resource amount on vector 3.0 and on this transform pair okay great so we should be able to see a text object displaying the current resource amount so let's see if that goes down and up accordingly ok so we can now view how many resources each note has so let's some like this one time to go there and he goes and poof he grabs one that one goes down Down Goes Down and now as you can see it's going back up yep exactly and it doesn't go past the three so it goes down regenerates goes back up so let's do the same thing in here goes down and back up okay so just for fun I've increased their speed and their animation speed so we can see them very quickly yup there you go very quickly they go and they cut down the tree and the mine and so on and so forth and as you can see it goes down and it goes up every two seconds and they're mining and regenerate okay right now as you can see we got a minor issue in here sometimes if they mine as you can see it goes under negative that's because right now they are mining three resources regardless of whether or not the resource node has three so let's just very quickly fix that so on the gather a I down here so here we are going to storage if the inventory also lets Emily and you go to storage if the inventory is full or the resource node dot has resources or it no longer has resources so let's see that send them both to the same area they're mining and yep that one mine just two and went back that one mine too and one pack and yep they are no longer going into negative numbers so there you have it we added some very simple resource regeneration using two different methods and with our gatherers only look for resources of the same type in the next video we're going to take everything we've made so far and put it all together in a simple building construction if you have any questions post them in the comments and I'll do my best to answer them subscribe for more videos and I'll see you next time