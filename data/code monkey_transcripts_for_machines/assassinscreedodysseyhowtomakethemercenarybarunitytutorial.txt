hello and welcome I'm your code monkey in this video we're going to create the mercenary bounty bar from Assassin's Creed Odyssey we're going to make it in the UI with a script to dynamically modify the number of mercenaries and the size of the bar between them let's begin so in assistance read Odyssey there is a bounty bar which is for the mercenary system essentially it starts off empty and increases every time you are caught doing a crime if it reaches a certain amount a mercenary won't come after you it's a pretty simple bar but still require some interesting logic so we're going to make it in the UI I have my basic scene set up over here I have the canvas which is being rendered through this UI camera for an interview one how this is set up you can check out the simple UI setup video then in here I have some textures first I have a bar border which won't go on top of our bar then I have the gray and red helmet and finally a simple white gradient which we're going to Tintin in red as the bar fills up so let's first set up the bar in the editor and then we'll make the code to control so in our canvas let's begin by creating an empty game object this will be our container so let's name it mercenary bar inside let's create another empty game object this one let's name it bar and this is the container for our bar so let's set the size to 70 15 okay inside let's make another empty game object this will be our bar background and for this one let's add an image and add the white gradient texture for the size let's expand it to fill up the entire parent so set everything to zero and right then the bar is occupying the bar size so we can change the parent and the inside changes with it okay now it's duplicated and make the bar filled which again is stretch to occupy everything and for this one let's tint it in red now in here on the image type instead of being in simple let's set it to filmed on the film method let's choose horizontal and film origin from the left this way we can easily set the fill amount to increase and decrease the size of our bar okay so now the last thing we need is a border so let's duplicate the background name this the border and drag the bar border sprite now as you can see in here the texture looks a bit stretched in there on the left side it's quite stretching there is quite small we can fix this by going into the bar border texture and open the sprite editor and in here if we drag on the sides we can essentially set a border we can also go down here and simply set the bar to 5 on every side so essentially we are saying do not stretch these corners in here and only stretch the empty space in the middle so if we hit apply and go back it's now select the border and here on the image type instead of simple let's set it to sliced and now as you can see everything is scaling much better ok so this is our bar only created in the editor this will be the template that we're going to use to duplicate and modify through our code so let's rename this from bar and make it a bar template let's add a new UI image for the helmet and the helmet won't simply have the helmet sprite let's set it on 70 70 and just like that alright so our home bar is set up in the editor as you can see we got the bar template which has a background then it has a filled corner which we can increase and decrease then it has a border just to make it all nice and then outside of the bar we have the helmet template which can either be in grey or then we won't switch to red when the bar is film so now that everything is set up let's work on the code so it's going to the scripts folder and create a new C sharp script and let's name this the mercenary bar let's drag it onto our mercenary bar yep like that and check out the code okay so in here the first thing we're going to do is grab a reference to our templates so let's go up here and make a private rect transform and we're going to grab the bar template and then also grab the helmet template we're going to grab it on the void awake so bar templates equals transform dot find our bar templates and get the component of fabric transform and do the same for the helmet all right now just for testing let's try duplicating our bar so in here do a rect transform for the new bar which will be an instantiate of our bar temp and into the parent which is this transform and then let's set the anchor position to be somewhere on the left side alright let's test and see if the new bar pops up yep there's the original bar our template and there's a new incense she added bar okay so we are now correctly duplicating our template so now let's go back into our code and down here let's make a new class named bar so a private class named bar now this class is responsible for handling the logic of a single bar and the total mercenary bar will be composed of several of these bars so inside let's add some member variables to store the bar and helmet transforms so a private rect transform for the bar correct transform and we're going to receive them on the constructor okay so this is the basic composition of our clients now let's go up here on to the mercenary bar class and let's make a function to create a bar so make a private bar create bar inside let's do what we did for testing up here which is we instantiate a new bar from the template what is also in Senshi Utley helmets and finally create a bar object so Bar object equals a new bar to give it the bar right transform and then the helmet right transform and finally we return our bar object okay so now let's go up here and first of all let's hide our templates so we're going to do bar template dot game object dot set active to false so that the templates are hidden by default do the same for the helmet and in here when we instantiate we actually need to reenable it so go back into the game objects active and for this one which is the one that is in Senshi ated set it to true and same for the helmet so then let's go up here and create a new bar just like that okay so let's test and we should be able to see a new bar along with a new helmet yep there they are a new bar and new helmet and if we hit stop you can see that the templates are still there but they are disabled and the clones have been accentuated okay so far so good now on the create bar let's receive a position any size for the bar so a vector2 for the incurred position and another vector two for the size let's set the bar dot anchored position into our anchored position and set the bar right transform size Delta to our side now for the helmet we want to place the helmet at the end of the bar so let's set the helmet anchored position to be at anchored position which is the starting bar position then let's shift it to the side by size dot X so you have a bar on the anchored position with a certain size received in here then you place the helmet to the right of the bar by using anchored position and offsetting it on the X by the same as the size so let's go up here and create a new bar and let's place it on zero zero with a size of let's say 70 18 now one last thing is we need to go in here m to our bar template and right now the pivot is in the middle what we wanted to be on the left side so let's simply click here and press shiftclick on the left side and there you go the pivot is now correctly on the left side so let's run and see our new bars yep there you go there's a new bar and right at the end there's the helmet and if we check out the positions you can see that the size is in 70 and 18 and the home template is on 70 right there ok so now that we are correctly placing it let's see on whit filling up the bar and changing the helmet icon so back in our bar class let's make a function to set the fill amount so in here the way public void set film amount and we're going to receive a float for the film amount this film amount goes from 0 to 1 so 0 is commonly empty and one is completely foam regardless of the actual size of our bar now in order to set the film amount we need a reference to the image that is placed on the bar so let's go here grab an image and now the image we have to do using the Unity engine UI so make a bar filled image and let's grab the bar fill image in here on the bar right transform fine the bar fill and get the component type image then we can use that image component to go in here and set the fill amount to be this film amount now on awake let's set this to 0 F so the bar starts off coupled with empty okay now let's go up here after we create the bar let's first go out to a reference to it and now let's test filling it up now in order to test I'm going to use the function updater which is part of the using code monkey utils which as always you can grab for free from unity code monkey calm now the function updater lets me create a action which will be triggered on every update so on every update let's increase the film amount so let's go up here create a float for the film amounts are off at 0 F and in here on every update let's increase the film amount by let's say time down to time divided by 4 F so essentially the bar won't completely fill up after 4 seconds so after increasing let's go into the bar and set the fill amount to be this film amount alright let's test and see if it fills up in 4 seconds ok there it is and yep as you can see it is filling up and it is now completely full ok great so now that we have the bar correctly filling up let's the only the helmet so back in our code appear on our mercenary bar let's add to serialize fields for the gray and red helmets so make a serialize field for the private sprite gray helmet sprites and another one for the red helmet sprite now we're going to pass those and store those on our bar so in here they don't have to be Cyril eyes we're going to receive those in our constructor and let's send them when we construct our bar so first in the gray and then send the red home alright so we now I have references to our boat sprites in here so let's make some helper functions for setting the color so make a private void set helmet gray and then we're going to have a private Roy set helmet red so for that one let's go up here and grab an image for the helmet image now the helmet image is in the helmet rect transform docket components of type image okay so we grab the helmet image and in here we set the anomic image sprite to be our gray helmet sprite and here set it to the red helmets breath all right so now in here when we set our fill amount if the film amount if it is greater than one that means the bar is completely filled so let's set the helmet to red if not let's set the helmet to work all right so on our constructor we are receiving references to both of our sprites then when we set the fill amount we check if it is bigger than one if so it changes to red if not it sticks with gray so again we are testing up here increasing the film amount and it's completely foam after four seconds so when it is commonly formed the helmet should turn red so now first let's go up here and drag the references for the gray and the red and run the code yep filling up and now it goes up and yep there you go the helmet turn right so the helmet turn red which is correct but it seems like it took a bit too long that's because of how we created in our bar now if we processing and we check out the scene view as you can see the bar stretches behind the helmet so essentially once the bar is filling this part up you can't really see it but it's still not fully filmed up so we need to make our bar a tiny bit smaller so that we can actually see it fully fill up and as soon as it gets completed it turns the helmet into red so for that let's go into our create bar function and now in here let's set a different size for our bar instead of being this size let's set a new vector2 and 40 X let's use size dot X minus a certain padding amounts and let's say 10 F and for the wine let's use the same as the size on what this way the bar will end slightly before the helmet so let's test again and yep there it is filling up and when it gets to the edge of the helmet yep there you go it turned red so if we go into the scene view you can see that the bar is now smaller we could still make it a tiny bit smaller but just about that is good okay all right so we essentially have one bar pretty much fully working now let's see how we can set up multiple bars one after the other now creating multiple bars is simple since we already have this function to create a single one all we need to do is call this function multiple times so creating the bars is simple but the logic of the film has to go from one bar to the next so for that we're essentially going to define a total number for the complete bar and divided by a certain amount for each bar so let's go up here and make some variables we're going to have a private float for the film value max this is the complete amount in this mercenary bar so the total value for entire mercenary bar then we're going to have a private float film value now this one is the currently film value and finally we're going to have a private float for the film value per bar and this is the film value amount per each bar so in order to calculate all these values let's make a private void setup this function will initialize our bar now in our setup we're going to receive the set of values so we need the float for the film value max this again is a total film value used in this mercenary bar and then an end for the bar amount seen here let's set the dis dot film value max to be philip value max for the regular film value let's set it to zero so it starts off empty and for the film value per bar it's going to be the film felling max divided by the bar amount so essentially if the film value is and let's say 100 and we have five bars then essentially we're going to have 100 divided by 5 we're going to have each of our won't have a value of 20 so after completing that let's create the number of bars that we need in order to store them we need to go up here and make a private list for our bars this will be our bar list so let's instantiate our bar and list and then do a simple for in a equals zero less than the bar amount PI plus plus okay now here we need to create the bars and place them correctly so a vector2 for the bar size which we're going to set the same thing that we've been using so 70 18 now we need to place them correctly so let's define a float for the bar size offset this is essentially that little buffer that we have between the bar size so let's set it to 10 F and for the vector 2 for the bar anchor position for the X won't be on bar size dot X multiplied by I for the why we got 0 but now for the X if we do it like this then we have each bar hugging each other so we need to add the bar size offset so it's the bar size rx plus the bar size offset and then the whole thing multiplied by the index of this bar then we get a bar bar equals create a bar we're going to create it using the bar anchored position and the bar size then we add that Bart is varlas bar let's not add our bar okay so in our setup we receive a maximum value and the number of bars displayed that value in we calculate these families to see how much per bar we're going to have and then we simply instantiate that certain amount of bars so now let's go up here and let's comment out this testing code and instead let's do a set up now for the set up and let's give it the maximum value of 100 F and let's fill it with five bars so let's run the code and see if we have correctly spawned five bars yep there you go we have five bars one two three four five they are all empty and all the helmets are in gray now as you can see we got a slight issue with the helmets here the hierarchy and the UI is what defines the sorting order so essentially we need to take all of the helmets and set them all as the last sibling and then it looks correct so let's sort that problem so in here there are several ways that we can set the helmets to the end we could for example have a container for all the bars in another one for all the helmets and have each container one sorting with the other one but here the same most way is similarly to set the Bart transform to be essentially lower in the hierarchy so the bars always show up before so I simply do that that's set as first sibling so whenever we instantiate a helmet it goes to the end whenever we instantiate a bar it also goes to the end so we send it back on top so I see four helmets are on top of the bars and yep there you go we got the helmets on top of the bars and as you can see in the scene view they're all like that they're all on top of that one and first we got all the bar template clones and then all the helmets ok great so with our five empty bar setup now we need to set up the illogic to increase the film between the bars so in our code appear on the code for the mercenary bar let's create a function to set the film value so making a profit ROI set film and here we're going to receive a float for the film value and let's also set the member tonal value to be this film value so we keep track of the film valley okay so now in here is where we need to do some calculations we need to figure out how much each bar should be filmed so essentially let's begin by doing a cycle for in the equal zero going through all of the bars on the bar list okay so bar bar equals bar on list all right now we need to figure out how much this specific bar should be filmed so let's begin by calculating the float for the bar value min this is the minimum value that this bar represents so that minimum value is essentially just the I which is the index of this bar multiplied by the film value for each bar so bar zero starts on 0 multiplied by let's say 20 so it starts off in 0 then we have the bar value max which is the next index so I plus 1 multiplied by the film value so the bar on index 0 starts off at 0 times 20 so 0 and goes up to 1 times 20 goes up to 20 so the first bar represents from 0 to 20 for the second one you have 1 times 20 so 20 and then 2 times 20 so 40 so the second one goes from 20 to 40 and so on alright so using that we can now there's no logic so if the film value that we receive is under the bar value min then essentially that means the film value doesn't reach this bar so if it doesn't reach this bar then set the bar film amount to be 0f because it is completely empty if it is not under the bar value min and we check if the film value if it is bigger than devop bar value max if it is then that means the film value completely fills this bar and set the bar dot set fill amount to be 1 F so that it is completely and if it is not under or above then that means the film value is somewhere in between so let's commonly D float for the bar film amount so we need to normalize the value to fit inside the bar values so we take the film value and we reduce it by the bar value min and then we divide it by the size of the bar so we divided by the bar value max bar value min so let's say this is the first bar which means it goes from 20 to 40 and we are giving it a film value of 30 so the bar fill amount will be 30 minus the 20 which is the bar value min which means this is 10 and then the bar has a size of 40 minus 20 which is 20 so we have 10 divided by 20 so this one won't be 0.5 so if we send a 30 then the second bar will be 1/2 film so after that we simply need to do set the film mount to the bar film amount all right so now let's see if all of this math is correct for testing let's go all the way up here and after we set up our bar let's use set film value now since we have 5 bars on a total of 100 that means each bar occupies a value of 20 so if we put for a film value of 50 we should see the first 2 helmets in red then bar half filmed and all the other helmets in grey so let's see if that is correct and yep there it is we have 2 red helmets then the bar is half filmed and the others are in grey alright so it seems all of our math is correctly working now let's test with an increasing value so let's use the same thing we use in here now the film amount has to go up to 100 so let's increase the speed by a bit okay so in here we are increasing the film amount by time.deltatime multiplied by the maximum size which is a hundred and then we divide by 5 so essentially we are going to increase a hundred over five seconds and you simply do set the film value to this film amount and here we nationally start off at zero all right so let's see if all of our bars correctly in five seconds yep there it is there's one film to film three four and five and yep as you can see they all filmed correctly the bar goes in once it reaches the end the helmet turns to red then it passes on to filling the next one and so on and so forth so our logic is completely correct and we have our various bars being filmed up one by one now the way we set up our code makes it very simple to go the other way so let's simply try creasing the value so in here and let's her off at a hundred and decrease it by this so it should be empty after five seconds yep there it is it starts off full and goes down down and down and down into zero and as you can see they start off in red then turn off into grey so there you have it we created from scratch the mercenary bar as it's used in Assassin's Creed Odyssey as long as you can download the project files and utilities from Unity code monkey comm if you have any questions post them in the comments and I'll do my best answer them subscribe for more videos and I'll see you next time