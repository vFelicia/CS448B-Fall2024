hello and welcome I'm your code monkey in this video we're going to make a simple character move around the map let's begin okay so this is my scene I have a character playing a default idle animation in the code here I have a base character class it exposes some functions to play the animations that we're going to need so in this case we can play the whomping animation and the iodine animation both these functions take a vector for the animation direction this base class essentially is the connection between the logic and the visuals we always want to write code that is decoupled from other systems so the movement logic when we use these functions but it doesn't matter how they are implemented we could switch to a different animation system and as long as these functions do the same thing then everything would work just the same so with that let's start by making our character script so in here let's make a new csharp script and we're going to call this the player character going to place a script on the player character game object which as you see already has the base as another component so let's open it so in here the first thing we're going to do is do a private void awake and on our awake what's grab a reference to the base class that is on the same game object so in here make a private for the player character base and call it player character base and we're going to grab this from the game object get component of type player character base okay so we can use this reference to access all of our animations so now let's do some movement on our private void update we're going to test for some input now there are many ways to test for input including getting it from a gamepad or joystick but for this video let's keep things as simple as possible so we're simply going to test for the keyboard so in here do an if input get key of key code EE we're going to use W a s and D as our movement keys and here we are using get key instead of get key down because we want this to be true every frame where the key is pressed so as long as the W is pressed we want this code to run so in here in order to do some simple movement we just do a transform that position and add to that position a new vector3 and since this is EE we want them to move up so on the X given 0 and on the y one to move in vertically going up then we multiply this by a speed variable so in here to find a float for our speed and let's give it at 40m just for testing and afterwards let's also multiply by time dot delta time okay so if the W key is pressed down on every frame we are going to modify the transform position and we're going to increase it by a factor moving upwards multiplied by a speed variable and then multiplied by time.deltatime this variable contains the number of seconds since the very last frame so if your game is running at one frame per second and this will return one and if your game is running at 30 frames per second then this would be zero point zero three three so essentially by multiplying it by our Delta time we can make our movement independent of our frame rate so using this our character should move up four units every second so let's test here's my character and if I press W yep there you go he's moving up at a constant speed okay so that's the basic of our movement now let's apply to all of our other directions so back in our code first we want to check for the other keys but we only want to modify the transform position once in order to keep our code nice and clean so let's copy this from here and place it at the end of all the keys and in here and let's define some floats for the move X and a float for the move Y so these are the variables that we're going to use to see where we are moving so in the case of W we're going to set the move Y to be one F so we're going to move upwards so let's copy to use all the other keys so we got W get the SD a and B D so on W move up on the Y is you move down on the a you move to the left so minus one on the move X and I'm D we set the move X to be plus 1 and then here with a fine a vector3 for our movement direction which will be a new vector3 using our move X and our move Y then that's what we're going to use in order to move so again we're adding to the position our move Direction multiplied by our speed multiplied by our Delta time so it's S&C if our character cannot move in every direction okay here's the character and move right move left move up and move down and yep our character is now currently moving in every direction now there's actually a hidden issue in here which is if we move diagonally we are moving faster than if we move in just one direction so here I'm going to the right and if I also go up you can see the character is moving quite a bit faster than just in one direction this is not our intended behavior so let's look at what's causing it so we're here in our code we are setting move X and move Y floats and in creating a direction with it however if we have both the X and the y being set then this vector won't have a magnitude of more than one this is what caused him to move faster when he's moving diagonal in order to fix that all we need to do is normalize this vector to make sure the magnitude is always 1 so if we are moving both on the Y and on the X then both of them will be set to 1 so this vector would have 1 1 but then since we are normalizing it we are setting the magnitude to just 1 so essentially we get a vector of 0.5 0.5 which is correctly moving in that direction so let's test and our speech now be correct and yep move the right move up move diagonally and yup the speed is now correct going in every single direction all right so now that we have basic movement working let's apply some animations make your action work correct so back in the code here the first thing we're going to do is put this code into its own separate function to keep our code nice and clean so in here make a private void and call it handle movement and we're essentially going to copy all this and there and we're going to call this function on our update ok the code is much more clean right now so now we have two types of animations we have a walking animation and an idle animation so here let's make a boolean to identify if the character is idle so we do a bowl is I don't now where I don't if we have no movement which essentially means if the move X equals zero and the move Y also equals zero if both of them are at zero then the idle is true so then we simply do one if if is either is true then we want to play the idle animation so again we use our base character so player character base we go in there and play the idle animation it needs a vector so for now give it vector 3.0 and if we are not idle then we are actually moving so let's do player character base dot play the walking animation and we're going to play towards our move direction so here like that okay so let's test and see if he's correctly either or walking okay there he is currently I don't know if I press down yep there you go he's playing the animation and right and diagonally and going up and so on and yep now if I stop him yep he stopped goes back to I don't want animation I don't walk animation I don't okay great so the logic seems to be working however we have one tiny issue which is our idle direction in here if I move up and then I stop yeah we can see that he chose the idle animation to be on looking down when it should really be looking up so if I'm moving to the right I wanted to stop and look to the right move up stop and he should be looking up so let's see the code so the issue is in here when we are playing the outline mission we are using a vector3 of zero that is because since both of these are zero that's the only factor we have so what we need is to store the in last direction that we moved and use that as our item direction so let's go all the way up here and make a private vector3 for the last move direction and down here when we actually move let's set the in last move direction to be this moved here and then we can use the last move here as our animation direction for our eyeball so when every move we update this variable when we stop moving we use it as our eyeball direction so let's test okay there he is I can walk around and if I move up and I stop yep there we go he's now playing the idle animation walking up which was the last movement direction do the same thing to the right and now he's idle idle and so on and so forth and yep everything is correct moving in every direction and playing the correct idle animations so there you have it we set up some very simple character movement our character can move around and play walking or the idle animations as always you can download the project files and utilities from unity called monkey comm if you have any questions post them in the comments along with my best answer them subscribe for more videos and I'll see you next time