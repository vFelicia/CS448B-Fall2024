in this video we're going to make a pulse radar to detect enemies this won't be an object that we can place which sends out a pulse and detects any enemies or items it finds then in the end we're going to convert it into a UI minima let's begin hello and welcome I'm your code monkey and this channel is all about helping you learn how to make your own games with nf2 torrents made by a professional indie game developer so if you find the video helpful consider subscribing so here's what we want to create over here you can see a bunch of enemies just running around as one with some items scattered throughout the map now with the button I can hide the enemies they are still alive and they are still moving they are just hidden with another button I can hide the atoms and now I can hide leave background now everything is invisible and it seems like we can only see a black screen however if I enable the radar pumps and if there it is there's our radar sending out pulses and locating objects and enemies it hits with a color we can identify that over here we have an item and over here is an enemy moving around as you can see by the location of the Pink's so as the pulse reaches the end it fades out and resets back into zero I can press some keys in order to modify the range of my pulse and there you go now what it is going much further and with no the key I can modify the speed there we go just like that pulsing out very quickly so we're going to build our class in a nice way so we can easily modify these sorts of parameters so over here we have our nice effect also in the end we're going to convert it into a nice UI element just like some sort of minimum so now I can move around with my player and I can look at the minimap and if I hide the enemies and the items there you go I can still see them on my radar so I can see there's an item in there and I move and I capture the hidden item so this could be used to the tech club enemies or maybe a special mini map that showed the location of hidden items or Easter eggs you can see this effect in action in one of my games survivors quad gauntlets you can throw out a motion sensor which sends out pulses that locates enemies even when they're hidden since the game is heavily based on field of view this effect works as an excellent mechanic you can pick up the game included in the game bundle alright so this circle let's get to it so here's our starting scene over here I have a bunch of enemies just roaming around as well as some items this is pretty much the same starting scene that I used for the radar effect video check the link in the description if you haven't seen it yet in that video I cover a radar that sweeps through an area and locates items and enemies now in this one going to have an expanding circle instead so here let's begin by making the visual so a new game object let's call this the radar pulse now inside let's add a 2d sprite and over here in the project files I have this nice texture there it is you can see a circle with a fade on the inside so this is our pulse sprite and essentially what we're going to do is increase the scale of this game object over time okay so this is our setup now let's make the script to control it over here let's make a new script call it the radar pulse and let's drag it on to our game object like that okay now in here let's first grab our pulse transform okay here we have it now let's also define a private float for the current range and also another for the range max so on awake let's set the range max at let's say 300 and then we make our update and on update we increase the range by a certain range spin x dot time and then if the range goes past the maximum and we reset the range back to zero and after all this we apply the range to the pulse transform all right just like that so you should be able to see our pulse constantly increasing reaches the maximum and resets okay let's see and there it is and increasing in reaches the maximum and it goes back to zero so there you now we have our pulse constantly going up okay great now let's see how we can actually locate our objects so for that in here we're going to use the physics 2d use the circle cast function by now you're probably already familiar with how a great cast works it sends out array in a direction so it has an origin and a direction and here it's similar except we use a circle area rather than just array so do our circle recast which requires an origin the origin will be our transformed position then we require a radius which will be our range and then we need a direction in case we wanted to move the circle but in this case we just want to test it exactly where it is and we're simply going to increase the range so in here let's only pass vector to zero okay so we do our circle test which returns a raycasthit to D and now in here we can test for the collider so if the collider is not known then we hit something so we in here just for testing let's spawn a simple popup so in here I'm using the text popup function from the utilities as always you can grab the utilities for free from Unity code McKee calm so this won't spawn a popup let's one is popup same thing and let's put it on the position that it hit so let's use the array cast it and use the point okay so just like that we should be able to see a popup whenever it collides with some object let's see okay here it is and as you can see the problems are going out however you can see an issue which is they are weirdly positioned the reason is because we are setting the range on the vector to local scale so that applies the range on all sides but then on the circle cast we are using a size which is only a radius so it's only on one side so in here instead of using our phone range for our circle cast we want to range divided by 2m since essentially the range that we have in here is multiplied by two since our pong circle won't expand from both sides so let's see any up there it is just like that you can already see the pins are correctly located so as the pulse expands there we go once it hits something it triggers a nice pop oh okay great now you can already see some issues for example you can see the issue with multiple things for the same object so essentially as it expands every single frame we're doing a ray cast so the same object will be hit multiple times over the same frame so let's fix this by making sure that we only pane once per each object so in order to do that in here all we need to do is keep track of what objects we already hit so we know which ones we can ignore so up here let's make a list you can make a list of quality D we initialize our own list in here and in here okay we hit something but before we spawn the profit we're only going to do that if the list does not contain this Collider we gas it to be colonizer so we only run this code if it does not contain that coil so if it doesn't then we add it and we do our puppet okay there it is just like that this should be working let's test okay there it is increasing and yep fire the ping there and the ping in there and a ping in there okay great however now it goes up it resets and now you can see an issue we paint certain objects and we no longer paying those exact same objects the second time that the pulse goes out the reason is because we are adding colliders to the list so we need to make sure that we clear the list when we also reset the wrench so over here extremely simple when we reset our range let's also go into the list and call it clear okay let's see okay here we are an increase and if they're hoping down in down now let's reset and try again and ping that one again a second time all right so our pings are correctly resetting between pulses okay great now the other issue that you can see is that we're not really pinging all the objects only some of them are actually being hit this is due to the way that we're doing our circle cast it stops as soon as it finds just one colliding object so if multiple objects are inside the range only one of them won't be hit this motion is very simple in here instead of using our circle cast we can use the circle cast all this instead of returning just a single break asset it returns an array of break assets so this returns an array and then only need to do let's do a simple for each and use the exact same name and now in here all the code is exactly the same so here we get an array of all the collisions that occur inside this circle then here we cycle through them and spawn the same thing alright let's see okay here we are an increase and ping that one and that one and now down down down down and finally down and now it resets and there you go it's pinging all of them once again right great so we have our pulse correctly hitting every single item an enemy and it goes up to the end and resets and everything works exactly as intended okay great so with the logic working now let's replace these debug pings with something more appropriate now over here the project files I have this nice prefab it's essentially just a pink sprint and then contains a simple radar pinging script here it is the script as you can see it's pretty simple very small and here we just have a reference to our sprite render and then we have some code over here running on every update we are essentially lowering the alpha based on a certain disappeared timer and when it reaches zero we destroy this game object then here we can set the starting color and we can set the disappear time so just a very simple script nor to make sure that the alpha for the ping goes down and then this raise itself so now we can go into our radar pong script and in here let's have a zero noise field for our prefab okay we have our film let's set it in the editor there's our film then just drag the prefab okay and now let's go down here here we are spawning or testing things and now instead of doing this let's simply instantiate our prefab we instantiate it on the array casted 2d dot point all right so just like that we should be able to see the pings in Senshi ated instead of our puppet and there it is any of their yo as soon as it goes up when locates something it spawns our paint right awesome so that we have this let's set the pink color based on what type of item we hit so one pink color for the items and one for the enemies so for that let's use the script so this returns a transform for the radar pane transform then we can use the array they are pink transform to get the component type radar thing so here we have our script and I would seen here that we can call SATCOM so now in here on let's identify which one is an item and which one is an enemy and here you can see on the hierarchy of the items and enemies here they are the enemies are using this script the character waypoints hammer and then the items in here are using the item hammer so we can use these scripts to identify what we are hitting so in here before we set the color let's go into our break acid 2d and we go into the collider game object we get the component of type item gambler so if this is not known then we have hit an item and if it hits the character Y points in order then we hit and so now in here for the enemy let's set the color to a new column let's put red one green and blue okay so full red and now for the atom let's put it on phone blue ok this should be working let's test and here we are and yet there you go the pings are correctly being in Senshi ated spawning in the correct position and using a nice color so the enemies are pinging red and the atoms in blue right awesome now let's just see how we can play around with the other function on the radar ping so in here they set disappear timer so if we set it to the range max divided by the arranged speed essentially we're making sure that the radar pink won't live for as long as until the range resets and reaches the same size so here it is there you see that thing happened now it vanished now it spawned again vanished and spawned again okay so since we made this based on the range speed over here we can't increase it and there it is now the pulse is going on much faster but as you can see they stomping exactly the same so we only have one ping alive for each pulse if we wanted we could also multiply this by a certain value to keep it alive for longer and there's the effect and now you can see that each paying survives for about three pulses so with this we can actually see where the enemies go so they I want to stop now it moves there was a ping they're playing they're paying there so if we hide everything we can see and look their enemies in there and now he's moving down there now they're on that right so you can easily play around with these values to figure out what value is best suit your game so with this the effect is almost done let's just add a couple more things let's first add a fade at the end of the range so it doesn't look so jarring reaching the end and immediately resetting so here on our update let's start trading after a certain amount so here with the following a float for the fade range in here let's put it the last 10% so let's put the fade range at 30 and then down here while inside our update let's test if the range is past the range max minus our pain then we want to start to fade so we also need the color okay so we have the color and the sprite render so here we have our code we're simply setting the Alpha we're doing an alert between 0 & 1 and the way we are calculating the T in here this value won't start off at 1 and approach 0 as it range increase to reach the range max so we start off at 1 in a at 0 then the end we simply set the sprite renderer to this cone okay so let's see okay here we are and if there you go you can see a very nice fit at the end so the effect no longer looks quite as abrupt so it goes once it reaches the end the Alpha starts to fade until it commonly vanishes and again we're doing all of this based on fields so in here and let's say the fade range is a bit longer so I'd say 100 and just like that if they're days we have a much softer much longer faith so you can see how you can play around with all of these values in order to figure out what best suit your yeah okay so in here I have had it some simple keyboard controls again our code works with some nice simple variables so we can simply increase or decrease them let's see okay here we are now I can press this button and increase the range and there you go now the range is much further and I can press this button in order to increase the speed and there you go now I can decrease the range and let's make it yep just like that very small and make it bigger and make it slower and faster so as you can see this effect is very easily adaptable and again hide all of the underlying objects so there you go no background no items no enemies and as you can see everything exactly working as intended alright so just like this we have our nice radar pulse effect and now finally just for fun let's take this effect and apply it into a minima so I'm going to do pretty much the same thing that I did when I made the minimum video so check the link in the description and go watch that video to see a stepbystep on how to create the mini map and render your scene onto it okay so here I am with my player character that I can move around and over here in the UI you can see the radar effect working and you can see by the things that there's an item above me so what's enabled a visual yup there we go there's an item in there and it's being identified on the pulse and I move and I capture it and there you go I picked up the item there are two more in there and there you go yep there they are right next to me and I picked them up and just like that pick them up and they are no longer in there so I can now hide the enemies as if they had some sort of cloaking technology and there you go I cannot see them on the map but they still exist and I can see them on the radar so there's one right there so what I did was first of all make this UI element over here inside my canvass I just have this game object inside I just have this raw image the reason why it's a raw image is so that I can add a rendered texture onto it and this radar texture is actually what is this playing what that camera sees so the camera that is printing out to this render texture is a secondary camera in here so this camera is only rendering things on the radar layer so over here only on the radar and the main camera is not rendering anything on the radar so on the radar objects like the ping and the radar pulses you can see they are on the radar layer so that way they are visible on the radar camera but not on the main camera then the radar pulse is simply a child of the player so it falls on women so again here it is the full effect and there you go I can hide everything and using the radar I can still look that there's an enemy right here so just like this we have our entire very nice effect as you can see this is a great effect if you have some sort of enemies in your game or just some hidden easter egg items as always you can download the project files in a tony's from in Tacoma comm if you liked the video subscribe to the channel for more ent tutorials post any questions you have in the comments and I'll see you next time