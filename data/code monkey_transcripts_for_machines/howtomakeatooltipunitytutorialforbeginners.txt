hello and welcome I am your code monkey in this video we're going to make it on tape in unity let's VM so over here I have a generic uiwindow it has some text and some buttons now we would like to display some extra information when we pass the mouse over each button and each label so we're going to use a tooltip to do that first let's create our tooltip and the editor so let's go into the canvas and here first of all create a new empty game object name is Salta now inside we're going to need text and a background so for the background just add a simple image and for the text and the text give it a font size of about twelve and position it on the in lower left corner now we're going to anchor both of these to the in lower left corner and put them all on zero all right so just like that we have this game object that we want to move around now the size of the background doesn't matter since it won't be dynamically modified based on whatever text we give it and for the text let's just put it on four and four so we have a little bit of a border so the text is easier to read and finally disabled recast target just in case we need to click through our filter all right so that's the transform for our tone tip now let's make the class to actually handle the code so a new csharp script my name is Dalton so in here we're going to have two functions a private void show tooltip and a private void heidsontour first thing we do is just set the game object to active either true or false in order to show or hide it salted for the show tooltip as a parameter we're going to receive a string for the haunted string and inside we're going to set the text so in order to keep our code nice and simple let's first grab references on our awake okay so first things first set the tone tip tax dot text to our tool tip string and now we need to calculate the size of our background so we do a vector2 for our background size now to get the width we get the tool tip text dot preferred width and for the height we don't have text at preferred height this will give us the exact size that our text is occupying while using this string so we offset our text by a little bit in the editor in order to make it easier to read so we need to add that in here as well so we define a float for the text padding size and we set it at four so we're going to increase the background size by the padding multiplied by two since we got padding on the left and on the right side and finally we simply accept the background rect transform dot size Delta to be this background size okay so now for testing let's show it with some text so we go up here and we simply do a show tooltip and let's give it some random tilted text all right so let's test and yep there's the tooltip and as you can see the text is correctly displayed and the background is also correctly sized to match whatever text we put it now let's throw out some random tags to see how the background is correctly changing okay so here is some simple testing code I'm creating a function periodic which is part of the code monkey to notice that you can grab for free from unity code monkey calm now essentially this will run this action every half a second so we're going to define a string with just a bunch of random characters and we're going to cycle through it between 30 and 100 50 times and increase by adding to our show text a simple character from this string and afterwards show the total so essentially this will always be random so I see if our code is correctly resizing our background regardless of what text we give it and yep as you can see regardless of the random text that goes in it correctly resizes the background to match whatever is in there and it works even with multiline text okay now let's make our tool tip from of the mouse so in order to do that let's go to the update so in here we can get the screen mouse position using input Mouse position however this is the screen position of the mouse and not the UI position so we need to do a conversion so in order to do that we're going to use the rect transform utility and do a screen point two and welcome point in rectangle for the rectangle we want to convert into is going to be our transform dot parent for the screen point we're going to use the mouse position for the camera we're going to need a reference to our UI camera and finally we return this value into a local point so we need the reference to our camera so let's go up here make a private camera for the UI camera and make it a serialize field so we can set it in the editor and here it requires a rect transform so let's do a get component okay so with this we are correctly converting the input mouse position into a position inside the parent of this transform so we have the in local point which is the unload composition so in here all we need to do is that the transform that low composition to be this local point okay so let's test and see if the tooltip is following the mouse make sure we drag the camera onto here now since we are setting up our canvas to use screen space camera then we need our UI camera reference but if we were using screen space overlay then we would not need the camera reference and we would simply leave it as no so let's see and yep there you go as you can see the tooltip is randomly changing the background some words everything some words and it is now following the mouse okay now let's make some static functions to show and hide our tooltip so we're going to make a public static void show 20 static and give it the same parameter so a string for the tooltip string and we're going to have a public static void I don't it static we're creating static functions so we can easily use this class from any other class we need so all we need is to go up here and create a private static tooltip for our instance and on away set the instance to this and here simply do instance not show tooltip give it the tooltip string and same thing in here all right so we now got these two public functions that we can use from elsewhere in our code so just for testing we're going to add a tool tip to these buttons and these labels to see how we could use this on a final game these buttons have a button UI component which again is part of the code monkey Tonys it's a very simple function that has some classes so that we can move over and click our button which is what we're going to need in order to implement our Taunton so just for testing create a new C sharp script this will be our window so on the button UI I have a mouse over once funk which triggers an action only once when the mouse goes over the button which is exactly what we need in order to show our tanta so the action when I pass the mouse over will go into the total class and call the show taunted static in this case say attack and then I have the mouse out once funk which triggers once when the mouse leaves the button so it is perfect for the height on tape static so let's apply this to all the buttons and all the labels okay so here it is pretty simple we have some strings that won't be displayed when we pass the mouse over a button and then when we leave the button we simply hide the tonton so let's see that in action okay here's the window and if I pass the mouse over yep there we go I got a nice stone tip saying this is the attack button this is the defend button the patrol health amount movement speed and attack damage and as you can see it follows the mouse so now we can easily give the player some extra information whenever we need to so there you have it created a tooltip to display extra information to the player while making the code dynamically adapt to the size of whatever text we give it in the next video we're going to make sure our tooltip never leaves the screen and it's always on top as always you can download the project files in utilities from unity code monkey comm if you have any questions post them in the comments and I'll do my best answer them subscribe for more videos and I'll see you next time you