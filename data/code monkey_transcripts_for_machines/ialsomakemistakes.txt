hello and welcome I'm your KMI so something just happened that I think is an excellent reminder of how myself and anyone who does tutorials we really just all human when you see a tutorial the final video is really not representative of what it took to research to get to that point that final tutorial might look perfect with no bugs no trial and error no mistakes nothing but that is because whoever is teaching the tutorial like myself I've literally already made all of the mistakes and all the trial and error during the research before making the final tutorial video just yesterday I did a live stream and I actually encountered two bugs that were very tricky to solve and someone wrote something in chat something like it's great to see how you struggle just like the rest of us and yep that is absolutely correct I encounter bugs just like you I have to find the cause just like you I'm really no different no one is encountering bugs is really a perfectly normal part of the process of building or learning literally anything so if you want to see how I solve bugs in real time if so you can watch what happened on this live stream okay what on Earth is going all right so the first bug was a non reference exception now usually this is a really isas to solve bug I've got my fourstep process and it always works great however in this case things were different I had really no idea what was going on supposedly because the bug was on this line of code this one inside the undro system except undro should not be called at all when I play the game only when I exit so the fact that this was causing the bug exactly when I press the play button that was very strange so I did exactly what I always do to solve the no reference exceptions I added a bunch of logs to identify exactly what is now but that did not work for some weird strange inexplainable reason the logs were not running I add the logs right before the line that was shown in the stack trace and nope the logs did not run but the null reference error that was still happening that is extremely strange code runs from top to bottom so before getting to that line it has to go through the previous line it has to print logs but it wasn't doing that so all of it extremely strange I really had no idea what was going on you can see me trying all kinds of things on the live stream and thankfully Danny from the UN do seam he was watching the stream and pointed out how the error might not necessarily be on that exact line of code basically dots does a ton of magic sour generation in the background and because of that the stack Trace might not point to the exact line where the eror is actually throwing I didn't know this I obviously assume that whatever line was throwing the error was actually the line that was throwing the error but assuming that is not the case I quickly looked at the lines around that line and I very quickly found the reason no reference exception errors are extremely common errors so I can very easily figure out what is causing it when I find one just by looking at the line I knew exactly what was going on oh is it maybe not like in this function at all could it wait ah okay well I just figured out what is the answer it's exactly over here on this one previously in the live stream I showed the debug visual for how the FL Field pathfinding Works it shows all the visual errors for the algorithm it's all pretty fun so anyways I enabled that debug visual just to show it and then I disabled it and then over here on the do scrip system over here I'm accessing that debug visual in order to update it but of course if I disable the game object that actually shows the visual if I do that then the awake never runs which means the Singleton instance is left now so that was r the issue super simple to solve but in this case became really tricky to debug specifically because dots apparently does not give you the exact line number in the stack Trace all the time du to the whole Source generation it might give you a line that is different from the actual line causing the error I didn't know that I had no idea dots did that I did know there was Source generation but I never considered how the in line numbers might be different so I did not know what was happening here but that means that this bug was actually really awesome thing anytime you encounter a bug it's always a great chance to learn something new so my advice is don't get frustrated when you find bugs take them as learning experiences by solving them you will know what to do next whenever you encounter that bug the next time WR play and there you go does work all right so that was that was fun okay that was a a good thing to to find out then the second bug was even stranger even hard to debug so I had a system to make the zombies attack the HQ however only some entities should do that if the entity if the zombie has the random walking component then that entity should really just randomly walk around the spawn point it should not go towards the HQ so I thought this was pretty simle to achieve I just had the query with none for that component and with that the entities that have that component should not attack the HQ however that was not the case they were still attacking the HQ I had no idea why the query wasn't running correctly I verified the code and everything was written correctly it has the W none random woning so it should work but it didn't also verified by stopping the game and inspecting the entities manually and yep they did have the random walking component so they had it but they were also still being included in that query even though that query had the wood none so that made really no sense this one really confused me for quite a while this is very strange if the entities did have that component why on Earth were they being included in that query now first I thought the issue was that I had two whone calls thinking maybe it had to be just one with the extra comma for each component I thought that was the issue but nope that was not the case eventually I also added the log to check if it actually had that component and it said that it didn't so basically over here the log is saying that it does not have the random walking component but when inspecting the entities manually I can see they do have that component so this was all extremely odd it took some time in exploring all these scripts in order to finally figure out what was the reason it was a weird ordering issue basically when the units are spawned it just spawns the unit prefab and that one does not have the random one component that one is ADD manually afterwards because only some enemies will have that component for example the hord enemies these are not supposed to have that component so I was manually adding that component after spawning however adding components that is what is considered to be a structural change so you cannot do that inside a for each query so for doing that was using an anti command buffer specifically this one on the nend simulation and right here this was indeed the issue basically the unit was being spawned right here spawned without that component and then it was queued up to add the component but that was only happening at the end of frame so on the beginning of the frame that enemy entity is being spawned and at the end of frame it is adding that component but in between these two actions that is when the attack system is actually running and when that system ran the entity did not indeed have the random walk component attached so it was telling the entity to attack the HQ and only at the end of frame only then then was it actually adding the random walking component so that was the issue all about the order of operations after finding out then the solution becomes super simple instead of queuing up the N command buffer to run at the end of frame instead of that I just manually created one and ran it manually after the 4 each quering that way when the attack HQ system runs when that runs the entity does have the random one component and it does not go inside that query so yet now that a very random very strange bug and again yet another great reason for learning the next time that I encounter such a strange issue like this one next time I will remember to check the order of the operations so like that there you go the logic does work so yeah that was the issue okay so basically with this video I want you to always keep one thing in mind whenever you watch some kind of video tutorial on something literally anything when you do the fact that the person presented the tutorial is teaching everything correctly without any errors that is now representative of what it took for them to learn when you watch a video tutorial you are watching the final presentation after all the learning all the mistakes all the trial and error the final polish video does not include that part but that part absolutely still happens to everyone for example when I eventually finish my DOT course which by the way you can go sign up and I'll let you know when it's out when I do finish it you won't see me struggleing with these issues because the final video is meant to teach you how to build everything the correct way but as you can see here I am going through these issues while building the original prototype so when you yourself find bugs throughout your process of making games or making anything if so that is perfectly normal that is something that happens to literally everyone that's a perfectly normal part of the learning process it just isn't shown in tutorials but do know that it absolutely happens to everyone