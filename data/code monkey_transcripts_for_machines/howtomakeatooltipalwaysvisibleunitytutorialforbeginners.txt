hello and welcome I am your code monkey min this video we're continuing to make a tool tip in unity we're going to make sure our tooltip never leaves the screen and is always on top let's begin okay so this is the tooltip we created in a previous video as you can see it shows up when I pass the mouse over a button and the background correctly scales to fit whatever text I give it now one way issue we have is if we have a button right next to the side of the screen so with the window right at the edge of the screen if I pass the mouse over and I move to the right and as you can see the text is now hidden and we can't really read it so let's solve that problem so here in the code the code that moves our tooltip is up here on the update we are accounting leading a local point using the rect transform utility to convert our mouse position into a position inside our canvas now there are two ways we can validate our position we can try to validate the screen position before converting it so we would modify the input of emotion or we can correct the anchored position after we actually place it on the normal position we're going to correct it afterwards since that way we no longer need to worry about screen space conversions and the code won't be easier to follow so first let's grab the new anchored position so a vector for a anchored position we're going to grab it from the transform the Kid component type right transform and grab the anchored position all right so we now have a nice vector to position that contains the exact position following the mouse so in here we need to test if we're going past the right side of the screen so we test if our anchored position dot X was this size of our background so up there we have the background rect transform so we get the rect dot width so this position will be the position of the mouse plus the background size so if this one is bigger than the width of our canvas so here we need a serialized field for a private rect transform for our canvas rect transform using our canvas rect transform we can access the rect dot width so if our x position plus the width of our background is bigger than the canvas width then we have gone past the edge of our screen so we simply reset the anchored position that X to be on the width minus the size of our back and that way it is exactly hugging the right side and finally we simply do a transform get component of our rect transform and set the anchored position to be our anchored position all right so let's test and okay here I am with my tooltip and if I pass over and I move to the right and yep there you go once it gets there it no longer hides behind the screen and it now correctly locates in order to make sure that tone tip is always able to be read now just only don't note here the calculation to see if we have gone past the screen in the case that we are using in here we are testing the X plus the width is bigger than the canvas right transfer and our width and the reason we can do this is because we have anchored to the in left position if we were anchoring to the middle then it would be wrecked out with divided by two so in order to keep things simple we simply anchor it to the left side and that way it goes from zero to canvas not width all right so now that we are correctly not hiding the tooltip on the xaxis and let's make sure it also doesn't leave on the yaxis so in here we do very much the same thing except instead of the X we modify the Y and set the width we modify the height so here I have shipped the window to the corners and I have given three lines to the attacks and let's see and yep there you go it has three lines and normally they would all go past the height but right now they are correctly staying inside the screen so if I move the attack damage to the right you can see it doesn't leave to the right side and also doesn't leave up all right so our tooltip no longer goes past either edge of our screen that way it is always readable and visible now one small issue we still have with our tooltip is with regards to the sorting order right now it all works correctly and the tooltip is on top however if we were to instantiate another window in runtime so I can simulate it by simply pausing and duplicate the window and you can see I've got the window on top of the tooltip and right now let's shift this window a little bit to the right and just like that this is the window on top and if I pass the mouse button and yep there is the tooltip is now hidden by the second window the UI sorting order is based on hierarchy so when you in sin she ate something in runtime it automatically play is it as these last sibling so in this case and ends up on top of the Tilted so let's fix that by making sure the tooltip is always the last sibling so over here we go to the show taunted function I have the game object in here so in here all we need to do in order to set the tooltip on top is simply do a transform dot set as last sibling this one put it as no less sibling within the same parent so right now in here and let's first duplicate this window and as you can see the tooltip is not on top so let's put this and a window are there on the right as you can see by default in the editor our tooltip is hidden behind this window however when we run the code pass over that one and there you go it is on top of both of them so I can now past and see that that button that is almost hidden is the patron button and as you can see I can also pause it and here duplicate the window and you can see the tongue tip is now no longer on top so I pause it but when I run the show code it automatically sets as my assembling so it is always visible and always on top so there you have it we took our tooltip and made sure it never leaves the screen and is always on top in the next video we're going to polish up our tooltip by adding various functions in order to update the text or do a small admission as always you can download the project files in the Tonys from unity code monkey comm if you have any questions post them in the comments and I'll do my best answer them subscribe for more videos and I'll see you next time