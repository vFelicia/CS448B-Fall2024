hello and welcome I'm your code monkey and here's a quick video on how to change postprocessing through code now in this video I'm talking about postprocessing when using urp not the package that you use with the buin runner pipeline those are two completely different systems if you don't know difference between those two go watch my quick video on it and this method I'm showing it here in urp but it works exactly the same in hrp just not with the builtin RP if you want a 10second answer then here it is just go inside the volume grab the profile call the try get and get the bloom compon or the effect that you want then just go inside that effect and modify anything you want but if you want to learn how I actually learn how to find this then keep watching the video quick mention the Black Friday sale is starting this week there will be tons of assets and tools on sale there are Flash Deals up to 70% off which will last for a little while but you can see exactly when they are coming up so check it out to the link in the description so here's the scene and I just have a simple postprocessing volume over here I got a game object with the volume component and a bunch of effects so I've got Bloom so we have a nice glow and call adjustment just setting set a bit of contrast and a bit of saturation also if you don't know how to get bloom or a glow working check out my quick checklist now the goal here is I want to modify this through code for example I want to press a button and over here modify the bloom intensity now due to how the postprocessing system works it's actually a bit tricky to figure out how to do this you might think you can just access the volume component so let's try doing that so let's make a new CP script call this change post processing let's make a game object to run it and attach a script okay now here let's first add a very simple serialized field make it of type volume and in order to access volume we need to add using Unity engine and it's inside the rendering so we add a volume let's call it volume okay this now in the editor let's drag our reference all right and now here let's do a very simple on a private void update and on update let's listen to input so input let's say get key down Fort for testing so when this happens we want to change the bloom so for example if we go inside the volume and let's say we find something called intensity and nope we can find it if I try to find Bloom nope also cannot find it I cannot find color adjustments any saturation anything like that nope none of that exists all we can modify is for example the weight then we can also modify the profile so these are pretty much the only things that we have access to and in the inspector over here we can see what those things are so basically we can access everything up here so mode weight priority and profile but nothing down here so nothing on the actual specific effects so this is the tricky part the way that this volume system works is with a kind of component system so very much like with regular game objects where you attach components like for example over here the volume component you've got the transform component and so on for the volume this whole thing works pretty much exactly the same way so you have the volume and then each effect is that as kind of a component so over here we added two components so the bloom and the color adjustment and the reason why I know this is because thankfully this system has all of the source code available one way to get there is simply to right click on the volume component and just click on edit script and here it is it shows up the script on my visual studio alternatively if that doesn't work for you you can browse that script by going over here onto the project window and if you scroll down you can see the packages drop down menu so you can see all the packages that are installed and by the way if this one does not appear so if you click here and the packages is empty if so then up here on the top right there's this button with a little I icon if this this one is toggled then it pretty much hides the packages so we cannot expand it if this one is UN toggled then you can see them with the packages visible now we can scroll down and you can find all of the various packages and all the various things so all the source codes over here included now in this case finding the volume component inside all this actually Prett complex but thankfully over here we also have a really nice search bar so over here we can search for volume and now by default this one will probably be over here only searching in assets so it's only going through your own assets for this project and looking for anything anything with that text now here of course we don't find the EXT volume component because does not exist in the assets but rather in the packages so if you click on this yep there you go now it shows you everything and now here if you scroll down yep over here we can see the actual volume component and if we click on the x button on the search bar over here we can see where it is exactly so it lives inside the core RP library inside runtime then we've got the volume and over here the volume component so you can double click on this and yep here is all of the source code for the actual volume component and if we look at this we can find all the things that we can actually see on the inspector so for example the is global we can see the priority the blend distance the weight and over here the volume profile both the shared one and the normal one so here in the inspector yep we are seeing all of these fields and how this system works is that the effects are not really attached to the volume but rather each volume has a profile and then the profile is what contains the various effects so over here if we go inside the profile which let's see the type so this one is of type volume profile so once again in the project files let's go over here and we find the volume profile right next to the volume and now here we can see right away the way that this works is over here we've got a list of volume component for all of our components so this is how all of the effects are added they basically all extend this base volume component so now for example we can do the exact same thing to find the bloom effect so let's use the search bar let's look for Bloom and over here yep we find it right away so here it is let's click the X to see where it's located so it's here on the universal RP runtime under overrides yep here we've got the bloom and over here we can see that that one does EX and the volume components and then over here we do see our field so finally we have access to the intensity so basically what we need to do is access the volume then from the volume we access the profile then on the profile we have the script and on this script we have the components list we can either cycle through this one or this one actually also has a very useful function down here we can see a try get function so we can pass in a component type and it will return it if it contains that effect so we do that to get the bloom and then we can modify the intensity so let's do all of that over here on the volume let's first grab the profile then let's call try get and we're going to try to get of type Bloom and for Bloom we need to figure out where it exists so we can go inside the bloom field over here we can see it exists inside this Unity engine rendering Universal so then here we add our using so we find Bloom out Bloom for our Bloom and if the profile has this effect then over here now we can go into bloom and modify the intensity and set the value to something so let's say 10f okay so that's really it let's test so here it is everything is looking pretty normal now I press the button and you there you go everything nice and shiny all right awesome now to Showcase how this works with literally everything let's try modifying the color adjustments let's modify the saturation so over here let's do the exact same thing let's do it on a different button so let's say on the Y instead of getting the bloom let's get the color adjustments so here it is exactly the same thing then we go inside this one in this case we want to modify the saturation let's set the value and let's put it at minus 100 to get everything perfectly black and white okay so let's test okay so here we are everything went nice and colors now if I press the white key there you go everything perfect black and white all right great so as you can see this is how it works finally just for fun here I have another script this one is using some animation curves to animate the changing of the effects now if you don't know about animation curves I covered them in detail in another video they are a really awesome Unity feature with so many use cases not just animation so here I defined two curves one of them to increase intensity and go down another one to decrease saturation and go back to zero and over here in the code I just got these I do the exact same thing go inside the volume profile to get the bloom and the color adjustments with those two references then on a button I simply reset the time and then I evaluate the curve and get the value so everything is pretty much the same really simple script just get it nice and animated so here it is and if I press a button yep there you go really nice and shiny the intensity really goes up and then down and for the other effect press the button there you go everything becomes nice and black and white all right awesome so here it is this is how you can modify post processing through code and actually the same method is how you can also modify s machine through code which works very much in the same way with a component system this method that I showed here is one of the things that I teach in my ultimate unity overview course in there I teach this method for how to modify any field in any package or Unity tool and also another more advanced method on how to load the package source code directly into Visual Studio on top of that that course also has over 50 lectures each covering a different tool or feature of the engine so if you want to learn more on how to better use Unity check it out and also before I end this video let me just briefly mention yet another way to change effects which is simply to play with the weight so instead of having just one post Crossing volume component instead of that you can have two then on the second one let's say use a different post Crossing profile let's add just the bloom so this one is R intense and you would make sure that this one has a higher priority and over here with the weight you push it down to zero so with this with this one with the higher priority but weight of zero and the base one with the standard priority and a weight of one but this one if you want to add a nice quick flash you could simply increase the weight and then decrease so for example when the player takes damage you could just flash the screen by modifying the weight instead of having to actually modify the effect itself so that's just another quick tip for how you can play around the effects during gameplay there's many options depending on how you want to use them all right hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and I'll see you next time yeah