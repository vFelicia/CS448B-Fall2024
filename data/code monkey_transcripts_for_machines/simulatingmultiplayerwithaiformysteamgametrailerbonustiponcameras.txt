hello and welcome I'm your code monkey so recently I announced my upcoming Sim game called leaky Guardians go ahead and add it to your wishlist in order to announce the game I need to make a trailer and the game is meant to be multiplayer so it needed to show multiple players running around however the game is still very much in early development right now there's no multiplayer connection at all so that was a problem that I needed to solve how do I simulate multiplayer to show the vision of the final game in the trailer the straightforward answer is to just make some simple AI just like you would for making enemies or something like that however in order to simulate multiplayer that means I want the AI to control player objects now technically I could make an air script just for the app players make it specifically base to be AI controlled I could Define some waypoints and make the AI directly move towards it then play some kind of pickup animation or something like that it would require a bunch of specific code just to make that but it would work I've done that several times in the past however then I would have a bunch of duplicate code and tons of work that would only work for the AI I would basically end up with one player that is meant to be player controlled and a very similar one that is meant to be AI controlled so what I end up doing is actually something very simple and it's a nice trick that many of you might not know about so hopefully you find this video useful basically what you do is you simply separate the logic from the inputs then you have a script that listens to player input another one that fakes input based on AI that way the core player script is shared between both the player and the AI does making the code much much simpler so here I have my player it's pretty basic it's just walking around so I'm controlling the player myself and then over here are a whole bunch of AIS just walking around for example there's this one over here doing a bunch of predefined tasks so it goes to that position grab some resources goes there drops it then goes to another position and then back in there back to ground bringing resources and doing a bunch more things now with the game pause if I look at both these characters here's the one being player control you can see this one has a player component and then the air one also has a player component but then the player has this player input control script whereas the AI has this bot control script so they both share the same core player component but then have different components attached to those so let's see how this really works here is the planescript and the important part is over here here we have a bunch of delegates now if you're not familiar with delegates I have a home video on them so go watch that they are super useful and basically the way that this works is the player logic always asks for input directly through these delegates so for example down here for handling the movement it simply gets the input vector and uses that to move the actual object and then I just have a simple function in order to set all of the input delegates then for the other scripts here is the player input controller which as you can see simply has a reference to the player and on start simply calls the set input delegates in order to set input downloads on that player here it really just use the regular inputs so it goes into the input manager it can't let the move Direction then test for a bunch of key Downs something very basic by the way you might be questioning why am I not using the new input system this is a great example to how I developed my own Games first I get things working with the input manager and then in the future then I refactor it to use the much more capable input system that's exactly what I did in my free course and it's also what I'm doing here in my sim game so this script sets the input delegates using the input manager for the player inputs and then I have this other script the bot controller this one if we see it also has a reference to the same core player component and then down here on start it also sets the input vectors on the player however instead of using input directly from the player this one actually uses some AI to Define what values to return from these values so as you can see the get input Vector just returns a input moved here and this input moved here is down here on update depending on the action it is calculated based on some basic AI the analogic is all really simple for the trailer I just needed some super basic actions pretty much just moving interacting and waiting so all the actions in the trailer are just based on those the interact action depends on what object is in front of the character I'm using pretty much exact same logic that I covered in the how to talk to NPCs video for defining the actions I simply made this basic struct I made it serializable so that it shows up in the editor here's an example on the app I bought that we saw over here on the bot controller here is the bot action array so as you can see it's going to move to this position then it's going to trigger an interact action then wait for three seconds move to another one interact and so on so that is how the bot goes to this position then goes here interacts together that then goes there and tries to drop it and so on here are all of the basic actions and for triggering those actions AI is super basic so for doing a move to action for that it just calculates the direction towards the target position and then it stores that direction on the input move there which again the core player component is going to use this however this logic over here this is not directly moving the player that is going to happen later on when the core player script requests this input Vector so this doesn't actually move the player directly but still it's going to run on every update and then over here just a basic reach position logic if it gets close enough to the Target position then simply goes on to the next action then the weight action is also super simple just count down a simple float timer when some lapse goes to the next action and interact again the same thing it basically fakes pressing the interact button and then it's done so that's really it as you can see it's super basic then back here in the core play script this one does not care where these values come from so it does not care if it's the player driving these inputs or if it's the AI it does not matter it simply goes into these functions in order to test for the input and use that to move the player or use that to test for interaction and so on the score script does not care where those inputs come from here's another simple example that's shown in the trailer so this character right here is meant to go there in order to gather some food then it's meant to go here in order to feed the stinky and simply repeat if I look on the bot controller yep it has exactly those two actions so it has moved to an interact meaning it's going to move there interact and wait a bit then it's going to move here interact and wait a bit so let's hit an action if there's a character it goes there triggers an interact action then Waits a bit then when it's done goes on there interacts feeds the denki and goes there and does the same thing alright awesome and again I can still move my regular player perfectly normally so both these are sharing the same core components that's the main benefit of this approach the player class is internally shared between both the player and the AI that way if I want to add more mechanics like for example enabling the player to build something in order to do that I just need to add that logic over here on the interaction script and if the core player can do one action then the AI and the actual player can both do that action also because the code is very clean with clearly the coupon interactions it means I don't really have to change much here's the scene showcasing the building construction and as you can see the Bots walk around and they do some regular construction now as far as the Bots are concerned they are really just moving around doing an interact action so it sounds super basic so with this simple AI script only had to do was really just to find all the positions for all the interactions that I want to showcase in the trailer so there's this area right here for showing the player feeding dinkies then over here there's an area showcasing all the building mechanics and then finally at the end there's a area showcasing the defense mechanics now for this one these two towers they are driven by just regular AI so this does not require any delegates or anything it's just normal AI but also to make that defense shot look a bit more more interesting I also added a bunch of players just randomly walking around and finally over here for the resource Gathering automation for this part this is all handled through some regular AI so this Tower here this is looking for resources within a certain radius it looks for them it finds one picks it up and puts it over here in search then the vehicle is also some basic AI so the vehicle simply goes to storage if there's something in there picks it up and drops it somewhere else so the tricky part was really just handling the player eye to simulate multiplier and as you can see thanks to using this pattern for using delegates for inputs and also because of using clean code for the interactions because of that this was all pretty easy to do also here's an extra quick tip related to the trailer if you notice the trailer has some nice moving shots now for that the straightforward approach is to make some animations moving the camera so grab this virtual camera make an animation and move it somewhere that would be the manual approach however that is really pretty time consuming so a much simpler trick is just using the builtin cinemasion blending if you look inside the cinemasion brain so here it is the main camera and inspector yep it does have a in machine brain component and over here you can see some settings based on how it Blends between the various virtual cameras the important one is over here the blend so you've got ease in is out custom and so on and importantly over here AZ time so this is going to take 10 seconds to smoothly interpolate between one virtual camera and the other one so if you set it to a huge amount like this like 10 seconds then you take one of these virtual cameras you make the start virtual camera with a certain priority and then you make another virtual camera on a different position with a higher priority however just like this then it's simply going to start with this one enabled so to make a nice animation during runtime simply set this one as higher priority and then disable this game object then start playing the game now start recording and it's currently only showing the first camera and now simply enable this one and there you go it now nicely smoothly interpolates between the first camera and the second camera for a really nice slow moving shot so that's another quick tip which is quite useful when making trailers for your games alright I hope you found these tips useful and I hope they help you in making your own games go ahead and add dinky Garden see your wish list thanks to these awesome patreon supporters for making these videos possible thank you for watching and I'll see you next time foreign