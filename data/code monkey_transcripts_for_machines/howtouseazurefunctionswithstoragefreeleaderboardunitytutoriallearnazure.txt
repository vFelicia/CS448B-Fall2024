hello and welcome i'm your code monkey and here let's learn to build a free online leaderboard we're going to do this with the help of microsoft azure cloud learn how to create an azure function with azure storage to read and write some data we're going to build a demo where we can play our game get some score then upload that score to the cloud and display the full leaderboard ingame for most developers this is likely completely free since there is a very generous free tier per month now this is a tutorial for how to make an online leaderboard but really everything covered here can be applied to a multitude of online mechanics i'm currently working on a video showcasing multiple examples of all the mechanics that you could build so you can use this exact logic to make something like the messaging system in eldon ring or dark zones you can build a histogram like in the zachtronics games you can construct a shared online world like in this trending make an asynchronous multiplayer game you can create your own custom scene workshop and so on all those mechanics share the same base infrastructure that we're going to build here and the same thing for nongame use cases this is really a tutorial on creating azure functions and connecting them with azure storage and if you know nothing about the cloud then don't worry it's pretty simple once you learn the basic terms i cover the basics of azure in another video so go watch that just so you know the basics and with that you should be able to follow everything in this tutorial here's everything that we're going to do we're going to look at my fun starting demo then create a serverless azure function called get leaderboard we're going to implement the code in unity to trigger that azure function parse the leaderboard and show it then implement azure storage to store that leaderboard data make another function to add scores to the leaderboard which will grab the file from storage add some data and write it back and put it all together in a nice working demo there's timestamps for all the parts in the video okay so that's our goal let's get to it if you use unity in any way definitely get my ultimate in the overview course it will teach you how to use the many tools and features that emt has so you can be more effective and make better games faster there's no need to build something yourself from scratch if there's already a builtin tool that works great unt has tons of them that you might not know about the course already has 15 lectures each covering a different two hour feature of the engine and is constantly getting free updates or if you prefer step by step courses on making a specific game check out my builder defender course i also have a phone course only on using visual scripting there isn't a single line of code in any of those games and if you're past the beginner stage and you want a guided path to help you make the jump from beginner to advanced and get my turn based strategy course it will help you massively improve your programming and game dev skills on all courses i'm always available in the q a section answering all of your questions every single day so check them out with the link in the description all right so here let's build a nice free online leaderboard using azure functions and storage over here is my demo game i have my character in third person i made this in a previous video then i have some shooting targets along with some destruction that i also covered in another video and this is basically the same demo scene that i covered in the quantum console video so i can aim and shoot at the targets then i just added some mini game rooms so the targets i spawned and i need to shoot them then there's a timer counting down after the timer is elapsed we have a game over and out pops out a nice input window i covered this simple window in a previous video so it has the player for the name i can type in anything then press ok and it shows the leaderboard now the missing pieces we would like to upload the score to a server so we can see what score other players got so it's a pretty simple but fun minigame which is going to be the perfect demo for our online leaderboard now like i said we're going to be using azure for our online infrastructure i made a detailed getting started tutorial another video definitely go watch that one before this one here i will assume you know everything over there so i assume you know the basics of what is the cloud how azure works what is a subscription resource and so on and actually when i said this is free that's not exactly technically 100 true azure has a great pricing calculator so over here you can see all the various things that azure has and you can add them to see how much they cost the resource that we're going to use is azure functions and if you add them over here we can see yep the cost is indeed zero dollars so this one is familiar free you have 400 gigabytes per second of execution time and a million executions for free every single month so unless your game is a mega hit you're never going to hit this amount so the functions part is indeed pretty much free now the other part to make our leaderboard work is adding some storage so on the pricing template if we add the storage account then here if we set up the storage so in my case i'm going to use west europe we're going to be using blob storage on the standard premium and now we see that storage does not have any free tier however it is extremely cheap since this is going to be in leaderboard which is a tiny tiny amount of data pretty much in the order of kilobytes so not even megabytes and certainly not gigabytes so if i put the smallest number possible and discount later on pretty much all the operations so ten thousand operations one gigabyte ten thousand ten thousand so on so if i put pretty much the smallest values on all these if so then this comes at a monthly cost of 14 cents per month and if you have less than these so less than ten thousand operations and less than one gigabyte which will definitely be much lower than that then yep it's definitely not even going to get to 14 cents so technically this leaderboard that we're going to cover here isn't 100 free instead it costs probably around one to five cents per month which i'm not sure they would even try charging that much okay so let's build our online leaderboard now the first thing we need is on the server side we need something to listen to an event from our game so over here on the azure dashboard let's create a brand new resource and over here for the type for this we have mainly two options we can use a web api or we can use a function both them work i cover the web api in the azure basics video but over here let's actually go with a function since it's so simple and super easy to use so go ahead and find function either go down to compute or search for function and yep you find the function app then let's go through the basic setup so choose the default subscription i'm selling the free tiers so yep then let's create a new resource group so in this case let's call leaderboard tutorial then for a function name let's say tutorial leaderboard code monkey and yep the name is available okay next we want to publish with code runtime stack let's go with net version.net six okay then region i want something close to me so the closest to where i live over here in portugal the closest is the one on friend central then for operating system let's go with windows which is what i'm using and for the plan let's go with consumption which is the serverless plan again if you think i'm going too fast here make sure you watch that other video in there i covered all these settings all of them in detail okay so we have this basic setup and all the other ones can be default so let's go ahead and review and create although actually let me make a note here in my case i'm still using the free azure account i didn't upgrade yet and for some reason when using the free account over here you see different options all i can see is basics then networking monitoring and so on whereas if you're using a regular azure account with that you might see an extra tab over here for some storage so if you do see that then just go ahead and create some storage but if you're using a free trial account like i have here then there's no storage option so let's just go ahead review and create and don't worry about that we're going to manually create some storage in a bit okay here it is all the settings seem correct so let's go ahead and create all right everything is the point let's wait a bit and yep deployment completed so let's go to our resource alright so here it is everything is looking good so far again we see this warning up here because we are on the free tier and we didn't get an option to create a storage account i will cover how to fix this in a bit when we manually create storage but still everything should be working fine so with this our function app is already running now let's create a proper function let's go here to the left side under functions and let's click on the button to create the brand new function then we've got the development environment we can choose the development portal meaning inside the browser so let's use this one for now and then in the next function i will showcase how to develop using visual studio so let's go with that then for the template this is how you can trigger the function as you can see you've got all kinds of very interesting triggers so you can make it on a timer so it triggers every certain time you can make it based on q storage mob storage event cosmos db and so on you can connect it to iot devices as you can see there's tons of really interesting triggers and the one that we want here is an http trigger we want this function to run when we get an http request so similar to a web api so let's go with this one then down here for the function name let's call it get leaderboard and for the authorization level over here you have three options function means that we're going to have a function secret key just for this function admin would be the same key for multiple functions and anonymous means we don't require a key so let's go with default option using a function auth okay so everything's set up let's create alright the function has been created we can already try calling it so up here we can get the function url and we can generate the url based on the function key the host key master key and so on we set it up with the function key so let's use that one and note how this url first of all it's the url that we set so to turn on leaderboard code monkey so this is the standard function app url then we've got our endpoint api get leaderboard and importantly over here we've got the function code if we don't include the code since we defined it to use function as the out if we don't include this then the function won't run so let's just copy this code and if there it is everything worked so here we have our default function return okay so far so good now back on the dashboard over here on the side let's go to code plus test we set this function up with a browser environment so over here we can write some code directly on the browser and over here let's begin by making a few changes here and essentially just return some basic json if you don't know what is json check out my video on it it's a really simple really useful text based data format now over here for returning json first we need to make a class so let's make it so let's make a public class call it leaderboard then inside let's have a list of another type called leaderboard single and then that class for each leaderboard entry we're going to have a string for the name and then also we're going to have an end for the actual score okay so this is the basic structure of our leaderboard each entry has a name in the score and then we store in a list of our entries then up here let's get rid of all this default code let's just keep the return so let's remove all this just keep this all right then over here note how by default it already includes the newton's soft json library so with this we can easily convert our object into json so let's first create the object so in leaderboard all right so here i created a leaderboard and inside on the array just created two entries then for returning it again we want to return some json so for the response message let's go into json convert which again this is a class inside newtown south json on this one let's serenalize this object it's the leaderboard object and then we just return okay great also here i should point out one thing depending on the settings that you use for this json library you might see this object convert correctly or maybe not maybe you might see some empty json if so that has to do with the settings so sometimes the library is only set up to convert the public properties and not public fields over here as you can see i'm using fields now properties which if you're not a unity developer you might be used to using properties but in unity development regular fields are the standard so that's what i'm using here but like i said depending on your settings this might be causing issues and not converting json so if not if this returns pretty much empty json if so then you can just convert these into properties by pretty much setting a get and a set so with this now this is a property instead of a field so if this was returning empty then this change should solve it i just wanted to quickly point that out because i actually ran into that same issue which drove me crazy for quite some time my code wasn't returning any json and took me quite a while to figure out the reason and it was because it wasn't parsing fields only parsing properties so beware about that but over here everything should be working fine with films just like this so we can test this and by the way another quick note when writing code here make sure you are writing everything correctly this code editor is pretty basic it works but it won't tell you if you have some errors or call function that does not exist for example initially i thought the function on the json convert i thought this was called to json instead of serialized object and if you call that then there's no red squiggly line there's nothing telling you that this function does not exist it will only run when you try to actually run the test so just be aware that this editor doesn't have any kind of error checking so if you don't know what is wrong with this then maybe try copy pasting it into visual studio to make sure all the syntax is correct and one more final thing before we test make sure to save the file so you can press on control s or up here click on save then also on this drop down menu over here we can select which file we want to edit so let's edit the function.json file and over here in this file we see the various methods we have for interacting with this function by default we have both a get and a post but for this function we just want to get the leaderboard we don't want any post data so we can remove that to only allow get requests okay that should do it make sure you save this file then up here and let's click on test and run then over here on the side let's select our test so for http method we made it with a get so let's go with get for the key and let's use the default function key then we don't have any special queries we don't have any special headers and for the body this is meant to be empty okay so that's it super simple let's run and yep there it is we have a 200 okay response and here is our leaderboard with all of our data all right so far so good down here you can even see a nice log telling the status you can see this message here which is this message here so you can use this logger object to unlock any kind of information all right so everything is working on the server side now let's handle getting this in unity now i already covered how to do http requests in unity in another tutorial in there i made a proper super easy to use class although in that video i also focus mainly just on the get so i have since upgraded this class to have also a post method as well as a post json method this is what we're going to use in a bit to upload some scores so i've pretty much just improved upon the class made in that video and this phone class is including the project files for this video which you can download linked in the description so for contacting our function we're just going to use get so we just need the url then we get the return so let's make a script to run our testing code so we need uc sharp script let's call it test leaderboard let's make a game object to run it let's attach the script and open okay so now here let's make some super simple code first of all let's do our update and on update let's ask for a key input so get key down let's see on the t key when we get that then let's use the web requests we're going to use a get then for the url let's copy the url so back in the dashboard over here we can go into the overview and let's get the function url and copy the whole thing all right so we just do again on this url then let's capture if we have any error and let's capture the success response all right that's it super simple let's test okay so here we are let's press the t key and if there you go here we have our response so we've got the exact same thing that we said there so we've got a leaderboard single list with one score and another score all right awesome the next step is to interpret this as json and now for json unity already has a builtin json utility class so we could use this but we should probably use the same library just to make sure json converts exactly however at the same time the newtonsoft library also has some issues with unt types but still just for learning purposes let's learn how to use it so let's remove this then here let's open up the package manager so let's open it up let's click on the plus icon and let's add a package from a git url then let's add this url so nougat com.unity.nuget.org newton soft dash json let's install this package all right there it is newton's off json this is pretty much that package but made by unity meant to use it while inside unity alright so back in the dashboard over here let's copy both these the leaderboard and leaderboard single and yep over here on the nt project let's paste those classes so we now have these two types so let's go into the test leaderboard script so over here we've got the response all right so let's deserialize this data so first we need using newtonsoft.json and then over here let's use the same thing so json convert and this guys let's deserialize the object into a leaderboard and it's going to be our response then just as a quick test make sure this is working let's do a debug.log go into the leaderboard access the single list the first one and let's print out the name okay so let's see if this log works and if there it is the log did work it did grab the response it did parse it and did grab the name for the very first lead board now let me briefly mention the issue with this library and ent types just so you know if you ever want to store something using for example a vector3 so here if you make a public class call it say vector3 and inside really just have a vector3 if we do this then up here let's try using newton's soft json to serialize this type so let's do json convert let's serialize this object let's create a new save vector3 and let's put some vector three so back three dot out doesn't really matter so let's see if this line does work and nope over here we have our error it's saying selfreferencing loop detected on the property normalized basically it's trying to serialize the normalized property which in itself is a vector3 which in itself has a normalized and so on so on so this is a pretty big issue with this specific library when using the specific unity factor three and yet another issue is with the csharp vector3 type so here is the default vector3 inside system.numerics and over here we can see it does have fields for the x y and z but note how these are capitalized whereas in unity they are not capitalized and they have some more things so basically all of this to say that if you want to save some vector 3s then you should be using unity's builtin json utility you should be using that to serialize it as opposed to using this json convert and then on the azure function csharp side on there make sure you create a custom vector 3 with the x y and z exactly like unity again the reason why i'm mentioning these issues because i stumbled upon them while doing my own research it drove me crazy for quite a bit so hopefully now you won't fall for those same problems just like it did okay so with this we have our working leaderboard object so over here we get the eliteboard all right then over here i have a leaderboard dui element that i prepared previously it's pretty much what i made in the high score table video it's just a basic ui element has some background so on and then an entry for a high score entry then it has this leaderboard ui script and on this one i've got this only function shown leaderboard which takes a leaderboard object then it cycles through all of the leaderboard signal entries lists sorts them all by their score it destroys the previous entries on the list and creates a brand new ones so just a pretty simple ui element on our testing script let's just call this function so over here after we get the leaderboard object let's go into the leaderboard ui access the static instance and let's call show and pass in our leaderboard alright that's it so let's test and see if this is accessing our url to get the leaderboard that we have stored in our function and then displaying that in our ui so here we are let's press the button and if there you go there's our nice leaderboard so with this we are successfully contacting our online function and displaying the results alright awesome now the next step is to make this dynamic instead of always returning the same result for that we're going to need some storage and then connect our function to it but before that let's actually make another function just very quickly without any special behavior so let's make one but actually this time instead of adding it over here on dashboard by hitting create like within instead of that instead of using the browser environment let's use it with visual studio so let's open up visual studio over here i'm using version 22 community also make sure your visual studio installation has the azure module installed if you're not sure go ahead and run the visual studio installer then on your visual studio install click on modify and up here make sure you have azure development and probably also the asp.net so make sure those modules are installed then on visual studio let's go ahead and create a new project for the project type let's scroll down and find azure functions so let's use this type then let's give the project a name so something like leaderboard functions then select the same thing we selected so net6 with our http trigger everything else with defaults okay let's create all right the project has been created with default function now let's first of all rename this so over here on solution x r on the function instead of calling it function one let's call this add score and yep let's use visual studio to automatically rename the class and up here also add score okay this is our function and for now let's get rid of all this and pretty much just return a standard message so let's get rid of all this and just up here let's do a response message and just return something like success then over here on the law again like you saw you can add anything so let's say just add score all right so our extremely basic function is ready for publishing to azure however one extremely extremely important thing before you do over here i showcase both methods so first of all i'm creating a function with the browser id and now using visual studio i showcase both methods for learning purposes however if i now go ahead and publish this project to azure if i do that then it won't commonly destroy the function that we made previously basically when you publish a project from visual studio it won't overwrite anything previously on the function app so you either need to always use the browser id for making every function or always use visual studio you cannot mix them so before we publish it let's actually go and copy our previous function so let's copy our get leaderboard function which also means we have to copy our leaderboard structure so up here let's start with just that so let's create and first of all let's add just a new item let's go with an empty c sharp class let's call this leaderboard then let's copy our leaderboard class and over here let's paste it okay exactly the same thing now for creating the function over here on the solution let's right click on the project and we're going to add and this time a new azure function then let's name it get leaderboard and okay now for the type let's go with the exact same thing so an http trigger authorization on the function okay and so here we have yet another function let's just copy the code so here on dashboard let's copy exactly just this just a log and all this copy it and over here let's replace all this there you go just like this okay so everything has been copied exactly however pay attention to what i did here i only copy pasted the internals of the function i did not override the function definition that's important because over here it's slightly different you can see when making the function over here we've got the function name then we've got an http trigger with a whole bunch of parameters whereas on the browser id it does not have those parameters does not have function name and so on basically on the browser id all that data is on a separate function.json so when copying make sure you don't copy the wrong syntax so with this we have everything correct so we've got our get leaderboard function we've got the only board definition and the add score function and again the reason why we need to add the get leaderboard function here is because the function that we created previously that one is going to be overwritten as soon as we publish this project to azure and also one more tiny thing before we publish we can actually test this project locally so it's really simple we just need to go up here and click on the play button to test and yep it opens up this nice command line window and over here we can see all the various endpoints that were created as usual these are standard localhost urls so for example the get leaderboard here let's just copy this so just copy this url ctrl c then over here on the browser let's just paste our url any of the yet leaderboard is working exactly the same as previously okay so everything is working correct now we can finally publish so on the solution explorer let's right click on the project again that's right click on the project not the solution if you're writing on the solution you don't see publish so make sure you right click on the project and publish then for the target let's go with azure we made a function app on windows yep then make sure you're signed in make sure you select the right subscription and then over here you should be able to find it so yep here is our tutorial leaderboard codemonkey function so let's go ahead and select this one all right it's done creating the profile so everything is ready for publishing so just go ahead and up here click on publish all right it's publishing we can check the status down here on the output let's just wait a bit all right the function app is ready so everything worked back in the azure dashboard let's click on refresh again this might take a few tries to update but yep after refreshing yep you should be able to see both our functions so we have the get leaderboard and the add score function now both these functions were published for our project so what that means is that these functions are now marked as read only so if i go inside the get leaderboard like we were seeing previously on this one we do see this little warning so it says the package is in read only because you are running from a package file if you go up here to code and test yep we do not see any code to edit so like i said the browser made version made previously that one was commonly overridden by the one we have in visual studio all right so everything should be working so let's do a quick test so over here on this one let's go into test and run for this one let's use the get let's use the function key no query no headers no bottom let's run and yep there's indeed our result okay so far so good now let's also do another quick test on the add score function just make sure everything is working so back in the functions let's go into add score let's test our function and for this one we actually enabled both get and post even though in the end we're only going to enable post but here lets us out send a post let's end default function key no query no headers no body run and yep there's our success message okay great so far so good everything is working now let's call this from unity so over here in the ent project in the test leaderboard script let's do a different input test so input get key down let's go with the y key let's go into the web request class and let's do a post and this time use the post with json so previously we did just a regular get now we're going to do a post with json let's copy the url with the function key so we're here on the add score dashboard on the overview let's wait for the get function url to be clickable okay and let's click make sure we are using the function key and let's copy this then over here let's paste our key then we have the json data that we're going to send again right now we don't want to send anything we just want to test this so let's just send an empty json object then we've got the usual error success and so on so let's actually copy this from this one so let's copy that code pretty much the same thing so we've got an error do a log then get the response and let's also just do a log okay that's it so let's test and run this so here we are let's press the button wait a bit and if there we have our response success alright great so with this we can now interact with both of our functions one we get and one with post alright awesome now this is working let's get to the second very important step let's handle storage although like i said if you don't have a free azure trial account then you already created the storage account during setup so if you did that then you can skip ahead this part just verify that you have storage linked but if you don't like me are using the free account then let's go ahead and manually create it so back into the azure dashboard let's create a resource then over here let's find storage which is right over here on the popular azure services so a storage account that's what we want let's choose our azure subscription for the resource group let's use the same one so the leaderboard tutorial the same one that we created then let's give it an account name and for the region for performance let's go with standard and redundancy we really don't need anything special so just locally we're done storage okay so that's it pretty simple setup let's review and yep everything is looking good so let's create everything is deploying let's wait a bit all alright it's done let's go to resource and up here is our brand new storage everything is correct now in azure the way that storage works is you have four types inside a storage account you can see over here under data storage the four types you have containers this is for blob storage which is meant for storing binary files or text then you have file shares this is if you want to use kind of like a virtual drive you have queues which is a simple way to queue and dequeue messages and finally tables this is pretty much a nosql database for our use case we're going to use blobs and pretty much just use one file to keep our entire leaderboard so let's go into containers then up here and let's create a container which is really basically a folder so let's create it call it leaderboard container let's keep it private with no anonymous access basically we're going to use a key in order to read and write from this okay let's go ahead click on create all right we have our container we can go inside and yep so far the container is empty now let's upload our star on leaderboard now you could write the code to automatically be smart enough to know if the leaderboard already exists or not but in our case let's keep things simple and just start with a premade board so let's go to our get leaderboard function and just copy the default leaderboard we've been using so over here and let's just press ctrl s to save this file so here i have my simple file i just named it leaderboard.json by the way the extension doesn't really matter so you can make it text or completely remove the extension doesn't really matter for me i'm going to add json just to make it easily identifiable so here's the file now let's just upload it so on the leaderboard container let's upload then select the file and just upload all right so the file is there and over here we can even see a bunch of stats from the file and also in these buttons we have button to edit so this is super useful for testing so over here we can read the file and edit any of this data okay so far so good everything's looking great now for connecting this storage account to our function let's go back into visual studio and let's go into the publish tab and down here under service dependencies we see something for storage so let's click on these three dots and let's connect the storage again make sure you're signed in and over here select the subscription and it should automatically grab all of the storage if not go ahead and hit on refresh so over here yep i do see the storage zero leaderboard so that's the one that i created just now so let's select that one and click on next then let's store it with the default connection string name and here it should automatically grab the connection string from azure so it should look something like this so default endpoints protocol then account key and there's your key if it doesn't grab this automatically then you can grab it from the dashboard so on dashboard if we go into the tutorial leaderboard into the storage over here on the left side we've got the access keys and if over here you can show and copy the connection string but it probably already grabbed it by default so no need to touch anything then let's save the string in the azure app settings and let's click on next then yep let's select everything and finish and yep azure storage is configured okay great now we can verify that it worked by over here under hosting click on three dots and let's manage the azure app service settings and over here you should be able to see the azure web job storage you should be able to see this ring and here with our account key okay so everything worked correctly now let's interact with our storage over here in the get leaderboard function let's work with storage although for that there are actually two methods that we can use here so there's a manual method which can be useful to learn if you want to use for interacting with blob storage from outside of functions so for example if you want to interact with it directly from unity or any other c sharp code so that can be useful to learn and then there's another easier method specifically made for easily integrating functions with blobs so for learning purposes let's learn about both methods first the generic method that can be used outside of functions first thing we need is to grab the connection string from the environment variables where we added it just a while ago so the string for the connection string and we're going to into the environment and let's get the environment variable and default name is azure web job storage if you don't remember the name or if you give it a different name just go up here into the publish into the hosting manage and yep this is the variable that we want to get so we have our connection string then afterwards let's grab our container name so a string for the container name and we named it leaderboard container and now for connecting we are going to need to make a new blob container client this is inside azure.storage.blobs so let's create this one it requires a connection string and then the container name all right we've got the container client and then inside let's get the blob client and now we require the file name so we called it leaderboard.json all right so with this over here we have a reference to our file now let's download it to download we go up here and we call download this returns a blob download info let's add using azure storage blobs models then inside this one we have the content and this is a stream for reading all the data so let's read it so let's do using a new stream reader so let's make a new stream reader with this stream and let's just read to the end so stream reader let's read to the end all right so here we are reading the entire file so let's get rid of the previous default leaderboard and set for the response message let's define it up here and then read it and paste it in there and then just return that one okay that's it so again we grab the connection string we define a container name we get the container blob client then we get the blob client for the actual file we want to download and then just download the file and read the stream to read the whole contents okay now before we can test first just make sure the environment variable is correct so again up here under hosting let's manage so make sure this one is set and also importantly if we want to test locally then let's make sure we copy the remote variable and paste it also over here on the local we need to do this otherwise when we test locally it would be using emulated storage instead of actually grabbing it from the online storage so just go ahead and do that click on ok so let's click play to test locally here we have our url so let's copy the get leaderboard let's copy this endpoint and over here let's go to that endpoint and yep we have our return value now let's just verify that it is indeed grabbing from the search file so on the storage account let's go into containers inside the leaderboard container then let's go inside the leaderboard json let's edit and let's change the name from ironman let's say spiderman okay let's press on save all right then over here and let's refresh and if there you go it does work so we have successfully confirmed that we are indeed grabbing the value from the storage now let's add the same storage connection to the add score function so let's copy pretty much the exact same thing that we did here since on the score we're going to need to read then add then save back so let's copy all this let's go into the add store function and let's face it okay we're doing the same thing the same connections ring same container same file let's read the file yep then instead of reading it onto the response message let's make a leaderboard object leaderboard and then over here we set the leaderboard equals and we're going to use json convert and we're going to convert we're going to deserialize the object of type leaderboard and the object is what we read from the file okay so with this we have our leaderboard now for the add score let's just add a dummy score so i just go into the leaderboard into the leaderboard single list let's add let's make a new leaderboard then for the name let's say thor and for the score let's say 30. alright so we add the new entry to our leaderboard so now our leaderboard is indeed updated so now to save the changes back first of all let's convert the leaderboard into json so let's find a string for the save blob data let's go into the json convert and this time let's serialize this object so the leaderboard okay so we now have a string that we want to save and for uploading a good thing that we can use is a memory stream so memory stream let's do a new one this requires a byte array so we need to convert our string into bytes so for that let's use system.txt.encoding let's encode into utf8 let's get the bytes for this string and that's the save bot data all right so we have a memory stream and with the stream we can now use the same blob client since we're going to upload to the same file so this one let's call upload this one takes a stream with our content so that's our memory stream and then the override flag we do want to overwrite what is there so let's just overwrite and after uploading let's make sure to dispose of our memory stream okay so this is going to upload our new data and then for the response message let's just print out what this one returns so let's go into the blob client info and on this one let's get the raw response alright so that's it let's test this and for testing let's make sure we have the get in here just to make it easier to test and let's test locally so let's just run the function here we have our endpoints is the same as previously so let's first just refresh the get leaderboard just refresh and yup returns the same thing so codemonkey56 and spiderman with 12. now let's copy the at score endpoint so let's copy this let's go there and if there it is here we have our response so we've got a 201 so that's okay and yep it was created and so on and now if we go back into the get leaderboard and now if we refresh this and if there you go here we have a brand new score added to our leaderboards all right awesome okay so everything is working here we have the method for reading and writing to a blob storage like i said this method this code you can run this from anywhere any c sharp project doesn't have to be just functions but now let's see the other method specifically for using with functions and azure connected projects which is much much simpler but again for learning purposes let's not get rid of all this so let's actually duplicate these classes just so we have access to this code so let's just duplicate both this so the add score let's duplicate this one let's call this one nonfunc so for the nonfunction method let's just make sure to rename the class okay it's all good then for the get the leaderboard same thing copy paste let's rename this to nonfunc and for the function name and so on okay great again i'm just doing this so that all the code is included in project files now let's go into the get leaderboards class and over here let's use the second method and for the second method over here on the run we can receive another parameter and for that parameter we can use the attribute blob and now here if you cannot find the blob attribute this is actually a very tricky part that took me quite a while to figure out you can try to use the blob attribute and then if you put the cursor on there here visual studio tells you some potential fixes and one of them is indeed this one install the package microsoft azure web jobs extension storage so you can go ahead and try doing this however nope there's an error it does not work basically what we have here is an error related to version mismatch if on the solution explorer we right click on the project and let's manage the nuget packages then over here on the install packages when we installed our storage when we connected it it automatically installed these packages and as the time of this recording that one automatically installed version 12.3 and over here 12.2 and if we search for the package we're trying to install so if you go over here into browse and let's go to search search for microsoft azure web jobs extension storage if we search for this one then we find this package as you can see the latest stable version is 5.0.1 however if you try installing this then yes and sound this one yes except and no tons of errors again this is an issue with version mismatch basically this version version 5.0 requires a different version on the azure storage functions so the solution here is instead of installing the latest stable you can install a previous one the one that i found was version 4.0 or another option is simply going to updates and let's update all of the packages so all of these have updates so let's try updating all these let's click on update yes make the changes yes accept all right all of those were updated into the latest versions at time this recording and with this now if we go back into the get leaderboard and click on the attribute and let's use the quick actions to install the package and find the latest and yep we no longer have that error the type is now being recognized believe me figuring out these version issues that took a ton of time a ton of stress trying to figure out why all this was not working so if you're finding this video helpful please hit the like button it really helps okay so with that we have the blob attribute everything is working correctly so now let's use this now over here we can see the first one is going to be the block path so for the blood pass first of all the container so that's the leaderboard container then inside the name of the file leaderboard.json then for the file access for this one on the get leaderboard we just want to read and then finally let's also add the connection string and again let's use the same thing so we stored it inside azure web job storage okay so this is the attribute that is going to handle the connection for us then for the top of the parameter you can check the docs from types that you can use over here on the docs for the blob attribute class down here you can see all the types that you can use and for our case for reading a simple text file then string is super easy so up here let's make this a type string and call leaderboard blob string okay that's it so basically this one line this is going to do pretty much all the code that we're doing here so we can literally remove all of this code and we just returned the leaderboard block string so with that you can see the code is quite a lot simpler it's literally just the attribute and everything is handled automatically okay so now let's do the exact same thing on the add score so let's copy our attribute then over here on the add score okay let's add another one again for this one we need to read and then we need to write so for reading let's do the same thing we get a string then for another one for this one final access dot right we use the same connection string on the same file okay however for writing we cannot write onto a string so for writing the simplest one would be a text writer all right so now let's use this instead of all of this code so instead of the connection string container name and all that so we get the leaderboard yep then we create the leaderboard and we're going to use json convert and we're going to convert the leaderboard blob string okay so let's convert this one with that we have the leaderboard then let's add a dummy thing then we serialize the object again in order to get the save blob data and then for writing instead of having to do all this let's just go into the leaderboard blob text writer onto this one and let's just write and we're going to write our save blob data then for returning let's just return the save blob data okay that's it as you can see super simple now one quick note here you might think you can simplify this further by just making one of these functions one of these inputs and using file access dot read and write however if you use this it doesn't actually work if you do you get an error and the error is saying you cannot use read write on a blob attribute so if you want to read and write you must separate them into one read one right okay so as you can see this compared to the previous code is much much simpler and also another extremely important note here which is by defining this attribute for writing by doing this you are opening a writing stream and if you don't do anything to this then the file will still be written to you but it won't be empty so if you just add this attribute this input and then down here you don't write onto it so if you comment this out it will still open that file and it will still be empty so if you add the attribute with write access make sure you actually write something onto it otherwise the file will be empty the reason why i'm making this note is because this confused me for quite a while for testing i first focused on making sure that the reading worked so i didn't do this and i just read then on the second test that i did i tried to write onto it and then i had an issue because the file was now empty so don't make the same mistake that i didn't make sure that if you add a writing input make sure you always write something onto it all right so we can do a local test just to verify that everything is still working exactly the same let's just rename this let's put the hulk let's make sure all of our files are saved okay let's run in local test all right it's running so let's run the same thing over here for the get leaderboard let's refresh and yep it still returns the exact same thing okay great then for the add score let's also refresh and if there go it add the score and this one as you can see and add the score and return the current state of the leaderboard so this is going to help us prevent from having too many function calls just when we add the score it automatically adds and returns the new leaderboard with all the scores so now you'll learn both methods for interacting with storage mobs you can use the first method you can use this one in any c sharp code doesn't have to be functions so for example you could use this code directly inside unity but if you're using functions then you can use this second one which is much much simpler all right great so with all this really all the tough parts are done now it's just making the proper leaderboard logic and connecting it into unity so first let's make our add score let's make this proper so instead of having a dummy object let's add something proper we're going to receive json body in our http request so how we access that is we have the request.body this one as you can see is a stream so let's read this so let's do a new stream reader let's read the request.body let's read to the end so this is going to return our request body then let's just parse this into an object of type leaderboard single okay so our request is going to be of type leaderboardsingle and then we just do the exact same thing so instead of adding a dummy leaderboard single we add exactly just this one so this one directly onto the leaderboard and then everything else is exactly the same so we've got the save blob data so we serialize it we write it and return it all right so that's it super simple and the get leaderboard function this one is also already working correctly now let's just use the correct endpoints so for the get leaderboard we only want to get we don't want to allow post so let's save this and on the add score for this one we only want to allow posts let's get rid of the get alright so with that done let's publish this to azure so let's go into our publish and just click on publish and now while that is publishing let's go into our unity project and let's still use our testing script just to make sure that it all works so when we post instead of sending some empty json let's send some proper one so let's create a new leaderboard single over here for the name let's say thanos with a score of one so we've got a leaderboard single and then over here for the json let's convert that so use json convert and let's serialize this object all right that's it super simple let's test just wait for the function app to be ready okay it's ready and let's test here we are let's first grab the current score so let's press on t and yep there's the current score okay great now let's press on y to add another score and yep there's the response now let's press on t again to get it again and if there go here's our new score alright awesome so everything is indeed working all that's left is just to add this logic directly onto the game over code so here is my main target range class that is handling this minigame so basically just counts on a simple timer and when the timer is elapsed then we've got our game over state then on the game over we show our nice input window again i covered this window in a previous video so on this one we asked the player for the input and then over here we've got the input string so over here let's submit our score we can copy the exact same code that we have here so let's copy all this then over here let's paste it then over here let's use the player name that the player wrote let's use the score that was calculated let's add the using for the json convert so you post json we send this object with our new input string new score we log if there's an error and if there's a response and this is going to be the leaderboard so if so then let's see what we were doing on the previous test so over here we're going to pretty much do this so deserialize the object and show it so here when we have the response let's do exactly that so dc realize this object and then show the leaderboard alright so that's it super simple let's test alright so here we are and let's start the game and start shooting down some really nice targets try to get the highest score possible and the timer is counting down and one second zero seconds and there you go now write my name and now let's say that i'm iron man let's press on okay there's our high score unloading and yep here it is our high score alright awesome so everything is indeed working perfectly we connect to azure we upload our new score which updates the file in storage and then returns the updated saved delete board and shows it over here in game okay great so the demo is perfectly working now i should point out some things if you want to build upon this demo one of the main things is player identification so right now this leaderboard is acting very much like an oldschool arcade leaderboard meaning it's just adding names and scores there's no score updating and the names can be duplicated so if you wanted you could add some proper user identification rather than just a name for example you could use unity authentication which i also covered in a quick video or in more detail in my ultimate indie overview course with that unity 2 you can get a unique id for the player and then you can use that on the leaderboard perhaps with an automatic player name then you could add logic on the leaderboard to update the score for the same player and keep the best instead of adding multiple entries for the same player with the same name another thing is over here on the show leaderboard function over here receives the only board object and then manually sorts it so the sorting happens locally but another alternative would be to run this sorting logic on the function itself and perhaps only send the top 10 instead of sending the entire leaderboard although at the same time i don't believe that bandwidth has a cost so perhaps sending the whole thing and storing it locally might make more sense and one very very important thing that you definitely need to add in order to use this code in production would be handling concurrency if you have tons and tons of players and lots of functions running at the same time then it would be possible for one at score function to be running this code then that score function would be going right here right about to upload the new values and at the same time another add score function would run and would once again grab the same values which still hadn't been saved and with that the first add score would pretty much be in last forever as general rule you really never want to lose any player data so you definitely need to handle that use case there's a really helpful page on docs showing multiple ways of solving that concurrency problem so definitely check it out if you want to build upon this another thing related to that is to use the retry pattern so if there's concurrency issues maybe try again a bit instead of just failing or if there's random connectivity issues again try maybe once or twice before returning a permanent failure starting this is definitely a must to help your game be much more stable much more reliable and in general just check out the page with the best practices for azure functions it covers lots of tiny things to make your functions perform always at their best so with all that here we have everything working we have our two functions one to get leaderboard and one to add some score we're using azure storage to store our persistent leaderboard phone with those two together we can read this file and add more scores onto it and we can interact with all of that from inside ent and again in terms of cost this whole system is either completely free or only costing at most about one cent per month so everything is really awesome and now that you'll learn how to do this you can do so many more things pretty much all of the interesting cloudbased mechanics that i'm going to showcase in the next video of them are all based on this general concept it's pretty much all just based on having a simple azure function that interacts with some storage and then interacting with those functions from inside unity or really anywhere where you can make an http request stay tuned for that video to see examples of the kind of interesting mechanics that you could build with the cloud so now go ahead take this newly acquired knowledge and build something awesome alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and i'll see you next time