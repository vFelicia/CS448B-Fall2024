hello and welcome I'm your code monkey and in this video we're continuing to check out the inner workings of the task system in Batam Riau Tycoon now that we know how to make and cue complex tasks let's put them to the test with something really interesting let's begin all right so here's our scene so far we have a worker in here we can spawn different test times that I have different executions so I can tell them to move here I can tell them to play a victory animation and in the previous video we had support for validating and cueing a task in me the worker clean up some shells after some time so I can click to spawn a junk sprite and the champlain up task which will make the work together in the sprite position playing animation point up the sprite the task is cute so he only does that when the task is valid which happens after 5 seconds so let's see that I click the spawn fivesecond delay he waits 1 2 3 4 5 test is the cute he goes there he executes and cleans it up ok great all right so now let's use our knowledge of complex tasks and queueing tasks to create a realworld scenario that you might use in your game let's say I have a weapon that I want to take to a storage position but I only want to take the weapon there if the storage position is empty so we're going to create a task to take that weapon but the task won't be executed once a free storage position is found the game is still in development so if you like the concept go to the steam page add it to your wish list and follow so to make testing easy let's begin by making some function to spawn a weapon and a weapon slot now let's go all the way down here and essentially copy the spawn for shells since that's what we want to do we want to create a sprite so let's call this spawn pistol sprites and have another one for spawn weapon slot all right so here I have the two functions who spawn a person sprite he uses a piston sprite it puts it in the correct position same thing for the weapon SWAT it creates simply a white pixel so a square tinted in gray and place in the correct position all right so let's spawn a pistol on the left mouse click so up here what mouse click instead of adding this task let's spawn a person sprite on the mouse position and on the right mouse click let's spawn a weapon swap all right so let's test and see if we can spawn these sprites all right so on left mouse click I can spawn pistols and on right mouse click I can spawn weapon slots okay great so now let's make a complex task for grabbing a weapon taking it to a weapon slot and dropping it so let's go into the test system and up here let's make a new test type only class and let's call it fake weapon to weapon slot so in here the worker moves to weapon position grabs the weapon takes it to weapon and slot and drops the weapon that's the behavior we want to create so here on let's figure out what information the worker needs to execute this task so first of all obviously he needs a vector3 for the weapon position then he needs to grab the weapon now the way we're going to add that is as an action so we'll focus on the implementation when we actually create the task so make a public action grab weapon once he grabs the weapon he needs to take it to the weapon slot so let's make a public vector3 for the weapon slot position and finally we need another action for dropping our weapon so a public action drop weapon alright so this test now has all the information that the worker will need to execute it now let's set up the worker so in here on switch on type let's do a switch on the take weapon to weapon slot and we're going to make a function with that name that takes a weapon slot so let's make that go down here make a private void and it takes a test system that tasks that take weapon to weapon SWAT and let's call it test ok great so in here let's make him execute the task first of all we go to that position so workers moved to and we're going to move to take weapon to slot esque first of all move to the weapon position when we get there let's grab the weapon so take weapon do the grab weapon action once you grab it then we're going to do a worker down move to and we're going to move to the weapon slot position and when we get there execute this action and this action will do the take weapon dot drop weapon and once we do we go back to idle alright so the worker is now set up when he receives a weapon to weapon slot task he moves to the weapon position once he gets there he grabs the weapon he moves to the weapon slot position he drops the weapon and goes back to either so let's go in the game handler and up here and let's easily spawn the task so let's first spawn these two so we can easily see them so a game object for the pistol game object and another one for the weapon slot game okay Sam spawning on the mouse position let's spawn to the left and to the right of our workers so put it on four hundred five hundred and this one put it on the right of the workers so on 600 500 okay great so now here let's spawn the actual task so we're going to create a task system that tasks tasks and it will be a new GM task system does not take weapon to weapon slot and then we're going to add it to the test system that of this task all right now the information we need in here first of all for the weapon position let's give it the pistol game object transform dot position for the weapon slot position let's give it the weapon small game object transform that position for the grab weapon this is where we're going to do something interesting now when we grabbed weapon it is actually quite useful if we can know who grabbed it so let's go in the test system and modify in here for the grab weapon instead of being a simple action let's be an action that takes an argument which is a worker task AI so this way we can know who has brought the weapon so in here when we're creating the grab weapon won't take the worker task AI as an argument so worker task guy and now we know who has grabbed this weapon so who is executing this particular task so now the simplest thing to do in here is to simply parent the weapon to the worker that way the weapon will fall the worker as he moves so we can do a pistol game object the transform God set parent and we're simply going to set the parent to the worker transform all right so when he grabs he simply parents the weapon to the worker and for the drop weapon we're going to execute a action and this action does not have any parameters and what we're going to do here is simply reset the parent back to no and down here just make sure that he did drop the weapon let's move him away so let's spawn a simple move to position tasks just to move him away so put this in here in here all right so first we are spawning the sprite for deep personal and a sprite for the weapon spot then we are creating a task we are using the weapon position as that pistol sprite position the weapon slot position as the weapon slot the game object transfer on that position for the grab weapon action we are simply setting the pistol game object parent to the worker transform and for the drop we are simply resetting the parent back to know so this way the weapon should follow the worker when the worker is carrying it and finally we simply added a move to position just to move the worker away so we make sure that he is correctly dropping the weapon all right so let's s and see if the worker is correctly executing that task all right there he is going to the weapon when he gets there yippee whereas the weapon you can see the weapon is now falling yeah now he's going to the weapon slot when he gets there yup he correctly dropped the weapon and he executes the other task and moved away all right great this is exactly the behavior we want to create so now that this complex task is working let's validate the task before executing it so the thing we want to check is if the weapon slot is actually available before we execute that task in order to do that let's make a simple weapon slot class so let's go all the way down here make a private class weapon slots and this won't simply be a very simple object just to keep track of when the weapon slot is empty and when it is occupied so let's have a public transform for the weapon slot transform we're going to have a function public goal is empty and you were simply going to return if the weapon slot transform equals null that's how we're going to identify if it is empty before we do that let's make a weapon slot constructor and on the constructor we're simply going to receive the transform for the web to spawn and let's have a public void function to set the weapon and transform and the public vector3 just to get the position of this weapons once so we're going to return the weapon smart transform dot position let's make a function to change the color so we can visually see when it is empty and when it is occupying so a private void of the sprites all right so here it is a very simple weapon slot class we have an inner transform so this should actually be private we created using that transform we have a function to check if this weapon slot is empty we can set the weapon transform we can update the sprite to visually show the color whether it's empty or not if it is empty then it shows in grey if not to choose in red and we can grab the position all right now let's make the slot become empty after some time so when we set the weapon transform let's use the function timer which is part of the code monkey Tonys which is always you can wear for free from unity code monkey calm then we're going to create now the function timer execute an action after some time so after let's say 4 seconds we're going to essentially destroy this weapon and now in here actually made a mistake with the weapon transform we need a second transform for the weapon to transform so we need the reference to the weapon slot transform as well as the weapon transform that is currently caring so the weapon smart transform you do have this one but for the weapon transform in this case it starts off no so it is empty so that's what we're going to test and when we set it in here we're going to set the weapon transform instead of the weapon slot transfer ok so we have the weapon slot transform which is a transform of this weapon slot and a weapon transform which is the weapon that is occupying this slot and that's what we use to test if it is empty and when we set it the same thing and now after four seconds of setting the weapon we're going to destroy the weapon transform that game object and we're going to again set the weapon transform back to No so essentially every time we set something in here we're going to destroy it after four seconds and reset it back to no this is just so we can easily see it being occupied and empty and occupied again all right so let's test that behavior up here when we create the weapon spot let's create an actual weapon slot object weapon slot equals new weapon slot and it's going to take the sprite game object transform so now in here let's do a function timer just for testing to create a function that won't execute let's say after two seconds so after few seconds the weapon slot dot set the weapon transform to this one that we spawn up here and for now let's comment out tasks so we just want to test the actual weapon slot code all right so let's see all right there's a slot it's empty now it is occupied with this one and now that one poof it vanishes and it's empty again okay great so we now have what is necessary to test if our test validation is working correctly so if you don't let's only add one more thing down to our weapon slot and we're going to need a private ball for PA's weapon incoming essentially we need to know if this one is currently empty but has something incoming onto it so I want to make it public void set as weapon incoming and when we test for empty we make sure that that one is known and has no weapon incoming so we're adding this just to make sure that we keep the slot busy while the worker is enroute to taking a weapon to this weapon slot and when we set the transform let's reset back to false since the weapon has been received all right so let's go up here and first let's store a reference to the what one weapon slide weapon slot okay and this is what we're going to set and we're no longer going to spawn a weapon on the start in here rather we are going to go in here when we spawn a weapon let's sort the game object this whole game object so now when we do spawn a weapon we need to also spawn a cute task so we're going to go into the task system dot NQ a task now the task that we are going to kill well essentially test if the weapon slot is available so if the weapon slot dot is empty if it is empty then we do want to take them there if not then we want to keep the task on the cube so returning now so if it is empty the first thing we do is down the weapon slot that it has a weapon incoming so set has weapon incoming to true and then we want to execute this task in here so task same as previously and what we're going to return and the weapon slot will be this weapon slot in here the transfer on that position except we have the gift position all right so when we press the left mouse button we spawn a pistol sprite and we add a test to the queue that won't test if that weapon slot is empty if it is not empty then returns now and it keeps trying again when it is empty we set it to has a weapon and we generate the task that we saw previously which sets your weapon position the slot grab drop and so on and returns that task all right so it says to make sure that we are cueing the tasks whenever we spawn a pistol and since the weapon slot is automatically destroying the weapon after some time it should constantly be becoming occupied empty occupied empty and so on so let's see one final thing is in here when we drop the weapon we need to actually add the weapon to the weapon slot so we go to the weapon slot that set the weapon transform to this pistol game object dot transport so we notify the weapon slot window weapon actually arrives at the slot so let's test all right here's the weapons want as you can see it is in gray which means that it is empty now when I click it's going to spawn a pistol sprite and the worker won't grab the task move towards the pistol and move towards the weapon slot and as soon as I click the weapon slot won't turn red since it has a weapon incoming so let's see if all that is working so I click yep it is red TAS DQ'd he's going he gets there he drops it and now after five seconds he should destroy the weapon and yep there you go it's in grey so now let's try to spawn multiple weapons at once so there's one and there's another one that one is taking it he goes in there all right so now the weapon is occupying that slot and after five seconds it gets destroyed it gets empty he grabs the other one and so on so forth so as you can see we can now queue up various actions and they will only be executed once the question once the validation function has been validated so there you have it we created a task that is a complex task and use task queuing to only executed when it can actually be executed this exact behavior is used many times in battle royale Tycoon in the next video we're going to cover how to set up multiple task systems with multiple task types again the game is still in development so if you like the concept you're the same page add it to your wishlist and phone as always you can download the project files and utilities from indie code monkey comm if you have any questions post them in the comments and I'll do my best answer them subscribe for more videos and I'll see you next time