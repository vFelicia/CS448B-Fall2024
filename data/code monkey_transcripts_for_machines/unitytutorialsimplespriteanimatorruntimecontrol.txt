hello and welcome I'm your code monkey and in this video we're going to add more functionality to our sprite animator to be able to modify the sprites during runtime let's get started okay let's continue our sprite animator so far we have made it play the animation based on sprite frames enable and disable looping while firing events now let's add the ability to modify our sprites during runtime so far we've just been using this basic walk animation now I want to be able to switch between walk and idle animation we need a function to set our animation frames so let's go into our code here and down here let's add a public void play animation and we're going to receive an array of sprites and call it frame array now inside we're going to set our member frame array that we set up here and we're going to set our current frame to zero and display the sprite at frame 0 the same time we set the timeline okay so in my game handler here let's add a private sprite array for my eyeball animation frame array and another private sprite array for my wall animation frame array make them both sterilized field so we can set them in the editor and on my start let's test swapping animations every second so I'm going to use the function periodic from the using code monkey Newton's which is always you can grab for free from unity code monkey calm this will trigger a function every certain amount of time so in this case every second let's create a new function and this function will essentially swap out the frames let's set a ball call it play wall set it to true and here if play won't then we're going to go into our sprite animator and play the animation walk animation frame right if we're not supposed to play the wrong animation then we're going to play the item and and settle a wall to the opposite of walk and here we're going to execute this function every second so every second this function won't trigger and if play wonk is true we're going to play our walk animation if not we're going to play our idle animation and every time this function runs it inverts the state of play walk so it should swap animations every second let's test it out first going in here and we have to add the references again as a tip you can walk the inspector so you can select multiple sprites and drag them in there so select all these drag them in there and we can unlock the inspector so let's test it out and it should swap animations every second he's walking and there you go he's an idle and back to Wong back to idle okay great we can now swap our animations at any time now in here it looks a bit odd for the idle animation because it is running at a higher framerate then it actually should since the idle animation only has two frames it would be nice if we could modify the frame rate of every animation so let's go into our code here on our sprite animator instead of receiving just the frame array we're going to receive that and also a float for our frame rate and we're also going to set our internal frame rate and on my game handler so in here for my walk animation I'm going to play at a hundred milliseconds per frame and my idle animation since it hasn't less frames let's just plate swap frames every 200 milliseconds so let's test it out and my walk animation should be wearing like that and my I don't swaps frames much slower yep exactly now instead of using a helper function to modify our animations let's do it based on our input so go into my game animal script and in here I'm going to make a private in noon and call it the animation type and we have two animations we have two I don't envy won't animation and I'm going to have a private animation type which is the active animation type down here on our update we're going to test if the keyboard is down to simulate the character moving so let's make a bull call it is moving equals false and if input dot get key get key of key code let's ad assuming we are moving to the right if we are then set is moving to true so now in here if we are moving we're going to call a function called play animation going to make function a private boy playing animation it's going to receive a animation type animation type so in here let's do a switch on our animation type and K is animation type dot i phone we're going to play the idle animation and case animation type dot won't we're going to play the animation now in here if we are moving then we are going to play animation type I won't if we are not moving then we're going to play the title and appear on start we no longer need this testing code and let's just do play animation animation dot title so we start off at hilum and on update we test if we have the key down then we set is moving to true if not then is moving is false and if is moving is true then we the world animation if not we play the idle animation so we can go back into our code here and we have the Apple animation when I press the it plays the Walt animation now as you can see the animation isn't actually changing because we are setting the animation every frame even when it's the exact same animation so what's all that so in here on my plan emission I only want to point if it's different from the current active animation so in here if the animation type that I want to play if it is different from my active animation type then I'm going to play if it is the same that I'm not going to play it since it's already playing and I'm going to set my active animation type to my animation type okay let's test it out and it should now be playing the animation and there you go I have my idle animation and when I press the keyboard there you go I'm walking and now I'm idle honking and now idle so there you have it we can now easily modify our active sprites during runtime you can see how you could take this class and make a very simple character animation just set all the animations for moving walking jumping attacking and just swap it based on your input as always you can download the project files in utilities for free from unity code monkey comm if you have any questions post them in the comments and I'll do my best to answer them ok see you next time