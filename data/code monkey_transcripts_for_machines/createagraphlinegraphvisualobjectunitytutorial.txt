hello and welcome I'm your code monkey in this video we're continuing to create a graph in unity we're going to create the in line graph visual object by implementing the object interface so we can later play a graph in real time let's begin so here's our graph it works perfectly fine displays any number of values we give it in the previous video we create the bar chart visual object which is responsible for handling each specific bar the object interface is what we will need in order to update the graph in realtime but before we do that let's apply the interface to the online graph you can see the line graph visual it has a simple dot and it has a connection to the previous dot so let's check out the code so here is the in line graph visual the one big difference from the bar chart is again the connection to the last game object so in our visual object we need to deal with that connection so let's first go down here and make a public class line graph visual object which will implement the i graph visual object interface so in here on the public constructor line graph visual object on the constructor we're going to receive a game object game object which will be ddone game object then we're also going to receive a game object for the dot connection game object and finally a line graph visual object for the last visual object so let's or all of these as member variables all right so let's the only the cleanup since that is a very simple thing to implement so in here a public void cleanup which again if you've seen the last video you know that the graph is a logical interface has the function to set the graph visual object info which contains all the information required to position the dot and the cleanup which is responsible for destroying all of the related game objects so on the cleanup phone we're going to do is destroy first of all the dot game object and then also destroy the dot connection game object ok so cleanup is very simple now let's work on the public void set graphed visual object in it oh and the function which again is defined on the interface has these parameters which are the same that we use when adding a new dot to our graph so in here we want to update the dot game object that we received with these values so let's go up here and see how the dot was created so for downtown we need these the actual position so we need to change the anchor position so let's start by doing that get the anchor position on the dot game objects at the anchored position to the graph position okay so with this set up the one thing we need to do on the interface is go up here on the create gravitational object what I sectionally create a line graph visual object line graphical object equals the new line graphical objects and let's give it the dot game object and then we need the dot connection and the last dot game object so let's go instead of adding it in here let's not down here define the dot connection game object up here settle down there and for the last visual object for now let's just send it as no and then this is what we're going to return from this function okay so let's test so here we are and if I switch to the line graph a yep there it is you can see everything works exactly the same as previously since we are using a common interface all of our graph code already worked correctly so we don't even need to worry about going into the main graph class and dealing with the show where I function that is one of the main benefits of using an interface as long as you implement it all the other code that uses the interface works just fine now the one thing we are currently not updating is the actual connection so right now you can't actually see that problem since it is already correctly set up on construction but if I were to randomly change the value of a point you would see the connection Norwood connects so let's try doing that just to see the error in action so on the way up here we have a graph is no logical is just like that okay so after creating everything on the list me randomly modifying a random one so let's say on index number four I'm going to change it so here I randomly change the value of this point but as you can see the connection did not update the point did update its position but not the connection so let's solve this bug down here on the sacrificial objects info let's update that connection game object now not all of them are going to have connections so the first thing we need to do is make sure we do have a connection so if the data connection game object is different from no then we're going to update it so let's go up here and see how the connection is set up and here you have a connection from position a to position B and this is what we're doing we grab the right transform we count like the direction from A to B we come like the distance between that and we apply to our size Delta and anchor position so let's copy most of this down here so here is the same code for updating our connection now obviously we need to get the dot position B and that position a now that position a won't be this graph position so we can change that for that okay now for the B we need to know the position of the and last visual object so tonight's visual object is of type line graph visual object so down here and let's make another function a public vector which won't be get grab position essentially this will return the graph position of this visual object which as you can see is set on the rect transform anchor position so that's what we're going to return in here so we are returning the anchored position of this game object so now we can go up here and define the dot position B as the own last visual object dot get the graph position so when updating the graph visual object info first we check if we do have a connection if we do we grab the rect transform we call it the direction between this position to the last original object correct position then we calculate the distance and apply the size Delta anchored and the rotation all right so now let's see if the connection this correctly update to match the new position now the one thing we still need to do is actually send the last regional object so let's go all the way up here so here on the on line graph vision we are storing the unless thought game object but instead of saying that we want to store the last graph visual object so let's make a time line graph visual object this will be the last line graph visual object so we set it by the function know and down here if that one is different from no then you get that one that get the graph position stead of going to the anchor position and here we set the last one to be this line graph visual object and when we create it let's give it the previous last one all right so let's test and see if the connection now correctly matches alright so here it is this is the point that we have modified and you can see the connection from this one to the previous one is indeed correct that one it is correctly calculating the difference this dot used to be down here then it shifted up there and now it correctly connects however as you can see this connection here is not correctly connecting to that dot this is because we have set up the object to handle the connection to the previous dot so when we modify this one it modifies this connection but when we modify this one we also have to notify this object to update this connection so we're going to notify this object when this one changes using an event so here on the align graphical object let's make a public event event handler and let's call it on change graph visual object info and we're going to fire it in here when we set the for a special object so if that one is not known then fire it using this and event or it's not empty okay so whenever we change this object fires an event now that means we can go up here into the constructor and if we do have a last visual object so if the last visual object is different from now so this one is connected to something else so let's subscribe to the last visual object that can change visual object info so this function here won't become doing the previous diet changes which means in here we need to change the connection and the connection only we don't want to call this function directly because that would then fire the event and so on and so on and at the end it would end up updating every single dot so we want to change this code into its own function so here let's make a private void update dot connection and here we're essentially going to copy all this now we're going to call this function in here when we set the original object okay and when the previous one changes let's also update that connection all right so let's test and see if the connection correctly changes between both points all right so here it isn't as you can see both connections are now correctly updating so we modify this point manually and now this connection updates correctly and this one also updates correctly so this object in here was notified when this one changed all right so everything is pretty much working the only thing missing is our tooltip so let's do the same thing with it with the bar chart which is first of all we go up here and we add the button UI component when we actually create the dot game object so in here before we returned at the dot button UI components to the game object okay instead of setting the tone type in here we're going to set it on the set visual object info after updating connection let's also update the filter so grab the button UI for the dot button UI which is based on the dot game object target component type what you want so we are now updating the tooltip that is shown so let's see and if there is the tooltip has been updated it used to show a random value then I updated to show a random string and it did correctly update so we can now easily modify a specific data point change its position it's don'tif and everything else so there you have it we create the in line graph visual object using the previous interface in the next video we're finally going to work on updating the graph in real time as long as you can download the project files in utilities from Unity code monkey comm if you have any questions post them in the comments and I'll do my best answer them subscribe for more videos and I'll see you next time you