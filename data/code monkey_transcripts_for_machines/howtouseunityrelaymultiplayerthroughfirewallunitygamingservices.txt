hello and welcome I'm your code monkey and here on let's learn how to use Unity really this is their tool for helping you handle multiplayer connections without needing dedicated servers and without asking your players to open ports and share IPS so there are no more issues with firewalls not and so on you just connect the ENT really get a join code share the code with your friends and then they can easily connect to the same server the other Unity tool which works very well with really is Lobby which I'm already covered in detail on the previous video when you combine both you don't even need to share the relay code you can do it automatically through a Lobby and I've also covered the unity's netcode library called netcode for game objects in another video all three of these tools are completely independent you can use just one or any combination of these but they are also made to very easily work with one another here in this video let's focus on the relay but that part is actually extremely simple it literally just takes three lines of code so I will also showcase how to use it in conjunction with netcode for game objects and lobby with that we can create a Lobby the second player can join the host starts the game and both players connect through the relay and play the game with netcode for game objects also this video is officially sponsored by Unity gaming services this is a collection of tools for helping you build operate and grow your games with ease it includes all of the tools that I'm going to mention here netcode for game objects for adding multiplayer to your games Lobby for joining players really for connecting them there's also a dedicated game server tool one for matchmaking vivox for Voice and text you have Cloud save for storing player that in the cloud cloudcon delivery for delivering SEO players you can explore your game analytics do some a b testing monetize with ads or do inapp purchases or a bunch more all of these symbols are either completely free or they have generous free tiers so click the link in the description to learn more about TNT gaming services and get started for free okay so here I will be starting from where I'm left off on the netcode for game objects video so I've got two builds right here and these two buttons where I can start as a host or a client so this one let's make it a host on this one let's make it a client and there you go both of them are connected in multiplayer all right great however the issue here is that the only reason why this is working is because I'm running on the exact same PC if I try to send this build over to a friend and have them connect it would not work it would have issues with firewall so I would have to manually open up ports and disable the firewall really is a tool that helps you solve that so you don't need to do that okay so here is a working demo using netcode for game objects but like I said really works by itself without net code for game objects so let's first look at the absolute Basics the first step is to install the package so let's open up the package manager let's go up here into DNT registry and then find over here the relay package so just go ahead and install this the next step is to set up a project on the NT dashboard so you can go here into edit project settings then go down into Services then make sure you're logged in and over here you can select the organization and create a project from here or if you already made the project in unity dashboard then you can click here and just sign the project I already created the project so over here I'm just going to select my project and just link the project okay the project is linked now let's go here into the NT dashboard make sure you select the project up here then on the left side let's select multiplayer and then over here let's go under relay and over here you should be able to see a button to enable it then you can go through the setup guide so first of all it tells you to link the project which we already did so let's go next then it tells us to install the package which we did on next and finally turn on the relay next and that's it if you want there are also some really nice samples that you can download to see how it all works okay so that's the basic setup done back in our project let's create a brand new csharp script let's call this test relay let's make a game object to run it attach the script and let's open okay so now here the first thing that we need is we need to initialize the unity services so let's make a private void start and on start let's do that by the way this initialization part for the unity services and authentication this one is the exact same as the lobby so if you've already seen that video you can fast forward this part there's time steps in the video so we go inside Unity Services which is inside unity.services.com so let's add that using in here and we just call initialize async now importantly this isn't awaitable so up here let's add a weight in order for this a way to run then we need to Define this function as async now if you're not familiar with async in a way don't worry too much about it you don't need to know how it works in order to use it but essentially what it does is it lets you run code asynchronously so for example over here this will send a request to ENT services to initialize the API that request goes over the Internet so it's not instant if you didn't make it async then the game would freeze and someone receives their reply that's the main purpose of async and weight with this your game does not freeze hit pause the execution of this function and the rest of the game keeps going so any code that we write down here it will not run immediately inside the execution won't pause in here until it receives a reply then when it does then this function continues executing but like I said you don't need to worry about it just don't forget the await and async keywords okay so this is all we need to initialize these Services then really requires authentication to use Unity authentication has tons of options you can link a Sim account Apple Android Facebook or open ID so you can use that to create an account and Link with any of those services or something super awesome which is you can just do a super quick Anonymous signin over here all we do is access the authentication Service this one right here inside UNT Services authentication and then we can access the static instance and then we call sign in anonymously async again this one is an available console let's await basically this will sign in anonymously and create an new account for this user if we want we can listen to the event to know when the sign in completes so again let's go into the authentication Service and listen to the signed in event so over here for example let's see we debug.log and we can go into the authentication Service instance in order to get the player ID we can do a quick test just to verify this is working and if there it is it's signed in and gave me this player ID okay so we have everything we need to start using the relay so let's begin by making a function so a private world let's call it create relay and over here the first thing we're going to do is create an allocation so for that we're going to access the relay service inside unity.services.relay on this one we access the static instance and we're going to create an allocation async and this one takes a parameter for the max number of connections importantly this does not include the host creating the allocation so for example if you have a four player game that means it's going to be the host plus three more players so over here you just put three then optionally you can also Define which region you want to create the allocation in or you can just leave it as empty and just let the relay decide which is the best region and again this one is an avoidable console let's await an async now one important thing about this function and really every relay function is that it can throw an exception if we do just like this and throws an exception then it's going to pretty much break our whole game we don't want that to happen so let's make sure to wrap these functions inside a try catch so try then catch and we can catch a relay service exception so really service exception and if that happens let's just do a debug log with this if we have any errors we will get some details on what went wrong like for example maybe the relay is disconnected or disabled or so on okay so with this over here we are going to return an allocation let's grab that object of type and location inside Unity services greenlee.models so our allocation and then with this allocation the next thing we need is to generate a join code so again let's go into the real estate service and access the instance and now let's get the join code async and we need to pass in the allocation ID so let's go into allocation and pass in the allocation ID then this is going to return a string so it's a string for our join code and again this is available so let's await okay so that's it it really is this simple with this we are creating an allocation on the relay and then getting the join code to join that on location the string that we get here is going to be the code which we can send to our friends so they can connect to the same relay let's do a quick test just see what this is doing and for testing like I was using in the netcode for game objects video over here I'm using the quantum console it's an excellent asset that lets you easily add a console I made a full review on it really awesome here it is especially useful so we can call this function so to do that I'm just going to add the attribute command with this I can easily call this function from the console now this is optional you don't have to use this asset you can call this function from wherever you want I'm just doing it like this just make it easier for the demo okay so with this let's test all right here we are we are signed in so now let's call our function to create the relay so let's run that and if there you go it did work so over here you can see that it pinged a whole bunch of servers in order to find the closest one and in my case I decide that the best region was Euro Quest 2 which makes sense since I'm in Portugal so yep everything worked correctly I just forgot to add a log for the join code so let's do that so over here after we get the joint code just to debug.log on the join code again let's create a relay and if there you go there we have our join code okay great so we create the allocation and we got the join code now the next step is to join using this code so over here let's make another function right void and let's call it join relay and we're going to receive a string for the join code then over here it's pretty simple let's just access the real lay service get the instance and now let's call join allocation async this takes our joint code so let's pass that in and again this is awaitable let's put a sink and let's make sure to put this inside a try catch again so that this whole thing doesn't break all right so here it is it really is this simple this is only neat to get the relay working so on the host you create an allocation and generate a joint code and then on the client you simply join using the join code now this is the part where normally I would do a quick test to Showcase that it is indeed working but while this code does work if we test just like this so over here I've got two bones running now on this one let's call create really so let's create it if there you go got the region got the code okay great and now on this one let's call join relay and then just pass in the code so in this case fccc G7 so let's join and nope there's the error it's saying the join code is not found basically everything is indeed working correctly except it really won't really open if you don't immediately make a connection after you allocate the relay you need to open a connection in whatever way you want using whatever transport you want so this is where we can connect relay to netcode for game objects and unity transport in order to open that connection and make everything work through the relay so let's do that the first setup is let's go into the network manager object so here it is again I set up all this in the netcode for game objects video go watch that if you have no idea what is a network manager so down here if we scroll we can see we're using ADT transport and for the protocol type over here it says Unity transport all we need to do is on this drop down menu let's swap for the real Unity transport and that's it there's nothing else we need to change Here and Now for setting up the transport to use relay this is going to differ are slightly depending on what version you're using see if you find any issues pretty close attention here there are two methods the second method is newer and quite a bit easier to use but first let's begin with the first method this first method is if you are using netcode for game objects version 1.0.2 which as of the time of this recording is the version that you can get from the package manager and also down here the unity transport version 1.2.0 so these are the versions that I use in the netcode video with these specific versions let's see how it is first over here when we create the relay allocation we get the join code then we can access the network manager which is inside unity.net code then on this one we can access the Singleton and through the Singleton we can do get component in order to get the component of type Unity transport then on this one we can call set host relay data so this function which as you can see it takes tons of parameters all of these parameters we can get from the allocation so let's add all of these the first one is the IP address so let's go into allocation let's grab the reality server and grab the ipv4 next one is the port so allocation the relay server and let's grab the port although this field accepts a ushort whereas Port over here this one is an INT so we need to convert it so back into U short okay we have the port next one the allocation ID so again allocation let's get the allocation ID bytes then for the key that's an allocation.key and finally the allocation.connection data okay so with this all of the parameters have been sent and then over here we can start the host which will finally create the connection so let's go into network manager get the Singleton and let's call start host okay that's it that's only takes to set up the network manager to work with Drilling and then down here when joining We join the allocation we need the code okay then let's again go into the network manager access the Singleton let's do a get component to grab the unity transport and then on this one instead of calling set host friendly data we can't set client relay data so pay attention it's a different function and now we need the same bunch of parameters so let's add them and for the parameters we can get them from here so when we join the allocation this returns an object of type join allocation so let's grab the join allocation and from this one we can grab all of these parameters so first of all once again let's go relay server grab the ipv4 and so on so here we have the connection data and on this one we've got an extra one so that's the join the location the host connection data all right so we set up DNT transport with the set relay client data and then afterwards we can start our client so again network manager let's access the Singleton and let's call start client all right so that's it so with these two our UND transport connection should now be handled through the relay so let's test okay so here I have both builds now on this one let's concrete really which is going to create really and start the host so there you go thus and yep my character is here so yep it does work and there we have our code so then down here let's go and join really passing the code so the 7fffff6m so let's join and if there go with the join and we have both players connected in the same world and both connected through the relay alright awesome so as you can see I can move and everything is nicely synchronized on each of them okay great everything works now let's see the newer similar method first of all let's install new versions now like I said at the time of this recording the new versions are released but they don't show up on the package manager automatically so we can't install it over here to the list but we can go and add package by name and for this one is the com.unity.netcode.game objects and the version that we want to install is version 1.1.0 so let's add this one okay here it is so net code for game objects I've got in sound version 1.1.0 and importantly it also automatically installed in the transport 130 so down here make sure we have this one the 1.3.0 so this is important for this new method you need these two versions for both the netcode and the transport so back here in the code instead of having to send all these parameters one by one there's a simple method there is a different function so instead of being set host friendly data we call set relay server data so we call this one and we have version which takes a really server data so we can create that object so here let's make of type relay server data inside Unity networking transport really and on this one we can use the Constructor any construct takes an allocation so let's pass in the allocation and then also has a connection type this can be either UDP or dtls dtls is encrypted and it's what they use in docs so let's use that here so dtls and if that's it so we now have this relay server data and over here we just use this instead of sending all these parameters okay that's it as you can see much simpler method then on the client down here let's use the exact same thing so let's actually copy this and paste on top of this so we have this we created based on this join allocation and do exam like this so now we use the same function and just pass in a really server data all right now let's test like this so here are both Builds on this one let's create the relay and let's go it's going to create and yep start the host so there you go it works and on this one let's call join really passing the code and you'll be joined the real estate of the client and yep everything does work okay great now let's verify that it does indeed work so here on my PC I'm using my original connection you can see that I'm unfortunate then on my laptop I'm using a VPN so you can see that I'm connecting through the netheroids in the scenario if we did not use relay then I would have to manually open my firewall and open some ports but with really working let's just connect so over here on my PC I'm going to create a relay there it is placed in Europe questio okay great now on my laptop here let's join the relay and if there you go we have a nice connection so again I'm connecting through a VPN so both builds are running on different IPS and as you can see everything is working perfectly so everything is synchronized so I can do exactly anything that I want there are no worries with that no problems with firewalls everything is connected nice and seamlessly all right awesome now finally let's look at how to get it working with Lobby I covered Lobby in detail in the previous video and here I have the demo sample that I built in that video so I've got four windows open I can set the name so I've set the unique name just so they authenticate with different player ID so let's join with all of them now for example on this one I can create a brand new Lobby so let's make it public my lobby with four players and Capture the Flag let's create and there you go there's the lobby so now on the other ones if I search I should be able to see that Lobby and yep I do see it on all of them so now I can just join with all these so join with that one join with that one and there you go all four are currently joined in the same Lobby then like you should know I'll be them over here I've got tons of options so I can change the character I can change anything I want one I can change the game mode I can kick players I can leave and so on so this is a fully working Lobby so far everything here is exactly the same as the sampling in lobby video the only thing I changed was adding this nice arrow button here what this does is it starts the game so when I click on that button it triggers this so we go to start game on the unlocking manager then on this level manager here is the code basically a Lobby you can Source some data so the way that I decided to synchronize the relay joining code is by setting it as some Lobby data so up here when we create a Lobby so here is a function to create a Lobby and on the data I include one for the start game and I just defaulted it to zero also importantly remember how Lobby has some data accessors for the Relay you don't want that to be public that would be accessible to anyone searching for a Lobby you only want it to be visible to people inside Lobby so that's why I made this one a member variable then I just defaulted it to zero and then on the start game function on this one just make an update to the lobby and set this one into the relay code so I basically just go into the test release function that we just made to create the Greenlee and this function is going to return the join code so it allocates the real link sets Unity transport starts the host and Returns the join code so it does that and updates the lobby with the relay code then for all the other players if we saw the lobby video they are constantly polling for a lot of the updates over here is the function to handle the lobby polling so it's constantly getting for updates and over here it checks for the lobby check the data check the start game and if it is not zero which was the default if it is not zero then it contains the relay code if so then just as a check if this one is Lobby host because Lobby host joins automatically when it generates the code and if not just call the join relay and join the relay passing the relay code and that's really it when joining the relay this one starts up the client and the host starts when generates the code so everything should work they should be connected although before I test this let me point out that alternatively you could decide to start the realtime connection right away over here I decided to pretty much only create the relay allocation and only start net code for game objects and only do that as soon as the player decides to start the game but you could call start host directly as soon as anyone joins the lobby that would be useful if for example you want to have some really data transfer once inside the lobby perhaps you wanted some more complex options to share while the players were inside the lobby over here on the sample as you saw in the previous video if I click somewhere to update it you can see it takes a little bit of time before it update in all the other clients again that is because Lobby is not meant for realtime connection that is why it only pawns once per second so alternatively if you wanted you could start the host and start the coins as soon as they enter or you can do what I did here which is it only creates a relay allocation when we press the start game button it's up to you to decide which method makes more sense for your game alright so with everything set up over here on the host all that's left is to start the game so I'm going to press this button and this one is going to generate a relay allocation and then start net code for game objects and at the same time these other clients you are going to pump for updates and within about one second they are going to get the update they are going to connect to the relay and they are going to start netcode for game objects so let's see all of that in action over here let's click and there you go it's allocating the relay in a bit yep there you go starts the host and the host right here and all the other ones are connecting there you go this one and this one and this one and all of them are connected all of them connected through the lobby and all of them are being connected through the relay and handling the realtime data through netcode for game objects alright awesome so again note how we did all this without having to share any text any really join code anything like that we just use the lobby we found an open public Lobby and we just joined it so no need to handle any codes anything at all it all works seamlessly under the hood and here we have a nice game with four clients all working together on playing in the same game alright great now let me point out just one more quick note like this the lobby still exists those players are still connected to that Lobby again that is up to you to decide how you want to handle it perhaps you do want to keep them in the lobby so that if something happens like for example one of these hosts disconnects if that happens you can go back to the lobby and start another game or alternatively you can decide to destroy the lobby as soon as the game starts and not allow anyone else to join so it's up to you to decide what makes sense in your game do you keep the lobby alive or do you destroy it as soon as the game starts okay so finally let's look at pricing over here on the ugs pricing page we can scroll down and find the relay so over here under multiplayer here it is multiplier and we've got the relay and Lobby the left side is the free tier and the right side is the paid here so for the Relay we have a free tier with 50 free ccus per month CCU means concurrent users so you can have 50 players connected at the exact same time all of that's for free again remember those are not 50 players total it's 50 players at the exact same time so you could have thousands of players as long as they're not around playing at once and you stay within the free tier then for bandwidth for this one you have three gigabytes per concurrent user and 150 per toron per month this is obviously going to depend on a per game basis but these three tiers seem pretty generous to me 150 gigabytes per month is quite a huge amount quite a lot of bandwidth and if you end up going past these three limits then the paid tier is also pretty cheap if your game was a massive hit and you had a thousand concurrent users then it would only cost you about 160 bucks and if you had a thousand concurrent users that would probably mean that you sold something like 50 000 copies so these values look pretty cheap but again for the most part you're probably going to stay within three tier so that's great alright so that's Unity really it's an awesome tool for helping you make multiplayer games without requiring dedicated servers and without requiring your players to the avoid firewalls or port forwarding or anything with eyepiece then when combined with netcode for game objects and Lobby it makes it really easy to make multiplayer games if you've tried to make a multiplayer game just five years ago it would have been extremely difficult but now thanks to all of these tools it's all extremely easy so now go ahead take these tools and build some awesome multiplayer games alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and I'll see you next time foreign