hello and welcome i'm your code monkey and a while ago i was randomly browsing youtube and came across this video which has quite a lot of views and it's titled i stopped using unity and so should you naturally i clicked on it and watched the whole thing it features some common misconceptions that i've also seen in several comments on reddit so i figured i'd make a video with my thoughts on this topic now of course before i go any further let me start by saying obviously i'm biased towards unity it's what i've been using for almost 10 years it's the tool that allowed me to become an indie game developer back then i was having trouble in college and eventually dropped out so my future wasn't looking too bright so if i hadn't found unity and steam green light didn't happen then my life would be very very different right now so yes i'm definitely a bit biased towards unity but i'll try to be as objective as i can my responses if you think i'm being blind by my bias then please let me know in the comments but at least watch the full video so you hear my arguments it would be great to have this video reach a broader audience to see all of the comments so if you can please hit the like button so youtube promotes this video to reach more people with different perspectives and just to clarify this isn't meant as an attack on the original video everyone is free to have their opinion and use whatever engine you want my opinion on game development is always the same the goal is to make a game the engine is merely the tool so choose whatever tool you want just make sure your choice is based on valid arguments i merely want to clear up some common misconceptions and responding to this video is the perfect way to do that and while a lot of these are misconceptions or misinformation in the end i will give my own thoughts on some valid problems you unity that i think they should and could improve okay so let's hit play i got into game dev four years ago and in 2018 unity was just the thing that everyone used at that time it was truly the best you could get it was beginner friendly enough to learn without experience it could do 2d and 3d games it had a giant user base and heaps of online resources everyone was parading this engine around like it was going to be the golden child of gamedev software but things have changed alright so the video starts off talking about the positives back in 2018. it was very beginner friendly it did both 2d and 3d had a huge community with all of the resources you could possibly need to build any game you want but then supposedly things have changed and this is no longer the case right away i don't see how that's accurate in any way unity still works great in both 2d and 3d it's even better nowadays back when i started 2d had pretty much no tools and making my 2d steam games required quite a lot of tricks nowadays there's mountains of 2d and 3d tools both free and paid the community is bigger than ever which in turn makes it easier for beginners since you have so many places to learn literally anything but let's keep watching the video to see if he explains why things like that i literally cannot work in this thing anymore during my 1 year break from youtube videos i took the time to properly delve into other game engines mainly godot and unreal and i know i'm gonna get destroyed for seeing this but guys unity is objectively bad my biggest issue with this engine hands down is that it's way too bloated if something like unreal engine stays focused on making 3d games and godot stays focused on 2d games unity just says it i'll do what they do but worse and i don't care what people think less is more and here we come up to the first argument which is one that i've heard countless of times and to be honest i really just don't get it essentially pointing out the fact that the engine can do anything and has tons of features they point that out as a negative i generally do not understand this argument if you want to make 2d games then go ahead and use the 2d tools and don't worry about the 3d tools if you want to work on a simple 2d pointandclick game then the fact that the engine also supports something like machine learning that doesn't really negatively affect you at all the fact that the terrain system can be used for making an awesome 3d game like vanheim does not negatively impact your ability to make an awesome 2d side scroller kind of like hollow knight again i seriously just genuinely don't understand this argument but i've heard it countless times in tons of comments in reddit posts the fact that the engine can do so many things is a positive not a negative yes unity has tons of tools and supports an endless amount of use cases everything from simple games to extremely complex games to even things to do with architecture or cars ar vr and so on you can make games for a phone or a watch or a console or a super highend pc those are really all positives if you want to make a 3d strategy game like dyson sphere program you can do that the fact that unity has tons of 2d tools does not negatively impact you at all so i really honestly do not understand this argument but let's keep watching opening a unity project nowadays feels like a pop quiz why are there three different rendering pipelines for 3d games why are there so many unity versions i gotta keep track of and reinstall every single month okay so now let's go through each point one by one first on the render pi points this is one that i would agree that as a beginner can seem quite confusing but at the same time it is literally a question that can be answered in 30 seconds unity has three rendered pipelines the legacy builtin render pipeline the high definition render pipeline and the universal render pipeline which one you choose you just need to ask yourself a very basic question are you trying to make a game that pushes the limits to its max trying to go for aaa quality and publish the game on consoles or high end pcs if so then go with the high definition render pipeline for literally every other use case go with the universal render pipeline the legacy builtin render pipeline is exactly that it's legacy so you only use it if you have a very specific use case where you absolutely must use it so on this point i understand how for a complete beginner it can seem confusing but the answer is literally just one google search away or if you don't even want that then you really just look at the name the universal render pipeline is universal it runs on anything and the high definition pipeline is if you want high definition so this is one where maybe i'm completely blind with my bias because i just know this but to me it seems like a really simple system and you're also going to use whatever game engine you choose for the next months or years so i really don't see how something you can learn in 30 seconds is an issue in any way why are there so many unity versions i gotta keep track of and reinstall every single month then it's the same thing for the versions argument he asks why are there so many unity versions that you have to keep track and reinstall every single month and once again it's quickly answered with a simple google search if you search you might even come across my video on the subject where i literally say the answer in the first 30 seconds unity has three version types you've got long term support or lts tech and preview the quick answer is extremely simple use the latest lts version that's it long term support is the version that supports the maximum stability and the support for two years past its release if you're not working on the bleeding edge of tech then there's no reason for you to be using anything else if you just want to make games you just download the latest lts version it's that simple and then the part where he says you need to reinstall every single month i'm assuming he's referring to the hotfixes versions the first number in the version that one is the ear then you've got the major version number so 0.1 or 0.2 for tech and 0.3 for lts and the last one is the hotfix essentially major versions contain lots of new features lts versions just contain stability updates and hotfixes just contain bug fixes there's a new hotfix version about every two weeks but that's the thing those are hotfixes you don't need them if you're not about to release your game if you're just working during development and you're not encountering any unity bug then just keep using whatever version you already have i literally have not downloaded the unity version in probably about six months and for me i do tons of videos exploring tons of topics rather than working on a single game you can go watch my videos to see that i've used version 2020.3.3 in 20 or so videos and then a while ago i updated to 2020.3.12 so right now i have just three versions installed i've got a 2021 a 2020 and a 2019 so the 21 is for when i explore some more bleeding edge packages then the 2020s where i use normally and the 2019 version is because i'm making some assets if i was just making a game i would simply keep the 2020 version and nothing else so the idea that you need to keep dozens of versions especially while working on a single game i mean that's just not correct and again this isn't just in this video i've seen the same sentiment in so many comments so on these two topics regarding render pipelines and versions literally 30 seconds of searching will give you the answer personally when i think about choosing an engine i think about something that i won't be using for many many years so the fact that it takes 30 seconds to learn the specific quirks of operating in any engine it's not just unity unreal godot all of those have their own specific things i really don't see how that tiny amount of time is relevant in the grand scheme of things why have they not after seven years of time still not fixed their basic goddamn text renderer to not look pixelated like it's white uk and no downloadable packages made by third parties are not a solution they're a bandaid like everything else unity offers and then the next point is why haven't they fixed the text render and then he goes on to say downloadable packages made by third parties are not a solution in reference to text mesh pro and again this one is just plain wrong text mesh pro is not a third party package it did start off that way but has been officially integrated into unity for many many years now it's not even downloadable it's one of the builtin packages you'll literally open unity and it's right there by default so no this is not a third party and it's not downloadable the legacy text is still there for legacy reasons once again that's a good thing i can still open up my very first game made all the way back in 2013 and the project still opens because back then i made it using the legacy text and the engine still supports legacy text from what he says in the video he knows that text mesh pro is the better text component and just simply refuses to use it this argument is kind of like intentionally doing things wrong and complaining about it i really don't see how that's a fault of the engine for example did you know that you can still use the legacy animation component instead of the mechanim animation system the legacy one that's the animation system that came with the original unity version which was over 10 years ago and has almost no features compared to magnum and just like text mesh pro they acquired the mechanim animation system and integrated into the engine so if you decide to stubbornly use the unleash the animation component instead of the much more capable mechanism animator then i really don't see how that's the engine's fault and sure lots of unity veterans will ignore this and say that oh just learn this and that do some basic googling but bro beginners don't know this stuff they take up a lot more time to do basic things than you when they open up a new project they want to be able to start one easily then his next comment is kind of pointed exactly at me saying that veterans won't just say google but beginners don't know that stuff and well my response to that isn't that really the whole point of the entire learning process pretty much no one is born with knowledge nobody knows anything at the start and just slowly you learn things that's not even something related to unity that's just the process of learning literally anything for example a couple of years ago i started going to gym i had no idea what was a tricep or a rear delt what on earth was a deadlift and what is the proper form to do a bench press so i can learn anything i start by asking questions just learning things little by little just like you learn literally anything so maybe i'm just misunderstanding his argument but literally anything in the world has a learning process no one is automatically born with knowledge to do anything everyone starts learning from nothing beginners don't know this stuff they take up a lot more time to do basic things than you when they open up a new project they want to be able to start one easily and then it goes on to say when beginners open a new project they want to be able to start easily now if you had made this argument back when i started with unity back in 2013 back then this would have been somewhat correct back then i opened up a blank project and it was up to me to decide what to do there was no guide but nowadays when you first download unity hub it asks you if you are a complete beginner and if so then it automatically downloads the lts version so you don't even need to worry about the various versions and then it shows you all of the various micro games which contain guided tutorials for learning how to work with the engine and they literally allow you to start playing and modifying things in 30 seconds and this design philosophy of being a swiss army knife of game engines bleeds into everything else for instance the package manager system let's talk about that so okay when you launch your first project in this engine you have a very bare bones set of features the idea is that users can use this nifty level thing called the package manager to download and install features that they want to keep which fine sure that sounds great i would have zero issues with the package manager whatsoever if it actually worked as advertised remember when i said that this engine has lots of versions to keep track of yeah that extends to the package manager as well because each of those packages that you install to your game have versions that you got to keep on top of as well so whereas the package manager sounds like a great feature on paper in practice this thing turns into such a cluster so quick that oftentimes i see devs just avoid having to use this thing altogether then he talks about the package manager again he points out versions and how packages require different versions and again if this video was made back when the package manager was first launched then at that point that argument was somewhat true back then the package manager showed you absolutely everything so that includes fully polished and stable verified packages but also completely experimental packages but nowadays that is no longer the case by default you only see verified packages you need to actively go into the user settings in order to enable preview packages which again preview packages are on the bleeding edge of tech development and it's meant for advanced users not beginners like he's talking about in this video if you're a beginner and you just downloaded the default lts version that unt hub gave you then you don't even see any invalid or preview packages and when you do become an advanced user then the package manager is great all of the things that unity can do are in separate packages so his dislike of the package manager kind of goes against his first dislike of supposedly being uploaded because of the package manager the engine is not loaded for example when you download unity you won't have the ml agent's package so it has no weight on your project but if in the future you do decide you want to explore machine learning in unity then it's literally just one click away that often times i see devs just avoid having to use this thing altogether and i don't blame them because when you're working on a project for years on end you need to make sure that your engine will not crash on you and speaking of crashes let's talk about those i often joke with my friends that unity has become the adobe of game engines because just like premiere pro my projects would crash so many times that i was seeing error messages in my sleep man but daniel my projects never crashed well you know man good for you because i swear to god that the stability of this software gets more and more fragile by the year maybe i'm alone with this maybe there's something wrong with my system but i don't care i see it how it is and i behave accordingly like i'm not exaggerating guys when i say that the early access build of unreal engine 5 has crashed less on me than the fulltime longterm support build of unity i don't know about you guys but when i'm making a game the first thing that i want is stability it's kind of important for me on the subject of crashes it really depends on a peruser basis so for this one literally all i can do is talk about my personal experience which is i've probably had maybe five crashes in the past year and those were when i was playing around with the ml agents package which again is on the leading edge of development and is not intended to be stable i also had maybe one or two crashes when i was playing around with the pro bundle bowling tool that i covered in another video but again that one was marked as experimental so the warning is right there so yes i absolutely cannot say the engine doesn't crash everyone has different hardware different drivers all i can say is speak from my experience and all of the crashes that i had recently they were all related to experimental features i really don't remember the last time i had a crash when just working on a normal game with an lcs version i've been using unity for almost 10 years i've made eight steam games countless prototypes three complete courses and over 500 videos in all that time i've used unity across four or five machines and in all that time i've had maybe 20 or 30 crashes in probably 10 000 hours of usage so yes on this point really all i can do is share my personal experience if you have a different experience then really all i can say is i'm sorry to hear that but look man at the end of the day the unity company doesn't care about game devs anymore then his next point is unity doesn't care it's kind of hard to argument against this one because it's so light on specifics what exactly does he mean by doesn't care does it mean that unity doesn't have new features being added if so you can just browse the change log for any unity version and see there are features being added and tweaked all the time you've got tons of things for tripoli games and things for solo indie devs or maybe don't care means they are focused on things other than games unity does have tons of use cases and games is just one part of it but each team works on different things the game's team continues working on games and the automotive team continues working on automotive features an example of this is a while ago they changed their logo and some people post the obvious comment which is why are they working on changing the logo instead of adding more features to me this was a very strange comment i mean isn't it obvious that different people work on different things the marketing branding team is definitely not the same as the engineering team or maybe by don't care does it mean that the people behind the company don't care about their users i can speak from my personal experience i've met a bunch of people working for unity they were only extremely nice and committed to doing the best they can for example on twitter i'm constantly seeing will talk to people and passing feedback along to the relevant teams they also have a survey program where you can make your voice heard and every once in a while the subreddit gets posed by the official team so i'm not sure exactly what was his argument with saying unity doesn't care but either way i just don't see it with godot being on the rise for 2d game devs and unreal engine 5 completely outclassing them in the 3d department you unity loyalists can cope and see that this fact but while you're busy focusing on 3d render pipelines and version control i'm going to be focused on making my game instead and his final point is apparently unity devs spend their time trying to study render pipelines and version control systems well instead he is spending his time making his game i mean i do video tutorials so my job is to learn things and teach them which means i spend a lot more time dealing with unity than people who just want to make games but even with that the time that i have spent learning render pipelines was a tiny amount pretty much just enough to get them to work the last time that i even had to think about render pipelines was when i wanted to make a seethrough effect for my house building system and that wasn't even anything specifically related to urp or agrp it was just learning how to do an effect another example i just recently made a complete minigame the squid game video i spent about 20 hours making that game and in total i think maybe about 10 seconds of that were related to making the render pipeline object that's really it so anyways that's the end the video again i've seen so many of these arguments in so many places so i figured i'd share my thoughts on this topic and now this is the time that i wanted to take to mention all the things that i think unity could improve but this video is already super long and i don't want to force myself to cut down on mentioning all the things that i think unt can improve so i'm instead going to make that as a separate video just on that topic and maybe someone from unity will see that one and hopefully improve some of those things so stay tuned for that coming video or if you're from the future check the link description i'm working on editing it right now and again this isn't meant as an attack on the original video everyone is free to have their opinion and use whatever engine you want you can go with unity or godot unreal game maker whatever you want remember that the goal of a game developer is to make games the engine is just the tool you use so choose whatever tool you want but whatever choice you go with make sure it's not based on misinformation or things that are nonissues please do tell me in the comments if you think i'm acting like a blind fanboy or something i see the same arguments over and over again and i just don't see how most of them are valid i'm definitely biased towards unity but i think i'm being objective in my responses but by all means do tell me if you think i'm completely off on my thoughts nothing is perfect but i've been using unity for a very long time and as i see it the engine just keeps getting better and better and i've never come across an idea that i could not make with unity so until that moment comes and if that moment ever comes until then i'm a happy unity user and will continue using it to make my own games for many many years to come alright so this was a very different video from the usual but i hope it was interesting to hear my thoughts on this topic let me know what you think about it in the comments thank you for watching stay tuned for that upcoming video and i'll see you next time