in this video we're going to take our grid map and convert it to use generics this gives us a lot more options with what we can do rather than being stuck on using a specific type with this base we can easily make games like minesweeper or terraria or easily organized complex logic let's begin so why our goal here is to create a grid that works with generics so we can use it for just about anything if you're not familiar with generics they are a really awesome feature of CCR that essentially lets us use any type we want so that means that we can make our nice grid in here and do something where each grid position can hold various letters and numbers so as I put the mouse over this grid position and I hit a kink and there you go I've added a letter into the underlying grid object now I add another letter now if I want I can press the number and there we go it is added into a different part of the same grid object so I have my generic grid and each width position is holding a custom parade object another type is just using a simple boolean so as you can see everything is false and when I click it turns into true and I've also modified the heatmap visual Noor to work with the generic with boolean so as I click it turns from black to green so with generics we can set up our grid to work with whatever type we want that means simple types like inns and bones but also complex custom types that contain whatever logic and data we want so previously we made this nice red class it splits the map area into a grid each holding a specific value we also use this where it wants to make a heat map visual so when I click there you go the underlying value changes as well as the original representation so go check out both those videos to better understand our starting point now the underlying code for all of this is over here we have a grid array of ends now that work great since over here the heat map is based on a nice numeric value so we have from 0 to 100 however in are not the best datatype for every single problem like for example let's say we want to make a grid map for our path money so we wanted to find areas which are walkable in areas which are blocked technically we could do that with int and use a one for wanker bone and 0 for block however that would be pretty messy code a better approach would be to simply store a boolean instead another use that wouldn't be suitable for intz would be if we want to store a list of objects within that cell for example that's exactly what I made when I created the quadrant system in ECS it stores how many entities are in a specific quadrant so our in base is a great starting point but we can greatly expand what we can do with it if we make it work with generics all right so let's get to it so here is our starting scene and here in the project files I have the basic grid as well as the heat map again this was all fully created from scratch in a previous video so check the link in the description if you haven't seen it yet so we're here we have a testing game object that contains a testing script and in here in our script you can see it's very simple just on cert we are instantiating our grid and we are setting it on the heat map visual then when we click we are adding a valley to the grid which then updates the visual so let's make it smaller for testing okay so here is our grid and as you can see it splits our world into various grid cells and if I click there you go I'm modifying the underlying grid as well as the visual okay now what's going to our grid class and okay here it is now we're going to modify it in order to use generics if you're not familiar with generics they are a really awesome feature of csharp when you make it class you can define it to use a generic and what you are saying is that you want it to be usable by a multitude of types if you use the list then you're already familiar with generics so here for example you know that making lists you put lists then you put the type inside then you comment something and you create it so just like this we created a list object that can only receive ends however you can also do here is a nother list except this one only works with billions however both of these objects use the very same base class here is the pay's list class which as you can see uses a generic so this is what we're going to use now let's go into our grid class and then here instead of being just grid let's add grid that receives a generic and call it grid project so this means that when I essentially the grid class I won't tell it which type it should use so I could use this same class to instantiate record events or boolean or any custom type I want so now here in our code and let's replace all references of int on our grid array and replace them with our sometime so over here over here and so on over here we have the ad Valley that we made this but this one is specific for the heatmap however in here we want to create a generic grid class so we do not want anything specific for the heatmap so we get rid of this one and also the ad Val okay so only been changed to use a custom grid object and here on the gate Valley we have an error since we are returning a default value now for the integer we return the zero but in this case we don't know what type we're going to have so we can use the C sharp keyword default in order to return the default of the grid object so if our grid is made up of ends this will return 0 if our grid is made up of boolean's this will return false and if it's made up of any custom type it won't return no ok so that's pretty much it now our grid script instead of working just with ends it can work with any type we want ok so let's go into our testing and let's test it out instead of making it just a grid let's make it a grater receives boys so that's how we define it that's how we instantiate it for now let's comment out the heat map visual so here on the grid let's make sure we are enabling our debug and then here everything should work since our debug is using 2 string which is automatically implemented in every single type so instead of seeing a bunch of zeros we should be able to see a bunch of false let's see and yep as you can see our grid is now correctly working with boolean awesome so with this working now let's make a different version of our heat map in order to work with boolean so let's duplicate our script and here on let's call it heat map ball visual ok so now in here instead of using a regular grid let's use a grid that receives a type volume then here on the set read again something of type boolean and down here on the update visual we can't get value which since we have a great work moon Bowens instead of returning in in this one return a boolean so we have the boolean for the grid value and then we need the normalize in order to define the color that we're going to show so if it's true let's return one F so we Green Square not 0f so a Plex were okay so far so good now here in the testing let's add a serialize field for the heatmap boolean visual and then here we can call set grid and passing our newly created grid and then here on the position instead of setting add value we call the grid dot set value on this position and let's put it to true so wherever we click we are changing from false to true and finally here in the afternoon let's duplicate this visual or our new volume video all right so everything should be working let's see okay know where everything is false and everything is in black okay so far so good now if I click yep there you go that one went to phones to true and the grid turned green so I can click anywhere I want and turn a false into true so as you can see our grid is now working with boolean values so we have successfully modified our grid to work with a custom type and make the heatmap work with that red generic awesome now a boolean is a very simple type however using generics we can set this to use any type we want so over here let's define an object that we're going to use in our grid so it's simply College a type heat map grid object this the object that we're going to instantiate on every position in our grid inside let's simply and have a polygon for our value any function to increase it and now we can create a grid that uses this specific grid map object so we can go all the way up here and again it's extremely simple to work with generics we simply change from boolean to our heat map great object and just like that home of our functions in our grid now work with this particular object for now let's get rid of the visual just like that and now if we run the code and there we go we have a known error now the reason is because our object is now a class which is a reference type as opposed to something like your boolean which is a value type so that means that the default value for every position on our grid won't be no so if we run the code with debug enabled you can see the debug goes in here accesses object and constitu string so if that one is known we have our error so we want to make sure we do two things one make sure that the debug works with no and to initialize our print with a created object so first here on the grid it's extremely simple to deal with the no we just do a very simple no check so we can simply use the null check operator just like that on both places where we are accessing the grid array so even if those are no we're going to make sure that we do the right thing and now up here let's write some code to initialize our grid so we're going to cycle through the width and height and now here we have our greater right position and we can set our default object so in here the question becomes if we don't know the type how can we set a correct starting object for a value type we can just use our default keyword but if we have a custom type we want to new it so one way to solve this problem is to receive a function to create the grid object so here in our constructor all let's receive a parameter which will be a func now a func is a delegate very much like the action except a func has a return value so we're going to have a phone that returns a tea grid object and let's call this we create grid object so you receive that in the constructor and in here we simply use it so this function will create the grid object with whatever type we want so if we were doing this with an int we would pass in a function that would return a 0 and if we're creating a grid with a custom object then we can go into our testing code and here we are creating this and then for the func let's pass in a function that simply does a new our heat map grid object okay so that's it so now let's test any of their ego I mean it's hard to read but you can already see that every grid cell has an object so every single grid zone contains a heat map grid object instance right awesome now let's make our heat map grid object contain all the logic necessary for our heat map so down here we have our value field and we have our simple add value function that just adds to it now let's finish our logic so in here we need a min and maxximum so when we add the value we are clamping it between our min and maximum and then for our heat map we also need a normalized time so just like that so now we have this specific object type that works with our generic grid and this specific object holds all the logic that we need in order to make our heat map so that means that our grid script in here is completely generic and it is completely decoupled from any heat map code now we can go here on to our quick function and now in here we simply go into our grid and we call get value pass in the mouse world position this is you can see returns a heat map grid object and here we want our code to be nice and clean so we should really rename this function since we no longer work with a direct Val so let's go in here and rename all of these instead of being valley to return get grid object alright so now our function is now having more appropriate name since we're working with objects rather than thumbs now back in the testing here we are getting our grid object now again since we are using a working side we need to make sure this is not no and if it's not known then we simply call our add value function all right that's pretty much it now one more thing over here on our object we can override to string to return our current value so just like this our automatic debug won't work perfectly and now if we run the code and if there we go now our great show zeroes all over however the grid isn't working just with basic ins but rather with our custom object type which inside holds an int now I have the code in order to click and increase however if I click and there you go apparently nothing changed well the reality is something did change but the debug is only updating when the event is fired so let's see where that event gets fired so here is the grid class and here is the event and if we go down here we can see the event is fired right in here now this works when don't with simple types like ins since we want to modify the value that is stored directly on the grid so using simple family types we would use this function a lot however with custom objects we want to modify the values inside that object so here on the testing the way we are modifying is first we get the object and then we modify the inside of that object so that means that we end up by passing this function so what we really need is a function to trigger the event then when something changes inside our object we're going to trigger that function okay so here it is we have this nice function which triggers our event so now over here on our heat map grid object in here when we modify the event Li we want to trigger that event so that means that we also need a reference to our grid object so this one won't require a constructor okay so we receive the grid in here and now we can go into add value and call our trigger function except in here now you can see that we need an x and a y so let's receive that as well okay so there it is now our grid map object has all the logic related to the heat map and when it adds value it notifies the grid that something changed so that other objects can update their own State so now what we need is to make sure that we call this with the corrected values so let's go all the way up here and here we have our grid constructor and now in here we need to actually know some values like the X to Y in the grid in order to pass it to this object some way to go into our grid into the constructor modify our func in here let's add a couple more parameters so first our grid object will need a reference to this grid so the first parameter is a grid of type grid object then we're going to require an end to pass in our X and another end to pass in our Y so this is going to be our method signature for our cream grade object so then down here when we create we simply pass in those votes so first for the grid that's this one then we pass in the and finally the why so we pass in that then here we can use that and just like that here is our funk method signature and we pass all of it on to our constructor then our constructor simply stores our values and now we have enough information in order to be able to call this function which should update everything else all right so this should do it let's test okay here we are and everything is that you're all right now if I click and there you go it correctly updated the underlying Val so that means that our event was correctly fired so I can click on a lot of places and there you go everything is correctly responding to my inputs all right awesome so now that this is working let's make it work with the heat map visual let's do the same thing again and duplicate this just so we have a bunch of code that we can see how we get there so here I have named that heat map generic visual and I've added a new game object okay now here in the script first we make our grid work with our heat map grid object all right there it is and now down here when we update our visual we get a great object which returns a heat map grid object and then we calculate the grid value normalized based on we go to this and get the value normally so we access the function inside our custom object type and that's pretty much it now this visual is working with our custom grid object that we created in here all right so let's test okay so here we are and everything is black and the debug is disabled and if I click yep there you go it increased by five so it went from black to red and I can keep increasing becomes yellow and finally becomes green so as you can see whenever I click the underlying value changes which then updates our visual representation in order to show the correct color so we made that our grid worked with any object type and then we created a heat map specific type to hold all the heat map logic and made the visual work with it so that means the grid completely decoupled from the heatmap implementation right awesome now let's look at another simple example to see how we can use our grid for just about anything alright so here it is I've made a very nice string grid object now in here you can see that I hold the string 14 letters in a string for the numbers then I have these two functions in order to add a letter or a number to it and as you can see I'm overriding the two string in order to display two letters and then underneath the numbers so now up here on testing over here you can see that I'm in sending the world using our new string grid object and then in here I'm testing for a bunch of key presses testing for some keys and then suddenly calling the two separate functions so let's see this in action okay here we are and first of all the great shows nothing since by default our string is empty now let's say I put the mouse over there and I press the a king and there you go it added a nice character and now on the same place I'm going to press B and there you go it added another string and now in here I'm gonna press two and there you go it added a letter so as you can see I'm adding values to the underlying grid object and I can make the grid object as complex as I want so here I made at home two types of values letters and numbers and every single grid position in here contains its own grid object so I can put a bunch of letters all over and a bunch of numbers all over so you can see how you can use custom grid objects to add as much complexity to the grid as you want now we could for example use this class with a simple innum to define a sprite type and render the sprite on screen by doing so we would essentially have a very nice town map class and that's exactly what we're going to do in the next video so now you know how generics work and how powerful they can be with this class and knowledge of generics you can now build just about anything you want so go for it and make a system that uses a very custom grid object that fits perfectly within your game as always you can download the project fanzini tony's from in tacoma comm subscribe the channel for more ent tutorials post any questions you have in the comments and I'll see you next time you