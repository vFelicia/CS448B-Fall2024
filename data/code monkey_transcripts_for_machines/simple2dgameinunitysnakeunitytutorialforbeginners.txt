hello and welcome I'm your code monkey miniseries we're going to make snake in the unity in this video we're going to setup our scene to be able to start making our game let's begin all right so the goal of this series is to make snake in unity it's a very simple game which makes it perfect for beginners to learn so here is the unity main window we're going to create a new project name it snake and we're going to use the ETD template all right so let's hit create project all right so here's our completely empty scene now the first thing we're going to do is give our scene a more appropriate name than sample scene so let's rename this to game scene this will be the main scene where our game is we won't later have a different scene for the main menu and anything else we need so let's set up our main camera since we selected 2d our camera is already in orthographic mode which is what we need in our display in 2d here we can see the orthographic size of our camera this size represents the amount of units is played vertically so in this case this is half of our vertical size so with the Sun is a 5 we are currently seeing from minus 5 to plus 5 so in order to get a total vertical space of 100 units let's set our size to 50 so just like that you can see that our camera displaying from minus 50 all the way up here to plus 50 ok that's our camera setup now let's create a game handler which won't be our main starting object so we create a new empty game object name this the game hammer and let's locate it on 0 0 now this will be our main container for all of our preset scene objects the better you keep your objects organized the easier it is to find what you're looking for so in here I'm going to drag the camera inside the game Hamill now let's make a game handler script which will be the entry point for most of our game so before we do that let's create a new folder and we're going to name this script making you see sharp script and this will be our game hello ok here is our script and now let's just add a debug log on our start debug back home and say game handler that start so banging here let's write script onto our game handler game object and run the code any of their days game handle dot start on the console so everything is on good we have our entry point correctly working so now let's set up a background object so first let's create another folder this will be for our textures all right so I've copied some textures in here I have the snake and food textures and then I also have a simple white pixel texture this is very helpful when we want to display a common rectangle on a sprite render as you can see it is literally just a onebyone white pixel so let's begin by setting up the import options for this texture which for our white pixel we want the pixels per unit to match one so whenever we apply this texture it will occupy one unit now for our other textures which you said here will depend on the size of the texture that you have drawn in this case I wanted to occupy a bit more than one unit so much but at about 180 when we finally use this texture we will modify this to make sure everything works correctly so our game won't be grid based and the grid won't have a size of one so that's why we are setting up our textures to occupy roughly one unit okay so let's draw something in our scene create a game object this won't be the background let's add the sprite renderer component and again with just the sprite renderer you can see that nothing is visible so that's why we drag our home phone white pixel and just like that we have a white pixel occupying one by one let's make it in gray to be a bit different from the background and stretch it to 50/50 which will be the total size of our map again our game won't be grid based so down here we want to be grid position 0 0 and over here 25 25 so let's shift our background to 25 25 0 and just like that our camera is there on 0 0 and the background works like that ok now let's make a new game object this will be our snake and we're going to add again these fried render component and drag the snake head if we zoom in we can see one unit in our grid and as you can see the exercise is pretty much correct it is supposed to occupy just about the correct size the grid so this is our snake with its texture ok now let's set up some basic sorting layers so you can simply click in here and add a new sorting layer let's make a background layer so the background layer renders before the default so the default is on top of the background and then we have the new layer and this will be over just in case we need it later so down here our snake won't be on the default sorting layer and our background won't be on the background soaring away okay so this is our basic setup we have our camera correctly setup we have a background just to show the play area and we have our snake object now in order to help us develop our game faster we're going to use some very helpful classes from decode monkey Tony's this is just an optional step you don't absolutely need to have them but it will help us in iterating and debugging our game you can go to the website unity code monkey dotcom to download the utilities for free and then you get a unity package file when you open the unity package file you'll see this window these utilities contain a lot of classes and functions that will be immensely helpful while developing the game so in here we simply select everything and import and there it is you can see now we have a code monkey folder on our script that contains everything and as you can see this contains all of the source files so feel free to go through all of these to see how everything works now to make sure everything is set up correctly and let's go into the game handler we want to spawn some popups so let's go all the way up here and write using code monkey and using code monkey utils this is how we use the code monkey namespace and now in here on let's create a function periodic which triggers an action every certain amount of time so we will execute this action and inside let's do a text popper we're going to execute this action on every point three seconds so this might seem confusing but it's extremely simple and here we are similarly going to trigger this action every 300 milliseconds and inside this action we are simply going to do a text pop up on the mouse position saying a text and the number this just so we can verify that everything has been correctly installed so let's test and yep there this as you can see we are getting our popups which means the utilities are correctly working this will be very useful as we go on but again as I said this is only optional you don't absolutely need to have this but it won't be very helpful so we have our complete setup almost done let's add one more very useful thing we're going to create a class that we can use to easily refer assets from code that way we keep all our references in just one class and everywhere else in our code we just access it so let's create a new C sharp script and we're going to call this the game Athens okay so in here we won't have various films for all the asset references that we need so for example we add a film for a strike for the snake head sprite so back into the editor in here let's create a new game object this will be the game assets and we drag our script onto it so as you can see we have a public film for our snake head sprite so let's drag that onto there and now here in our code in order to access this from another class let's add a static instance now in here normally the correct name is example like this we name it instance however in this case and in this case alone we're going to make it just died in order to make our code easier to write again as I said in any other case you should give a proper name to your instance variable this is a very unique exception just so that elsewhere we can simply do game assets that I dot snake head sprite if you make a static instance outside of this you should give it a proper variable name okay so we have a static variable for our instance now we need to make a private void awake and inside our way we set the instance to this so just like that we can access all of these public fields through a static reference for testing let's go into the game Hamlet and here we'll create a new game object we add a sprite renderer component and then we can set the sprite to be grabbed from the game assets class dot instance and then we grab our snake at sprite so just like that you can see how we can have an acid reference through our code so now if we run our game yep there you go we have a new game object and it is correctly using the snakehead sprite now we need just one last thing which is we need to make sure that the game assets are awake runs before anyone else tries to access one of these fields so it can simply go into edit project settings then the script execution order and in here we drag the game assets script and we put it to run before the default time this will make sure that game assets that script the awake runs before any other script run the game again and as you see everything works perfectly fun so there you have it we now have everything set up to begin creating our game we set up the main camera and a main game object there won't be the entry point for the game we also imported the code monkey utilities which will be extremely useful for helping us make our game faster and we also made the game assets class which will also be very useful for grabbing acid references from code in the next video we're going to start building our game by creating our snake and moving it around the map as always you can download the project files in a Tony's from indie code monkey calm if you have any questions post them in the comments around in my best answer subscribe for more videos and I'll see you next time