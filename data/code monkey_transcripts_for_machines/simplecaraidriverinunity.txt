hello and welcome i'm your code monkey let's learn how to make a simple ai driver in unity this is a simple ai that works on top of any car controller in order to make the unit go to a target position this is actually something that i had to make recently i participated in the mixing game jam where i made a very interesting racing rts and as such i need the cars to be able to drive themselves to reach a target position you can go watch that video to see this ai being used as part of a complete game now the most awesome thing about this ai driver is how it can work with any car controller all it needs is to be able to give commands to accelerate brake and turn so as long as your car controller exposes those functions then this can work on top of anything for example i also made the machine learning ai driver a while ago which also uses the same underlying car driver so this is what we're going to build over here is my car and said to follow the mouse position so as i click i can move the target and place it in there and no matter where i place it you can see yep the car does move along with it now the trickiest thing about making an ar driver is how cars turn so usually when making ai for some humanoid units they essentially just turn instantly however cars don't really work like that they need to turn and go forward at the same time so as i move the mouse straight in there yep instead of rotating instantly the car needs to move forward and then rotate at the same time then if i place the mouse just slightly behind the car yep the car reverses onto it however if i put the target quite a bit further then the car is smart enough in order to do a 180 and go towards there here is the car control that i'm using as i said how it's implemented isn't relevant to what we're trying to do here all that matters is that we have this function where i can set it a certain forward amount and turn them out so i can tell you to go forward reverse turn left or turn right i even have a player car driver which works on top of that same car driver and now we're also going to build an ai on top of it so both the player and the ai use the same underlying car driver script learn all about vr and ar with the patreon sponsor xr bootcamp it's a six to eight week bootcamp taught by industry professionals learn how to interact in vr optimize your rendering and learn about dots check them out at xrbootcamp.com and use the coupon cm10 to get 10 off any of the master classes so let's begin by creating a new c script let's name this the car driver ai and over here let's disable the player and set enable the ai driver and just attach the script onto it so here in the inspector you can see they are both pretty much exactly the same the only difference is this script right here so we have our basic script now for starters let's first grab our card driver so just we get components since it's on the same game object and now all we need to do is interact with that function that we saw so let's make a private void update and on update let's define a certain forward amount also a turn amount and then just go into the car driver in order to set the inputs passing this for the mount and this turn amount okay so that's pretty much all we need to do so just for testing let's try setting both of these to one to see what happens and yep there's the car constantly going forward and turning to the right all right so far so good now for testing the first thing we need is some sort of target position so let's keep track of that and i've got this nice game object placed in the world so we're going to use that as our target so here let's make a private vector3 for the target position and let's make a function to set it let's make it public so in the future when we use the script we can give it a target to go to all right so very basic and now just for testing let's use that transform that we saw so just make it a serialized field so we can set it in the editor and then here on every update just call set target position access that transform and grab the position so then here in the editor i'm just going to drag that transform position okay so far so good now let's begin by testing if the target is in front or behind of the car and for that we can use the dot product so first of all let's default these just to zero okay so then we do a dot product we use vector3 dot takes essentially a forward vector and a direction vector so let's count the direction so a vector 3 for the dear to the move position so we grab our target position we subtract our current transform position and then normalize okay we have our direction so for the dot product we use this transform forward and then that direction and this returns a float for our dot product now the way the dot product works is if it's above zero then the target is in front and if it's under zero then it's behind we can add a debug.log to see this in action so just debug log on the dot so we can see and yep down there in the console we can see so the target is right in front of the car so we've got a one so if i move the target in there we've got a one and as i move to be perfectly perpendicular now suddenly starts going towards zero and if it's behind the car then we got a negative and if it's straight behind we've got minus one so this is the dot product very useful so we're going to use this to drive forwards or backwards if it's positive we draw forwards if it's negative we drive backwards and by the way the way that i'm controlling this mouse target is with a very simple script so here it is just got a reference to the transform then i also have some simple logic to either drop it or keep following the mouse and here's just a function to get the mouse position so it just does this it does a camera screen to write point on the mouse position then it does a raycast once hitting the collider that is on the terrain object and if there's a hit then simply have the raycast hit so just a very basic script just so i can move this target around all right so here let's use the dot product so we test if dot product if it is bigger than zero then target is in front so it simply said for the amount to one f and if not then target is behind so we set it just to minus one f and just with this it should already reach the target let's see and yep there it is it has the target and goes straight towards it so as i move target going there yep he goes and then it reverses and so on if i put it behind yep always reverse put it in front and he always tries to go forward all right so far so good now for turning and by the way if you find the video helpful consider subscribing and hitting the like button it really helps out the channel in order to do that we're going to calculate the angle towards the target position so for that we can use the vector 3 and use the function signed angle make sure you use the sine angle and not the angle since we do want a sine value in order to get the sine angle let's compare this transform forward so where the car is pointing compare it with the direction towards the move position and the axis is the up axis so vector 3 dot up so we do and this is our angle towards our direction and again we can add a log to see what this does so angle into there and let's simply come this out so the car doesn't move let's see so there it is and if the target is to the right of the car then we got a positive value and if it's to the left then we got a negative value all right so that's how we're going to use it so in here very simple just if the angle to the ear if it is a positive number then essentially we want to turn right so set the turn amount into one f we want to turn right and if not then set the turn amount into minus one f so that we can turn left and then we just run this okay so just like this we should be able to see the car correctly turn to reach the target so there he goes and as i move the target put it in there yep he's indeed turning around so he's going forward and if he goes and he starts to go backwards yep there you go and it's constantly going towards it alright so all the logic is indeed working so the logic is indeed working but the biggest issue is that it never stops so the car is constantly trying to reach exactly on top of the target so we need to add some type of stopping distance so over here we've got all this logic okay so far so good but before we do let's calculate the direction towards the target so just do a basic distance to target and we do a vector three dot distance calculate from this transform position towards the target position then just define a certain reach target distance so if the distance is bigger than the reach starting distance then that means that the target is too far so if it is then we're going to do all of this logic and if not then we have reached the target all right so let's see if this works so there it is the car following the target and if i just stop the target and see the car it goes reverses and now it's an issue with the braking speed but yep once he gets within there yep he's gonna only still all right everything worked now the issue as we saw is that essentially it overshoots the target so he keeps going and then it just overshoots so for that let's engage the brakes if we are going a bit too far so when we have reached the target let's hit the brakes if we're going a bit too far so go into the car driver in order to get the speed and if it's above a certain amount so if it's going a bit too fast then instead of just not accelerating let's actually break so for the amount set it to minus one in order to actually break and if not then yep we just set it to zero okay so there he is and as soon as i stop if there you go you see that he did hit the brakes a bit more alright so that's a bit better now just one thing here which is if we put the target behind it yep he reverses towards the target which is good but if we put the target way behind it yep he still does the same thing now if the target is way too far behind then we really want the car to be able to do a 180 in order to reach a target as opposed to just constantly reversing so let's do that so first of all we see when we are reversing so here it is if the dot product is under zero so if it is let's check if it's too far to reverse so we just check if the current distance is bigger than a certain amount if so then it's too far to reverse so we go forwards instead of backwards okay so there he is he's right on top of the target now if i move just a little bit yep he just reverses onto it okay and if i put way too much if there you go he goes forward there's a 180 and then goes in there all right so the logic is indeed working yep there you go awesome now another thing is with regards to reaching the target position so if the current target distance is big enough so like this it's prebait if so then it works pretty fine so i can put it quite a bit far and yep he overshoots a bit but then reverse onto it however if i put this as a much smaller value now the issue is that when i put it if the car has enough speed he goes and pretty much always instantly overshoots it now the reason for that is because he's really only hitting the brakes if he is already within the stopping distance so let's add some more logic in order to make it hit the brakes before it actually reaches the target so here if the target is in front so here we compare our current distance to the target and if it is within a certain stopping distance which is bigger than the reach target distance if so then we also test the spin so if the car is going a bit too fast then we head on the brakes so this should stop the car from constantly overshooting the target let's test so here it is let's pick up some speed so just constantly go and now stop and yep there you go you saw how he hit the brakes a bit and yep now it's working much better so even if the car is going really fast it still hits the brakes in order to try to reach there on time okay so the car driver is pretty much done now let's just test adding some more ai drivers as well as the player so just duplicate a bunch more cars and just enable the player and if there they go they immediately try to get there so i can control my player i can drive around yep now i can say okay all of you go down there and as i go in as i turn and yep they all reach the target position so wherever i tell them to go yep they all go straight towards there alright so here you can see a really nice car driver ai go watch the racing rts video to see where i put this system to use in a complete game this is a very simple script and it works great for getting some ai cars onto a target position as always you can download the project files and utilities from unitycodemonkey.com if you found this video helpful consider liking and subscribing this video is made possible thanks to these awesome supporters go to patreon.com unitycodemonkey to get some perks and help keep the videos free for everyone post any questions i have in comments and i'll see you next time