in this video I'm going to go over what I would do if I was starring game development right now as you may know I've been making games for over 10 years now and it has never been easier to get started in game development these seven steps will take you from nothing to making a complete published game let's begin hello and welcome I'm your code monkey and this channel is all about helping you will learn how to make your own games with enough tutorials made by a professional indie game developer so if you find the video helpful consider subscribing okay so here are the seven steps that I would do if I was sharing my game development journey right now if you follow this list and by the end you will have become a game developer how much time you can put in is also up to you if you are super busy with a fulltime job and can only dedicate an hour a day to game development then that's perfectly fine this is your journey it's not a race so do as much as you can the main thing is to make sure that you do it consistently do at least one thing towards your goal every single day this video is made possible thanks to these awesome supporters go to patreon.com/scishow decode McKee to get some perks and help keep the videos free for everyone here are these seven steps step number one start off small and spend one to two months making small weekly games these should be very similar protests essentially focused on a single mechanic don't spend too much time thinking up a cool unique idea be gone with this phase is to get acquainted with the engine and become more familiar with the tools at your disposal your main focus should be volume it's better to make 8 simple prototypes then just to really unique ones right now you're trying to gain some experience and not build a complete game also make sure you it's more various genres so don't do 8 platformers maybe do one fight former one topdown shooter when racing game one you I have a game and so on one way you can do is recreate very simple games or mechanics for example making pong is extremely simple and it will teach you about input and physics whatever you do focus on continuous learning also I would encourage you to stick with 2d since it's likely easier to learn unless you have a 3d modeling and texturing background you can draw a 2d sprite of whatever object you need much faster than you can do a 3d model and sticking to two dimensions also helps keep complexity down step number two and this one is actually alongside the first step which is watch basic and intermediate tutorial videos on unity and csharp do make sure you watch both unity specific videos as well as standalone csharp videos there's tons of excellent learning content out there related to C sharp 11 so in order to learn the language don't want me to yourself to unity videos watch basic videos that are right at your skill level but also make sure you check out some more advanced topics for example I have some more complex videos on path lining or making a quadrant system now if you start on this journey completely from scratch then it's perfectly normal if you can't follow 100% of the videos but even if you don't completely understand it you make sure you watch more intermediate complex videos doing so will expose you to more advanced concepts which don't help you learn faster step number three now it's time to make a complete simple game now when I say complete what I mean is something that you can play from start to finish and you could technically publish to the App Store or scene so that means it has to have a main menu game start gaem loop and end it should be as bug free as possible and it must have sound effects and some background music now this one should take you about 4 weeks here in this step you actually have two sub options you can recreate a specific game or build something original personally I would suggest you go with recreating a game and then add your own tiny twist doing so means you don't spend too much time on design since the design is already set that means you have more time for what really matters which is getting more experience working with the engine and building a complete game there are lots of designs that you can make in this timeframe for example you can make snake flappy bird space invaders asteroids pacman and so on like I said that would be my suggested path but I understand that it might sound unappealing to make a game that already exists you probably started game development because you want to make your own games so if you really want to do something unique then go for it however do be careful with the scale of your design one extremely important thing you're trying to learn through this phase is how to scope by this time you won't have completed a bunch of prototypes so use that knowledge to figure out what you can do inside of this time frame it should be more complex than a simple prototype like pong but naturally it can be as complex as something like Skyrim a good run with thumb is to make your design for a 1month game and then cut it in half believe me everyone falls for the trap of over scoping especially for beginners step number four and again this one is meant to go along with the previous step pick up a copy of clean code and research clean code principle this step alone will improve your skills as a programmer tenfold writing clean code helps your code be more organized more performant and easier to adapt and reuse if you've been following this channel for a while then you've certainly heard me talk about it quite a lot I mentioned it a lot because it is really that important if you write sloppy code it may work at first but as your projects you had more and more complex it will become more and more of a mess for example my latest game Baron round tycoon is in total ninety thousand lines of code law there's no way I could have built that game without constantly thinking how to structure everything so pick up the book read it apply it watch a bunch of videos on YouTube and always keep clean code concepts in the back of your mind step number five and this is where things are really interesting make a three month game and publish it to steam or the App Store this should be a proper albeit a tiny game by now you should be better at analyzing the scope of a certain game idea but again come up with your scope and cut it in half three months is enough time to make something small and really nice but not enough to do something huge focus upon making a title design core experience instead of a dozen systems that don't really work all together your design should be unique but not too unique it should stand out whilst also being familiar also take this time to analyze your own strengths and weaknesses so if your strength is art then maybe do something like a gorgeous pissant platformer or a narrative focused game on the other hand if your strength is programming then go for a more systems based game like a mini Tycoon or a strategy game a large part of this step is submitting your game to the Steam or App Store this should be your introduction to getting your game available for players so go through the whole process of adding it and learning how the platform works once it's out to interact with players and get feedback so you can always keep improving this is also going to be your first exposure to marketing read up on the basics and apply them as much as you can within the available time frame also in the end you should not worry about results this project is still firmly in the unlearning category it is meant to give you knowledge and experience and will likely not achieve financial success I've made some videos on what to do before and after watching your game so this is a great time to check those out and apply what you can step number six read code complete again from of this step alongside the previous one or maybe finish that project and then dedicate one month internally to studying this book and applying it to various prototypes once again a clean code is very important and more complex your project the more important it becomes the previous book clean code is a bit more condensed than this one so that's why I suggested that one first this one is the real deal it's 900 pages long and once you read it you will become a better programmer than most guaranteed make sure you read study and apply everything that you learn this step is really important and a must if you want to succeed in the next step as a game developer step number seven now you're ready for the big one make and publish a proper complete six month game by following all the previous steps you've made several small prototypes which help you get comfortable with the engine and the language you've made two complete games so you know all the various elements that make up a complete game like a main menu options music sound effects and making it bug free you've uploaded the game to the Steam or the App Store so you're familiar with that process and what those players expect from a complete game and you've studied it up on clean code principles which makes you ready to tackle a more complex more challenging project so the goal is a sixmonth game it should be larger than the previous threemonth game but again be very careful with scope size some people start off with a six month project and then up taking years so be very wary to make sure that doesn't happen and again focus on making a tight core experience instead of making a 40hour game with tons of content focus on making a really welldesigned really well polished fivehour experience spend some time coming up with a proper design that has potential make some tiny prototypes if you have to and experiment with various ideas remember that players are very demanding so come up with something that is simultaneously unique and familiar you have six months so it's fine if you take two to three weeks to come up with your base design your design should be written somewhere either on physical paper or a file on your computer personally I prefer to design on paper it should contain a highlevel view of your game and the main pillars with more detail for the main mechanics however it should not be an extremely detailed 100 page document it should be simple enough to provide you with a clear direction but a lot of space for its rating as you build it once you have your idea set and your design stable then gets hard and pay close attention to what you're making focus on writing clean code or you will suffer at later stages of development this is not a prototype so don't write tons of hacks just to get your game working with your design you should know roughly what you're going to need to implement in the months ahead so always keep that in mind for example if you know your design involves multiple levels then make sure that when you're writing some sort of level manager class you write it thinking about expanding it to multiple levels rather than hard coding a single test level as your game progresses make sure you keep testing one very important concept you should have learned by researching clean code is the concept of technical debt as you play your game and find bugs depending on the severity make sure you deal with them rather than letting them go forward and telling yourself you'll fix it later keep everything as stable as possible as you add more mechanics and try to make sure that your game is always playable one of the main goals of this step is to actually publish your game in the end it should be available for purchase on Steam so you should work on prelaunch marketing and try your best to find success make your coming soon page as soon as possible and try to build up your wish list long before release as soon as you have some screenshots that look good enough get them out for people to see study some more on general marketing to figure out how to best write your store page so after 5 months your game should be pretty much complete it should be a solid experience that goes from start to finish as you approach the end make sure you leave some time to focus solely on polishing polish is what separates good games from great games so instead of adding more mechanics make sure you polish what you already have watch some videos on game juice to get an idea of the tiny details that can really enhance your game by now you should hopefully have several thousand wish lists gathered over months again go check out the videos I made on what to do before and after release to ensure your game has the best chances for success and as a release date comes then congratulations your game is now life you have successfully built a game and publish it for the world to pull it that is more than most people that new get started on this journey so be proud of yourself but at the same time this is no time to celebrate once the game is out it's critical to make sure everything is working correctly you don't want to go celebrate and then wake up 12 hours later with a dozen negative reviews due to technical issues watch the steam forums and reviews as closely as possible reply and be active interacting with the community answering questions and responding to bug reports also make sure you do some more marketing so send keys to curators websites and youtubers if you gathered a newsletter of people who fun will you make sure you notify them your biggest fans who will help you stem out from the other hundreds of games so by now you have your longest most complex and most compelling game out there for the world to play awesome once again don't obsess over the results hopefully you will find some success either in terms of copy sold or a good player feedback however this is your very first proper game and not your ultimate masterpiece so do keep that in mind you're only now just starting your very long and fruitful game development journey so analyze the game read the reviews and learn what went right and what went wrong so your next one is even better if you followed all the steps then congratulations after following them it won't be around a year from now and you will indeed have become a game developer however don't stop there game development and programming are a constant neverending journeys there's always more games to make more designs to create more code to write and more things to learn so keep at it keep learning and keep creating I have a playlist with more general advice based on my experience as a solo indie game developer so check those videos out to learn more about this very interesting career I wish you all the best in your game development journey this video is made possible thanks to these awesome supporters go to patreon.com/scishow to code monkey to get some perks and help keep the videos free for everyone thank you for watching and I hope from this video helpful hit the like button if you liked the video subscribe for more content and I'll see you next time you