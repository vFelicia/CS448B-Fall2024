hello and welcome I'm your codm so here's a super quick tutorial on how to make an error detector in your game this way every time your game detects an error you can show it to the players so they can know that something went wrong and hopefully they can send you a message so you can fix it my recent game d Gardians is possibly the most complex game that I've ever made all the machines all the dinkies and especially all the offw and logic it's all really complex and because of that complexity there have proba only been quite a few strange bugs that I've really never encounter myself but players are finding so I implement this window to help me debug when something goes wrong this pops up and the player knows that something bad happened so let's see how to build this although again keep in mind this is just an error detector meaning this just detects the errors it only helps to tell your players that something went wrong this does not fix the errors it's up to you as developer to see the stack Trace see the error and figure out how to solve it depending on what the error actually is by the way the game is actually on sale right now so check it out on scam okay so here is my demo I've got a character that I can control and walk around I've got a bunch of characters that I can interact and I can talk to them all really nice and over there I've got a button I can trag and change the col so basally this is the same demo this simple interaction system this is what I covered in detail in a previous video tutorial so I've got all these objects and over there I've got a door I can approach and interact with it and once I do any up there we have we have a nice error the usual n reference exception now over here in the editor this error is really obvious we can really just look at the console and see yep we've got an error the game paused and everything but let's say that this error was left in the build so here I am running the game in a proper build and I go and I do the same thing so I approach the door and I click to interact with it and nope nothing happened so I did the same thing and the same error also happened so as we can see the door did not open but now as a player I have no idea that something went wrong all I know is I pressed the button and literally nothing happened this can lead to a lot of player confusion at least if the player sees that an error happened they can assume something went unintentionally wrong so let's build our nice aor detector window over here in the hierarchy I have my canvas and set up exactly the same way that I always do so overlay scale the screen size meure the height and so on then inside let's create the new empty game object call it the error detector UI let's see over here let's anchor it on the lower right corner something like that so let's Anchor It move it slightly in there then inside let's add the new UI image this will be our background let's tint it something like black let's make this one stretch to occupy the entire size of the parent and now let's actually modify the size of the parent just to get a nice window sort of like this then let's also make a UI let's say text image and let's say this is the error detected let's put the width and height of zero these are just visuals you don't have to follow the exact setup that I'm doing here I'm just setting up the same visuals that I always use so disable wrapping and so on so air detected let me anchor it on the top left corner and make it a bit smaller so an error was detected and then down here let's say the actual error so let's put it quite a bit smaller let's say 18 error this one is going to say some kind of error let's Anor it on the left up down and this time we don't want it to actually overflow so let's enable wrapping and for overflow let's put it on ellipses and now we need to make sure to give it it some kind of size so let's give it some kind of size and position it sort of like this so in there just like this basally add the ellipses because some errors are going to be super long and we really don't want it to overflow down here and then just for fun just make it even more clear that this is an error let's duplicate the background this one let's put it in red and put it sort of like this finally one more thing on the background just for fun let's add an outline let's put it in red and let's say five five just like this okay so we have our nice basic AER detector window it is very visible now let's make a script to actually run this so let's make a script with the exact same name so over here in my project files on the eror detector I'm going to create a brand new C script for the aor detector UI let's wait for the code to compile now let's attach to the game object and open okay so now here honestly we really just need to do one extremely simple thing we just need to hook onto an event so for that let's first do a regular private void start and on start we can access application and then there's a nice event called log message received this event gets fired whenever any message happens so let's add a nice listener to this event when this event fires we're going to get a message with our condition the stack trace and then the type of log by the way if you don't know about events at all check out my detailed video on them events are super useful definitely make sure to learn about them and if you want to see them in action as part of a complete Project Check out my free complaint course okay so inside this event we have all kinds of parameters with all of our air data but the main thing we want is over here on the type basically this gets comeb back whenever there's any message including just regular info messages in this case in order to detect an error we want to just check if it's an error or an exception so over here if the type if it equals either we have an error or an exception that's when we want to show so either error or type equals log type. exception if any of these and this is when we want to show this window so for that let's make some basic show and height functions so a private void show and on show we just go into this game object set it to active as true so we're going to show it and on hide we do the same thing and we set this one just into false okay we have these two and on start let's start off with the window hidden then when we have log if the log is an error or an exception if so then let's show our message also one very important thing is since this one is a static event if so that means that this won't really get cleared whenever the scene changes and this UI element is destroyed so if we leave it like this it is going to cause some errors if we reload this scene because it's going to basically destroy this airor detector UI and it's going to spawn another one so then the event will be fired on two of them so anyways that is a big problem so let's make sure to clean up our events and for that since we are subscribing on start we can go private void on Destroy we can listen this one and do exact same thing so on Destroy we unsubscribe by the way here I should say if you want you can also just subscribe on the on enable and unsubscribe on the undisable if you want that is also perfectly valid personally I just like to subscribe on start and if needed unsubscribe on the story okay so here we have this event but obviously this is just showing it is not actually actually setting the text so let's do that let's go up here let's make a serialized field private of type text mesh Pro Yugi this exists inside using the TM Pro let's call it the error text mesh just like this by the way if you don't know why I made this say serialized film private instead of making it public if so then check out my video on that topic it is extremely important so here we have a reference to the text MH Pro and then when we call show let us actually update the text so just go into this one. text and we can just say error let's print out the condition which is the error and then let's print out new line and then the stack Trace okay so just like this the window should automatically show up whenever we have an error and it should update the text to show that error just over here in the editor let's make sure to drag our text mesh so that is this one by the way let's give this a proper name so error text mesh and up here this the title text mesh okay just giving it proper names to make it clear and the background top just to be nice okay so let's drag the a text mesh and let's try okay so here I am playing the game Let's approach the door and let's press the button and there you go we do have our error all right awesome so this is really the absolute Basics it is this simple now let's add a couple more extra helpful features first let's add a simple close button to this window and the air is actually a little bit too big so let's bring this down by quite a bit instead of 18 let's put it on 14 okay now let's make that button so inside the air detector let's just do a simple UI button call this the close button then inside for the text let's put just an X then let's put it something like this and put the text over here in white some like this make it nice and square and position it over there on the top right side so let's anchor it to the top right and put it on some like 30X 30 okay that's a nice tiny close button that's good over here in the editor let's just add another serialized FM this type of type button which exists inside using unityengine.ui this de close button and then over here let's do it on awake because we are initializing this object if you don't know why sometimes use awake and sometimes you start again go check out my free complete course I focus really hard on that course teaching the correct principles including when to use start and when to use awake so in this case in order to initialize the subject let's do it on awake so the close button let's go into the on click let's add a listener event also if you don't know what is this syntax this is a Lambda which is a type of a delegate which is also something that I've covered in detail in a previous video so one click we really just want to hide that's it super simple here in the editor let's just drag the close button and also just for fun let's make this window draggable that is also something that I covered in detail in a previous video tutorial here I've got the script that I made in that video it basically just listens to the on drag event and actually moves this object so over here I really just need to go into the background top that is going to be the clickable area and I'm going to add that component got my drag window and then I just need to assign the transform so that is going to be the parent and the canvas for this one and for one more tiny thing let's also add a copy to clipboard button this is useful so your players don't have to send you screenshots or manually write out the error so let's just duplicate the close button let's put it over here onto this side make it a little bit bigger and inside let's call this the copy to clipboard button and for text copy clipboard make it quite a bit tinier here in the script let's have that button so the copy to clipboard button then in the editor let's go ahead drag that reference and now here let's do the same thing let's add a listener so on click let's add a listener to this click and when we click on it we want to copy the clipboard and for that we can use the guy utility and call the system copy buffer and let's set it to some kind of error text so let's grab the air text mesh and just grab the text exal on there although this can sometimes fail for some kind of strange ways so we should probably put this inside a try catch so catch an exception if we do have an exception then let's log that except ception just do a new exception let's say fail to copy to clipboard and then let's print out the exception okay we're almost ready to test let's just add one more tiny nice element something that I also covered in a previous tutorial video was a nice tool tip so here I've got the same tool tip that I created in that video in order to show it that class is super easy to use so I'm just going to go into the totip canvas in order to show the totip and let's say copy error to clipboard all right great so let's finally test all of this let's test our close button test the copy to clipboard test the window drag and test the tool tip all right so here we are let's trigger the error once again so let's go up here open and close and there we go we have an error detected and now since this case it's first person actually moving the camera as I move the mouse naturally I would need to add some kind of code in order to stop that but if I click and drag yep the drag window that does work correctly and if I click on the copy to clipboard it says copy the error to clipboard so the til tipe also works here I've got an empty notepad and I paste and there you go it did copy the exact code okay great so far so good the only final thing we need to test is the close button and for that there's actually one more feature that we should probably add if we look over here in the console we can see the error is constantly being fired constantly nonstop it just constantly happening so since that is the case if right now if I hide this window as soon as I hide it instantly hides and instantly shows itself that's because the error is constantly happening so maybe you want this just in case you want the player to know that it's also constantly happening but again this can also be confusing for the player they click the X and nothing happens they might not understand that it's actually because it's hiding and showing immediately so for this it's probably better just to show the errow once just once per each unique error so to add that logic it's going to be pretty simple we really just need to keep track of all the errors that we've already seen so for that let's make a simple list so a private list of type string and let's call the ignore error string list so we have a list of all the strings of all the errors that we want to ignore let's begin by initializing our empty list okay great so we have this and then down here when we actually show our error before we do show it let's check if this error is already on the list so if we go through the list and we check does it contain does it contain the error text so let's actually update the error text before so that just updates the text mesh that doesn't actually show the error window so let's sayest if it does contain the error text if so then error already shown if so then let's return we do not want to show it if not then we just need to go into our error list and we need to call add and let's pass in the error text mesh. text now one quick note if for some reason you don't like the fact that this is storing in a list of string containing the entire error text if so if you wanted to compact this you could just compute a hash and sort that instead but really just soring the entire a text ring that works perfectly fine so this shouldn't really be working and before we test let's actually test out with a bunch more errors so let's do a simple input test just to generate some errors so over here on the pl interact script this script is the one that handles the basic interractions so over here let's add some more tests so get key down let's save our T key and on this one let's do a float error and let's just divide one by zero this is going to throw an error and let's do another one let's say on the key y on this one let's call instantiate and pass in null both these should throw an error okay so let's try this out all right here we are and if we go ahead and try interacting with the door and there it is error detected okay there's a nice error now if I go ahead and I click on the X and if there you go the error does disappear so it no longer shows even though if we look in the console we can see yep the error is definitely still happening so it is still triggering but since the error is being ignored it is no longer popping up that window okay great okay so now if I press the T key and if there we go we've we got a separate different error this one did show up because it is the different error and now I close this one and I press T again and nope it does not show because again we are now ignoring that error and finally I press on Y and again another different error and it does show up all right awesome so if you want to see this window in action then check out my game on seam although honestly hopefully you won't see it because hopefully there shouldn't be any errors but if there are then at least the player will know that something went wrong now one extremely useful tool related to this one is cloud Diagnostics this is a super useful Unity tool where you really just need to press one button to enable and suddenly you will automatically be receiving notifications whenever a player encounters an error this is insanely useful for me as a developer to know when something went wrong so I can see the stack Trace now I can look at this and figure out how to solve this bug if you're looking for a more detailed tutorial on this toel I just had a lecture on it in my ultimate unity overview course in the latest free update there's also a lecture On a related tool for enabling user reports in your game for example you could combine that one with this error detector to send an automated report whenever an error is detected all right so that's the error Det detector it's a pretty simple thing that you should definitely add to your games especially on complex logic games kind of like my own so that way if something goes wrong at least your players will know that something went wrong then hopefully your players will report the error to you so you can fix it so that hopefully your game gets to a point where no one will ever see this window ever again by the way the game is actually on sale right now so check it out on Steam all right hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and I'll see you next time