there's a box around his current position then you make sure that the player is within the fov so very quickly right here the player receives a ton of information this video is sponsored by core core is the new free game creation platform that lets you build publish and play games it's a great platform for game jams especially if you want to very quickly set up a 3d multiplayer game you can get started making games right away using thousands of free high quality music sound and art assets with no coding required but if you want to take it further core still lets you create your own game logic in lua you can build games from scratch or remix and reimagine content shared by other creators and when you're ready to publish your game will go live instantly on the core platform with a click of a button multiplayer games are very easy to build since all the complicated networking parts are handled automatically there's already lots of user created games on the platform explore tons of crazy new concepts from the minds of the player creator community it is completely free so click the link in the description to learn more and get started bringing your ideas to life using the link also helps support the channel hello and welcome i'm your code monkey a professional indie game developer and here i will react and analyze to a gameplay drone i will talk about how things work behind the scenes and how you could build them in your own games in this case we're looking at the marvel spiderman gameplay trailer from 2017. alright so let's hit play all units all units 10 10 s and 36 and park repeat all units be advised shots fired at fisk towers you got this i got this okay so after a short cutscene we get into the gameplay and immediately the ui shows up so it's a pretty standard ui one thing about it is it seems to be built with a slight 3d effect so over here you can see that the bar is not perfectly horizontal but rather it is pointing towards the center of the screen and all the elements so there are several ways you can achieve this effect one possible approach would be a world canvas on each of the four corners and you just slightly rotate them that way the actual underlying elements have no rotation which makes them easier to work with but it still gives off this nice effect then all of the elements are prestandard so up here we have a health bar then in here we have a combo counter down here the most active action and also a simple minimap then right here we see spiderman take down enemy so over here as he approaches we see the active action indicator down here and it's going to change as the player gets closer to the enemy so first it's a web strike takedown and as soon as he gets close there you go it swaps into a normal takedown so the logic for all this is probably just a simple boxcast so as the player is walking around there's a box around his current position it is constantly looking for possible interactable objects so in this case it finds this enemy right here within range then it just tests the distance towards the player and if it's close enough then swaps out and shows the different action then for the action itself yep it's just a really nice animation and yep the enemy is down now another element that we can see here is the perch target so we see it right here where the camera is looking at and as the camera moves we see the target update so as the player controls the camera it is constantly looking for valley perch targets now the way it works is probably once again doing some sort of boxcast so right here is the center of the screen and it's doing a box test from the camera starting position around this area and then all of these objects are tagged as being perchable so this area right here this one right here this one down here and so on then locates all the ones that are within the boxcast then it calculates the closest point to the center of the screen and simply picks the closest and shows that one then for showing it's really just a basic ui element then for the movement itself it's actually pretty simple so it plays the web zip animation and moves the player towards a target position now a long time ago as i was playing this game i actually recreated a couple of systems in some tutorial videos one of those was the web zip so go watch that if you want to see a very simplified version of how this works even in 2d that system is still a lot of fun alright so here we have another enemy in a different scenario so previously spiderman was behind the other enemy and right now he's on top and as you can see the enemy does not spot him so the enemy has a very standard detection cone detection is just based on an angle but it also has a limit on the y axis so for handling detection it's really just a simple case of doing some basic math essentially you know the enemy position and you also know the player position so for example you can simply flatten the y put it equal 0 and then you just test the angle using the x and z then you make sure that the player is within the fov so probably something like minus 45 to plus 45 degrees then you test the distance to make sure that the player isn't too far and finally you test either the y angle or just the difference between the y's then if the player is let's say five units above or below the enemy then he's outside of the view cone so in this case the player is not spotted and if there you go you have another way to take them so for the action here is pretty much the same that we saw previously so the game does a boxcast right underneath the player and if there is an enemy within that area then we enable the perch take down option so once again very simple and combined with some excellent animation now here this part is really interesting so that enemy over there realized that his buddy is gone now there are many many ways that you can do this as always you need to remember that games are all about smoke and mirrors all you're trying to do as a game developer is just simulate a particular scenario what i mean by that is that the game knows exactly what happened the game knows that the player is right here and he took down the other enemy and now the game has to pretend that this enemy doesn't know what happened so the reason why i mentioned that all games are smoking mirrors is because you want to fake reality rather than make a pure simulation now one approach for this would be indeed to make a perfect simulation so this enemy would keep track of the last position that he saw his buddies and he would know their patrol would go back and forth and he would simply go into an alert set as if he looked towards this area and one of them had vanished but doing all of that would be needlessly computationally expensive so the better approach is simply to fake it so these two enemies are problem linked in some way for example in unity maybe you would have a component with a reference to the other one then when the player takes down one of them it drops an invisible marker and then this enemy over here has his usual detection cone and if this invisible marker is visible by the detection cone then he goes into the alert state looking for his friend so this approach is computationally very cheap and really ends up with the same result so as you were going about making your games always remember that your goal is to give the player a good experience and not to have a perfect simulation of reality then once he is in the alert state the first thing he does is move towards the suspicious position i know here we see one of the gadgets it's really simple and looks great so the first thing the player does is he engages aim mode so when it does you can see that the whole game slows down so right there nice and slow down you can easily do this by modifying time.timescale which affects anything that uses time.deltatime like for example all the animations and movement it also enables a very interesting shader effect so right around the edges outside of this circle everything you can see is nice and blurred and it is also in black and white i covered how to make postprocessing effects in a previous video and this is exactly the type of thing that you can easily build by using that combined with shadowgraph and after aiming yep the player throws a gadget now here again you have two possible methods for throwing something so you can do a perfect simulation or once again you can keep things simple and just fake it so here it seems like he actually throws an object however what you can do is really just spawn a very basic particle effect so you spawn something that goes constantly forward and falls along the trajectory that the gadget would go to and after the particle effect reaches the target position then it destroys itself the particle effect and it spawns the actual object so doing it this way would avoid potential bugs like for example the gadget being activated in midair or some other unintended behavior once again another simple way of achieving the same result then for the gadget the logic itself is pretty simple so first of all as he gets displaced the rotation is actually a normal of whatever surface it lands on so it's pointing in this direction and then all it does is once again just a very simple box cast and when an enemy is found within its range then it activates the gadget and in this case takes him down now here we see an interaction with a special object so in this case it seems to be just a simple scripted animation so no matter where spiderman is it will probably always do this exact animation you can guess that based on the fact that it pulled it straight down rather than towards the player so just a basic scripted animation then for hitting the enemies it's just a simple physics collision that works as an instant take down and spiderman also plays a nice audio clip if you don't want a helmet so it's probably linked to this specific object and plays when it's used and hit something so just a simple audio clip and it helps the game feel more responsive by unliterally responding to your action then we also see the enemy on the side there reacting to the noise dealing with sound is actually pretty simple all you do is you have the noise origin and then you just do a very basic sphere cast around that position then perhaps you also do a basic raycast to make sure there are no obstructions between the sound origin and the sound listener so if the enemy is within the range and not being occluded then he reacts to the noise so one clean way of doing this is to make an interface for anything that can listen so for example the enemy here implements a i listen interface now i covered interface in a previous video if you want to learn more so this is one way that you can keep your code decoupled from actual things so using this approach you can make anything listen to anything so for example you can make objects react to noise from other objects and now here we have this really super cool shot so there it is it looks really awesome it's an excellent pose with some particles there's also some motion blur and some slow motion so it perfectly matches the comic book source material now for the camera rotation you can do this very easily when working with cinemachine so you can create two virtual cameras then the first one is the normal one which is always behind the player and then the second one activates as it does this move and it has just a simple animation going around the player then when the animation ends it goes back to the original one now using cinemachine this is extremely easy by just playing around with priorities so you have the main camera following the player then you have the second one for this particular animation and as soon as the animation is triggered you enable the priority for this camera then this camera does its position its animation and then it lowers its priority and once again the scene machine brain is smart enough to interpolate all the values and goes back to the original camera so here it is the whole thing and yep it looks really awesome you got what you came for you don't need to kill us too this territory is ours now not today all right so we're done with the stump portion and right away we start off with a cutscene that goes into a quicktime event now these are actually very easy to make we really have is just a basic flow timer and it's constantly counting down and when it's within a certain amount it listens to player input and if so then it's successful so visually you can build all this very easily all you have is running just two circles in the button prompt image you can see the outer circle scaling down along with the timer and when the player gets it right yep plays a really nice animation and it's successful and visually once again it enables the postprocessing effects that we saw previously so there's pretty much a circle right here where everything is normal and then outside everything is slightly in black and white and blurred now the difficulty with quicktime events is designing what happens if the player fails so just how much should you punish the player for failing the event now in this case the game isn't meant to be extremely hard so the punishment is likely that he just misses the web so when you start off this battle you start off with two extra enemies again that's all up to designer to define how hard or easy it should be and now right in here we get into combat and right away the first thing that we notice is a nice shader effect on the enemies so over here on this enemy yep there you go a nice gradient going upwards so this is indicating that this enemy is about to attack this is a very easy shader to make you just have a gradient it gets applied on top of the enemy then also right away spiderman fires a web straight at his face so the web targeting system is constantly looking for valid targets it's just a very basic simple distance check make sure they're within range and also obviously make sure they are within the player's field of view then it likely does some simple math to figure out which one should be prioritized so in this case an enemy that has an imminent attack probably gets a much much higher priority even if another one is supposedly somewhat closer so does some basic math choose this one and you fires the web straight onto his face and then for the enemy as he gets the web he goes into the basic stun state which takes him out of the fight for a few seconds now here we see the fight mechanics so once again we see this one on the left here if there you go imminent attack and the player right away dodges that attack so it's just an example of a basic timed animation so the animation has a timer and if the player hits the dodge button within that timer then he successfully dodges and doesn't take damage and if he waits too long then he gets hit and takes normal damage so if the player dodges yep exactly right on time then he's rewarded with avoiding damage and getting a nice slow motion effect then notice how the stun for this one down here has been temporary so right now the web is gone and he's back into his normal ai state then for attacking the various enemies it's also something that i covered in my simplified spiderman 2d video so first it locates all the enemies within a valid range then it combines it with the player movement vector so collates a vector from where the player is pointing the thumb stick and then it uses that to decide which enemy should be attacked so if the player is pointing towards this enemy even if this one was supposedly closer it would pick this one since the player input is what values most and now here we see a nice finisher against this enemy so these enemies don't have any visible health bars right above their heads but they still have a health system so the attacks are still causing damage and when their health is under a certain amount then it enables the finishing move so the player can take him down now here we see the spidey sense in action so as soon as he finishes this animation yep there it is we see there's an enemy off screen so there's an enemy right here about to attack and when the attack is imminent we see right away some particle effects showcasing the spidey sense effect on his head so just a basic particle system and there's also this element here it is pointing towards the enemy's direction and it's showing the button prompt to dodge the attack so this is similar to what i covered in the quest pointer video just a basic element pointing in a certain direction and it does say which button the player should press in order to dodge this attack so very quickly right here the player receives a ton of information so the spidey sense tells the player that he's about to take some damage this element is pointing towards where that damage is going to come from and he also receives the button problem telling him what to do if he wants to dodge that attack so tons of information and very easily readable now over here we have another battle we're going to see some really interesting interaction with level elements yup just like that so the game is always looking for possible interactable objects and then just like the perch system it identifies which one it should be activated then for this particular environment object it has a simple timer to activate it so this does two things first it enables the game designers to add a risk reward element onto each different interactable object so for something that causes tons of damage it would require a long time and this also helps prevent the player from accidentally using it since they need to hold the button down for some time then like we saw previously yep it plays a scripted animation and damages all enemies within that radius yep like that and now here we are going to have a mini boss fight so right away we see an increase in difficulty so right away the player starts trying to do a zip attack and nope doesn't work then he throws a web and nope doesn't work either so that's one way you can add difficulty instead of just increasing the health amount by a ton you just make them invulnerable to very specific types of attacks then down here we see a different type of interaction with the environment so it does pretty much the same thing that we saw previously in order to identify the interactable objects however in the previous ones it played just a scripted animation whereas on this one it is simultaneously looking for the interactable object as well as the most valid active enemy so as the player uses it really just combines both of those pieces of data and once again the enemy doesn't have any visible health bar but the enemy does have a health system so all this is still causing damage then over here as he was hidden there yep he goes into a stun state for a few seconds and while he's stunned the player can easily hit him and cause a bunch of damage that's actually really cool and now here we see a different mechanic so the enemy has a basic health system but he also has some sort of stamina system so it's likely something that regens over time i covered something similar to that in the mana bar video so each of these attacks has a certain stamina cost and if he gets down to zero by doing too many attacks then he goes into his stun state and there you go the player takes him down check the roof oh come on let's go let's go now here we see another quick time event pretty much like we saw previously so mechanically it's really simple all of these quicktime events are all about the visuals animation and sound so mechanically very easy but you can make them look really nice and now we're on to the chase sequence now chase sequences are always something interesting to design so at its core it's really just a scripted animation so usually they have a rule where you cannot ever catch up to the target so no matter how fast you go the target will always be at a certain distance so the animation either speeds up or slows down depending on how fast the player is and once again as a designer you have the ability to make it easy or hard depending on what you're going for so if the player starts falling behind you have the option to slow down the animation by a certain amount it all depends on how many mistakes you want to allow the player to have and finally when the chase sequence is done then the animation speed is set to a fixed amount allowing the player to catch up and over here we're on to a boss fight so mechanically this is very simple in here all you have are really just three positions so there's one here one on this side and one on this side so as a player you are not allowed to go all the way up here or on the way down there doing this limits the player's actions which allow you to play the animation sequence exactly as you want it then it still has the usual attack dodge mechanics and if the player fails he falls on and has a second chance to get back up and now here we see a different type of a quicktime event so rather than being a timed event it's all about pressing a button lots of times visually we can see a ring increasing on the outside so you can do this very easily by making a mask with the ring shape and then underneath you put a circle sprite and you set the film type to radial and you simply increase the amount so do that and you have this really nice effect i guess this is the plan come on now we have yet another type of quicktime event so with this one the goal is to move the joystick towards the target position so mechanically this is very easy you just have the cursor position and then on every frame you just had some noise movement onto any random direction the player has to constantly adapt in order to get it to its target and once again you can see on the ring that it has a certain time limit so again it's up to the designer to decide what happens if the player fails maybe it's an instant fail or maybe it goes into another quick time event giving you a second chance you got this you got this you got this alright so that's it that's my analysis of the spiderman gameplay trailer the game is really awesome so if you haven't played it yet i would definitely highly recommend it it was one of the best games that i played on that year now i hope you found this video interesting and useful and learned something along the way let me know in the comments your suggestions for what other trailers i should react to also don't forget to check out core it's completely free so just click the link in the description and try it out check out the code monkey app on steam interactive tutorials complete games and more this video is made possible thanks to these awesome supporters go to patreon.com unitycodemonkey to get some perks and help keep the videos free for everyone like the video and subscribe to the channel if you'd like to see more post any questions you have in the comments and i'll see you next time you