hey everyone how's it going thanks for being here for this stream I'm planning to try out something different so we're going to make a sort of q a sort of a quiz where I can post a question then you can vote in chat and then we can see and learn a bunch of things together that's pretty much going with this live stream first of all just for testing let me actually make a simple question let's go Create a quiz and there you go a very simple and basic quiz and basically you vote in chat by doing vote and then either A or B that's pretty much the goal and let's see if all of this works correctly so as you vote there you go the little characters they move there it's recently but all right look at that all right that's great so far it seems to be working correctly so I'm going to vote myself a zone so in my case I'm going to go with dogs so I'm going to vote B look at that it's pretty much 50 30. Ah that's funny and then well the next part is when there's a question when the time is just visual so I can then manually end it and I can either say one question is correct or all of them are correct so in this case um they are correct so let's go ahead end the quiz and there you go they're all correct they're all happy everybody succeed okay so basically I'm going to try to show some questions and you can vote on the answer then I can talk about some learning thing related to the question all right okay so let me first post a post the first question there you go create quiz and there you go the brand new question so what is the name of the game relating to the game in the free course so is it kitchen chaos cloner cooked or Chef chaos so let's see if all of you know the first basic question I mean the clue is kind of on screen but let's see if all of you know it all right look at that so there's two song Theory people C and for some reason some people aren't even though there's no d right now some people want to be and most people over here on a there you go like that all those people and the correct one for this one is obviously a kitchen chaos so let's end the quiz and there you go everybody's really happy yeah let's start with a proper question so this is on the lecture for the creative project and the question is which anti version did I use in the course so was it the 2021 LTS the 2022 Tech version or was it the 23 Alpha version so go ahead post your votes and this one is with regards to the create project ledger so by the way over here on the website here is the course collection and if you click on one of these it automatically Scrolls down and there you go you have the correct answer is indeed over here B and it is the tech version so usually Technically when it comes to UNT versions you should probably stick with the LTS version but the only reason why I went with the tech version for this uh course is because I want the course I want the video to stay up to date for as long as possible technically usually you should use LTS I just went to Tech because Tech is going to turned into the LTS version in about two months usually around March or April that's when Unity launches their brand new MTS version So at around that time 22 should turn into LTS so at that time you should be able to use that one and there you go here is the question so this one is with regards to lecture two so that's in layout lecture so this one is do you know about the pivot Center local buttons yes no maybe can you repeat the question so let's see who gets this reference and yeah there you go so the questions with regards to the pivot Center on local Global buttons these are extremely important you definitely need to know about them so let's see how many of you know about them so most people are getting etns that's awesome because this is actually two very important buttons that a lot of people don't know about so yeah and for this one there's really no wrong answer because it's a general so congratulations to all of you so here is a basic testing project just to test it out and basically the buttons that I'm referring to are the ones up here on the scene view so there's this one on this side which says Center or pivot and there's another one which is global or local and basically these are extremely important so for example if you've got a game object let's make it a Cuban set so let's make an empty queue there you go here is a cube and if inside I put another object so let's say I put another Cube inside this Cube and for this other Cube let's put it somewhere on the side so now if I select the parent object and if over there it is Select nonpivot look at where the transform handle is it's right there it's exactly on the origin of that object however if up there if now I change to center now instead of being on the pivot now it's over there on the center now if you try rotating you would assume that it would rotate right over there where the handle is if you look over there it is now rotating just on the Y but also moving on the X and also moving on the Z so if I move it even further away and now it's like this one there you go with that one set to center now it actually selects the transform handle right on the center and if I rotate it look over there it's not just rotating on the Y if I rotate on the white rotates like this but if I rotate on the handle it rotate it's like that so this is something that is usually very confusing if you don't know what is going on so that is why this is extremely important and pretty much in 99 of cases you want to leave this one on pivot that's that way it makes sense so if you rotate over there it rotates on the pivot exactly as it should and the next one that one is the local or Global so that is with regards to rotation so for example let's say on the parent I rotate this one let's rotate it point it upwards like this so like this this is set on local mode and look at how the handles are rotated kind of slanted whereas if I put this in global now the handles have the global rotation so regardless of how the object is rotated these are always like this so if I move over here on the red arrow you would assume that it moves just on the I think the red is the Zen or now it's e and CX you would think by this it would only move on the X whereas if I put it on local if I put them like this this one is moved based on the rotation that the object is in so if you want to put an object in front of it somewhere like this and you won't just push the object to the side then it's usually better to use it on local whereas if you want to move it relative to the world itself put it on global and move it around so yeah basically these two are some of the things that can really drive you crazy if you don't know about them so in most cases you really want to leave this one on pivot and this one either on local or Global depending on the use case all right so here is the question so in the lecture for visual studio so what Visual Studio extension did I use for the extra colors in the code so was it called counter plus is it nothing is it just a visual studio this phone defaults or is it vs4 so it seems a lot of people are confident in seeing is that correct some people are still over here stuck on D I don't know why because there's no d right now and the correct answer is C indeed it is the ashfora yep so that it is so here is my visual studio and basically on extensions magic extensions and over here if you search for online you'll find VIA and there you go it adds color to your Visual Studio text editor so this is the one that I use in the course and basically what it does it adds a bunch more colors so look at this over here the default in the case in a nice pink so the switch are nice orange and the types in a different color than the functions in another color having all these colors really makes the code much easier to read much easier to see I would definitely recommend you grab this extension so that is called vs4 and yep 61 of you did indeed correctly guess so yep congratulations and there you go okay so here's the question which is which one of these is correct so Pascal case camel case and snake case these are the names for the capitalization of the letters the words and so on and let's see which one is indeed correct in it there you go it is indeed option A so congratulations to all of you definitely make sure you always use the correct naming rules I mean correct is a bit of a wrong word the important thing is that you are consistent so whatever naming rules you follow doesn't matter you can follow Pascal case for functions or maybe use Pascal case for class names or maybe use it for fields or maybe properties whatever you want the most important thing when it comes to code style naming rules just being consistent so whatever you do whatever you choose come up with a style that makes sense to you and then stick with it that's pretty much it okay so with regards to post processing should you add post processing as soon as possible and let's end the quiz and which one is the correct answer and the answer is all of them are correct basically when it comes to postprocessing usually you probably shouldn't do it like literally at the first thing so you should probably focus on the actual mechanics in the actual things so personally for me post processing is something that I'll leave later on in the process when I actually want to show the game to someone so when I want to promote it and so on however one thing that a lot of people have mentioned which I do think that it makes a lot of sense which is postprocessing can also help you with regards to motivation so if you're the kind of person who has trouble with motivation motivating yourself with actually continuing to work on the game if that's the the kind of mindset that you have then post processing connection really help because by post processing originally making sure that your visuals look quite a bit better so if you focus on that in the very beginning that can actually help you stick with the project for the long run which in turn obviously helps you actually finish that project and there you go okay so question this one is on lecture seven so that's a lecture on the character controller should you make all of your variables public so a no yes or yes because I want to torture my programmer teammates okay so that's it so let's go ahead and the quiz and see which one is the answer for this one and yep of course the answer is indeed a so no you should not make all of your variables bubbling in fact they should never be public so pretty much I generally don't think I've ever seen a use case for public well the exception would be on Scribble objects so for those I usually do make them public because on a scriptable object we generally deal as a readonly data container but yeah for regular variables yeah they should never be public there's no reason to be public so for example over here I got a public a float for the move speed let's say this is the character script and then I've got another one so public class for the enemy so the enemy is doing something and over here the enemy has a reference to the character so the character so this is the player character and then on private void update for some reason the enemy decides that it wants to mess up the character so it can go into the character set the move speed equal zero and there you go this one is perfectly valid code so the enemy can suddenly modify the move speed on the character and everything breaks and your player can no longer move because you accidentally modified something when it should never be modified so basically by making it public you are enabling both read and right axes from any other class so if you have a thousand classes in your code base then that's a thousand points where you might be modifying this which might cause all kinds of breakage things in your game so you don't want that okay so this one is going to be on lecture eight so that is in lecture on the character Visual and rotation so in this lecture what is the difference between lerp and slurp so it's different that slurp sounds bad which I guess maybe a little bit uh is it that LARP works with vectors and smaller ports and directions or layer ports with directions and similar ports with vectors alright so let's end the quiz and there you go yep the answer is over here indeed the solar works with vectors where a slurp works with directions now the important thing with this one is for example if you make a interpolation between a vector pointing right and then a vector pointing left if you do that and you use slurp then basically it's going to rotate because it's going to work with directions whereas if you use it with alert then basically this Vector is going to shrink and then pretty much do a 180 and stick around there so that might sound a bit confusing so maybe this okay so here is the demo that I'm showing so basically what matters over there the blue arrow So currently this one is using slurp so let's see what this one does so if I hit on play look at that blue arrow and let's see what it does and there you go it rotates around like that so look what it does okay so this one is using lerp and basically the starting Vector is one zero so a vector pointed to right and look how this the vector basically becomes shorter and shorter until it gets into zero and then flips around to the other end and then becomes so basically we can shorten and then goes out whereas if you use slurp and there you go so it starts off on one and instead of becoming shortened this one actually rotates so this one goes down on the set so it goes down like this and rotates around instead of becoming shorter and pointing the other way so if an animation has a property in yellow saying missing what exactly is the problem so is the problem that there is no child object with that exact name is it that the animation file is corrupted or was the animation not added to the animator State machine alright so this is what I'm what I'm talking about there that one is in Young low so what does that mean so let's end the quiz and see which one is the correct answer and drum roll and there you go the answer is indeed over here a so the answer is there's no child object with that exact name yeah basically when this happens is because there's no child of this object named exactly head this is one of the annoying things about animations is that it's actually based on strings so it's all based on names so most of you probably don't write note that I hate strings for identifying things and basically the reason why this one is saying missing is because I went ahead and I modified this one so I renamed this one to head 2 so now if I play the animation that one isn't actually going to play the animation because it doesn't have any object named exactly head so the solution to this is either go up here and you can click you can click once to select and then wait a bit and then click again and you can rename the object so if I go over here and I rename this property to head 2 to match the one over there there you go now it's no longer in yellow so now it does fine there you go the head is indeed moving up whereas if I I put it back into that one where it says missing now I move around now the head does not move alright so yeah this was a a simple question can you use an orthograph camera in a 3D game and the answer is yep you can so here is my demo scene so this one is for the main menu for kitchen cows and if I select the camera where's my camera there you go my main camera and over here it is set as perspective so this is like a it's what you usually think about when you think of a 3D camera but you can put it as orthographic so over here the characters they all look perfectly the same even though they are at different distances whereas with a perspective camera this one up front is much bigger and the ones on front are more squished I don't know the technical terms that's pretty much it so the question is what is the difference between overlap box and box cast so is it a overnight box test if there's a collision on the target area and box casts if there's a collision anywhere between two points or is it B over on lightbox the 2D box cancels reading or is it C Overland box is better suited for characters and boxcast for objects so go ahead and post your votes in chat yeah there you go the correct answer is indeed a which is overlap box this if there's a collision just on the target area whereas the box has tests if there's a collision anywhere between the two points so here I've got a testing scene so let's say this is a wall and this one actually has a leather and let's say you've got a character over here and the character wants to move to this position so if you do if the character is here and you do an overlap box over here on this position then two on returned phones because it won't find any colliders because there are no colliders directly on this position whereas if you use a boxcast basically what the boxes does is it moves a virtual box or a virtual shape depends if it's a box has sphere cast and so on if it's a box yes then basically the physics system will move a virtual box in the virtual physics space and will move from A to B and in that movement it won't find anything that collides within between the points A and B so in this case if you do an overlap box it won't just has this position and return false but if you were to do a box cast it would start from here and move a virtual logs onto this direction and it would find this wall in the middle so that would return true because it would indeed find something so what is the cause of the flickering bug look at this look at this flickering so this is what I mean so what is the cause of this flickering bug where the texture is flickering back and forth so is it that two objects are on the mathematically exact position is the GPU broken or is it a physics collision and yep the answer is indeed a it is two objects are on the mathematically exact position or like these people mentioned the more technical term is Z fighting so it's more in the Z buffer so basically since this quad is literally on position where's the position there you go it's literally on zero just like the floor object these are on the exact same thing so this is a very nasty visual issue so if you have this one solution is super simple literally just put this a tiny bit off there you go just like this just by moving it by 0.01 and now no longer got the problem so Yep this is called Z fighting because both are on the exact same depth so that is what makes it quite annoying so if you have that now you know just make sure that one of the objects is not on the exact perfect position and everything will be nice and fixed how many interfaces and bass masses can a class implement or extend so is it a multiple interfaces but only one base less or is it being multiple base less but only one interface or is it c as many as you want so if you have bass and lessons in interfaces how many can you implement slash extend and in the quiz any of there you go it is indeed correct so basically you can Implement multiple interfaces but you can only extend one base less that is one of the limitations and one of the reasons why you should use interfaces over base classes if you don't know what I'm talking about here's a quick test so instead of making a public class you can make it an interface so I my interface you can do this and then inside you can have a function my function and do something and then on a class you would implement this interface and again as it says on the question you can Implement multiple interface but as a C sharp 7 you can also do something awesome which is over here you can do a default implementation so if you have an interface and already have a bunch of objects that Implement that interface and you want to add something new you can add a default implementation and everything will work perfectly so you don't have to actually add the implementation but you can if you want to so interface are super awesome for example if you got a game and some objects have an inventory and some objects don't you can use an interface to say I has enter I has inventory and Implement that interface on any object that has an inventory so interface are super powerful so this one about csharp events and csharp events you something called a function signature so the question is what is a function signature so is it a the function name is it B the return type and parameter types or is it C the return type the function name the parameter types and parameter names and there you go the answer is B so now the majority was actually wrong for the first time wow that is interesting so yep the answer is B for the function signature what matters is the return type and the premium other types meaning that the function name and the parameter names that does not matter so you can have a function with different names different parameter names as long as the types are correct that is the one thing that really does matter alright so yeah thank you all so much for being here on this live stream this was a different thing it was an experiment and well so far it went pretty well so I'm pretty happy with how it went so hopefully all of you enjoyed it so hopefully a bit more in the in the future so my plan for this year is definitely doing a bunch more live streams and experiment with different things kind of like this so hopefully you enjoyed it so thank you all so much for being here thank you so much and I'll see you next time