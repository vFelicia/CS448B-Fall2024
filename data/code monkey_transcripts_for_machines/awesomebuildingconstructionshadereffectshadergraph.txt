in this video we're going to create an awesome looking construction shader effect it's an excellent effect for any game with construction like a tower defense or rts games it will also teach you how to be clever when working with graph in order to make some more complex effects let's begin all right so here let's check out the awesome construction shader effect so here i am in my demo scene and i have a simple building manager implemented so as i press the button if there you go a building gets placed and it starts being constructed it looks like the building is slowly being printed reality it gets created aligned by a line after a while yep the home building is done and this is a real nice shader effect so it's applicable to any visual so this is a wood harvester now let's place a stone harvester and if there you go line by line looks really cool and over here let's place a gold harvester and yep there you go you can see that the effect looks really awesome so it works with any sprite there you go a nice tower and over there a nice hq and yep it prints really satisfying left to right and yep there you go looks awesome so this is the effect which is also easily customizable with a whole bunch of parameters so the main one is over here the number of segments so this is how many vertical segments there are so if i put this with just two yep there you go it prints the bottom part and then the top part i can put it at 10 to get a nice amount or i can put it at 30 to look really insane so very customizable then you can also change the color of the printing head so instead of blue let's make it a green make a nice orange red and so on and we can also change the thickness of the colors instead of point zero one let's make it point zero two and there you go it's a bit bigger and quite a lot bigger and yep just like that lastly you can also play around with this texture in order to get some different shapes so this one goes left to right and now this one is going from the center to all the sides and this one going outside back in so as you can see the whole effect is really customizable with tons of parameters now by the way i also use this exact effect in my course for the builder defender game the course is 10 hours long with over 15 lectures nicely organized into distinct topics it teaches you everything on how to make a game starting completely from scratch until the final polished game the lectures are presented as clear stepbystep tutorials just like my normal videos it teaches you how to make a building system resource management enemy ai world building post processing polish and much much more so if you are looking for a guided stepbystep course on making a complete game from start to finish then check the link in the description to pick up the course alright so this is our goal let's get to it okay so let's begin by making our shader now in the shaders for only just right click go into create we're going to create a new shader and in this case go into the 2d renderer and make a sprite only graph let's name it the construction effect and just open it all right so here we are in graph now if you're not familiar with shadowgraph go watch my getting started video first it's linked in the description now we're going to begin with a texture just so we can see it in action so let's begin by making a texture 2d name it our main text reference underscore main text then let's default it to the building texture and now let's drag it in here then we simply sample it and pass the rgba over there onto the colors and change the preview into a quad all right so we have our basic shader now let's just hit on save asset then over here on the scene view let's simply make a sprite with a sprite okay there it is and now let's make a material so by the way here's a quick tip instead of right clicking on the folder and creating material right click on top of the actual shader so right click create and go in here and create a material and automatically uses our shader so let's name this our construction effect then on the sprite itself let's use this material all right so far so good we have a sprite and it's using our custom shader now let's continue now in order to achieve our effect of showing the construction happening going from one side to the other one thing we're going to need is a gradient texture so let's add a new texture to 2d field let's call it the progress texture and here on the default i have a texture i made previously and here it is it's just a very simple gradient so it's fully black on this side and fully right on this side now it's red simply because we're only going to be using the red channel so in reality this is simply a texture going from zero to one so there it is very simple now we're going to take the red color channel and now the one key thing that we're going to do here is we're going to add a step node so what this does is it steps through our texture and only shows values under a certain amount so since our texture is going from left to right over here with zero and over here with one as we increase over here on the input you can see that increases going from left to right so this essentially is the basis for the whole system it's just a gradient texture and a step node now let's make a property for this step value so create a new one this will be a vector one so essentially just a float let's name it our progress and here let's change the mode and make it into a slider going from zero to one okay so far so good and then just drag it in here and this is the one that we use in here so we have our texture we sample it and then we do a step node and use the progress so let's put this at something like point four and if we can see this is forty percent film all right so with this let's simply apply it to our texture alpha so let's take all these let's here add a multiply node so we're going to take the original alpha there it is that one and we multiply it by this one and there you go this is the shape that we get so we take this and then let's add a combined node and we're going to take the original red the original green and the original blue and just use this alpha and then use this rgba in there and if there you go we already have that effect now in this case since this is a construction effect personally i like this to have a bit of a different color so one easy way to do it is simply delete the red and there you go now it gets a slightly bluish color so personally i prefer this since it makes it more clear that the sprite is being constructed but if you wanted you can also take all of them and apply a simple tint but in this case like this looks pretty good so we have a progress texture then we're applying a simple node based on what's on the progress variable and then we simply take that we multiply it with the original alpha we combined with the colors while ignoring the red and we simply use that on the color alright so let's see how it looks like this and yep over there we can already see our effect in action so down here we have the progress slider so as we move it in there it's all fully empty and as we slightly increase it yep there you go it gets printed from left to right all right so we already have a really nice base for our effect awesome okay so what we have here is essentially just a single segment working now for the final effect we want to split the sprite into multiple vertical segments so back in the shader here let's think of exactly how can we make some segments now here you need to think in terms of discrete operations rather than thinking of the whole final effect so first of all the segments are meant to be placed vertically essentially if we have two segments then first we want to fill the bottom half of the sprite and then we want to fill the top off so that tells us that essentially we're going to need a vertical gradient so let's make that now one approach is we could make a different texture going from the bottom to the top so that would work but would require us to make a component different texture however we can do that more easily by just rotating this texture that we already have so let's duplicate these nodes along with the step so just hit ctrl d in order to duplicate them all right here they are and now in here we can add a rotate node so there you go this outputs the uv which we connect in there so like this it still looks exactly the same but over here we can apply something on the rotation so as this one increases yep we have our gradient increasing so now here you can probably tell that the value is set in radians so at zero it's going left to right as i approach about that about 1.38 it's going from bottom to the top so in our case we want a 90 degree rotation so in radians as you know pointing to the right we've got zero and pointing to the left we've got pi and the false circle is two pi so in our case we want just a 90 degree rotation so we want pi divided by two which is 1.5707 and so on alright so just like this we have a perfect 90 degree rotation so by modifying the progress in there yep there you go that one goes from left to right and down from bottom to the top now again let's think of what we need in order to achieve our goal now for this one up here we do want it to go smoothly from left to right however in this one down here we wanted to transition between distinct states rather than smoothly moving from one to the other so in order to do that let's first define a property for the number of segments so we create another one again a vector one so just a normal float let's call it our segments and here let's set it to two segments and now in here we want to split this into the number of segments based on the current progress so that means that we need to convert the current progress which is a normalized value going from zero to one we need to convert that into the scale of these segments so we simply add a multiply node and we multiply the current progress by the actual number of segments so if the progress is set to 1 then the output in here will be the same as the amount of segments and if it's at 0.5 then we have half the segments and so on however in here this step node takes a normalized value so we have to normalize that value in there and we do that by using the divide node and we divide this value by the actual number of segments and then we connect this one onto that one okay so it seems like we end up pretty much in the same place where we started however now let's think about what this is doing now in here we are multiplying the progress by the number of segments and then we are normalizing that value so in order to get the strict values we can simply add a four node in between these two so just push this one to the right add a four node and we're simply going to forward this value so we take this one we take a floor and then we connect to the divide and just like that and yep with this now the step node is indeed working so as the progress is at zero then that one is fully on zero and that one is also on zero and as the progress increases like let's say at point three that one smoothly increases to point three but that one does not move that one is split into two segments so even if i put on point four nine the four is still zero so it's still on the very first segment and only as i increase to point five does it yep indeed it fills up that one and as i go up to point nine yep still with that one and as i go up to one yep now it's fully filmed alright so with this we have now implemented discrete vertical segments awesome now we really just need to combine this with our left and right motion so let's get a bit more space just push all of this more to the side all right now in order to combine these two again remember that shader effects are really all just about numbers and basic operations so what we have here is just a bunch of ones and a bunch of zeros and over here a bunch of zeros and a bunch of ones so if we want to combine these we just add a very simple multiply note so we multiply this one by this one and yep we have our combined output so here we have already successfully introduced segments onto the vertical bar however we have not added them to the horizontal bar what we want is for this one to go from left to right as many times as the number of segments so right now it only goes from left to right once as we increase the progress down to 1. however with two segments then it should be essentially completely filled at 0.5 then reset back to the left side and as it increases for another 0.5 it should fill up again so let's do that now in order to do this it is very simple with a basic modulo operation so we add a modular node now if you're not familiar with modulo it is simply the remainder of the division so we do a modulo of the progress and in this case we're going to want to do it with 0.5 and then we simply add a multiply node and we multiply this output by the number of segments all right so there it is so now essentially when the progress is let's say at point one if there you go it only fills up a tiny bit and as that one approaches point five so at point four yep it's almost full and as it goes into point five yep there you go it resets back and as it goes up to 0.99 there you go it's completely full again so now as the progress comes from 0 to 1 this one is going to fill in exactly 2 times which is the number of segments now here we are doing a module of 0.5 since we just have two segments so the correct value is just one divided by the number of segments so just add a divide node and divide one by the number of segments and this is what we use in there all right so our logic is looking good over here we have a horizontal bar that goes from left to right as many times as the number of segments that we have so we have that and then we combine both of them and then this output really is what goes over there onto the alpha now over here we still have one issue which is that if the progress is under 0.5 so let's say at 0.4 if there you go that one is working correctly however this one is completely empty so right now the logic is fully working but it's only working after the first segment so if i put this at 0.6 it does work correctly so what we need is to have this one and then to have another one that goes one segment ahead so let's make another step node for the vertical and we use this red channel okay good except for the input on this one we essentially just want to add another segment so let's make an add node and we're going to take the output from here and we're simply going to have another segment so just one divided by segment so just copy this one add on to that one and use this one in there alright so yep there it is so now we have this one down here that is one segment ahead of this one so as this one is at let's say at point four that one is empty that one is half full and as this one reaches let's say point six this one is four when this one is half full and if we use more segments all of the logic still works so let's say five segments and there you go that one is always one ahead of that one so at point six then at point four and so on and yep the logic works perfectly however like this we still have one issue which is that even if we were to use this one which goes one segment ahead all right that one works good so if we go up to point four nine yep it's working good it's filling in the first one but if we go to point six and there you go we can eliminate the bottom segment what we want is to only apply the left right motion on the topmost segment so the bottom one is supposed to be visible at all times so you can see what's happening right now if we save the shader and here we are and we have our progress and there you go as we increase and as we go up 2.5 yep there you go it looks good it's printing the first half of the bonding and as we go to point five yep there you go it goes back and now it's printing both segments at once so again what we want is to really only use the last segment when applying the horizontal movement so back in the shader here doing that is actually quite simple so we have this one which is as you remember one segment above of this one so it's always one ahead and again remember that shaders are all about simple mathematical operations so if we just want the top one then we can simply take this shape and subtract this shape so just go in here add a subtract and we're going to take the one that is commonly filled we take the one that is one behind and there you go we only have the top so then this is the one that we apply in there in order to multiply so now as that one is at let's say 0.4 yep it's printing the bottom segment and as it goes up to 0.6 yep now it's printing the top segment so again we just need to leave this one as the same as before so we just take these two okay and then we have an add node and we're going to add the topmost shape and combine it with the bottom most shape and yep there it is now we have that effect and connect this one there and now we can actually see it in action so let's save the asset and over here at zero everything is empty as we increase yep starts increasing the bottom segment and as we go past point five yep there you go now it's increasing the top segment so there you go yep the effect is working perfectly and again we made the song really nice really dynamic based on this number of segments so if we add this to let's say 10 segments and as we increase yep there you go you can see our effect is constantly printing so it is really starting to take shape all right awesome so with this the effect is already working it's constructing the building line by line however the issue is that it always goes straight from left to right it would look better if it constructed from the left and then on the second one go from the right and then from the left and so on all right so let's do just that so back in the shader here what we're going to do is over here we have our horizontal logic and we're essentially just going to duplicate this so just click ctrl d duplicate all of these all right good so using the same texture all right everything looks good so we do the exact same thing using a step node and all this logic all that is good however in this case we want the texture to go the other way so once again we have the option that we could make a separate texture going from right and left or once again we can play around in the uv so one approach could be by doing the rotation and rotate by pi but let's look at a different approach so let's add a tiling and offset node so we connect this one in there and over here we change the offset on the x to minus one and now we see an issue that everything is set to black so let's go into the texture import settings for this texture so here it is my construction progress texture and down here we have a really nice wrap mode and by default it's set to clamp but we have all these options and in this case instead of clamp let's choose mirror and if we hit apply and go back into the shader and if there it is now we have from right and left so as we modify the offset you can see that the actual texture shape is mirroring so minus one makes it perfect all right so just like this we have this tab node going from left to right and this one from right and left so as we increase the progress let's put it at quite a bit let's put it at 0.1 there you go just that one let's put it at 0.2 any input increase like that 0.3 and yep there it is so that one left to right that one right and left alright so now all that's left to do is add some logic in order to use either this one and this one and then combine it with this one so we can add that logic by making even lines go left to right and odd lines go right and left so to test if it's an odd or even line let's add some nodes here so first let's take a multiply node and multiply the progress by the number of segments all right so we have the full value rather than the normalized value so we do this then we for it so in order to make it a whole number and then we add a modular node and we're going to take this and make a marginal low of two so the end result in here won't be zero if the line is even and one if it's odd so for example if we are on the third segment so the output in here won't be in let's say 3.4 we're 40 on the third segment then we forward it so 3.4 becomes three and then we do a modulo so you do three divided by two and the remainder of that division is one so that one is an odd segment so we have this logic and then we add a comparison node so this one is really useful we take this one we compare it with the a and we're going to compare the a with zero so again this will either output either zero or one so we have this one we test if it's equal okay and out here we have a boolean output and then we can add a branch node so this one takes a boolean and then essentially what this does is if this one is true then the output will be what is received in here and if it's false it outputs this one so yep that's exactly what we want so over here we put the left one if it's true and we put the right one if it's false then we take these two and we put it on the multiply all right so that's it let's save the shader and test and okay here's the building and we have our progress at zero okay and as we start increasing yep it goes from left to right and as we reach to the right side if there you go the second line goes right to left and then left right right and left left right and so on all right so here we have a really nice logic all perfectly working awesome alright with this we have almost a complete effect by the way i have a simple script here that we can use to test so here is the script very simple we just have a forward progress and it's constantly increasing and by the way this is how you assign properties to a certain value so the shader has a property with the name underscore progress so here it is we can see progress with reference underscore progress so this is how we set it we call set float give it the name and give it the value and yep over here we can see our shader in action so it goes right and left left to right and so on and yep it's already looking very nice alright so this is almost a complete effect it does indeed construct the building in a really nice way now let's take this the next level and add a really nice glowing printing head adding that is actually extremely simple what we have to do is essentially just duplicate all of these nodes so let's grab all these and hit ctrl d to duplicate and drag them all down here all right so we have the exact same logic up here and down here now the one thing we're going to change down here is we're going to add a tiny amount to the progress value so let's make that tiny amount a property let's call it the head thickness we're going to use a really tiny value so with this you can already guess where this is going we're going to go here where we have our progress and we just make an add node and we have the progress and we add it by this very tiny amount so we do this and then output it in there so now we just need to apply this logic wherever we're using the progress so down here we're using it the same so let's bring it down here remove this one and connect this one okay then down here we also have progress all right that's it and the last one is all the way up here so once again just copy this one and put it in there all right so essentially what we have is that all of the logic down here is a tiny tiny bit ahead of all the logic up here so now we can just add a simple subtract node and we're going to take the output from this one which is a tiny bit ahead and we subtract it to this one which is a tiny bit behind and we combine those two and with this we get just a tiny sliver of the shape of the head so in here let's switch the segments from 2 to 10 so we can see and if there go just like that so now we have this now let's just multiply it by a simple color so let's make another property for a color for the head color and here on the mode let's make it hdr so we got a real nice glow and then give it something like let's say a blue and give it some intensity all right so we take this color then we simply add a multiply node multiply this head to this column and then all we need is another add node and we add the head onto it all right so there it is now let's save it and if there it is we have our printing head looking really awesome there you go constantly increasing and the head is constantly at the edge and of course we have our property so let's say increase the head thickness and there you go now it's much more massive and like this it's much more tiny so there you go very easily customizable and of course we can also modify the color so let's make it a nice green there you go nice orange and yep there it is it looks pretty awesome alright so with this everything is working as the progress increases it constructs the building in a very satisfying way so it prints left to right segment by segment and there's a really nice glowing printing head and also the other parameters still exist so for example over here on the segments let's say 10 segments is too much let's put it just two and there you go it goes just one and two let's put in three and yep we've got in three let's put in 30 and there you go it's a really insane printer so you can see how this final effect is really really nicely and customizable so lastly i'm just going to apply this to a bunch of buildings so all it really takes is really just applying the same material so over here i have a simple prefab that i can easily spawn and all i need to do is just apply that material and yep there you go and now if you run this so here i am and i have a simple building manager so as i click if there you go it starts printing the building and after a few seconds the whole building gets printed and if there you go it spawns the actual building so there's a wood harvester and over there we've got the stone harvester then a golden harvester and then we have a nice tower and a real nice hq and there you go you can see the effect looks really really nice so they all get built they all get spawned and they all look really great so here it is the final effect it looks excellent and is perfectly suited for just about any game with some construction now again this shader was originally created for the complete builder defender course so if you want to see how this is used as part of a complete game go check out the course link in the description it teaches you everything on how to make a game starting completely from scratch until the final polished game if you found this video helpful consider liking and subscribing as always you can download the project files and utilities from unt codemonkey.com this video is made possible thanks to these awesome supporters go to patreon.com unitycodemonkey to get some perks and help keep the videos free for everyone subscribe to the channel for more unity tutorials post any question comments and i'll see you next time