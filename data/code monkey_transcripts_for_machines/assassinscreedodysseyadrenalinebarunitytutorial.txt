hello and welcome I'm your code monkey in this video we're going to make the adrenaline bar from Assassin's Creed Odyssey and apply it to our previously made adrenaline system let's begin okay so here's the scene I have my player Spartan character and I can move around and there are some enemies that I can attack I can also dodge their attacks when they attack me and I have an adrenaline bar that is currently only visible through this dot which tells me that I have a bar film and if the bar is filmed I can use a special ability which is the Spartan kick so just like that if I have the bar I can use it if I don't then I can't use it adrenaline is gained for each attack for each successful dodge and for each enemy killed so in a previous video we created the adrenaline system but as you saw we can only display if we have at least one bar filmed so currently we cannot see the progress of the current bar being film nor how many totem bars have actually been filmed so you want to create a visual bar to show the progress of our adrenaline system so let's set up the visual UI bar over here in the editor let's go into the UI into the canvas and let's create a new game object and we're going to name this the adrenaline window inside let's make a simple bar which won't be our template that we're going to duplicate to create as many bars as we need so enzyme let's make a new empty game object and here let's call it bar template inside let's add another empty game object for our bar background give it a image component and let's set it to film the parent object so just like that everything on zero okay so this way by modifying the parent size I modify the size of the actual bar background so now inside duplicate the background set at the bar filled let's give it a yellow color like that and let's give it the white pixel texture we need to set texture in order to access the image type so in here we can go from simple and select filled select horizontal and from the left side and this way we have a nice fill amount value that we can change to change how our bar is filled so I change the background to be a dark grey and if that's our bar template so with this setup it is very simple to modify how much of the bar is filmed and by changing the value of the parent we can also modify the actual size of the bar okay so this is our template now let's make the script to control it so let's making you see sharp script and let's name this the adrenaline window drag it on to our window game object and let's open it so in the script first of all let's do a private void awake on our awake let's grab a reference to our bar template so in here make a private transform for the bar templates and we're going to grab this in here by doing transform find our bar template then let's make a private void create bar and this will essentially duplicate the bar template and create a bar so in here let's receive the parameters one vector two for the anchored position and a vector two for our sides so in here duplicate our bar template so instantiate the bar template into this transform so we have the reference to the in Senshi ated bar transform okay then we grab the bar transform get component of type for X transform so this is our rect transform for the far right transform and using this we can set the anchor position to be our anchor position that we received in there and do the same thing for the size Delta equals our size okay so we now I have a function to easily duplicate our template and set the correct anchor position and size the one thing we also need to do is enable the game object since by default the template will be disabled so that the game object that's set active and set it to true so on our awake let's set the template to phone so it isn't visible okay so now on our private voice start we want to create all the bars that the adrenaline system is using so for that first we need to ask the adrenaline system for the bar amount so let's go in here and we're essentially going to need a public static int for the get total bar amount and in here we need to return our bar amount so we could divide nice by the amount per bar or simply just store the bar amount so in here make a private static and for the bar amount and that's what we set in there okay and down here that's simply all we're going to return our bar imma okay so now we can go back into our window and here simply do a four in t10 unless then the adrenaline dot get the total bar amount and increasing let's define a vector to four first of all the bar size so let's set it to a fixed value so let's test 120 and then we have a vector tube for the anchored position which is we're testing let's put them all one above the other so a new vector to let's start off at zero and then go 30 multiplied by the index and then finally we do create our bar using the anchor position and the bar size okay so we are grabbing a reference to our bar template we are setting it to inactive so the bar template is no longer visible then on start we are cycling through on the total bar amount that we ask the adrenaline system and we create a bar using an anchored position one on top of the other and create a bar simply duplicates our bar template and set the correct anchored position and the size dollar okay so we should be able to see two bars one on top of the other and yet there is two bars one on top the other and if we pause we can see that the template is hidden the game object is set to disabled and then we have this bar template which indeed does have 100 width and 20 height and is placed on zero zero and this one is on zero minus 30 okay so just a test if everything is working let's go into adrenaline and instead of having two bars let's have four bars and yep now we have four bars okay great so in here on let's make a simple class to handle each bar so down here let's make a private class bar and here we're going to have a public bar constructor and inside we're going to receive a transform for the bar transform and store it internally okay let us also store a reference to our image component so in order to do that let's go here and do using unity engine you why so we can grab an image or the bar image and grab it in here bar image equals our bar transform docket component of type image let's make a public void set size in here let's receive a float for the film amount and we simply set the bar image not film amount to be this film amount and on our constructor let's emphasize initially to 0 F okay so the bar starts off completely empty so we now have this nice simple class to handle each specific bar to keep our code nice and clean so in here let's say this represents a single bar and this code is meant to be on the adrenaline window and not on the adrenaline class and let's copy this from here and put it in here okay now in here on our create Bar function instead of returning void we're going to return a bar and inside we're going to create a bar equals new bar and give it our bar transform and that's what we're going to return ok and now up here on our window let's set a private list of bars for our bar lists instantiated on our start and in here when we create a bar grab the bar reference and add it to our list so this way we have a list containing all the bars that the system is currently using ok so we now have a list of bars and a nice simple class the controller so now it's time to actually fill them up so let's make a private void update and on our update we need to figure out which bar should be completely filled so let's first cycle through all the bars the same thing that we did in here and let's calculate the adrenalin minimum and maximum for this specific bar so we're at the bar bar equals bar own list of in X I and in here let's complete an end for the adrenaline min which won't be essentially this index multiplied by the amount for a bar so it's going to be adrenaline and get the amount per bar then we also define the adrenaline max which won't be the next index multiplied by the amount per bar so I plus 1 multiplied by that okay so essentially the first bar won't have an index of zero so the minimum of the first bar won't be zero and the maximum won't be 1 times the amount per bar which is currently set up to 25 so so 1 times 25 equals 25 so the first bar will represent the adrenaline amount between 0 and 25 so then we ask the adrenaline system to get the adrenaline amount so let's go make this function very simple just in here make a public static int for to get the adrenaline amount and we similarly return key amount so this is the end for the adrenaline amount and then we check if the adrenaline amount if it is under adrenaline min then here the bar is empty so we set the bar that set the size to be zero up if it is not empty then we're going to check if the adrenaline amount if it is bigger than adrenaline max if it is at or above the maximum then the bar is completely home bar is commonly false so we set the bar not set size to be 1f Kamala phone okay if it is not come only empty neither couple like phone that means it's somewhere in the middle bar is filmed so let's grab the remainder amount so we float for the bar middle amount which is our adrenaline amount well it's multiplied by 1/2 to convert it into a float and then get the remainder of the adrenaline dot the amount per bar so if this is for example the second bar then the index will be 1 and the next one will be 2 so this bar won't start from 25 going up to 15 so if the adrenaline amount is under 25 then the bar is empty if it is above 50 then the bars come only phone if it is neither then we take the adrenaline amount which let's say it's at 40 so we have 40 divided by the remainder of the amount per bar which is 25 which gives us 15 so using that we can go into the bar dot set the size to be the bar middle amount divided by the adrenaline dot amount per bar all right so that should do it let's test and we should be able to see the bars being filmed okay here I am and there are the bars they are all commonly empty now if I attack the enemy yep the first bar is filling up now it is almost false and only me has another enemy and yep that one is come only foam and you can see the icon that says I have adrenaline now if I spin it by pressing E to do a kick and yep the bar was spent and now another one is spent now I have no adrenaline so I can attack them all and fill all of my bars so let's go on four of them are filled so now I use the kick yep spent one and spent another one and another one and another one and I can't do any more ok great so the logic for our bars is completely working so with the logic warden let's polish it up a bit so first let's set up some color so down here when we are setting the size let's set the bar image not color and change the color based on the size if it is completely filmed it won't be a bright yellow if not it will be a darker yellow so in here if the film amount if it is bigger than or equal to 1 then the bar is commonly fill so we return the complete yellow so let's grab that hex value so in here this is our hex value and let's grab it and here going to the utils class which is part of the code monkey Tonys that you can grab for free from unity code monkey calm so using the code monkey details I just have a function there to get the color from the string and I give it that hexadecimal string which is the pure yellow and if it is not come only form then let's grab another different yellow type so bit darker grab it and that's we're going to use okay so if the bars come only filmed and I see you if it is not completely filmed a darker yellow so let's test okay here I am if I hit yep we got a dark yellow and when it's the only phone you got a bright yellow okay great so normally tell the background as a container for all of our bars so on the editor in here and let's make a new empty this will be the background for the window so add the image component and give it a very dark wearing okay so let's enter it somewhere down here and give it a why their width okay so in code we're going to make sure that whatever number of bars we get they all fit inside of this space so over here on our start let's define a float for the bar padding which will be the space in between bars so let's try with five then a float for the total bar width which won't be on our transform find the background and get the component dive rect transform dot size Delta X and let's also have a vector two for the starting position which will be a new vector to we're going to have zero on the Y and now on the X essential we're going to have minus total bar width divided by 2l and finally we need a float for the per bar width this is the total bar width minus the bar padding multiplied by the get total bar amount from the adrenaline system then the whole thing divided by the number of bars and let's also define the bar size down here and set it to the per bar width and then a height of 20 okay now in here when defining the anchored position let's set it on the starting position which is somewhere on the left side and then we add a vector to on the Y it will be at zero and on the X we're going to essentially multiply the index by the per bar width plus the bar padding if we didn't have the padding the bars would simply be exactly connected to each other and like this there's a little breathing room so let's see it in action and see if all four bars are correctly positioned within the size of our background one last thing is we need to set the anchor to be on the left side of the bar so the bar goes from there okay and yep they appear to be correct on though they are not on top so let's fix the wine in here for the starting position let's set it to the anchored position of the background was our offset of going to the left side so this way the wine should be correct and you we are on four bars correctly displaying within the size let's just increase the padding in the starting position and then everything is working okay and yep there we have four bars on occupying the size the background so by modifying the size we can modify how the bars are placed and as you can see they are all filling up correctly when one is commonly filmed the other one starts and so on everything is filmed and I can use it and I can spend the bars and yep everything works Pirtle so let's s reducing the size instead of a tunnel it's worth 400 so much smaller and see if it's correct and yep still on bars occupying the correct size okay now let's increase it again and on our adrenaline system instead of having four bars let's have five bars and yep we now have five bars occupying that same space and again I can now use the bars and they also work perfectly fine exactly as previously so there you have it we created the adrenaline bar from Assassin's Creed Odyssey we took our previously created adrenaline system and made a visual bar to display all the information needed in the next video we're going to add the bone rush ability as always you can download the project files in assemblies from unity code monkey comm if you have any questions post them in the comments and I'll do my best answer them subscribe for more videos and I'll see you next time