hello and welcome I am your code monkey and in this video we're going to check out the inner workings of the waiting queue in battleground tycoon let's get sir so a very important part of the game is having guests cue to enter buildings I always loved seeing massive queues going into a really popular grocery in Ronald Coase Tycoon so that was one of my main things that I needed to implement so I have my scene here and it's the actual game scene from that around Tycoon the game is still very much in early development if you like the concept of the game add to your wish list and follow what we want to go through this video is the waiting queue in here as you can see the guests wait in the queue and Tom the ones inside the building are done and when the guests inside the building leave the building the others go in so this is the behavior we want to create ok so what do we need to make a queue well first of all we need a list of all the positions of each guest in our queue then we need to keep track of who is in what position and who is at the front of the queue when we add a new guest we need to tell him to the position where he should go to and we needed a position for the entrance to the queue which is a position in here that the guest goes in before going in to its specific position in the queue and we also need a way for the building that this queue is connected since these are two separate objects we need a way for the building using this queue to request the guest at front when he has a space so when I guess leaves he requests a guest from the queue and if there's no guests waiting then the queue needs to notify the building one one finally shows up okay so let's go into our code and start off by making the queue position so here on my game handler I have my start function being executed on start and in here I'm going to create a list of vector3 and populated with five positions so here first let's set up my first position in the queue which in the scene I have here for testing is located at 742 a so this is the first position for my queue so let's put all the other positions to the left of this one so let's go make a basic int 0 less than 5 I plus 1 and I'm going to need a list for my vector 3 which is the waiting queue position is so in here let's go into my list and add a position the position will be based on the first position and then we want to go to the left so plus a new vector3 with the XF minus one the Y at zero and we're going to multiply this by a position size hello position size equals let's say 8 f / position okay so we should have this list of vector threes which won't contain five positions starting at the first position and moving to the left okay so now that I have my waiting position list I'm going to go into my waiting queue and set up a constructor that will receive our list of positions so public am waiting queue and here i'm going to receive a list of vector threes for my position meliss okay so we now have our internal position list let us also calculate the entrance position which won't be where the guest goes in order to enter the queue so make another member variable a vector 3 which is the entrance position in order to calculate that entrance position we're going to make it based on the last position position list position lists are count 1 & 4 now let us just move our entrance position to the left of the last position so close new vector3 of minus 8 and 0 later on we want to calculate the entrance position based on the direction of the last two positions but for now this should work okay so to make sure that our positions are being correctly insensitive let's create some debug sprites so I'm going to go here using the code monkey dot utilities which is always you can grab for free from unity code monkey comm and I'm going to go in to create a new world sprite and I'm going to create it on every single position so for each vector 3 position in position lists I'm going to create a new world sprite on the position let's give it a local scale of 0.3 0.3 F and collard green so we should now be able to see some green sprites on the position of our cue and obviously we have to go back into our game ham over here and actually create our waiting to you with our waiting cue position listen and here when we're creating our positions we also need to multiply by our index otherwise it would all be on the first position and our waiting queue and let's create another sprite for our entrance position and give it a different color all right as you can see we have successfully created our positions this is the first one second third fourth fifth and finally our entrance position so the guests won't go into this position before being relocated into its own specific position so let's now deal with adding guests to our cue so in here on my waiting queue I'm going to need a list to hold all of our guests so let's make a private list of my guests and college guest list now the index positions in this list won't match the indexes in this list so the guests at index 0 will match the position at the next 0 let's instantiate it in here and first let's make a function to test if we can add a new guest so I'm going to go a public ball can yes and it's simply going to return if our guest list dot count if it is less than the position list dot count so if we have less guests and positions then we can add another one now let's make a public void add guests which will receive a guest object so this is the function that won't be called when the guests once enter the queue so let's send to the entrance position first we're going to send our guests to move to our entrance position and we're also going to add them to our guest list now my move function here takes a position and the action which will be triggered when you rise at set position so let's set up that action so when the guest arrives at the entrance position I'm going to want to towards his own position on the queue so it won't be the position list of the same indexes where he is so of the same index as the guest list that index of this guest so right now when we add a guest we add them to the list we move into the entrance position when you rise at the entrance position this function gets called and this function won't send him to his own position on the list okay so here I am back in my game you can still see the positions of my waiting queue and I have a button here to add a guest to my queue and when I press it one of these guests won't be chosen at random and he won't move towards the entrance position and then towards his own position so let's click it and let's wait for someone to show up and there he is he's moving to the entrance position and then he goes to his own position here's another one he goes to the entrance and into his position yep as you can see everything is working exactly as we want to take out to the entrance position then to their own position now for our next step we want the building that the queue is connected to to be able to request guests from our Q and the Q should be able to send the guests that is in front so in here I'm going to create a public function which will return a guest object and call it get first in queue so in here we only want to return if there is actually someone waiting in the first position so if guest list dot count equal zero so there are no guests waiting here then we're going to return no if not then we do have guests waiting in our queue and we want to return the one that is on the guest list of zero however before we return him we have to remove him from the queue since he is no longer going to be waiting in our queue so going to store a reference to my guest which won't be the one that is on position going to remove him from the list and finally return okay so now we have a function that our building can call to request the first yes in our queue so in order to test let's go into our game hammer year to create another CM debug button on the UI going to place it on the right side of that button and to say get guest and the action that it will perform will go into our waiting queue and get the first guest in our queue if our guest is not known so if we have grabbed against then let's just move them to a position on the right side so go guess that move to our first position was new vector3 let's say 500 0 just move them away okay so we should now see a button pop up when we click that button we request the first guest that is waiting in the waiting queue if he does return if there is someone waiting in there we're going to move him to a position on the right side ok Here I am let's request a guest wait for him to arrive ok there he is and now let me click guest and there you go he grabbed the first guest from the queue and sent him away let's grab a couple more okay I have two guests waiting in my key let's grab the first one boom there he goes and now if I click I can silver up the second on but as you can see we have an issue here this guest did not move forward so I can grab him it works ok but he needs to reposition when someone is removed from the queue so in my waiting queue here let's make a private void and call it relocate all guests and I'm here I want to send every single guest to his own position so for in equals 0 and less than guest list count and I'm going to go out with the guest in that index and I'm going to move them towards the position list of the same index and in here when I grab the first guest from the queue let's relocate all others now let's go take a look at it ok Here I am let's have some guests okay so I have my guests in my queue let's crowd the first one and see if the others get repositioned there he goes boom that one goes away and the others move forward and there he goes and the others move forward and there you have it a very simple waiting queue where we can add guests to the queue and grab the one waiting in front in the next video we're going to create a test building to request guests and have them perform an action as always you can download the project files and utilities from unity code monkey comm if you have any questions post them in the comments and I'll do my best to answer them alright see you next time you