in this video I'm going to showcase a complete game made with unity dots the game is flappy bird which is relatively simple game but also involves some interesting logic which makes it a great project to do in dots as in learning experience this video is more of a showcase but let me know if you'd like to see a dedicated stepbystep tutorial on any of the systems alright let's begin hello and welcome I'm your code monkey and this channel is all about helping you learn how to make your own games with enough tutorials made by a professional indie game developer so if you find the video helpful consider subscribing so here I'm going to showcase the project that I built there's a link in the description where you can play it for yourself in your browser it also contains links to all the other elements used in the game so check it out to learn more about each specific topic so here is the game it's flappy bird so the player can throw almost a bird or I guess in this case the monkey you have pipes being spawned and they move to the left pretty much everything is done using dots entities the main exception is with the you are now if I pause the game and yep you can see there's pretty much no game objects so the bird is an entity it's controlled using a dot system of the pipes are spawned and moved with systems and that's prefabs the collisions are handled using dots physics and I have some dots events being fired and cut by the UI which is made with normal game objects this video is made possible thanks to these awesome supporters go to patreon.com/scishow to code monkey to get some perks and help keep the videos free for everyone one really interesting thing about the making of this game is how I manage to actually make a complete working prototype in just under two hours once I was on a flight so that tells you just how fast you can start working with dots once your brain clicks and you begin to understand the logic of hard work in a Down oriented way what took longer were all of the unique parts that I had to research so I spent quite a while learning how to fire events from dots and capture them in the UI I covered that in another video I also have to learn how to handle changing scenes and cleaning up the dots world and how to construct physics shapes which led me to learn about web assets which are also covered in another video as I said this video is more of a showcase so I'm going to play the game and show an overview of how it's set up but let me know in the comments if you'd like to see a dedicated stepbystep tutorial on each part of how the game was made ok so let's look at the final result it's a game flappy bird so I'm sure you're familiar with it the player controls a bird or in this case a monkey and the only input is just jumping the bird is always falling down and the pipes are always being spawned and moving the goal is to keep jumping and avoiding the pipes as I pass over a pipe you can see that the score increases you can see in the UI it's showing which is my current score now the more pipes that I passed the harder it becomes you can see the gaps becoming tighter which makes it more difficult and if I happen to hit a pipe if there you go there's UI showing the current score the current high score and some buttons I try or go back to the main menu press retry and it loads the starting scene and here I go yeah alright so this is the core gameplay loop and again pretty much everything is done entirely in dots the main exception is the UI which as of right now isn't really support in dots now I also covered making flappy bird using normal game objects in a previous video what I'm doing here is a very similar logic in many cases so if you found out that video based on game objects then you'll likely have an easier time following this video based on dots you'll be able to easily identify the logic and how it relates to the game object way of doing things okay so let's take a look at the project and how it works first of all over here is the game scene it's built in the way that dots game should be bound so right in here you don't actually see any game objects with a convert to entity script what you do see is a sub scene I cover it sub scenes in a previous video so check it out to learn more essentially all objects in a sub scene automatically get converted into entities so this is how you should set up a pure dots project put things inside of sub scenes rather than putting them outside and using the convert to entity script now right now the sub scene is closed so what we're seeing all the way in here is the objects as entities and in the latest version it added this very nice checkbox and by clicking on it there you go you can see that the sub scene has now been open for editing with this obscene open we can inspect each individual component and look at them as game objects so for example over here is the background and you can see it's set up as a game object with a normal mesh and a normal material and again you can see there is no convert to entity script because everything inside a sub scene automatically gets converted into an entity then the clouds in the ground are also just simple basic visual objects and you can see for example here on the ground there's a tag ground component and on the cloud there's the tag cloud component so this is how the movement systems locate these specific objects so here in the project file scripts I can see the ground move system and here it is as you can see all does is and entities with all of the tag around and just moves around that entity so this is how it identifies the ground entity through the tag component now for the ground it's just moving to the left until it reaches a certain point then it automatically teleports it to the right so by in doing so the ground centrally goes on for infinity so here we decide by side visible you can see that the ground is left Andersen's reaches in it snaps back and in here it looks flawless the same thing is happening with the clouds except they are moving slower in order to give the illusion of a parallax effect but yep there you get I also covered how to do a parallax effect using normal game objects in another video so check that out as well so here you can see that we have the background the clouds and the ground always just basic sprites then over here we have the bird you can see it as a basic quality material for the visual then we have a simple tag to identify it physics components to handle our collisions and finally a move speed authoring component so this is how the bird actually moves up and down you can see that the component just has a simple fold 3 then over here is the input system all it does is it listens to the spacebar and sets a value on the move speed component so you can see this is a very simple system then over here is the bird control system first of all you can see that it has an attribute in order to run after the input system and here what we're doing is just applying some gravity onto our move the airspeed component we apply that to the translation and then finally just has a nice effect the rotation is based upon the move speed line so as the bird jumps it rotates up and as it falls it rotates down so here it is jumping up and down and rotating just by pressing the spacebar so the bird is controlled internally just by these two systems now here you might have noticed we have something called game state being used here is the component it's extremely simple all we have is in a new and a field to store the state of that I know this is what keeps track of the total game State so it's either waiting to start before the player actually starts jumping then we have playing the game or the player is dead the way it's set up it's also very simple we have the generate authoring component and again over here in our sub scene we have a game object right here at the game state with our game state authoring component so that's it nothing else and since there's only one of these components in our world then we can play around with it as a easytouse singleton for example let's look at how the waiting to start works here is the dot scheme handler class this is just a normal system running some generic logic now the bird input system fires off an event whenever the bird jumps so here is on the input system we just have a basic event and we invoke it in here okay so here on this class we are subscribing to this event and running this function and when the bird jumps the first thing we do is check if the singleton exists which in this case it should always exist but just keep it safe now the way you use our singleton is first we call get singleton in order to get the singleton instance so then we have our component here then we just check our state if it is waiting to start if so when we have our bird jump then we switch it to plane and now here is one very important thing about Singleton's which is if you modify the component then you need to update the singleton with set singleton if you don't then all you're doing is modifying just this local copy so that's the singleton component that handles the main game State uncle for singleton is in more detail in a separate video so stay tuned for that now one crucial aspect about the game are the pipes here on the sidebyside view you can see how the pipes work essentially they get spawn right in there the pipes are the ones that move to the left and when they get into that position they get destroyed so you can see the player never actually moves he only moves vertically and all the time to go through him now here in the editor inside of our sub scene you can see that we don't have any pipes at all instead they are over here on the project files as a prefab I covered how to instantiate prefab entities in another video so check it out here what I'm doing is exactly what I covered in that video so there's this prefab nicely set up so it's the pipe it as a simple component and a box Collider then has the pipe head and pipe body and then over here on the sub scene there's a game object for the prefab entity home and in here it holds a reference to the prefab object then here is the pipe spawner system so this is what actually spawns the pipes so down here on our update the first thing we do is check our singleton we're only going to spawn pipes if we are playing then here which is counting down some timer and spawning a pipe gap now if you saw the normal game objectbased flappy bird video then of this shouldn't look very similar we just have our countdown timer then we complete a random gap height and gap size and then we spawn our pipe gap so the pipe cap spawns a pipe on top and one on bottom and over here is the function to spawn an individual pipe you can see the first we get the singleton of the prefab entity component which holds the pipe prefab we in Senshi ate that prefab as an entity and then we sent all of the values so we're here we're sharing the translation then we're going through the children because as you saw the prefab had two children for the head and body we position them accordingly to the size and the height then down here we set the scale and finally we set the actual physics Collider so this system is responsible so only for spawning the pipes then the other system is here the pipe move system which actually moves the pipes so what it does is it moves the pipes and fires off the event when the pipes pass the player I'll cover events in a bit you can see that it doesn't entities for each and just moves the translation of the pipes and again here it is side by side you can see the pipes being created they move to the left and they get destroyed now the player is jumping around and he dies as soon as he hits either the floor or the pipes now the testing for hitting the pipes is done using dots physics so again if we look inside of our sub scene we can see over here the bird has a sphere Collider and a physics body and then the pipe prefab also has a box Collider the pipe size is set up dynamically so that's also when the Collider is resized accordingly then over here I have an object with the very useful in physics debug display we can enable this and run the game and yep now we can see the physics representation of all of our colliders so you can see the bird with the sphere Collider the top and bottom colliders and as I move you can see yep all the pipes are being spun of them have the correct shape as soon as there's a collision yep there you go there's our game over let's look at the calm weather shape for the pipes here is the code were responding the pipe and then down here we're setting the physics for my other sheet now that's colliders actually store their shape inside of a blob acent I've covered mob assets in a previous video so check it out to learn more essentially blob assets are immutable containers of data so they cannot be modified that means that in order to change the size of our collider on the pipe then I need to actually create a brand new cone weather shape and assign it on the physics quality component it took me a while to figure out how to make a new Collider shape but here it is you access the class of the specific type of collider so in this case using the bathroom and concreate then pass in all the parameters so passing the box geometry which takes the size center orientation then for the filters I'm using the same one set Collider it gets converted automatically and the last thing is I wanted the colliders to be a trigger so I pass in the trigger flag so again this is how you make a custom shape in dots physics you access the class for the specific type of Collider it returns a blob acid reference and then finally you assign that one on to the physics and letter component so that sets of the pipe Collider then for handling the game over collision over here is the pipe hit system and you can see it contains a physics trigger job now I cover dots physics triggers in the getting started with dots physics video so check that out to learn more essentially there's this job looking for collisions between the bird the wall or the pipes and if it finds one of those collisions then it fires off this event now one very tricky part that took me several days to research during the making of this game or events I cover normal csharp events previously and if you've seen several of my videos then you know I use events constantly they are excellent for helping keep your code clean but events are also object based so that makes them very tricky when working with that oriented code after a lot of research I managed to come up with a way to fire off csharp events from dots code I cover that in the dance events video so check it out to learn more the underlying logic is somewhat complex but I managed to build the super nice and easy to use classes to handle vents for example over here is the pipe move system so this is where we're firing off the pipe past event which then gets used in order to calculate the score so here we define the event as well as a simple event component then we construct our dance events object and then down here on our update first we grab the event trigger this is the stroke that is safe to use inside of the entities for each and then inside entities for each we use that trigger in order to trigger the event and afterwards we capture the events and we fire off the normal csharp event so then the UI can hook into this and display the current score so this class took a lot of work to make it but by now it's really nice and really easy to use again check the full video to see how this works the pipe hit system here is checking for events in the exact same way it has a csharp event with its component and then we have the AI trigger events job over here we are triggering our event now I'm listening to the on pipe hit player event is the game over so that's handled here on this class it goes into the world grab the pipe hit system and subscribes the on pipe hit play event and then here it is that function so you can see that it updates the game state singleton in order to set it to dead and now the way that I control the rest of the game set is by either enabling or disabling various systems so here it is this function that handles a whole bunch of systems and just sets the enable to either true or false so when there is a game over all these yet set to false so for example the pipes planner system doesn't run so it's not going to spawn any pipes the bird controllers and runs it's not going to move the bird and so on and when we have the waiting to start then we set them all back to true again that's a stone development so I'm not sure if this is going to end up being the best practice but in this case it works just fine and here on this class we're also broadcasting a on game over event so this is a normal CTR prevent which is being caught by the yuan so here in the editor there's a UI setup and over here is the nice game over window it has game over windows script and over here is the game over windows script and down here you can see that when we have a game over we show the window play nice sound and showcase the score so this is pretty much exactly the same as it was in the game objectbased flappy bird project it just listens to the game over event and shows window now the UI is the main thing that is still done using normal game objects so in the editor you can see it's set up to in the canvas with normal game objects everything just normal as usual so all of them are based on game objects and all of the scripts are listening to the Sailor the warm through dots events right now there's no builtin way of doing UI in dots but using this approach works pretty great now lastly one thing I could have done in dots but didn't was the sound I haven't been following the progress of sounds and dots but I'm pretty sure they make sitted Emma was using it so it's certainly possible now it's sound in this game is handled using normal game objects so as I jumped over here you can see a game object with the sound object being in Senshi ated and undestroyed so as I go through the pipes if there you go it spawns and gets astray so just a normal game object to the audio source but technically you could also use dots for the sound as well okay so here is the complete project it's a fully working game and almost internally built in dots doing this project was a great learning experience for me to really put that to the test I look forward to doing a more complex Notts project in the future maybe something like a massive RTS could be fun either way here is a complete project that you can inspect yourself to see how dots is already very usable for making a complete game as I said this video was more of a showcase of the entire project let me know in the comments if you'd like to see a dedicated stepbystep tutorial on a specific system used in the game this video is made possible thanks to these awesome supporters go to patreon.com/scishow to code monkey to get some perks and help keep the videos free for everyone as long as you can download the project files and utilities from unity comic calm subscribe the channel for more unity tutorials post any questions I have in the comments and I'll see you next time