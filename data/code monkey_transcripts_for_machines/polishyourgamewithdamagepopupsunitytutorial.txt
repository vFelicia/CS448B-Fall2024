in this video we're going to create some nice damage popups to show how much damage the player don't the damaged popup will have various effects like scaling and fading to make it very satisfying let's begin hello and welcome I'm your code monkey and this channel is all about helping you learn how to make your own games with nf2 torrents made by a professional indie game developer so if you find the video helpful consider subscribing alright so this is what we want to create I have my character here that I can move around and shoot there are enemies being spawned and what we want is some damage pop ups when we hit them examine like that it pops out and shows the damage that the enemy took the damage pop up then moves away and vanishes it's different for critical hits and everything looks very great and very satisfying okay so this is the goal let's get to it okay so to do that we're going to first create a prefab that we want Senshi ate when the unit takes damage so let's make a new empty game object and in this the PAF damage pop up let's add the text mesh Pro component here is our text object let's set up to have a nice outline and change the color okay that's our prefab with a nice color nice outline and a nice number as you can see it's aligned on the left side on the bottom with wrapping disabled and over foil on overflow okay to use this as a prefab let's drag it into our project folder in there yo there's our prefab right now let's write some code first let's make a new csharp script this won't be our testing script just drag it onto any game object like that and let's delete our prefab from our scene okay now let's edit this script okay so in here let's just test spawning our prefab so for that let's do a private void start and in here we want to call instantiate to spawn our prefab now in here we need a reference for that prefab so let's go up here make a private transform for our pf' damage popup make it a serialized field so we can set it in the editor so here in the editor we can now drag our prefab reference there it is it's now instantiate using our damage popup reference let's put it on vector 3.0 and put quaternion that identity so it is not rotated okay so let's test and see if our prefab is indeed being in sin she ate it on these zero zero and yep there it is there's a prefab in sin she ate a non zero zero okay so now let's make a clasp to handle our popup so make a new csharp script this will be our damaged popup and we're going to drag this script on to our prefab so let's open the prefab here we are on the main damage popup and simply drag our script okay now let's open the script in here and let's start off by making a setup function so we do a totally void setup here we will receive the damage value that we don't set so an input the damage amount now we want to set our text so first we need a reference to the text mesh Pro object so we're going to grab that reference on our private void awake okay so we have the reference to our text mission we can simply go and set the text to our damaged amount you need to convert it into a string and just like that okay so now let's go back into our testing class and in here we instantiate the damage problem let's prep the reference to that or the damage popup and now we need to grab a reference to the script so the damage popup script is from the transfer market component of type damage popup and then we call our setup function so right now let's give it a value of 300 okay so let's see if our prefab doesn't need say 300 and yep there it is the prefab wasn't sent yet on zero zero and it does say 300 okay great so back in our code here well it's clean this up to make sure that all of this code is contained entirely in the damage popup class so let's make this class responsible for creating the prefab so in here let's make a public static this will return a damage popup and let's call this the create function this will be the function responsible for creating our damage popups so in here we're going to do exactly what we were doing in here so let's copy this code now in here the first thing we need is a reference to our prefab so for that I'm going to go into the game assets class so here is that class this is a class that I use in pretty much on my projects it allows me to have references to my assets anywhere in my code it was built in a previous video so check that out for an indepth look but essentially it's very simple there's this script with a static instance and the script is attached to an object in my scene so in this code I can add a new field so in this case I want a transform for the PF damage popup so I went the film to this class now I can go back in the editor and here you can see the reference for the damaged popup so I can drag my reference and with this reference set I can now go back into my script and here I can grab the reference from that class so game assets grab the instance and the damage popper so essentially this is a very good way to keep one object that holds all my references and be able to access those references anywhere else in my code so in here we have the reference for our prefab and here let's receive a vector3 for the position and an in for the damage amount so the position is what we're going to use in here to spawn our prefab any damaged amount is what we call on our setup and just like that this function is internally contained in this script so I can now go back into the testing code in here I no longer need this reference all I need in order to instantiate the new popup is going to the damage popup class and create a new popup so let's put it on vector 3.0 and again say 300 so let's see if the popup is still spawning exactly as previously and if there it is the popup will spawn and it is indeed in there okay great so our code is now much more clean and much more easy to use now one thing we probably want is for the popup to always be on top so if we go into the prefab in here on the text mesh pro component we can go into the extra settings and here we can sort our sorting layer so let's create a new sorting layer to put it on top of all the others here are the sorting layers and we simul create a new layer this will be the top layer which won't render on top of the default layer so now we can go back in here and down here set the sorting layer from default and put it on the top so since our characters are being rendered on the default layer this should make sure that our popups are always on top let's see and if there is there's my character standing behind the pump okay great so with that working now let's work on making the puppet move over time so let's go into the damage popup class and here let's make our private Boyd update so in here we move the popup up by going into transform dot position and we increase the position by new vector3 we don't move it on the X and we want to move it on the one let's define here a fold for the move Weinstein you move it up by that amount and x time down to time okay so this should move our pop up upwards at a constant speed let's test to make testing better instead of spotting one on start let's spawn one every time we click the mouse so let's make a protoid update let's check if input not yet mouse button down so when we click on the on left mouse button let's funny pop up on the mouse position so we go into damage popup and we create now we need the position and for that I can use a function from the code monkey utilities this function returns the current mouse world position as long as you can download the utilities for free from unity code monkey comm so with passing the mouse world position and then let's pass in a certain value so here let's put just a honey okay so every time we press the left mouse button we should be able to see a damage pop up on the mouse position and that pop up will also be moving upwards over time so let's see okay here we are here's my Karen and if I click give there you go there's the pop up saying the amount and it is indeed going up so I can shoot and if they're all going up and going up nonstop and they never stop okay so far so good alright so now obviously we don't want the pop up stone live forever so let's make them disappear slowly after some time so for that let's define a private quote this will be our disappear timer so this will store the number of seconds until the popup shoots start disappearing so on our update let's count down that time so we reduce it by time time okay and now if it is under zero then we want to start disappearing in order to disappear we're going to modify the text alpha so for that we modify the text mesh color so now we need a color object so for that let's also store it in here our private color for the text color and we're going to grab this color on our setup so we grab the color based on the text mask on okay so in here in order to start disappearing we simply go into the color and we reduce the Alpha by a certain amount so it float for the disappear speed and we reduce it by the disappear speed multiplied by time dot all the time and finally we set the text measure color to this text color okay so now finally all we need is to set the disappear timer so let's go in here and set it to one F so this time we won't count out in one second after one second has elapsed this code won't start to run and this code won't start to reduce the text color alpha so as to make the text disappear slowly so one final thing is to test if the text color the Alpha is under zero then that means the popup is completely invisible so we can safely destroy alright that you do it let's see so here we are and if I click there's the popup going up and yep there you go after one second it started to vanish in if I pause the game there you go there's no pop up anywhere to be seen so again I can spawn more and there you go after a while they go up and they do that yep there we go okay well so with the basic popup moving up and vanishing now let's have a nice difference for critical hits so on our create function in here will receive the position the damage amount and let's also receive a boolean for is a critical hit we're going to pass this over to the setup function now let's go into the setup function and here a ball for T is critical hit and now if it is critical let's increase the font size and set the color to red so first we set the text mesh dot font size by default it's going to be at 36 which is what we are currently using but let's do if it's not a critical hit so for a normal hit we set the font size to 36 and for a critical let's say 45 let's also set the text color so we can actually define the function in here so the normal color won't be this one so let's copy this hex code and here I can use a function from the utils class to get the color from string and I pass in the hex string so this is the normal color and nice yellow and for the critical hit let's grab a red cone okay this color shouldn't be good so let's copy this code and here instead of setting the text color we set the text mesh to the define text comment okay so that's pretty much it now we should have a nice difference for when we get a critical hit so now let's go into our testing code and here I'm let's define a poll is critical hit and let's only do a random so so we're just doing a random chance of 30% to be a critical hit so just like that we should be able to test let's see okay so here we are now if I click there you go there's a normal hit going up and vanishing and a bunch more hits and you have there you go that was a critical hit as you can see the font size is bigger and it is tinted in red okay great everything is working so far now let's add some more cool effects so first let's make the scale increase and then decrease so here now let's define our maximum for the disappear timer so we can do a different scale in the first half and in the second half so we do a private concert for the disappear timer max let's use the same that we were using in here okay so now we have the maximum and we know we are accounting down into zero so for that we can go into our update and here let's check if we're above half of the maximum so if disappear timer if it is bigger than the timer max multiplied by half so essentially we're in the first half of the pop up and lift up then we are on the second half so in the first half let's increase the scale and on the second half decrease it so on the first half of the popup lifetime we are going to increase the scale and on the second half we're going to decrease it so he's going to get bigger and then smaller okay let's see that effect okay here we are right click and there you go it gets bigger and then smaller okay now instead of moving up let's move them up and to the side so in here instead of using a float for the move Y speed and let's store a vector3 one set up let's define that vector so this vector contains both the direction as well as a spin and now on update let's move it by this vector instead of by the move Y speed okay and then let's decrease this vector okay so we move our transform by the move vector and then we reduce the move vector on every frame so I've said the valleys to make it some nice snappy movement so let's see okay here we are and when I click there you go as you can see it moved to the right moves quickly at first and then it slows down okay so far our effect is looking great now we still have one issue which is as you can see sometimes they don't always have the correct sorting so if I put two the second one should be on top but sometimes they don't go so let's see for that we just need to make sure that later popups go on top of earlier ones so we can simply go in here and create a private static end for the sorting order and on our setup we increase the sorting order then we set the text mesh Tori order to the new sorting order so every new popup will correctly be on top of the earlier ones so all that's left is to take all this code and apply it to our player so here is the player code here I'm doing your ray cast to see if I hit the any enemy I get the enemy that I hit then I calculate a random damage amount and check if it is a critical so it's in here that we can add our nice damage popup by simply going into the image popup and create for the position let's spawn it on top of the enemy so the enemy handler has a get position function let's pass in the damage amount and is critical and that's it as you can see it's very simple to add this extra fact into already existing code now let's remove our testing code and test out the player shooting enemies okay here's the player moving around and if I shoot into nothing nothing happens and I should the enemy any of there you go there is a nice damage popup showing how much damage enemy took and there you go and the effect looks very nice very satisfying and everything works exactly as intended I can shoot the enemies and yep everything looks great we got critical hits we got random damage and yep it all looks great so there you have it we created some very nice damage popups that we can easily add into our game the various effects of moving the popup changing the scale and making it disappear make the whole effect look great as always you can download the project files in utilities from Yenta code monkey comm if you liked the video subscribe to the channel for more unity tutorials post any questions you have in the comments and I'll do my best to answer them alright see you next time