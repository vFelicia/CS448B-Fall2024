hello and welcome I'm your code monkey and in this video we're continuing to make the demo man from Team Fortress 2 in unity now that we have the two primary weapons completed we're going to add limited ammo and the ability to reload let's get started ok so I have my demo man here he is currently firing sticky grenades we check and fire and explode on command ok and if I go into my cone here I can switch to my bouncy grenades and there they are they're bouncing off walls and everything still works the same ok great now before we move further we're going to refactor some of our code until now the player handler class was responsible to handle weapon firing but since we want to add more inputs to our demo man it makes no sense that I'm firing in one class and rest of the inputs in another so we're going to set everything up in our game handler class right here where we have the exponent burn X the player handler will only be responsible for playing the animations and handling player movement so in order to make things easier I implemented this interface in the player handler to expose these functions which we will use to handle our reload so we have a function can play animation shoot can play animation reload we can play the animation to shoot play the animation to reload and get the gun endpoint position this way we can keep on related logic in the same class so let's first go back up here and we're going to change from using the player handler on shoot to placing everything on our update let's take care of the primary weapon fire so in here if input dot get mouse button down of mouse button 0 so the left mouse button we're going to test if the player interface can play the animation to shoot then we're going to play the animation shoot and before that we need a vector 3 for the target position which we're going to go into the utils class which is part of the code monkey utilities which you can grab for free from unity code monkey comm so we're going to go in here and get the mouse world position that's going to be our target position so play the animation shoot point it towards that and instead of using this event since we're no longer our inputs on the player Hamelin in here when we play the animation to shoot we're going to spawn our grenade but obviously we need these values so for our shoot position won't be the target position and for the gun end point position I'm going to go into the player interface not yet gun and point position and yet we'll be on shoot since we're using okay so let's test it out and everything should be working exactly the same except right now everything is a lot more clean and we have our logic our input logic here in the exact same place let's test it out here's my demo man I can fire bounty grenades and everything works exactly the same okay great we have successfully cleaned up our code now for our ammo control we're going to leave that responsibility to the individual grenade classes so let's start off with a bouncy grenade and in here let's set up some static variables to hold our ammo so I'm going to start with private static int ammo which will contain our current ammo amount and let's also had a private Const int for our ammo max which in the case the bouncy Bernays will be for we can have at most four grenades at once so now in here when we are creating a new bouncy grenade let's reduce our ammo amount and let's set up some public functions to make sure we have enough ammo to be able to create our bouncy Burnette so in here I'm going to make a public static ball has ammo and it's going to return if our ammo is greater than zero I'm also going to have a public static void reload ammo which will simply set our ammo to our animal maths and finally a public static bull can reload which will return if our ammo is less than ammo max okay great we have all the functions implement our unlimited ammo system so let's go back into our game handler now in here before we actually fire let's test if we have enough ammo so if bouncy grenade that has ammo then I'm going to shoot and let's also go in here and set our starting value to be ammo max so we are testing if we have ammo if we do we create a new bouncy grenade and as we create a new one the ammo gets reduced so after firing four times this should return false and we should no longer be able to fire any more bouncy grenades so let's test and see if that behavior is correct okay here's my demo man I can fire one grenade grenade three grenades four grenades and nothing else okay great now let's set up the reload so back into our code here on our update we're going to test if my input got get King down of the key code R which is going to be our reload button so if I press R let's see if first of all if my player interface dot can play the animation to reload then I'm going to go if the bounty grenade dot can reload meaning if we have less than the maximum amount of ammo then we're going to actually really so going to the player interface not play the animation to reload give it the target position and now in here we can also send a action that won't be triggered when the animation completes since if we interrupt the animation we don't want to actually reload but when the animation actually completes this will be triggered and it will do bouncy grenade dot reload ammo okay there you have it when we press the our key we're going to check if we can play the animation to reload which essentially means if we're not in the middle of any other animation we're going to ask the class if we can reload we're going to play the animation to reload and when we finish playing the animation we're going to actually reload the ammo value okay so let's go back into our scene see if we can fire four grenades reload and fire four more so one two three four and I can't fire anymore I press the arm makes it real no animation I can fire two three four more yep there you go I can reload fire four grenades reload fire for grenades yep okay great so the bouncy grenade launcher is now correctly set up to handle ammo and reload so let's now take care of the sticky grenade launcher back into our code here and we're going to implement a very similar system that we implemented in here so for my sticky grenade instead of having a maximum of four it's going to have a maximum of eight going to implement these same functions and in here when we fire again reduce our ammo now the sticky grenades have one extra property you can only have eight active at once if you fire more than eight the first one is automatically destroyed so let's take care of that right now in here when we are creating a new remain let's test if we already have eight grenades available so if sticky grenade list dot count if it is bigger than eight we're going to explode the very first grenade so simply sticky grenade list up in X 0 dot explode grenade and then we're going to go into the list and remove at index zero so we're going to explode that grenade and remove it from the list so back into our game handler let's replace the bouncy grenade with the sticky grenade class and we're essentially going to use the same functions to test if we have ammo if we can create if we can reload and we're actually going to reload the only difference is in here instead of creating a bouncer your name actually just commented so we can easily swap between two PF sticky grenade okay so let's go back into our scene and see if we can successfully successfully fire a grenade and when we fire the ninth the first one should explode so there's one two three four five six seven eight and I can't fire any more so I reload and now the first one should explode boom there it is another one another one another one and I can click the right mouse button and they all explode we're gonna it again fire some more explode fire reload fire and the first ones go okay great so there you have it first we refactored our code to keep all classes nice and clean then we took the grenades we created previously and added limited ammo and reloading on the next video we're going to cover the island there melee weapon as always you can download the project files and utilities for free from unity code monkey comm if you have any questions post them in the comments and I'll do my best to answer them ok see you next time