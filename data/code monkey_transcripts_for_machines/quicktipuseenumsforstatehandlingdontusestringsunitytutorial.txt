hi there this is a quick tip for why you should always use the neumes for case handling a long time ago when I was getting started with game development I would use strings for almost everything so if I had some states on a character I would do a switch on the state string and he is various strain cases to figure out what to do this would work but many times I would end up stuck with a bug just because I wrote the case string slightly wrong or accidentally capitalized the wrong letter so in here I don't does match up with that state but if I put a capital on the D now all of a sudden it no longer matches and everything breaks so obviously strings are horrible for doing case handling so whenever you do need to do a code similar to this instead of using a string define a private room for your state and here you can define all of your values so for example an item in a attack State and our current state instead of being a string it will be of type state that way our compiler won't always make sure that our state variable always has valid values so in here obviously this is not valid we set state equal state that I don't and here on our switches instead of doing switch on a string we do on a more proper case state arrival and just like that if we now misspelled set of attack I put attack all of a sudden we get a compiler so by using your nomes it makes our code much easier to write correctly another very good use for in ohms is for example when defining item types so in here for example you should not do this if you have a class for the weapon you should not use a string for the weapon type so I'm here for to create a new weapon we would make a new weapon so in here this code would run but it would not be the correct way to do it so here in the correct way is example the same thing with it previously we define a family kinome and for a weapon type and inside this in home we put all the weapon types we want instead of having the orphan type of spring it is now of time what to type and again this keeps our code much easier to write since the compiler will help us if we do something wrong and that's it hope you found this tip useful alright see you next time