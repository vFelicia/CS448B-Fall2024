in this video we're going to make a very simple window to receive input from the player this is great for example for a high score table in order to receive the player name or in a store to input the number of objects but it will support passing a string with a valid characters and trigger an action on ok or cancel let's begin hello and welcome I'm your code monkey and this channel is all about helping you learn how to make your own games with NF tutorials made by a professional indie game developer so if you find the video helpful consider subscribing okay so this is what we want to create we have our very simple input window and we can run on it only with certain valid characters and click OK or cancel so when you do click any of those buttons we get a nice comeback so hit cancel there we go there's our comeback put a number hit OK and there you go there's our comeback one example of this news is over here we have a nice high score table this was actually created in a previous video so check that out if you want to know how the high score table works and over here we have a button or to submit a score so click on it and there you go there's the nice input window asking for the score so in here I can only input numbers so if I try to press each character yep I cannot press any characters I cannot input any letters however I can put a score so let's put and I press ENTER and there you go now it's asking me for a my player name and now here it's limited only to capital letters and just three characters so if I put numbers doesn't work I have to put my three uppercase letters now I hit OK and there you go there's our updated score showing you up on the table alright so this is our goal let's get to it ok so here we are in our staring scene it's empty all we have is a background texture and over here the UI is set up just a basic UI setup with a camera and a canvas if you want to see how I set up my UI check out the link in the description so in here let's begin by making our input window visual so we're going to start off make a new game object call it our UI input window then in sign let's add a UI image for our background and now let's make our input film so a new UI input field ok here it is this is the main component that we're going to use in order to receive input from the player okay so far so good now let's add a title text object to make it look like a UI window the tunnel will also be customizable and now finally let's just make two buttons one for the okay and for the cancel okay we have the buttons now in order to make the buttons work I'm going to use the button UI component from the code mock utilities which is long as you can wear for free from unity calm calm you are free to make your own button script if you want but this one is home phone since it already has a bunch of features and like for example some hover behavior alright so this is pretty much our UI visual setup we have a title and input field and two buttons now it's set up in here we have our background our input field then the turn on background then the tunnel text then we have each button which contains an image for the button background and the button text and if we run our scene there you go this is how it looks like so we have the input right there okay great now let's get to work on the code over here on the scripts folder and let's create a new C sharp script and call this the UI input window drag it on to our window alright and open okay so here let's begin by making the window show and hide alright so here it is very simple we just set the game object to active as true or false that shows our hides our window and then on our private void awake let's our off hidden all right so far so good now let's set our scene up for testing so by here in the editor on the canvas and let's make a new game object call it our UI testing and in here let's just make a button which is going to pop up our window so duplicate this button put it on the UI testing let's call this the submit score button that's what we're trying to test and in here submit score alright there it is very simple now let's make our testing script so a new csharp script drag it onto the game object and I'm here let's get the reference to our input window and then let's go to our private void start and here on let's set our button in order to show our window alright so that's it so when we click on our submit score button we're going to run our Intuit window now in here in the editor all we need to do is go into our UI testing and drag our input window reference alright let's test ok here we are and yep the window is hidden now I click on the button and there you go there's our nice window awesome ok so now we have our input window showing and hiding with a testing script in order to test it so now let's deal with the actual input code over here on awake let's grab reference to our input field the buttons and our channel tags all right we have all the fields that we need and now down here on the issue function let's receive the title and the input text that we want by the phone and we simply set both of them alright that should do it now back into testing then here we need to call Show with some parameters so let's pass in our test title and a random string all right let's see okay here we are it's hidden click and if there you go there's our nice test I don't and our nice input string awesome okay now let's make our two buttons work so in order to define how our buttons are going to work over here on the show function let's receive two actions now an action is inside using system an action is just a simple delegate that the returns know and a delegate in case you don't know is just a way to store a function in a variable so here in the show let's receive just a simple action for our on cancel function and let's receive an action with a string parameter for our on okay action this is how we're going to get comebacks from our input window and then here we can simply use these actions directly on our buttons so for the okay button on the click function we simply set it to call the on okay and we pass in the current input field dot text all right it's that simple but we also want the window to hide itself so let's first call hide and then we can't be on ok and then for the cancel button do the same thing we call hide and then we call on cancel all right that should do it so we now have our function which receives an action on cancel and one on ok so back in our testing here let's add our comeback so first the on cancel then we have the on ok can okay it takes a parameter say string input text okay to test it out let's spawn a popup we're going to use ECM debug class from the utilities in order to trigger a text pop up on the mouse position and this one let's say cancel and this one let's say ok all right that should do it let's test ok here we are in the window is hidden all right click and there's our nice window ok now click cancel and there you go there's our cancel and the window was hidden now show it again now click OK and there you go ok and receive the input so change the input to do something else click OK and yep there you go it constantly does correctly so we have our compacts correctly working awesome so now with this working it's time to validate our input so here on the show function let's receive a string for our valid characters so these are the only characters that we can input on this input field so the way we validate is by going into the input field and here we have a film for on validate input here is the delegate on that field we have a texture index and added character and now here in this function we validate our character so let's make a proper function for that down here a private we're going to return a character and let's call it validate char and here we will receive a string for our valid characters and then the character that we want to add so here the code is very simple we just go into our valid character string and we do a index of our added character and if the index is not minus 1 that means that character has been found inside our valid characters so the character is valid so we return our added character and if not then the character is invalid so we return an empty character all right so that's it that's our function we pass in evil characters and our character and it's our valid or invalid so we can go here and we use this alright so that's it we make sure that every character typed is inside our valid character string so now let's go into our testing code and in here for example let's try making it only valid for numbers so for the event characters I'm going to pass all the numbers and by default let's pass in nothing and now let's test ok here's the window now I try to press a normal letter and get there you go nothing is happening nothing is inputting now I put a number and there you go I can write a number but I cannot write characters so we can now selectively decide which characters should be allowed on our input field awesome now one small thing let's add a number of max characters so in here very simple we just receive an int let's call it our character limit and then we simply set key input field character limit to be our character 1 so here on let's try just three characters and let's see okay here we are try 1 2 3 and yep I can't type anymore okay right now another thing let's add our keyboard input for the and cancel so we're here on the input window let's also make a front throwing update and in here let's seewe if input and get key down of the key code return or input get key down of the keypad enter all right so if we hit the return or the keypad enter then we want to simulate a okay so we can go into the ok button and manually trigger the click function and do the same thing for the cancel all right so we now have keyboard support let's try okay here we are let's first press escape and there you go there's the cancel now let's input something and press Enter and there we go we have our nice input being supported with the escape and enter keys right great ok so now our input field is pretty much done we can select which characters are valid how many we can write and get comebacks on ok or cancel now let's polish this up a bit first let's make our class easy to use by making it a singleton so we're here I added a static instance field and it gets set on our white and now in here instead of having these functions public let's make them private and instead we're going to expose the static versions all right that should do it so now if we go back into our testing we no longer need to pass around a reference to our UI input window or rather we can use the static function instead just like that right so this makes it much easier in order to use our input window anywhere in our code so let's see here we are and yep everything's on works again so click OK cancel and everything ok great now let's have a UI blocker so we're here I've made a new UI game object stretch to occupy everything and it's just a simple pie image what this does is it helps us block so for example we're going to put the input window then the marker and then the testing that way when the input window is active we can no longer collect it behind button so do that let's make a simple script all right so here it is I made it a singleton examine like the input window and now here on the show I'm also going to do something interesting which is go into our transform and call set as last sibling this won't put it at the end of the hierarchy which in the UI means it won't show up on top of everything else so let's go into our testing and here before we show our window let's also go into the UI blocker and culture ok let's see ok here we are we can see the button and the Parker is not active and now let's click any up the blocker showed up and as you can see if we pause it went to right to the end so it's on top of everything else so it means we are correctly blocking our submit score button however we are also blocking our input so let's fix that here on the input window on our show let's do the same thing called transform set as last civil ok here we are now click that now that button is not likable but these two are ok great so now let's set things up in order to first input a score and then a name so on our testing let's look at this code so first we call the UI blocker ok then we call show static and first we want to input the score and the score is only numbers but let's put a maximum of 10 characters now when we click on the cancel then we're nothing to do anything so just call the UI blocker in order to hide it however when we click on OK over here we have these core text so with our score we want to show the input again but now for the name so let's again call our UI input window and now we want the player named for the develop characters in here let's make the player only use uppercase characters now for the character limit let's make it only three characters long and now for the functions so if we hit cancel again we do nothing so let's just hide the UI blocker however if we hit okay let's hide the UI Walker and then in here we have our name and score all right that you do it so as you can see we have our input window first grab a score when we click OK then we get another input window asking for the player name let's see ok you are click Submit and yep now it's asking for my score and in here I can only type numbers if I try to put letters doesn't work all right so let's put a score now if I click cancel or press escape there we go nothing happens it goes back ok great so let's do it and put a score now let's press ok and ok now it's asking me for the player name and here again I cannot put in lowercase I cannot put numbers I can only put capital letters so put a name and I can only put 3 characters and hit OK and there you go there's our name and our score all right so everything is working great awesome now one thing we can still improve is to make it easier to input numbers so on the input window over here we have our show ok works great however let's make another version that deals with ends automatically so you make a public static void show static just the same we receive a string for the title string and then instead of receiving a string for the input string let's receive an int for our default int value then the characters were going to automatically make it for the character and limit the same and then we're to have an action for the on cancel and an action which won't take a in parameter per hour on okay so here what we do is call instance dot show drink fasten details ring then let's pass in the default in dot to string then for develop characters and let's pass in just numbers and I'm here on the own okay is where things get interesting so in here I'm let's try to automatically parse our string alright so here there's a much more simplified version in order to deal with an input window that only receives numbers so in here when we receive a string for our input text we try to parse it parsing is converting a string into an end if possible so if it is possible we call on ok with our parse int and if it's not possible to parse it then we call on OK with default so now in order to see how useful this is let's go back into our testing and here for the first one we just want to score so let's use that version instead so here we pass in the default end and the default on score let's say it's zero and then we just need to pass in the on cancel and the on ok except the uh no canes that are receiving these cortex receives an end for our score alright so there it is we made a very nice helper function in order to help us input only integers so with that done now let's apply everything to our high score table ok here it is the high score table again this was fully created from scratch in a previous video so check the link in the description to see how it was made and now we're going to use the input window in order to add another score to our table so we're here I'm simply going to add a serum ice field for our high score table and then here when we have the name and the score just call and high score entry that's envy score in our name alright let you do it let's test ok here we are with our high score table and a bunch of scores now let's click Submit score now let's make sure we are at number one okay now a play your name ok and there you go there's our new high score add it to the top of the table so we can add any score we want press ok and there you go we are now receiving our input from the player and patting it into our nice high score table right awesome so here you have a very nice and simple but also very versatile input window as you saw we can easily limit the input characters in order to receive only numbers or a certain type of letters the way we set up our code also makes this class very easy to use and add to your own projects so go ahead and implement this in your own game and start asking your players for input as always you can download the project files in utilities from unity code monkey comm if you liked the video subscribe the channel for more EMT tutorials post any questions you have in the comments and I'll do my best answer them alright see you next time