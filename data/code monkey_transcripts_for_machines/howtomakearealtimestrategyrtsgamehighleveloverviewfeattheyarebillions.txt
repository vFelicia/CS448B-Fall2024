hello and welcome I'm your kodm here let's see a HEV overview on how to make an RTS game I will cover the basic Mechanics for how pretty much any game this rounder is made and how I would build them then I'll also cover some mechanics more specific to this game that I've been playing they are billions it's an excellent game where the clue is actually in the title you build and defend your base from billions of infected zombies it's really awesome I played it back when it came out and I'm really enjoying playing it again the reason why I'm playing this game again is actually for research as I'm actively planning my upcoming RTS course this is going to be my Unity dots course I'm really looking forward to finally making a game using dots the proper way and this genre of RTS plus City Builder Plus defense this is really the perfect genre for learning all about dots so if you're interested in learning all about Dent dots learning how to use it as part of a complete project or if you're looking for a guid path on how to make an awesome RTS game then check the link in the description the course page is mostly empty since like I said I'm very much in the early stages of planning the course but you can sign up with your email and I'll let you know when it's done and since that is going to be a DOT course it is also going to be an intermediate sladan course so if you want to prepare for it then check out my C course that will take you from beginner to advance okay so here in this video Let's see a high level overview on how to make a game like this I made a page on the website with links to the various tutorials that I'm going to reference it's linked in the description many of these are topics that I have covered in detail previously so if you'd like to make a game in this genre then hopefully this video and all these links will help point you in the right direction and if you enjoy this format then check out my other videos in this playlist where I already covered how you could build various games I've covered the city Builder T based strategy sty action and a bunch more by the way there's a sale going on right now on the cinty store if you're a fan of their style you can get tons of packs to make an infinite amount of games so you can make a military game maybe some gorgeous Arc fantasy maybe a Roman or a Spartan game you can make some awesome modular mechs or build a really nice UI they also have flash sales with 70% off so right now it's their apocalypse pack then coming on later is the SciFi worlds and then fantasy Kingdom definitely browse the sale to see if there's anything that fits whatever game you're working on what whatever game you're trying to make the link in the description is an affili link so if you buy anything through there it's the same price to you and I get a nice commission okay so let's see a hell of overview on how to make a game just like this one here is the mechanical list that we're going to cover so naturally we've got Union selection we need to do some kind of path finding there's going to be fog of War a bunch of buildings we need to do some resources we need to spawn some units handle some horde zombie AI the world map and so on so let's start off with the absolute Basics unit selection this is core for pretty much any kind of RTS game usually you can click on the mouse then hold it to make a square and basically it selects all the units inside it this is something that a lot of beginners have trouble with but it's actually quite easy to do the simplest option is really would just some Physics queries inside the physics class you have all kinds of functions and for this use case the main one is just the overlap box this one returns anray containing all the colliders within a certain box area so as long as all your units have some kind of collider then all you have to do is when the player clicks you calculate the lower left point the upper right Point complete the Box inside of it and it will find all the units within that area that's really it it's super simple I actually made a tutorial on how to do this in 2D in 3D it's very much the same thing just different functions then when the units are selected you want to move them so for that you need some kind of pathf finding and when it comes to pathf finding in most games you usually Implement ASR pathf finding I made a tutorial on how to implement that algorithm that one is really great for culating a point from point A to point B however in a game like an RTS where you have hundreds or thousands of units culating the path for each individual unit that can become really expensive it is doable as long as you write some really efficient code some of the old school RTS games did use Asar pathfinding however in RTS games with lots of units one alternative pathf finding algorithm is called flow field pathfinding this really excellent video by Turbo makes games covers the overview on how the algorithm works the difference is how in AAR usually have a start and end point whereas in flow fields in this you just have an end point you define the end point and then calculate the direction from each grid position of where it has to move in order to reach that final end point basically this approach means you only need to calculate the pathfinding once just to find the target endpoint and any unit anywhere in the entire world can figure out how to get to that endpoint the only thing the unit AI need to do is really just follow all the errors which when you have literally thousands of zombies when you have that definitely saves a ton of time as opposed to calculating the path fing from point A to point B for each individual unit then another crucial RTS mechanic is fog of War so in the beginning you have no visibility outside your base and then as you explore you gain some visibility in those areas and there's usually also two types of fog of War there's active this one includes what your units can see right now and there's explored fog of War this one includes all the areas where your units have been at some point in the past now for implementing this as always there are many methods for example I implemented fog of war in my first team game Survivor Squad and the way I did it there is actually in an interesting way I basally made a grid system on top of the world and as I was calculating the line of sight for each unit I would see what grid positions that unit can see and then I would Mark those grid positions either visible or invisible then after that's done I really just had an algorithm that went through that grid system and Dally generated the mesh that only contained all the hidden grid positions so that's one way to do it and I got it working with some Prett fast code basically just generating a black mesh on top of everything and one reason why I got it working so fast is because I used strs instead of classes I actually talked about that story in my C course on the electure on strs the difference between strs and class is actually quite important especially in terms of memory but another alternative is to use a camera and a render texture in case you don't know this is how you can render what the camera sees onto a texture I made a tutorial on it the example that I Showcase in that tutorial for render textures is for making a mini map but you can use that exact same method for making a fog of war effect you can place the camera on top of your wor looking down and then for each unit for each building you add a circle Sprite on top of it and then you make sure the camera only sees that Sprite and just like that you have the texture with your fog of War shape then you can just render that texture on top of the world and that's pretty much done for making the persistence fog War you can just set the camera to don't clear meaning it is not going to erase everything on every frame so that way the texture basically grows and grows over time so with either of those methods you can get a really nice fog of war effect then another thing almost every RTS games is buildings of some type that you can place for this you simply get the mous position and spawn the building prefab on that location so in technical terms it's actually quite simple simple now one game design question that you have to answer yourself is will your game be grid based or free form both options are perfectly valid I've covered both options and tutorials on this channel it's really up to you to decide then for those buildings those building prefabs they are going to have some kind of logic and this can really be a simple as just attaching a script directly to the building prefab that logic can be responsible for things like unit spawning resource generation I'm going to talk about those in a little bit but the buildings can also simply exist so just exist no logic like for example in this game all the houses they have no logic all the game cares about is that the house exists so there's also a place for quote unquote dumb buildings in your RTS game design now along with that you are going to have various building types and as to how you define those building types the simplest way is really just with a script M object this is a really awesome Unity feature it's how you can define a structure and create objects of that type that exist in your project files these are great for representing pretty much any kind of data like for example building types I've also used scripal objects for defining a crafting recipe or I've used it for defining weapon parts in my weapon attachment system so here you can Define just a script M object for the building type and in that object you can sort all the resource requirements in order to construct that building and how long it takes to build than any other data related to that building then pretty much all RTS games are going to have some kind of resource manager this is actually pretty simple to do you really just need to create a resource manager class that sores something like maybe a dictionary to store all of your resource amounts then when placing that a building just ask resource manager if there are enough resources to afford the cost and if so then spend those resources and just spawn the building making a resource manager is actually really very simple it's all just numbers linked to a certain resource type and for those resource types you can once again justify them using stal objects then of course if you have resources you need some way to generate them this is another game design question for some games like Age of Empires or Command and Conquer for those you have units and those units physically go out and manually gather each resource so that's one option in that case the resource generation is handled pretty much by that villager AI but another option is like in this game where the resource generation is automatic it's really just a simple flow time M that is working on the building logic when that timer elapses it just instantly adds some resource to the resource manager that's really it then another thing buildings can do is simply spawn some units for this you first just need to handle the logic for clicking on a building so this can be a super simple rcast then selecting the building probably brings up some kind of UI menu I would handle that connection using an event so basically when you click on the building it fires off some kind of event then you have a separate UI menu that listens that event when building is clicked and then shows itself and on that UI menu you can click some buttons to add a unit spawning to some kind of queue and for starting that queue you can use a simple list or an array or you can literally just use a c q this is a collection that c has that quite a lot of people actually don't know exists I covered it in a lecture on other collections in my C course this is a fivefold collection meaning first in first out that's exactly what you want for this kind of RTF spawning queue then for spawning the unit is really just another simple flow timer when timer is left just spawn the unit prefab and give it some kind of preset move position next for mechanic specific to this game we have the hord this is the main selling point for for this game how you can get attacked by literally thousands of zombies all at once in technical terms it's actually quite simple the hord is triggered that certain days so a level designer would Define what day spawns what horde this also means that the game has some kind of time of day system that can be literally just a simple float increasing on every time the time then it's up to you as developer to Define how long let's say a day in your game is in real life could be something like 30 seconds or maybe one minute then as a day takes from one day to the next at that point you can fire a c event and have some kind of hord manager class listen to that event and see if it is time to spawn the horde and for defining the hord data for that you can literally just have a map prefab and inside you can place empty game objects to Define all the hord spawn positions and then you can just link that position with something like perhaps a scripal object where you define the composition of the horde so how many slow zombies how many fast zombies how many big ones and so on so the hord is really just spawning tons and tons of zombies at preset points and level at preset times so in technical terms really simple this really just a game design sort of thing and of course those zombies need to do something so you need some kind of zombie AI thankfully this is actually pretty easy zombies are intentionally dumb so they are really perfect for making some super simple AI in fact this is actually the main reason why my first team game Survivor Squad why that game had zombies in it initially my goal was to make a SWAT game where he controlled a SWAT team and basically had to breach a house and take down all the bad guys but since I wasn't very skilled back then back then I could not make some compelling human complex AI so after a while I really just SW the game to be all about zombies which greatly simplify the AI requirements zombie AI is usually just as simple as having a zombie finds a Target and just moves straight to that Target so this game that means just follow the flow field that targets straight towards the HQ and while moving there constantly look for nearby enemies or objects for that you can literally just do a physics query to find all those objects I spoke about multiple ways to find Targets in a previous tutorial so the zombie really just follows the flow field and if it finds something in between then just stop and attack that Target when that Target is dead then just keep moving towards the HQ so making zombie AI is really super simple if you have issues with running some good AI for your game then the simple approach is really just swap your human enemies for some zombies and just make some simple Z then almost every RTS game has some sort of villager or resource gatherer unit the controls for that is really the same thing as for the soldiers click to select and click to give some orders now I actually made a video a long time ago on how to make a simple resource Gathering unit that video is super old but the logic there is still solid it is still how I would do it nowadays villagers just need to know when the player selects a specific point and then just move between that point and the resource Point gather the resources and drop them off at some drop off point so in terms of villager AI it's also super simple although in terms of game design it is optional for example in this game this does not have controllable villagers they do exist but it's really just a visual thing you can't control them they just move around automatically just to make the game seem a bit more alive they move around and look like they're doing something but resources are all generated on timers so it's all in the buildings it's not in the villagers speaking of resources let's look at the map now the map has resources like trees water stone and iron and in terms of creating the map you always have two options you can do it manual or procedural generation both options are perfectly valid on the manual side you just have to manually place out all the rocks and imov all objects literally just move the prefabs and place them manually you can Define which of those prefabs work as resource positions or in terms of procedural generation that's an entire topic that I definitely would love to cover in detail in dedicated videos sometime in the future there are so many possible options you can do it based on noise you can just stag tons of noise textures on top of one another in order to make something interesting or you can do it based on wave function collapse this one is a really interesting method while also being relatively simple where you can literally just pick a random point in the map see if it's empty if so spawn some resource there so there are tons and tons of ways for dynamically generating Maps but if you want to create some kind of campaign for your map if so then chances are you probably want some manually created Maps then for some kind of skirmish mode for that you can have randomly generating then this game also has a really nice world map this is where you actually pick the next mission in technal terms is really super simple just spawn some 2D elements and listen to clicks on them then for drawing these curve paths for that you can literally just draw texture or if you want something a bit more adaptable for that you can Implement a simple spline either Implement your own like a cover in tutorial or actually nowadays Unity has a spine package so you can just use that one then for smoothly revealing the path for that you can look at my tutorial for how hes doesn't it basically us a particle effect in order to draw the path as it moves and then simply uses all those particles in order to make a mass to make the actual path reveal itself and finally the most important thing in any RTS game which is performance RTS means tons of units which means heavy on performance so this is something you constantly have to pay attention to if you're making something like a simple Adventure game you can write some pre sloppy code and it will still run more than fast enough but on General like this if you want to have tons of units you definitely need to keep performance in mind at all times you need to get really good at using the profiler in order to learn how to find hotpots in your game and then learn how to improve the performance within those hotspots so learn about for example how a four is faster than a 4 in learn about how to avoid generating garbage every frame learn how shrugs can be faster than classes and so so you have to learn all those tricks in order to make your game super performant and of course speaking in terms of performance you also have Unity dots it requires a different way of thinking you need to think in a data oriented manner as opposed to an objectoriented manner but just by doing that you get a ton of performance by default dots is absolutely perfect for making these kinds of games RTS games so if this is your genre you'd like to make then definitely learn how to use dots like I mentioned in the beginning definitely stay tuned for my DOT scores okay so that's a hell of overview on how to make an RTS game using Dr buildings as an example I made a page on website with all of the tutorial links that I mentioned hopefully with this high level overview and with all of these tutorial links hopefully these can help point you in the right direction for building game just like this and like I mentioned the reason why I've been playing this game is actually for research for my upcoming RTS game course it will be my Unity dos course so if you like to learn how to use dots how to use it in a complete project or just how to make an RTS game if so then check the link description and sign up with your email I'm still very much in the early stages of planning this whole course and when it's done I'll let you know and since dots is an advanced topic I will assume you have at least an intermediate level of knowledge so if you don't have that or if you want to get a refresher then check out my C sh course all right thanks for watching and I'll see you next time