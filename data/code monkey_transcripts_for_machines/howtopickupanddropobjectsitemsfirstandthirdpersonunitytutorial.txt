hello and welcome i'm your code monkey here let's learn how to pick up and drop objects we want to physically pick them up so we don't want to just click and grab the object and see it vanish from the world and appear in a virtual environment instead we want the object to always stay in the world this one is great for making games where you want the player to feel more connect to the world basically the more things you keep close to reality and the more away from ui elements the more you do that the more immersive the game becomes or simply this is also great if you just want to let the player grab an item or object and move it to a different place i'm going to cover this tutorial in first person but it works exactly the same in third person and i'll include both demos in the project files also it's going to be using physics so it feels really nice if you prefer a more guided path with stepbystep lectures then check out my complete courses learn how to make a builder defender game using csharp or learn how to make games internal using visual scripting perhaps if you're past the beginner stage and want to make the jump to advanced then check out my turn based strategy course to learn how to manage a more complex project and write some good clean code or learn all about unity with the ultimate unity overview course which contains over 15 lectures each covering a different two more feature of the engine i'm always available in the q a section answering your questions every single day so check them all out with a link in the description alright so as a start here i have my character walking around in first person for controlling it i'm using the official star assets made by unity there's one in first person and one in third person i cover them both in another video they are really awesome and canola free so i got that one i just went through it refactored the code to match my coding style so with this i have my player character i can walk around i can sprint and i can do anything for the visuals these are from the polygon shops pack it's a really awesome pack with tons of props tons of objects so it's definitely perfect for this video there's a link in the description if you want to get it so over here i've got my character and my character has physics and i also have physics of these objects so i can just push them around and up here on the counter i've got the muffins that i want to interact with and again they also got physics so i can push them around and throw all of it to the ground then i also have over here a nice bucket and a real nice shopping cart so the goal is to pick up the muffins and put them on the cart so let's do that and the first thing we need is to identify what we're looking at so if i aim towards that muffin how do i identify what is right behind the player cursor for that as you can imagine we can use a raycast so let's make a script to handle that logic so let's make a new uc sharp script called the player pickup drop let's find the player game object which is here my first person controller with all the various components so let's add the script okay so here let's begin by first just listening to input so let's make a private void update and on update let's listen to a button press so input get key down and like in so many pc games let's use the e key to interact okay so when we have this we're going to fire raycast so physics.braycast this takes an origin and a direction now here we have the game in first person so we want to fire the raycast from the camera position and pointing straight ahead however here we need to make sure we don't use transform.position the reason for that is because of how the player is set up so here the player has the origin on the bottom but we really want from the camera so we're going to need a reference to the actual camera game object this is what we're going to use as the starting position and the camera forward as the direction so up here let's add a serialize field let's make it transform for the player camera transform then let's just comment this out just so the code compiles so we can drag the reference here in the editor there's the script let's drag the main camera reference okay and now here on the raycast let's use the raycast starting from the player camera transform.position and pointing towards the playercam transform dot forward so this is the forward vector then let's use this version of the function so first we need a raycast hit to get the data so our rake has hit then we have the max distance we want this so we don't grab the objects from too far away so over here let's just define a float for the pickup distance and let's put it at something like two units so over here we use this and finally we just have the layer mask let's call it pick up layer mask and let's define it up here so we can define another serialized field make it of type layer mask okay so with this now in the editor over here we basically have two options we can either add all of these objects and put them in its own layer so put on the objects that we want to grab on for example the objects layer or we can go with the opposite approach which is pretty much just ignoring the player and selecting anything else let's go with that one so we don't have to modify all the objects so over here on the first one controller for the pick up layer mask as you can see the player is already on the layer player so i'm going to select everything and then just remove the player okay great so with this this raycast is going to hit everything right in front of the player's camera as long as it's within the pickup distance and it's not on the player layer so if we have this collision so let's do an if if we have let's just do a debug download just to see what we had so go into the raycast hit and let's grab the transform okay let's see okay so here we are looking around let's look at this muffin press the e key and yep there you go it does identify the muffin okay great however now if i also aim at the floor and i press the e key yeah there you go it also identifies the floor so everything is working correctly now we just need to actually identify the object behind it for that let's make a script to identify the object and run the grab logic let's create a new c sharp script call this the object grabable let's attach it to the muffin now this muffin is a prefab so i'm going to go inside the prefab so it applies to all of them so just drag the script that's it right now there's no need to change anything on this grip just make sure it's attached then here on the script we have our rig headset so we can just do an if let's go into the rake acid transform and do a try get component let's try to get that component that we just created so an out object grabbable for the object grabbable so this will test if that object that we collided with if that does have that script and if so again let's just do a quick look just make sure the logic all works just like this let's see so i'm here and if i look at the floor and press the e key nope nothing happens i point towards these objects nothing but i point towards this muffin and if there you go it does identify it and since i applied to the prefab all these other ones also work as well all right awesome so we have this working now we know that the object under the mouse is grabbable now let's handle the grab and hold logic so first let's think of how we're actually going to want to handle that we want to grab the item and pretty much hold it in front of the player so for that we need to know where we want that object to be held one approach would be to just use math to calculate a point right in front of the camera so we could just use the camera position and the forward vector and calculate a point right in front but perhaps a more adaptable method would be to define a transform to act as that point that way it makes it super easy to edit so over here let's create an object however here we also have another design question which is do we want the objects to move as the camera moves or only as the player moves both of them are valid options really depends on what you want your game to be like in this case i wanted to move as the camera moves so for that i'm going to add the object as a child of the main camera so over here let's create a new empty game object call it the object grab point then for the position let's position it in front of the camera so the camera is pointing there and let's push it a bit on the z axis so maybe about this maybe about one on the z axis we could also have set it a bit to the side if we wanted but let's keep it straight in front so that's it just a transform component we don't want any visual at all so with this point now let's go into the object wrapable script and over here let's make a function to grab it so we're going to make it public so we can call it from the player let's make it a void and call it grab and as a parameter let's receive the transform for the point so a transform for the object grab point transform and now on the player script so let's go over here to the player script let's add another serialized field let's make it private transform for this one let's call the same thing so the object grab point transform and here in the editor let's write that reference so we want that transform okay now with this over here we have the object graphical so let's go in there call the grab function and let's pass in the object grab point transform okay so we're passing in the exact point and on this function we really just want the logic to move the object towards this point since i wanted the object to have physics i also added a rigidbody component so let's use that to move the object first of all we need the reference so let's grab it so on a week we just grab the rigidbody reference then let's store the object grab point so up here make a product for this and then when we have the function let's update that point and then finally for moving it since we're going to be moving the object rigid body let's do it on a private void fixed update we're going to first test if this object is not known so the object graph point transform if it is not known that means that we have some object so we should be grabbing if so let's go into the object rigid body and call the move function the move position over here this takes the position where we want to go to so let's go into the object where point transform.position okay so that's it just like this it should already be working so let's see so here we are let's look at the muffin press the e key and if there you go it does grab it okay great so it did work however as you can see it's quite a bit odd the issue is that the gravity is constantly pulling it down so we can fix that by pretty much disabling gravity as soon as we pick up the object so when we have the grab let's go into the object rigid body and call use gravity and set it to false okay now i can look i grab any of there go it does pick it up okay good however it's still a bit too janky look at that that is very very jittery basically moves constantly all the time we can make it much more smooth by smoothly setting the target position instead of setting it instantly and for that we can use the super useful alert method that i covered in other video really easy way to add any kind of smoothing to any object or variable so over here we're going to use a vector3.lerp and we're going to learn between the current transform.position and the target position which is going to be this one so we want to alert towards that position then to make it smooth let's use time dot on time multiplied by a certain larp spin so here and let's define this let's say maybe 10 f so this is how we're calculating the vector 3 for the new position and we just move towards this new position so instead of moving instantly towards the target position it will smoothly interpolate between the current one and the target so now i can once again go up here pick up the muffin and there you go nice and smooth alright great now with this if your object is still too jittery instead of nice and smooth make sure that on the object rigid body over here under interpolate you set it to yes interpolate so now if i look around you can see yep the object falls along now this is the design difference that i was talking about so like this the object is glued to the camera so as i rotate around the object moves however the other way like i mentioned is simply make the point a child of the player so over here for the object red point instead of being a child the camera let's make it just a child of the player controller with this you can see that if i move the camera around the object does not move it all moves if i actually move the player controller now obviously with this method you would also need the character controller to rotate to face where the player was looking at but with that change here you have both methods which one you want depends on what kind of game you're making for me i quite like the main camera method so i'm going to keep this now there's actually still one slight issue left if i'm holding the object and i move forward which means that the player collides with it if i do that look at that the object suddenly became really jittery so this is the last issue but before we actually handle that let's first handle the drop so over here on the object let's make another function so public void drop and here it's actually pretty simple we're just going to do the exact opposite so let's clear the field so set that one into no and let's set the use gravity back into true and yep that's really it now when this one is known it will no longer move the object so all we need to do is call this function so let's do it on the player so we want to use the exact same input key so we want this to be able to toggle so either pick up or drop the object so that means we need to keep track if we're currently holding some object so let's just store a private object grabbable for the current object grabable and we can make sure that we set it directly over here in the triget component so we can do it like this so if the trigger component succeeds and automatically sets this and then we just have to test our logic so if this one it is null then that means we want to try to grab it so not carrying an object try to grab but if this one is not null then that means we're currently carrying something if so then we want to drop so again just go into the object graphable and just call the drop function there you go just like this and finally after dropping we just need to clear the field okay so let's test all right so here we are let's pick up the muffin yep there it is now press the e key and if there you go it does drop all right awesome so i can pick it up and i can drop it and i can place it anywhere all right great so that does work now for the other issue that i mentioned it so if i pick it up and now i pretty much move forward fast enough to actually push the object if i do that look at that you can see the object is constantly trembling now what is actually happening is that the object has some force so if i select the object and i look over here in the rigid body and i expand upon the info right now you can see the object does have some velocity does have some speed that is why this is constantly doing this basically the script is constantly trying to move the object and at the same time the object is constantly trying to move itself away so right now if i just push in like this and i press the inky if there you go you can see the object gets flown right to where it was now there are two ways to solve this one way would be through code so we could just use something like larp to constantly bring the velocity down to zero or two you can just increase the drag so over here on the rigid body we've got the mass and we have the drag and the angular drag and by default drag zero so it has no drag but if we increases something like five if so then now it will automatically apply some drag which will lower the velocity so here it is the object is straight in front of me and if i push it away you can see yep there you go it goes back and resets so i can go anywhere and yep it does work now one more final optional thing on this system on the rigid body you also have a schematic toggle kinematic means that the object still exists in the physics world but physics are not applied to it so if i enable this as kinematic with this the object is still moving around and if i push it i can push the other muffins with it so that works however when it's kinematic other physics forces will not apply to this object so for example over here there's a collider on this fridge and if this object is kinematic you can see yep it can go straight through the walls so this is just another optional setting that you can play around with you can set it pretty much the opposite of when setting the gravity so enable when picking up and disabling when dropping okay so with this now all we need is to attach this rib to any objects that i want to pick up so let's say all these other muffins so i'm just going to go inside the prefab and over here i just need to attach the component that's it then for this other muffin let's also open it go inside attach the script okay this one as well the same thing go inside and attach the script and also over here there are some sandwiches let's also pick these up so just go and all i have to do is just attach a script so here i am i can now pick up this muffin and i drop it in my shopping cart and yup it does work pick up this one drop it in there pick up this one drop it in there also pick up this muffin let's go into this bucket and drop it in there you go let's pick up this really nice sandwich and just drop it in there pretty big so here it is there's a nice bucket with my muffin inside and over here my nice shopping cart full of food all right awesome so here we have a very simple pickup and drop system you can apply this to anything just attach the component and that's it alternatively you could also refactor this script to make it an interface instead and then you could implement it on all kinds of objects that could be useful if you want a different home behavior i covered an interface in detail in another video if you want to learn more about them and here is the exact same system working in third person it works exactly the same way just as a raycast from the camera position finds the object and picks it up for this one since it's in third person i made the graph point based on the camera instead of based on the camera rotation you can download the project files which includes both demos now with this basic system done i'm planning to make a really awesome crafting system tutorial just like the game hydroneer it's a really unique system all based upon picking up and dropping objects so stay tuned for that or if you're from the future check the link in description alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and i'll see you next time