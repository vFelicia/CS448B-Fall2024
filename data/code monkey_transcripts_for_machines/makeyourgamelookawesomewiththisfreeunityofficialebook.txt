hello and welcome i'm your code monkey and unity sponsored this video to do an overview of their latest ebook all about the universal render pipeline this is a completely free ebook filmed with tons of useful information there's 126 pages covering everything from the absolute basics to some pretty advanced use cases if you want to make your game stand out by looking their best and perform their best then definitely you need to study this book in this video let's do an overview of some of the contents but then definitely go ahead and click the link so you can study it in more detail for yourself it's full of very useful info i myself learned quite a few things and again it's commonly free so definitely check it out there's timestamps in the video for everything we're going to see starting off with how to create a urp project then how to set up lighting and make it look good how shadows work in all of its settings what is light baking and dynamic objects how to create reflection probes and lens flares set up ambient occlusion then explore some tools like shadow graph and the vfx rev how to interact with custom injection points and a bunch more all that is covered in detail in this free ebook but first just a brief overview of what is urp and why it was made back when unt started it had just one render pipeline which is now referred to as the builtin render pipeline or brp that render pipeline was pretty great and definitely allowed many excellent games to be made but as technology advances and unt supports more and more platforms it was getting harder and harder to upgrade it and keep it a lot of the parts on that system are essentially a black box where the bumpers don't have much control and aren't able to extend in any way so a few years ago unity introduced the concept of the scriptable render pipeline and with it comes two presets two render pipelines one is the high definition runner pipeline which is all about pushing unity to its visual limits making games as gorgeous as they can be while focusing just on highend platforms so things like highend pcs and consoles and the other one is the universal random pipeline which like name implies is meant to run on everything so it runs on pc console mobile web literally every platform that unity supports all while being very performant and still looking pretty great nowadays in most cases you are recommended to use the universal random pipeline it's what i always use and just to clarify the fact that it isn't focused on the best visuals of all does not mean that it cannot look good quite the contrary actually urp can definitely look gorgeous there's a ton of games that use urp and look really awesome one example taken right from the cover of this ebook is circuit superstars it's a really gorgeous looking topdown card game all of the colors and the art style with all the awesome effects like the depth of field there's also lasting random visually a very unique game definitely stands out and again made with urp neon white is another great one gorgeous clean visuals and of course one of the main things about urp is the dedicated to the renderer so games like talents of iron use some gorgeous 2d art as well as a very unique very stylish card shark all of those games are made with erp so as you can see from these examples if you learn how unity urp works you can definitely produce some gorgeous visuals you just need to know how to use all of these tools and features that you have at your disposal and that's exactly the purpose of this ebook so let's dive into it the book starts off with the introduction and talking about the rationale behind why make the universal render pipeline so it's pretty much what i mentioned previously the builtin render pipeline was too difficult to modify it was getting harder and harder to extend so the solution was to make the scriptable render pipelines then like i said this ebook covers everything from the absolute basics to some very advanced use cases so over here on page 13 it starts off covering the conversion process so how to create a brand new urp project or convert an existing project to urp in case you haven't made a new project in quite a while the unt hub nowadays is pretty excellent with tons of templates so you just click on new project over here you can see all of the various templates that it includes for example you can choose sorry 2d or a 3d scene using the builtin render pipeline or you've got two presets for 2d or 3d using urp then you also got some really nice simple scenes one in urp one in hdrp and so on so from these you can start off with a completely empty project that is already configured using urp or if you want you can start off with the very useful official samples to learn how it all works then the first very useful negative information is over here on page 13. something you might not know about is the color space previously unity defaulted to the gamma color space gamma is more performant but it does not look as good so unless you're targeting the absolute low end mobile devices then definitely make sure you're using the linear color space to change that you can just go into edit then go into your project settings then over here scroll into the player tab and then under these if you go under other settings over here you've got the color space so you've got linear and gamma again nowadays you should probably be using linear in pretty much every scenario and then like i said i've already learned quite a bunch of things from this ebook for example apparently there is a new scene workflow now usually for me i just duplicate an existing scene whenever i want to make a new one so i literally have not used the file new scene in probably a decade so i had no idea but apparently there's a really nice template window so if you just going to file a new scene and yep here are a bunch of templates you can start off commonly empty something basic with urp setup or something standard which comes with urp camera directional light post processing and so on so for creating a brand new scene this one would actually be excellent another thing you might not know are the various quality settings when you create a new project with the urp template it automatically creates multiple render pipeline objects not just one and the reason for that is to use different ones with different settings for each quality setting so how you normally use urp is you go into edit then you go into project settings then on the graphics tab over here make sure you have a urp asset selected this is how you enable urp in your project but then the second part that a lot of people probably don't know about is over here the quality tab where each of these qualities can have a different render pipeline assigned to it if you don't assign any specific asset over here on this field then it will pretty much just default into this one also another thing you might not know about is the quality that is used over here in the editor the one that is used is the one that you have selected over here on the quality tab so right now i have low selected so it's using low and if i click on high yep now it swaps to high so in most cases in the editor you really want to be using the max quality possible then for upgrading a project urp they've got a nice guide here on page 15. so the first thing you do is go into the package manager on the entity registry then you install the universal rp package you create a new urp asset either with the 2d renderer or the universal renderer that creates two files then you go into the graphics tab and assign it and finally for the conversion process there's a really nice helper tool under window rendering render pipeline converter so here let's open up that window so over here the render pipeline converter then up top you can choose which mode you want so built into 2d upgraded 2d urp assets or built into urp so chances are this is the one that you're going to be using most of the time and then here you can see these various sections and the ebook explains all of them the rendering settings create some of the assets and assigns them the material upgrade this one changes the shaders to use urp shaders then there's a section for the animation clip converter this is a bit of a strange one i'm not entirely sure what this one does since urp doesn't really have anything directly to do with animations so i think this one just converts the legacy animations into mechanim animation so not sure about this one and finally the readonly material converter so this one is useful if you're using the included default materials instead of creating your own now for me i use this tool all the time when importing any assets from the store usually they come with legacy standard shaders so i need to open this up setup built into urp then toggle over here the material upgrade initialize the converters and convert all of them that's what i always do whenever i import any asset packs then for the urp shaders over here you can see all the ones that are included by default so what they do and how they differ from one another then here on page 22 there's a super useful table if you know something in the builtin render pipeline and you want to know what is the equivalent in urp so for example how to match quality settings and where each of these films are then over here you also have the quality settings when using urp so some of these settings are set in the quality panel whereas other ones are set in urp asset and so on after that we get into one of the most important topics lighting in urp lighting definitely has a huge impact in your game it doesn't matter how good your assets are if the lighting is bad they will look bad so you absolutely must study this section to let your game correctly and make your assets look their best over here on page 35 is actually another thing that i did not know so apparently for realistic settings you should be using the inlet shader which does make sense that one is physically based however they also mentioned that if the goal is for a more stylized render then the simple lid provides great results and over here we see all the examples this one is using the inlet shader so that's the one that's physically based this one is using the simple lit and this one down here using the baking lid as you might know from watching my videos i'm a big fan of the low poly look which is very stylized so perhaps i should be experimenting with using the simple lit shader instead of the regular light shader so there you go yet another thing that i learned from this ebook and of course yet another mention of just how expendable the scriptable render pipelines are if you want you can also implement your own custom lighting model then over here on page 40 here's a quick walkthrough on setting up lighting in a new scene so first you open up the lighting tab that one is over here under window under rendering lighting and now it pops up in this tab then you can create a new lighting settings this one is an asset that contains a bunch of information for all the lights all of this stuff with it being an asset means that you can easily swap the asset for a different one and have completely different lighting settings per scene the next super important topic is shadows which also have a ton of settings all of these settings are found in the actual render pipeline asset one of the most important ones is over here the one for the main light the main light is usually your sunlight or your main directional light for this one on the main light you really want to enable shadows over here put it on per pixel and make sure cast shadows is ticked and the next important setting is over here the shadow resolution as you can see you can go from really small to really big so for mobile perhaps you want to stick with the smallest values maybe 256 maybe that's more than enough and for pc and console you might want to push it as far as 4k although again higher resolution isn't necessarily better so in the ebook we have this really nice example and here they are showcasing a more stylized cartoony scene and here you can see the difference on the various resolution scales for example pay attention to the shadow over here that is being brought on by this little chair so the shadow in there with 256 in there with 512 1024 2k and 4k in this example you can see the one up top on 256 this one is way too blurry you can barely see the shadow same thing over here for this box however on the other extreme down here with 4k with that the shadow is way too crisp so for a cartoony style like this one you might want to go with something a bit smaller perhaps just this just 512 regardless if you're targeting a pc on console so once again another super useful bit of information then you've got the setting for the max distance which is pretty obvious but also something you might not know and might question why some of your objects don't have shadows the answer is because they might simply be way too far now depending on the regular distance of the objects your camera you definitely need to play around these values the max distance if your game is kind of like a super scale rts or something like a god game in that case you definitely need to increase these values but again also don't go overboard whatever distance you set won't have to fit in the shadow texture resolution so if you put a massive number you're really just losing shadow quality for no reason over here we can see the difference between those two in both these examples all the objects have shadows but you can clearly see that the ones on the left they've got some proper shadows and the ones on the right are blurry mess the reason for that is because the ones on the right have way too big a distance so all the shadows within a massive 400 unit distance all of them must fit on that same texture then yet another super important setting that you might not know about are the shadow cascades this is how you can define how much resolution to dedicate for each object based on distance that way you can set so that objects that are close to the camera will have better shadows than objects that are far away you said that over here on the render pipeline asset down here under shadows you've got the max distance and then you've got the cascade count so you can modify this one go from one all the way up to four and down here you've got the various splits you can play around all these values to get the exact cascade shape you want this one is definitely a super useful must use feature if your scene has a long shadow distance then on page 49 the book talks about light mapping or light baking this is how you can bake super high quality lighting directly into your textures the main benefit is that it's super high quality and of course the downside is that it's static so a dynamic player object moving through the world will not work with baked lighting basically to make it work the important parts is that the objects for the environment are marked as static then on the mesh object you enable light map uvs and on the lights you set them to either mixed or baked when you do that then on the unlighting window you can enable baked global illumination and then click on generate lighting now this entire subject light mapping this one is a massive thing by itself so definitely go ahead and read the ebook to read all these settings and afterwards go ahead and follow all of these links to learn much more about light mapping in general it's a super useful tool for you to make your game's lighting look much more gorgeous so definitely make sure you know about it and related to that are the light probes over here on page 56 this is how you can sort of mix the high quality of baking lights but also make them dynamic and super efficient so over here on this scene using bacon lighting you can see that the player object is very well lit when outside and darken when inside the way this is achieved is by using these light probes you basically just create a brand new light pro group then you click the lid on gizmo button and position all the unlike probes the important part is positioning them so specifically place them where the light actually changes then when they are positioned you just hit on bake and each of those light probes will store their light value and then when a dynamic object is moving through the scene it will capture the light from the closest light pro so this is yet another technique for making your games look and perform great then you also have reflection probes now by default any reflective material will only reflect the sky reflection probes let you place probes in the world and come with reflections from that point which are then applied to all the reflected materials so for example on this simple scene you would place one on the outside to reflect the outside world and then you would make sure to place one on the inside so that the helmet actually reflects the inside of the hanger and not the outside while the player is inside and then down here here's yet another thing that i did not know which are the various reflection methods and what they mean specifically over here box projection when should you use it or not and apparently the difference with that one is that that one is based on distance so as your character for example approaches the side wall of the hangar you can actually see the wall getting closer in the reflection as opposed to always being within the same distance then on page 61 are the lens flares so another thing that i don't normally use just because i never really bothered to research it but apparently it's super simple you'll literally just create a lens flare asset then you add a lens flare component to any kind of light and then just set up the settings super simple then on page 63 they mentioned my favorite effect which i already covered in a dedicated video screen space ambient occlusions this one adds tiny shadows in the gaps between your geometry so the whole thing looks much more grounded over here and look at the difference between over there that object looks like it's floating something for this one whereas down here with those tiny shadows everything feels much more ground the section after that is all about shaders now written shader programming is one of the game development things that i know absolutely nothing about i've tried learning it but it is so difficult thankfully one of the tools including urp is shadowgraph so i can make awesome effects on without ever touching actual shader code but if you do want to write custom shaders then this section is super helpful it contains lots of info on how to convert from builtin into urp shaders lots of useful helper functions to help you lots of types and so on so definitely go through this section in detail if you're used to writing custom shaders then we come to the pipeline convex section this is a really advanced and extremely powerful feature like i mentioned in the beginning this is one of the main benefits of the script developer pipeline compared to the builtin render pipeline with this you can basically hook on to various phases of the rendering process so over here you can check the script in the middle of rendering shadows on the pre passes g buffer opaque skybox and so on you can do that through code but there is also a no code workflow for injecting some custom rendering logic you can go into the renderer and the render objects feature so over here if you select the renderer not the render pipeline asset over here on add render feature and you can add the render objects then here you've got tons of options to do all kinds of interesting logic without ever touching a single line of code in the ebook they showcase this nice simple example which is how to see an outline even while the player is occluded so whilst it's behind objects for example i use exactly this kind of logic in my house building system video it's super useful and pretty easy to do thanks to this render object feature another option if you like using code is over here on page 79 so you can create a csharp script that hooks onto the rendering this is another thing that i also experienced with and i made a full detailed tutorial on how to make some custom post processing over here they show very much a similar example to that so you can create a csharp script that hooks onto that part of the rendering pipeline then you can use a shadow graph shader in order to do some kind of custom post processing super useful and also included in the ebook are a bunch of video tutorials made specifically for this ebook so definitely check those out and afterwards we get into the urp post processing section and they begin by mentioning the difference between the builtin render pipeline postprocessing package and the urp posttrusting volume this is a pretty important difference and i actually made a video explaining that difference basically if you use the wrong post processing and the wrong grinder pipeline it won't work here they showcase how to add each individual effect and all the settings on the volume component for example how you can make a local volume this is how you can make sure that a certain post processing profile is only applied if the camera is inside a certain area one example where i used this was in remaking the mechanics from verdun i used a local volume to handle the gas post processing then here on page 90 we've got a nice list of all the effects along with links to learn some more about them next we see the section for additional tools that are compatible with urp and of course it begins by mentioning shadowgraph so this is a tool for making shaders using a visual custom node based tool it's really awesome for people like me who can't really create shaders through code and even if you can shadow graph is insanely powerful with tons of visual previews so even if you can write some code perhaps using shadow graph might be better i've already made tons of effects using it it's a really awesome tool so here they go through all the basics what are the properties the graph inspector how all this works the next super awesome tool is over here the vfx graph now i made a video on this one but i really haven't used it much since then it's a really awesome tool for making particle effects that run on the gpu meaning that it supports thousands or even millions of gorgeous particles in a super easy way this is one tool that i really haven't touched on in quite a few years so i definitely need to get back to this one and play around with it quite a bit more here on the ebook they have a nice tutorial on how to make a really nice smoke effect and of course another huge thing about urp is the dedicated to the renderer a long way to the lights this is one thing that is simply not possible with the builtin router pipeline so this one is a huge plus for 2d personally i definitely wish that urp existed and i had this back when i started working with unity my games are all in 2d so i definitely would have benefited from this kind of 2d specific workflow the 2d side of the engine has really improved massively over the past coming years it's really great nowadays and also about a year ago they released a really awesome sample project called dragon crashers it features pretty much all of the 2d tools to the lights the effects all of them in action so if you want to see how to apply all of that and make something really gorgeous definitely go ahead download and inspect this project it's called dragon crashers there's only over here and finally one of the most important sections this one is all about performance now this one is full of interesting tidbits of information that can really help you achieve a nice smooth frame rate there are many ways you can attempt to improve performance in your games you can manage your own lighting you can use light probes reflection probes you can set up the camera settings make sure the pipeline settings are all set up correctly use the frame debugger to see exactly how the frame is being rendered and of course use the profiler to see what are the hotspots in your game all this can help your game not just perform better but also look better here's a pretty extreme example of using light probes so the quality of this object is definitely much better than this object then how to be efficient with all of your reflection probes how to use the collision calling to not waste time rendering things that can't be seen learn how to use the frame debugger and identify each part of the rendering process to see what can be improved and a bunch more things so with that we reach the end of the ebook over here on the final page you can see a bunch of gorgeous games that were all made and rendered using unity urp so these are great examples of the kind of quality that you can achieve as long as you know how to use the tone correctly again this video is meant just as a quick overview so definitely go ahead and download the ebook it's completely free there's a bunch of things that i skipped just to make sure that this video isn't way too long things like light layers which are super useful for highlighting specific objects also light halos which is a simple but pretty great effect how to control postfrosting effects through code how to work with camera stacking which is how you can add cameras on top of one another like for example you could make a second view like a cockpit view on some kind of card game so again this ebook is full of tons of useful info and again it's all completely free so check it out with a link in the description and make sure you use the info in this book to make your game look the best it can be alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and i'll see you next time