in this video we're going to make a nice simple inventory system this is a very simple class that lets the store unique and sack of all items we can spawn them in the world pick them up use them and drop them let's begin hello and welcome I'm your code monkey and this channel is all about helping you learn how to make your own games with NF tutorials made by a professional indie game developer so if you find the video helpful consider subscribing okay so here's what we want to create over here is my player and I can simply move around then in here in the UI you can see my current inventory so I'm carrying a sword a health potion and a mana potion scattered throughout the map you can see a bunch of items on the floor now if I move I can click up there you go when I picked it up it was added into my inventory as you can see some items are stackable and some are not so if I grab this sword there you go that one is not stackable as you can see in here is a 10 coin there you go I've got ten coins now ten eleven and twelve thirteen yep then in the inventory I can right click in order to drop an item and I can also leftclick to use them so over here the mana potion leftclick and there you go I use a metal potion and I've used a health potion so just like that we have a very nice and very functional inventory class so click drop and so on and we can do anything right awesome so this is our goal let's get to it so over here is my starting scene I just have the player walking around and nothing else ok let's begin making our inventory class here we make a new csharp script let's call this the inventory and open it up now in here well let's first get rid of mana behavior since this will be a simple class and now in here we're going to have a very simple list of items so that means we need to define our item type so here back in the editor let's create another script this won't be our item and again get rid of monobehaviour okay in here very simple we just define a public noone of our item type can't let's put some items and then in the item class itself we simply have a item type field and also a int for the amount all right here's our very simple item class now we can go back into the inventory and in here we make a list of items and on the constructor we simply initialize the list okay let you do it let's do a debug down log just for testing just like that okay now let's see how we're going to test this let's go into the player class okay here it is the rest of the code is irrelevant for our case here how we care about is the inventory so we're here on the awake let's simply instantiate our inventory so here to find a field maybe here we simply do new invitar all right let's test and there it is we have the inventory in the console so everything is working right okay so far so good now here in the inventory let's make a function to add an item in order to add we simply added to the list item list add our item and now for testing when we start let's have an item onto it so let's call an item inside we create the new item let's say it's a weapon type sword and amount just one and just like that then let's do it debug log on the item list count okay so we should be able to add an atom to our list and be able to see a one any of there it is we have one item inside of our in other okay great now let's make a visual for the inventory so over here inside my game handler I have the UI and inside I have the canvas so in here let's start off by making an empty game object call this the UI inventory now inside with a background now let's make a container game object for the item slot container so this is what we're going to fill up with all our item slots and then inside let's make the game object for each inventory slot okay so here's the item slot template so this is the game object that we're going to duplicate in order to show all of our items so for the template we're going to start off as hidden okay so that's it for the UI setup as you can see very simple just the background a container and a template now let's make the code to handle this so a new csharp script and to call this the UI inventory this when we drag it in here okay now in here the first thing we're going to need is a reference to our inventory so let's make a function to receive it okay now we need to call this from somewhere so let's go onto our player and in here let's add a serialize feel for our UI inventory so we can now go back into the editor and here with the player selected there it is there's the field and just drag the script on to it okay and then here in the player we create the inventory and then we go into the UI inventory and call set the inventory in tustin this part so we are passing in the inventory object onto our UI script okay so far so good now on the inventory window in here on let's make a function to display the items okay so first on awake we grab all of our references now here on let's make our function and now here we need to cycle through all the items in the inventory so we need to go into our inventory and here we need to expose our item list okay now I can go back into the UI and here we can cycle through it and now here all we need to do is instantiate our template and now the template is disabled so the first thing we need to do is call game object and set this one to active so that visible okay then we need to position it okay so here we have some code in order to locate our item slots in a grid array so just like this we should be able to see the window correctly display how many items are in our inventory now we need this to call this function in here so let's go into our inventory and add a couple more so we have a sword let's add a health potion and a manifold okay so we should be able to see three items total let's see and if there it is we have our nice three items all right awesome now obviously let's set the proper visuals so for that let's make a class that won't hold a reference to all the assets that we need so in here we make a new class let's call this the item passes in here let's make this a singleton so we have a nice static field to access this script and I'm here we add all our essence all right here we have all our assets now we can go into the item class and then here we can make it get sprite function so inside all we do is a switch on our item type and depending on the type we return the asset all right that's it now we can ask the item in order to give us the sprite so we can go back into the UI inventory here we are placing the thing okay great and now let's go into the item slot in order to find the image and we simply set the image without sprite and we go into the item and we get the spray all right okay so now we go into the editor in order to add our sprites here in the editor let's make an empty game object for our item assets and we drag our script onto it and I mean here we drag all our sprites okay just like that so let's test and if there is we have these three items is playing with the three different sprites awesome okay now let's make some items in the world that we can pick up by moving our player so here in the editor on let's begin with an empty game object let's call this the item world inside let's add a sprite renderer let's just drag something out to there okay and now let's also add a box Collider 2d and we want to make this a trigger and final let's also add a rigidbody 2d and make sure that gravity is disabled all right okay so here we have our item and if we run the game if there you there's the visual for our item on the ground okay so now let's make this into a prefab so we can incentive owner for our prefabs keep things nice and organized and we drag the animal onto it and let's rename this to PF item work okay so now we have our nice prefab now let's make a script to handle it so a new script let's call this the item world and drag it on to our prefab now in here let's make a function to set the item that this our world is scary so a polyploid call it set item and we receive an item okay and let's also make a static function to instantiate a new item world so here we instantiate that means that we need a reference for our prefab so again we can use the I own assets in here we just add a public transform for our item well prefab and then here on the other one we can instantiate that one okay we instantiate our transform then we get the component to type on world and recall set item and we pass in this item all right so just like that over here we have a nice static function to spawn items into our world and here when you have the set item let's also set our sprite so here we do the same thing we ask the item in order to return the sprite all right now let's go to the player in order to test this so here just for testing let's call item world and we call the function to spawn something on the atom world and let's spawn three items okay let's test any of theirs our items being spawned into world awesome now just for fun let's have some lights to the prefab and color them and depending on the type any of there it is now our items have some nice light okay great so now let's see how we can grab them over here on the atom well prefab we added a nice box Collider and we made it a trigger so in the player we can use that over here in the player let's do a on trigger enter 2d now here on let's test if it's an item so here we are touching the item and if so let's add it to our inventory so go into the inventory and call an item so now we need to go into the atom world and make a function to get the item and then we also need to go into the item world and make a function to destroy itself okay so here in the atom world make a public item and get item and here we simply return our item and a public boy destroy cell and here let's just destroy this game object okay there it is very simple let's test so here we are now I approach this health potion and if I go if there we go the health potion disappeared and it was added to my inventory now grab the mana potion and the sword and there you I found them all all right great however you obviously did see that the inventory did not update so let's do that here in the inventory class let's make a event to trigger on update so we have an event on item list change then here when we add an item let's trigger this event okay there it is we have our event now we can go into the UI inventory and now here when we have the set inventory let's subscribe to this event so we going to the inventory and subscribe to this alright so when they are always changes we simply refresh it however before we test this we need to make sure that we destroy the old transforms before we build the new ones so before we do this let's go here go through each transform child inside the container and now let's make sure we destroy them except the template so if the child is template we simply continue and if not we destroy the game object all right that should do it let's test okay here we are let's grab the health potion give there this it was added correctly alright now for the amount of potion and you if I grabbed it and now the sword and yep I grabbed it as well alright awesome so now that we have the atoms being evident let's make a simple way to spawn items in the world by adding them to the hierarchy so here let's make a new script we're going to call this the item world spawner and inside this script the only thing we're going to have is a field for a public item right just like this now in order for this to show up in the editor we need to go into our item and in this class we need to mark it as serializable which is inside the using system alright so we need to make sure that this is serializable in order to show up in the editor so let's see how it looks in here let's make a new item world spawner and drive the script onto it and yet there you go as you can see we have a field for an item and we can pick let's also add a sprite runner just so we can see so let's try putting a sword in there okay so here it is I made a bunch of game objects each of them has the Adam Warren spawn a script and just say sprite in order to display it and now back in this script in here so we have the film for the item then let's make our private void awake and on awake all we want to do is spawn this item so we go into the item world and we call spawn the outer world on to this position and with this item so we spawn it and then we destroy this game object now we can go back into our player and here we can remove our testing codes and all of our spawn these through here okay let's test and if there it is our final items were correctly spawn so we can pause and we can look and see that the item spawners were destroyed and they were replaced with actual items in the world right great so now with all this for he nicely and we can still pick them up and see the inventory update okay now let's deal with stackable items over here in the item class let's make another function let's make a public ball is stackable so we're here we asked if the item is stackable so the coins health potions and mana potions are stackable and sorts and med kits are not so now let's go into our inventory and in here when we add an item instead of always doing this let's test if this item is stackable so if it is stackable we're going to have some logic and if it is not stackable then we just add it right no ok so if it is stackable let's check if this item type already exists in the inventory so if they are already of the same item type then we simply add the amount instead so just like that and if they aren't already placed so in here if the item is not already in the inventory then we simply add it ok just like that very simple ok now let's quickly test so here I already have a health potion in my inventory so if I grab this one it should not spawn a new one and give the recurrence one all right great so the logic is working now we just need a display in order to know how many amount we have in there so let's go to our UI inventory let's inspect our template and in here let's add a new text object so here we have the amount text and now here on the UI let's instantiate our item slot okay in here so we set the anchored positions of the image now it's also said he text so here we set the text based on the item that amount however let's also hide the text if the amount is only one so let's do an if alright so if we have more than one we show the amount if not then we just show an empty text okay that should do it let's test okay here we are and here are a bunch of our items so we already have a sword a health potion and the amount of potion we only have one of each so that's why the text is invisible now let's grab this whole potion and if there we go now it says to worldy mana and there you go it went in there now we're at the first coin and there's the first one and grab a now a 2 a 3 and a 4 now these two are not stackable so we're at the sword there we go there's a sword and there's a medkit so just like that we have made our inventory support stackable items awesome now that we have this let's also add an amount to the world items so let's go here into the item our prefab and let's also add a text object so here it is just like that now let's go to the script here in the admin world script we set the item now let's on set the text all right here it is we did the exact same thing only show if it's above one so now in here let's make one of these coins actually home not just one coin let's say ten points okay let's see any of here we are and their days that one has ten coins now I move around let's grab the sword there you got the sword got that got another health potion of the mana now let's grab the ten coins first and there you go we have ten coins now eleven twelve and thirteen all right great now it said the ability to use and drop our items so let's go here into our UI into our item solid template and now in order to capture clicks let's use the button UI component which is part of the code monkey Tony's as always you can download the eternities for free from unity code monkey calm this is a very simple script that just lets us easily set actions for left and right click so let's go into the UI so here let's go to our button UI okay so here we can set an action for the left click and the right point now on the right point let's drop our item and on the left click we're going to use alright so first the drop it's very simple we just need to remove it from the inventory and spawn it in the world so let's go to the inventory and call remove item so we have to make that function and we fasten our item and then what's going to the item world and here we're going to make a similar function and what's wrong with drop item so first let's make the remove item so on the inventory here it's very simple okay so here we're just doing very similar to the ad except instead of increasing we decrease the amount and we'll remove it from the atom list so now we need to make the drop item function now we need to know the position of where we're going to drop it so that means here on the Y we need to know where the player is so we have a function to set the player and then we drop the item using the player okay this is just so we can have a drop position all right so we have a nice drop item function it simply spawns it in the world and pushes it away okay with all this it should be working and now we should be able to right click in order to drop items from our inventory okay here we are now I right click and you've there you go I drop the item okay so it looks good but now we actually have one tiny issue which is let's grab the item that we just dropped and now grab another one and there you go it is now no longer correctly saying to and if I drop it there give it just one is no longer has two so let's see why this is happening so here if I already have one grab another one grab two now I drop it and yep it just dropped one so let's see what is going on this is that here when we call remove item we're passing in this item reference and then in here we're taking this item which also matches this item and we're decreasing this amount which in turn also ends up decreasing this amount so the issue here is because we are modifying the exact same I have reference so the solution in here is to make a duplicate item so we make our new item then we remove it from the inventory and we make sure that we dropped what we have previously seen here we drop DW this is an issue related to the fact that we made item a class we could have made this dropped in order to avoid this item but that depends on what type of game you're making whether it's suitable in order to make a struct or class so in this case with the class you have this problem and let's see if this solution works okay so here we are with one now we have another one now drop and there we go now we dropped you so now we grab that one and we grab two so where are this and this and so on and we can grab everything and I'll drop 13 coins to help potions and to mana potion right great so now with this working let's make the use function over here we have our leftclick function all right now here on let's call use on this item in the inventory so we go into the inventory and let's make a function call used item and we pass in this item let's make this down here we make a public void use item and receive an item so now here we need to use it and we want to use it on the player but in here we don't want to have a direct reference to the player so instead let's make a action that takes an item and let's call this to use item action and will receive this on the constructor and then down here we use this just like that okay now in action is just a void delegate so in this case with an item as a parameter so now on the player when we create our new inventory we need to pass in that function so let's make it in here and we pass in this function onto our inventory so now we have this function on our player that we can use to do whatever we want with our I don't let's do a switch okay so here on this function we are doing a switch on the item type and let's have some behavior for the health and mana potion so if we have a health potion let's wash our character green north to indicate a healing and then we go into the inventory and you remove an item of type health potion and just one amount then same thing for the amount of potion so let's see if we can click to use our items okay here we are let's grab a health potion okay we have two health in one mana let's use the mana and there yo you saw it flashing blue no it's left click on the health potion it should flash in green and we should have instead of two just one click any of there you go we have our flash and went from two down to one click again and there you go it's gone now where this one click and there you go very nice and this one doesn't have any behavior so it doesn't do anything same thing for the coins also no behavior and met get also no behavior so we can now use objects inside our inventory in order to trigger custom logic awesome and just like that we have our completed inventory system we have the inventory being in Senshi ated inside our player and displayed over here in the UI we have a nice item class that defines only items in their behavior so each item has a unique sprite which is based on its type and also an amount we can spawn items in the world and move around them in order to pick them up then on the inventory we can right click in order to drop an item or leftclick to use it and we can pick them all up and everything looks very nice the way we set up our inventory class it would be very easy to apply this to other units rather than just the point so if you wanted each enemy to have an inventory you would just instantiate the inventory class like we did and just like that the enemy would want an inventory that for example it could drop on that as always you can now all the project comes in its own ease from ent code monkey calm subscribe to channel for more unity tutorials post any questions you have in the comments and I'll see you next time