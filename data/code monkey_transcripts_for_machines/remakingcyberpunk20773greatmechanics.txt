hello and welcome i'm your code monkey and let's check out how i remade three interesting mechanics and systems from cyberpunk 2077 the three mechanics i won't be covering here are the diegetic world ui where the player interacts directly with the world rather than through a separate ui the scanning vision where you can enter a mode and identify special objects and get data from them and the hacking minigame which has some very interesting rules i will cover how they work how i remade them and how you too can make these systems in your own games now this is the first video of this type where i'm remaking mechanics from popular games so let me know in the comments if you find this type of video useful my goal is to show you how all of these aaa games look impossibly complex at the surface but if you dig around a bit you will find that most of the systems they use are actually pretty simple and you can make them yourself as well so first up the diegetic world ui this is a really awesome system that surprisingly few games actually use so here i am inside of cyberpunk and there is this vending machine i can look at each individual button on the vending machine and press a button to make a purchase when i do i spend some money and an item is spawn so in a lot of games this simple interaction would pop up as a separate ui but i really prefer this in world system just use the mouse to point towards the button inside the world and take an action another one is over here on the elevator again two buttons and i can directly look at what i want to press and take an action so that's how it works in cyberpunk there's no ui that pops up all the buttons exist in the world which helps keep you immersed in the game and over here is my version so i'm on this really nice scifi city this is actually an asset pack that you can grab for yourself so over here i've got this really nice vending machine and over here i see three interactable buttons so i can simply look at them press a button on the keyboard and there you go as soda comes out so select that one and spawns that object that one spawns that object and that one spawns that object so just like that so you can see how this is much more immersive than having a separate ui when approaching this to take this action then on the other side over here i've got another one i've got a really nice atm machine once again it has all of these individual buttons so i can interact and i can see the buttons being pressed and interacted over there on the screen so as you can see this system is much more immersive than having a separate ui to interact with all these objects in the world so let's see how all of this works the core of it is essentially based on a world canvas which i covered in detail in a separate video essentially that's how you can place ui elements in your world so over here i've got my vending machine object and then in front of it i've got this really nice vending machine canvas and in there the buttons are just really normal images so these are standard ui elements they just have an image and then a script to capture some clicks on the world so on the canvas itself i've got another script for my raycast ui let's look at this and here it is it's a very simple script and what it does is essentially just this we do a raycast on the input mouse position so the mouse is always down the center then checks if it has some results so if there is any object underneath the mouse and then it simply identifies the object by trying to get this interface and then down here simply have a basic keyboard input and if so then look into the last selected object and trigger the other function so here is the script that handles the logic for the vending machine so just a bunch of references for the prefabs to spawn where to spawn it and all the various buttons then here i'm listening to the button events in order to change the color on mouse over then on pointer down we spawn a specific can for each of them then over here for the atm it's exactly the same thing so of the individual buttons inside of a canvas and then a second canvas that just has a text object and then here just some extremely basic logic so the whole thing is just based on using a canvas in the world and doing a raycast and again here it is in the game so i just approach the vending machine i'll look directly at which button i want i press the button and there you go i'm ordering some sodas and things there you go all of them is popping out and over here on the atm i input my code and just like that so as you can see this is a great system and it's really pretty easy to implement so when you work on your own games before you decide to make a separate ui take some time to decide if that action wouldn't be better to be made directly inside of the world next up we've got the scanning vision so this is a really awesome one that took me quite a lot of effort to get just right so here in the game i can press the tab key in order to enable the scanner so the first thing it does is it completely changes the visual for the whole game the objects that are scannable are highlighted and if i look at them i can scan them and get some extra information so it says this type of object and a bunch more data so the main part for this system is the visual it completely changes how everything is rendered with different colors and extra postprocessing effects and then it also changes the scannable objects and applies an outline to them so it's a really interesting visual that makes it very clear when you are in scanning mode and when you're in normal mode now remaking this mechanic was really tough shaders and rendering is the main game dev topic that i'm least familiar with since usually i work in 2d but after a lot of trial and error here is my version so it starts off with the eleven looking quite normal so again it's that awesome scifi pack so if you want to look at this to make your own version of cyberpunk check the link in the description so i can walk around everything looks perfectly normal then as i press my tab key if there you go our scanning vision is now enabled and i can see how some objects now have a nice outline and they don't look clearly different from everything else and then if i take my mouse and i point it towards an object there you go i get some extra information from that object so visually this is a bit different from the scanning vision in the game itself but i think it works quite well so all the objects are clearly highlighted so as i go back into normal everything looks like that and i go into scanning yep i can indeed see automatically that all of these are scannable like i said remaking this was really tricky mainly because shaders and rendering are not my main skill sets so how i ended up achieving this is possibly not the best way so someone could probably make this with some handwritten shaders in a better way but still i'm very happy with what i've accomplished there the whole thing is based on two very simple shaders and playing around with render features and by the way if you find the video helpful consider subscribing and hitting the like button it really helps out the channel so over here i've got my render pipeline asset i'm using the universal render pipeline and over here you can see it uses a whole bunch of different renderers so first off here's everything looking perfectly normal then when i engage scanning vision the first thing that it does is it enables this postprocessing object so as i enable if there you go everything changes the visual so it applies some color adjustment essentially turns everything into a green tent applies a nice little film grain and so on however just with this we don't see these cannonball objects being highlighted at all so then on top of that i go into the main player camera and in here change the renderer for a different one and that as a glow outline to all of the scannable objects now how the objects are identified are by the layer so if i select this car in here i can see over here on the layer they are on the scanning layer so i can inspect the individual render right in here and as you can see it has an extra render features and this one on the layer mask it applies to the scanning and scanning selected and what it does essentially just overrides the material it uses up this material which simply has a custom shader and here it is in shadow graph and it's a very simple shader all it really does is just moves the vertices along with some noise so the object has this nice movement and then simply applies a flat color onto it so with that effect we end up with these objects that have an outline but they still don't look too different from everything else so on top of that then i have another camera here that automatically gets enabled and in there on the preview you can see what the camera sees so this one is only rendering objects on the scanning layer and here it is what this does in game as i disable and enable the camera yep there you go you can see that the object gets rendered on top as a pure black object so this one is using this renderer which is overriding a different material and material is using just normal shader so here it is extremely simple it's literally just the master node just tinted completely in black with 80 alpha so essentially that one combined with the previous outline really makes each scannable object really stand out and lastly there is another camera with another render and as i enable this one right now you don't actually see any difference that's because this one only applies to the scanning selected layer so in the scene view if i see the camera preview it doesn't see anything but if i go on to this car and i manually change it from scanning into scanning selected and if there you go that's what it does so that camera is using another renderer here it is and again this one is only being applied to the scanning selected and this one is on the event after rendering so it renders that object after the whole post processing go through and it adds an extra outline and then on top of it the normal object so that's how all the visuals are set up and all the logic is handled through this simple script so it's very tiny pretty much under 100 lines long we just have references to all the cameras and everything and over here the function to enable or disable the scanning mode just does everything that we saw so enables the various cameras enables the post processing and modifies the main camera render and then here on the update if it is active then we are simply doing a raycast on the mouse position so right down the center and then we check if the object is a scannable object and if so then we fire an event when the active scanned object changes and then there's a simple ui script that listens to that event so here it is listening to that event and when that happens it simply updates the ui to show that object so here is the ui and each object simply has a script with just a bunch of data so again here it is in game so everything starts off looking completely normal then i press tab and there you go we go into scanning vision and look at that that one is highlighted so it has a name affiliation and so on as i look at something it changes the visual and it shows me some nice stats so there you go i can look at all of them so again this is really tricky to get everything working but i'm quite pleased with the end result it requires some trickery with the renderer features and multiple cameras but i think it looks quite great so here is another awesome mechanic and how you can implement it in your own games and the last system that i remade was the hacking minigame so here it is in cyberpunk when you scan something or you want to crack some encryption you go into this nice minigame the important part is up here this is the sequence that we must find then we also have a buffer so this is essentially how many attempts we have if we film the buffer without achieving the sequence then we'll lose the minigame there is also a timer that starts counting down as soon as i select the first code and over here is the board filled with a bunch of hex codes the rules are that you start off on the topmost horizontal line so you can choose any of these values but none of the ones down here then when you do choose now it goes into vertical mode so now you can only select the values from this vertical line and it always stops between horizontal and vertical and the goal is to hit the sequence so in this case just select this code and yep there's the win so that's a mini game it's pretty simple but it's just the right level of complexity for a nice bonus minigame and over here is my version so it looks pretty much exactly the same since it's really just a ui element and i grab the exact texture functionally it is pretty much a perfect recreation so over here i've got a randomly generated correct sequence the total buffer size the timer the timer bar and over here the entire grid and again all the rules are correct so right now i must select from up here so if i click anything down here then nope nothing works and by the way i also got a simple cursor just following around so that's nice and now it's as soon as i pick one so let's see one that follows the correct path so right in here if i select this one there you go it gets added in there and the timer starts coming down so next up i gotta go into bd so now i gotta select from vertical so i can't click any of these gotta go down here and now another one c so go in there and there you go we've gotta win so here it is and this one was relatively simple to remake there's really nothing too special here it's just a nice and simple minigame so here is the whole script and it's really just 400 lines long when you start the minigame it simply generates a bunch of random possible values then generates a correct sequence and it initializes the whole thing so it defines the size for the buffer sets up a timer then we go through the home grid and generate some random values for it now this whole script is included in the download them all project files if you want to check it out now the trickiest part for this one was how do you guarantee that the correct sequence is possible since the rules for this game are pretty strict essentially you have to go horizontal then vertical and so on so if you use just pure randomness you will probably end up with an incorrect sequence that cannot be possible so my solution here was really just the most straightforward thing possible i just have this function which forces a solution so it starts off on horizontal so it starts off by picking a random one from the first horizontal row then it picks a random one from the following vertical line and force it to the second sequence code and just keeps going until it finds the whole sequence so it's a very straightforward approach and works pretty great so the game starts off like this i have to get the sequence so as i look around the board yep i can see this one this one and this one and there we go we've got a one so here it is the nice minigame fully working alright so there you have it three very interesting systems and mechanics from cyberpunk 2077 and how you two can build them in your own games first up how to handle ui interactions in your world then how to make a visually interesting scanning mode and lastly a nice simple hacking minigame like i said this is the first video of this type so if you like this kind of content hit the like button and let me know in the comments i think this could be a very useful ongoing series for analyzing and remaking popular games this video is made possible thanks to these awesome supporters go to patreon.com unitycodemonkey to get some perks and help keep the videos free for everyone alright so thanks for watching post any questions you have in the comments and i'll see you next time you