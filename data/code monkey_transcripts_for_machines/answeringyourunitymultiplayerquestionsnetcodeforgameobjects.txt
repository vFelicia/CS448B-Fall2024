hello and welcome I'm your code monkey and you've probably seen the video talking about how netcode for game objects is finally fully released it's one of the best performing videos so people are definitely interested in multiplayer I'm still hard to work on default tutorial hopefully it won't be out by either next Monday or Wednesday there were tons of interesting questions in that video so here let me answer a bunch of them signing off right away with a question from anguardoch who asks what exactly is the limitation for small Scalia I wasn't sure about this myself there are no details on the documentation so I asked around on the forums and the answer that I got appears to be related to bandwidth the system is designed to synchronize all the data in a single packet when a player first joins so at a certain point with enough Network objects that data packet becomes so massive that apparently caused a timeout when sending that packet if this is where the only limitation comes from then it seems like it should also be possible to fix it basically you just need to split bigger packets into small ones so instead of sending the entire game State all at once send it over multiple packets perhaps this is something they will now tackle now that the system has reached 1.0 and also this limitation sounds like something that you could handle yourself if you absolutely need to you can create network variables remote procedure calls and basically decide for yourself what the hell you want to synchronize so you don't have to depend just on the builtin components then there were a bunch of people asking for comparisons with Photon mirror or fishnet personally I do not have experience with any of those so I really cannot tell you what are the pros and cons and which stone is best I have heard great things about pretty much all of those tools and using netcode for game objects by myself I also think this tool is quite powerful so I really cannot tell you which tone to pick they don't seem pretty great so in most cases just pick one and learn unless your game has some very strict requirements like for example you require extreme accuracy for a super highly competitive game with tons of players in that case definitely spend some time studying off the options of the pros and cons then Justice asks about visual scripting and since visual scripting works on reflection it can work just fine with pretty much any C sharp plus the only limitation is that visual scripting does not work with generics which are used pretty heavily in netcode for game objects so making it purely with visual scripting would be quite tricky but it is certainly possible to make your own logic mainly with visual scripting and only use csharp for some of those connecting parts always remember you don't have to go phone visual surfacing or fancy sharp you can mix both them then Zim asks about dots multiplayer or netcode for entities like I mentioned in the current state of dots video it's currently selling development and it's targeting for a phone release by next year netcode for entities will be the tool that is meant for more complex multiplayer games so things with tons of units tons of networking logic so I do want to cover that but I'm going to wait until at least entities 1.0 preview is out so perhaps only around December then Arthur asks how about a nice addition to my TBS course adding some multiplayer either versus or Coop and yep that would indeed be an excellent idea I'm currently hard work on making a free expansion to the course implementing hex warrants but after that is done I definitely would like to experiment with adding some multiplayer it would also be a fun challenge to see just how difficult it is to add multiplayer to a game after it's been done rather than right from the start that's usually something that you are not supposed to do if you want to make something multiplier you definitely should do that from the start but since the code in that course is very well written I think it could be an interesting Challenge and hopefully it's actually doable and not very difficult also plenty of comments on the videos mention the complete course on multiplayer as usual my problem is always the same lack of time there are way too many topics that I'd love to cover but not enough time to do them all but perhaps I might be able to do something on a smaller scale so maybe about five hours instead of a massive 10 or 20 hour course so enough time to be a good course with quite a lot more information than I can do over here on YouTube but not so much that it requires six months to build like my TBS course I still have some big projects that I need to finish first but perhaps I can find the time to do something like that I always enjoy making courses because it allows me to dive deep into one project and I definitely would like to explore multiplayer in quite a bit more detail so hopefully perhaps a full multiplayer course sometime near the end this year then one very important question that Tom and some others asked is about pricing with regards to netcode for game objects the tool itself has no cost neither does UNT transport so by itself it is commonly free the question depends on what service you want to use to host your servers technically you could make it commonly for free the system works on peertopeer so you can have the player input a direct IP of the host and then have the host set up port forwarding with that approach it would indeed be commonly free but asking your players to do that is not really a good idea asking the player to handle IPS and port forwarding is something that will definitely annoy your players nowadays so to fix that UNT has two Services you have relay which is peertopeer but simplifies the process so you don't need to handle IPS or port forwarding and then ENT also has multiplayer which is for dedicated servers the cost for those Services is on the Unity gaming Services pricing page you can see down here that really is free for up to 50 concurrent users so for an indie game that's actually quite a huge amount and then for the bandwidth that is going to depend on how much out of your synchronizing if you go above the limits then it's 16 cents per additional concurrent user so that seems like a pretty reasonable cost then down here for multiply for this one since it's a dedicated server the cost is on a per hour basis and as soon as you create an account you have an 800 credit I also asked DNT about this credit and this one is for your home account not on a per project basis so at a quick lens both these prices seem pretty reasonable if you're an indie dev then the relay free tier this one is likely more than enough but also I should point out that you are now required to use antigaming Services you can use any relay service you want or any dedicated service you want for example I covered Azure in a recent video you could use that to run your dedicated service although again I'm not sure on the math so I'm not internally sure on which approach would be cheaper then a bunch of people asked if this is server or client the Third the answer to that is really up to you you can make it server only or server and client by default most of the things are server authoritative meaning that by default when you make a network transform only the server can move that transform the client does not have the permissions to move it but you can also use a different component that doesn't let the client move itself and tell the server its own position now as to which approach is best really depends on the kind of game you're making if you're making a casual Coop game kind of like overcooked then security isn't that big of a concern so in that case I would say it's probably fine to trust the client but if you're making something much more competitive and PVP then in that case you definitely should not trust the client so the system supports both it's up to you to decide which one to use then Alex asks about rollback netcode this is a topic that I've only briefly heard about it's especially important in super fast games like fighting games which is a genre that I don't really play much but upon doing some quick research it doesn't look quite interesting basically when the player presses a button you play the action instantly then on the other player when they get that packet you jump the opponent animation forward so it matches when the other player hit their input so it requires a bit of work but it's certainly doable this is a very Niche topic so I'm not sure if I'll be able to cover it but I definitely want to research it for myself then pointandshoot video asks if between netcode for game objects and netcode for entities if between those two it is possible to make any game and the answer does appear to be yes so netcode for game objects is great for small scale games and netcode for entities should be great for everything else so hyper competitive games with tons of tracked objects it should be great for that use case over here Captain neux asks if it integrates well with existing Solutions like Steam and the answer is yep it does work they mentioned it on docs you can easily swap out the underlying transport layer so instead of using Unity transport you can use the steam transport and everything on the game objects layer should work just fine then law then asks how about adding it to current projects and for that the recommendation is always that if you're going to make your game multiplayer definitely do it from start adding it after the game is done can be possible or it can be pretty much impossible it really depends heavily on the quality and the complexity of your code perhaps you just need to rewrite a few things to make it work or perhaps you need to rewrite so much that you pretty much end up building the entire game again from scratch then wasif asks about creating a metaverse with hundreds of players now for that use case this is really not the right tool for it if you absolutely need 100 players then you shouldn't look into something else like Photon Fusion which is what they use to make the Battle Royale 200 player game then Game Dev demon power asks if this is a good solution for a twoplayer card game which is peertopeer and the answer is yup absolutely this is exactly one of the use case where this system is perfect for a small scale multiplayer game especially for a card game which is turn based and you don't need lots of prediction or any kind of like compensation so this is definitely the perfect use case for this tool set then here Castello asks what about an RTS and for this genre it really depends on the scale if it's an RTS with a handful of units then yep it is possible but if you're looking to make something on the scale of Supreme Commander with tons of units on screen at that scale I think it might cause some issues but again also depends on how you implement it the limitation is apparently on the bandwidth so if you are smart with how little data you send then perhaps even a large RTS can be done I would recommend that for these Edge case you've only quick prototype pushing your design to the Limit just see if it works then yeah that guy asks about combining mirror with entity transport now I'm not familiar with mirror but UNT transport is designed to be modular so if mirror also supports a modular transport layer then yep that seems like it could work Matthew asks about how to share that amongst users in a mobile amp and for that use case it really depends on how often you're sharing that data if it's in real time then yep a multiplayer tool like this one is indeed great however if it's for sharing data but not in runtime so something more asynchronous for that a better tune would perhaps be something like Azure which I covered in a recent video you can store some data in the cloud and get the players to request that which is perfect for any asynchronous multiplayer or just some simple messages yifang asks if it can be selfhosted and yep you can create a server build and host it wherever you want like I said it does not have to be using Unity gaming services or multiplayer the server build is just an executable so it can be run anywhere and if you're using a player host and it can also Run Anywhere codefox asks about using this for making a survival game and again it's only a question of scale but Survival Games usually don't involve hundreds of players usually just a few players and a few Network objects so yeah for this genre I would say it does seem possible and over here heat asks about peertopeer and the answer is it can be peertopeer either on your own or through ENT really and it can also be based on dedicated servers again either host on your own or through multiplayer or through any other cloud provider alright so those are a bunch of your interesting multiplayer questions and my answers those it always helps me to learn more things when I get asked the question that I might not have thought about it caused me to research some topics and learn some more things and then the more things that I learned the better I can teach so thank you all for asking all these questions like I mentioned I'm currently hard worked on the phone tutorial so far I'm quite impressed with how this system works it's pretty easy to use and it's pretty powerful I definitely think this will be a huge help for anyone wanting to make multiplayer games so stay tuned for the phone video tutorial either on Monday or Wednesday alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and I'll see you next time foreign