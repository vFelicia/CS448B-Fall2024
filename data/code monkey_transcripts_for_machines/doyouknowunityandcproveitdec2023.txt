hello and welcome I'm your KMI so do you know if caller can ever be null do you know what is the purpose of a namespace do you always have to extend mono Behavior or do you know what will happen on January 19 2038 so can you answer these questions whether you answer yes or no either way hopefully you will learn something a while ago I built a system that I've wanted to build for a really long time I manually wrote a ton of interesting questions and then wrote some super detail answers then I made a system that automatically every 3 days picks a brand new question you can find the latest question directly on the website or you can just go to your user page and enable question of day emails that way when a question is generated you automatically get an email I think this is a pretty fun way to learn and personally I've already enjoyed using this system since I wrote so many questions there's a bunch of them that when they spawn I don't even remember writing them in this video let's go through the last 10 questions try to answer them and go through all the very detailed answers to see if we can learn something and if you haven't seen the Humble Bundle with tons of tools and definitely check it out for just 35 bucks you can get tons of tools that do all kinds of things you've got some visuals some things for anim some things for 2D soft body cars handling feedback forms slicing things and even completing templates or if all you want are just some visuals and the cind store has just started their holiday season sale all with tons of Assets in their gorgeous sound they even have a fun holiday gift basket or alternatively the unity accessor is also having their new year sale I haven't yet had the time to look at this one but I'm sure tons of awesome stuff are currently on sale so if you need anything check out all the links in the description so starting off with question number one what is the significance of January 1st 1970 so is that the Skyrim release data on the mag Inox Odyssey or is it the start of Unix sign if you want pause the video and choose your answer for this one January 1st 1970 I'm prey sure is the start of Unix time and Y that is indeed correct Unix time SS are something that is extremely useful if you've ever had to deal with time zones and converting things back and forth then you know that it is a complete nightmare to work with all kinds of time zones there's a really hilarious video from 9 years ago where Tom Scott goes insane trying to deal with time zones so in order to avoid you going insane by the exact same reason said Unix SS are much much easier to deal with this basally contains the number of seconds left since January 1st 1970 so for example if your game deals with real world time in any way like for example storing when the user completes some kind of achievement or when the user created some kind of mod for that you can sort the time as a unit time samp and then you can easily convert into whatever time zone you want and in C it's super easy to get it just use daytime offset now. two Unix time seconds and then as some examples here are some videos that I made like the one for the free online leaderboard You' probably include a timestamp for when the use achieve that score that way you could filter out all scores then like I said for modding in order to save the data for when that mod was created you could include that directly in the mod file or for making all kinds of Unique Mechanics soring the time is usually something you can do and again using a Time simp is super easy so basically whenever you need to handle time in any way a simple unit time simp will work wonders so question number two can you modify the transform. 4 directly in order to rotate a transform so yes or no in my case I do know the answer is yes because this is indeed my favorite rotation method if you read it then it's going to return the forward Vector for the object that you have selected but you can also set it in order to rotate it so for me the simplest way to make it look at something is just calculate a simple direction towards that Target and set the Transformer forward to that Target personally I still have trouble understanding how quion work and Oiler angles are sometimes a bit tricky so for me whenever I want to rotate something usually transform. for that's the method that I most prefer and again you can modify transform forward but also all the other ones like transform. right or transform. up for for example this one can be super useful when dealing with collisions and normals this is exactly what I did in this video on the Scout prob launcher from ours in there I made it that whenever the prob is thrown whenever it land on something it automatically use the C normal in order to point in the opposite direction so that way it perfectly fits perfectly matches whatever terrain whatever surface it lands on and like I said you can also modify transform that right so when working in 2D usually that's the best one because usually pointing to the right that is going to be default for any Sprite you draw on to the next question let's say I saved my gim D in a text file and I am now trying to load it so does this work so I've got a string saved Health Data and I've got the string 100 and then I've got an in health amount and I'm simply setting it to the saved Health Data so does this work yes no or yes but Health amount will be zero this one is a fun question to teach you the basics about how types are different in this case you cannot directly convert a string onto an end so I do know the answer is no and if that is exactly the answer is because you cannot implicitly convert a string onto an INT in order to do that convert the string onto a value you can use in. parse or in. Tri parse or for float you got float. parse and so on so for example in this case you would take the saveal data and call in. parse that does return an INT if it can indeed parse that text or alternatively you can use something like Json this is a widely used data format it is all string based and it automatically handles the conversions for me I use Json a lot whenever I want to save anything it's the simplest way to save pretty much any data it's how I normally handle saving and loading and I very much rarely have to manually par some numbers I got a video on Json one on saving and loading this video is preowned but it's still exactly up to date it is still exactly the same system that I use for saving and loading nowadays even in my latest game dinky Gardians it uses pretty much exactly the same thing that I covered in this video and how to save multiple things save a file the save file alongside the screenshot or really any data you want this also really interesting and then also somewhat related do you know you can also Implement implicit type conversions to your own custom types you can just Define a implicit operator and that way you can convert your custom time like for example something called Health amount you can automatically convert that into an INT if you do a lot of things with custom types that have some kind of mathematical conversion or really just conversion into any other type then looking into this implicit operator that can be super useful save you a ton of time next question what is the color on the Sprite renderer after running this code so first we've got a variable color my color and it's set to color. Red then we assign the Sprite render do color to my color and then we modify my color to color. Blue so by the end after running these three lines of code is the color on the Sprite render is that going to be red blue or don't you know and I know this is a fun question talk about the differences between reference and value types so in this case I do know the color is going to be red and if there it is that's correct and the trick here is that color is a struct which is a value type and not a reference type so when you assign a color or really any struct any value type when you assign that onto a spr renderer you pass in a copy at that time so when you later on modify it does not modify the copy that the Sprite renderer holds it just creates a brand new copy this is something that you absolutely must know the differences between value types and reference types if you don't know that difference then at some point you're going to go crazy when you try to modify something and you don't understand that you are modifying a copy not the actual object I've got a very useful video on that topic If instead color If instead of being a struct if this one was a class then when you assigned it you would assign a reference and if you modify the original data so if you modified some parameter inside the my Coler if you did that then you would be modifying the actual underlying object which again the spread R would also be pointing to the same object so that one would also Al update but in this case since color is a struct then modifying that is really just modifying a copy so it does not affect the original Sprite render okay question number five what is the purpose of a namespace so is it to confuse you maybe is it to get better performance or is it to keep your code organized and for this one let's say the goal is to confuse you and hope obviously that is not correct the answer is obviously to keep your code organized so it does not give you better performance setting a namespace does absolutely nothing when it comes to Performance Nam spaces are used to help you keep keep your code more organized with various systems cleanly separated so for example a direct example directly from unity all of the UI code all of that exists inside the namespace unityengine.ui now for example all the file handling is inside system.io all the entity stuff is inside unity. entities and so on so as your project grows code organization becomes more and more important so you can definitely use namespace to keep your code base nice and under control you can define a namespace and then inside you can Define any class and anything like that then you just need to add using your namespace and then you can access the type directly inside that namespace and this is also one very useful way to avoid name collisions one common Collision that I encounter pretty much all the time is this one there's a random class both inside un engine and one inside system so if you write this code it's actually going to throw an error because it does not know which random you are trying to use normally I always want to use the random from the UN engine so really you can just write the full name personally I prefer this one as opposed to the one in system that requires creating requires setting up a seed and so on whereas this one is much more similar to use so Y when you have conflicts between various class types then using the full name that is one great way to solve it however like I say here every tool can be either used or abused if you make a different names space for literally every single class and you're probably doing way too much at that point it's probably hurting you more than it helps but when use correctly namespace can indeed help you keep your code base much more organized and then yet another benefit and this one that does speed up code compilation it's not the namespace by default that do that instead it is something called assembly definitions that Unity has where it can basically create an assembly definition for an entire name space that lets you split your code base into multiple assemblies and whenever you modify some code it will only recompile the code on the assemblies that need recompilation so for super huge games this is super useful for example if you're only working on your UI code you put a proper namespace for your UI code and then different namespaces with different definitions for things like your gameplay code your gameplay logic your AI and so on and then when you modify the UI it only recompiles the UI code does not recompile everything else and that makes makes the code base the code compilation makes it much much faster if you want to know about assembly definitions I have a lecture on it in my ultimate unity overview course then here's a fun question where is the modulo operator particularly useful so is it for looping back on a list is it for counting elements in a list or is it for creating a new list with a particular size this is one of the most useful things personally I don't know much about math but I do know about this because it is extremely useful and the main way that I find particularly useful is for looping back directly on the list so y that is the correct answer and Yep this is exactly what I do so many times it's very useful when you want to look back to the beginning after reaching the end so in this case you take the index you increment by one then you use the modulo which is R the remainder of the division you do the modulo with the count for the internal list and that basically means that as the value over here matches the value in here basically it's going to loop back into zero like I said I don't know much about math but I do know that the mod operation that one Returns the remainder of division so as you increase your index it will automatically loop back to zero this is super great for things like pulling systems you can constantly loop back and reuse all the items but it's also not just for lists this is really just a mathematical operation so another place where I use this quite a lot is in making day night cycles so you can take your daytime you can increase by Delta time and then get the remainder for some kind of daytime Max so as the day constantly increases at some point and Loops back to zero and then continues so this is pretty much the basic logic for how I handle day night CLE in pretty much all my games and unity also did something similar in their happy harvest 2D sample this is a really awesome sample if you don't know about all the tons of 2D tools definitely go watch this if you want next question when you create a new script do you always have to extend mono Behavior so yes no or only if you want to use it as a game object component and for this question I'm going to answer only if you want to use it as a component although technically the answer no that one is technically also true since you don't always have to extend it only if you want to use it as a game object component so monab behavior is basically the base lass that you need to EXT and if you want to attach it to a game object it is also what automatically handles functions like start and update to have those automatically called by unity however it is not necessary you can definitely use just basic C classes that works just fine for example in my case in the various videos that I have on the grid system the grid system is just a regular C class it is used by the Constructor it is not attached to any game object there are many times in games where you don't really need to use something as a component you really just need some kind of container for logic to do all kinds of things and and if it doesn't need to be attached to a game object then maybe you don't need mono behavior for example in my game thinky Guardians I've got the offw logic that is basically the logic for Wendy dinkies and all the objects in that world when those are on a different world from the one where the player's on right now since that simulation continues happening all the time and for those those are really just regular C objects those do not Implement mod Behavior although they do have an update method but instead of having that update method being called by inter directly instead I've got a dinky off manager that one cyes through all of those C objects and manually calls the update function that way I have a bit more control over how often I want to call that update in my case in order to make the offer objects in order to make that quite a bit more performant I made it so it only updates 10 times per second instead of something like 60 FPS and just a nice tip making normal C classes that one allows you to use their Constructor which you cannot do if you do extend mod Behavior okay question number eight what is the main difference between the out and the ref keywords meaning what is the behavior inside the function so is it that out does not need to be set whereas ref must be set or is it out must be set and ref does not need to be set or is there no difference these are two super useful keywords it allows you to have quite a bit more control over the code that you write this actually something that used to trip me up for quite a while but at some point I got it locked in in my brain and now I do know that the out must be set and ref does not need to be set and if that is correct and yeah this one is a tricky one since only 60% of people got it right basically the ref keyw this one passed the as a reference meaning it basically passes in a pointer to the original position in memory so if you change that variable directly inside the function it will also change outside since both won't be pointing to the exact same object however you are not forced to change it you can receive a r parameter and never touch it at all whereas the out qword that one tells the compiler this parameter will be set before leaving this function out basically means output so if you call some function and pass in some output you do expect some output to come out of it I've got a super tiny quick tip video on this topic so so as an example when using ref you can basically Define your function then you just need to have the ref keyword and basically this parameter will be used as a reference then if you modify this parameter inside of it it will also modify it outside of it again a while ago we were talking about the differences between value types and reference types and here we can see an direct example about it so int this one is a value type meaning normally when you pass in an in to a function it will actually pass in a copy and not a reference to the original object but over here since we are using the ref keyword instead of passing in as a copy now we are passing in a reference even though int is a value a value type so by doing this even though we are using an in since we passed in as ref we still modify the original value however like the question asks you do not have to modify it so you can just receive a ref and then not touch it at all this is perfectly valid code it's wasteful since you're not going to do anything but it is perfectly valid whereas the example with the out key word here's one example try to get the player name this usually when you want to use something like the out keyword usually I like to make functions that try to do something then they return the bullion whether they succeed or not and optionally have an out parameter if it does succeed at doing something so in this case it checks if it has a player if not then it basically sets the player name to empty and simply returns false because it could not get the player name if not if the player does exist then get your player name and return through so then to use it you can just have a bulling because this one is going to return true or false if it does have a name or not and then you can check if it does have a name then do a log on the player name this is pretty much exactly how Unity Tri get component works it does pretty much exactly the same thing it returns a bullion and has an out parameter however like it says here unlike ref when you use out you must assign the parameter so if you do this if you have an out parameter and you start and you end the function without ever assigning it if so this going to throw a compile error if you define an out parameter you must set it before you exit that function so these two parameters out and ref these are great ways to return multiple pieces of data from one function since normally you can only have a single return type you can only have a single type over here technically of course you can make a custom class a custom type to hold whatever data you want but you can only have a single type here whereas you can have multiple out parameters to return multiple pieces of data and just related to it is the in keyword this one force the parameter to only be used as input this is actually a keyword that you have to use if you're working with dots in order to handle all of the read write logic dots requires you to use the in keyword to Define read only components and alternatively if you're using C 7 you can also use something called tupon so you can basically Define a type that inside holds multiple types and then you can access those types with item one item two and so on or alternatively you can give them proper names along with their proper types and you can indeed make functions that return that tupon with all of those pieces of data so as you can see C has tons of ways to get tons of data from any function you want then the next question can color ever be null so is it yes always is it no or yes as nullable and now this is one that sort of ended up as a trick question even though that was my goal so can color ever be null and the answer is no because it can never be null but the answer is also yes because you can make it null if you make it a nullable so technically both these are also correct basically color is a struct and structs can never be null again definitely make sure you know differences between those two so color cannot be null just like ins cannot be null BS cannot be null and so on however you can make any of those into null if you use a nullable variable so in C you just add a question mark directly after the type and that makes it a nullable with this you can make anything into null for example a vector 3 you can make that into a null you can have a vector three nullable for the Target position and then you can check if this one is null then I assume that means no target position and if it does have value then that is the target position for example on the video where I made the third person shooter controller for that one it does a ray cast in order to find the mouse position in the world however of course the ray cast has to hit something if there's no collider than the rast is never going to hit anything so in this demo the simple thing that I did was just made some invisible walls directly all over the world that way the r cast always hits something but alternatively I could have also done this I could have tried doing the r cast and then if it doesn't hit anything then I would just set the target position to null and then I would have the shooter logic that one test okay does Target position have value if so shoot towards that position if not then there's no value and final question what will happen on January 19 2038 exactly at 300 a.m. 14 minutes and 7 seconds so is it going to be the Armageddon I hope not since at that time I will only be around 40 is it going to be the end of Unix time or is it finally going to be the humif 3 release date now even if you don't know just by looking at these questions you can probably guess the answer is yep it is the end of Unix time and for this one hopefully nothing will happen but basically this is the point where the 32bit number used for Unix time SS when that one pretty much rolls over like I mentioned in the previous question time stamps are insanely useful they're a super simple way to store time but of course since it's an INT that is constantly counting up since January 1970 if so if you use a 32 bit int number if so then at some point that is actually going to roll over and the maximum number that you can have is this value right here which if you convert that into a date it is going to turn into this date in January 19 2038 so this is pretty much exactly the same thing that happened on YK which actually at this point makes me question how many of you are young enough to not know what Y2K is basically that was the year 2000 and there was a home problem that could have happened because a lot of computer systems pretty much stored the last two digits of the year which of of course it works if you're in like 1970 1971 72 73 and so on but as soon as you get to 1995 96 97 98 99 and then goes back into zero if you don't handle that then all computers could go pretty crazy by suddenly thinking that we are now 100 years in the past so a lot of people had to work really tiredly to update all of those systems to make sure that they could handle difference going from 99 to 0 in most case I assume they just made four digits for the year so 1999 going into 2000 that wouldn't cause any issues and anyway so over here it's going to cause the exact same thing if no one handles it then it's suddenly going to turn into a massive negative number but a super simple fix is just instead of storing those unit time SS in a 32bit int it can either be an unsigned 32bit number or a simple 64bit number so for example in C that would be the type long and for this I actually experienced this bug myself in my game game Corp in the original flash version I was storing the money including cents in a simple int so for example if something was a dollar it was storing the value 100 and eventually some people played the game long enough and found success inside the game enough to surpass $2.4 million and all of a sudden that flipped and they end up with negative 2.14 million so this is definitely something that I did not consider when I made that game and I definitely learned my lesson always be aware of the limits of whatever type you choose make sure that during gameplay it never goes past those limits and if so use a different type all right so those are a bunch of questions I hope you found them interesting I hope you learn something with this like I said you can always find the latest questions directly on the website or simply go to your user page and enable the question of day and you will automatically receive an email whenever a new question is generated that happens every 3 days so it's always a fun way to learn something new all right so thanks for watching and I'll see you next time