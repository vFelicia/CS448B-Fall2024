hello and welcome I'm your code monkey I've been making videos on this channel for over four years now I've covered tons and tons of topics in over 600 videos one thing that I made sure to always do since the very beginning is read through all the comments every single day and answer as many questions as I can I've probably answered thousands of questions usually I reply directly to the person but if at least one person has a question then chances are there's more people wondering the same thing so here let's see some interesting questions that I answered that maybe you'd also like to know the answer to I've already done a bunch of these videos check out the entire policy see some more questions hopefully you'll learn quite a lot by seeing what others are asking starting off with a simple but very important question from my pathfinding video I have to say this is still one of my favorite videos I really love the debug Vision that I created to be able to see the algorithm working step by step and learning the algorithm is something that almost feels like magic how you just follow a few steps and somehow the code knows how to find the shortest path to a certain point anyway so in the video it's teaching a sound pathfinding and for that I created a path note hold some data for each path node specifically always available is including the algorithm which are the gcos H cost and F cost and I just defined them as ends then the question comes from a town who asks why doesn't the calculation for the F cost why does that not throw an error it looks like it should throw an error because the H cost which is used in the calculation has not been initialized now perhaps you might already know that ins do not need to be initialized but you might also not know exactly why I actually made a full video on this topic basically it has to do with difference between value types and reference types Valley types are the basic types kind of like in float ball and so on basically there are times where you make a variable and the data is stored directly in that variable and then you have reference types like for example a class where if you make a variable that variable does not actually store the class data directly instead it only stores a reference which points to the class data basically the big difference is reference types can be known whereas Valley types cannot if you define a value type like an INT and you do not give it a value then it defaults to 0 or 0 equivalent so if you define a float it defaults to 0f if you define a ball it defaults to false and if you define a struct which is a value type all of the fields are initialized to their default these value types can never be known although quick note alternatively csharp also has the null gone class which you can use if you want to make something like an end make it nullable but Valentines by themselves can never be known whereas if you make a variable of a reference type like for example some sort of class if you don't assign it to anything then it will default to know and then of course if you try accessing that reference then you have the usual down reference exception also made a really nice video on my fourstep process for solving every null reference exception so this question is very interesting because it brings about that difference between value and reference types learning about this difference is extremely important so if this is the first time you're hearing about it definitely go watch the full video explaining it this next question was posted in my turnbased strategy course it's on the Move action lecture the game is all about action so there's a move action shoot action interact action and so on and each action has a function to get a list of value great positions for example for a move action they are all of the Wonka Bon grid positions within a certain distance of the unit then the question comes from Drake dude who starts off by saying that the useful pin lists to every variable both owned by coworkers to stop that and instead go with the plural name and also somewhat related is that it can be first simplified by using the Evar keyword so you don't have to declare the phone variable type now let me start my answer by saying that naming rules can be whatever you want them to be my rules aren't necessarily better than someone else's rooms as long as you are consistent that is what matter most when you come comes to naming rules with that said for me the reason why in my variable names with the time specifically when it comes to enlist array is because I just got tired of having constant errors and having lots of trouble debugging all of it because the difference between valid grid positions and value grid position that difference is super small at a glance you really can't see the tiny s so you might look at the code and everything seems right but you really need to look very intensely in order to actually see that difference as an example look at this code and this code now go ahead find all the references of a single grid position and references to the grid positional list to me it is very clear that it is much much easier to find the list with the proper log name it is very easy to see that as a glance your brain sees it within 100 milliseconds there's no need to stress your eyes so that is my main reason adding a plural is too small a change whereas setting the type at the end makes the code much much easier to read for me after going through a lot of frustration I just decided to make it a personal rule to include the phone type name at the end and to never ever use plurals however here Drake dude also makes a good point if you write a type in the variable name and then you change the type then all of a sudden your code is wrong the variable name says list but it's really an array or a hash point or something like that so doing that can make the code hard to read that is definitely a valid point but nowadays all IDs have easy renaming functionality on Visual Studio you just press Ctrl RR and it automatically renames the symbol and every single reference to it so if you do change the time just take another second to quickly change the name and as for the second question inside this question why not use VAR to simplify the code again my answer is the same thing it's code readability I want my code to be as explicit as possible I don't want to obfuscate my code in such a way that it cost me an extra second to understand what it's doing always remember that code is only written just once but it's read many many more times so to me using VAR to simplify writing the code at the cost of code readability really doesn't make much sense although some of you might say when initializing a variable the type is right there on the right side so in that specific use case sure I guess using VAR doesn't cause too much harm but if you use it to grab the return value of something then all of a sudden the code moves a ton of read about it you need to dive into the function to see what type of the returns this is actually something that I really didn't like about the NT documentation on a bunch of places they like to use VAR so you read documentation of something for example like dots and you see code calling a function and sorting it in a VAR just by looking at that you have no idea what that variable ring is it an object of type A or type B is it a list array in boom there's no way of knowing without going through the entire documentation to find the return value of that function so I don't like VAR for the same reason that I don't like plurals in most cases it reduces code read value but again as I said in the beginning let me point out that living rules are personal so choose whatever works for you if you find that VAR and plurals do not hurt your Dev process then by all means use them of the rules that I have were developed over time as I write code and learn what first for me so find what rules make sense to you and then be consistent in following them this next question comes from my video explaining what is Json if you don't know it's a widely used text Data format that is really easy to understand and since it's so popular pretty much every single API uses it this question comes from ShoSho who asks since this is all text based doesn't that mean that the data can be easily manipulated by anyone and the answer is yep it can Json is not intended for encryption it is intentionally meant to be human readable and easily editable that's a feature it's not a bug now of course if you'd like you can try to encrypt it I mean it's just text or just by so you can use whatever encryption Library you want but in most cases only the game development you probably don't need to worry about it for example one topic related to this is with regards to save files I've also covered how to make a simple and safe system in another video and in there I use Json as the file format in that video I got some comments saying this means the player could easily edit the save file to give themselves a ton of free resource and yep that is correct my approach to that is really pretty simple if you you're working on a single player game then don't try to stop the player from cheating it's their game they're playing by themselves so if they want to give themselves a ton of cash or some superpowers then let them on the other hand if you are making a multiplayer game then yes you should teaching very seriously but in that case you should never trust the client at all regardless of whatever file format you want in multiplayer never trust the client one example of how widely used Json is is on the videos where I covered Azure and some cloudbased mechanics in there I use Json to communicate with a web API to store some data or run some logic it's really easy to define a struct with all data that I want to send then just use unity's builtin Json eternity to convert all that adding to Json and on the server side also use another Json utility to read back into a struct and easily understand it so Json is an excellent super easy to use format that is widely used in tons of things definitely learn about it and use it whenever you need to save some structured data very easily alright so those are a bunch more of your questions and my answers to them I hope you'll learn something new check out the entire playlist to see some more interesting questions I've already answered thousands of questions so stay tuned for more videos like this so you can learn from what others have asked alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and I'll see you next time foreign