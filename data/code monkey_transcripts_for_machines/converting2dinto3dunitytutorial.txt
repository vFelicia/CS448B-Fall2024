in this video we're going to learn how to convert a system from 2d into 3d most of my videos are made in 2d in order to keep things simple and easy to understand but they are not limited to just 2d so here we're going to see how we can take any of those and convert them to work in 3d let's begin hello and welcome I'm your code monkey and this channel is all about helping you will learn how to make your own games with enough tutorials made by a professional indie game developer so if you find the video helpful consider subscribing this videos patreon sponsor is bad adventure bad adventurer is a game development duo currently working on their first game Wayfarers edge it's a RPG focused on exploring and settling unknown frontier lands in a low fantasy and Wild West theme check them out at bat Adventure calm ok so as I said and most of my videos art into work including however very few of them are actually limited to two the only with a few tiny changes almost all those systems can work just the same in 3d that's exactly what I did when I made the wash your hands video game the game is built in 3d but it uses a lot of systems that were previously made in 2d so here we're going to look at a scene that we made in a previous video in 2d and we're going to convert all the underlying systems to make it work in 3d so this is the grid combat system made in a previous video and here it is everything working in 2d and everything is functional so I have my character I can move it on turnbyturn basis and attack an enemy yep there it is and we're going to convert that into this version functionally it's exactly the same but as you can see everything is built in 3d so here's my character I can still move them I can still attack and yet there you go everything works so we're going to convert the underlying grid system then we're also going to convert the Talman the mouse as you can see is also positioned in 3d the damage popups and the health bar are also in 3d as well as the same machine virtual camera and the characters which are always in 3d check out the code monkey upon steam interactive tutorials complete games and more click knowing the description and add it to your wish list this video is made possible thanks to these awesome supporters go to patreon.com/scishow to code monkey to get some perks and help keep the videos free for everyone alright so this our goal let's get to it okay so here we are in our starting scene so what we have here is what we ended up with in the great combat system video so everything is in flat 2d with basic turnbased logic so everything works and now we want to convert all this into 3d let's off with the simplest and most obvious which is the camera so here we are using a to the Eason machine virtual camera so here it is our virtual camera and weights doing is it simply following this empty game object so as this game object moves that's how we are handling the camera so to convert our camera from 2d into 3d we just select our main camera and in here instead of orthographic make it a perspective and now just set on the fields alright so here is our set up so everything still looks exactly the same but it's using perspective instead of orthographic so the camera does not rotate it simply pans to film sorry alright so for converting the camera this is pretty much all it takes here in the editor we can see that our sprites are Stone for the cone but our camera is now yep nicely in 3d now we can start placing our objects in 3d so first let's handle the background now there are two ways we can do this we can use a sprite renderer like we're already using and we simply rotate it in order to make it flat or we can use a proper 3d mesh so in order to make this as 3d focus as possible let's use the mesh instead so in here let's create a new 3d object let's make it a simple quad okay here's our quad now let's flatten it so 90 degrees in there okay it's flat and now one of the main differences between 2d and 3d is in here we absolutely need a material so let's make a material for our ground make a new material Brown material some like the background ok there's our material and just apply to this it's not all it's places on Y of 0 so it's down there and just scale all right so there it is we have our ground object with our ground material it's placed on zero zero zero and it's rotated to be flat pointing upwards so here in the camera we can see our ground now we can modify our camera movement to move on the X which is good but instead of moving on the one let's move it on the Z so here on our main script we have our sin machine fault transform and here we have our hidden camera movement where we are moving it and it's in here instead of modifying the Y we modified the cell instead okay here we are move upwards any up there you go and our camera is moving all the correct axis now since we have our camera and our background in 3d and let's set a cool effect which is the depth of field so we just make a new volume and here already have a simple moaning profile and if there's our depth of field effect so it's not only blurry up here and here no it's not ok so far so good now it's time to handle our grid system now there are two ways we can convert this we can convert the grid from being XY based and turn it into X head or we can keep all the internals in X Y and only modify our inputs and outputs both of those approaches are available here let's go with swapping the X Y for X Z so here as you can see our grid is going on on the y axis and now we want to make it flat so here in the grid class that we've been using whenever we are accessing a reference to a vector3 like for example here on a given position we need to swap this from using X Y T using X Z so instead of modifying this list directly let's make a duplicate so here is the grid class and just duplicated and call this the grid X Z all right now here let's fix all the errors in modified so here when we get the worm position set of X 1 what's with X then zero and we fill in dizzy and we can also rename this to be in Z and same thing here rename this function to be get XZ and we have an out on these it all right so here I have replaced all dimensions of a Y and replace it with Z and on our own position conversion we also made it to make sure that we returned on X 0 Z right so everything should be working now let's use this great class instead of the previous one so here in our main script we are initializing our grid of type grid now let's swap route for grid X Z alright so that's it everything works pretty much exactly the same and if there it is now our grid is correctly placed along the x z axis awesome alright so now that that one is working let's update the town map so town map is here it's using this class so in here again replace the grid for our exit grid alright so that's pretty much it in here then we just need to modify the visual so here in the visual the main thing that we need to change is down here when we are updating it so we're creating our mesh and positioning of our grid objects and everything should already be working since we modify the get one position on the XZ and the main difference here is just equal size from 1 0 1 all right let's see if that works ok so here there is the town map working and if we promise we can see that yep it is lying flat on the ground in order to make it work and also have to make an exit version of this function and again here just changing the Y for as n so in here is 0 Z and also getting the Euler rotation based on the X z axis and again here is everything at work alright so we already have quite a lot converting we have the background the camera the grids and the town map next let's handle the mouse so here on the grid combat system we are getting the mouse run position from this function in the utilities and here is that function and you can see that what it's doing is pretty much just we're having the world camera and doing a screen to run point on the screen position which is based on the input Mouse position so this works perfectly in 2d but in 3d you need a different method so it says that out in this script now the method that we need is essentially based on a ray cast so first we grab our camera and then we call the function screen point array and then we pass in our regular input mouse position so this returns a rate going from the camera through a screen point and then we can access our physics to do a simple ray cast using this ray then we have our ray cast hit info then we have the max distance and let's just put a very large number then finally we have a layer mask which we're going to see in a bit so this whole thing returns true if it hits something if so then we have the most position inside the array Cassatt dot point so we are using a ray cast that will collide with something so back in the editor let's create an empty game object let's a simple box Collider and here unless you stretch it out to occupy the home area so that that alright now we have a massive Collider occupying our whole play area and now for the collision let's put this on a specific layer so let's add a new layer in here and let's come with your mouse plane and we set this on to that layer ok so we can here let's expose a film to get our layer so of type layer mask for our layer mask like in the editor here we have our film let's select our mouse plane okay and now we can use this layer mask in here to make sure that only collides with that so we have our point now let's just add something to visualize it so here let's simply create a nice sphere this is just so we can easily visualize it so here let's expose that and then we take that transform and here we set it on our point ok so we should be able to visually see where our mouse is in the world let's test any up here we are and we can indeed see that our mouse position is correctly being calculated so instead of doing a basic screen twirl point we're doing a break s and colliding with something that is placed on our form so we are correctly calculating our mouse position in 3d space awesome now finally let's handle our units now the units are actually pretty straightforward since my animation system is already very much mesh based so the main difference is the shadow down here so here on the unit prefilm let's swap the shadow from a sprite renderer onto a 3d mesh alright so the shadow is using a quad is rotated facing upwards and using a shadow material and if there is only units have their shadow okay now one thing here since the units are sill flat I find out having them pointing straight up looks a bit bad so they're a bit too squished so one simple solution here is just add a tiny bit of a rotation to make them face the camera a bit more so like this this one a bit less squished in this one which I think looks better so that's the unit's taken care of now for these objects right now there are some placed all the way up here on the wine so let's put them down there and I'll also let's swap the Condors from the 2d in to the 3d and yep there's our objects now in 3d space so as we move the camera yep we can see that they indeed exist in 3d space so now we have the same issue that these frights are still flat so in order to prevent them from being squished if you do the same thing that we did with the units or another approach we can take to handle flat sprites is to simply make them face towards the camera so here I have this very simple script just as they transform look at the main camera so if we apply this to our visuals any of they are now looking straight at the camera so this is a bit of a different effect depending on which effect you prefer all right so all that remains are the tiny extra elements so first of all for the health bar now in here it's already using a vertical bar in 3d space so we don't really need to change anything if we wanted we could replace the sprite renderer with a mesh render but we probably don't want the health bar to be affected by lights so own leaving it as it is as a sprite renderer works just fine then we have the damage popups which were made in a previous video so as I click on him yep there you go damage crop is going up so let's pause the scene okay here we are and there's the damage travel right there again this element is also pointing upwards already so we're not the only thing that we would change here would be to increase it on the Y to make its pot a bit higher and yep there it is and now finally we just have the particles missing so they are based on the mesh particle system which I covered in another video the parkin system is mesh base so it's pretty much the same thing that we did for the town map over here on the mesh particle system class I've added a simple axis and then down here when we are updating each quand just adding a simple condition testing if we have the X Y or the x axis and simply using the rotation and the quad size so pretty much exactly the same as the Talmud and now in here move and shoot and yep it looks pretty good so the particles now being flat alongside our exact axis yep just like that now it's not exactly perfect since the particles are commonly just on the floor so as I shoot him yep then leave right from the floor so if you wanted you could improve it by making on with the particle position simulation act in 3d but just in this case for this quick simple effect it works pretty good so there they are on the particles lying flat on the floor all right so finally we just have one last thing so far we've been using the 2d renderer so we can also opt out for a proper 3d render so here in the project files I have the Universal render pipeline assets that we've been using and again it's set up to use a 2d render so I might swap out for a full render so in here we create a new go into rendering you RP and we make a new forward render and we use this one instead and now we just need to modify the shaders to use the 3d version so in here instead of the 2d shader go into u RP and this given let's just choose unlit and you appeared is everything working with the 3d render and now if we want you can play around with regular 3d lights so just create a new point light and your purists are seeing now working with 3d and lights alright so here is our final scene we made some tiny changes on a bunch of systems and successfully convert them from working in 2d to working now in 3d so there's the camera working in 3d it even has a nice depth of field effect the characters are on positioned around in 3d space the grid and town map our own position on for then the mouse is completing its position also in 3d space and functionally everything still works exactly the same as previously so all the logic as you can see it's independent from 2d to 3d so yep here we have our 3d scene alright so I hope this video helped you understand how if you find it tutorial showcasing something in 2d then chances are with a few minor tweaks you can make it work in 3d so when looking to solve a particular problem don't limit yourself to just one specific perspective check out the code monkey upon steam interactive tutorials complete games and more click knowing the description and add it to your wish list this video is made possible thanks to these awesome supporters go to patreon / unity code monkey to get some perks and help keep the videos free for everyone as long as you can download the project files in utilities from unity code monkey comm subscribe to the channel for more unity to churros post a new question comments and I'll see you next time