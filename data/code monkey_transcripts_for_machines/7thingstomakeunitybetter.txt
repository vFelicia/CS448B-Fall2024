hello and welcome i'm your code monkey now in the last video i did my response to a video that suggested that you shouldn't use unity in there i respond to each argument one by one by clarifying a lot of misconceptions definitely go watch that one if you haven't seen it and in there i also mentioned that i would make another video with some valid things that i think unity couldn't even improve so this is it that other video was already pretty long so i didn't want to make it super long or have to cut down on this one so that's why i made them separate and actually because of that last video in the end i will also mention two bonus things that i saw in the comments from that video alright so here are seven valid issues with unity that i'd like to see them improve starting off with a really simple one the version names i think the way they have the three version types makes perfect sense that being the preview tech in lts however the part that i think they should change is just increase the year by one right now we are in 2021 however the recommended version is the lts version which is version 2020. naturally that might lead people to think that the lts version is already outdated and that version 2021 is the current version so i think what they should do is just increase it by one so nowadays in 2021 we should be using the 2021 lts and the preview version should instead be 2022 that would make it much more clear that the tech and preview versions are the future and not the ones that you should be using in the current year again all i'm talking about is just a name change alone keep how they work exactly the same the same categories just increase the number by one i think that one tiny change alone would greatly help in avoiding any potential version confusion the next thing that i think they should improve is something that actually they have already improved in these past two years but i thought i should mention it that being just don't highlight preview or experiment on things as much usually during the unity keynotes it's all about highlighting exciting things in the future and while it's great to hear about exciting new things coming up in the future it doesn't lead to people saying the engine is in constant preview which really just isn't true that one is just a false perception caused by talking more about the future than what currently exists right now pretty much no one gets excited about hearing about normal 2d objects or basic tooting lights or regular animations even though those quote unquote basic tools really they're more than enough to allow games like hollow knight and valheim to exist now for me i love hearing about future things and where the engine is headed but i can see how it does lead to a lot of people seeing the engine in a negative way if you're constantly only talking about things that are in preview that leads to people thinking that that's all there is but like i said this one has already been massively improved in the past two years in 2019 the united thoughts were all about tons of preview packages and tools but since then unity has definitely focused more on highlighting things that are already out and verified and i think that's a very good thing although these past few years were also very different because of the whole worldwide thing but hopefully it was intentional so next year when hopefully the next unite conference happens hopefully they won't continue doing that and not overly highlight preview packages another thing that i think they should improve is in communicating all the things that they already do there's tons of super useful tools and features that they have already built but you probably don't know about specifically there's a bunch of them that only exist as github projects and if you don't know about them then you pretty much will never find them for example the nevmesh what comes with unity is a great starting point but also has tons of limitations it's why i recommend the astar pathfinding project so much it's extremely adaptable and very performant much more capable than the standard navmesh but did you also know that unity also has a navmesh exorcist project on github adding tons more features chances are you didn't know about that there's also a 2d exercise package with tons more useful functionality for any 2d games there's a ton of samples including complete projects like the multiplayer fps sample or the boat attack demo the issue is most people won't bother to browse their github which is massive and full of interesting things so most people just don't know that all of this exists another one that is a very well built and very useful tool is the photo mode it's really excellent and something that nowadays players love so adding it to your game will be a great plus but again almost no one knows about it there's no mention of it in the engine at all there was just one blog post and one video on the official channel and that's it so if you missed those then you have no idea that this exists yet another excellent one is the starter assets you have two controllers one in first person and one in third person both are excellently well made i showcase them in a video and even use the third person asset as a base for my third person shooter if you don't browse the asset store then chances are you have no idea that those excellent unitymade assets exist same thing for all the other assets on the store there's lots of awesome stuff all of it is free and chances are most people don't know about it so yeah i would say they definitely need to find some way of showing all those things to people using the engine maybe add another tab on unt hub or maybe a splash screen when you open the engine showing a random selection of those projects so i'm not entirely sure on the solution but i think they definitely should surface those projects a lot more and up next something that has been a pretty big negative for unity for quite a while is just no native multiplayer support there's always been a bunch of tools you can use which is great but the engine itself should definitely support natively and again this one is also something they are actively solving they acquired the ml api a couple of months ago and they're working on it under the new name netcode4gameobjects it's still in preview or rather in prerelease so while this one is not yet production ready it does seem like this issue should hopefully be solved in the coming months when it does i'll definitely be covering it in the video i haven't touched unity networking since a deprecated unit all those years ago and speaking of that one pretty bad thing they did in the past was essentially deprecating or seizing support for something before a newer tool was available for example like i said networking the official unit stopped being supported many many years ago and only now are we finally seeing an official multiplayer tool with the ml api another example was the render pipelines i think introducing urp and agrp is a very good thing but pushing those so hard before they were at parity with the builtin render pipeline doing that i think that wasn't good so that's another issue but thankfully this one seems to have been mostly solved as a recently so i hope they keep doing it this way for example the new input system is awesome and better than the legacy input manager in every way but it's also not being forced upon you you are still welcome to use the old input manager and one thing that i love is that you can actually use both at once so this one is great definitely give people more options instead of taking things before providing a suitable replacement then something which is or isn't an issue depending on how you look at it it's how ecs has been taking ages i say it is or isn't an issue just because i understand engineering is hard it's very difficult to predict what issues may occur especially with such a massive architecture shift so personally i do understand that ecs is more complex than initially expected and i understand that it's taking longer than usual but at the same time i also understand how people can be upset with that since three years ago all the talks were about how ecs is the future and it's so much better in so many scenarios and yet here we are three years later and it's not yet ready for production so i can see both sides on that issue personally i really like how the future of unity looks like but i'm also very happy with the current game object workflow so while i'm excited for what the feature might bring i'm also okay with waiting for it so with regards to this one i would say more communication but again i can also see how that's difficult if they have no idea when it might be done either way hopefully next year there will be some new information the last public ecs build was over one year ago also by the way over here let me clarify one important misconception that a lot of people get wrong there's a difference between dots and ecs i hear a lot of people complain that dots is still in preview which just isn't accurate dots is composed of the entity component system or ecs the burst compiler and the job system of those three the only one still in preview is ecs the burst compiler and the job system have been stable and verified for quite a while so keep in mind whenever you hear someone say that dots is stuck in preview that's just not true ecs is in preview but the job system in burst those are already done and actually on that note here's a quick news flash that just happened literally as i was editing this video there's an update on the ecs package the huge upgrade to version 0.5 is coming out early next year and then version 1.0 is planned for the 22 lts cycle so just like i hoped it seems there won't be lots of exciting developments related to ecs next year the next issue is how there should be some more clarity for how features relate to one another for example i've seen people talk about how they don't know whether they should use the vfx graph or the particle system whether they should use the input manager or the input system whether ecs will replace game objects text versus text mesh pro unity ui versus ui elements whether urp and agrp replace the builtin render pipeline or not should you use unity collaborate or plus xm there's a lot of confusion about a lot of those things now some of those are upgrades some are sight grades and some really aren't related at all now i'm not sure exactly how or where they could clarify the relationship between these films but there certainly is a lot of confusion on it there's even a popular meme about it in the unt subreddit and all the comments agree that this is definitely an issue so while i'm here let me answer these ones for the vfx graph and the particle system these are essentially side grades the vfx graph runs on the gpu and the particle system runs on the cpu so the vfx graph is great for massive amounts of particles but the particle system is still better for doing things related to collisions then for the input manager and input system the input system is pretty much a phone upgrade although the input manager is not being deprecated the input system does everything the input manager can do but do it better but again if your game is using the in legacy input manager then you don't have to worry it won't be removed next up whether ecs will replace game objects i saw this confusion quite a lot back when unity was constantly talking about dots like i said first of all remember dots is not ecs so on that the burst compiler and job system have nothing to do with game objects they work with any kind of object or data but then ecs also has nothing to do with game objects it is not an upgrade or even a side grade it's just another way of working that might or might not be suitable for whatever project you're currently trying to solve so on this one nope game objects are not going to be deprecated and ecs is not a replacement for it then on text versus text mesh pro this one is a straight upgrade nowadays text pretty much only exists for legacy reasons it's just there so your own projects don't break on new versions but text mesh pro is better in every single way and it's what you should be using it should replace both the world text mesh as well as the legacy ui text then on unity ui versus ui elements this one is a tricky one i haven't quite caught up to date with the development of ui elements this one is sort of a side grade it's a different way of building your ui but also from what i know unity is working hard to make it a better way of building your ui so in the future this might become a straight upgrade to unt ui but again unt ui is not being deprecated so keep using that without fear then whether urp and agrp replace the render pipeline for a while urp and hrp were missing quite a lot of features but by now i believe they have achieved parity so nowadays unless you have a very specific reason to use the legacy builtin rather pipeline nowadays yep you should be using either urp or agrp it should be a straight upgrade and finally on unity collaborate versus plastic sem i'm really not very familiar with these two so i'm not sure how they relate they bought plastic sem after unity collaborate already existed so maybe as of right now they are side grades but maybe in the future one of those two may come out on top again i'm not too familiar so not entirely sure on this one so yes all of these tools and how they relate to each other that can definitely be very confusing personally i know all of this because my job to keep track of all of it but for the average user yep definitely very confusing so i think this one is a potentially very big issue but honestly i'm not too sure how to fix it maybe when you add a particle system or a vfx graph component maybe there's a quick message to explain the difference i'm really not sure but this one is definitely an issue and hopefully they won't find a good solution okay so for the two bonus things that i saw mentioned in the previous video's comments first one is on the astastor and render pipelines i would say don't highlight assets that don't work with the new render pipelines the aztecs or has been around for a very long time so naturally there's tons of really awesome stuff that came out before the render pipelines were a thing and for most of those that's actually not an issue since the render pipelines have that builtin automatic converter however there are quite a lot of assets that use custom shaders and for those there's no automatic conversion process so either you convert them yourself if you're a shader programmer or you really can't use them now my suggestion isn't that they should remove those assets i would say keep them there but don't highlight them if they don't automatically work with new render pipelines for example a while ago there were a bunch of ent mega bundles those are always great heavy discount on tons of assets but a lot of the ads included in those bundles are very old and i remember quite a lot of frustration at seeing some assets that look really great but then seeing urp is not supported for example i was just this week looking for a really nice environment for an upcoming video i browsed my assets and saw this really awesome pack that i picked up in one of those bundles and upon opening it i saw that the asset uses a bunch of custom shaders which were not automatically upgraded so even though the asset looks really awesome in the videos and screenshots sadly i cannot use it so yes i would say keep those assets on the store but when choosing which ones to highlight in future sales or bundles make sure you only highlight things that support the render pipelines and for the second bonus point that i saw mentioned in the comments it is simply hide the old legacy features by default for example text mesh pro is better than the legacy text mesh and the ui text in every way so because of that there's really no reason to have them waste space on that context menu it's great that the engine keeps supporting legacy features so i don't want them removed but they should definitely be hidden by default just to avoid some confusion just make it example like the preview packages on the package manager add some sort of setting in the preferences where you must enable if you want to see the legacy text mesh or the legacy ui text and perhaps even the same thing for the legacy animation component and the legacy animation system so keep those features but hide them by default alright so those are a bunch of things that i think are vellum issues that they could improve and some other things that they've already improved and i hope they keep it up in the future now just in case someone from unity ends up seeing this video go ahead and post in the comments what issues you have with the engine and how you think they could improve it but also do make sure you watch my previous video so you don't end up mentioning one of the nonissues that i talked about in there either way the future looks bright so i hope unity keeps getting better and better alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and i'll see you next time