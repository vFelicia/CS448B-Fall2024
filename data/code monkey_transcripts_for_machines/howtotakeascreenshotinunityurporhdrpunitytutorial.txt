hello and welcome i'm your code monkey and here let's learn how to take a screenshot in unity we're going to look at an extremely simple method just literally one line of code and saves a screenshot and then we're going to look at a more advanced method which is also more versatile we can take a screenshot of the whole screen or only parts of it and use that same logic to convert any part of our camera into a simple texture which we can then use to build some really interesting things we can choose to include the ui or not we can take a super resolution screenshot and we're going to look at the difference between the old builtin render pipeline and the new ones urp and agrp if you prefer a more guided path with stepbystep lectures then check out my complete courses learn how to make a builder defender game using csharp just like i make my own steam games or learn how to make games internally using visual scripting or learn all about unity with the ultimate overview course which contains over 13 lectures each covering a different tool or feature of the engine to help you make better games faster i'm always available in the courses q a section answering your questions every single day so check out all the courses with the link in the description okay so i've already made this video once before a couple of years ago that video is using the builtin render pipeline so if you're using that you can go watch that video but if you're using the universal render pipeline or the high definition render pipeline then there's some slight changes so keep watching the video and here i will also mention multiple methods okay so first of all here is my demo scene it's just a static scene this one is from the polygon heist pack if you want to get it and also note how in this scene i've got a ui element up here this is going to be important so i want to be able to press a button and take a screenshot now if what you want is an exact screenshot then there's actually super simple method which i didn't actually cover in that other video so let's just make a script okay so let's listen to a simple key press now here we can use the class screen capture and in here as you can see we've got various functions for taking a screenshot you can do one which takes a screenshot and saves it on a rendered texture another one on a texture 2d and final one just take it and save it to a file immediately so this one truly is the simplest method you just call on that and pass in a file name so let's say gamescreenshot.png and that's it just one line of code let's test so here i am and i press the button and up here is my project folder and over here i've got the game screenshot and yep it is indeed the game screenshot so this truly is the simplest method for taking a complete screenshot also note how it also includes the ui and one more thing on the size of this screenshot if you're looking the properties you can see this is a 1080p screenshot and the reason for that is because over here on the game window isolated 1080p but if your players were using a different resolution then that would be the size okay so this strongly is the simplest method just a single line of code but on this function you also have another optional parameter you've got the supersize so this is going to multiply the resolution by this amount so for example let's say four now run the game and take a screenshot again and up here is my screenshot now it's 16 megabytes and if i look in the properties now it's four times 1080p so this can be useful if you're trying to take a screenshot of your game for print and you need a massive resolution so that's one scenario where you could use the supersize parameter also like i said note how with this method it automatically captures the ui but if you didn't want that then you could simply disable the canvas just before taking the screenshot okay so this is the super quick method literally just one line of code now let's look at a more advanced method which also allows for more interesting use cases now the main difference for the two methods that we're going to see is that one captures the ui and the other does not so for the first method we actually need to create a code routine and now the reason why this has to be a coroutine is because we're going to do a yield return and then do a new wait for end of frame what this line does it's going to pause the execution of this co routine until the entire frame finishes rendering so the camera is going to render the image render all the effects the ui and then finally after all that the code continues from here so after that happens then we can run our screenshot logic now the first thing we need is a texture 2d to hold our resulting image so in order to create we need a width and height so if you want to make a screenshot of the exact same size then you can simply define it as a screen width and height next up for the format now this is pretty important if your screenshot comes out and looking gray then take a look at the format in my case i normally tend to use argb32 and finally do you want mipmaps or not now for a screenshot we probably don't need them but if later on you're using this for some other use cases then maybe you might want them but again in this case we'll just leave it on false okay so we have created our screenshot texture our texture 2d and now the function that we're going to use to record the camera view onto this texture is we go into our screenshot texture and we call read pixels so this one takes a rectangle of the area that we want to capture so again let's build one with the screen dimensions and then for the destination x and y we want to print this onto the texture on the lower left corner so let's use just that and then finally we can do the screenshot texture called dot apply to apply all changes okay so that's it now our texture will have the view of the screen now with this done all we really need to do is save it and before we save we need to convert this into an actual saveable format so for that thankfully we can use the screenshot texture and just run encode to png or any of the others but png is usually pretty good so this returns a byte array and then with the byte array you can simply go into system.io dot file dot write on bytes and just write in this byte array all right so i'm just using the application.datapath so this is the path to the game data folder and then inside just camerascreenshot.png okay so that's it all we need to do is run this co routine so just up here when we press the button start co routine and start this code routine okay so let's test okay here i am and press the button and if i look in this case inside of the assets folder there it is the camera screenshot and yeah there it is there's our screenshot so as you can see this method contains an exactly perfect screenshot so it has all the camera view as well as the ui now again like i said previously if you didn't want the ui you could disable the canvas like i mentioned that other method or you can instead use the next method by the way if you find the video helpful please hit the like button it's a tiny thing but it really does help thanks so for this next method that's where it comes the difference on urp and agrp as compared to the old builtin render pipeline so in the screenshot video this is where i then use the function on post render so this one was called when the frame finishes rendering however this function really only runs on the builtin render pipeline so if you're using urp or hdrp then this will never be called so the alternative is instead to subscribe to a callback on the render pipeline so first we need to add using unity engine.rendering and then we can just go make a simple awake then access the render pipeline manager and now here we've got all kinds of callbacks so this one and camera rendering won't be called when the camera finishes on the rendering so you can just add a comeback onto this one and as usual when subscribing to a comeback or an event make sure you handle some cleanup so in this case you could either add on awaken on destroying over here unsubscribe or alternatively instead of these two just on enable on enablement disable so on that one subscribe and on this one unsubscribe okay so we've got this function and now here we can just run the normal screenshot logic so let's just copy this and just place in there and all the screenshot logic is exactly the same however again this one is a comeback on the render pipeline so this will actually be called on every single frame now that's not what we want so let's add a simple boolean so just a simple volume when you press the button set it to true over here if it is true set it to phones and take a screenshot okay so with that done we can now test so here we are let's press the button there you go i took a screenshot and here is the camera screenshot and yep there we have our screenshot now note how with this method it only has the camera view so the ui is not displayed that is the one big difference when compared to the previous method so the previous method using a co routine it waits for the end of frame and then it reads the whole thing whereas this one runs after the camera and before the ui so that is why the ui is not included now like i said these last two methods they are much more versatile than this one which is just a single line of code so first of all you don't have to take an entire screenshot of the home screen so for example if you only want to capture the middle or just a single corner then over here just something like 256. so if we run this and take the screenshot and if there's the camera screenshot it's just a 256x256 texture and as you can see it contains just that little corner so using the first method takes a full screenshot but with this one you have control over exactly what part of the screen you want to record in order to select which part you want to record you really just need to play around both the width and height and over here on the right just modify the x and y for the starting pixels so you can grab any part of your screen also yet another method somewhat related to this is you should know about rendered textures which i covered in detail in another video that one allows you to get the view of any camera you want and do something with it so maybe another camera with a different post processing placed on a different part of the map for example go watch my video on how to save a screenshot along with the save file in there i cover how you can save a view of a different camera in order to make the saved image different from what the main camera sees then of course with whatever texture you grab from this approach you could then show it in a ui element or maybe feed it to a shader or something like that so you can see this last approach which composes of these two methods this one is more complex but also is much more versatile but if all you want is just a single screenshot then a single line of code will do now go ahead and implement either one or both these methods in your game again if you're looking for a more guided path with stepbystep lectures then check out my complete courses alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and i'll see you next time