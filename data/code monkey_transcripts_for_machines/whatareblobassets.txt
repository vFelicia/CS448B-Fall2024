in this video we're going to look at blob assets in unity dots we're going to learn what they are how to create and how to use them this is what unity uses internally to handle dots animation data physics shape data and more let's begin hello and welcome i'm your code monkey and this channel is all about helping you learn how to make your own games with inapp tutorials made by a professional indie game developer so if you find the video helpful consider subscribing okay so blob assets are a very interesting feature of unity dots first of all if you're not familiar with unity dots then check the links in the description blob assets are essentially containers of immutable data that can be accessed through a reference so this is a way that you can store a reference to some data that you can then access from all of your entities and because they are immutable that means you can safely read from plot assets from multiple threads at the same time which means it's insanely performant this can be useful for any type of data that doesn't change in your game so for example animations scriptable objects fixed world settings unit stats pathfinding maps and so on you store whatever data you want in a blob assets and read from it concurrently from multiple jobs the way you create and use blob assets is first you construct a blob asset normally during the game object conversion system you define all of the data that will go inside the bob asset and set it when defining the data you define the struct that holds your data then you have several containers for it first you have the blob array which is a normal array holding several instances of your data then you have a blob pointer which is a simple pointer to a single instance of your data and then you have a blob string which holds a simple string with the ballast asset constructed then you have the blob asset reference which is how you store the reference to your blob asset inside an entity component and then you can access that blob asset from anywhere like inside a job read that data and do whatever you want in a future video we're going to look at how we can use bob assets in making a custom dots animation system this video is made possible thanks to these awesome supporters go to patreon.com unitycodemonkey to get some perks and help keep the videos free for everyone okay so let's look at an example to try it out as i said one key aspect of blob assets is how they are meant for immutable data meaning data that doesn't change so for a simple example let's look at how we can define some positions in our world and have our entities follow them as waypoints so first let's make a script where we're going to define the plov asset data so we create a new csharp script let's call this the waypoints blob asset now inside let's first define a very simple struct so a public struct and let's come with our waypoint and inside all we're going to have is a public for 3 for our position and yep that's it it's that simple so this type will represent a single waypoint and we're going to have several waypoints in our blob asset so now down here let's define another public struct call this the waypoint blob asset this will be the actual blob asset type and inside we want to have an array of waypoints so for that we use the type lavarray we're going to make an array of type waypoint so we have our type waypoint blob asset which holds an array of our waypoints which themselves each of them holds a float3 for the position so this is the very simple structure of our blob asset now it's actually constructed so back in the editor and let's create a new csharp script call this the waypoint blob asset constructor okay so now this one will be a game object conversion system i covered the game object conversion system a bit in the dots prefabs video essentially this system will run during the game object conversion and the function that you need to implement is called on update but it's really just going to run once during the conversion now in here we can construct our blob asset so the first thing we need is use a blob builder which takes an allocator so let's make it temp and now this object needs to be disposed so one way we can do this is with a using code block there we go using our blob builder and now to begin building our blob asset the first thing we need is to use our blob builder in order to construct a root and we pass in our blob asset type which is our waypoint blob asset this function returns a waypoint log asset so we store it and now here there is one very very very important thing which is you must use the ref keyword both on the function and on the declaration of the variable itself if you forget to add the refs then essentially you'll be working with a copy which is not what we want so always make sure to remember to add your refs so here we have our waypoint blob asset and inside our blob asset we have our po of array this will be a fixed length array so we need to allocate some memory for it and we do that is we use the blob builder in order to use allocate then we pass in the reference to our array so we pass in a ref to the waypoint blob asset and we use our waypoint array and then the length of our array so in this case just for a very simplified example let's just add three waypoints now this as you can see returns a blob on the right now using this array we can fill it up with our data so all we do is really just access it on the index so just for testing let's make our three wave points okay so here we have a simple example of a waypoint triangle now here we're adding our waypoints directly through code but it's only to keep this example simple in a more real use case you would create a custom authoring component and set up your data like you do with components in the gameobject conversion system i will show an example of that later in the video so with this we have set up our blob asset we constructed our route we allocated space for our array and we filled it up the array with our data so with all that set up then we take our blob builder and actually create the final blob asset reference so we use the blob builder in order to create the blob asset reference and we pass in our allocator and make it persistent all right so here we have our reference now here let's test out this code to make sure the blob asset reference was created correctly so we just do a debug log let's go into the waypoint blob asset reference then we access the value that will give us the waypoint blob asset and then let's access the waypoint array and do analog on the length so if everything is correct the console should say three and if there's our console indeed saying three now let's test printing the waypoint array and let's access the position one and print out the position and if there's our log with our waypoint position so we have our blob asset correctly being constructed and turned into a reference awesome so you can see how it's actually quite simple to create a blob asset you use a blob builder in order to build it you start off by constructing the route then you set up all your data so in this case we have a blog array so we allocate memory for that array then we fill up that array with our data and then finally we construct our blob asset reference that we can then use so now that we have this let's see how we can actually use our blob asset reference we want our entity to follow the waypoints so back in the editor let's make another script let's call this our waypoint follow now inside this is going to be a normal component data so we have our basic component and now for the fields we're going to have a blob asset reference and we pass in our waypoint asset type and then let's also have an int for our waypoint index to fall so we're going to move our entity towards the waypoint on this index then when we get there we increment the index to go to the next one and so on and so on and now we actually need to set this field on our entity so for that we have plenty of methods we could for example in here construct an entity and create a component to hold our waypoint asset reference then we would have our moving entities actually grab it from that component that would be a good approach if we were going to have more entities being spawned but in this case here we're just testing with a single entity that is already converted on start so we can simply set it directly in here after we construct our asset reference let's first store the reference out here so outside of our using statement we get that and we assign it in here okay and now afterwards let's set that component on our entity so here in the editor i have my player object as you can see very simple just has a convert to empty script a basic mesh with a material and then it has the tag player the player tag is in here as you can see just an empty tag component so this is how we can identify the player so here after we have constructed our blob asset reference let's get the player entity and now while researching this part really tripped me up inside of the game object conversion system you have two entity managers you have the normal entity manager except this one refers to the entity manager inside of the entity conversion world whereas in this case we want to access the entity which by now has already been converted so there's another entity manager in the game object inversion system which is the destination entity manager so this really tripped me up because i was looking for the player on the normal entity manager except the player had already been converted so he did not exist inside of that world so when working with the game object convergence system keep in mind that you have access to two different entity managers all right so using this one we can now locate our player so we create an entity query pass in the type of our tag player so we have our player empty query then we grab the player entity by going into the player empty query and since we only have one then we can use the get singleton entity okay so just like this we have our player entity and now we can just set our waypoint follow component so again using the destination entity manager we call our set component data we call our add component data onto the player entity and we pass in the waypoint follow component now here we can pass in the waypoint mobasic reference as the one that we created up here and yep just like that so up here we construct the waypoint as the preference and then we set that reference inside of a component that is held by the entity player now finally we just need to do one last thing to make sure that this actually works which is since we're setting the component directly on the player entity we need to make sure that the player gets converted before this system runs so in order to do that we can set this system to run after the normal conversion group so we go up here and add the attribute update in group and pass in the type of and the game object after conversion group so this will make sure that this system only runs after the game object conversion again this is just one possible approach we could also have the blob asset reference be created before the player entity and have the player itself go look for the blob assets in order to set the component all right so now over here we have our blob asset reference and it's referenced inside a component that is held by the player entity so now we can make a system that will read through the blob asset and actually move our player entity so back in the editor let's create a new script call this the waypoint file system now in here this will be a very basic follow system so here on our system we just do one entities do a four each and we're going to make the four each only run on entities with our tag player component then in our for each let's make sure that we grab the waypoint follow component and now in here we have access to the blob asset reference so we go into the waypoint follow component in order to get the bomb asset reference and get the value so with this we have our plot asset and now we can access the evolve asset we're going to access the waypoint array then access it on the waypoint follow index and then we get the position and just like this we have a full 3 for our waypoint position and yep there it is very simple so now we just do some basic movement code in order to move towards this position all right there it is so first we calculate the direction towards our waypoint then we move towards that direction afterwards we test the distance between the current position and the wave point position if it's close enough then we have reached our waypoint so we simply increase the wave point index and do a remainder of the length of the array so it keeps looping over and over all right now we can finally test and run our code and yep there's the entity moving from waypoint to waypoint awesome so you can see that it's going to position zero zero then over here five 0 and 2.5 2.5 so there you go constantly going over and over so what we have here are of the waypoints set up in a blob asset then the entity is accessing that blob asset and following the various waypoints the main benefit is you can have whatever that you want inside of bob assets and since they are immutable you can access them from multiple threads without any safety issues this is how for example you would have animation data inside of a blob asset and multiple entities reading from it in order to update their animations now let's look at a more complete example okay here i have another scene with a bunch more things as you can see there's a bunch of entities being spawned and they're all following the various waypoints so here we're not directly setting the blob asset reference on just a single entity each one is grabbing its own reference the reference to the blob asset is stored in a simple static field which again is another method you can use so when they get spawned they grab the applied acid and then they go through their logic here i also made the blob asset using a custom authoring component and the conversion workflow so here in my scene you can see that i have my waypoint blob asset then i have three game objects to use as our positions so there's the blob acid authoring component which contains an array of transforms and then just have a bunch of gizmos in order to easily move around so let's say move it in there and there here is the authoring component essentially what matters is that we have a public array of our transforms and then we declare our reference prefabs over here is the conversion system as you can see it's the same thing we were doing previously we construct our root then we use a get entity query in order to grab our asset authoring component then we allocate our space for our array and we simply fill it up with our positions then over here i also have an example for how you'd use the plot pointer as well as the blob string one thing about the string though is apparently you cannot use it inside a using statement so in order to locate the string you would have to take this out and you would have to manually create the blob builder and then dispose of it in the end so just a weird quirk you cannot use it in a using block but it works exactly on the same then the entity spawner system is in here it just counts a simple countdown timer it instantiates an entity prefab which i covered in a previous video so check it out if you want to learn more about this and then we simply add the component data and in here we're passing in the blob asset reference by using a static field in our constructor so here is a constructor with a static field so again different method then as you can see they follow the waypoint positions and since i'm using this nice authoring component i could for example add a bunch more so just make a new game object in here add it onto my simple list and then just position this object and let's say put it in there and now if we run and yep they go they go into that position and onto that one and now into our new waypoint position so there you go now we have four positions so here it is a nice working demo showcasing how plug assets work blob assets are what unity uses internally in order to handle physics shape collision data their dots animation data curves and so on essentially any type of immutable data that you have you can store in a blob asset in order to access it super fast from multiple threads without any safety issues stay tuned for an upcoming video where i will be using plug assets in order to make a custom animation system very much like the one i use in normal game objects this video is made possible thanks to these awesome supporters go to patreon.com unitycodemonkey to get some perks and help keep the videos free for everyone as always you can download the project files and utilities from unitycodemonkey.com subscribe to the channel for more unity tutorials post any questions you have in the comments and i'll see you next time