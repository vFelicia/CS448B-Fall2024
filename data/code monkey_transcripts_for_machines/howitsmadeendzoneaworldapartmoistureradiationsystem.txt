hello and welcome i'm your code monkey here is the game endzone a world apart which features some interesting mechanics and systems let's inspect and remake the soil moisture radiation system to see how it works it involves a grid system spawning some moving clouds adding moisture as the rain falls making the water spread throughout the map and of course dealing with radiation hopefully you'll learn something new that you can then apply to mechanics on your own games by the way i'm trying out this format because there were a lot of comments on my game design breakdown videos asking for a more actionable tutorial format so let me know if you like this type of video alright so first just a quick overview of what the game is about the game is called endzone the world apart it just had its full release coming out of early access after one year of constant updates it's a very interesting city builder where you essentially rebuild after the nuclear apocalypse so that means you have to deal with radiation droughts sandstorms and so on you need to build up your colony by giving your people homestone living set up some supply chains to gather food and water and of course make sure nothing is contaminated the game features an endless survival mode but also some really unique interesting scenarios in one of them the goal is to find all the seeds in the world another one you start with a completely broken settlement and need to rebuild and so on so if you're into city builders then this is a very good one i've definitely enjoyed my time with it and this is also a game made with yinty if you want to pick it up there's an affiliate link in the description and if you use that you'll also be supporting the channel and follow the curator page on seam if you want to see more of these types of videos okay so the game features a bunch of interesting systems and mechanics with one of them being the soil moisture radiation system so let's see how it works this is one of the more complex systems but once you understand the basics it's relatively simple to implement as the seasons go by you have some seasons with tons of rain some with very little and sometimes you have fallen droughts the soil system has a moisture save and also a radiation state and to handle that the whole game is run on the grid you can see it when you play sound buildings i've already done quite a lot of videos based on a grid system this is something that is insanely useful for tons and tons of games you can go watch the whole playlist to see a really nice criticism being built step by step in the system that i made you can define a class that will be instantiated on each grid position so that's perfect for building something just like this soil system you just define the class that is placed on each word object then you can store any data you want in any of those positions so in this case maybe you define a float to store the moisture state using a float you can make it a simple normalized value with zero being completely dry and one being fully wet and the other part of this system is the radiation so for that one you can either make a completely separate grid or simply just add another float over here for the radiation then the game actually splits moisture into four categories so you've got dried out dry moist and wet you can use a simple enum to define these values and then some basic math to convert the float value into these enums then for the radiation there's only two states either it's radiated or not so for that you can just define a certain volume like maybe 0.5 and if it's above this value then the position has radiation and if underneath then it does not then just a simple function to return a volume by the way if you find the video helpful please hit the like button it's a tiny thing but it really does help thanks then with that you just use a visual for example like the tile map that i made that works on top of the grid system then you convert those moisture states into various colors so that's the base of the system with that you have all of the data you need then for handling the moisture and drying out of the soil system the game has an actual cloud simulation meaning that there are some clouds and you can see them moving around both in the visual as well as on the tile map it's a great way to add some more complexity to the system to make it feel much more realistic as opposed to having moisture just come out of thin air for that you could define some cloud shapes maybe by drawing them on a texture then you just cycle through every pixel in that texture so just a basic cycle going through the whole width and height of the texture to the object and then you check out the pixel color in order to convert it into a simple boolean grid you can make a texture with literally just one channel or a normal texture and paint the area in white or just one of the main colors so red green or blue i covered lots of interaction that you can do with textures and pixels in my series on how i made the characters in battleground tycoon so you can grab pixels copy paste them and so on and the reason why you convert it into a bowling grid is simply for performance doing a get pixel call on every single pixel on the texture is a pretty expensive thing whereas simply grabbing the value from a boolean array is pretty cheap so essentially the bowling grid just acts as a cache for the actual texture so now with that you have a grid with all the positions that the cloud has then you just need to combine that data with the position of the clouds and the underlying soil grid so you can spawn an actual cloud object and move it over the scene then on every certain amount of time like for example 10 times per second you simply grab the cloud object position and convert it into a grid position you do a second going through all the positions in the cloud and add moisture to all of those soil grid positions for even more complexity you can make that valley depend on the weather examiner like the game doesn't the game has the season system and some of them have tons of rains and some of them have no rain so you just check with that season system to figure out just how much moisture to add on every song now i mentioned you run this on every certain amount of time and not on every update again the reason is performance if you have a very large world and you try to update on every single frame then it's going to cause a serious performance impact there are usually two ways that you can do to achieve better performance either you make the logic run faster or you just run the logic less often so in this case running it less often is perfect and the player will definitely not notice one super simple way to manage that is with a time take system which i covered in detail in another video it's just a very simple class to run some logic every certain amount of time as opposed to on every update i've used that simple class in that simple system in pretty much all of my steam games in order to ensure good performance so with that you have the clouds adding moisture then you just make multiple cloud shapes and combine it with a system to spawn clouds randomly over time and you have it all working the clouds spawn they move normally they constantly check their word position and if the cloud has some rain then adds moisture onto those positions for drying out it's also very simple you just constantly go through all the positions in the grid and lower their moisture by a tiny amount so if there are clouds and it's raining it will also receive more moisture than it dries out but as you stop spawning clouds then the whole thing becomes much more better now once again the game takes this even further every season you have either rain or no rain but then you also have sunlight so again if you want to have more complexity you can integrate this so instead of lowering the moisture on every single position every time maybe you do the same logic as for the clouds except you check for the sun amount and then you dry out more where there's no clouds as opposed to where there are clouds so with that simple addition you add even more complexity and realism to this system without adding much more effort with all of that you end up with a really awesome soil system but as you can see it's on based on some very simple interactions for the radiation it's really the same thing just maybe you spawn it differently as i said you can have a completely separate grind to handle just radiation or simply reuse the same one then the game features some seasons with toxic rain so if that's the case then you can add a bit of radiation on the exact same logic where you add moisture from the clouds however the game also sometimes gets radiation out of nowhere so for that you can do a very similar logic except instead of spawning some moving clouds you just spawn a static radiation cloud on just one position so no visual then you add a ton of rain with radiation instantly and you despawn that cloud with that you end up with radiation pretty much popping out of nowhere now with all that there's still one thing missing from this system just like this you have some areas that are wet where there are clouds but it can be completely burned right next to it that's not really realistic in real life water moves around it doesn't say static if there's somewhere it can go so for that you can cycle through every position on the grind then you check on its neighbors if they have less moisture then you grab some from the accurate position and transfer it to the neighbor so over time the water spreads all throughout the world even if you just spawn a single cloud right in the middle of the map again some extremely simple logic the only challenge with this one is really just making it performant so as you can see this is a great system and it looks extremely complex but it definitely is something you can recreate in your own games all it takes is an underlying grid system and some clever logic to make that simplicity and look complex then of course the farming system interacts directly with the soil system it is also working on a grid just like every building and every plant has a grid position so that plant simply asks the soil system to get the moisture and radiation underneath based on the moisture the plant will grow either faster or slower and based on the radiation the final food item will either be clean or radiated again some pretty simple logic so that's how you can recreate this system in your own games if you want to pick up the game there's an affiliate link in the description and if you use that one you'll also be supporting the channel and follow the creator page on steam if you want to see more of these types of videos like i said i'm trying out this format because there were a lot of comments on my game design breakdown videos asking for a more actionable tutorial format so let me know if you find this format helpful also let me know what other games have interesting mechanics that you like to know how they work alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and i'll see you next time