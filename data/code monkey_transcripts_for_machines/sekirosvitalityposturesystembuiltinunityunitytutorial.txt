hello and welcome I am your code monkey in this video we're going to create the vitality and posture system from Sakura shadows I twice let's begin okay so this is what we want to create this is the vitality and posture system from Socorro Shadowside twice the red bar is our health bar and this bar is the posture bar over here I have some buttons to interact with the system for example I can increase and decrease the posture as you can see it increases the examine like in the game going from middle onto the sides and the color also shifts from yellow into red once it reaches the limit there you go posture broken and we have a nice omelet then for the health we can also damage it and there you go we have a nice animation showing the amount of damage from the in last hit then we can also heal it back up all right so let's get to it so let's start off by making the visuals in our UI over here in the project folder I already have a bunch of textures that we're going to use so let's go into the canvas and start by creating an empty game object let's call this the hell posture you want inside let's make an empty game object this will be the health bar top but the image component and drag the vitality bar top okay now underneath it let's put a simple image and in order to be able to use the sprite options let's use a simple sprite which will be our white pixel and now we can go here into the filmed select horizontal from left to right and now we can change the fill amount and finally let's have the health bar background which is just a solid color okay so this is our health bar we have the background which is a somewhat common we have the bar which you can modify the filament and we have the health bar on top ok so now for the posture bar so we're here I have the texture for the bar which we're going to stretch and the background so place the background then on top of the background let's put the posture bar however we don't want it to look like this we want to make it work exactly like in the game which is it stretches from the center to the sides so in order to do that we go into our texture we go into the sprite editor and here we drag the sides into there and just like that the center portion gets stretched but the edges stay correct so let's apply and now we can go into the posture bar and change this from simple into sliced and yep just like that it works as you can see if the width goes down the bar expands from the center to the sides and the sprite is in white since we're going to tint this as the posture increase so start off with a yellow orange and then it starts getting red as it gets more full okay so our visuals are all correctly set up for the posture bar we just need to modify the width and for the health bar we just need to modify the film a month now let's deal with the code let's first make the script that won't handle our visuals so in the scripts create a new C sharp script and this will be our and health posture UI visual let's drag it onto our window okay now in here first let's grab all of our references okay so we have our health bar we're going to grab the image component and for the posture we grab the right transform component so now let's make some functions let's make first a public voice call it set health and in here we're going to receive a parameter for the health normalized okay so this function will receive a normalized value for the health so it won't be one if we want for health and zero if we want empty so on we need to do is going to the health bar image and set the fill amount to our health normal okay that's it for the help function now for the posture make another probably going for the set posture and again we receive a fall for the posture and normalize now in here we're going to modify the posture bar right transform modify the size Delta which takes a vector two so we need our width and then our height so for the height we keep it exactly the same and now we need to calculate the width so in order to do that combination using a normalized value all we need to do is a constant for our bar width so let's go up here make a private concert for the posture bar width so let's view in the editor the width of our foam bar here is the posture bar and as you can see it is foam when it gets up to about that so let's say 560 so our posture bar width won't be 516 and then all we need to do is in here we passed the posture normalize and multiply it by the maximum okay so both these functions should be working so let's create some testing so for example let's make a prayer to it start so here on let's set the health so we call sat home let's put that 80% so we pass in point 8 F and let's also set the posture and let's put it at 20% so point 2 out okay so the health should be mostly full and the posture mostly empty let's see and yep there they are the health bar is mostly following the posture is mostly empty alright so the basics of our visuals are working now let's work on the logic so for that let's create a new C sharp script this will be our health posture system now we're separating the visual from the logic in order to keep our code nice and clean so let's open this script and then here first of all let's remove monobehaviour since this will be a very simple class now the first thing we need is to store the current state for the health and posture so for that let's sort of them as hints so we get a president for the health month and a private int for the posture among now let's also store the maximum values we're going to store them as normal variables so we can easily modify it to support upgrades or tougher enemies so in here we simply do a primitive for the health amount max and the same thing for the posture okay these are the fields we need right now so let's make a constructor and in here we set the health amount max let's put it at 100 for the posture mount max so it's also putting on a hundred for the starting health we start off with the health amount max and for the starting posture we start off at zero all right so this is our setup now let's make some functions to return normalized values of our health and posture so in here make a public float this will be the get health normalize in order to get a normalized value all we need to do is return the current amount divided by the maximum so return the health amount divided by the health amount max however these are two integers so we must remember to convert them into phone so in here convert the first one in default and the result won't be a fault if we didn't do that and we were dividing an INT by another int we would get an incorrect value int cannot hold decimals so anything with the value would simply return a zero alright so let's do the same thing for the posture normalized okay so everything seems correct now let's link up the visual to the logic so for level is going to the visual script and in here and let's make a function to set the logic so we make a polaroid set health posture system and in here we're going to receive a health posture system object let's store it as a variable okay so far so good now let's set up our visuals for testing so here on our start let's create a health posture system so we create a variable equals a new health bustard system and let's set this one to be the one that we're going to use so set the health foster system and we pass in this project again this is just for testing in a proper game you would obviously run this code to create the health pasture system somewhere else like for example on your character script you would create it in there and then pass it on into the visual which would display it so after setting the health posture system let's have the health what we grab from the help foster system gets normalized and same thing for the posture we go into the system and get the posture normal okay so let's see if our health is completely full and the posture completely empty and yep there's the health Cibola phone and the posture completely empty alright so far so good so now that we have the logic and visuals linked up let's add some functions to damage our health and increase our posture so let's go into the system and in here first make a public void health damage we're going to receive an end for the damage amount then all we need to do is reduce the health amount by the damage amount all right now a function public void posture increase we're going to receive an int for the amount and we simply do the pass your mom was equals our amount so we can now damage our health and increase our posture so when these values change we need to somehow notify the visuals so for that let's use some events so going up here let's make a public event event handler and let's call this on health change and let's also make one call on posture change okay now let's call these events on our function so in here on the health damage if the event has subscribers so if it is not known then we're going to call it pass in this reference and event are empty do the same thing for the posture and just like that we have two nice events that won't get notified whenever our valleys change so using that we can now go back into our visual and here we can subscribe to the events to update our bars so here when we're setting the health posture system let's use this to go into the health posture system and subscribe to the on health change event so when the health change we want to update the house so it's exactly what we were doing in here we set the health and we give it the help normalize and let's also subscribe to the on posture changed event and here we update the posture and it's that simple so when the health changes on our health posture system it will fire the on health changed event on that event it will call this function and this function will set the health 2d help normalize okay so now let's make some nice tests to see if the bars are indeed updating as the eval exchange so here for testing let's create a function periodic this is part of the code monkey Tony's that you can grab for free from unity code monkey calm so in here I can create and it won't trigger an action every certain amount of time so let's say every 200 milliseconds let's cause some damage so we're going to trigger this action and in here we're going to go into the help foster system and cause some health damage okay so every 200 milliseconds this action won't trigger and it won't cause five health damage so let's see if the bar correctly updates every time it takes some damage okay there's the bar and yep as you can see the health is going down and every time the health system gets damaged the bar correctly updates all right good so that we have this working let's figure out when the character is dead and also when the posture has been broken so back in our system for testing for death it's extremely simple here we are decreasing the health amount by the damage amount all we need to do is test if we are under zero so we do if the health amount if it is less than or equal to zero then the character is dead let's set the health amount to zero so it doesn't go into the negatives and I mean here let's fire an event so let's go make a new event call this on then and let's go and fire this event all right so that's it for testing on death now for the posture we need to test when the posture amount goes past the maximum so let's see if the parts your mount if it is bigger than the posture amount max then posture broken again let's put it into the max we doesn't go past it and let's fire an event so again on that and here on posture broken okay so whenever we call help damage we reduce the health amount by the damage amount we test if it is under zero if so it is dead and we fired this event on the posture increase we increase the posture mount we test if it is above or equal to the maximum and if so we fire the unpassed your broken event okay so let's go back into our testing code and here let's subscribe to our new event so on the health posture system subscribe to the on that event so here when he's done let's do a popup so go into the CMDB class which again part of the code monkey tony's in here i can simply call a text pop up on the mouse position and let's just say dead alright now subscribe to the health posture system dot on posture broken and let's do the same thing also fire an ice pop okay this should be working now to test this let's make our damage manual instead of what we were doing which was automatic so let's remove this and sudden let's create some buttons again using this handy request i can create very simple buttons in the UI okay so I'm creating to testing buttons one of them to damage my health and one of them to damage a posture okay that should do it so let's test okay so here we have the two testing buttons so I can click on this and the health should go down and yep there it is and let's see if we see the popup when the health goes down to zero and yep there you go there's the pop up the character is now dead and again increase the posture and yep there's the bar increasing and once it gets full yep posture broken okay great so our system is working exactly as intent now we need to have healing and decrease the posture so let's go back into the system code and here let's make a public void health heal and we're going to receive an int for leaky or not I'm going to do pretty much the same thing we go into the health amount we increase it by the heal amount and then we also count on health change let's also do a test if the health amount goes fast you help the mouth max then we cap it on account amount equals healthy mouth max okay so that's healing now for the posture decrease public voice posture decrease and with receiving in for the amount and here we change the posture mount we go down by amount and again we also call on posture change okay so we have functions to damage the health heal the health increase the posture and decrease the posture let's add some more testing buttons okay so two more buttons want to heal and want to decrease the posse room let's see okay so here I am with my four buttons I can damage the health yep there's the bar going down and now I can heal it and the bar goes back up to the maximum okay I can increase the posture and our four want I can decrease the posture all right great so we have everything working it's now that we have this let's add some nice effects we want the posture bar to change color from yellow into red and also how I did when the posture has been broken so let's first do the color so here on the original script let's go into where we're changing our set posture yep in here so in here we need to calculate the color based on this posture normal so color for the posture bar color now we want to convert to start at yellow so young mu is full red phone green and then we want to go towards red as the posture normalized goes up so in order to go from yellow to red we need to decrease the green down to zero so that means that this is very simple we start off at one and then we go down by the posture normalized x one app so when question ara is the zero we get a 1 so 1 1 we get a perfect young one posture normalized is 1 we get 1 0 so a perfect red then we need to set our image file so let's go up here and first grab a reference so I have a reference to the posture of our image so now all I need to do is go down here and set the color to our constantly that posture bar comma alright that should do it let's test okay so here we are the posture bar is empty as it increases okay it's yellow it's becoming orange more orange and more red and it's almost completely red and now the partials are broken and yep it is perfect right and as we decrease you can see that the congos back into yellow okay great so the collar is working now let's add some highlighting when the posture has been broken so for that I have a texture here which is just a simple texture so let's put it on top of the background but below the bar so drag it in here this is the posture bar kind of like so let's start off with this game object as a bond and we're only going to show it when the posture has been broken so let's go into our code go up here grab a reference to that game object so the game object for the posture bar highlight okay so I have reference to that game object so now let's give it down here where our posture is broken and we simply do it and step active into true okay so when this event is triggered the hot bar will be visible so let's see okay let's increase the posture and as goes up gets close to being broken and increase and yet there you go the image shows up now it's a very simple animation to make it more flashing so for that we just add the animation component here create an animation clip and let's just do a very simple flash so we were at the image gravity color okay so here is a very simple flashing animation just the Alpha goes down and back to one so we just set it to play automatically and that's pretty much it let's see okay so here we aren't as the posture increases once it gets broken if there you go the how I chose up and it's flashing and it's very visible okay great so now let's add a effect to the health bar to show how much damage has been taking so for that we want a secondary bar to show the difference between our current health and what we had previously so it's created here in the editor well it's simply duplicate our normal bar let's call this the health bar damage and let's tint it in light grey so this will essentially display the amount of damage we took on the very last hit so it shows up for a while and then gets shortened back into our current health okay so let's go into the code first grab our image reference alright we have the reference for our health bar damage image now we also need to know a timer for when to shorten it so essentially this is the amount of time we're going to wait before actually shortening the bar so let's define a constant for the maximum timer so when we get hit the bar won't display for one second and then the tournament goes down and as soon as it goes under zero the bar starts to shorten all right so these are all the films we're going to name so now let's go and make an update so in here make a private void update and now let's countdown the timer so we go in here on to the health bar damaged shorten timer simply reduce it by time.deltatime and then we test if the timer is under zero if so then shorten damage bar so in order to shorten it we need to change the fill amount so we go into the health bar damaged image and we need to modify the film amount towards the actual bar film amount so we're going to do a test if the health bar image not fill amount if that one is smaller than the health bar damaged filament if so then we want to shorten it so in here we're defining a shortened amount variable so we're going to shorten by three per second and we simply set the health bar damaged image dot fill amount and we reduced by the shorten amount so all this will only happen once the timer is over so now we need to set this timer so we're going to do that let's go where the health changes here on our set health let's simply test if the damage image filament if it is bigger then the health bar image dot fill amount then that means we took some damage so we set the timer to be our timer max if not if the health bar damaged image is not bigger than the health bar image then that means we were healed so we simply set the fill amount to be on the current okay so that should do it so let's test okay so here's the bar with completely full health and everything looks normal now if I take some damage yep there we go there's the white part it shows for awhile shows that this was the amount of damage we took and then it shortened it and if we take several points of damage at once so quick yep there you go this is on where damage end gives down and click again and after a while it goes out so this way we can easily see how much damage we took on the very last attack so there you have it we created the health and posture system from Sakura shadows die twice it's a really interesting system in that there's two different ways to defeat an enemy and the UI visuals are also very unique in the next video we're going to create the combat system and we're going to apply this system with these visuals to it as always you can download the project files in utilities from unity called monkey comm if you have any questions post them in the comments and I'll do my best to answer them subscribe for more videos and I'll see you next time