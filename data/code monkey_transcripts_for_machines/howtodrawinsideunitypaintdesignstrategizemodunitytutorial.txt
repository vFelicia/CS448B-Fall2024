hello and welcome i'm your code monkey and here let's learn how to do something that could be a pretty interesting addition to your games let's learn how to draw in unity so we have our pointer it could be a mouse or touch and by clicking and dragging we can draw a line or anything now if you've seen my gamedev reacts videos and you've already seen this in action in those videos i use this to highlight various parts of the videos as i'm explaining them i control the pointer with a tablet so it really is just like drawing with my hand and i also briefly covered this in the how it's made for done video where i remade the mechanic for drawing directions on the minimap this is actually pretty easy to do all you need to know is just one thing which i already covered in a previous video and if you know that then it's super easy so in this video i'm covering free flow drawing and then stay tuned for an upcoming video where i will cover pixel drawing if you prefer a more guided path with stepbystep lectures then check out my complete courses learn how to make a builder defender game using csharp just like i make my own steam games or learn how to make games entirely using visual scripting or learn all about unity with the ultimate overview course which contains over 13 lectures each covering a different tool or feature of the engine to help you make better games faster i'm always available in the courses q a section answering your questions every single day so check out all the courses with the link in the description alright so let's learn how to draw inside of unity now the special thing that i already covered in a previous video is simply dynamic meshes as you know everything that you see in the game is a mesh made up of polygons so when you import a 3d model it has a mesh but you can also dynamically generate those meshes through code and if you can do that then you can essentially create a mesh that updates itself and adapts to the position of the mouse in order to constantly draw on screen so here let's learn how to do it from scratch but in the end i will show a more complete demo that i've made which you can download including the project files so the first thing we need is to create an empty mesh first let's make a simple game object and just a script to run it okay we have our script now in order to visually see it we need to attach a mesh to this game object so for that we add a mesh filter there's no need to select this we're going to select it dynamically and then in order to have a visual we need a mesh render okay so let's open up our script and now here let's make a very simple quant just to see how mesh is actually made now a mesh is made up of vertices uvs and triangles then we just position the vertices then we set up the uvs now in this case we won't just say sound color so that's pretty easy and then finally for our triangles okay so here's our basic wand again if you don't understand how any of this works then you can go watch the mesh video in there i cover in detail what each of these elements does what it means and how exactly they are set up so we have all of our data now we just need to apply it to our mesh and finally since we're going to be dynamically modifying this mesh let's also call mark dynamic to make it a bit more performant okay so we have our mesh which should have a quad shape now in order to visualize it let's just get component of type mesh filter and assign our mesh to this mesh okay so let's end and if there it is there's our quad mesh alright so far so good also one quick note here over here i'm creating a mesh in the world so i'm using a mesh filter and a mesh render however you can also build this exact same mesh as the ui element now i cover that in detail in the radar chart video for the mesh creation it's all exactly the same thing the only thing that changes is just a different component in order to render it on the ui okay so with this we have our quad on screen now the next thing we need is just a mouse position so for that i've got a simple function in my utilities so here is the function as you can see it's extremely simple all it does is just takes the main camera does the screen to one point based on the input mouse position and gets the one position so with this we've got the mouse wrong position and now just to verify that it's correct let's simply modify this transform dot position into the mouse run position so let's see and let's actually put this on a prevoid update so it moves along with the mouse okay let's test and yep as i move the mouse i've got the quad falling behind okay so far so good also just one brief mention over here i'm using the method to get the mouse position in 2d you need a different method if you're working in 2d versus 3d but over here i want to draw on screen so i want the 2d method okay now so far we have our mesh that we're creating through code and we also have the mouse position now we need is essentially just add vertices onto this mesh as the mouse position changes now once again remember how meshes work it's all about polygons now here's a quick indie tip over here on the scene view if you click on this drop down menu you can see various shading modes and for example you can select wireframe and this way you can view all the actual polygons that make up your visuals so over here we can see that our quad is made up of two polygons we have four vertices so one two three and four and our triangles array is set up in order to generate these two polygons so here is one and here's the other one now our goal with this is essentially every time we move the mouse we're going to add let's say a new position here so when we move the mass from here over here we need to calculate that forward down to vector and then we take that vector and we rotate 90 degrees to get the vector pointing up another vector pointing down so we just add some distance which is going to be the inline thickness then we have these two points and we just connect them to the previous points on the mesh so that's what we're going to do okay so for stars let's add some simple logic to only draw when the mouse is actually down okay so on mouse button down so when the mouse is pressed then we're going to create a new mesh and then one cell down then it's over here that we're going to want to update the mesh so in order to update the mesh we're going to need to recreate all of these arrays okay so we recreate the arrays and we add the size in order to be able to add our following quant so we're going to need two vertices so we add two more the uvs are the same with this vertices so we also add two more and we're going to create two polygons so that means that we need six triangles again when working with meshes remember the difference between this triangle's array and the actual polygons so a polygon is a triangle a triangle shape but this array is the list of indices that make up that polygon so that is why you have three for every actual polygon that's a bit confusing at first but it all becomes clear when you actually see it so we create our new arrays with the new sizes now we just need to actually copy the current values onto this one okay so we're copying all of the indices and to make things easier let's also calculate our vertex indexes so again in order to add a new code we're going to add two new vertices so here when we go back by four we're essentially going to grab the two previous vertices the two ones that were created on the previous quant and these last two which are going to be the two new ones okay so we have the arrays and the new indexes now first let's store the last mouse position so we know how to calculate the vector so just a simple vector three for the last model's position then when we create a new mesh let's put it on that one so again go to that function in order to get the mouse warm position and over here using the current one and the last one we can calculate the mouse for the vector okay we have our forward vector now we just need to apply 90 degrees onto this so one approach that we can take to do that is to get the cross product of both this forward vector and the 2d normal so the normal factor in 2d is 1 that's because the camera is usually on a negative position so usually on 10 by default so if we calculate the cross product we're essentially going to have the forward vector rotated by 90 degrees then we just multiply it by a certain line thickness and again this is just a direction vector so we need to add it on top of the current position so with this we have completely new vertex on the up position then you just need the exact same thing but pointing down so that one is actually pretty easy so new vertex down will be the same thing except the cross is between the inverted normal 2d so we can just multiply by minus one f now if this seems too confusing let's actually make a visual so it's easier to understand so if you don't let you set a field just to be able to grab some debug game objects so we're going to assign those in the editor and then down here we've got our new vertex positions let's just position them in there okay like this and now here let's just make two objects and just sign the reference and let's see what it looks like okay so i'm going to click and now as i move the mouse and you have to look at where the dots are positioned so the white dot that is the up vertex and the yellow dot that is the down vertex so we're calculating the normal between this point and the point where the mouse is right now then apply 90 degrees to get the white dot up there and the all that down there so there you go just some basic math by the way if you find the video helpful please hit the like button it's a tiny thing but it really does help thanks okay so now that we have our two points we just need to connect them to the previous quad first thing we need to set up are the uvs those are very simple because the mesh is supposed to be a solid color we only got two xray uv so we just need to update those two and then finally for the triangles actually here i forgot to play the vertices array so we add the vertex up vertex down on the uv zero one zero zero and then we set up the triangles again as always when dealing with meshes you need to be careful with the other on triangles it needs to be clockwise in order to face towards the camera so just set up the new triangles and finally update the mesh with these values okay so like this it should be working just need to modify one thing which is up here we're using a fixed position one set it should be the mouse position so here we could start off the mesh with an actual quant or we can start just on an exact point which will make it look like the initial part is much thinner than the line actually becomes so that looks quite a bit better so i actually prefer that and finally the last thing that we need here is to actually update the last mouse position so the less pause position becomes the new mouse position okay so let's test okay here i am and as i click and drag yep there you go look at that it is indeed drawing our mesh all right great it's already looking pretty good however this code is now running on every single frame so this is drawing way too much if we pause and look at it if we look at the wireframe this one has quite a lot of geometry probably way too much right now we're adding two new vertices and a new quad two new polygons on every single update so if the game is running at a thousand frames per second then we're adding a thousand polygons per second that is way too much very unnecessary so as a simple fix we can make sure that we only run this logic if the distance from the last point is big enough so here is some simple logic just testing if the distance is above a certain minimum distance if so then we add a new quad if not then we don't now of course he can play around this value in order to make the line smoother or more jagged in order to make it more or less performant so with this value this one is pretty big so like this if i draw yep there's a pretty jagged line especially if you do a lot of tight curves but if we put this at say 0.1 f and if there it is it looks perfect and very very smooth so we can click and draw the mouse and it draws on screen alright awesome so this is pretty much all there is to it now you can build upon this in order to add some buttons to change the line thickness change the color and so on so here is my final complete demo i've got a bunch of buttons in order to modify the size and color of the actual draw so let's make it really thin and in black and as i go yep there you go look at that it does draw now change the color and now pinned in white so these are only using the same material just changing the color and material that's it then make one green make one blue just like that then change make it really thick or make it a bit in between and so on so as you can see it's all very simple and as you can see i also had the ability to spawn multiple lines so all that does is just every time i click it's creating a new game object in order to spawn it so here on the scene we can see each one of these is a separate game object and each one updates perfectly alright so here it is as you can see i can click in order to draw anything in any shape so this would be perfect for any game where you want a player to be able to draw something so maybe that could be just a painting game or maybe it could be a strategy game in order to devise where the ins will go or maybe a multiplayer game in order to give your teammate some notes so like i said this is exactly what i used in my gamedev reacts videos the only other thing in there as you can see it's me drawing on top of the video so that's exactly using this but also using the transparent tnt window that i made in another video so here is the fully working really nice mesh drawing system now stay tuned for an upcoming video where i won't do another drawing system but that one will be based on pixels instead of free flow again if you're looking for a more guided path with stepbystep lectures then check out my complete courses alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and i'll see you next time