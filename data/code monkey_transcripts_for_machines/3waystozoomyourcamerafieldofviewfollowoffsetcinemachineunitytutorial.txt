hello and welcome I'm your code monkey and here on let's learn how to handle camera zoom when using cinemachine this is actually pretty simple but due to how send machine is set up using a certain component system it can actually be quite a bit tricky to figure out how to change it through code we're going to see various methods of zooming into the games by modifying the orthographic size in 3D games by modifying the field of view or perhaps the best method of all by changing the camera file offset position to physically move the camera closer with this zoom and some basic movement you end up with a very capable camera system that is actually something already covered in detail in another video but I wanted to make this one a separate one since the zoom is really the toughest part to handle through code if you prefer a more guided path with stepbystep lectures then check out my complete courses learn how to make a builder Defender game using csharp or learn how to make games internally using visual scripting perhaps if you're past the beginner stage and want to make the jump to Advanced then check out my turnbased strategy course to learn how to manage a more complex project and write some good clean code or learn all about Unity with the ultimate unity overview course which contains over 15 lectures each covering a different twohour feature of the engine I'm always available in the Q a section answering your questions every single day so check them all out with the link in the description alright so here on let's Zoom with cinemachine first of all if you're not familiar with 10 machine check out this video basically send machine is a builtin Unity tool that makes handling cameras super easy handling movement zoom camera switching smooth foam and so on all of that is made super simple when using cinemachine and actually I've already covered this topic of making a complete camera system in another video in that one I made a fully featured camera system with move rotate click to drag Edge scrolling and zoom but since some people might be specifically looking for this topic how to handle Zoom this is the more complex part of all the other actions so I figured I'd make it as a separate video but if you want a complete camera system check out the other video alright so over here is my demo scene for the assets I'm using the cinti SciFi pack this is a great looking scifi cyberpunk pack there's only description if you want to get it yourself and as a starting point I've got a working camera here I'm using send machine so I have this nice virtual camera it's set up to follow this other object which is just an empty object with the system that we're going to see in a bit so the virtual camera just follows that object it's got the aim and body as transposer and composer and over here it's on pretty standard just if all offset so just so the camera is above and behind the target object then on the camera system I have this script just handling some camera movements over here just doing some put in order to movie transform position another one to handle the method of edge scrolling and finally another one to handle drag Penny those are the movement methods and then finally over here we have the simple rotation just rotating transform so with that here is a camera system working so I can move around in any direction I can rotate the camera and I can use even drag Pan and the edge scrolling alright so all of it pretty great again I cover this in detail in that other video for this video we really want to focus on how to handle the zoom part now there's actually two ways to zoom a camera one way is to lower the fov so on the virtual camera here we have the vertical fov and if we lower this then this acts kind of like a zoom and the other way is over here on the body we have the follow offset so you can lower both of these at the same time then the camera physically moves in closer so those are the two methods and both approaches will act kind of like a zoom and to do all that we're going to need some player input now for zooming what makes most sense is the mouse chrome wheels so let's do that here in the script let's set a function to handle our Zoom so handle can resume and then down here private void for the handle camera zoom like I said we want to use the mouse scroll so we can access that with input.mouse scroll Delta now this one is a vector 2 because apparently there are some mices scroll on the X but for a regular Zoom chances are we just want to scroll on the Y so let's see what this does let's do a debug.log on this one on the Y so here we've got the console and if I push the win on foreign yep you can see that we have some positive values and if I pull the wheel back to me there we go we have some negative values all right so we've got these values that we can use for our input to handle our Zoom so here on let's try handling the field of view method first and now this is why I made this video as a separate video because this is really the more complex part to making a camera system and the reason why it's complex is due to how send machine works so you might think that you can just access the send machine virtual camera so over here I have a film for the send machine virtual camera and in the editor over here I've got that reference and I'm referencing this object okay so you might think that you can simply access that and find some kind of Field view but nope there's no such thing no fov nothing it's only here the inspector here what we want to modify is this field so we need to figure out how to change this and thankfully we can easily figure that out because sin machine has all the source code available so if you just right click on the scene machine virtual camera and over here you edit the script yep it opens up the entire source code for the virtual camera script now if this doesn't open automatically you can open it manually so here on the project files there's a nice little packages at the bottom and if you expand this you see all of them and just in case you don't then on the top right corner there's this icon with a little I if this one is toggle then the packages do not appear but if this one is untoggled then all the packages are here so you can go inside packages inside cinemachine go inside runtime and then inside behaviors over here we have the same machine virtual camera this is where the script is so you can just double click to open this and over here if we do a quick search for field of view nope can't find it search for fov nope there's nothing here but if we go back into the editor and we'll make an inspector here we can see that the fov is inside something called the lens so on the virtual camera script if we search for a lens then yep now here we do find this so if you don't have type 1 settings now if we try going inside of this type so here in the project files let's search for lens settings and appear on the search bar make sure you go into all if you just search in assets doesn't show up if you go into packages or all it does show up so let's open this one and now on this one if we search for field of view yep there goes right here so this is the method for how you can find any field in order to modify through code you can just go step by step through the source code in order to find exactly what you need to modify there's actually an even more advanced version of this method where you can load all of the packages source code directly into Visual Studio doing that makes it super easy to find exactly where the field is that you want to change and that method works with any packages in my ultimate TNT overview course one of the lectures is exactly on that topic how to find any class or any film to modify any of the many and many tools and features that Unity has another example of where this method is required for example on the global volume postprocessing uses this volume component system and if you just go inside the volume and try to modify for example the volume intensity you won't be able to do that directly so that's one of the things that you can learn how to do with that method which I cover in that lecture also that course teaches you how to use many of the tools and features that UNT has so check it out to the link in the description okay so back into our demo here we already figured out where it is our field of view so we need to go inside the lens to access this so on the camera system we've got the send machine virtual camera from this one we can access the lens and then inside the lens we can change the field of view so just to test it out let's change it to something like 10 then let's do it on input so let's grab this so if the scroll down to dot y let's say if we push it forward so if it's above zero if so then let's just swap out the film review okay let's see if it works so here we are and if I push the scroll wheel yep there you go a real nice Zoom all right awesome so with this now all we need is some logic with some proper values and also we need to handle some smoothing since right now as soon as we switch yep there we go it changes instantly we want to be nice and smooth so let's do that over here first for the valid values let's first keep track of the current Target field of view so appear a private float Target field of view and we can default this to something so we have this field and then in here if we push forward then let's increase the field of view by some amount it's a finely float for the film of you increase amount so if you push forward we increase it let's remove this one put it down here and if we push backwards so if this one is under zero then let's instead decrease it okay so we have the target field of view and then at the end we assign it so we set it however like this we're going to get some messed up values if we can constantly decrease it then this is going to go into the negatives having a negative field of view is probably not what we want so let's add some proper minimum and maximum for that we can go up here we can make a serialized field to make it easy to customize let's make a float for the field of view Min let's say the minimum is maybe five fov and then another one for the Max and let's say put Max at 50. so then down here we just grab the target field of view and we can use mathft.clamp this one clamps a value between a certain minimum and maximum so we can use the target field of view clamp between the minimum and the film The View Max okay so that makes sure that this one is always within valid values the last thing we need is really just the smoothing so we can do that using lerp which actually covered in a quick short video it's a super simple way to make something nice and smooth in this case we've got just a float so we can use methf.orp and we want to interpolate between a start a final and using some time so the start value is going to be the current film of you so let's use the current one then the final one is going to be the Target Field View and finally time will be timed out of time and then we need to multiply by certain Zoom speed so fluid Zoom speed this works with pretty small values so maybe just 3F maybe that's smooth enough so let's see so we just multiply times a long time by this again if you don't know about LARP watch that quick video that I made it's super simple super easy way to add some nice smoothing so up here we set the film review to this so we use LARP in order to get it nice and smooth okay so that's really it let's see if we can change the field of view in order to make sure it stays within a certain minimum and maximum and let's see if it's nice and smooth okay so here we are and if I move yep there you go doing a nice zoom in and if I move the opposite way yep a nice zoom out all right awesome now here just in case you have the opposite behavior of what you want which in this case I do have that so by pushing the wheel forward I really want to zoom in instead of out and by pushing the wheel back to me I want to zoom out not in but this is personal preference up to you which method you want for me I want to reverse so this one is super easy just up here instead of increasing we decrease and this one increase and the zoom was also a bit too slow so let's put it a bit more so here it is now if I push the wheel forward yep there you go nice Zoom push back and nice zoom up alright awesome so everything works I can move the camera and I can zoom in or out okay great so here we have our film review zoom and it works perfectly like I said this is just one method for another method would be to leave the film The View and we just move the camera closer so let's see that second method but we want to keep this function just the same so let's say this is the field of view method and then let's make another one so handle camera zoom and for this other one let's call it the move forward method and we're just going to run one of these so let's make this function okay so here a proud Droid make this now here we're going to leave the film to view alone we're not going to touch that instead we're going to modify the final offset and again in order to figure out how we do that we need to use the same method to figure out how we modify it here on the send machine virtual camera once again we can see we can look and find that the final offset is inside the body so let's once again go inside the virtual camera let's edit the script and here if we search for phono offset nope can't find anything but if you look at this code you can start to understand how same machine works and how it works is based on a certain component base you have a function to get all of the components attached to this in machine object and if you have another function to get a specific syn machine component then if you don't look inside the send machine package inside runtime over here if you have a folder with components and you see all of these and if you look at these names and you can pair them with a virtual camera over here on the body if you see the various types that you have a body you have third person follow Framing transposer and so on and if you look over here yep you've got exactly those third person follow composer then down here the transposer which is the one that we're using so each one of these scripts matches up each type that we have here both here as well as on the aim so we're using the transposer so let's open up the send machine transposer script and over here if we search we can indeed find the funnel offset field okay so this is the one that we need to change so back in our camera system let's do that let's go inside this animation virtual camera like we saw this works with a component system so let's get the syn machine component and the type that we want is that one so the syn machine transposer so we have this and then on this one we can finally modify the M follow offset again let's do a quick test just to make sure that we have this correct so let's set the phone offset at 0 0 just 10 so just right behind the camera and let's do this once again if input.mouse scroll Delta so when do I when we push it forward let's do this just for testing okay let's see so here we are and if I move the scroll wheel yep there you go nice and zoom okay great it works perfectly so we modify the offset now again just like we did we just need to modify some external logic so let's do that so for changing it how we want this one to work is by essentially zooming straight in so we can complete the vector 3 for the zoom Direction and for that one since we want to zoom in straight forward then we can actually use the exact same final offset this one is a vector so in order to get the direction we can just normalize this vector all right so with that we got the zoom Direction now let's just make a film to keep track of the current file offset so here a private Vector 3 for the final offset and also we can set this by default so we can make a private void awake and on the Wake let's get the final offset and we just get it from this so get down and get the final offset so just copy this go up here and paste this so we have the star info offset we can also do the same thing for the Target film review just in case you want but default into 50 also works okay so we have default offset then down here instead of using all this let's use the follow offset so we've got the zoom Direction then we're going to increase it or decrease it and at the end we're going to set it so set it to the final file offset so we just need to modify this one if we push it in then let's increase this by the zoom Direction and if we push back so if this one is under zero then lets you minus equals okay so now we just need to validate this follow offset to stay within valid ranges we obviously don't want to push too far forward so doing that is actually pretty simple we can just check the final offset this one is a vector we can just check the magnitude so this is essentially the length of this vector so we just check if this one is under a certain minimum so we need to Define that so let's go up here to define those so we float for the final offset min let's say the minimum is perhaps five units and then another one for the Max and let's put also same thing doesn't have to be the same but just same thing okay so if this one is under the phone offset Min if so then the camera is way too close so let's set default offset use the zoom Direction and multiply it by the minimum okay then the same thing for the maximum so if the magnitude is above the max then we set it to the max alright so with that we have default offset and it should be working correctly well that's less it's just adding a nice slow smooth Zoom so let's do that except over here we're working with a vector three so instead of methamp.lurp we use vector3.lurp so is that and again we've got the starting Valley so that's this one then for the Target that's the phone offset and time dot down to time multiplied by a certain Zoom speed so we float for the zoom spin let's put it at something so we have this and we set it at this all right so that's it this is the second method let's see if it works okay here we are and if I scroll and if there goes zooming straight in so instead of lowering the fov it's actually getting the camera closer and zooming straight out now again for me it's also reversed just like it was previously so here instead of plus do a minus and over here plus also if you want you can change over here the zoom amount so float for the zoom amount let's say just so it zooms a tiny bit more so multiply the zoom Direction by the zoom Mount and so on and yep now as I push the wheel forward there you go the camera moves forward and the camera moves back all right that's great so we've got two methods working now let's actually quickly check out the third method instead of zooming in directly onto this position what we're going to do is just lower the camera closer to the ground so the logic for doing that is very similar except instead of moving forward on the final offset we're only going to modify the Y so let's once again make another version of this function so let's make another handle camera zoom this one come with lower y let's make this function so down here you press void for this so for this one let's actually copy pretty much the exact same code it's going to be extremely similar however we don't have any Zoom Direction no instead we just modify the final offset.y so this is the only one that we modify so just increase it or decrease it we just play around the Y then instead of this type of clamp we can use the regular one so math f.com we're going to want to clamp the file offset on the Y so this one between a certain minimum and maximum so let's go up here to Define that so default offset y min and again let's put it pretty much the same values all of them work pretty pretty much similar okay so we have this now down here use the follow offset y Min and the phone offset y Max so we clamp the values and then we're already modifying the file offset so then we set it just the same as previously alright so that's it super simple let's see what this method looks like so here we are the same camera same scene now if I zoom in if there you go now it does this kind of Zoom so instead of pushing straightforward instead of pushing there it simply lowers the camera now personally I really like this method since it lets you look at objects up close so it gets the camera right down to the floor and it also gives you a different perspective so I think this one is great and works great for many game types so we can move the camera rotate and zoom in just like this but either way here we have three Zoom methods so choose whichever one you prefer and finally let's look at the 2D version here I've got another demo the only difference is the camera setup in 2D mode so there's no perspective and since there's no perspective that also means we don't have any field of view instead what we have is an orthographic size and the way we change it is exactly the same as with the field of view the film that we modify is also inside lens so you just go in there and you change this time the orthographic size all the other logic is exactly the same and that's it very simple so here we are and if I scroll the mouse and yep it does work it zooms in and it zooms out alright awesome so this is how you can zoom in with cinemachine using various methods in both 2D and 3D the tricky part is really just figuring out how to access those fields if you want to learn that method and many more things in detail check out my ultimate TNT overview course it's full of lectures teaching you things like this one like how to find any class or field that wouldn't really work as a Runway video the course covers tons of unity zones and features and I'm constantly updating it with free updates so if you're interested in unity at all definitely make sure to check it out alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and I'll see you next time