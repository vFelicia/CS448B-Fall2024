hello and welcome I'm your code monkey so usually I try to answer all the comments in my videos if you have a problem with the tutorial and you post it in the comments I'll probably see it but the internet is huge so every once in a while I randomly Google Unity Code Monkey to see if anyone is talking about or having questions with it on my videos sometimes their posts on Reddit Twitter or DND forums and when I did that recently I found out this red post on program humor it's a funny meme that is apparently related to my free course basically how this person was enjoying following along with the course but then was disappointed at some point because of five nested if statements looking down here on the comments there's a reference any timestamp it's referring to my 10 hour free course and it's on the lecture covering the delivery manager here it's a code for identifying if the player is delivering the correct recipe and just like the meme says the code indeed does have quite a lot of nesting in total it is five levels deep so first it Cycles through the wedding recipe list then it checks if it has the same number of ingredients if so then seconds through all the ingredients on that recipe then cycle through of the ingredients on the plate and test different as that ingredient and if so then yep it finds the ingredient and if just one ingredient is not found then the play contents is not matchy recipe but if not then the player delivered the correct recipe so that's what this logic is doing and this post is actually the perfect example for me to say two very important things which is how I'm not necessarily perfect and secondly how there are always many solutions to a ceiling problem what I mean by that is that even though I have quite a lot of experience I've been programming for over 20 years but just because I do something in some way it does not mean that it is the absolute best way or more importantly it does not mean it is the only way speaking specifically about this example now in general if you want to write good clean code you should minimize the amount of nesting in most cases 5 is likely way too much so this is definitely a good point but remember the most important of all of the clean code rules is simply to help you minimize complexity and make the code easy to understand that's the ultimate goal of the rules like don't do more than three levels of nesting or pick the right name for the variable or focus on decoupling the going with these rules is simply to help you write better code that is easier to manage and understand so with that in mind looking at this code the question is is this understandable I can say that I made this course four months ago so it's definitely been a while since I was really deep in this code base and yet honestly within 10 seconds of looking at this code I could immediately tell what he was doing I can see that it's cycling through the list of waiting recipes I can see that it's testing the same number of ingredients see if all of them match and if so the recipe matches so for me even though this technically breaks the role of going over three levels of nesting it still achieves the ultimate goal of being understandable however again like I said I'm not perfect I'm just one person so while this is perfectly understandable to me it might not be to you and if so that's perfectly fine perhaps you really prefer to follow that rule like in law if so then you could refactor the cone you could do it like this so first of all instead of checking if they have the same number of greens you could check if they don't have and if not you continue this way the rest of code is not inside the second lesson level and then after that you can obviously extract the logic into a separate function so here's a symbol function do the plate contents match recipe and then the second one does the plate have a certain ingredient so now with this code it all works it's only the same does the exact same thing and now it only goes up to two levels of nesting the logic is nicely separated into separate functions so the big question is is this code easier to understand now for me personally I find them both equally valid I have no trouble following either of these but again that's just me if you prefer the second one then absolutely go ahead and do that remember that what you see in my videos is not the only way to do something there are always a ton of methods and different approaches to solving any problem for example I've made some videos on multiple ways you can find Targets or multiple ways you shoot projectiles in most cases there's always more than one way to achieve a certain result now what I can promise you is that when I make a tutorial on something like for example how to pick up objects the code in that video achieves a desire result so in that example the code in that video does teach you how to pick up objects but it absolutely does not mean that's the only way to pick up objects maybe your game has a specific design where you need to pick up objects in some specific way and if so perhaps a different approach would be better in your specific scenario so always remember that tutorials are really just starting points they're meant to guide you in the right direction and give you ideas but every game is different so every implementation will be slightly unique and also even though I'm quite experienced I'm definitely not the best program in the world I'm constantly learning one example is a very long time ago I made an inventory system in there I taught the tutorial on how to make it just like I would do it back then and back then I preferred making systems as much code base as possible so for the items I defined them using an enum and that does work the code in that video is perfectly functional and it's a perfectly valid way of doing an inventory system but if I were to make that inventory system again nowadays I would use scriptable objects for the item definitions kind of like I did in the hydronia crafting video I would do that simply because nowadays I do value using the editor a bit more and being less strict on just using Code so once again multiple valid ways of achieving the exact same result as you were as a developer you might change what is your preferred way of doing something and that's perfectly normal and like I said I'm not perfect so well in this case personally I don't think the way I did it is a mistake in other case it absolutely could be possible for me to make some mistake I have a lot of experience but I'm definitely not John Carmack that's the same for me as for any instructor whenever you watch some deteriorly you might indeed notice some say the instructor missed or maybe just some better way of solving the same problem that works best in your specific scenario that's perfectly possible some of that to say take what you learned from my videos or any tutorials simply as guides to help you on your Game Dev Journey but don't be afraid to adapt it to your own personal style and way of working remember the ultimate goal is really to learn how to make games so grab whatever normal you can find from any source and use it to help you achieve that goal alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and I'll see you next time