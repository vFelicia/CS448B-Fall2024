hello and welcome I'm your code monkey in this video we're going to learn the simplest way for saving and loading data into a file in unity let's begin so I have this scene here that we use in the previous video I have a player character and I can move around I can tell them to your mind some resources and in here you can view how much he is carrying now in the previous video we covered city unloading using player preps in this video we're going to use files so let's just test I can hit on the ass and it saved it save the position and the gold amount so I can now move them away mind some more gold there you go and now when I hit L it's going to load using the player preps and he's going to go back up there with 11 so there you go yep Ayoo loaded correctly the position and the goal amount okay so let's look in the game here in order to see how implemented things so in here on the update we are testing for the key on the s and yell and calling save or load on the save we are grabbing the player position going to the unit get the position and the gold amount then we are using player prep set float to set the player position X as a float dy again a float and an int for the gold amount then we are manually hearing save so we can save and load Waseem game on the unload down here first of all we are testing if we do have a key we are testing for the pointer position X but it could be any King this is just so we can identify if we do have a safer so if we do have a player position X then we do have safer we load the XL ody create the vector 3 using the ax and y and load egon amount then we go into the unit then set the position and eagled amount if he does not have that key then it does not have that save saved in the player press so we simply do a pop up no say okay so now let's swap out this code to work with files instead of the player preps so first let's look at how to save a file so up here on the save let simply save some text to a file now in order to save and read files we're going to use the file class which is inside of the system I own in space so let's go up here using system dot io so now we can go down here and use the file class in order to save files we're going to use write all text for the path let's say but on application dot data path was and let's call it save dot txt and for the contents let us simply save test well that's comment out the player for us for now and let's see if the file correctly saves okay Here I am hit s saved okay now in here as you can see on the project we got a save file containing tests okay great so that's the basics for saving a file so now let's look at reading a file so let's go into our load function now in order to load instead of file dot write all text we are going to do read all text and here again we get the past so let's use the same path that we used previously and this function will return a string so the string let's see save string and let's simply do a popup with that strength pretty safe string okay and let's comment out everything up here okay here I am and if I hit L it should print out test so hit yep there your test so he is correctly reading a string that is placed on the file alright so now we know the basics for working with files let's start off with a simple save and load for the gold amount so appear on the save after we grab the gold amount let us make a save string and we're going to contain a string of the gold amount and this save string is what we're going to save into our file so now let's go into our code and in here first off we start with zero so let's start to mind some goal so one two three okay stop no it's it s okay he saved now let's check out the file yep there you go the file contains a three so now let's go back into the code and on the unload function first of all in order to completely remove the player price and let's comment out the whole thing instead of just that up there so in here we are reading the text that is saved on this SAF file and up here we save the goal amount so we need to do is convert the contents of this string into an integer that we can then load so we grab the gold amount by going into int and parse the save string into an int then we apply that int back into our unit so setting on the mount is on the mount of the parse int okay so now let's run the code and when we hit L we should be correctly loading three gold amount so in here hit hell yep there you go he loaded three gold okay great so we can all easily save and load one value from a file now in order to save multiple values things become much more interesting when using files you have to define your own file format to separate the data there are many ways to separate that inside a string you can look at Jason for a very good implementation but in this video we're going to keep things very simple a very easy way is simply to use a separator that you know for sure will never occur in your save data so what's going to our code on the save function let us define a unique separator so string save separator and let's do something very unique save value okay like that all we need to do is make sure that this string never appears on the actual save string so let us make a string array call it contents this will be the save contents so a new string array and inside let's save our goal amount then we also want to store the player position X and the player position dot Y let's convert all of these into strings okay so these are the contents of our save file and for our save string we can use string dot join and join those contents using our saved separator then we save our save string into our file all right so let's run the code and see our final string so here I am let's gather some goals one two okay move and now hit save all right he saved now let's check out the file yep there's the file you can see the value separated by our unique separator string so we got two volt annex of 52 and a y of 13 now let's take a look at the load function and in here we are reading the complete string from our say file now we need to split it based on our separator so again let's declare our separator however instead of declaring it in here let's make it a constant on our class so this way we can be sure this never changes and since this is a constant let's put it all in caps okay so down here we need to split the safe string based on our safe separator so we do that with safe string dot split split takes a separator so our safe separator and then some options which in this case shins dot none all right so the split returns a string array so that's the string array for our contents that we defined up here so we should be getting the exact same thing that we got in here now all we need is to use these same indexes and parsley values so first of all on index 0 we store the called amount so in here we're going to parse an integer that is on content 0 then let's parse a float for the player position X and oil dot parse on the contents of index 1 and the Y on index of to construct the final player position vector using our player position X and the player position Y okay and then finally unit dot set the position to our player position and city called amount to our gold amount so we are grabbing the safe string from our file we are splitting it using our safe separator which is the same one we use when we save the string then we have a string containing all of the contents we just parse that into the types that we need and then use the loaded data to finally unload our unit all right so let's run the game okay everything is on default he's on 00 with zero gone and if I hit L yep there you there it's the file that was loaded the string and he's now placed in here with two of count which is exactly what was or not he's safe so I can move him around go up here move it again there he goes up there my nap it 1 2 3 4 ok load and there you go he's up there and again the save also loads so save them there move more in there and load and there you go he's exactly back in there ok great so there you have it we'll learn how to save and load data into a file we'll learn how to create our own file format and define how multiple values are stored in a file again this is the simplest way to save and load files using your own format in the next video we're going to cover how we can use the adjacent format which is already very robust to save and load complex objects as always you can download the project files in utilities from India on monkey comm if you have any questions post them in the comments and I will do my best to answer them subscribe for more videos and I'll see you next time you