in this video we're going to learn how to make a cutout mask in the ui using the standard ui mask you can show objects behind it and with this one we're going to invert it and instead only show objects not behind the mask this can be used to make some really interesting effects let's begin hello and welcome i'm your code monkey and this channel is all about helping you learn how to make your own games with indepth tutorials made by a professional indie game developer so if you find the video helpful consider subscribing okay so this is a really quick video that will help you if you're searching for this effect just like i was a while ago i made the code monkey steam app and for the transitions between scenes i wanted to do a simple circle shrink and grow now the simplest way to do this is by making a black quad occupy the whole screen and then have a cutout mask in the shape of a circle that shrinks and grows unity already comes with a default ui mask however that one shows everything behind the mask whereas i wanted the opposite i wanted to use the mask as a cutout and show everything not in the mask okay so let's make our cutout mask this video is made possible thanks to these awesome supporters go to patreon.com unitycodemonkey to get some perks and help keep the videos free for everyone over here is my basic demo project so it's just a character sitting around idle just for fun then over here in the hierarchy we can go into our ui canvas now in here let's create a very basic ui create a image okay so we have a basic quad now let's first look at how the standard mask works now with this image in order to make a mask we just add the mask component and now what this does is masks out the things behind it so let's add inside another ui image so it's a child of that one and this one let's say just give it a different color so right now depending on the size of this image it only shows where the parent is there then here the parent can have any sprite so for example let's add a simple circle sprite so the parent is in the shape of a circle and you can see that it only shows the child image where that circle exists so we can also just disable the mask graphic and now it really only shows the child on the areas where they are inside of the mask image okay so this is the standard mask it shows where the mask exists but what we want is the opposite to show it where it does not exist so for that let's grow and create a new csharp script call this our cutout mask ui okay now in here the first thing we're going to do is add using unity engine.ui so we can access the ui functions and now in here instead of expanding mono behavior we're instead going to extend a normal image so we're essentially going to replace our normal image with the script and now the way that the standard ui mask works is by using the stencil buffer if we go back in the editor here and select the mask game object so this is the one that has the mask component and in here you can see that it's using this ui default material as soon as we apply the mass component it applied this specific material if we remove it or just disable it then there you go it's using the standard default ui material and as soon as we enable it there you go it gets all of these options so you can see all the properties that are related to the sensor buffer now the main thing is we're doing various comparisons and writing to the sensor buffer i won't go too deep into what exactly is this stencil buffer but if you'd like to see a dedicated video covering that let me know in the comments for this case all we need to know is that it's a simple grid based on the pixels on the screen and it does some comparisons with the underlying values so the mask here has this shape of the circle and it's writing values on the pixels that make up this circle shape then the image behind it is doing a comparison and only showing pixels where that comparison succeeds so what we do is essentially just invert this comparison operation for that let's go to our script and we are extending image okay and now since we are extending it we can override the property that gets the rendering material so to do that we do public we override and we're going to override the material material for rendering so this property is returning the material that the ui will use to render this object and here we have the base material for rendering so this essentially gives us the basic ui material and now we can actually try to modify this material so instead of using the base one let's first make a copy so material and we're going to make a new material which will essentially duplicate that one then we take this material and we're going to access the shader in order to call set int and we're going to modify the property stencil comp in order to modify the comparison that is used now like i said the normal mask image compares the value with the sensor on buffer and it only shows the pixel when that value equals what it finds so in here we want to do the opposite so not equal so here for the value we can use the compare function and this is inside the namespace using unity engine.rendering so we have the compare function all these and again we want the not equal so not equal and this one expects an end so just cast down into an end and finally we just return our new material so we're making a duplicate copy so that we're not modifying the actual base material for rendering otherwise we could cause all sorts of issues with all the other materials that use the bayes ui material okay so this is it we take the base we modify the comparison in order to make it equal we make it not equal and we simply use this one okay so let's test now here in the editor let's duplicate our mass container so we can see both effects in action so here just duplicate this one shift it on the left side and now in this one on the parent we're still going to have the same thing so just a normal image with a mask and what changes is over here on the underlying child image instead of using the basic image component we're going to drag our cutout mask ui script and right away you can actually see it in action so let's just tint this in something and just like this so we're using a custom ui mask image and over here we can see our perfect effect and action so we can change the shape of our underlying child image and it only shows where the parent is not whereas this one only shows where the parent exists all right so we have our effect exactly as we want it awesome so as you can see it's very simple we just really need to change the comparison operation on the default ui shader and it all works perfect okay now let's see this quickly apply to a very simple very nice transition cutout effect okay so here it is exactly the same thing so we just have a mask parent it has an image and a mask and then a nice animation just making it look cool and underlying it we have a basic image which is really just a black quad so if we try this okay so here we are seeing our normal scene and now press a button and there you go the animation plays the circle grows smaller so the cutout closes and the screen is now black now press it again and there you go the inverse happens and the screen opens up so here in the editor you can see what's actually happening so the underlying image never changes we're only modifying the actual mask parent so as we click there you go it shrinks down and click again and shrinks up so here it is this is a really cool effect that you can very easily build by using just this simple custom cutout mask image if you found this video helpful consider liking and subscribing this video is made possible thanks to these awesome supporters go to patreon.com unitycodemonkey to get some perks and help keep the videos free for everyone as always you can download the project files and utilities from unitycodemonkey.com subscribe to the channel for more unity tutorials posting query 7 comments and i'll see you next time you