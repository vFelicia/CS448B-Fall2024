hello and welcome I'm your code monkey I've been making videos on this channel for over four years now I've covered tons and tons of topics in over 600 videos one thing that I made sure to always do since the very beginning is read through all the comments every single day and answer as many questions as I can I've probably answered thousands of questions usually I reply directly to the person but if at least one person has a question then chances are there's more people wondering the same thing so here let's see some interesting questions that I answered that maybe you'd also like to know the answer to I've already done a bunch of these videos check out the entire policy see some more questions hopefully you'll learn quite a lot by seeing what others are asking this next question is on a video highlighting a really awesome Humble Bundle it was one of the best moments that I've seen with tons and tons of awesome tools this question comes from snaz who asks basically how hard is it to make all these zones yourself is it really worth it to spend something like 50 bucks on an asset instead of building yourself the answer to this one is pretty simple but also something that takes a bit of getting used to since it requires thinking in a bit of a different way it is not so much can you build an asset like this but rather how long only take you and how much is your time worth if you're in a country like the US and you get paid something like 20 an hour can you build a tune that costs 40 bucks in just two hours the answer is probably not if you're in a lowcost country like me in Portugal where wages are between five and ten dollars an hour at the same time can you build that same tool in five to ten hours maybe maybe not and of course always remember the difference between doing something quick and dirty and building a proper feature complete tool for example I have my own paid asset the mouse cursor system Pro it is actually based on a free tutorial where I cover the basics for how to make custom cursors so you can just follow the tutorial and build it yourself building something basic might take you just perhaps one or two hours but the paid asset isn't just the absolute Basics it has a custom editor and a bunch of features to make it really easy to use so if you wanted to build all those features yourself it would take you many more hours I think for me it took me maybe something like 80 or 100 hours to make that asset so if you are as proficient as me at writing code and you build it yourself and your time is worth 20 an hour then you would have spent something like two thousand dollars where you could have just bought the final asset for 40 bucks it really is that simple it's just a question of Time Versus money when you look at it like that buying assets really becomes an easy answer either way you're going to pay a price either in time or money so it's up to you to decide which one is worth more to you personally I enjoy building things and writing code so in many cases I will end up building a system myself instead of just buying it just because I like to build things but if all you want is to add a certain feature to your game like for example letting saving and loading it is much easier to pick up an asset like easy save from the SSR and learn how that works rather than spend hundreds of hours building in a safe system yourself although on the other hand there are also the category of tools that you just don't have the skills to build for example my first steam game Survivor Squad had tons of units and they all needed to be able to pathfind around the world with my skill set at the time I really could only build a pathfinding system that would support maybe five units but of course I didn't want the game to have so few units so in that case I just did not have the skills required to bring my vision to life I could have spent maybe a thousand hours learning about complex multithreading code and learning how to improve the algorithm or instead I could spend the time building my game and just buy the asset so even though back then I had essentially no money I still decided to buy the Acer pathfinding project I think I didn't even get it on a sale so I think I paid the phone 100 which was a pretty simple amount for me at the time but it was definitely worth it with it I could keep working on the game and bring my original Vision to life and of course in the end the game despite not being any kind of huge success it still made more than enough money to pay for those 100 bucks so when it comes to assets it really is a very simple decision Matrix first ask yourself can you build it yourself if not do you really need it for a game if so then buy an asset or spend thousands of hours learning that skill set if you can build it yourself calculate how much your time is worth and how long it will take your build is the cost less than the asset if so then build it is it a lot more if so then just buy the asset it really is that simple next here's a question posted on my time take system video this is a fun system that I've used in almost every one of my Steam games you just build a simple timer to trigger a tick every certain amount of time like for example 10 times per second then you run some Logic on that rate instead of on every update it's a super easy way to make your game much more performant by running logic less often than on every update this question comes from Zombie Chicken who asks how do you implement this kind of time Tech system running on a server so how do you have the clients listening react to server ticks the answer to this is pretty simple you just run exactly the same code on that server so the server keeps a timer counting down on every update then every x amount of time it just fires the tick and resets the timer as to how you send that take to your clients it won't depend on what networking stack you're using for example if you're using netcode for game objects which is unity's official networking solution that I covered in another video which by the way if you want to make multiplayer games definitely go watch that video it's super detailed when working with netcode for game objects it's super simple you can just use rpcs or remote procedure calls so in this case you will run this time take system on the server build then on every Tech you would simply call a client RPC which would run the tech logic in all the clients that's it really easy doing this kind of logic would be excellent for lowering bandwidth in many ways there's a lot of multiplayer game logic that does not require a constant connection and data transfer on every single update since multiplayer is usually paid on a per bandwidth basis this is definitely something that you shouldn't look into if you're making a multiplayer game this simple system can be extremely useful and save you on a lot of bandwidth costs this next question is from my machine learning video it's a really awesome topic and definitely something that I want to get back to at some point I think machine learning has tons of potential in the video for training the agent to move towards the goal I use physics to detect the collisions I made two empty attack components that I attached the walls into the goal then the agents check for a collision it does a get component to find the tag and it can identify if it had a wall or a goal the question comes from juicing who asks why use an empty script as a tag instead of using the actual game object tag is there some kind of Advantage when using that method the answer is that game object tags are strings and strings are always very brittle and very error prone if you change the capitalization in any way or maybe you add a space or a DOT or anything then everything will not work some characters are very easy to get mixed up you can easily add in lowercase L instead of an uppercase i they'll look very similar same thing with something like an o and a zero so if you use string tags you might look at your code and not understand where on Earth it isn't working everything looks correct so you won't go crazy for a few minutes or a few hours then you look in the editor and you notice that the tag had a small space at the end this actually happened to me on a live stream a couple of months ago the only place where I use strings is when doing a find and I accidentally added a space at the end of the game object name so even though the code looked right everything was broken that's a problem with strings they are very easy to make mistakes which will then make you go crazy trying to find it so in terms of identifying an object using a simple attack component it really is the best way by Tech component I mean just literally an empty mono Behavior component there are no functions no Fields just a class name extending mono Behavior so you can attach it to a game object with this you then try to get the component using try get component and here if you do make a mistake if you change the capitalization or change a letter or anything if you do that you are going to get a compound error because the type won't match so if you accidentally make a mistake the game won't even compile making it very easy to spot the mistake that is the reason why you should use Tag components instead of game object tags in general also why you should avoid strings as much as possible never use a string for identifying some object only use strings for actual text previously the only place where I use strings was in a find but nowadays I've changed that to pretty much always use serialized field and just write the reference directly it still has the drawbacks like for example if you forget to assign the reference but at least you can write your code without using any strings at all alright so those are a bunch more of your questions in my answers to them I hope you'll learn something new check out the entire playlist to see some more interesting questions I've already answered thousands of questions so stay tuned for more videos like this so you can learn from what others have asked alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and I'll see you next time thank you