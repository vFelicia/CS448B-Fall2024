in this video we're going to look how to make a simple building system in order to place down buildings in the world this is a freeform system so you don't need any kind of underlying grid just select the building type and click to place let's begin all right so let's look at how to implement a really nice building system now what we're going to do here is similar but more simplified version to what i cover in depth in my complete builder defender course the course is 10 hours long with over 15 lectures lastly organized into distinct topics it teaches you everything on how to make a game starting completely from scratch until the final polished game the lectures are presented as clear stepbystep tutorials just like my normal videos it teaches you how to make a building system resource management nmei worm building post processing polish and much much more so if you're looking for a guided stepbystep course making a complete game from start to finish then check the link in the description to pick up the course okay so here let's make a nice building system now the goal is to be able to click on the world and place a building on the mouse position so let's start off by making a new csharp script name it our building manager and let's make an empty game object name it the same thing and attach the script onto it okay now here we want to spawn a building on the mouse click so let's first make a simple private void update and we'll listen to input get mouse button down then here it takes the button so let's put 0 for the left mouse button all right so we press the left mouse button and now in here we want to spawn it on top of the mouse we're on position so we need to get the mouse position and that we can get from the utilities which is obviously can grab for free from unitycodemonkey.com so using codemonkey.utils and down here we just access the utilities class and get the mouse on position here is the function in case you want to make it yourself so all it really does is it takes the main camera does the screen to our own point on the input.mouse input.mouseposition so it does that and we've got the mouse one position all right so this is a vector3 for the mouse we're on position and now here we want to spawn a building so we're going to instantiate a building prefab let's go up here to add a film for it so make it a serialized field so we can set it in the editor of a transform and let's get the pf wood harvester so we get that field and in here we can instantiate instantiate that one on the model's world position and without any rotation so quaternion.identity all right so we have our very simple script let's test here in the editor just drag the prefab reference and hit play okay here we are and click and yep there you go it spawned indeed our prefab so wherever i click i spawn the prefile right on the mouse or position all right awesome okay so now that we can click to place down a building let's look into placing different types now for defining the type of building we're going to use scriptable objects i cover them in detail in another video so check that out for a more indepth look essentially scriptable objects allow you to create assets in your project files to contain any data that you want we're going to use it to define the various building types this is also the same method that i use in the complete course so let's make our scriptable object just create a new csharp script name this the building type so so for scriptable object okay and now in here we get rid of mono behavior and instead we extend scriptable object so you do that and now in here we can define any data that we want in this case all we want is to define a field for the building prefound so if only transform for the prefab okay so that's all the data we want for now and then let's create a create asset menu so that we can actually create our asset again if you want to learn more about scriptable objects go check out that other video link in the description alright so back in the editor let's make a new folder for our building types so a new folder for the building types and now inside let's right click go into create and yep we have our building type scriptable object so just click on it name this the wood harvester and there you go we have the prefab and over here just drag that reference all right so now i'm just going to make all the other ones alright so that's it all of our various types of scriptable objects each of them with a different data okay so far so good now we need to decide which type we want to place so let's go back into the building manager and in here let's have the building type scriptable object field for the active building type so a private building type so for the active building type and then down here instead of grabbing from this testing we can get rid of that one instead we go in there and we access the prefab okay so that should do it now let's also make this a serialized field so we can set the starting one in the editor and let's test okay we have our field and for example let's drag the tower and hit play okay here we are on click and if there you go we can still place an object but now it grabs the prefab from the scriptable object and if i pause the scene and in here swap out the active building type let's say select the hq and then unpause the scene and i'll click on it and if there you go now spawn a different building so you can see how useful several objects are all we need to do is really just change that film then we change what building we spawn okay so all we need to do is some way of selecting which type we want to build so for that let's make some buttons up here i have my normal ui canvas so first let's make a new game object name this the building type select ui and let's stretch it to occupy the whole thing so stretching zero zero zero okay now inside let's make a button so first make an empty game object for the container for the button then on this container let's add the button component and for now let's not change anything then inside let's add a ui image this will be our background and i have a simple button background texture okay let's make it stretch to occupy the whole parent all right next let's duplicate this for our image and this one will be the image on the button so for example down here select the wood harvester and make it a tiny bit smaller and make sure we preserve the aspect ratio all right so we have our single button now let's name the object to the building button template and on this one let's anchor it on the lower left corner and let's put it almost in there okay so that looks good and there it is in there now the reason why i gave it this name is because we're going to work with it as a template meaning we are going to duplicate this button to spawn as many times as we want so let's make the script to handle this window so make an esc sharp script for the building type select ui and here just rag script okay now in here let's dynamically build all of our buttons so first we need to know what buttons we want to build so let's start off by making a list of all of our building type so so building type so list so we have the list of all the building types and let's make this a serialized field so we set it in the editor and back in the editor we have the list and let's just drag all of them so let's drag all of them and put them in order so first the wood then the stone then the gold then the tower and then the hq all right we have our next list now here just do a private void awake and on the way let's cycle through our list and now in the list we want to duplicate the template so let's first grab it so we grab it and now let's first hide it so that the original template is hidden so this one gameobject.active into false okay so this is the original template and then down here we call instantiate and we're going to instantiate the original template instantiate onto this parent and this is the new building button then with it the first thing that we do is game object set active into true and now we need to position them so let's go into this building button transform get the component of type rect transform and we're going to modify the anchor position and now here let's shift it to the right for each of them so let's keep track of the simple index so we've got our index we cycle through at the end we increase the index and in here let's simply always move it to the right so do pause equals on the index times a certain size let's try out just with something like 60. so every single building type will be shifted to the right by 60 units okay so that handles the position next we need a sprite for this button so let's first find our image and we get the component of type image which is up here using unity engine.ui so we get the image and then we set the sprites and now here we need the sprite for this button so we're going to grab it from the building type as so and then we need to grab a sprite so let's go to the definition to add it so here it is scriptable object we have the prefab and now we publish for the sprite for the actual building sprite all right now let's just set this field on all of them so here it is we've got that field and just click and select the sprite and there you go same thing for all of them all right they all have the sprites and the last thing that we need to add is just the click behavior so for that we go into the transform we get the component of type button and then we go into the click and we add in listener okay so let's add a listener now in here i'm using a anonymous lambda expression now if you're not familiar with them then go check out the video on delegates essentially this is a function with no parameters and then in here we have our code body so when we click on this button then this is going to run and what we want to do is simply select this building time for construction so here let's also add a reference to the building manager so serialize field for the building manager okay we have that reference let's set it in the editor so there it is and just drag this game object okay good and now in here we want to tell the building manager to use this specific type so let's make a function to receive that so over here let's make a public void set active building type and we'll receive a building type so and we simply set the active building type to this building type alright so that's it and back in here we just go into the building manager and we call set the active building type and pass in this building type okay so that's really it let's test okay so here we are and by default if i click it should place a wood harvester so click yeah there you go it does work now down here we have the buttons let's click on this one to select the stone harvester so click and right away we have the issue that it's placing a building through the ui but let's ignore that for now so now it should be selecting the stone harvester and if i click if there you go it did spawn down now you're here select the gold and spawn down slide the tower and spawn down select hq and spawn that one all right so with this we can now select which building type we want to build awesome now let's just quickly add a visual for the selected type so over here on the button template let's duplicate the background called the selected and now inside select this other sprite so i have in here just a white outline and let's just put it just on white okay so that looks good now back in the code let's make a function to update the selected visual so private void update selected visual and now in here what we do is we cycle through all the buttons so for that we need to keep track of the references that we are constructing in here so let's store them in a dictionary so we've got dictionary and in here we initialize dictionary and then down here we set dictionary on the key for this building type we set it to this building button transform all right so now we have the dictionary of our buttons and then down here we simply cycle through it we second through all the keys we access the building button dictionary on this particular team then we find the selected child and we get the game object.active into false so first we hide all of them and then all we need to do is set the active one to be active so let's expose that in the building manager so in here just a public attorney building type so get the active building type and just return the active building type okay and now here just go into the building manager in order to get the active building type so we get the active building tab and set the selected back into visible all right now all we need to do is call this function so let's make a private void start and on start we update the visual and then in here after we click select the building let's also update okay so that's it very simple now let's test so here and right now the wood harvester selected now click on this one yep that one is selected now that one now that one and that one so the stone harvest is selected and if i click if there you go it does place a stone harvester all right so it's working now let's fix the issue with clicking through the ui so the thing is over here on the building manager all we're testing is if the input dot get mouse button if the mouse button is down so if so then we are spawning now we need to make sure that mouse button is down and it is not on top of the ui so for that we can add a using unity engine.event systems and then we can access the event system in order to grab the current event system and then we have the function is pointer over game object so we're only going to spawn if the mouse button is down and it is not over a game object so that's all we need let's test okay so here we are and if i click on the button if there you go it does not spawn a building so the clicks are no longer going through the buttons so i can select this one and place it on harvester selected and place that one and place that one and place that one and yep everything works all right awesome now just for fun let's add a visual and a simple construction timer so over here i've got two types of prefabs so there's the normal buildings that have already been built and there's these ones which are going through construction so let's use these ones instead first on the building type definition let's add another transform this will be the construction prefab and here let's set all the references okay they're all set and in here on the building manager when we instantiate instead of instantiating the prefab let's instantiate just the construction prefab all right so just like this we should be instantiating a different prefab let's see here we are in click and if there you go there's the building being constructed it's using the super awesome construction shader and gets built slowly over time and as soon as it's done some particles and spawns the final buildup now i cover the construction shader in detail in another video so check the link in the description to learn more it was funny made in shadowgraph and it's super adaptable you can modify the number of segments for example that one is slowly printing with 10 segments but if i go over here on the material and let's change from 10 segments to 30 and now spawn and yet there you go now it's printing a lot faster a lot more segments so it's a really awesome shader and go check out the other video to see how it all works so here is the construction prefab which as you can see is just a simple sprite using that material which uses that custom shader and then just has a simple construction script so here it is just has a film for the constructed building prefab another one for the particles then a simple timer and on update it's constantly increasing the timer it's setting a property on that material shader and once it's passed a certain amount then it instantiates the particles as well as the final building prefab so a very simple script just to spawn a building after a certain amount of time okay so with this we added a nice fun visual for our buildings so they get nicely constructed and after a while yep there you go they get done and the buildings are spawn alright great now let's also add some rules so right now we can for example spawn buildings right on top of each other that is obviously not meant to work like that so let's fix it the way we're going to fix that is by using the physics system so the first thing we need is to add a collider to all of our buildings so let's go for example inside the wood harvester here it is and on the parent game object just add a simple box collider 2d and just set the widget in order to occupy the whole thing okay so there it is so this is the area that will be occupied by this building now i need to do is just apply this to all the prefabs and also apply to the construction prefabs all right so all the objects have their collectors now let's go into the building manager and here let's make a function test if we can spawn so a private ball can spawn building and receives a building type so for the building that we want to spawn then we also get a vector 3 for the position where we want to spawn now in order to test if we can spawn we need to first test that this position is clear however we need to test more than a single point since the building itself has a shape so for that we can go into the building type so in order to find the construction prefab and then we do get component of type box collated 2d okay so we have the building box collider next we go into the physics 2d and here we can access the function overlap box so this one will test if a certain box would overlap with any objects in our world so now we just need the point and the point will be this position where we want to spawn plus whatever offset the box collider has so the bounding box will either and we access the offset then we need the size so the building blocks converter access the size and lastly the angle we don't want any rotation so just put it at zero and in here we cannot combine a vector three with a vector two so just convert this one into a vector three all right so that's it now this one returns a collated 2d so it's going to return something if the space is occupied so if this returns something different from null then the space is occupied so we return false if it is not then that means that it is known so this space is empty so return true all right so that's it and all we need to do is go all the way up here so we test left mouse button down test not over the ui and then we test if we can spawn a building pass in the active building type then pass in the miles we're on position and if we can't spawn the building then we spawn the dome all right that's it let's test okay so here on let's place and yep it'll work now let's place another one on top of it and nope cannot do it this position is now occupied and if i place it right outside of the collider nope still doesn't work because it's not testing just for the mouse position rather the shape that i'm trying to build so i need to go a bit more to the side and if there you go now it does place one next to it all right so we added a very simple rule to not place buildings on top of each other great now over here i also have a simple rock and a simple tree sprite they also have collectors so they should work to block buildings from being placed on top of them so i'm just going to populate the world with a bunch of these all right now let's test and see if they work okay so here i am in the world and now if i click on top of the stone no there you go can i place and see how it is occupied i need to place around it and if there you go in there it's a valid position same thing over here so just select something try to click it nope can't do it gotta go to the side and yep now it works all right so here we have added the rule that we cannot spawn on top of an object it needs to be placed on clear ground right awesome now let's have another room where the buildings cannot be insanely far from something else so for example when making an rts game you usually cannot place a building here and go all the way to the edge of the map and place another one in there so let's add that here in the building manager it's very simple we just have that new role over here on the same can building function first let's rename our overlap box here to make the code more clear so let's define a bowl for is area clear and we set it to this so we have ball is area clear and we do an overlap box and the area will be clear if this one returns null and then here if not is area clear so if the area is not clear then return false all right otherwise we keep going in here then we add our second rule and what we want to do is test to make sure that there's a building within range so for that instead of the overlap box we can do a physics 2d and use the overlap circle so this is pretty much the same thing except it just takes a point and a radius we can use our position as the point and now for the radius let's define a float for the max building radius and let's put some value okay so now this one will return a collider if there is one within this radius of this position however for this one we're going to have to validate and see which objects are inside of this radius so instead of this version which just returns the first object we're going to use the overlap circle all which returns all of the objects within range so let's store them and then we second through it and now here we need to test and see if any of them is a building so in order to identify let's add a simple building script to all the buildings so for that let's just make a uc sharp script name it a building and let's leave the script completely empty we're essentially just using this as a tag so just go into all the building prefabs and attach the building script okay now here we second through all of them then we go into this collector and we call git component and you try to get the building component so we test if it does not return null if it is not known then this one has a building so if it has a building then that means there's a valid building within range so we return true and we can build and if we get all the way down here then we did not find any building within range so just return false all right so that's pretty much it however with this you can already imagine that we have a problem which is in order to place on a building we must have a building within range so that means that we have no star building then we can never place anything so to solve that let's simply start off with a starter building so let's just use the hq put it on zero zero and there you go this is our starter build now let's test okay so here we are and right away let's try moving all the way over here and try to click and nope cannot do it i cannot place it in there since it's way too far from the actual building that we have however if i try to place it a bit closer say around here click and if there you go it does work so if i try to place it way too far can do it and if i want to reach there then i simply have to place various buildings until i get there so just place buildings every certain amount of space and if i click yep there you go now i can place it in there so with this we added a rule for an expanding building area just like you see in many rts games so we have added yet another very important base building room all right awesome okay so over here we have our fully functioning building system we can use these buttons to select which building type we want to construct then when we place down a building we can see it being constructed with this awesome shader effect and when the construction is done the final building gets actually spawned and we added rules to our building placement so naturally they cannot be spawned on top of each other or on top of objects and they also cannot be spawned way too far away from each other and as you can see this building system is not based on any underlying grid so it's a really nice freeform system allowing you to build bases and cities in any shape you want so here it is a really nice bailey's building system that you can expand upon to make an rds or a city builder or any genre that involves placing down buildings now like i said what we built here is a more simplified version of what i cover in the course in there i go into a lot more detail onto these various elements like the building type scriptable object the ui elements the rules for replacement the building construction and so on so if you want to see a stepbystep guide on how to make a complete game from start to finish check out the complete course link in the description if you found this video helpful consider liking and subscribing this video is made possible thanks to these awesome supporters go to patreon.com unitycodemonkey to get some perks and help keep the videos free for everyone as long as you can download the project files and utilities from unitycodemuck.com subscribe to the channel for more ent tutorials posting questions having comments and i'll see you next time