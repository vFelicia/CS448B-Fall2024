hello and welcome I am your code monkey in this video we're going to create the pink system from apex legends let's begin so apex legends has a bunch of really interesting systems and in this video we're going to recreate the ping system it's one of the best features in the game and one the reason why the game has been so successful by using simple things combined with context detection the game can be fully played cooperatively without ever talking to your teammates so for example if I press the ping button on the middle of nowhere you can see that I get a very nice simple movement thing that stays visible even when it goes off screen so I move away and there you go that is telling me that there's a ping in that direction and it shows the distance however if I press on top of an item like say this helmet in here I press it and Rigo the ping is correctly contextsensitive and this place that there is an helmet in that direction and again if I move away move the camera and there you go that cell meet there's an element in that direction works for all the other item types exactly as intended and if I double click instead of getting a simple movement like this I double click and it shows a enemy spotted ping so with just one button we can create three different ping types that provide a multitude of information for our teammates and we also have a ping we own that can be displayed when we hold on the ping button and we have even more ping types to show so for example saying that an N mu spot in here and again if I move away there you go you can see that there's the pain indicator saying there's a ping 65 meters in that direction now this is a really cool system and certainly one of the reasons why the game has found so much success because again even with our microphone it can communicate quite effectively with your teammates so we're going to implement this system in 2d but it really works pretty much the same in 3d all right so let's get to it here is my stirring scene I have a simple character in here aiming towards the mouse and I can move them around and shoot now the ping system won't be completely separate from anything else so the base movement code and aiming here doesn't really matter all we're going to focus on is to store the position of the ping and identify what's behind the mouse so we can display it I have done videos on a simple character movement and camera system so check those out to see how to create a basic character movement like this so with this base let's start making the pings we want to click on the middle button as our ping button and when we do highlight whatever is under the mouse and if nothing is in there we show a move ping and if we double click we show an enemy pang so let's start off with a very simple prefab to show the pink position so in here we create a new game object and we add the sprite pregnant and drag the move pane sprite okay so this is our simple game object now let's make this into a prefab so first create a prefabs folder and let's drag our ping into there to make it into a prefab okay let's rename this to PF ping world this will be a prefab that won't spawn whenever we want to display a ping in the world now let's create a class to hang all our ping system so in here making you see sharp script for our ping system in here and let's first make it a simple static class we're making static since we only want to have one ping system and we do not want to instantiate it now let's have a function to add a ping in order to add a pink we're required to know the position for that thing okay and in here let's just spawn our prefab in order to get a reference for our prefab let's add it as a new field on our game assets I've done video on how this class works but essentially what it does is we can provide public fields and then we can access those fields to get our references from our other scripts so in here we can simply add a public transform field for the PF ping world and now I can go here into the pink system and I can instantiate go into the game assets that instance that paying world and just like that we have a reference to the ping world which is stored as a public field in the game assets class and here in the editor I have a game object that contains that script and I can simply drag the reference onto it so now through code I can access this reference okay so now back in here on the ping system we can now insensate this prefab onto this position so insensate the pre film on the position we receive and put her in that identity in order to not be rotated all right so we should now be able to call this function and be able to see a ping exam on that position so now let's capture the mouse input so for that let's create a game Hamlin just a simple script where we can capture our mouse input and let's drag it on to this game object and in here let's go into our private void update and simply do a if input get mouse button down we want the middle mouse button so button zero is a left one button one is right and button two is the middle mouse button so when we press the middle mouse button let's simply add a pink so we go into the pink system when we call the add pink function and now in here we need to know the mouse run position so for that let's go into the code monkey Tonys which is obviously can grab for free from me and decoder monkey calm and in the utilities there is a very simple function to get the mouse wrong position all right so just like that when we click on the middle mouse button we should be able to see the ping prefab being spawned let's see okay so here I am moving around I put the mouse over it here and I click the middle mouse button any of there you go there's the prefab showing that's a move position and we should move in there put another one there and there you go all right great so so far so good now let's add a distance to the pink for that let's edit the prefab and inside let's make a new 3d object using text mesh now we're going to use this to this point in distance okay so we now have a nice distance text now let's make a script that won't run on that prefab so in here make a new csharp script this won't be the pink distance can work let's write that script on to the distance text okay now here on the script first on the private void awake let's grab a reference to the text mesh object and then on the private void update let's update to show the distance now here we need to calculate the distance so we need to do a vector3 in that distance first we need the position of the ping which is on the transform dot parentage position since this is running on the text object which is a child of the pink prefab and then we need the player position so we get the pink position then the player position is based on the class that is handling the player is simply get the position from there then we calculate the vector three distance between those two and now in here how you convert it into meters won't depend on how you set up the units in your game so this will return the number of units now let's convert it into meters which in my case given the size of the sprite let's simply divide this by three F so around three units equals one meter then let's convert it into an int so we do a method on 2/10 and run it all into an int all right so that you do it for this playing the distance from the ping to our player so let's test again and now we should be able to see the ping correctly display the distance okay here I am with my character now let's run a ping in here yep there you go it's 37 meters away now if I move the player you have there you go it is correctly updating showing the distance from the player to the ping all right great so now that we have the basis of our ping where let's make sure that it's always visible since right now if I move the camera to the left side you don't actually know there's a thing in there so let's do that we're going to make it always visible by adding a secondary ping indicator in the you want so let's go into our canvas in here let's make a new game object this will be our obtained window and inside we're going to make a prefab very much like our normal prefab okay that's pretty much it let's make it in to a prefab the same as we did with a ping on the world so now we have a penguin prefab and a ping UI prefab so now let's make the code for our ping window so create the new csharp script for the ping window and here on let's first create a static instance so we can interact with this window through static functions so we just make a private static ping window this will be our instance and we simply set it on our awake alright so now let's make a public static void add ping and will receive a vector3 for the position of that ping and here we're going to instantiate the UI prefab again let's add a new field into our game assets class so we have PF ping UI on the game assets class and we instantiate it onto this transform as the parent so we have our in Senshi ated pingu i transform now in here we need to reposition and either show or hide the prefab so for that let's make another script that won't run on that prefab new csharp script call it the ping GUI handler let's drag it onto the prefab okay and now in here we need a function to receive the target position for this particular ping so let's make a public void call it the set up in order to set up this ping you why and we're going to receive a regular three for the ping position let's store it in the field all right now let's do an update and in here and let's locate the anchored position now for the anchored position let's place it in a circular area so what we want is let's say that the actual ping is over here outside the bounds so we want this one to be shifted in a certain area around pointing in that direction then let's say it's down here we want to point it in there and there and so on so in order to figure out the radius that we should move in let's look into the canvas and here I have set it up to match with the height so that means that when the aspect ratio changes like for example five four you can see that the height stays the same and only horizontally it changes so that means we can use the height as the radius for our circle and it won't always be visible so in this case in order to make it always visible let's use 270 as our radius so back in the code let's first come like the direction towards our target and here we're going to use the distance from the camera rather than from the player since we are supposed to be pointing towards something we cannot see so the camera makes more sense and let's calculate the direction which will be the target position which is the thing position minus D from position so now that we have the direction towards our target let's place it in D UI using that direction and the UI radius all right that should do it and just like that we should have this object being pointed towards the ping position so now we can go into the ping window and in here after we instantiate it thank you I transform let's get the component for the ping UI handler and we call the setup function and we give a deep pink position okay that's pretty much it and lastly here on the pinky Y handler let's update the distance just like we did in this script all right so that should do it and this code is working exactly the same except for the pink position we're using the one we received on our setup and finally we call the add thing function on the penguin Doe whenever we add a ping to the ping system so here we are adding a ping and we go into the ping window and we also call at ping and we pass in the same position so let's see if the UI ping does fall in the same direction as the actual paint okay so here I am now if I fire a pink if there you go there's the world ping and there's the UI pink now let's see if it's pointing towards it and yep indeed it is pointing towards it based on the camera position so I can circle around and if that thing is now hidden I know that there's a ping in that direction so I move towards it and yep there it is all right great so the UI ping is telling me both the direction and the distance towards the actual thing okay so far so good now obviously we only want the UI ping to be visible when the actual ping is off camera when it's visible then we don't want the UI paint to be visible so let's do that here in the ping UI hammer code we need to do a test to see if the ping position is inside the camera so for that we do a camera that main that world to screen point which transforms a position from world space into screen space so we can take the pink position this will return a vector to containing the ping screen coordinates so now we can test if these screen coordinates are inside the actual screen so in here we define a boolean call it is our screen and essentially we can test if it's off screen by testing the ping screen coordinates test if the X is bigger than screen dot width then it's off screen from the right side let's one or so we have our bullion testing if it's off screen and if soft screen if the screen coordinates are past the width or under zero or bigger than height or under zero all right so using this volume we can easily set this game object to either visible or hidden now in here the simplest way to make visible or hidden would be to set the game object out set active however in here we cannot do this since if we were to set this set active to false then the update would never run and it would be hidden and never shown again so instead of disabling the game object itself let's disable the image and text components so in here we only enable the image when the ping is off screen and if it's on screen then with the same one same thing for the distance text and here we only update the UI position and it isn't sex again when the ping is actually off screen so when the ping is onscreen the new I helmet is simply hidden and it doesn't do anything ok so that should do it let's test okay here's the character and let's spawn a ping and there you go there's only the world thing the UI thing is not visible now let's see if we move away and yep there's the UI ping showing that an actual thing is 90 meters in that direction so we go towards it and when it shows up on screen there you go the UI pink vanishes and let's one another ping and look at that there's a ping in that distance ping that distance and we go and you when they're onscreen the UI things vanish all right so far so good so we now have a ping in the world and it's also shown in the UI if the world ping is hidden so essentially we have all the code to function with the basic ping logic so now we want to add different paint types so here on the pink system in order to have multiple ping types we need to store the type and not just its position so we need to rewrite this code in order to have the add ping function receive more information than just the position so for that let's use a custom class which will contain all the information for our pain so we do a common class let's call it a ping and in here the information we need in our ping is first of all we need a type so let's define a poly kanoon for the type of this thing and for the vowel types we have the move which is the one we were using and let's also make an enemy type then we store a private type for the pink type and a private vector3 for the bank position all right so here we have a nice very simple class to handle a single pink we have the type and we have the position and various functions to ask what type and position this ping has so now let's change all of our add ping functions to receive a pink object so if you think pink instead of receiving just a position so in here instead of getting a position we need to go into the pink and get the pink position okay now for the app thing let's pass in our ping object now let's edit this and here same thing receive a pink object which is inside the ping system all right so all of our code has been reworked to work with this specific class which contains our ping object so now let's left is here in the game handler when we add a ping in here we need to pass in a ping object so let's create a new ping system that ping here let's choose the pink type as a move thing just as we were doing and infesting the warm position all right so we refactor the code to work with this new ping object and everything should work perfectly fine so let's test and there's my character there's the things don't work perfectly fine if I move away the UI thing still works perfectly fine all right so everything is still working but we have successfully refactored our code to use a specific class to be able to handle all of our pings so now let's start testing creating an enemy ping so here on the game handler let's test spawning an enemy ping on the right mouse button so on the ping button one and we call it set up being a move type let's say it's an enemy time so if you click on the right mouse button we should see an enemy thing we want later make it work by double clicking just like in the game but for now let's keep things simple and make it this way so we just like that we are already creating a ping which contains the enemy ping time now we need to swap the visual based on the ping type so let's go to where we were creating the world ping here on the ping system and in here after in Senshi ating the transform let's do a switch on the ping type and now in here we could have different prefabs for each type of thing but we can also use the very same one and then through code modify the visuals so in here after instantiating let's do a switch on the ping that yet ping type case we have ping type dot move that's default so we don't do anything let's do it as the default yep and then we have case ping time enemy then this is where we need to change the visual so let's change the sprites and the text color for that let's go into the game assets as we've been doing so here let's set fields for our sprites so we add a sprite for the ping enemy sprite then let's also add a reference to these colors all right these are all the assets we need so now we can go back to the pink system and here we take the ping transform we get the component for the sprite render and we change the sprite to the game assets and we pick the enemy sprite then let's also change the color of the distance all right so just like that in here if we receive a ping that contains the enemy pang type we change the sprite renderer sprite and we change the distance text mesh color so now let's fill up these values on the editor here's the game assets script let's film that in okay so we have at the reference to our sprites and our colors so let's test and see okay here we are let's find a ping a move ping first and yep there's a move ping exactly the same as previously okay great now let's spawn an enemy thing any of there it is the enemy paying with the enemy color being applied both to the text and to the sprite and there's no there's another all right great so so far so good now let's make sure we deal with the UI sprites as well we can deal with them here on the ping UI handler which is a script that is being run on each UI element so here we do a switch on the thing get thing type and so on alright that you do it let's see so here's a move thing and then type thing now if I move away and yep there you go there's both things correctly showing the correct color and the correct sprite all right great so now that we have this working let's make it work just like the game by doubleclicking the mouse button so for now let's go here into the ping system class and here what we need to know is if we get to move pings one right after the other so first let's make a simplified version of the add thing function one that does not require a ping object but rather adjust the position so this simplified version is what we're going to call on the game hammer so instead of sending in a pink object with its type we just send in the plank position and let's remove this second one okay that's it so now all the logic is handled in here and now this function will decide the type so in order to test if we got to move things in a row we need to know what was the previous ping so let's store the unless ping when you create a new thing let's set the last thing to the newly created thing okay and in this function let's test if the last thing if it is not known and the last thing that yet ping time equals a move pink so in here we know that last thing was a new thing so now we know that two things were added and the previous one was a move ping now let's test for the time difference between them so let's also store a private static float for the last ping time and we're going to set it when we set the last ping all right so we know what the last ping was and when it was created now all we need to do is define some sort of threshold for a doubleclick so let's put it up here as a constant and let's say in 50 milliseconds so if you hit the ping button twice within 50 milliseconds then we want to create a enemy ping so in here if we're testing if the last one was a move ping lets us for a time difference so we test if the current time is under the investing time plus the doubleclick time so if the current time is within 50 milliseconds of the last thing time then we have our pings in quick succession so let's create a enemy pink all right so that's pretty much it now in here if it was not in quick succession then we had a normal new thing and if you don't have one last ping or the last one wasn't a new thing then we simply add a move thing the same as no all right so let's s and see if we can spawn enemy things whenever we double click ok so here I am and I press once and yep there's the normal move ping now I press twice any of there you go the second one was a enemy ping all right so the doubleclick logic is working exactly as intended but right now we also have to remove the OL move ping that one should be destroyed when the enemy ping is spawned so here in the code I also made it 500 milliseconds because 50 was just way too fast so let's go down here to make a function to destroy a thing so you receive a pink object and we want to destroy it so let's add a function on the ping to destroy itself first thing to destroy itself let's simply add a boolean to check if it is destroyed and a function test if it is destroyed and now in here always create an event that won't be triggered when this ping is destroyed all right so that's it now we have this event being called when the ping is destroyed here when we destroy the thing and let's call ping da destroy sound and now using this event we can destroy the actual visuals so here when we insensate the ping transform using this pink object let's subscribe to the ping dot on destroyed event and here when the ping is destroyed and let's just you object off destroy our paint transfer all right so just like that we should be destroying the pink transform whenever the actual ping object gets destroyed now let's also destroy the UI ping here we are on the set up let's add exactly the same code except we're going to destroy this game object all right so that should do it so now we have this destroy ping function which should be working perfectly fine so now we can go in here and when we want to add a new enemy pink we want to destroy the previous one so we simply called destroy ping on the last thing so we destroyed the last thing and then we instantiate a new enemy ping all right so let's see if we can now in sin she ate a new enemy ping and the move pain gets destroyed so here we are ping once and yep there's a move thing same as normal now ping twice and there you go you saw that the moving appeared but it vanished when we spawned the enemy pink and if we move on the UI they still work and the others everything still works so spawn a new enemy ping in there and there you go it's fun you move thing no enemy bank and yep everything is working perfectly fine all right so now that we have all of this working let's add a timer for the pings to destroy themselves so they don't stay on forever so let's go into the ping class and in here and let's store a destroy time this won't be the time that we should destroy this ping let's defined in the constructor so we set the destroy time based on time that time plus then some amount so let's say after 10 seconds each Bank should be destroyed all right so now we need to periodically test if it's time for this thing to be destroyed so let's go into our ping system and here we need a function that won't be counted our update now this is a static class that does not inherit monobehaviour so we need to manually trigger this function from somewhere else so let's go into the game panel and here we have our update and you can simply go into the ping system and call the update function all right so we now have this function being triggered on every update so in here we need to cycle through all the pings so we need to store a list of all of our pings on the update we need to second till that list and we test if time that time is bigger than the ping that get destroyed time then it's time to destroy this thing so we call destroy ping of this thing and since the ping destroy ping will remove it from the list let's go here remove our ping since we are modifying the lesson here we need to go backwards on our iterator alright so that should be working now let's add things to our list so in here we got the add thing when we add a new ping let's do ping let's not add our ping okay and the final thing we need is to actually initialize this list so it's making initialized function and in here we just initialize our ping list and we need to call this somewhere so let's go into the game Handler and make it private voice away all right so here on awake we can initialize which initializes our own list every time we add a pink we have that thing to that list on update we get this function called and we test if it's time to destroy each ping and if it is then we destroy it and we keep going so let's test and see if the pings automatically vanish after 10 seconds okay here I am let's for an eighth thing and now we attack ping and now let's see after 10 seconds this one should and let's wait and yep there you go with the pink vanish and the other one vanished afterwards all right great and if we move away you can see that the UI ping is indeed vanished so we now have our pings with a very nice maximum destroy time now the next thing we need to work on our contextsensitive pings essentially we need to do a different ping based on what we click on so for that let's first create a simple item so here on let's create an empty game object let's give it a sprite renderer component and passing this medkit sprite no it's also add a box Collider 2d so we can test and that's pretty much it now when we click we're going to do a recast and see what we hit so let's go into the pink system and here when we have an add ping let's test if we're clicking right on top of something so we do a ray cast we do a ray cast on the amount of the world position and for the direction let's put vector 2.0 all right so we got a ray cast being done exactly on the mouse position then we test if our ray cast head it contains a Collider then that means that we hit something so in here we know we clicked on something now we need to identify what that something is so let's go into the editor and we're going to create a script to identify that particular object so let's create new csharp script and we're going to call this the item identifier and in here let's make a public in home for the item type let's start off with a medkit also a helmet and some armor now let's make a field to store that you know okay so with this symbol class we can now go into the editor select our game object and add our item identify our component now in here so like this one as the medkit okay so now we can go back onto our ping system and here when we are doing our ray cast we see if we do have a Collider and if so let's try to grab the item identifier component so we do our ray cast hit so in here we go into the collider we get the component for the item identifier if we do have that component that that means that we've clicked on an item so here we have identified the type of thing that we want to create so we add a new thing and now we need to add it as an item type so here in the pings we have move enemy then let's say also item however the item can be different so we need to go down here and also store what type of item this is so we're going to store this but only in the case that we have our type as the item type and I know by itself cannot be known but by adding our question mark we are turning it into a novel and now the default value won't it be known so when we create a new ping oh it's also receive an optional value for the knowable item type so now let's go up here onto our ad think function we're going to add it as an item and then we're going to pass in the item type that we get from the item identifier dot item type and just like that we should be able to create a item thing based on whatever item is stored in the item identifier which again is placed on the game object so now that we can insensate a new paint type with the item type let's deal with changing the visual in here in here we need to set the sprite and the color so let's ask the item identifier for it so here let's make those functions let's make a public static don't return it sprite and let's call it t get title sprite and we're going to receive a item time now we're going to have the same thing a public static taller to get the item color alright so we have these two nice functions which receive our item type the simple switchin returns the correct sprite or cone so now here in the pink system that's all we need to do we need to go into the item identifier in order to get the item sprite and we pass in the thing that get item type we can make a function alright now it's do the exact same thing on our UI element and that's pretty much it some wetsy okay so here I am there's the medkit now it's very normal thing and there you go stone works and attack thing there it is and now I click the ping button on top of the item any of there you go there's the item thing showing that there's a medikit in there now if I move away from the screen yeah there you go the indicator correctly shows correct collar and everything alright so it's working perfectly fine now let's test out the other items to add the other items all we need to do is duplicate our item so here it is and now we need to change is here the item type on the atom identifier so change this one to the element change it for the helmet image do the same thing for the armor and that's all we need to do in order to show our different items so let's see the pings at work so here it is let's put a ping on Medicaid and yep there's the medicaid thing and on the helmet a helmet thing and now an armor ping as you can see the color of the text and the various sprites and they're all correctly showing exactly where each item is located alright so everything is working exactly as intended our pink system is context sensitive which makes it more comprehensive and easy to use so far pretty much all of these different types of things only use the exact same ping button and just depends on how fast I click and where I click on so now finally let's make the wheel menu to display even more pink types so let's first create the pink wheel in the editor all right so this is the visual for our pinwheel now let's see on with the code let's make a private void awake and in here grab the references to the buttons and set their actions and now in order to add a think we also need a position so let's start as a feel that we won't were see you later alright so now we need functions to show and hide this wheel all right so we got some various static functions that we can count from elsewhere so now we need to figure out how we're going to show the pinwheel so the last thing we need is to receive a vector3 for the plank position which is what we're going to store all right so what this should be working just for the move button so now let's see where we're going to call this so let's go into the pink system and then here let's add two functions so we have a function that will be called on every frame that the button is held down and one that is called when the button is released so let's capture those inputs so here on the game camera let's see if input dot get mouse button just this one which is fired on every update that the button is held down so it has four the button number two which is our ping button if it is held down then we call pink system ping button held down update and then on the get mouse button up up again the second button we do our ping system that pink button really ok so the input logic should be working now let's go back in here and now we need to count the number of time that we are holding down the thing button so let's make a film to hold that now on this function we're going to increase it by time.deltatime and now we're going to check if the home down timer is bigger than a certain threshold so let's define it up here so if we hold the button down for one second let's go down here if the timer is bigger than the constant timer then we want to show the wheel so we test if the pinwheel we test if is visible so we want if it's not visible and if not this one we do pink wheel that show and now we pass in the pink position which again we go into the utens class to get the mouse world position and finally when we release button we simply set the pink button hold down timer to zero all right so that's pretty much it so here on the game home we are capturing for our inputs whilst we're holding down the ping button we are increasing a timer if the timer goes past a certain amount then we show our pinwheel and on the penguin we show the game object and we have some buttons to add specific pings right now only the movement works but let's test if that one is working okay so here we are let's do a normal thing still works enemy ping still works item things don't works now I hone down the ping button any of there it is after one second I'm holding down I can see the ping well and now I select whatever thing only this one is working so let's click on it and there you go it showed up in there now we need to destroy the previous one so it's done with that on the ping system let's create a function to destroy the last thing and now we can go into the pinwheel and when we show it we call the ping system and destroy D and last ping that way that move things should vanish when we create this one so let's see okay click here show the ping window and that thing vanished now I still like this one and there you would spawn that thing in there right great now let's apply the exact same thing to all other ping types all right the code in here should be working we simply set a different thing time for each button all right everything is set let's see okay so here we are normal move thing anything now show a beeping wheel now it's not like this one and yep there you go there's that special icon now it's not like another one it's like this one and yep there it is there it is all of the various pink types are working perfectly fine and if we move to the corner everything works exactly as intended so there you have it we created the pink system from apex legends we can click somewhere random and just fire a normal blue thing we can double click which creates a enemy thing we can think on top of an item and it automatically identifies the item under the mouse and spawns that specific thing and we also have a thing we own that shows up if we hold the button down which gives us even more pain types all thing types also have an indicator in the UI in case the ping is outside of the camera view as always you can download the project files and utilities from unity comic calm if you have any questions post them in the comments and I'll do my best answer subscribe for more videos and I'll see you next time you