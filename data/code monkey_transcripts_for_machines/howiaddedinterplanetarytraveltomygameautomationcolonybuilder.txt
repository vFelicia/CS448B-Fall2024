hello and welcome I'm your Cod monkey and here is the progress that I made in my game adding a really interesting mechanic for interplanetary travel it's been a while since the last devlog the month of July and the beginning of August were a bit tricky balancing a YouTube channel and making a game at the same time has definitely been a lot more difficult than I thought basically I've been experiencing what is probably the reality to most of you most of you probably have a regular day job and you only work on games on the weekends and evenings so that is kind of what I've been doing as I developed this game so this is kind of relatable I guess after a few weeks of focusing mainly on videos lately I've been focusing mainly on the game and I've managed to do quite a bit of progress and managed to get back to this code base pretty easily once again it's thanks to the power of writing good clean code as well as a nice diagram to help me remember how everything was set up because of that coming back to this code base was pretty easy I managed to do quite a lot of work in a short amount of time and I finally managed to implement one of the trickiest Mechanics for this game adding interplanetary travel this was quite tricky to implement especially since the game supports both single player and multiplayer I encounter tons of issues every time I got it working I found something that can only buy broke everything that happened multiple times but by going through it in the end I got it on working hopefully by hearing how I encountered down those issues and managed to fix him hearing that won't be useful to you to remember that when you encounter bugs in your own games that's perfectly normal that's perfectly part of the process even though I do have Decades of experience I still get bugs like anyone else when I write code sometimes it works the first time and sometimes it doesn't that's perfectly normal so if you encounter bugs in your own games and don't get frustrated that doesn't mean that you're bad at programming or game development that's just a perfectly normal part of building any project so when I got back to work on the game I spent some time just working on polishing and after adding some Polish I got to work on adding more serious mechanics and I focus on the one that I knew was going to be quite complex adding interplanetary travel basically I want the player to be able to move between multiple Worlds the whole idea is to repopulate the entire galaxy with dinkies so I need the player to be able to go from one word on to the next one but importantly of course I need to not lose the data on that first world if the player then got back to the first one everything should still be exactly as they left it initially my first thought was pretty simple why don't I just spawn the entire world off to the side somewhere technically that could work I could have two worlds separated but both running at the exact same time but that would become really messy really quickly it would cause all sorts of issues with instance lists and all kinds of UI and visual elements the game really was made to assume that all the objects exist in a single world and of course if I were to take that approach it would just be a matter of time before everything broke due to Performance just imagine having 10 worlds of them running with hundreds of objects at the same time all of it being networkally synchronized with all that I'm pretty sure it's only a matter of time before everything breaks so the approach of cloning the worm off to the side that doesn't really work the approach I ended up taking was simply when I leave a world save the Save State for that world then load the Save State for the other one then when I come back I can download the Save State for this one in theory that is one task that sounds relatively straightforward just basic saving and loading but building this was actually quite challenging especially since the game is meant to work in both single player and multiplayer if it was just single player this would have been much much easier to build so here's my advice to you if you're a beginner if you're just signing out definitely start off with single player games don't go into multiplayer until have a decent amount of experience everything is much more difficult in multiplayer anyways before I could even start working on that I first had to rework the safe system basically I need to update the file in order to be able to store not just one Worm but any kind of Worlds and I also need to separate what is World data and global data for example for items and dinkies those exist in a single world so they should be saved in that world but other things like detectory that one is meant to be a Global Unlock you're not meant to lose all of your unlocks when you go from one lay to one B so some data needs to be on a permanent basis and other that needs to be Global I refactor the save file to make sure that everything works correctly but in doing so I also did not want the game to commonly break the saves of anyone who is currently trying out the demo so I also made sure to add some backwards compatibility thankfully this was actually pretty easy I just kept the own structure directly in the code then when trying to load it I'm going to try and load using that type if it works then great it uses that own version but if it doesn't work then loads using the brand new version and since I was changing the format for the save file I wanted to make it future proof I made sure to separate all the data so that I couldn't add more data in various places if I need to this was another task that normally would be quite difficult but thankfully was super easy thanks to the power of experience this is something that I've done several times before for example I covered how to do saving and loading onto a file including some extra data on another video here I did the exact same thing I literally watched my own video to remember how I set that up so I made a file header I stored the number of bytes and so on I separated the found metadata from the actual save data and just for fun I also implemented the logic to be able to store a screenshot adding this feature really is a great example of the power of experience the first time that I implemented something like this it took me dozens of hours trying to figure out how all this works it included a lot of trial and error whereas right now it was surprisingly easy that showcases not just the power of experience but also one of the reasons why I make videos for this Channel all the things that I end up researching for various videos eventually end up being super useful to me in my own projects okay so with that I had the new new file structure and I could finally start working on building multiple Worlds the idea is basically save all the current objects into memory then destroy all those objects destroy the environment then unload a brand new environment and unload the brand new objects for that new world it's important concept but it did have a bunch of really tricky Parts there weren't a lot of times when I thought okay it's finally working then I go to test and suddenly find a brand new bug that breaks everything like I said hopefully this is a great practical example to you as to how finding bugs is a perfectly normal part of the Game Dev process sometimes I read comments from people who are a bit frustrated that they write some code and doesn't come out perfect like you see in my videos but remember in my videos I cut out the mistakes when you see a tutorial I'm not going to cover all the various points that I went where things went wrong I'm just going to cover the things that actually make up the final working product but that absolutely does not mean that I don't find errors during all my research in building any system I get those errors just the same as you the one big difference between myself and a beginner the difference is that I just don't get frustrated when something breaks I simply accept it as perfectly normal and then fix it and thanks to my many years of experience every time I see a bug it's only unlikely that it's something that I've never seen before so most of the times when I see a bug I know exactly how to fix it and even when I don't know how to fix it thanks to all my interest of experience I do have quite a bit of nice debugging skills so I do know what logs I need to make in order to figure out what is the cause of death bug so that's just a nice tip for you when working on your projects when something breaks just relax that is a perfectly normal part just trying to improve your debugging skills so the next time you encounter that bug things will be much easier to fix anyway so yep adding this multiworld mechanic was really tricky I found lots of bugs here's every step that I took and every problem that I found and how I managed to fix it first thing I needed was simply to dynamically spawn the world so rather than having a fixed worm on the game scene inside of that I need to dynamically spawn it depending on what run the player was on now the obvious way to do that is just put the world inside of prefab and just spawn that prefab in single player this option would work perfectly but in multiplayer objects can't really just be instantiated they need to actually be spawned on a network so I thought okay I'm going to make this prefab a network object and just spawn it but but again yet another bug one of the ways due to how netcode for game objects works is you cannot have a child network object as a child of another Network object since each World also has some Resource One areas which are supposed to be Network objects because that I could not make the apparent prefab a network object as well so the next option was okay so don't make the main prefab a network object just spawn it as a Wrangler object then go through on the children and spawn them as Network objects and yep look at that this approach does work everything is spawning correctly but then I went to test with a client and again everything broke it said the client cannot spawn these objects because they are not on the prefamil list this was a really tricky bug that really made me quite confused if I look at the list I can't see yep the object is there and look at that the HQ building is exactly there so why is it that the client does not find it Well in this case turns out that the answer is when you instantiate the prefab in unity when you do that it actually spawns a copy of the prefab so after instantiating the object that is on the hierarchy that one is no longer a direct reference of the original prefab that one is now a copy that looks exactly like the original preferm so that meant and that as I instantiated the copy of the world that copy which contained all of the various Network objects that are trying to spawn of those were actually copies and they were not references of the original prefabs that were on the prefab list so yeah this took me quite a while to figure out like I said making multiplayer games makes everything much more difficult all the errors are much more difficult and importantly the debugging process that is even more confusing I made a simple RPC to be able to send the logs from the server to the client in order to verify were they somehow receiving different objects and because that I managed to see that for some reason the hash codes were different despite the fact that they were supposedly the same objects and that's how I figured out the whole thing about the copying becoming clones of the same prefab so yeah this was really tricky but after finding the cause the solution is super easy I just made a super simple script that holds a reference to the original prefile then when cycling through the copies instead of spawning them directly I'm just going to instantiate the original prefab and spawn that one so it has changed everything was not working correctly I could now spawn as both a house and a client and everything would work perfectly however when I try to move to a different World once again tons of issues the main one is actually a priest range run when moving between scenes the objects were for some reason not being destroyed I thought this was strange but it was an easy fix just manually destroy all the objects in the list but only later the end I realized what was actually going on in the background the issue is because the network object spawn function that one for some reason default to false on destroyon load I have no idea why false is the default here this is the completely opposite for every default on every other game object any other game object by default if you don't tell it to survive between loads it won't get destroyed but for some reason our Network objects the default Behavior was worse so by default Network objects will persist between scene changes so that was the issue here but again after figuring out the solution is super simple just set it to phone so make sure that it destroys on load and everything works so once again I got everything working no errors the players could now change worlds okay great but once again another sneaky issue popped up that once again broke everything this time the issue was on the save system if I started in one world then change to the other one then made save and loaded that save if I did that everything worked but if I started on one world then I did not go to the other one and I just saved right there and download that save file at that point when I load the game and moved on to the second world now everything would break this was another really tricky issue that again took tons of time tons of vlogging to figure out what was the cause it turns out the issue has to do with Json now Json is really awesome it is excellent for making save files super easily but since it is text based it has some weird quirks with how it regards nulls or empty objects the issue ended up being that if I first move to another world then it would basically generate the data for both those worlds but if I never made that change when I saved just on the first world when I did that basically it would save the second world as a known object now in my case I assumed that was going to happen so I made a simple null check but it turns out that Json automatically serialized the object so it does not actually save it as no so it was actually saving for basically a initialized object on all on zero so for example on the HQ it saved the position on zero zero zero it has the the phone type and so on so basically the object was not known but then for the actual HQ object data that data was commonly empty so when I went to load obviously everything breaks simulation here was basically just sending a check not just checking if the object is null itself but check the contents and make sure they are not the complete defaults so yet another issue that was really tricky to find but I did manage to find an infection after all those errors and bugs finally everything was working I could create a game in either a single player or multiplayer I could jump to any worm that I want and the word on that is perfectly saved so if I go from one lay to one B then come back everything is exactly as I left it and if the host travels and all the clients load along with them so this is definitely tricky as you can see in lots of bugs but in the end I finally got it working then it was just a matter of making it work in game instead of using a debug key again this was pretty easy the rocket already exists in the world it already has the building stages and all that so I just made a new window in order to select destination of where I want to travel to then I made some slightly different environments for different worlds pretty much just change the color just to make them visually different obviously I still have have to build out these actual worlds then I also added some logic in order to be able to carry the quick container contents be able to carry those as Rocket travels to another planet this is going to be super important because not every world has every resource so in the final game you're going to need to coordinate the logistics between different planets in order to make sure you have all resources in all planets so with that this mechanic is working however some of you might be noticed there's actually two very glaring flaws number one is how exactly do you automate moving resources from plant a to Planet B if the player is the one that has to manually initiate the rocket movement and that leads to problem number two which is what happens to the planets when you're not on there right now they are just static so once you get back it just loads the save exactly as it was before so it's as if time was frozen whereas you would think okay shouldn't time really continue moving on as you're in another planet and the answer is of course it should so that is something that I absolutely need to implement that is the next really complex task that I need to work on and right now I honestly have no idea how I'm going to implement that the code really wasn't set up to be able to have dummy objects and real objects so I'll have to figure out okay how can I generalize the logic so I don't have to do a bunch of copy pasting maybe I can just spawn the objects in a separate world that does not impact the first world so I don't know that it's definitely going to be really complex but it has to be done that is a crucial mechanic for the game obviously the machines do need to continue working in order to transfer resources between the worlds so yeah there's definitely going to be a very tricky task but once again I'm confident that whatever errors I find I'll be able to fix them and in the end I'll be able to get that mechanic working if you want to try out the game with this update go ahead and check out the free demo as well as add the game to your wish list alright thank you for watching and I'll see you next time