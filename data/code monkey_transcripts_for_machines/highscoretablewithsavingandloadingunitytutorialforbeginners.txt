hello and welcome I'm your code Monken in this video we're going to create the high score table containing a list of scores and the players name along with the ability to save and load let's begin so here is the high score state one we want to create we want a nice table on the UI containing a title for the various fields the position D score and the name of the person who cut that score we want to be sorted from highest to lowest score and we want to add the code to easily save and load our high score table so we won't be able to add a new high score then reload the scene and that high score won't be saved all right so let's get to it so here we are in an empty scene let's go to the canvas to be and creating the high score table so a new game object this will be our high score table in sum let's create a background now let's add a title text and now three headers for our fields okay this is the basic setup so now let's create the template for a single entry which will later duplicate but now we create a new game object this is the high score entry template let's duplicate these fields okay so these are the various fields now let's put our template inside a container which will contain all of the in sentient entries and move the container up here okay so our Windows setup is complete now let's see on with the code go in here a new csharp script this will be our high score table now first let's make a private void awake and on this awake let's grab a reference to the template and the container all right these are our basic references and also on awaken let's hide the template so we do entry template gameobject.setactive into false so we hide the default template all right now in here to test how we're going to duplicate it let's film a part list with a bunch of random stuff in order to in century the template we simply do way in Senshi 8 on the entry template and into the parent which is the entry container so in Senshi 8 the entry transform based on the template we grab the rect transform then we position the rect transform the anchored position so let's also define up here a float for the template height and we simply position it on minus the height multiplied by this in X all right and finally we do our entry transform game objects effective in to true alright so just like that we should be able to see ten entries on our high score what see and if there is as you can see our template is being correctly instantiate okay now it's also update text fields so for the position let's define an int for the ring in this case the rank is the index most one since we don't want the first one to be a rank 0 but rather at rank 1 now we need to convert this into text ok so here we are converting the rank into a proper rank string so for the first you have 1st 2nd 3rd from the others you got 4 5 6 and so on so in here on the position we give it the rank string like that okay now for the score let's just pick a random number and we simply set the text to be scored on a string ok and finally set the name alright this is it let's test and see how it looks and yep there's the window showing all 10 positions with the correct position string the score and the name alright so far so good now back into the code let's organize our code so there we can easily save and load injuries so for that in here let's make a simple class so this glass represents a single high score entry so the information we need is an end for the score and a string for DNA now let's also make a function to add a new entry to the table and in here we're going to receive a high score entry object also a transform for the container and then list of transforms which will be the list that we will add the in Senshi ated transform onto alright so now what we're going to do here is exactly what we were doing here so let's copy this code now in here the main difference is we don't have an index so instead we use the transform list count instead of using the entry container let's just use the container given in here at the end of all of this we add it to our transform list and now let's use the values actually stored on the high score entry so the rank is given by the position on the list ok then here for the score instead of being random let's get it from this dot score and same for the name alright so we now have a very nice function to be able to add a single entry to our list so now let's go up here to remove this code let's create a high score entry list all right so here we have our list with a bunch of random entries so now let's cycle through that list and have the entries using this function all right that should do it so let's test and yep there's the table correctly showing all of our high scores as you can see the first one with name of Triple A there it is right there with 5 2 1 8 5 4 and yep there it is and last one you have max 5 4 2 0 2 4 and yep there it is exactly all right great now obviously in here you can see an easy mistake which is a high score table is meant to be sorted from highest to lowest score so let's sort that now in here we have two options we can sort a list when we add a new entry and always make sure that this list is sorted or we can certain lists when we load the table since we don't have any saving and loading yet let's do the sorting just in here so before we add the entries let's do a simple sorting algorithm all right so here is a very simple sorting algorithm we go through the internal list and for every element we cycle through all the elements after that one then we simply do a test to see which one has the high score and if needed we swap their positions so it's very simple and we should now have a sorted list so let's test and yep there's a certain list as you can see number one is Jo with 8 9 7 then second day with 8 7 2 and so on all right so we now have a very nice table that displays a list of high score entries so now let's deal with saving and loading now to do that we're going to use player profs which are the simplest way of saving and loading persistent data we're going to use the player profs that set string function which allows us to store a string which won't contain all of our high scores so for the data format we're going to store that string using JSON so that way in just one string field we won't be able to store all of our high score data I have done videos on play preps in JSON so check those out if you want to see a more indepth explanation so first let's do a simple test here on our awake first we just save and order the strength so the we save it with a key in this case high score table and then we save it with a Val so after saving we're going to play Braff's and we get the string stored in the key high score table and let's do a debugger on that so we can see what that returns and there it is the console saying 100 which is exactly what I stored in here ok right so this is exactly how you do saving and loading in the simplest way possible now we don't want to store a string but rather a list of all of our high scores so for that we're going to use the JSON utility which can convert an object into Jason so we do to Jason and then we select our object in this case our high score entry list and this returns a string for our Jason string now in order to use this we need to make sure that the object contained in this list is serializable so we need to go down here into our high score injury and at the attribute system dot serializable so now in here instead of saving this we save our JSON string okay so let's run the code and on the console we should be able to see what is stored on the player perhaps which is our high score entry list stored as the JSON format however this will work since we can't directly convert analyst we need an object that can think that list so let's go down here to make an object for us to save so in here we have a class called high scores that simply contains our high score entry list now in here we create a new high scores object and we set the interim list to be the high score entry list all right and now we can actually use Jason on this object okay so let's see any of these are complete adjacent string which holds all of our high score data now let's go back into the code and let's go up here and comment out the code where we are initializing this list and then said we're going to get that list from what is saved on our Jason so we grab the string for the Jason string which only from the player price get a string for our high score table then we use the JSON utility not from Jason and to convert that jason string now we need an object type this will be the high scores that's our object type and our Jason string so this returns our high scores okay the song and now let's see and if there it is the list some looks exactly the same except now our data is being loaded from a player F string then converted into our high scores object which contains a list of high score entries that we then use to display so we can now save and load now all we need is a way to add a new entry so in here let's make a new function down here make a private void add high score entry we're going to receive an INT for the score and a string for the name now in here the first thing we do is create a high score entry object alright now we want to add it to the save the list so the first thing we do is a little list from the player prefs so we go in here and what we were doing for unloading right this then we add the entry to our list so we go into high scores high scores internal list and add our high score entry and finally we saved and you only update the list so let's see the code here it is we take our high scores and we convert alright so this function should be working to add a new high score entry so let's go up here and let's clean up this code so we no longer need this testing code and on the sorting we are not sorting when saving so we do need to sort when loading so we load the decent string from the point preps converted into a high scores object cycle through the object to make sure the list is sorted and then we create our entry transform now before we do all that let's go up here to add a new entry okay so we are adding a new entry with 10,000 score so let's run the code and see if the new entry does show up and yep there it is there's the new entry which was added to our list so now we can go back to the code and comment out this one so we are no longer manually entering and now it's us again to make sure the new entry has been saved correctly any of there it is the new entry is only there so we now have all of our high scores being correctly saved and loaded so we have a nice simple class that shows our high scores and they persist between runs now let's add a little bit of polish so adding a background for each entry in order to do that it's very simple we just modify the temple all right so there it is very simple we just added a new background to our template now here in the code let's go down here to where we are creating the entry transform and here on let's grab the entry transform dot following the background and we do when a game object outside active and we set the game object to active if this one is odd and not if it's even so we do a modulo of two on our rank and it's active if that one returns one and also let's highlight the first entry and let's also add an image for a small trophy all right so we have the trophy image and then through code we are someone doing a switch on the rank by default we hide the trophy image and his rank one two and three we show it and we set the cone okay so let's see if it looks quite a bit better he appears our high score table as you can see the first player is how I did to show that he is the first you can see the gold silver and bronze trophy and the background switches between dark and light to make it easier to read all of our injuries and if there is there's our high score table so there you have it to create a high score table that displays the rank score a name of each entry while also adding the ability to save and load our high score data as long as you can download the project files in utilities from unity card monkey calm if you have any questions possibly comment and I'll do my best answer subscribe for more videos and I'll see you next time you