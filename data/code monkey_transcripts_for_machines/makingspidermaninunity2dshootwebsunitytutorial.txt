hello and welcome I'm your code monkey mendes series with creating spiderman in unity 2d in this video we're going to add the ability to shoot webs as projectiles let's begin okay so this is the scene so far I have Spider Man walking around there are enemies being spawned and I can kick and punch them and after some hits they go flying away and also by hitting space I can do a web sip to move around the map very quickly so I can do attack them and so on okay great so now let's add another webbased ability we're going to shoot some webs as projectiles that we can later use to web up and deal damage to enemies so here in the editor let's begin by making a prefab that we're going to instantiate so in here let's begin by making an empty game object this will be the web projectile and I'm going to add a sprite renderer component and add the web projectile sprite so there it is that's the sprite so let's make it into a prefab by making a new prefab and we're going to call PF web project out we're going to use the physic system to detect collisions so in here let's add a box Collider 2d and also a rigidbody 2d we're going to move our projectile by modifying the transform instead of using add force so in here on the rigidbody on the body type and start being dynamic and let's set it to kinematic alright so that's a setup require to have physics working on this object so now let's do a script to control this so make a new csharp script and we're going to name this key web projectile so first let's just do a very simple movement let's define a private consulate for the spin of this projectile let's give it a small amount so we can see it visually moving we're going to have the private vector3 for the direction that this projectile will be headed towards let's make a private void setup function and in this setup function we're going to receive the direction so on the private void awake let's call that set up and give it a vector3 just moving to the right so 1 0 okay that's the direction and now on our private Boyd update we're going to move the transform towards that direction so transform that position increase the position by the direction multiply by speed multiplied by time downtime okay so let's see the code in action and we should have this projectile moving towards the direction which is to the right yep there's a projectile as you can see it is moving to the right okay so now that the projectile movement is working we want to look for a collision so for that I'm going to create a very simple wall so in here create an empty game object this will be my wall I'm going to add a sprite renderer component and drag a white pixel this way I can see a visual square okay like that and make it look like a wall now add the box Collider component and make this a trigger now we can go back into the projectile code and in here in order to test for collisions we're going to use the private void on trigger enter 2d this function is called when this box Collider hits another physics object with the trigger set to true so in here when we do hit something let's simply just destroy this projectile so do a very simple destroy this game object okay so let's test and see if the projectile does vanish one hits the wall there's a projectile moving slowly to the right and when he gets there yep he vanishes great so we now have collisions fully working so with that let's make a create function to be able to easily spawn projectiles so let's go all the way up here and make a public static web projectile and we're going to call it a create this one will insensate various projectiles for the arguments let's receive a vector three for the position that we want to spawn the projectile at and a vector three for the direction that we wanted to move towards so in here we want to in Senshi eight and we need a reference for the prefab to instantiate so for that I'm going to go into the game assets class that we've been using if you haven't seen this this is a very simple class that has an instance in our scene so using the static instance we can easily access these references so in here I'm going to add another field for the spiderman web projectile and back into my projectile in here I can instantiate going into the game assets that instance and grab the web projectile I'm going to instantiate him and position and with a quaternion dot identity so this returns a transform for the web projectile transform then I get into the transform get the component of type web projectile and that returns the web projectile then we call this set up to set the direction we give it two direction and we'll return this web projector okay so we now I have a nice easy simple static function to create various projectiles so in order to test this let's go into the game Handler and over here on start let's just fire projectiles all over the place so in here make a function periodic which again is part of the code monkey utilities that you can wear up for free from unity code monkey calm and I'm going to create a function periodic which triggers a certain action every certain amount of time so let's say every 50 milliseconds we are going to trigger this action and in this action we're going to go into the web projectile and in sin she ate a new projectile let's start from the spiderman get position and let's give it a random direction so use Utahns class to get a random direction okay so every 50 milliseconds we should be firing a projectile in a random direction let's see and yep there they are projectiles going in every direction and whenever one hits the wall they vanish all the others keep going okay so now as you can see the rotation is incorrect so let's fix up over here on the setup let's rotate the transform so in community transformer angles and modify the owner angles give it a zero zero on the x and y and now on these Zed go into the utils class and get the angle from vector of this direction okay and yep the rotation is now correct and you got webs being shot down all over the place and again when they hit the wall they won't vanish correctly now if we pause the game we can see that there's a massive amount of projectiles firing all over all right there you go and yep they're there and if we go down in the hierarchy yep you can see a mountain of projectiles essentially if they don't hit a wall they keep going on forever obviously we don't want objects only forever so let's go back into the code so in here on let's have a maximum distance this can be variable before now let's set up as constant so constant float for the distance traveled max and let's say maximum I want them to travel 100 units then we have a private float for the distance travel and on our updates let's simply increase the distance traveled by the speed times time time so this is how much heat this object has trouble so if the distance travel if it is bigger than the distance traveled max then essentially the projectile has traveled too much destroyed so I'm going to destroy this game object okay so that's pretty simple let's test and see if they now destroy after some time okay there they are they are being spawned they are going in yep there you go there's about a hundred units from there to there and when they get there yep they vanish and now we can pause and check out the hierarchy and we no longer have objects all over the place okay great so now let's make them spawn manually from spiderman so let's head into the spiderman class and here on the normal let's set a node function for the handle shoot web projectile so let's go down here and make that function now in here let's test for an input so in here I'm going to test for get he down of key code let's say F so when we press F we want to fire a web projectile now we want to fire it towards the mouse so let's currently take a vector3 for the projectile deer which won't be the utens class to get the mouse position mine is this position and normalize the whole thing so using that we can simply go into the web projectile class and create a new web projectile spawning from this get position and towards the projectile direction okay so let's go back in here and comment out this code and see if we can manually spawn webs okay here I am everything works the same I can move I can punch and kick okay and I can also webs it and now if I click have yep there you go he's firing one project now obviously we need to change the speed of the projectile but yep they are being spawned from there now in here when we are shooting the projectile let's also play an animation so I'm going to go into the spiderman base class and play the shoot web animation we need to play towards the projectile direction when it completes it won't fire this action okay so here before we play the animation let's modify the state so let's add another state and the state won't be shooting web projectile so this is what we want to set in here when you play the animations at the state equal state dot shooting or projectile when the animation is complete let's set the state back to normal so now let's go up here into the update in case we are on state shooting web projectile if we are then let's handle shooting more projectiles so essentially once we're shooting a projectile we cannot move but we can shoot more projectiles so let's see if the animation is playing okay so here I am moving around if I press F yep there you go he's firing projectiles and projectiles vanish when they hit the wall or after reaching a certain distance so in here I can move around I can still words if I can still tag everything still works and firing projectiles all over the place okay great so now that we have our projectiles working let's add a particle on the floor when they get destroyed so for that we're going to keep our code clean and the logic separate from the extra effects so with that in mind let's use some events so in here on the web project now let's make a public static event an event handler event and we're going to call this on web reached max distance so this won't be fired when the web reaches the max isn't then let's also have another event for the on web hit object in case we want different behavior so now it's very simple to fire these events so in here when the projectiles travel too much if the event does have subscriber so it's not know then let's fire the event using this an event our X dot empty okay and well let's fire this actually before we destroy the game object just in case whoever captures this event once you get the position from this object then let's do the same thing on a only just like that okay so using that we cannot make another class to capture these events so here let's make a new csharp script this will be the web for particles now this will be a very simple class so remove on this the amount of behavior and make it a static class since we don't want to instantiate this let's make it have a public static void init function to initialize this class and in here essentially we're going to go into the web projectile and capture those events so capture this event and the other one as well so when these events are triggered let's spawn a web particle over here I have a web on the floor there you go just like that that's a simple sprite so let's make this into a prefab that we can instantiate make it a prefab DPF web floor again do the same thing and add the web for into our game assets and then we can simply go back into the web for particles and here let's use that to instantiate any web for particle so use object instantiates we're going to instantiate into game assets that instance and grab the prefab for the web on the floor and now for the position that I'm going to spawn I need to capture the sender so the sender is a web project um so well projectile equals sender as a web project now we could also obviously have a custom event arguments but this works and pretty simple so using the web project I'll grab the transformed position and again put an entire identity and just like that so just like that we are spawning this prefab into the web projectile position whenever this event is fired so it's the exact same thing for this other event and just like that so now all that's left is in the game hammer in here on our way to let's go into the web for particles and initialize that class so this one calls in it and this one subscribes in those events and when those events are triggered he insensate this sprite okay so let's see ok Here I am if I press F there goes a particle and yep it gets there and it changes into a nice sprite that shows a projectile winter and it stopped on the floor and again I can also hit a wall and I can spam to hit the wall and just like that now we could have a different sprite for when hitting a wall versus when hitting before but you know that's just polished so lets you see and yep exactly everything is firing and we can still webs if around the map and we can sell punch and kick so there you have it we have the ability for our spiderman T should work projectiles we made those webs go in a straight line and added collision detection to stop when hitting a wall in the next video we're going to fire webs towards the enemies and web them up and cause damage as long as you can download the project files in it somebody's from indie code monkey calm if you have any questions post them in the comments and I'll do my best answer now subscribe for more videos and I'll see you next time