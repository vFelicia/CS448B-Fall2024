hello and welcome I'm your cone monkey and here let's learn how to use Unity Lobby this is their tool for helping you create online lobbies for your multiplayer games which you can join along with your friends and start playing together as a host you can create a Lobby give it a name make it public or private you can update the unlocked data which can be whatever you want like for example a game mode and as a player you can find public lobbies or join a private lobby with the code set some filters or use Quick join to join automatically the going with this tools is to handle everything related to lobbies and related to that there are two other Unity gaming Services tools I've already made an extremely detailed tutorial on how to use netcode for game objects watch that video to learn how to actually send data between the players after the game has turned and in the next video I'm also going to cover the really tool which helps you easily connect your players without requiring IPS or port forwarding all three of these films can be used separately or they can be used together in a really seamless easy way so in this video let's learn all about Lobby I'm going to focus on going step by step showcasing just using the functions and showing how the API works with no Visual and in the end I will also showcase a visual sample that I built myself including all of this functionality you can download the final demo the project files are linked in the description also this video is officially sponsored by Unity gaming services this is a collection of tools for helping you build operate and grow your games with ease it includes all of the tones that I'm going to mention here netcode for game objects for adding multiplayer to your games Lobby for joining players really for connecting them there's also a dedicated game server tool one for matchmaking vivox for Voice and text you have Cloud save for storing player data in the cloud cloudcon delivery for delivering as to your players you can explore your game analytics do some a b testing monetize with ads or do inapp purchases or a bunch more all of these tools are either completely free or they have generous free tiers so click the link in the description to learn more about TNT gaming services and get started for free alright so Lobby the first step is to install the package so let's open up the package manager then let's go up here into the entity registry and now just scroll down until we find the lobby package right here and just install it the next step is to set up a project with UNT services so for that let's go up into edit then project settings then go into Services now make sure you are signed in if not you can click on the button over here on the top left corner to sign in then over here you can create a brand new ENT project ID so you can do that through here or if you already created in the dashboard let's go into this one then select your organization select your project and Link the project okay that's it the project was linked now we can go into the NT dashboard and over here on the left side let's go down into multiplayer then we've got all the multiplayer tools over here let's go into Lobby go ahead and click on the button around here in order to enable Lobby that takes you through the setup guide so let's follow these steps first of all I'll link the NT branching so we already did that let's go next then install the package we also did that next then make sure to turn the lobby on next and that's it if you want you can import these samples to see how Lobby works in the context of a bigger sample but for now let's keep things simple for this video just go ahead finish and that's it that's the basic setup done now back in our project here let's begin by making a new csharp script let's call it test Lobby let's make a game object to run it here let's attach the script and open okay so the first thing we need to do is initialize Unity services so let's make a private void start and on start we're going to go into the unity services this is inside unity.services.com let's go into this one and just call initialize async now importantly note how this is an awaitable function so in order to run this properly let's add a weight in here and once we add a weight we need to make sure that this function is also marked as async now if you're not familiar with async in a way don't worry too much about it you don't need to know how it works in order to use it but essentially what this does is it lets you run code asynchronously so for example over here this will send a request ENT services in order to initialize the API that request is going to go over the Internet so it's not instant if you did not make this async and did not use a weight then the game would pretty much freeze and don't received a reply from the server whereas by using these keywords this way the game does not freeze when it gets to this point it sends off the request and then just pause the execution of this function and the rest of the game keeps going then when this function receives a response then continues executing down here but like I said you don't need to worry about it just don't forget the async and Away keywords okay so that's it for initializing these services then Lobby requires authentication to use ENT authentication has tons of options you can link a Sim account Apple Android Facebook or open ID so you can ask the player for access in order to create an account and Link it with any of those services or something super awesome is you can just do a super quick Anonymous sign in over here we just go inside the authentication Service this one inside Unity Services authentication then let's access the static instance and now we just call in the sign in anonymously async and again this is an available constant let's await basically this way it's normally invisible to the user so there's no need to ask them for any username or password it just happens automatically then the future if you want you can upgrade this Anonymous account into an account linked with any of those services okay so this will sign in anonymously and create a new account for this user we can listen to the event to know when the signin completes so let's go inside the authentication Service inside the instance and let's listen to the signed in event so over here on let's do analog saying we've signed in and we can grab the authentication Service instance and let's grab the player ID so this is the player ID that was generated okay so with this we have everything we need in order to get started working in the lobby so first things first let's handle creating a Lobby let's make over here a function so private void create Lobby then over here to create let's go inside Lobby service inside unity.services.lovice on this one let's access the instance and then we're going to count the function create Lobby async this one as you can see takes a Lobby name and the max number of players so let's define here so a string for the lobby name let's call just my Lobby and then for the max players and let's say we want four players so over here the unlocking name and the max players okay so this will create a Lobby and again note how it's available and it's going to return an object of type Mobby so let's grab that one so first of all make it away and then use the object of type Lobby so this one right here inside unity.services.love is not models so this is the lobby that we just created and verify that we did create Let's see we debunk just to see it and again in order for a way to work we need to make sure we mark this as async all right that's it so this code here is going to create our lobby now one very important thing is that all of the functions related to lobbies all of these can throw an exception for example if it couldn't create a Lobby or somehow it could not connect to the lobby server if we don't catch that exception that could break our entire game we don't want that to happen so let's wrap off this inside a nice try catch so try catch and we can catch up type Lobby service exception and just do a debug download on this just that way in case there's any error we can see what caused it okay we're almost done and just for testing over here I'm going to be using the quantum console this one is an excellent asset that lets you easily add a console read the logs and Trigger functions however I should point out this is not required you can call this Lobby function from anywhere but in my case for testing for this video this has to be super useful so in order to make it work with that asset I'm just going to add the command attribute okay with this let's test all right here we are and right away we can see that the authentication is working so we signed in and this is the generated player ID and now let's call the function so the create Lobby function let's run that function and there you go create the lobby with the name man Lobby and with four players alright great so far everything is going really good we can verify that it didn't work by unlocking the dashboard over here in the dashboard if under Lobby we go into overview over here we've got a whole bunch of sans and we can look and see yep we've got one request right now and down here we can see request by type if we got a create request okay great so now that we have created on Lobby the next important action is searching for lobbies so let's make another function so a private Droid let's call it list lobbies then over here let's go inside lobbies access the static instance and now it's called the function query and Lobby is async and again this one is available for the parameters you can see we have an optional parameter this is for filtering if we leave it as empty it's going to return only in lobbies I'm going to Showcase how to use the filters in a little bit so this one as we can see returns a query response so let's grab that so the query response and again make sure this one is marked as async all right so we have our query response and now we can go inside that one and over there we've got the results so this is a nice list containing all the results that we found so let's see over here at debug log let's say Lobby is found and query results are count so we found these lobbies then let's just cycle through them and print some data so we'll just do a four inch for each Lobby in the query response to our results and for each of these let's do a log log in lobby.name and perhaps let's say the lobby.max players okay so since we did not use any filter this is basically going to query for every single Lobby that exists now again remember to wrap this inside a try catch otherwise this thing could break the entire game so let's wrap it and okay let's test and see what this does all right so here we are I'm signed in first let's do our search so let's call let's logins do our search and yep Lobby's found zero okay make sense now let's create a Lobby there you go created and now we film list again if there we go we found one log to verify that it is indeed running over here I've got two builds so let's try doing a list and nope down from zero and on this one listen nope also found zero now this one let's create a Lobby and there you go that one created and now on this other one if I'm list again and if there go this one did find the lobby so we have verified that we are indeed grabbing the lobby from the master server on the internet and not anything local okay great and again I should point out that like I said over here I'm just testing out the API but as you might imagine you can easily add a visual to all the return values from all these functions that's what I'm going to Showcase when I showcase the if only working sample in a little bit now one important thing about movies is they can become inactive if they receive no data in 30 seconds so the lobby has been created it has been a bit over 30 seconds so now if I try it on listen lobbies again let's see if it still finds the same one and up there you go look at that zero lab is found so the lobby was created but since we didn't send any data we didn't update anything after 30 seconds it became inactive inactive pretty much means that it does not show up on search so new players cannot find it however players that are already on the lobby they can still get data from that Lobby now in starting the game you really want to keep the lobby alive until all players joined so in order to keep it alive what we need to do is send a heartbeat so when we create a brand new Lobby let's keep a reference to it so let's go up here making private of type Lobby let's call it the host Lobby and then down here when we create our lobby we get one of the host Lobby equals this Lobby okay and now with this we basically just need to run some logic every certain amount of time in order to trigger the heartbeat function so we need to run some code every x amount of time and if you want you can do that in Co routine but personally I do not like coroutines I don't like the pattern that they force you to use so if you want you can use them but for me I'm just going to use a basic full timer so if you're just going to declare a float for the heartbeat timer then let's make a private void update and then let's make a function handle Lobby heartbeat and we're going to run this on update now here just do some basic timer but obviously first check if the host Lobby does not know so if we have a host Lobby if so count down the timer then if the timer has elapsed if so let's reset the timer now for the heartbeat like I said love becomes inactive after 30 seconds of inactivity so let's send a heartbeat let's say every 15 seconds so for actually sending the heartbeat let's go inside the lobby service in the incense and let's call the send heartbeat Peng async then this requires an ID for Lobby ID so let's grab in the host Lobby and pass in the ID and again this one is available so let's await and make this one async all right so that's it let's test and see if our Korean Lobby stays alive after 30 seconds okay so first of all let's list our lobbies and nope we've got zero great let's create a brand new Lobby okay let's list them again and yep there it is okay so now let's wait 30 seconds okay it has been almost a minute so let's listen again and see if it's still alive and if they're good with the lobby is still alive okay great so our lobby is no longer becoming active now like I mentioned over here when releasing lobbies you can optionally add some filters so let's see how to do that this function takes a parameter of type query and Lobby's options so let's make one of those so query and Lobby's options we can inspect this time to see what it contains here we've got a bunch of things so for example how many results we want to get which ones we want to skip and importantly over here we've got the filters and the order so the filters are how we can narrow down which lobbies we want to get so let's inspect the query filter over here on this one a query filter contains a film options a value and an operation for the field options this is which field it's going to act upon you can see there's some common ones so you can filter by number of max players you can filter by number of available slots you can filter by the name by when it was created when it was last updated and then these ones the S1 through 5 and the N1 through five these are basically custom parameters which you can Define yourself the end simply means number and the assembly means ring so for example when creating a Lobby you can Define the S1 field you can Define that one as for example the game mode and then when querying for lobbies you can filter only the lobbies that have that specific game mode or alternatively in terms of numbers you could have for example if you known for something like the player skill and then he could filter for all lobbies with player skill within a certain amount so that's all destruction now let's see how to actually use it so here we create the new query and Lobby's options then like we saw for example we can set the count so let's say we wanted to get just 25 results and then for the filters so this one is a list so let's create a list of query filter and then over here we create as many query filters as we want so first of all for the options for this one let's go with available slots then for the value let's go with zero and then for the operation over here you can see we've got all kinds of operations so we have contains if it contains this value we've got equals greater or equals greater than less or equals less than and not equals so let's say right now we want to filter all the lobbys with at least one available slots so more than zero so let's go with greater than and just like this as you can see this is a list so you can add as many functions as you want or we can add just one so basically just like this this will return oil lobbies that have more than zero available slots and by the way this one is actually a string even though then it won't be Parson to an end but yep takes a string now I said another thing you can do is sort the results so over here we can set the order and once again this one is also in list and list of querying orders so let's create a new query order first you can set it as ascending true or false let's say false to make it descending and then for the field let's go with when the lobby was created so the lobbies will basically be sorted from the oldest to newest alright so here we Define our options now we just pass it in over here into our function so that's it and again like I mentioned over here I'm really just showing you how to work with the API how to count the functions and so on but as you might imagine in your game you would have the UI and using the UI you would have all kinds of buttons to set the filters and then using that you would construct over here these query and lobbies options now for a quick test let's try creating a lobby with just one player which means we won't have any more players after we join when we create so let's go up here when we've got the create Lobby instead of four players let's put just one okay so now here he found with lobbies and nope none are found okay now let's create unlocking and yep it created and a final list and up there you go also zero Lobby's phone because again there is no lobby with at least one available slot all right great so far so good now the next thing we want to do is be able to join Lobby so for here let's make another function let's make a private void call it join Lobby and then over here in order to join we just go into lobbies access the instance and then we've got some join functions as you can see we've got two of them so we can join in lobby buy ID or we can join by code here just a test that we can join in the lobby let's get we joined by ID and let's basically just copy this just to do a query and join the very first Lobby so just a quick test so over here do a query response find the first one and then let's go inside let's not apply anything so no lobbies no options make this one async so it finds whatever lobbies and then let's say we join the very first one so let's get into results on index 0 and we're going to grab the ID because we use join Lobby by ID and let's await this and remove the log okay so this function should be able to join the very first Lobby that it finds so let me just add the command here and then let's go up here and add some more players so we can join it okay so let's test so here with both Builds on this one let's create a Lobby okay creating now this one if we unless we should be able to see it yep and if we use the join Lobby it should join that one so let's click any of there you go it didn't do anything because there's no log but yep it did join the lobby again obviously you can imagine how with a proper UI you would first have a visual listing of the lobbies then the player would click and it would join the lobby based on that ID that's exactly how my simple Works which again I'm going to Showcase in a little bit now an important concept is the difference between public and private lobbies like name implies a public Lobby is searchable so anyone can join whereas a private lobby can only be joined directly either with the ID or the code how we Define it as public or private is over here when we create a Lobby so we've got this function which takes a Lobby name the max players and then as we can see it also takes a create Lobby options so let's create one of these see what it does so we create Lobby options let's go inside this to see what this contains and yep it has this so we've got a Boolean for is private so if this one is true then it is private if it is false then it is public then we also got some information about the player created in the lobby and some more data for this Lobby we're going to see these two in a little bit for now let's just focus on the prevent so we're here when creating one let's set this private back into true so we are going to create a private lobby and then after creating lets you unlock so let's also unlock the lobby.id and let's also log the lobby.lobby code and of course up here let's make sure to use our create Lobby options all right so it says all right here we are and let's create a brand new Lobby and there you go it created with that name that many max players and here we see a big string for our ID and then a smaller one for our nice Lobby code but importantly we made this private so now we find list for lobbies and up there you go zero Lobby is found because again this one is set as private so it does not show up to the public the way we can join this private lobby is either through the ID which again that is a pretty complex string so this one is not very useful for sending to your friends and so on so because that you have a much shorter and much easier to read in lobby code and this is the one that you can send to anyone in order to join this private lobby all right so let's go down into our join Lobby function instead of joining the very first one after querying let's get rid of this and let's add a proper parameter let's add a string for the lobby code and let's also rename this function so join Lobby by code then with that let's use the other function so join Lobby by code async and this one as you can see takes a string for the lobby code so let's just pass in that one so the lobby code then let's just do a debug log let's say join lobby with code and then Lobby code okay so with the slits test all right so here I have both balance now on this one let's call create Lobby and there you go create long Lobby so now on this other one if I do list lobbies no one is private so yep we some don't have the unlock we found and on this one let's use the function join Lobby by code and then let's pass in the code it is down so k3k6pp let's join and if there you go we join the lobby with this code all right Awesome everything worked this is how you can join a Lobby directly next let's look at one really awesome Lobby feature which is quick join it's perfect for getting players into your games very quickly without having to ask them which game they want to join with quick join your player just press the button and they instantly join the lobby to do that let's make another function so private void let's call it quick join Lobby and over here we go into the lobby service access the instance and we're going to call the function quick join Lobby async as you can see this one has some optional options using this you could filter so for example you could have a quick join only on a certain map or a certain game mode and so on but to make it super simple you really just have this function but again this one is available so let's await let's make this async and again as always don't forget to add the try catch if you do then it might cause an exception and break your home game so don't forget this okay so we have this let me just make Command just for testing and let's test so here with both builds let's create a Lobby and then on this one let's do quick join Lobby and if there you go it did not work and by the way here's a nice example of the errors thanks to the try catch the game didn't break we just got a really nice error function and on this one as we can see it is saying that it failed to find any open lobbies again that is because we made this one a prevalent Lobby so this one cannot find it through quick drawing let's just quickly go here go up into create Lobby and for this one let's set is private back into phones to make it public so now again over here on let's create in lobby and there you go creating and on this one let's quick join Lobby and there you go it does join quickly okay great so with this we already have quite a lot working we can create lobbies we can list them and join them but on the lava itself we still have no data one very exciting example is the players have no name we can see all the players inside a Lobby about looking inside this Lobby class so this one over here if we look we see over here yep we've got a list of all of our players and then if we look here on the definition of the player class if you look at this one you can see we've got an ID connection info and location ID join lesson and so on so as you can see we have no field directly for a name however what it does have is over here a real nice dictionary so basically the way this works is all of this data is up for you to Define so you have to decide what data you want to include with each player you can for example include the name you could include some kind of Loadout you could include some kind of selected character some kind of Icon colors whatever this is a dictionary of generic status so it's up to you to Define what data each player needs to have let's first just make a function just to print all details from the player so let's go down here make a simple function let's just call it print players and we're going to receive a Lobby object so then let's cycle through player player in the lobby dot players so we go through this one and let's do a debug.log and let's say for example the player.id and up here on let's see debug log and let's say players in lobby and then print out in lobby.net alright so we have this nice somper function so up here when we create a Lobby we've got the host Lobby then let's call this function and pass in the host Lobby okay so just like this let's see what this prints so here if I just create a Lobby there you go that's what it did so it creates a Lobby players in the lobby and as you can see it is the ID of this player now let's see how we can actually add our proper data into it the way we do that is actually what we saw a while ago so we have the create Lobby options and if you remember over here inside we've got a player so this is the information about the player that is creating this Lobby so we can basically just add this inside let's set over here playing equals and we construct a brand new player and then for the player takes all kinds of things so for the ID let's go into the authentication Service access the instance and let's get the player ID and then we've got the data so what's constructed this one is a dictionary so inside we can add as many keys as we want so let's put in a key for something like the player name let's call this and then let's give it a player name and just for testing we need to make sure that we have different names so let's go up here to define a random name so private string for the player name and let's name it put code monkey and then do a Unity engine random.range just to generate a random number so let's say 10 and 99 just so we can get a nice random number with this the editor in the build should have different names let's also print it over here on start so a debug.log on the player name okay so we have that and then down here let's pass in the player name equals this player name except this one is not a string but rather we have to create a player that object then inside we can Define the visibility this one we have three options member private and public so public easy as you expect so this one is visible to anyone outside the lobby private means it is only visible to the host of the lobby and remember this one is visible to every member in the lobby I'm going to cover these in more detail in a little bit but for now let's just make it member so it's visible to every member inside this Lobby then for the volume let's put the player name and close this and actually for the ID we need to either send it over here in the Constructor or actually if you omit this then it won't just grab it directly from the authentication so let's leave it just like this okay so basically with this when we create a Lobby we are creating a Lobby and passing in the player that is squaring the sloppy and inside that player class we are defining the Dana and we are defining a field for player name and we are setting it to the player name so then down here let's go into our print players function over here we are printing the player ID and then let's also print the player let's go inside the data and let's grab the player name this contains a player that object so let's go inside and grab the value alright so let's print it and see if it does say the name of the player that is creating the lobby and actually random.range apparently cannot be called directly from the Constructor so instead of generating the name here let's just copy this erase this and Define the player name here okay so let's test so here we are and that's the generate name so code monkey91 so now if we create a Lobby and if there go with the create a Lobby and the players inside this Lobby has this ID and this really nice name all right now let's make sure this works also when joining again for all the functions we need to create a player object and pass it in so for example down here when we've got the join Lobby by code for example on this one we've got the function we take the lobby code and then we also have the option so we need to also include that so join Lobby by code options so let's construct one of these and then over here we have the player so this is the player that is joining and instead of copy pasting a ton of code let's actually make a function to return a new player object so let's just make something like this so private going to return a player so get player and over here just return a new player doing exactly that okay so now let's use this function so up here instead of the find that let's call get player okay like this and then down here when we are joining let's put the exact same thing player get player and then we just pass in this inside there okay we do this and finally let's also print our players just see all the players inside so we join the lobby and print the players inside this Lobby so this one actually Returns the lobby for the join Lobby and it is this one so let's print like this okay so let's test all right so here are both bones this one is Code Monkey 56 and this one is Code Monkey 80. all right so on this one let's create a Lobby and yep there you go and the lobby has that code so let's use that to join so over here let's join the lobby let's put down g d m e e j let's join and if there go join and over there we can see both names of both our players all right great so with this our players now have some proper names basically what we did here is we defined some per player data like I said that can be whatever you want so it can be as simple as a player name or maybe on a game kind of likely of Legends perhaps you would store the player chosen Champion or perhaps in a game like Battlefield you could sort the player and Loadout as you saw it takes the dictionary so you can store whatever that you want and the other type of data that you can store is on the unlock itself so for example this would be the game mode which obviously you don't want one game mode per player you want just one game mode for the internal Lobby how we set that up is pretty much exactly the same way so let's go into the lobby create so up here we've got the create Lobby options and if we inspect this again over here we see the exact same thing so we've got a dictionary of our data so when creating a Lobby let's create let's put data and construct a brand new dictionary and on the dictionary let's add an entry so for the string for our key let's say our game mode and then for our data object let's construct it again we need to pass in the visibility so again pump link means it is visible to anyone outside private means only visible to this host and member own visible to people inside Lobby so for game mode you want it to be public you want it to show up in the server browser so that people can select which email they want to join so let's make it public and then for the value let's say capture the flag I should also point out that there's one final optional parameter this one is for the index and this one as you can see we've got string one through five and numbers one through five like we saw a while ago for the search these are the indexes that are using there so you could Define this game mode define this one as the S1 index and then down here when listening for lobbies you could make a filter let's put one right here so let's say you could make a new query filter create search for things and let's search for S1 which is the one that we use up here so you could search for that then for the film let's say capture the flag and finally for the operations we would go with equals so using this query filter you would basically only find all of the lobbies that have captured the flag in their game mode so for more complex use case these indexes are super useful but for now for this simple demo let's remove this and just put it just like this so just a simple game mod and that's it this is how we can assign some data whatever that we want to our brand new Lobby let's go down here into the print players and let's also print it so we've got the lobby name then let's also print in lobby let's grab the data grab the game mode and inside gravity value and also appear when we are listing the lobbies so let's see this one listening to lobbies print the name the max players and let's also print in lobby data gravity game mode and print the value okay so let's see like this all right so here let's create a Lobby and if there go it created and we can see the players in lobby with the name man Lobby and the game mode capture the flag and if we do analyst lobbies yep we also see yep there's the lobby with capture the flag the reason why it found two is because I accidentally ran create Lobby twice but yep everything is working with this we now know how to set per player data and purple data but of course over here we are only sending that data when we are creating a Lobby obviously you want to also be able to update it after the lobby has been created you want to be able to change the game mode the name and so on so let's make a function to update the game mode so let's go down here let's make a private void update game mode actually rename this to update Lobby game node okay then let's receive a string for the game mode and for updating let's go inside lobbies the instance and let's call update Lobby async this one first of all takes a Lobby ID so actually up here we're already storing our host Lobby so let's grab this one let's go down here use this list all of the dot ID and then we've got the update Lobby options so let's construct an object of that type and over here we can set the data and let's pass into brand new data so game mode and let's make a new one and let's do it like this and as usual let's put this inside a try catch so a try catch okay so we update lobby with this ID and we're going to modify the game mode then let's print the players which is going to print the brand new game mode although it actually won't do that because if two sync issues the first one is that this Lobby object this is a class but this does not get updated automatically instead you need to pretty much get the one that is returned from the lobby service so when updating this returns a Lobby so let's update our host lobby with one that we receive here so let's add this one into this one and actually this one is a weightable so let's await an async so like this when we print we should be able to see the updated game mode so here we are and if we create a Lobby if there go Capture the Flag okay great now let's update in lobby game mode let's say that match and if there you go with it update okay great one more thing if you have multiple pieces of data over here you only need to assign the ones that you want to update so for example let's go up here when we create a Lobby let's create a new piece of data so let's say the map then the same thing and you that object let's also make it public and let's say we are on Dust two okay so we have a map and then down here when updating the EM mode we only want to update the game mode so when printing let's also print the map and make sure that the map still exists so Lobby data let's pick up the map and the value okay so let's see this so here if we create a Lobby and yep there you go capture the flag on this too okay makes sense now let's update in lobby game mode let's put it on Conquest and if there go the game mode did update but the map did not update so basically over here when updating you don't need to include every single piece of data you only need to include the things that you want to modify okay so it looks like it's working but like I said there's another sneaky issue here let's do a quick log to see the lobby data all the time so let's go on our update let's actually print so we don't want to see host lobby but also let's say the join Lobby so we have this one and when the host Lobby changes it's over here when you set it let's set the join Lobby equals the host Lobby again we just want to keep a reference of the lobby that we just joined so on this one when we update the host Lobby let's also put this one equals that one and then over here let's say the joined by code on this one when you join the lobby let's also update that so let's rename this one to lobby and then put you in lobby equals this Lobby all right so we have this now on the print Players let's actually make another version of this function so print players with no parameters and we're just going to call Print players and pass in the join Lobby then let's just make this a command just so we can test it out okay so this way we can manually trigger this log so let's see what this does so over here got both builds now on this one let's create a Lobby it's going to create and join it and there you go okay so this one joined now on this one let's call join Lobby and let's pass in the code to join that Lobby let's join and if there you go it joined so we can see Code Monkey 76 and 30 so this one is 30 this one's 76 okay great and over here if I call that function print players here we can already see one issue but let's do another thing let's update in lobby game mode let's change this one to deathmatch and there you go this one seems like an updated so there you go it's got that match instead of Capture the Flag but now on this one now let's call Print players and let's see what this one does and there you go this one still says capture the flag so we updated the game mode on lobby but this player apparently has no idea that happened this player does not know that the lobby data changed in any way it still thinks that the game mode is captured to the flag instead of being Deathmatch here it is important to remember how Lobby is not a realtime connection kind of like netcode for game objects meaning it does not update automatically in order to update anything like the game mode the map or anything in order to do that you need to manually Pawn for updates so let's make another function with a simple timer so we can Pawn for updates let's make a private void handle Lobby tone for updates by the way there are obviously some rate limits when it comes to polling you cannot pull 60 times per second you can see the rate limits over here on the library documentation so for polling for updates we can do one request per second now here only to a timer and again if you like you can use a coroutine for me I'm going to make another basic photo timer so a private float Lobby update timer and then down here run pretty much exact same logic so it's actually copy this directly just replace it so we're going to test this on the join Lobby and then for the lobby update timer let's replace all of these so this one and this one now for the lobby update timer Max for this one like we saw we can only update once per second so let's put this one at 1.1 seconds just make sure it doesn't hit the limit so we do this and then the function that we're going to use is the get Lobby async and this one as you can see is going to return in lobby so let's pass in the join Lobby ID and this one returns a lobby lobby and again remember this class is not auto update so let's replace our join lobby with this Lobby and again this one is a weight so let's make this async and finally we just need to call this over here on our update okay so that's it this should be getting updates on every second so let's test so here we are let's create a Lobby and yep there it is on this one let's join the lobby use the key all right it joined the lobby we capture the flag and so on and as we saw a while ago on this one if I call the print players it would not update it would not show that this other players joined but now that we added polling this one should work so if we press enter if there go this one does see that two players are on there so now on this one if I try to update the lobby mode let's say to Deathmatch so there you go this one updates right away and on this one just need to wait for one second and now print players and if there go this one does receive the update so now this one knows that the game mode is that much alright awesome so they both got the update everything is working on the data is nicely being synchronized and of course since we can update the in lobby data so we can update the unlocking game mode we can also update all of the player that it works pretty much exactly the same way so let's go down here make another function so proud Droid let's call it update player name and receive a string for the new player name and let's also update the variable up there player name equals the new player name then we just need to go into the lobby service the instance and let's update player async not Lobby player this one takes a Lobby ID so let's use the join lobby.id then the player ID so let's go into the authentication Service grab the instance and the player ID and finally you've got the update player options and on this one let's update the data and let's put the exact same thing that we saw up here so let's see the function where we're getting the player so we get this data let's update this data let's put the player name and use our new player name once again let's put this inside a nice try catch to make sure that nothing breaks finally make this a weight and over here async and note how this one also Returns on Lobby so if you wanted to update instantly you could grab this one or since we already updated polling we can just wait one second and it won't auto update alright so let's test and see if we can update the player name so we're here let's create a Lobby then on this one let's join the lobby then on this one let's call update the player name and let's say this one is now Iron Man seven updates and it should have pulled already so if we go into print players Yep this one is now Iron Man and on this one same thing if we print players yep there go that one is Armand all right awesome so we can update both player data and Lobby data now the next important ability is the ability to Simply leave a Lobby so let's make a function for that can't just leave Lobby and then over here it's pretty simple we just go inside the lobby service the instance and just call remove player async this one takes in lobby ID so let's pass in the join lobby.id and then the player ID so let's go into the authentication Service and let's grab this player ID as usual make this a weight make this one async and let's add the try catch all right so that's it pretty simple Let's test so on this one down here let's create a Lobby then on this one up here let's join the lobby okay both players are currently inside this Lobby so print players yet both players are there now on this player let's call leave Lobby and down here let's print it again so print layers and if there you go that player didn't leave okay great now this function as you can see takes an ID for the player if it is this player ID then obviously display leaves but if this code is running on the host then essentially with this you can kick some players so let's make a function to try that out so private void let's call it kick player then over here on let's do the exact same thing and let's just click the second player so in here let's go into the join Lobby let's grab the players and let's take the second player since the first one is going to be the host so let's do it just like this okay so let's test so down here let's create a new Lobby then on this one let's join it okay so both are currently inside now on this one let's kick the other player and let's print the players and yep only this one is inside and also one very important thing is over here on the player that was kicked we don't have any event or anything again remember how Lobby is not a realtime connection it is all based on pulling and what happens when the player is kicked is pulling for that Lobby simply returns no basically appear when we call get Lobby async the amount of data that we get in this Lobby object depends if we are a member or not which again goes back to the visibility options that we saw here so since this one is kicked and is no longer a member when we call this we can still see the game mode on the map but we cannot see what players are inside so if we try printing the players this one is going to be null so we're going to have a known reference here over here if I try printing the players yep there you go no reference now one thing you might be thinking right now is what happens if the host decides to leave and the answer is Lobby has automatic host migration so both players are currently inside there you go 63 and 17 yeah both are inside the same Lobby and on this one on the host let's simply leave the lobby and there you go the host left and on this one if we call Print players if there go only this one is inside and this one has now become the host if there are multiple players on the lobby then the host is chosen at random and also over here you can see an error happened that's because we still try to send a heartbeat even though we already unlocked that one so we're no longer the host now alternatively you can also manually handle host migration so let's make a function call it migrate Lobby host and to do that we do it pretty much exactly update in lobby data so we're here updating the game mode Let's actually copy all this let's go down here and we're going to call update moabi async let's just make this async and over here if we inspect the update Lobby options over here if we scroll down we can see yep we've got a host ID so this is the ID of the player that is the host of this Lobby so over here instead of modifying the game mode let's say we want to modify the host ID and for example let's make the second player of the host so let's grab the second player ID just like this alright so let's test down here let's create a Lobby then on this one let's join it and then back to this one down here on this one let's call my great Lobby host okay it did it and now for example if we try to update the lobby game mode Let's try changing this to deathmatch and up there you go we've got an error we can see this user does not have the authority to update in lobby yet another question you might have is what happens if everyone leaves the lobby and the answer is simple the lobby is automatically deleted if there is no one inside it gets deleted and if you want you can also manually delete it yourself so let's make a function delete Lobby and then this one is pretty simple just go inside the lobby service the instance and just call delete and Lobby async and this takes in lobby ID so let's pass in the join lobby.id alright that's it let's test so on this one down here I created the lobby on this one up here I joined and over here let's delete this Lobby and yep there you go it's done and as you can see we're getting errors because the lobby has been deleted all right great so these are all the abilities of the lobby tool really awesome now before I showcase my final sample let's just quickly look at pricing here is the Unity gaming Services pricing page and if we scroll down and we find Lobby so yep here it is on the left side there's a free tier and on the right side is the pay tier and as you can see as usual there's a very generous free tier foreign Lobby you have 10 gigabytes for free per month per each region group that is a pretty massive amount Lobby uses very little data so unless your game is a massive hit it will likely be completely free to you so finally here is the sample that I've built using all these features you can download this sample and inspect on the source code since you've watched this whole video you should be able to easily read all the code in the sample the main script is this one a Lobby manager and here it's got pretty much all the functions that we already saw so function to handle the lobby heartbeat one for polling get the join Lobby and so on create a Lobby so all the exact same functions that we just saw then on top of it are some UI elements that hook onto this class for example here we've got the lobbying list UI I've got a simple container inside I've got a template with the lobby name the amount of players and the game mode what account template is pretty much just a local prefab so this template this gets duplicated in order to create more or less entries there's a refresh button and a button to create a brand new Lobby here on that UI script when I click on the refresh button this one calls this function and then this function simply goes into the 11th manager and refreshes the unlocking list so this one does a Lobby query so pretty much just like we saw finds all the lobbies and then fires off an event and passes in the list of movies then the UI script over here it simply listens to that event so on the unlocking list changed so when that happens it simply goes here destroys the previous Olympics on the list and adds the new ones so as you can see it literally is just a very simple UI script built on top of all the functions that we already saw by the way you can obviously make the list auto refresh I actually made that code so over here on the unlocking manager if we scroll down into the update we are handling the refresh login list then for this one what this code does is super simple HX Affinity Services have been initialized and if the player is signed in if so again just count down a simple timer and call that function I simply come to this out because I'm running multiple Builds on one machine so that means that all of the lobby requests are coming from the exact same IP so if I were to enable auto refresh with multiple builds I would end up being rate limited since each instance would be making too many requests but in the final game yep you would use exactly this so with two builds running first it asks for the player name and then there's a button to authenticate based on what I'm doing here is you see simple trick to allow the demo to work with multiple Builds on one PC if you just authenticate automatically you won't always get the exact same player ID which then can cause issues because you cannot join the same lobby with the same ID so over here I just added some super simple logic so I can click on this button in order to edit the player name let's say this one is Iron Man by the way this input window is something that I made in a previous video so with this I can easily change the name and then when I click on authenticate it runs this function which takes the string for the player name and over here just creates an object of type initialization options and over here using the player name in order to set the profile and then it's used over here to initialize Unity services this way even when running multiple Builds on the same PC they get different player IDs since they're using different profiles again I'm doing this just for demo just make it work with multiple ambulance on the same PC unless you specifically want to implement profiles there's no need to do this in your final game okay so with both these let's authenticate and authenticate now this one up here let's create a Lobby so just click on the plus button and shows this nice UI then all of the usual settings that we saw are used for creating the lobby so over here let's edit the lobby name let's call it my fun Lobby then I can make it public or private let's make it public include any number of players so let's say five players and the mode that capture the flyover contest and just go ahead click on Create and there you go the lobby was created so now on this one if I refresh and if there you go I can see the my phone Lobby running capture the flag with one out of 5 players then by just looking here it's going to join Lobby it's just going to call this function which is going to join Lobby by ID so here just join and you have to go this is the lobby UI this one is pretty similar to the endless UI instead of having a list of obvious it just has a list of all the players now while inside the lobby I can view all the other players inside this Lobby and I cannot see a nice icon of the character that they are using again this is the custom data that you can Define I just defined something for a character so let's say on this one up here if I do want to use the Marine but on this one down here let me say I want to use a ninja so there you go I click that button it updated the player data and that was propagated to all of the players then on the host there are also some more buttons which are hidden from the clients there's this button down here which toggles the game mode so if I click on it there you go that one becomes conquest and yep that one gets the update and the other button is this one which allows me to kick a player so if I click on this and if there go that player was kicked from that Lobby alternatively I've got a button up here to leave the lobby so if I click on it I go back to the list and if we refresh we cannot find the lobby because again everybody in left lobbyism Lobby was deleted okay so as you can see all the functionality is here working on this very simple demo I can create lobbies with other ones I can search for lobbies I can also join them I can join with multiple players I can change my character I can kick some out from my Lobby I can refresh again to another one and so on so this has all the functions that we saw except being applied to a nice UI you can download the project files and maybe use this as a starting point for your next multiplier alright so that's Lobby it's a really awesome tool for managing your multiplayer lobbies as you can see it's extremely feature complete allowing you to do everything you need from a Lobby and it's all pretty easy to use like I mentioned on the UNT gaming Services tools work very well with one another so stay tuned for the next video where I will explain how it really works and how to make a multiplayer game with Lobby relay and netcode for game objects alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and I'll see you next time foreign