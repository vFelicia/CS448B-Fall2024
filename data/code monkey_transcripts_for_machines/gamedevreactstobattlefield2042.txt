so you make an interface to say that this object is interactable now another interesting thing are over here the player icons using depth of field is a very simple way to hello and welcome i'm your code monkey a professional indie game developer and here i will react and analyze a gameplay trailer i will talk about how things work behind the scenes and how you can build them in your own games you can watch a phone playlist if you want to learn more about some other games in this case we're going to be looking at the battlefield 2042 gameplay trailer from e3 2021 alright so let's hit play attention all squads the russian troops are falling back do whatever you can to secure the sectors we push them back but not far enough do not let them regroup okay so one of the first interesting things that we see is this grappling hook so the player aims roughly where they want to connect the hook fires and connects allowing the player to swing around so as for how this works there's two ways it all depends if the grappling hook is an actual moving object or not so if it is then the player simply fires the projectile and goes straight forward and then the projectile itself looks for things to attach to unlike for example that railing so that might be what they're doing but i suspect they're instead just doing a simple boxcast so a boxcast is really just a raycast from one direction so think of it as like a virtual box so it does that towards where the player is aiming and they give it a certain size so the player doesn't have to aim perfectly so here for example it will connect onto this railing around here but the player is aiming up there so the boxcast is a bit bigger just to make it easier for the player to hit their target so it does that and really just looks at the one that is closest to where the player is aiming at then for defining what exactly is an edge now sometimes that can be done automatically so it dynamically identifies all the edges but really most of the time it's really just a manual process so a level designer goes in and says that all of these things all these things are possible valid edges that the hookshot can hook onto so most of the time all this is just manually defined and then the code symbol looks for which ones are valid objects so it just identifies the closest edge then it fires the hook and really just plays an animation so it's just interpolating the hook position until it connects and then it connects and the player can pull so speaking of that on the grappling hook the swing is also quite interesting now if i had to guess i would assume the player has some control for how they shorten or elongate that hook rope so while swinging the player is shortening the rope and taking advantage of the momentum in order to pull them up then for the disconnect so here it's connected and here it disconnects so for this one either it's manual or more likely it's really automatic so it knows the player position and it knows the hook position and then simply calculates the vector and checks if that one is behind the player so it knows the fov where the player is pointing at and perhaps it's as simple as if it's behind it then you suddenly disconnect it then maybe you also take into account the momentum how fast the player is going how far along in the swing they are and so on so there's many things you can take your into account in order to make disconnect feel really seamless so you put all of that together and you've got a very interesting gadget makes me wonder just how difficult it is to make these sort of cool moves i assume it's going to be very easy then over here we also see a takedown animation over here on that one that is pretty much just a normal animation so in terms of logic this is really just a simple distance check so this player right in here it does a sphere cast to identify all the objects around a certain area then identifies an enemy player within that area and if the enemy is within range and it's in front of the player then it simply shows a button prompt in order to enable the player to press the button in order to trigger the takedown animation so in terms of logic it's really simple it's all the animation that sells it then over here we also see a massive sandstorm so a bit of a fun fact as to how these things are usually made now if you're not a game developer you might assume that this is a really complex particle effect but in reality these are likely just simple images usually effects like this one are simply made by some basic sprite sheets so you just create all those various frames and you interpolate them between frames in order to make them look really good and really what they are is really just giant quads that are constantly facing towards the camera so it looks really massive and really complex but in reality it's really just a bunch of very fancy visual trickery then over here we see the tank drop so this is going to be an interesting game mechanic essentially you can call in vehicles from anywhere as for how that works i assume the player has some sort of ipad like device so you use that to select specifically which vehicle you want to spawn and then for the position it simply looks at the player's cursor there's a rake has to identify the exact ring position where the player is looking at then perhaps for a visual they might also show a ghost visual like the one that i use in my house building system in order to identify where the tank will actually land and then it's simply a question of just spawning the tank and letting it fall down then on this shot we can see all the usual battlefield icons by the way if you find the video helpful please hit the like button it's a tiny thing but it really does help thanks so we can see the player names we can see all the objectives a bunch of airplanes so for how you would display something like this you could build a simple world space canvas that's one way that lets you use ui elements but place them directly in the world so as the players moving forward all of the elements stay on top of their position now another interesting thing are over here the player icons since this game is going for a massive scale with 128 players the screen would look really busy if all of these players had their names above them so as you can see all these dots all of them they are unique players so you can imagine just how crowded all of this would look if all of these had their names on top of them all the time so what they did is limited the ones who showed names to only the squad mates so those do show their name as well as their current health but then they also show the names of other players as long as the player is looking directly at it so on this shot right here as the tank drops down the player looks as you can see this one is not a squad mate but since it's right in front of the player's vertical it shows the name so again this is really just a simple boxcast around the player's mouse position and if it collides with other players then you expand in order to show the name the icon and so on and by the way all these gorgeous explosions that you see are also using the same technique that i mentioned a while ago for the sandstorm so over here on the big one the sparks there are some actual particle effects but for the explosion itself that is really just another sprite sheet effect if all of this were actual fire simulations and the game would really slow to a chrome so when possible always make sure you get some visual trickery instead of just trying to recreate reality stop watch out then over here these players run into the elevator so they're running and one of them pushes the button and actually close the door so this is pretty much exactly what we saw previously for the takedown animation so this player right here it's doing a sphere cast right around his position and if it identifies objects it can be interacted with then it shows the button prompt so that the player can interact with that object as for how you create an interactable object this is something that i covered in detail in a previous video so one of the best ways to do it is really just to implement an interface so you make an interface to say that this object is interactable and that way the player class doesn't even have to identify a specific button type it just knows that there's an object within range that can be interacted with and simply triggers the interface interact action so always a great way to make sure that your code is super modular and works with anything then over here on the elevator we get a nice break in order to see the ingame weapon customization so you can modify your loadout directly while playing there's no need to go into a separate menu as for how this works again it's a simple worm canvas just layered on top of the camera note how this also enables the depth of field effect so this player is really close so this one is in focus the weapon of course is also in focus but the background down there is all very blurry using depth of field is a very simple way to always bring your player's focus into one specific object then for interacting with the menu it's going to depend if the player is using either a mouse or a gamepad so if the player is using a mouse then the mouse is likely being used exactly as a mouse so all these work as simple buttons and the player just clicks in order to switch them and if the player is using a gamepad then these are likely just simple buttons activated with dpad note how this is structured in a crosslike fashion in order to perfectly emulate the dpad that you have directly on your controller as for the modifications themselves it's really just applying some visual changes to the weapon mesh and then of course changing whatever gameplay changes these mods do then another thing that i haven't mentioned yet is simply the ui it's mostly pretty standard just a bunch of icons so the more complex stuff is the mini map now making the minimap itself is pretty easy i covered it in a specific video quite a while ago now the more interesting thing are all of the areas on the map so you can see the enemy captured areas in red neutral and white and friendly and blue as for how you can handle that it can be really just playing around the texture and some pixel manipulation so you have the map texture and a bunch of textures working as masks then you simply tint the area covered in that mask with a certain color i covered something very similar a while ago when i remade the cleaning minigame from rover mechanic simulator that's exactly the kind of method that you could use to build the map with multiple areas here is the wings to drop looks really nice and it's pretty much just some very simple logic so as the player jumps you simply constantly tell the player's velocity and you check and if the y velocity is under a certain minimum so let's say the player is moving down at minus 5 meters per second if so then the first thing is you change the animations so right here note how the weapon is still in the normal position but as he falls down further and further as the velocity increases increased yep switches into the different animation and then while you're in that second state you can enable the wingsuit or the parachute deployment then over here we see the sensor on tornado so it's going to be really interesting to see how they implement this all of the players and vehicles are essentially being pulled towards the tornado now doing that in terms of logic is very simple you really just apply a force to the rigid body the tricky part is how do you implement that in such a way that it doesn't cause player frustration by being unable to control the character so in this shot the current player and this player next to him it seems like their movement speed is still perfectly normal so perhaps there's some sort of hard cut off so movement is normal until you're right inside the tornado and then you'll lose complete control and probably die after a while so it's going to be interesting to see how they implement oh uh all right so there you have it that's my analysis of the battlefield 2042 gameplay trailer i can't wait to see what more they're going to show in july i really like this modern military setting so i'm super happy that battlefield is going back to it the response to this trailer has been pretty great so let's hope the final game is awesome okay so i hope you found the video interesting and useful and learn something along the way check out the phone react playlist where i already covered a bunch of other games alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and i'll see you next time you