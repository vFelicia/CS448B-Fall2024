hello and welcome I'm your code monkey and here let's build an interesting system to track the player as they play the game this is just like the mechanic in The Legend of Zelda breath of the wild where it showed in the map where you've been I'm guessing tears of the Kingdom will have the same mechanic it's pretty easy to do and it adds a fun New mechanic to your game so it's a great addition if your game is open world or has some large levels we're going to keep track of the path and show it on a minimap and on a full map and even add the ability to keep track of both a longterm path and a shortterm path as well as some nice simple saving and loading do you want to learn how to make games I just recently published my two free complete courses the first one is for beginners and covers how to make a game starting from scratch and the second course on taking that game and making it multiplayer throughout the 17 lectures I will be teaching you how to make a game and importantly I won't be teaching you how to write good high quality clean code meaning I will not be teaching you bad practices like you see in so many tutorials the game in this course is not a throwaway demo what I'm teaching you is on the same level of quality as what I use in my own Professional Steam games you can download the center assets and the project files for any lecturing the courses you can also browse the course website and see related videos and frequently asked questions for each lecture both these courses are commonly freeing there's nothing hidden behind the paywall but I did make an optional ad free paid version so if you find the course helpful and if you can afford it then you can pick up the optional adfree version to support what I do and if you enjoy these free courses you can look at my other ones learn how to make a really awesome turnbased strategy game again with a heavy focus on writing good clean code or get my ultimate TNT overview course to learn about over 60 Unity tones and features that you might not know about okay so let's add a simple system for keeping track of where the player has been here is my demo scene I've got a simple player character that I can move around this is using the third person Controller made by unity as part of the freestyle assets I just refactored it to match my konic sound and for the character in the world over here I'm using the Cindy fantasy Kings track there's a link in the description if you want to get it so over here I can move around and on the lower right corner I have a minimap which also covers in detail in a previous video it's showing me where I'm at right now so I'm on the lower left corner of this map now the goal is as the player moves I want to be able to see the actual path the player took okay so let's begin by making the path tracker so let's go ahead and create a brand new csharp script call this the path tracker let's make a new MTM object give it the same name attach the script and reset the transform okay now here we really just need the object that we're going to track in this case it's going to be the player but we can really track anything and all we need to track is really just a position so over here let's make a serialized feel and let's make it of type transform and call it the tracker transform okay like this and here in the editor and let's just write the play reference okay so now let's think of how can we do this basically we really just need this transform position and we just need to keep track of it over time so for that let's make a simple factor three list so a private in list of vector three let's make it the path position list then let's make a private by the week and on the Wake let's initialize the list so in your list okay then for adding position to the list let's make a private void update and now here we grab the tractor transform we grab the position and we just added onto the list so the path position list let's just add this brand new position okay so just like this it is indeed tracking however obviously like this we're going to end up with way too many points if the game is running at 60fps we're going to end up with 60 points per second and all of them are likely going to be very close to another so that's very wasteful let's add a simple timer to make sure that we grab the positions much less often so up here let's make a private float let's call it the track timer then down here on the update let's count it down so down by time.com time then we check if this one is under zero if so then let's reset the timer by a certain amount so let's define a track timer Max and let's say 0.2 F so we increase the track timer by the track timer Max so 0.2f really means 200 milliseconds so with this we're going to track five times per second which should be more than good enough unless your player moves at some kind of insane speed at a regular speed this is probably going to be more than good enough so with this we are now only tracking the position five times per second but again like this if the player is standing still if so then we're still going to add positions that are all pretty much exactly the same so as another check let's just do a simple distance check let's first grab effector 3 for the last path position and for this one we go into the path position list we want the last one so that is going to be the final position on the list so let's do the count minus one okay so this is the last pass position then the effect of three for the New Path position and this one is going to be the tracker transform so tracker transform that position okay then we just do a vector 3 dot distance B between the last path position and the New Path position and you check if it's under some amount so let's define it let's call this the main path distance and let's say 0.5 units so we're only going to want to track if it is further than 5 units so over here if it is bigger than the Min path distance if this is correct if so then yep over here we are indeed going to add this position okay great presemble so with this instead of adding the position on every single update which would be 60 positions per second instead of that now we are only testing five times per second and we're only going to add if it's far enough from the last one now one thing of course since over here we are accessing the last path position on the list because this if the enlist has no positions in this section I'm going to throw an error so a super simple fix is just to initialize the list with one position so let's make a private void start and on start let's go into the path position list and let's add the tracker transform dot position and the reason why I'm doing it on certain set of wake is because over here we are essentially accessing a external reference if you want to know more about why I'm doing it like this then make sure you watch my free complete course in there I constantly talk about how you should use a way to initialize the current object and access any external references only on start satisfy over here I'm initializing the path position list on awake and then just adding it on start okay so just like this we're already Gathering all the data that we need next thing is just a proper Visual and for that we actually have several options now one approach is to build the mesh yourself just like I showcased in the drum mesh video that's one option with that you have tons of control for how exactly you want the mesh to be I did exactly that in this script which is also included in the project files it uses a dynamic mesh to draw the player position so you can inspect this script to see how I implemented that method but since I already covered that in another video let's use a different method over here let's use unity's builtin lighten render so we're here let's go and create a new object let's go into effects and let's create the online there you go this creates an object using a line Runner component let's just reset the transform like name implies this helps us draw a line which is exactly what we want over here we have all kinds of options to play around the visual we're going to do that in a little bit for now let's just leave everything on default and for the points list let's leave it all as empty then over here on our path tracker script let's add a reference into the online render so let's set another serialized field of type line render for the inline render just like this then the other turn let's drag the reference on the path tracker and let's drag a reference to the online render and now back in our script let's make a simple function to refresh the visual so private Droid call it refresh Visual and over here first thing we do is we grab the online render and before we can actually update the position list first we need to set the position count that is how we can resize the underlying data structure that the Align render uses so over here the light rendered that position count and let's put it on the path positionlist.count and afterwards we can use the function so let's go into online render and use the function called set positions this one takes multiple positions and as you can see this one takes an array whereas we're using a list so we can just take our fast position list and convert it into an array by the way obviously one quick note here it would obviously be a lot more performant to just use the array on time instead of over here using a list but just like in a normally build my own Games first I get the logic working and only then do I worry about optimization so for now using a list up here and then converting to array this is going to be more than good enough for initial version of this system okay so that's really it now we need to do is just call this function whenever the pointless changes so up here when we add it on to the start once again the refresh is going to access an external reference so we should be doing it over here on start and then over here on the update when we add new position to list let's also refresh the visual okay so with this let's test all right so here we are and if I start moving this is simultaneously working and not really working now it is working because the path is actually being built now we can't really see it but if I pause the scene and over here we select the Align object we can see yep the Align mesh is indeed being created so there you go but it's now really working simply because the visual is directly on the floor which the Minima camera does have trouble seeing so again here we have several options now one option is to leave it just like this maybe lift it up a little bit so this is actually a bit more visible but this is one option if you wanted to show the path in the main camera and not just on the minimap camera however if you want a clean over overhead view then we should probably fix this and the fix is actually super simple all we need to do is really just apply an offset on the Y that way the enlightened render will no longer be positioned directly underneath the mesh so over here when we refresh the visual let's just do some basic logic so let's Define effective 3 array for the path position array and let's go into the path positional list and convert this into an array then let's just do a simple cycle through it so we cycle through the array and on the array on this index we just set the Y onto a certain y offset so let's define a constant so let's go up to the top of the file and Define a simple private cons float for the Y offset let's put it above all the meshes so something like 30f okay so we take the path position and we simply just raise them all onto this y offset this way the visual should now be high enough so that it is visible by the minimap camera so let's try so here we are and if I start moving and this is actually working but we have some issues with actually seeing it just because it's way too thin here we cannot see that the mesh is indeed being generated correctly above the entire map so that's good but we can't really see it just because the visual so let's set that up exactly as we want it now the first thing is over here on the width so this is essentially the thickness of the line let's increase this by quite a bit so some only five units this is pretty good then my project files I have a simple texture just with a simple Circle basically I want some dots to Showcase where the player has been the only important thing over here on this texture is really just the rep mode is set to repeat if this was set the clamp which was the default it wouldn't really work so it needs to be on repeat beyond that just the normal setup it's not the Align render let's just assign the material so here I've got a material for that texture and if there you go right away we see it so all of these settings are exactly the default so just the urp material just just over here using this base map except just like this it doesn't exactly work exactly as we wanted just yet so let's play around with some of these options now by default over here the important one is the texture mode by default it's set to stretch so throughout the entire path it is only showing the texture just once and stretching it that is not what we want inside what we want is for the texture to repeat itself so over here let's swap it out for tile and there you go right away we do see some nice dashes and all we need to do is play around over here with the texture scale so you can lower this about a little bit until we get just enough dashes alright yep picks I don't like this right now if we play through the game and I run around and I go and do a little bit of path over there on the minimap we can see the correct position is correctly being recorded so let me just move a little bit all right there's a nice big path and I can bring up the map and if there you go there's a nice path with the nice dashes telling me where I've been now alternatively instead of some dots you might actually want some dashes and if so it's actually really simple it really just requires changing the texture here I have a line Dash texture it is super simple literally just half of the texture has a white pixel and half of it is fully transparent so if I use this one instead and if there go instead of dots now I got some nice dashes and I can play around this in order to get more and less dashes so as you can see it's super easy to play around the visual for the Line Runner now one extraordinary important thing is over here we are editing this while the game is playing if we stop playing right now we're going to lose these changes so before we do that let's right click on the Align render and let's copy the component now we can stop playing and Now Yep this one reset but now we can right click and paste component values and now if we play again here I am and if I start walking around and there you go the inline positions on the dashes they are being visible very nice okay great so for the next thing let's make a nice optional mechanic let's make it so that the path arrays over time and let's actually keep track of both so let's keep track of a shortterm path that shows where the player has been recently any longterm path where it shows everywhere the player has been in the entire playthrough of the game that's super simple just over here and let's make another list so we've got a path position list and let's make a complete fat position list then let's do pretty much the same thing so when initializing let's initialize both them when setting up the first one let's also add this one the tracker transform dot position then when we are adding to the path position list let's also add to this one and then for the normal path position after we add it let's just use some basic logic so let's check if the path position lists account if it is above a certain maximum so let's define here a maximum for the max path position list let's say a maximum of just 20 positions so if it is above so if it has more than 20 positions if so then let's really just remove the first one which is going to be the oldest one so the path position list and let's remove at and remove on position zero okay so that's really it super simple so here I am walking around and the path is indeed being created and let's see after I walk around enough and if there you go the path is no longer being created so as I move it is actually raising the previous position okay great now let's make a nice toggle to show both of them and actually increase the size by a little bit so first let's duplicate the visual and actually before that let's just rename this so the path tracker online renderer let's say this one is for the short path and duplicate this one and make it for the long path okay so we have two online renders and let's say that on the short path let's use the line Dash and let's also make it in a different color just to be a bit more visible maybe on a blue kind of like this okay then back in the script let's just add another reference so for the first one let's rename this so let's actually get rid of this line go into this one so over here rename or control RR let's rename this to the path line renderer and let's see if we hit this one and make the complete path line render okay these here in the editor and let's drag the reference so the short path and the long path okay then for the refreshing visual let's just refresh onto this one so we really just do the exact same logic so let's copy all this and we're going to make the same logic on the complete path render except for this one instead of the path this one is the complete path positional list so just swap out these ones and rename this one to the complete path position array we sag on through this one we update the Y offset and we set the positions okay great so both them are now being updated visually now let's just do some simple input in order to show one or the other so just for testing over here on the update let's assume if input.getkey down let's test for the testing key so here let's go into the path line renderer and let's set the enable equals not path Line run dot enabled so this is going to swap it and same thing for the other one so for the complete path Point render for this one also let's swap it and just over here in the editor let's make the short path enabled by default and long path let's disable this one okay so let's see so here we are and as I'm walking around yep I'm seeing the short path so I keep moving by a little bit all right there you go there's the short path and if I press the toggle and if there go no I see the long path okay great finally let's just add one super simple thing just some basic saving and loading now I cover that in detail in another video that video is a bit old but that process is still exactly how I handle saving and loading nowadays adding saving and loading for this mechanic is super simple over here back in our script let's just make a save object so a private class save object and inside we really just need to say both the player position and the positional list so a publicly factor three for the tracker position then let's also store and list the vector 3 for the path position list and finally the complete path position list okay so this is our save object with all the data that we need to save now let's make some save and load functions so private void save and another one private void load then on Save it's super simple and lets you set the position so let's create a new save object save object equals a new save object and inside we're going to set first of all the tracker position it's the tracker transform dot position then the path position list equals the path position list any complete equals the complete okay so we have created our save object and assigned all of the data now let's just convert this object into Json so Json utility and convert into Json this object this is going to be a string for our Json again if you don't know what I'm doing here then go watch the dedicated saving unloading video over here I'm just quickly doing it because I've already explained that in detail in the other one so we got the Json then for some simple saving let's just go into the player prefs set a string let's call it track your path and save this Json alright so that's it that's how simple it is to save now for loading it's also simple it's really just doing the opposite so let's first of all go into player prefs in order to get the string get the string with the same name track your path and let's actually make sure to write some good coin code and not use some strings so let's go up here and make a nice constant so private constraint for the player prefs path tracker okay so we have this nice content let's just use it down here just make things a bit more clean okay so we get the string this this ring for Json then just go in Json utility and load it from Json for the save object with this Json so this returns a save object save object then over here on let's just update so update the path position list the save object grab the path position list same thing for the complete path positional list let's grab this one and set this one and the only tricky thing is actually the tracker transform position for this demo of the player that I'm using it's using a character controller so I can't really teleport just by moving the transform position so I'm just going to grab the tracker transform in order to get the component of the player type and inside I have a Teleport position now again obviously this part would be different depending on what character control you're using so just going to save object and grab the tracker position alright so that's it super simple as you can see saving and loading is really easy to add so let's just add some nice testing keys so up here let's add two more nice testing ones so let's say when we press y let's do a save and another one press U let's do a load and finally let's just make the short path a bit bigger so 20 was way too tiny so let's put it on 60 just like this and finally after we load let's just make sure to refresh the visual okay so it says alright so here I am walking around and I can see that the short path is being recorded so that's great let me just walk around by a little bit all right so I've walked around for quite a bit so I can look at the map yep there's my shortterm path and yep there's my longterm path okay great now I press y for saving there you go it's saved so now let's quit the game and now let's play again here I am and I press unloading and there you go to teleports the player and if I open up the map if there go there's a shortterm path and a longterm path so our path is perfectly safe all right awesome okay so here the system is fully working as you can see it's on pretty easy this is a great mechanic to add to any game that is semiopen world or has some large levels players always like seeing where they've been and now you can easily add that to your game alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and I'll see you next time thank you