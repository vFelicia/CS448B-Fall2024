hello and welcome I'm your code monkey here's an interesting video titled learning Game Dev and why I'm glad I didn't start with unity sounds interesting so let's watch and I'll give you my thoughts from my perspective as an indie Dev who has been using Unity professionally for over 10 years I'm currently using it in my upcoming Sim game dinky Gardens and I'm still very happy with my choice of engine seven years ago 12 year old me was very bored because my parents put a 30 minute limit on video games I figured that if I could make games myself the limit wouldn't apply that's a a fun loophole I guess if your parents limit how much gameplaying you can do then yeah I guess getting started into game development I guess that could be one good way to avoid that limit if your parents ask you are you playing your game you can say nope I'm not playing I'm actually learning how to make a game so I guess that's that's one way to work this is when I decided I would learn to code I picked python because it was the only language I knew of at the time python is excellent language that a lot of people recommend personally I'm not a huge fan I hate the fact that there are no semicolons I hate the fact that there are no curly braces so personally I do not like the syntax behind python but a lot of people say it is one of the easiest languages to learn it's not really very good for game development but when you're learning really only that matters is learning how to actually run the game logic learning about game design update loops and all kinds of things and you can really learn those principles in any language so if you already know python it's not really a bad thing to start actually making games with python install The Interpreter Googled some tutorials and within a few months of using python isards or in pi game which is a graphics library for python in the last few years I've tried messing around with engines like Unity or Godot a bit and I even participated in a game Jam using Godot when I was 12 I don't even think I knew what a game engine was to this day I'm still glad I chose python over something like Unity there are a bunch of ways to get into Game Dev and in my opinion there isn't really a onesizefitsall method ultimately the ideal route depends on what you're trying to do when deciding where to start there's one major choice that a lot of people seem to forget about it's a decision of whether or not to use a game engine this is one thing that you hear quite a lot should I even use a game engine or do it from scratch on this topic my advice is super simple it is simply ask yourself do you want to make a game or do you want to make a game engine generally unless you are a genius unless you are insanely productive you cannot do both at the same time if you want to learn how to make Dimensions if you want to learn how to make some level of level code and figure out how opengl or DirectX Works they can definitely be fun that is definitely one thing that I personally I would love to learn about at some point in the future whenever I can find some time but that requires a ton of work requires a ton of effort so in general unless you are a massive outline you need to ask yourself do you want to make games or do you want to make a game engine engines come with a bunch of builtin functionality that allows you to make complex games with minimal knowledge they also handle a lot of Messier stuff that goes into rendering which is a big deal if you want to do 3D stuff yeah that's the thing I mean if you want to build your game engine from scratch then all those tunes that you probably take for granted if you use any game engine those do not exist like if you want to render a pixel on screen in unity you just create a game object and add a mesh filter and mesh renderer or a Sprite render and boom there you go you've got something on screen but if you're working on building your actual game engine you've got to go into the opengl or the DirectX library in order to figure out okay how do I render a triangle on screen then you got to figure out okay so how do I make all kinds of complex math transformations in order to figure out okay so the camera is moving from here with a certain perspective how should that triangle look and so on it is insanely complex so that is why I say either make games or make game engine you got to choose one or the other this is usually done through some layers of abstraction and you interact with that abstraction rather than using the lower level methods that things like Graphics libraries use yep again I mean if you want to render mesh on screen in unity you just drag the mesh into your project files attach it to a game object to the mesh filter and that's it everything is rendering you don't have to worry about vertices perspective camera none of that just put it physically in front of the camera and boom everything is rendered so okay mentions you help a massive amount they abstract a way of a lot of things so you don't have to worry about them if you want to get into Game Dev and your only goal is to make games then an engine is probably the right choice for you however there is a bit more to this story than there seems if this was all there was to it then I wouldn't be happy with the route I took one of the major differences in using an engine or not using one comes down to what exactly you're learning while you do learn the programming language your engine uses assuming you're not using blueprints with unreal or something you're primarily learning to use the game in this one thing that I really disagree with I mean he's not necessarily wrong like if you're making games with unity you're learning about game objects and game objects that is a Unity specific concept there's no such thing as a game object and just C sharp in general but once you are learning very hyper specific things that are specific to that game engine whilst you aren't learning that you're also learning a language that is very generic personally I have made a ton of random applications random things with csharp and my knowledge from csharp comes from using Unity so yes you won't learn quite a lot of things that are hyper focused to that specific engine but you also learn so many other skills that are so generic so applicable to literally anything I'm pretty sure that with the knowledge that I have with knowledge that I've gained from making tons of games with identity I'm pretty sure I could go work for Microsoft and work on some random software related to csharp I'm pretty sure I could do that and do quite well on the other hand if you learn to make games without an engine by using a graphics library or something similar you're spending a lot more time making your own systems I mean that kind of becomes exactly the same problem instead of working with specific game objects you're working with specific visual representations of something like opengl or DirectX so unless you're writing an assembly you're always working on some kind of layer of abstraction there's so much to learn that an engine normally does for you such as the way you store and render a world or the way you handle entities when you go this route you'll get to know your language of choice even better than if you had chosen an engine yeah I agree with that I mean if you go the low level route that definitely forces you to be hyper familiar with the actual language that you're using but again goes back to the same question do you want to make games or do you want to deeply learn a language there's no wrong answer both are personally valid depending on what exactly you want to do and you'll get much more experience that will force you to develop your problem solving skills you'll be more likely to think about how something could be made rather than whether or not there is a library or some software that does what you want there's definitely something to be said about over relying on tools like for example the unity asset store is absolutely excellent you can find tools that won't do just about anything so there there is something to be said about overlying on those tunes and not actually trying to solve the problems yourself but again that is not really related to Engine versus no engine that is related to overusing or abusing tools and just trying to build something yourself skills you get are significantly more transferable than the skills you'd get while learning to use a game engine again while working with or without a game engine that is going to involve lots of problem solving you are going to gain a lot of those skills regardless of using a game engine or not so yes some things won't be specific to that game engine but a lot of it is really just knowledge I mean for me personally I've been writing code for 25 years I started writing code by writing mirror scripts that is a completely ancient language that is not used anywhere nowadays I don't even think America exists anymore but the knowledge that I gained while I was working on that that still serves me well to this day all the problem solving all the logic cells that I gained when I was making all kinds of things all kinds of trivia games making hangman games making simple applications in order to manage a IRC channel on the knowledge that again there that is still somewhere deep in my brain that still helps me to this day remember that knowledge doesn't really get replaced it just gets built more and more on top of each other one of the things that's worth noting here is that it's also easier to go from using a graphics library or something like that to using an engine rather than the other way around uh is it though because again the whole thing it's all everything is on layer of abstraction so is it easier to go from the union layer of abstraction to let's say the opengl layer of abstraction is it is to go through that one or the other way around I would say either one is going to require learning whenever you switch to almost there's only some time you have to spend in order to learn those Tunes I don't see that as either a positive or negative that's just what happens whenever you switch tools an overwhelming majority of people who get into game development are not able to turn it into a sustainable career learning game div without engines gives you a significantly more transferable skills that that can prepare you for working in the computer science Industry again I disagree with that I mean csharp is just C sharp if you learn the language doesn't matter if you don't learn it making games or making business apps or websites if you learn the language then you learn the language it's not like if I suddenly try to making a website with ASP I would have no idea what to do I would obviously have to learn the tools in order to actually learn how to make websites but the language itself from the knowledge that I've gained that would still be very well transferable there's nothing magic about making business apps the language is the same so if you know about classes if you know about programming patterns how to write good clean code all of those skills are transferable regardless if you're making games business apps anything one example of that is how a while ago I was researching cloud and for that since I was using Azure I use csharp and again all the knowledge that I've learned in unity writing C sharp for games all that knowledge was directly applicable to making some backend csharp code not only are the working conditions better than the Game Dev industry but the pay is better as well yeah that is definitely something I mean that's one of the negatives of The Game Dev industry basically you should only become a game developer if you absolutely love it if you absolutely want to make games whereas if you're going with simply making money then definitely do not go into the game industry go into a regular boring Bank Job do some Bank software and you won't earn a lot more money but at the same time I would say it's going to be a lot less fun so personally I love making games I'm definitely going to continue regardless of the money although at the same time there is no reason why you can't do both you can definitely get a regular wellpaying software development job and then on the weekends on your time off just make some indie games just for fun so you can definitely combine both it is a lot of work but if you really like making games and you want to have a comfortable life then that is one valid option personally my seven years of experience with python that I got from using a graphics Library over an engine has landed me a job and I regularly get smaller freelance jobs that pay very well that's great that's awesome but once again that has nothing to do with choosing an engine versus not choosing an engine if you don't learn unity and essentially you'll learn C sharp there are many freelance csharp jobs available so that is an option regardless of choosing Engine versus no engine if you're interested in going with the no engine route at this point you've got a ton of options if you like python obviously there's Pi game which is what I use Pi game is good if you like pixel art and you don't have any interest in 3D stuff there's also Pi opengl if you want to get a bit lower level and get even better performance if you like Java there's llwjgl if you like Lua there's love2d if you like C plus plus there's oh that's interesting I didn't actually know there was a Lua based Game Dev Library that's interesting because Lua is more of a scripting language so I didn't know that but that is interesting Lua is really extremely versatile so that's awesome to know Python's also the most widely used language in the world after JavaScript according to the stack Overflow developer survey I'm pretty sure it has the widest variety of use cases as well it's used for web development Bots AI data science automation computer vision scraping and so much more yeah python is a great language with a lot of use case definitely true okay so that's an interesting video and there's actually apparently a sequel to it so let's see this one so I've officially learned why they always teach you to State your thesis at the end of an introduction in composition classes I figured I'd make this video to clear things up so I'll State my stance now so everyone half asleep can hear it I'm glad I personally as an individual did not use a game engine but the choice depends on the circumstance yeah again like I said a while ago if you want to make engines that's awesome make engines if you want to make games that's awesome make games there's no right or wrong answer here thankfully nowadays there's so much education so many tools you can really do anything you want to understand why I'm glad I didn't start Game Dev using engines it's important to understand my opinion on the choice itself ultimately the most important aspect of the decision of whether or not to use a game engine is your goal when making the games if your primary goal for game development is education and you're looking to get experience with problem solving and programming in general I'd highly recommend not using a game engine yep 100 agree if you want to learn just for fun you want to improve your programming skills and really deal with low level languages and lowlevel things then making your game engine is an excellent way to learn how to do all of that my reasoning is similar to why many high schools and universities like to teach Python and Pie game as opposed to having people learn programming through game engine oh is that a thing do colleges teach Python and biking that's interesting for me I went to college but I never really finished it so my experience was very strange and in high school for some reason my teacher taught us Pascal I have no idea why Pascal and why that language that's very strange but anyways also learn a little bit about csharp back in high school so that was interesting either way had no idea that Pi game was used in colleges but yeah python is an extremely versatile language so that does make sense game engines force you to interact with their abstractions when making games making games through these abstractions change the type of problems you deal with to be less like the types of problems you deal with in the majority of the rest of the software industry I can't say for a fact that I would not have the job I have now had I use game engines for game development yeah that part I sort of disagree with I mean I guess he did mention that his job he got because of python so yeah by that yeah by definition if he had no experience with python he might not have gotten that job but I'm certain that if he was looking for a job on some kind of csharp software some csharp Bank software I'm sure UNT experience would have helped or if he was working on embedded systems with C plus plus I'm sure unreal experience would have helped the entire argument about The Learning Experience aside though I'd like to mention a few other factors while still important I believe they're less important than the learning based argument first if you're looking to do 3D stuff it takes a special kind of person to want to do that without an engine I know a few people who do that but it's really not for most people yeah making 3D and low level stuff that is insanely complex sometimes people ask me in the comments what math do I need to become a game developer and my answer is usually you don't really need much you just need the basics if you know some basic trigonometry some basic Vector math if you know that then you know pretty much all the math required to make games but if you want to make low level stuff if you want to make low level Graphics then yeah that is going to require a ton of math a ton of matrixes Transformations all kinds of strange things personally I do not have the math skills to do things like those so yeah if you go that route be aware math is a huge requirement second going guys have an engine ultimately gives you more control which is great if you want to make your own framework for making a certain type of game I've personally benefited from this it's the main reason why I continue to make games without engines that is true I mean if you build your own engine you can make an engine that is perfect for exactly the type of game that you're making whereas engines like though Unity are unreal those are made to be general purpose engines those are made so that you can build literally any game using them naturally there are some benefits of making one tool that does just one job and does it extremely well one example of that is for example factorio that is an insanely complex game it is one that if they were trying to do that inside of an engine like in real or Unity if they did that they would require so many low level optimizations that would essentially become almost a custom engine which is why they went with a custom engine because they support a level of complacent like that would literally hundreds of thousands or millions of particles on screen to support that really needs a very specialized very custom thing although it is still possible to build games on this scale even using something like Unity one example is the game Dyson Sphere program which also has a massive scale and it is built with UNT I assume they've got a lot of custom multithread code to make it all work and recently Unity dots actually just hit 1.0 and with that you can build insanely performing things directly inside Unity finally for some people it's just straight up easier to not use a game engine some people find it easier to build complex systems from simple functionality rather than understanding and using other people's higher level functionality to build complex systems this one of those things where it's more like those people are lying to themselves outside you might say oh I'm much more productive working on my own thing if I fully understand the entire Tech stack I'm much more productive but usually what happens is you really just kind of caught up on building all kinds of systems from scratch and you never actually make your game so that goes back to the same thing that I've mentioned many times in this video make games are made engines you can't really do both unless you're super special telling yourself oh no I'm much better off not making an engine because I fully understand everything and I'm very productive chances are if you're thinking like that you'll probably never actually finish the game in conclusion I believe that the most valid reason for not using a game engine is for the purpose of learning aside from that there are some less common cases where someone may find working on a lower level to be a better option for most people they're probably going to want to be using an engine but you really need to take a look at the pros and cons yourself okay that's the video and it's a really interesting discussion choosing not to use an engine that is definitely a valid option I mean if you want to go for education for just learning how everything works nowadays because again remember game engines are really magic it's all religious software its own religious code if you want to really understand how those engines work in the back end then building your own engine is definitely an excellent way to do it either building your own engine or just using a low level library but in the end I would say my opinion is choose do you want to make a game or do you want to make an engine unless you are a literal genius you probably cannot do both so make your choice and there's really no wrong answer if you want to learn how to make games with unity you can watch my 10 hour free course and then the final of multiplayer course this will cover a lot of the basics and lots of stuff that I'm actually using in my upcoming Sim game thank you Gardens alright so I hope you found this interesting thank you for watching and I'll see you next time thank you