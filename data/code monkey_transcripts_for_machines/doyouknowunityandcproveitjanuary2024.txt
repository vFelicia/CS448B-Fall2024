hello and welcome I'm your Cod Mony do you know what are the minimum requirements to define a mash in code or do you know if this static variable if this one gets reset on loading a different scene or can you answer the question how many classes should your game have so can you answer these questions either way whether you answer yes or no hopefully you can learn something a while ago I built this system on my website that is something that I've wanted to do for ages basically I wrote a ton of really interesting questions and wrote some super detailed answers then I made a system which automatically every 3 days picks a brand new question to ask you can always go on to the website and see the latest question or you can log in and go to your user page and over here you can enable the question of day and this way you will get an email every time a new question is generated I think this is a pretty fun way to learn I've already enjoyed getting some of these emails myself since I wrote so many questions there's still a bunch of them that I don't remember doing so every time it's great for me to answer here let's go through the last 10 questions and see if we can learn something new by the way if you're wondering why there have been fewer videos lat that's because I'm hard at work on my C course I planning something similar to my kitchen chaos course meaning a free version then an optional paid version with some nice bonuses I still have a lot of work to do but hopefully next week I'll be able to have a video talking about my plan you can go to the link in the description and sign up if you're interested in that course and let me also mention that right now the UN assur is having the UN award sale this month I didn't make my usual asset list videos because once again I'm busy working on the course but if you need anything definitely check it out to the link in the description starting off with question number 10 what does normalizing a vector do so does it modify the XY Z to get a magnitude of one or does it invert the XY Z or does it flatten the Zed if you want pause the video and try to answer yourself normalizing is something that I do a lot so I do know that it modifies the XYZ to get a magnitude of one and yep that is indeed correct and apparently 100% of the people got it right so that's awesome basically when using movement vectors you should always normalize them before moving any object in order to make sure you get consistent movement if you don't then basically the vector will have a larger magnitude if the target is farther away and then have a small magnitude so basically it would move faster and then slower whereas if you normalize it then basically that sets the magnitude to one regardless of the size of the original vector and that way the movement will always be consistent another problem with not normalizing is simply using the input Vector directly this is something that actually quite a lot of beginners make this mistake if you just compose the input vector and the player is moving diagonally so they're pressing W and D at the same time then the input Vector is going to be 1 one and that it actually means that the character will move faster on the diagonals so for example when working on some simal character movement always make sure you normalize your movement speed so the movement is consistent this is something that I covered in detail in my controller video or within my entire complete course and this applies not just to movement but to anything so for example even when shooting bullets make sure you normalize the bullet Vector so that the bullet actually moves at a consistent speed next question what are the minimum requirements the array size in order to draw a mesh quad so you do mesh equals in new mesh then you set the vertices to something UV to something and triangles to something so what does meshon contain does it have four vertices four UVS in two triangles or is it four vertices four UVS in six triangles or is it six vertices three UVS and four triangles here again drawing Dynamic meshes is something that I've done many many times so I know this one pretty much by heart the one tricky thing is some people might answer over here this one four vertices four UVS and two triangles because that is technically true the mesh does have two triangle so you pretty much got a quad and there is one triangle and then another triangle however over here the triangle array in order to make a triangle this actually requires three points for three vertices so the correct answer is over here four vertices four UVS and six triangles and Y they is correct and it looks like quite a lot of people actually got tripped up on that one because again logically speaking it is just two triangles but over here the size of the array the triangles array that one has six in general a quad is composed of Four Points so you need four vertices and in order to place some kind of texture on those you need the same number of vertices as you need UV so also four UVS and again the triangles in order to build a triangle you need three points so that is why each logical triangle is composed of three points so for two triangles you need six values so Dynamic measures these are really awesome really useful I've used them in tons of use case look at all this this is actually one of the first things that I learned when I first started using Unity over 10 years ago and the reason was because this for the particle system that I wanted to last forever for my first game Survivor Squad I really wanted it to have persistent particles right on the floor and I wanted those to continue and stay there forever and basically made me look into how to generate a mesh dynamically so that I could sort that mesh and keep that consistently then I've also use it in conjunction my grid system in order to build some kind of mini map I've built a radar chart I made how to draw with unity and by the way with that one I also combined it with the transparent Unity window in order to make the nice overlay that I use sometimes so this the exact same thing the draw a mesh in unity so this one has tons of use case really awesome definitely make sure you learn about animic meshes and like it says down here that is one of the first things that I started when I started learning unity and the reason was because my first game Survivor Squad it required Dynamic meshes for quite a lot it required it for the persistent particle system and also of course for the line of sight next question what is the orthographic size in a2d camera so is it the units visible horizontally is the units visible vertically is it half of them horizontally or half vertically now honestly this one is one that I'm always confused with I do know that it is the vertical one but I never know if it's the units or half the units so I'm actually going to take a guess here let's say that it is the visible units and apparently I got it wrong so it half the new units Yep this one always strips me up it's kind of interesting how most people apparently thought that it was the visible horizontally basically the horizont Al size that is going to depend on whatever aspect ratio you have like it says here the aspect ratio is going to impact the horizontal size and you can do some math to calculated by simply using the camera do aspect and the orthographic size so if you have it of 70 you're going to see from minus 70 to plus 70 for total of 140 units visible the orthographic size this is the kind of thing that you use if you have a 2d camera so you either increase or decrease in order to zoom in or zoom out I made a really detailed camera system video this one is super detailed took a lot of work to make but I'm really happy with this this one it contains pretty much all the features you need in any kind of camera in both 2D and 3D and it also covered three ways of zooming a camera this was also a fun one and speaking of cameras if you're using cameras chances are you're using C machine so one confusing thing one thing that might be quite tricky to figure out is how do you modify anything in sin machine through code that is a little bit tricky because of how sin machine works but it can be done and I covered that in this video and sin machine also has a bunch of extras that make it really easy to use one of those is the C Machine confiner which makes sure that regardless of Zoom the player does not seen any more than they should next question is there a problem with this code so we've got a private void set camera follow Funk and receives a funk of vector 3 for the camera F Funk and then we are calling it with open parentheses little arrow new Vector 3 so is there something wrong with this so this has to do with funks which are delegates so is there no problem or should it be that one with return you or should it be that one and takes a vector 3 as a parameter delegates are really awesome something you definitely should learn they are extremely powerful like for example here this is the kind of code that I've used many times it's a super simple way to make the camera follow some kind of position you pass in a delegate in order to make the camera look at any kind of position and that position can be dynamic since the delegate is also going to be dynamic so in this case I know nope there are no problems with this code it is EXA like this you just do a Lambda with empty parameters and just returns effective three and yep the answer is no so that is correct although the 51 people that voted for this one this one is also technically correct what I wanted to Showcase with this option is how you don't have to include the return you can omit the return and the compiler will implicitly include it so if you just do like this this is perfectly valid code you don't need the return however if you do add it that is also not an issue like it says here the compiler automatically adds return when receiving a delegate into a funk parameter so it's not necessary but it works both ways if you've never seen this syntax before this is called a Lambda expression this is super useful super compact it's a great way for quickly defining and using some functions I use it all the time all kinds of things like for example on button clicks Funk con action are two types of delegates which can be super useful if you don't know what they are definitely go make sure you watch this video they are super useful in so many use cases so definitely make sure you learn about them and like it says here this particular pattern of setting a camera class receive a funk VOR 3 instead of a singal VOR 3 this is a super easy way to make your camera or really any object follow something that moves this is something that I use a lot in my dinky Gardians game I use it especially for the tutorial on tutorial there are a whole bunch of arrows pointing to things where the player should go and sometimes those targets AR moving like for example can be a moving dinky so for that I cannot give the tutorial Arrow I cannot give it a fix point because the target can be moving so instead for the tutorial Arrow it receives a funk of vector 3 which in turn then updates based on the dink's position next question so does this variable get reset when you load a different scene so private static and score so is it yes no or only when loading the main menu this is one thing that can trip a beginners quite a bit and the answer is no just loading a scene that does not impact static variables at all so static variables is actually a good way in order to pass data between scenes if you have some data like for example number of coins amount of money score or so on something like that that you want to pass in between scenes then using a static variable is a super simple way to do it or just pass some kind of setup data like for example in my multiplayer kitchen chaos course in this I use a static variable in order to define whether to enable the game in single player or multiplayer and pass in a bunch of player data and also like it says here related to this is you can set Unity to disable and domain reloading this actually makes compilation quite a bit faster which is really nice but it also comes at the cost of not automatically resetting static data even between playthroughs so if you define some kind of static field and you set it to some kind of data then you stop playing and you start playing again that data will persist so if you do play around with this option with domain reloading definitely make sure you understand that is going to happen Okay next question what is Json and what is it useful for so does it stand for JavaScript over node is it a programming pattern or does it stand for JavaScript object notation and it's a data format or does it stand for jumping signal over nons and it's a crypto concept Json is really awesome I'm a huge fan of it it has been so useful in so many US case so I instantly know that it's a data format it's JavaScript object notation even though it technically doesn't have anything to do with JavaScript and Y that is indeed correct and seems like most people got it right so Json is a very useful and widely used text based data format and despite the name of course it is not just using JavaScript so here in C we can use it in the end it's really just text it's human readable and easily editable and pretty much any language is going to have a ton of libraries that make it super easy to work with Json objects one of the main ways that I use it in so many ways is for doing saving and loading like what I covered in this video which I believe this video is from 2018 what I covered here is what I've been doing for saving and loading for the past 10 years and in my latest game dinky Gardens that is still exactly the same way that I handle saving and loading I create a save object and then I converted into Json and simply save that into a text file it is super simple and works perfectly then I also combine Json which is using text I combined that with some bite saving in order to save a file with the screenshot this was also a really fun one and another place where Json is you Ed quite a lot is when dealing with web services and rest apis so I've also done some research on playing around with Azure in order to make an online leaderboard or a bunch of cloudbased mechanics these were some really interesting topics to research there's a ton of interesting stuff you can do with the cloud and again most of it is going to be working with Json and also just one quick note which is what I mentioned here it's human readable and easily editable there are actually some people that think this is a problem on my various Json videos there's always someone who says okay so if you make that for Save objects doesn't that mean players can easily cheat on their saves and the answer is yep they can this is not a bug this is definitely a feature Json is intended to be easily editable usually my answer to that is don't worry about your player cheating on some kind of single player game if the player wants to cheat in order to modify their safe file to get a ton of money my answer is really just let them there's really no harm in that on the other hand if you're making something in multiplayer the simple answer is don't trust the client so if you have a multiplayer game and you have some kind of money amount then always keep that amount in the server and never actually give that authority to the player in order to Define what money they have next question the profiler is useful for is it for balancing difficulty is it for level design or is it for identifying performance bottom deck I guess it would be interesting if there was a profiler for balancing difficulty maybe something where you could see the graph when difficulty becomes really intense and then really easy that would be fun but no the profile is used for identifying performance bottlenecks and yep apparently everyone got it so basically the profile letss you see various stats related to your game either while running or even just in the editor so even if you're making just editor tools you can still use the profiler so you can view things like how much memory you are consuming how much garbage is being generated you can see how many audio or physics elements are present and importantly how long each script is taking to execute per frame so this is really an absolutely essential tool if you have any kind of performance issues if you want to see how fast your game is running this is definitely one tool you must know how to use and then if you enable theep profile you you can see specifically how long each function is taking this is honestly one of the best learning tools there are if you know how to use it that won't teach you so much especially if you try to optimize things you do some kind of change and look in the profile see did that help or did it not and same thing for garbage garbage is also something that becomes really important and by using the D profile and making all kind of changes by doing that you can see okay this function is generating garbage and now it's not but at the same time remember the saying premature optimization is the root of all evil meaning don't just try to guess what parts of your game need to be optimized perhaps there is some code that might not be optimized but does not cause any issues like for example you might have some code that is really insanely slow but it only runs once on start so it doesn't really matter and there might be another part that you think is optimized but in reality isn't so don't try to guess which parts you think are performant and which parts are not always use the profile in order to identify exactly what are the performance model nexts and then of course if you need extra performance in your game is CPU unlimited then definitely check out un dots or alternatively just the Bur in the job system remember you don't have to use entities you can use just CCU and get massive benefits by using un dots it is relatively complex but can provide some massive performance in and actually over here I need to edit this question in order to add the recently updated dos tutorial that I just made and then some more bonus tips for profiling the rendering for that you can look in the frame debugger window that will show you exactly how each frame of your game is being rendered step by step I added the lecture on the frame debugger in the last update in my ultimate unity overview course and then for profiling memory for for that you can look into the memory profile I've never actually used this one just yet but it seems really interesting how it add so much thata next question what is the equivalent to input. getet Mouse button down on the input system package so is it input system get mouse button down or is it mouse. current. left button was press this Frame or is it player input. mouse. read valuable this is definitely a bit of a tricky one so I wonder how many people got this right I'm pretty sure that it is mouse. current left button was press this Frame and if that is correct it seems like 50% the people didn't quite get it the input system really is quite a bit complex so remembering this L of code is a little bit tricky but if you think about it it actually makes sense you are accessing the mouse that is the type the mouse type then accessing the current mous the one that is currently being used then you test out the left button and you see if that one was presses frame so that is pretty much exactly the same logic as what this one does so the input system is indeed quite a bit more complex but it also a lot more capable so that complexity does have some extremely useful benefits if you've never used the input system I highly recommend you use it check my tutorial on it basically I remember a few years ago when I made my game hyper Knights I wanted that game to be playable with a game pad and back then using a game pad with the Legacy input manager that was a complete nightmare that was horrible so back then I had to buy an asset in order to make it work whereas nowadays using the new input system this one is really awesome so definitely make sure you use it one of the main complaints about it is how it's a bit too complex and that is true it is quite a bit more complex but at the same time you can make it pretty much just as compact as the Legacy input manager all those extra capabilities also make it really awesome like for example adding game support is really easy and it also includes a builtin way of doing a virtual cursor for example my game d Guardians uses to make the game playable with both a mouse and keyboard as well as a game pad and then just one final note which is if you're using the Legacy input manager always remember you can always refactor your code for me personally that is exactly how I normally do it any kind of project I do in the beginning I always use the input manager just because it is so easy but then later on when it's a serious project later on I do refactor that code in order to make it use a new input system that is exactly what I do in my own projects and exactly what I taught in my kitchen chaos course next question and this is a really interesting one how many classes should your game have so should you have less than 100 at least 100 as many as needed and no more or just one so this sounds like a funny question but it really is an extremely important question and the answer should hopefully be obvious which is as many as needed and no more and Y thankfully pretty much everyone got it right so yeah there's really no set number of class G game should have there's really no number you should go for always keep in mind the ultimate goal which is to keep your code clean and organized so for example if you have 300 classes of 20 lines each and takes you 10 minutes to find what you need if so then you might have too many or if you have 50 classes with 1,000 lines each you can probably break them into several smaller classes that do one thing and one thing only again remember the main goal of any kind of clean code guidelines is really just managing complexity so that is why the answer is not a fixed number but rather as many as needed and no more if you add more than need it can become messy and if you have too little it can also become messy and the answer to this with regards to class is also the same thing with regards to functions variables or literally anything pretty much all of those those are all tools to be used in your toolbox in order to help you make better games faster so number itself doesn't really matter use as many as you need and no more now for example in my game has around 300 classes and some of those are really tiny only about 20 lines long and others are pretty massive like the player class is about 1,000 lines long that's definitely quite a bit on the longer side but everything inside that class makes sense to be in that class the more important thing is that I can find anything I want very quickly because the class are separate in ways that make sense and I have very good descriptive names and here's a quick tip on Visual Studio you can use a shortcut Control Plus comma in order to bring up a window where you can search any class by name any class or function or variable or anything this is really the shortcut that I use the most in order to move my codebase from class to class okay final question what is the position of the transform after running this code so we've got a vector 3 Target transform we're putting it on 10 0 then we're assigning the transform. position to this target position and then we go into the target position and we modify the X to 20 so after running these three lines of code where is the transform. position right now is it on 10 0 0 20 or is it unknown this is another really important thing that might trip up some beginners so let's see how many people got this right in my case I already know Target position this is a vector three which is a valid type so I already know that when assigning that to the position it is assigning a copy and afterwards modifying a completely separate copy does not affect it so in my case I do know that it is 10 0 and if that is correct and seems like about 30% of people did not think so again this something that can be quite confusing if you don't know about it if you don't know about differences between value types and reference types difference has to do with whether you are passing in something as a copy or you're passing in something as a reference in this case Vector 3 is a value type meaning when you pass in something to the position you are passing in a copy of Target position and when you later modify that Target position it does not modify the copy that the transform. position holds if you do want to modify then you need to set it again to another value like I said this is something that is quite a bit tricky so if you don't know differences between value and reference types definitely go make sure you watch this video I know myself I had tons of problems when I was a beginner because I did not understand this reference I would make some kind of change and then have no idea why something changed or something did not change all right so those are the last 10 questions on the question of the day feature again you can always find the latest one directly on the website or you can go to your user page and sign up to get emails whenever a new question is posted I hope that these questions and these detailed answers help you learn something new so thanks for watching and I'll see you next time