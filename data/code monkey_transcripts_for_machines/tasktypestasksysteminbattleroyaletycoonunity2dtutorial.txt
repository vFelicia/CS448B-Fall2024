hello and welcome I'm your code monkey and in this video we're continuing to check out the inner workings of the task system in Batam Riau tycoon we're going to add multiple task types with different parameters and different executions let's begin all right so here's the scene from the previous video we have both workers in here they are periodically requesting new tasks the test type that we have created is a simple movement the workers simply moved to the target position and when I click the mouse button a task is created with the mouse position as a target the worker grabs the task can execute it which in this case means he's going to a target position so when I click in here yep the task is created and he moves there and now he's requesting a new task ok great so that's the basics for our task system now let's set up our test code to support multiple task types the game is still in development so if you like the concept go to the same page add it to your wish list and follow so let's go into our tasks system in here and now in here we have our task class so we're going to create multiple task types by creating subclasses and here so let's make a subclass and we're going to name it move to position this task type won't contain the target position from previously and the subclass will extend the base task class which for now there is no base behavior but by extending it we can add the move to position to the task list down here since it is a task alright so that should be good for now so let's go in our game Handler and in here instead of creating a base task what we want to create is a task dot move to position which then contains the same arguments alright so that should be working let's just comment out the second worker to keep things simple and now on the worker task AI in here down here when he is executing the task instead of receiving a generic task we're going to receive a task dot move to position and let's rename this one to move to position task and rename the function to execute task move to position so now in here we have to cast this task to move to position types so as cm tasks system dot out dot move to all right so now everything is set up to use the new subtype of move to position so let's test and make sure that everything is still working exactly the same okay there's the worker he's requesting tasks and when I click it spawns the task he goes there he grabs it and waits again okay great everything is working exactly the same so now I'm here just one more thing on the task system in order to keep our code clean let's set our base task to be an abstract class abstract means that the class cannot be instantiated we want this base task class to only serve as the base for all the other task type so it should never been Senshi ated by itself by adding abstract we're going to get errors if we do try to instantiate so let's just test make sure everything still works and yeah everything is still fine okay so now let's add another task type now in here this won't be a very simple task the worker won't simply play an animation so let's make a public class call it victory because don't play a victory animation and it's of type tasks inside we have no fields since the worker doesn't need any more information other than the task type now in the worker in here we are executing the move to position task if we don't yet know but now we have a second type so we need to test what type this task is so we know how to execute it so let's test the type of the task to decide how we should handle it suddenly the current Unity csharp version does not support switching on type so the solution here isn't as clean as I would like it to be but it works so what we can do is if task is test this and not test out move to position if it is in move to position task then we executed using this function if not then the task is of type victory and we're going to cast it to victory and we need to make a new function to handle the victory and after we do let's return so we don't fall into the other cases so again this isn't very clean code but since the currency shop version does not support switching on time this is the best way to do it if you're watching this in the future and csharp seven has been out to unity you should clean up this code with a switch on time all right so let's go down here and make the execute task victory so it's a private void and inside we're going to receive the task system that has got the victory victory task so in here first of all let's simply execute the popup so we can see when this is executing and for the victory task only want to do is play the victory animation so the worker class has a function to play a victory animation and that function takes an argument which is an action that gets triggered when the animation is completed so he won't play the animation and when the animation is completed simply reset back to waiting for the next task okay so again up here we ask the test system for a task if he returns no then we simply wait and request again after 200 milliseconds if we do get a task then we test the type of that task if the task is a move to position task then we execute this function which moves them towards the target position if the task is a victory task then we execute it using this function and in this function we play the victory animation when the animation is completed it triggers this action and this action simply resets him back to waiting for the next task and so on so forth alright so now let's go into the game handler and in here we are spawning a move to position tasks on the left mouse button so let's copy this and in here switch this to the right mouse button and on the right mouse button in satisfying move to position let's spawn a victory task now the victory task is completely empty doesn't have any fields so just like that alright so we should now be able to spawn any move to position on left mouse button any victory on right mouse button so let's test alright so here's the worker and as you can see he is currently waiting for a new task and on the left mouse click I can spawn a task for him to move to a target position so if I click in here yep there you go he's executing the move to task he goes there and now he's waiting for another task and on the right mouse button if I click it won't add victory tasks and he won't play the vector animation so quick and there you go animation stops and again he's requesting a task I can also cue up tasks that won't be executed sequentially so let's say go here play the animation here animation and here goes animation I goes here plays the animation finishes goes here and he waits for a new task ok great so as you can see he's executing both different task types perfectly as he should all right now let's add the other worker just make sure everything still works with multiple workers so let's add this one in here alright so here we have both workers both of them are waiting for a new task I spawn a task to move here and he grabs now I spawn a victory and he grabs another move he grabs he goes victory and so on and as you can see I can spawn all different task types and they all get executed sequentially and both us have different executions based on the tasks time so there you have it we set up our code to easily support multiple task types which have different parameters and different executions in the next video we're going to cover how to create a nice complex task again the game is still in development so if you like the concept you're the same page add it to your wish list and phone as always you can download the project files in utilities from unity code monkey comm if you have any questions post them in the comments and I'll do my best answer them subscribe for more videos and I'll see you next time