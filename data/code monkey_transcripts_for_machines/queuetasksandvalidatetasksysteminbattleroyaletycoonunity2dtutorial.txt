hello and welcome I am your code monkey in this video we're continuing to check out the inner workings of the tasks system in Baron tycoon we're going to add support for queuing tasks let's begin all right so here's our scene so far we have a worker in here and we can spawn three different test types we can spawn a move to position task which will move the worker to a position so click yep there he goes he moves anyways alright we can spawn a victory task which will make him play simple animation so click and yep playing the animation stops now requesting and I can spawn a shell sprite and a shell cleanup task which will make the water go to the sprite position playing animation and clean up that sprite so click he goes he plays the animation and poof the sprite gets destroyed ok great now let's say I want to add a task to the system but I only want it to be executed after a certain condition that is where queue tasks come in we're going to create a shell cleanup task but only execute it after some time the game is still in development so if you like the concept go to the same page add it to your wish list and phone so let's begin by going to the tasks system and up here let's make a new class a public class and let's name it queued tasks now in the constructor so follow acute tasks we're going to receive a function and that function will contain the task validation code so in here we're going to receive a func the func type is a double yet very much like the action down here with the only difference being an action returns void and a func return something so in this case we want to return a task and we're going to call this let's say try get task func and let's store this internally all right so the queue task object receives a function which returns a task essentially this function will return a valid task only when that task can actually be executed when it cannot it won't return null so let's make a public function that won't call this internal func so in here let's make a public task that's going to be the return type and let's name it try the tasks and in here all we're going to do is return the actual try yet task phone and try to return so if it can be executed it will return a proper task if not it won't return not so this entire object is representing a queued task he receives a function which will contain the validation code and that function will return the final task when it can be completed if it cannot be completed it won't return now and the task will remain queued so now on to the task system itself first we need to store a list for our queue tasks so let's make a private list of cute tasks and we're going to name it cute task list so this list will essentially have any cute tasks must be validated before being DQ let's initialize it in the constructor just equals new yep and now we need some way to DQ our tasks so for that I'm going to use the function periodic which is part of the code monkey utilities so using code monkey dot u tones as always you can grab the utilities for free from unity code monkey comm and using the utils contains this class the function periodic now the function periodic simply execute an action every certain amount of time so it is perfect for what we want to create in here so we want to have a function that won't be executed and that function let's call it DQ tasks and we're going to execute it every 200 milliseconds all right so that's what this object is doing it is executing this function every 200 milliseconds so all let's go down here and make that function so a private void DQ the tasks this function will be called every 200 milliseconds and the reason we are doing this every 200 milliseconds is essentially to so we don't waste performance if a task cannot be executed in this frame then chances are it won't be executable in the very next frame either so there's no point in asking every single frame every 200 is fast enough to validate our cute tasks obviously this is very dependent on what kind of game you are making so on the DQ tasks function in here let's cycle through the queue task list so print let's grab the huge task here's tasks equals less I alright and now in here we are going to grab the task from the queued task dot try to the queue that task so now if the task that is returned is different from no then that means the task has been leaked you so let's add it to normal list so we do add task of this task and once this has been DQ'd let's remove it from the list so go into the task place and remove the task at position I and then lower the I since afterwards it's going to be increased alright so if the task is now so returned task is no keep it cute alright so this function goes through all of the queue tasks and grabs the ones that can be executed and add them to the normal list so in here let's just see with CMD bug just so we can do a text pop up and say be cute alright good so finally we also need a function to add a task to the queue so let's make that up here make a public void in queue times and in here and let's first of all very simply receive a cute task object and we're going to simply add it to the queue task list and as a helper function let's make another one a function that receives first of all calling key tasks and in here we're going to receive essentially what the cute has received so we found that returns a task try get task phone and here we're going to automatically create a queue task all right so this is just a humper function so we can use this instead of having to create a key task outside all right so let's go through the logic so we understand how the queue task is set up so elsewhere in our code we're going to call NQ task when we need to execute a task that has some condition that must be met before executing the func argument will contain the function that won't be responsible for testing that condition and creating the final task that is why the front returns a task object so the test system will create a task using that function now the object simply stores it and exposes a function to execute the validation func and if successful it returns a task if not it returns no and down here we have a function periodic which is triggering this function every 200 milliseconds and here we go through all of the queue tasks we grab them we try to dequeue them and the result from this will either be the final task or no if there is no then return test is now so keep it in the queue if it is not known then the task has been the queued and the task object in here can be executed so we added to normal list and remove that from the EQ task so that's the whole logic for queue tasks in the task system so now that we made all that code let's test it out so let's go into the game Handler and down here on left mouse click we are spawning the floor shells and here we are automatically creating the task so instead of simply adding the tasks we are going to NQ it to make sure that the cleanup only happens after 5 seconds so instead of using tasks system that task what we want to do is to a task system dot in queue tasks now in queue tasks as you can see we're going to use this one which takes a func as an argument so that phone let's write it in here now before we return this task in here so let's copy it down here before we return this task we want to see if five seconds past so let's do here a float for the clean of time and that time will be time dot time plus five so five seconds from when this sprite has been spawned and in here we're suddenly going to test if time that time if it is bigger than the cleanup time then this can be cleaned up so we're going to return the same task as before which is down here however if the time has not passed then we're going to return home and as you remember from how we set it up if we return home then 200 milliseconds later this function won't be triggered again and again again until it finally returns the task which happens after five seconds all right so whitey form that code is working correctly all right so here's the worker and now when I click it should immediately spawn the sprite but the worker should remain requesting a task until after five seconds and then he won't finally grab the task so let's see if that happens so click now he's waiting he's still requesting because task isn't valid and now all of a sudden yep the task has been DQ'd it is now valid to workers executing execute any weights yep great exactly we have successfully added a validation condition to our tasks before they can be executed so I can spawn multiple and as you can see he stays waiting for task since these tasks are have not been validated yet and now listen all of them are being DQ'd and now he's executing them one by one so there you have it our task system now supports queueing tasks that means we can add a task to the system even if it can't be executed at this very moment in the next video we're going to use the queue task in a realworld scenario by grabbing weapons and taking them to weapon slots but only if they are empty exactly the same logic is being used in battle round IQ again the game is still in development so if you like the concept you're the same page add it to your wish list and phone as always you can download the project files in utilities from Unity code monkey comm if you have any questions post them in the comments and I'll do my best answer them subscribe for more videos and I'll see you next time you