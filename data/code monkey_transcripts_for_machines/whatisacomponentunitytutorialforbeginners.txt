hello and welcome I'm your code monkey min this video we're going to learn what a component is and what it's used for let's begin so as you know unity was designed from the ground up to work with components you have a game object and that game object can have any number of components unity already has many default components like the sprite render the transform or the camera they are all different components in order to run your own code you can create custom components and add them to a game object to make your own custom component you simply need to create a new script so let's make a new create csharp script and let's call it my component let's drag it onto our spaceship game object and check out the code so here it is and you only created component script by default you can see that the script extends the amount of behavior class in order to add your script to a game object as a component you must extend this class the model behavior class contains the base functionality of a component in unity the default functions as you can see are start and update start runs once as soon as the object is active and before the first update and update runs every single frame so if your game is running at 60 frames per second then this update will be called 60 times per second let's test that out by putting some logs in here so let's put a log on start do a debug log and let's say start and down here debug down log let's say update let's run the code okay it's running as you can see it is constantly printing out updates and if we stop and we go all the way up here you can see before all the updates we have one start so back in our code similar to the start you have the awake but the awake runs before all the starts so appear let's make a private void awake and here do it ebook world away one big difference between the awake and start is awake runs as soon as the component is initialized regardless of whether or not the script is enabled whereas start only runs if the script is enabled so let's see that difference let's run the game and see with the script enabled you can see that we trigger an awake and then a start now let's and somehow disabled the component and run the game again and now as you can see only awake was triggered and if we enable the component there you go start is trigger now with regards to the update you have three variations the main update which we already saw gets called once every frame then we have a late update which also triggers every frame but after all of the updates and finally we have a private void fixed update which triggers at a fixed rate you can view that rate in the settings by going to edit project settings and then time and in here you can see the fixed time step which is the amount of time before each fixed update the default is once every 20 milliseconds the physic system runs on this rate so any changes you want to apply to the physics you would do inside the fixed update rather than the update so let's put on a log on all of them and see what comes out and also these functions by default they only say void but in order to keep your code clean you should also add private just to make sure your code is as clean and clear as possible so in here let's make a debug download on the update and log on the late update n a debug download on our fix update ok the game is running let's stop and if we check out the log you can see that we got multiple updates after every single update we get a late update and every once in a while every 20 milliseconds we get a fixed update all right so that's the updates now if you want to do something when the component is enabled or disabled you have on enable and on disable these get triggered when the script or the game object is enabled or disabled so let's add some logs let's test it out and as you can see everything is enabled so you trigger the enable now if I disable the game object you can see the save on is triggered now Irene able and it is enable and it also works if I disable the component trigger disable enable trigger enable these can be very useful if you have some sort of setup that you want to do on an object that you want to activate and deactivate so if you have an object out with this point your grid you would create the grid on enable and clean it up on disable all right so that's the basic functions on the model behavior component now on your component you can also expose fields to the editor so let's go up here and make for example a public and health and if we check out the editor yep there you go you can see a health value with a number in there I cannot type letters only numbers however this is a very dirty way of doing things since by making it public we are making it accessible not only to the editor but also to every other script if all we want to do is expose the film to the editor it is better to keep it private and make it serializable so make it private and do a serialized feel this way our code is nice and clean this variable is private and can only be accessed inside the script but it also shows up in the editor so as you can see still shows up in there but now our code is cleaner static fields did not show up in the editor so even if I do a public static in count max you can see that it does not show up in the editor you can expose any of the default variable types so let's copy this and expose a boolean let's also expose a string and we can also expose an enum so let's first make any Noom my enim give it option a and as you can see we have the various types exposed in the editor a boolean is just a checkbox that you can turn true or false a string you can type anything in there and our in ohm is displayed as a drop box that contains all of the enemy's values all right now let's take a look at the script execution order so let's make another script go down here make a new csharp script and call it my second opponent let's drag it onto a new game object so create an empty game object and drag my second component now by default the order in which the scripts are run is a for unity to decide but if you have a component that represents some solar system that you want to make sure it is initialized before any others you can specifically tell it to execute before let's first add some logs and see what happens if we don't give it a specific order all right let's run the code okay here in the console you can see that the first component that it's awake then the second one then the first one did it start then the second one again this was all completely designed by unity however let's say I want to run the second component before the first one in order to do that you can go into edit project settings and script execution order here you can see the scripts and when they are executed so by default every script you make is on default and unity decides when they won't run so since we want the second component to run before anything else so let's first drag the second component onto the execution order and let's drag the second component and put it above the default if we want you can also drag the first component and drag it to be after that one but it's not before the default tongue that means it won't run after the second but before any other components in the default order so let's hit apply and let's test again yep there you go first the second component triggered it's awake then the first component triggered it's awake then the second trait of the start and the first trigger they start notice how you first don't have all of the awakes and only then do you get on with the starts changing the order of the script execution only change the order for each specific function that is called so the first awake then the second awake then the first start at any second start so there you have it we learn what a component is and what it's used for we'll learn how to create our own components how they relate to monobehaviour and the default functions we can use to run our code we also learn how we can order various scripts to execute at specific times in case we have a specific order that must be respected as always you can download the project files in you somebody's from ent code monkey calm if you have any questions post them in the comments and I'll do my best answer them subscribe for more videos and I'll see you next time