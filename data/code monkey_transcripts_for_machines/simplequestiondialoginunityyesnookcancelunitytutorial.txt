hello and welcome i'm your code monkey in this video we're going to build a really simple but really useful question dialog this is excellent for asking your player confirmation on anything like for example do you really want to quit the game or really equip an item and so on the way the code is set up makes it super simple to use i've used some version of this in pretty much every single one of my steam games so let's go ahead and build it if you prefer a more guided path with stepbystep lectures then check out my complete courses learn how to make a bundler defender game using csharp just like i make my own steam games or learn how to make games internally using visual scripting or learn all about unity with the ultimate overview course which contains over 13 lectures each covering a different tool or feature of the engine to help you make better games faster i'm always available in the courses q a section answering your questions every single day so check out all the courses with the link in the description okay so here i am in my empty scene now let's begin by first of all making the ui elements so i've got my scene over here i've got the canvas so just go inside let's first create an empty game object our nice container let's name it the question dialog ui and now inside let's make another object let's make a ui an image let's name this the background and now let's expand it to fit the whole area so this one right here and hold down shift also center the pivot okay so just like that make sure everything is zero on everything and now essentially we can play around the size of the parent and automatically modifies background okay now for the sprite itself over here in my project files i've got this really nice sprite it's essentially just a square with round corners this is the same sprite that i used in making the chat bubble which is another interesting element you can easily add to your games so with that all i've got it set up here is if i go into the sprite editor over here you can see that i just drag the borders so what that means is that now on the background over here i can select and make it sliced and i can modify the pixels per unit in order to make it pretty much like that so whatever size i set now i've got some nice round corners so just a bit of fun okay so next up let's make it a dark gray and it's a bit of fun maybe add an outline and maybe also a shadow okay so there's our basic starting point now next thing we need is just some simple text so let's reclaim go into ui and we're going to make a text and we're going to use text mesh pro since it has a lot more settings so let's name the object text and then over here let's set this up in order to fit whatever we want let's put a new text and put just a whole bunch of text in there now let's also extend it to occupy the whole parent so let's put everything there now here let's select auto size in order to automatically size whatever text we give it to here and let's see what a good size would be okay so like this minimum of 12 maximum of 24 okay that looks pretty good now just up here make it nice and centered centered on everything okay for the wrapping leave it enabled so that it wraps and the overflow here yep for now let's leave it on overflow okay now just modify that a little bit just so it doesn't touch the exactly the edges so just like that and again we can still play around the parent size so as we size this if you can see yep it always matches okay so far so good next let's make our two buttons so first of all just an empty game object let's name the yes button then inside again also another ui image for the background and select the same thing but this one maybe in a green and again fit it to occupy the parent and i just play around the parent size and of course we also need some text so ui make another text okay so there's the button so just background some text now on the parent itself let's add the button component okay and here we can also use the automatic transition so just drag the background reference for a color tent for the normal column that sounds like this one so by the way here's a quick tip you can right click directly on the color in order to copy go back into the yes button for normal color let's paste it that's a normal color and then again this one tints on top of the other one so make this one in white okay good and for the how i do color once again we can copy paste this one then just make it a bit lighter and for the press color same thing just maybe darker and these two others we no longer need okay so far so good we've got the yes button so just duplicate it and next to it this is going to be no button so the no button and inside for text put it on no and then for the caller instead of green let's make it on based on reds alright so here we have our basic structure so we've got some text a simple yes button and no button alright so now let's handle the code so let's go ahead and create a new csharp script name this the question dialog ui and just attach a script onto it and let's open by the way if you find the video helpful please hit the like button it's a tiny thing but really does help thanks okay so here first let's grab all of our references to the buttons and the text so let's make a project right away and on the awake first grab the text so we need to add using tm pro since we're using text mesh pro let's define a field so text mesh pro uguy since this is a ui element let's make the text mesh pro and then just grab it and we do a transform we do a find find the text object and get component text mesh pro ugly now if you prefer you can also just make this a serialized film then drag the reference in the editor but personally i prefer this okay so next up for the button so private this will be a button which is inside using unity engine dot ui okay so we've got the button and it's going to be the yes button and then the no button so let's go the yes button equals you do a transform we find the yes button and get the component of type button same thing for the no button and yep okay so we have all of our references now let's make a function to actually show a question so public void let's name it show question and now for the parameters let's receive a string for the question text so question text and then for the yes and no let's receive actions so action which is inside using system now an action if you don't know this is a delegate i cover them in more detail in another video so go watch that if you don't know what it means essentially it lets you pass in a function as an argument so the yes action and then the action for the no action so we're going to pass in the question text and then a function that will be triggered when you press yes another one that won't be triggered when we press no so now we just assign these so first go into our text mesh pro in order to set the text to our question text and then we go into the yes button and in this case we're using the unity engine button so we need to add a listener so we go into the on click add in listener and now here as you can see it takes in a unity action so not an action now we could modify this code to receive ent actions but personally i like to work with the normal actions instead so what we can simply do is just do a new unity action and just encapsulate our action so essentially we're converting a system.action into a unity action and you can see that they have pretty much exactly the same signature so over here public delegate void dnt action as you can see no return no parameters nothing which is the exact same thing as over here on the action so public done with wide and it's just action and if you want to know how i did this i just pressed on the f12 which is the same thing as right clicking and go to definition so it goes definition and shows you where that is defined okay so that's yes and then finally for the no button when we click we trigger the no action okay so that's pretty much it so now let's test this to make sure that everything is working so over here on awake let's call show question and we're going to say do you want to do this this is our question then for the s action again let's pass in a lambda which again if you're not familiar with it then go watch the link in the description where i cover lambdas and delegates in more detail this syntax over here is in lambda which is essentially a way of defining a function directly inside some other text so here for the section let's just do the debug download yes and then pass in also on lambda for the node and for the little let's do debug log no okay that's it very simple let's see if it works and yep right away it says the question do you want to do this yes or no so if i press on yes and there you go over here on the console i can see yep i've got a yes press and no and yep i've got to know all right so everything is working now let's just expand upon this a little bit for example when we press on any of these we should hide the question so let's handle that in order to do that let's make a function to hide the question dialog so let's make a private void just call it hide and on hide we just set the game object that set active into false so we just disable the game object which automatically hides everything now all we really want is to call this just before we trigger all of our actions so in here on our add listener let's actually pass in a lambda so let's create one and essentially when we click on the button the first thing we do is we hide the question dialog and then we trigger the yes action and then same thing over here on the no so we just go and first of all we hide and then the no action now the reason why i'm first doing the hide is just in case you pass in a question that then afterwards asks another question if you instead put the hide after the s action then it would show the question it would trigger the yes action which would try to ask another question but then it would go back in here and it would hide so it would not show the second question so that is why first you hide then you trigger the yes action and let it do whatever it needs to alright so now we should be able to select one and only one answer so let's see so here do you want to do this let's say yes and there you go the question hides and you appear on the console yep we've got our yes alright so just like this we have our simple question dialogue only working now let's polish this up to make it extremely easy to use so first of all let's make the singleton pattern in order to make this super easy to use from anywhere in our code base so first up let's make a public static question dialog ui make a static instance and as always you make the get public but be set private that means that this property can only be set by this specific class and all the other ones can only get it so over here on white let's set the instance equals this okay so that's pretty much it so anywhere else in our code we can access the static instance and then we can access the public show question so now here let's just make another script let's call it testing question dialog then let's just make game object to run it and just drag it okay now let's open and in here now it's super simple to ask a question so let's make a private void update so an update lets us for if input.getkeydown so when i press the spacebar let's do get key down just so it triggers only once okay so when i press the spacebar let's go into the question dialog ui we access the static instance and then we call show question and then ask a question so for example are you sure you want to quit the game then we pass in the yes action and then we pass in the no action so now for example on the yes action in this case we could just do application application.quit so this would quit the application although in the editor it doesn't really do anything but we'll see that in a bit and then for the node then we simply do nothing so do nothing on no so by default the question automatically hides itself so there's nothing else we need to do so just like this it is working but application.quit does not do anything in the editor it only quits while you have a final build so just for testing just make sure that all this works let's just go up here using unity editor and then we can go into the editor application and we call exit play mode okay so just like this our testing should work and let's just go into the question ui remove our testing question and by default as soon as we away we set everything up and then we hide the question down and also since on hide we are setting the game object to inactive then when we show we need to set it back into active so that it actually shows up so like this there you go when you press show question it shows the game object and when you go into high then it hides the object okay so everything should be working so let's test okay so here i am nothing is visible now i press the spacebar and there you go are you sure you really want to quit the game and if i press on no then simply hides itself okay great now press spacebar again there you go there's my question press on yes and there you go it automatically stops again alright awesome now let's see just two more things so first of all in order to once again make this super easy to use anywhere else in our code we can just make this one into a prefab so we got the question dialog prefab if you want to modify any visuals just go inside modify the home prefab and then come back outside and reuse this prefab in any scenes you want so it's a very quick improvement and then also over here on the testing question dialog here's an example of what i was saying previously about how you can ask questions inside questions so you ask are you sure you want to quit the game then inside once again question dialog access the static instance and show the question and are you really sure and if you do so yep just like that we ask a question and then we ask are you really sure so this is an example for how you can show a question then another question right after that again if this seems confusing to you go watch the video on lambdas and delegates once you understand that this is really just a function then all this logic becomes pretty clear okay so let's see this code in action so here i am press the spacebar are you sure you want to quit and nope and okay everything continues once again are you sure you want to quit now let's say yes are you really sure nope and yep we're still here and are you sure you want to quit yes are you really sure yes and there you go exit all right so here you have a super easy to use question download use this whenever you want to ask the player a question like do you want to buy this item or quit the game or any question you want if you've played my steam games and you've certainly seen a window just like this one it's super easy to use and very effective if you wanted you could then expand upon this further in order to dynamically modify the size of the window based on the text amount i covered something similar to that in the tooltip video so you could definitely apply that to this you could also make it support multiple buttons so dynamically instantiate and position them so you could have a window with yes and no buttons another one with ok cancel or just ok so depending on your use case you can use this as a base and build upon it again if you're looking for a more guided path with stepbystep lectures then check out my complete courses alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and i'll see you next time