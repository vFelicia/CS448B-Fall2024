hello and welcome i'm your code monkey and here let's build a simple but really awesome item inspect system you see this kind of thing in many many games you have items or objects maybe in your inventory or just some list and you can look at the 3d object in the ui and by touching it you can also rotate the object and look at it from any angle this is actually quite easy to do it just requires one super useful and unity feature which i already covered in many videos so you can probably already guess what it is if you prefer a more guided path with stepbystep lectures then check out my complete courses learn how to make a builder defender game using csharp just like i make my own steam games or learn how to make games internally using visual scripting or learn all about unity with the ultimate overview course which contains over 13 lectures each covering a different tool or feature of the engine to help you make better games faster i'm always available in the courses q a section answering your questions every single day so check out all the courses with the link in the description alright so let's build our item inspect system over here is my starting point i have this ui which would be something like an inventory system so i just have a bunch of slots and each one of them is a button but what we're going to build here it could easily be applied to any other inventory system for example i covered a normal inventory system quite a long time ago and then i also covered the really interesting tetris inventory system in another video you can use whatever inventory system you want all you really need to know is when the player clicks to select an item or object as long as you know when that happens and you can build this system on top of that so here i've got my dummy inventory system and here is the script it's pretty simple the main thing is we're only just seeing a list of items so this is an item scriptable object if you don't know about scriptable objects they are really awesome it's a super useful way to store data in distinct assets i also cover them in detail in another video over here i'm using that scriptable object for the item definitions again this is all very simple so over here i just have two fields so one for the 2d sprite of the item and another one for the prefab which contains the 3d mesh then here in the project files i've got all my items of the instances of the scriptdown object and then over here i've got prefabs with all the 3d models as well as e2d sprites and my inventory script simply cycles through that list instantiates a template and then sets it to the image then on a button click i simply got a select item which then fires off this event so as you can see very simple now it's on top of this that we're going to build the item inspect system let's begin by making the visual so let's go into the ui so over here is my canvas i've got the inventory with background so it's in here let's create an empty game object call this the item 3d viewer then inside let's add another ui object this one let's make it a raw image so a raw image not an image you'll see why in a bit okay so now just position it somewhere around here just expand this one and size up the other one now to make this look a bit better i'm actually going to put it inside a mask okay so here it is so i've got my raw image it's inside a mask object just to make that nice round border and then behind it just a background for the background all right so now for the logic let's make a new script and just attach it to the main game object okay now over here first like i said we need to know when the item is selected in the inventory so for that we need a reference to the inventory system okay so i've got a serialized field so right here in the editor just need to drag that reference and then here we can now do a private void start and on start let's go into the dummy inventory and subscribe to the on item selected event and again this event is fired whenever i select an item so whenever i click on it so here let's verify that it's working just do a simple download so i'm running the game and as i click on this weapon and if there you go i've got the log right here so i select that one select the key select the bike and so on okay so far so good like i said you can use any inventory system you want really the only connection with the inventory system is through this event all right so now that we know when the player selects an item now let's handle spawning the 3d object now the prefab reference is stored inside the atomsmall object so over here i've got a transform for the prefab so when we select let's instantiate that just go into the adam scriptural object and essentially the prefab then for the position we don't want it to spawn on top of the regular world so let's spawn it somewhere really far away okay on a thousand thousand thousand and quaternion.identity okay now we need to keep track of the objects that we instantiate and before we spawn a new one let's destroy the previous one if it exists okay so let's test this and see if it's spawning the atom vision when i click on it by the way if you find the video helpful please hit the like button it's a tiny thing but it really does help thanks all right here we are and here's my hierarchy so nothing is spawned now i still like the key and there you go it swans the key now i select a pistol and there you go destroys the key and spawns the pistol alright awesome now let's handle the actual visual so this is the part where i use the thing that i already talked about in several previous videos you can probably already guess and yep we're going to use rendered textures if you don't know about them check out the video where i cover them in detail for that the first thing we're going to need is to set up a new camera so let's create a new camera call this the item inspect camera now for the position let's put it around a thousand a thousand a thousand we're going to see the exact position in a little bit okay right now this second camera is rendering onto the main screen so let's make our render texture so let's create a new render texture and here on the output texture we just drag it okay so now for the render texture settings over here the main one is really just the size so this will depend on how big is your item window in the final game so over here this windows about half of the resolution and i'm using a reference resolution of 1080p so if we use something like 1024 that should be more than enough okay so that's it it's assigned and now this part is why i said to make a raw image instead of an image if we go into the raw image we've got a film for the texture and we can d drag our render texture if we made it an image it would only accept the sprite so we would not be able to drag this reference i actually made a lecture in my ultimate unity overview course going through all the differences between image and raw image and the differences between texture and sprites so check out that election on the course if you want to learn more okay with this we can now test and put the camera on the perfect position here with the game running let's first spawn an item let's spawn just a normal hat then let's go into scene view let's look at the hat so just select it and i'm going to press f in order to focus on the object and now here's a quick empty tip you can move the scene camera to get it placed exactly where you want it then when you've got the perfect position you can select the item inspect camera and then you press the hotkeys control shift and f and that places the camera on the exact position in rotation as you see in camera so you go down there the camera is viewing the exact same thing as a scene camera so that's super easy whenever you want to position certain objects okay now of course the issues were in play mode so let's not lose this position so let's select the camera go into the transform copy the component leave the play mode then on the transform right click paste component values and now if we test again and we spawn an item and yet there you go the camera is indeed on the perfect position looking straight at the item all right awesome okay so just like this it's almost done we can already click on any item and we have the ability to view the 3d model in this really nice window now the only thing missing is just one more feature the ability to click on this window and rotate the object for that we're going to need to listen to some mouse events so over here in our script first let's set the using so using it's inside unity engine dot event systems and now we can implement the various interfaces to listen to those mouse events what we want here is to click and drag the mouse to move the object so the perfect one for this is the i drag handler so let's implement this interface so here it is the on drag function now let's do a quick test just in case you don't know what this does so debug.log let's just do something okay let's see so here if i just click on it you can see nothing on the console if i click and let go nothing on the console it only happens if i click and then i move a bit and there you go we've got the on drag event and it's only fired whenever i move the mouse so if i leave the mouse stable it's not actually adding more but if i move the mouse yep there you go we've got our events okay so this is perfect for what we want to do back in the code over here on this event we have a pointer event data this contains lots of data from the pointer and one of those is the delta so that's how far the mouse moved in the last frame so we can access the event data.delta and then using the mouse movement we can simply convert this movement into some object rotation so let's take our object so the item prefab that we spawned and then we're going to modify the euler angles and we're going to set it to this however if we do it directly like this it doesn't work as expected but let's try it anyway so we're going to move using the delta x and the delta y let's see and actually here it needs to be plus equals the delta is how much it moves on a performance basis so we want to constantly add that onto our euler angles so here we are there's the head and if i click and i drag and i move the mouse to the left and nope you can see it's actually moving on the y axis and if i move to the right same thing so it's moving vertically instead of horizontally and if i move vertically and yep there you go now it's rotating horizontally instead of vertical so we're only just doing the opposite that we want whenever we have some mouse x movement we want to rotate the object along the y axis and whenever we have y movement we want to rotate on the x axis so let's change that here just change use the y in here and the action here so now if i click and i move and yep there you go it is now working so it's now moving horizontally and if i go up and down yep it is moving vertically the only issue now is that it's reversed so as i move to the right it's actually rotating to the left and so on so let's reverse this so here just add a minus on both of them and let's do a final test so here we are and i can click on any item in order to select it and view it over here on the nice view then i can click on the window and drag the mouse and there you go i am rotating the object i can inspect it in any way i want so i want to see the rear end of this hat and i can do that i can select the bike and if there you go here's my nice bike 3d model and i can walk anywhere i can select this nice pistol and look anywhere it's like this smg and so on alright great so here is the system fully working and as you can see it's all pretty simple like i said you can connect this with any inventory system the only connection we have is the event that's pretty much it so you could use this with the inventory system that i made in a long time ago or the really interesting tetris inventory system or any other inventory system you have so here it is a really nice item inspect system alright hope that's useful check out these videos to learn some more thanks to these awesome patreon supporters for making these videos possible thank you for watching and i'll see you next time you