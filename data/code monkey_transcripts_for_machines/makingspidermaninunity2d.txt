hello and welcome I'm your code monkey and in this series we're going to create spiderman in unity 2d on this first video we're going to set up the basic movement and attacks let's begin all right so as a starting point I have some animations already set up I have some punch animations and some kick animations also the basic movement animations now I'm using my own custom animation system but you can set up the animations in your game using whatever animation system you prefer you could use your own custom animations or the Unity animation system the only important thing is that you expose certain functions to be able to trigger those animations so let's go into the code and see what functions we need to set up our logic alright so here's the base script and in here you can see all the various functions that we're going to use to set up our logic I can play the punch and kick animations these functions contain a direction and then some optional callbacks for when the animation is complete and when the animation actually hits I can also test which one is active and I can play either move or idle animations okay so with all of these functions we should be able to make a script to handle the logic for moving and attacking so let's go into the editor and make a new csharp script and let's name this spiderman let's drag it onto our spiderman game object which as you can see also contains the base script and this game object only contains the body which contains a mesh renderer to handle the animations and a simple shadow which is just a basic sprite alright so let's go to the code now in here let's first remove the start and update and instead make a private void away on the awake let's grab a reference to the base crib so we can access those functions so first let's go up here make a private spiderman be spiderman base and let's get that component in here game object I get component type spiderman base ok now to make sure that everything is working let's test doing a kick so to test that I'm going to use the function periodic which is part of the code monkey Tony's that you can grab for free from unity code monkey comm so I'm gonna go appear in the using code monkey value tones now the function periodic triggers an action every certain amount of time so in here I can create and in here I can give it an action than some time so the action we want to test is a kick so in order to do let's pass in a function we're going to go into the spiderman base and play the kick animation for direction let's just kick to the right side and for the comebacks and let's leave them at No all right so trigger that action every second all right so we should be able to see spiderman doing a kick every second let's see and yep there it is he's doing a kick every second which means our setup is correct and we can now use all the base functions to continue our script so let's first handle movement so in here let's do a private void handle movement and this function won't be called on our private void update here we call a no movement okay now we're going to set up movement using W a s and D so let's test for those various keys in order to test we do if input dot get key down of the key code let's say W and if it is we want to move up so let's go up here and set up some floats for the move on the X and a float for the move on the Y now if we are pressing W we want to move up so set the move Y to one app then let's do the same from the other keys all right so when we press EE we want to move on the Y on the positive on the S you move down on the a you move left and on the D you move right all right now let's create a vector3 using those floats so vector3 for the move there which won't be a new vector3 using the move X to move Y and then we normalize this Specter now in here let's do a boolean and test if we are idle and we are I don't if move x equals zero and move Y also equals 0 if both are 0 then we are either so in here we test if we are idle then we want to play the idle animations to go into the spiderman base class and play the idle animation if we are not idle then we want to move so go into the base and play the move animation towards the movement there ok so we are playing the move animation now let's also actually move the transform so for that we do transform and we increase our transform position by the movement Direction multiplied by time.deltatime and also multiplied by a speed value so we have to go up here and let's set up a private cons float for our speed and let's for that 50m okay so let's use that constant down here so increase the position by the movement Direction multiplied by our speed multiplied by time time to time this is so our movement is independent of our frame rate okay so our movement should be correctly working first we set up some floats then we assign values to those floats if the keys are oppressed we create a normalized vector three using those we test if we are I don't which happens only if both are zero if we are we play the idle animation if not we play the move animation and we move towards the move to your position so in our function we actually have a tiny issue so instead of get keyed down it should USB get clean because if you're using get key down it will only trigger on that particular frame and we want this to trigger every frame all right so it now should be working okay there's spiderman he's idle and if I move yup there you go he's moving around he's playing the animations and moving the transform and if I stop yep he stops and he stays on I don't all right great so now that our movement is working let's set up some attacks so let's first go down here and make a private point and let's call it the handle attack this function will also be called on our update after remove and all our attacks okay now we're moving with WASD and for the attack we're going to use the mouse click so inside our function let's test if input dot get mouse button down and here we're using mouse button down since we want to trigger only on that specific update we test for the left mouse button which is on index 0 if the mouse is down then let's do an attack so let's go into the spiderman base and play the punch animation now we need a direction so let's first go up here do a vector3 for the attack direction now the attack direction won't be essentially pointing towards the mouse so let's grab the mouse position for that I'm going to go into the utens class and get the mouse world position and subtract it to our transform dot position and finally normalize the whole thing okay so we now have the attack direction that's what we're going to use on our punch animation on hit let's do nothing and when the animation is complete let's go back to item Spiderman base dot play the idle animation okay so we test if the in left mouse button is down if it is we calculate the direction pointing towards the mouse and we play a punch animation using that direction when the animation is complete it goes back to being titled so let's test and see if we're playing the punch animation towards the mouse button when we click alright here's spiderman if I click as you can see there's an issue it plays the animation when we click but in the very next frame it goes back to being idle so let's go into the code and see why that's happening so here on our update every single frame we're running these two functions and on the handle movement function on every frame we are either playing the idle animation or the movement animation so those are canceling the attack animations so we want to make sure that we only call this function when we're not attacking so let's go up here and create a private in room called state that will handle our current state for the possible states we're going to have normal or attacker and let's make a private state to store our current state so on the awake we set this state to start off as normal and on our update we only want to call these functions if the state is normal so if States equals state dot normal then we want to do this if we are attacking then we don't want to trigger this so let's make some helper functions for setting the state soproud Boyd set state normal and here simply do state people state dog normal and do the same for the attack all right now down here when we attack let's set the state to attacking set state attacking okay and when the attack completes when the punch animation is completed instead of playing the idle animation let's set the state back to normal so when it finishes it goes back to normal and we can move again so let's see okay here I am and I click and yep the punch animation plays completely so I can move around my punch and he only goes back to moving Wendie punch is completed so I can punch multiple times and yep there you go okay great now the potential issue that you might see is the fact that we can only attack when the state is normal so if I spam you can see that the attack doesn't actually spam every time I click but rather only one goes back to normal now depending on what type of game you're making this could be what you want in a game like dart songs for example your attacks are meant to be heavy and not easily spammable so in that case it makes sense to wait for the attack to complete before doing another one however in the game we are making here it is meant to be more arcadey so we want our attacks to be fast and responsive so let's go back into our code now in here on our update we want to handle movement only when it's normal but we also want to test for attacks when the state is attacking that way we can't move while attacking but we can do another attack so instead of an F let's do a switch so a switch on our state now case we are on state dot normal then we test for both of these but case we are on state dot attacking then we only want to attack so this way we can only move whilst normal but we can attack once we are also in the middle of an attack so let's test okay so here I am I can move and I can attack and as you can see I don't move whilst in the middle of an attack but if I click twice really fast yep you can see then he is constantly firing the attacks this way our code is much more responsive ok so right now we have the punch animation working correctly but we aren't doing any kicks let's make it so we do a punch then a cake then a punch and so on so breaking our code down here when we're attacking before we play the punch animation let's first test if we are already punching so we're going to use that function on the base class to test that so do one if go into the base class and test is playing the punch animation now if we are currently playing the punch animation then we want to play the kick animation if we are not playing the punch animation then we want to play the punch animation so the first attack will always be a punch but if we attack again once in the middle of a punch we won't do a kick ok so here I am and if I click yep you can see that I'm doing a punch if I wait for the animation to complete and go back to normal he always does a punch but if I click twice really fast you can see that he did a punch and then a kick if I attack both yeah you can see he is switching between punching and kicking I can move around kick twice and there you go he does a punch cake punch kick alright great so we now have a nice simple combo so now let's add a impact effect down here in the textures I have a impact sprite sheet it is a very simple spreadsheet containing some basic animation of an impact effect so let's create a game object and inside let's make another game object and for the inner one we're going to call it sprite I'm going to add a sprite renderer and then also add a sprite animator this work was created in a previous video it's very simple it just receives an array of sprites and plays them sequentially so I can drag all of my sprite frames and just like that it won't play them sequentially keep it at 30 frames per second and this right when complete now the default rotation in unity is on the right side but our sprite is pointing up so let's just do a simple rotation here let's push it slightly forward and let's make this into a prefab so make a new prefab and let's call it PF impact effect let's drag it onto our prefab and like that so now we can go into the code on our spiderman class and go up here let's add a reference to the impact effect so a private transform for the PF impact five and let's make this a serialized field so we can set it in the editor and down here when we are playing the punch or kick animations again we can now use this callback right here it triggers when the animation actually reaches the impact frame and inside it receives a vector3 for the impact position so vector3 for our impact position so using that and let's spawn the impact effect on that position so in Senshi 8hour PF impact effect let's put it on the impact position for a quaternion dot identity and then let's rotate it set the Euler angles to a new vector3 since we're rotating in 2d set it to zero zero and then what's going to the Utah's class to get the angle from vector and we're going to rotate it towards the attack direction all right let's do the same thing also on our 2000 K so now let's run the code okay there's spiderman and if I punch yep you can see a nice little effect in there if I punch and kick and so on I can punch in any direction and it just has a nice simple impact effect okay great now final one let's set up the camera to actually follow our player character I'm going to use the script that we created in a previous series the camera phone script it allows me to easily set the camera following a certain position so let's first make a script for our game handler this will help us set things up let's write the game handler onto the game handler object and onto the main camera let's add the camera follow script it's not let's go into the game handle or script now in here let's add a field for our camera follow now the camera phone is included in the code monkey tomahto behaviors then let's also add a reference for our Spider Man and make both of the Sirah ice fields and on our private void awake let's set up the camera to follow spiderman so do a camera follow that setup and we're going to set it up to phone with the Spider Man position so before we do this let's go into our Spider Man and now the function to return our positions so let's go down here make a probably cuz vector3 call get position and we're simply going to return our transform down position okay so we can now go back into our game home and use spiderman that get position that is the function that won't get the camera final position and for the zoom let's just give it a static zoom so zoom at sixty all right so we should now have the camera smoothly following the player and yep there you can see the camera smoothly following our spiderman okay now since we're using the mouse to attack let's also make the camera slightly from the mouse so on the game handler in here let's go down and make a private vector3 and let's go get camera follow position and this is the function that we're going to use up here instead of directly following just spiderman so in here we want the camera to be shifted slightly towards the mouse position so first let's grab a vector3 for our mouse position which again I'm going to go into the utens class and get the mouse world position so let's calculate the vector three of spiderman two mouse deer which will be the mouse position spiderman yet position let's leave the vector with its magnitude so we're not going to normalize it and here we're going to return the spiderman that get position so the spiderman position was the direction towards the mouse multiplied by a small amount since we don't want it to be exactly at the mouse position okay so in here we are grabbing the mouse position calculating the direction from the spiderman towards the mouse then we are returning a position based on the spiderman position plus that direction to the mouse multiplied by a tiny amount so let's test and yep as you can see the camera is slightly shifted towards the mouse so I can move the player they can moves and if I'm looking in there the camera is slightly shift in there and there and there so this way we can easily move the player is always in view and I can attack and if I attack to the various sights the camera is nicely packed so there you have it we start with some basic animations and create a simple logic for our Spider Man to move an attack in the next video we're going to create some enemies and attack them as always you can download the project files and utilities from unity code monkey comm if you have any questions post them in the comments and I'll do my best answer them subscribe for more videos and I'll see you next time