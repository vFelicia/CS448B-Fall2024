00:02 - all right uh we're live
00:04 - uh
00:05 - i think
00:06 - i'm just going to assume
00:09 - that you know we're live and it's
00:11 - working
00:13 - and we see like i see that you know
00:15 - there are 81 people people watching
00:17 - right now
00:18 - uh
00:19 - assuming you know y'all can hear us
00:22 - thank you for being here and thank you
00:23 - for being here friends
00:25 - thank you so much ykay for inviting uh
00:27 - looking forward to this live stream
00:30 - yeah uh
00:32 - so let's just you know get right into it
00:34 - uh first of all did you want to
00:36 - introduce yourself and your background
00:37 - on competitive programming
00:40 - um yeah sure so hi guys my name is
00:42 - priyansh agarwal i'm pursuing an
00:44 - undergraduate degree in computer science
00:46 - uh right now i'm in third year so just
00:48 - one more year to go for until college
00:50 - ends
00:50 - apart from that i've been doing
00:52 - competitive programming for like the
00:53 - past 2.5 years
00:55 - i do have some remarkable achievements
00:56 - in that as well for example i have
00:58 - google kickstart you know global rank 6
01:00 - and india rank 1
01:02 - in the recent google kickstart rounds
01:04 - and yeah apart from that i've been
01:06 - creating a lot of content as well around
01:07 - competitive programming on my youtube
01:08 - channel
01:10 - and yeah i love teaching competitive
01:11 - programming is that
01:14 - cool
01:15 - um
01:16 - yeah i was kind of curious
01:19 - where do you think like you know that
01:20 - passion for like
01:22 - uh teaching comes from for you
01:26 - um okay so it's not like uh you know i
01:28 - had this passion for teaching for from a
01:30 - very long time uh since i started
01:32 - content creation i guess i started
01:34 - enjoying it a lot and i realized that if
01:36 - i can you know explain some concept that
01:38 - i have in my mind to somebody else
01:40 - in a beautiful way in a way that they
01:42 - can understand it uh you know that gives
01:44 - me a lot of dopamine so that's something
01:51 - do you feel like
01:53 - like is it something that runs in your
01:56 - family i mean don't worry like if this
01:58 - is a personal question but yeah i'm just
02:00 - curious yeah not not exactly like i
02:02 - don't have anybody or in my family as
02:04 - such teaching uh and yeah i mean i would
02:06 - be the first person who you know has
02:08 - even started content creation
02:13 - cool yeah i'm actually the same way uh
02:16 - but part says this man needs no
02:19 - introduction and
02:21 - yeah i guess you need no introduction
02:23 - you're already
02:24 - now on this like youtube world
02:28 - yeah that feels great to hear
02:31 - yeah
02:33 - uh and someone's asking like please
02:35 - share his channel link as well i already
02:37 - put it in the description so you should
02:39 - be able to
02:40 - yeah it's also there in the title as
02:41 - well so uh vik has tagged me as priyanka
02:44 - world so probably you can click on that
02:46 - and you'll you know be
02:47 - directed to my channel as well yep
02:51 - okay uh that's probably enough for the
02:53 - introduction so let's just get started
02:55 - um so i'm just gonna ask you kind of
02:58 - you know simply
02:59 - how should people get started with
03:01 - competitive programming
03:04 - okay so uh first of all in order to be
03:06 - uh you know able to start competitive
03:08 - programming you need to first of all
03:09 - start programming uh like you have you
03:11 - know competitive programming so
03:12 - obviously it requires programming right
03:15 - so i would suggest learning any
03:16 - programming language
03:18 - one of my favorite languages c plus plus
03:20 - some people in competitive programming
03:21 - also code in java and as well i mean
03:23 - also in you know python so i would
03:26 - suggest you know starting uh your cp
03:29 - journey by learning some programming
03:30 - language
03:31 - apart from that you'll realize with time
03:32 - is uh one thing that you realize with
03:34 - time is that competitive programming
03:36 - requires a lot of you know math stuff so
03:38 - if you're good with mathematics uh you
03:40 - know you should be good to go uh but if
03:42 - you're someone who's you know uh who
03:43 - doesn't have a lot of experience with
03:45 - mathematics i would suggest spending
03:47 - some time
03:48 - you know learning basics of number
03:49 - theory permutations combinations and
03:51 - basically in your algebra right once
03:53 - you're done with this uh when you're
03:54 - attempting a competitive programming
03:56 - problem you'll be in a very good
03:57 - position to you know
03:58 - jot down your observations in a
04:00 - mathematical form
04:01 - right uh and apart from that you should
04:03 - be like having a good typing speed i
04:04 - would say uh it's not something that is
04:06 - required initially when you're starting
04:07 - competitive programming uh but uh at one
04:10 - stage you realize uh that you know
04:12 - having a good typing speed also enables
04:14 - you to code very fast and also enables
04:16 - you to solve problems quickly because
04:18 - essentially when you're doing
04:19 - competitive programming you're given a
04:21 - bunch of problems that you need to write
04:22 - a code for uh and you know this code
04:24 - should run fast enough i mean it should
04:26 - run in a given amount of time and also
04:29 - you should be able to come up with a
04:30 - solution in a given amount of time
04:32 - right so essentially if you're you know
04:34 - coming up with a solution and able to
04:36 - code it up really very quickly and you
04:37 - know you're able to submit it before
04:38 - somebody else you're considered better
04:40 - than them uh in terms of competitive
04:42 - programming you know
04:44 - uh level
04:45 - so yeah i guess uh these are the three
04:47 - things that you should look for uh learn
04:48 - a programming language uh have some
04:50 - experience with mathematics not a lot
04:52 - and again like if you have a good typing
04:54 - speed i would say 30 wpm 30 words per
04:56 - minute or something like 40 words per
04:58 - minute uh you should be in a good
04:59 - position so yeah i hope that that
05:01 - answers your question
05:04 - yeah definitely um it's interesting that
05:07 - you mentioned math because
05:09 - i was kind of saying the same thing
05:10 - about you know coding interviews like
05:12 - math is like really helpful
05:15 - um and yeah i mean uh if uh if i were to
05:17 - put it this way uh maths is even more
05:19 - important for competitive programming
05:20 - than it is for interviews and data
05:22 - structures algorithms because if you
05:24 - look at data structures and algorithms
05:25 - you have a certain you know type of
05:27 - techniques that you can employ to solve
05:28 - a problem right so it gets kind of you
05:30 - know uh it is not very mathematics heavy
05:33 - but when you look at competitive
05:34 - programming problems they're essentially
05:36 - you know
05:37 - something like puzzles right so if
05:39 - you're if you want to solve puzzles you
05:41 - cannot be just thinking on an
05:42 - algorithmic level right you need to be
05:43 - able to you know jot down your
05:45 - observations on a pen and paper and
05:47 - that's more like you know jotting down
05:49 - some mathematical expressions so it
05:50 - becomes even more important in
05:52 - competitive programming
05:55 - yeah thank you for that and
05:57 - before we started going live you were
05:59 - mentioning how
06:02 - coding interviews and you know
06:04 - competitive programming are sort of
06:06 - related right
06:08 - uh yeah they are related so essentially
06:10 - uh if i were to put it this way uh if
06:12 - you are very good with competitive
06:13 - programming uh you have a very good
06:15 - chance of you know nailing all of these
06:17 - coding interviews
06:19 - this is primarily because when you look
06:20 - at competitive programming uh you're not
06:22 - just solving puzzle type of problems
06:24 - you're also solving algorithmic problems
06:26 - right and that is what is expected in
06:28 - most coding uh interviews they expect
06:30 - you to be able to solve algorithmic uh
06:32 - problems that you know might be
06:33 - requiring some data structures as well
06:35 - so if you look at competitive
06:37 - programming uh people are you know
06:38 - essentially solving very hard data
06:40 - structures algorithm algorithms uh
06:42 - algorithms problems in competitive
06:44 - programming
06:45 - right so i mean they are somewhat
06:47 - related if you're good with cp or you
06:48 - will be very good with dsa and
06:50 - interviews
06:51 - nice
06:53 - okay so i wanna you know keep our focus
06:55 - on like uh competitive programming in
06:57 - this one
06:58 - and there's a question that might be a
07:01 - good place to start
07:03 - uh
07:04 - how to
07:06 - get to expert from
07:08 - specialists in two months on cold forces
07:10 - so i think like the question before this
07:12 - one is like is chord forces even the
07:15 - right platform like what platforms do
07:17 - you recommend to get started
07:20 - okay so code forces is definitely not
07:22 - the first platform that you should be
07:23 - starting your competitive programming
07:25 - journey on uh i feel that if you have to
07:27 - start uh cp uh you can start on a
07:30 - platform like you know hacker rank or
07:32 - maybe hacker earth or maybe even
07:33 - geeksforgeeks and lead code right so you
07:35 - should start with a platform that is you
07:37 - know uh more rewarding uh for example if
07:39 - you look at lead code you know people
07:41 - are you know people mostly boast about
07:42 - the number of problems they sold on lead
07:44 - code people don't boast about their
07:45 - rating right uh and this is very
07:47 - different when you uh you know compare
07:49 - it to code forces uh code forces is like
07:51 - you know a competitive programming
07:53 - website wherein everybody is competing
07:55 - to you know gain their rating i mean to
07:56 - increase the rating uh so what happens
07:58 - on gold forces is that you have a rating
08:00 - system the person having the higher
08:02 - rating is considered to be at a higher
08:03 - level right uh so if you just start your
08:06 - competitive programming journey right
08:08 - from code forces what will happen is
08:09 - that you'll get really demotivated
08:11 - people who have experience over about
08:13 - two or three years in competitive
08:14 - programming uh would be you know very
08:16 - likely performing very uh you know i
08:18 - mean would be performing much better
08:20 - than you right so essentially when
08:22 - you're just starting out and if you see
08:24 - everyone performing much better than you
08:25 - uh you might get demotivated so yeah
08:28 - code forces is not the right platform to
08:29 - start uh i would suggest hacker rank
08:32 - kicks for geeks or even lead code if you
08:34 - just have to start right now
08:37 - right um
08:38 - okay and i thought you know you might be
08:41 - able to like it might be helpful for you
08:43 - to you know share your screen and maybe
08:44 - like kind of walk through the whole
08:46 - process of maybe like you know getting
08:49 - started for the beginners and then like
08:51 - you know for you to like prepare for
08:52 - like particular competitions how to get
08:55 - better and you know all of that might be
08:56 - helpful
08:58 - okay sure let's talk about some websites
09:00 - that are there on you know that are
09:02 - there for competitive program let me
09:03 - share my screen here
09:05 - give me a minute
09:07 - so i hope my screen is visible uh if you
09:08 - can confirm that yep
09:10 - i can see hopefully
09:12 - the viewers should be able to see it too
09:15 - cool can we have like a plus one in the
09:17 - chat or maybe a yes or a no in the chat
09:19 - that can confirm if my screen is visible
09:21 - yeah and then we can get started
09:23 - yeah i think we can just assume that you
09:25 - know it's visible and we can continue
09:28 - okay sure so i'll just show you some
09:29 - websites that are there for you know
09:31 - getting started first of all is hacker
09:33 - rank
09:35 - right uh so this is one website uh
09:38 - and i'll just you know uh keep opening
09:40 - some websites here uh so that uh you
09:42 - have an idea just a minute
09:46 - yeah i think this one it is
09:48 - cool so this is one website that you can
09:50 - get started at uh for competitive
09:52 - programming other one is hacker earth
09:56 - right
10:00 - and like i suggested geeks for geeks
10:04 - geeks or geeks doesn't have a lot of
10:05 - competitions as such like it doesn't
10:07 - have a lot of competitive programming
10:08 - contests uh but if you open this website
10:10 - you'll find a lot of you know
10:12 - implementations of data structures and
10:14 - algorithms so whenever you feel that you
10:16 - want to implement something uh you can
10:18 - you know refer to geeksforgeeks and
10:19 - you'll have an implementation for that
10:21 - uh other is leap code i mean lead code
10:22 - is not like a competitive programming
10:24 - website uh but this is something that
10:26 - you can you know refer to if you're
10:27 - preparing for uh coding interviews as
10:29 - well but this this can be considered
10:30 - like a good website to just start your
10:32 - problem-solving journey right these are
10:34 - the four websites which are uh i would
10:36 - say more rewarding for beginners right
10:38 - uh they don't focus a lot on
10:39 - competitions but they focus more on you
10:41 - know getting you started
10:43 - uh so these are the four websites hacker
10:45 - rank um hacker earth geeks for geeks and
10:48 - uh you know lead code
10:49 - now let's talk about websites that you
10:51 - should be referring to uh when you're
10:52 - already like at some level at some level
10:55 - in competitive programming or you've
10:56 - solved some problems uh you know uh that
10:58 - are like around competitive programming
11:00 - so the first website that you can refer
11:02 - to is like code chef then there is code
11:04 - forces and the last one is add coder
11:09 - right uh and uh what you'll notice is
11:11 - that all of these websites they have a
11:12 - certain you know uh rating system for
11:15 - example if you look at this website
11:16 - called code chef uh this is my profile
11:18 - on codechef and this is like my rating
11:20 - on coaching right the higher this number
11:22 - uh the more lev i mean uh the better i'm
11:25 - concerned uh i'm considered uh you know
11:27 - when when like my profile is shown
11:29 - right so uh this does provide you with
11:31 - some metrics for example at this rating
11:33 - which is two two zero one my global rank
11:35 - is 603 on this platform and my country
11:37 - rank is 286
11:39 - right so you might be having two types
11:41 - of you know ratings one of them is your
11:42 - current rating and the other is your
11:43 - highest rating for example it might be
11:45 - visible here the highest rating is two
11:47 - two two five
11:48 - right and mostly when you're telling
11:50 - your rating to somebody you essentially
11:51 - want to tell them that uh tell them your
11:53 - highest rate right so this is one
11:55 - platform you can uh you know uh start
11:57 - attempting problems on once you have
11:58 - some hang of problem solving uh the next
12:01 - is code forces right this is my profile
12:03 - on code forces and again this has a
12:05 - rating system like my current rating is
12:06 - nineteen hundred and twelve and my
12:08 - maximum rating is two zero eight nine
12:10 - right
12:11 - and this just shows my like rating graph
12:13 - like uh for example if i attempt a
12:14 - competitive programming contest if i
12:16 - perform well my rating would go up if i
12:18 - don't perform well my rating would go
12:20 - down right so that's where the
12:22 - competition part comes into play if you
12:23 - are performing better than people who
12:24 - are at a higher level than you your
12:26 - rating will improve if you are
12:27 - performing you know worse than the
12:29 - people who are at a lower level than you
12:31 - your rating will go down
12:33 - right
12:33 - so this does have some metrics again the
12:35 - number of problems solved your heat map
12:37 - and all of that stuff and then there is
12:39 - this third website called uh you know
12:40 - add coder uh this again has a rating
12:43 - system uh i'll have to log in for that
12:44 - let me just see if i can log in
12:47 - yeah
12:48 - so this does have a rating system i
12:50 - don't attempt a lot of problems or a lot
12:51 - of contests on itcoder
12:53 - uh but yeah this these are the three
12:55 - websites that you should be referring to
12:57 - when you have some hang of competitive
12:58 - programming
13:00 - like uh the first four are yeah go on
13:03 - yeah so just quickly you know sort of
13:06 - i guess going back to more of the
13:08 - beginner side like
13:10 - if people want to like get into math or
13:13 - you know data structures and algorithms
13:15 - are there like any particular resources
13:16 - you recommend for that
13:19 - uh for data structures and algorithms
13:21 - again i would suggest going for geeks
13:22 - for geeks the third website that i show
13:24 - you showed you for beginners uh but if
13:26 - you you know want to get into
13:27 - mathematics part of this whole domain i
13:29 - would suggest uh you know going up to
13:31 - this website called project euler
13:34 - this is one website that has like you
13:35 - know math specific mathematics specific
13:37 - problems these are not competitive
13:39 - programming problems but but some
13:41 - somewhat like mathematics puzzles so
13:43 - yeah this is one website that you can
13:44 - refer to if you want to you know get
13:46 - good at mathematics
13:49 - cool and
13:50 - i guess they can people can just like go
13:52 - through those websites and
13:54 - maybe find some problems to work on
13:55 - something like that
13:57 - yeah sure and what uh you can do yk is
14:00 - that you can probably add the links of
14:01 - these in the description after this live
14:03 - stream i can provide you with all the
14:04 - links so that should be helpful to
14:06 - navigate
14:08 - yeah sounds good um
14:11 - okay i think i'm gonna take a question
14:13 - from the audience
14:16 - is stl necessary to store in cpp
14:19 - competitive programming first of all
14:21 - what's sdo and yeah
14:24 - um yeah sure so uh this question is very
14:26 - particular to you know people coding in
14:28 - c plus so stl is supposed to be standard
14:31 - template library and this library has a
14:33 - lot of you know standard functions uh
14:36 - for example let's say you have an array
14:38 - and you want to find out the minimum in
14:39 - that array one way could be to just run
14:41 - a for loop and find the minimum another
14:43 - way could be to use some standard
14:45 - function right so this library does
14:47 - provide a lot of standard uh template
14:49 - functions and you know a lot of data
14:50 - structures as well
14:52 - so uh i mean for beginners when you're
14:54 - just starting out let's say you haven't
14:55 - done any competitive programming you
14:57 - haven't you know even started your
14:58 - programming journey
14:59 - it would not be a good idea to go for
15:01 - standard template library at this point
15:03 - but once you get a hang of it like like
15:06 - i said once you are you know uh once
15:08 - you're a little comfortable with solving
15:09 - problems and when you're going on to
15:11 - these websites like code shaft code
15:12 - forces and appcoder that would be a good
15:14 - time to you know learn about this
15:16 - because whenever you're implementing
15:17 - some logic uh for a problem uh this this
15:19 - would come in handy you would require
15:21 - lesser code and lesser you know thinking
15:23 - of your own to implement some logics
15:26 - but yeah it is necessary uh i mean uh
15:29 - stl is necessary but uh not uh for a you
15:32 - know complete begin
15:35 - thank you um
15:37 - i think the related question is like
15:39 - what programming language should people
15:40 - use for competitive programming
15:43 - right so that's like a you know a hot
15:45 - question in competitive programming uh
15:48 - everyone who's starting a meditative
15:49 - programming wants to know what's the
15:51 - best language to start
15:52 - right uh so uh i would you know answer
15:54 - it in this way that uh first of all
15:56 - there is this language called c plus
15:57 - plus this is considered to be really
15:59 - good for competitive programming uh like
16:01 - you would have seen just now the person
16:03 - who asked this doubt uh you know has
16:04 - this doubt which is very specific to c
16:06 - plus plus right so most of the resources
16:09 - that you'll find uh online and you know
16:10 - most of the discussions that you find
16:12 - online would be happening mostly in c
16:14 - plus right so it's uh it's suggested
16:16 - that you start uh your journey of
16:18 - competitive programming with c plus
16:21 - but for people who have already you know
16:22 - some experiences some other languages
16:24 - for example some people would be could
16:26 - be totally familiar with java or python
16:28 - then for these people i wouldn't
16:29 - recommend switching to c plus plus just
16:31 - for competitive program you can you know
16:33 - achieve almost similar results as in c
16:36 - plus i mean in c plus in your own
16:38 - language as in c plus plus
16:40 - so uh
16:41 - you know
16:42 - if i were to just summarize it uh go for
16:44 - c plus plus if you haven't just started
16:46 - if you haven't started anything but if
16:47 - you have already started and you are
16:49 - familiar with some language stick to it
16:51 - and i mean if you haven't done it for a
16:53 - very long time then again you can go for
16:54 - c plus
17:00 - cool um
17:02 - okay so we're getting a lot of questions
17:04 - about
17:06 - um data structures and algorithms and i
17:09 - know we just answered it but do you
17:10 - think it would make sense for you to
17:12 - like share your screen again and just
17:14 - kind of go through some of those
17:15 - websites and
17:16 - show people like like where to click and
17:19 - stuff like that
17:21 - sure you mean for data structures
17:22 - algorithms yep
17:25 - okay sure
17:30 - right i hope my screen is visible
17:33 - so again these the the websites that i
17:35 - just discussed uh that i just talked
17:37 - about these are very uh cp specific i'll
17:39 - just keep the websites that are specific
17:40 - for dsa
17:42 - right so one of them is geeksforgeeks
17:43 - like i said this is one website that you
17:45 - can refer to for any implementation of
17:47 - like any algorithm i would say any
17:49 - algorithm any data structure that you
17:50 - find online there's a very high chance
17:52 - that you will find the implementation of
17:54 - that on geeksforgeeks another website
17:56 - that you can you know refer to for just
17:59 - the implementation part is cp algorithms
18:02 - right uh this is again competitive
18:03 - programming specific sorry uh this is my
18:06 - laptop you know going sideways
18:08 - just a minute
18:09 - cool so uh
18:11 - uh just give me a minute
18:13 - let's put it aside
18:15 - right i hope that's better
18:17 - cool so cpa algorithms is one website
18:19 - that you can refer to for any
18:20 - implementation of an algorithm for
18:22 - example let's go on to something like
18:24 - algebra
18:25 - right
18:26 - and you have binary exponentiation as a
18:28 - topic here
18:29 - now you go down and you'll find the
18:30 - implementation of this algorithm here
18:33 - right similarly you can you know uh
18:35 - browse through geeksforgeeks for any
18:36 - like implementations for example this is
18:38 - like
18:39 - a section on geeksforgeeks let's open
18:41 - something like uh
18:44 - let's open something like quicksort
18:46 - right uh quicksort on doubly linked list
18:50 - right so you'll also have the logic of
18:51 - that whole algorithm and you'll also
18:53 - have the implementation here right and
18:55 - they don't just provide you with the
18:56 - best implementation they provide you
18:57 - with you know implementations that are
18:59 - not uh absolutely optimal so you can you
19:01 - know go down and you know you can
19:03 - understand it along the way for example
19:05 - uh the first implementation could be
19:07 - just order of n square the second
19:08 - implementation could be order of n log n
19:11 - right so as you go down you'll realize
19:12 - that your code is getting optimized and
19:14 - you'll also have more idea about it
19:16 - right so this is one website that you
19:17 - can refer to for algorithms and data
19:19 - structures uh for implementations of you
19:22 - know algorithms and data structures that
19:24 - are cp specific i would recommend cp
19:25 - algorithms
19:26 - and for practicing again i would
19:28 - recommend lead code this is one website
19:30 - i mean this is one website that everyone
19:31 - uses so you can you know rely on this
19:33 - website for practicing dsa
19:37 - yeah thank you for that i think you
19:40 - oh yeah uh that's that's so good uh yeah
19:43 - sure i can share it again like if you
19:44 - have to add something sure
19:47 - i think just like sharing the screen
19:49 - just in general is helpful for like
19:50 - adding more visuals
19:52 - oh sure sure you want me to share it
19:54 - like for the entire duration i can do
19:56 - that yeah yeah yeah that might actually
19:57 - make sense
19:59 - um
20:01 - anyway we have a new question here by
20:03 - the way it's been 20 minutes uh so far
20:05 - how are you feeling so far pretty much
20:08 - i'm feeling great i mean uh answering
20:10 - all of these doubts i feel you know
20:11 - privileged to be here on your channel uh
20:13 - your channel is like really huge so yeah
20:16 - feeling great up until now
20:19 - cool yeah i mean it's it's good to have
20:21 - you here and it's good to like
20:23 - um
20:24 - like virtually see all the viewers here
20:26 - too they're almost like 300 people here
20:28 - which is
20:29 - really cool that's amazing yeah
20:32 - okay so
20:33 - this question says
20:35 - i recently started learning uh dsa
20:38 - i'm getting how to implement
20:40 - uh unlike stuff but facing difficulty
20:43 - while solving problems
20:47 - okay so
20:48 - i think that's a question that everyone
20:50 - who's starting dsa or problem solving
20:52 - would ask right so let me just tell you
20:54 - that you know uh in the beginning it
20:56 - might seem really overwhelming you look
20:58 - at a problem you don't have any idea how
20:59 - to solve it but trust me with time it
21:02 - gets better once you have solved a lot
21:04 - of problems uh like in my case if i show
21:05 - you my code forces profile
21:07 - uh and this is just one website that
21:09 - i've solved so many problems on there
21:11 - are other websites that have solved a
21:12 - lot of problems on so if you look at
21:14 - this i have sold almost 1900 problems
21:17 - right so that's just huge right and i've
21:19 - been doing cp for around like i
21:21 - registered three years ago on code
21:22 - forces i've been very active ever since
21:24 - right so if you look at my initial graph
21:26 - like if you look at these few
21:27 - performances initially
21:29 - what you'll see is that my graph isn't
21:31 - going up you know from the very
21:32 - beginning right uh in this phase my
21:34 - graph is going down like my rating graph
21:36 - is going down
21:37 - right and once i have some hang of
21:39 - competitive programming you'll see that
21:41 - my graph is going up now
21:43 - right so this is something that will
21:44 - happen with almost every one of you
21:46 - initially you will you know be totally
21:48 - overwhelmed by the fact that all of
21:49 - these problems are so difficult but once
21:51 - you get the hang of it you'll realize
21:53 - that this is actually enjoyable
21:55 - once you start enjoying problem solving
21:56 - then you know i mean you would put in a
21:58 - lot of effort to learn things that you
22:00 - don't already know and that's that's
22:02 - where the growth comes in right
22:06 - so yeah if i were to answer it it's just
22:07 - about practice and experience the more
22:09 - effort you put into it the better you
22:10 - will be
22:12 - yeah i you know i actually feel the same
22:15 - way like i feel like people should start
22:17 - with like easier ones like you know like
22:19 - you were saying lead code uh hacker rank
22:21 - and even like code wars i think is
22:23 - becoming popular recently it's
22:26 - i if i understand it correctly like it's
22:28 - more for beginners
22:30 - cold wars um i haven't heard of cold
22:33 - wars as such
22:35 - yeah some something something like that
22:37 - i'll like i'll put like all that info
22:38 - into the script you know the description
22:40 - later
22:41 - um
22:42 - but i know like people people struggle
22:44 - with you know lead code mediums
22:46 - sometimes so they can just start with
22:48 - you know leak code easy like
22:50 - you know once yeah
22:52 - yeah
22:53 - exactly so like if you look at lead code
22:55 - you don't just have very difficult
22:56 - problems you know you can browse through
22:58 - and
22:59 - just select the difficulty that you're
23:00 - comfortable with right for example if
23:02 - you're comfortable with
23:03 - you know hard problems go for heart
23:05 - problems if you're comfortable with just
23:07 - easy problems then start with easy
23:09 - problems once you start getting the hang
23:10 - of it uh let's say for example you're
23:12 - solving two easy problems try including
23:14 - one medium problem into your practice
23:16 - session once you get comfortable with
23:18 - solving some medium problems include
23:20 - more medium problems so you keep
23:21 - increasing your level bit by bit
23:24 - yeah yeah i really like that approach
23:28 - uh
23:29 - okay so
23:30 - you know i'm looking at like questions
23:32 - from time to time from the audience and
23:35 - we're getting a lot of questions about
23:37 - recursion and
23:38 - dynamic programming like do you have any
23:40 - tips on those
23:43 - um
23:44 - okay sure so let's begin with the
23:46 - question first of all if you have to
23:47 - learn recursion i would recommend going
23:49 - on to youtube or you know uh yeah i mean
23:51 - go on to youtube and look look for any
23:53 - playlist that is there for recursion so
23:55 - like you uh if you look at a playlist
23:58 - you know on recursion just uh keep these
24:00 - pointers in mind the first few videos
24:02 - should just talk about how you develop
24:03 - logic
24:04 - and then there should be some videos
24:05 - that uh you know help you solve some
24:07 - problems on recursion so once you do
24:09 - this you'll realize that you've also
24:10 - understood the logic in the first part
24:12 - and then you've you know solved some
24:14 - problems on it uh i mean by taking help
24:16 - of the you know creator who's creating
24:18 - that video after that you can go on and
24:20 - solve some problems on your own and this
24:22 - way i mean this is exactly how you learn
24:23 - any topic right uh if i were to like you
24:26 - know should i give some resources for
24:28 - recursion like uh how do you want me to
24:30 - go about it
24:31 - yeah sure if you could like you know
24:34 - zero on your screen sure let me like
24:35 - open this youtube stuff and let me just
24:38 - put in recursion here i mean that is
24:40 - what i do when i have to learn anything
24:42 - for that matter
24:43 - like you know you can probably go for
24:45 - this video this has one video and this
24:47 - just says recursion in one shot so you
24:49 - can go for this video you might have
24:50 - some playlists as well for example there
24:52 - is this playlist introduction i mean
24:54 - recursion basic to advanced backtracking
24:56 - series this has like 19 videos right so
24:58 - i think you you can go for this video
25:01 - right uh for example if you look at it
25:03 - first of all it talks about some logic
25:05 - then how do you build logic
25:06 - parameterized recursion
25:08 - after that like they have some problems
25:10 - on it right a combination some
25:12 - combination some do and all of that
25:14 - so this this could be like a this would
25:16 - be like a great start i would recommend
25:17 - going for this video if that's in
25:19 - english i'm not really sure if that's uh
25:20 - this is an english or is uh or it isn't
25:22 - hindi um but yeah you can choose your
25:25 - language and you know go for that
25:32 - cool so uh yeah i think i i missed about
25:35 - the dynamic programming part uh so once
25:37 - you're done with recursion you would
25:39 - have a you know better hand at dynamic
25:41 - programming
25:42 - because dynamic programming is nothing
25:43 - but you know essentially optimizing your
25:45 - recursive codes right so again for
25:47 - dynamic programming i would uh recommend
25:49 - this channel that is there on youtube uh
25:52 - this is one by karthik arora this is
25:54 - like one place that i learned dynamic
25:56 - programming from
25:57 - so you can you know head to this
25:59 - channel and you know learn about uh
26:01 - dynamic programming
26:02 - uh so if you look at this channel this
26:04 - has like a lot of stuff on dynamic
26:06 - programming
26:07 - for example this series uh dynamic
26:09 - programming beginner to advanced then
26:11 - there are uh you know series on digit dp
26:13 - then there is a series on dp with bit
26:15 - masking right so i think this this could
26:17 - be like a one stop channel for learning
26:19 - dynamic programming
26:21 - and yeah after that if you want to solve
26:22 - some problems i would recommend going
26:24 - for this website called
26:25 - cses problem set
26:28 - right
26:32 - so you look at this dynamic programming
26:34 - section this has a lot of amazing
26:36 - problems so i would recommend solving
26:38 - the first uh at least 10 or 12 problems
26:40 - from this section uh the last few are
26:42 - kind of little difficult so if you're
26:45 - just starting out i would recommend
26:46 - trying out the first 10 or 12 problems
26:48 - but if you're already comfortable with
26:49 - dynamic programming i would recommend
26:51 - solving all of these problems
26:53 - for dynamic programming
26:59 - cool thank you thank you for sharing all
27:01 - of that and i just want to quickly
27:03 - mention you know i have videos on like
27:05 - recursion dynamic programming
27:07 - uh oh sure you can check out cs20 i mean
27:10 - that's again a great challenge
27:12 - yeah thank you for that i think you
27:13 - would be having some playlists i guess
27:15 - right
27:16 - yeah i have some players that but the
27:18 - best way to do that like is just to find
27:20 - like on youtube search people can just
27:22 - search like a schedule then i'm
27:23 - programming recursion you know
27:26 - different things
27:30 - but
27:31 - i don't wanna like talk too much about
27:33 - myself so let's
27:36 - let's see if there's let's close this
27:39 - yeah
27:42 - uh actually there's this interesting
27:44 - question
27:47 - um there are built-in data structures
27:50 - in many high-level programming languages
27:52 - so why do we need to learn it
27:55 - okay
27:56 - that's
27:57 - an interesting question so uh let's say
27:59 - i give you a problem that requires you
28:01 - to use some data structure
28:03 - for example
28:05 - which data structure should we take
28:07 - let's say you want to you know
28:09 - implement some problem in graphs right
28:11 - you might have some inbuilt
28:13 - implementation for graphs available in
28:15 - let's say java or c plus plus but now if
28:17 - you want to you know do some
28:18 - modifications in the code of the graph
28:21 - right uh you can you can't do that if
28:23 - it's already available as an inbuilt
28:25 - library right uh but if you want to
28:27 - solve some problem you might have to
28:29 - tweak in a lot of stuff there for
28:31 - example if you look at this data
28:32 - structure called segment trees right i
28:34 - don't think any language or any
28:36 - programming language any high level
28:37 - programming language has its inbuilt
28:38 - implementation
28:40 - but yeah even if they do have it you
28:42 - would essentially have to write a lot of
28:44 - code to tweak it
28:46 - right uh so yeah i think it is very
28:48 - important to you know understand how all
28:49 - of these data structures are implemented
28:51 - because at the end of the day you might
28:53 - have to you know re-implement them or
28:55 - re-implement them or you know you might
28:56 - have to make some changes in them and
28:58 - again like you know solving some
29:00 - problems that are data structures or
29:02 - algorithms uh heavy uh build up your
29:04 - problem solving skills as well so when
29:06 - you are you know working for some it's a
29:07 - big tech company and you want to
29:09 - implement some logic and they don't have
29:11 - some inbuilt implementation of that data
29:13 - structure uh you know you could you know
29:15 - write it on your own so i think that's
29:17 - something that uh something where you
29:19 - know this all comes into play
29:24 - uh
29:25 - i'm curious like when you're working on
29:27 - a competitive programming problem are
29:29 - you allowed to use like
29:31 - you know external libraries do you write
29:33 - your own libraries
29:35 - okay that's actually a very uh
29:37 - interesting question and an amazing
29:39 - question because uh like i used to be of
29:41 - this opinion when i was starting
29:42 - competitive programming that i cannot
29:44 - use any external code i cannot use any
29:45 - external library i will have to write
29:47 - everything on my own but that's not how
29:49 - it works so if i if you look at my
29:51 - github i do have this whole you know let
29:53 - me open my github
29:57 - sorry my laptop is like really far so i
29:59 - have to you know
30:00 - reach out for it
30:04 - okay so this is one website uh this is
30:06 - one like you know repository that i have
30:07 - of my own for uh some inbuilt i mean for
30:10 - some you know template codes for example
30:12 - if i go on to something like range
30:14 - queries
30:15 - right and if i go on to segment tree so
30:17 - this is the code of a segment tree right
30:19 - you look at this this is like huge so
30:22 - let's say you have a problem on code
30:23 - forces that requires you to use
30:25 - segmentry now you cannot you know
30:26 - implement that whole segmentary logic on
30:29 - your own at that very point
30:30 - right so uh having some uh you know
30:33 - template codes ready readily available
30:34 - for you
30:35 - does help
30:36 - i mean if you do if you if you feel lazy
30:38 - and you don't want to implement all of
30:39 - these codes on your own you can you know
30:41 - refer to this public repository that i
30:43 - have of my own cp templates this does
30:45 - have a lot of implementations this does
30:47 - have a have implementations of a lot of
30:48 - algorithms for example hldsm heavy light
30:51 - decomposition now you look at this code
30:53 - this is like huge you wouldn't
30:54 - essentially be you know uh coding this
30:56 - on spot
30:58 - right this is this is just insane this
31:00 - is huge
31:02 - so yeah you can use external codes and
31:04 - uh it is always preferable to use you
31:06 - know external libraries
31:08 - and external repositories to pick up
31:09 - codes from
31:16 - all right um
31:18 - yeah that that actually kind of gives me
31:21 - a lot of um kind of follow-up questions
31:23 - but
31:24 - i'm wondering like if
31:27 - if we it would make sense for us to like
31:28 - go through maybe one or two
31:30 - questions um
31:32 - i don't know like
31:33 - i'm thinking like lead code easy medium
31:36 - or hack around like something on the
31:37 - easier side so we can go through it
31:39 - quickly or
31:40 - or maybe like if
31:42 - depending on like how comfortable you
31:43 - feel we could go like
31:45 - for something more challenging too
31:47 - yeah we could go on for something
31:49 - challenging but it's just that my laptop
31:50 - is a little you know a little away from
31:52 - me so it's kind of difficult to code uh
31:54 - but yeah we can go for uh any problem
31:56 - let's let's see any problem that we have
31:58 - only could maybe or let's say we go on
32:00 - code forces yeah so let's go for problem
32:02 - set and pick up some easy problem
32:04 - because then uh you know i don't want to
32:06 - be seen as you know somebody spending a
32:08 - lot of just a lot of time of the stream
32:09 - just thinking about some problem right
32:11 - so let's pick up some
32:13 - easy problem
32:14 - 800 is supposed to be like the easiest
32:16 - level on code forces
32:18 - so
32:19 - let me just you know sort them by the
32:21 - number of submissions
32:25 - right so do you want to pick up this
32:26 - problem can we solve this problem
32:30 - yeah let's try it
32:32 - sure
32:34 - okay so let me just read through it and
32:36 - let me increase the font a little so
32:38 - that everyone can see this okay so we
32:40 - have this question one day three best
32:42 - friends this is something that i haven't
32:43 - solved already right so let's try to
32:45 - solve it on spot
32:47 - uh one day three best friends petya vasa
32:49 - and tanya i don't know how to pronounce
32:51 - that uh decide to form a team and take
32:53 - part in programming contests
32:55 - participants are usually offered several
32:56 - program
32:57 - several problems during programming
32:59 - contests
33:00 - long before the start the friends
33:02 - decided that they will implement a
33:03 - problem if at least two of them are sure
33:05 - about the solution
33:06 - right otherwise the friends won't write
33:08 - the problem solution
33:09 - the contest this contest offers n
33:11 - problems to the participants for each
33:13 - problem we know which friend is sure
33:15 - about the solution
33:16 - help the friends find the number of
33:18 - problems for which they will write a
33:20 - solution
33:21 - okay great so if you look at this
33:23 - problem uh what they're telling you is
33:24 - that you have n problems right i mean in
33:27 - this problem itself let's say you have n
33:29 - questions
33:30 - right and you have these three players
33:31 - let's call them a b and c
33:33 - so if you look at this matrix uh i mean
33:35 - these are like you know let me just show
33:37 - it to you
33:39 - okay so i haven't read the input part
33:41 - here the first line contains m n is the
33:44 - number of questions that are there in
33:45 - this problem the number of problems in
33:47 - the context then n lines contain three
33:49 - integers each right so for example if
33:52 - you look at this you know this sample
33:54 - input so this has two problems in it
33:56 - because it's written two here right and
33:58 - for each of these problems you get a
34:00 - list of three numbers
34:01 - uh for example let's say for the first
34:03 - problem you have one zero zero this just
34:05 - means that a is comfortable solving this
34:07 - problem b is not and c is not
34:10 - right similarly if you look at the
34:11 - second problem uh
34:13 - a is not comfortable solving it b is
34:15 - comfortable solving it and c is also
34:16 - comfortable solving it right in this
34:18 - problem what they're asking you is to
34:20 - you know tell them the number of
34:21 - problems
34:22 - uh that you know they will write a
34:23 - solution to and there's a condition to
34:25 - this whole thing the condition is that
34:27 - if you have to write a solution for a
34:28 - problem at least two of the three people
34:30 - should be comfortable solving it
34:32 - right uh for example let's go through
34:34 - this sample input so if you look at the
34:36 - first problem it is you know i mean two
34:38 - people are comfortable solving it so
34:40 - that's essentially one potential problem
34:41 - that you can solve uh that you can write
34:43 - a solution for right uh for the second
34:45 - problem again all three of them are
34:47 - comfortable solving it so we'll write a
34:48 - solution for it for the third problem
34:50 - you'll see only one person is
34:51 - comfortable solving it right so we won't
34:53 - write a solution for it
34:54 - fine uh so if i were to implement it
34:56 - using code let's go about doing that so
34:59 - this is some code that i've you know
35:01 - written beforehand let me erase all of
35:02 - this
35:05 - now again if you look at this whole
35:06 - entire code that i have here uh you know
35:09 - this is like some template code that i
35:10 - have already available for me
35:13 - right uh i mean i will start writing my
35:15 - solution from this point so i'm using c
35:17 - plus plus i mean this is like just uh
35:18 - this is just like a walkthrough uh you
35:20 - know on how you submit problems on uh
35:23 - on code forces right so let's take the
35:25 - input into n
35:27 - in n is what n is the number of problems
35:29 - that you know you will be getting for
35:30 - this whole problem right and then you
35:32 - have this uh what you have three
35:34 - integers for every problem right so
35:36 - let's keep an ah let's keep a variable
35:37 - called answer answer is the number of
35:39 - you know
35:40 - uh number of problems that we'll write a
35:41 - solution for
35:42 - right so we go through n problems and we
35:45 - take in the input right let me just see
35:50 - right so these are the three inputs that
35:51 - i have taken for each problem and what
35:52 - i'll do is i'll just check whether you
35:54 - know two people can solve this problem
35:56 - or not and how can i do that like uh you
35:59 - know one tells me uh if i have one
36:00 - written here this just means that uh
36:02 - that person is comfortable right so
36:04 - essentially i can just add them all up
36:06 - and see if you know that number is
36:07 - greater than equal to 2 or not so if a
36:09 - plus b plus c is greater than equal to 2
36:11 - i just add one to my answer what does
36:13 - what does this imply this implies that
36:14 - this problem is solvable by me this this
36:16 - problem is uh you know something that
36:18 - all of these three people will be
36:19 - writing a solution to right and at the
36:21 - end we just print this
36:24 - right i hope uh
36:26 - this sign let's see
36:30 - okay let's copy this input here and
36:32 - let's see if our output is coming out to
36:33 - be same
36:36 - okay we have two uh towards the intended
36:38 - output here we're getting two let's copy
36:40 - another sample input
36:42 - now what you would you know observe here
36:43 - is that in this problem you're given
36:45 - some sample inputs and some sample
36:46 - outputs
36:47 - sorry
36:50 - here so if you look at this problem
36:51 - there are some sample inputs and some
36:53 - sample outputs what does this mean this
36:55 - is not like you know the
36:56 - test cases on which your solution will
36:58 - be tested upon these are just sample
36:59 - inputs and outputs right uh essentially
37:02 - your problem will be tested on a lot of
37:03 - other test cases your solution will be
37:05 - tested on a lot of other test cases
37:08 - right so let's try to submit this
37:09 - problem let's copy this code and let's
37:11 - submit it
37:12 - and let's see what is the verdict that
37:14 - we get
37:17 - and i just hope i've read this problem
37:18 - correctly because i don't want to end up
37:21 - you know getting a wrong answer or
37:22 - something like that on a very easy
37:23 - problem okay so now you look at this uh
37:26 - uh you know submission that i made and
37:27 - the verdict is accepted what does this
37:29 - mean this just means that i have a
37:30 - correct solution for this problem right
37:32 - and you look at this solution that i
37:34 - submitted on this problem i have a wrong
37:36 - answer on pre-test five what does this
37:37 - mean this just means from a list of test
37:40 - cases that this problem has my solution
37:42 - failed on the fifth test case right uh
37:45 - let me decrease the font here
37:47 - you know
37:48 - sorry
37:50 - yeah
37:51 - so now if you look at the solution this
37:53 - was i mean this is one huge solution
37:55 - obviously i wouldn't have implemented it
37:56 - on squad i would have picked up some
37:58 - code from my library uh from my
38:00 - repository that i have
38:01 - now look at this this was the test case
38:03 - that was there for this problem the
38:05 - output okay sorry i'm somehow you know
38:08 - pressing
38:09 - this whole thing
38:12 - yeah now you look at this problem this
38:14 - was the test case that was there in this
38:15 - problem the output that my code
38:17 - generated was 499
38:19 - but the answer for this test case was
38:21 - zero
38:22 - right so this will give me a wrong
38:23 - answer my solution will be considered
38:25 - accepted if it passes on all the test
38:27 - cases
38:28 - right this was one solution uh when i
38:30 - got a wrong answer then similarly we
38:32 - have this verdict called time limit
38:33 - exceeded
38:34 - right if you look at this code uh
38:36 - on this last test case uh this test case
38:39 - my code you know returned this verdict i
38:42 - mean i got this word it called time
38:43 - limit exceeded what does this mean this
38:45 - just means that while running my code on
38:47 - code forces code forces wasn't able to
38:49 - get the answer in a limited amount of
38:51 - time right for example if you look at
38:53 - this problem if let's say i run an
38:54 - infinite loop right
38:56 - let's say i run an infinite loop before
38:58 - i do anything
39:00 - sorry
39:03 - right this is like an infinite loop
39:04 - right so let's save this and let's
39:06 - submit this solution on code sources
39:09 - right let's have people guessing in the
39:10 - chat what would we get as you know an
39:13 - output i mean get as a
39:15 - as a verdict what do you guys think
39:16 - we'll get as a verdict will we get wrong
39:18 - answer or will we get time limit
39:20 - exceeded or will we get accepted
39:22 - or will i get compilation error if there
39:24 - is if somebody can spot some compilation
39:26 - errors in my code
39:28 - i mean that that would be interesting
39:32 - let's see what are we getting
39:35 - so this is running on the first test
39:36 - case but but we have an infinite loop
39:38 - right so this gives this gives me this
39:39 - verdict called time limit exceeded on
39:41 - the very first test
39:43 - right so i hope ykk that was helpful
39:44 - like you know going through this problem
39:46 - although this was very easy i didn't
39:47 - have to think a lot of this
39:49 - no that's that's actually really helpful
39:52 - um
39:54 - so like in each of these problems the
39:56 - input is always like a text file and
39:59 - output is uh just a single uh value
40:04 - okay that's a good question again uh the
40:05 - input is uh the input could be like a
40:07 - text file but the output could not be
40:09 - just you know one uh
40:11 - one output like one character or one
40:13 - number for example if you look at this
40:15 - output
40:16 - this is like a this is like some
40:17 - peculiar stuff right so it's not
40:19 - essentially always a number uh it could
40:21 - be some string as well it could be some
40:22 - entirely i mean it could be just one
40:24 - line as an right so it could be anything
40:26 - you just have to print the output in the
40:28 - way that they expect you to print it for
40:30 - example look at this problem let's say
40:32 - instead of printing one
40:33 - let's say i just print something like
40:35 - this let's say print two before printing
40:37 - one now what do you expect would you
40:39 - expect uh getting a right answer or a
40:41 - wrong answer obviously you'll get a
40:42 - wrong answer right because code forces
40:44 - wants you to print one but you're
40:45 - printing this to one this is not
40:47 - intended
40:48 - right so i mean you just have to follow
40:50 - what you know they tell you to
40:52 - output
40:57 - all right um by the way it's been 40
40:59 - minutes so far since the stream started
41:02 - how are you feeling
41:04 - i'm feeling great i mean you know uh if
41:06 - i can solve some problem on stream
41:08 - that's like a totally different feeling
41:10 - so essentially if you look at my youtube
41:12 - channel as well most of them are
41:14 - competitive programming streams right so
41:16 - essentially i'm just solving some
41:17 - problems on those streams and it feels
41:19 - great so yeah that was great
41:21 - nice uh
41:23 - yeah i'm wondering if we can like
41:24 - quickly answer a question then
41:26 - try solving another problem if you're
41:28 - down for it
41:30 - yeah sure like uh probably you can try
41:32 - out some difficult problem because these
41:33 - are like very easy
41:35 - and they don't require any thinking yeah
41:37 - sounds good let me just you know stop
41:39 - presenting for a while and let's see if
41:40 - we have some doubts in the chat right
41:42 - and then we can get back to presenting
41:44 - yeah
41:45 - uh so the question we have here is
41:48 - it would be great for beginners if you
41:50 - tell them about some of the biggest cp
41:52 - contests in the world
41:54 - okay now good question so uh first of
41:57 - all you have all of these websites like
41:58 - code forces code chef at coder right
42:01 - all of these websites you can refer to
42:03 - for solving problems and also for
42:04 - attempting competitive programming
42:06 - contests but these are not like you know
42:08 - uh
42:08 - uh very prestige uh i mean uh you know
42:11 - contests that are known by everyone
42:13 - right so there are contests like google
42:15 - code jam google uh
42:17 - google kickstart uh then there are
42:18 - contests like facebook hacker code chef
42:20 - smackdown right so there are like a lot
42:23 - of contests like these these are you
42:24 - know very well known
42:25 - fine so probably we can add the links to
42:28 - all of these in the description after
42:29 - this video uh it would be very you know
42:31 - difficult to like go through one of them
42:32 - because there are just a lot of them
42:36 - yeah sounds good um yeah i mean if you
42:38 - if you want to solve another problem i
42:40 - think people will like that too
42:44 - um sure just give me a minute let me go
42:46 - through the chat and see if we have
42:47 - something interesting
42:50 - yeah um
42:51 - people are someone's asking you know
42:53 - python or c plus plus we are you know we
42:55 - already answered it earlier basically c
42:57 - plus plus
42:58 - if you're just getting started but if
42:59 - you're already familiar with like python
43:01 - java or other languages
43:03 - you know don't switch right away
43:04 - necessarily like start with what you
43:05 - have and then
43:06 - you know switch if you want later
43:10 - great uh okay so somebody's asking
43:12 - should we go for a lead code problem uh
43:13 - instead of a code for this problem yeah
43:15 - i think we can do that because that's
43:16 - like a totally different environment so
43:19 - let's go for a lead code
43:23 - and let me pick up some problem i mean i
43:25 - don't want to you know end up wasting a
43:27 - lot of time just explaining how i'm
43:29 - thinking about the solution i do want to
43:31 - spend some time explaining how you can
43:32 - you know attempt problems on all of
43:34 - these platforms
43:35 - right uh so i hope this is yeah this is
43:38 - my account only and yeah i mean for that
43:41 - matter i haven't done a lot of lead code
43:42 - uh like if you look at my profile i
43:44 - haven't solved a lot of problems as such
43:46 - like only 33 easy 66 uh sorry 56 medium
43:50 - and just 15 heart problems
43:53 - so
43:54 - yeah mostly i do attempt contests only
43:56 - on lead code i don't
43:57 - you know end up spending a lot of time
43:59 - solving problems
44:00 - so let's see i don't even know how to
44:02 - navigate on this platform so much
44:04 - let's see
44:08 - let's go on to problems only and then
44:12 - let's pick up some easy problem only for
44:13 - now uh we don't want to you know just
44:15 - waste time trying to think about
44:17 - solutions
44:18 - yeah i think easier medium
44:21 - would be okay for for you probably
44:24 - yeah i mean for me anything is okay but
44:26 - i don't want to end up you know uh
44:28 - just making this whole stream like a
44:30 - competitive programming problem-solving
44:32 - stream
44:33 - right now let's pick up this problem
44:34 - let's see i think it's okay people will
44:36 - probably enjoy that
44:39 - okay sure let's let's go for like
44:41 - something like a medium problem
44:43 - yeah medium sounds good
44:45 - cool let me just read through this
44:46 - problem if i've already played since
44:48 - i've already opened it
44:52 - okay so i think this this is not
44:53 - interesting
44:54 - let's uh this is like very easy this
44:56 - just inbuilt implementation you can use
44:59 - right let's go for something like medium
45:01 - how do i set the difficulty
45:05 - yeah and if you're in the chat
45:07 - tell us
45:08 - what problems you want us to solve
45:12 - yeah and in fact you know uh don't just
45:13 - tell us what problems you want to solve
45:15 - but let's say if you've picked up some
45:16 - problem think about approaches to you
45:18 - know solve that problem
45:20 - right uh so let's see which problem do
45:22 - we want to
45:24 - like solve
45:26 - swap nodes and pairs something like this
45:29 - should we go for this one maybe
45:32 - uh so the nice thing you know to me
45:34 - about lead code is like i think it shows
45:36 - like how many people like like you know
45:38 - like the question i don't know if it
45:40 - shows that in this way oh yeah yeah it
45:42 - does show that as well so i think we
45:43 - should pick up some problem that is like
45:44 - you know liked by some people
45:46 - so uh
45:48 - i don't know what is this implemented
45:53 - generate parentheses
45:55 - or yeah whatever you want i guess
45:58 - okay i think this is like a linkless
46:00 - problem i don't really like you know
46:01 - playing up with linked lists so let's
46:02 - not solve this
46:04 - yeah i mean link list is more like the
46:05 - data structures algorithms it's not even
46:07 - about competitive programming yeah so uh
46:11 - what were you suggesting bracket
46:12 - generating bracket sequences something
46:14 - like this right
46:16 - uh which one
46:17 - uh you said something around bracket
46:19 - sequence yeah i guess
46:21 - go to 22 yeah scroll down 22 okay okay
46:24 - 22 generate parentheses okay
46:29 - okay so this problem is uh given n pair
46:32 - of parentheses write a function to
46:34 - generate all combinations of well-formed
46:36 - parentheses okay that's interesting
46:39 - and uh i mean n is uh you know n is the
46:42 - number of brackets i mean the number of
46:43 - parentheses that you want to use for
46:45 - example if n is equal to three you want
46:46 - to use three opening brackets and three
46:48 - closing brackets
46:49 - right uh so i mean if i were to just
46:51 - implement it in a very brute force
46:52 - manner what i could do uh do is you know
46:55 - just uh
46:56 - have this thing what like i can just you
46:58 - know uh pick up any bracket sequence i
47:01 - can pick up this first one this this
47:03 - first bracket sequence and i can just
47:05 - you know
47:06 - check all of its uh
47:08 - you know
47:09 - i mean how should i put it like i can
47:11 - just permute it right i can just
47:12 - consider all the permutations of this
47:14 - string and if any of them is valid i
47:16 - just include it in my answer right so
47:18 - how does that sound you know this
47:20 - approach
47:22 - let me just pick up the first sequence
47:23 - and just you know uh do all the
47:25 - permutations on it
47:28 - uh that's
47:30 - surely gonna sound like that
47:32 - efficient right
47:34 - yeah it's not it's it's not definitely
47:36 - it's not efficient but if you look at
47:37 - the constraints here n can go up till
47:40 - eight right so
47:41 - i mean it won't run but this is
47:43 - something i want to just put put up
47:45 - right uh so that people can you know
47:47 - look at how we're approaching problems
47:49 - right so i mean that's that's one
47:51 - approach but that wouldn't run uh again
47:53 - we haven't really talked about time and
47:54 - space complexity uh but the solution
47:56 - that i'm suggesting right now is like
47:58 - you know uh 2n factorial so if you have
48:01 - n brackets i mean if you have uh n as
48:03 - the input you have two in brackets right
48:05 - and if you consider all the permutations
48:07 - of it that's like two n factorial so
48:09 - here it would be like 16 factorial right
48:11 - uh so 16 factorial is like really huge
48:13 - and it won't work
48:15 - right so uh
48:16 - i mean i hope that that makes sense like
48:18 - you know in terms of time complexity
48:20 - it's really difficult to explain right
48:21 - now because i haven't really talked
48:23 - about time complexity but just assume
48:25 - that the approach that we discussed
48:26 - right now was really inefficient in
48:28 - terms of time
48:29 - right uh i hope that's that's fine like
48:31 - you know seeing it in this way
48:32 - no yeah i think that's pretty clear
48:35 - cool uh so how do we go about generating
48:38 - all the valid you know parentheses
48:41 - i mean
48:42 - that's the approach that we just
48:43 - discussed was definitely you know not
48:45 - the most efficient
48:46 - but another approach could be something
48:48 - like this let's say uh you know we have
48:50 - int n as the number we can you know have
48:52 - some opening brackets and we can have
48:54 - some closing brackets right so let's say
48:55 - we have opening equals to
48:57 - n and closing equals to n
49:00 - right
49:00 - and initially how many brackets have we
49:02 - used already uh induced equals to zero
49:05 - right so this is our initial state our
49:07 - initial state is you know we have zero
49:09 - brackets that we've used already uh and
49:11 - we have how many remaining brackets we
49:12 - have n opening brackets remaining and in
49:15 - closing brackets remaining
49:17 - right so i can just you know write a dp
49:19 - solution like you know dp of used comma
49:21 - opening comma closing and try out all
49:22 - the possibilities and then the
49:24 - complexity would be what complexity
49:28 - would be time would be like order of
49:30 - what order of n into n into n
49:33 - and space would be again order of
49:36 - n into n into n
49:39 - right so how does that sound like should
49:41 - we go about implementing the solution
49:44 - so could you explain that again
49:47 - okay sure so uh we have this input which
49:50 - is int n right what does this mean this
49:52 - just means that i have n closing
49:53 - brackets and opening brackets
49:55 - right so essentially i can just have a
49:57 - dynamic programming state what could
49:59 - what would that state be it would be
50:00 - just simply the number of brackets that
50:03 - i've used till now
50:04 - uh you know how many brackets do i have
50:06 - remaining i mean we don't even need this
50:07 - used thing so let's just have this thing
50:13 - right so the final time complexity would
50:15 - be order of n square and the space
50:16 - complexity again would be order of n
50:17 - square
50:19 - now let me just explain the solution
50:20 - it's very difficult for beginners to
50:22 - understand because obviously this is
50:23 - like a medium problem
50:24 - but look at it this way
50:26 - initially what do you have initially you
50:28 - have in opening brackets and you have in
50:30 - closing brackets what would you do now
50:32 - you would try to place some opening
50:34 - bracket or some closing bracket at the
50:36 - index that you are at
50:37 - right so if you are at any index you
50:39 - would want to essentially place some
50:40 - opening bracket or some closing bracket
50:41 - that's the two possibilities that you
50:43 - have right
50:44 - and i mean it doesn't really matter
50:45 - which opening bracket are you placing
50:47 - placing are you placing the first
50:48 - opening bracket or the last opening
50:49 - bracket
50:50 - right so that's like a simple dynamic
50:52 - programming state uh like does that make
50:54 - sense
50:56 - uh yeah i think so so you're what i'm
50:58 - doing is something like this dpf opening
51:00 - closing
51:01 - and uh this is you know considers all
51:03 - the ways
51:06 - uh
51:07 - are you gonna try to uh create an array
51:10 - of brackets and then kind of concatenate
51:12 - them into your string later
51:14 - yeah yeah yeah yeah but uh to be honest
51:17 - you know it's it would be really
51:18 - difficult to implement it on spot you
51:20 - know i mean it's not difficult to
51:21 - implement but that would just take up a
51:23 - lot of time so that's primarily why i
51:26 - did not want to choose a problem that
51:27 - requires a lot of implementation
51:30 - right yeah and i hope that that doesn't
51:31 - sound you know something like you know
51:33 - me being very incompetent no i i totally
51:36 - get that like it's it's hard to like
51:38 - solve something on the spot
51:41 - um
51:44 - but yeah how about you know how about
51:45 - you know we just implement the first
51:46 - approach that came to our mind i mean we
51:48 - could show we could show how you know we
51:50 - implement problems on lead code and how
51:52 - we submit them
51:53 - right so let's say if you talk about the
51:55 - first uh you know uh bracket sequence
51:57 - that you have already is something like
51:58 - this let's say we have string initial
52:01 - right initial is something like this and
52:03 - we just place n opening brackets first
52:05 - and then
52:24 - right so this is the first initial
52:26 - string that we have let's try to print
52:27 - this and let's see what we're getting
52:33 - let's turn this code
52:35 - okay i think we'll get some compilation
52:37 - error because
52:38 - just a minute we haven't returned
52:40 - anything
52:46 - okay let's see what is the error that we
52:48 - are having we have this
52:57 - right so this is what we are getting
52:59 - initially this is the first bracket
53:00 - sequence that you have in the line right
53:03 - and next what we can do is we can
53:04 - consider all of its permutations right
53:06 - and whichever of them is like a valid
53:08 - permutation we just include that in our
53:10 - answer so let's try to do it that way so
53:13 - we have vector string sorry we already
53:14 - have that
53:15 - available so let's do something like
53:17 - this
53:34 - so
53:45 - okay so uh let me just explain this
53:47 - function which is like the next
53:48 - permutation what does what this does is
53:50 - that it takes a permutation of a string
53:52 - or an array or a vector and just it just
53:54 - returns the next permutation if it's
53:56 - available if it is not available it just
53:58 - you know exits from this loop
53:59 - so this is this is this function that
54:01 - i'll have to implement which is this
54:02 - valid tool valid
54:08 - so i just have to check here whether
54:10 - this permutation that i'm considering is
54:11 - valid or not right how do you check
54:13 - whether a bracket sequence is valid uh a
54:15 - bracket sequence is valid as long as you
54:17 - have more or you know equal number of
54:19 - opening brackets before closing brackets
54:21 - right so we could have in sum equals to
54:23 - zero and we could just iterate on the
54:24 - string
54:27 - so if i equals equals to opening
54:31 - i just do sum plus plus l psi do some
54:34 - minus minus and i just take check if sum
54:36 - is greater than equal to 0 sorry if sum
54:38 - is less than equal to less than 0 i just
54:40 - return
54:40 - false because that's not a valid
54:42 - uh subsequence right a valid uh sequence
54:47 - cool so let's try to run this code
54:49 - and let's see if you're getting some
54:51 - compilation errors
54:54 - okay i haven't named it correctly
55:03 - okay so do you see that you're getting
55:04 - all of the valid subsequences here when
55:06 - n is three
55:08 - uh and we're getting the right answer so
55:09 - let's try to submit this also you know
55:11 - we won't get a right answer because uh
55:13 - this is like you know very heavy in
55:14 - terms of time
55:15 - so but let's see let's try to submit it
55:17 - and let's see what what is the verdict
55:19 - that we're getting
55:21 - okay somehow we're getting success
55:24 - i mean that uh it shouldn't have
55:25 - happened
55:26 - uh
55:27 - some i mean some more reasons why i
55:29 - should hate lead code probably
55:31 - yeah i mean if any good yeah with eight
55:35 - brackets it's it's probably okay i guess
55:38 - no no it's actually not okay like if you
55:40 - look at it we have something like this
55:42 - uh if n is equal to eight the number of
55:45 - brackets that i have are what we have
55:47 - and we have 2 into n right so that's
55:49 - like 16 factorial ways and
55:52 - i don't think that should work
55:54 - uh how many 16 16 factorial okay let's
55:58 - consider it this way uh so we have 6
56:00 - factorial
56:01 - 6 factorial is what 6 factorial is 7 20
56:04 - right so we have 720 into 7 into 8 into
56:07 - 9 into 10
56:10 - into 11 into 12 into 13 into 14 into 15
56:14 - into 16.
56:16 - okay this is really huge
56:18 - i mean uh
56:19 - if you look at
56:21 - uh sorry are you able to see this this
56:23 - yeah it is this huge yeah
56:26 - and this this won't run but but somehow
56:29 - it's running i don't know how right yeah
56:30 - that's that's not the most efficient way
56:32 - to solve this problem uh like i was
56:34 - saying the dp approach that i was
56:35 - suggesting is much better like you know
56:41 - cool so yeah that's that's how you
56:42 - submit solutions on lead code right
56:48 - uh so with with a dp approach
56:52 - i guess
56:54 - so like you know when you when you call
56:57 - like uh when you call the same function
56:59 - like recursively
57:01 - you would like append
57:03 - uh to what you have right
57:06 - right right like you would start at like
57:08 - index zero
57:10 - and then kind of uh go go to like index
57:13 - one two three and then just like keep
57:16 - adding stuff uh just like that
57:18 - yeah but we'll also you know be storing
57:20 - what is our current state so essentially
57:22 - we won't be repeating everything again
57:24 - and again
57:26 - right right
57:28 - yeah i guess generating everything is
57:31 - it's not it's not an efficient approach
57:35 - the dynamic programming approach
57:37 - oh i mean like uh
57:39 - the initial approach that you were just
57:41 - talking about
57:42 - the the
57:45 - it's the like more efficient approach
57:46 - right
57:48 - yeah definitely the dynamic programming
57:50 - approach you know is much more efficient
57:52 - and it will be only considering the
57:54 - valid sequences right so we won't be
57:56 - even going into the invalid sequences
57:59 - so that's that's definitely better than
58:00 - this
58:02 - cool
58:04 - um
58:05 - do you ever use like python to solve
58:07 - things by the way
58:09 - um
58:10 - i don't know i haven't really used a lot
58:12 - of python uh what i do is sometimes you
58:14 - know if you look at c plus plus like if
58:16 - you look at this number let's say i tell
58:18 - you this huge number
58:19 - uh let's open python and we have a
58:21 - equals to something like let me increase
58:23 - the font a equals to something like
58:26 - 2 to the power 1000
58:27 - right if you print okay sorry it is
58:30 - a equals to 2 to the power 1 000 yeah
58:33 - now if you print this number this is
58:34 - like huge right uh you can't fit this
58:36 - number in c plus plus so sometimes when
58:39 - i you know uh don't want to get into a
58:41 - lot of precision and all of it all of
58:43 - that stuff i do end up using python as
58:45 - in but for competitive programming
58:46 - mostly not
58:48 - because it's uh it's slower it's lower
58:49 - than c plus plus yeah
58:53 - uh yeah i remember someone was asking
58:55 - earlier like do you get judged on like
58:58 - time and space complexity or just the
59:00 - runtime
59:02 - no you only get judged on the runtime it
59:04 - doesn't matter what your space and time
59:06 - complexity is but it's like very you
59:08 - know it's they both are correlated the
59:10 - better your time complexity the
59:12 - lesser time it will take for your code
59:13 - to run in right so essentially you're
59:16 - not just on time complexity you're run
59:17 - you're just on the runtime
59:19 - but
59:20 - in order to be able to code for a
59:22 - particular runtime you'll have to look
59:23 - at the time complexities
59:26 - cool
59:28 - um
59:29 - yeah it's it's been almost an hour so
59:31 - you know we can end it if you want like
59:33 - yeah because you know basically we can
59:35 - end it whenever you want what time is it
59:36 - over there
59:38 - uh it's 10 16 p.m
59:40 - but yeah i mean uh i'm cool like
59:42 - answering some more questions for like
59:43 - five to ten minutes uh and then we can
59:45 - end it yeah
59:46 - sure so let me just stop presenting my
59:49 - screen
59:51 - yeah let me see if if there are any
59:53 - questions and
59:56 - i think if there's anyone
59:58 - oh this one's kind of a good one
60:01 - is it necessary to be good at uh
60:03 - destruction algorithms to get a job okay
60:06 - it depends on what job you're applying
60:08 - to so it kind of totally depends on the
60:10 - type of company you're applying for like
60:12 - for example if you look at all of these
60:13 - fan companies like facebook amazon
60:16 - google
60:17 - netflix they do require you to be a very
60:19 - good problem solver and also be very
60:20 - good at data structures and algorithms
60:22 - right
60:23 - so for these companies uh yeah you would
60:25 - uh have to be good at dsa in order to
60:27 - crack their interviews but if you look
60:29 - at all of these interviews by these
60:30 - startups right
60:32 - so startups don't really care about a
60:33 - lot uh i mean they don't really care a
60:36 - lot about your problem solving skills or
60:37 - your data structures and algorithm
60:39 - knowledge what they care about is your
60:41 - development skills for example if there
60:42 - are two candidates one of them is a
60:44 - great competitive programmer is a great
60:46 - uh you know problem solver and let's say
60:49 - the other one is very good at you know
60:50 - implementing stuff in react or let's say
60:52 - is very good with python right and i
60:55 - mean that's like a development skill
60:56 - this is like a problem-solving skill
60:57 - right so startups would prefer the
60:59 - second type of person and you know big
61:01 - tech companies which are established
61:02 - would prefer the first type of person
61:04 - but again it's not like you know
61:06 - startups are bad or these big tech
61:07 - companies are good uh both of them you
61:10 - know are paying a huge amount of money
61:12 - to you know their
61:13 - employees so yeah both of them are good
61:15 - options it's not essential uh it's not
61:18 - you know totally required that you go
61:20 - along this dsa path and learn all of
61:22 - these dsm then go for then go apply for
61:24 - a job you can also be very good at
61:25 - development and then go and apply for a
61:27 - job as well yeah both of them work but
61:29 - you need to be good at some skill yeah
61:32 - cool uh thank you for that i you know i
61:34 - i totally agree with that
61:37 - sort of approach
61:38 - um anyway i feel like this is a good
61:41 - probably a good time to end the stream
61:43 - but
61:44 - yeah totally um
61:47 - did you have any anything like you
61:48 - wanted to add to this conversation we've
61:50 - had so far
61:52 - um
61:54 - not exactly like uh so far it's been
61:56 - great it was really great coming on this
61:57 - you know huge youtube channel that you
61:59 - have of your own right and talking about
62:01 - competitive programming
62:02 - um and thank you so much for like you
62:04 - know taking out time for this and you
62:05 - know scheduling all the meetings and you
62:07 - know putting out all of this stuff on
62:09 - twitter so that more people can come and
62:11 - join
62:12 - and uh yeah apart from that like for the
62:14 - people who've like you know who don't
62:16 - know about me a lot uh i also have a
62:17 - youtube channel on competitive
62:19 - programming so if this was the
62:20 - conversation that you know got you some
62:22 - uh i mean that got you interested i
62:24 - would definitely recommend you know
62:26 - checking out that youtube channel of
62:27 - mine and i hope you know you find some
62:29 - insightful content there as well
62:32 - cool um
62:35 - yeah i think this
62:37 - like i said this is probably a good time
62:39 - to end this stream uh if anyone's
62:41 - interested in you know learning more
62:42 - about uh competitive programming go
62:45 - check out uh preacher's
62:47 - channel twitter account everything
62:49 - everything's uh in the description and
62:52 - you know if you're new on this channel
62:53 - make sure to subscribe if you want and
62:56 - you know feel free to follow me on
62:59 - twitter too because i've been pretty
63:00 - active on twitter at waikidojo
63:03 - okay uh
63:04 - thank you so much everyone
63:06 - and
63:07 - have a nice day
63:10 - bye