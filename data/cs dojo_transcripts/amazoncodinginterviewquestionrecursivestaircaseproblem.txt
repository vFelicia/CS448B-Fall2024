00:00 - hey everyone today I have a coding
00:02 - interview question and it's a question
00:04 - that's being asked by Amazon among other
00:06 - companies and in this problem you're
00:08 - given a staircase with n steps so if the
00:12 - given n is for your staircase will have
00:15 - four steps and that means that you can
00:18 - go from the bottom to the top in four
00:20 - steps so that's one two three and four
00:23 - steps and suppose that you can only take
00:26 - one or two steps at a time so if you
00:29 - start at the bottom you can only go from
00:32 - the bottom to here or here and if you
00:36 - decide to go here you can only go from
00:38 - here to here or to here and the problem
00:42 - here is writing a function called num
00:45 - ways which takes the positive integer n
00:48 - and returns the number of ways you can
00:52 - go from the bottom to the top so if the
00:55 - given n is 2 instead of 4 there's only 2
00:58 - ways of going from the bottom to the top
01:00 - the first way would be taking one step
01:03 - at a time and the second way would be
01:06 - taking two steps from the bottom to the
01:08 - top so your function num ways should
01:11 - return to if the given n is 2 and once
01:15 - you're done with this problem
01:16 - think about this variation what if in
01:18 - addition to n you're also given X which
01:21 - is a set of positive integers and this
01:25 - is going to be the set of numbers of
01:26 - steps you're allowed to take instead of
01:28 - just one or two steps so in this
01:31 - particular case you can go from the
01:33 - bottom to over here by taking one step
01:36 - at a time
01:37 - or you can go from the bottom to over
01:40 - here by taking one to three steps but
01:44 - you're not allowed to take two steps
01:46 - here because two is not in the set and
01:49 - you're not allowed to take five steps
01:51 - either here because we don't have enough
01:53 - steps for five steps so maybe pause the
01:57 - video right here if you want to practice
01:58 - and try solving the first problem as
02:00 - well as this variation of the problem
02:02 - okay here's how I would think about it
02:05 - I'm gonna go a little bit slowly here so
02:08 - I'm gonna put an outline of this video
02:10 - with some timestamps in the description
02:12 - so you don't have to watch
02:13 - whole thing if you don't want to now I
02:15 - would first think about some simple
02:17 - cases for example when n is 2 or 1 like
02:21 - we saw earlier when n is 2 there are
02:24 - only two ways to get to the top from
02:27 - bottom
02:27 - the first way was taking one step at a
02:30 - time and the second way was taking two
02:32 - steps and if you label each of those
02:35 - steps you'll be able to write down each
02:37 - of those paths so you might label the
02:40 - first step the bottom zero and then this
02:43 - step one and then the top two then
02:47 - you'll have these two paths going from 0
02:50 - to 1 to 2 or going from 0 to 2 and I'm
02:55 - just going to write down 2 here to show
02:57 - that we have two paths here or two ways
03:00 - of going from the bottom to the top and
03:02 - we can do the same thing for when n is
03:05 - equal to 1 and the only way here for us
03:09 - to go from the bottom to the top is just
03:11 - by taking one step or going from zero
03:15 - let's say this step right here to one so
03:18 - that's this path right here 0 to 1 and
03:22 - then I'm going to write down here 1 as
03:24 - well to show that we have only one path
03:27 - and let's do the same thing for when N
03:29 - equals 3 first of all let's label these
03:32 - stairs as 0 1 2 & 3 the first path we
03:37 - can immediately find is this 1 0 1 2 and
03:41 - then 3 let me write it down here that's
03:45 - the one right here
03:46 - and then the next one might be 0 1 and
03:49 - then 3 that's the one right here and
03:53 - then we also have 0 2 2 2 3 and that's
03:59 - the one right here so here we have 3
04:02 - paths so that's what your function
04:04 - should return if you're given n is 3 and
04:07 - you can do the same thing for when n is
04:10 - equal to 4 as well I'm just gonna skip
04:13 - over this just the same time but you'll
04:15 - find that there are 5 paths here ok so
04:18 - the question here is can you find any
04:20 - pattern for what we've found so far it's
04:23 - actually kind of hard if you're not used
04:25 - to this kind of thing but
04:27 - the easiest way to find a good pattern
04:29 - here is by visually so let's go back to
04:32 - when n is equal to 3 in that case you
04:35 - ask yourself how can we go from step 0
04:39 - to step 3 and to answer that question
04:42 - you need to ask yourself should I go
04:45 - over just one step or two steps from the
04:48 - bottom and if we decided to take just
04:51 - one step from the bottom then you needed
04:53 - to ask yourself how can we go from step
04:56 - one to step three but if you look at
04:59 - only this part up here that's actually
05:03 - just a staircase with two steps so when
05:06 - you ask yourself how can we go from step
05:09 - one to step three that's actually a
05:10 - problem that we've already solved when n
05:13 - is equal to two because in this case two
05:16 - we ask ourselves how can we go from step
05:19 - zero to step two or go over a staircase
05:22 - of two steps and I think this pattern is
05:25 - gonna be more clear once we relabeled
05:28 - these steps so let's label these steps
05:31 - not from the bottom but from the top
05:34 - instead so the top step is gonna be 0
05:37 - here and then this step is gonna be 1 2
05:40 - and this last step the bottom step is
05:44 - gonna be called 3 and once we real able
05:47 - all the other steps as well these steps
05:50 - is gonna look like this so with this
05:53 - relabeling the top step 4 when n is
05:56 - equal to 1 becomes 0 and the bottom step
06:00 - is going to be 1 and the same thing for
06:02 - when n is equal to 2 and with that
06:05 - labeling scheme these are the paths that
06:08 - we have so instead of 0 1 for 1 and is
06:12 - equal to 1 we have 1 0 because we go
06:15 - from 1 to 0 and we can do the same thing
06:18 - for 1 n is equal to 3 as well the first
06:22 - path we can find is 3 2 1 0 and then the
06:26 - next one is 3 2 0 and so on ok now let's
06:31 - go back to what we did earlier going
06:33 - back to you know when we were on the
06:36 - ground when n is equal to 3 then you
06:39 - need to ask yourself should I
06:41 - take just one step or two steps right
06:44 - and if we decide to take one step then
06:47 - you have three two as the first part of
06:51 - this path and from there of course you
06:54 - need to ask yourself how can we go from
06:56 - Step two to step zero and that's exactly
07:00 - the same question that we've already
07:01 - answered when n is equal to two going
07:05 - from step two to step zero so if you
07:08 - examine the rest of the paths you know
07:10 - this path to one zero and to zero
07:13 - they're exactly the same as the paths we
07:16 - saw when n is equal to two and you can
07:19 - do a similar analysis if you decide to
07:22 - go from three to one as well in that
07:26 - case we have three one as the first part
07:29 - of the path and from there you need to
07:31 - ask yourself how can we go from step one
07:34 - to zero and that's exactly the same
07:36 - question all right this is kind of silly
07:38 - but it's exactly the same as what we
07:41 - asked earlier when n is equal to one and
07:44 - in that case the rest of the path is
07:46 - just one there and that's of course
07:48 - exactly the same as the path we had for
07:51 - when and is equal to one so basically
07:54 - what we found here is that for when n is
07:56 - equal to three these first two paths is
08:00 - the same as the path we had for when n
08:04 - is equal to 2 and the last path is the
08:07 - same as the path we had for when n is
08:10 - equal to 1 and based on that we can
08:13 - write that numbers of 3 or the number of
08:16 - ways of climbing over a staircase of 3
08:19 - steps is equal to num ways of 2 + num
08:22 - ways of 1 and actually in general this
08:25 - should be num ways of n is equal to num
08:29 - ways of n minus 1 plus 9 ways of n minus
08:33 - 2 so you can check that for example for
08:36 - when n is equal to 4 num ways of 4 as
08:39 - you can see is 5 here and that's num
08:43 - ways of 3 which is 3 + num ways of 2
08:47 - which is 2 so 2 plus 3 which is 5 here
08:50 - you might say what about when n is equal
08:53 - to 0
08:54 - I would actually argue that in that case
08:56 - numbers of zero should be one and here's
08:59 - how I think about it it's sort of like
09:01 - asking yourself how many ways are there
09:04 - to climb over a staircase of zero steps
09:07 - or how can we get from step they're
09:10 - right here to step zero which is also
09:13 - the top well let's say you're standing
09:15 - on step zero at the bottom and then boom
09:19 - you're at the top step zero so this is
09:22 - kind of silly but the only way to get
09:24 - from step zero to step zero is just zero
09:28 - this path right here so we only have one
09:32 - and that's why num ways of zero should
09:34 - be one anyway let's now think about how
09:36 - we can use this recursive relationship
09:39 - to write some code ok so this is the
09:42 - recursive relationship that we found
09:43 - earlier and to find a recursive function
09:46 - with that we need to find base cases one
09:49 - choice would be to choose one and two
09:52 - but I would argue that the simpler
09:55 - choice is these two zero and one and
09:58 - with that we'll have these base cases
10:01 - none ways of zero and none ways of one
10:03 - being equal to one and based on that we
10:06 - can write our recursive function we're
10:09 - gonna call it num ways of course it's
10:11 - gonna take and a positive integer and
10:13 - then let's first take care of the base
10:15 - case
10:16 - that's one N is equal to zero or one
10:19 - we're just gonna return one and if
10:21 - that's not the case or else we're gonna
10:24 - return the sum of numbers n minus 1 and
10:26 - num ways and minus 2 now examining this
10:30 - function you probably see that this is
10:32 - just like the Fibonacci sequence and you
10:35 - might also see that this is not the most
10:37 - efficient way to find num ways to see
10:40 - why let's just quickly examine when n is
10:42 - equal to 4 or when you call n wo 4 or
10:46 - num ways of 4 to find and return value
10:49 - of n w4 you need to first find the
10:52 - return values for n w3 + NW of 2 and to
10:56 - compute NW of 3 or num ways of 3 you
10:59 - need to first compute and W 2 and n W 1
11:03 - and so on and just looking at this tree
11:06 - you see that n W of 2
11:08 - is repeated twice and that's wasteful
11:10 - and it's wasteful because we need to
11:13 - repeat the same computation twice to
11:15 - find the value of NW of two and this
11:18 - problem gets worse and worse as n
11:20 - becomes larger and larger so let's see
11:23 - how we can fix that we can fix it with
11:25 - dynamic programming and one way to
11:27 - implement it would be with a bottom-up
11:30 - approach so let me just quickly explain
11:32 - the idea here for the bottom-up approach
11:34 - we're gonna use this table of N and num
11:38 - ways of N and at the beginning we don't
11:41 - have the values for num ways of N and
11:44 - let's say as an example we're trying to
11:46 - find the value of num ways of 4 so n is
11:50 - equal to 4 in that case we'll first
11:53 - construct an array of length 5 or length
11:57 - n plus 1 and then we'll know right away
12:00 - that the first two elements of that
12:03 - array should be 1 because that's the
12:05 - base case that we have here and after
12:08 - that we'll find a value for each element
12:11 - by adding up the two previous elements
12:13 - so 1 plus 1 equals 2 and then 1 plus 2
12:17 - equals 3 and so on and once we find the
12:21 - value that we were looking for which is
12:23 - 5 in this case we'll just return it from
12:26 - our function and that approach is going
12:29 - to look like this in code we're gonna
12:31 - call this function num ways bottom up
12:34 - and it's gonna take a positive integer n
12:37 - and first of all we're gonna take care
12:39 - of the base cases when n is equal to 0
12:42 - or 1
12:43 - we're gonna return 1 and otherwise or if
12:46 - we haven't returned yet we're gonna
12:48 - initialize an array an integer array of
12:51 - length n plus 1 and then we're going to
12:53 - assign it to a variable called num and
12:56 - then we're gonna set the first two
12:58 - numbers of this array num 0 and nums 1
13:02 - to 1 and after that we're gonna run a
13:05 - for loop for i from two that's two right
13:10 - here up to n that's for example 4 and
13:14 - for each of those i Nam's i or the
13:18 - current element that we're examining
13:19 - should be the sum of the
13:22 - previous two elements noms I minus one
13:24 - and noms I minus two and after we find
13:27 - the last number of this array or noms of
13:31 - n we're just gonna return that now this
13:34 - function works just fine but if you want
13:37 - to make it more efficient or if you want
13:39 - to save more space there's a way to do
13:41 - that so when you're running this for
13:44 - loop when I is equal to for example 3
13:47 - right here to find num ways of 3 right
13:51 - here you don't need all the elements in
13:53 - the array
13:54 - all you need is the two previous
13:56 - elements so basically you only need to
13:58 - store only two elements at a time as you
14:02 - go through this for loop so you can
14:04 - store these two elements and then these
14:06 - two elements and these two elements and
14:08 - so and that way you can save some space
14:11 - so anyway this is my solution to the
14:15 - first problem let's take a look at the
14:17 - variation I told you about as I
14:19 - explained earlier in this variation of
14:21 - the problem you're given n as well as X
14:25 - which is a set of numbers of steps you
14:28 - can take at a time and let's solve this
14:30 - problem recursively as well and we're
14:32 - gonna base our recursive solution to
14:34 - this problem on the recursive solution
14:37 - that we saw earlier to the previous
14:39 - problem so we have the function we saw
14:41 - earlier num ways the only difference
14:44 - from what we saw earlier is the fact
14:46 - that we don't have an else statement and
14:48 - with the same kind of argument that I
14:51 - used earlier you should be able to find
14:53 - this recursive relationship num ways of
14:56 - n is the sum of numbers of n minus 1 and
15:00 - numbers of animals 3 and num ways of n
15:03 - minus 5 if the given X is this one 1 3 &
15:07 - 5 so based on this function and based on
15:11 - this recursive relationship your
15:12 - intuition might say that your function
15:14 - let's call it num ways X should look
15:18 - like this again I'm assuming that X is 1
15:22 - 3 5 4 now and this says the base case
15:26 - when n is equal to 0 we should return 1
15:29 - and otherwise we should return the sum
15:31 - of numbers of n minus 1 and minus 3 and
15:34 - n minus 5 but
15:36 - this function is not gonna work so when
15:38 - n is for example two num ways of n minus
15:42 - 3 would be num ways of minus 1 and none
15:46 - ways of minus 1 isn't defined well so
15:49 - let's see how we can fix it I would fix
15:51 - it by only adding num ways of n minus 3
15:55 - to the total that we're gonna return
15:57 - only when n minus 3 is greater than or
16:01 - equal to 0 because only when n minus 3
16:04 - is greater than or equal to 0 num ways
16:07 - of n minus 3 is well-defined and we're
16:10 - gonna do the same thing for num ways of
16:12 - n minus 5 as well and let's see how that
16:15 - might look like in code here I'm gonna
16:17 - call this new function num ways X as
16:20 - well of course it's going to take a
16:22 - positive integer n and returns the
16:24 - number of ways you can climb over a
16:27 - staircase of n steps will first take
16:30 - care of the base case when n is equal to
16:32 - 0 we're going to return 1 and then we're
16:35 - gonna define a new variable called total
16:37 - we're going to assign 0 to it and after
16:41 - that we're gonna run a for loop for each
16:43 - I in this set 1 3 5 for example and only
16:49 - when n minus I is greater than or equal
16:52 - to 0 we're gonna add num ways X of n
16:55 - minus I to total and at the end of this
16:59 - function we'll just return total okay so
17:01 - this function works but just like we saw
17:04 - earlier this is not the most efficient
17:06 - way to do it so let's see how we can fix
17:08 - it with a bottom-up approach again let's
17:11 - call our bottom-up function num ways X
17:14 - bottom-up and in this function first of
17:18 - all we're gonna take care of the base
17:19 - case
17:20 - if n is equal to 0 we should return 1
17:22 - and then just like the bottom-up
17:25 - approach we saw earlier for the previous
17:27 - problem we're gonna define an integer
17:29 - array whose length is n plus 1 and then
17:33 - we're going to assign it to nums
17:35 - and we're gonna set the first element of
17:38 - this array to 1 after that we're gonna
17:42 - run a full loop for i from 1 up to n and
17:46 - in this for loop we're gonna do pretty
17:49 - much
17:50 - exactly the same thing as what we did
17:52 - earlier in this portion of the code so
17:54 - this is just the recursive solution that
17:58 - we've developed earlier so in this for
18:00 - loop first of all we're gonna define a
18:02 - variable called total to zero and then
18:05 - we're gonna run another for loop inside
18:07 - this for loop and that's gonna say for
18:09 - each J in this set for example 1 3 & 5
18:12 - only if I minus J is greater than or
18:16 - equal to zero we're gonna add nums of I
18:19 - minus J to total and nums of I minus J
18:23 - here corresponds to nan weighs X of I
18:26 - minus J so that's the number of ways we
18:29 - can climb over a staircase of I minus J
18:32 - steps and after this inner for loop for
18:36 - each J we find the value of total we're
18:39 - going to assign that to noms of I and
18:42 - numbers of I here is the number of ways
18:46 - you can climb over staircase of I steps
18:48 - and then do the same thing from 1 up to
18:53 - N and once we find the value of num of n
18:56 - that's the answer that we're looking for
18:58 - so we're just gonna return that and if
19:00 - you want to modify this function so that
19:02 - it works with any X any set of numbers
19:05 - not just this particular set of numbers
19:08 - then you just need to replace this with
19:10 - X and then have this function take X as
19:14 - an extra argument okay now this problem
19:18 - actually came from this website called
19:20 - daily coding problem it's a website
19:23 - where you can get a daily coding problem
19:25 - just like this one and if we want more
19:28 - problems like this one I'd actually
19:29 - highly recommend it it's actually a
19:31 - website that's made by a friend of mine
19:33 - who I used to work with at Google too
19:35 - and if you use my referral link CS dojo
19:38 - dot io / daily it'll let them know that
19:41 - you came from here and with that link
19:43 - you can get a 10% discount on their
19:46 - premium subscription as well but
19:48 - personally I would say that even their
19:50 - free option and there are blog articles
19:52 - on the site have a lot of value - anyway
19:55 - thanks a lot for watching this video as
19:57 - always and I'll see you in the next one