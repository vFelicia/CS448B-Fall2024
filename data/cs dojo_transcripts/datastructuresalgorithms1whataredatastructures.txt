00:00 - hey YouTube just in case you're new here
00:02 - my name is YK and I was formerly a
00:05 - software developer at Google and now I
00:07 - work on this YouTube channel full time
00:09 - and welcome to my data structures and
00:11 - algorithms series number one what are
00:13 - data structures so a one sentence
00:16 - description of what data structures are
00:18 - would be that there are basically
00:20 - different ways of storing data on your
00:22 - computer and this sentence might not be
00:25 - too clear right now so let me give you a
00:27 - more concrete example here let's say you
00:29 - want to make a system that's sort of
00:31 - like Google Maps for your neighborhood
00:33 - now let's say your neighborhood looks
00:34 - like this so your home is here and
00:37 - there's a store here and another store
00:39 - here and so on and there are some
00:41 - streets too so these arrows show that
00:44 - these are one-way streets there are a
00:46 - lot of one-way streets here and so for
00:48 - example you can go from store to store B
00:51 - but not the other way around and all the
00:54 - other lines here there are not arrows
00:56 - show that they are two-way streets and
00:59 - let's say that you already have each
01:01 - place is coordinates there are latitudes
01:03 - and longitudes stored on your computer
01:06 - like this as you can see from this table
01:09 - you can tell that the latitude of home
01:12 - is forty-nine point two and the
01:15 - longitude of home is minus one hundred
01:18 - twenty three point four and so on now
01:20 - from this table like information you can
01:23 - tell where each location is exactly
01:25 - where each point is exactly but you
01:28 - can't tell how these locations are
01:31 - connected with streets and where the
01:33 - streets are exactly so you need to
01:35 - figure a way to store that information
01:37 - somehow on your computer and there are
01:39 - actually a few different options for
01:41 - this one of those options will be to
01:43 - store all possible paths in a list like
01:46 - format so for example one of those paths
01:49 - will be from store a to home and another
01:52 - one will be home to store a and yet
01:55 - another path will be store a to store B
01:58 - and with that method your data might
02:01 - look like this and from this list like
02:04 - information you can tell that as we saw
02:07 - earlier you can go from home to store a
02:10 - and from store a to home and home
02:13 - to store B and so on but you can't go
02:17 - from store B to home because this is a
02:19 - one-way street and so there's no path
02:22 - from store B to home in this list okay
02:25 - so that's just one option another option
02:28 - might be to list each of these places
02:30 - and for each of those places just list
02:33 - all the places you can go from that
02:35 - place and with that method your data
02:38 - might look like this instead as you can
02:41 - see here we have table like information
02:43 - again where on the left hand side we
02:46 - have all the places listed home store a
02:49 - store B school and then intersection
02:52 - this one right here and on the right
02:55 - hand side for each of those places we
02:57 - have all the places you can go from
02:59 - there so from home you can go to store a
03:03 - store B and intersection as you can see
03:06 - here and from store a you can go to home
03:09 - or store B so these two methods are
03:13 - basically two different ways of storing
03:15 - exactly the same set of data and as you
03:18 - can see they have sort of different
03:20 - structures and so these are simplified
03:24 - examples of what data structures look
03:26 - like now if you're already familiar with
03:28 - data structures you might notice that
03:30 - the first method corresponds to the
03:32 - array or a list data structure and the
03:35 - second method corresponds to the hash
03:37 - table or hash map data structure okay so
03:40 - that's one simple example of what data
03:43 - structures are but this video series is
03:45 - called data structures and algorithms so
03:48 - what are algorithms one way to define
03:51 - what they are would be that there are
03:53 - the operations we can perform on
03:55 - different data structures and the sets
03:57 - of instructions for executing them so
04:00 - one example here might be something like
04:02 - this coming back to the previous example
04:04 - we had let's say you want to find the
04:07 - shortest path from home to school so in
04:11 - this problem by hand is pretty easy
04:13 - pretty much right away you can see that
04:15 - there are three potential paths from
04:17 - home to school one of them is this one
04:20 - just go to store a store B and then
04:23 - school another one is this one store B
04:26 - and this
04:27 - cool and another one the other one is
04:29 - from home to intersection to school and
04:33 - for these three paths just compare the
04:36 - distance that you need to travel for
04:37 - each of these paths and then pick the
04:40 - shortest one and to compute the distance
04:42 - that you need to travel for each of
04:44 - these paths you can for example use the
04:47 - longitudes and latitudes the coordinates
04:49 - of each of these places and find the
04:52 - distance in kilometers so solving this
04:54 - problem by hand is pretty much trivial
04:57 - but if you want to turn this into
04:59 - something a computer can understand you
05:01 - need to be much more systematic about it
05:03 - so to make this strategy something a
05:06 - computer can understand easily you might
05:09 - come up with a set of instructions like
05:10 - this one first of all find all the
05:13 - places you can go from home so in this
05:16 - example that's store a store B and then
05:19 - the intersection and then from each of
05:22 - those places find all the paths you can
05:25 - take from that place so from store a you
05:28 - can go to store B and from store B you
05:31 - can go to school and from intersection
05:33 - you can only go to school and as you go
05:36 - keep track of the distance you've
05:38 - traveled so far for each of those paths
05:40 - and keep repeating this process until
05:43 - you get to the school then if you happen
05:46 - to find multiple paths that allows you
05:50 - to go from home to school then compare
05:52 - the distance that you've traveled for
05:54 - each of those paths and finally find a
05:56 - path with the shortest distance traveled
05:58 - and then pick that as the shortest path
06:01 - okay so that's the result we were
06:04 - looking for in the first place and this
06:06 - is a good example of what an algorithm
06:08 - is basically you have a problem you're
06:10 - going to solve in this case finding the
06:12 - shortest path from home to school and
06:14 - then you have a set of systematic
06:17 - instructions for solving that problem
06:19 - now one thing to note here is that
06:21 - depending on what data structure you're
06:24 - using to store the data that you're
06:27 - performing the algorithm on your
06:29 - algorithm might look slightly
06:31 - differently you might even have in some
06:34 - cases completely different algorithms
06:36 - for solving the same problem depending
06:38 - on what data structure you're using
06:40 - in this particular example we talked
06:43 - about two different options for storing
06:45 - the information about where the streets
06:48 - are and how they connect different
06:50 - locations the first option was to just
06:54 - list all possible paths and remember
06:57 - that the first step in our algorithm was
06:59 - to find all the possible places you can
07:02 - go from home and to do that with the
07:05 - first stair structure this one right
07:06 - here you might actually need to go
07:08 - through the entire list because in this
07:11 - particular list we have three paths here
07:14 - from home but it's possible that we have
07:17 - another path from home right here at the
07:19 - end of the list so you need to go
07:21 - through the entire list just in case on
07:24 - the other hand if you use the second
07:26 - data structure that we discussed we have
07:29 - all the possible places you can go from
07:30 - home listed right here as a group so as
07:35 - soon as we find the home row in this
07:38 - table you won't need to go through the
07:40 - entire table anymore so in this
07:42 - particular example using the second
07:44 - structure actually makes it slightly
07:46 - easier to implement the algorithm that
07:49 - we discussed now there are structures
07:51 - and algorithms are really important to
07:53 - learn because they'll help you write
07:55 - efficient software as a software
07:56 - developer so for example when I was
07:59 - working at Microsoft as a data science
08:02 - intern I had to write this piece of code
08:04 - to retrieve some data and when I wrote
08:07 - it originally it was taking like seven
08:09 - to ten hours and basically it was too
08:11 - slow because we didn't want we didn't
08:13 - want to wait that long so I rewrote it
08:16 - using my knowledge of data structures
08:18 - and algorithms and after rewriting it
08:20 - the new version only took like five to
08:23 - ten minutes to load that data so that's
08:26 - why learning them is important and it's
08:28 - actually useful in many practical
08:30 - situations that you might encounter as a
08:32 - software developer - okay to give you an
08:34 - even better idea about what data
08:36 - structures are like let me give you
08:38 - another example here let's say you're
08:41 - hosting a party and you're expecting a
08:43 - bunch of people and this example is
08:45 - gonna be a little bit silly but just
08:47 - follow along and you're gonna see why
08:49 - I'm talking about this particular
08:50 - example anyway let's say that each
08:53 - person
08:54 - come to the party we'll bring sort of
08:57 - like a small ball with them like a ball
08:59 - that can fit in their hand and this ball
09:02 - will have their name written on it so
09:04 - when David comes to the party he'll have
09:07 - a ball with David written on it and when
09:11 - Kevin arrives to the party he'll have a
09:13 - ball with Kevin written on it and so on
09:16 - and this is just a silly little system
09:18 - that you came up with for keeping track
09:21 - of who came to the party in which order
09:23 - because writing now each person's name
09:26 - would be a lot of work you're just too
09:28 - busy hosting a party so as someone who's
09:31 - studying computer science let's say
09:33 - you're trying to come up with an
09:34 - efficient system for storing these balls
09:37 - so that you can keep track of who came
09:39 - to the party one idea you have is this
09:42 - one you get a very long box with 100
09:46 - partitions a lot of partitions and each
09:49 - partition let's say has exactly the same
09:51 - shape you know 10 centimeters by 10
09:54 - centimeters let's say and every time
09:56 - someone comes to the party you're just
09:58 - gonna put that person's ball with their
10:01 - name written on it in the order they
10:03 - came to the party so David's ball will
10:05 - come in here and Kevin's will come in
10:07 - here and so on and this is actually sort
10:10 - of like a data structure that's realized
10:12 - in real life and this actually
10:15 - corresponds to the data structure called
10:17 - array in computer science and here's
10:20 - another idea you have you get a bunch of
10:23 - boxes and this time instead of getting a
10:26 - long box with many many partitions you
10:29 - want to get individual boxes that are
10:31 - connected with strings so the first box
10:34 - is connected to the second box with a
10:36 - string and that's connected to the third
10:39 - box with a string and so on and just
10:41 - like before you want to put these tokens
10:44 - with participants names written on them
10:46 - in these boxes just one by one in the
10:49 - order they came in so David's token will
10:52 - come in here and Kevin's ball will come
10:54 - in here and so on and this sort of data
10:57 - structure that's realized in real life
10:59 - corresponds to the linked list data
11:02 - structure in computer science okay so
11:04 - the natural question here would be which
11:07 - data structure
11:08 - use for this party well it actually
11:11 - depends because it highly depends on the
11:14 - particular situation and the nature of
11:16 - the party really and each data structure
11:18 - has advantages and disadvantages okay
11:21 - think about this situation let's say 100
11:24 - people showed up to your party and
11:26 - you're pretty happy about it but
11:28 - suddenly you realize that the 98th
11:30 - person is Paul had been misspelled that
11:33 - person's name had been misspelled so you
11:35 - want to fix that with the array data
11:37 - structure it's actually pretty easy you
11:39 - just need to find the 98th partition and
11:42 - that exact location can be calculated
11:45 - easily because you know that each
11:48 - partition is ten centimeters wide so you
11:51 - just need to find ten centimeters times
11:54 - ninety seven actually which is nine
11:57 - hundred seventy centimeters so you just
12:00 - need to walk over from the beginning
12:02 - nine hundred seventy centimeters and
12:04 - then you can find the 98th person's
12:07 - token pretty easily you just need to
12:09 - replace that with the correct token with
12:11 - the link list data structure though
12:13 - doing the same thing would be slightly
12:15 - more tricky and that's because finding
12:17 - the 98th person or finding the 98th box
12:21 - here would be much harder and the reason
12:24 - for that is because these strings are
12:27 - pretty soft and they can be pretty much
12:30 - any lengths so each box can be in any
12:34 - location relative to the previous box so
12:37 - this first box might be in the living
12:39 - room and the second box might be in the
12:42 - kitchen and so on so to find in 98th box
12:45 - what you need to do is you need to count
12:47 - them one by one so you need to say okay
12:50 - this is the first box and then this is
12:52 - the second box and let's find the third
12:55 - box fourth and so on until you get to
12:58 - the 98th person at this point you might
13:00 - say well the array data structure is a
13:03 - better one then well not necessarily so
13:05 - think about this situation let's say you
13:08 - have 100 people showing up to the party
13:11 - and you're pretty happy about it but
13:13 - suddenly five more people show up that
13:15 - you didn't expect with the linked list
13:18 - data structure it's pretty easy to deal
13:20 - with that you can just
13:22 - add five more boxes find five more boxes
13:25 - somewhere and then five more strings and
13:27 - just add them to the last box you had in
13:32 - the linked list data structure and then
13:34 - store the five people's tokens in those
13:37 - boxes with the array data structure
13:40 - though it's a little bit more tricky one
13:42 - option here would be to get another box
13:45 - with let's say 100 partitions again and
13:49 - store those people's tokens there and
13:52 - use the two boxes together or you could
13:56 - destroy the first box you had and then
13:59 - get a box with even more partitions
14:02 - let's say 200 partitions and then
14:05 - transfer all the balls you had for the
14:07 - first 100 people to the new box and then
14:10 - after that add the additional five
14:13 - people's tokens in the new box and in
14:16 - general if you have no idea how many
14:18 - people are coming to the party let's say
14:21 - anywhere between 5 to 1,000 people
14:24 - the linked list data structure might be
14:27 - slightly more convenient than the array
14:29 - because linked lists are so much easier
14:32 - to resize than it is to resize a race ok
14:36 - and this was another simplified example
14:38 - of what data structures are like on a
14:41 - computer and this sort of gives you a
14:43 - rough idea about how to actually start
14:46 - thinking about them and throughout this
14:48 - course I'm going to introduce you to
14:50 - even more data structures and this time
14:52 - I'm going to explain them in a much more
14:54 - technical way using concepts like
14:56 - classes objects memory and maybe even
14:59 - some code snippets too now if you're
15:02 - just getting started with data
15:03 - structures and algorithms one thing to
15:05 - keep in mind that's actually really
15:07 - important is to apply what you've
15:09 - learned through solving problems and the
15:12 - reason I say that is because it's so
15:14 - common for beginners to learn these
15:16 - concepts and not actually be able to use
15:19 - them in a real-world situation because
15:21 - they haven't had enough practice and
15:23 - actually this video sponsor brilliant
15:25 - org has an interesting website for
15:28 - learning these concepts in a sort of a
15:30 - new way ok to show you what I mean let's
15:32 - take a look at their computer science
15:34 - fundamentals course right
15:35 - here which I would recommend for you
15:37 - guys and let's go into the intro to
15:39 - algorithms section and you can see that
15:41 - it covers topics like arrays searching
15:44 - insertion sort and Big O notation and in
15:47 - the arrays section they have a bunch of
15:49 - explanations about the topic and as you
15:52 - continue you'll give you a quiz to test
15:55 - your understanding of the topic so it's
15:58 - definitely an interesting way to learn
16:00 - computer science concepts by solving
16:02 - problems okay if you want to check it
16:04 - out for yourself just go to brilliant
16:06 - org slash CS no joke
16:08 - and going to this link will actually
16:10 - help support this channel and the first
16:13 - 200 people will get 20% off the annual
16:16 - subscription and actually I'm super
16:19 - excited about this because they're the
16:21 - first sponsor I have on this YouTube
16:23 - channel and I feel like I'm becoming a
16:25 - professional youtuber finally so thanks
16:27 - for that brilliant ok as always I'm YK
16:30 - from CS dojo thanks for watching and
16:32 - I'll see you guys in the next video