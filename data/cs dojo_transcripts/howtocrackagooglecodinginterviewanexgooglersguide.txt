00:00 - hey everyone my name is YK and I'm a
00:02 - former software developer at Google in
00:05 - this video I'm going to walk you through
00:07 - the process I would personally use to
00:09 - get through an actual coding intimate
00:11 - question from Google here I'm going to
00:13 - use a question from Google as an example
00:16 - but you'll be able to use the same
00:17 - process to get to programming interviews
00:19 - with any company and I chose a
00:22 - relatively simple problem here so that I
00:24 - can explain the whole process quickly
00:26 - now here's the problem you're given an
00:29 - array of integers for example 1 3 2 4
00:31 - which represents a number this array
00:35 - represents 1324 and the problem is
00:40 - writing a function that takes this array
00:42 - and as 1/2 this number so your function
00:47 - if you're given this array should return
00:49 - 1 3 to 5 which represents 1325 now how
00:58 - would I solve this problem let me walk
01:00 - you through the whole process I would
01:02 - personally use to solve this problem
01:03 - step by step step 1 start with
01:07 - clarifying questions and a high-level
01:09 - discussion one of the clarifying
01:11 - questions you could have asked here is
01:13 - could this array be empty and the
01:17 - interviewer might say no it cannot be
01:19 - empty and you could also ask can we
01:22 - always assume that each element of this
01:24 - array is always an integer between 0 and
01:28 - 9 now let's say it is indeed the case so
01:33 - each element of this array is always an
01:35 - integer between 0 & 9 and you might ask
01:38 - a few more questions to clarify all the
01:40 - assumptions you have once you feel like
01:43 - you have enough information to start
01:44 - solving this problem you should start
01:46 - with a high-level discussion in this
01:49 - stage just explain the ideas you have in
01:51 - concept first without using too much
01:54 - code and it's important not to start
01:57 - coding right away especially for a more
01:59 - complex problem so that you don't waste
02:01 - time writing code on a solution that
02:03 - doesn't work in the end for example for
02:06 - this problem you might say something
02:07 - like what this problem would be easy
02:10 - if the given array ends with a number
02:12 - that's not nice
02:14 - for example for this array 1 3 2 4
02:16 - because in that case we can just add 1
02:20 - to the last item and we get 5 and then
02:24 - copy over everything else if the last
02:28 - integer is 9 so if we had for example 1
02:32 - 3 2 9 instead of 1 3 2 4 then we need to
02:36 - change this number to 0 and then carry 1
02:41 - to the next number and keep repeating
02:44 - this process until we have nothing to
02:46 - carry at that point we can copy over
02:49 - everything else and we are done the only
02:53 - tricky case for this problem is when we
02:55 - have something like 999 or 999 in the
03:01 - given array because then the new array
03:04 - will need to be 1 0 0 0 so from our
03:10 - function we'll need to create a new
03:12 - array with a different length a length
03:15 - for here and then we turn this new array
03:19 - for this problem or maybe if the problem
03:22 - is more complex I'd recommend that you
03:24 - list out a few potential approaches you
03:27 - could use to solve this problem for
03:29 - example for this particular problem you
03:31 - might say well I'm thinking about using
03:33 - either an iterative approach with a for
03:37 - loop or with a recursive approach with
03:42 - recursion especially for a more complex
03:45 - problem it's really important to list
03:47 - out a few potential solutions you have
03:49 - in mind
03:50 - because it's rare for you to get to the
03:52 - optimal solution with your first idea if
03:55 - you're confident enough that your first
03:57 - idea is the optimal solution then go for
04:01 - it but if not list out a few potential
04:03 - solutions before you start coding now on
04:06 - to step 2 choose your approach and start
04:09 - coding here in this example you might
04:12 - say something like well I think the
04:14 - iterative solution is a good solution so
04:16 - let me start coding with that or if
04:19 - you're not 100% sure if your solution is
04:21 - correct or optimal you could also say
04:24 - something like well I think the EDA
04:25 - resolution is good
04:27 - should I start coding with that just by
04:30 - asking that question should I start
04:31 - coding you're communicating more with
04:34 - the interviewer which is always good in
04:36 - a coding interview and you're also
04:38 - making sure that you're going in the
04:40 - right direction just by asking that
04:42 - question now I'm going to switch to a
04:44 - Google Doc to explain this idea just
04:46 - like a phone interview but if you're
04:48 - using a whiteboard to solve this problem
04:50 - in an in-person interview it's the same
04:52 - idea I'm going to use pseudocode to
04:55 - explain my solution here but in the real
04:57 - interview usually you're supposed to use
05:00 - a real language whether it's Python Java
05:03 - or JavaScript the first thing I would
05:05 - recommend that you do with this type of
05:07 - problem is to write your function header
05:10 - in this case it might look like this
05:12 - define add one or a function with the
05:17 - input given array and explain the input
05:20 - and the output for this function you
05:22 - might say something like this function
05:24 - is going to take the given array as the
05:27 - input and the output will be the new
05:29 - array for example if you're given 1 3 4
05:33 - as the given array the output from this
05:36 - function will be 1 3 5 and you might say
05:39 - instead of modifying the given array
05:41 - directly I'm going to create a new
05:43 - instance of an array and then return
05:46 - that instead this is necessary in case
05:49 - for example when the given array is 9 9
05:52 - 9 because in that case we'll need to
05:54 - return an array whose length is
05:57 - different from the original array after
06:00 - that start writing your solution as you
06:03 - explain the code and this process will
06:05 - be iterative in nature so you might
06:08 - write a little bit of code and then you
06:10 - might go back to thinking a little bit
06:12 - about your solution and then write your
06:14 - code a little bit more and my
06:16 - recommendation here is to always think
06:19 - with specific examples in mind as you
06:21 - write code so for example with this
06:24 - particular problem you might say
06:26 - something like well the first thing
06:28 - we'll need to do is we'll need to create
06:30 - a new instance of an array and then I'm
06:34 - going to create it with the length being
06:35 - the same as the original array for
06:37 - example 1 3 4 and if we have an edge
06:40 - case
06:41 - like this where we have 999 or 999 then
06:46 - we'll need to create a new array again
06:48 - at the end of the function and then we
06:51 - turn that instead so to create a new
06:54 - instance of an array with the same
06:56 - length as the original one in suit code
06:58 - we might write something like this
07:00 - result will be the new array and then
07:03 - we're initializing a new array an
07:05 - integer array let's say with the length
07:08 - being the same as given arrays length
07:11 - and another thing we'll need to take
07:13 - care of is the carry so for example if
07:16 - we had 1 9 9 and then if we initialize
07:21 - this array for example to 0 0 0 then
07:25 - when we look at this number then we'll
07:28 - know that the last digit in the new
07:31 - number should be 0 and they will need to
07:34 - carry 1 to this number and we'll know
07:37 - that the second number should be 0 and
07:39 - then carry 1 again and we'll know that
07:41 - this number should be 2 and to keep
07:45 - track of if we need to carry anything
07:47 - we'll just initialize a new variable
07:49 - called carry and then we'll set it to 1
07:53 - because we need to add 1 to the last
07:56 - digit and with the example we saw
07:59 - earlier this example we saw that we need
08:01 - to iterate over each item or each digit
08:05 - from right to left so we're going to do
08:09 - that with a for loop with for i from
08:11 - given array length minus 1 down to 0
08:16 - again with this example given array dot
08:20 - length will be 3 so given array dot
08:22 - length minus 1 will be 2 which will
08:25 - point to this item or that's the index
08:28 - for this item and then I will go from 2
08:32 - to 1 to 0 so that we can iterate over
08:35 - each digit and we'll need to add the
08:38 - carry either 1 or 0 to the current item
08:42 - the current digit will do that with some
08:46 - eCos given array square brackets I the
08:48 - current digit plus carry and if this sum
08:52 - is equal to 10
08:54 - we'll set care
08:55 - to one because we'll need to carry one
08:57 - to the next number and if some is not
09:00 - equal to ten or else we'll set carried
09:04 - to zero and the current digit in the new
09:07 - number or result of square brackets I
09:10 - for example if we're examining this
09:14 - number right here we're talking about
09:16 - this digit that number or result square
09:19 - brackets I should be some mod 10 and
09:23 - this is just to say if the sum is ten we
09:27 - should have zero end result and if the
09:30 - sum is less than 10 we should have the
09:33 - same number as some in the result for
09:36 - example if the sum is 5 5 mod 10 will be
09:40 - just 5 now this takes care of most cases
09:44 - except for this case when all the digits
09:47 - are 9 in that case what we would have is
09:51 - we'd have 0 0 0 as the current result
09:56 - and the carry at that point will be 1
09:58 - because of course when we are examining
10:00 - this number the carry there is 1 and 1
10:04 - plus 9 is 10 and they will have carry
10:06 - equals to 1 so after the for loop
10:10 - if carry is still equal to 1 that means
10:14 - we have a case like this where all the
10:17 - digits are 9 we're going to take care of
10:19 - that by creating a new array and
10:21 - assigning it to result with a new
10:25 - integer array given array the length
10:27 - plus 1 so we're creating a new array
10:30 - here with the length being one item
10:32 - longer than the given array and assuming
10:34 - that this initializes an array with all
10:37 - the elements being 0 we'll just need to
10:40 - set the first item to one and that way
10:44 - we'll be able to take care of this case
10:46 - when all the items are 9 after that just
10:50 - return result and that's my solution now
10:53 - step 3 check your solution and discuss
10:56 - performance such as time and space
10:58 - complexity I've copied over the code we
11:01 - had earlier right here to check your
11:04 - solution you should walk through your
11:05 - code line by line using maybe a few
11:08 - weeks
11:09 - simples and make sure it works and
11:10 - here's how I would do it let's think of
11:13 - one example for example one two nine
11:17 - nine as the input given array then we
11:20 - can just look over this code line by
11:22 - line carry will be 1 and then result at
11:27 - the beginning will be let's say 0 0 0 0
11:30 - because this is just an array of the
11:32 - same length as the original array after
11:35 - that we're going to run a for loop for I
11:38 - from given array length minus 1 given
11:42 - array dot length is 4 so I will start at
11:45 - 3 and it'll go to 2 to 1 to 0 when I is
11:52 - equal to 3
11:53 - we'd be examining these elements and the
11:57 - total will be given array square
11:59 - brackets 3 which is 9 plus carry which
12:03 - is 1 so the total will be 10 and since
12:07 - total is 10 carry will still be 1 and
12:10 - the current item of result or real
12:13 - result square brackets I or result
12:15 - square brackets 3 in this case will be
12:18 - total mod of 10 which is 0 and we go to
12:23 - the next value of I which is 2 we're
12:26 - going to repeat the same thing and the
12:28 - current value of result will be 0 carry
12:31 - will still be 1 and then I becomes 1
12:35 - when I is equal to 1 total this time
12:38 - will be given a race car buckets I which
12:41 - is 2 plus carry which is 1 and so total
12:45 - will be 3 and since total is not equal
12:49 - to 10 Kerry will be 0 and then result
12:52 - will be 3 mod 10 which is 3 so the
12:57 - current value of result will be 3 and
12:59 - since at that point Kerry will be 0
13:02 - total will be just given a race car
13:05 - buckets I plus carry but we can just
13:07 - ignore Kerry since its darrell and total
13:10 - here will be 1 and Kerry will still be 0
13:14 - and the current item in the result array
13:16 - or results car bracket 0 will be total
13:20 - mod 10 which is 1
13:23 - after that since Carrie is not equal to
13:25 - one it's still zero we're going to
13:28 - return results which is one three zero
13:31 - zero so that's how you can go through
13:33 - one example to be sure you can go
13:36 - through a few other examples too
13:38 - for example 999 or just zero now in this
13:43 - particular example the space complexity
13:46 - and the time complexity are fairly
13:48 - simple let's first think about time
13:50 - complexity because we go through this
13:53 - entire array at most once or twice when
13:57 - we create a new array in the case of 9 9
14:01 - 9 the time complexity is Big O of n
14:04 - where n is the number of items in the
14:08 - given array the space complexity will be
14:10 - big-oh of n as well because the most we
14:15 - create the most space we create is for
14:19 - the new array which is Big O of N and
14:22 - that's the framework I would personally
14:24 - use for cracking a googol coding
14:26 - interview or coding interviews from any
14:29 - other company for that matter if you
14:31 - like this video I would also recommend
14:32 - my course on udemy 11 essential coding
14:35 - into big questions and that's the
14:38 - framework I would personally use for
14:40 - cracking a Google coding interview or
14:41 - coding interviews from any other company
14:44 - for that matter if you like this video I
14:46 - would also recommend my course on udemy
14:48 - 11 essential coding into big questions
14:51 - in which I cover eleven of the most
14:53 - essential coding interview questions to
14:55 - master for your next coding interview in
14:58 - case you're interested in taking a
14:59 - course I put a discount code below in
15:01 - the description or our thanks for
15:03 - watching this video and I'll see you
15:05 - soon