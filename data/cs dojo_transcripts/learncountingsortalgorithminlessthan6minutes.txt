00:00 - here's a quick introduction to counting
00:02 - sort let's say as an example we are
00:04 - trying to sort this array into an
00:06 - ascending order and counting so it works
00:09 - the best when the range of numbers each
00:11 - value could have is very small in the
00:13 - array so let's say the range of values
00:16 - that we could have for each item is 0 1
00:19 - 2 & 3 the first part of applying
00:24 - counting sort is going to be finding the
00:26 - starting index for each number and it's
00:29 - going to be clear what I mean by that in
00:31 - a second and the first step for doing
00:33 - that is going to be counting the number
00:35 - of occurrences for each number in the
00:37 - array so for this example there's only
00:40 - one occurrence of 0 and 3 occurrences of
00:43 - 1 so I'm going to write down 1 and 3 and
00:47 - then 2 occurrences of 3 and 0 currencies
00:51 - of 2 and we can store these numbers in
00:55 - an array of length 4 in this particular
00:57 - case once we have these numbers the
01:00 - number of occurrences for each number
01:02 - the second step is going to be adding
01:05 - each number to the right of it
01:07 - accumulatively
01:08 - what I mean by that is the first number
01:11 - at index 0 stays the same and the second
01:14 - number will be 1 plus 3 equals 4 and the
01:19 - third number will be 4 plus 0 which is
01:22 - equal to 4 and the fourth number at the
01:25 - index 3 will be 4 plus 2 which is equal
01:28 - to 6 after that step we have the numbers
01:32 - 1 4 4 6 4 the numbers 0 1 2 & 3 the next
01:39 - step is going to be shifting this whole
01:41 - array to the right by one cell and we're
01:45 - going to do that by looking at this
01:47 - array from right to left we're going to
01:50 - first start with the last index which is
01:52 - in x3 in this particular case and the
01:55 - value there should be the value that's
01:58 - currently in index 2 so we're going to
02:00 - put four in x3 and we're going to do the
02:04 - same thing for in x2 the value here
02:07 - should be what's in index one currently
02:10 - so it should also be 4
02:13 - and at index one we're going to put one
02:15 - at index zero we're going to put zero
02:19 - and these numbers 0 1 4 4 are actually
02:24 - the starting indexes for the range of
02:27 - numbers we have in this particular case
02:28 - 0 1 2 & 3 and here's one way to think
02:33 - about it
02:33 - if you look at the number 3 or the index
02:36 - 3 the corresponding number the
02:39 - corresponding starting index is 4 and
02:41 - that's because when we sort this array
02:45 - the number 3 will start at the index for
02:49 - another way to think about it is that
02:51 - there are 4 items that should appear
02:54 - before the number 3 in the sorted array
02:57 - and that should be obvious if you just
03:00 - look at the first array that we
03:01 - constructed there's one occurrence of 0
03:05 - 3 occurrences of 1 and 0 occurrences of
03:08 - 2 so adding them up there are 4 items
03:11 - that should appear before the number 3
03:14 - and that's why the starting index for
03:17 - the number 3 is 4 once we have the
03:21 - starting index for each number the rest
03:23 - is relatively easy we're going to first
03:26 - initialize a new array that's the same
03:29 - length as the original rate so length 6
03:32 - in this particular case and then we're
03:35 - going to iterate it through the original
03:37 - array 1 by 1 when we are looking at the
03:40 - first element of this array which is 1
03:42 - we're going to check what distorting
03:44 - index should be for this number from the
03:47 - array that we constructed we see that
03:49 - the starting index is 1 so we're going
03:51 - to put this number into index 1 of the
03:54 - new array and then we're going to
03:56 - increment our starting index by 1 and it
04:00 - becomes 2 and this is so that when we
04:02 - look at the second instance of the
04:04 - number one will know that it should
04:07 - going to the index 2 instead of 1 and
04:10 - then we're going to increment it again
04:13 - we'll do the same thing for each number
04:16 - of this array from left to right until
04:18 - we get to the last number in the
04:21 - original array
04:24 - now you might have noticed that this
04:27 - process makes counting sort a stable
04:30 - sorting algorithm what that means is
04:33 - that of course if you look at different
04:35 - instances of the same value for example
04:37 - the number one the order in which they
04:41 - appear in the new sorted array is
04:44 - exactly the same as the order in which
04:46 - they appear in the original array this
04:49 - wouldn't matter if there were just
04:51 - number one but if they represented
04:53 - underlying meanings to them for example
04:56 - if there were ages of people three
04:59 - different people let's say Emily Tom and
05:02 - George then we might care if they appear
05:06 - in the same order or in a different
05:08 - order in this sorted array as the
05:10 - original unsorted array now let's
05:14 - quickly go through a few important
05:16 - properties of counting sort first of all
05:18 - as I mentioned it's a stable sorting
05:20 - algorithm and the time complexity for
05:23 - this algorithm is Big O of M plus K
05:26 - where n is the number of items that we
05:29 - have in the original array and K is the
05:33 - range of numbers that we could have for
05:36 - each item in the array and finally the
05:39 - auxiliary space complexity is Big O and
05:41 - plus K for counting sort because we need
05:44 - to create an entirely new array with
05:47 - blanks and the same size as the original
05:50 - array as well as an array of length K to
05:54 - keep track of the starting index for
05:57 - each number