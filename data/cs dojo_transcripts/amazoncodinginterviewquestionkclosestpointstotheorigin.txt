00:00 - Here's a coding interview problem from Amazon:
00:02 - We have an array of tuples, or an array of arrays of two items each.
00:10 - This represents points on a two-dimensional space
00:14 - So for example this first item, (-2, 4) represents
00:19 - this point right here because the x-coordinate of this point is -2 and the y-coordinate of this point is
00:26 - 4 and the problem is this:
00:29 - given these points,
00:30 - how would you find the K closest points to the origin? And of course the origin is at (0,0).
00:37 - So for example, if the given K is 2, how would you find the two closest points
00:43 - to the origin out of these points? The two closest points here are (-1,0) and (0,-2)
00:52 - so you should be able to print these points and try solving this problem in a more general way
00:58 - To practice pause the video right here
01:00 - And think about how you would solve the problem and then come back to the video
01:04 - the first natural step for solving this problem is to find the distance to each point from the origin and
01:11 - of course we can use the Pythagorean theorem to do that so to find the distance to for example at this point, (-2,4)
01:19 - We can just find the value of square root of
01:23 - minus 2 squared plus 4 squared which
01:28 - is equal to
01:30 - square root of 4 plus 16 which is square root of 20 so that's
01:36 - the distance from the origin to (-2,4) and we can go through the same procedure for
01:42 - every other point to find the distance for every other point as well, and after that you can just
01:48 - construct a new array with objects
01:51 - containing the coordinates of each point as well as the distance to each point from the origin and
01:58 - this new array might look like this
02:01 - I'm calling this new array points_with_d as in points with distance and the first object of this
02:08 - new array will correspond to the first item in the original array
02:12 - with the coordinates (-2,4) and with this is square root of 20 of course,
02:18 - and we're going to have the same type of object for every other point in the original points so the length of points_with_d
02:26 - the new array will be the same as the length of the original array points,
02:30 - and you can use dictionaries or hash tables to store this information
02:35 - Instead of using objects as well
02:37 - Once you have this array all you need to do is, you just need to find the K objects or the K points
02:44 - with the shortest distance
02:46 - So at this point this problem is actually equivalent to the problem of finding the K smallest
02:52 - elements in a given array of numbers
02:55 - for example if the given array is this array of integers, and if the given K is 3
03:03 - We want to be able to find the three smallest items out of this array
03:08 - Which are 1 2, and there are right here now
03:12 - There are a few different approaches for solving this problem
03:14 - The simplest approach is the one in which you sort this array in an ascending order so that the smallest items
03:22 - come first and out of the sorted array take the K first items,
03:28 - and that approach would take Big O of n log n in time if you use for example quick sort or merge sort
03:35 - another approach is using a variation of something called selection sort and
03:40 - I'm not going to go into detail here in this video
03:43 - But this approach would take Big O of nk in time
03:46 - Now my personal favourite approach is the one in which we use a max-heap and this one would take
03:54 - Big O of (K + (n - k) log k) in time. Let me explain
04:00 - how it works. First of all let's quickly go over what a heap is. In a sentence
04:05 - It is an efficient way to keep track of the largest value in the given collection of numbers
04:12 - Suppose as an example
04:14 - You're given these three numbers
04:16 - 4, 1, 5. If you construct a max-heap with these three numbers, you can sort of visualise it as
04:24 - a bag or a box of these three numbers,
04:28 - and however many numbers you have in the max-heap
04:32 - Retrieving the largest number out of it is very efficient. In fact, asking the heap what the largest number is
04:39 - Without modifying the heap, so just examining what the number is without retrieving the number itself
04:46 - will be done in Big O of 1 in time. Now, there are a few other operations
04:51 - we're going to use on a heap for this particular problem. The first one is create
04:58 - creating a heap, a max-heap, with K items
05:02 - takes Big O of K in time the second operation is replace.
05:08 - So for example, if we want to replace the current largest number in
05:13 - the given heap, this one with a new number three,
05:17 - then this heap will be rearranged so that the current largest number will be four, and they will have one and three
05:24 - below it. This operation takes Big O of log K,
05:28 - where K is the number of items in the heap, and the third operation is print all.
05:35 - This prints all the items in the given heap in the order
05:39 - that's not necessarily sorted. So for example, this operation on this particular heap
05:45 - Might print 4, 1, 3, and this operation takes Big O of K in time.
05:52 - Now, how can we use a max-heap and those operations on it to find the K smallest items in a given array of numbers?
06:00 - Let's consider this array of numbers again and
06:03 - Let's say we want to find the three smallest items.
06:06 - Then the first step will be to construct a max-heap with the first K items, or with the first three items.
06:14 - After that, for each item in the remainder of the array, ask ourselves, is this number
06:21 - smaller than the current largest number in the heap? If it is smaller then replace it
06:29 - with the current largest number.
06:31 - So when we are examining this number right here, 2, the heap will look like this,
06:38 - And the current largest number has become 4, and when we're examining this number 3,
06:45 - 4 will be replaced with 3.
06:48 - We're going to keep going like that, and when we're examining this number, 10,
06:52 - because this is not smaller than the current largest number in the max-heap,
06:58 - we'll just ignore that number, and at the end of this process just print all items from this heap,
07:04 - and we're done. We have the K smallest items from the given array. Now let's quickly recap our entire strategy
07:12 - Using pseudocode we're going to define our function closest,
07:16 - which takes the given points, and K, for finding the K closest points to the origin.
07:23 - And from this function, we're not going to return anything,
07:25 - but we're going to print the K closest points. And in this function, first of all using points, create
07:33 - points_with_d for points with distance, an array of objects
07:38 - containing the coordinates, as well as the distance to each point from the origin.
07:43 - After that, using points_with_d
07:46 - the array of objects, create a max-heap with the first
07:51 - K items, and use the distance as the key when we create a max-heap.
07:56 - Let's just call this max heap MH. After that,
08:00 - run a for loop for each point in the remainder of the array,
08:06 - and if this point's distance is less than the current max of MH,
08:12 - then replace MH's current max with p, and once we're done with this for loop, then just print all points in
08:22 - MH, and we're done. Now what about time complexity? Let's think about it line by line.
08:27 - The first line here, using points creating points_with_d
08:32 - takes Big O of n because we go through this array only once,
08:37 - and creating a max-heap with K
08:39 - items, as we discussed earlier, takes Big O of K in time, and here we're running n-k loops.
08:48 - In each loop, replacing MH's current point with p takes Big O of log K,
08:56 - and so the runtime for this entire for loop will be Big O of n-k times
09:03 - log K in the worst case scenario.
09:06 - After that, printing all points in MH will take Big O of K in time.
09:12 - So adding them all up, Big O of n plus Big O of K
09:17 - plus Big O of n - K times log K + Big O of K
09:22 - We're going to have Big O of n
09:25 - plus n - K times log K. And that would be the runtime for this entire solution.
09:36 - Ok, thanks a lot for watching this video. If you liked this video I would also recommend
09:40 - my course on Udemy, 11 Essential Coding Interview Questions, in which I cover
09:45 - 11 of the most essential coding interview questions to master with coding exercises in Python and Java.
09:52 - In case you're interested in taking the course. I put a discount code below in the description. Alright,
09:58 - I'll see you in the next video.