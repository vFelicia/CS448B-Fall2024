00:00 - Hey guys this is part one of my introduction to
00:03 - classes and objects and in this video I'm going to
00:06 - talk about what are classes and objects and then what
00:10 - are attributes, methods, and constructors and at the end of
00:14 - this video I'm going to give you some code samples
00:16 - in Java but this video is going to be mostly
00:19 - language independent so you'll be able to use what you
00:22 - learn in this video in whatever language you're using.
00:25 - Classes and objects are actually one of the most fundamental topics
00:29 - when it comes to data structures and algorithms, so let's get started.
00:32 - So what are classes and objects? I think
00:36 - the best way to explain what they are would be
00:38 - to give you a really concrete example. So let's say
00:41 - as an example, you're thinking about making a website where
00:45 - people can visit and talk to a bunch of robots. So what you have in mind is
00:50 - when people feel lonely or something they can come visit
00:53 - your website and say hi to one of the robots there.
00:56 - So when a user comes to your website they might see a list of robots like this,
01:02 - and here you see two of those robots and they're called Tom and Jerry.
01:07 - Aside from their names they have some obvious differences.
01:12 - First of all Tom's color is red, while Jerry's color
01:16 - is blue as you can see and Tom is slightly
01:20 - lighter in weight than Jerry with thirty pounds of weight while
01:25 - Jerry is forty pounds and they both have the same
01:29 - functionality. When you click this button "Introduce", Tom
01:33 - will say "my name is Tom" and Jerry will say
01:37 - "my name is Jerry" and that's all you have for
01:40 - now and it's pretty basic but that's all you want
01:43 - at the beginning when you create this website.
01:45 - Now, to create a system like this you basically need a way
01:49 - to represent these different entities or these different robots in
01:54 - whatever programming language you're using whether it's Python, Java, or
01:58 - Javascript and that's where classes and objects come in.
02:02 - Now, to represent each of these robots Tom and Jerry that
02:05 - we saw earlier in whatever programming language you're using you
02:09 - need to store two sets of information. The first set
02:13 - of information that you need to store is the properties
02:16 - that each robot has. So for example the first robot
02:20 - we saw had these properties: its name was Tom, the
02:24 - color was red, and the weight was thirty pounds. And
02:29 - the second set of information you need to store for
02:31 - each of these robots is the set of functionalities it
02:35 - has. As we saw earlier, it had only a single
02:38 - functionality in this particular case and that was to introduce
02:42 - itself and that might be represented as a function in
02:46 - whatever programming language you're using and let's just call it
02:49 - introduceSelf() here for now. At this point you might
02:53 - say "is there any convenient way to organize these properties
02:57 - and functions together?" There is, and that's called an object.
03:01 - An object is basically a collection of properties which can
03:06 - be expressed as variables and some functions, and with that
03:11 - collection of information an object can represent some "thing", whatever that
03:16 - "thing" is. So in this particular case this particular object
03:20 - is representing this particular robot, Tom, but you can make
03:25 - an object so that it represents a particular person, or
03:28 - a particular dog, or anything else for that matter.
03:32 - If you decide to represent a particular person with an object
03:36 - let's say Lady Gaga just as an example, you might have
03:40 - a different set of variables and a different set of functions
03:43 - to represent that person. So for example, you might still
03:47 - have "name", but you might also have "height" and
03:50 - "weight", "eye color" and "ethnicity" and so on and your object
03:55 - will probably have a different set of functions too, to
03:58 - show what kind of actions that person can take. It
04:01 - could be for example things like walk, sleep, talk, or
04:07 - anything a person might do. OK, let's backtrack here a
04:10 - little bit. Once you create an object to express this
04:14 - particular robot Tom, you'll be able to put this object
04:18 - in a variable just like that let's say "r1"
04:22 - just as an example. You'll be able to use this
04:26 - variable that contains this whole set of information.
04:30 - The properties or the variables and the functions just
04:33 - like any other variables for example to pass it into
04:37 - a function as one of the arguments. OK, let's now
04:40 - take a look at how the second robot we saw,
04:42 - Jerry, can be represented with an object. It's gonna look
04:46 - pretty similar to the first one it's gonna have the
04:49 - same set of properties but different values this time "Jerry",
04:53 - "blue", and "40", and the same function as well,
04:58 - introduceSelf() and of course once you create this object, you'll
05:01 - be able to put it in a variable as well
05:04 - let's call that one "r2", and because you have two
05:08 - distinct variables containing two different objects, you'll be able to
05:12 - distinguish them very easily in your code and just quickly
05:16 - about terminology, these variables within an object are called
05:22 - either "instance variables" or "attributes" and these functions within
05:27 - an object are called "methods". OK, so when you
05:30 - see these two objects you might say well they're pretty
05:34 - similar, they have the exact same set of variables or
05:38 - attributes and they have the exact same set of functions
05:42 - only one function in this case so you might
05:44 - say "is there any convenient way to organize that somehow?"
05:48 - There is, and that's what a class is essentially. Now
05:52 - what's a class? A class is basically like a blueprint
05:56 - from which you can make objects so just imagine for
06:00 - a second someone telling you "please make a robot". If
06:04 - someone tells you something like that, you say
06:06 - "what kind of robot do you want? What should it
06:09 - look like, and what kind of properties should it have, and
06:12 - what kind of functionalities should it have?" So basically, if
06:16 - you want to make a robot in sort of the
06:18 - real world, you need a blueprint to make that from
06:22 - to know what the robot should look like and that's
06:25 - sort of how it works with programming with objects and
06:28 - classes too. So when you make an object, you want
06:31 - to know what kind of properties, what kind of attributes
06:34 - it'll have, and what kind of functions it'll have and
06:37 - you can use a class to specify exactly that.
06:41 - OK, let's now see what this particular class might look like
06:44 - for these two objects, these two robots. It'll probably
06:47 - look like this. As you can see, it has the
06:51 - same set of properties as the objects themselves "name", "color",
06:55 - and "weight", but the values for these three properties are
06:59 - not defined yet and that's because the class doesn't refer
07:03 - to any particular object. It doesn't refer to this robot,
07:07 - or this robot, in particular. It just refers to this
07:11 - category of robots or this type of robot in general.
07:15 - Then when you create a specific object using this
07:18 - class then you can specify what the name should be,
07:22 - what the color should be, and what the weight should
07:25 - be and also notice here that we already have the
07:29 - introduceSelf() function in this class.
07:32 - You can actually implement it already when you define this
07:35 - class by writing something like this. So this is just
07:40 - an example from Java. In Java, for printing something on
07:44 - your computer we have "System.out.println()".
07:48 - It's similar to the print function or the printf
07:52 - function in other languages and then inside the input
07:57 - of this function we have "My name is " as a string,
08:00 - plus "name" and this name will refer to whatever
08:05 - the value of the name is for that particular object.
08:09 - So for example if you run this function in this
08:13 - object it's going to print out "My name is Tom",
08:18 - because that's the name of this particular object, and
08:21 - if you run this function here in this object instead, it's
08:25 - going to print out "My name is Jerry" instead.
08:29 - And one more thing to note here is that when
08:31 - you define a class like this one you need to
08:34 - give it a name. It could be anything, but let's
08:37 - call it "Robot" here and as you can see the
08:40 - first letter "R" is capitalized and that's a pretty
08:44 - common convention when you name a Class. OK, let's now take
08:47 - a look at how this whole thing might look like
08:50 - in code. We're going to take a look at some
08:52 - code in Java here but other languages are typically pretty
08:56 - similar. Let's first assume that we already have our class
09:00 - defined. Like we said, it's going to be called Robot, but
09:04 - we're going to take a look at what's going to
09:05 - go inside later and once you define
09:08 - this class Robot, you'll be able to use this class
09:11 - of course to create an object out of it. And
09:15 - you can do that like this. We have "Robot
09:18 - r1 = new Robot()", and this "new Robot()" says
09:23 - create a new object with this class Robot, and then
09:27 - we're assigning that object to r1 and then we
09:32 - have the word Robot here again because a class is
09:35 - used not just to create an object but also as
09:39 - a type too you know just like we say "string
09:42 - r1" if we want to create a string, we
09:45 - can say "Robot r1" to create a reference to
09:49 - a Robot object. OK, let's move on. When you create
09:53 - a new object this way this new object doesn't have
09:56 - the properties, doesn't have its instance variables set yet
10:01 - so you need to set them after that just like
10:04 - that. Here we have "r1.name = 'Tom'"
10:09 - and that sets the name attribute of this object or
10:12 - the name instance variable of this object to Tom and
10:16 - then you need to do the same thing for the
10:18 - other two instance variables by saying
10:20 - "r1.color = 'red'" and "r1.weight = 30", so
10:25 - that's the first object r1, let's see how we
10:28 - can create a second object here. As you can see
10:30 - the second block of code here is pretty similar to
10:33 - the first block. We have Robot r2 = new Robot();
10:37 - to create a new object and then we have
10:40 - "r2.name = 'Jerry'" and so on to set
10:43 - the instance variables of that object. So that's how you
10:46 - can create two objects of the Robot class here but
10:50 - what about the functionality we saw earlier, introduceSelf()? To
10:54 - run the function for each of these objects the syntax
10:58 - for that is actually pretty simple. It's going to look
11:01 - like this. We have r1.introduceSelf(), this
11:06 - just says run this function introduceSelf() on this object
11:10 - r1. So when you run this line it's going
11:14 - to print out "My name is Tom" because this robot's
11:18 - name is Tom and then you could do the same
11:20 - thing for r2 by writing r2.introduceSelf(),
11:24 - and that's going to run this function, introduceSelf(), for
11:27 - r2 and then it's going to print out
11:29 - "My name is Jerry". OK let's now see how you can
11:32 - actually define this class. First of all, to define what
11:36 - instance variables this class will have, you can just write
11:40 - these. This of course says the instance variables that this
11:44 - class will have are "name", which is going to be
11:47 - a string, "color", which is a string as well, and
11:49 - "weight", which is an integer. And when you see other
11:52 - sample code in Java, you might see words like "public",
11:56 - "private", or something else before each of these attributes but
12:01 - just to keep this simple I'm not going to talk
12:03 - about what they are in this particular tutorial and when
12:06 - you run this code it will just work just fine
12:09 - without adding these words too. OK, the next thing you
12:12 - need to define and implement is this function introduceSelf(). And
12:16 - for that you can write this. Here, we're defining a
12:19 - function called introduceSelf() and we have the "void" prefix
12:23 - here to show that this function is not going to
12:26 - return anything and notice that this function definition is still
12:31 - inside this class and then the implementation is as we
12:34 - saw earlier: System.out.println(), "My name
12:37 - is this.name". Actually we could just have name
12:41 - here, but I wrote this.name instead just
12:44 - for emphasis. So what's this here? "This" refers to whatever
12:49 - object, whatever particular object, that you're running this function on.
12:54 - So if you write r1.introduceSelf(), you're
12:57 - running this function on r1 so "this" will be
13:00 - equivalent to r1. So it's going to be
13:03 - sort of like saying System.out.println(), "My
13:06 - name is r1.name", which is going to
13:09 - be Tom of course. And then when you run
13:12 - r2.introduceSelf(), this will refer to "this" key
13:16 - word will refer to r2 instead so when you
13:20 - run r2.introduceSelf() it's going to print
13:22 - out "My name is r2.name", which is
13:25 - Jerry. OK so that's the basics of classes and objects
13:30 - in Java, but when you look at these two blocks
13:32 - of code you might say well they're pretty repetitive... you
13:36 - know, you need to repeat the same things over and
13:38 - over again and then it's pretty cumbersome to remember to
13:42 - set these attributes every time too, every time you create
13:45 - an object. So you might say "is there any way
13:48 - to simplify that?" There is, and it's called a constructor.
13:52 - A constructor is basically a function that allows you to
13:55 - create an object from a class and then you'll
13:59 - be able to use the constructor to you know do
14:02 - things like set the attributes for yourself. And actually you
14:05 - already used a constructor, you know this line right here,
14:09 - "new Robot()" that's a constructor but that's a default constructor
14:13 - that Java defines for you and this constructor doesn't set
14:17 - any of the attributes. So let's see how we can
14:19 - create our own constructor that does set the attributes for
14:23 - you. So that constructor might look like this. So if
14:28 - you see this function you'll notice that you know
14:30 - it looks like a regular function except for that we
14:33 - don't have any prefix here like "void" or "string" for
14:37 - the return value. Instead, this constructor is just
14:41 - called Robot. Notice that that name is exactly the same
14:44 - as the class name and then it has three arguments:
14:48 - "String n", "String c", and "int w". And then inside
14:52 - this function we're setting "this.name" to n,
14:55 - "this.color" to c, and "this.weight" to w. As we saw
14:59 - earlier, "this" refers to the particular object that we're talking
15:04 - about here, in this case the particular object that has
15:07 - just been created, and then we're saying that object's name
15:10 - should be n, which is the given argument, and then
15:13 - that object's color should be c which is the given
15:16 - argument and so on. And then here, the common
15:19 - practice here is to name these arguments exactly the same
15:23 - as these attributes, "name", "color", and "weight", and with that
15:27 - this part is going to look like "this.name = name",
15:30 - "this.color = color",
15:33 - "this.weight = weight", but with that naming this function, this constructor,
15:38 - is doing exactly the same thing as this one so
15:41 - that's really just a style issue. OK moving on, we're
15:44 - almost done here... let's see how we can actually use
15:47 - this constructor. Actually when you define your own constructor, your
15:51 - own custom constructor, the default constructor stops working. So these
15:57 - two blocks of code no longer works and then you
16:00 - can use this new constructor to create new objects, just
16:03 - like this. This one says "Robot r1 = new Robot("Tom", "red", 30)".
16:10 - So these three arguments, "Tom",
16:13 - "red", and "30", will be passed on to this constructor
16:18 - and then this block of code is going to be
16:21 - run and so r1's name is going to be
16:25 - given "n" which is "Tom" and then the color will
16:28 - be "red" and then "weight" will be 30. So this
16:31 - piece of code will actually be equivalent to the
16:35 - whole block of code we had earlier right here. Basically,
16:38 - create a new object and then set the attributes to
16:42 - the given arguments. And then we can do the same
16:45 - thing for r2 as well by writing
16:49 - "Robot r2 = new Robot("Jerry", "blue", 40)". This creates
16:53 - a new Robot object with the name Jerry, color blue,
16:58 - and weight 40. And after creating these two objects you'll
17:02 - be able to use r1 and r2 just
17:05 - like before by writing r1.introduceSelf() and
17:08 - r2.introduceSelf(). OK, again this was just
17:12 - sample code in Java, but it's pretty similar to other
17:15 - languages too and you'll be able to find links to
17:18 - sample code in both Java and Python in the description
17:22 - below. All right, if anything was unclear in this video
17:26 - please let me know in a comment below so maybe
17:28 - I can talk about it in the next video. In
17:30 - the next video I'm also going to talk about how
17:33 - you know multiple classes and objects can interact with each other,
17:36 - and with that knowledge you'll be able to finally
17:39 - start building some data structures like linked lists. I'm also
17:44 - planning to create a new Python tutorial video on classes
17:47 - and objects, so look out for that as well. And
17:50 - special thanks to brilliant.org for sponsoring this
17:53 - video. You know, some of you may already be
17:56 - familiar with data structures and algorithms and maybe you're watching
17:59 - my videos as sort of a refresher. If that's the case,
18:03 - brilliant.org might just be the right website for
18:05 - you to learn more advanced concepts in computer science. So
18:09 - personally, I used this computer memory course to get a
18:11 - better understanding of how memory works in a computer. For
18:15 - example, previously I didn't really know how structs in C
18:18 - are stored on memory... I mean I had a vague
18:21 - idea but I didn't really know, and I found this
18:24 - course was really helpful for understanding that. Personally what I
18:27 - like about Brilliant is, first of all, the fact that
18:30 - they have really nice visuals like this one, you know
18:33 - much nicer than mine I would say, and they're helpful
18:35 - for understanding different concepts visually. Another thing I like
18:39 - is the fact that they sometimes combine multiple concepts
18:42 - in a single problem. What I mean by that is,
18:45 - for example, for this particular problem you need to understand
18:48 - different things like binary expressions, and how structs in C
18:52 - are stored on the computer, and how short and char
18:57 - and different types of data are stored on memory too.
19:00 - And in my experience in general I have found that, you
19:03 - know, solving problems is a really good way to review
19:06 - different concepts at the same time and also learn new
19:09 - concepts and brilliant.org definitely does a good job of
19:13 - coming up with good problems to solve and they even
19:16 - have pretty advanced courses like this
19:18 - "Artificial Neural Networks" course on top of their standard computer
19:22 - science fundamentals and algorithms courses.
19:25 - You can just go to brilliant.org/csdojo
19:27 - to start checking out these courses yourself and you
19:31 - can get 20% off their annual subscription through that link as well.
19:35 - All right, as always I'm YK from CSDojo
19:38 - and you know I'm working really hard here to make
19:42 - CSDojo better and better so that hopefully, eventually,
19:45 - it's going to be in a class of its own.
19:48 - All right I'll see you in the next video.