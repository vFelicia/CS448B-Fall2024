00:02 - and we are live um rahul thank you so
00:06 - much for being here
00:08 - yeah it's my pleasure i'm really excited
00:10 - for this
00:11 - yeah um
00:12 - and first of all do you mind introducing
00:14 - yourself
00:15 - absolutely yeah so i'm rahul uh i am
00:18 - currently the co-founder and ceo of a
00:20 - company called taro which helps software
00:21 - engineers
00:23 - um on board and get promoted more
00:24 - quickly but i've had my entire career in
00:27 - silicon valley in tech so my most recent
00:30 - full-time job was at facebook or meta
00:33 - i should call it now i was there for
00:35 - four and a half years before i quit back
00:37 - in january
00:38 - um
00:40 - and i did a bunch of stuff there i was
00:41 - an android engineer i was a tech lead
00:43 - for our team and i also did management
00:45 - but prior to facebook part of meta i was
00:47 - at pinterest for two and a half years
00:49 - prior to pinterest i was at a startup
00:51 - where i was a founding engineer
00:53 - and then prior to pinterest i was at
00:55 - stanford for five years and in fact the
00:57 - lab that i worked on
00:58 - at stanford that is the
01:01 - the work from that lab turned into a
01:03 - startup which got acquired by pinterest
01:05 - so that was kind of my
01:07 - journey into a full-time job and i was
01:09 - at stanford five years
01:11 - and so yeah i've seen a lot of you know
01:14 - silicon valley grow and evolve in the
01:16 - past you know i guess 13 14 years so
01:19 - it's been really interesting to be here
01:22 - nice
01:22 - um
01:24 - so just based on what you just said i
01:26 - have i have so much to ask and you know
01:28 - so much so many things i'm curious about
01:30 - what was that startup about that was
01:33 - acquired by pinterest yeah so the
01:35 - startup was called cosec um
01:37 - and it was
01:39 - about recommendation systems so the lab
01:41 - that i was part of it was basically a
01:43 - big data lab um which was
01:46 - already hot back in 2014 2013 when i was
01:49 - in the lab and also even perhaps more
01:50 - hot now like it's even more glamorous
01:53 - but back then it was kind of exciting
01:54 - okay like you have all this data you
01:55 - have these
01:56 - social media companies which are
01:57 - producing literally
01:59 - terabytes or maybe petabytes of data
02:01 - about like all this traffic and all this
02:04 - um you know things that people have
02:06 - watched or clicked how can we take that
02:08 - and turn it into something usable so we
02:10 - can recommend better content on youtube
02:13 - or on pinterest or on whatever website
02:14 - you can think of
02:16 - and so um
02:17 - we had some sort of some novel
02:19 - algorithms which
02:21 - uh were interesting intellectually but
02:23 - hard to find
02:25 - how hard to turn that into an
02:26 - economically viable product
02:28 - and so
02:30 - it basically became an aqua hire so an
02:32 - aquahire for people don't know is
02:33 - basically
02:34 - there's not really a product to acquire
02:36 - but the team of people who are building
02:38 - this startup are talented and the
02:40 - company the acquiring company in this
02:41 - case pinterest wanted to
02:43 - um you know grab all the
02:45 - engineering talent of kosei and so
02:47 - that's how i i came on board
02:50 - nice um okay so you know we have a lot
02:53 - to cover today
02:55 - um
02:56 - getting multiple job orders from fans
02:59 - you know how you did it how other people
03:01 - might be able to do it
03:02 - um getting started on a new code base
03:04 - and
03:06 - maybe you know if we have enough time
03:08 - you know either um
03:12 - either something about you know building
03:13 - a startup
03:14 - or you know getting promoted as a
03:16 - software engineer you know we'll see or
03:17 - maybe both of them hopefully
03:19 - so let's just you know get right into it
03:21 - um
03:22 - yeah how did you get multiple
03:24 - java first from fang and which companies
03:27 - were they yeah absolutely okay so this
03:29 - is something i i get a lot so um let me
03:32 - give the context
03:34 - i've because i've been in tech for so
03:36 - long and i've um
03:38 - went to school in the middle of silicon
03:40 - valley i've had a ton of interview
03:42 - practice and so i failed a bunch of
03:43 - interviews but eventually i got to the
03:44 - point where i got pretty good at them so
03:47 - in 20
03:49 - uh 2013 i did a bunch of interviewing as
03:52 - i was graduating and i got five offers
03:55 - facebook google microsoft twitter square
03:58 - and then
03:59 - again i did a whole another round of
04:01 - interviewing pretty deliberately in 2017
04:03 - when i was leaving pinterest and i got
04:05 - six offers
04:06 - um
04:08 - like uber
04:09 - um facebook which is where i ended up
04:11 - going
04:12 - uh airbnb
04:14 - um
04:16 - stripe
04:17 - and a couple others but yeah so
04:18 - basically i've been doing a bunch of
04:20 - interviewing and i have a ton of
04:21 - opinions and a ton of context on what it
04:23 - takes to really crack the interview at
04:24 - these top companies so i may not be able
04:27 - to give advice on um you shouldn't
04:29 - listen to me if you're like interviewing
04:30 - for like a two person startup because
04:33 - oftentimes the advice for getting into a
04:35 - two-person or five-person startup is
04:37 - gonna be very different from what we're
04:39 - talking about which is like these big
04:40 - companies um and that's because you know
04:43 - these big companies they have to
04:44 - interview people at scale they're
04:45 - talking about interviewing
04:47 - i don't know hundreds
04:49 - of people every month and so there needs
04:51 - to be some sort of standardization
04:52 - and that standardization is good for the
04:55 - candidate because now you know what to
04:56 - expect and i got really good at
04:59 - predicting that and
05:00 - being able to talk to the interviewer
05:02 - engage them and
05:05 - do well both in the coding part and the
05:06 - non-coding part of interview and i was
05:07 - able to land a bunch of offers
05:12 - so i'm happy to share um
05:15 - a couple different
05:16 - high level pieces of advice
05:18 - um
05:19 - and then if there's particular questions
05:20 - that people have or if you have yk then
05:22 - happy to dive in there as well yeah that
05:24 - sounds great and feel free to share your
05:26 - screen and you know let me know when you
05:28 - know when you want to actually okay yeah
05:31 - yeah um well so before i dive into the
05:33 - screen share i think there's
05:35 - really two different parts of getting a
05:37 - job i think that's quite that's the
05:38 - question right how do you get how do you
05:40 - land the offer effing
05:43 - there are two very different parts
05:45 - one is getting the interview
05:47 - and one is getting the job right
05:50 - and so
05:52 - the reason i
05:54 - am very clear about making these
05:55 - distinct is because one of the harsh
05:57 - realities of interviewing in big tech
05:59 - is that the skill you need to
06:03 - interview
06:04 - is very different than the skill you
06:05 - need to get the interview
06:08 - and so um i can share my screen if if uh
06:12 - if you're okay with that i can give you
06:14 - a bit more context
06:16 - yeah right
06:18 - so um
06:21 - if your interview that
06:24 - um
06:25 - if if you're in school the best way to
06:27 - get the interview is through career fair
06:29 - like you have like you're in this really
06:31 - tight environment of many other people
06:33 - who are
06:35 - all ambitious and smart and companies
06:36 - know that so if you have a career fair
06:38 - that's the best way to do it if you're
06:40 - an intern
06:41 - then you effectively already
06:44 - got your foot in the door and you're
06:45 - doing a three month long or two month
06:47 - long interview with the company and so
06:49 - your priority as an intern should be
06:50 - just give everything you possibly can to
06:53 - the job to land that return offer
06:55 - um
06:56 - if you don't have one of these two
06:58 - things you're not in school and you're
06:59 - not an intern already then at that point
07:01 - the number one thing you can do is
07:03 - really just to
07:04 - cultivate deep relationships with people
07:06 - and
07:07 - get referrals because the thing is that
07:09 - these top companies will get
07:12 - literally tens of thousands of
07:13 - applicants and many of them are not even
07:15 - read and so if you want a chance of
07:17 - getting your application actually read
07:19 - then you need someone to vouch for you
07:21 - you need someone to say hey i think yk
07:22 - you're an amazing candidate based on my
07:25 - history with that person
07:26 - and so what you should do is
07:28 - um uh what you should do is
07:31 - you know
07:33 - work with people at your current company
07:35 - if you're working and eventually one of
07:37 - them will go on to google or facebook
07:38 - and then ask them for a referral
07:40 - or just go on to linkedin and actually
07:43 - trying to make a meaningful connection
07:44 - with people linkedin twitter whatever
07:47 - um
07:48 - whatever community you have online try
07:50 - and actually make a meaningful
07:51 - relationship with people
07:52 - um
07:54 - and so here's two things that i
07:55 - recommend strongly that uh
07:58 - here are two strong opinions i have
08:01 - there are two things that people often
08:02 - do
08:03 - um that i think are very
08:06 - indirect ways of getting the interview
08:08 - one is open source
08:09 - and the other is having a project so in
08:12 - general i would say 95 percent of the
08:14 - projects that i have reviewed when i was
08:16 - hiring at pinterest and facebook
08:18 - they are not that impressive
08:20 - even the open source projects are not
08:21 - that impressive right and so
08:24 - because like the definition of a side
08:25 - project could literally be i i'm going
08:27 - to make a hello world program for
08:29 - android and maybe change the text to say
08:30 - like goodbye world or whatever and
08:32 - that's technically a side project right
08:34 - and so
08:35 - the default assumption for most people
08:37 - who are evaluating a um
08:40 - a side project or an open source
08:42 - contribution is that it's probably not
08:43 - that interesting it's not that
08:44 - meaningful
08:45 - and so the burden is on you to really go
08:47 - out of your way to prove that and that's
08:49 - hard to do right so like for example if
08:51 - you have an android app which has public
08:52 - which is published and it has you know
08:55 - ten thousand or a hundred thousand users
08:56 - now that's impressive because you've
08:58 - objectively built something that people
08:59 - find valuable or if you've actually made
09:01 - an open source contribution to like
09:02 - react right that's huge because it
09:04 - reacted i trust react that um
09:08 - there's some validation of your code
09:10 - quality and your insight right but there
09:12 - needs to be some connection to something
09:13 - which
09:14 - i have a trust i have faith in or i have
09:16 - trust in right um
09:18 - that's actually the guiding principle
09:19 - for all of us if you want to get an
09:21 - interview you have to be connected with
09:24 - someone who let's say you're
09:25 - interviewing like you're trying to
09:26 - interview my company
09:28 - you have to have
09:30 - some authority vouch for you
09:32 - an authority could be hey
09:34 - someone at my company right now said
09:35 - you're good i trust that person
09:38 - there's an open source project that i've
09:39 - heard of or it's like seems to be very
09:41 - popular and you made a contribution
09:42 - there okay now i kind of trust you
09:44 - you yourself made an android app or ios
09:46 - app or some project which is used by
09:48 - thousands of people okay i kind of trust
09:49 - you
09:50 - or you went to a good school you went to
09:53 - you know
09:54 - mit or harvard or you know some similar
09:57 - school okay i definitely trust you
09:58 - because like i trust that there's some
10:00 - level of vetting that mit does for their
10:03 - students that you're going to be
10:04 - competent right and so you have to be
10:06 - able to do that
10:08 - what i have on the side here is
10:09 - basically a bunch of different ideas
10:11 - for how do you build that authority in
10:13 - that trust
10:15 - the top three are the easiest ways and
10:17 - the bottom two are going to be a lot
10:18 - harder so you probably should expect to
10:20 - spend
10:21 - at least six months or a year doing that
10:24 - and so if your goal is i want to just
10:25 - get an interview in the next
10:26 - month or two the bottom two won't really
10:28 - help you
10:31 - yep uh thank you for that and just
10:33 - wanted to quickly add i think open
10:35 - source contributions it's not just about
10:37 - getting interviews it's also you know
10:38 - honing your skills practicing your
10:40 - skills so that's you know one thing i
10:42 - wanted to add and
10:43 - um
10:44 - quick question for you you know you
10:46 - mentioned linkedin how would you use
10:47 - linkedin to network yes okay so linkedin
10:50 - i think the big mistake that people make
10:53 - is that they will
10:54 - do very shallow connections like they'll
10:57 - i get a ton of messages probably like
10:59 - four or five messages a day
11:01 - which basically say
11:03 - hey here's my resume do you have any
11:06 - opportunities for me
11:08 - and i think the biggest mistake in
11:10 - general not just with linkedin but with
11:11 - email with twitter anything
11:13 - is
11:16 - you have to understand that people don't
11:18 - really care about you
11:20 - right when you're reaching out to
11:21 - someone when you're
11:25 - when you make a cold message
11:27 - if you phrase it and say hey i'm looking
11:29 - for a job can you help me that's an
11:31 - immediate turn off right so the better
11:32 - way of doing it is actually
11:34 - provide some value
11:36 - say hey i saw your blog post or i
11:39 - saw this youtube video here are my
11:41 - thoughts i i think here's like how i
11:43 - differ from you like here's like an
11:44 - interesting thing that i learned from my
11:46 - experience which differs from what you
11:47 - did or like here's how it agrees with
11:49 - what you talked about in your video now
11:51 - all of a sudden look this person
11:52 - actually cares this person has something
11:54 - interesting to say now i'm way more
11:56 - likely to
11:59 - i click into your profile and understand
12:01 - what's your background
12:02 - so that's like the um
12:04 - big secret i would say to linkedin is
12:06 - you should almost never be talking about
12:07 - yourself in that first message it should
12:10 - always be about the person who you're
12:11 - sending the message to and one way you
12:13 - can test it
12:14 - is how many times do you have the word i
12:18 - in the cold message versus you
12:21 - so if you start off saying i'm looking
12:23 - for a job
12:25 - no that's not going to work if you start
12:27 - off saying
12:28 - hey rahul like your recent video
12:31 - about how long to say the tech company
12:32 - was super interesting here's my thinking
12:34 - that starts to become way more
12:36 - interesting
12:37 - um and then the other thing why i think
12:39 - you had a really good point these last
12:41 - two
12:42 - i think these are tremendously important
12:44 - as a software engineer because they
12:45 - actually teach you how to be a good
12:47 - software engineer right like if you're
12:48 - making open source contributions you
12:50 - know how to work on a team you know how
12:51 - to get buy-in you know how to you know
12:53 - land code in a production code base
12:55 - that's huge and similarly with the met
12:56 - with the large side project but i think
12:59 - one of the frustrating things about
13:01 - interviewing is that the skill you need
13:03 - to pass the interview is often different
13:06 - from the skill you need to succeed on
13:08 - the job
13:09 - and so i i think what happens is that
13:11 - some people will think oh well i'm i
13:13 - know that if i have a big side project
13:15 - or a big open source contribution that
13:17 - makes me a good engineer that's probably
13:19 - true yeah you're going to be a great
13:20 - engineer but
13:23 - good engineers often
13:25 - will not get the interview
13:27 - and so you have to kind of be really
13:28 - precise about
13:30 - like for people who are watching
13:32 - are you getting the interview
13:34 - and if you are then the way you prepare
13:36 - is very different if you're not getting
13:37 - the interview what you should do is also
13:39 - very different
13:40 - um
13:42 - that's actually the next thing i want to
13:44 - talk about which is
13:47 - and you got the interview either through
13:48 - one of the tactics in the previous slide
13:51 - or you know some company want to take a
13:52 - bet on you
13:54 - then at that point the most important
13:55 - thing you can do is data structure and
13:57 - algorithm preparation and this is
13:59 - especially important for junior roles
14:02 - one of the things that is kind of
14:03 - interesting is that um
14:06 - my experience has been that the more
14:08 - senior you get
14:10 - the less important dsa becomes
14:13 - right so like if you're a junior
14:14 - candidate
14:16 - the biggest thing they're trying to
14:17 - evaluate you on is how much can you code
14:20 - how much do you understand the
14:21 - fundamentals the more senior senior you
14:23 - are the more you can lean on your
14:25 - experience at other companies and the
14:27 - more you can lean on your system design
14:28 - and architecture background
14:30 - and so um
14:32 - especially if you're junior you have to
14:34 - spend most of your time preparing for
14:36 - dsa
14:37 - and one thing i'll say is that if you're
14:39 - at the point now where you're getting
14:41 - three or four or five different
14:42 - recruiters who are replying to you and
14:44 - saying hey i would love to chat why
14:46 - don't you come in for an interview
14:47 - at that point you should
14:49 - unless you really have a good reason you
14:51 - should stop working on your side project
14:53 - or your open source contribution and you
14:55 - should spend the vast majority of your
14:56 - time just focused on
14:59 - preparing for your algorithm interview
15:02 - because your site project will not help
15:04 - you
15:05 - at all really
15:06 - in the interview you should be able to
15:08 - talk about it for sure but you
15:10 - making it an extra bit of like having an
15:12 - extra bit of polish won't really
15:14 - distinguish you from getting the job or
15:16 - not
15:18 - and so that's what i was referring to
15:19 - earlier where it's like they're two very
15:20 - distinct phases phase one is are you
15:23 - getting the interview if the answer is
15:24 - no then you should focus all of your
15:26 - time on
15:27 - building up trust with the hiring
15:28 - manager
15:30 - through credentials through open source
15:32 - through side projects through
15:34 - um you know a referral once you get the
15:36 - interview then your focus should shift
15:38 - almost completely in the other direction
15:40 - to now be very focused on
15:42 - you know glassdoor looking at different
15:44 - questions that are asked and leak code
15:51 - so i have a couple different tips here
15:53 - in terms of the biggest mistakes i've
15:56 - seen in terms of people preparing for
15:58 - their fang interview
16:00 - the first is make it a habit i think
16:02 - some people have this idea of okay i'm
16:04 - going to do
16:05 - four hours of preparation
16:07 - on saturday and sunday but then monday
16:09 - through friday i'm kind of busy with my
16:10 - own job
16:12 - i'm not really going to do very much
16:13 - work and i can promise you you're going
16:15 - to be way more effective if you are
16:17 - actually able to do a small amount of
16:19 - dsa preparation every day so even half
16:22 - an hour a day
16:23 - is gonna give you much more attention of
16:25 - the knowledge compared to like four
16:27 - hours on a saturday
16:32 - the other thing is that you know take
16:34 - breaks and it sounds obvious but i think
16:36 - so many people want to white-knuckle
16:37 - their way through and basically
16:39 - um
16:41 - burn out their brain like
16:43 - for me at least i can i don't know about
16:45 - other people but for me like
16:48 - an hour of really deep creative work for
16:50 - my brain is a lot
16:52 - and if i go beyond that too much then
16:55 - i can start to tell that i'm gonna get
16:57 - slower or i'm not gonna be able to do as
16:59 - much and so
17:01 - um
17:02 - make sure you you add that into your own
17:04 - schedule and also realize that that's
17:05 - how interviews work right
17:07 - every company i interviewed at facebook
17:08 - google microsoft they all have the same
17:10 - format it's probably going to be like a
17:12 - 45 or 15 minute interview
17:14 - and then you'll have
17:15 - a five or ten minute break before the
17:16 - next one right so they build in this
17:19 - idea of bathroom breaks or mental breaks
17:21 - in the interview right so why would you
17:22 - now deviate from that in your
17:24 - preparation
17:30 - um
17:31 - the other this is a big one finding a
17:33 - buddy because what i found is that
17:35 - a lot of people will prepare for
17:38 - their dsa like they'll either get leak
17:39 - code or crack in the coding interview or
17:41 - algox or whatever is the service that
17:43 - you want to use and they'll do it in
17:45 - isolation
17:47 - and that turned out to be a huge mistake
17:49 - because
17:50 - the actual interview is not done in
17:52 - isolation
17:53 - you always will have like someone who's
17:56 - going to be watching you on the
17:57 - whiteboard or you know more recently on
17:59 - zoom or coderpad whatever like a remote
18:01 - interview
18:03 - and so
18:05 - the skill of doing well in isolation and
18:07 - writing on a piece of paper on your desk
18:09 - is very different from
18:12 - the actual interview and so again the
18:14 - idea that you want to minimize the
18:15 - number of variables between the
18:18 - interview performance and your at-home
18:20 - performance and the way you do that is
18:22 - like have a buddy and
18:25 - have them actually
18:26 - tell you like how like you should be
18:28 - talking them through
18:30 - what you're thinking and how you're
18:31 - approaching the problem and i think um
18:35 - having a buddy also forces you to not
18:37 - take shortcuts like you know there's
18:39 - some level of accountability that way
18:41 - that people will not
18:42 - you know you can't just cheat if you
18:44 - have your friend watching you and
18:45 - studying with you
18:49 - um yeah any any thoughts on this okay
18:53 - yeah you know first of all i really
18:54 - appreciate the approach of you know
18:56 - first focusing on getting interviews and
18:58 - then getting better at interviews i mean
19:00 - there will be some overlaps but i you
19:02 - know really appreciate the breakdown and
19:04 - finding a buddy you know
19:06 - i can speak to that too you know the way
19:08 - i approached it was you know i practice
19:10 - it on my own lead code and stuff like
19:11 - that
19:12 - a lot first and then when i was ready to
19:15 - interview you know start interviewing i
19:16 - i just asked a bunch of my friends hey
19:18 - can you mock interview me and
19:21 - you know they're not professional
19:22 - software engineers necessarily but it is
19:24 - helpful to you know try to replicate the
19:26 - actual interview environment
19:28 - yeah i mean i kind of think of it
19:29 - similar to
19:31 - rubber duck debugging right like even if
19:33 - like you you brought up a good example
19:35 - of even if your friend is not a software
19:37 - engineer it still has a ton of value for
19:39 - you to be able to like go through the
19:41 - basis of explaining your thought process
19:42 - the same exact thing applies for rubber
19:44 - duck debugging right so like for people
19:45 - who aren't familiar the idea of rubber
19:47 - duck debugging is like you have a rubber
19:48 - duck or like some toy animal on your
19:51 - desk and you talk to the toy animal
19:52 - about a bug that you're facing and
19:54 - oftentimes the act of verbalizing what's
19:56 - in your head and getting it out
19:58 - in a coherent way to a rubber duck or to
20:00 - a friend
20:02 - that itself will make you reflect in a
20:04 - deeper way and
20:07 - oftentimes you'll find the issue that
20:09 - way and so like same thing here right if
20:11 - you find a rubber duck or a friend or a
20:13 - buddy then i think there's a much much
20:15 - higher chance of you actually being able
20:16 - to
20:19 - translate your what's the jumble of
20:22 - stuff happen in your head and do a
20:23 - coherent thing on the interview and that
20:25 - actually is a big part of how you're
20:26 - being evaluated
20:29 - um
20:30 - one more thing i want to add here is
20:32 - another common mistake i see people make
20:34 - a lot is that they think that
20:37 - um
20:40 - their particular coding languages
20:42 - programming languages which are going to
20:43 - help them a lot
20:44 - in the interview so for example they say
20:46 - oh python is much shorter and more
20:48 - concise i'm gonna
20:51 - two weeks before the interview or one
20:52 - month before the interview i'm going to
20:53 - switch all my preparation into python
20:55 - even though i know java really well i'm
20:57 - going to switch over into python and
20:59 - that's
21:00 - almost always a mistake
21:02 - because there are kind of two things
21:03 - that are being evaluated in an interview
21:05 - one is how quickly can you arrive at the
21:07 - correct answer and second is
21:10 - how well do you actually know what
21:11 - you're writing down on the whiteboard
21:13 - and so i think the idea is that people
21:15 - think look at criteria number one
21:18 - and they look like python is gonna be
21:19 - much shorter much faster it's more
21:21 - powerful in some ways compared to java
21:23 - so i can write the code faster and
21:25 - arrive more quickly at the solution
21:27 - using python and that's probably true i
21:29 - mean java is a verbose language many of
21:31 - these other ones that people are
21:32 - familiar with c plus it will take longer
21:35 - if you write out but i think where
21:36 - people make the mistake is that in
21:38 - number two
21:39 - if you're switching to python just for
21:41 - the sake of interviews you're not going
21:43 - to be able to explain what you wrote or
21:44 - why you are using certain functions with
21:47 - as much depth
21:48 - and a big big part of interviews when i
21:50 - evaluate people
21:52 - is does it feel like they memorize a
21:54 - solution and they're just regurgitating
21:55 - some memorized thing in their head or
21:58 - are they properly able to communicate to
22:01 - me the pros and cons of what they've
22:02 - done and how the language really works
22:05 - behind the abstraction
22:07 - and i don't think you can do that in two
22:09 - weeks of preparation with python if you
22:11 - just switched if you've been doing
22:12 - python for years yeah for sure go with
22:13 - python but if you do if you if you've
22:15 - been doing java for years i would highly
22:17 - recommend you stick with what you know
22:18 - best because
22:19 - um a big part of the interview will be
22:21 - kind of testing your
22:22 - your
22:23 - depth of understanding of that language
22:31 - okay so here's like my algorithm okay
22:33 - every single time i
22:38 - i do a
22:39 - dsa problem i have like this four-step
22:41 - process
22:43 - um number one is clarify the problem
22:46 - right clarify the problem means hey i
22:49 - even if it's a simple one i always
22:51 - before i do anything i say it back to
22:53 - the interview and i actually make that
22:54 - kind of obvious i say hey okay
22:56 - let me say it back to you to make sure i
22:58 - understand i actually use that language
23:00 - um and i think that usually goes a long
23:02 - way in making sure that the interviewer
23:04 - and i are on the same page the second
23:05 - thing i do is before again i write any
23:07 - code at all
23:08 - is confirm my approach
23:11 - so say okay here's my understanding
23:13 - here's how
23:14 - the first thing that comes to mind is
23:15 - this
23:17 - and then
23:19 - i'll say
23:20 - what do you think of that
23:21 - like a big part of this is engaging the
23:23 - interview and kind of getting hints from
23:24 - them like do they want you to code that
23:26 - up or is there a more optimal solution
23:27 - they want you to have a discussion about
23:29 - and then code that up
23:30 - um
23:32 - and so you should
23:33 - wait for some sort of verbal agreement
23:35 - or confirmation from the interviewer
23:37 - before you write any code
23:38 - and that's a big mistake that some
23:40 - people just people are so eager and
23:42 - they're in a rush to write code that
23:43 - they'll just dive right in and
23:45 - as the interviewer i feel like i'm left
23:47 - behind i'm like oh
23:48 - i don't really know what you're doing or
23:49 - why you're doing it just you're going
23:51 - grog and doing something on your own
23:53 - and the fourth thing i always remember
23:55 - when i'm doing these interviews is
23:58 - done is better than perfect
24:00 - right time is of the essence and it's
24:02 - way better to just um
24:05 - get something done rather than wasting
24:08 - the whole interview trying to find the
24:09 - optimal solution and you can acknowledge
24:11 - that too
24:12 - like if you feel pretty confident in
24:14 - your brute force approach like the demo
24:16 - approach then what you should do is just
24:18 - say okay hey here's an idea i have let
24:20 - me write the pseudo code for let me um
24:23 - put this down and then i'll walk through
24:25 - some of the downsides of it
24:27 - algorithmically why it's not that
24:29 - optimal what do you think of that and
24:30 - then i'll wait and say they'll say okay
24:32 - that sounds good go ahead and do it and
24:33 - then i'll go i'll write that down so at
24:34 - least now i have the basic solution
24:36 - i got partial credit i got some amount
24:38 - of
24:39 - um i was able to prove the interviewer
24:41 - to some degree that i know what i'm
24:43 - doing and then i can have a really
24:44 - deeper discussion about
24:47 - you know
24:48 - why is this
24:50 - solution insufficient and how we can
24:51 - improve it
24:56 - and then the last thing here is around
25:02 - arrogance and in taking hints from the
25:04 - interviewer
25:05 - so there are kind of two things that are
25:06 - being evaluated in a dsa
25:08 - round in an algorithm question
25:10 - one is did you get the algorithm
25:13 - but there's another thing too which
25:14 - people
25:16 - may not understand or realize as much is
25:19 - i'm also checking do i like this person
25:21 - right do i want to work with this person
25:24 - and so if you are blowing off my
25:26 - suggestions or you're like directly
25:27 - going into the coding and i feel like
25:28 - you're not taking me along with you like
25:30 - you're basically ignoring what i'm
25:31 - saying or even worse like you're
25:32 - disagreeing like i'm saying oh ykk i
25:34 - think you should approach it this way or
25:36 - like i think that your
25:37 - solution has a bug here and you blow it
25:38 - off and say no it doesn't have a bug
25:42 - it doesn't matter if you're right or
25:43 - wrong as the interviewee
25:45 - you're basically ruined you ruined the
25:47 - relationship and because you've ruined
25:49 - the relationship you've now ruined the
25:50 - interview
25:51 - and so a big part of interviewing is
25:53 - making sure that
25:54 - you
25:56 - get the right answer while also
26:00 - um you know making the interviewer
26:03 - feel like they are part of the journey
26:04 - with you
26:07 - anything you want to add here okay
26:10 - yeah just quickly you know i really love
26:12 - the
26:13 - thing you said about you know keeping an
26:15 - open dialogue with the interviewer that
26:17 - would be my approach to and that was my
26:19 - approach when i was interviewing
26:21 - uh you know
26:23 - like types of phrases i would use is
26:25 - something like uh so i have this root
26:28 - for solution in mind you can just
26:29 - explain that
26:30 - i'm thinking of
26:32 - writing the code because we don't have
26:33 - that much time or you know i can go
26:35 - ahead and you know try to think of a
26:37 - better solution yeah
26:39 - yeah and then like you know look up the
26:40 - interviewer look at their facial
26:42 - expression that might sound kind of
26:44 - silly but you know kind of get get hints
26:46 - from the interviewer to
26:48 - to see like what you should be doing
26:50 - yeah and actually that's one of the
26:52 - things that to be totally honest with
26:53 - you i feel like i do feel bad for people
26:56 - who have been interviewing during the
26:57 - pandemic
26:58 - because
27:00 - what you said is so important like when
27:01 - you're in an interview it really is a
27:03 - dialogue it's a two-way street i want to
27:04 - understand from you are you engaged are
27:06 - you happy like
27:08 - do you feel like it might be a bug like
27:10 - i can usually tell that pretty well in
27:12 - person if we're sitting in the same room
27:13 - i i know i can kind of read your body
27:15 - language but when you're a small box on
27:17 - a screen it's actually much harder for
27:19 - me to get that signal and in fact
27:21 - um
27:22 - like it's
27:24 - kind of sad but true a lot of the times
27:25 - the interviewer won't even be engaged
27:27 - like they'll be on their phone
27:28 - they'll you know they'll be reading the
27:30 - news on the side and you can't tell
27:32 - because like
27:33 - they're on some they're like dialing in
27:36 - right and so i do think that's one of
27:37 - the unfortunate
27:38 - realities of interviewing in a remote
27:40 - world because it's harder to make that
27:41 - connection with the interviewer
27:43 - and so that just makes it even more
27:44 - important that you have to really go
27:45 - above and beyond to make sure you're
27:47 - connecting and getting that
27:48 - communication
27:49 - in with them
27:51 - um okay so that was pretty much it in
27:53 - terms of
27:54 - what i had done let me share a couple
27:57 - other high-level ideas of what worked
27:59 - for me so i got five offers in 2013 like
28:02 - i mentioned
28:04 - i still failed a bunch of interviews in
28:06 - that year and so the strategy is i knew
28:09 - that um
28:10 - there were a couple companies that were
28:11 - less important to me
28:13 - um and so i interviewed there first i
28:16 - basically learned okay here's how i need
28:19 - to get back in the mode of interviewing
28:20 - here's like what what concepts i am
28:23 - doing well at here's what concepts i
28:25 - need a lot more work in and by the time
28:27 - i got to facebook google microsoft were
28:28 - like the three ones i really cared about
28:30 - i felt way better and so that's like one
28:32 - tactic in general what you should do is
28:34 - stack up your interviews such that the
28:36 - ones that you care about are a little
28:37 - bit later and the other thing i'll say
28:39 - is
28:41 - when you actually do the interviews with
28:43 - companies you care about then you should
28:45 - have them all be within a short time
28:47 - period
28:48 - so um
28:50 - my most recent experience in 2017 before
28:52 - i joined facebook i literally had one
28:55 - week where i had five on-site interviews
28:58 - like literally monday through friday i
29:00 - had all-day interviews every single day
29:03 - at
29:04 - uber airbnb facebook stripe like back to
29:07 - back-to-back and it was kind of
29:08 - exhausting i mean i can't
29:10 - no getting around that effect like it's
29:11 - exhausting and a bit stressful because
29:13 - you're in this judgment mode so often
29:16 - but the big benefit of that is
29:18 - negotiation and i'm not sure i'm not
29:20 - sure how much we're gonna talk about
29:21 - this one but this is a whole topic you
29:23 - know at some point we should dive into
29:25 - either now or people are interested i
29:26 - can do it talk about it later but the
29:28 - way you negotiate is by having leverage
29:31 - the way you have leverage is by having
29:32 - multiple offers
29:33 - the way you have multiple offers at the
29:35 - same time is by interviewing at the same
29:37 - time in a short window and so like what
29:39 - some people will do which is a really
29:40 - bad idea
29:41 - is they'll like interview once at
29:43 - facebook this month and then next month
29:45 - they'll interview at google
29:47 - and then the the next month after that
29:49 - they'll interview at microsoft
29:51 - and you basically completely
29:53 - hurt like negged yourself
29:55 - because there's no way that the
29:56 - recruiter from facebook is going to wait
29:57 - two months for you to hear back from
29:59 - google or microsoft and then negotiate
30:01 - with you and so for me i was able to get
30:03 - um literally like a 75 000 increase in
30:08 - one of the offers just because i was
30:09 - able to negotiate them with another and
30:11 - so um
30:13 - just be mindful of the order of your
30:15 - interviews and the time period in which
30:16 - they're happening
30:21 - yeah so that was all i had in terms of
30:23 - um
30:24 - getting offers at fanc anything else you
30:25 - want to dive in there you might
30:27 - otherwise you can go into
30:29 - diving into a code base
30:31 - yeah let's talk about diving into a new
30:33 - codebase
30:34 - okay awesome so yeah
30:36 - let me set the context here and then i'm
30:38 - i'm happy to share my screen because i
30:39 - actually have a actual project that we
30:41 - can go through together
30:43 - um
30:44 - the context is that
30:46 - i was at facebook for four and a half
30:47 - years and one of the things about
30:49 - facebook which i loved and this is still
30:51 - true today
30:52 - is that
30:53 - the idea of code ownership is pretty
30:56 - relaxed at meta
30:58 - and what that means is there's no real
31:00 - concept of you can't touch this module
31:02 - or this file like if you want to and you
31:05 - feel like you're making a change just
31:07 - additive like it's positive then
31:11 - it doesn't matter if you're a backend
31:12 - engineer or a front engineer you can
31:13 - just go in check out that module and
31:16 - you know start to make a change
31:18 - and so as a result of it i had that
31:19 - mentality built into me and so i wrote
31:22 - code in six different languages in my
31:24 - time at facebook
31:26 - um
31:27 - let me just tell you what they were
31:30 - um java kotlin hack python javascript
31:34 - and c
31:35 - and so
31:36 - if you're not able to quickly dive in
31:38 - and understand the code base and
31:40 - understand the language at least to a
31:41 - bare bones extent you would not survive
31:45 - and so
31:46 - by doing that process so many times like
31:48 - literally six times of diving in and
31:49 - making a change and getting it reviewed
31:51 - i came up with four different tactics
31:54 - that are really effective for
31:56 - learning a new code base so that's what
31:58 - i wanted to talk about
32:01 - um
32:01 - [Music]
32:03 - so let me just set up my screen share
32:05 - one more time and then we can go from
32:07 - there
32:10 - but yeah if you want to share okay so
32:12 - what you're seeing now is android studio
32:14 - and what i'm thinking would be really
32:16 - cool actually
32:17 - is here's a android project that i built
32:19 - i'll give you the context there
32:21 - um
32:22 - i'm going to show you the four different
32:24 - tactics for
32:26 - ramping up on a code base on this open
32:28 - source android project that i have so
32:30 - this is called the my memory game um
32:33 - so like
32:34 - it's
32:35 - an app i built for my youtube channel it
32:37 - was like a tutorial i built like a year
32:39 - and a half ago and the idea is like
32:41 - you're basically
32:42 - um
32:43 - trying to find pairs of
32:46 - cards right
32:48 - so like
32:49 - these two cards don't matter so now i'm
32:51 - going to find this briefcase and then
32:53 - here's the other briefcase okay
32:55 - it's a bit simple game so let's pretend
32:58 - that
32:59 - our company is building this app
33:01 - and you're a brand new developer
33:03 - how do you now
33:05 - quickly understand the code base
33:08 - yeah and this is a good point like we're
33:10 - talking about android here but the whole
33:12 - point of what i'm saying is that this
33:13 - should apply across language across
33:15 - framework across company right
33:18 - so
33:19 - um i have four tips here
33:21 - uh ramping up
33:26 - okay so number one is um
33:29 - start running the code
33:32 - i think if you could zoom a little bit
33:34 - that might be yeah
33:37 - is that better
33:38 - yep thanks okay so
33:40 - the number one biggest thing that people
33:42 - can do is start running the code as soon
33:44 - as possible
33:46 - and this might sound obvious but what
33:47 - happens is
33:48 - especially when you get to a big company
33:50 - running the code is actually non-trivial
33:52 - like even running the code and getting
33:54 - your code to execute might require like
33:57 - setting up some service setting up your
33:58 - dev environment
34:00 - um you know getting a permission to like
34:01 - run something locally right because
34:03 - these systems that we're talking about
34:04 - at google or facebook which is you know
34:06 - why okay you and i will be familiar with
34:08 - these are huge huge systems right
34:10 - and so
34:12 - what you should not do and this is what
34:14 - happens to a lot of people who i've
34:15 - mentored is there they spend like okay
34:17 - let me spend the next week reading the
34:19 - code and trying to understand it in my
34:21 - head
34:22 - and then i'll run it and it'll make a
34:23 - lot of sense to me but that never works
34:25 - the way you understand the code is by
34:27 - writing the code and then modifying it
34:28 - which is what we'll talk about next
34:30 - so in this example it's actually very
34:32 - simple right like literally all i have
34:34 - to do is i have to go up here and it's
34:35 - run app and then down here at the bottom
34:38 - of the screen it's harder to tell but
34:39 - gradle is a build system for android
34:42 - that's taking all the source code
34:43 - compiling it turning it turning it into
34:46 - something called an apk and deploying it
34:49 - on the device so now we're running it
34:51 - very simple right
34:52 - but
34:53 - even understanding that is super
34:54 - valuable because what i just said is
34:56 - that there's a build system called
34:58 - android a build system called gradle on
35:01 - android
35:02 - and so
35:04 - you should probably know what that means
35:05 - like don't be a master in gradle but
35:07 - like at least google for and say what
35:09 - does gradle do
35:10 - what is the command that's being run
35:11 - behind the scenes when i hit this button
35:13 - like that's the kind of basic stuff you
35:14 - should be able to do um
35:17 - the other thing is
35:18 - when i talk about running the code i
35:19 - also mean
35:21 - like make any change that you can
35:24 - actually see a result in so like what
35:26 - that might mean is like i'm going to add
35:27 - a log statement i'm going to put a
35:29 - breakpoint somewhere and i'm going to
35:31 - see that breakpoint get hit if you can
35:32 - do that
35:33 - you're already
35:35 - halfway there in terms of understanding
35:36 - the new code base
35:38 - but what you shouldn't do is like read
35:40 - the code in isolation and hope that
35:42 - it'll magically make sense to you that
35:43 - almost never works especially these big
35:45 - companies you need to actually start
35:46 - running the code as quickly as possible
35:48 - so that's what we've done right i'm a
35:49 - new engineer i'm on this android team of
35:51 - this company or just making a memory
35:52 - game i ran the code
35:54 - and then
35:55 - i'm able to see it and the other thing
35:57 - that you should probably learn is okay
35:59 - where are all the log messages being
36:00 - displayed right so here
36:02 - there's um
36:05 - something called blogcat
36:06 - and then i go to the corresponding app
36:08 - and i see all the log messages right so
36:10 - this is really important right if you
36:11 - don't know where the log messages are
36:13 - being stored
36:14 - that's step one you should know where
36:16 - that is and you should know how to run
36:17 - it
36:20 - okay so then step number two
36:22 - is to intentionally break things
36:26 - and understand
36:28 - how
36:35 - that eligible for you
36:37 - okay you got it right um
36:39 - yes
36:40 - cool so this next one is really
36:42 - important because i think another
36:44 - failure mode that i've seen so often is
36:45 - that you're coming up on a new code base
36:47 - and you want to make a change right
36:49 - presumably like at facebook every time i
36:51 - made
36:52 - like i was ramping up on kotlin or then
36:53 - i was ramping up on python or javascript
36:56 - like there was usually some existing
36:57 - code there and my objective was i want
36:58 - to modify it or improve it in some way
37:00 - which
37:01 - satisfies the requirements for my
37:03 - project
37:04 - and that's usually
37:07 - two or three steps down the road
37:08 - step step two or i guess i should like
37:11 - step one step two is like before you
37:13 - make your change you have to understand
37:15 - the current state of the logic if you
37:17 - don't understand the way things are now
37:19 - how could you possibly make a change to
37:20 - make it better right and so for example
37:22 - here let's say that i'm in the memory
37:25 - game and then there's like one class
37:27 - here called memory game and so i mean
37:29 - the details aren't important but
37:31 - roughly this memory game class is the
37:33 - core logic
37:35 - for
37:36 - our application
37:38 - it's like all the logic for how do we
37:40 - handle the memory game and so you know
37:42 - one idea is hey we have this line here
37:44 - called chosen images we're taking we're
37:46 - randomizing some icons which are the
37:48 - icons that we show here
37:50 - and then we're taking a couple of them
37:53 - so like you have 20 images we're taking
37:55 - four of them and making those all the
37:56 - icons on the board so let's say what
37:58 - happens if we change this to two i'm
38:00 - hard coding some number here
38:02 - and run the app so basically what i'm
38:05 - doing here is i'm just fooling around
38:07 - i'm literally just like making a change
38:09 - and saying hey what happens if i do that
38:11 - so i don't know if you saw that but the
38:13 - application got deployed and then
38:14 - immediately it crashed
38:16 - and so i think the really important
38:18 - thing to do here is understand why did
38:20 - it break and so like if you're if you're
38:22 - an android developer
38:23 - developer sorry you'll know how to do
38:26 - this right and if you're not you should
38:27 - learn
38:28 - i'm going to filter for only error
38:30 - messages and then see go up to the top
38:32 - of the stack trace
38:33 - and says oh
38:34 - we got a fatal exception
38:37 - there was the index out of bounds
38:39 - exception
38:40 - index four size four right so something
38:42 - broke because i'm trying to access a
38:44 - part of the array which
38:46 - doesn't exist
38:48 - so now it's great like i can kind of dig
38:50 - into that a bit more and understand okay
38:51 - what does that mean how is this
38:53 - what line of code is crashing on it's
38:54 - called memory board adapter
38:56 - and now i can make a connection between
38:58 - hey here's the relationship between this
38:59 - file and this other file and if you
39:01 - build up that mapping in your head of
39:03 - here's how these different modules talk
39:05 - to each other now you're really starting
39:07 - to understand how the code works and now
39:09 - you'll be equipped to make your own code
39:11 - change
39:13 - okay
39:15 - step number three is
39:17 - land a low offer code change quickly
39:24 - okay so the idea here is that um another
39:26 - really common failure mode is
39:29 - that
39:31 - people think that they understand
39:32 - the project which is good and now they
39:35 - say hey i have this change i want to
39:36 - make let me go ahead and make it right
39:38 - now
39:39 - um
39:40 - and then they'll basically come up with
39:41 - a code change which is like 500 lines
39:43 - and then they expect all the people on
39:45 - that team to already
39:47 - understand it and
39:49 - um review it
39:51 - and that's a big mistake because i think
39:53 - for two reasons it's a big mistake the
39:55 - first reason is that at these big
39:57 - companies where you have these large
39:58 - code bases a big part of landing code is
40:00 - actually trust
40:02 - and if you've never worked in my code
40:04 - before and you basically made a big
40:06 - change and now you're expecting me to
40:07 - review it
40:08 - i am not going to be happy like you just
40:10 - basically came out of nowhere made this
40:11 - big change and now are expecting me to
40:13 - like understand it and review it without
40:15 - giving me much context or without
40:19 - like i haven't you haven't earned my
40:20 - trust yet
40:22 - and so um that's the big reason number
40:24 - one and number two is oftentimes things
40:26 - will happen
40:27 - in the process of
40:29 - making the code change that will be
40:31 - unexpected for you and so my
40:32 - recommendation for everyone is i don't
40:34 - care how small if it's just like adding
40:36 - a comment to a random place in the file
40:39 - make that code change right now and land
40:40 - it
40:41 - and so like let me give you an example
40:43 - um
40:46 - i'm gonna undo what we had before so one
40:49 - really
40:50 - powerful technique that i've used for
40:53 - this is most ides right most
40:56 - um
40:57 - code editors
40:59 - will give you
41:00 - hints about
41:01 - where things are going wrong or like how
41:04 - you can improve the code
41:05 - so it's hard for you to see probably but
41:07 - if i hover over on line 14 here
41:10 - android studio which is the ide that i'm
41:12 - using here it's actually telling us
41:15 - assignment can be lifted out of if
41:17 - it's like suggesting to us right now
41:18 - that hey here's a very simple code
41:20 - change that you could make
41:22 - and so
41:23 - what i can do is i can hover over it and
41:25 - i can actually click this button
41:28 - and so what that did let me undo just to
41:29 - make that more obvious so we had this
41:32 - assignment to this list of memory cards
41:34 - here called cards
41:35 - and so what we're doing is we're lifting
41:37 - the card's assignment out of the if
41:39 - statement
41:40 - this is like a very nice kotlin feature
41:42 - which is a language that we're using and
41:43 - so hey that's great
41:45 - so what i would do right now literally
41:47 - is i would say this is a great change
41:48 - let me make a commit for it and put it
41:51 - out for review
41:52 - and if you do that you're like okay wow
41:53 - this person is
41:55 - meaningfully adding to the quality of
41:56 - the code base
41:58 - and as a developer you get a lot more
42:00 - insight onto how do you actually
42:02 - make the change like how do you put a
42:05 - code change out for review how do you
42:06 - then land the commit into github or
42:08 - fabricator or whatever is your code
42:10 - repository and now you're going to be
42:12 - set up for success when you are actually
42:14 - doing your real change
42:17 - so that's tip number three
42:20 - and then finally my last tip is to
42:24 - understand
42:26 - the code hotspots
42:28 - okay so the idea here is basically that
42:31 - when you enter into a company like
42:32 - google facebook microsoft these are
42:34 - companies that have tons and tons of
42:36 - developers and they've been around for a
42:38 - decade or more right
42:40 - and so
42:42 - there are going to be large parts of the
42:43 - code base which are dormant
42:46 - and what i mean by that is basically
42:47 - they're going to be large large parts of
42:48 - the code base that no one really
42:50 - understands or no one has touched in
42:52 - years
42:53 - i don't know have you had that
42:54 - experience like hey like
42:56 - in any of the companies that you've been
42:57 - at
42:58 - uh yeah it was actually a really
43:01 - you know painful experience for me
43:02 - because i needed to dive into that part
43:04 - of the code and
43:06 - yeah it was really hard okay yeah i mean
43:08 - so so
43:09 - my advice is basically like
43:12 - so so generally
43:14 - if you're new onto a team you're not
43:16 - going to be making a change in one of
43:17 - those dormant parts of codebase i'm
43:19 - sorry you had that experience i'm sure
43:20 - that was really painful for you like
43:22 - typically people will be making a change
43:25 - in the area of the code which has
43:26 - already been actively being changed and
43:28 - so one thing that i recommend for
43:29 - everyone is understand where are people
43:32 - actually making changes on the code and
43:34 - so
43:35 - tactically the way you do that is i
43:37 - might go into let's say the main
43:38 - activity which is uh one of the main
43:40 - files and there's a really depends on
43:42 - your ide and depends on your environment
43:44 - but in android studio i'll show you like
43:46 - a really cool way
43:47 - i can go to
43:49 - um
43:51 - get
43:52 - and then github and i can say
43:56 - i can say current file and annotate with
43:58 - git blame
44:00 - okay and so what this is doing is
44:02 - i'm not sure if you can read it but like
44:04 - on the left hand side
44:05 - it tells me when was this code modified
44:08 - right so you can see like
44:10 - um a lot of the code was touched on
44:12 - november 1st
44:13 - but then if i scroll down like okay
44:15 - here's like a change
44:17 - on november 11th
44:18 - and now i can click into and say okay
44:20 - here's like the commit message
44:22 - and so basically like what you're doing
44:25 - is you're trying to look at
44:27 - maybe the top half of the code
44:29 - is never has not been touched in like
44:31 - two years but the bottom half of the
44:33 - file like that function in the middle
44:35 - that is being actively modified so
44:37 - that's like a really good thing to
44:38 - understand so now what you can do is go
44:39 - into that code change understand the
44:41 - test plan understand the context of that
44:44 - change because presumably the author
44:46 - would have left that for you and that
44:47 - gives you a really solid understanding
44:49 - of okay how is this code base evolving
44:51 - right because it's not enough just to
44:52 - have a snapshot in time of the code base
44:54 - you also want to understand how will
44:56 - this code evolve in the next month in
44:58 - the next quarter in the next six months
45:00 - right and the way you have the
45:01 - understanding is by looking at the blame
45:04 - and also by talking to people
45:06 - so
45:07 - that was
45:09 - that was it the four things start
45:11 - writing the code as quickly as possible
45:13 - break things understand how they broke
45:15 - number three
45:16 - make a simple code change like the one
45:17 - that we had we pulled out the assignment
45:19 - of the variable
45:20 - from the if statement and number four
45:22 - understand
45:24 - what are the parts of the code base that
45:26 - are actually
45:27 - um
45:29 - being changed and that's if you do these
45:31 - four things i think you're ahead of 95
45:34 - percent of developers in terms of
45:35 - ramping up
45:37 - yeah thank you for that i think this is
45:39 - this is a really important skill but
45:42 - something that's not quite taught as
45:44 - much as other skills so thank you for
45:46 - sharing that yeah and then one more
45:48 - thing i'll just add quickly one other
45:49 - part of this i wanted to share which is
45:51 - kind of adjacent but related
45:53 - is this idea of um
45:57 - how do you share your work
45:59 - and so one thing that i think i've done
46:01 - a relatively good job of in my career
46:03 - and i've been rewarded for it is being
46:05 - able to actually showcase my work in a
46:06 - meaningful way and so like the project
46:08 - that we just looked at it's called my
46:10 - memory it's open source on github and so
46:13 - people are free to check it out but like
46:14 - one thing i want to call out is i have
46:16 - this readme file here
46:18 - and the readme call does a really good
46:20 - job
46:21 - of explaining what exactly
46:24 - does this project do right so like i
46:26 - have a gif here which shows you like in
46:28 - video format essentially like here's
46:30 - what the project does here's how it
46:31 - works
46:32 - and i have like a icon to get on google
46:34 - play i have like very clear instructions
46:37 - and then in case people are curious um
46:39 - here's what the actual readme file looks
46:41 - like
46:43 - the markdown but i think just going the
46:45 - extra mile and spending an extra hour
46:48 - on your project not just your project
46:49 - like in this example
46:51 - i'm making a readme for the whole
46:52 - project but literally every code change
46:54 - you make spend an extra 15 minutes
46:56 - making that code change really readable
46:59 - and explaining why you're making that
47:00 - change and if you do that every time
47:03 - people will start to trust you a lot
47:04 - more so rather than just like throwing
47:06 - something over the fence you're now
47:07 - taking the time to explain here's what
47:09 - i'm doing and here's why i'm doing it
47:11 - and here's like a screenshot and you
47:12 - make it really easy for me as the code
47:14 - reviewer to understand what you've done
47:16 - so i just wanted to have that at the end
47:18 - of just like
47:20 - the only way that you really have impact
47:22 - on the world is if other people around
47:24 - you understand what you're doing
47:26 - right and so the way you make it easy
47:28 - for people to understand what you're
47:28 - doing is by having a readme that looks
47:30 - like this where you have a very clear
47:32 - breakdown of what you've done
47:33 - and
47:35 - you know what libraries you've used what
47:36 - screenshots you have how does your app
47:38 - work and so that's something that i
47:39 - think everyone should strive to do even
47:41 - though it takes a little bit of extra
47:42 - time
47:44 - nice
47:45 - one quick thing i wanted to add is
47:49 - people should be able to do get blame on
47:51 - github too right oh yeah totally um let
47:54 - me actually i'll just show you a quick
47:55 - example if if you're interested
47:57 - so um
47:58 - let me just pull up our file here if you
48:00 - could zoom in i think i'll be honest yes
48:02 - i'll zoom in too so here like um
48:04 - there's a button called blame right
48:07 - i click on that
48:14 - yes so this is that in fact this might
48:16 - be even better okay thanks for the
48:18 - suggestion okay like this is even better
48:19 - right like now i can very clearly see
48:21 - hey here's the author
48:24 - in this case it's me but like many times
48:26 - it'll be like a tech lead and so now hey
48:27 - like oh hey
48:29 - tech lead you made this change a year
48:32 - ago i don't understand why you made this
48:33 - change like can you please help me
48:34 - understand so like doing git blame like
48:36 - this is a very very powerful technique
48:39 - to be able to understand what happened
48:42 - so yeah this is a really good idea i
48:44 - like this
48:46 - yeah um you know personally i i use both
48:50 - my editor and github or you know
48:52 - whatever whatever the code repository
48:54 - platform is for reading code so i think
48:57 - people should be able to like switch
48:58 - back and forth
49:00 - yeah i mean i think the thing is like
49:01 - the thing that
49:02 - i mean you know you and i definitely
49:04 - know okay and people who
49:06 - are looking for their first job you have
49:08 - to understand is that
49:12 - all of these things are
49:13 - tools
49:15 - but the underlying concept won't change
49:16 - right like what we just talked about is
49:18 - going to be applicable across codebase
49:19 - across framework so like at facebook for
49:21 - example we use mercurial right mercur
49:24 - mercurial is a different kind of version
49:25 - control system is different from get and
49:27 - so yeah the commands are going to be
49:28 - different and i have to learn that if
49:30 - you're gonna if you're gonna join meta
49:31 - you're gonna have to learn mercurial and
49:33 - not get
49:34 - but
49:35 - as long as you understand why you're
49:36 - doing it and like what is the intention
49:38 - of having blame and what are you looking
49:39 - for then
49:41 - learning the command for mercurial
49:42 - versus get that's easy
49:45 - what you have to what's like more
49:46 - important as a developer is
49:47 - understanding what is the underlying
49:49 - uh
49:50 - tactics and under underlying principles
49:52 - that you're trying to achieve
49:56 - cool um i think you you need to go soon
49:59 - uh raffle yeah i think i have like i
50:02 - have like two or three more minutes
50:03 - that's everything we want to wrap up i
50:04 - happy to answer any questions um or if
50:07 - there's anything else um like on your
50:09 - end happy to happy to share
50:12 - um yeah you know if if you have any uh
50:15 - last words feel free to share and if
50:17 - you're in the audience feel free to
50:19 - share any questions you have and i might
50:20 - be able to you know we might be able to
50:22 - cover some of them or one of them
50:24 - maybe yeah definitely i think the one
50:27 - thing i'll just um
50:29 - mention i think there were a couple
50:30 - questions i got dm'd after you made your
50:32 - announcement of this live stream ykk but
50:34 - like y combinator right so y combinator
50:37 - for people who don't know is this really
50:39 - um well-known startup program um it's an
50:42 - accelerator and we're actively doing y
50:45 - combinator right now through
50:47 - with my company called taro and so i
50:49 - just want to share two things that i
50:50 - think are really powerful from y
50:52 - combinator that i think can be
50:54 - applicable whether you're doing a
50:55 - startup whether you're looking for a job
50:56 - whether you're on a job as a software
50:58 - engineer i think the two things that i
51:00 - got from yc that are really beneficial
51:02 - are number one
51:04 - um
51:05 - a lot of
51:09 - a lot of questioning around
51:11 - why can you not do it faster
51:13 - and number two a lot of accountability
51:16 - so number one means um like
51:19 - what often happened
51:20 - is uh what often happened is like people
51:24 - will
51:26 - the yc part like i'll go into the office
51:28 - hours and the yc partner will say like
51:32 - you're launching your product on hacker
51:34 - news or on product or whatever it is
51:37 - why have you not
51:38 - launched yesterday
51:40 - like what is preventing you from
51:41 - launching like yesterday and so you have
51:43 - to now come with a good answer of like
51:44 - why it's not working and so um that's
51:46 - been really powerful just like
51:49 - always having that urgency and number
51:50 - two is accountability so every two weeks
51:52 - we have a office hour where we have to
51:53 - set goals and then um achieve them and
51:56 - if you don't hit your goal then it's
51:57 - kind of a shame it's like
51:59 - there's some element of social shaming
52:01 - that happens um and so that's been also
52:03 - really effective for me to like achieve
52:05 - achieve what we've done in yfc
52:11 - yeah thank you for that and
52:13 - that's probably it for the stream but
52:16 - just you know what you need to quickly
52:17 - mention i think accountability is
52:19 - important for like developers in general
52:21 - to like prepare for
52:22 - um
52:23 - coding interviews or whatever i you know
52:26 - that's that's why you know
52:27 - i guess that's another reason why uh
52:30 - having a buddy is really helpful
52:32 - yeah totally yeah i mean i think that in
52:34 - general having some accountability
52:36 - partner whether it's a friend or a coach
52:38 - or a boss even i mean it's so much more
52:40 - effective to
52:42 - really achieve your potential compared
52:44 - to you know just working on your own
52:46 - um
52:47 - yeah so i think that that was it just
52:49 - really nice chatting like and hopefully
52:50 - people who are watching got some benefit
52:52 - out of this um i'm really happy to
52:54 - connect with anyone so i'm pretty active
52:55 - on twitter and linkedin i'm r pandey1234
52:58 - and i think i'm also on youtube so feel
53:01 - free to connect on youtube um and and
53:03 - always open to chatting further
53:06 - yeah sounds good you know we've been
53:08 - getting a lot of comments saying
53:10 - uh it's been really helpful and
53:12 - insightful so i really appreciate that
53:14 - and
53:15 - yeah you know maybe we should do part
53:17 - two at some point to cover you know
53:19 - maybe like uh startups and getting
53:21 - probability as a software engineer yeah
53:23 - no i feel like there's so much more we
53:24 - could talk about getting promoted as an
53:26 - engineer the startup experience more
53:28 - about negotiation is a whole other topic
53:30 - um either i'm happy to come on again yk
53:32 - if you want or we can do a part two on
53:34 - my channel as well whatever
53:36 - yeah
53:36 - actually part part two on your channel
53:38 - might be really cool too let's do it
53:40 - okay cool well really nice to to
53:43 - talk for almost an hour um and thanks
53:45 - everyone for tuning in
53:47 - all right thank you everyone
53:48 - bye i feel