00:00 - here's a coding interview question from
00:02 - Amazon it is find the number of negative
00:04 - integers in a row-wise and columnwise
00:07 - sorting
00:08 - Matrix so here's an example as you can
00:11 - see the numbers in the Matrix are sorted
00:13 - row-wise and column
00:16 - wise and here we have four negative
00:19 - numbers so our function let's say funk
00:23 - should return four in this
00:27 - case here's a naive solution for this
00:29 - problem
00:30 - we'll just start from the first row and
00:33 - we'll count the number of negative
00:34 - numbers one by one so we find three
00:37 - negative numbers
00:39 - here and in the second row we find just
00:42 - one negative
00:44 - number and in the third row in the last
00:46 - row we find zero negative numbers so we
00:49 - add them up and we get four in this
00:53 - case the worst case scenario for this
00:56 - solution is when we have all negative
00:58 - numbers in The Matrix and in that that
01:00 - case we'll need to Traverse all the
01:01 - elements in the array or Matrix so the
01:04 - time complexity for this solution would
01:06 - be big of n * m where n is the number of
01:11 - rows we have and M is the number of
01:13 - columns we have in the
01:15 - Matrix here's the optimal solution for
01:17 - this problem we'll start from the top
01:20 - right
01:20 - corner and we'll
01:24 - find the position of the last negative
01:26 - number in the first row and using that
01:29 - information
01:31 - we'll find the position of the last
01:33 - negative number in the second
01:34 - row this one and so on until we get to
01:38 - the last row or we don't have any more
01:41 - negative numbers to count for the first
01:43 - row the position of the last negative
01:46 - numb is negative 1 is two so we'll know
01:50 - that the number of negative numbers in
01:52 - this row is just
01:54 - three and same thing with the second row
01:56 - the position of the last negative number
01:58 - is zero so the number of negative
02:02 - numbers is just one here and we have
02:04 - zero negative numbers in the last row
02:06 - we'll add them up and we get the answer
02:09 - four the time complexity for this
02:12 - solution is an order of n plus M where
02:16 - again n is the number of rows and M is a
02:20 - number of columns we have so here's the
02:23 - optimal solution in code we're defining
02:26 - our function here with the Matrix
02:30 - and the number of
02:33 - rows and the number of columns as input
02:38 - we're initializing count to zero which
02:41 - we're going to use to keep track of the
02:43 - number of negative numbers we've seen so
02:45 - far and I to zero which
02:50 - is our row index and J to M minus one
02:55 - which is our column index so we'll
02:58 - use I and J to keep track of which
03:01 - element we looking at so while J is
03:05 - larger than or equal to
03:07 - zero so we still have more negative
03:10 - numbers to count and I is less than n so
03:14 - we haven't got to the last row
03:17 - yet if the element we're looking at m i
03:21 - j is a negative number then we found the
03:26 - last negative number in the row so we
03:30 - increment the count with J + one and
03:33 - then we go to the next
03:36 - row if the number we're looking at is
03:38 - not a negative number then we'll move
03:41 - our pointer to the left or we'll try the
03:43 - same thing with the number on the left
03:46 - and we'll repeat this process over and
03:48 - over again until we get the total number
03:50 - of negative numbers in this Matrix and
03:53 - then we're going to return
03:55 - that all right thanks for watching this
03:57 - video if you're watching this on YouTube
03:59 - make sure to check out the original
04:01 - article on geeksport Geeks in the
04:02 - description
04:04 - below