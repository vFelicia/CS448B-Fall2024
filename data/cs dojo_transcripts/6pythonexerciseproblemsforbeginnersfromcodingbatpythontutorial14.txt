00:00 - hi everyone so as you learn Python or
00:03 - any other programming language for that
00:05 - matter I think one thing to keep in mind
00:07 - is that it's really really important to
00:10 - practice using it as much as possible so
00:13 - that means building lots of things and
00:15 - solving lots of problems now one good
00:18 - website for finding problems to solve
00:21 - for beginners is called coding bat they
00:24 - have a bunch of problems here in Java
00:25 - and Python on topics like strings lists
00:29 - and logic I think it's a really good
00:32 - website for improving your coding skills
00:34 - and your problem solving skills and
00:36 - today we're gonna go over six problems
00:39 - from the Python section together
00:41 - now unfortunately coding bat only uses
00:44 - Python 2 instead of Python 3 but
00:47 - actually you don't have to worry too
00:48 - much about it because Python two and
00:50 - three are pretty similar so if you're
00:53 - more used to Python 3 pretty much the
00:55 - only thing you need to worry about as
00:57 - you go through the problems here is when
00:59 - you divide one integer by another
01:01 - integer so for example when you divide 3
01:04 - by 2 by writing 3 divided by 2 the
01:08 - result you get in Python 2 is different
01:10 - from the result you get in Python 3
01:13 - anyway just in case you want to learn
01:15 - more about the difference between Python
01:17 - 2 and 3 I'm gonna put this article I
01:20 - found about the difference between the
01:21 - two in the description below anyway for
01:24 - the problems I'm gonna cover today you
01:26 - don't have to worry about that at all so
01:28 - let's go through some problems here
01:29 - together so for the first problem I'm
01:32 - gonna go to this warm-up one section and
01:35 - then I'm just gonna select the first
01:37 - problem here sleep in now there's a
01:40 - bunch of text here explaining the
01:42 - problem but let me just explain it for
01:44 - you you're supposed to write a function
01:45 - called sleep in which takes two
01:48 - arguments weekday and vacation and both
01:51 - of them are gonna be boolean arguments
01:53 - so either true or false and you need to
01:56 - write this function sleep in so that it
01:59 - returns true so we sleep in if weekday
02:02 - is false or vacation is true so we
02:06 - basically sleep in if it's not a weekday
02:10 - or if we're on vacation
02:12 - so again we need to
02:13 - disfunction sleep in so that it returns
02:16 - true only when weekday is false or
02:20 - vacation is true so how can we do that
02:23 - well there are a few different ways of
02:25 - going about this you might say well you
02:28 - can just write it like English so you
02:30 - could write if weekday is equal to false
02:34 - or vacation is equal to true then we
02:40 - want to sleep in so we return true and
02:44 - else return false so this solution
02:50 - should work just fine and note here that
02:52 - when weekday is false and vacation is
02:56 - true as well this is still going to
02:59 - return true because this whole
03:01 - expression in the if Clause this
03:03 - expression right here is going to be
03:05 - true as well now what's cool about
03:08 - coding bat is once you write your
03:10 - solution here in the text box if you
03:13 - click this button right here go you can
03:15 - check if your solution was correct or
03:17 - not automatically so let me click go
03:20 - here and right here it says all correct
03:23 - now we can still simplify this code a
03:25 - little bit so let's do that before we go
03:28 - to the next problem so here in the if
03:31 - Clause instead of saying or vacation
03:33 - equals true we can actually just say or
03:37 - vacation and that's because vacation is
03:40 - already a boolean value you know it's
03:42 - true or false so we can put it right
03:45 - after the or keyword without anything
03:47 - else and then here instead of saying
03:50 - weekday equals false we can just say not
03:53 - weekday and that's basically for the
03:56 - same reason weekday is a boolean value
03:59 - true or false so we can just put the
04:01 - word not right before weekday so this
04:05 - whole expression we have here not
04:07 - weekday or vacation is pretty much
04:10 - equivalent to what we had earlier and
04:11 - note here that by putting the word not
04:14 - in front of weekday we're basically just
04:17 - flipping the boolean value
04:19 - so if weekday is false this expression
04:23 - not weekday becomes true
04:25 - if weekday is true that weekday becomes
04:28 - false okay I hope that was clear enough
04:31 - let me know in a comment if anything was
04:34 - unclear
04:34 - anyway let's click this button go to see
04:37 - if this solution is correct and it is we
04:41 - get all correct again
04:42 - now we could simplify this solution a
04:45 - little bit more but it's good enough for
04:47 - now so let's go to the next problem just
04:49 - click the back button in the browser and
04:51 - then click back button again and go to
04:54 - warm up - and let's find the first
04:57 - problem of this section string x okay so
05:01 - I think this problem is kind of
05:03 - interesting you're supposed to write a
05:05 - function called
05:06 - string x which takes two arguments the
05:09 - first of those arguments is going to be
05:12 - a string and the second argument is
05:14 - going to be a non-negative integer when
05:17 - you return from this function is gonna
05:19 - be the first argument repeated a certain
05:22 - number of times and that's gonna be the
05:24 - second argument so if you're given hi
05:27 - and - you need to return hi hi and if
05:32 - you're given hi and 3 you need to return
05:35 - hi hi hi so think about this problem for
05:37 - a second and see if we can solve this
05:39 - problem yourself okay here's my solution
05:42 - and to explain my solution I open up
05:45 - Jupiter notebook here where of course
05:47 - you can experiment with Python code so
05:49 - let's say you're given this string hi
05:52 - like we saw earlier let's put it in this
05:55 - variable call the S for now and if you
05:58 - wanted to get hi hi
06:00 - you know this string repeated twice you
06:03 - can just write s plus s and once you
06:06 - print it you get hi hi and if you wanted
06:10 - to get high we pretty three times you
06:13 - can just write s plus s plus s and then
06:16 - you get high high high and we can just
06:18 - keep going like that if you wanted to
06:20 - get high repeated four times you can
06:23 - just write s plus s plus s plus and so
06:26 - on but instead you can also write s
06:29 - times four and this gives us
06:34 - hahaha which is what we want so we can
06:37 - directly apply this thing here to the
06:39 - problem we saw earlier here we have a
06:42 - function called string x and the two
06:45 - arguments that we're taking are called
06:47 - STR and n so the only thing you actually
06:51 - need to return here is STR x and and
06:55 - that's it
06:56 - once you click go and you know scroll
06:59 - down here a little bit you see that this
07:01 - is all correct so this solution is
07:04 - correct ok let's go to the next problem
07:06 - click the back button and go back to the
07:09 - home page and then go to string 1 and
07:11 - let's take the first problem here as
07:14 - well hello name this problem is pretty
07:17 - simple given a string name for example
07:19 - Bob returned a greeting of the form
07:22 - hello Bob so if we get Bob we return
07:26 - hello Bob and if we get Alice we return
07:30 - hello Alex
07:31 - think about it for a second and I'm
07:33 - gonna give you my solution in a second
07:35 - ok here's my solution you can basically
07:37 - just use the thing we saw earlier where
07:40 - we put together or concatenate multiple
07:43 - strings together with the plus sign so
07:46 - in this function that's called hello
07:47 - name which takes the string argument
07:50 - name you might write return hello in a
07:55 - string plus name plus exclamation mark
08:00 - and then let's click go here and once we
08:04 - check it oops
08:05 - it looks like we didn't get the results
08:07 - correctly so let's see what's wrong here
08:09 - we're supposed to get hello Bob here and
08:13 - we are getting hello Bob here but we
08:15 - missed a space here it looks like and
08:18 - it's the same thing with all the other
08:20 - cases too so let's fix that by adding a
08:24 - space here right after the word hello
08:27 - and once we click go here it's ok now
08:31 - it's all correct all right let's go to
08:33 - the next problem go back to the home
08:35 - page and then find it lists one here and
08:39 - find the first problem of these problems
08:41 - first last 6 this problem is pretty
08:45 - simple as well you need to just
08:48 - a function called first last six which
08:51 - takes a list as the argument and returns
08:54 - true if the first element or the last
08:58 - element of this list is 6 so again think
09:02 - about it and here's my solution so the
09:04 - key for solving this problem is finding
09:08 - the first element and the last element
09:10 - of the given list so let's think about
09:13 - how we can do it in jupiter notebook
09:15 - again let's put this list 1 2 6 in a new
09:19 - variable called let's say a so a is now
09:23 - a list of 1 2 & 6 selecting the first
09:27 - element is really easy you can just
09:29 - write a square brackets 0 and this gives
09:33 - us the first element of this list 1 but
09:37 - what about the last element well one way
09:39 - to do it is like this the index of the
09:42 - last element is 2 because the index of
09:46 - the first element is 0 and the second
09:48 - element is 1 and the third element or
09:50 - the last element here is 2 and the
09:53 - length of this list is 3 so using those
09:57 - two facts you can just write this a
09:59 - square brackets Len parentheses a minus
10:04 - 1 and then once you print it you should
10:08 - get the last element of this list and
10:10 - that's because Len of a gives us the
10:14 - length of this list which is 3 and then
10:17 - minus 1 gives us 2 which is the index of
10:21 - the last element so let's see if that
10:23 - works and it does it gives us 6 but
10:28 - actually in Python there's a shortcut
10:30 - for it so to find the last element in
10:33 - Python you can just write print a square
10:37 - brackets minus 1 and this is basically
10:41 - equivalent to what we had earlier here
10:43 - so once you run this cell you get the
10:47 - same results 6
10:49 - so let's now use this shortcut a square
10:52 - brackets minus 1 to find the last
10:54 - element of the list let's go to the
10:57 - problem page and using that shortcut you
11:00 - can write
11:01 - in this function first last six which
11:03 - takes the lists numbs if the first
11:07 - elements numb square bracket zero is
11:09 - equal to six
11:10 - or the last element numbs square
11:14 - brackets minus one equals six then
11:18 - return true because that was a problem
11:21 - we wanted to return true from our
11:23 - function if the first element or the
11:25 - last element is six and otherwise or
11:30 - else return false so that's it let's see
11:35 - if this is correct and it is all correct
11:39 - so just like we saw in the first problem
11:41 - I think we could simplify this function
11:44 - a little bit but it's good enough for
11:45 - now so let's go to the next problem go
11:48 - back to the home page and skip the logic
11:51 - sections and go to the string too let's
11:54 - go to the first problem double car in
11:57 - this problem we need to write a function
11:59 - called double car which takes a string
12:03 - as the argument and returns a new string
12:05 - and in this new string we need to repeat
12:09 - every character in the original string
12:11 - twice so if we have th e as the argument
12:16 - we need to return TT HH and ee and if we
12:21 - get a b b as the argument we need to
12:24 - return a a b b b b okay so think about
12:29 - it for a second maybe pause video and
12:31 - here's my solution to solve this problem
12:35 - it's gonna be useful to learn this one
12:37 - little trick here so let's say you're
12:40 - given a string let's say D which is
12:43 - equal to ABC what if you wanted to add a
12:47 - character or string to this string so
12:50 - what if you wanted to add a character
12:52 - for example F what you can do that by
12:55 - writing D equals D plus F so this says
13:00 - the new value of D is gonna be the old
13:04 - value of T which is ABC put together
13:07 - with F so this way the new value of T is
13:11 - gonna be ABC F but actually there's a
13:14 - short
13:15 - for it you can just write D plus equals
13:18 - f and this is the same thing this way we
13:22 - can add this character or this string F
13:24 - to this string D so after this once we
13:30 - print D we get ABC F so this is how you
13:34 - can add a character to a string let's
13:36 - see how we can apply this idea to the
13:39 - problem we saw earlier so let's say
13:40 - you're given this string let's call this
13:43 - string given and you're given ABC in a
13:47 - string and with the problem we saw
13:49 - earlier we'll need to produce a new
13:51 - string that's going to be a BB and CC so
13:56 - every character repeat it twice how can
13:58 - we do that well first of all you can
14:00 - just initialize a new string let's call
14:04 - this to return because we're gonna
14:06 - return this variable which is gonna be
14:08 - an empty string and then run a for loop
14:11 - over this given string given by writing
14:14 - for C in given as in for each character
14:18 - C in the string given to return plus
14:22 - equals C so this way we're saying for
14:26 - every character in the given string
14:28 - we're gonna add that character to return
14:31 - but instead of adding it just once we
14:34 - want to add it twice how can we do that
14:37 - well one way to do that would be to
14:39 - write it twice by writing to return plus
14:42 - equals C and to return plus equals C but
14:46 - there is a slightly cleaner way of doing
14:48 - it it's to write to return plus equals C
14:52 - times two so this way we're multiplying
14:56 - C by two so when C is equal to a we get
15:01 - double a and when C is equal to B we get
15:05 - B B and so on so that way we'll be able
15:07 - to add every character twice two to
15:10 - return once you run this block of code
15:13 - and then print to return we get what we
15:17 - wanted hey bebe and CeCe and just a
15:21 - quick note here this particular method
15:23 - might not be the most efficient solution
15:26 - depending on how
15:28 - your particular version of Python is
15:31 - implemented but you don't have to worry
15:33 - about that right now because probably
15:34 - the input is going to be pretty small
15:36 - anyway so let's go back to the problem
15:38 - and let's actually put this idea into an
15:42 - actual function so we have double car
15:44 - which is gonna take a string here we
15:47 - need to first initialize a new variable
15:50 - called let's say to return again to an
15:53 - empty string and then we need to run a
15:55 - for loop as we saw earlier by writing
15:58 - for C in SD R :
16:01 - and then to return plus equals C times
16:05 - two and they add then return this string
16:09 - to return let's see if it works and it
16:13 - does all correct okay let's go to the
16:16 - next problem go back to the home page
16:18 - and then find the lists to section find
16:22 - the first problem count evens and the
16:25 - problem is the following you need to
16:27 - write a function called count evens
16:29 - which takes a list of integers and you
16:33 - need to return the number of even
16:34 - integers in the given list so in this
16:37 - example 2 1 2 3 4 there are 3 even
16:41 - integers 2 2 & 4 so you need to return 3
16:44 - think about it for a second maybe pause
16:46 - the video right here and here's my
16:49 - solution okay to solve this problem you
16:52 - need to be able to use the mod operator
16:54 - so let me just give you a quick overview
16:57 - of the mod operator just as a review so
17:00 - an example of a model operator would be
17:03 - 5 mod 3 and the mod operator gives you
17:07 - the remainder that you get by dividing
17:09 - the first number by the second number so
17:12 - this is asking what's the remainder that
17:14 - you get when you divide 5 by 3 what you
17:17 - get to as the remainder so that's what
17:20 - you get here what if you had 7 mod 3
17:24 - well this gives us 1 because that's the
17:27 - remainder here and what if we wanted to
17:29 - find if a given number is an even number
17:32 - or not well you can do that by writing
17:35 - the given number for example 5 mod 2 and
17:39 - this way if the given number is an
17:41 - even number we get zero because the
17:44 - remainder is zero but if the given
17:46 - number is an odd number we get one
17:49 - because the remainder is 1 in that case
17:51 - when you divide the first number with
17:53 - the second number so let's use that
17:56 - concept to solve this problem and this
17:58 - function count evens which takes nums
18:01 - which is a list of numbers we're gonna
18:03 - write first initialize a variable called
18:06 - count to 0 we're gonna use this variable
18:09 - to count the number of even numbers and
18:12 - then we're gonna run a for loop by
18:14 - writing for X in Nam's so for each
18:19 - number which we're calling X in the
18:22 - given Nam's if X mod 2 equals 0 then
18:27 - that means X is an even number so
18:30 - increase count by 1 by writing count
18:33 - plus equals 1 and else we don't have to
18:36 - do anything so we don't have to write
18:38 - else even and after this for loop we
18:41 - just need to return counts so return
18:44 - count and we're done so what we did here
18:47 - is we initialize count to 0 and then we
18:50 - run a for loop for X in nums
18:52 - or for each number X in the given list
18:55 - and then if X is an even number or if X
19:01 - mod of 2 is 0 then increase the count by
19:05 - 1 and then at the end return counts
19:07 - let's see if this works
19:09 - and it does all correct okay that's it
19:12 - for the problems if you like this type
19:14 - of exercises there are a few resources I
19:17 - recommend one is of course solving more
19:20 - problems on coding bat because there are
19:22 - a lot more than the ones I cover today
19:24 - and another one is called project Euler
19:27 - at project Euler dot Nets the problems
19:31 - on this side are more mathematically
19:33 - oriented and there are
19:35 - language-independent
19:36 - to another resource I want to recommend
19:38 - is my own course on LinkedIn learning
19:41 - and Linda Calm it's called get ready for
19:45 - your coding interview it's supposed to
19:47 - be for coding interviews but I think
19:49 - because I use Python in this course it's
19:51 - gonna be good for developing your
19:53 - problem-solving skills and
19:55 - skills in Python also if you're looking
19:57 - for either Python book recommendations
20:00 - or project ideas for Python I recently
20:03 - published the video about that so I'm
20:05 - gonna put a link to that in the
20:07 - description just in case you're curious
20:08 - anyway that's it for this video thank
20:11 - you as always for watching my videos and
20:13 - I will see you guys in the next video