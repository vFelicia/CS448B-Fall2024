00:00 - you're given an array of items and they
00:02 - could be of any type they could be
00:04 - numbers strings or anything else for
00:06 - that matter and the problem here is
00:08 - writing a function that takes this array
00:10 - and reorders it in a random way so in
00:13 - this example one will go from here to
00:16 - here zero will go here and nine will be
00:19 - here and you're given two functions to
00:21 - solve this problem the first one is
00:23 - called Rand for random which gives us a
00:26 - random value between zero and one the
00:29 - second function is called floor and it
00:31 - gives us the largest integer value
00:33 - that's less than the given value so for
00:36 - example floor of 2.88 would return two
00:39 - now when you're trying to solve this
00:41 - problem you might come up with a biger
00:43 - and log and solution initially but try
00:46 - coming up with a biger of end solution
00:48 - and try solving it in place as well
00:50 - which means you don't have to create a
00:52 - new array to solve this problem now to
00:54 - practice pause the video right here and
00:56 - try solving this problem within 10
00:58 - minutes here's one potential solution to
01:01 - this problem we're going to use the Run
01:03 - function to generate a random value for
01:06 - each item that we have in the array so
01:08 - for example we're going to generate 0.92
01:12 - randomly for the value one and 0.10 for
01:16 - the item zero after that using those
01:19 - randomly generated values as keys we're
01:22 - going to sort this array let's say in an
01:24 - ascending order so for example in this
01:27 - particular example the value zero will
01:29 - will come to the top of the array
01:32 - because the corresponding random value
01:34 - is the smallest among all the random
01:36 - values that we generated so after that
01:39 - our array will look like this now to
01:42 - sort this array with these random Keys
01:44 - we could use any sorting algorithm if we
01:47 - use the big of nlog n sorting algorithm
01:49 - such as quick sort this whole solution
01:52 - would take big of nlog n in time and
01:55 - another thing to note here is that we
01:57 - need some extra space to store these
01:58 - randomly generated values to be more
02:01 - specific we need big of n in extra space
02:05 - so is there a better solution than this
02:07 - yes there is and here's my Big O end
02:09 - solution the first thing we're going to
02:12 - ask ourselves in this solution is what
02:14 - should the value be at the last index
02:16 - where two is currently we're going to
02:18 - determine that by picking a random value
02:21 - out of this array out of all the values
02:23 - of this array and we might pick randomly
02:26 - for example the number three and in that
02:28 - case we'll swap the number three with
02:30 - the number two so that the number three
02:33 - will go to the last index after that
02:36 - this array will look like this and then
02:38 - we'll sort of repeat the process with
02:40 - the second last index we're going to ask
02:43 - ourselves what should the value be at
02:45 - the second last index and we'll
02:47 - determine that by picking a random value
02:49 - out of these four values now because the
02:52 - number three is already fixed at the
02:54 - last index and we might pick for example
02:58 - the number zero for the second last IND
02:59 - index and in that case we'll swap Z and
03:03 - 9 and the array will look like this
03:06 - after that the same thing we'll ask
03:08 - ourselves what should the value be at
03:10 - the index two of this array and we'll
03:13 - pick a random value out of these three
03:15 - values and we might happen to pick the
03:18 - same value that's already in that index
03:21 - and in that case we don't have to do
03:22 - anything so the array will look the same
03:25 - at the end of this algorithm we'll ask
03:27 - ourselves the same question what should
03:29 - the value be at the next one and we
03:31 - might pick this value one we'll swap
03:34 - those two values and the array will look
03:36 - like this and we're done this solution
03:39 - will only take big of any time because
03:42 - we only go through this array once and
03:45 - it'll only take big old one in extra
03:47 - space for swapping values so I kept
03:50 - saying something like just select a
03:52 - random value out of these four values
03:55 - but how can we actually do that with the
03:57 - two given functions ran and floor
04:00 - the key here is that we want to be able
04:02 - to select an index 0 1 2 or three
04:07 - randomly with the same probability or
04:09 - 25% probability each and if you recall
04:13 - the return value of Rand is always
04:16 - larger than or equal to zero and it's
04:18 - less than one and let's just say for
04:20 - Simplicity ran is uniformly distributed
04:23 - over this section and if we multiply
04:26 - Rand by four four times Rand will range
04:29 - from from 0 through 4 instead and let's
04:32 - just zoom into this line and we'll see
04:34 - that we have again a value that's 0
04:38 - through 4 and we'll be able to divide
04:41 - this line into four equivalent sections
04:44 - 0 through 1 1 through 2 2 through three
04:47 - and 3 through 4 and notice that the
04:50 - value of four times Rand the probability
04:53 - that that value will fall into each of
04:56 - these sections is equivalent to each
04:58 - other so the probability that four times
05:01 - Rand will be larger than or equal to two
05:04 - and less than three will be
05:06 - 25% just like the probability that it
05:09 - falls under any other section and so we
05:12 - can assign each of these sections into
05:15 - each of the indices that we have right
05:18 - here so if we get for example
05:22 - 2.5 as the value of four times run we
05:25 - can assign that to two and if we get 1.1
05:29 - we can assign that to one and we can do
05:32 - that with floor of four times Rand and
05:36 - again this goes to 0 1 2 or three with
05:40 - the same probability or 25% probability
05:43 - and that way we can choose a random
05:45 - value out of four values if we want to
05:48 - instead choose a random value out of
05:50 - three values we can replace this four
05:53 - right here with three and we can just
05:56 - write floor of three * Rand and we'll be
05:59 - able to choose a value from 0 1 or two
06:03 - instead with that in mind let's see what
06:05 - my solution might look like in code
06:08 - we're going to write a function called
06:09 - reorder which takes the given array R
06:12 - and reorders it in place so we're not
06:14 - going to return any value out of this
06:16 - function the first thing we're going to
06:18 - do in this function is we're going to
06:20 - initialize a variable called n to the
06:22 - length of the array and that's just for
06:25 - convenience after that we're going to
06:27 - run a for Loop for I starting at the
06:30 - index n minus one which is the last
06:33 - index of the array down to one which is
06:35 - of course the second index of the array
06:38 - let's say as an example in the full loop
06:40 - we're currently examining the second
06:42 - last index so I is equal to three
06:46 - currently and then we'll need to ask
06:48 - ourselves what should be the value that
06:50 - goes into that index and we'll do that
06:53 - by picking a random value out of these
06:55 - four values and we might pick for
06:58 - example this value Val zero and let's
07:01 - call that index pick we'll be able to
07:04 - decide what the value should be for pick
07:06 - with floor of I + 1 time Rand so if I is
07:11 - equal to three we're saying pick should
07:14 - be four of four times Rand because we're
07:17 - picking a value out of four values and
07:20 - after that we'll swap the value at the
07:23 - index pick with the current value that's
07:26 - in the current index that we're
07:27 - examining we'll do that with a temporary
07:29 - valuable called temp so we're going to
07:32 - store the current value in the index I
07:35 - this value into temp and then we're
07:38 - going to move the value at the index
07:41 - pick into the current index and then
07:45 - we're going to put the temporary stored
07:47 - value into pick so that's my solution
07:50 - and this algorithm is also called fure
07:52 - yet Shuffle or KN Shuffle that's it for
07:56 - my video and thanks so much for watching