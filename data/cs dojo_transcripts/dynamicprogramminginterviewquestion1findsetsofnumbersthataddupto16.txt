00:00 - hey everyone in this video I'm gonna
00:02 - give you a programming slash coding
00:04 - interview problem for which you can use
00:06 - dynamic programming if you're not
00:08 - familiar with then I'm roaming I'd
00:10 - recommend my dynamic programming
00:12 - introduction video first so here's the
00:14 - problem you're given an array of
00:16 - integers for example 2 4 6 and 10 and
00:19 - you're supposed to find subsets of this
00:23 - array which add up to a certain number
00:26 - for example 16 so in this case there are
00:29 - two such subsets
00:31 - the first one is 6 and 10 and the second
00:37 - such subset is 2 4 and 10 and just to
00:42 - make the problem a little bit simpler
00:43 - you don't have to actually find the
00:45 - subsets themselves you just need to find
00:48 - the number of subsets that add up to the
00:51 - given number so in this example your
00:53 - function should take this number 16 as
00:56 - well as this array and return 2 because
01:00 - there are two subsets of this array that
01:03 - add up to 16 now when you're given a
01:05 - coding interview problem like this one
01:07 - the typical first step is to ask some
01:10 - clarifying questions so you might ask as
01:12 - a clarifying question is it possible to
01:14 - have negative numbers here the answer is
01:17 - no we only have positive integers here
01:20 - so there's no zeros or negative numbers
01:22 - and is this array already sorted
01:25 - actually it doesn't matter too much if
01:27 - it's sorted or not but let's just say
01:29 - it's sorted and are there any duplicates
01:32 - in this array so is it possible to have
01:34 - two of the same number the answer is no
01:36 - there are no duplicates and what if
01:39 - you're given instead of 16 zero as one
01:43 - of the arguments what should we return
01:45 - then in that case you should return one
01:48 - from your function because technically
01:51 - the empty array or the empty set as up
01:56 - to zero so you count just this set and
01:59 - you return one from your function so
02:03 - think about this problem for a second
02:04 - and then come back for a solution so if
02:07 - I was given this problem I would first
02:08 - ask myself how would I solve this
02:11 - problem on a whiteboard or on paper
02:13 - the way I would do that is I would start
02:16 - with an empty set and I would try and
02:20 - construct all the possible subsets of
02:23 - this array so for the rightmost element
02:27 - or you can start at the leftmost element
02:29 - but let me start with the rightmost
02:31 - element for that one we need to ask
02:34 - ourselves do we want to include it in
02:36 - the subset that we're trying to
02:38 - construct if the answer is yes we'll
02:40 - have a subset of just one element ten
02:44 - and if the answer is no we'll still have
02:46 - an empty set and we'll need to do the
02:50 - same thing for the next element six and
02:53 - for each of these subsets so if we
02:57 - decide to include six to this subset or
02:59 - add six to this subset we'll have six
03:03 - and ten and if we decide not to include
03:07 - that in this one we'll have just ten and
03:10 - so on so just like that you'll be able
03:13 - to find all the possible subsets of this
03:15 - entire array and for each of these
03:18 - subsets you can just ask yourself in
03:20 - theory does it add up to for example 16
03:23 - and then add up all of those subsets and
03:28 - we have the answer
03:29 - and when I see this structure if I was
03:32 - in the actual interview I might say well
03:34 - since since it's a tree it actually
03:37 - looks like a recursion tree and so maybe
03:40 - I can solve this problem using recursion
03:42 - so let's see how we can do that of
03:45 - course the idea of recursion is to break
03:48 - down the large problem the original
03:50 - problem into smaller subproblems that
03:53 - are similar in nature so let's see how
03:56 - we can do that let's call the number of
03:58 - subsets that add up to 16 out of the
04:00 - entire array and that's the answer that
04:03 - we're looking for and this n is actually
04:06 - the sum of two numbers and the first
04:10 - such number is the number of subsets
04:13 - that add up to 16 which include 10 and
04:18 - the second such number is the number of
04:22 - subsets that add up to 16 which do not
04:24 - include 10
04:25 - and actually this first number the
04:28 - number of subsets that add up to 16
04:31 - which include 10 is equivalent to the
04:36 - number of subsets that add up to 6
04:40 - out of these three elements so the
04:43 - subsets that add up to 6
04:45 - out of these three elements are 2 4 and
04:49 - just 6 and you can sort of merge each of
04:55 - these subsets with this subset with only
04:59 - 10 and get a subset that adds up to 16
05:04 - we can get 2 of them so we can put 2
05:07 - here as the first number and the second
05:11 - number that the number of subsets that
05:13 - add up to 16 which do not include 10 is
05:17 - equivalent to the number of subsets that
05:19 - add up to 16 out of these three elements
05:24 - because we don't have this in play
05:27 - anymore and there's no such subset that
05:30 - adds up to 16 out of these three
05:32 - elements because if you add all of them
05:35 - up you'd only have 12 as the total sum
05:38 - so you'd have 0 right here as the second
05:42 - number so in this particular example the
05:45 - answer that we're looking for is and is
05:47 - equal to 2 plus 0 which is 2 so what we
05:51 - just did is we broke down the large
05:53 - original problem of finding the number
05:56 - of subsets that add up to 16 out of this
05:59 - whole array into two smaller subproblems
06:02 - and we can actually keep going like that
06:04 - further down the tree as well just keep
06:07 - breaking down the problems into smaller
06:09 - and smaller problems so this is the
06:12 - basic idea of my recursive solution but
06:15 - one thing to note here is that you don't
06:17 - really have to create or store these
06:19 - individual subsets because we are only
06:22 - interested in the number of subsets that
06:25 - add up to a certain number for example
06:26 - 16 we only need to store the sum of each
06:30 - subset so the sum of this subset would
06:33 - be 10 and then the sum of the empty
06:37 - subset is of course there
06:39 - and the sum of this one is 16 and the
06:42 - sum of 10 is 10 and so on okay let's now
06:46 - see what this solution might look like
06:48 - in code okay here's my recursive
06:50 - solution in code I'm defining two
06:53 - functions here count sets and rec count
06:56 - sets will be our main function it will
06:59 - take the array the SKU an array and the
07:02 - total amount that we are trying to find
07:03 - the subsets for and this is going to
07:05 - return the number of subsets that add up
07:08 - to the total amount and then rec will be
07:11 - our recursive function so it will call
07:14 - itself recursively and it'll take the
07:17 - given array the total amount and I as an
07:20 - index and this is going to return the
07:22 - number of subsets that add up to the
07:25 - total amount but while considering only
07:28 - the elements up to the index I so if you
07:32 - are given for example this array r & 6
07:36 - as the total amount and 2 as the index
07:40 - that would be right here
07:42 - we're only considering these 3 elements
07:45 - to find the subsets that add up to the
07:48 - given amount and in that case your
07:51 - functional rec should return 2 because
07:54 - there are two such subsets 2 4 & 6 both
07:59 - of them add up to 6 and the only thing
08:02 - we need to do in count sets is to return
08:06 - rec with the arguments or total and our
08:11 - dot length minus 1 because our dot
08:13 - length minus 1 would be the last index
08:16 - of this array in this particular example
08:18 - that would be 3 okay the first thing we
08:21 - need to do in the rec function or the
08:23 - recursive function is we need to take
08:25 - care of some base cases the first one to
08:28 - take care of is when total is equal to
08:30 - zero in that case we should return 1
08:33 - because when totally is zero the only
08:36 - subset that adds up to zero is the empty
08:40 - subset and there is only one of them and
08:42 - the second base case to take care of is
08:45 - when total is less than 0 and if that's
08:49 - the case there is no subset that adds up
08:52 - to 0
08:53 - so which is just returned zero since
08:55 - there are no negative numbers in this
08:57 - array and if I is less than zero that
09:00 - would mean I is already outside of this
09:03 - array and since we know that total is
09:06 - neither zero nor less than zero total
09:09 - here is a positive number and since we
09:13 - don't have any more numbers to create a
09:14 - subset with that add up to hopefully
09:16 - total we'll just return zero and if none
09:19 - of these cases are true we'll then go to
09:22 - our recursive cases the first recursive
09:25 - case that we need to deal with is when
09:27 - total is less than our square brackets I
09:30 - or the last item that we are examining
09:34 - so for example if I is equal to two we'd
09:38 - be examining this item six would be the
09:41 - value of our square brackets I and if
09:44 - the given total here is let's say four
09:48 - there would be no way of finding a
09:51 - subset out of these three elements that
09:53 - add up to four which includes the
09:57 - current item six so that means the
10:00 - number of subsets that add up to the
10:02 - total amount out of these three elements
10:05 - is equivalent to the number of subsets
10:07 - that add up to the total amount out of
10:10 - these two elements instead to express
10:13 - that we'll just need to write return rec
10:15 - or total I minus one so or on total or
10:20 - unchanged and we'll just need to go to
10:23 - the next item or the item that's left to
10:27 - the currently item that we're examining
10:28 - our case we need to deal with is
10:30 - everything else so let's say I is equal
10:34 - to 2 here so we're examining this item
10:37 - currently and the total that we're
10:40 - looking for is 6 if that's the case
10:44 - we'll need to deal with two different
10:46 - cases just like I explained before the
10:48 - first case is when we don't include 6 in
10:52 - the subset that we're trying to
10:54 - construct and it's the same as before
10:57 - so we'll just need to write rec or total
11:01 - I minus 1 and the second case is when we
11:04 - do include this item
11:07 - the subset that we are trying to
11:08 - construct and just like I explained
11:10 - before the way you can think about it is
11:13 - this the number of subsets that add up
11:15 - to the given total six right here which
11:19 - include this number six is equivalent to
11:22 - the number of subsets that add up to
11:25 - total minus the current item so total
11:30 - minus R square brackets I out of these
11:33 - two elements only so you can find that
11:37 - with rec or total minus RS square
11:40 - brackets I so that'll be the new total
11:43 - that we'll be looking for subsets four
11:45 - and I minus one to go to the next
11:47 - element and that's my recursive solution
11:50 - okay and this solution works but the
11:53 - problem is it's not very efficient the
11:55 - problem is that we're gonna call this
11:57 - function rec with the same arguments or
12:00 - total and I over and over again and this
12:03 - will be particularly the case when the
12:06 - given array is very long very large and
12:09 - the given total is very large as well so
12:11 - of course then IMing programming says
12:12 - why not just store some of those return
12:16 - values for the same total and I so that
12:19 - we don't have to repeat the same
12:20 - competition over and over again so let's
12:22 - see what a dynamic programming solution
12:24 - or a memorized solution looks like in
12:27 - code okay here's my dynamic programming
12:30 - or memorized solution just like before
12:32 - we're gonna write two functions DP and
12:35 - count sets DP count sets DP will be our
12:39 - main function which will return the
12:41 - number of subsets that add up to total
12:43 - given the array and the P will be the
12:46 - function that will call itself
12:48 - recursively but note here that we have
12:51 - an additional argument here called mem
12:53 - which we're going to use to store the
12:56 - returned values for some arguments for
12:59 - this function the first thing we'll need
13:00 - to do in count sets DP is we need to
13:04 - initialize an empty dictionary or hash
13:07 - table depending on the language and then
13:09 - assign it to mem because this is what
13:12 - we're going to use for storing the
13:14 - return values and then call DP with the
13:18 - arguments our total or
13:20 - length minus one and then men okay in DP
13:23 - the return values for certain arguments
13:26 - will be stored in ma'am in key value
13:29 - pairs each key will represent a unique
13:33 - set of arguments and there will be an
13:36 - Associated value with it and that's
13:38 - going to be the return value that's
13:39 - stored for this function DP so we need a
13:43 - way to create a key which is going to be
13:45 - a string in this particular case from
13:48 - the pair or arguments that changed total
13:51 - and I there are several different ways
13:54 - of doing this but what we're going to
13:56 - use here is a very simple method we're
13:58 - going to convert total and I which are
14:01 - integers to strings and then we're going
14:04 - to concatenate them with a column
14:06 - between them so for example if we had 10
14:10 - as total and 3 as I will have this
14:16 - string 10 colon 3 as the key and we
14:20 - don't necessarily have to use this
14:22 - particular string but we just need a way
14:25 - to uniquely identify each argument pair
14:28 - with a string and then if this key
14:31 - already exists mmm that would mean that
14:34 - we've already calculated the return
14:36 - value for this particular total and I
14:39 - pair so we're just going to return the
14:42 - stored value the value that's associated
14:44 - with this particular key instead of
14:46 - going through this whole function and if
14:48 - we don't have any stored value
14:50 - associated with this key yet we're gonna
14:52 - go through this whole function and it's
14:54 - going to be very similar to what we had
14:56 - earlier for the recursive solution first
14:58 - of all the base cases are exactly the
15:00 - same so we're just gonna skip that and
15:03 - else if total is less than or square
15:07 - brackets i we have DP of our total i
15:11 - minus 1 mem which is almost exactly the
15:14 - same as what we had earlier in our
15:17 - recursive solution but instead of
15:19 - returning this right away we're gonna
15:21 - store it and the to return variable and
15:24 - then we're going to return it at the end
15:26 - and we're gonna take care of the other
15:28 - case the same way we have DP of our
15:31 - total minus R square brackets
15:34 - I - 1 min and then the same thing as
15:38 - what we had right here
15:39 - so add them up and instead of returning
15:43 - it we're gonna store it and to return
15:45 - and after that before returning to
15:48 - return we're gonna store it in the ma'am
15:51 - dictionary or hash table with the key
15:53 - key which we calculated earlier so that
15:56 - we can use this value later when we see
15:59 - the same pair of arguments and of course
16:02 - at the end of this function we're gonna
16:03 - return to return and we're done this is
16:06 - my dynamic programming solution but
16:08 - let's see if we can calculate the time
16:10 - complexity for this function to find the
16:12 - time complexity for this method we first
16:15 - need to find the number of times we call
16:18 - our recursive function DP and then
16:21 - multiply by the time it takes to execute
16:24 - each of those calls
16:25 - so let's first see if we can count the
16:28 - number of calls we call DP there are
16:30 - only two ways we call DP the first one
16:33 - is from right here from the original
16:36 - function counts sets DP and then the
16:39 - second way is from this block right here
16:42 - either on this line or this line now the
16:46 - important thing to notice here is that
16:48 - the number of times we call this block
16:51 - is at most total times and times where n
16:57 - is the number of items in the given
17:00 - array and you can think about it this
17:02 - way there are any potential values for I
17:05 - ranging from 0 through and minus 1
17:09 - and the number of potential values for
17:11 - this argument total is the original
17:14 - value of total so if the original value
17:17 - of total is 16 and if you're given this
17:21 - array and would be 4 so you'd have 16
17:25 - times 4 potential value pairs for the
17:29 - pair total and I and for each unique
17:32 - pair we only go through this entire
17:35 - function and then get to this block once
17:38 - because after the first time will
17:41 - already have returned here and if either
17:43 - total or I is out of range from those
17:47 - particular
17:48 - for example if I is minus 1 then we'll
17:51 - already have returned before we get to
17:53 - this block for example right here as
17:56 - well and so we get to this block at most
17:59 - total times n times and each time we get
18:03 - to this block will call DP only at most
18:06 - twice so the maximum number of times
18:09 - we're gonna call DP is going to be total
18:12 - times and times 2 and if you want you
18:16 - can add 1 to account for the first time
18:19 - we call DP from count sets DP so now we
18:22 - have an upper bound for the number of
18:25 - times we're gonna call this function DP
18:28 - and that's total times n times 2 plus 2
18:32 - and of course total here is the original
18:34 - value of total and what about the time
18:36 - it takes to execute each of those calls
18:38 - if you look at each line in this
18:41 - function except for those recursive
18:44 - calls each line only takes a constant
18:47 - amount of time or Big O of one to
18:50 - execute and of course when you add up a
18:52 - bunch of different operations each
18:55 - taking constant amount of time they will
18:58 - only take a constant amount of time as a
19:00 - whole so the time it takes to execute
19:02 - each of those calls excluding those
19:04 - recursive calls is Big O of one or a
19:07 - constant amount of time and when you
19:09 - multiply these two numbers together Big
19:12 - O of 1 and total times n times 2 plus 2
19:16 - you get Big O of total times n and being
19:22 - the number of items in the given array
19:24 - and so that's the time complexity for
19:27 - this particular function ok just like
19:29 - usual let me know in a comment below if
19:31 - anything is unclear and if you like this
19:34 - video I would also recommend my course
19:36 - on udemy called 11 essential coding
19:38 - interview questions in which I cover 11
19:41 - of the most essential coding interview
19:42 - questions to master although I don't
19:44 - cover dynamic programming in this course
19:47 - but I'm gonna put a link to this course
19:49 - in the description below and if you want
19:51 - to make sure that you don't miss my
19:53 - future videos the best way to do that is
19:56 - to subscribe to my newsletter by going
19:58 - to CS dojo dot io / news
20:01 - my K from CS dojo and I'll see you in
20:04 - the next video