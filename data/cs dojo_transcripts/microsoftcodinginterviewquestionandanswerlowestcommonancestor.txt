00:01 - in this video I'm going to discuss a
00:03 - Microsoft interview question and answer
00:06 - and this problem is called the lowest
00:08 - common ancestor problem so let's just
00:10 - dive into
00:12 - it here's the problem we have a tree as
00:16 - you can see on the
00:17 - left and we're given two elements four
00:21 - and five and we're trying to find the
00:24 - common ancestor that's the lowest in
00:26 - level in this case the answer would be
00:29 - three because we have two common
00:31 - ancestors for these two elements one and
00:34 - three and obviously three is the lower
00:37 - one of
00:39 - them and the LCA the lowest common
00:42 - ancestor of three and five three and
00:45 - five would be three
00:48 - again so LCA could be one of the given
00:51 - elements and the LCA of four and two
00:55 - four and two would be
00:58 - one and then L CA of 6 and six the same
01:03 - element would be this element
01:06 - itself so how can we solve this
01:09 - problem if you want to try solving this
01:12 - problem yourself pause the video right
01:14 - here and see if you can come up with the
01:16 - solution and come back to the video
01:19 - later there's a number of solutions to
01:22 - this problem but the one I find the
01:24 - simplest is the following let's say
01:26 - we're trying to find the LCA the lowest
01:29 - common answer of four and five what I
01:32 - would do first is I would find the path
01:35 - from the RO to one of the elements four
01:38 - let's say I do that by going to the left
01:41 - and then left again and right there I
01:44 - find the element so the pass to that
01:48 - element would be 1 14
01:50 - 134 and I would do the same thing with
01:53 - five so I start at the root again 1
01:57 - three to the left and five is not there
02:01 - so I go to the right left again and I
02:05 - find the PATH so that's 1
02:08 - 3
02:10 - 65 and by examining these two paths 134
02:16 - and
02:17 - 1365 we see that these two paths are the
02:21 - same up until
02:22 - three and converge or diverge after that
02:26 - so in these two paths we can see
02:30 - these two elements are the same so we
02:33 - return the last
02:35 - element in this common pass as the LCA
02:39 - of these two
02:40 - elements now the key to implementing
02:43 - this solution is this function pass to X
02:47 - it takes the root and the element that
02:50 - we're looking for X or five in this case
02:54 - and it returns a stack of this path or
02:59 - it returns this this path as a stack so
03:02 - it would look like this 1 3 6
03:09 - five I'm just going to write it as a
03:12 - list for
03:14 - now and then same thing for this one
03:18 - four so the path is
03:21 - 134 so I'm going to write
03:24 - 134 right
03:26 - here and given these two paths we're
03:29 - able to to look at each element at a
03:32 - time
03:34 - and see which ones are the same until we
03:38 - find different elements six and four and
03:41 - we stop right here and we can just
03:43 - return this element as the
03:47 - LCA now if you want to try implementing
03:50 - this solution yourself pause the video
03:52 - right here and come back to it later
03:54 - when you're
03:55 - done here's my implementation to our
03:58 - solution and in particular the PA to X
04:03 - function let's say as an example we are
04:06 - trying to find the path from Rue to five
04:11 - this
04:12 - element and we have a recursive solution
04:15 - here if the element or the root that
04:18 - we're looking at right now is null then
04:22 - we just return no and if we're looking
04:27 - at the element that we were just looking
04:29 - for if root do value is equal to this
04:32 - one then we create a stack with this
04:36 - element alone and then we return
04:39 - that and let's say we're looking at this
04:43 - element now and if the left pass or if
04:46 - the left child contains a pass to
04:51 - X then that means left path is going to
04:55 - be not
04:57 - null and so we return
05:00 - left pass after adding the current
05:03 - element that we're looking at this one
05:06 - to the left pass and then we return that
05:10 - and we do the same thing with the right
05:12 - pass if the right pass let's say we're
05:14 - looking at this element If the righted
05:16 - child contains a pass to X or five in
05:19 - this case then we add the current value
05:23 - to the right pass and then we return
05:25 - that if neither children
05:31 - contain a pass to the element that we're
05:33 - looking for if we're looking at this
05:35 - element say then we just return
05:38 - no now using the code that we just
05:41 - implemented let's just Implement our
05:44 - main function LCA that takes root and
05:49 - the two elements and let's call them J
05:50 - and K and in particular we'll be looking
05:54 - at this example of the LCA of four and
05:58 - five now the first first thing we do is
06:00 - we find the paths to J and K or four and
06:04 - five which would be these
06:08 - two and then we initialize LCA to return
06:11 - as not or anything else and while pass
06:14 - to J and pass to K are non empty we
06:20 - pop these two stacks or these two paths
06:23 - and call them Jpop and K-pop and popping
06:26 - just means we take the first
06:28 - element and if these two elements JP and
06:32 - KP are the same element then we update
06:36 - LCA to return to that element so LCA to
06:40 - return becomes one and then three
06:43 - because these two elements are still the
06:45 - same and then we stop right here when
06:48 - these two elements J pop and KP are not
06:51 - equal and break and we return LCA to
06:55 - return in this case three as the LCA
07:01 - and that's it for the video thank you so
07:02 - much