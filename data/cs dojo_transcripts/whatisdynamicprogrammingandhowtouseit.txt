00:00 - hey CS dojo its YK here so in this video
00:03 - I'm going to talk about what dynamic
00:05 - programming is and how to use it and as
00:08 - I explain how it works I'm going to
00:10 - assume that you're already familiar with
00:12 - recursion so what is dynamic programming
00:14 - exactly it's actually fairly simple even
00:17 - though it might sound difficult it's
00:19 - basically a way of making your algorithm
00:22 - more efficient by storing some of the
00:24 - intermediate results and it works really
00:26 - well when your algorithm has a lot of
00:28 - repetitive computations so that you
00:31 - don't have to repeat those competitions
00:32 - over and over again and I'm gonna give
00:35 - you a concrete example of how it works
00:37 - with Fibonacci sequence so just in case
00:39 - you're not familiar with it phonology
00:41 - sequence is a sequence of numbers that
00:43 - starts with two ones at the beginning
00:46 - and each number after that is computed
00:48 - by adding up the two previous numbers so
00:51 - the third three months number is two
00:53 - because one plus one equals two and then
00:56 - the fourth 300 number is three because
00:58 - one plus two equals three and so on and
01:00 - this sequence keeps on going forever so
01:04 - let's say we're trying to solve the
01:05 - problem of finding the entrance number
01:08 - or writing a function called fib of n
01:12 - which takes a positive integer n and
01:15 - finds and returns the end speedruns
01:17 - number so if the given n is three we
01:22 - want to be able to find and return the
01:24 - third Finch number which is two and if
01:27 - the given n is five we want to be able
01:30 - to return the fifth Reynolds number
01:32 - which is five let's see how we can solve
01:35 - this problem using dynamic programming
01:36 - so if you want to solve a problem using
01:39 - dynamic programming there are typically
01:41 - three steps you can take the first step
01:44 - is to come up with a recursive solution
01:46 - to your problem and then in your
01:48 - recursive solution if you notice that
01:50 - there are a lot of repeated competitions
01:52 - you can then store some of the
01:54 - intermediate results so that you don't
01:56 - have to repeat those competitions this
01:59 - process is also called memoization or
02:02 - memorize and this is not to be confused
02:05 - with memorize and I've made a mistake
02:07 - before too and then the third step if
02:10 - you don't like using recursion anymore
02:13 - is to come up with something called a
02:14 - bottom-up approach so let's first see
02:17 - what a recursive solution might look
02:19 - like for this particular problem so as I
02:21 - said earlier we're going to write a
02:23 - function called fable of n which takes
02:26 - and a positive integer and returns the N
02:29 - 3 branch number and if n is equal to 1
02:32 - or 2 we know that the first and the
02:35 - second finish numbers are 1 we're going
02:37 - to return 1 but instead of returning it
02:39 - right away
02:40 - we're going to store it in a temporary
02:42 - variable called the result and then
02:44 - return that instead and it's going to be
02:47 - clear why we need to do that later and
02:49 - if n is neither one nor two then we're
02:53 - going to return the sum of the two
02:56 - previous Fibonacci numbers instead fib
02:59 - of n minus 1 plus fib of n minus 2 store
03:03 - that in result and then return it at the
03:05 - end so the solution works but it's very
03:08 - very inefficient to see why let's see an
03:11 - example where we're trying to find the
03:13 - 5th Fibonacci number by calling table 5
03:17 - so to find the return value of people 5
03:20 - we need to first compute the return
03:23 - values for table 4 and people 3 so we
03:26 - can add them up and to find people for
03:29 - we need to first compute fib of 3 and
03:31 - peep of 2 and so on and that's what this
03:34 - diagram shows and looking at this
03:36 - diagram you might notice that there are
03:38 - some competitions that we repeat over
03:40 - and over again for example we need to
03:43 - compute the return value for people to
03:45 - three times and we need to compute the
03:49 - return value for fib of 3 twice here and
03:52 - it's not a big deal when we are trying
03:54 - to find the fifth or sixth minus number
03:57 - but if we're trying to find the
03:59 - hundredth free bonus number it becomes
04:01 - an issue and actually the time it takes
04:04 - to find the nth Fibonacci number grows
04:07 - exponentially or roughly in the order of
04:10 - two to the power of n and dynamic
04:12 - programming here says why not just store
04:15 - those return values for example for fib
04:18 - of 3 store the return value once we
04:21 - compute it and then use that same value
04:24 - when we see people 3 again in
04:27 - instead of computing it again and again
04:29 - this process is called memoization so
04:32 - let's see what a memorized solution
04:34 - looks like in code let's again consider
04:37 - the example where we're trying to find
04:39 - the fifth boomers number by calling
04:41 - people five the idea of this solution is
04:44 - going to be that we're going to use an
04:47 - array whose length is n plus one or six
04:52 - in this particular case because n here
04:54 - is five and then we're going to store
04:57 - the return value for the function of fib
05:00 - of n at the index n so we're going to
05:04 - store feeble of one which is the first
05:07 - few months number right here at index 1
05:10 - and then fib of 2 at index 2 and so on
05:15 - and initially we're going to set all
05:18 - these values to now and we're going to
05:22 - write our function of fib and this is
05:25 - going to take two arguments instead of
05:27 - just one the first one is the same as
05:29 - before and a positive integer and the
05:32 - second one is going to be this array and
05:35 - so you need to initialize the survey
05:38 - memo before you call this function now
05:42 - at the beginning of this function check
05:44 - if memo at index n is null or not if
05:48 - it's not equal to now that'll mean that
05:51 - we've already seen this argument N and
05:54 - we've already stored the return value
05:56 - for that at the index n a memo so just
06:00 - return that instead so we turn memo
06:02 - square brackets and otherwise the
06:05 - following part is the same as before if
06:07 - n is equal to 1 or 2 we turn one store 1
06:12 - in result and then return that at the
06:15 - end and if that's not the case then find
06:19 - the sum of the two previous fabulous
06:21 - numbers and then return that instead and
06:24 - then what's new in this function is that
06:26 - before you return this result the return
06:30 - value you need to store it in memo at
06:34 - index n so that you can use it later
06:37 - now let's now think about the time
06:39 - complexity for the
06:40 - solution we're going to call it T of n
06:44 - this is going to be the time it takes to
06:46 - find the nth Fibonacci number with this
06:48 - particular method and we're going to
06:51 - find that by multiplying the number of
06:55 - times we call this function baby with
07:01 - the time it takes to execute each of
07:03 - those calls we're going to call that T
07:05 - now there are only two ways we're going
07:08 - to call this function of fib the first
07:10 - way is when we call this function for
07:13 - the first time with the arguments and
07:15 - and memo to find the NSP ones number and
07:18 - the second way is from this line right
07:21 - here and notice that if you look at this
07:24 - whole block after this first if clause
07:29 - this whole block is only executed most n
07:34 - times and this is true because there are
07:36 - n possible arguments to this function
07:39 - that's 1 through N and each time this
07:43 - function is called with each of those
07:45 - arguments the return value will be
07:48 - stored a memo at index n so after the
07:52 - first time this function is called with
07:54 - each argument we'll never get to this
07:57 - block and each time this block is
08:00 - executed fib is called a most twice if
08:04 - we get to this line so the number of
08:06 - times fib is called is at most two times
08:12 - n plus 1 so 2 n it comes from this block
08:17 - right here and one comes from the first
08:20 - time we call this function fib and the
08:22 - time it takes to execute each of those
08:25 - calls this T right here is going to be a
08:28 - constant time or a Big O of 1 and this
08:32 - is because if you look at each operation
08:35 - in this function excluding these
08:39 - recursive calls that follow each
08:42 - operation is a constant time operation
08:44 - and when you have a constant time
08:47 - operation when you add them up you still
08:51 - get a constant time operation
08:54 - which is big-oh of one and that's why we
08:56 - have Big O of one here and so T of N or
09:00 - the time it takes to find the nth
09:01 - feminist number with this particular
09:03 - method is going to be 2 n plus 1 times
09:07 - Big O of 1 which is Big O of 2 n plus 1
09:13 - which is equal to Big O of N and this is
09:17 - a huge improvement from what we had
09:19 - earlier which was Big O of 2 to the
09:23 - power of n now let's now examine how
09:26 - this memo array is actually filled so
09:29 - let's say we're trying to find the 5th
09:31 - Fibonacci number again and when we call
09:34 - fib with the argument 5 and memo of
09:37 - course we'll see that we don't have a
09:39 - stored value at the index 5 yet so we go
09:43 - down and we're going to ask ourselves
09:45 - what's the value of fib of 4 and then 3
09:48 - and so on and when we get to fever of 2
09:51 - we'll know that this value is 1 so we're
09:55 - gonna store it at index 2 right here and
09:59 - same with people 1 that's 1 right here
10:02 - and once we have these two values we'll
10:06 - be able to find the third a Fibonacci
10:07 - number which is fib of 3 right here and
10:10 - then once we find the value by adding
10:13 - them up store that value right here so
10:16 - we can use it later and then when we go
10:18 - up to feeble 4 we'll add 1 and 2 right
10:22 - here and we get 3 and so on until we get
10:25 - here and so as you can see this array is
10:28 - mostly filled from left to right so when
10:33 - you see this you might say why not just
10:35 - explicitly build this array from left to
10:38 - right from scratch instead of building a
10:40 - recursively and that's the idea behind a
10:43 - bottom-up approach so let's see what a
10:46 - bottom-up approach might look like in
10:48 - code we're going to define a function
10:50 - called fab bottom-up which takes an a
10:54 - positive integer just like before and
10:56 - returns the nth Fibonacci number and
10:58 - then if n is equal to 1 or 2 of course
11:02 - we're going to return 1 and after that
11:04 - we're going to define an array whose lie
11:08 - is going to be n plus 1 where n plus 1
11:11 - is 6 of course if we're trying to find
11:14 - the fifth Fibonacci number right here if
11:16 - n is equal to five and after that we're
11:20 - going to set the first and the second
11:23 - elements of this array bottom up to be 1
11:26 - these two items right here and then
11:30 - we're going to run a for loop for I from
11:34 - 3 which corresponds to this item right
11:37 - here up to N and n corresponds to the
11:42 - last item right here of this array and
11:45 - whatever index we're examining currently
11:47 - we're going to set that element at the
11:50 - index I or bottom up square brackets I
11:53 - to be the sum of the two previous items
11:56 - so in this particular example we'll have
11:58 - two here three here and after that we're
12:03 - going to return the last item in bottom
12:06 - up or bottom up square brackets N and
12:08 - we're done the time complexity for this
12:11 - algorithm will be again Big O of n
12:13 - because we're going to define this array
12:16 - and go through this array only once
12:19 - ok so that's how dynamic programming
12:21 - works but now I'm going to show you a
12:23 - quick demo with Python and something
12:26 - called Jupiter notebook to show you how
12:28 - this idea of my play out in practice so
12:31 - in this jupiter notebook i have defined
12:32 - a few functions in Python fib of n which
12:36 - is a recursive naive recursive solution
12:38 - and river of memo and people to which
12:41 - represent a memorized solution and fifth
12:45 - bottom up which is of course a bottom up
12:47 - solution so let's see how they compare
12:49 - to each other in performance we're gonna
12:51 - try running fib of n first the naive
12:54 - recursive solution with fever five and
12:57 - that gives us 5 which is expected what
13:00 - about fever of 20 that gives us the
13:03 - answer pretty quickly - and what about
13:05 - fever of 35 this actually takes five to
13:09 - six seconds on my computer so it's
13:12 - obviously not the most efficient
13:13 - approach let's see how fib of 2 and 3
13:16 - both memo the memorized solution
13:18 - compares to that let's try running fifth
13:20 - memo of 5
13:22 - first and that gives us five which is
13:24 - expected and what about 50 mm or 35
13:26 - that's pretty quick - and what about 50
13:30 - ml 100 and 1000 this actually gives us
13:34 - an error and this error is called a
13:36 - recursion error Python gives us this er
13:39 - actually because there are too many
13:41 - recursive calls on a call stack and to
13:44 - fix that we can just use the bottom-up
13:46 - approach one advantage of using a
13:49 - bottom-up approach is that we don't have
13:51 - to put any recursive calls on a call
13:54 - stack so we don't have to worry about
13:55 - that so we're going to load this
13:58 - function and then run it with the
14:00 - argument 35 which is pretty quick 1000
14:03 - and then let's try 10,000 as well and
14:07 - that's pretty instantaneous - okay so
14:11 - that's my introduction to dynamic
14:12 - programming let me know in the comment
14:14 - section below what you thought of this
14:16 - video and if you have any requests about
14:18 - what kind of videos I should make in the
14:20 - future let me know in the comment
14:22 - section below as well
14:23 - I'm YK from CES dojo and I'll see you in
14:26 - the next video