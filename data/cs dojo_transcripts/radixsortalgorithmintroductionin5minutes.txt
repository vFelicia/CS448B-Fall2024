00:00 - here is an introduction to radix sort as
00:02 - an example let's say we want to sort
00:05 - this array of six integers each integer
00:08 - value ranging from 0 through 999 and we
00:12 - want to sort this array in an ascending
00:13 - order so that the smallest number comes
00:16 - first the first step that we need to
00:19 - take in radix sort is sorting the given
00:21 - array using counting sort and the keys
00:25 - that we're going to use for that will be
00:26 - the last digit in each number so it's as
00:30 - if using counting sort to store an array
00:33 - with the values 3 9 0 6 3 & 3 in this
00:38 - particular case and with that the value
00:41 - that we have with the smallest key which
00:44 - is there in this particular case will be
00:46 - the first element in this sorted array
00:49 - and after that there will be values with
00:52 - the second smallest key which is 3 so 50
00:55 - 3 will be the second element and after
00:57 - that 633 and 233 now we're going to keep
01:02 - going like that until the very end and
01:05 - the key thing to remember here is that
01:08 - counting sort is a stable sorting
01:10 - algorithm and so the values with the
01:13 - same keys in this example 53 633 and 233
01:19 - they appear in exactly the same order in
01:22 - the storage array as they do in the
01:24 - original array and it's really important
01:26 - to use a stable sorting algorithm as a
01:29 - subroutine for radix sort because if we
01:32 - use an algorithm that's not stable it
01:34 - just wouldn't work now the second step
01:37 - in radix sort is sorting this new array
01:39 - using counting sort again with the
01:41 - second last digit in each number as the
01:44 - key this time once we do that the new
01:46 - sorted array will look like this and
01:48 - we're going to repeat the same procedure
01:51 - with this new array and this time we're
01:53 - going to use the first digit as the key
01:56 - and you'll notice that there are some
01:58 - numbers without any number in that place
02:00 - so we'll just use 0 as the key for those
02:03 - numbers once that's done the whole array
02:06 - is going to be sorted let's now think
02:09 - about the time complexity of radix sort
02:11 - first we're going to define some
02:13 - variable
02:14 - let's call the number of elements in the
02:16 - array or the length of the array and and
02:19 - it's equal to six in this particular
02:21 - case because we have six elements and
02:23 - that's called the number of digits that
02:25 - we need to represent each number D and
02:28 - we need three digits here and to
02:30 - represent each number we're using the
02:33 - base 10 system here and let's call that
02:35 - B so B is equal to 10 in this particular
02:38 - case now remember that in each step of
02:41 - radix sort we sort the array using
02:44 - counting sort using one of the digits as
02:47 - the key and the time complexity for
02:50 - counting sort is Big O of n plus K where
02:54 - K is the range of keys that we have for
02:57 - each number and the range of keys in
03:00 - this particular case is 10 or B because
03:03 - the key ranges from 0 through 9 and it's
03:06 - always an integer and so each of these
03:09 - steps takes Big O and plus B in time and
03:13 - we need to repeat this procedure three
03:16 - times in this particular case or D times
03:18 - in general so the time complexity for
03:21 - the whole algorithm of radix sort will
03:24 - be big-oh D times n plus B and this is
03:27 - quite fast when the range of input is
03:30 - fairly limited compared to the number of
03:32 - elements that we have in the array and
03:34 - in that situation depending on the size
03:37 - and the nature of the input it can
03:39 - perform better than an optimal
03:41 - comparison based sorting algorithm such
03:44 - as quicksort or merge sort which would
03:46 - take Big O of n log n in time and one
03:49 - last thing to note here is that there's
03:51 - a range of values that we can choose
03:53 - from for the value of B we chose base 10
03:57 - just for simplicity and just to show an
03:59 - example but we could chosen for example
04:02 - base 100 base 2 for a or any other
04:07 - positive integer for that matter and
04:08 - this choice will essentially come down
04:11 - to making a trade-off between time and
04:13 - space because the larger value that we
04:16 - choose for B the more space is required
04:19 - for the account resource step but at the
04:22 - same time a larger B or larger base will
04:25 - imply a smaller D or
04:27 - less number of digits for each number so
04:30 - it'll take less time to sort the array
04:32 - using radix sort as long as B is less
04:36 - than n