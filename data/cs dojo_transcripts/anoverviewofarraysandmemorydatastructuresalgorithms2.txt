00:00 - hey guys in this video I'm gonna give
00:02 - you an introduction to erase and a quick
00:04 - overview of how memory works and this
00:07 - video it's gonna be split into three
00:09 - parts first of all I'm gonna cover the
00:11 - basics of arrays and this part is gonna
00:13 - be pretty basic so if we already
00:15 - familiar with erase don't worry about
00:17 - watching this part and in the second
00:20 - part I'm gonna cover what memory is as
00:22 - opposed to storage and finally I'm gonna
00:25 - cover how integers and integer arrays
00:28 - are stored or memory arrays and memory
00:31 - or two of the fundamental topics in data
00:34 - structures and algorithms so let's get
00:36 - started okay so first of all what is an
00:39 - array an array is basically a collection
00:41 - of items of a single type so an example
00:44 - would be this one which is an array of
00:45 - integers or this one which is an array
00:48 - of strings and it's not usual for an
00:52 - array to have multiple types so it's not
00:55 - usual for us to have something like this
00:57 - where this array has both strings and
01:00 - numbers inside and let's take a look at
01:02 - some code snippets in C here to see how
01:05 - you can use arrays in practice I'm only
01:08 - gonna take a look at C here but it's
01:10 - gonna be pretty similar to other
01:12 - languages too like Java this line int
01:15 - sample array square brackets 5 equals 2
01:19 - 4 6 and so on
01:20 - says create a new array with five
01:23 - integers and then populate it with the
01:25 - elements 2 4 6 8 and 100 and you can
01:30 - visualize this array as a box with 5
01:34 - partitions
01:35 - because this array is able to contain 5
01:37 - integers if you want to change some of
01:40 - the elements in this array of course you
01:42 - can use code like this the first line
01:45 - says change the first item of this array
01:48 - to 20 and then the second line says
01:52 - change the second element of this array
01:54 - to minus 5 so after executing these two
01:58 - lines of code sample array will look
02:00 - like this you can see that the first two
02:03 - elements have been changed but not the
02:05 - other three elements and of course here
02:07 - the index of the array starts at 0
02:10 - instead of 1 and it's not necessarily
02:13 - the case with all the languages but this
02:16 - is what we're going to use throughout
02:17 - this course - now what if you already
02:19 - have five numbers in this array and you
02:23 - wanted to add two more numbers let's say
02:25 - two and three
02:27 - after the fifth item you might say well
02:30 - why don't you just add two more
02:32 - partitions at the end of this array and
02:34 - then put those numbers in there but
02:37 - actually you can't do that and to
02:39 - understand why that's the case why you
02:41 - can't add more partitions at the end of
02:43 - this array I'll need to give you a quick
02:45 - overview of how memory works on a
02:47 - computer okay so what is memory exactly
02:51 - for me to explain what it is the first
02:53 - thing you'll need to understand is that
02:54 - there are mainly two mechanisms for
02:57 - storing data on your computer
02:59 - the first one is memory or it's
03:02 - sometimes called RAM and the second one
03:04 - is storage which has different types for
03:07 - example a flash drive hard disk or a
03:10 - solid-state drive now the biggest
03:12 - difference between storage and memory is
03:15 - that the data on storage is permanent
03:18 - while the data on memory is not what I
03:21 - mean by that is you know if you think
03:23 - about your laptop when you turn off your
03:25 - laptop the data on storage will still be
03:28 - there but the data on memory will
03:30 - disappear as soon as you switch off your
03:33 - laptop so if you think about the bunch
03:36 - of photos you have on your laptop you
03:38 - know when you turn off your laptop and
03:40 - turn it back on again they should still
03:42 - be there right and that's because
03:43 - they're on storage and not necessarily
03:46 - our memory so like I said the data on
03:49 - memory on the other hand just disappears
03:52 - when you switch off your computer have
03:55 - you ever had an experience where you
03:56 - started working on an essay or you
03:59 - started drawing something on your
04:00 - computer and then suddenly you just lose
04:03 - all your progress because your computer
04:05 - crashes and then it shuts down and
04:07 - that's probably because those documents
04:10 - were on memory but not necessarily on
04:14 - storage so when you you know work on
04:17 - those documents and when you hit the
04:19 - Save button that finally becomes a file
04:22 - on your computer on storage this time
04:27 - so that the next time you know your
04:28 - computer crashes it's still gonna be
04:30 - there so at this point you might say
04:32 - wait why do you need these two separate
04:35 - mechanisms then why can't you just store
04:38 - everything on storage well the thing is
04:40 - reading data from and writing data into
04:43 - storage is pretty slow it's sort of like
04:46 - walking all the way to the file cabinet
04:49 - you have in the basement to retrieve you
04:52 - know the files there whether there are
04:54 - photos or documents it is necessary
04:56 - sometimes because that's where you have
04:58 - those documents but if you do it too
05:01 - often it's just gonna take too much time
05:03 - and that's actually where memory comes
05:06 - in memory is sort of like a temporary
05:08 - desk you have in your room so once you
05:11 - retrieve those documents you know from
05:13 - your storage whether they're text
05:15 - documents or photos you'll be able to
05:18 - put them on your desk or on your memory
05:21 - and once they're there it's gonna be so
05:24 - much faster to work with them and the
05:26 - reason it's so much faster is because
05:28 - it's so much quicker to write data into
05:31 - and read data from memory than it is
05:33 - with storage and then once you finish
05:37 - working with those pieces of data on
05:39 - your memory once you finish editing them
05:41 - and modifying them then you can bring
05:44 - them back to your storage so that you
05:47 - can save them they're more permanently
05:48 - as computer files again so that's the
05:51 - gist of how memory and storage work
05:54 - together with files and the way they
05:57 - work together for applications is
05:59 - actually pretty similar so when you have
06:02 - applications on your computer they're
06:04 - stored on storage originally and you can
06:08 - easily tell that's true because when you
06:10 - you know turn off your laptop and turn
06:12 - it back on again those applications are
06:15 - still gonna be there but when you launch
06:17 - one of them let's say Google Chrome it's
06:20 - gonna be loaded onto memory so that it's
06:23 - faster to use and you know faster to
06:26 - access there and so if you start running
06:29 - too many applications at the same time
06:31 - you know they're all gonna be loaded
06:33 - onto memory and you might actually start
06:35 - running out of memory space and that's
06:38 - why you know that's one of the reasons
06:40 - why
06:40 - to many applications at the same time on
06:43 - your computer might actually slow down
06:45 - your computer and let's now see how this
06:47 - whole thing actually looks on my
06:49 - computer since I'm using a Mac if you
06:52 - want to get an idea about how much
06:53 - memory I have you just need to click
06:55 - this Apple icon and then about this Mac
06:58 - and you can see that I have eight
07:00 - gigabytes of memory here
07:02 - now what about storage for storage I
07:04 - have 251 gigabytes and actually one
07:08 - feature of storage is that it's usually
07:10 - much bigger than memory and actually on
07:13 - the Mac there's a way to get a rough
07:15 - idea about how memory is being consumed
07:18 - you can just open Activity Monitor I
07:20 - think there's something similar for
07:22 - Windows 2 and here you can see that for
07:25 - example Dropbox is using about two
07:28 - hundred forty megabytes of memory and
07:29 - Google Chrome's using about 100
07:32 - megabytes of memory and what happens if
07:34 - I go to Chrome and quit this application
07:38 - it should stop consuming so much memory
07:40 - right let's see if that works
07:42 - I'm gonna quit Google Chrome and it's no
07:47 - longer here now how is all of this
07:50 - related to programming and in particular
07:52 - using a race to understand that let's
07:55 - take a look at this piece of code in C
07:57 - this line int a equals 1 when you
08:00 - compile and execute this line of course
08:03 - a variable called a is created and the
08:06 - integer 1 is assigned to that number and
08:08 - this integer 1 is stored on memory and
08:11 - not on storage and that means that when
08:14 - you turn off your computer after
08:15 - executing this code this integer 1 will
08:18 - just disappear because everything on
08:20 - memory of course disappears when you
08:22 - turn off your computer but how is this
08:25 - integer store on memory exactly for me
08:28 - to explain that you'll need to
08:29 - understand two things the first one is
08:32 - that each integer when it's stored on a
08:35 - computer it's often expressed as 32 ones
08:39 - and there's so for example the number
08:42 - one can be expressed as a bunch of zeros
08:46 - and then one at the end actually that's
08:49 - 31 zeros and then one one at the end and
08:53 - the number two
08:54 - can be expressed as a bunch of zeros and
08:57 - then one and then there again that's
08:59 - actually 30 zeros 1 1 and then 1 0 and
09:03 - just like that pretty much any integer
09:06 - that you might encounter in real life
09:08 - whether they're 100 or 200 or minus 223
09:15 - each of them can be expressed as
09:18 - thirty-two ones and zeros now each of
09:21 - these zeros and ones is called a bit so
09:25 - a bit is either 1 or 0 so we say each
09:29 - integer can be expressed with 32 bits
09:33 - and you don't have to worry about how
09:35 - it's converted exactly if you don't know
09:37 - about it yet but just know that pretty
09:39 - much any integer within a reasonable
09:41 - range can be expressed with 32 bits or
09:44 - 32 ones and zeros okay the second thing
09:48 - you'll need to understand is a simple
09:50 - model of memory memory can be thought of
09:53 - as a long tape of bytes now what is a
09:57 - bite a byte is basically a small unit of
10:01 - data and it consists of eight bits so
10:05 - each byte might look like this Woori has
10:09 - eight bits or this one
10:11 - now you can visualize the simple model
10:14 - of memory along table bytes like this so
10:17 - this is the long tape and each of these
10:21 - compartment represents each byte so you
10:24 - can sort of imagine a bunch of bits
10:25 - eight bits to be exact being crammed
10:28 - into each of these compartments and then
10:31 - you can store bytes which are of course
10:33 - small units of data in these
10:35 - compartments to represent anything you
10:38 - want to represent on your computer now
10:39 - your computer needs a way to find any
10:43 - particular byte very easily and you want
10:46 - to be able to do that because you want
10:47 - to be able to do things like store two
10:50 - bytes in these two compartments and then
10:52 - store four bytes right after that and
10:55 - maybe retrieve two bytes from the first
10:58 - two compartments and your computer
11:00 - achieves it by assigning an address to
11:03 - each byte and each of those address is
11:06 - represented by a sink
11:08 - integer so in this hypothetical example
11:10 - we have the address
11:13 - 124 despite and 121 for this byte and so
11:17 - on at this point you might say wait why
11:19 - do we have these particular numbers 120
11:22 - 121 and so on
11:24 - representing the addresses for these
11:26 - bytes well the answer is you know I came
11:29 - out with this arbitrary number 120 to
11:32 - represent the starting address for these
11:35 - bytes but in reality you don't have to
11:38 - worry about it and you know how to worry
11:39 - about it because the operating system
11:42 - determines what this starting address
11:44 - will be for your particular application
11:45 - so basically the operating system
11:48 - whether it's Mac or Windows this size
11:51 - well your application should live over
11:54 - here in memory and then someone else's
11:56 - application let's say Google Chrome
11:58 - should live over here and so on but the
12:01 - important thing to understand here is
12:03 - that even though the starting index 1 to
12:06 - 20 is arbitrary here the way you have
12:09 - consecutive addresses 1 to 20 121 122
12:13 - and song that's exactly like a real
12:15 - system on your computer anyway like I
12:18 - said earlier each integer can be
12:20 - represented with 32 bits sometimes
12:23 - depending on the environment it's stored
12:26 - with 64 bits instead but let's just say
12:29 - 32 bits for now and the question I have
12:32 - here for you is how many bytes do you
12:35 - need to store each integer well that's
12:38 - pretty simple because you have 8 bits in
12:40 - each byte so if you have 4 bytes you can
12:44 - store 4 times 8 bits which is 32 bits
12:47 - which is just enough to store each
12:49 - integer so how can we store an integer
12:52 - on memory you might say wait why don't
12:55 - you just take 4 bytes the four
12:58 - consecutive bytes right here and then
13:00 - use that to represent an integer and
13:02 - that's exactly what a real computer does
13:04 - so in this particular case when you have
13:06 - int a close one one is first of all
13:10 - converted into 32 bits zeros on ones and
13:13 - those bits will be split into these 4
13:17 - bytes and then they're gonna be stored
13:19 - right here on those 4 bytes
13:22 - if you have one more integer for example
13:24 - int B equals three right after this line
13:27 - that variable will be stored on those
13:30 - four bytes right after the first four
13:33 - bytes so that's how integers are stored
13:36 - on memory but actually the idea is gonna
13:39 - be the same for things like this mouse
13:41 - or characters you might need a different
13:43 - number of bytes to store each different
13:46 - type of data 2.3 or a or whatever but
13:50 - the idea of using consecutive bytes to
13:52 - store each piece of data is exactly the
13:54 - same anyway what if you wanted to store
13:57 - an array of integers instead of single
14:00 - integers to see how that can be done
14:03 - let's take a look at some more code in C
14:06 - here and let's say just like before we
14:08 - have int a equals 1 then that integer a
14:13 - or 1 will be stored let's say in these 4
14:17 - bytes from 122 123 and let's say right
14:22 - after this line we have this line in
14:25 - sample racecar back at 3 e goes 5 3 and
14:28 - 20 this array will actually take 12
14:32 - bytes right after the first 4 bytes so
14:35 - that's from 124 to 135 right here and we
14:41 - need 12 bytes because we need to be able
14:43 - to store three integers so that's of
14:46 - course 3 times 4 equals 12 bytes and the
14:50 - first number 5 will be stored in the
14:53 - first 4 bytes so that's from 124 to 127
14:59 - right here and the second number 3 will
15:02 - be stored in the 4 bytes right after
15:05 - that naturally so that's from 128 to 131
15:09 - and then 20 will of course will be
15:12 - stored in the last 4 bytes right here
15:15 - now the question we asked ourselves
15:17 - earlier was why can't we just add two
15:21 - more numbers let's say 1 and 2 to the
15:24 - end of this sample array you know if you
15:27 - look at this model of memory it looks
15:29 - like we'll be able to just allocate 8
15:32 - more bytes over here and then use those
15:35 - 8 bytes to
15:36 - store these two integers but actually
15:38 - you can't do that to explain why you
15:40 - can't just do that why you can't just
15:42 - allocate more memory allocate more bytes
15:45 - right after this array I would actually
15:48 - need to explain a little bit more about
15:50 - how memory works exactly but let me give
15:52 - you a more simplified argument here
15:54 - instead the simplified argument here is
15:56 - that after this line after allocating 12
16:00 - bytes for this array we don't know
16:03 - what's gonna be right after that in this
16:05 - memory space so for example you might
16:08 - have this line int C equals 4 right
16:12 - after this line in that case this number
16:15 - 4 would be stored in these 4 bytes from
16:19 - 136 to 139 and when you store an array
16:25 - you need a bunch of consecutive bytes
16:28 - and that's basically why you won't be
16:30 - able to just add more bytes to this
16:32 - array and actually if you wanted to
16:34 - still add 2 more numbers to this array
16:37 - what you would need to do is you will
16:39 - need to create an entirely new array you
16:42 - know over here in memory and you would
16:44 - need to make that array longer than the
16:47 - original array
16:48 - you know let's say length 5 instead of
16:50 - length 3 and copy over these numbers one
16:54 - by one to the new array and you would
16:57 - probably create this array dynamically
17:00 - and this word dynamically is important
17:02 - but if you don't know what it means
17:04 - exactly don't worry about it for now and
17:06 - then if you wanted to add even more
17:08 - numbers let's say three more numbers to
17:11 - the new array that's longer than the
17:13 - original rate then you would actually
17:15 - need to create a new array again which
17:18 - is even longer than the second array and
17:20 - then copy over all the elements to the
17:23 - new array again so you might think this
17:26 - whole strategy is a little bit awkward
17:28 - because you need to keep creating new
17:30 - arrays and maybe keep deleting the old
17:33 - arrays but that's actually what's used
17:35 - in practice often so if you wanted to
17:38 - create sort of a resize of all array you
17:40 - know a kind of array a kind of new array
17:42 - you might say that can accommodate as
17:45 - many elements as you want to put in
17:47 - there this is one strategy for doing
17:49 - that
17:50 - so for this you know resizable ray you
17:53 - can initialize it as a small array let's
17:57 - say ten elements and then when you want
17:59 - to put in the eleventh element you can
18:01 - make a new array that can accommodate
18:04 - you know twenty items instead and then
18:06 - copy over old items to that new one and
18:09 - then keep going like that you know 28
18:11 - elements
18:12 - forty elements and then length eighty
18:14 - and so on and this is actually the
18:16 - essence of how many sort of resizable
18:19 - arrays work in different programming
18:21 - languages so for example in Python you
18:25 - might see you know the Python lists and
18:27 - in Java you might have used the array
18:29 - list they might not look like resizable
18:32 - arrays when you look at them or when you
18:34 - use them but actually if you look at the
18:36 - source code if you you know sort of look
18:38 - inside a hood that's how they are
18:41 - implemented okay so this was actually a
18:44 - somewhat simplified explanation of these
18:46 - topics arrays and memory and you'll be
18:49 - able to actually start using them to
18:51 - start building more complex data
18:53 - structures that you got to learn
18:54 - throughout this course like hash tables
18:57 - and trees and by the way when I was
19:00 - doing some research for this video I
19:02 - actually used this video sponsors
19:04 - website a lot and it's called brilliant
19:07 - org so for my research I was using this
19:10 - computer memory course and the section I
19:13 - used the most is called linear memory
19:15 - model which is in the introduction to
19:17 - memory chapter this linear memory model
19:20 - section basically gives you a more
19:21 - detailed picture of what I explained in
19:24 - this video about memory and it comes
19:26 - with a bunch of practice problems too
19:28 - like I said in my last video applying
19:31 - what you've learned is through solving
19:32 - problems is a good way to solidify your
19:34 - understanding of the topic and
19:36 - personally I found that going through
19:38 - this section helped me refresh and
19:41 - solidify my understanding of how memory
19:43 - works and this linear memory model
19:45 - section actually assumes that you're
19:47 - already familiar with binary and
19:49 - hexadecimal numbers so if you want a
19:52 - quick refresher on those I'd get started
19:54 - with the previous section instead and
19:56 - that one is called binary this mode and
19:59 - hexadecimal if you want to check it out
20:01 - for yourself you can go to brilliant org
20:04 - /ch dojo okay as always i'm YK from CS
20:08 - dojo thanks for watching and you know
20:10 - hopefully you can keep what you've
20:12 - learned in this video in your memory as
20:15 - well as your storage I guess anyway I'll
20:18 - see you guys in the next video