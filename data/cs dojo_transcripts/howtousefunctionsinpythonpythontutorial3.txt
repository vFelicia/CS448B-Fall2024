00:00 - hey CS dojo its YK here in this video
00:02 - I'm gonna cover what functions are and
00:05 - how to use them in Python and using a
00:08 - function by the end of this video you'll
00:10 - be able to create a BMI calculator
00:12 - similar to the one we created in the
00:14 - last video but you'll be able to use
00:16 - this one repeatedly for many different
00:18 - people and many different variables I'm
00:20 - also gonna cover what comments are and
00:23 - how to use them and as usual I'll put
00:26 - the outline of this course below so you
00:28 - don't have to watch the whole thing let
00:30 - me first begin by answering a question
00:31 - though caliche I think says hello CS
00:34 - dojo although I downloaded Jupiter on my
00:37 - macbook I was unable to open your
00:40 - Jupiter notebook sample files so if you
00:42 - download a sample file for example from
00:44 - CS dojo dot io / Python - for the last
00:48 - video if you just click the file that
00:51 - you just downloaded this one on desktop
00:53 - you actually won't open it so what you
00:56 - need to do instead is you need to launch
00:58 - Jupiter notebook in any way you'd like
01:00 - to launch it I'm gonna use anaconda
01:02 - navigator here and once you launch
01:04 - Jupiter notebook within the Jupiter
01:07 - notebook UI you need to go to wherever
01:09 - you downloaded the file for example
01:11 - desktop and then click the file that you
01:14 - just downloaded within jupiter notebook
01:15 - and that way you'll be able to open the
01:17 - file and they use it and edit it and for
01:20 - this video you can just go to CH dojo
01:23 - dot io / Python 3 to download the sample
01:25 - files now with that out of the way let's
01:28 - dive into our main topic today which is
01:31 - what are functions just like usual I
01:34 - created a folder called Python tutorial
01:36 - 3 on desktop and a new notebook file
01:39 - called what are functions so there are
01:42 - actually a few different ways of looking
01:44 - at functions a function one way to look
01:47 - at it is that it's a collection of a
01:51 - structures or it's a collection of code
01:53 - and notice here that these lines I wrote
01:56 - here there are not pieces of Python code
01:58 - there's something called comments so
02:01 - comments are used to comment on the code
02:04 - that we're going to write below so you
02:06 - can use it to for example explain while
02:08 - variables you're defining and what
02:10 - functions we're going to define and so
02:12 - on
02:13 - and we can tell that these two lines are
02:15 - comments because each of these two lines
02:17 - begin with the pound sign or the hash
02:21 - tag so a function can be simply a
02:23 - collection of code let's see an example
02:25 - of that def function one parentheses
02:29 - colon print ah print double quotes are
02:35 - two and then print this is outside the
02:40 - function this whole block says def for
02:44 - define so define the following function
02:47 - and then give it a name which we can
02:50 - choose and we're gonna call it function
02:52 - one we can call it any name we want for
02:56 - example function two one two three or
02:58 - fun fun fun let's keep it at function
03:01 - one for now and then parentheses : so a
03:05 - combination of all of these things are
03:07 - important def the function name
03:09 - parentheses and colon 4 spaces print are
03:13 - and four spaces again print are two and
03:17 - these spaces in front of these two lines
03:20 - are really important just like with
03:22 - if-else statements to show that these
03:24 - two lines are part of this function if
03:26 - you had for example four spaces here and
03:29 - five spaces or three spaces it just
03:31 - wouldn't work and as you can see outside
03:33 - of this function we have a print
03:36 - statement that prints this is outside
03:38 - the function let's see what happens once
03:40 - we load or run this cell as you can see
03:43 - only this line has been printed this is
03:46 - outside the function what happened was
03:49 - this function called function 1 has been
03:52 - defined as a collection of code these
03:55 - two lines of code print are and print
03:57 - are two and after that's done this line
04:00 - has been executed so these two lines of
04:03 - code print are and print are two will
04:06 - not be executed will not be run until we
04:09 - use this function or we call as we say
04:12 - this function to use this function or to
04:15 - call this function you can just write
04:17 - function one open parentheses close
04:19 - parentheses and that's it when you run
04:22 - this cell what's gonna happen is these
04:25 - two lines of code
04:26 - we'll be executed for the first time so
04:29 - ah and our two are printed here and the
04:32 - nice thing about functions is that you
04:34 - can reuse them over and over again so
04:36 - you can write function one over here
04:39 - again and actually you can even use it
04:41 - twice in the same cell and so when you
04:43 - run this cell function one is executed
04:46 - twice and these two lines of code are
04:48 - executed twice as well so let's run the
04:51 - cell and let's see what's going to be
04:52 - printed as expected we see our two twice
04:57 - okay
04:58 - in addition to being a collection of
05:00 - instructions or a collection of code a
05:02 - function can also be a mapping so let's
05:06 - take a look at an example of that def
05:08 - function two parenthesis X colon return
05:12 - two times X or 2 star X this means
05:16 - define a function called function 2
05:19 - which is going to take the input or an
05:22 - argument and that argument we're going
05:25 - to call it X and in return to whoever
05:28 - call this function we're going to return
05:30 - two times X so we're mapping the input X
05:34 - to the output 2 times X execute this
05:38 - cell and to use this function or to call
05:41 - this function you can write a equals
05:43 - function 2 parenthesis 3 and this says
05:48 - as an argument use 3 and call this
05:51 - function function 2 and once this
05:53 - expression is evaluated function 2
05:56 - parenthesis 3 will return 2 times X in
06:00 - this case 2 times 3 which is 6 and then
06:03 - that number 6 will be assigned to the
06:06 - variable a and that number 6 is called a
06:10 - return value or output let's see if this
06:14 - expression works by running the cell and
06:16 - by printing a and we should see 6 and we
06:21 - do ok let's try using this function a
06:23 - few more times if you write B equals
06:26 - function 2 parenthesis 4 function 2 of
06:29 - parenthesis 4 should return 8 so once we
06:33 - print B we should see 8 and we do and if
06:37 - you write C equals function 2
06:40 - of five and then if you print see you
06:43 - should see it 10 and what if you try to
06:46 - call this function without any arguments
06:49 - so if you write D equals function to
06:51 - parenthesis with nothing inside let's
06:54 - try running it it'll actually give us an
06:57 - error saying function two missing one
06:59 - required positional argument X so this
07:03 - was an example of a function that map's
07:06 - one argument to a return value is it
07:10 - possible to have multiple arguments in a
07:12 - single function the answer is yes for
07:15 - that you can write def function 3x comma
07:19 - space Y :
07:21 - and then let's write return x plus y
07:25 - this means let's define a function
07:27 - called function 3 and then this function
07:30 - is going to take two arguments x and y
07:32 - and return X plus y let's load this
07:37 - function by running the cell and let's
07:40 - write a equals function 3 parenthesis 1
07:45 - comma space - so function 3 1 comma
07:49 - space - should be evaluated to 1 plus 2
07:52 - which is 3 so once we print e we should
07:56 - see 3 okay so we saw two different ways
08:00 - of using a function so far the first one
08:03 - was as a set of code or a collection of
08:06 - code and then the second one was as a
08:09 - mapping now it's even possible to
08:12 - combine them both together let's see how
08:15 - that works with this function function 4
08:17 - of X : 4 spaces as usual print X prints
08:25 - double quotes still in this function and
08:29 - then return 3 times X or 3 star X this
08:34 - function basically says take the
08:36 - argument X and then print X and print
08:40 - this string still in this function and
08:42 - then return 3 times X - whoever call
08:45 - this function let's run this cell and
08:47 - let's try calling this function with F
08:50 - equals function 4
08:53 - this is for so what's going to happen
08:56 - here is when this expression is
08:58 - evaluated function for or for we go to
09:01 - this line so X is printed so that means
09:05 - for the number four will be printed and
09:07 - then this string still in this function
09:09 - will be printed and three times X which
09:12 - is 12 will be returned to this
09:14 - expression so that will be assigned to F
09:17 - so once we run this cell you see that
09:21 - four and steering this function or
09:23 - printed and once you print F you should
09:26 - see 12 okay let's see another example of
09:29 - a function deff define function five
09:33 - parentheses sum underscore argument :
09:38 - four spaces print some argument and then
09:43 - print we in double quotes let's run the
09:48 - cell to load the function and of course
09:51 - you can call this function with function
09:52 - five four let's run the cell and then we
09:57 - see that four is printed because we have
09:59 - some argument being printed and we this
10:03 - string is also printed so one thing to
10:06 - note here is that even though function
10:08 - five is given an argument we don't have
10:11 - a return value it's actually technically
10:14 - possible to say F equals function five
10:17 - of four to assign whatever is returned
10:20 - from function 5 - f but there isn't much
10:23 - of a point because we don't have any
10:25 - return statement here okay let's now
10:28 - create a BMI calculator here now let's
10:31 - say we have three people here
10:35 - we have a hypothetical person named YK
10:38 - here whose height is 2 meters and whose
10:42 - weight is 90 kilograms and here we have
10:45 - YK sister whose height is 1.8 meters and
10:49 - whose weight is 70 kilograms and YK its
10:53 - brother is 2.5 meters in height and 160
10:57 - kilograms in weight what if we wanted to
11:00 - calculate the BMI for each person and
11:02 - determining if each person is overweight
11:05 - or not we can do this by writing a
11:07 - simple function let's call this function
11:09 - BMI and the score calculator and then
11:13 - this function is going to take three
11:15 - arguments named height in meters or
11:19 - height underscore em and then weight in
11:22 - kilograms or weight underscore kg in
11:25 - this function right
11:28 - BMI weight underscore kg divided by
11:32 - height and the score M double star sign
11:37 - - so this says of course height in
11:41 - meters squared and what we could do is
11:44 - we could return BMI here but let's do
11:47 - something a little bit different here
11:49 - we're gonna write prints double quotes
11:52 - BMI and then print BMI so this is going
11:57 - to print the BMI of the given person and
12:00 - then if the BMI is less than 25 this
12:05 - person is not overweight so we could
12:08 - return not overweight but to show this
12:12 - person's name you can just write name
12:14 - plus not overweight so the Assumption
12:17 - here is that name is a string and when
12:21 - you have two strings you can concatenate
12:24 - them together with name plus double
12:27 - quotes not overweight and then let's
12:29 - write else colon return name plus is
12:35 - overweight and note here that there are
12:38 - eight spaces here because this else
12:41 - statement is in the function BMI
12:43 - calculator and then this line is in the
12:47 - out statement within
12:48 - the BMI calculator function so let's run
12:51 - this cell and then let's write result 1
12:54 - equals BMI calculator parentheses name
12:59 - one height underscore m1 weight
13:04 - underscore kg one so this is for the
13:07 - first person and let's do the same thing
13:09 - for the second person and the third
13:11 - person let's run this cell so here we
13:17 - see the BMI for the three people twenty
13:20 - two point five for the first person
13:23 - twenty twenty one point six for the
13:25 - second person and twenty five point six
13:27 - for the third person and to get the
13:29 - result we can print without one without
13:32 - two and result three and then we see why
13:37 - cane or overweight like a sister not
13:39 - overweight why kids brother is
13:41 - overweight actually we forgot to put is
13:44 - before not so let's fix that go back to
13:48 - the function and then put is here run
13:52 - this cell again to update the function
13:54 - and then run this cell below that and
13:57 - then let's try printing the results
13:59 - again okay it's fixed so YK is not
14:02 - overweight
14:03 - okay sister is not overweight and why
14:06 - case brother is overweight okay now I
14:08 - have a little task for you create a
14:10 - function called let's say convert that
14:13 - converts miles into kilometers so you
14:16 - should be able to call your function
14:18 - just like this with a function called
14:20 - convert which takes Mouse as the
14:22 - argument and returns kilometers as a
14:25 - return value and here you can use this
14:27 - formula kilometers equals one point six
14:31 - times miles okay if you want to get the
14:34 - answer to this question just go to CS
14:37 - dojo dot io / Python 3 to download the
14:40 - sample file and you can subscribe to my
14:43 - newsletter by going to CH dojo dot io /
14:46 - news to make sure you don't miss my
14:48 - future tutorials my key from CH dojo and
14:52 - I'll see you in the next video