so now it's time to actually put something in here that we can play let's create the player now let's do something that we haven't done yet which is to modify the project settings in what we call the input manager axes it's a list of 30 different already existing inputs that trigger on certain buttons a lot of debug options but in this case some important ones like moving horizontally so this includes left and right keys as well as a and d moving vertically up and down but since we're in space we don't want to jump so let's just go ahead and change this from jump to thrust this is the one that has positive button in other words when you press the space button let's exit out of the input manager and go ahead and let's create our new player so i like to put it in the center called the player and just out of habit i add the tagged player let's move it up here just so that way we can see a little bit we're going to go ahead and do the same thing that we did before this time we're going to add a sprite renderer from here sprite renderer we want to change the sprite to our ui sprite and we want to make this look a little bit more like a lunar lander so make it a little tall like a little wide but this is entirely up to you i'm also going to make it kind of like green means player green means land again a design decision we need to have something that allows for it to interact with physics in other words a rigid body since we're working in only two dimensions we'll make it a rigid body 2d this gives us the ability to actually change things about its mass and its gravity scale well let's go ahead and give it some mass of 5 and let's change the gravity scale to 0.167 that is if you look it up the gravity of the moon in other words it's 16 almost 17 percent of the same gravity that we have on earth okay let's go ahead and add a box collider 2d that looks a little too big if you look at the green outline it's a little too big so let's go ahead and click this button to edit the collider and drag it a little bit yeah that looks better so that'll be actually how it stands okay and one other thing that we want to do for our lunar lander is we always want to basically understand how it interacts with other materials and so way we can do that is we can create our own sort of friction controller so in this create menu there's two physic materials one is for three dimensions one is for two dimensions so let's make a physics material 2d uh let's just call it the lander and let's adjust the friction a little bit higher because we don't want it to be sliding over everything let's go back to our layer and we attach this lander material to the rigid body now if you were to forget the step nothing really would change it would just change the feel so you should play around with this if you add bounciness you're going to bounce when you hit the ground you should play around with it and see how it works all right so let's figure out a way to actually make this lander do something so let's add some logic to it add a new component let's call it a lander script new script create an add and after moment we'll be able to open it in visual studio let's go ahead and do that all right all right so what do we want our script to be able to do like what do we want our liner to be able to do it should be able to thrust it should be able to rotate clockwise to the right should be able to rotate counterclockwise and it should be able to crash all very important things so what do we need to know in order to thrust um so let's open up some variables in the inspector i'm making them public and we'll have a thrust force set that equal to 30 by default let's also have our current fuel let's set our maximum fuel and that can be 3 000. we also need to know in private whether or not in other words a boolean if we are thrusting and we'll set that to false until it's otherwise proved true we also need to know what our turn speed is and we can set that to 50 for now and we also need to be able to cache a reference to our rigid body which we're going to control so our rigid body 2d we'll just call it rb so in start first things first let's get a reference to our rigid body so rb equals get component rigid body 2d and let's set our current fuel equal to our maximum fuel in other words let's refuel every time we start and so in order to rotate clockwise um what we'll need to do is be able to control the rigid body so let's create a method that does that so public method that returns nothing void rotate clockwise whoa rotate clockwise and we do rb dot move rotation which is our current rotation minus our turn speed times time dot fixed delta time since this calculation is occurring in a physics loop we want to make certain to use fixed delta time for our smoothing in other words a portion of the turn speed every calculation now for rotating counterclockwise let's do the same thing public void rotate counter clockwise rb dot move rotation rb dot rotation plus the turn speed times time dot fixed delta time all right and when we're going to thrust let's do this we'll create a method called thrust that sets our variable is thrusting to the true all right so let's actually figure out a way to make the thrust work so thrusting is going to happen every frame where we're thrusting so we need to create that in a loop so let's go ahead and use void fixed update our physics loop and we'll check to see if we're thrusting and current fuel is greater than zero if both of these conditions are true then we can tell the rigid body to add force in the up direction we multiply that by our thrust force let's go ahead and reduce our fuel minus equals by our thrust force as well so in other words more thrust takes up more fuel and after we've performed that thrust we're going to set his thrusting to false all right so if we save this and go back to unity and we hit play we fall and roll and nothing happens that's because we have no control over our player so we've been able to actually create some functionality here but we can't actually call that functionality yet so let's actually build what i like to call a player controller so let's add a new script to our lander call the playercontroller go ahead and create and add that and when it's on we can open up in unity and so first of all we're going to need to get a reference to our landing what we're trying to control we just created this class so we know know what it's called and in the start method we can set our lander reference to getting the component called the lander on this game object and now update is going to be our way to capture input so first let's check to see if our input get button are they pushing what we call thrust now remember we renamed thrust from jump so that's going to be our space button in other words we tell the lander to thrust and if our input dot get axis raw this is an interesting way access raw means it returns a number from negative one to one based on whatever access that we're choosing and we want the horizontal axis which will capture wasd in other words the a and d of the wsd it'll capture the left and right and it will also capture gamepad movement movement as well in the horizontal direction so at any rate if the horizontal input is greater than zero are they pushing right then you tell the lander to rotate clockwise else if the input in the get axis raw horizontal direction is less than zero we tell the lander to rotate counterclockwise all right now we've actually hooked up a player controller we don't care if horizontal is equal to zero because that means they're not trying to turn so let's save it and go back to unity and at this point now when it loads we should be able to play and actually do everything we want to rotate and push the thrust button and well there we go we ran out of fuel so it stopped thrusting but now we're off the screen and who knows what else to do nice so next let's actually figure out the game functionality