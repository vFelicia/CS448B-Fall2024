a brand new version of java is available right now Java 22 adds a lot of new features some of which are under the hood but there's a few really awesome things that you can take advantage of today whether you're an advanced developer or just starting out first this video is sponsored by jetbrains idees so I've done all my Java coding on this channel for years using intellig idea which is jetbrains amazing IDE for Java I also use it for real in my fulltime job hours and hours every day now this channel happens to be focused on Java but jet brains has a full Suite of amazing idees carefully designed around specific programming languages and text stacks intell for Java py charm for python C lion for C and C++ and tons more and since they're all based on the same platform once you're comfortable with one of them you'll feel right at home with any of them jeet's idees offer just a ton of functionality and it's all integrated so well with each other autocomplete best in the business even better with AI full s of debugging tools check unit test support you know it I even did an entire video about it get functionality built right in fully integrated database support and honestly that's just scratching the surface jet brain's idees even have an available AI assistant that can answer questions about your code suggest improvements and refactoring and even generate code and entire Suites of unit tests for you automatically when I was creating my cat class it literally suggested an entire meow method for me this AI understands me deeply so head on over to Jet brains.com or click the link down in the description to learn more and download the perfect jet brains IDE for your needs right now I know you'll be happy you did the first new thing being introduced in Java 22 that we're going to talk about is unnamed variables now you might be thinking what even is an unnamed variable how do you create a variable without a name let's do a quick super simple example here to show you an unnamed variable we'll create a cat of course we would create a cat we'll call it my cat so we'll name it for now equals new cat so here of course my cat variable is named my cat but now in Java 22 instead of giving your variable a normal name like my cat you can instead name it with an underscore so literally you can now say cat underscore or cat blank equals new cat now ever since Java 9 up until now underscore by itself has not been a valid identifier probably because they expected to implement functionality like this at some point so if you're using version 9 to 21 right now go ahead and give this a quick try and you'll see you get a compilation error with Java 22 creating a variable with an underscore blank is creating what they call an unnamed variable so now we have this blank cat variable right so what if we actually wanted to do something with it let's say we wanted to make this cat meow so we're going to call the meow method on it well of course we would just call blank. meow but you can see here that when we actually try and use it we get a compilation error that using blank as a reference is not allowed that's because after you create an unnamed variable you're actually not allowed to use it or reference it at all after it's been created you can't read them you can't pass them as arguments into methods and you can't change their values so that begs the question right John I hear you shouting from the other side of the screen what good is a variable if I can't ever reference it after I create it if I can't actually do anything with it why on Earth did the almighty Council of java sages over at Oracle decide this was something that they wanted to add well that's an excellent question and the answer is well you use it when you don't ever want to or need to reference a variable after you create it so in this example it's just not a good idea to use an unnamed variable for this there's no point in creating this new cat object if you can't ever do anything with it but let's go over a few examples of when it would be a good idea to use use an unnamed variable the first situation is probably one that you're all familiar with so you have a try catch setup and you're catching an exception but you absolutely don't want to and don't care to at all do anything with the actual exception object that you get in the catch so for example let's say that in your try you're creating a new int we'll call it my int and to initialize it you're going to call integer. parse int and you're going to parse some string into an INT let's say that string is 12b now when you call parse int there's a chance that you're going to generate a number format exception if the string that you pass in is not a valid number so to take care of that you'll set up your catch and you'll catch number format exception e and normally you'll just name your number format exception something like this either e or NF exception something like that but here intellig is going to give you a warning it's saying hey you should do something when you catch your exception and normally that's true yes you should but sometimes s you just don't care if the exception happens no big deal just catch it and move on or maybe you do want to do something and you just don't need the exception variable at all to do what you want to do like maybe you just want to print out that is not a number now before Java 22 what you might have done is name this variable something like ignored but even better now with the addition of unnamed variables in Java 22 we have a standard way to indicate a variable that you aren't going to use and again if you're using intellig it actually will suggest that as the solution if you hover over catch here it'll say hey your quick fix is rename e to blank and you can go ahead and click it and it takes care of it another great example is when you have an unused variable in your Lambda functions so for example let's say we had a list of cat objects again you knew it was going to be cats let's call it cats equals list of we're going to add three new cats to to our list so new cat new cat and new cat now what if for every cat in this list we just wanted to print out yay cats to the command line well one great way to do that is with a Lambda so we can just say cats. 4 each and for each cat we want to take our cat and we want to print out yay cats but as you can see here we don't actually need this cat variable we need some kind of variable here just to make the syntax of the Lambda happy and if we remove it we get an error so with Java 22 now we can just rename this cat variable to blank just as intellig is suggesting here so now with Java 22 if you're ever in a situation where you need to have a variable name but don't ever need to reference it or use it for anything just go ahead and name it with an underscore and that will not only indicate that you never intend to use it it will also enforce that you can never use it then also of course your coworkers or classmates that see you using it will be jealous that they can't because they're stuck way back in the olden days of java 21 so next have you ever tried to run a multiple file Java program from the command line it probably kind of sucked to try and get it running if you ever got it running at all instead you probably just did what I did and abandoned it completely and started using an IDE well now with a new feature in Java 22 it's way easier let's check it out now if you're an ancient programmer like myself you might remember the olden days where if you wanted to compile and run any Java program it was a twostep process process so first you had to explicitly compile your Java file with Java C then the name of the Java file so cat. Java and only then after your file was compiled Could you actually run it by calling Java cat meow now if you're a really hip and cool programmer like I know that you are you probably already know that since Java 11 you could skip the entire Java C command and just enter Java and the name of your Java file so even if I go in here and delete this class file that it just compiled into I can come back here and just type in Java and then cat. Java and it will automatically compile and run my program for me that's pretty cool but what if you had a program that's more than just one single file you still had to explicitly compile every file in your program with Java C before you could actually run it that means valuable seconds of your life were being wasted away just having to Java C every single file your program had but now with Java 22 that is no longer the case you can now run multifile Java programs just with the Java command on your main class so over here in test. Java you can see that we reference our other cat class that's over in the other file so even though test. Java is a multifile program I can come in here and just type Java test. Java and it will automatically compile and run my program for me all in one single command I think the toughest part of this change will be deciding what you're going to do with all of those critical second that you'll now be saving maybe do a pushup call up that one girl and ask her out trim that beard maybe go outside and see what the Sun looks like nah just kidding you're a programmer you'll find something to do that's actually important like going to complain about Java on Reddit the third feature we're going to talk about is called string templating this is actually a preview feature even in Java 22 so if you want to enable it you need to go into the project structure settings in intellig and then under project click on language level and select 22 preview and then select okay so here's something you've probably done in Java approximately 40 billion times you've combined strings and variables together to create one new string with pluses to concatenate them so for example let's say you've got some variable you know string name equals John and some other variable you know int AG equals 35 and then you want to combine those with some other text to make like a message string so you might do something like string message equals hello my name is then you got to end quote space plus and then name space plus begin your quotes again exclamation point space I am and your quotes plus age plus quote years old and then of course we can print that out if we want to and of course if we go ahead and run this it's going to print out our whole full concatenated string so this works but it can be kind of Clum with all the pluses and the ending quotes and beginning quotes and just kind of unwieldy and hard to read so what you can do now in Java 22 is replace this concatenation with an expression that you embed in the string so instead of end quote plus name plus begin quote here we can have a backslash and then open and close curly braces and then within those curly braces the name of our variable that we want to insert and then we can do the exact same thing with the age here so just backs slash and then in curly braces age now you'll probably notice that right now we get a compilation error here and that's because there's just one more thing that's required to make string templating work properly and that is at the beginning of this string we just need to add St in all caps dot this just tells Java to process this entire expression as a string template and if you have your intellig set up to use Java 22 preview features it will automatically suggest that as a quick fix as well so if you over this it gives us the option to add the St processor where I think this really shines is with text blocks and multiline strings let me show you what I mean so let's say that instead of just a small string like this we instead had a large multiline string like some HTML that I am just going to paste in because I am too lazy to type the whole thing out now it's cool that you can use a triple quot like this to make a large you know a text block a multiline string but when you start having to concatenate in little variables with it it starts to look really messy you know you've got all these extra triple quotes you always have to have a new line after the opening triple quotes and so your ending tag has to be on a separate line from your opening tag it just kind of turns all this into a bit of a mess and now with string templates you can replace all of this wackiness with just slash and then your variable name in curly brackets and then same down here we'll replace all of this which is slash text move this on up and then here at the top add your s TR R do and you're Off to the Races now this I think is awesome it's way more clean and easy to read than what we had before so give all these new Java features to try and let me know what you think and be sure to show them off to everyone in your whole life like make sure Grandma knows about unnamed variables it's crucially important that she stays on the bleeding edge of every new Java release too there are of course other new features that have been added to Java 22 and other recent versions of java that we just didn't have time to go over today so if you or your grandma notice any of these new features that you're curious about that you'd like me to talk about be sure to let me know in the comments below be sure to check out my full Java course linked down in the description below if you haven't already and as always thank you so much for watching and I will see you all next time