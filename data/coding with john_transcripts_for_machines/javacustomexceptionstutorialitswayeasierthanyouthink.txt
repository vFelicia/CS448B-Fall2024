so you want to create your own custom exception in java but how exactly do you do it we'll walk through the process of creating custom exceptions in detail in this video it's way easier than you might think and we'll also talk about how you can make those custom exceptions way more useful i'm john i'm a lead java software engineer and i also have a full java course available in a link down in the description so go check it out but first thanks to mailgun for sponsoring this video mailgun is how modern companies work with email mail gun is easy to use has amazing customer support and simple but powerful apis that smart developers can use to reach customers at scale so their organizations can grow faster with whatever language you're using including java of course you can use the mail gun apis to send emails with just a few lines of code like this you can send and track marketing and transactional emails remove invalid emails from your lists or prevent fake signups in the first place easily milgann also has an awesome sendtime optimization feature that automatically finds the perfect time to send the email to each and every individual person on your list at the exact time that they're most likely to engage you'll also have access to their team of email experts to help you improve your email deliverability and drive higher conversion rates mailgun works through the entire email lifecycle from conception to delivery and then gathering insights and analytics for your next send mailgun handles over 240 billion emails a year for over a hundred thousand companies such as wikipedia dhl toast lyft and microsoft mail gun makes it easier than ever to build connected experiences through email thanks again to mailgun for sponsoring this video try mailgun for free right now by using my link down in the description mailgun.com john now let's get to it okay so creating your own custom exceptions how do you do it well let's start with a quick example of a situation where you might actually want to create your own custom exception so let's say we had a method that all it does is take in an int that represents an age and all it has to do is validate that that is a valid age so that would look something like uh private static void we'll call it validate age and all that would take in is an int age okay and then up here in our main method we can call this validate age method with whatever int we want let's just say 3. now one reasonable validation we might want to use in this method is just validating that this age is not negative because a negative age doesn't make any sense so we can just say if age is less than zero then what we want to do is throw some type of exception that this is an invalid age now there are tons of different types of exceptions that are already built into java and if we wanted we could always just throw a generic exception and some builtin exceptions might get pretty close to the type of exception that we want to throw but what you might want to do is create your very own exception to match this exact situation so how exactly do you do that well the first thing that you need to do is create a new class so over here in our java folder we'll just right click and go to new java class now this class will be our new exception type so we need to name it exactly what we want our new exception to be it's good to be as specific as you can with the name and it's also convention to have exception at the end of the name you don't technically have to but you have to and i'll make sure that you do don't let me catch you making a custom exception without exception at the end of its name i will find out i have eyes everywhere anyway we'll name this one age less than zero exception pretty descriptive name so go ahead and hit enter and it will create that class for us okay so now we've created our exception class right but if we go back to our method here and try to throw a new age less than zero exception we get an error and that's because to make this an exception that we can throw over here in our class declaration we have to add extends exception so now if we go back here that error is gone but we have a new one so what this error is saying is that hey i know here that you're throwing this exception so you either need to surround it with a try catch and deal with the exception or declare up here in the method signature that this method can throw that exception for now we'll just go ahead and add it to our method signature here and we can use intellij to do that by just hovering over the error message and clicking add exception to method signature but now since this method can throw this exception up here where we're calling this method we're going to have to do the same thing so let's go ahead and click add exception to method signature here in our main method also as a quick note though if over in your custom exception class instead of extending exception you extend runtime exception that makes this custom exception into what's called an unchecked exception and for an unchecked exception you technically don't have to have these throws declarations in your methods and you still won't get an error if you don't have them but before you do that be sure to check out my video on checked versus unchecked exceptions to make sure that's something you actually want to do for now we'll go ahead and keep our throws declarations and have this just extend exception you can also check out my exception handling video for everything you need to know about using a try catch anyway there we go now we have no more errors and here in our method we're throwing our very own custom age less than zero exception so now of course if we go ahead and run our program since we're sending in a valid positive age of three we don't get any exceptions but if we change this to something like negative 1 and run it again we can see that we get this age less than 0 exception that we made ourselves pretty cool so really that's how you can get a basic bare bones version of a custom exception literally the only thing that you need to do is create a class that extends exception and you have your very own custom exception however there's definitely a few things you're going to want to do to make this custom exception more useful first notice here where we're throwing our new custom exception we aren't sending any parameters to the constructor method here now if you've ever used a standard exception before you might know that you can pass in some parameters to this constructor if you want for example you can pass in a string message here that will print out along with the exception whenever it's thrown so in here we could put something like oh no something went wrong before we run it we have to change these throws declarations to exception to make it happy so now if we run this whenever it throws this exception it also prints out this string message along with it but now if we try to do the same thing with our own custom exception that we created so maybe in that case the message can be age cannot be negative you see we're getting an error here and that's because our new custom exception class doesn't have any constructors that actually take in that string message as a parameter so how do we go about adding one so we can have this capability well all we have to do is over in our exception class we need to create that new constructor that takes in that string parameter so that would be something like public age less than zero exception and here we'll take in our string message as a parameter but then what do we want to do in the body of this constructor well it turns out since our custom exception is a child of the exception class we can actually call the exception classes version of that constructor directly and we can do that by just calling super here in the body of our constructor and passing in our message as a parameter so our constructor is essentially just calling the exception classes version of the same constructor to do all the hard work so now if we go back to our main program we don't have any errors anymore and now if we go ahead and run it we get our own custom string message printed out along with our custom exception one important thing to note here is that if we try to use the version of the constructor that didn't take any parameters well now we actually get an exception that's kind of weird though right why was this exact thing working before but now that we added that new constructor it's not working anymore well the reason for that is that in java if you create a class but don't create any constructors yourself java will create a constructor for you that takes in no arguments and that's often called a default no args constructor however if you do provide any constructors at all then java won't provide that default constructor for you so once you've provided any other constructor yourself if you still want that no args constructor you're going to have to add it yourself luckily that's pretty easy to do so over here in our custom exception class all we need to do is add public age less than zero exception and just an open and closed parenthesis because this doesn't take in any parameters and you don't even need a message body so you can just open and close curly braces now we have our basic no args constructor available just like we did before now there's another constructor that is offered by the generic exception class that you might also want to add into your own custom class depending on your situation and that's a constructor that actually takes in a throwable as a parameter so it looks like this public age less than zero exception and then as a parameter it takes in a throwable and that throwable is called cause and then inside the constructor all we have to do is call the exception classes version of the same constructor again by just calling super and passing in our cause parameter now this constructor can be particularly useful if the custom exception that you're creating can be caused by some other exception now when that happens and you're throwing your own custom exception you can pass in the throwable that actually caused this exception to be generated so that could be any error or any exception anything like that and then whenever this exception gets printed out it also prints out the cause of that exception whichever throwable caused this exception to be thrown so as a quick example if a runtime exception could cause this age less than zero exception all you have to do is pass in that runtime exception into the constructor when you throw your custom exception and then when you run your code it will show your exception like it did before but also show that it is caused by this particular runtime exception too there's also a version of the constructor that actually takes in both of these things so a string message and a throwable cause just in case you need both and so it's pretty simple to include so you might as well do that as well so that's just public age less than zero exception takes in a string message and a throwable cause we'll call super in exactly the same way and just pass in our message and the cause so now over here where we're throwing our custom exception we can now include both parameters so i can include a message like uh oh no and then also the runtime exception cause and now when we run our code when our exception is thrown it prints out the message here oh no along with the cause this runtime exception now here's another thing that i want to talk about now some of you might be asking now hey why do i need to extend exception can't i just extend throwable here or even extend error if i want to now the answer to that is technically yes but don't again if you do i will find out but now why exactly is that why is it a bad idea to extend throwable or error well part of the answer is just that it's the convention and generally unless you have a really good reason not to it's always best practice to just go by the coding conventions that way it's way easier for anyone who's dealing with your code or maintaining it or working with it in the future everyone would expect that some custom exception would extend exception or maybe runtime exception if you wanted it to be unchecked but not a generic throwable and also not error and that's because errors are separate from exceptions and they usually indicate a serious problem that you should never try to catch and deal with like an out of memory error a stack overflow error things like that so you can create your own subclasses of error but you'll probably never run into a situation where you should do that in your entire java career also it's actually best to extend the type of exception that already exists that is closest to your custom exception as possible so in our case there's an exception that's actually built into java called illegal argument exception and we can see here that it's meant to be used when a method has been passed an illegal or inappropriate argument now that's very similar to what we need because all we're doing here is throwing an exception if this argument passed into this method is invalid so although extending exception is totally fine in our case it's probably a little bit better to actually extend illegal argument exception and if we do that everything we've already written works exactly the same way and we don't have to change anything if you enjoyed this video or learned something please let me know by hitting the like button and be sure to subscribe so you don't miss each new java tutorial and be sure to check out my full java course in the link down in the description there you'll find more than 30 full video lessons that you can enjoy at your own pace fully downloadable so that you can watch wherever and whenever you want once you get it you'll have access to it forever and that includes any lessons that might be added to the course in the future so go check it out as always thank you so much for watching i really do appreciate you being here with me i'll see you next time