in this video we're going to talk all about constructors in java we'll go over what they are and what they're used for how to use them and how you can create different types of them with some concrete examples my name is john i'm a lead java software engineer and i love sharing what i've learned in a clear understandable way so if you like this video please consider subscribing so you don't miss each new java tutorial i also have a full java course available in a link down in the description if you're interested okay so what exactly is a constructor and what is it used for all a constructor is is a very special type of method that is used to create new objects let's say we have a basic class like this dog class here this dog class serves as a kind of a blueprint for what a dog looks like but if we want to create any actual dog objects we have to use constructors to do that you've probably created java objects in your programs before just by doing something like dog my dog equals new dog well when you see this new keyword followed by the class name itself in this case dog and an open and closed parenthesis this is actually calling a dog constructor method to create a new dog object but over in my dog class you'll see that i don't have any methods at all i have two fields a string name and an int age but i'm still able to use this dog constructor method to create a new dog object so how is that well when you have a class like this dog java kind of assumes that you're going to want to create objects of this class so without you having to do anything at all java creates a default constructor for you now the default constructor doesn't take any arguments at all that's why this open close parentheses is just empty and you'll probably hear people calling it something like the default no args constructor this is what they're talking about all it does is gives me a brand new dog object that's essentially empty so each dog object will have a name and an age but if i go back here and take my my dog object and print out my dog.name it prints out null and that's because this default constructor doesn't set any of the fields on this object but what if i want to be able to set these values when i create a dog right i can't do that with a default constructor if i want to do that i can create my own custom constructor it's pretty similar to other methods but there are some small differences it looks like this public dog open and close parentheses and open and close curly braces so you can see it looks a whole lot like any other method but for a constructor method the name of the method will always be exactly the class name so here it's dog it also won't have any return type here like and or string or not even void it won't have any return type at all in a constructor so what we've just made here is what java had already given us as its default no args constructor it takes no arguments and essentially just gives us a new empty dog object but here in this constructor method body i can set the name of this new dog object that's being created so for example i can take name and set it to kramer so now if i go back and call this same constructor method and i run my program my dog's name is kramer but it's kind of lame to have a dog constructor method that always sets the name to exactly the same thing right you want to be able to customize that name for each individual dog object that you make to do that we'll want to add a parameter to this constructor method so what we can do is take in a string name parameter then you can set this name field with the name variable that's passed in but here's the thing though so if you take name and set it to name so there's something wrong with this right the parameter here is called name but the field on our object is also called name right now when we just put name java assumes that we mean this name parameter that's being passed into the method to solve that we can tell java that we mean the name field on this dog object by using the this keyword now this keyword is probably a whole other topic for another future video for now all you need to know is that you need to use this dot name when you want to refer to the field on the object so that'll take this name field and assign it the value of the name being passed into the method so now back here we can pass in the name as a parameter to our dog constructor let's call it jerry and run our program and we can see that we have a dog named jerry now you aren't limited to just one constructor if you want you can have multiple constructors the only requirement is they have to have different types of parameters so if i just take this method and copy it even if i change the name of this string variable to something else eclipse still gives me an error because i have two different structures that both take a string as its parameter but you're totally allowed to have multiple constructors if they have different parameter types so if instead this took in an int age then we can set this dot age equal to age this is no problem at all so now we can pass in an int an age so i can pass in four and then if i want to print out my dog's age i get four you can also create constructors that take more than one parameter so instead of having separate constructors where one sets the name and one sets the age you can instead make a brand new constructor that takes in the string name and the int age we said this dot age equals age this dot name equals name if we want to use this constructor we just need to pass in a name and an age so for the name let's give it uh george 33 we can print out the name and mydog.age and there we go we've created george the 33 year old dog and of course you're not just limited to two parameters like any other java method you can create constructors that take as many parameters as you want there are a couple of more very important things to know so don't bail on me yet one thing is that notice if we go back and take out sending these parameters and just try and use the default no args constructor now we get an error that says the constructor dog with no parameters is undefined but it should be using the default constructor that java gives us for free right so what gives well yes remember if we don't provide any constructor at all java will provide this default no args constructor for free but if we specify any constructor at all ourselves java will not provide that default no args constructor if we've added our own custom constructors and we still want that no args constructor we need to include it ourselves of course that's not hard to do we had it before it's just public dog open close parentheses open and close curly braces another thing is what about situations where you actually don't want any constructor for your class at all for example maybe you have a class like this i have a constants class since all these fields are static i can use any of these constants in this file without having to create any objects so over here i can just say you know constants dot my name i didn't need to create a constant object to get this variable since i never need to create any new objects of this class it kind of makes no sense to have any constructors at all but right now i can still say constants my constants equals new constants java's still giving me this default constructor so what can you do to prevent people from creating new constant objects so what you actually do is go into your class and go ahead and create that no args constructor manually yourself so public constants open close parentheses and open and close curly braces like before but instead of making it public like we did for all our other constructors change this to private and we know that private methods can only be called from within that class right so now if you try to call this constructor from anywhere else like over here in our main method we now see that we get an error this constructor is not visible because it's private but you can still go ahead and use all of its static fields just fine with no problems if you enjoyed this video or learned something please let me know by leaving a like and be sure to subscribe so you don't miss each new java tutorial and if you really want to help and support the channel you can do the fabulous youtube trifecta of leaving a like a comment and hitting the subscribe button i hope this video helped you out and if it did i really appreciate your support i'll see you next time