in this video we are going to code the bubble sort sorting algorithm in java even though bubble sort definitely isn't the fastest sorting algorithm in the world it's a really great algorithm for beginners to learn and implement and we're going to see if bubble sort can sort an array of 14 ins faster than the five hours or so it took to do it with bogo sort hopefully this is a little faster than that if this is your first time on the channel thanks for watching my name is john and i do a new java tutorial video every single week so be sure to leave a like and hit the subscribe button so you don't miss the new video every week before we get started as always the full source is available in the link down below in the description so go and get it a few weeks ago on this channel we coded a ridiculous sorting algorithm called bogosort that's the sorting algorithm where all you do is randomly shuffle your list and then check to see if it's sorted and if it isn't keep shuffling it until it is that video is here if you want to go check it out that algorithm is obviously silly and it just gets super crazy slow even with just a few values in your list here we'll be coding bubble sort now of course it isn't a super fast sorting algorithm but it is much better than bogo sort first let's just look at a visual representation of how bubble sort works this is a gif that's just taken from wikipedia what it does is it goes through the list starting at the beginning and it compares each number with the number after it and if those two numbers are not in the right order it swaps them and if they are in the right order it just leaves them where they are and then it moves to the next number and compares that number with the one after it and does the same thing and then when it reaches the end of the list it just starts over at the beginning and does the whole thing again you can see in this animation why it's called bubble sort because what happens is like the highest numbers kind of bubble to the top it keeps going through the list over and over again swapping values when they're out of order and it only stops when it goes to the list and doesn't have to swap anything and that's how it knows that the list is finally in order obviously if you go through the list and no two numbers are out of order you know your list is perfectly sorted and that's how this sorting algorithm knows that it's done all right so enough about the conceptual part let's get to coding i have precoded here just a little setup that gives us a random list of numbers that we can sort so quickly just to step through it we start out with an array of ins and we'll just make it size 10 so we'll start with just 10 inch that we're sorting and then i have this for loop here that goes through that end array and then fills it up with random ends basically between zero and a million and then once we have that array of random ins print out the before state where of course that list is not in order at all and then we have the spot where we are going to be writing our bubble sort sorting algorithm and then right after that we print out the array again and it should be in perfectly sorted order and this print array method that i'm calling to print the array all it's doing is looping through each element in the array and printing it out okay so here's where we're going to be writing our bubble sort algorithm so i think we want to start with a for loop let's start with the process where it goes from the beginning to the end of the list and for each element it'll check whether it is out of order with the one after it or not and if those two are out of order we swap them and then we move on to the next two so here's what that looks like we're going to create a for loop and we'll just do 4 int i equals 0 and we're going to loop while i is less than the length of our numbers list minus one so you might be thinking usually when we're looping through an array we might go until i is less than numbers.length and not numbers.length minus one so why are we doing numbers.length minus one and the reason is when we're looking at the second to last element we'll be comparing it with the one after it which will be the last element so so there's no reason to look at the last element by itself there's nothing after it to compare it with so we just can stop at numbers.length minus one then of course i plus plus two increment i every time through the loop all right now each time through the loop here we want to compare the element of the index we're looking at with the one after it and if they're out of order we want to swap them so we can write that condition with a pretty simple if statement we can just say if numbers i that's the number at index i so the first time through this loop we'll be looking at the very first element the zeroth element in our array is greater than numbers i plus 1. so this will tell us if the number at the index we're looking at is greater than the next number so if this number is greater than the next number these are out of order and we need to swap them and swapping two numbers is kind of a classic programming problem when you want to swap two variables or here just two different elements in an array it's easiest to use a temp variable and i'll show you what i mean here so we can create int temp equals numbers i so temporarily we're going to save the value we have here at index i in our array to this temp variable then we're going to set that value at numbers i to be what is currently at numbers i plus 1. so now our element at index i has what was at i plus 1 and now we have to assign the i plus 1 index to be what was at i and we can do that by using our temp variable so we can say numbers at i plus 1 equals temp and that's why you need this temp variable if you ignore using this temp variable and just set numbers i equals numbers i plus one they both then have exactly the same value and the value you had at the i position is lost and you can't set the i plus one position to it so that's why you temporarily save it to a temp variable like this this is a very classic way to swap two elements in an array or two variables in any programming language all right so now we've coded one iteration of going through the list and swapping the elements that were out of order but going through it just one time won't make it end up in perfect order and we can even run our program to show what i mean so we can see our before state where we have just you know a completely random order and then after right now we're doing just one iteration of the bubble sort process so what that one iteration does while it's going through each element and swapping them if they're out of order what you'll end up with is the highest one will be at the top but all the other ones won't necessarily be in order yet so what the algorithm has to do is keep going through this array over and over again swapping elements that are out of order until it has a perfectly sorted list but that won't happen after just one iteration so how do we code this to iterate through this list over and over again doing that swapping until the array is finally in order well here's what we can do we can create a boolean we'll call it swapped something and initialize it first to true and then what we're going to do is enclose this entire for loop that we currently have in a while loop and the condition we are going to have for our while loop is swapped something you will use the swapped something boolean so each time through this while loop it looks to see if swap something is true and if it is it'll keep going through this while loop right now of course since nothing is changing the swapped something to false ever this will always be true and it'll just loop through this infinitely of course that's not what we want what we actually want to do is right before each time we start going through this for loop we actually want to set swap something to false what we're really going for here is we're trying to tell the program if you go through every element in this list and you didn't have to swap anything then you know it is already in perfect order but if you did have to swap something well you're gonna have to go through it again so that's why here right before we jump into our for loop we want to set swap something to false but then the moment that we find out oh we had to swap something something wasn't in order then we went to set swapped something to true so basically we start optimistically hey we didn't have to swap anything yet but then as we're going through our list and we discover ah there was something that was out of order and we're about to have to swap something we're going to set swap something to true in that situation where it did have to swap something once it gets out of this for loop and goes back to the top of the while loop it said ah yep i just had to swap something my last iteration through this loop so i better go through it again because my list still wasn't in perfect order and you might be thinking what's kind of weird here is we had to start with a swapped something of true that was just to get it in the while loop the first time if we started out with it set to false this value would be false and it wouldn't even enter the while loop at all so as a side note if you wanted to you could rework this with a do while loop and you wouldn't have to start it with true but i just tend to like the cleanliness of a while loop a little better than a do while loop but it would work great with a do while loop as well okay i think that should give us a working bubble sort so let's run our program with 10 random numbers and see if it sorts them on all right there's our before state all crazy and out of order and after we can take a look and it looks like our array is in perfect sorted order and with just 10 elements it's very quick runs in about uh one second it looks like so that's pretty cool right we coded our own real sorting algorithm and we've tried it for 10 numbers let's increase that a bit and try to sort um a thousand numbers we'll run that and still finished uh very very quickly there's all the out of order ones and now we should see starting here's the after state and yeah it looks like those are in perfect order great and now let's get a little crazier let's do a hundred thousand elements here we go okay this one's taking a little bit longer it's still running it printed out our uh our unsorted list and now it's it's sorting them before it prints it out see what happens taking a while okay there it goes it looks like it sorted it in order nicely but it did take about about 25 seconds or so so it's kind of a long time it's not a very effective thing for really huge sets of data but if you remember our bogo sort with just 14 elements took something like five hours and here we're sorting a hundred thousand elements in less than 30 seconds so it's definitely not amazing but infinitely better than bogosort next let's step it up and sort a million elements here we go well it takes a while to just print out a million elements but it did finish that here we go bubble sort has a complexity of what's called big o of n squared what that basically means is as the number of elements that we're trying to sort increases the amount of time or the amount of memory needed to do that sorting increases at the rate of the number of elements squared what that means practically for us here in this situation is now that we increased the number of elements that we want to sort from 100 000 to a million it may seem like it should just take maybe 10 times as long to sort that because we have 10 times the number of elements but in reality because this is the big o of n squared it's probably going to take much much longer than just 10 times the amount of time it took to do 100 000. but we'll wait and see it could take uh quite a long time okay finally finished so it went from about 9 15 to 9 52 so it took about 37 minutes for it to finish sorting those 1 million inch so there's a pretty long time it's it's not near as bad as the 5 hours it took to sort 14 ins with bogosort but although this sorting algorithm works just fine it's not efficient enough for you to want to use for large data sets like this with an algorithm that has a complexity of big o of n squared you can kind of think about it that when you double the size of the data set that you want to sort give or take you're going to quadruple the amount of time that it takes so here when we went from sorting a hundred thousand elements to a million we went from taking less than 30 seconds to over 30 minutes so it's taking more than 60 times as long to sort an array 10 times as long if you enjoyed this video or learned something please be sure to let me know with a like and hit the subscribe button if you'd like to see a new java video like this one every single week and really thank you for taking the time to like and subscribe it might not seem like much but it's the only way these videos get out to help more people so i do appreciate it thanks for watching see you next time