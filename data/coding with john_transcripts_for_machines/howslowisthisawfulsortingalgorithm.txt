in a recent video on the channel we coded the bogo sort sorting algorithm in java that was so ridiculous and so inefficient that it took about five hours to sort 14 numbers now the algorithm that we're going to code in this video is even more ridiculous and i think has the potential to be even slower my name is john and i do a new java tutorial video every single week so be sure to subscribe so you don't miss each week's video i also have a full java course available in a link down in the description if you're interested if not that's awesome too i'm thrilled to have you here and as always the full source of this program is available in a link down in the description so go and get it okay the sorting algorithm we're going to implement today is called bozo sort playing off the silliness of bogo sort but this one is even more dumb and ridiculous so with bogosor remember that each time you just shuffle the list into some random order and then just check to see if it was sorted or not and if it wasn't you just kept shuffling the list and that bogo sort video is here in case you haven't seen it this one is similar where you do just check the list to see if it's sorted but if it's not instead of shuffling the list you just take two random elements of the list and swap them with each other so we're checking the list to see if it's sorted and if it's not we take two completely random elements from that list and swap them with each other and then we check the list again to see if it's sorted and we keep going until somehow our list gets perfectly sorted just to get us started i have some prewritten code here that just creates an array of ins here we're just doing five ins to start out with and then it just loops through that array and fills it up with random ends basically between 0 and 10 000 and then here is where we're going to code our wonderfully ridiculously bad sorting algorithm afterwards this just loops through our array and prints out all the numbers hopefully in perfectly sorted order i also have a prewritten private method here is list sorted that just takes in an array of ins and returns a boolean for whether or not that list is in perfect order we'll use this method inside our algorithm to check whether the list is currently sorted so let's just run our program a few times without the sorting algorithm in place and you can see that it's creating an array of random numbers and they're in no particular order at all so as i mentioned before there's just a couple of things that our sorting algorithm actually has to do number one check to see if our array is sorted and number two if it's not sorted randomly choose two elements of that array and swap them and just keep doing that forever until the array is sorted so the first part of our algorithm we need to check if the list is currently in order so to do that our algorithm is going to be pretty simple it's going to be a while loop and the condition of staying in our while loop is going to be while the array is still not sorted so we'll just say not is list sorted and pass in our numbers array so if we're looking at our numbers array and we find that it's not sorted what do we have to do take two random elements of that array and swap them to get two random elements we really need two random indexes inside of our array for example here we have an array of size five so we wanna randomly choose two indexes that are between zero and four so let's get our first random index uh int index one equals we're going to use our rand object that we created up here in order to fill our array in the first place and just call rand.nextint and we want to pass in the length of our numbers array so this will give us one random index of our array but we need two of them so we can swap those two random elements so int index two equals the same thing rand dot next int and pass in numbers dot length so now that we have our two random indexes in our array we just need to swap them so to swap two elements typically you'll use a temp variable so we'll say in temp equals numbers at index one so we'll temporarily save the value with that first index to our temp variable and then we'll assign the value at numbers index one to be whatever the current value is at numbers at index two so now index one has the value that used to be at index two after that we just need to take numbers at index two and assign it to be the value that used to be at index one which is temp while the list is not sorted we're gonna find two random elements and swap them once our array is magically sorted we will leave this while loop and print out our list in perfectly sorted order so let's go ahead and run it with our array of five random ins and see if it works okay all right excellent so it's printing out our random list in perfectly sorted order smallest to largest looks great now let's run it just a few more times to make sure it wasn't just a fluke all right perfect and it's not taking long at all it's pretty much finishing immediately but let's step it up just a little bit instead of sorting five numbers let's just try 12. okay here we go took a little bit longer there about two seconds okay let's just go a little bit higher 13. okay that jump from 12 to 13 seems to be a big jump remember this bososaur algorithm isn't like most sorting algorithms where it's like working its way slowly towards a solution it's really just trying completely random combinations and just seeing if it works so even if one time you run this and it takes just a few seconds to run running it another time on the exact same size of array could take two three ten times as long you don't know it's just completely random how long it could take all right it has finished it only took about seven minutes pretty brutally slow for sorting just 13 numbers all right so now we are going to test out 14 integers now remember with bogo sword this took about five hours so with bozo sword is it going to be one hour 10 hours the only way to find out is to run it so there we go it's running as much as i'd love to just stare at this and contemplate what i'm doing with my life i think i'll just see you back here when it finishes so i'll see you then all right our 14 element bozo sort has completed so it started at 10 39 p.m and ended at 12 15 a.m so it took um about an hour and a half now frankly i'm surprised that is way better than the five hours or so it took for bogo sort to do the same thing so we're going to do something here for bozo sort that we didn't do for bogo sort and we are going to step it up to 15 integers and here we go all right we're back and our 15 element bozo sort has completed and again it finished way sooner than i expected it to started about 7 15 and ended at 9 o'clock so it only took about an hour and 45 minutes now i say only i mean an hour and 45 minutes is still a ridiculously huge amount of time to sort just 15 numbers but i expected it to maybe take all day or even longer because i think the time complexity of this algorithm is also big o of n factorial but just because two algorithms have the same big o complexity doesn't mean they will always run in similar amounts of time so i think one of two things could be happening and maybe both number one we could have just gotten super lucky and our random swapping just happened to come to the exact right order really early in the process or what could also be happening is that in bogo sort it had to shuffle the entire array each time but over here in bozo sort all it had to do is take two random elements and swap them and i would think shuffling the whole array takes a lot more time relatively speaking than just swapping two elements and because it has to do those operations probably billions of times in performing this algorithm that's another thing that could make bozosort just a little less terrible than bogosort if you have to pick some completely random sorting algorithm and you have to choose between bogo sort and bozo sort i say bozo sorts your best bet if you enjoyed this video or learned something please be sure to leave a like and hit the subscribe button so you don't miss the brand new java video every single week and i really do appreciate you doing that it's the only way these videos get out to help more people and be sure to grab the full source and the link down in the description if you want to pull this down and run it yourself see in the next video