one of the more strange keywords you'll see in java is this but what exactly does this mean and what is it used for in this video we'll go over all the ways this can be used in java so you'll know exactly when you need to use it and what it actually means when you do my name is john i'm a lead java software engineer and i love sharing what i've learned with all of you in a clear and understandable way i also have a full java course available and a link down in the description if you're interested let's get right to it alright so the first way that this keyword can be used in java is to refer to the current object meaning it refers to the object that the method you're currently in was called on but what exactly does that mean and when might you want to do that let's take a look using a simple example so i've got this dog class right all it has is two fields a string name and an int age you probably know that in general it's a good idea to make these fields private and then create getter and setter methods for being able to manipulate and read these values so for example if you wanted to make a setter method for this name variable you probably have something like this public void set name and that would take in the string name that you want to set the name to and then in the method you just want to of course set this name field to be the value of this name being passed into this method right but pretty quickly it's obvious that we have a problem here right the problem is that the field for the name of the dog in our class is called name but the parameter that we have being passed in is also called name as it is right now both of these names that we have here are referring to this name parameter being passed in so all this is doing is just setting this name variable to itself so right now this method does nothing at all to actually set this name field on the object so how do we go about telling java that we want to set this name field to have the value of this name parameter being passed in well that's where the this keyword comes in we can use this dot name to specify to java that we are referring to the field on the object that this method was called on and you can do the same thing when you create your getters so a getter for name could look like public string get name no parameters need to be passed in it'll just return this dot name since there's no conflicting variable that has the exact same name we don't technically have to use this keyword here if we got rid of it of course there's no other name this could possibly be referring to in this method other than this field but it's often good practice to go ahead and use it anyway just for clarity so now we can go and create a dog we'll call it my dog set it equal to new dog then we can take my dog and call set name and pass in kramer then we can go ahead and print it out my dog dot get name just to prove that it's now being set correctly and it is we get kramer so when we're calling the set name method on the my dog object inside that set name method this is referring to the my dog dog object that the set name method was called on so if i'm inside a method in the dog class this will refer to the exact dog object that that method we're inside was called on so if i call my dog.set name inside the set name method this refers to the mydog object itself so this is just saying take the mydog object and set its name to be the value of the name variable being passed in and it doesn't just have to be getters and setters you can use this in any nonstatic method and you can also use it in constructors in a similar way let's say i wanted to make a new constructor public dog and i wanted to be able to take in the string name and the int age right here in the constructor so i can set them immediately on the object i would just want to do the same thing i did here in the setter method i just say this dot name equals name and this dot age equals age so it works exactly the same way it did in the setter method this dot name and this dot age refer to the name and age fields on the actual dog object that's being created inside this constructor and we set their values using the name and age parameters being passed in by the way if you're a little bit hazy on constructors check out this other video i've got that goes into a deep dive all about constructors it'll clear up all of your questions so you can use this and any constructor to refer to the object being created or in any nonstatic method to refer to the object that that method was called on however notice i said any nonstatic method using this is not allowed in any static method let's say i made a public static void print stuff inside of this method if i try to do something like this.name i'm going to get an error that says cannot use this in a static context and that makes sense right the whole point of a static method is that they can be used outside the context of any particular object of that class you can call a static method like this on the class itself without needing any particular object and since this refers to the object that this method would be called on using it in a static method just doesn't make any sense so it's not allowed the other way that this keyword can be used in java is inside constructor methods to call other constructor methods that sounds kind of weird right why would you want to do that so here's an example so we've already created this dog constructor that takes in a name and an age so that you're able to create a new dog with a specific name and an age that you can specify but what if we wanted to create another constructor that takes no arguments at all and just creates a new dog object with some default values for the name and age so we could say public dog takes no parameters right now if we just leave this empty it would create a new dog object but it wouldn't set its name or its age but what we can do from here is call this other constructor and just give it default values for the name and the age and to call that other constructor that's where we use the this keyword we just say this and then pass in the values that we want to use for name and age so a default name for a dog could be fido and maybe we can default its age to zero so when you use the this keyword followed by a parenthesis java knows that you're invoking a constructor and it knows the exact constructor that you're calling just based on the types of the variables that you pass in so because you're passing in a string and an int java knows to call this constructor here that takes in a string and an int so now back here in our code where we're creating a brand new dog just with this basic no args constructor if we don't set a name at all let's get rid of this set name line it will give us the default name of fido and what happened is it called the no args constructor which used this keyword to call this other constructor with the name of fido and the age of zero so often people will use this kind of pattern to have one constructor that takes in a whole bunch of custom values if you want to use it and then have other constructors with fewer parameters or even no parameters and then uses this keyword to call the other constructors with certain default values now if you ever use this to call another constructor your this call has to be the very first statement in your constructor you're not even allowed to do something like system.out.printline hi mom if you're this constructor call is not the very first line in the constructor that you're creating you will get an error you're not allowed to have this call anywhere else you can't use this call and any other methods besides a constructor and it always has to be the very first statement that you make inside your constructor the basic reason for that is that this call to the other constructor actually creates the object and java doesn't want you to have any other code that might try to use that object before it's created if you enjoyed this video or learned something please let me know by hitting the like button and be sure to subscribe so you don't miss each new java tutorial don't stop now go ahead and check out one of these other videos to keep on learning see you next time