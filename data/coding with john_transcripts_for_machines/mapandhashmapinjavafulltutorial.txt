in this video we're going to talk all about using maps in java i remember back when i was learning java just the concept of what a map was and what it was used for seemed complicated and hard to grasp but what a map is and how you can use it is really simple and you're going to have a great understanding of it by the end of this video my name is john and i put up a new java tutorial video every single week so if you like this video please consider subscribing so you don't miss each week's video i also have a full java course available in a link down in the description if you're interested so go check it out what exactly is a map what is it used for and what does it represent so at its most basic level a map is just a set of key value pairs i think this is so much easier to grasp if we just start with an example so imagine if i'm running a company and i have a bunch of employees and they all have id numbers i would probably want something where i could put in an employee name and get their id number that is the kind of thing a map can do for you we can create a map of employee names to id numbers so let's do that right now so how would we create a map like that in our code here's how we can do it we can do hash map amp ids for employee ids equals new hash map we'll need to go ahead and import java.util.hashmap normally when you create an object this is pretty much everything you need but when you're creating a map you need a little bit more one of the things that eclipse is complaining about here is it says hashmap is a raw type references to generic type hashmap should be parameterized so what does that mean that means java wants to know what this is going to be a map to and from this is going to be a map of what to what and it's just looking for data types there like you could have a map of integers to strings uh strings to doubles or if you created your own class like dog you could create a map of strings to dogs so here in our case we want to create a map of employee names to their id numbers that's the keys and the values in our case the keys are going to be the employee names and the values are going to be the employee numbers the employee ids so it makes sense for the names to be a string and the employee id to be an integer so here's how we specify that in angle brackets here right after this hash map we put in string comma integer this tells java that this is going to be a map of strings to integers the keys of our map are going to be strings and the values are going to be integers also to get rid of this little warning here on new hash map we have to add what's called a diamond operator and that's just less than greater than that might seem kind of weird but it comes from um in old versions of java you had to respecify the types of the keys and values of your map here so you had to put in string and integer again but later on i think it was in java seven they changed it so you could just take that out and java would just infer that obviously you just mean the same type of hash map that you declared up here so now all you have to do is put in this little diamond operator and you're good to go you don't have to repeat yourself so this is declaring an employee ids hash map there's nothing in it yet but we're telling java we want a map of strings to integers so we're going to map employee names to their ids so this map will hold that information for us and allow us to do that look up so you might be one so you might be wondering why do we have hash map here why can't we just say um map string integer and new map why do we have to say it's a hash map well in java this map is actually what's called an interface the map interface just specifies what kind of methods a real map implementation have to support and there are different types of implementations of that map interface and a hashmap is just one of those implementations it's probably the most common map implementation that you see used by programmers the way you interact with them is going to be the same it's just how it works underneath that's a little bit different but for our example we're just going to use hashmap alright so now i have this employee ids map how do i actually add a new mapping to it so let's say i'm an employee of this company my name is john and my employee id is one two three four five to add that value to my map i would just say mpids.put and you can see here i just need to specify the string key and the integer value so the key will be the employee name in this case john and the value is the employee id itself which is an integer one two three four five so now my map knows that for the key john it has the value one two three four five and of course you can add more so we can say amp ids.put carl uh his employee id will be 54321 and amp ids.put jerry and this can be 8675309 just so we can get a quick visual of what this map looks like let's go ahead and print it out system.out.printline amp ids save that and run it and it prints out what our map looks like in a very clear way see carl has an id of 54321 john has one two three four five and jerry has 8675309 it's a mapping of keys to values employee names to their employee ids one thing you'll probably notice is that these are in a different order than we added them in i added john before carl but this has carl before john one of the things about maps is that it doesn't guarantee a certain order it's there to store these key value pairs and that's what you care about you don't necessarily care about the ordering you just want to know that the name is properly linked up paired with that id properly all right so we can print out the whole thing but how do we get one specific value so i put in all these employee ids how do i say get carl's employee id from my map to do that i can just say amp ids.get and you can see you pass in the key so if i want to get carl's id i just do empids.get carl we can just print that out so we make sure we're getting the right value there systemoutprintlineampids.getcarl save it and run it and we can see we got carl's id successfully so this is what a map allows you to do you can store key value pairs this key corresponds with this value and later on you can look them up oh what value corresponded with this key in this case what's carl's employee id and we can look it up easily like this and this is really the basics of using a map you can put values in there in key value pairs and later on you can look up a key and see which value it corresponds to in your mapping but put and git aren't the only two methods that are supported by this hash map what else can we do well one thing we can do is just check to see if a certain key exists in our map so if we wanted to see if jerry had an employee id in this table we could just do empids dot contains key and pass in jerry and it says true because jerry does exist in the map but if we put in george we get false because george was never added to our map another cool thing you can do is see if your map contains a certain value so if i want to see if i have the employee id 6 in my map i can just do empids dot contains value and pass in the number six the number six doesn't exist anywhere in our mapping yet so we get false but if i put 8675309 you see that i get true because it does exist in our set of values in our map it's also good to know that if you do amp ids.put and you put the exact same key that you had before let's say i put in john again but instead of one two three four five i put in 98765. what that will do if john already exists it will override that current value and update it with the new value so let's copy paste printing out our employee ids map after that and at the beginning you can see that the key john had the value one two three four five and at the end it was updated to be 98765 to put replaced that value so put will add a key value pair and it will update a certain key's value if that key already exists in your map there's another similar method here and it is called replace so there's a subtle difference between replace and put so if i say replace the value for the key john with uh 777 print out our mapping again we can see that it successfully replaced the value at john with 777. however if i instead say uh replace kramer with 777 well kramer doesn't exist anywhere in our map yet so what do you think it's going to do let's run it and see well it actually looks like it didn't change the mapping at all and that's because this replace acts a little bit differently than the put when you run replace and this key doesn't exist in your map yet it won't do anything it'll only replace the current value if it does exist whereas put if it doesn't exist will go ahead and add it to your math so you just need to know that so you know which one works best for your particular use case so similarly there is actually a method called put if absent and you can maybe kind of take a guess at what that does that will only add the key value pair that you specify if that key doesn't already exist somewhere in your map so for example if i said put if absent john 222 print out the map again we see that john still has the value 98765 it doesn't have the value 222 because put if absent only does the update of that key value pair if it's not already currently in the map so if instead of john i said steve run that we see that since steve wasn't in the map already it does get added when we use put if absent now what if you want to remove a key value pair from your map it's pretty straightforward you could just do amp ids dot remove and pass in the key of what you want to remove let's say we want to go ahead and remove that steve entry that we just put right here print out our map again run it we can see that the steve value that was added here has now been removed another important thing to note is that these two types that we're using here for the key type and the value type in our hash map those have to be java classes they can't be primitive types so things like lowercase int or lowercase long or float or double those won't work here and you get kind of a strange looking error if you try it says insert dimensions to complete reference type that's a pretty vague weird error and it can be hard to understand what that means the first time you run into that but to get around it you just need to use the full java wrapper classes for those so for lowercase int use capital i integer for lowercase flow use uppercase float etc and everything will still work exactly how you want so i understand that maps can certainly be confusing the first time you're kind of getting introduced to them and there's all these different methods and stuff that we went over that you can use but the really important thing to remember is that a map is just a collection of key value pairs it's like a lookup table in this case we have employee names to their ids you could have golf players to their golf scores you could have like your pets as the keys and their birthdays is the values anything where you need to create like a relationship like that that's where you're going to want to use map it's a really useful tool and definitely one you're going to want to be familiar with and comfortable with if you're going to be learning and using java or any other programming language if you liked this video or learned something please let me know by leaving a like and hit the subscribe button so you don't miss each week's new video thanks for watching and i'll see you next time