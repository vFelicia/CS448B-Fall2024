in this video we're going to talk all about the final keyword in java we'll go into detail about each of the three ways you can use final if you're new here my name is john and i do a new java tutorial video every single week so if you like this video be sure to leave a like and consider subscribing so you don't miss the new video every week i also have a full java course available in a link down in the description if you're interested let's get to it okay so we're going to talk about the three ways you can use the final keyword in java final classes final methods and final variables let's start with final classes what is a final class let's talk about it using an example so here i've got an animal class and i also have this other class called dog that extends animal it's a subclass a child class of the animal class this is an example of inheritance one of the basic concepts of objectoriented programming since this dog extends the animal class it's a subclass of animal it gets all of the properties and functionality of that animal class and then it can just build more things on top of it but here's where final comes in for classes so where you'll see final for a final class is right here at the top in the class declaration itself so right now i've got public class animal if you have a final class you'll see public final class animal so what happens when you make a class final what it does is prevents other class from being a subclass of this one nothing can extend from it or be a child class of it so now you can see if we hop over to our dog class that extends animal now you can see that eclipse is giving us this error and it says the type dog cannot subclass the final class animal so for classes you want to use this final keyword whenever you want your class to not be extended for whatever reason in practice when i've used final classes in my job it's usually because it just doesn't make any sense for the class to be extended for example if i have a class that just has a whole bunch of values and constants that are used by other classes but usually if you are making something like an animal class it's pretty obvious that you want it to be able to be subclassed and extended and have all different other types of animals that do different things so the majority of time for your basic classes unless you have a good reason to make it final it's probably best to just keep the final keyword off so that you or another programmer can go in and extend this class and have whatever other kind of functionality you need in a subclass number two the second use of final is to make final methods that might seem kind of weird when do you need to make a method final so here we have our animal class that has a couple of fields name and color and getters and setters for those fields but also has this method public void eat and all it does is just print out much munch much now remember my dog class extends that animal class and if you notice we don't implement an eat method here in this class however if i create a dog object i can still call the eat method on that dog even though the eat method doesn't actually exist directly in my dog class i can call it because it exists in the animal class that the dog extends the dog class gets that eat functionality for free because it extends animal and we can show that here in our main method we can create a dog my dog equals new dog and we can call my dog dot eat you can see that that method is available for us to call and if we save and run our code we see that it prints out munch munch munch but back over here in the dog class even though i don't have to implement my own version of the eat method if i don't want to i can get that functionality from the parent animal class i can if i want to override that parent class eat method and implement my own eat method with my own implementation specifically for the dog so here i can write public void eat and instead have it print out a nom nom so now if i save that and go back to my main method and run my program again when my dog eats now instead of going munch munch munch it says nam nom nom but here is where the final keyword for a method comes in if i go back to my animal class and change this eat method to public final void eat that makes it so all subclasses of the animal class like dog can no longer override this eat method with their own implementation so if i save this change and then hop back over to my dog class i can see that now i get an error that says cannot override the final method from animal so you might use this when you have some sort of method in your parent class and you want the functionality of that method to be exactly the same for all children of that class you don't want it to be able to be overridden with their own implementation so sometimes that can make sense if you have some certain method in your parent class that just has to do some certain thing in a very very specific way and you don't want all the child classes to go and mess things up with their own implementation you can use the final keyword in that method in your parent class to prevent the child classes from overriding it so we've talked about final classes final methods now let's talk about the third use of final final variables what is a final variable all a final variable is is a variable that you can only assign one time that's it let's use our mydog object here as an example so instead of just saying dogmydog you can say final dog my dog so what does that mean it means it can only be assigned one time so here we're already initializing this my dog object with new dog so if you didn't have this final keyword you could down here if you wanted to you can go ahead and say my dog equals new dog again and it would create this brand new dog object and assign it to my dog but if we make this my dog final then you can see we get an error down here the final local variable my mydog cannot be assigned because we're already assigning it once up here we can't assign it a second time down here so a final variable after it is assigned one time it can never be assigned again after that so in the example we have here we are initializing this variable on the same line we're declaring it but you don't necessarily have to do that even for a final variable you can get rid of that initialization here and instead move it down here my dog equals new dog and this is totally fine that you're instantiating this my dog on a separate line but now that it has been assigned one time it can never be assigned again after that so why might you use something like this there are many uses for final variables probably the main one that i see and use every single day in my job as a lead java engineer is to create constants let's say for example i need the value of pi for my program i need to know what pi is so i can do a whole bunch of math with it so what i might do is just create a double variable double pi double pi sounds pretty good and say that equals 3.14159 and this is you know all fine i could take this pi variable and i could do whatever kind of math i need to do with pi and it would all work but of course the problem is that you in the future or some other programmer can come in here and just set pi to something else pi equals nine and that could just destroy the functionality of your entire program in order to avoid that we can do what we just learned we can make this a final double pi and now we see we get an error here we can't assign it twice so that solves that problem now this value of pi we know is guaranteed to never change but what if i want to use this value of pi not just here in my code but i want to use it in all kinds of places i don't just want to use it in one class now the main way that is done is to create a constant the normal format for a constant is it goes uh kind of right here in your file below the class declaration and it has to be outside of any method so it's usually right about here you'll say public static final and then whatever your normal variable declaration is double pi equals 3.14159 so now i no longer have to go and declare or instantiate this pi variable down here i can just use this pi constant down here to do whatever i need so if i wanted i could do system.out line pi times three i can run that and get nine point four two four seven blah blah blah i can even use it outside of this class itself for example i can hop over to my dog class and um if i want to use in the eat method i wanna use the value for pi i can go and access this public constant to use in my other classes so if i wanted to include printing out pi here in this eat method i could just say plus final example dot pi so even though this pi constant is in a complete other class i can access and use it here safely knowing that it can never be modified and messed up and when we run our program we can now see that we're printing out the value of pi along with that eat method another thing to note here though is that for constants whenever you have a public static final whatever variable here in your class the convention for naming them is a little bit different instead of having normal like camel case like we did here for my dog where you start with a lower case and then for the first letter of every word after that it's uppercase that's called camelcase that's what you normally use for java variables for constants the convention is different we actually use all caps and here we only have one word because it's just pi but if you happen to have multiple words you separate them with underscores like this pie more words so that's important to know that's the convention in java for constant names as a side note you may already know that a constant for pi is already available in a builtin java class and you can access it by just calling math.pi and as you can see it is named in uppercase because that is the java convention for constants and also if you happen to want to have a constant like pi here in your code but you don't want it to be able to be accessed in other classes you only want it accessible in the class you declared it all you have to do is instead make this private instead of public so now that this is private we can go over to our dog class and see where we're trying to use this pie constant it says it's not visible because it's private it's only visible to that class and not visible to this dog class let's go ahead and change this back to public so for variables you'll probably see the final keyword used most often to create constants like this at the top of uh class files but it is also good to remember that you can just use it in the middle of other code too if you enjoyed this video or learned something please let me know by leaving a like and you might be interested in some of the other java videos i put up and consider subscribing too so you don't miss each week's video and it also really helps get these videos out to help more people so i really do appreciate it thanks a lot for watching i'll see you next time