if you've been coding in java for any length of time you've definitely run into the dreaded null pointer exception it's one of the most common exceptions and probably the biggest source of bugs in all of java in this video we'll talk about what exactly causes a null pointer exception how to fix it when you encounter one and strategies for avoiding them in the first place my name is john and i'm a lead java software engineer i also have a full java course available in a link down in the description so go check it out first what exactly causes a null pointer exception let's talk about it with an example let's say you're coding along and at some point you decide you need a new cat object so you go ahead and create cat my cat equals new cat and let's say you want to make that cat make noise so you go ahead and call it's make noise method with my cat dot make noise and we can see that in that method it just prints out meow so of course if we go back here and run our program that's exactly what it does it just prints out meow but what if instead of instantiating this my cat variable to a new cat we instead set it to null let's go ahead and run it and see what happens and oh no we get the dreaded null pointer exception now why exactly is that sure we can see that we're setting our mycat variable to null but what exactly does null mean and why does our code now result in a null pointer exception to visualize it so what we have in our code is a mycat variable right that my cat variable isn't a cat object itself but instead it's a reference to a cat object in memory so when we instantiate our mycat variable to a new cat that means this my cat variable is now a reference to an actual cat object in memory so after that when we call my cat dot make noise it has no problem doing that at all our my cat variable references an actual cat object in memory and so we're able to tell this cat object to make noise with no problem but what happens if instead we set it to null well instead of my cat pointing to an actual cat object in memory it's instead null which essentially means it's pointing at nothing not even like some empty box with no cat in it it's pointing to nothing at all this is a null pointer so when we call the make noise method on our my cat variable that has been set to null there's no cat to make noise we have a mycat variable but it's not pointing to any actual cat object there's nothing to meow all we have is a null pointer and so we get a null pointer exception in our code most of the time when we get a null pointer exception this is the reason we have some variable that's been set to null and we try to call some method on it more generally speaking just having some variable set to null won't give you a null pointer exception but you will get a null pointer exception if you try to do pretty much anything with a null variable for example if you try to get or set a field on that object like my cat dot age equals three we get a null pointer exception for essentially the same reason there is no actual cat object so we can't set its age to three there are other things that can give you a null pointer exception that you might not expect for example what if we had a boolean just called should print hello and right now let's just initialize it to true then we can have some if statement so if should print hello then we will print out hello so obviously if we run that it will print out hello but what will happen if instead of setting this to true or false we initialize it to null well as you may have guessed we get a null pointer exception if you're using a capital b boolean variable this is the wrapper class for jabba's lowercase b primitive boolean a primitive boolean like all java primitives can't be set to null as we can see by the error we're getting here but a capital b boolean the wrapper class can be set to null and if you do have a capital b boolean that is set to null and you try to evaluate it in an if statement it'll give you a null pointer exception best practice in this situation is to always use the java primitive boolean whenever possible a primitive boolean will never be null it'll always be true or false another way you might get an old pointer exception that you may not expect is let's say you have a collection like a list of strings called like favorite cheeseburgers and let's say you wanted to use a for each loop to loop through those cheeseburgers and just print them all out so four string burger in favorite cheeseburgers we're just going to print out that burger what happens is if this favorite cheeseburgers list has been set to null you get an old pointer exception so best practice in these sorts of situations is even if you have nothing to put in that list instead of initializing it to null you should just set it to be some empty list so like new arraylist so when you run this program with an empty list instead of a null list which are two very different things you don't get any null pointer exception so all of that is of course good to know right but what if you're running into a null pointer exception in your code right now how should you go about fixing it well the great news is with recent versions of java starting with java 14 when you get a null pointer exception the error message that it prints out is enormously helpful so if we go ahead and run this our original code if we take a closer look at this null pointer exception when it's thrown it says cannot invoke cat dot make noise because my cat is null and it gives an exact line number in our class in line 9. with earlier versions of java all it would tell you is the line number so you would basically just see this part you'd see that there's a null pointer exception and you could see which line it was on but it wouldn't say anything about which method it was trying to call or which variable was null that caused the problem now that might be enough in a simple case like this right where on line nine there's only one thing that can be null that can cause this problem it would have to be when this my cat object is null and it tries to call the make noise method on it but there are plenty of other times when just the line number wasn't enough to know exactly what was going wrong for example what if in our code we had something like this if we got an error and all it said was there was a null pointer exception on line 36 we have no idea what's actually causing the problem it could be that this cat's variable is null and it gets a null pointer exception when it tries to call the get method on it or it could be that this zeroth element in the cats list is null and it gets a null pointer exception when it tries to call the get name method on it or it could be that neither of these are null but instead the name of that first cat in that list is null and you get a null pointer exception when you try to call the dot length method on it but now with our nice modern error messages we can scroll over here and see okay cannot invoke string.length because the return value of cat.getname is null so once you know what exactly is causing your nullpointerexception how do you go about fixing it you basically have two options the first option is you can identify the exact variable that's null that is causing you problems and initialize it with some value if the variable causing your null pointer exception should never be null this is what you'll need to do so here i can look at the code that was calling this method and see that okay i'm creating this new cat object and i'm adding it to my list but i never gave it a name and that's why down here when it's trying to get the name of that cat object and then getting its length it's causing a null pointer exception so just back up here where i'm creating my cat object i just need to set the name on this my other cat so just my other cat dot set name to jerry so now when we run the program there are no no pointer exceptions and it's correctly printing out the length of the name that we gave our cat and jerry has five characters so it's printing out five but what do you do if you don't have any control over whether the variable that you're working with is null or not or maybe the variable being null is just a valid situation that you have to deal with the simplest way to fix it in that situation is to just add a piece of code that checks to see if that variable is null and only performs the operation on that variable if it's not null this is commonly referred to just as a null check so from our first example we know that if this mycat variable is null if we try to call the make noise method on it we're going to get a null pointer exception so what we can do is add just a simple null check so we can say if my cat is not equal to null then we can call the make noise method on it you'll see this kind of coding pattern all over for the rest of your java coding career it might seem overly simplistic but there's really no need to complicate things if a simple piece of code like this will do the trick now if you have a long chain of method calls like this one and any one of these values might be null you might need multiple null checks which can get a little bit nasty looking so to make sure we can call this.length method at the end first we need to make sure that this getname method won't return null but to make sure that we can even call this getname method we have to make sure that this get method won't return null and to make sure that that won't cause a null point or exception we first need to make sure that cats is not null so that means that we have to have a pretty large series of null checks so we can say if cats is not equal to null and cats.get zero is not equal to null and cats.get zero dot get name is not equal to null then we know that we can successfully return this value as the length of that name otherwise maybe we'll just return zero so this can definitely get kind of ugly but sometimes you don't really have a good way around it and the only way you can make sure that you won't get a null pointer exception is just having a large series of null checks so now we know how we can fix null pointer exceptions when we get them but what are some strategies for avoiding them in the first place so in situations where you have just a local variable like this where you're declaring it and instantiating it right in the same method that you're using it you have complete and full control in general just try to avoid initializing variables like that to null it's almost always best to just initialize it properly right there when you declare it there are some very specific situations where you might have to initialize a variable to null just take very good care to make sure that it is always getting initialized to some actual object somewhere down the line before you use it also try to avoid returning null as the return value in methods that you write if at all possible for example if you have some method that returns like a collection right so this method here git cats returns some list of cats so what if at the end of this method ah you don't have any cats that you want to return you might think well it's a good idea to just return null well that's okay but then in whatever piece of code that's calling this method it has to deal with the possibility of the result of this method being null what you can do instead is just return an empty collection so here we're using a list so instead of returning null we can just return a new arraylist as we saw earlier an empty list won't give you any null pointer exceptions when you try to loop through it but a null list will another small tip often you'll find yourself having to do some string comparisons where you need to take some string that you have and compare it to some constant value or some string literal for example let's say we just wanted to take the name of this my other cat object and we wanted to see if it was equal to some string literal which is just a string that you write out literally in quotes in the code like this so if we wanted to see if this name was equal to newman so we could write something like this so we can say if my other cat.getname then we print out hello newman so this code will work fine right but what will happen if instead of setting the name to jerry we have it set to null well if we try and run that we're going to get a null pointer exception and we can see that it says we can't invoke string dot equals because the return value of cat.getname is null so what's happening here is get myothercat.getname is returning null because that cat's name has been set to null so when we try to call the dot equals method on that null name we get a null pointer exception so what you can do instead to eliminate the possibility of a null pointer exception in this scenario is just flip this comparison around so instead of saying my other cat dot get name dot equals newman we can say newman as a string literal in quotes dot equals and pass in my other cat dot get name so now when we run our code just by flipping around that comparison we no longer get a null pointer exception this string literal newman is of course not null we can see the string value right there so there's no chance of a null pointer exception when we call dot equals on it and if this my other cat dot get name does return null here it doesn't cause any problems this equals method just compares newman to null and sees that they're not equal so this equals method just ends up returning false and everything just works as it should with no exceptions sometimes though you just don't have complete control over the code that you're having to deal with in those cases it's best to just do a simple null check before doing anything with that variable if you enjoyed this video or learned something please let me know by leaving a like and be sure to subscribe so you don't miss each new java tutorial and be sure to check out the full java course in the link down in the description thank you so much for watching i really do appreciate you being here with me i'll see you next time