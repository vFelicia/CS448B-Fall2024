hey everybody how's it going john here today in this video we're going to write a hangman game in java and what's more we're going to have a two player version and even a single player version single player hang man how are you going to make that work i will show you and we're going to code it beginning to end the entire thing from scratch right here now before we get started the full source of this hangman game is available in a link down below in the description so go get it all right so first i think we're going to do the hard version of this with one player so you're thinking how are we going to do that how are we going to write a hangman game for just one player you need somebody to give you a word right well we're going to do that with a big huge file full of english words again down the link down in the description it's not my file but go grab it and use it it's awesome so how we're going to make that work is we're just going to find a random word inside that huge file full of words there's like hundreds of thousands of words in that file first things first let's do the file input and we'll just grab all of the words in that file and put it in a big giant list in our program so that we can use it all right so to do that um you might have done a keyboard input with the scanner class well you can also do pretty simple file input with the scanner class and so let's do that so we're going to use a new we're going to create a scanner we'll call it scanner equals new scanner now instead of you doing uh like system.n to get keyboard input like we normally would a keyboard input we're instead going to do a new file to get this with file input and the parameter that it takes that this constructor for new file takes is just the location of the file on our computer so you can just put in the full path just realizing you might not be able to see that all with my wonderful beautiful face in the corner so i moved it down yeah you just paste in the entire path and file name of the dictionary file so now we're going to organize imports because we're using sweet eclipse and it does this all for us and we do the import of java io file for the file class and java util scanner for the scanner class now you can see it's complaining to us because it's forcing us to handle this like file not found exception um so we can just declare that we throw it that we throw a file not found exception we don't care if we can't find the file there's nothing the program can do anyway we can't like handle it in any good way it could just blow up so that's how we'll handle that so now we need to prove that we can actually read the words from the file so let's go ahead and do that here and so we'll do that here by just doing a while scanner.hasnext that's just like while there is another line to still get we want to do a sys out and we're going to print out um just what that next line is scanner.nextline so this is just going to loop the whole file and print out the line uh each time just print out each line of the file uh there it goes you can see there's some freaking weird words in this file so once we get this game working we're going to have a tough time ahead of us but that's for later and also as a side note if you want to make your own dictionary of words and you know exclude all these wacko words that you don't even know what they are that's fine too just make your own word file separate amount by line and this exact same program will work so anyway we've proved that we can loop through the file and just grab each line of it that's pretty cool right we've already done file input we're only a couple lines into this program so now instead of just um printing all these out to align let's actually put it into a list that we can can mess with and do stuff with so we're just gonna say list of we're gonna have a list of strings and we're gonna call it words and equals new array list this little diamond operator just says uh i want to use string 2. you could put string in here also but after java 7 or 8 one of those it's not necessary anymore you don't need it equals new arraylist so we're just declaring a new arraylist and we want java util list we're organized imports so so we've got a new empty list of strings and what we want to do is loop through every line in this file and just add that string to the list so we're going to have a big giant list of 100 000 or hundreds of thousands of words instead of printing them out and that just allows us to like work with them in the program more than having to deal with the file so instead of printing it out we're going to do a words dot add scanner dot next line so we're just going to add that word to our list okay so now what we want to do so now in the program we've got our list of words in uh a list called words so what we want the the program to do next for the single player version uh is just to pick a random word out of that giant list that the player has to guess so first in order to do that we're going to need like a randomizer so in java that is done with the random class not just any class the random class not some random class the random class so we're going to call it random rand equals new random whoops all right and then we'll go ahead and organize imports again and we can see we get java util random we're starting to build a nice little list of imports and now we can use this rand but we're going to get our word kind of in one line here let's see if we can do it i think we can do it so what we're going to do is make a new string called word and this is going to be the word that we pick out of that big giant list we might change the name later but word is fine for now string word equals words dot get and this you get an individual index of the list so if you get the zero thing that's the very first word in our list we don't want just the first one we want some random element in that big giant list in order to get that we will say rand dot next int whoops next int and it takes as a parameter just the like the upper bound and so what that means is basically if we put in a hundred this is going to give us a random number between zero and uh this number minus one so in this case zero and ninety nine but we don't we don't just have 99 numbers we have a huge list of numbers we don't even know how long it is but we don't need to we can just say um words dot uh size so so this is kind of a lot of little nested method calls but what it does is say hey i want to pick one word from our list of words and the the index of that word that i want i want it to be a random number between zero and the length of my list of words the size of that list so if we had 100 words in our list this would give us a random number between 0 and 100 and would get us that word from that list so for right now let's just go ahead and print out this word to the console to make sure it's working right every time we run it it gives us some random word from our list so let's just do a sis out and print out word and run it culminating that's a great word i like that word let's keep running it fidded kukeri xylose obsoleted correctorship under laborer i am learning new words just by running this program where i've definitely heard of that word so i think there's a pretty sweet dictionary full of words so the r code is definitely working to pick a random word in our big giant list awesome so now the core of our one player game is ready now we just need to write all the hard part of the whole hangman game so now our computer can come up with a random word that we the the player need to guess and now we need to create the whole hangman game around it so for some reason you've never played a hangman game before um typically you play it with one other person and they come up with some word or phrase in their head and here we're just using words they come up with some word and um like i say it's a six letter word instead of writing the word they write six dashes you just guess whether a letter appears in that word kind of like wheel of fortune so if i say hmm s well if there is an s he writes everywhere that there is an s he replaces that dash with an s and if an s doesn't appear in that word or phrase you actually start drawing out a hanged man like you start drawing his head and then his arms and his body and his legs and once the full hangman is is drawn out then you lose so it's kind of super morbid but hey that's the way we play kids games right you just draw out dead guys anyway so now in our program we want to print out our word as hyphens right because that's how hangman works we don't just print out hey here's the word guess it no we start out with hyphens and then have the player start to guess letters so let's go ahead and see how we're going to print out our word uh with hyphens so here's how i think it can work right so the core problem that we're trying to solve as programmers here is being able to print out the the length of the word just in dashes but if the player has guessed one of those letters we shouldn't have a dash there anymore we should just have the letter itself so but what i think we can do is keep a list of the letters of the characters that the player has guessed right and then iterate through each letter in our actual word and if it's in the list that the player has guessed we just saw the letter and if not we show a dash so i think that seems pretty simple and straightforward right let's go ahead and create that list we're going to have a list of um character we can't just do char because java doesn't let us do collections of primitive types so we have to do a list of character instead of list of char we're going to call it player guesses uh sounds good enough it's a list of guesses that the player has made equals new array list okay so now we've got our list of characters so now let's go ahead and write the piece of code that's going to look at the word that the player is supposed to be guessing and put dashes in there except uh where the player has already guessed that letter so let's just go ahead and do that with a for loop so we're going to create a new for loop or um we'll just start of course int i equals 0 as every good for loop starts and then i less than we're going to do word dot length we're going to go from the beginning to the end of of the word of course i plus plus as our iterator so what we want to do is if the player has guessed the letter we want to print it and if they haven't guessed the letter yet we want to print a dash so let's just have a simple if statement we're going to check if player guesses dot contains word dot char at index i so basically that is saying if the player has guessed the character at the location i'm currently working at so if that's the case we want to do system dot out dot print not print line because printing a line uh we'll we'll do a new line and we'll end up writing individual letters on each uh you know one per line we don't want to do that we want to just print with the letters one after another so this is just printing a single character and not going down to the next line so then we want to print the actual character otherwise so else we want to print a dash to show that they haven't guessed that character yet so that's as simple as just printing a dash and so now that should go through every letter in the word if they've guessed it it should print it if they haven't it prints a dash and then at the end of this we want to actually we want to actually print out a new line just so that it goes to the next line so now let's go ahead and test this code and see whether it just gives us dashes so this is our word is interchased and right now since we haven't made any guesses we show all dashes and that is correct so now let's work on the code to take the user input of letters and make guesses and actually add letters to that uh player guesses array but first since we're going to need to do this a lot we're going to need the print of the current state of the game kind of a lot let's go ahead and move this to a new method and we we can do that with alt shift m in eclipse here and we just have to pass in the word and the player guess so we're going to need to print we're going to so let's call so let's call it like print word state the current state of the word i guess ah it doesn't really matter now all the logic is nicely contained in this method and whenever we want to print to the current state of the the word of the game we can do that so of course we at some point we also want to get rid of this cheating of printing out the real word but for now while we're programming the game let's keep it in there to make sure our program's working nicely now we need to start the loop of getting the input from the user and adding to that list so to do that let's just print out a quick just a message to the user that says please enter a letter and then actually we're going to need another scanner to do a keyboard input because this one's only for file input so let's just say a scanner we'll call this one keyboard equals new scanner and we are going to need system dot in and we don't want to use this file okay so now we've got a keyboard scanner so now we want to make a new string letter guess equals equals keyboard equals keyboard dot next line so this gets the next string input from the user so now we need to take what they guessed and add it to our list of characters player guesses now you could have like a jerk user who types in like 18 characters and what you just asked them to enter here what we could do is have like a loop if they enter more than one character we say oh no come on enter just one character you jerk but what we're just going to do here is we're just going to take the first character of whatever they put in and it's their problem if they're being a jerk and trying to cheat and so to do that is easy we're just going to take player guesses our list of guesses that the player has made and we're going to add um a new character to that list and the character we're going to add is letter guess uh dot char at zero that's going to get the zeroth character that they put in the very first character whatever it is and add it to the list so now that that guess has been added to the list let's go ahead and print uh the game state again so what it should do is wherever that letter appears now on the real word it should replace that with a real letter so let's uh run that and see if it works i'm excited to see okay so now we have the word twal i have no idea what that is but it says please enter a letter that's right let's say we enter a w and it's working awesome that is so sweet it's working right so it's replacing the letter that we entered with the actual letter instead of just the dash and it's only replacing that letter and not others so now the chord the hangmanness of the game is is working great so let's so now let's uh loopify this we can keep putting in guesses and until we fill out the word right well it's first like we did uh last time let's take um all of this code and put it in a method of its own and let's just call it like get player guess it's going to take the word that the player has to guess and it's going to take the current list of player guesses it needs all that information so it's automatically created our method for us where it does all that and we don't have to worry about it now let's just just to test our program a little bit more let's just do this all in a while true loop so this is just going to go on forever until we kill it and eventually we will but it's just so we can we know that we can add guesses and have it uh fill out the word for us otoscopy so let's say we put in an o right it should put that o in the three places where there's an o and it does that is sweet so now let's try um the y and it fills that out too and a p awesome this is pretty cool s c and then last well i guess let's try a letter that doesn't have anything to do with it like um r not in there anywhere it doesn't change anything it doesn't tell us it's wrong but it's just not in there so that's working i could write q nothing happens i write a t and we've got the whole word now that's pretty cool how that works right pretty neat so let's say what we want to do now is we want to exit the game once the player has correctly guessed all the letters right that's going to be one of the conditions where the game is over they just guessed all the letters and the game is over they clearly have the word because they guessed all the letters so this is maybe a weird way to do it but here's one way i think we can do it so let's say we're going like we're in this print word state method where we're printing out you know the current state of the player's guesses in relation to the word so what we can do is actually keep a like an int correct count started at zero and what we can do is every time uh when we're going through the word that the the player has already guessed that word we can uh increment correct count and say so correct count plus plus and then at the end of this method we can return whether the player has already guessed all the the characters we can return that as a boolean and we'll know that the player has correctly guessed all the characters if this correct count matches the word length of course first we have to change this from void to boolean because now we'll be returning a boolean value instead of returning nothing and what we'll be returning is the value of word dot length equals correct count okay so now this will be returning true if the player has already guessed all the letters in that word and let's also move this print word state out of this get player guess method because we don't need to always print it when we're getting the player guess we instead want to do that kind of right afterwards that way we can say if print word state so this will return true if uh basically if the player has one and so if the player has won then we want to break so if this method has returned uh true that the player has guessed all the letters then it will break out of this while loop and uh complete the game we can print out a statement that just says uh so sis out you win and this will all this will all change and evolve but for now that's what we're going to do unsloping these are some words all right so u n s oh it did fill out both ends that's good l o p i and g so now it should end the game when i put this in and does awesome so that is working so now but another thing we want uh to allow the player to do is so after they they put in their guess and we we print to the current state of the game uh and of course if they have already won if they guessed everything then we say you won but if not they get a chance to guess the word and if they guess the word correctly then the game is over too and they win so we're going to do is print out another statement sis out please enter your your guess or the word okay and then we're going to accept their guess for the words with keyboard dot next line as usual and we'll just say so if keyboard.nextline dot equals the word so if they guess the right word we will break so right now when the player guesses the correct word it matches then we will break out of here and it'll print you win but what we might want to do is move this u win down to inside these if statements the reason for that is later on we might want to break out of this loop because the player lost we haven't coded that yet but um right now if we left that in every time it broke out even if the player lost it would say you win and that doesn't make any sense so now we have the opportunity to guess the word so brassert brasshart art made from brass so let's type in s is our guess okay so now it says please enter your guess for the word now if i put in something like stupid um it's not right so actually let's print out a quick message that says that's not right so just else cis out nope try again and then it'll it'll keep going so let's go ahead and run that again a psychiatric i don't even care i don't even want to try and pronounce it so let's guess p okay it's in there now please enter your guess for the word blah blah blah blah blah some garbage and it says nope try again enter a letter so quickly another thing i notice that we're missing is we need to print the word state again each time in this loop so let's just go ahead and move this down to here so each time in the loop we'll print the current state get their guess and allow them to guess all right let's do that again coleman gary coleman um m please enter your guess for the word garbage and then it says nope try again and prints out the state of the game again so i think that is helpful i like that enter your guess let's say it's uh e okay so now we have this so let's say if i put in so now what happens if i put in the right word it should end the game coleman and it does you got it okay so now we have all the winning conditions in the game so now for the fun part i think the losing conditions and this is where we're going to have all the fun of printing out the hanged man picture okay so so this is what i've come up with for um what we're going to print out like in text for the hang demand guy right so what we're going to start with is essentially like a line of dashes and these two uh pipes and as the player guesses incorrectly we'll fill out this little this o at the top and then the arm and then the other arm and then the body and then the leg and then the other leg and once this is all printed out that means the player is lost what this equates to is one two three four five six total bad guesses once the player enters six total bad guesses then the game is over some of the fun we're going to have coming up here is printing out um this picture so first i guess for now let's just put this at the beginning of our while loop it could very well move but i think it works fine here for right now so let's just write our code here and then we'll move it out to another method so let's just uh first print out the the top part the the whole thing the guy hangs from so what we're going to do is just cis out and so let's see this is actually what we're going to print out all right so we'll print out this part here in quotes and this part here again we'll need the space in the beginning to uh account for the space uh for the guy's arms later okay so we're always going to print out that we're only going to print out the rest of these as the player guesses wrong values so uh let's also put in a ant um wrong count so we can keep track of how many times the player has been wrong and we're going to start it at zero so if a wrong count is um greater than or equal to one then we want to print out this next line here right let's just paste that in there and this is our next line bam reprint the guy's head then after that if the wrong count is greater than or equal to 2 then we also want to print the guy's left arm but then notice that we also have to print uh the other arm if it is three so we don't really necessarily want to do a print line here because that will always skip to the next line and the guy's arm will be all it'll all be in the wrong spot so actually what we want to do is if it's greater than or equal to two we'll just do a system dot out dot print uh the left arm there or the right arm however your perspective works there so we'll print oh yeah we need to actually escape it so that we can get one slash there because that's the escape character so we need to put in two slashes to get one and then we'll also put the space and then in still inside that if we have to say if the wrong count is greater than or equal to three then we do a print line of the other arm so we can put in that arm and finish the line otherwise if it's not greater than or equal to three meaning it's exactly two we need to just do a print line just to finish off the just to do a next line okay so now we've accounted for two and three four is a little easier because there's only one thing on that line so we'll just say after that if the wrong count is greater than or equal to four then we want to print out what is that like space and then a bar a pipe and then five and six are going to be similar to two and three except we got legs instead of arms let's kind of break this let's add some spaces in here to keep this a little bit less confusing this is already pretty confusing but hopefully it's not too bad so if the wrong count is greater than or equal to five then we need to do uh the left leg here with a space afterwards we're just printing that but then if it's greater than or equal to six we want to do uh the other the other leg otherwise it's just five and we want to do a next line all right so now let's get our get rid of our helpful little guy here okay so how we're going to increment this wrong count is i think after so when we're getting the player guess we can have this method also return a boolean um that indicates whether this word um contains the letter that the player guessed right so we're going to say return uh just word dot contains letter guess so that's easy so then out here when we're getting the player guess we can say if not get player guess so we're still getting the guess and doing everything there but if it wasn't contained in the word then we can do wrong count plus plus what we can't do is pass wrongcount as a parameter into the method and make the method increment it that doesn't work because of how java handles passing values into methods it just doesn't work so we have to do it a different way so now let's run our program and see if it prints our hanged man in chastity um so let's just pick uh letter x is not in there so no it didn't that was an incorrect guess and it you have to enter your guess for the word this is wrong nope try again but it printed out our little head that is pretty cool all right now um let's enter another letter just make sure this works t so that worked and i can type in a garbage word but i wasn't an incorrect guess so it still just prints the head let's print out another letter p please enter your guess for the word blah blah blah nothing but we have a left arm so i'm going to keep doing this until i filled out the whole guy just to make sure it works so yeah and so we've put in six uh wrong guesses and it's filled out the whole hanged man so we should lose the game here so we have to still do that first before we get ahead of ourselves let's move all of this complex stuff out to another method so we'll do alt shift m and that's going to be print hanged man and all it needs is the current wrong count it just needs to know how wrong i currently am and that's all it needs to print out uh the hangman so now we just have uh this method call here where we just had where we used to have the very complicated code but now it's abstracted away and we never have to worry about it again so we can print the hangman but then we can say if a wrong count is uh greater than or equal to six then that means the player has lost the hangman is completely printed the player loses and we gotta exit out of this game so we want to do assists out you lose and then break okay so let's just test that out and make sure it ends the game and we lose if we should lose no idea what that is either so let's just put in some garbage it'll fill out our hanged man almost dead and we lose perfect that is working so that's it we've got we've got a complete one player hand man game right so the few outcomes of the game are you can win by guessing all the letters that works you can win by guessing the exact word that works and you can lose by putting in so many guesses that you fill out the hangman so all of that works that's pretty cool right you've created a full hangman game in just a little while and you don't even need a friend you can just use a whacked out computer program that knows hundreds of thousands of words and gives you completely strange words for you to mess with anyway i promised that we would do a two player version as well and guess what that is super easy so all we have to do the only little modification we have to do is change the way that we get our word that's it we can have the player we can have one of the players type in a word um instead of getting a random word from our uh our file like we are right now so way up at the beginning of our program we can just ask the user do we want one or two players so we can just do a sys out and we just say one or two players question mark and then we use well we're going to need this keyboard input up here actually so let's move that we're going to need a keyboard input here and we're just going to say string players equals keyboard dot next line and then just say if so if players dot equals one if they put in one as the string then we want to do everything we already did here to get uh the the the word from the file and all this this crazy stuff here so let's go ahead and cut all this code and put it here in uh this if statement so now it's all in this if statement right but we need this word to be accessible outside of the if statement so we need to declare this word up here before the if statement so let me just get rid of the declaration here as well we only need it declared in one spot and can't declare it twice so now currently our code is complaining because hey this word may not have been initialized and that's right so if the player didn't choose one we're going to assume they mean too so if they type in garbage the code will still work so we'll just say else we assume they mean two players and then we say how about like sis out player one please enter your word and then we just say word equals keyboard dot next line so then after we get that word from the user basically we would like to be able to clear the console output all that output so that the next player can't see what the first player has entered but i looked it up like crazy there's no way to clear the console that works reliably everywhere and i couldn't get it to work i don't think there's a way to do it it's it's it's not intended to work like that for you to be able to clear console so what i'm instead going to do is just put a whole bunch of lines uh before the player starts so the player can still cheat by scrolling way up don't let your stupid friend do that and cheat because hey that's not fun so what we are going to do actually is just print out a whole bunch of new lines like this slash n slash n slash n i'm going to print out a whole bunch of them and i need a whole bunch of them it's a whole bunch of new lines and then print out i don't know like ready for player two good luck just something that indicates a player two it's your turn player one is done they've put in their word and it's your turn so let's go ahead and run this bad boy one or two players let's say we want to do one player okay so it has picked the word for us metrized it still prints it out so in a second we can we can take out this cheating but for now let's just make sure the one player game still works um okay yes it worked metrised you win cool all right all right so now let's go ahead and see if the the two player game is working so let's play two players player one please enter your word um halitosis so now you can see it put a whole bunch of lines here so that we could cheat by scrolling up if we want but we shouldn't you can put in i don't know millions of lines if you really want the player to have a tough time scrolling up to get to it but we're not going to worry about that too much let's just jump through this and make sure this works i can put an s that works great i can guess the word it's wrong i can enter another letter like h fills it in i can enter my guess halitosis and i win awesome that works also there's only a couple of things left to do first take out the cheating right now it's printing out the word don't do that comment it out later on if you need to change uh fancy up your program and do some debugging and know the word just uncomment that line and you'll be golden but for now no more cheating so first let's go ahead and see what this is like without cheating it's probably a lot harder i'm gonna play with one player please enter a letter boy that is a big word wow s okay it's in there i have no idea what my guess is for the word so i'm gonna skip that okay enter a letter a blank a s um guess for the word i still don't have one how about a t no it's not in there enter a letter this is the toughest word one thing i'm thinking of as i play this um if the person loses we should probably print out the word so they know what the heck it was because right now i'm going to be real mad that i don't know what this word is when when this game finishes let's enter so i still have no idea enter a letter i i lose i have no idea what that word was wow i really need to have it print out that word when i lose so when you lose we want to print out the word was plus word so now we'll actually know the mystery when we lose let's try it again that's kind of fun one player another enormous word wow this game hates us s sub a approbation i do not feel bad for not getting sub approbation but it works and it is pretty awesome but that's real tough now what you can do as an enhancement or something is if you want to like limit the difficulty of the game you can have it so it'll only find like words that are like six or seven or ten characters or less or something and only give you those and not sub approbation or you can make it really difficult and say it'll only use words that are you know 10 or higher or you can let the user choose a difficulty and go by the size of words based on that yeah that was a good time that game was a lot of fun to make and now we have a really cool hangman game we can play either by ourselves or with a friend so if you had a lot of fun too and you got some value out of this video please let me know with a like it means so much and if you'd like to see more videos like this in the future where we make fun cool programs in java and do other tutorials like that please be sure to subscribe and you'll be able to see a lot more of this in the future and again if you guys want the full source for this program go grab it in the link down below and we'll see you guys in the next video