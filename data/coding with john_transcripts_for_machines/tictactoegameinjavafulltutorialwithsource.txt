hey guys today we're going to code a tictactoe game in java starting from scratch you're going to see the whole thing the thought process behind it the mistakes i make if any now before we get started here guys i want you know the full source code of this completed tictactoe game is available in the link down in the description so go grab it don't just grab it and use it to cheat grab it so you can pull it down and mess with it and play with it and improve upon it and break stuff and mess around with it have fun with it and if you like having that source code please let me know by liking the video it really means so much to me thank you so yeah we're gonna work it out as we go so let's get to it so for this game example we're just going to do the output like in the console and not use a gui or anything that just to keep it simple and work through the logic of how to create a tictactoe game we're going to make sure we can print the board and then take user input and put it in the right place we need to have some kind of a computer opponent that does some kind of moves and also we need to be able to check if the game is over meaning if the player or the computer has one or if the board is full and nobody has one then we've got a tie so those are kind of all the little pieces i'm thinking of there may be more to it as we work it out but who knows let's get going so first let's just come up with a way to print a board so we can look at the console and see what's happening i think the board that we're going to have is a probably a 2d array of char of characters so you can imagine they all start out blank and then we'll turn them into x's or o's depending on if the computer or the human player places something there so um let's just start out with that so we've got char double array and if you don't understand the multidimensional or 2d arrays it's not so bad here you're probably familiar with regular arrays like this this is just an array of characters and this you can kind of just think as a grid of characters and we'll type out what it looks like when we declare it so call it board good name for a board and we're going to essentially what we want is three rows of three characters a piece so we can come up with that grid so we're going to start out with all of them being just blank spaces and then later on when they get filled in they'll be x's and o's so we're going to declare our um board with just spaces so the first array the first row will be space space space and then it'll be the same for the second row so we'll copy that paste that and then of course the same for the third and that's it that's essentially our our game board now um let me reformat that to kind of show to get a better representation of what of what the board actually looks like here so this spot here is the top left spot on our game board and this one's the bottom right and everything else fits in exactly how you would expect so now let's um just come up with a way that we can print the board so so to print the board we not only want to print what's in each of these um spots but we also want to print the grid the hashtag the pound between all of these spots so to do that i think what we're going to do is like for the example for the top row we'll print this first value then we'll print a vertical bar and then print the second value and then print a vertical bar and then this third value and then we'll have like a we'll print out a line separator and then we'll print the second row similarly to how we did the first row and so on till we get the whole thing printed so let's just write out a system.out.printline so first we want to print out this top left spot and to get that spot um it's the zeroth spot the first the first is the zero the zeroth spot on the zeroth array so we can reference that by just board zero zero but let's actually go ahead and test that we can refer to that spot just by let's say we this was an x and we run our program it prints out an x it is success board zero zero is successfully referencing this first spot so now let's change that back before we mess something up and then we want to print a vertical bar and then um board zero one still the first the zeroth row and then the second spot in it is one not two nope one all right and then uh we just got one more we want to print the third spot here and i'm sorry this line's going pretty long that's okay okay so let's just test that out real quick x o o run bam we've got our first row um now let's print the um the row of like a line separator so i'm thinking under that first spot we just have a hyphen and then i think we do a plus sign so we can get the the cross part of the hash tag pound um and then hyphen plus hyphen uh let's see how that looks so we're going to copy this first line and we'll just we're just going to change what we're printing here so we're going to change um we're going to do the first row for everything the first row meaning the second row this row we're now printing this row so we got one zero one one and one two cool cool cool and then we're going to print the separator again we'll just copy that paste it and then let's do our third row so we've got two zero two one and two two so let's just try this out one two three four five six seven you get the drill here nine cool all right let's expand this so we can see it awesome we can print our board so now what we probably want to do is move all of this printing out to its own method so we can call it whenever we need to because we're going to print the board many times during this program's running um so you know how you can do that you can write our like private print but if you're working in an ide quick tip i'm working in eclipse right now i can highlight all of this and i can either right click and go to refactor extract method or i can just hit alt shift m with all of this highlighted so i'm going to do that alt shift m and you just tell it the name the method that you want this to be but guess what we're going to call it print board and look awesome it made it a private static void print board takes in the character array of the board and prints it out so now whenever we want to print out the current state of the board all we have to do is call that method and now we can forget about this completely put it out of your mind it's already written whenever we want to print the board we can just print the board all right now again before i forget i'm just going to change all these back to blanks and now that we know that we can print the board we don't need to really mess with that anymore so now we need to have a way to take user input like say i want to put my x in this spot here or i want to put it here we want to be able to take the user's input and put it in the right spot so i think what we're going to do is instead of making the user like type in zero zero or zero one nobody wants to do that we're probably going to allow them to type in one of these numbers for these positions so if they want to insert it into the top left they'll enter a one if they want to insert the middle and give it a five etc so first let's just do this simple part of taking in that number from the user and to do that we're going to use the scanner class so the scanner scanner equals new scanner and we're going to use system.in for the user input we're going to organize imports so we can automatically import java util scanner by the way that was control shift o in eclipse to automatically do that and if by the way if you want a full tutorial on scanner and how to get user input with it go ahead and click this link up here i've got a whole video on it it's great all right so we're going to get the input from the user as a string string user input equals scanner dot next line and that gets the line entered by the user and puts it in this user and it puts it in this user input variable and let's go ahead and test that too i like testing system.printline user input oh and we might also want to prompt the user um where would you like to play kind of weird but hey that's i guess the best thing i can think of right now it doesn't matter and we'll we'll tell them uh one through nine so they know what that one to input so let's go ahead and give that a test and now it says where would you like to play one through nine and we could say one and it prints out one so cool we're getting that input right now what we want to be able to do is take this user input and actually place the x we'll make player one the x we want to be able to place the x and the spot where they asked it to go so we can use a big if else block or we can use a switch statement and for for ones with a lot of options like this i kind of like to use a switch statement so what we're going to say is switch on the value of the user input and then in the case get over there that the user input is um 1 we want to assign this value as x right so case one is uh board zero zero set equal to an x oh and this is a string not in it so we're gonna just put quotes around that and then we want to remember to add our break statements you just want to remember to add breaks whenever you uh write your switch statements otherwise you could have you have potential for some weird behavior just put in breaks so we're going to copy and paste for the other eight values so two would be zero one this spot here there's our zero one this spot here and so on okay so that should be all of them i'm going to zoom out actually a little bit so you can actually see all of this for just a second and we're going to fix the formatting on this i don't know why i formatted it like that as you can see we've got a case for each of what a user should put in if they put in something else we'll put in some validation for that later on but right now we're going to have a default statement so if they don't send one through nine we're just going to be sad so default that means if none of those are met it'll just it'll just pronounce that base then after we've gotten the input from the user and assigned the right spot on the board with an x let's go ahead and print the board again which now that we've got a method we can just say print board that's it print board board and let's run it where would you like to play um three bam we get an x on the three spot how awesome is that right you're making a game it's really cool even simple games like this are just a lot of fun to make so let's clean this up a bit and um extract all of this stuff that's getting the printing the the message to the user getting the input and putting it in the right spot on the board let's put that in its own method two so alt shift m um player turn hit okay and now whenever we want the player to take a turn it's all right there and if we need to enhance it or do anything else special in there we can just fix up this player turn method let's go ahead and zoom in back a little bit here actually we we don't need this print line of what the user input anymore we can get rid of that so now this method for the player term just prints out where would you like to play takes the input from the user puts it in the right spot and returns awesome so now we come on so now we're coming to what might seem like a complicated part and that's how to get the computer's turn to work um so you might be thinking hi am i going to write some kind of really complex algorithm to do all the optimal stuff we're not going to worry about that here we're just going to make the computer kind of play in a random open spot so if you want to learn how to make like the the perfect algorithm for how the computer could play to never ever lose and have no fun playing your game i'm sure you can find other videos on that it's not the focus of this here so essentially what we're going to do here is have the computer pick a random spot between 1 and 9 and if that spots available that's what it's going to pick so to generate random numbers in java generally use the random class so random rand equals new random and then if you want to make a random int we'll organize imports uh ctrl shift o or if you need the import java.util.random and then the method call to get a random int is called rand dot next int so what you can type in is a number and it's going to give you a random int between zero and one less than that number so what we actually have to do is because we want to get a number between 1 and 9 is we have to get a random int between 0 and 8 and add 1 to it and so to do that we're going to pass in uh nine and then we're going to add one to our results type this out and we'll go over it in a second so int computer play equals rand dot next in nine plus one so this will give us a random int between zero and eight but we want the random in to be between one and nine so we're just gonna take the zero to eight add one to it and we've got a random number between one and nine okay but what if this spot is already taken by an x or an o um then this play won't work so what we have to do is add a check for whether that spot is taken or not whether if that spot is blank we're good if it's not blank yeah the computer needs to try again and now we're also probably going to need a way to do that for the player turns too and so let's just go ahead and make a standalone method that just takes in one of these numbers one through nine and just tells you whether or not that space is available with a boolean let's create that method from scratch right private static boolean the return value is going to be a boolean is space available there's a good name for that and it's going to take in the board and the uh whoops so it's going to be a char double array board and the position int position okay so a lot of logic is going to match um exactly what we've got here so let's go ahead and steal the switch statement from ourselves and paste that up here so first we want to switch on the position that is sent into this method and um of course since the this case statement we had before was looking at strings but here it's taking an int we're just going to change all these uh to numbers okay then in all these spots instead of assigning a value we just want to return whether or not that space is occupied so um to do a character equals check you can just use double equals so we can say if this spot on the board is equal to a space then we can return true right and then else of course return false and now you can see this break is dead code because we're either returning true or false when we're in here there's no way it's going to reach this so you don't need break statements here it's an exception a little small pro tip if you want to clean up this code a little bit you have if blah blah blah equals blank then return true else return false what you can actually do is shortcut this and just return the value of this evaluation here and so this will do exactly the same thing it will return true if this is the case it will just return the truth value of this statement so if the board at this spot is equal to blank it'll return true but it's just a lot less messy code to look at and figure out so let's just go ahead and copy that for each of these other spots and actually come to think of it instead of saying is space available we can just use like is this a valid move so like and that way if they put in something like the user puts in something like 0 or 10 or something we can also say that's just not a valid move because so it's a little bit more broad and helps us more than just in the space available just this makes this method a little bit more useful to us so let's say is valid move okay so great now we've got a method that takes in the board in a position and tells us whether or not that's a valid move okay so then we want to default to false so if they if they didn't if they so if they entered one two three four et cetera we'd look in the right spot and tell them whether or not that space is available but otherwise we return false that's not a valid move they can't enter anything except for one through nine okay so right now this isn't called anywhere so what we want to do is if this computer play if it's taken already if that spot is taken we want to loop until the computer comes up with a value that is available so probably the easiest way to do that here is just use a while true loop and and then we can just say that if the computer makes a valid move we can break out of that loop and then if it doesn't make a valid move and doesn't break out the loop it just goes in and tries it again so we can just say if is valid move pass in the board pass in our position which is our computer play so if that's a valid move break and that kicks us out of this while loop so we know that when we exit this loop this computer play is a valid move great so now that we have this valid computer play we want to be able to place that play on the board now i'm thinking about it so we've got this method that allows the player to take a turn and does all of this check logic and assigning but i think what we can do is refactor this a bit to this section of the logic so we don't have to duplicate this logic anywhere and it can be able to either take the computer's play or the player's play and put it in the right spot and this will happen a lot as you're writing your code if you keep an eye out for it you might find yourself starting to duplicate something and go ah maybe i can reuse some other part of my code okay so how are we going to do that basically the we don't want to copy the part where the uh where we ask the user what they want to play because we don't need that for the computer we don't need to use the scanner to get anything from the user but we do want effectively this part of this the switch statement here so let's extract this switch statement into its own method so we called it a move before so i guess we'll just call it place move um let's go ahead and do that but i think we might have called this a play let's rename this to computer move to be consistent throughout our code and we'll even call this a player move right and by the way to rename any clips you can just uh be selecting the the the method or the variable that you want to rename and hit alt shift r and then you can rename it to whatever you want and as you can see it renames it across the entire application so you don't need to go and copy and paste everywhere like a mental patient you can just do it in one spot so now we've got this place move method now the uh the string that comes in won't be the user input it'll instead be the position that we want to place that move but we also need to know since we're going to be using this for the computer plays the computer moves and the player moves we need to know which character we should be putting in there because we want this method to be able to be used for both computer and player so we're going to take a char symbol that might be a terrible name maybe you come up with a better one if so let me know in the comments because i'm interested in the best name for this for this variable so anyway now we're still going to switch on this position and in the case of one we're going to insert the symbol in the case of one instead of always putting in x we're just going to put in what that symbol is so again this can be used for computer or player and still if something sends this method a bad number which it shouldn't we'll just print out a sad face okay so now that we've made this method that can place a move for either player in this player turn method we need to actually send it the right stuff so we're going to send them the user input which is the position but we also need to send it the symbol so for a player turn we want the player to be an x right so this is telling this method hey when you place this move put an x in there so now that works for the player now let's hook that up for the computer so back up here in our main method it's still in our main method after we've got the valid computer move we want to tell this place move method to play the move for the computer so let's do it we're going to place move and what does it take i can hit uh control space in eclipse to show this uh this kind of autocomplete so i need a char board so if we pass in board a string position which we know the computer move is the position and char symbol which for us is going to be an o for the computer now if you notice we've got a red underline here and that's because it's saying well computer move can't be resolved to a variable and that's because it's declared inside the scope of this while loop here so once it exits this scope there's no such thing as this variable so what we actually have to do is take this int and declare it here get rid of our int declaration there and we're good except except oh no okay the method please move char a string char is not compatible with arguments char a int char and that's because this computer move variable is an int and not a string so um we need to quickly just convert that to a string before we can pass it in and the easiest way to do that is just using the integer dot 2 string method and you pass in the inch that you want to convert to a string and it does it now great it's happy so now we've added a lot of stuff and refactored a lot of things so let's real quickly um assess what we've got and then we're going to test so let's see we're making the board we're printing the blank board we're declaring scanner why are we declaring scanner in here we only need it inside this player turn method so actually let's do a little bit more refactoring get rid of the scanner here we don't need to pass it into player turn we can just go into this player turn method and create our scanner here exactly when we need it and we'll get rid of scanner input so you might see this yellow wavy line for this scanner not being closed it's probably not a big deal in a small program like this but if you want to be a good little boy scout you can go ahead and close your scanner here at the end of the method when it's done being used by calling scanner dot close anyway back to here so now we are we create our board print the blank board the player takes a turn and then we do all of this stuff to have the computer play a move and print the board again so that's what we've got so far we've got the player takes a move the computer takes a move and we print the board so let's go ahead and test and see if all that works so where would you like to play um let's play in two okay so now the computer made a move on spot four so awesome let's try it again um i'll play in spot four okay and the computer placed here let's just do it a few more times to see if we run into any weirdness i'm gonna play one all of one through nine and make sure my stuff gets placed right and if there's any exceptions or anything okay so one thing i am noticing when i play a six and it might not have been only because of the six i might have just shown up here at random but so i played six and it looks like the computer was able to override that but it shouldn't be able to do that because we have this is valid move check and so it should only be doing that if that space isn't occupied so let's try and figure out what's going on there um and in eclipse if you want to go directly to a method that you're looking at um like if this is the method call you can hold control and click the method name and it'll bring you right to that method so i saw it specifically happen for sixes let's look and uh i can already see the problem case six we've got a copy and paste error i missed changing this value it should be um row one which is the second row um and then spot three red spot two which is the third column that's what should so that that so that check wasn't working properly and that's why we got those issues on six so let's take a second and confirm all the rest of these zero zero zero one zero two one zero one one one two two zero two one two two cool let's test six again a few more times okay awesome it appears to be working now that's why you test like that don't worry about making mistakes like that you're going to make them just make sure you test your programs thoroughly and you'll be able to quickly find and fix your errors no problem at all so let's go through the rest of them we still have 789 to test okay cool now that all appears to be working now of course we've only got i take a turn the computer takes a turn and then the game's over um so we've got to fix that so let's go ahead and um first let's clean this up just a little bit so that this oh so all of this code here is to make the computer take them turn so let's go ahead and extract that to a method so we can reuse it all we want and we'll call it a computer turn so now when we want the computer to take a turn we just call this method i guess it would be nice to be able to see the board between turns so we're just going to add in another uh print board here between these turns it would also just be nice to see a little print out a sentence of where the computer chose to put their move so let's go to the computer turn method and just add a little statement for that now let's give that all a quick test because we just rearranged a lot of stuff let's make sure we do it right where would you like to play one computer chose nine bam okay so now um of course the we only have one move for me and one move for the computer so um let's go ahead and just add in a little simple wild true loop to just keep it going back and forth so basically we're going to have the player take a turn print the board have the computer take a turn print the board etc etc so let's go ahead and just copy this up here and we'll do a while we might we might make this a little more fancy in the future but for now we're just going to do a while true and it might stay that way we're just going to loop through this forever and of course now this is dead code so it's going to complain we're going to comment it out for now so let's give it a test where would you like to play one so i see an exception when it was trying to prompt me um for where i want to play next i think it could be because um i'm recreating this scanner maybe i do need to just have one scanner at the top that's passed in everywhere so one let's see if that solves the issue go ahead and grab this scanner and put it back where it was and but then we have to pass that into the player turn again if you didn't know a quick way to do that so say you want to add a parameter to this method but you don't have to actually go to this method and type in that extra parameter you can just slap it in as a parameter here and then it'll say hey the method is not applicable for these arguments well you can just say hey change the method to add that parameter and then you can see it automatically does it how awesome is that now let's retest by the way i'm hitting ctrl f11 to run my program instead of having to come up to run run or click this button ctrl f11 where would you like to play one oh i also forgot i'm closing the scanner and i can't be doing that after every turn so let's go back into player turn get rid of this scanner close and we're going to put that at the end of the program so we at the beginning of the program we create our new scanner we do everything we need to do and then at the end of the program uh well actually let's put it here at the end we can't even put it at the end right now because this is dead code because we have a wild true loop here that we never can get out of so let's just put it here comment it out so we remember it for later be a good boy scout and close your scanner and now we're going to test again but the sub programming works you're going to you're going to write some code think everything's going to be just fine see a problem figure it out fix it move on where would you like to play one computer chose 3 where would you like to play two computer chose six where would you like to play now one thing i'm thinking i may have forgotten about is i don't know if it's validating my moves it's make sure the computer is putting it in a valid spot but i don't think it's checking mine so let's see if i can expose that bug by trying to choose spot three right now and yes i can so right now this program allows me to cheat let's go ahead and fix that so what we're going to need to go and fix is this player turn method so let's hop into this player turn method so we've of course got this system.our print line uh where would you like to play and then we use the scanner to get that input from the user well what we need to do before we just place the move is make sure it's valid just like we did for the computer move and so again we're going to put this in a while true loop um if it's a valid move we'll break out of that loop otherwise we will just repeat that loop until we have a valid move and remember our method name was our method name called by the way hit ctrl o to open up the outline of all the methods here i have in this class so it's called is valid move and it takes the board and the int position okay so we're going to call that is valid move takes the board in an int position but our position is a string that comes from the user so we're going to have to convert our user input to an end and um and to do that quickly we're just going to use the integer.parseint cool now we just need to add our if statement if is valid move then we know we've got a valid move and we can break out of our loop and place the move on the board but again we have the same problem we did before where this user input can't be resolved to a variable and that's because again it's declared inside the scope of this wild true loop we need to change it to be declared outside the scope of that loop so it can be used outside that loop so now again let's test okay where would you like to play one so the computer placed at seven let's see if i can override it at seven no i cannot it's making me put it in again but let's put in a useful message to the user um so just else it's not a valid move so we can just print out hey that's that's not a valid move so you can copy this paste that in there and we're going to tell them your input user input plus is is not a valid move so then they can try again let's retest seven is not a valid mover would you like to play seven seven is not a bad move where would you like to play five okay five is good and it continues so now let's let's keep going um two computer chose nine as you can already see we've got to put in some logic to see if it's the end of the game but for now let's just keep going let's put it in spot three okay down the only spot left is six now as you can see it kind of looks like it froze but i have my suspicion that um it probably didn't freeze it's probably churning right now in a while loop and i bet if i open my task manager i'll be able to see that yeah we're using a ton of cpu and eclipse and that's probably because the first of all let's kill this program before it kills my computer now i'm thinking it's looking it's in the middle of this computer turn right now and it's in the middle of this while true loop where the where the computer um gets a random in between one and nine and checks if it's a valid move and if it's not it just tries again well it's out of valid moves so it's gonna just do this forever unless we fix it that brings us to the final main chunk of our program where we have to determine if the game is over and then if the game is over who won or is it a tie so let's just think about that where do we want that in our in our code here so we've got the player takes a turn we print the board the computer takes a turn we print the board and then we keep going through that loop so i think after each turn we can have some code for is the game over and if it is over we kick it out of this loop but we don't need to actually write all of that is the game over code here we can just call a method that does that just like we have player turn print board and whatever so we can actually use the ide to make the shell of that method really quickly right here so let's say we want to call it is game finished and we of course need to pass in the board so we can read the stuff on the board to see if the game's finished well it's like well this method is undefined well you can just hover over this and say okay create it and then we can control click the method name and it'll bring us to the method stub that it created now we just need to write our implementation of is game finished here so now we've got to think we've got a couple of different ways that the game could be finished either we could have a winner um when somebody gets three in a row one way or another you know across or diagonal or up and down or the board is full and there's nothing else anybody can do and it's a tie so first i think we should check is there a winner and then second if we get a no there isn't a winner we just check if the board is full and i'm thinking before we start writing this we want this method to return a boolean for whether the game is finished that's why we call today's game finished and we want to take the result of this if the game is finished then we want to break from our loop so we want to do that after the player's turn and after the computer's turn so okay so now let's implement our is game finished method so right now it's right now it's just angry because we aren't returning any booleans yet we will but for now just to make it happy um we'll just add a return statement so it's so it's happy first let's go ahead and write the check for if the board is full because i think that'll honestly just be easier to do so basically so what we want to do for checking if the if the board is full is just loop through this entire board and if just one of them is blank we know that the the board isn't full yet so how are we going to loop through that 2d array well we're going to have a nested for loop we're going to have one for loop that goes through each of these rows and then one for loop that goes through each of the columns in each of those rows so in our is game finished method where we're checking for a full board we're going to do 4 int i the classic for loop variable we're going to loop through the the length of the board array so that's until i while i is less than board dot length i plus plus and then inside of that we're going to loop through the columns so 4 and j the secondary classic for loop variable j less than board i dot length j plus plus oh and i see i just forgot to initialize these to zero gotta remember that so this might look a little bit confusing but what that enables me to do is look at board i j and find out exactly what's there in that spot in the board so i know this nested for loop is going to loop through every position in the board one by one so what we can do is check board i j equal to blank and if that's the case we can say if board i j equals blank then return false so what that does is loop through the whole board as soon as we find one blank spot we know it's not full and the game's not finished and if it gets through this whole for loop and never finds a blank spot well we got to return true the game's over again let's go ahead and test it and then cool it worked um it ended the program it's not in some infinite while loop or anything like that um it just ended but uh we didn't put in any message or anything we didn't print the ending board so let's go ahead and do that here we also want to print what happened so what happened here is if the game is full it ended in a tie nobody won let's go ahead and test that the game ended in tie awesome so that's now that's all working great what we have left to do is write the code to determine if there is a winner and not just check for a full board so we're going to write it here in our is game finished method so again we're going to check to see if anybody won and if nobody when we do this is the board full check so think about the way we want to implement this check for whether there's a winner so the way i see it there's there's only so many different possibilities you might as well just hard code each one we don't write some clever mathematical method we can just check all of them there's only so many of them so we could have the three rows one two three you could win in any of those ways the three columns one two three so that's six total and then each diagonal seven and eight so we've only got eight different possibilities to code for so first let's i think let's write all of these as if we're checking to see if the player the human player won um and then we'll kind of uh refactor it a little bit so we can either check for a player or computer so let's go ahead and just write all of those checks let's start with the first one the first row so we're going to check if all of this first row are x's then player 1 1. so we got if board zero zero equals x and board zero one equals x i'm gonna copy it for the last one here and board zero two equals x so that's the condition for the first row right and then we just need an or condition for the second row and the third row and the four so we're just gonna have one big giant if statement here for all this we're going to contain all of that in some parentheses here or we're going to copy all of this if player 1 wins on the second row and the second row is just everything change but with a 1 here check the third row so 2 0 2 1 and 2 2 so now we got all of our rows checked let's check all the columns and so let's just copy this whole thing we know we've got three checks for columns let's go ahead and put that here so our columns are going to be we've got 0 0 1 0 and 2 0. so this is 0 0 this is 1 0 and this is 2 0. we're going to do our second column which is just taking this first column check and then just changing all of these to a 1 and then we take for the third column check we take all of these and change them all to a 2. so now for the diagonal checks we have just two of them and so that's 0 0 and then 1 1 2 2 and zero two one one and two zero so i think that's right so now we've got our check for this whole check should check it did the player win so now we just gotta end our if statement here so if all any of these things happened if the player went like this or the player one like this or the player one like this then we want to print out system that out that print line player wins but we also want to uh print the board and we want to return true because the game ended we want to return uh true because the game finished so let's go for it let's run some tests let's see if i can beat the computer playing absolutely randomly one creator chose eight i want to choose two computer shows seven i'm going to choose three and i win i'm a genius wow i'm going to try and go through all of these options and win with all of them so i know that these checks actually work because it's super easy to make a copy paste error and something that looks like this so i am realizing while i'm testing this that when the player enters into valid value it doesn't tell them what's wrong it loops through it right and makes you put in the right value but it doesn't tell you that that value is wrong so let's find the player turn method to fix that so if it's a valid move great we break otherwise we print well we got started with it but we didn't finish it so we're printing out user input uh is not a valid move and now let's uh keep testing awesome i just got done testing all eight possible win scenarios for the player and they all work so that's perfect awesome but right now we're only checking if the player wins we're going to now modify this to check whether the computer is winning also so in order to do that the first thing i'm going to do is extract all of this code this whole big check into a method by itself and allow the symbol that you're looking for to be sent in as a parameter so when we want to check if the player one we can send an x to the method and when we want to check the computer one we can just send an o to the method then we don't have to rewrite all this code or have duplication of a lot of the same kinds of checks so first we want to take out the printing the board and and saying that the player one inside of this method um we'll take that out and put that here because because we don't want the method that just determines whether a player or a computer wants to be responsible for also printing out the board and printing out the player one we'd like to just separate those concerns a little bit so let's go and instruct all of this logic to a method right now alt shift m maybe has contestant one this is also the name of a method i don't love but i can't think of a better one so if you can think of a better one please let me know in the comments i'd love to get a better one here now we can see that the automatically generated method shell here thinks it's a void method because we didn't have a return statement for every possible branch here we actually want to return a boolean here for whether the contestant has won so of course if it meets any of these criteria we return it true and if it gets outside of that we can return false because it didn't meet all those criteria and you don't need to have an else statement here because if any of these conditions are met it will return true and we'll already have left the method and if it gets to this point we know that none of these conditions are met and we can just return false we don't need an else and remember here we also want to take in the character of the symbol that we're looking for whether it's the o for the computer or the x for the player and then instead of explicitly looking for x everywhere here we want to instead look for symbol so let's do a quick find and replace here so i don't have to go insane pasting everything oh and i just realized i spelt constant instead of contestant got constants on the brain so now the check for whether the player has won is a call to has contestant one where we send in the board and the letter x as the symbol so now we can say if this contestant has won this contestant being the player then we know that uh the player has one so we can print that out here and then we do want to return true here still because this still is the method that determines whether the game is finished we want to say yeah the game's finished so now um to do the check for weather computer one it's exactly the same except um we have to look for an o and then we can say if that's the case the computer wins so again let's give it a test first let's test um if i can win still i'll play one and then four and then seven and player wins i'm gonna try and let the computer win but of course it kind of plays dom it plays completely randomly so we'll just see what happens computer wins o got three in a row and that worked out how awesome is that right and all this is not too hard it's all simple programming concepts just just combined in a way that you can make a simple working great tictactoe game complete with a computer opponent super quickly now one thing i do want to address because i'm super picky as a programmer about having everything be super clean is right now i think when you enter something that isn't a number it'll blow up so what i'm saying is right now if i enter like this it explodes with a number format exception now why is that that is because in the player turn method when we gather the user input the the move from the player we immediately try to parse an integer from it in order to call this is valid move method with an integer so there's a couple of ways we could take care of that we could do like a try catch around this uh this parse end here and there's an example of how to do that kind of input validation in this gpa calculator video right here but i think what we can do instead here is just change this is valid move method to accept a string instead of an integer and then we can just pass the string directly to this method and we don't have to ever convert it to an integer we can just check the string the user enters against strings of one or two or whatever so first let's change this method to instead take a string of a position and then we'll fix all the little syntax errors that eclipse tells us about after we do that to me it's kind of easier that way just make the change that you want and then let eclipse flag all the places that you need to change to accommodate that so we'll just change this to a string position and then of course we need to change all these two strings so now here at the end if i send in some garbage that isn't a valid move and isn't even a valid number it doesn't matter it'll just default and return false hey that's not a valid move and won't explode with this number format exception anymore so and then we'll go down to where we're calling that method from the player turn and instead of parsing an int from this user input we just send the user input as a string directly perfect but now there is one other place where that method is called and that's inside the computer term now for the computer turn remember it does send in an int because it uses this rand.nextint in order to produce the random move it wants to make but all we need to do to fix that is just use another method called integer.2 string and pass in that move to convert it to a string and you might be thinking well aren't we just replacing one problem with another well no all ins can be converted into a string any series of numbers is also going to be a valid string so we won't have the same formatting exceptions as we would converting a string to an integer so that should be all we have to do let's go ahead and test the user input validation now put in my garbage and it says it's not a valid move awesome and then i can say one and of course one is a valid move so it accepts it and i like doing stuff like that being able to validate the user input like that so it doesn't create a bad experience for the user somebody's playing your tictactoe game and they accidentally type something that isn't a number doesn't just blow up on them and make them start over it adapts to the situation and allows you to put in the correct input and that's what a good program should always do it's got to be a good boy scout with your programs so now one other thing um we just have some commented code that we don't need anymore that we can get rid of let's go ahead and get rid of this i don't i still think we're not closing our scanner so let's go ahead and do that at the end of the program and so yeah now at the end here let's go ahead and like zoom out and just get a high level view of this program and what it looks like zoom on out here there's not a whole lot to it it's 173 lines and that's with a bunch of these blank lines and stuff there's not a whole lot to it and we probably could whittle it down a little bit more if we really wanted to but we don't really have to this is a very simple program that you can make tictactoe with another thing i like about it is the main method is very simple all it does is set up the board print it and then do the player turn and the computer turn in a loop and then stop and all the complexity is broken down into these other methods so it's really easy to keep in your brain how it works when you're looking at an individual part of this and that's kind of a mark of a good program too you don't want one big giant main method where it's really hard to just keep in your brain what's happening at any given time for any part of this you can look at that method and understand what it's doing and you can break it down too like i can go into the player turn method so i can see it's getting input from the user validating it and then placing that move on the board and that's it it's super dead simple each method has one job and it does it well and it does exactly what you would think it would do by the name of it so i think that's going to be it today guys thank you so much for watching now remember the whole source code that you're looking at here is available in a link down in the description so go grab it take a look at it make it better rearrange stuff play with it have fun if you enjoyed this video got some value out of it had some fun making tictactoe please give me a like it means so much it's so appreciated and if you'd like to see more videos like this please be sure to subscribe alright that's it until next time guys keep at it happy programming and i will see you in the next video