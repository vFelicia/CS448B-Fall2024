in this video we're going to be creating a mortgage calculator in java sounds like an absolute blast of a program to write right but it's a great beginner java program to create and we're going to start from scratch here and write the whole thing beginning to end hi my name is john and i do a new java tutorial video every single week so if you enjoyed this video be sure to subscribe so you don't miss a new video each week i also have a full java course available in the link down in the description if you're interested and of course the full source of this program is available in a link down in the description so go and grab it so we're going to take as input from the user the principal amount the interest rate and the term the number of years for that loan and our output is going to be the monthly payment amount and on top of that we're going to calculate the total amount that you pay throughout the whole course of the loan before we get started actually writing the code we need to know what the actual formula is for the monthly payment that we're going to have to implement in java here it is now i know it might look a little bit scary but i promise it's not so bad once you understand what all of these letters stand for it's really not all that complex so m here this capital m on the left is going to be our monthly payment amount this is what we're going to try and generate and we're going to calculate that monthly payment amount using this formula the p in this case is the principal amount that's the total amount of the loan so for example if you're borrowing a hundred thousand dollars to pay for a house your principal amount would be a hundred thousand dollars i in this case is the interest rate in our case since we're coming up with monthly payments we're going to need to generate the monthly interest rate and that's very simple to get from the annual interest rate we'll talk about that later the only other term here we haven't talked about is n n here is the number of payments again in this case since we're doing monthly payments it'll be the total number of monthly payments so it would just be whatever the number of years of the loan is times 12. so the goal of this program is going to be to take in the principal the annual interest rate and the term in years of the loan as input from the user make this calculation and then return what the monthly payment is let's get to it okay so we know we have to get input from the user so what do we use to get input from the user we're going to use the scanner class so we'll create a new scanner scanner scanner equals new scanner system dot in so it is keyword input from the user and to use scanner we have to import java.util.scanner so looking at our formula here what's one thing we need to take in we need to take in the principal amount of the loan for that we're going to use a double just in case the amount of this loan is super huge so we'll just say double principal equals scanner dot next double so what that'll do is take keyboard input from the user of some double and store it in that principle variable and also we do want to put in some sort of prompt for the user so they know what they have to enter system.out.printline enter the principal amount so next what else do we need we need the interest rate so again we'll prompt the user with a system.out.printline enter the annual interest rate for an interest rate i think a float will be just fine it's usually only a couple of decimal places so float annual interest rate equals scanner dot next float now we have one more thing we need to get from the user and that is the term of the loan we're going to get it from the user in years just because that's the normal way loans are given out it's giving out you know 10 15 30 year terms so again prompt the user with the system.out.printline enter the term in years and that'll be a whole number so we can just use int for that term in years equals scanner.next int all right now we have all the information we need from the user going back to our formula let's look at everything we're going to need to be able to plug in and get the right monthly payment we need the total principal amount we've already got that from the user but this i is the monthly interest rate right now we have the annual interest rate and we need to use that to calculate the monthly interest rate luckily to do that is pretty simple we can create a new float monthly interest rate that will just equal the annual interest rate divided by 12. and if you want to just use the number 12 here in the code that's fine but a little tip for your professional java programming career in the future is never have like magic numbers like these in the code so right now you probably understand what that 12 is for and what it means but sometime in the future you or some other programmer might look at this and say well why is he dividing it by 12 so what you can do is create a well named constant for this number so that would look a little something like this you want to put this here above the main method in your class you just make a private static final int and we're going to call it months in a year and we're going to initialize it to 12. so this creates what's called a constant this month's in a year variable can never be changed because we have told java that this is final so once we initialize it here to 12 we can't ever set it to anything else and you can even see what happens if you try to down here in the code let's say we try to set it to 13 java is going to give us a compilation here before we can even run it final field months in a year cannot be assigned so now instead of just using this magic number 12 here we can use our months in a year variable now future you or some other programmer can look at this and know exactly what is going on anyway easy enough now we've got our monthly interest rate which we will use for our i to plug in our formula so now we have p the principal i the monthly interest rate the only other term we don't have is n the number of payments and we do have the term in years from the user so as you might guess we can easily use that to get the total number of monthly payments we can use int for that because of course it'll just be a whole number also inch number of payments to get the total number of monthly payments we just need to take the term in years and multiply it by 12. so we can set that equal to term in years times and again we could just say 12 but remember we've got a sweet constant we can use for months and a year so let's go ahead and do that all right so now we've got all the terms of this formula that we need let's go ahead and write the code to implement that formula remember the goal of this formula is to produce a monthly payment amount so we're going to create a new double call it monthly payment and we're going to set it equal to the result of running that formula so let's just start writing it out first we're going to need the principal amount and we're going to multiply it by the entire rest of this formula so equals principal times when you're typing out this formula in the java code you're going to need to pay close attention to the parentheses and things that you use so you make sure the order of operations happens like it should so for the numerator here we need our monthly interest rate times 1 plus the monthly interest rate to the power of the number of payments so again that might sound complicated but let's just break it down i here is our monthly interest rate so we have monthly interest rate times so for what's in these parentheses here we need to take one plus our monthly interest rate and raise it to the power of the number of payments there's a method available in java that makes it really easy to do exponents like this and that's just called math dot pow for power math.power takes two parameters and what it does is it takes the first number and raises it to the power of the second number in our case we want to take one plus the monthly interest rate and raise it to the power of the number of payments so let's just type that out we want to take one plus the monthly interest rate and raise it to the power of the number of payments let's zoom out a bit here so we can see the whole thing so now this line is that whole numerator the monthly interest rate times one plus the monthly interest rate to the power of the number of payments and that's exactly what we have here so let's contain that whole thing in parentheses and then we're going to want to divide it by this whole denominator so we put in a slash to divide and then we'll put in our denominator and you can see we have 1 plus i raised to the power of n that's the same as one of the terms we have in our numerator here so we can just copy that part that's this whole dot pow piece we can just copy that and paste it here in our denominator and we just need to take that and subtract one so just minus one and that should work for the monthly payment calculation before we move on and calculate the full total payback amount for the loan let's test this out and make sure it works so let's just print out system.out.printline monthly payment and print out monthly payment let's give this a run and see how it works enter the principal amount let's say it was 100 000 nice round number enter the annual interest rate let's say four percent so 0.04 as a quick tip if you want the user to be able to enter in something like four if their interest rate is four percent instead of having to put in 0.04 you can just take this number that they pass in and divide it by 100 so it works in your calculations but for here we're just going to have the user enter 0.04 for a 4 interest rate enter the term in years let's say it's a 15year term and once we hit enter our program will do its thing and we get 739.6884 blah blah blah blah so about 740 a month will be your payment so how are we actually going to confirm that this is the right number one way is to compare our results with google's own mortgage calculator so we have a hundred thousand dollar mortgage amount four percent interest rate and a period of 15 years our monthly payment is 740. so it looks like google is just rounding but our results are correct real quick though before we move on to calculating the full payback amount now this amount doesn't look anything like a standard currency amount right nobody prints out a number of dollars that looks like this so how do we format it properly to look like a good currency amount well there's another really convenient java class you can use to do just that and that class is called number format so we can call number format dot get currency instance open close parentheses dot format and then we can pass into this format method the number that we want to format as a currency and in our case we just want to format the monthly payment what this actually does is give you a currency formatter for the default locale of your java instance so because i'm in america it'll just be an english usa formatting of the currency let's go ahead and run this again to see what that number format looks like 100 000 four percent annual interest rate 15year term now we get 739.69 but it's rounded and formatted really nicely right we get a dollar sign and it cuts off as two decimal places for cents and rounds it very nicely this number format class is really convenient for this kind of stuff so now that we've got this monthly payment printing out all pretty let's do the calculation for the total payback amount for example if you take out a hundred thousand dollars and have to pay it back at four percent for 15 years what's the total amount you're going to have to pay back for that hundred thousand dollars so to calculate that is actually pretty simple right we know the monthly payment amount and we know the number of payments so all we have to do is take this monthly payment amount and multiply it by the number of payments and we have the total payback amount so we'll just do another system.out.printline total payback amount let's just format this nicely right from the get go so so we'll use number format dot get currency instance dot format so this is where we'll do our simple calculation we have the monthly payment we just need to multiply it by the number of payments and that should work let's go ahead and run it and see what we get let's just enter the same numbers we did before so a hundred thousand dollars four percent interest rate 15year term let's see what we get our total payback amount for this hundred thousand dollar loan will be about a hundred and thirty three thousand dollars so you're going to be paying about 33 000 for the privilege of borrowing a hundred thousand dollars so that's a pretty good chunk of change but here you can see we're only doing a 15year term a lot of people use a 30year loan on their house so if you did a 30year loan how do you think that would affect the total payback amount well we've got a calculator let's give it a try same numbers a hundred thousand dollars four percent annual interest rate but a 30year term we get your monthly payment is way lower only 477 dollars but your total payback amount is almost 172 000 so for doubling the term from 15 to 30 years yes your monthly payment does go down but you end up paying more than twice the amount in interest that you would for 15year loan ouch you also may have noticed while we're coding this program that if you enter some kind of an invalid number let's say you entered the number cheese your program explodes with this input mismatch exception and that's because this scanner method is trying to look for a double in the input that you put in when you put in cheese it can't really make a double out of cheese so it blows up if you'd like to learn how to deal with those exceptions and validate the user input so you know you always eventually get good input from the user go and check out this other video i made on exception handling and another thing you should never forget when you're using the scanner class right now we have a warning because our scanner is never closed and that is a potential resource leak and we can't have that so here after this point in the code we're already finished using the scanner we don't need to get any more user input so we can just call scanner.close here that gets rid of that warning and makes java happy and gives you that nice warm cozy fuzzy feeling inside if you're interested in seeing more java tutorial videos like this one in the future be sure to subscribe so you don't miss each week's video thanks a lot for watching and i'll see you next time