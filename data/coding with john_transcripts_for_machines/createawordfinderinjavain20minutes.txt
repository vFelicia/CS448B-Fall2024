hey everybody how's it going in this video we are going to create a program in java that can take a pool of letters like this and print out all the possible english words that can be made out of those letters so this can be used to solve like scrabble games words with friends any of those sorts of word scramble games we're gonna start from scratch program the whole thing beginning to end right here in this video so you'll see exactly how it's done if this is your first time on the channel my name is john and i make a java tutorial video like this one every single week so be sure to hit the subscribe button so you don't miss one and before we get started the full source code for this whole program is available in the link down in the description so go and get it okay so in this program we are going to have to of course take in a bunch of letters from the user via the keyboard and we're going to see what english words we can make out of those letters so of course in order to do that we're going to need like a dictionary file a list of a bunch of valid english words so i found one that i really liked and it's available in a link down in the description as well so go grab that but any dictionary file that you find will work great you can use any one that you you find if you like better separately just make sure it has like one word per line that's like a dot txt file a text file just to make your life easier so go ahead and download that file and put it in a location where you know where it is on your computer now the first thing we're going to do is make sure we can read in that dictionary file we're going to use the buffered reader class in java to do that and so we'll call it reader buffered reader reader equals new buffered reader and that buffered reader constructor takes a parameter and we need to tell that what we want it to read and for our purposes we're going to have it read a file so we actually have to pass in a new file reader and to create a file reader it takes the location of our text file so just go ahead and paste in the exact location on your computer of that text file but just pass in wherever you happen to put it on your computer so i know you guys are smart i know you know how to do that and we're working with eclipse so i can hit ctrl shift o to automatically organize my imports and you can see we have an import of java.io.bufferedreader and java.io.filereader so if you're working with some other kind of tool that doesn't automatically do the imports for you that's what they are and we also see that eclipse is complaining here that we have an unhandled type file not found exception and we probably won't do any fancy handling of that here if we can't read the file our program can't work so we'll just go ahead and say add a throws declaration here just add a throw file not found exception here and now let's make sure we can go through and actually use this reader to read all the lines of our file and we'll just print them out for now to prove that we can read the file properly so to do that to go through every line of a file using a buffered reader like this you use a special kind of for loop so we'll say four um and the object we'll create in our for loop is a string we're going to take uh the word that's on every line and so we'll have a string let's just call it a current word uh that's going to represent the current line that we're on and we'll set it equal to reader.readline and you can see that the the javadocs of this method here says reads a line of text and so what that's going to do is read the very first line of code and put it in this current word variable and so next we need uh the condition for staying in the loop like we're going to stay in the loop while there's still more lines to be read and we'll know there's another line to be read if the current word that we've gotten isn't null so we can just say current word not equals null so if it ever reads a line into this current word variable and it turns out to be null that means there wasn't the line anymore to read so we've reached the end of the file and then we need our iterator so in the normal for loop it'd be like i plus plus but we're working with a file reader here not like a normal sort of array so what we want to do to increment here is we need to get the next line of the file so all we have to do is say current word equals reader dot readline so that's kind of a long for loop decoration so i'm going to zoom out a little bit so you can see the whole thing for string current word equals reader.readline so to start we're going to read the first line of the file and put it in this variable we're going to keep going while the current word is not equal to null and to get the next line to iterate each time through the loop we'll do another current word equals reader.readline and you can see the eclipse is complaining here about an unhandled io exception so we'll just do the same thing we did before and just go ahead and add that throws declaration and a little tip there the the file not found exception that we had before was actually a subtype of i o exception so if we just say throws i o exception it covers them both and you can get rid of this file not found exception import because we don't need it anymore so i'm going to zoom back in so you guys can see a little bit more easily for every iteration in this loop this current word variable should hold the current line that we're on the current word that we're iterating over let's just go ahead and print that out to the console and see if we can print out our whole dictionary file so system dot out dot print line current word okay let's run this and see what happens whoo sweet looking great we go all the way to zzz which is somehow a valid scrabble word but hey good to know all right so our file input is working splendidly so next thing we're going to do here is uh the keyboard input part where the user can type in the pool of letters that they're working with so if they're playing scrabble or words with friends or something it's the six or whatever letters that they have in their hand but our program will be able to take any number of letters you can type in one letter you can type in a thousand letters and it's still going to work and we're going to want to do this kind of at the top of our program before we start looping through all the possible words we're going to want to get that input from the user so to do that we're going to use the scanner class as we always do scanner scanner equals new scanner and pass in system.in for keyboard keyboard input from the user add the import java.util scanner to get that to work we're going to print something out to the user just to prompt them to enter their pool of letters sis out please enter the pool of letters and we're going to take that input as a string so string we'll just call it letters equals scanner.nextline that will get the next line of input that the user puts into the console hit enter it'll get all those letters put them in that string all right so you might be wondering and it's a very good question how are we actually going to do this how are we going to take this scrambled list of letters and see which of all these dictionary words can be made out of that pool of letters how are we going to do that that's a really good question so here's how i think we can do it so what if we go through uh the pool of letters that we have and just count up how many of each letter that we have available so let's say oh we go through this this whole string of letters and say okay there were two a's there were no b's there were uh there was one c and so when we're done looping through that the pool of letters we know how many of each letter are available and then we can loop through each word in our word list and make sure that we can make the current word with the pool of letters that we have available so as a quick example let's say that our pool of letters was this aabrt that's the pool of letters we have to make words from what we're going to do is look at this string and say how many of each letter do we have here okay we have for a's we have two of those for b's we have one of those for r's we also have one and for t's we also have one and for anything that isn't in this like map here any letter that doesn't exist we know that we have zero of those to work with and then we're going to go through each and every word in our dictionary list and make sure that we have all the letters available in our word list to make the current word we're looking at so let's just say our first word in the dictionary was like aardvark well our program will say well for a's we're going to need three of them we're going to need uh two r's et cetera down the line and make that full map for this word also and then go through and make sure we have all the letters we need so the program will say okay i need three a's do i have three a's and they'll say nope you don't you only have two and then it'll quit looking at that word and try the next one and then say maybe later on it encounters the word a bar on our word list and then it says okay for a's i'm going to need one of those for b's i'm going to need one of those and for ours i'll need one of those as well and it'll loop through each of these letters and say okay do i have one a available yes i've got two so that's great do i have one b available yes i do do i have one r available yes i do and once it gets through all those letters and confirms it has enough to make this word we will print this word out to the console as a valid word that can be made from our list of letters so i hope that makes sense if not just ruminate on it for a bit until it kind of sinks in because it's going to be important to how our program works so let's actually go ahead and just uh comment this out so we kind of have it available for you know a mental model as we work through this code now what we want to actually do next is create this mapping in our code and to create a mapping like this it's of course of a character to a number so we can have say we have uh two a's we have one b or we're actually going to use a map and it's going to look kind of exactly like that and we'll say it's a map of character to integer and we'll call that letters count map because it's going to be basically a map of the count of all the letters that we have in our letter string you say equals new hash map that's a perfectly good kind of map to use here okay ctrl shift o again to organize imports but if you again are not using an ide we need java util map and java.util.have so now comes the jerky part where we have to like loop through the the the string of letters that the user has passed in and count up how many of each letter that we have available that'll be kind of a classic kind of for loop we'll just say 4 int i equals 0. you've probably done this before i less than we're going to go to the length of the letters input that we're getting so we'll just do letters dot length and then i plus plus to iterate and then for each iteration through the loop we want to grab the current character we're looking at so we just say char current char equals letters dot char at the current index of i so this is going to do so let's say this was our pool of letters aabrt the first time through this loop this current char is going to get the character at the zeroth position in our string which is going to be a so what we want to do here is is set the the right count for the current letter that we're looking at but it isn't necessarily the first time we're encountering this letter as we go through this for loop maybe we've got a huge list of characters and this is like the fifth a that we're seeing already we don't know so what we want to do is get the current count for that letter off of our map and we can do that by saying int count equals so what we want to do here because we don't know uh at what iteration in the loop we're working with we want to say if we already have a count for this letter on our map get it otherwise it'll be zero because we don't have that letter yet so here's what that looks like we're going to see if our letters count map contains the key of the current char so this is just a true or false value hey do i have this value on my map already do i already have an account for a for example on my map so we can say if we find that we have a current count for that letter we are going to get that current count so we'll just say letters count map dot get the current char so this will get us the count of that current character and otherwise if it didn't contain that key already we know that our count is zero so quick note here this is using what's called a ternary operator and if you haven't seen it before it might look kind of scary but it's really not terribly complex so this piece of code is saying if i already have a count for the current character i'm looking at let's say i want to know hey i need to add an a do we did we already add any a's before so if we already have a count for that letter then i want to get it from our map otherwise if we don't have a count then we know that it's zero and then right after that we want to set our current count to be one more than whatever the count was before and then after that we just need to add one to that character's count on the map so all that looks like is letters count map dot put so we're telling java hey put on my map that for this current character i'm looking at current char that i have one more than i did a second ago so let's walk through again exactly what this code is doing because this is the central part of this program let's say that again this is our pool of letters that we're looking through aabrt we're going to loop through each character in this string first character is a and for the first time through the loop our map is empty we haven't added any letters to it yet so it's going to try to get a count it says hey does my map contain this key yet for the letter a no it doesn't so it's not going to do this it's going to instead get 0 because this is the first time we are encountering the letter a in our string of letters so now we know that our current count is zero but we want to record what our new count is now that we have encountered one letter a so we're putting one new entry on our map here where our current character is the letter a and we're telling java we now have one a and now the second time through this loop it's picking up the second character in the string the second letter a that goes into this current char here and again we're asking java hey do we have this key and our map anywhere for this letter a and java says why yes we do we have one for the letter a we have already encountered one letter a and so we say great get that current count and so the number one gets filled into this count variable and now we put a new value for the letter a on the map by adding 1 to that count and so it will put in that same spot a the value 2. that kind of makes sense so it'll loop through again and then encounter the value b and it's for the first time so it'll say okay now we've got one b and then on down the line it'll say we have one r and one t so at the end of looping through all of this pool of letters we're going to have a letters count map that looks like this all right so that's a complex part of our program but we're going to need to use this uh piece of code later when we want to get all the letter counts for all of our words in our dictionary so because we don't want to have to rewrite this so because we're going to have to reuse uh this piece of code let's go ahead and put it in its own method so we can call it whenever we need it so to do that pretty easily in eclipse you can highlight all the code that you want to go into the method and hit alt shift m and it'll bring up this little extract method dialog for you and you just name the method whatever you want so let's just call it get character count map so we hit enter there so now it's created our method for us get character count map and it's going to take in a string of letters and we actually want it to return this letters count map which it's not doing right now it just made it a void for some reason so we instead want it to return this value a map of character to integer so let's change our return type to that and then at the end of our for loop all we have to do is actually return our letters count map okay all right so let's scroll back up here and notice uh we're just calling this method here and we're not actually storing uh the the map anywhere so so let's go ahead and still just grab this declaration so that we can set the result of this mapping to a variable that we can use so now after we call that fancy method that we just made our letters count map will have a mapping of every character that we had in that string and the number of times we had each of those characters and actually before i forget the more eagleeyed of you may have noticed that in my dictionary file here all of my words are in uppercase but perhaps our user types something in lower case we don't want it to just break we want it to act correctly when that happens so what we can do is just take what they type in in the scanner input and just call to uppercase on it and then that'll make everything they type in all caps no matter what they type in so it'll match our words easily later on okay so let's move our little map comment example down here to where we're going to have to write some more code just so we can see it kind of for reference for a mental reference all right now remember what we were doing we gathered the input from the user to get the pool of letters uh that we want to uh descramble and find all the words from and we grabbed our dictionary file and we've got code that currently loops through all of the words in that file so now instead of just printing out this current word we now need to have logic to see if the current word we're looking at can be made from the letters that we've got so the first thing we want to do is get the character count map just like we did for our pool of letters we want to get it for the current word that we're looking at in our dictionary file as we're looping through it and now that we've made it a standalone method it's very easy for us to do we don't have to write that complicated logic again we can just call it so we again need to make a map of character to integer call it current word map and set it equal to get the character account map of our current word and it's just that easy now we have that same complicated character count map on the current word we're looking at in the dictionary now what that has given us remember we are we are looping through every word in our dictionary file here let's say we were looping over the word bar at the current moment what this is going to give us this current word map will have a map that looks like this for the current word we have one a one b and one r now what we want to do is loop through all of the letters that we have in our map and make sure that our pool of letters has at least that many available for us to make this word okay so now let's write the loop that's going to loop through our current word map one that one looks like this and um and do that comparison to make sure we have all the letters that we need so to do that we can just say for character character in current word map dot key set so what does that mean the key set is the set of keys in a map so a map has a bunch of key value pairs so for this map here like the keys are all these uh characters and the value is all of the counts of those characters so this loop is going to loop through the key set which is the set of characters here in this case abr for the word bar what we want to do is get the count for each character we run into and see if we have at least that many in our pool of letters count so we can say int a current word char count um equals current word map dot get character so for example here the first time through this loop we'll encounter the letter a and we're just saying uh hey java get me the count that relates to that letter a and so it's just going to get the number one so now we want to get the number of that character that is available in our pool of characters so similarly we'll say int letters char count equals we're gonna use our letters count map from our pool of letters and we'll say if that contains the key of the current character then we want to get its current value so we'll just use another ternary operator here so if we have that character in the map then we'll just get that value letters count map dot get character so that's going to get how many of that character we have available in our pool of letters otherwise if it doesn't contain this key then we know that we have zero of that letter available after that all we really have to do is compare these two ins so we can say that if our current word char count is greater than our letters char count so what this is saying is that if our current word needs more of this letter than we have available in our pool then we have to uh break out of our loop sorry we can't make this word with this pool of letters and on that note actually we're going to need another boolean variable created here so that we can know when we come out of this loop whether it had this problem or not so we can just call it boolean can make current word and we're going to start it out uh initialize it to true but then if we run into a situation where we require more of a certain letter than we have in our pool of available letters then we will set that to false so in this situation can make current word equals false so then now right after this for loop we can just look at the value of this variable if it's still true at the end of that for loop then we know we're good to go we can make this word so it's just a simple if statement if you can make the current word then let's print it out to the console system.out.printline current word okay now i think that should work let's uh cross our fingers and run it okay so please enter the pool of letters a good random pool of letters looks great let's see awesome i think that worked so we have safoij and this is totally valid we can make sofa we can make soja whatever the heck word that is ah that is so cool all right let's give it a tougher challenge let's enter in like a whole bunch of letters lot of letters so what can you make out of that wow wow there are a ton of words all right sweet the main part of our program is working it's successfully spitting out all the possible english words we can make from the pool of letters that we enter in sweet but we're not done quite yet we have some code cleanup we have to do if we're going to be decent programmers now first of all i noticed that if we type in like a pool of letters um you know it spins out a good list but it doesn't say that that's what it's doing we might want to just add a quick statement that says here's the uh the possible words that you can make from those letters now we can just do that right before our big for loop here so just with a simple uh s out statement all possible words you can make with those letters now another thing if you've watched any of my videos before you know that we still have a problem here with our scanner we are not closing it like the good boy scouts we are so let's go down to the bottom of our main method and just remember to close your scanner or you will have a resource leak and it is just embarrassing so now you can feel good about yourself except also we have the same thing with our reader object here we also need to close our readers all right so let's go ahead and zoom out and just take a look at our fine work we can get rid of these comments now that we used as kind of a mental image as we coded that we don't really need anymore so look that's a pretty small little program you know maybe what is that 60 lines less than that and does a pretty cool thing right you can enter like a pool of any letters you want and it's going to find you all the english words you can make out of those letters that's pretty awesome now you can use your powers for good or you can use your powers for evil like cheating against your mom at words with friends but don't do that don't be a terrible person babe i'm not gonna tell you how to live your life grab the program and do with it what you will now if you enjoyed this learn something got some value out of it please let me know by liking the video and if you'd like to see more java tutorial videos like this every single week be sure to hit that subscribe button i'm getting these tutorials out to more people totally depends on you liking subscribing and sharing so i want to sincerely thank you if you take the time to do that and if you do i will see you back here next week for another job tutorial