thank you okay if everything is working then I should be live um I've never done this before I feel like I'm a thousand years old uh yeah no I mean this is something I should have done I don't know the when I had like 10 subscribers instead of now when I have almost a couple hundred thousand which is amazing you guys are awesome um but yeah that makes me absolutely terrified to do something like this because I never have ever eat every other video I've so far done has been obviously prerecorded and um you know edited to to deliver exactly what I want to you without any of the little things that might go wrong when I do stuff like this so yeah absolutely terrified as what could go on and I've got uh yeah I'm not even positive this is working looks like there are people chatting so hey what happened to your nose so yeah um excellent question how did you notice uh so at the kind of what the reason it's been a while since the last video is uh so obviously there was Christmas and I'm I've been super busy with a wife and now two sons and it's just a mad house around here and I hardly have any time to make them in the first place but then in addition to that um just so right after the new year I just had uh surgery on my nose so I didn't get punched in the face or anything it certainly looks like it but so I had surgery on my nose and just to help me breathe better essentially um it's kind of a fancy septoplasty it's not a rhinoplasty I have the big nose before the surgery and I will continue to have a big nose so don't worry about that nothing's going to change there um yeah so uh yeah this is awesome it was so weird um I I don't know what to do with my hands so I hope everything's working all right and okay so um yeah thank you all for joining it I'm really floored to have like anybody on here listen to me and watch me code um so I'm gonna start this is gonna be like the least professional live stream you've ever seen in your life uh because I've got a laptop I'll show you I've got one a laptop with one screen that I have to do all of this on I don't even have I've got another laptop another separate laptop over here just to watch the chat in case I don't know any in case anything explodes uh but here I've just got the one so now I've got my streaming software and everything you're gonna see it you're gonna see all of how everything is working here um so yeah so the plan here is to do uh leak code four which is a median of two sorted arrays so um and we'll talk about what the problem is here um and so I guess um yeah sorry I'm so distracted by the chat I don't know I don't have a way that I'm supposed to be doing all of this you know kind of down yet so um yeah so anyway let's just get started um of course hit me up in the chat if you have questions or anything along the way I don't know how often I'll be able to like check it I definitely won't be able to answer every single question that's just the way things go but I'll do everything I can because this is all about interacting with you guys and I want to be able to to do that it sounded like a lot of fun so I want to do it all right so we're doing leak code number four the median of two sorted arrays so what they're going to provide us and here's you know we switched over to Java so they give us our little shell of code here um yeah so uh Praveen in the chat says I did this it's an easy problem but why is it listed and hard that's what I thought too when I first saw it um I saw oh this is this looks really easy but the the devil is in in the details and we're going to talk about it a little bit um so it says okay we're going to get two sorted arrays nums one and nums two so they're just arrays of ins they're going to be sorted that means they're going to be smallest to largest each of those separate arrays are sorted already smallest to largest guaranteed we don't have to worry about that um and given that information we need to find the median so like the center number so if you put them all if you did if you take a bunch of numbers in order the center number is the median like literally the number in the middle of that list or if it's an even if there's an even number of objects in that list it's uh the average of the center to uh numbers the center two elements so anyway we're supposed to find the median of the entire collection of those two arrays so like pretend we had those two arrays and they were mashed into one giant sorted array we would need to find the median of of that combined sorted array of these two separate sorted arrays so um and it the the caveat here the reason why it's saying that this is hard is because it's it's saying that the overall runtime complexity should be Big O of uh log of M plus n um so probably what will happen in this video um is that and it's saying that I have a low bit rate so maybe I have to turn off my own preview oh well I'll do that um never done this before I apologize if this is like junk quality I'm really trying to I'm trying to do everything right but we'll see um anyway the reason that that is that this is hard is because it's saying that the overall runtime complexity should be Big O of log of M plus n uh so that's what is really difficult about it I think what we're going to have to do in this particular video I honestly only have like an hour maybe I probably have to be done with this by 11 Central uh because I'm gonna have to like literally go help take care of kids so I don't know if we're going to be able to code through the solution that's Big O of log of n plus n I'm going to at least try and talk about it about how it should work and then I might do a subsequent video doing the hard the the faster the better time complexity solution the Big O of n plus n so log of n plus n solution the solution that first comes to probably everybody's mind the naive solution that they call it which I kind of like that they call it a night like people call it a naive solution Ah that's like the lame solution well it's a good solution it's it's a the solution that everybody comes up with uh is what we're going to talk about and Implement at least here we'll at least get through that and then we'll see how much of like the tougher um better faster bigger web M log of M plus n solution we'll see how far we get into that um so so let's say let's let's uh like pull up a whiteboard here um somebody's saying video quality is good so cool YouTube is bugging me apparently everything's good all right so let's say we had um let's draw out how this is going to work we have two uh this is the easier solution uh that isn't going to have the type of Big O uh complexity that they're asking for but it's still going to be pretty darn fast oh sorry I I didn't actually go through the examples I should do that you probably want to see some examples so for example if numbers one comes in and is uh one and three and nums two is just two um the merged array you know if we take those two sorted arrays and merge them into one sorted array the middle number there is two and so that's the median the median is the middle number and then they have another example where they have an even number of elements and the total sorted array so you have one is one two and the other is three four combined that's the merged array is one two three four and the median there is the average of the middle two numbers because it's an even number of elements so it's the average of two and three which is just two plus three divided by 2 is 2.5 so that's the output that it expects and there's there's a few constraints that it's giving us um let's see that the nums.1 length equals m oh that's just it's just telling us about the the time complexity they're asking for because they're asking for that so they're saying okay numbers one length is M nums two length is n uh V so the length of each the length of each array won't be more than a thousand and but there could be nothing in it and also the so the total number is going to be there's going to be at least one thing and one of them the total number is going to be somewhere between one and two thousand and the numbers themselves are going to be actually it says nums one I nums two so negative 10 is going to be less than or equal to numbers 1 I yeah I think it's saying like the numbers themselves are going to be between like negative a million and a million if I'm reading this right so um yeah well I don't know so anyway we've got it's kind of simpler than it than it might seem if you start kind of getting too much into some of these constraints here but so we're going to talk about the the kind of naive but good solution um especially if you're more of a beginner to these sorts of problems then I used to always I always just code that IU solution first I have code the first thing that comes to mind and and make sure that I can get a good result and then I kind of think through um the clever way of doing it that could make it go faster and if I can't think of one start the Googling try and figure out what other people have done and learned from it before you work on another Elite code problem uh yeah so let's talk about this let's say we've got um how are we how are we going to do this let's say we've got two two arrays so I'm just going to make up some numbers we say we've got one three three four and six in one array and two three five seven four no that's two three five seven eight it has to be sorted these are both guaranteed to be sorted in order we know that for sure um so basically what we're going to do with our naive solution that we're going to code here is we're going to just combine those two sorted arrays into one larger sorted array and find the median of that uh so that's what we're going to do the the merging of those two arrays is going to be kind of the fun part to code and we'll talk about how we do that I'll give you a hint it's a lot like the merge sort merge works um if you've seen my merge sort video that was a big Revelation to be able to figure out how that merge is supposed to work we're using a similar merge here because the things that we're merging are already in order um okay so basically what we have to do to merge this into one giant array and then we're going to find the median of that giant array uh is we're going to Loop through the the first array and the second array kind of at this at the same time and I'll show you what I mean so let's say we we have like a pointer called I that's the weirdest eye ever that's going to Loop through our uh first array and another one J that's going to Loop through our second one so we'll start by just looking at comparing both of those numbers at in the first array element I and the second array element J so we're going to start comparing the first two numbers of each array and we see which one is smaller and so we're comparing one and two which one is smaller one so then we add 1 to our combined sorted array and then since we used this one from our first array we'll then increment over to look at the next element of that array and then we'll compare these two numbers because we didn't move the one from the the bottom array we'll compare those two numbers and see which one is smaller two or three well two is smaller so we add it to our sorted array it's a terrible two let me see if I can make that a little better so we add that to our combined sorted array and then okay um that was this too so we use that let's move on to look at three and compare three and three which one's smaller they're both the same um so we just use the first one three add it to our sorted array and then again we move our pointer because we use that three and we compare three and three which one's smaller it's three um and we keep moving through this comparing the next two elements of each array and say okay which one of these is smaller and whichever one is smaller we add it to our merged sorted array and then we increment the uh pointer on the array that we pulled that value from and then we keep going until we've exhausted both of our arrays and then we should have one combined sorted array that's kind of the idea that's what we're walking through here so anyway we were we were comparing Okay now what's which is uh smaller three or three well three um doesn't matter they're the same so we picked this three and we'll move our pointer over which is smaller three or four three is oh wait no I okay this is the problem with doing stuff live because I've already added three to the list here twice so I messed up completely at some point along the line when I was making the explanation I added three a few times one extra time okay so anyway we've got three three times which is what we've got here one two three three so now we should be moving over here and comparing four and five which one is smaller four move it over here now we compare five and six which one is smaller five move on to the next one this is like a mess of a of a white board at this point which is uh which is smaller six or seven six is so then we've exhausted this entire top list because we've already accounted for six the last element in that top array so now we just have to keep going we know that every element in the bottom bottom array is bigger than that six which it is it's seven and eight so we have seven and eight so kind of mess it up there with the threes I added too many but we've got it all worked out so now our uh array at the beginning which because I circled too much stuff it used to be one three three four six and two three five seven eight combined those two sorted arrays combined and merged into one sort array is one two three three three four five six seven eight and there should be ten total elements because there's ten elements here so we should have a 10 elements okay so now that we have that's the first step in this naive solution is to combine those into one giant sorted array so what we're going to do now is just find the median of this sorted combined array and that just means um you know plucking the if it's odd it would be the exact middle element of that array and if it's an even number of elements it's the average of the middle two so in this case the middle two are three and four and so uh the average of the median of the combined arrays would be 3.5 so that's kind of what that's exactly what we're going to do what we're going to code and we're going to submit and delete code and see how fast this naive solution uh runs compared to other Java submissions um okay so I'm going to take a quick second let's see I'm going to take a quick second to go ahead and check out the chat a little bit just to see if anybody has questions one question though if you care a lot about optimization why did you choose Java and not C plus or similar I code in Java and teach Java honestly largely because I have used Java at work for the last 12 years and it's the it's the um it's the programming language that I am most familiar with by far I quoted another stuff mostly in college and a tiny bit after uh professionally but basically all my experiences in Java so um our stuff our submissions are only going to be compared against other Java submissions in lead code anyway that's how that works okay um somebody says it's not a set yeah these are not sets um it's uh in a set there wouldn't be any duplicates so it's and generally sets are also not sorted this is a sorted array it's not exactly a set so we can have duplicate elements like we do here that's totally allowed I don't think there's anything against that in what they um and what they have explained to us uh now I gotta see how to find those middle two numbers we will talk about it um but basically let's talk about it right now how we're going to find the these middle two numbers is um well basically we'll have to account for of course if it's odd or if it's even if it's odd it's easier so um basically all we're going to do is take the length of our combined array and divide it by two and look at the element there in the middle so the length of this array is this combined array is 10. which I guess I could point one two three three we have 10 elements in this combined array so 10 divided by 5 to get to the halfway point or divided by 2 sorry to get to the halfway point is 5. so we can look at the fifth element in that array well I guess we might end up looking at like the the length divided by 2 minus 1 or something to account for uh zero based arrays um so yeah let's pretend that we had like our combined array was one two three something simple so our length is three and if we want to divide our length by 2 3 divided by 2 um in the rounding down world is going to be 1 because 3 by 2 is technically 1.5 and it would with one with a remainder of 1. so I I make the more more complex Solutions explain things more complexly when I'm on the Fly than I do when I have time to like edit my videos forever anyway so we would look at the first element in this list which is actually the thing at the the element at index one which is the number two the center element in the array here that's pretty much how you do oh you do it you just get the middle element by taking the length of your list and dividing it by two and looking at what's in that index and when you have an even number you have to look at the two middle ones and average them so it's just a tiny bit different math but it's essentially the same you just need to divide it by two and look at one and then look at the one right next to it and combine them so yeah okay let's get to the fun part the coding uh all right now I did start with as I have in the other couple of leak code videos I've made I started with uh you know they give you this solution kind of framework here I took a copy of that and pasted it over in IntelliJ here all right so I have a I had an idea of how this was going to work but I hadn't coded it yet uh coming into this so I hope everything is like not too big of a disaster here even with a naive solution okay so the first thing we want to do we have numbers one and nums two and we need to merge them into that one larger sorted list remember these are sorted we want to combine them into one sorted list so um let's first create our array that's going to hold our sorted elements our combined sorted elements so let's say okay I've got I want to make a new int array let's call it merged maybe just merged merged array I merge into nums because these are those are both called nums and nums one and nums two this is going to be merged nums merge nums equals a new intera and we need to give it a size um because that's how arrays work if you don't want to deal with having to being restricted by sizes use arraylists instead of arrays but here we're being fed in arrays uh let's try and be cool and use arrays so the the size we're going to need to hold all the elements is just the combined size of those two two arrays so that's going to be nums uh we're going to have to get that the those lengths by using nums one that length plus nums two dot length and that's it now we have an array that will hold uh the combined elements of R2 input arrays and now we just have to do what we did in a horrific messy way in this now awful looking white board and uh you know go through each of those Rays kind of simultaneously and plucking the lower of the of the two like we look at the first number of both of them and compare them and whichever one number is lower we add to our combined array and then increment and keep doing that finding the lowest number of each array until we have our combined sorted array um so we're going to need there's a number of ways you could do that so I'm trying to think about it um let's let's just give ourselves let's make it simple let's give ourselves just three kind of pointers so like int I equals zero and J equals zero you could combine these two if you want to be real cool I think you can do like int I comma J kind of whatever I'll do it on different lines it's kind of I kind of like to do it end k equals zero so this is going to be like our our pointers for walking through the nums one array so we're going to use I to increment through our nums one array and we're going to use J to increment through our nums 2 array and then as we build our merged nums array we'll use K for uh for like the the iterator there okay so we need three different pointers to do that or the different you know iterators to do that all right so let's say while hmm use system.array copy yeah they're probably they're probably built in ways to do this there's probably like an uh arrays Dot I was there's probably some kind of a a super easy um arrays that whoa what's going on there some kind of a raised dot merge method or something that would take to a raise and merge them without us having to do anything without us having to code it ourselves but that is no fun in that let's code it ourselves and fall flat on our face when we're trying to do it live in front of a pile of people yeah okay all right so we want to essentially Loop through our arrays until we run out of them until we run out of elements in each array so um I think what we're going to do is say okay like while while our I pointer the thing that's walking through nums one while I is less than uh nums1.length and while and also while J is less than nums 2 dot length so we're going to keep going length these are the kinds of things that I can edit out when I have the opportunity you just don't see me typing out things 10 000 times when I get it wrong while I'm recording we're going to walk through we're just going to keep looping here until we've exhausted just one of our input arrays and comparing the elements that we're comparing the two elements that were currently pointed at and adding it to our new array so uh so I'll say while okay we're going to compare we're going to say if nums 1 at I because that's I is what we're using to walk through that array if nums 1 I is less than nums 2 I or J because we're using J to walk through that one then we should add um we should add nums 1 I numbers one of I to our combined array so that means and we're starting with the zeroth element we're using K to walk through our combined array so we're going to set merge nums at K to be equal to nums 1 I I think that works okay and then otherwise we know that the nums 2 is great is uh less than nums one or it's equals and then it doesn't much matter but otherwise we're going to add we're going to set merge nums at K to be equal to nums 2 dot j or nums 2 of J it's like the Ultimate Nightmare screen sharing like when you're screen sharing with like two people at work and everybody's watching you code you make a thousand errors and qualify on your face and now it's just a worse version of that but I hope it's at least manageable can I share my solution and you can optimize it sure you can you can share it and uh I probably won't have time in this particular stream to optimize somebody else's uh thing I'll have to be spending time optimizing my own or at least getting my own working um Okay so I think that's all right let me is there any questions so far oh and we also have to in each of these so um we also have to increment I if we used I and we have to increment J if we used J basically if we use the number from nums one we have to increment I and we use the number from nums two we have to increment J so we're looking at the same number again so in each of these occurrences we're going to say okay we're going to say I plus plus because we used the numbers one number and here we're going to say J plus plus because we used the numbers two number and either way we would have added a number to our merged nums array so we need to increment k so next time we add the element to the next uh index of our merged nums array so either way we're going to do K plus plus after that so after this while loop runs either we should be done walking through either the nums one array or the nums 2 array but there's probably still elements left in the other one because we're only looping while both of them while we haven't hit the end of both of them yet once we hit the end of one of these arrays it's going to hop out of this while loop so after that we need to exhaust whichever array we still have stuff in and just put the rest of those elements into our merged array because we know they're all greater than everything we've already added so far I hope that makes a little bit of sense so let's just do that so while we can copy some code here so while I is less than nums 1 dot length we're going to uh so basically if there's anything else left in the first list in the first array add them all to um oops I gotta need a semicolon here add them all I think this is Right add them all to the merge nums and increment K both times increment K here too about a thousand people ask for a semicolon there that's pair programming for you when you got a bazillion people watching all at once okay so now this means uh We've definitely exhausted our first nums array and now um we do the same thing with nums too in case that hasn't run out yet but we have to use nums two of j instead of nums one of I and then J plus plus K plus plus I think oh and we have to use J here too copy paste stuff we could get bitten there for sure increment K and I put semicolon at line 15. you must check the values of I and J I don't know why I would have to check the values of I and J the while loop condition should be or you could maybe do it like that um so that's saying so while there's stuff left you could do it either way you could you could use an or here and say okay while there's stuff left in the first list or there's stuff left in the second list or arrays rather but then inside this part here you have to check which one has stuff in it still otherwise you're going to run into like array index out of bounds errors so I think it makes it a little bit easier to just okay for this whole first Loop I'm going to say just just keep looping through while until one of them has reached the end and then at this point we know that one of them is out of elements but we don't really know which um so this just kind of checks both of them so this says okay if there's anything left in I put the rest of that stuff in there otherwise also if there's anything left in j put the rest of that stuff in the merge list it's technically only ever going to run one of these two while Loops I think because one of these should always have already hit that length limit um yeah I think that's right okay all right so now we should have this that should be the end of the merge I think what we might want to do is do like is put this in a method and test it so we don't like write a bunch about that's a good thing to do test early um otherwise we're going to write our code to find the median of these uh of that merged array and it's not going to work and we aren't going to be sure if it's our median check code or our merge code so probably what we should do is put all of this into a method and test that method directly um let's see I don't remember the extract method whoops that's the wrong thing so I can how you do this in a fancy way in IntelliJ if you want to be lazy and you don't want to like copy paste it into a method you can right click it and say refactor extract method and poof it just does the magic for you basically um I will need to customize this a little bit so I'll call this method merge and it'll take in nums 1 and nums two it'll take in so it's already doing this uh so it created a private method for us called merge that takes in two interface and has all the code that we already just wrote and highlighted um but what this isn't doing is returning the merged array so we're going to have to do that we're gonna have to well first of all we're gonna have to say that it instead of void it'll return an intera and also we're gonna have to actually return merged nums okay so after we so then we have to say int well let's copy this int merge nums equals the result of merging those two nums are those two arrays of nums num's one and nums two I'm also going to sorry I gotta think oh this is missing a return statement so it's not going to compile right now for now let's return it needs a double we'll return 0.0 we'll return a proper thing once we add the median finding code but right now we're just writing the code that merges those two arrays into one sorted array so I'm going to actually change this method to public and just so I can test it temporarily directly it's not something you typically want to do in production code changing methods to be public just so you can test them don't do that I see a lot of people doing it making a method public for no other reason if they want to test it directly if you're trying to change a method to public just to test it directly it probably means that you should move it to its own class and make it public separately in its own class and test it directly there if it's if it has no need to be called from anywhere else it should be private but I'm lazy here right now and so I'm going to make it public just so I can test it by calling it directly so I also have this solution test class built and ready to go so I can test code during this video if we needed to and hey we need to um but I'm kind of running low on time myself I set myself about an hour to do this before I got to get back to my family so here we go um write a test method and actually I think there's a cool cooler way you can do this so if I want to test this method directly I can right click and what does it generate test so I can say Okay generate me a test it should already be there so generate me a test method for this merge method and poof it's it I mean this is like 15 characters that I got away without having to type but hey I did it a cool way so now we have a test that'll hit this merge method so I want to say let's say I um I'm going to create a new solution object solution solution solution is just the class that we made here to hold our solution not particularly groundbreaking so we're going to create a new object of that class so that we can call our merge method and throw two known uh like two known arrays and make sure that it the solution the merged arrays is what we expect it to be so it should be pretty straightforward so we would say like solution dot merge we're going to call our merge method and send it to interrays let's say new into array I always forget like the syntax of this look here here's a live I don't know how to I don't remember how to do a thing in Java um so it's going to be like um Java array literal oh hey it's something I've clicked before fantastic uh yeah in fact equals what if I want to pass it in as an element this is like the dumbest thing because I think it's different if you want to pass it in as an uh oh here here's some people new and thank you um long use chat GPT chat GPT would shred this in a quarter of a second I'm positive of that it would probably do the hard solution too and wipe the floor with this uh the easy solution that we're coding in so yeah okay um apparently this should work according to people I could do stream.o yeah I guess stream dot of dot flatmap.2 array if I want like 10 steps of it okay so let's say I had like one two that's not right oh because it takes two parameters because it takes two parameters so let's say we had one and three and one of the things here appreciate you all chipping in there I can just look at the chat and there's five people that have so thank you uh long and herfa and prasant and anybody that I missed that told me what to do thank you okay so now we're merging these two arrays what we expect to happen is um that it equals one two and three so let's say uh int array a result we're going to set it equal to this it's probably you know ways to do this with fewer lines we can say Okay assert I think there's like an assert array equals or something like that I'll start with a cert um whoa I think there's an assert maybe one of you guys know what's up with your nose in case you missed the beginning of the stream I had a nose surgery it wasn't a rhinoplasty I had a big nose before I still have a big nose um but it was a surgery to help me breathe better like a supercharged septoplasty now these are coming off tomorrow so I thought oh what better time to do a live stream than uh looking like I got socked in the nose at a bar or something but it's doing well the pain is gone so just to I'm getting all this stuff off tomorrow and it should be a whole new world of breathing really looking forward to it um I think there's nobody's jammed in with I think there's a way a way to do like assert array equals yeah Java assert array equals um yeah surgery equals the third the two object arrays are equal but I think it's gonna it's gonna ask me to uh import this in a static way okay so we're going to say so the result so we expect sorry the result to be a new into array that contains one two three and uh we're going to compare that to our actual result so this should tell us please import the thing there we go so this should tell us um if we have the expected result if when we merge those two arrays we expect to get one two three and it Compares it to our actual result let's run it whoops I don't need a breakpoint run it why don't you want to run oh I already did it okay did it do static end portal oh I've got something wrong I have a wacky import try again and if our test passes cool and let's make sure that once good Sandy checks to make sure like your test can fail so every once in a while uh somebody I'll see you write a test that can never fail ever and so they think their code is working when it's not okay if I compare it to the bad result to a bad result um it fails so that's good that means our merge code should be working we could write like a pile more uh tests we could say okay you know check if one of them is empty and the other one's has elements or and you know or vice versa things like that you should you should in a you know real production code have a whole bunch of tests more than this but this at least shows us the basic merge works it doesn't blow up with a null pointer exception or an array index out of bounds exception or anything weird like that at least with this basic check it's a good sanity check and now our code is a little bit nicer because we have this merge method shoved off here to the side you've got turbinate reduction and septoplasting it did a great relief for me I did have this back to the surgery thing I like four or five years ago had a surgery to fix a deviated septum and it was turbinate reduction septoplasty uvileptomy I don't have a uvula anymore um didn't plan on I don't know if you can see it in the camera ah maybe not that little punching bag everybody has in their mouth it's gone uh that and the tonsils I had everything taken out but apparently the the septoplasty was not as good as it could have been so there somebody else has given it a try and hopefully this guy knows what he's doing so now we have our merged array we just need to Now find the median of that merged array simple enough we have two conditions one that our merged array is an odd length and in which case we just leave the center number and the other case where it's an even length and we just need um the tube Center numbers and we get the average of them so yeah we have just two conditions to work out there okay good excuse to make up a crazy bar fight story if anyone asks yeah well I could that'd be a lot cooler of a thing to nobody asked questions with this that's that's one thing nobody has asked me oh my goodness what happened to your nose except for you guys because I mean and I don't mind I wouldn't do this if I minded I don't mind if people ask but because I guess they think maybe I got punched in the face and that something awful has happened to me okay so first we're gonna check uh do we have an even uh do we have an even combined array here merged nums so oh I should have an if if merge nums uh you guys should know how to find if something is even or odd but if you don't this is how you do it if merge nums dot length mod 2 equals 1. so that what this does if you aren't familiar with mods you're brand new to Java or something or to programming in general this divides your length by two and gives you what the remainder is uh yes we are we are doing the mod thing yes thank you um so if uh merge nums.length mod 2 equals one that means we have an odd yeah I don't think we should ever have I'm trying to think if there's any sort of weird situation where I have like zero I shouldn't have a zero combined link that was one of the constraints there should be always be at least one so I think this condition works anyway if your length mod 2 is equal to one you have an odd uh number of elements and so you can return the middle element and the middle element you can get by okay so we're going to look up in our merge nums combined array the element that is at the halfway point so that's merged nums dot length divided by 2 . there's always some weird off by one stuff here that could happen but I think this is just right I think I don't think you need to add or subtract one here I think you can just take the length and divide it by two because in the one example that we did have and this jumbled awful mess um where it was just one two and three was combined we could take our length of three divided by two and that in the programming math World gives you one and the one element one is at zero and two is that index one is the correct one so I think that's just right I think that's all I think that's correct I don't think you need to add or subtract one otherwise it's even and so we need to return we don't need this other return statement anymore we'll always be returning something it's even and we need to return something slightly fancier um which is going to be we can still kind of do it in I'm considering whether to do it in one giant line um and also does this just do the the casting like to double magically it seems happy with this return that's this is kind of this is the kind of things that the kind of thing that I do forget sometimes if I need to cast this to a double or if it's going to say I'll just do it myself um it might just do it itself anyway okay testing it into an end just in case maybe shouldn't have to cast this I don't think it it should automatically go from length to double and it doesn't seem to have any problem doing that with this with the thing we're about to have to divide we're about to have to deal with the even case we could have where we could have two Center numbers and we have to find the average of them I think we have to do some casting there to do the math uh to return it otherwise it'll do integer uh it'll do integer math and it won't give them the value that they want it'll be a little bit of a weird situation anyway so we need to return the average of the middle two elements so um one of those elements is going to be I think the same as this other one merged nums here at length divided by two and we need to add that to the element I think it's the one like right behind it let's do a quick uh example here let's undo like a thousand things here let's say where we had just one two one two three four and we needed to find the center two elements so that's uh if we were taking the length which is 4 divided by 2 that gives us 2 and 0 1 2 that gives us this element and we need this element and the one before it so we need to subtract one to get the element before it so that answers that question we need to take this and divided by 2 minus 1 to get the other element that we need to get the average okay what have I done I need to actually get the rest of that here Plus this whole the other element which is that merged nums blah blah blah blah blah blah minus one and then divide that by two this is where all the double math is going to be weird integer division is floating point in in floating point it's even giving us a warning here IntelliJ is pretty good about this stuff it's like hey you're doing integer math when you probably mean to be doing double math and uh I believe you are correct so I think we need to just take a second and cast these both to doubles so it will do floating Point math for us is it complaining still I don't think so I still have a couple of warnings oh as I got an import that I don't need this method is never used is the other warning check if empty result array uh long I don't think we need to check our resulting array for empty the reason for that is that one of the constraints is that um I think you're always going to have at least one element yeah so one is less than or equal to M plus n so that means even though one or the other array might be be empty one of one of them is always going to have something one or the other is always going to have something so our resulting merged array should never be empty otherwise yeah you could run into all kinds of weird problems here because even the zeroth element doesn't exist you'll get an array index out of bounds and it'll explode if you were writing robust production code you should check for that here I don't think we need to check for it because it's part of the parameters of the of the code that we're given of of the problem that it'll always have something in it yes and somebody else answered that too um well dividing by 2.0 work I don't know if I have to do that that's a good question if Java does a lot of this magic and casting and stuff on its own I don't know if I need to uh maybe we'll just leave it at two like that and see what happens and uh if we have to change it to like had 2.0 we can do that I don't I don't think we need to do it I think it just does the magic of so the result of this should be a double and I think it just magically does the right thing when it divides by two here but I think this should be the end of the code um I think this should work but I'm always this is the scary part where we go ahead and actually put in delete code and see what happens so I don't know let's do it I got nothing else to do and running low on time so let's go back and paste this solution and delete code and first I guess we'll just hit run and make sure it doesn't uh explode okay as I understand it I haven't done like a bazillion lead code problems but like it basically does like a sanity check on a couple of cases and if you when you hit submit it does like the full gamut of test cases so um now let's hit submit and see what happens here oh here we go okay so we have a okay so any first first things first it passed it's accepted um so our code works it does everything it needs to do it's past all their test cases awesome and actually the the run time here is excellent but it might be a little bit misleading so here we go so it's saying the run time is two milliseconds super fast it says we beat a hundred percent of other Java Solutions um but look but if you look at the distribution it's really dark this is like the darkest you can hardly see that but the the distribution is like basically it looks like everybody in the world got two milliseconds and then like hardly anybody after that uh did worse so those are all like super tiny so it might be that even though our solution is as fast as everybody else and saying it beats 100 it's basically as fast as everybody else's um and then memory usage was also great we beat um wow just about everybody I don't know how we're we should be impressed with ourselves that we did it with with such a good memory the other code Solutions I did I'd never hit that good so all right so overall mission accomplished we solved Elite code problem um in the quoteunquote naive way to do it now this is I got rid of all my notes here so this is the way that's like kind of the way you think of it first that okay you can just take the two arrays combine them and find the median easy enough there are ways we could even speed this up if we wanted to for example we don't even necessarily need to like create the merged array and find the middle of it what we could do is kind of is do our our kind of merge code and you know start iterating through both of our arrays at like we as if we were merging but then once we get to because we know the length of both of those arrays once we get to half of what the combined length would be we can stop and we can look at that number we don't even have to create the merged array technically we can just stop halfway through we can just step through you know plugging the lowest number and then stop when we're halfway through look at that number and say okay that's the median if it's if that total was odd and that minus one with the average if it's even so we could even if we could speed this up quite a bit just by doing that and the space complexity as well because we don't have to have this combined into array we can just step through it without actually adding it to an array a separate merged array and just say Okay combine them or don't combine them just walk through them and once you get halfway through you're done you can stop and you can return um I don't have time to code that but that's a um something you can do I'll probably once I'm done with this I'll I'll share this source and put it in the description or something I'll link it in some way it might not happen tonight but I'll make it available to you guys um no problem there so you can do that I'm trying to think if there's any other way to optimize this same type of solution maybe not um so there's not a lot of time I I told my wife I would be done at 11 I've got four minutes um the the thing about this that we that we talked about the beginning in the description here is that the they want the overall runtime complexity to be bigger of the log of M plus n right now our time complexity is Big O of uh M plus n the reason and that's the so it's the Big O of the basically this the the size of our combined um the size of the two com the two arrays combined because we have to Loop through that much stuff to do the merge portion of our solution and that's the you know the long pole that's what's going to take the longest um all this the rest of this stuff is just constant time that we're just looking at the value in the middle of it um so right now our solution is they go of M plus n it's essentially a linear solution which is good and that's why it's super fast just as fast as like every other solution that's on there but technically it's time complexity they want it to be better they want it to be bigger of log of n plus n the we aren't going to be able to talk through that solution now I'm what I'm considering doing is making a separate video it probably won't be live because it's it's really complicated how to do that um but make a separate video of how to do that I'll try and explain it very quickly though um just to kind of get the seed planted in your head whenever you have a logarithmic solution it's typically based on a binary search so that means every time instead of like having to Loop through a whole array for example a log time solution for something would be okay I know I don't have to look at this half so I'll come I'll I'll take my problem and divide it in half and look here and then okay I know I don't have to look at this half so I'll take my problem and divide it into and and then that's how it reduces the size of the problem that's kind of how you can think about a logarithm a logarithmic solution a log a big O of log of n plus n solution well so what you have to actually do is instead of merging both arrays you have to do a clever you have to work out a clever way to to kind of fake it instead of combining them into one shared array you kind of have to you have to you have to man it's real complicated that's I'm glad I'm not able to get to that in this live video because it's really complicated to explain I'm gonna have to take some time to do it but basically what you have to do is try to you kind of attempt to divide the arrays both in half and say did I divide them in half in the right way and if so then where I am is the median and I can use that and if it didn't divide it in half the right way it tries to shift how it divides it and then say divided did I divide the arrays in half the right way now and if so okay then what I'm looking at is the median I can return it and how it finds that Center is the the log is how it gets to that Big O of log of M plus n solution instead of Big O of n plus n but that so that's maybe that's the seed of how uh I can maybe plant it in your brain about how that has to work but um yeah so I'm gonna take I told my wife I'd be done 11 but I'm going to take a few it's 11 right now but um yeah basically a binary search tree is how it's going to do it um Zach forever that's essentially it and arvind why is it accepting it because lead code isn't smart enough to like know the time complexity of what I have given it and it's I'm giving the right answers so it's accepting the solution and another thing about this like the numbers are are small enough that like the time complexity just doesn't matter here that's another kind of frustrating thing about this it's it's not going to give me any arrays that are larger than a thousand elements with a thousand elements I could have like a I could have an awful awful time complexity solution and it's still going to be super fast and in this case this solution is way simpler than the faster solution and so if I were actually coding it to to put into production code and if I was working with this small of data this is the solution I would probably put in um I wouldn't have the way more complex solution that some poor sap in five years has to go and try and upgrade or change something in it he's not going to know what's going on because the solution is so it's too clever to get it down to that time complexity um but so anyway with this size of elements that doesn't really matter that much so that's why it doesn't know it's pretty fast um so yeah just take some other questions and then probably wrap it up and so yeah I really appreciate all of you guys I can't believe it like it's so weird I actually um this is my very first live stream it seems to have actually worked which was 95 of what I was going for I actually got a solution and it was accepted so not too much humiliation later um yes this is definitely going to be available to watch later um sometimes they give a raise with 10 million elements yeah that's when you know like okay my my solution took 45 minutes to complete which is worse than 98 of everybody else in the world that's how you know okay I need just a better solution but here the numbers are so small in reality the difference doesn't matter and you won't even notice it as we saw here the submission was already super fast um yeah when's the next live stream I don't know uh if people like this I can do more um for sure if I can find good problems to do or it doesn't even have to be elite code it can be something else um let me know what you'd like to see in something like this I'm very open to suggestions um and better go to your wife I better go to my wife I'm stretching it it's 1103. yeah I want to make sure you guys you know are enjoying yourself and I'm able to answer some more questions if you had um anymore but um but yeah if I end up doing any more live streams I'll I don't know I'll make a post like I did for this one I posted something saying hey I'm gonna do it tomorrow and then I put something up that you could that clearly said hey it'd come on this time and it's going to start um in general put up more content I when I started I was able to do a video every single week um I only had one kid then that was a couple of years ago um now it's much tougher I'm lucky if I get one out every I aim for every I try to get it I don't try to not that I try to not let three weeks pass without doing one I try to at least hit that but they take a while to put together and I have very little time outside of work and two kids and wife and family and everything we have to do there's just so little time left in the day I'm doing this at 10 to 11 at night when I should be talking to my wife or sleeping um to squeeze in something like this and there's prep and there's editing there's there's a lot that goes into it and I love doing it I really do and I wish I could do it more I wish I could create more course content do all kinds of stuff that I would love to do more of these live streams um but I put them out as much as I can I hope you guys still enjoy them and uh so yeah longest palindromic substring that would be kind of a fun one so yeah um yeah I should probably go to my wife uh she's expecting me told her 11 o'clock I'm a little bit after so I can't thank you all so much for joining um it was a lot of fun I'm glad it worked out um yeah thanks guys so much let me know what else you'd like to see let me know if this was awful or if this was good and yeah I will see you all next time thank you so much for joining take care after that I gotta figure out how to end it stop streaming