today i'm going to show you a way you will never have to write another getter or setter in your java programs again my name is john i'm a lead java software engineer and i love sharing what i've learned in a clear and understandable way so if you'd like to see more videos like this be sure to subscribe so you don't miss each new video i also have a full java course available in the link down in the description if you're interested you probably know all about getters and setters in your java classes right the basic idea is you can encapsulate the fields in your class by making them private but then making those fields accessible to outside classes through accessors and mutators getter and setter methods but it takes time to create all these methods especially if your class has a whole bunch of fields you have to create getter and setter methods for each of them what if i told you there was a way you can have the getter and setter methods available to you but not only do you not have to type them but you will never even see them in your classes they won't even clutter up your code at all so for example here in this cat class right now these fields are private so to be able to access them or change them we need to write getter and setter methods for example for this name field if we wanted to write a getter we would just say public string get name and all it does is just return this dot name the name field on this particular cat along the same lines if we wanted to create a setter we just say public void set name we'll have to pass in the string name that we want to set the name value to and we just take this dot name and set it to the name variable being passed in they're easy methods to write but it's just busy work you're just wasting time if you don't want to type these out yourself one way you can have these autogenerated is by using the tools in whatever ide you're using either like eclipse or intellij here i happen to be using intellij and so what i can do is i can rightclick on the field i want to write the getters and setters for and then go to refactor and then go to encapsulate fields and then select every field that you want to create your getter and setter for we'll keep both the get and the set checkbox check because we want to create a getter and setter and we can click refactor and that will automatically generate the get weight set weight get age and set age methods so that's pretty cool and ite does make it a little less painful you at least don't have to type it out but look at what this does to your code now instead of just having a few fields in your class name weight and age you now just have a bunch of extra boilerplate clutter code just to get and set each of your fields i'm going to show you a way you can get rid of all of this clutter in your code and still have the getter and setter methods available to you to use we can do that with something called lombok it only takes a couple of minutes to add lombok to your code and never have to see another getter or setter ever again you can download lombok at projectlombok.org download i'll have a link down in the description and just click this giant download button your browser might give you a warning like chrome does here that's because you're actually downloading a jar file a java library but we know what we're doing so we can ignore that and go ahead and click keep and it'll download the file how you need to install it kind of differs depending on which ide you're using whether you're using intellij or eclipse i'm gonna go over intellij first it'll just take a second and then we'll move over to eclipse and show you how to do it there to add the lombok library to your project just go over to your project explorer here under your external libraries here there's this folder that shows all of the current external libraries you're using just right click on that folder and click open library settings from here click on libraries click the plus to add a new library and then select java and then navigate to wherever you have the lineback.jar file downloaded so for me i have it in my downloads folder i just click almbac.jar and click ok and you can click apply here just to be sure and then click ok and once you've done that you should see this lombok library added to your external libraries list and if you're advanced enough to be using something like maven or gradle just do a quick search for what dependency you have to add to your project in order to pull down the latest version of lombok and you'll have it in no time okay so now that we have lombok how do we use it well first things first let's go ahead and get rid of all of this extra boilerplate getter and setter code we will now never have to see them again let's say we want to create a getter for every single field in this class all we have to do is add this at getter annotation here above our class declaration and we'll import that class lombok dot getter guys that's it each of these fields in this class now actually has a getter method so what happens is when this class gets compiled lombok is actually going to automatically generate those getters and put them into the class file that's generated when this program is compiled so the getters are going to be in the byte code but you never have to actually see them in your java file here so they don't clutter up your code at all but they do exist not sure if you believe me let's give it a quick try let's go back to our main class here let's go ahead and create a new cat object so we have cat my cat equals new cats now remember we don't actually have our getter methods written here anywhere however we can still call mycat dot get age get name and get weight intellij knows that lombok is going to automatically create those getter methods at compile time so it knows that they're available for us here to call so we can call my cat.getage mycat.getname and mycat.getwait and the same goes for the setters so right now we can't call any of the setter methods they don't exist but we can create them with lombok without having to write them by just adding another annotation here at setter we'll go ahead and auto import that as well lombok dot setter now if we go back to our main method we can see that we now have set age set name and set weight all available for us to use how awesome is that right i mean look at this class all we have is the three field declarations here name weight and age and we didn't have to clutter the code with any gutters and setters at all all we had to do is add these annotations and we get those getters and setters written for us we never had to type anything and we never even have to see them quickly let's talk about how to use lombok in eclipse and then we're going to come back and show you even more mindblowing stuff you can do with lombok if you're using eclipse there's just a couple more steps but it's still super easy to do first what you actually want to do is go back to your lombok.jar file that you downloaded and double click on it and what it's going to do is open up this installer and it'll scan your drive for any ide installations that you have and it should find your existing eclipse installation if it doesn't just click the specify location button and go to wherever you have your clips installed then just click this install update button here it'll basically immediately finish install successful if you don't do this for eclipse eclipse doesn't really realize that lombok is going to automatically create these methods for you and so it tells you that they don't exist it doesn't really realize what's going on intellij knows about lombok and has all that functionality built in but eclipse doesn't yet so you just have to go through this one small extra step if you had eclipse open while you did that you're going to need to restart eclipse for your changes to take effect then back here in eclipse right click on the project that you want to use lombok for then go over to build path and configure build path so you should be under java build path here then click on the libraries tab then click on the class path here and then click on add external jars and then navigate to wherever you downloaded the lombok.jar file and doubleclick it you should see lombok.jar added to your class path and hit apply and close and then the lombok.jar file should show up here under referenced libraries now that you've gone through that lombok installation and added this library to your project go ahead and add these same gutter and setter annotations that we added over in eclipse and you're good to go and i told you i would tell you some other things lombok could do that would just blow your mind automatically adding getters and setters are just a tiny portion of what lombok can do for you let's talk about just a few more so you're probably also aware in your classes that you're also supposed to add a public boolean equals method to each of the classes that you create that just tells you whether this object is equal to some other one that's passed into this method of course that might sound simple but if we go and look over this example of a good equals method look how complicated it is first you have to do the cell check then you have to do a null check and then you have to do a type check and you have to cast it to that type and then you have to compare each and every field on an object to see if they equal each other and then you can return with those two objects are equal now this is crazy on top of that there's a hash code method that you're supposed to implement in all of your java classes well instead of doing all of that yourself you can actually just add another annotation called equals and hashcode this annotation will automatically add a full featured equals method and a hashcode method to your class without you having to lift another finger on top of that the same thing goes for a tostring method so you know this public string to string method that you're supposed to override in all of your java classes you know basically what is supposed to do is create a good string representation of your object well lombok can automatically generate that method for you too and if you want to have it do that just go ahead and add another annotation at tostring that automatically adds a great twostring implementation that prints out all the values of your private fields in your class that's all super awesome right but it gets even better let's say you want all of this you want getters you want setters you want equals and hash code you want a tostring method well you don't even have to add all these different annotations what you can do is just add an annotation called at data and go ahead and import that the data annotation gives you all that stuff that we just listed without having to write anything and without anything cluttering up our code at all with just one tiny annotation one really cool thing that we can do if we're using intellij we can actually see the exact code that lombok is going to generate behind the scenes and all we have to do to do that is right click on the class name and go to refactor and then go down to d lombard and you can kind of take a guess at what that's going to do you can select any annotation that you want to d lombok here we only have at data so we'll just click add data and watch what it does so it has written out everything that lombok gives us that compile time behind the scenes but it just shows it to us here so it gave us a constructor all the getters and setters for all of our fields this giant full featured equals method this giant fullfeatured hash code method and this great tostring method that prints out the values of all of the private fields in our class so look at this look at the difference here look at this giant class full of clutter and extra code that is prone to bugs versus getting rid of all of that and just having this nice clean class with an at data annotation that takes care of everything for you now i'll say this just scratches the surface of what lombok offers there are ways you can customize each of these annotations if you want to include or not include certain fields in having a getter or setter or you don't want to include them in your equals method or maybe your tostring method and you want to customize it that way lombok allows you to do all of that stuff just within the annotations so let me know if you want to see more videos like that in the future but for now if you want to look into yourself go ahead and check out lombok's website projectlombok.org it has all the information that you need but lombok is really one of those little known things that i use in my job every single day and it makes my job so much easier and i don't have to look at crazy cluttered classes full of getters and setters and equals and hash code methods that are all you know written by junior developers that don't really know what they're doing this takes care of all of that for us and we never have to worry that it's done incorrectly so again let me know if you want to see more videos about lombok in the future and to be sure you see those videos and any of my other java tutorials in the future be sure to hit the subscribe button if you really want to support the channel you can do the youtube trifecta of hitting the like button hit the subscribe button and leaving a comment i really do appreciate it thanks a lot for watching and i'll see you next time