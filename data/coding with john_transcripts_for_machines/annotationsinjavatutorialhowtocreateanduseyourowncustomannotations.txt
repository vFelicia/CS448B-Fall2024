annotations are a really cool and useful part of the java language but how can you create your own custom annotations that you can add and then use in your own code in this video we'll go over how to create custom annotations for classes methods and variables my name is john and i'm a lead java software engineer i also have a full java course available in the link down in the description so go check it out but first thanks to mailgun for sponsoring this video mailgun is how modern companies work with email mailgun is easy to use has amazing worldclass support and simple but powerful apis that smart developers can use to reach customers at scale so their organization can grow faster they also have a send time optimization feature that automatically finds the perfect time to send an email to each and every individual person on your list at the exact time that they're most likely to engage you can send and track transactional and marketing messages remove invalid email addresses from your list or prevent fake signups from your list in the first place easily their team of experts can help you improve your email deliverability and also drive higher conversion rates with its powerful email api and intuitive email marketing solutions mailgun works through the entire email lifecycle from conception all the way to delivery and it does that for more than 240 billion emails a year for companies like wikipedia dhl toast lyft and microsoft mailgun makes it easier than ever to build connected experiences through email thanks again to mailgun for sponsoring this video try mailgun today by using my link down in the description mailgun.com john now let's get to it so first what exactly is an annotation annotations are a kind of metadata they're supplemental information that you can put into your java code they don't directly affect the code that you annotate but those annotations can be processed by something else such as by the compiler or at run time with some code that you write yourself if you've been coding in java for a while there's probably at least a couple of annotations that you're already familiar with one example is suppress warnings for example if i create some variable like this mycat variable but i never actually use it anywhere else in my code the code will compile just fine but i'll get a warning that my cat is never used most of the time you would want to get rid of a warning like this by either using the variable somewhere or just getting rid of it completely if you don't want to use it but if for any reason you're okay with whatever it's warning you about you can use this suppress warnings annotation to get rid of that warning in the parentheses here you have to specify what kind of warning that you want to suppress so to suppress an unused variable warning you just pass in unused and then you can see the warning goes away so this is an example of an annotation all annotations start with the at symbol followed by the name of the annotation for some annotations that's all you need but for other annotations you can pass in parameters in parentheses afterwards and for some annotations that's even required like it is for suppress warnings here later on in the video we'll talk about how you can add your own custom parameters to your annotations as well and how you can process them in your code annotations can be added to just about anything in java so that means classes variables methods method parameters and even other annotations you'll always put your annotation right before the thing that you want to annotate so for a variable like this we'll put it right before the variable declaration they can technically go on the same line too that's totally fine but most of the time you'll see them separated by a line you're probably familiar with other builtin annotations too but let's get right to the fun part how do you build your own custom annotations let's get into that right now let's say that we wanted to create an annotation that would just apply to a class so we could add it to our cat class here just above the class declaration and we could call it a very important so this can just be used as a label like a signal to some other class that is processing these annotations that this class is very important of course this annotation doesn't exist yet so how do we go about creating it well it turns out that creating an annotation is actually very similar to creating your own class so if we were going to create a new class called very important we would just say public class very important the only thing that we have to do to make this an annotation instead of a regular class is just change class to at interface and that's it that's technically all that you need to create your own bare bones custom annotation however there are a few things that you're going to want to customize about your annotation before you can actually do something with it and ironically to customize your annotation you're going to be using some annotations there are two main annotations that you're going to want to add here the first is at target target allows you to specify exactly which kind of java element this annotation is valid to be used on so in this case we said that we wanted this annotation only to be used on a class and this is where we can specify that if you're okay with this annotation being used on any type of java element that's totally fine and you can leave this out but most of the time you're going to want to specify it to tell java what type of element you want this annotation to be valid for you'll pass in an element type since we want this annotation to be valid only on classes we will use element type dot type so if we go back over to our cat class you can see that we have no errors when we apply the annotation to the class but if we try to annotate a method with the same annotation we get an error and it says a very important is not applicable to method if we did want it to be valid for methods as well we could pass in multiple element types to this target annotation here to do that you just have to pass in your multiple element types as an array so within curly brackets you can just specify your multiple element types separated by commas so elementtype.type makes it valid for classes and elementtype.method will make it valid for methods as well so if we hop back over to our cat class we no longer have an error and you can see over here just all the different element types we could add an annotation to there's everything from a field to a constructor just whatever you want now the next annotation that you're going to want to add to your annotation is one that's called retention this one is a little bit more obscure and can be tough to understand at first 99.9 percent of the time you're just going to want to use retention policy dot runtime runtime just tells java to keep this annotation around through the actual running of your program so that other code can actually look at that annotation and use it while the program is running and that's how we're going to be processing annotations in this tutorial so if it confuses you at all don't worry about it too much and just use runtime the other two possible values you could send in here are source and class source means that java will get rid of this annotation before it even starts to compile your code so that's only used for annotations that only matter before code is even compiled like the suppress warnings annotation class means that java will keep your annotation around through compilation but once your program actually starts up at runtime it'll get rid of it and then of course runtime means that java keeps this annotation around throughout the actual running of the program and then we can access this annotation while the program is running using some fancy reflection code and that's what we're going to be doing here so now that we've created this very important custom annotation and we've applied it to our cat class let's go back to our main method and show how we can go about processing this annotation so we have this my cat object that is an instance of the cat class that we annotated so what we can do is look at the class of this my cat object and then check whether that class has been marked with the very important annotation and then we can have our code do whatever we want it to if it sees the annotation on that class so to do that we'll call mycat.getclass because the class is what has the annotation on it not the object and then we can call a method on it called is annotation present and then we want to pass in as a parameter to this method the name of the annotation that we want to check for so we'll pass in very important.class this method returns true if this class has been annotated with very important and false if not so all we have to do is just surround this with an if so we can say if this class has been marked with the very important annotation we'll just print out this thing is very important and then otherwise if it doesn't have that very important annotation this thing is not very important now if we go ahead and run our program because the cat class has been annotated with very important we get this thing is very important but if instead we had some dog we'll call it my dog equals new dog we'll call him jerry this dog class does not have that annotation so if we run this instead checking my dog instead of my cat we get this thing is not very important so the whole idea here is that you can just look at an object's class and see if that class has the annotation that you're interested in and if it does have that annotation you can put whatever code that you want it to do here of course it can be something super simple like this but it can be as complicated and involved as you want it to be and so that's what can make these annotations so powerful but the basics of just checking for the presence of an annotation is pretty simple next let's create an annotation that's intended to be used only on methods and show how you can process that we'll say public at interface we'll call it run immediately for the retention we'll use the same retention policy as before retentionpolicy.runtime but since we want this to apply only to methods we will use a target of elementtype.method over in our cat class we have a couple of methods that we could add this annotation to let's go ahead and add it to this meow method that all it does is just print out meow but we won't add it to the eat method what we're going to do to process this annotation over in our main method is to use reflection to literally loop through each of the methods in this class and for each method if we find that it's annotated with run immediately we are going to run that method immediately right there so back over here in our main method in order to loop through all the methods in the class we're going to use a plain old for loop now we can get all the declared methods in a class just by calling the get declared methods method on that class this returns an array of method objects and all we have to do is just loop through them so we can just say for each method in this class we will check to see whether that annotation is present on that method and that's done almost exactly the same way we checked for an annotation on the class we can just call method dot is annotation present and then pass in the annotation that we want to check for so here we want to check for run immediately dot class so we said that if this annotation is present on a method we want to run that method immediately right here so here's how we can do that using reflection we can actually use this method object that we have identified has this run immediately annotation we can call the invoke method on it and then we have to pass in as a parameter the object that we want to call that method on so since over here in our cat class we only have one method that is annotated with run immediately what it should do is loop through all the methods that are in this class which is just these two and if it sees that it has this run immediately annotation it should invoke that method immediately so what we should see it do is run this meow method but not this eat method okay so it says meow but it does not say munch so it is immediately invoking the meow method but not the eat method i mentioned earlier that we were going to show how you can add your own parameters to your custom annotations so let's do that now with this run immediately annotation let's say that we wanted to add a parameter for the number of times that it should run that method immediately so for example if we wanted it to run it three times we could pass in times equals three but how do we change this run immediately annotation class to be able to accept that times parameter well right here in the body of our annotation class we can just declare an int times but one thing is a little bit unusual here we technically have to make this a method and not a normal class field so to do that we have to add parentheses like this but for all practical development purposes this basically acts exactly like a normal field so now we can specify this int times parameter when we use this annotation and then back over here in our main method where we're already processing this annotation getting the value of that times parameter is really easy so here inside this if we definitely know that this method has the run immediately annotation first we actually have to retrieve this run immediately annotation from that method and we can actually put that in a run immediately object we'll just call it annotation and we can get that annotation from the method just by calling method dot get annotation and then we again pass in the annotation that we want to retrieve so run immediately dot class so now that we have this annotation object we can just get the times parameter off of that annotation just by calling annotation dot times we said that we wanted to use this times parameter to be the number of times that we invoke this method so here's how you can do that you can just put this invoke call inside a simple for loop so we can say 4 int i equals 0 and we'll keep looping while i is less than the number of times specified in the annotation parameter i plus plus put this invoke call inside the for loop and that should be it now we've specified that we wanted to run this meow method three times so hopefully when we run this program we will see it running the method three times and we do there are a few things to note about these parameters though one thing is that you can't use just any type you want for these parameters they can only be a primitive type like this int a class type a string or an array of any of those so if instead of the int type here we gave it a type of dog we get an error that dog is an invalid type for an annotation member if you do want to use an array as your parameter you just need to add brackets to the type here like this the second thing to know about these parameters is that you can add default values if you want to so it might make sense to default this times parameter to 1 so if you don't pass in a number of times that you want it to run the method it will only run it once to do that all you have to do is after the declaration here is just put default and then whatever you want the value to be if you don't specify any default here you're required to pass in that parameter when you use this annotation but if you do have a default value then it's optional and you can leave it out next let's create and process a custom annotation for a field in a class let's say our new annotation is only intended for string fields on a class like this name so let's go ahead and create it so public at interface let's just call it important string and again we're going to use the same retention policy of runtime but since we want this annotation to be valid only for a field on a class we're going to use element type dot field for the target so now we've created this important string annotation let's go over to our cat class and annotate this string name field with important string now back over in our main method we're going to process this annotation similarly to how we processed the method annotation here we can use mycat.getclass.getdeclaredfields to get all of the fields declared on that class so we can loop through each of the declared fields in the class just like we did with methods so for each field we'll call it field in the declared fields in the class we will check whether that important string annotation is present on this field and then if it is we can just print out the value of that string but in all uppercase because it's so important so at this point in the code we know that this field does have this important string annotation so what we need to do is get the value of this field on this object that we're interested in and we can get the value of this field on this object by calling field dot get and then passing in the object that we want to get that field from so we'd pass in my cat so because this could technically be any type and won't necessarily only be a string first we have to put it into an object variable we'll just call it object value so because this variable is an object and not a string to work with it as a string we first need to safely cast it to a string the easiest way to cast it to a string safely is to just say if this object value is an instance of string now in newer versions of java you don't even have to explicitly cast this object value to a string instead all you have to do is put in the name of the variable that you want it to have for its value as a string so let's say we put in string value here so what this will do is check to see if this object value object is an instance of string and if it is it will automatically cast this to a string and put it in a variable called string value which we can then use inside this if pretty cool we said that for any field that has this annotation we just wanted to print out its value in all caps so we could do that pretty easily here by just saying system.out.printline and then taking the string value and calling to uppercase so since our cat is named stella this should print out stella in all caps when we run our program so let's see and there we go stella and yes i actually do have a cat named stella and this is a picture of her here she's the tiniest sweetest little kitten if you enjoyed this video or learned something please let me know by hitting the like button and be sure to subscribe so you don't miss each new java tutorial and be sure to check out my full java course in a link down in the description if you're interested thank you so much for watching i really do appreciate you being here with me i'll see you next time