in this video we're going to be coding the selection sort sorting algorithm from scratch in Java it only takes a few lines of code so it's a great programming exercise for beginner programmers I also have a full Java course available and a link down in the description I've recently added a whole lesson all about Java streams to the course that a lot of people have been asking about so go check it out okay so we'll jump right into the code in just a second but first it's a good idea to talk about exactly how the selection sort algorithm works so let's say you have an array of integers like we have here the job of the selection sort algorithm or any sorting algorithm is to put these elements in their natural order which for integers is going to be least to greatest so let's look at this set of integers as an example so we start at the first position here and what we're going to do is search from this point in the array all the way to the end and remember the index of the smallest number that we find so we do that starting at four so the current lowest number we've seen is four and then we look at five now as five less than four no so 4 is still the lowest that we've seen and then we move on to 1 is 1 less than four yes it is so so far one is the lowest number that we've seen and then we'll move on to the two is two less than one no one is still the lowest and then we move on to three is three less than one no one is still the lowest so now we've gotten to the end of the array and we know that the number one is the lowest number that we saw so what we're going to do is Swap this one with this first position that we were looking at so we put the one over here and this 4 over here so now we know that this one is the lowest number in the entire array and that this one is definitely in the right spot next we do the exact same thing but we start at the next position in the array so we're looking at five five is the current lowest number that we've seen and then we move on to four is four less than five yes so now four is the lowest number we've seen then we move on to 2 is 2 less than four yes it is so now two is the lowest we've seen and then we move on to three 3 is not less than 2 and we've now reached the end of the array and 2 is the smallest number that we've seen so what we're going to do is take this 2 and swap it with that position that we started at now we know that the one and the two are in their proper positions and we can move on to starting with this next position and we do the exact same thing we start here and find the lowest number so we start with 4 5 is not less than four three is less than 4 and we're at the end of the array so we do the swap Again by putting the 3 here and the 4 here and now we know the 1 2 and 3 are in the right positions and we move on to the next position in the array so we start with the number five and then is four less than five yes it is we reach the end of the array and 4 is the smallest number we've seen so now we swap these two now once we're looking at the very last number in the array we know that there's nothing past it to switch with so we know that it's automatically already in the right place and so that's it we're done we now have the array of integers in the correct natural order now that we understand how selection sort Works let's jump right into the code okay first let's take care of some of the setup the first thing that we're going to need is an array of ins to sort so let's go ahead and create that we're going to make an INT array we'll just call it numbers equals new int array we'll give it some way larger arrays later to see how well the sort performs but for now just for testing purposes we'll start with just having it sort an array of 10 ins okay so now we want to generate some random numbers to put into this array so to Generate random numbers in Java we'll use the random class not just some random class the random class equals new random okay so now we're going to Loop through this numbers array filling it up with random ins so to do that we'll use a for Loop or and I equals zero we'll Loop while I is less than numbers dot length I plus plus all right so for each position in this array we're going to assign it a random number so we'll set numbers at I equal to random dot next int now let's use a wide variety of ants anything between like 0 and 100 000. so now just for testing purposes let's go ahead and print out our array just to make sure we're filling up the array how we think we are now a good way in modern versions of java to get a string representation of an array is to use arrays dot to string and then pass in your array now let's go ahead and run this and make sure we get a nice random selection of ins 10 ins they look pretty random between zero and a hundred thousand so we're all set next what we want to do is make the call to our not yet implemented selection sort method and then what we'll do is implement the selection sort algorithm inside that method so what we'll do is say selection sort and then pass in our numbers array now it's of course complaining that this method doesn't exist yet but IntelliJ makes it easy to go ahead and create this method automatically but then back up here right after we call our selection sort method what we want to do is print out the array again which should at this point be sorted in order from least to greatest so now our only job is to implement the selection sort algorithm here in this method the first thing that might be kind of useful to have here in our selection sort method is a variable that holds the length of our array just because we'll need it in a couple of spots in the algorithm so we'll just create an INT we'll call it length and set it equal to numbers dot length all right now remember we want to start with a loop that goes through every position in the array and then within each iteration of that Loop we'll have another loop that will try to find the smallest element from that point on in the array okay so let's start with the outer loop we'll say 4 int I equal to zero so that's starting at the very first element in the array the zeroth element we'll keep looping while I is less than the length of our array and of course iterate I each time okay so now within each iteration of that Loop we want to find the smallest number from that point on in the array inside this Loop first we're going to want a couple of variables one will be the lowest number that we've found so far while iterating through the rest of the array the second variable will be the index the position in the array where we found that smallest number and that's because once we identify that smallest number we need to know where it was in the array so that we can swap it to the front where it belongs so first let's create a variable for the Min number that we found so far and we'll initialize it to this first value that we're looking at so for example if our outer loop is currently at this number four we'll start with our Min being 4. and then iterate from there to the end of the array trying to find the smallest number so we'll set our Min equal to our numbers array at I and then we'll want that other variable for the index where we found that Min so index of Min we'll set that equal to I so now is when we're going to have this inner loop that Loops from our current position all the way to the end of the array trying to find the minimum number so for that we'll use another for Loop and since we already used I we'll use J for this one and we're going to initialize it to I plus 1. so that's going to be just one past this current starting position and we're going to keep looping while J is less than the length of our array and then of course iterate each time with J plus plus and actually one thing I missed up here in our outer array we don't want to go all the way to the end of the array for this remember we can stop at the second last position in the array because once we get to the very last position there's going to be nothing to swap it with we know that it's already where it goes and so there's no reason to actually look at it so over this outer loop instead of looping while I is less than length we can Loop while I is less than length minus one okay now back to this inner for Loop so it'll be looping from one past our current position in the array all the way to the end trying to find the minimum number so for each number that we run into we're going to say if the value of our numbers array at that position J is less than our current Min then we have found a new smallest number so we need to set our Min equal to the value of our numbers array at position J we have a new minimum and then we want to remember where we found that minimum two so we're going to set index of Min equal to J so now once we are done with this inner for Loop once we have hopped out of this inner for Loop we should have found our minimum number and we should know exactly where it is so going back to our example here let's say we were starting with this number four and we Loop through the entire rest of the array to find the minimum and we've identified oh one is our minimum so we want to take where we found that minimum and swap it with the number that we were starting with like this so here it'd probably be a good idea to implement some kind of a swap method now there's a few things we have to provide to a SWOT method first is the actual array inside which we want to swap two positions and then we need to send in the two positions that we want to swap values at so here we want to swap the numbers that are at position I with the index where we found that minimum number we want to take that smallest number that we found and move it to its correct position in the array all right so now let's go ahead and auto generate this method and we'll rename these in parameters here to make it a little bit more General we'll just call it int a and int B now to do a simple swap of two elements in the array first you're going to need some kind of temporary variable to hold one of them while you do the swap so we'll set int temp equal to our numbers array at position a and then we're going to set our numbers array at a equal to the value of our numbers array at B and then all we have to do is set the value of our numbers array at b equal to that temporary value that we set off to the side now I think that should be it now once it gets out of this outer for Loop the entire array should be sorted in the correct order let's give it a run and see if it works okay so here is our initial completely unsorted array and here it is afterward looks like in perfectly sorted order awesome so we've successfully implemented our selection sort algorithm now comes the fun part where we get to see how well it performs with larger and larger arrays of ins so first let's just take a second and set up some really quick uh timing code so right before we call our selection sort algorithm we're going to create a long to hold the current time we'll call it start time equals system dot current time Millies and then we'll do the exact same thing afterwards but we'll call it end time and then right before we print out our sorted array we'll print out that it took however many milliseconds so we'll calculate that as just end time minus start time and then Ms four milliseconds okay now let's go ahead and give this a run to make sure it works for our teeny tiny array of 10 ins alright so for an array of 10 ins it took basically no time at all which is to be expected now let's take it up a notch and let's say we wanted to sort out let's just say 10 000 ins okay so for ten thousand it went from 0 to 87 milliseconds so it returned pretty quickly but it's kind of starting to slow down now let's do 10 times that and step it up to a hundred thousand here we go okay it's printed out the before State the unsorted array and it's still still running oh okay it finished so it took about 6 500 milliseconds about six and a half seconds to sort a hundred thousand ins so it's starting to get noticeably slow let's try just stepping it up to three hundred thousand taking its sweet time on this one foreign you guys played that new Zelda game I hear it really does live up to the hype I just haven't had time to play it yet but I am looking forward to it oh looks like it finished okay so 300 000 ins took 51 936 milliseconds so about 52 seconds almost a full minute so let's go ahead and step it all the way up to 1 million good luck computer sorry all right yeah so I think I'm gonna let this do its thing and I'm gonna go do something useful with my life while it runs so I'll see you when it's finished all right so have we finished yes we have and only took 645 000 milliseconds like 10 or 11 minutes that's a pretty long time so you probably wouldn't want your uh production ready Enterprise application to be using selection sort to sort a million ins so we could do 10 million 100 million I'll leave that as an exercise to you the viewer if you have the time to dedicate to that go ahead and leave in the comments below how long it took for your computer to I don't know Source 100 million ins with selection sort now the reason this algorithm is so slow especially compared to things like quick sword merge sort is because selection sort has a Time complexity of what's called Big O of N squared now what that means is as the size of the array that you want to sort grows the time it takes to sort that array grows exponentially now the reason that it's Big O of N squared in particular is that our algorithm has nested for Loops that Loop through every element in the array within itself so that results in a Time complexity of Big O of N squared now if you'd like to code some way faster sorting algorithms check out my videos on quick sort and merge sort if you enjoyed this video or learned something please let me know by leaving a like and be sure to subscribe so you don't miss each new video as always thanks so much for watching I really do appreciate you being here to code with me and I'll see you next time