one of the biggest points of confusion in java is whether it is passed by value or past by reference we're gonna clear that up once and for all in this video my name is john i'm a lead java software engineer and i love sharing what i've learned in a clear and understandable way so if you like this video consider subscribing so you don't miss each new java tutorial i also have a full java course available in a link down in the description if you're interested at the risk of everybody just leaving the video immediately i will answer the question right away java is always pass by value 100 of the time but the deeper answer is a lot more subtle than that what java actually does is pass references by value let's start with a concrete example so we've got this class cheese all it has is one in field a level of stinkiness so you know exactly how stinky this cheese is and a gutter and setter for the level of stinkiness field so in our main class let's create a cheese my cheese equals new cheese and we're going to set its level of stinkiness to 10. so pretty stinky and if we wanted to we can go ahead and print out that level of stinkiness that we just set and of course that prints out 10. but what if we added a method down here private static void increase stinkiness that takes in a cheese object and sets its level of stinkiness to whatever the current level of sneakiness is plus one and then back up here we could call increase stinkiness and pass in our my cheese object we said java is always passed by value right so what do you think it's going to print out here and it prints out 11. so this method was able to increase the level of stinkiness of this my cheese that we passed in so you might think here that because java is passed by value that any changes to this methods cheese variable wouldn't take effect on the my cheese variable passed into the method but it did so what exactly is happening here let's demonstrate with a highly advanced whiteboarding session so first we've got our mai cheese variable right as you probably know in java this variable doesn't actually hold the object what it holds is a reference to a cheese object so that's basically an address in memory right like zero zero zero one so that points to a certain spot in memory that holds your cheese object with a level of stinkiness of 10. so what's happening when you pass in this my cheese object into this method as a parameter well since java is passed by value and the value of this mycheese variable is the address of a certain object in memory what it does is it copies that value it copies that memory address that's the value of that mycheese object so because it copies that value that memory address this cheese variable ends up pointing to the exact same cheese object in memory as the my cheese variable so in here when we increase the level of stinkiness of this cheese it is changing the contents of this object in memory from 10 to 11. and because these two variables kind of share this same object in memory that change that we made to the cheese variable in the method also takes effect in the my cheese variable that was passed into the method so that's why java can sometimes look like it's passed by reference because it kind of seems like it just passed in a reference to that object but what it's actually doing is passing in the value of the memory address of that object but here's something really weird what if we change this up a bit what if instead we took this cheese variable and set it equal to a new cheese and then set its level of stinkiness to 756 you would think that from what we just saw it would print out 756 here right but it prints out 10. so what's up with that why did what we had before change the contents of this mind cheese variable but this doesn't change it at all and the level of stinkiness here is still 10 on the main cheese variable the way the variable is passed in is still exactly the same as before it's still passing in the value of the address and memory of the maichi's object the key difference is here where we're setting this cheese variable to be a brand new cheese object so when the method starts this cheese object has the exact same address and memory as my cheese but when we say cheese equals new cheese what it's actually doing is creating a brand new cheese object in memory and pointing this cheese variable to it and so it'll now have a different address in memory it'll have something like zero zero zero two and then it's setting that cheese object's level of stinkiness to 756. and this association that it had with this original cheese object up here is completely gone so here we're setting this variable to be a brand new cheese object this cheese variable in the method no longer points to the same address and memory as the maichi's variable that was passed in so that's why changing this new cheese's level of stinkiness to 756 has no impact at all on the my cheese variable that was passed in so if in your method you modify the object that the variable passed in was referencing that change will impact the variable passed in as well but if instead you completely reassign that variable inside your method then it'll have no reference at all to the object and memory that was being referenced by the variable passed into the method that's why it's so important to know that this is how it's working because these differences in functionality that we just saw can be super confusing to a java beginner in some cases it does affect the variable passed in but in others it doesn't and it can feel like a complete mystery why unless you know what we just went over this applies to any type of variable you pass into a method it doesn't matter whether it's an object or whether it's a primitive like an int or a long 100 of the time java is passed by value but when you have an object like cheese that value it passes in is a memory address so it can appear to be passing by reference if you enjoyed this video or learned something let me know by hitting the like button if you have any questions or i got something wrong feel free to yell and scream at me in the comments and if you really want to support the channel you can do the whole youtube trifecta of liking commenting and subscribing thanks so much for watching and i'll see you next time