we talk a lot about how to make your java code clean and easy to read and maintain today we're going to have some fun and talk about ways we can make some truly terrible java code my name is john i'm a lead java software engineer i also have a full java course available and a link down in the description if you're interested but i promise we won't be learning any of these terrible techniques in that course first you've probably heard that to keep your code clean and reusable you should create methods that only do one thing and do it well like this print board method here all it does is take in a tictactoe board and print it out to the console it does exactly what the method name says it will do pretty boring if you ask me predictable and just not exciting that's why instead of having a whole bunch of singleuse methods that just do one thing i like to have just one method that can do anything i want it to do let's call it do anything so sure yeah it could print out a tictactoe board but it can also do anything else i want it to like for example call my mom phone phone equals new phone phone dot call mom and it can feed my cat cat feeder feeder equals new cat feeder feeder dot feed new cat or it can even calculate the monthly payment on my mortgage this makes your method super versatile it can do anything you want now i know what you're thinking but john you're thinking what if i want to call my do anything method to feed my cat but i don't want to call my mom or calculate my house payment don't worry i am way ahead of you you can finetune your method by taking in a string parameter of what to do and then have if statements that check the value of that string and only do the thing that you want it to do for example if what to do dot equals print board then we'll print the board else if what to do dot equals call mom then we can call mom and so on down the line for everything you want your method to do or better yet instead of having one string parameter you can have a whole bunch of individual boolean parameters one for each thing the method can do so like boolean print board boolean call mom boolean feed cat calculate mortgage boolean take out trash and then just check the value of any of those booleans to see if your method should do that thing so if print board is true we'll print the board and if call mom is true then we'll call mom so now up here in my main method i can call do anything false true true false true and it will feed my cat call my mom and take out my trash what could be easier to remember than that next in your programs you're probably declaring variables in your methods right where you need them and then passing those variables into any other methods that you make as needed but that means you won't have access to every single variable in your program from every single place in your program what are you going to do if you need some variable value and a method that you're writing sure you can just add it as another parameter but that's the oldfashioned lazy way to solve the problem instead what you can do is declare all the variables you're ever going to need across your entire program as globals just in case you end up needing them somewhere you don't expect so if you have something like a tic tac toe board that you're passing around to various methods in your program you can rip it right out and add it as a global and be sure to make it public static to guarantee it can be accessed from anywhere do you have variables to hold what move the player chose or what move the computer chose that's right make them globals do you have an int i variable for your for loop yep you guessed it global a truly great program has all the variables it will ever need declared as globals there are no more restrictions to any variable at all everything is accessible from everywhere what could be better than that one excellent coding pattern is to just make one huge class called variables and just put all of your global variables in there then when you ever need to use any of these globals you can just call variables dot whatever variable you want and you can do that everywhere all across your entire program and you're on your way one of the main benefits to this design pattern is that you no longer have to pass in any variables to any method ever do you know how heavy a 2d array of characters is why bother having to pass that from method to method when each one can just pluck that off the globals list itself this makes your code leaner and faster your computer will thank you you might even want to go over to your variables class and just rename it v to cut down on any unnecessary file size bloat of course all of this means that any piece of code anywhere in your program could alter any variable in a way that another piece doesn't expect which makes it almost impossible to debug when something inevitably goes wrong but that's a small price to pay to be working with cutting edge software development techniques next when you're coding sometimes it might make sense to put a certain chunk of code inside a method so that it can be called and reused from other places in your code without having to write the code again this is okay at first but if you leave it like that it can become problematic just think about it if you're a computer running a program what would you rather do would you rather have a whole bunch of methods hopping from one to another having to pass variables in and out of methods if you're still silly enough not to have all your variables as global or just run one single enormous horrifically complicated method the answer should be obvious so once you're done coding get rid of all those extra methods and method calls and just put the full contents of each method everywhere it was called luckily modern find and replace tools inside your ide were made for exactly this purpose making doing this a breeze so we can just take the entire contents of this print board method and then everywhere print board is called we can just replace that with the entire contents of our method replace all so now we just have the full contents of what used to be the print board method completely written out everywhere that we need to print the board feel free to take a moment to just marvel at how clean and simple our code looks now and keep doing this for all the other methods in your program like this has contestant one method take the entire contents of the method and then search for everywhere that code is being called and replace it with the contents of the method now all the code in this entire program is contained in one convenient method this is the definition of streamlined code last but certainly not least everybody's always trying to find ways to reduce the number of lines in their code right but it's a whole lot of work to really think deeply about what your program is doing and how you might rewrite your code to make it simpler or more efficient or easier to read you're not here to think you're here to code so i think it's best to not worry about how to make your program better at all many programmers don't know or simply forget that you can have multiple statements on one line and you just need to separate them with semicolons this offers a great way to reduce the number of lines in your program again modern ide tools make this extremely easy all you have to do is find and replace all new lines with spaces and replace all and just like that your entire program is now one single line of code just imagine the processing power you're going to save by only having to execute one line of code instead of hundreds or thousands plus as an added benefit if you're running your program and suddenly you run into some kind of an exception you'll always know exactly which line the exception happened on which makes finding and resolving bugs fast and easy of course please don't actually use any of these ridiculously idiotic coding techniques or if you do please just don't join my development team you can get started learning to code java the right way by subscribing and also by checking out my full java course in the link down in the description i hope you enjoyed it and i'll see you next time