all right so hey guys my name is jessica and i'm a senior cs major from university of maryland college park um today we're just gonna be talking about um booleans and boolean expressions and things like if statements so um first like we'll just be going over like what's a boolean um any operators that you'll be like you have to use with booleans and any operations that deal with like that can return like a true or false um next we'll be talking about things like if else statements elsif um switch statements these are just things um these are just conditionals that you can use with booleans and then um i'll give you like resources and if you want to we can go for a workshop otherwise like we can just ask questions or like i'll try to give you guys um trick questions or something like that um again like if you guys have any questions um feel free to just either interrupt me and you if you're comfortable or um just drop a question in chat and i'll try to answer as quickly as possible um if you guys like feel free to let me know if you want like me to go over slide or just slow down or speed up anything like that all right so um first off i'm just gonna go over what is a boolean a boolean is basically a data type um if you remember the primitive types we went over for the second lesson um this was one of the types of variables we covered um it only holds two values true or false and um just like any other nonconstant variable its value can change like depending on um its value can basically change during the course of your code and basically just reflect like the change in the condition so um basically it's just a variable that can hold a true or false value um these are just two examples of boolean so one is like light on which can be true or cloudy which is false so first i'm just going to go over boolean operators so these are operations you can do on a boolean um the first one is this exclamation point which means not um two ands mean and and then these two straight lines they're called pipes this means or um these are just like little operations you can um you'll have to memorize with a boolean any questions about these sweet so i'm just gonna show you guys a demo using um these three operators i'm gonna see if i can share it and i'll just drop the link in chat so um basically this is just a demo showing you guys how these operations work so um i have this program where a equals true and b equals false um and basically if i do a or b um this should print true because a is true and even though b is false um something else is a and b which open false because b is false and then finally not b which would be true um do you guys kind of get how this works so basically or is if both statements or if both statements are false then or will be false but if one or the other statement is true then it will be true and as they either have to they have to be both true to be true if one of the statements is false then a return false completely and then finally not is just the opposite so if we run this this should print true false then true and then just something to um to note so basically um a fun fact is that computers are very lazy they want to they want to do the least work possible so basically how um something like an or statement can work is if a is true then the statement is just confirmed true right i don't even have to check the sec if the second statement is true so if a is true then um java will basically exit this statement and be like this statement is true um but if this is false then i'll have to check the second statement um for another example is like if um a is false over here then the rest of the statement no matter like what the rest of the statement is this and expression is just completely false so if a is false then b will not be checked so b just um basically java just won't even compute b so um but if like a is true then java will have to check if b is false so this can be really helpful if you want to do like little tricky um basically do some tricky programming in java just remember that computers are lazy and for or statements if the first statement is true the second statement won't be checked and for and statements if the first statement is false the second one won't be checked um any questions about this all right sweet so next i'm just going to talk about operators that don't necessarily involve booleans but return of boolean so things like if you're checking an equals like if two variables are equal to each other um you can't it hi about this these don't necessarily involve booleans like you can check if one equals two but one and two aren't boolean types but it will return a boolean so a true or false so the first one is we have this double equals and this compares physical equality so do the two variables hold the same value in memory and then the second one is a dot equals so an equals method and this compares content equality so are the contents of these two variables the same um then we have like greater greater than less than greater than or equal to less than or equal to um i think these last four are selfexplanatory but um to go further into the double equals versus um dot equals um double equals um compares if these variables hold the same value in memory and that equals compares the content so if you remember um in last lesson when we talked about um about reference types reference types um are actually variables that hold addresses right they basically point to the object instead of containing the value of the object so when you have when you have something like that um basically basically um your like the physical memory and content and whatever content that your object has can be different right so you can have two strings that both have like a b c d but they can be in different places in memory so that's why we have this equals equals but a dot equals method so um i think this might be better explained if i show you the demo so if i have um something like if i have if i create two strings and they're both called high so if i have um like this one string will be in one place in memory and then two string will be in a different place in memory so if i compare one string equals equals two string um these two variables are pointing to different places in memory so this would return false because they're technically not the same object right however if i do one string that equals to string this would return true because the content of these these two strings are true are the same all right um and we can also just look at examples of the other the other operators so actually let me just so um the other examples are just like if you have integer a equals 10 b equals 7 um if you do like a um is a equals a double equals b plus 3 then this will return true because 10 equals 7 plus 10 or 7 plus 3. um same same idea for this so like is a less than 10 is 10 less than 10 not not really so it will return false but if i do like is a less than or equal to 10 um you kind of get the idea that like these are basically the same same idea as like in math basically um oh yeah something else about the dot equals um something else to know about the dot equals method is that all objects have this dot equals method and the general rule is unless you're actually checking that like um like the physical equality like are these two objects exactly the same object in like the physical memory space then like you should generally always use the dot equals method um we also have some we also can do like like different um we can also use these same operators with like other primitives so like you have um chart a or symbol one equals a symbol two was b um we can also do like a symbol one less than or equals to symbol two so why would you think this this would print true so how can we basically basically um tell if this character a is less than b um the general idea is just that like like we talked about in the primitives lecture you can basically convert any symbol like abcd yeah exactly so um according to the ascii table yeah according to the ascii table these characters can be converted into numbers so i think a is like 63 or something and then b is 64. so um that's why symbol 1 is less than symbol 2. and then same idea for this so this would print false because 63 is not greater or equal to 6 um 64. 64. yeah however like if you if you try to use like this less than or equal to with like booleans that wouldn't work because um because java will basically be like you can't use this on a boolean um that would it would just throw a compiler error so just be aware of that like even though you can convert characters into numbers um you can't really do the same thing with um booleans any questions about this all right so next um we're just going to talk about um basically if um conditionals basically so things like if statements um is if else if um and then these fancy things called switch statements so the first one is just if else statements um these are just these are base the most basic form of conditionals so like if this is true then we do this action else we do another action um the else is completely optional you can just have one if statement um else is just for like if you want to do something different if the um if the statement isn't true so um yeah this is basically like you would just type it like this so like if parentheses boolean statement um make sure you have these curly brackets and then else curly brackets other action all right so um i'm just gonna go through a basic demo so let me share the code first and then we can talk about what's happening with this so basically in this example code i have um i have a basically a scanner that takes in user input and then we have this um boolean called is hungry um once the user types in like a yes or no after um so like first we'll ask like are you hungry if they use their types in yes or no it'll put basically put the statement into is hungry so we'll basically check against like if user input equals yes then um is hungry will be true so if if the user is hungry um we'll just say let's eat pizza and that otherwise will just print out like go play animal crossing so basically if you um someone's already writing this but hopefully it's not a future so basically we have this program that prince are you hungry if we type in yes seems like we have a bug so why do you think this code wouldn't be working then if we're checking while it's hung user input equals no or yes so right now like our code if i type in like this you'll always type in that so let's basically look at um this loop and see what's up so basically the idea for this loop is that while the user hasn't typed in no or yes in all caps um we'll basically continue printing this until they type in one of these strings however if i type in like yes even if i type in capital yes it won't work and the idea is basically like again we can't have this doubles equals in this um at like as a content equality check so basically um let me just fork this because i think another teacher is using it yeah there's a function to turn all the use user input to all caps so over here i've actually put a line that's like user input that you uppercase so that basically will if i just type in like lowercase yes it will turn everything into all caps and then it should check against this however for some reason it isn't doing that and let me just work this so the other i won't mess up the other teacher's code but there's the issue basically in this conditional check where for some reason this will always return false is it because of it not um not exactly so the idea with this loop is while the user has it typed in um no or yes then it will ask are you hungry and you'll like take in the user input so the like in basic english terms it's like while the user input is not um valid i'll continue printing this prompt put the dot equals method instead of equals equals exactly so what's happening right here is um java is like is this user input exactly this no string or exactly this yes string so like as like as in they're literally the same object however if i like scan this line um they can't they aren't exactly the same object they're the same string like they're the same it's the same word it's not the same object basically so that's why it's always returning like this is always returning like invalid input basically so if i actually change this to like user input equals and then if i change these onto that equals methods instead of um instead of the double equals then this should run um correctly so i should be able to even type in like a lowercase yes and they'll say let's eat pizza or um if i'm not hungry i can type in like lowercase no i go play animal crossing but if i type in something like abc it'll like continue i'm asking until i say yes so that's the general gist and i'm actually gonna sh i'm actually gonna share this corrected code just so you guys have reference to like what's the actual working code inside the buggy one so that's the basic idea of like this um if else so like if if this like boolean statement in here is true it'll run like whatever code dies in this um in this code block otherwise else it will run whatever is in here and then we've also got a sneak peek on like looping and all that so any questions about um the code we just looked at sweet so next i'm going to talk about um it we've called it else if statements but it's actually if else if so this is basically if you want to like check multiple conditions or not exactly check multiple conditions but like if um this is true then do this otherwise if this other thing is true then do this other thing and then else whatever so um basically it's kind of like if i wanna yeah if i wanna sort of check against a bunch of different stuff like if i wanna if like if or maybe i could just use this example so like if i'm hungry then i eat pizza otherwise if i'm tired then i'll take it now um if ever if both of these aren't true then i'll go play animal crossing so that's the general idea of if else if statements um i kind of say else if is kind is inaccurate because you have to have that first if statement in order to have an ounce of statement and you can chain like a bunch of outfit else if statements together so like if i'm tired or if i'm hungry i'll eat pizza else if i'm tired i'll take a nap else if i'm bored i'll play a game else um i'll go outside or something like that so you can have as many else of state or else if statements and then even like even then like this again this final else statement is optional so it can be like if if this is true then this else if this other thing is true then this and it can just stop right there so i'll just um show you guys this demo it's a little hard to click with the ego slides thing getting in the way so um again um this is the same code from the first demo but um i've sort of built something extra on it so again we have this wow statement like um that will ask like if you're hungry are you hungry and then if you type in nowhere yes it'll um it'll store everything in is hungry but i've added this extra layer so we have yet another boolean that is is higher and it will do the same thing it'll keep on asking are you tired until you type in nowhere yes and then it'll store it'll basically store that in is hired so if i'm if you type yes then i'll store it true if you type no no it will store false and then we also have finally have this um if else if statement so if you're hungry um we'll reply like let's eat pizza else if you're tired then you'll just print sleep and then finally if you're not either either of those um type go plate animal crossing so um we can first try running this so so first um are you hungry let's say no are you tired yes i know just type in sleep um just be like just be aware that these else if statements i want to say they're kind of like they're kind of independent or not independent they're dependent on each other so basically um if i run this again and i say like hopefully this will come out basically if i type in yes for is hungry and no for is tired it'll go into this this block so like the first if block um because it's hungry is true it'll print out like let's eat pizza and then it'll exit the program so well it won't be able to like um run any of the code after this that are in like different elf statements are you hungry yes tired no i never won't run anything else um even if i do something like if i type in yes for both is hungry and is tired um it will only run this first if statement because basically you'll just enter this block and then it'll exit this entire um if else if chain basically so um if you want something to basically run no matter what you'll have to be you have to um put it outside of the if else if else chain any questions about this code i would highly recommend that like after like on your own time um just like go into this go into all of these demos and sort of like pick them apart if you have any questions like outside like outside of class time feel free to like ask in the girls code discord or um i think you can like contact us through our through our website but this is basically um in general how if else if elsa of statements work so if no one has any questions um we'll just move on to our final our final like conditional statement so the last one we're going to talk about is switch statements and switch statements i would say they're fancier if else if statements but they're like 10 times more readable so um basically they're um they're a giant like if else if chain that can only check a single value so like i put this like if you were trying to like roll a dice or something and you wanted to like do something different for each value of the dice um it would be really messy and really unreadable to like have like if um that value equals one like do this else if a equals six do that um a easier way would just to put it all in a switch statement to make it more readable and the basic anatomy of a switch statement is you have this switch um switch keyword and then in parentheses you'll have whatever like value you're checking so like if i have a string i'll put it like in here um if i'm checking against like the numbers on a die then i'll put like a die value in this parentheses and then i'll have like these curly braces then inside the curly brackets i'll have um my first line will be like case and then whatever value that i'm checking against so like if i'm like in this ice cream example if i'm checking if ice cream is equal to chocolate then my first case could be chocolate and then i have the colons and then inside i'll have like i'll do whoever i want basically this is like sort of the inside of my if statement and make sure generally you have like a break statement which will break you out of the switch statement um we'll explain why you need that later but just make sure in general um make sure you put a break at the end of your cases and then i'll have my second case and my third case in however many cases i want um i think like this is the general anatomy like how you would write a switch statement um and then i'll show you example just so it's a little more clear um this is just another example of like if i'm checking against um a month then i can i can have like um i'll put month in the parentheses out like my case one two three four because month is an integer um and then i'll just move on to the demo any questions about like what i've talked about so far all right so um i know like switch statements can be a little weird because they can't they don't really translate into english like if else if and stuff like that so um maybe it'll be better explained in this demo like why you want to use a switch statement and how you can use the switch statement so in this demo we basically have a random number generator that will um pick between random integers one through six and then we have a scanner the scanner is kind of kind of my cheesy method of um of just rolling a guy basically so um basically how this program will run is let's say you're in a dnd campaign and we have this like situation where your character is like stuck in the woods at night and you have to like row one through six for like what's the outcome um so let's say i think it's so compiling so basically it'll just print out like um your character is stuck in the woods at night um press enter to find out what happens um this is secretly a scan next line which is just like you're rolling your die um it will gener you the rng will basically generate an integer one through six and then depending on like what um guy value you row um a random impact will occur so like you get attacked by a bear or like nothing happens or you find a nice cabin in the woods so each time i run this this should be random and the general idea is like for each um number in on the die i basically want a unique situation to happen but like you can't really tell from this right because it's so messy so um i have like if di rho equals one else if di rho equals two else f else if f left um this is basically pretty unreadable if you look at this at first it's hard to really tell like what exactly this code is doing so um a better way to do this if i comment all of this out or i'll actually fork this first so a better way to do this is if i put everything into a switch statement so i happen to have a really nicely written switch statement right under my giant if else if chain so if you look at um this first if else if statement it's kind of just hard to tell like what exactly this does um first off this is just like a lot of words it's the giant block of text i don't know exactly what happened what's happening in here however if i compare that to like a switch statement this is like 10 times more readable so basically the same is saying like hey i'm gonna check my um a bunch of cases against this one um variable die roll and these are the six cases that can happen so case one like if diver equals one you get attacked by an armbear if the roll equals two you get attacked by unarmed bear so and then all of these different cases all the way down to um k6 so notice that for each case i put a break statement and i have the case keyword the code semicolon do whatever i want in here and then the break statement so this is just generally how you write a switch statement so if i comment this ugly elsa statement out this will basically run the same but um this is just generally more readable so um what the powerpoint didn't talk about but i kind of want to note is just that there's a special case called a default case and that's kind of like the else at the very end of your if else if statement so this is what happens if like say i happen to roll a seven on the die or something like that um this it will basically check against like oh this die isn't equal to one two three four five or six so i'll just refer to a default case and print out the end um technically like the code won't be able to reach the statement but this is there just in case so um let's go back to when i said you technically don't when i said like break is kind of an interesting case so when i said you need the great keyword at the end of each case i kind of i kind of lied so basically the reason you want to have a break keyword at the end of each case statement is that it breaks you out of the switch statement so if i don't have this break so let's say a comment all my breaks out over here i'll just choose my changes and hopefully that doesn't break any code so let's say i comment all my breaks out of this case um this will actually compile java actually has no problem if you don't put freak at the end of your case however let's see what happens once i um click enter so you'll see that i've happened to wrote kind of the worst case for um for this example but basically i wrote a six however i've also printed instead of like just printing this like the code or the sentence that was meant for case six i've also printed the default which is technically unreachable code or unreachable code so basically what this break does is like i said it will break you up the switch thing and what i meant by that it was it will exit the switch statement instead of running all the like all the rest of the code so what happened was java went to was like it went through the switch statement it was like all right die row equals six so i'll just hop to k6 i'll run this and then i'll run all the code that's under six so let me run this again and hopefully i'll get like a better example there we go so in this case i rode a one you got attacked by or i wrote it to you get attacked by unarmed bear so what java did is it over here it was like all right guy row equals two so i'll go to this case two and i'll print literally i'll run the code that's at all the code that's after two but because basically i didn't add the break it didn't exit the switch statement when i reached the end of the case so it just ran everything under it that's kind of the difference between the switch and else is if you don't add the break it can run code that's in different cases basically any questions about this so you can change the case number to an outfit or a string yeah so anything that you can compare basically um this switch statement like dybro only happens to be an integer um it could be like a character it could be um it could be a string um any like basic like primitive type or string so yeah it could be like it could be a letter it could be a string um the only thing it can't do is it can't be like i can't have a case of if um dyro i can't i can't do a thing where it's like di less than or equal to four so this is invalid in java um switch statements aren't just a java thing so like there are languages that support state switch statements that can be like if that wrote less than or equal to five or le if diro is greater or even like that greater or equal to two less than equal to five um this is invalid for java but can be valid for other languages um but java will basically only support like strict equality so like case one or like case hello world or things like case a so only if um the variable is equal to the case value um just a reminder for like of your demo code just make sure you fork um by pressing like up here these three dots and then fork before like you change your code just so um not like when you change stuff other people won't be affected by the changes all right so actually let's actually do this quiz then so um first number one what does this if statement mean let's do let's do this first example together so um yeah so basically the translation of number one is if x is equal to some d2 so that's correct all right so let's do number two then what does this statement mean correct so the statement means if x is less than 20 and x is greater than 40. so let's say in this case for number two x is x is 13. will this second statement run yeah so 13 is greater than 40 would be false um but it would still run so basically what i mean is let's say in number two x was 13. so i'll actually just type out the code in my notes so let's say um over here um if we're number two i had code like in x equals 13 and then in some like and then in some other part of the code i have like if x less than 20 and 40. so basically um once i get to this if statement java will first check like if it will first evaluate this first expression so x less than 20 and then we'll return true because 13 is less than 20. once it returns true um basically like i said before um computers are very lazy so they want to do the least work possible however in this case if this was true there's still a possibility that this second statement is false and this entire truth like and statement will be false so it will run this it will see that's true and then it will go to the second statement and it'll have to check if um x is greater than 40. so it's 13 greater than 40 no so the entire statement will return false however like if over here i said x is let's say x equals 30. so if i go if i hit this if statement um 30 is less than 20. so this will return false um because job um computers are just lazy basically what happened is if this first statement is false no matter like what this second statement is if it's like if it's true if it's false if even if it like returns a runtime error um this entire statement will be false no matter what so there's no point in really like evaluating the second statement so um what happens is java will actually just skip the second statement it won't even like it won't even evaluate this expression basically and it'll just um skip this entire like it'll just say like this and statement is entirely false it doesn't matter what the second the second statement is then this entire statement is still false no matter what is that like does that clear so when is the second statement used the second statement is only used when um basically this first statement is true so basically like let's say i have x equals 30 here um but somewhere in my code um x will be equal to 10 and then so let's say like somewhere along the way x gets um it gets reassigned a value and the value is 10. then over here um java will be like all right is 10 less than 20 that's true then it will have to evaluate this second statement is that is that a little clear so basically for um for and statements if this first statement is false no matter like what the second statement is um but we've turned true despite the second part not exactly so like for and statements remember that that for the double and it has to be that the first statement is true and so is the second statement or is where um so yeah so basically for and statements both um the first part and the second part both have to be true so that's why if this first part is true then like then the second part matters um for x equals 10 so technically like for this entire statement this will return false because 10 is not greater than 40. however what happens is that it'll first evaluate this first statement yep yeah so i'm just saying like for strictly this part it'll be true so strictly speaking is 10 is less than 20. so that's why um java has to go through and it has to check the statement this is very important if like if like let's say um because once you get into more complicated code um it won't just be like oh it's 10 less than 20 or oh is this like is this number less than or equal to this number these can be super complicated like um these can be super complicated expressions once you get into like more complex code so what can happen is like let's say i have code over here that like returns a runtime error so i have like i have some invalid and let's say like whenever this invalid code runs it will just return a runtime error what can happen is you can have hidden bugs that will basically be like let me delete this part that'll basically be like if i will happen like in this case is x or java will just be like oh so 30 is less than 20. or it's not less than 20. so this entire and statement is false and you'll just miss this bug over here so that's like why i want you guys to sort of keep this in mind because um once you get into more more complex coding these little bugs can happen just because um java and other languages evaluate um boolean expressions in very like in very uh hacky ways basically and then again um there like there's a same sort of treatment with um with or statements so like if x so similar thing um kind of so in the case of or um only one of these expressions has to be true for the entire or statement to be true right so um if this ends up being true so if and then if this evaluates as true java will again like do like few shortcuts and they won't evaluate the second expression so just remember for and statements if the first statement is false then java won't evaluate the second statement and for or statements if the first statement is true then java won't evaluate the second statement and this goes across um differently multiple languages so python will do the same thing um basically all languages will treat um ands and words the same way as java does in these cases any other questions about this or like anything else in the lesson all right so i saw that some people wanted to um wanted to do the do the um workshop so let me see if i can actually share this okay i'm gonna copy this link and hopefully there we go so here's a link to the workshop again remember to fork before before you um you edit the rebel um basically the idea is we're trying to check if you remember the lesson from last week so like um review how like how do you create a scanner um how like which library do you have to import to um be able to make a scanner object and then um how can you store like how can you store a string something like that and then um basically this program is just like a basic program of we want to be able to um take in say like an ice cream flavor and then we in the end we want to check if this ice cream flavor is in like specific stores so um we have like these two strings called flavors that you can um you can initialize to whatever flavor you want and then you have to find some way to basically take in like your friend's favorite ice cream flavor and then check against these two flavors from two different stores and then we'll finally like just print out something um that's like based off of if if your ice cream is in like store one or store two or if it's not in any stores so right now um i think it's 304 pacific standard time um you