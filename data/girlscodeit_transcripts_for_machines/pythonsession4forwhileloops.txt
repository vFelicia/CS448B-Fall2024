hello everyone and welcome to the girls codec class on foreign while loops in python i'm so happy to have you with me today and i'm sure that we're going to have a great time studying this interesting concept so you know that there's so many situations in life where you need to repeat the same set of tasks again and again let's say like repeating the same steps to make pancakes similarly there are so many coding situations in which you'll have to repeat a portion of the code python allows you to carry out repetitive tasks without having to write the code all over again using loops and there are two types as i mentioned earlier so let's begin with the for loops the for loop of python is assigned to process the items of any sequence such as a list or a string one by one and this is known as iteration or traversal as soon as all the elements of the list and string are done the loop will break and this is the general form of a for loop for variable in sequence perform code i know it sounds a little weird right now but let's check out an example here you can see that we have an array which is a list of a bunch of numbers and below that we have a variable count holding the value 0. so if you remember the general form or syntax of a for loop you will remember that it was for variable in sequence and here's your code our variable here is number and the sequence here is the array right above here's what the code says if a number is greater than 2 then you increase the count by 1. and as soon as we're done traversing every single element in the array the loop will break and come to the next statement which is outside the loop we'll look at that later but let's see how this will work so here you can see the list and you can also see the numbers that are bigger than 2 which is 3 4 and 7. so every time the loop goes through this array it will start to add up 1 to the count to see how many numbers there are in this array which are greater than 2. every time the for loop iterates through this array the value that the variable number holds will keep changing but first i want you to test this out and see how it works out for you but first here's something super helpful as long as the list that you're typing in a for loop contains a small number of elements it's okay to type all of it down but what if you have to iterate through a very large list such as natural numbers between 1 200. typing all of it down will be really hard and that's why python has a range function the range function of python generates a list for you and this is how it's written range and start which is your lower limit stop which is your upper limit and step we'll talk about step a little later but first i want you to see this example here is a variable x and that includes the range from one to five one is your lower limit and five is your upper limit remember that step is optional so it's not that important to get into it right now but here's something super important whenever you use the range function bison does not include the ending which is 5 so here your range will be from 1 to 5 excluding 5. so what does that mean 1 2 3 and 4 because it excludes the ending number as i mentioned here and here we use a for loop our variable is number and our list is x this particular code makes python print down every single number that is inside x and that is one two three and four now here's a small test for you it's a project in which you have to find a needle in the haystack and i want you to try it out in a bit but first we should discuss the while loop the while loop is a conditional loop that repeats the coding within itself as long as the condition remains true or is satisfied when the expression becomes false the program control passes to the line after the loop body so remember that a variable or a condition has to become false at one point or the other otherwise it will keep running and become an infinite loop they can also be nested and we'll get into that in our next class and here's the syntax for it while some condition is fulfilled it will go under the loop and perform whatever is written inside the coding till the time a condition is true a set of statements are repeated again and again as soon as the condition becomes false the repetition stops and the loop is broken here's an example for you we have a variable i which has the value 3. as long as i is less than 5 we will keep increasing the value of i by 1. here i is 3 and 3 is obviously less than 5 so we do satisfy the condition for the while loop and i'm now going to tell you the answer because i really want you to think about it and to try it out here are two cases of a while loop terminating in the first case we have used a special statement known as break and in the second case we have let the while loop terminate naturally so what's the difference here we have a variable i and it holds the value 1 while i is less than 6 we will print whatever i is as soon as it becomes equal to 3 we break it which means 1 is less than 6 yes it's true so we print 1. 1 is not equal to 3 so we ignore this and we get to the next step i increases by 1 so i will now become 2 2 is again less than 6 so we print 2. 2 is not equal to 3 so we ignore this and we increase the value of i by 1 and it becomes 3 3 is less than 6 true so we print 3 but 3 is also equal to 3 and now we encounter our break statement the break statement enables the program to skip over a part of the code a break statement immediately terminates the loop in which it lies so as soon as we hit break we are now out of the code and our answer will be 1 2 3. over here we have i which holds the value 1 as long as i is less than 6 we keep printing i and then we keep increasing it by one as long as it's not less than six we then come and print that i is no longer less than six i want you to think about this what do you think will be the output of this code remember when i told you that you might fall into an infinite loop unless your wild condition becomes false at one point or the other well here's an example this is a variable name and it holds a string value in which you write your name and write 0 to finish as long as your name is not equal to 0 python will then ask you for your age which will be stored in an integer format and then again ask you for your name which will be stored in a string format so as you can see there is absolutely no chance of this while statement becoming false which means this will keep running on and on and fall into an infinite loop remember that a variable name is a string data type while zero is integer and string can never be equal to an integer i want you to avoid such mistakes and be super careful whenever you code it's also worth noting that for loops and while loops are actually not the same they're pretty different and here's why a for loop is a counting loop which means it repeats a certain number of times a while loop is a conditional loop the loops that repeat until a certain thing happens which is they keep repeating as long as some condition is true is called a conditional loop for loop is an exit control loop if the exit condition is true then the loop will terminate on the other hand you have while loops which is entry controlled it checks the condition at the entry as long as it's true the code will proceed and if it's not then it won't it's that simple everyone it's really smart to learn from other people's mistakes and right now i'm here as an example for you please do not forget to add the colon at the end of every four and while loop that you use we have reached the last segment congratulations everyone and this is called the five under five five quick questions that you can finish in under five minutes so let's start here's the first question what's wrong with the following code i want you to pause the video think about it before i reveal the answer i'll count down for the next 10 seconds i'll start now okay here's the answer it's an infinite loop the while condition continues to remain satisfied and the code keeps running so it'll just keep printing the alphabet a over and over again and if you wanted to stop you can press ctrl and c now the next question what is the output of this code again i'm waiting for 10 seconds so let's go here's the answer 34 3 and 4 are individually strings so as soon as they come together they become 34 but it's a string format but since we're converting it into an integer it will finally become the integer 34. here's your next question which operator is used to check whether two variables are the same choose the correct answer and i'll give you five seconds for this one revealing the answer now it's b and here's a bonus thing that you should know you can also use the is keyword to see if two variables refer to the same object on to the fourth question true or false in python variables can be assigned only once and you cannot change the values your five seconds start now time for the answer it's false python is flexible and here's an example now the final question yes or no is pricing case sensitive five seconds begin now here's your answer yes python is case sensitive for example the first letter of boolean true and false must be capitalized otherwise bison won't accept it if you want to practice these concepts make sure to try these out and as a bonus added challenge you can even try to print out the fibonacci numbers in case you're unsure about that make sure to check it out on wikipedia and the link is right here congratulations for making it to the end of the lesson i am so proud of you and you have done really well thank you for being with girls coded and i hope that we continue to learn together for a really long time to come thank you and see you soon