hi guys so today we are going to be making a linear regression model and what a linear regression model is it's to attempt to model the relationship between these variables like x and y by creating a linear equation and it can also be used to predict like future values and so i'm using google collab and google collab is a notebook where you can write python code and all you need is a gmail account so feel free to follow a lot and but ideally you can use any application you want like jupiter um notebook uh maybe even ripple and so the first thing we need to do is import our libraries all right so first i'm going to import um numpy because we learned numpy in our last session i'm gonna continue using that and we also need matplotlib specifically the python plot and so i'm we're going to refer to matpotlib.pyplot just as plt to make it shorter let us and we also to create a linear regression we're going to borrow this from another library called sklear and we're going to use linear model and we're going to import linear regression okay and so the next thing we need is our data set all right our data and so i just made up some data values right here but um usually you like you know what data you're gonna use so um we're going to basically we want to create two arrays one array to hold all the x values which is time and the other array to hold all the y values which is a tray height okay so to do that we can do x is equal to and to create an array we just do np dot array and in here um i'm just going to copy and paste these values in here and you want to separate the values like commas just do that this might take a while okay and then we want to create an array for all our y values copy paste okay you can spend time formatting and making it nice but it's just as long as it works that's what i mean okay so here we can actually plot plot the values if you want so we do plt dot plot and we're plotting x and y and we're making a scatter plot and so first of all if you plot it it gives us the graph but it's like a line and i want it to be scattered so i add another parameter it's like see now it's the scatter plot okay so it looks like we have somewhat of a line right but we want to find out what the equation of the line really is so this is where linear regression comes into play so i'm going to create a variable and i'm just going to set it equal to their regression so it's easier on us now if we try to fit it fit the values with a line let's try running all our cells and it gives us the error and basically the reason why is so this x array is something that's called a 1d array basically it we can see it we can do x dot shape and so basically it's just um one column for one yeah one row and one column but for linear regression it's expecting a 2d array and so 2ds and we want to combine this x array and the y array together so to do that we can do something that's called we can set the x variable to x dot reshape and in here we're gonna put negative one comma one so what this does is the one is one just means we're going to add another column right here like right after this comma and negative 1 means means that the elements are going to remain as they are basically there's gonna be like no shifting so if we run this now it shows us um we have like two columns two shapes yeah okay so now if we do a red dot why it works it doesn't give us an air anymore and so in linear regression also predicts future values right so we can create a variable called y predictions and we want to predict the y values rate um from like the x like that basically like as time goes on or as x increases we want to predict the correspondent y values right and so now we can the uh we can plot the like points and this time we can do plt dot scatter but you can also do it this way as well i'm just gonna show you different ways how to graph it and then we can plot x values the predicted values and we can also set the color so we could do colors equal to oh no blue so you can see that it plot our line and yay so last thing we need to do is um let's say we want to find the equation of the line right so find the equation where y is equal to mx plus b and so m is our linear coefficient right there right now that stands for coefficient and b is our um y intercept so this and so you can print out the equation of a line by doing y is equal to now remember um m is in a number integer and y is a string so we want to format it so one way to do that is we can do this brackets dot format and here we put m because m corresponds to the first bracket right here b is the second bracket right here and so when i run it it gives us the equation of the line hello everyone today we're going to have our second session of data analysis on scientific research today we're going to do two demo on creating a histogram and creating a scatter plot respectively so let's first start with creating a scatter plot and the problem is to compare the sorting data with silicon dioxide data on the associations between your wavelength and index of refraction which we use and to represent and before let's start all the steps let's first have a brief review on the things that we learned for the last session so remember the first step that we're going to take is called data preprocessing in which we deal with innocent data and the noisy data then if we want to compare more than one data sources and figure out that their unit systems are not the same then we're going to use the small steps called normalization in the data preprocessing and after we finish data preprocessing we're going to start importing our data and i use these two python lines to import my data remember the difference between them the first line is to read the data digit by digit and the second one is to read data by data so we get zero as the first um data for the pi first python lines and we got 0.471 for the second python lines after we successfully import the data we need to use list or arraylist to store our data and eventually plotting our data requires some python plotting lines like those showing this ppt so i put up two most common graphs that we use the histogram and the scatterplot which is which are also what we're going to plot today and this process is called data visualization and we'll start tackling this problems by starting with the first step data preprocessing so if opening our file the silicon file and also the silicon dock file we can figure out that there are two problems between the data file the first is that the data number of data in a silicon file is more than that of the silicon dioxide file and what we need to do is we need to first delete the data with the wavelength that is larger than 350 nanometers okay and the second problem is that the data does not match with e do not match with each other we have 300 and 300 for the first data but we have 310 and 302.4 for the second data which does not do not match which is each other so we're what we're going to do is we're going to delete 302 to 308 to make sure that our second data match and we're going to repeat this process for the following data and we'll eventually gain a new data file for our silicon so i have already done it silicon number two file and let's see so now we have a silicon file that matches with the silicon dioxide file with six number six data in total and each data match with the other 300 300 310 310 319 and 312. so there's a little um a small discrepancy right here we can just ignore the difference because it does not matter much and after we're finishing dealing with our data preprocessing steps let's open our python ide and start import our data oops oh remember before we import our data there's another really important step that we should take remember our task is to plot on the graph and we need to have something imported so that we can plot our graph it is the math.lib right not live dot py lab splt the reason we put splt here is because that the name for uh map lab.pylab is too long and we do not want to repeat it again and again in our following python lines so we just use plt as its abbreviation and we can just refer to plt whenever we want to use the map.lab.pylab so after we um successfully import plt next step we're going to take is to yeah import our data and we do not have to remember the python lines for importing the data because it's too long the only thing we need to do is to know how to use it and we can just simply copy and paste it from either the internet or your previous code here but remember we need to change our finding let's see our finding is c python and silicon number two okay silicon number two and uh we also need to import our silicon dioxide data so we need to have another copy and paste right here but this time is silicon dioxide number two and we need to change the name for it is um from from data to data two for silicon dioxide to silicon dioxide number two because we need to distinguish these two data sources if you put the same name right here it gets into trouble actually because you cannot distinguish the two data sources and you will eventually fail when you try to store on data of this two different data sources okay so we refer to data for the data of silicon and we refer to data too for the data of silicon dioxide after we successfully import our data next thing we're going to do is we're going to store the data of the two data files and what we're going to use we're going to use the for loop so for i in range one length one comma lens data remember the reason why we need to put one here um actually we don't need a reason actually but um it's just because that my data file first line for my data file is these words and we do not need to read these words into our ide so we start reading the data source from the second line and remember when we need to read a second in our ide we need to minus one so two minus one equals one and we put one right here meaning that we start from the second line and remember to put a column um after the four four loop lines okay and we okay i forgot something actually we need to first create the list to store the data so first list that i'm going to create is called silicon waveform and the second is silicon index of refraction we use n to represent our index root of refraction remember and we also have those from for silicon dioxide okay so now we have our four list ready we can start our for loop we need to add each wavelength of silicon in our data file into silicon silicon wavelength list so we're going to use the pen function of the list append data and it's line i however it's here it's the first column the wavelength is the first column so we need to put zero here representing the first column and we're going to do the same thing for the index of refraction of of um silicon yeah and it's the index of refraction is in the second column so we put one right here okay so we do the same for silicon dioxide and remember it's thinner two right here and it's also the first column for wavelength data two line i and column one a column two i mean okay it's also line i plus one here and column two right here we always minus one um for the idv if we want to refer to some number i mean some sequence okay so after we successfully store the data right here um okay oh there's another mistake that i made in this code sorry before that because it's lens data right here we cannot combine the data for it oh actually we can because um we have the same lines numbers for both data sources we have six line here and we have six line here so six lines for both data sources so that's all right if the lines are different from two data sources you need to build another for loop for um the second data source remember okay so after we successfully store our data we need to plot them and the lines we use is um plt remember prt refers to matplotlib dot pylab here and we use scatter scatterplot yeah and yeah for our first scatter a second first set of scatter points we use the silicon data and for the x axis we put wavelength remember the x axis come first and then we put the index of refraction in the y axis the y axis comes the second and i want to use the color red for the silicon data and the size of the scatter points i want to use one so remember these four things are all the parameters of prt dot scatter x y face color and size okay so remember we have it here these are all the parameters and we choose x y um face color and oh it does not have face color here oh because we we are using the pylab and it's similar face color and also size okay and we do the same thing for silicon dioxide wavelength as the excise axis and index of refraction as the second axis we'll use color green instead for silicon dioxide and size is also one so let's see okay um let's run our code wait so here to select this one and run another code okay so oh the point is relatively small so maybe we'll adjust our size or points to 10 and run again yeah it's much better now so we can see that our data are plotted correctly and perfectly on our scatter plot and this is the result of our um answers to our questions so we can conclude some conclusions from our plot scatter plot right here for example the silicon dioxide yeah the six points are actually above the those five points first so again and we can make useful conclusions from this graph um let's see yeah so the next thing i want to mention is that so if you simply put up this graph then people may get get confused with what the xaxis and the yaxis represent so this time we need to say you can put some labels for your xaxis and yaxis for example i will put label wavelength here with nanometers as this unit and i will put index of refraction for my yaxis label let's see okay so now we have our xaxis label and yaxis label great and this is the end of our first problems like plotting a scatter plot to answer our questions now let's come to our second problem the second problem is actually to plot a histogram to create a frequency histogram for parameter p5 in photo data so remember the reason why we need a histogram is that we need to identify the frequency of data that falls in each class in a measurement scale so for example we may have two ones three twos and then now we have the frequency number two for the category one and we have the frequency number three for our category two um does that example make it clear if it doesn't don't worry let's start our demo to illustrate that so now let's open our um photon data file if it's correct yeah that's correct okay so now we have our photon data file and oh i forgot to put the format of it but yeah remember not actually remember but let's see it's it has pattern so three as a group three line as a group three line as a group and our parameter p5 that we need to figure out is in the very first data it's the very first data of a group so we have this data as the p5 the first p5 and this data as the second p5 and this one for the third p5 sorry that i have just figured out that i forgot to share my screen for the rest of the recording in this afternoon so i rerecorded the following part after we distinguish what pfi is are in the data file the next step we're going to do is to write our python lines and remember the first thing to do is to import our matplotlib.pylab.splt as usual because we need to make sure that we can plot the graph and we so we need to import our matplotlib first then we'll import our data file inside notice in that here i use the first python lines for importing the data remember the first one read the data digit by digit which is actually this one so digit by digit we first read zero then we read the dot and then four and then seven and then one okay so this kind of python lines in importing python lines requires us to um do something in a following so that we can guarantee the digits are combined together within a data so we need to ensure that 0.417 is a complete data and need to separate be separate from 0 and 0.942 so this is what what this code is works for so let's open our data file we can see that um take minus one point one one seven eight a as an example we first read minus one then we read the dot and add a dot to minus one and then we continue to read one and then add the one to minus one dot and then another one and seven eight a so in the end we have a complete data and while encountering with the space right here the while um lines will read these data index i dot a space equals is true and then the while loop will stop so finally we will only get minus 1.1178a for our first file first file here and don't don't forget to transform the file from string type to float type so that we can plot it in a histogram and after we have done all these steps of like adding the data adding the digit into a complete data and transforming the string type phi to float type we finally can store the file into p5 list which we created right here so remember we import our data first then we create our list then we store our data and eventually we plot our histogram and yeah let's run our code this is actually a histogram but let's run again okay so look at this third picture this is the histogram that our code runs and these are the parameters of plt dot histogram remember so we have the thing we need to plot p p5 and the beams remember the beams are a collection of data in a specific range like this small rectangles here are beans and since we have 100 wings it means that we have 100 rectangle right here that compose the whole distribution and his type here the bar means that we have these these shading regions so the opposite of the bar is the step here the opposite of bar is wait oh here's pi and his type equals step so if we adjust it to step we'll only gains the line on top of the distribution and we have our x label on the xaxis p5 right here and we also have our y label right here the frequency so that is all the solutions we have to answer this question to create a frequency histogram for a parameter p file in photon data and i hope the two demos today can work as a practical a practice for you to prepare for maybe your future data analysis experience using python in your research and that's all and thank you everyone wish you a good weekend