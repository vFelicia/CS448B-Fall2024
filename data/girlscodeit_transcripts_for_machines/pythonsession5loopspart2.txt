hi everyone today i will be going over loops and this is a continuation from our previous lesson on for loops and while loops except for today's lesson i will be going um into nested loops and some other builtin functions for loops so on our agenda we have of course please i'm going to wrap it so you can code along with me and then i will be going over a quick review of the loops we went over in our previous lesson and then i'll go into nested loops enumerations some loop keywords and finally i'll end with a demo now to start here's a quick review of the loops we went over in the previous lesson so for for loops you have two options of what you can do with these you can do four variable name in a certain range from one index to another index and then you could also do for a variable name in a sequence such as a list or string things like that and then for while loops you could check for a certain condition and while that condition is true this chunk of code below it will continue to run now what is an iteration an iteration is essentially a sequence of repetitions that generate new outcomes so for example in your while loop for every time you run that code underneath your while loop if the condition is still true then it will repeat it will have another repetition of the while loop code and then that repetition in itself is what you would consider an iteration okay now for the range function this is a builtin function where you would put for the first parameter the start index and then the second parameter you would input the stop index and the stop index is always exclusive so if you had if you inputted a range from say 0 to 3 what would print out is 0 1 and 2 rather than 0 1 2 and 3 and that is again because the stop value is exclusive so what are the differences between immutable and mutable data types immutable data types cannot be changed in place so for example tuples and strings you would not be able to change the original twobar string and if you attempted to it would give you an error in your interpreter or you could create you need to borrow string and from that you would already make those changes now for mutable data types these values can be changed in place and some examples are lists and dictionaries so for listen dictionaries you can change those values with there there are built in um listen dictionary functions that will allow you to change those values without having to create any new lists or dictionaries moving on to indexing in python the index of the first element is always a zero and then it will increment by one for each value in your list and the index of the last element can be written as negative one and from there you can also index in reverse so now to get into our actual lesson for today nested loops are essentially loops that are within another loop and i'll show you an example of that all right so for this demo we have a twodimensional list and what a twodimensional list is is that it is a list but for each value within the list there is another list and this could also be called a 2d array or in this case a multiarray so for this first chunk of code this runs for each row in the multiarray it will print out the row so for each of these values here for each row it will be printed out in the interpreter like so okay now for the second chunk of code for each of these rows in the multiarray um then for each column or for each value it will also be printed when you run it like so so each each value in the entire multi array will be printed here okay so you can also use a nested for loop to access each of the elements in the list and you could do this by um so for for each of these rows in the multiarray you would be incrementing by one for each iteration and then you would also have this for loop here for each of these numbers within row you would be checking if the number is equal to five and so for our first row none of the number is equal to five so it will exit this for loop go back and run the second iteration of our parent for loop and it will move on to the second row and checks whether one of these numbers is equal to five and since one of them is equal to five this here will run and will print i found five in row number two since this incremented twice and then it will continue to run through the entire multi array until it leaves the nested for loop and then it will print out the total number of rows in the multiarray and that will be equal to five you see here i found five in row number two and number of rows is five and you can also use a while loop a nested while loop to print out all of these values here and so what this chunk of code does is that while row num is greater than zero we declare a variable rho to be equal to the multi array at index rona minus one and we would use row num minus one since um again indexing in python always starts at zero so if you were to do ronan by itself multiarray at index of just row number itself that would be at index five and there would be no index of five in this list so it would go back to the beginning and print this out but what you want to print is our row five and this would be index four so that would be five minus one four so row equals unless i array at index four and then we also declare the variable array length to equal the length of this row so that would be equal to three and then while array length is greater than zero we want to print out row at array length minus one because again indexing starts at zero and what this would print out is the index of row at index two so it would print out fifteen because this is an index 2 for this list here and then every time this while loop runs array length will keep decreasing by 1 so as it continues to go on it will print 15 and then 14 and then 13 and then so once it reaches 13 this will be indexes 0. so the array length would be less than 0 so it will exit this while up here and then it will decrease road number one and then we would move on to our second iteration for the while loop and it would continue to print out the rest of these values here and you can see that it prints out all the values in reverse all right so moving on to some extra examples so for this first example imagine you have two arrays or a one and a two so for our first array for each value in that array you will be running through all of the values in array two and you'll keep doing that for every single value in array one and then for the second example for each value in our first array while n is greater than 10 you execute this code here and it is assumed that at some point you are decreasing n so that this does not end up as a infinite loop and for this third example it is similar to our first example where for each value in our first array all of the values in our second array will be run through except while n plus m is less than three this will actually execute your code so it is also assumed that either n or m is being incremented somewhere in this code here so that your code does not end up being an infinite loop okay so moving on to enumerations um here we have the enumerate function which for its first parameter takes in the list that you want to enumerate um with and the second parameter takes in the index that you want to start at for your tuple which i'll go over in a second and then the enumerate function returns an iterator of tuples that contain for the first value will be the index of the value in your list and the second value will be the actual value within your list and the enumerate function is really good to allow you to track both the index and element of your list so here is an example if you were to print this array 2 is equal to docket bird and then you print the list enumerating through array 2 and this returns three separate tuples and so dog will be the value of the array and then it will be at index zero and the same for cat and bird but say you wanted to start at a different index then you could do star equals two and this will start your index at two and then we'll increment by one from there here this shows how you can use a for loop to make it look a lot nicer you could do the value at dog at the value dog at what index it is at and here this index here shows the actual index of the value in your array rather this is just where you want to start at so this is usually would be starting at index zero you don't necessarily need to include that as a parameter it is the default parameter and so basically for the index it replaces this value as index and then it replaces this value as val in this enumerated array and then it does it runs this code here and it does the same thing with our second example so again it enumerates through our array three and then it prints out these tuples each with the value and its corresponding index and it runs through this with the for loop here to make it look a lot prettier all right so now let's move on to some keywords for loops first we have break which exits the current loop then we also have continue that does almost the same as break except it continues to the next iteration instead of exiting the current loop and pass is not very commonly used in programming for python and what it does is it basically doesn't do anything so i will show you guys an example of this okay so here we have two infinite while loops and this while loop here is nested in the outer while loop so when you run this it prompts the user to input either continue pass or exit so if you were to input continue they would run the continue keyword and what this does is it doesn't run anything below it um but it doesn't necessarily exit out it will continue on to the next iteration so from here you can do pass as well what pass will do is it just passes through this conditional here and continues on to the end of the while loop here and will print that you are still being stuck in a loop and then it will continue to the next iteration now if you wanted to exit the loop you would type in exit and from here you would run the break the break keyword here and then you wouldn't run anything here you would completely exit out of the nested while loop and then you would be you would still be in an infinite wall loop except you would be in the outer while loop so from here if you want to exit from this outer while loop as well you all you would have to do is break from it again what you could do by typing exit and then you are outside of both loops all right so now i will be going into looping um and how python is run on runtime so uh sometimes your program can be a lot slower than if you were using another language and this is because of time complexity and how long it takes to run your program based on how many loops you have so the more loops you have the longer it will take your program to run and i will show you guys an example of this here so here in this demo um we've declared a with a list here and then for this first for loop here um for each value in a we are incrementing the count by one and then we are printing the number of iterations like so okay so what this code basically shows you is that it has a run time of o n that's what we're trying to show you guys um since this for loop depends on growth linearly so basically the more data you input into this for loop the longer it will take to run it and the time is directly proportional to the amount of data you inputted into this for loop here okay now for this second example for each value in the range of the length of this list so range four so zero to four or actually would be zero to three since again the stop index is always exclusive so it would be from a zero to three and then for j in range zero two um length a is four minus the first value of i would be zero so four minus zero minus one would be three so from zero to three or zero to two count would increment by one and this is a lot easier to show if we just print out i j and count every time this is run okay so as we can see the value of i starts at zero and then the value of j also starts at zero and then count increments by one and then again this will run again i is still equal to zero j is equal to one and then count increments to two and then this keeps going until it reaches the end of the range so once it reaches two it will then exit this for loop go back to the outer for loop here and then it will run again where i is equal to one and then this will affect the range here because as i is increasing um then the range here will continue to decrease and this will actually decrease faster than i will um reach the end of the range here okay so when this is equal to 1 the length of a4 minus one minus one would be two so the range would be from zero to two or zero to one because again the stop index is exclusive and so you can see that here zero to one it keeps incrementing and then we reach the third iteration at two this would be zero to one this would run one time and then for the fourth and final iteration this i would be equal to three so this would be from range 0 and then 4 minus 3 is 1 1 minus 1 is 0. so from 0 to 0 there are no values between 0 and 0 since these the stop index does not include a 0 so this would not run for the final time and then after that has been run we print out the number of comparisons in this bubble sort which is six so now let's move on to our second example and this code here demonstrates again how um the more data input you put for your for loop or the more loops within your nested loop then this is directly proportional to how long it will take for your code to run and if i go just into more specifics about this code here this line import num numpy as np this imports the numpy library which allows python to support really large arrays and then here we are declaring the variable large matrix to equal this really really large array and then initialize count to zero so for each row in this matrix um you will print adding and there are 200 rows in our matrix so we will print adding 200 times so for each column in each of the rows here so for so each column that would be 200 columns within each row since here you can see that 200 200 200 so from those 200 columns 4i in range of length of column that would be the range would be from 0 to 199 since 200 is exclusive and then each time that happens count will be incremented by one and then the total number of elements should be printed so the total number of elements within your entire array will be printed and that will come out to 200 times 200 times 200 which is 8 million and let's just run our code here all right so you can see it printed adding 200 times for the 200 rows here and then the total number of elements is as i said before 8 million okay so let's get into our five under five segment um let's skip the first question for now since this has to do with dictionaries and we haven't gotten to that yet for question two what is the output of this code i will give you guys a second to think about this okay so what output is an error since tuples are immutable data types and cannot be changed so if you were trying to change um the tuple at index 0 to equal 100 you would come out with an error since tuples cannot be changed in place okay question three why would you want to use a while loop instead of a for loop and again i'll give you guys a few seconds to think about this okay so for loops are counting loops they are used when you are trying to run through a sequence um or a range anything like that and they are exit controlled since you know when that sequence or range um will end so once you reach the end of that sequence then you will exit from the for loop as for while loops these are conditional loops so the while loop will continue to run as long as the conditional is true and once the conditional is false then that is when you will break out from the loop and that is why it is an entry controlled loop so we would use a while loop when we aren't sure when the end condition will be false sorry showed the answer there but for question four how many comparisons will this code perform and um and we just look at the answer here so the first line for num in array this will loop 100 times since here we are making a list of 100 zeros so there will be a hundred values inside of array for each of these so that would make 100 times 100 times 100 equal to 1 million so the comparison will happen 1 million times moving on to question five out of these following variable names which one is valid so if we take a look at this for days times rent this is not a valid variable name since no special characters are accepted except for things like underscores or dollar signs and you cannot use the asterisk symbol within a variable name now for the second one for this is a valid variable name since python is case sensitive and you didn't use um the reserved keyword for which would be used for for loops since you did capitalize the f and four price one is also valid since the underscore is used which is valid and the number is used after all the letters it does not start with a number however for this one the number um does start at the beginning of your variable name so it is no longer valid my city this is not valid because there is a space right here and spaces are not acceptable in variable names while this is not a valid variable name because you are using the reserved keyword for while loops let's get into our demo so here we have um this code right here is very similar to a bash show which takes in user commands basically so if we run this it prompts the user to input something after this hashtag symbol and so whatever is inputted here will be stored in command and then we declare the variable arcs to be equal to um command.split so what this does is you insert two words then this function here will split that string into two separate strings and we'll store that in a list under arcs so if the length of r is equal to one so there's only one word and if um you type in pwd then it will print this is online who knows that and then if you were to print i mean if you were to type in who am i still print out this username here jz0024 and then if you were to type in exit it would break from the loop and then print out exiting totally not bad shell now for this second part here this is for two words so if you inputted two words here then it would run this conditional here so if you put switch user this would not do anything but if you did switch user to racial and then you go back to our first conditional here and then you input who am i it will respond back with rachel now if i were to put something like cd and then rachel it would respond back this is online and then we can just exit again like so and that is our bash shell demo now we're at our challenge problems so for our first challenge problem we have to create a list of the first 100 perfect squares so let's declare a list called squares in empty list we created an empty list and then we want to create a list of the first 100 perfect squares so what we would do is we would create a for loop for um for number for each number in the range 1 to 101 since 101 is exclusive so this is technically 1 to 100 then what we can do is squares dot pen so we're adding we we're adding values to these squares list so then we're adding the value num squared and then finally we want to print our list and it prints out all of the perfect squares from 1 to 100 here okay so for our second example we want to return a list of only words that begin with vowels so we take this list here okay we can get rid of this so we have our first list and then we also want to create our vowel string to be so for name and name for each name in this list here we want to check if um name index 0 is in our vowels string and then we can find out name and this prints out all the values with um a vowel at the beginning of the string okay next we have this challenge problem here where we want to without using the subtract multiply or division operators we want to implement subtract multiply and divide functions and you can assume that a is divisible by b so we want to um subtract multiply and divide two numbers without actually using those corresponding operators and i will do that okay so let's start out by defining our subtracting function with parameters a and b and don't worry too much about functions for right now we will be going over them more in depth in a future lesson but for now you can just focus on all the code that is within each of these functions so we define the subtract function and then we initialize the count variable to zero and then we check for our condition um while a is greater than b and then we increment counts by one each time and we are also incrementing b by one each time and then we return count and then we call our function so we print out subtract with values and eight so this will print out twenty minus eight is twelve and it'll be a lot easier to show you guys what is actually hope happening in this code let me just think about the values of count and b each time okay so as this while loop continues to iterate it increments count by one each time and it also is incrementing b by one each time and so it is only incrementing um count until b is either equal to greater than or equal to a or 20. so once ba reaches 20 then count no longer is incrementing and therefore you return with the subtracted value from 20 and 8 which is 12. okay now we can move on to the multiply function parameters a and b we again initialize count to zero and then for x in the range of a we want to also increment count by one sorry not one we want to increment um our count by b and then we can return count so if we um comment this out and then we print the multiply function 2 and 5 works we get 10. and this is because for each value in our range of a which is 2 so for each of those two values we are increasing by 5 so that will give you 10 and that is um a simplified version of multiplication right there and now we can move on to our division function where we can initialize count to zero then we would put your a doesn't equal zero incrementing count by one and then we can change the value of a to equal go back to our subtract function here and subtract a and b from each other so basically what this would do is that it continues to increment by one um as it iterates through here and then a is constantly being subtracted from so if we did print divide uh 12 and 2. we'd be subtracting 12 by 2 and we'll go through here so that would be 10 our new value of a would be 10 and then that would be 10 minus 2 again so that would be 8 and it would continue to do that until a um is equal to 0 and then it will finally return count so when we run it we get 6 as expected now for a final challenge given this matrix here print out the diagonal from top left to bottom right and then do this again from top right to bottom left so we can take this matrix here okay and then get rid of this paste our matrix okay so what we want to do is um locate each value in the left diagonal let's start with the left diagonal so for row in our matrix but we want to find the length of our matrix and then from there we want to find the range of our matrix so for each row in the range of the length of our matrix we want to find the column or each of these individual values within the row in the range of the length of matrix at x 0 for example okay now in order to figure out how what we want to compare here and to locate the left diagonal values we have to find the pattern so this value here is at row zero column zero and then five is at row one column one and nine is at row two column two so what you what you will notice is that um for each of these values both the row and the column are equal to each other so you can use a conditional to check if the row is equal to the column and if it is then you can print out the matrix at indexes of row and column and this will print out 1 5 and 9 which are the left diagonal now if you want to find the values in the right diagonal we would do basically the same thing range matrix each column in this range zero and here we again need to find the pattern of our right diagonal so three is at row zero and column two and then five is at row one column one and then seven is at row two index zero so what you can tell from that is that when you add those two values together they are always equal to two and two is um one less than the length of the list here so what you can do is if you add together row plus column and then if they equal the length of the matrix minus one since again indexes always start at index zero so you always put minus one through these cases then you can print the matrix at the indexes of each row and each column sorry column and it will run three five and seven so that's it for our last example here are some other links that you guys can look over which i will add in the description below and you guys can check these out if you want to read further so that is all for today's lesson i hope you guys learned a lot from it and for our next lesson we will be going over lists and list functions hope you guys enjoy that as well thanks for watching