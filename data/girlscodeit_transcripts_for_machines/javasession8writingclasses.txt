321 all right so for again for this um week we're just going to be learning a basic introduction of classes in java just like what they are um basic concepts and like important keywords to to um do you know in java so um yeah for this lesson we'll just be going over like what is a class um what are um fields and methods in classes um things like static versus instance and then public versus private again like if you have any questions feel free to just ask in chat or ask an invoice if you're comfortable with being recorded so first off um classes in java are basically sort of like blueprints to um your instances so think of like instances as objects and classes as like blueprints out telling telling java basically what these objects can do and what information they can hold so um basically the reason you want to write your own classes in java is it really helps keep your code clean so like you don't have really redundant code that does like that that you have to sort of like copy and paste into the main method also classes help you store um sort of manipulate complex data so um also another reason you want to write your own class in java is java is is class based so literally everything in java is a class and java only handles things like objects so basically um you want to write your own classes to get understanding of how java works this is how you'll be coding in java basically um another thing is class names i wouldn't say they must be uppercase but they should be uppercase um generally you want your variable names to start with lowercase and you want your class names to be uppercase that way um you can distinguish between what's an object and what's a class so you can basically create custom classes and data fields or sorry custom methods and data fields for your classes and here we just have a demo of um of what class is like that can hold like data fields which are basically just um just like they're just information you can store so like a field could be like a number of wheels or something then you can like basically create um create sort of have these methods called constructors that can sort of say like they basically create the instance of the class so basically um they'll instantiate all your fields and you can also like have multiple constructors and then you basically can go down here just like um during our um lesson with how to use objects you can create an instance of your class by using the new keyword any questions about this sure yeah um so these words wheels numb wheels all these words in this example are they um are they uh data fields or instances or what do you call all of those things gotcha so not none of them are objects i mean numb wheels until you get down to the bottom one none of these are objects right they're all called something else like a data field or an instance so basically this entire thing um is a class called car so everything in this bracket over here from lines 3 to 17 this is like your class so your classes basically um serve the blueprint to an instance so this will contain all the information each instance of your car like in the main method for example car and another car um they will basically hold on all the information that's described in the class car so um another and for data fields um basically num wheels is a data field and that just means that the car can hold like code data called num wheels and this will just describe like the number of wheels a car has it can also hold things like these are constructors which we'll talk about later um these but like in general these will just um be what happens when you like create an instance of the car so what happens is basically we'll assign a value to num wheels any questions about this so the the word number is a data field and the and the um the the stuff that you're highlighting there right now is a is constructing an instance yeah um don't don't worry about it like too much right now because we'll go into it in further detail um yeah so but in general like this is just a um example of what class can look like and then how you can sort of create instances of your own class so next we'll be talking about attributes and methods so an attribute i also call it a data field um lots of people call it different things and lots of languages will have different um different terms for this but attributes or like fields or data fields they're basically the properties of an object so basically these are um these are kind of like numb wheels where in the example where it's like these are um values that the uh the class can hold so basically um you can call you can access the attribute of an object by doing object attribute um reallife examples would be like if you have a dog um what breed is it what age is it what's its name stuff like that um or even an example like if we have a car the number of wheels the number of doors and it's mileage um code examples would be like when we were talking about a race array.length is an attribute of their ray class and then if you have an object dog you do like dog.breed is an attribute of the dog class any questions about attributes sweet so the next pair of classes is its methods so methods are just um things that this class can do so for example when we had um arraylist.size that was a method and you can basically call a class method by doing object that method with the parentheses at the end um real life examples could be like a dog can run bark or um or do other stuff that dog can do um or something like for the car it could be like a car can um beat the horn or it can turn and stuff like that so um our code examples would be like if you had when we were talking about string objects um we can do like string object s dot two uppercase or if you had like a um dot class you could do like dog.bark with the parentheses at the end any questions about this sweet so well we can also go further into class methods um and we can talk about sort of how you can write a class method so i think most of you or all of what i'll basically do now is sort of like explain what this actually means so actually um what we could do is let me actually bring up a replit just an empty replit and we can sort of explain this main method so if you open up an empty method you notice that your um your main method is actually a class method so over here we actually have a class called main and we have this main method um that will run everything like that will run the the roughly or be what like the um replicas when we run it so we can basically sort of break the main method down by by um just word for word just so you understand what it means so basically for the main method the first two public static these are scope identifiers and don't worry about what they mean right now because we'll explain it to you later um but they basically sort of for now we'll just say they they talk about like what the visibility of this method is the next is the return type so the next thing you should have in your class method is your return type which will basically be like what value does this method return um for the main method right now it'll return nothing so that's the void keyword you'll just type in void if you don't want your class method to return anything next is the method name um you have your two parentheses and then finally we have your parameter types or your parameter list inside the parentheses so the main method will take in a string array called args and then inside the curly brackets you'll do what like that'll be whatever you want to run in the method any questions about question sure so instead of saying string can we say int or pool or double or something so for the for like specifically for the main method you can't because um once you get into like four complex programs the main method requires you to take in a string array of arguments but um if you make your own like class method so like if we have like a class called student or something um if you make your own class methods in there you can add in anything you want so like okay yeah so in your own methods you can have like it you can have your method taken bulls or ins or whatever but um specifically for this main method it has to be it has to like be all of this are slightly different syntactically oh gotcha um it it doesn't really make a difference so for an array you can instantiate an array by doing like int um x equals like whatever array or you can instantly add in x with the brackets afterwards so both of these are valid a sort of special method where um it doesn't really follow the the rules or guidelines that i talked about over here like it doesn't have any of these um these keywords in front of it so um first it must have the same name as the class so unlike other methods where you want to um you'll want to keep the method name lowercase this one has to like have the exact same name of the class so for example um we over here we have a class called student results um over here we'll have the constructor which is also literally just student results with the parentheses behind it and then the curly brackets and inside the curly brackets you'll basically instantiate all of your data fields that you have up here so full name exam name exam score and exam grade they'll be all given values inside of the constructor and also the constructor has no return type um the other two methods are just like general terms for methods that you might want to consider creating so the first one is getters so these literally just return the value of whatever field you want to access and the second one is setters which will help you change class fields these don't exactly have rules and they aren't exactly things that they aren't exactly special methods i would say but these are just general terms for the types of methods you can create and then again we have another demo and then as we load okay there we go um while we're loading this up does anyone have questions about getter setters or constructors maybe when you show the demo all right so i've posted the demo link in chat um so over here we have like or you have to have it so that it's like literally the class name with parentheses afterwards um for constructors they can actually take in parameters so over here for dog i've basically had the constructor taken like um an integer and two strings so that i can basically set the value of age name and sound so it's not all the time over like in the example in the powerpoint where you don't where you don't have any parameters for constructors you can actually have like different parameters for it um next is a setter so um this is basically just a general term for a method where you just change the value of a data field so for over here for setter set age um you take in like a parameter called new age and you basic you literally just set um the data field age to a new value um getter is you just get the value so this would just return like this dot name so um yeah this will just get you the value of the field that you want um same thing for get age this is just another getter and then this is just a regular class method so yeah and then you can just call like the getters and setters just like any other methods um dog again like when we have the technically like this is calling the dog constructor so having the new dog um with all the parameters passed in this will call the um the constructor over here and perform all the things inside the brackets well that's saved in the dog object does that make sense and if you want to change what's in the dog object you would use a setter method right and so if you were to have things like print twisting that out that print line in the bark method in the dog class um it literally does just that it prints it out but the you can't necessarily print out the sound of the dog from your main class if it isn't a public variable so you kind of have to use some of the getter method and it's good practice too so if that clears it up yeah okay hopefully this will make a little bit more sense like once we start talking like once we like get further into like static versus instance and like public versus private hopefully but yeah um class so um in our previous example we had like age name and sound those were all class fields um another example is like a car class could store like the number of wheels the top speed number of doors um and you can access an instances field through this keyword um christian said that christian made a good point that you can't you definitely like don't have to use it like this that name or this that age um you don't have to use this to refer to an instance field personally i would say you should just because it's it's a little easier to distinguish um what is like part of the instance and what isn't um sometimes what happens is like a lot of programmers or even even i do this honestly like we'll go like we'll do something like in an instance or like in a method and we'll just pass in like another variable like called age or that has the same um name as an instance variable and what happens is like you can get these confused a little bit especially without like syntax highlighting but yeah um next we're going to talk a little bit about static versus instance so static is i would say like think about java in or like classes in two kinds of ways so versus like variable specifically belong to the class level which is this field or method can be called um by the class or um the data is shared by the entire like all instances across the class um the other one is the instance level which is the object level so this is sort of the field or method belongs to the instance or like the object uh instance of an object or an object as that's an instance of the class so that exam this will be a little bit more clear um once we get into a demo and finally we have another level which is just local and it's basically this map this um variable belongs or can only be accessed in the current method so outside the method so outside the methods curly brackets you can't um basically that variable doesn't exist so um again static fields stay the same across all instances of the class all right so i'm gonna copy this over public static void mainstream args so basically the main method is a class method basically and then if you don't have the static keyword this the variable will or the method will automatically or sorry the method or field will automatically be an instance method or field so um over here total dog count is a static variable while dog count is just the instance variable and inside it says does static variable mean that it will always be zero or does it mean something else um not exactly so stat don't think of static in sort of the um the english definition the the sort of the programmer definite or the java definition is that it's elevated to like the class level so it won't always be zero but um it will always be the same um between all instances of uh dog so um basically inside the dog constructor we'll have like we'll increment total dog count and we'll also increment the the instance variable dog count so this dot dog count and notice that um that for total dog count i didn't use the this dot um but for the instance one i did so again like you can't use this dot you can't say this.total.count because that um that field is no longer part of the instance level it's it's basically um sort of elevate your class level so you can no longer access it um through like the instance using this so and then in the main method i'll basically create two new dog two new dog objects so fluffington and whiskers and i'll i'll try to print out both like their dog counts and their total dog counts and let's see what happens so for fluffington and and whiskers dot dot count these both printed ones so basically when i instantiate them um it just incremented the this dot dog count and because this dot dot count isn't shared between the between all instances of the class it'll only be one for each of them however total dot com is shared between all instances of the dog class so it'll be incremented to two um any questions about this sweet all right and the final thing we're going to talk about is public versus private so this just defines the visibility that i want you guys to keep in mind is public and private so public is the method where field can be seen and accessed by any other class and then private means it can only be seen and accessed within the class itself there's also like a middle ground where it's called protected where it's like it can be on scene and access by subclasses or other classes in the same package um don't worry about too much that's more that's more of a complex like form of visibility um before we get onto a demo i just want to talk about what's the default visibility because the default visibility if you don't add a public or on private keyword before the variable is a little bit mixed so basically for that we java calls it package private which means it can only be accessed by the class and um classes within the same package but not any like subclasses or like everything else um the best practice for visibility is you want to keep everything as private as possible so basically um you don't want things outside your class accidentally accessing methods or fields that you don't want them necessarily to be changing by accident um over here i just have a diagram that you can sort of look over this just um tells you sort of who can see um the the methods or fields in your class depending on what modifier you add before the variable or method so as um i'm loading this any questions about um visibility all right so i'm just gonna copy this or pass in their own name but the age will always be three so down here um we have we'll basically instantiate a new dog called dog with the name fido um we'll basically print out the um the dog's name by directly accessing it so using through dog.name and then we can also change the dog's name by directly accessing it um generally for um for public for public fields you can basically directly um directly access it and also direct like change it by directly directly calling like the the class field um and then we'll print it out again so basically we'll be able to change the dog's name by doing this um however like if i try to do the same with the dog's age we'll run into a little bit of an issue because java will realize that the age is private and we're not supposed to be able to change the age or even like see what the value is of it before um or outside of that class so if you've noticed in our let me actually open up the getter and setter um demo and you'll notice that in this demo we've actually set all the all the class fields to private and again the reason you you want to sort of lean towards getters and setters instead of making everything public as you don't like you don't want to actually be changing fields or like or um yeah you don't want to actually be changing the values of your classes or of your instances data um but like in a separate part of your code so this will setting everything to private and sort of hiding things behind setters and getters will make it so that you aren't sort of messing with the date you're on your data like or you aren't um changing your data without realizing it basically making a class on your own and you'll be sort of testing the class methods by calling it an or by instantiating it and calling it yourself in the um main method so you can submit either one of these and we'll we'll sort of um check it out i would recommend you like even if you're doing the harder one um you should also check out the easier one just to um just to make sure like you first off like you know how to call like a class and also you can also check out like the class itself and sort of use it as inspiration to make your own class so i'll copy both of these into chat and why do that um do you guys have any other questions about classes or like or anything else we've talked about um you