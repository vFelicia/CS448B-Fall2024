as of now so the session has started recording okay let's get into javascript part two so let's present this javascript part two today we're gonna get into functions um which is a really exciting topic it comes up a lot in a lot of different kinds of code oh i guess the leaves were i think this week functions um a function is a block of code you can reuse without copying and pasting it every time that's an interesting way to think about it i like to think of a function as a specific instruction set that is used when you call upon it so it's basically like saying like oh like you write out a function and a function is like a given set of instructions that a computer completes and then you can call on that function that's what it means when you can reuse it you can call on it and it will just do the instruction set you don't have to rewrite it out you can just call on it um each function is designed to do one task um yeah that's pretty true um i know we have an example today where like if you want to add a counter you can add that on um into a function so i think one task is a little bit limiting but generally speaking you're going to use like one function for task especially when you're learning code because it keeps everything organized um and functions are executed when they are called that's what that means you can reuse them um they're called um so this let's go over the syntax of a function this is what all functions are going to really look like so this is a function we have and i'm going to go through it in simple english we're going to talk about what it does and then we're going to go through the syntax of it so this function called ask name will trigger an alert that says hello and it will have a prompt that asks you what your name is where you can fill in your name now syntax functions you always have to declare it with the keyword function to say this is a function so by declaring it function you always do that and that's always the first thing you do in a function function name of function so you can name it pineapple you can name it banana you can name it but in this case it's ask name i always recommend naming it something that has meaning to what the function is executing so that you can like organize your code better but you can name it whatever you want um you can't name it something that is an already given operator so you can't have a function named function because the computer will get confused um in terms of like what you're asking it to do so like you can't have a function um that's like an inherit like so there's inherent functions and we're going to talk about those later but you can't name a function name that's an inherent function so you can't name it like um this is a java example but like math.random picks a random number you can't name a function math.random because it will get confused so just pick something that's like a normal english word and you'll generally be okay um then we have the code that is within the function and remember it's always within these two curly brackets so we always have our code that's within these two curly brackets and then we have our code that is our function so it's our instruction set and then does anyone see this this is outside of the function so this is no longer part of the code of the function this is outside of the function and this is how we call upon a function so you just see this the ask name so it's just the name of the functions with the parentheses and then we always end our code segments um with a semicolon so we just do that so basically when you call upon a function you just execute this code by just saying this all right we'll move on um i actually have a question okay yeah go ahead so with the two parentheses is that just a way to mark the um the name of the function like as a market as a function or it's a little different uh it's iffy um i know at least like in here so by putting nothing in here you kind of just established it as like a normal function like quote unquote normal function but you can put um data types in here that specif specify what kind of data types are being used within the function but a lot of the times like especially when you're doing simple stuff you won't need it but you could do like ask name string ask name um integer b or something like that and that brings in certain things that you can then work within the function um a lot of the times you're going to see that with like integers if you want to use um if you want to like make a function that works with integers so um you could have like ask i mean okay say i want a function that says dice roll so i have a function called dice roll and the dice function basically just picks a random number from one to six so i would do like function dice roll in here i could have like integer d okay or like into d which tells me i'm working with an integer but yeah generally you're not gonna put anything in here unless you're working with a specific data type okay thanks good question though uh functions continued so using functions will generally uh well sorry will greatly reduce the amount of code necessary to do a task so um this is the code execution for remember our function over there but if we wanted to just call the function four times like we just wanted the code to execute four times instead of rewriting it out four times we can just call the function four different times so that's why we like to use functions because it's a one instruction set we write it once and then we can call upon it whenever we need it functions continued so functions can have parameters this is what you were talking about this is like the parameter thing parameters are variables declared in the parentheses at the top of the function remember i use the example like integer b that could be a fun variable so in this scenario we're using a string variable called greeting um so they're assigned values in the function call in the parentheses of a function call you add values to be assigned to the parameters and the values in the function are called arguments so these variables can be used within the scope of the function the curly brackets let's go through this in normal english function ask name greeting so this is our parameter the our parameter is a string variable called greeting yes so it's not an integer it's not a boolean it's a string variable called grading and we know it's a string variable because we know it's going to be printed out and we can see it over here yes so alert greeting so alert greeting that's i was asking it um to assign the input of the alert as the variable right because we don't know what it is yet so by saying alert greeting you're saying okay whatever is the answer to this question this prompt alert whatever the answer to that question is we're going to assign it as the variable greeting so whatever gets put in that text box is now known to the computer as a string variable greeting and then console.log greeting this helps us because we have no idea what the answer to the question what is your name going to be so by assigning it an unknown undetermined string variable like greeting we can just say okay well whatever the value is we don't know what it is it's just going to be assigned greeting and then whatever the value is it can just be printed out as greeting yes it's a little weird um but this one also gets into arguments so like ask name how is it going argument so i'm gonna get my pointer and i'm gonna i hate this little bottom bar because it always interferes with our code but i'm gonna try and not move my cursor really quick so we can talk about it okay everyone see line seven ask name how is it going this is an argument this is where we are going to apply our function um in a real world example so remember how we called on a function and we said function name and then two brac uh like parentheses yes that is the word parentheses ask name parentheses so now ask name is gonna take the information given to it and then address it so in this example it's to print so it's going to first what it's going to do when you say when you call on this function by saying ask name how is it going what the computer is going to do it's going to show an alert and the alert is going to have an input box that says what is your name you put your name in so i would put willa and then it would you would press enter it would go into the system the system would take my name willa assign it to the value of greeting and on the console which is that black square that you would see in reply it would print how is it going willa no it wouldn't no it wouldn't it would just print how is it going but if we printed if we had it as how is it going plus remember our cognitive concatenated statements so if we said how is it going plus greeting it would say how is it going plus how is it going willa but for right now it just says how is it going and then it stores my name as the variable greeting i'm sure there's questions okay yeah we do have one question so go ahead okay so input in the parentheses becomes the identity label of the user's answer yes if i'm understanding that question right yes so basically by putting see this greeting this greeting is basically like the id badge of the variable right so like say you have a math equation where x is equal to five but you don't know that yet right you just know that you have the variable x so the variable x in your mind before you know that it's equal to a specific number can be any number therefore it's just the identity that you give the unknown number it's the exact same way but we're going to use it for unknown words instead of unknown numbers yes no maybe and then in addition to that is and the input in the bottom in the bottom ask name works differently from the input in the first function ask a name right or ask a name so ask name in the box i think when you say lines i think when you say the bottom i think you're talking about line seven so i'm gonna leave it here line seven is not an input i mean it kind of is what is being asked here the function ask name has an input variable the input variable is called greeting yes so whenever you call the function ask name as you're doing in line seven you get an input variable of name or of greeting which is the name right but that's not what's happening i mean it's what's happening in seven but line seven basically what it does is it just says it takes all your information that's great but it just prints how's it going to the console right so it's like well i don't like this example code i don't like this example code let's go back so see how we have all of these things and it's like just ask name by doing this this line 11 just this ass name we just have this hello what is your name the next slide we assign the value like the input value of the name to a variable and then we add like how's it going so it will say like oh how's it going your name but it doesn't say your name because it's not a concatenated statement i think it should i think that would be a better example but it doesn't arguments and parameters example i think this would have been helpful to look at so we're going to do it we're going to go through it quick when you call i'm sorry okay let's go through it again in the visual format so function ass name greeting alert greeting prompt what is your name greeting is referring to how's it going not what is your name what is your name is a different variable but greeting gets inserted to here because when you put how's it going how's it going gets established as the greeting so it gets inserted in that's what that means i'm sorry i made such a big error i'm i've been coding in different languages i have made a mistake so when you say call the function and you do this so by saying ask name when we say ask name we make a string variable called grading i didn't get that wrong so we say ask name greeting greeting is the string variable here that's great so console log greeting we create a string variable called greeting when we say ask name how's it going we take this input this text input and we establish it as the value greeting it's not the what is your name it's the how's it going so it's still a string variable it's still a variable that gets used within the function but it's just how's it going yes so now greeting is the how's it going so console.log greeting see our string variable greeting will print how's it going on the console now because it's an alert the parameter greeting can now be used within the function just like a variable how's it going does that make more sense i'm sorry i messed it up guys i really do apologize okay arrow functions error functions are more condensed version of regular functions um they allow you to create a function without giving it a name so we had a little bit of a meeting on arrow functions um this is a literal this this th i hate this i don't like this so this tells me literally nothing about what an arrow function is so arrow functions um they can act as like excel not accelerators but like um it just condenses the regular function code down um yes it allows you to create a function without giving it a name i don't recommend doing this like when like you guys are just learning how to code do not give functions that don't have names right now you know you like and i'm not saying this because i don't doubt your coding ability i'm saying this because i've made these mistakes and i have like lost a lot of work or i've deleted things that i didn't realize that i shouldn't be deleting give names to things it helps you organize it helps you realize what things are happening it helps you organize things it helps you call on specific things you want to call on so even if you want to use arrow functions don't create a function without a name in my recommendation because i think that it can be really confusing and i think you can like lose things and lose track of things really easily and you can just confuse yourself unnecessarily so i don't recommend doing this but yes arrow functions are a more condensed version of regular functions i think this is a really bad example i think i'm gonna put in where we can hold up so this shows us a traditional function and an arrow function and i think seeing the difference will be helpful so a traditional function we have a function we have our two variables yes the function wants us to return a plus b plus a hundred right so we have our two unknown variable values and the function just wants us to return a plus b plus a hundred so some integer value by using an arrow function we take out the word function so no more word function no more curly brackets see we just have a plus b our variables arrow which kind of takes the place of the word function a plus b plus 100 so it's basically just saying i want to give you these two variables and it's going to be a plus b plus 100. so this is a function it condenses it down but notice how like there's no more function word so it's harder to identify as a function if you're just like skimming through your code um there's no return so be careful with that because return and print are two different things um return just like returns the value back into the computer but print out gives you a visual output so if you want it to like show you the value you have to use print out not return so be careful of that so they're really just tricky things um i personally at least for like the beginner class like please don't you don't need to use them you like you shouldn't you know you if i honestly just think it would confuse more than it would do well um but that is my personal opinion that is my two cents you don't have to take my advice as bible but that's my personal recommendation on arrow functions okay hopefully we understand them at least i'm going to share my screen again and we're going to present this all right so builtin functions um the functions are provided by javascript for you to use anytime without having to import libraries so remember when i said don't name a function anything that's a keyword for a builtin function this is what i was talking about so java and javascript try to be really really helpful and they give you all of these commands that are already built in so remember how um last week we went through our list of operators and we had like double or we had like slash meant divide and we had like double um asterisks meant like like power of so those are kind of like builtin operators but java does something really nice and it gives you specific words that give you specific functions so if you have um console.log date so this is a specific um date is a specific builtin function so date parentheses gives you the it automatically gives you the date so friday january 22nd 2021 it automatically gives you the date so by saying console.log it goes it prints out to the console the date so date parentheses is an automatic builtin function so you don't want to name your function date because the computer will get confused and it will think that you want the automatic builtin function and therefore that's what it will do or it will cause a runtime error or it will cause a compiler error so it will get really confused so when i say you can name your function anything you want just not a builtin function name this is what i'm talking about um parseint 4.1 this is for something that's like rounding integers a little bit so it's like um four point one it rounds it down to four so it will print four um console.log is n a n zero divided by zero so it's kinda just like a true or false machine this one um but yeah when i say don't print um don't print like don't name your functions something that have like already inherent values these are the things i'm talking about don't name a function date don't name a function parse integer don't name it parse float don't name it is an an um conditionals used in code to perform different actions for different decisions so if else else if these guys are going to become your best friend especially as you move into more complex coding so what these guys do um they work as like a team of three so it's kind of like i like to think of them as like the jack queen and king and a deck of cards they're all slightly different but they're all part of like the same like you know like you know how like the jack queen and king are like different than like like the regular numbers that's how i like to think of these three so if always comes first um elsif always comes second and else always comes last so basically what it's saying is like it gives me off like what this allows me to do is to give me options within my code so like if something doesn't work backup plan and if that backup plan fails then all else fails here's your last and final option but you can have as many of these as you want so you can have i mean you can only have one if and you can only have one else but you can have as many elsifs as you want in your code you could have five you can have five 000 but it basically just gives you backup plans that's how i like to think about it so let's look at this example uh let's start with this one if you only have two plans you're going to use if and else don't use elsif because if you only have two plans the computer if you use elsif is going to look for the third one so if you only have two if and else are good your first one is always going to be if so like if a condition is true or if a condition is false this is your booleans right so not everything here has to i mean not everything here has to be a boolean but what the thing is saying like if the condition is true or false or let's think of it this way if the condition set in these brackets has been met so if the criteria of the condition have been met then the code under it will execute if the con if the criteria for the condition have not been met it will go to this different action it will skip to the else right so if plan a right but if plan a like if we can't run plan a we're gonna go to plan b and that's else so if now we're going to go to this example if else if else if plan a if conditions for plan a are met you're going to run plan a if those conditions are not met you're going to look to see if the conditions are met for plan b if the conditions are met for plan b then you're going to run plan b if the conditions for plan a and plan b are both not met you're going to run to plan c yes no maybe on the explanation do we have questions anew how's the chat looking use those reactions guys yes no maybe i know this is tricky but like the bread and butter of coding that's good i saw some thumbs up i'm really glad guys okay can i ask a kind of specific question go for it okay so last week i was trying to um figure out how how to um i was thinking about like this but i didn't know how to do it so i couldn't do it but um if you had to you had the prompts come up and it was yes or no how can you um do that if statement so like if someone says yes you make it go do one thing or no would you just put like no or yes and like the code where would you put it would it be if yes then no i know i i know exactly what you're saying it's a little bit tricky because you have to do the response from the alert so you have to i don't want to go in this too much but like if you would have to say like if um i mean when you think about it fundamentally you either have you have two options it's either yes or no so i would say like if um i can't remember the exact code for it but it's like if alert response yes like system.out or like print you selected yes else you selected no you know what i'm saying yeah i get it okay yeah yeah okay um if you want to like get into that ask me when we're working through the code okay conditionals example if x is equal to 10 x is equal to 10. so this is an if block yes so if x is equal to 10. if this condition is met the const will print x is equal to 10. if it's not it won't do anything if else block if x is equal to 10 it will print it's equal to 10. else it will print it's not equal to 10. so makes sense if x is equal to 10 it will print else x is equal to 10. else if so it's not equal to 10 but it's equal to 9 it will print x is equal to 9 and if it's not equal to 10 or 9 it will print x is not equal to 10 or 9. yeah yeah okay so switch statements um type of conditional specifies many alternative blocks of code to be executed so yeah um an expression or variable value goes in parentheses so it's like kind of it's the same as the if else value so it's um expression or value entire block and closed with curly brackets so see how the curly brackets you know it's here to here um notice how with these ones if has its own curly bracket set else has its own curly rocket set not with the switch statements the switch statements is just once you say switch until you want um it to end you don't close your curly brackets each case starts with a colon and if a case ends with a break statement cases um each k sorry each case ends with a break statement so break in code just means like break like take a break stop for two seconds um each case ends with a break statement if case is true it doesn't check the others so this is like only good for yes or no things so like if you wanted to know if an integer is above or below a value like you wouldn't use this you would just like want to say like is like you would have like something like before this like a good example of this like you had something before this that was like x is equal to five right so like in the switch you would have like this x is equal to five yes case x x is less than five and you print x is less than five break case y x is equal to five console prints x is five break you could also have like k z where it's like x is greater than five and it prints out so it basically just like if else statements but it just like cascades through them and as soon as it finds one that works it stops right so um default is like the final like remember how i said use else is the last one and used if as the first one well in this case instead of using if um and if else you're just going to use case but your last one is always going to be default right so it's like the default very last plan yes how do we feel about switch statements do you have any questions i knew what's the chat looking like so um i seem to miss like a question maybe from the previous slides okay we can go back uh the previous slide it asked yeah um she asked what does the actions do wit oh this this this like action action is just the execution code so like in this case this is the action console.log is equal x is equal to 10. that's the action code so action is just like the thing that happens when the thing is true yeah so it's just like what happens when it is true you know what i'm saying yeah um any other questions um so far none awesome okay great um this is just a switch statement example we'll go through this quickly variable name marie um so the variable of name has the value of marie switch name expression be evaluated is the name variable if the name is ida it will print did you know ida lovelace was the first computer programmer if the name is marie it will print you share a name with marie curie and default it will print hi name exclamation point so in this case the name is marie so we'll go to the case ida and it will say well the name is not ida so we're going to ignore this then we'll go to the case marie and we'll say oh the name is marie okay so it will print out you share a name with marie curie yeah but if i like if the variable name was my name willa it would say oh well the name isn't ida so we're going to ignore this and the name isn't marie so we're also going to ignore that so what we're going to do is we're going to print hi willa exclamation point and this is another example of our of our concatenated statements remember we insert the variable like that with our plus signs okay return statement a return statement ends um a javascript function functions can also return values um so see this like return input this is different than like printing i mean so basically what it return means is it returns the information that was given it back to the computer so like what it means is like say i have this input so like this input name is like ife so it inputs it but when i say return what it does with the name ife it takes it back to the computer and it's like okay so the name we're using is ife and it just makes a little me like the equivalent of return is like just making a mental note of it and then when we say variable name equals ask name how's it going and we print console log hi name it will be like oh my gosh name we know what that is the name is ife remember we made a little mental note of that when we returned the input so that's what returning does um to end a function return whatever value input you had because it just like it like updates the computer with the current information so to return a value add the value after return so like in this case we return input but like if you were having a variable um like say this was like numbers and you had a variable called like uh or like a very like b you could like return b you know or like return name return input a good way of saying is like return input but it varies depending on what kind of code you're using prompt can be assigned to input because it returns a value so the prompt works here because the prompt has an input value right so we're assigning the input variable so this is we're creating a variable called input and we're assigning it to the prompt value and then it just returns it back uh oh do we have any questions about this i knew what's the chat saying okay we do have one okay one question is why isn't high okay quotations high quotations plus input and then plus uh exclamation mark at the end there since there's no why does it say name instead of why does it say name instead of input yeah so i think the question is yeah why does this say name instead of input they said yeah okay yeah if let's look at line five upwards for now so just let me get my pointer just here up if we just have like alert greeting variable input prompt what's your name return input you would be 100 right it should be high plus input but see this variable name right so it takes the variable name and all of a sudden anything that um was put so remember our ask name how's it going variable thing so it takes the value that's gotten from the function ask name and assigns it as the variable name so this is your key here this variable name equals ask name so variable name equals ask name basically just says like oh well the input that's coming in from this function it's actually it's actually a variable called name like you're going to call it input in the function but this right here overrides this because it's like the larger umbrella okay so that's your reply that's your submission form let's go to the reply now and remember everyone as soon as we get to the reply what's the first thing we're gonna do say it in the chat say it out loud fork it fork it we love forking it all right if we forget how to fork it remember this little down arrow and we're gonna press fork this down arrow and we're going to press fork we're going to press fork we're not going to touch the code we're going to press fork fork fork very important okay so fun fact today our project is a little quiz show i'm gonna go through it quickly okay so capital cameroon i think this is it from my memory um basically it's a quiz show you get the answer right you move on to the next question um you know if you get all three questions right you win the quiz uh the most important thing i don't want to demonstrate this running why is it not running you get the question wrong it says you lost and then you have to play again until you win so it's a quiz you either win or you lose um does anyone want me to go through the javascript code quickly oh my god i know for a fact that christians kids are on this editing it but we're gonna ignore that okay so i'm gonna go through the javascript code really quick because that's what we're here to learn so function correct answer um cue number if cue number is less than three um window location replace queue number um so basically what this does is it says like oh if the number is like so there's three questions that's why this is less than three so replace q with q number dot html so like basically what it does is it just like takes you back to like the the um like if you get the correct answer then it adds one to like it takes the question number and then it adds one to the question number because notice how it's like q one q are q three q two so it takes one to the question number and then it um takes you to the next web page for the next question else which means you got through all three questions it you go to the winning win.html which is like oh you won you answer all the questions correctly yeah i'm going to stop sharing do we have any questions