today uh we're just going to be doing a review about writing classes in java um it's lesson number nine but just an extension of yesterday of last week's lesson um so this is our agenda for today so the first thing i'm going to be doing is taking any questions there's anything you want to go over and then we're going to be learning something new which is called class diagrams i'm going to go over last week's workshop and then if you have time i'll do the quiz i'll take any more questions and then at the end i'll very very briefly just introduce the concept of inheritance today we're going to be learning to draw class diagrams so a diagram is used to show the relationship between different classes it's very helpful because if you have a lot of code with a lot of classes you can draw a diagram before coding so that you have a better idea of what you want to code it's really helpful also with understanding code so if you don't understand a big project that someone else wrote maybe you can draw class diagrams for it so you can get a better idea of what it's doing this is drawing a class diagram basically takes out the code component of coding of classes like it allows you to focus exclusively on your relationships between classes and the purpose of a class but you don't have to worry about like syntax or actually coding anything this is pretty much just to help you understand what a class is what it does how it can relate to other classes so now i'm going to be going through the demos from the uh last lesson and just drawing a class diagram to show you what it is for each demo so here we have a car class and it has the this one attribute here num wheels is all it has so i'm just going to open up ms paint to draw a class diagram just for this class here so usually you draw class diagrams you represent one class with a box like this and then you can section it up with some lines i'm just gonna that did not work uh you can section it off with two lines like this and in the top section you would put the name of the class so in this case the name of the class's car security's name of class goes there and then in the second half of your box you're going to list um all the um attributes so in this case it's num wheels so you can put int so the data type and then the name wheels and then down here you can put the class methods so as you can see this this class has no methods it only has constructors so it only has um ways to allow you to make um car objects down here but there's that you can't actually do anything with the car there's no methods so this is just a very basic um class diagram that you can make and when you have multiple classes you'll have you know multiple boxes but um we'll deal with that towards the end of class right now just focus on the one class diagram like this so this is a much more complicated one so this we have the class dog and we have three attributes here at the top that you can see so i'm just gonna do this one now make it look a little neater so everyone can understand it but um i just section this off like this and then the class we are using this time is dog so at the top here you would write dog and then the name of the class that just goes in the top third of your box and then in the second third we're going to put all of its attributes so int age string name string sound you usually keep the data type like that um attributes um and then the bottom third you can put the methods of all the of the class so here you can see so we the constructor does not count as a method only these um methods count so we have set age get name get age bark so let's take them and put them all in here there's quite a few um there's bark there's one and uh get age is one um get name oh sorry i put string age instead of string name on my bad string name that is in white there you go um and then if you start running out of space you can just like go on to the next line like that that name and there's also a set age and um that so in here you put all the methods and then this diagram is just helpful in i guess understanding the purpose of a class so the purpose of our dog class here it gives you an age and a name and a sound and you can customize all those um and then you can use those methods down below on the dog class um uh you draw a couple more much easier times out diagram good that is the point of the diagram um very glad to see that so yeah just keep in mind that constructors don't count okay this one is not filled in so i'm not gonna fill that one in live but um see what this one is i have another dog these are pretty straightforward so this one doesn't have any methods so you would just white it out if there's no methods like that and then this one just has a name and age like that and then that's the class diagram for this very simple um yeah that's just a basic class diagram for one class and i think now i can get started on doing the workshop in this workshop try to implement as many methods as you can from the student class and then print out all the info about your student so in this case you're given a full class so this entire class is just given to you and then over in maine.java you have to actually um use the class to make an odd a student object excuse me and then um you use some of its methods in in the code here so i'm just going to uh fork work this make my own version of it if i do anything and then i'm just going to be taking a look at the student.java so you can kind of understand what's going on here so class student in this case our students attributes are they have a first name last name id number grade level gpa and it takes ap value so true or false if they're taking ap classes and then our constructor so this is what is going to allow us to make a student pretty much um so first name people say you have to pass you have to give the student a name um an id number a grade gpa and ap otherwise you can't have a student in this school structure we set each of the attributes to those passed in by the user when we're creating a student object yeah so that's what we're going to have to implement in maine then we have some methods so we can get the get the name um we can also set the name we can get the id uh set the id get the grade level set the grade level so reminder so getters so like this one this method getters just returns a value so because in this case first and last name are private you need to have a something that will return it will return the value for you because you can't access it directly private means you can only access it within within student and then setters like set name will just change name will change the first name to something that you pass in here and it will change the last name for something that you pass in here and you have that for i think everything right um yes you have this special ap classes method that's just going to print out whether or not they take ap classes so that's what we have going on in our student class and then our main here the first thing we have to do is you have to create a student object so um if i want to create a student named anna um does anyone have any suggestions for how i would do that what lines of code i have to type in or at least part of it wouldn't be student and then you have to try string first and then you have to type the conditions or something yeah so you'd uh go student that's the name of the class and then the name of your student i'm just gonna call for anna equals new student and then all the they're called parameters all of the that's just you have to set everything in the constructor to construct a suit you have to give it all of these things pretty much you have to give it a string a string an int an int a double and a boolean in that order so um anna e because the first two things after these strings and then a number an id number doesn't really matter um and another number for grade and then uh a double for gpa so 4.0 for sure and then a boolean for ap so false so if you don't get those in the right order i'm pretty sure it's gonna throw an error because what it's gonna do when you do this it's gonna take all of these and just like put them straight in here and if it doesn't match up properly you're going to get an error and you can do this you can make a bunch of students if you you want to like this i i don't i don't know her last name so we're going to see and then you can change all of these values however you want um like this so with this um quick question so for what is the idea exactly i've never heard of it um i guess students just have um id numbers like if you want to log in on a school computer it doesn't really matter and then so it would be name so be both names then the id and then it would be it would be the grade and then the gp and ap yeah so you have to take it in the order of the constructor yeah willa um type it in chat if the data types aren't aligned your code is problems so ins have to go they're assigned so you have to have an int in like the third place so like like for the id number um and then same with strings you have to have two strings and then yeah yeah just to like add on to that there are certain ways you can change data types so like if you wanted to change like an int to a boolean you can use something called a wrapper class or i think it's a boolean to an n but basically certain data types can you can change them within one another however when you're trying to establish new instances of a class you need to align them in the way that you previously set them out because you don't want to have the computer thinking your string is an integer because then it won't compile because certain things can happen with integers that can happen with strings so you need to align your data types in the way that you previously set them out yeah basically when you're creating your object these parameters just have to line up with these parameters in the constructor they have to match in data type and in quantity pretty much um and in order obviously so now that you have your student objects um we can try to use the setter methods to change some of the values you defined above so to use a method on a class um let me just double check what the set looks like so let's change um my id number or something so we have this set id method in the class which is going to take an int so i have to pass in an int so um we can just go anna dot set id and pass in a number that's like different i don't know it doesn't matter it's that um and you can try printing it out to see if we got a changed value we can also print it out beforehand so we can print this out to anna and we have to use a method remember because the id is private so we can't access it outside of the the student class you have to use the get i think id method like like that um and then we can also do this get grade level yeah and then the gpa and i thought get the gpa like that and that should run yeah so um you change my id number to this number here and so when we print it out it prints out the new changed value my grade level is 12 which is what i originally set it to be up here on line 9 and then my gpa is 4 which is also what i set it up to be original here and if i can just go back and change all of these to change all of those so set gpa something else and set my grade to be something else and then when i use these setter methods as you can see on the right change my grade to 11 now and change my gpa to 3.9 instead of what it used to be um so we can also use the boolean ap classes method here so we can go back and double check if we forget what everything is called so we just called it ap classes so i don't even have to this actually prints for me as you can see so i don't have to print this out i can just go hannah dot ap classes like this and with the semicolon um and that will print for me that i do not take ap classes because the method will check if i am taking ap um that is pretty much the workshop you can obviously change a bunch more things and print out a bunch more things if you like um i can also print out my i like things before i change them so my id is first set to you know 2 000 20 000 whatever and then i change it and it changes to 900 by whatever um so yeah you can do a lot with this play around with this workshop but that's it um any questions about that pause for two seconds because i know what anna just did looks kind of simple but i want to make sure everyone understands why it works the way it does why the id prints out twice and it's two different values right we always have to remember that java works down like from the top to bottom therefore it changes the value after it's already printed out the statement does everyone understand that i know that sounds really simple but like that's a really important part of java and like it helps to like visualize the fact that your code does run down top to bottom okay good sorry i know that was probably not needed but it's very important yeah so it just runs line you know these lines first line eight and then nine and then it'll print out my first id and then it changes it and then it prints it out again after changing it um it just runs so the lines will just run in order 10 and then 11 and then 12 and then 13. and so because of that order first it'll print what i already have it set to up here and then and then i change it and then when i print it again it's worth it it's now this number pretty much um well i will type it in chat again um if you didn't quite understand that but um yeah that is the workshop you can now do that on your own and you can make your own student and you know change whatever student values you want um this is the first question which method is not a common or which which type of method should i say is not a common class method the correct answer is b um this is an animation there is no animation okay uh the correct answer is b destructors are not a class method um constructors are the method you use to be able to create an object it's like the blueprint method in a way and then getters are what allow you to just get values and setters are what allow you to set values um that those those those three are valid next question good job everyone by the way how can you access a private field outside of its class so how can you access a private field of student of the student class in the main.java you can access it like a regular field you create a getter that returns the value of the field or you create a variable outside of the class with the same name yes all of you are right you create a getter that returns the value of the field so you can't access private fields directly outside of its class like you can't access it like a regular field so like in the workshop you have to create a getter method that will return the value of the field good job good job and then this is the last question i think private variables can't be accessed by subclasses we haven't gone over subclasses in this lesson have we so okay so maybe this question we don't we don't need to answer this question um good job with those two questions though you were correct with those questions um the next thing i'm going to be doing i guess is technically i'm supposed to be answering any more questions that you have right now oh you can also do some extra practice actually okay so maybe we should go over subclasses a little bit so what is it so this is um this is a class diagram with multiple classes so you have the big person class at the top but you also have a bunch of these um sub classes underneath it um student staff high school middle school math and there's a bunch of things going on here so basically you start at the top and you have a person class that has you know maybe an eat method or something because all people can eat but if you want to have more nuanced versions like you can have a student person and a staff person so a student is a person and a staff member is also a person but they have like additional methods and attributes that a person doesn't so the in this case student and staff would be sub classes of the person class so if a person has an eat method student and staff also have an emethod however a student might also have a study method or a go to class method while a step while staff might have a teach method or something so um student and staff would have more methods and more attributes probably than a person class would and you can probably take this a level further with high school and middle school sub classes to student and math and english teacher um subclasses for staff so there is some um additional slides i can show y'all if i'll just stop showing for a second so i can get them um so these are technically supposed to be the next lesson but i'm just going to give y'all a little preview into it so let's just skip to creating subclasses all right so here we have um could be creating subclasses slides so if you want to create a sub class you would use an extends keyword which i will show y'all in the demo and if you want to refer it to the parent class so in this case car on the right car is a parent class you use super i'll show you that in the demo in java you can only inherit one class so race car can only inherit car it can't inherit car and vehicle for example you can only do go one up pretty much so let's open up this example just so you can see a quick uh demo so in here we have a vehicle class so i'm also going to draw a uml diagram for this actually so you can maybe understand it a little better so here we have the vehicle class with a color and number of wheels attributes and it has the print info method and then in here you have a subclass of vehicle to do a sub class just called truck which is your new class extends vehicle pretty much and this one has its own attribute called number of trailers because vehicles don't necessarily have trailers right but a truck will have a trailer so that's like how you could use a subclass and then you have your constructor and there's something interesting in here um super this super basically just refers to the constructor for a vehicle like it like this automatically if you put it in here will go up to the vehicle constructor so you can use that as well there is another subclass also car it also uses super and it just goes up to vehicle and uses that yeah so sub classes are like like um yeah finer categories of information that's that's pretty much how to explain it so in here we use an arraylist and we make a vehicle we make a truck and we make a car and then we print the info for all of them so let's run that so there we go generic vehicle um because that is what this prints out in in vehicle print out the color gray and then the number of wheels and then in truck prints out in truck so when you're using the print info method on truck because it has its own print info method that one takes precedence over the vehicle print info method so basically um this this is like more important in a way than what it's inheriting the print info that it inherited from the other subclass the other class so because of that it has its own thing to print the number of trailers um while a vehicle doesn't have that this is a little confusing sorry um however as you can see car does not have its own print info method so if it doesn't have its own print info method it's going to default to the print info from vehicle so this is actually pretty good example because it shows both both overriding a method and it shows um using the inherited method yeah subclasses take all the information from the parent class and apply it yeah thank you willa you're very help helping me right now what i can do in the meantime is draw a uml diagram because apparently that might be helpful to explain what is going on um let's do that so in this case look at this we have three things going on in this example so we have the top is vehicle and then we also have truck and car which both extend the vehicle class so let's just section this up like we normally do yes everything willa saying is very important we have our vehicle yeah i don't know how to type that vehicle don't don't worry about that car car class and then our our truck class and then we have uh can draw some little i don't know how to draw an arrow properly like that there you go um and our vehicle has the color number wheels and then print info so spring color it gets an ant numb of wheels not number of wheels and then print and chosen like that and now car has number of seats and that's that's all it has to have anything other than um has number sorry ants number of seats if there are any questions while i make this diagram also feel free to ask so right now this car class has int number of seats string color and number wheels and print info like it takes everything from vehicle and like you can use it in the car class and then truck would have um number of trailers and it also has its own print info method so in number of wheels and it has its own print info method and so whenever it has its own print a subclass has like its own method but it's like named the same as this one um this one is gonna be more important the one in the subclass is more important and that's the one that's gonna to be used when you're running code the reason why truck has its own print info method is so you can print out the number of trailers because a vehicle doesn't have that so you can't print it out from there uh yeah i can yeah that's this is a diagram for classes multiple classes their relationship to each other these two are pointing up the arrows up i guess means that it has an is a relationship so a car is a vehicle a truck is a vehicle as well yeah and remember you can only have um want a subclass can only have like one parent class yes yeah that is pretty much it for today right don't think there's anything you need to go over um now i can take questions um i can send you know extra resources so it is really important to practice the trickier stuff like this like try doing the extra i sent this extra practice so you know try doing that on your own time here are some helpful links that actually willa can you send like the actual links because that didn't work thank you yeah um in the meantime you can have here's the submission and feedback forms these are the actual links for these um so the submission form can be for last week's workshop or any workshop we've ever done and then the feedback form i really appreciate it if you filled that out because it it helps helps us like change the lessons and change the way we teach and stuff so yeah um i don't know those are questions anyone needs help that's pretty much it so think thank you everyone for coming the lesson um make sure you do the feedback form uh make sure you practice on your own time that you have something to do use for practice you have some resources and links and then if you do finish the workshop because you also have the workshop please submit it if you feel comfortable doing so um yeah i think otherwise i'm done you