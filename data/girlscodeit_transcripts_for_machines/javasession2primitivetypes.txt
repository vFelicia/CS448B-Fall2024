all right hey guys my name is jessica and i'm a senior cs major at university of maryland so you guys are in good hands when it's coming to ap uh review hopefully um and if you want to introduce yourself that feel free to i am a junior in high school and i've taken several different computer science classes i'm the president of my school's girls who code and yeah sweet so um today's just we're going to be learning about um just variables and primitive types in java so basically my computer doesn't freeze um we're just gonna be going over like what's a variable how java handles variables like um primitive versus reference types because there's like a little bit of a nuance between the two types different types of data types in java and then we're going to go over like all the primitive types what you can do with them and stuff like that so first off what is a java variable so um a job a variable is basically something that you can like that's used to basically store information so like sort of like a variable in math basically um for example we have like h equals six um basically that's just saying in this variable called age we're storing the number six um for so when it comes to variables there's two types of there's two different terms that you want to um that you want to keep in mind the first one is declaration so basically um when you declare a variable you're just saying this variable exists so i just pull up my notes over here in java if you say like in age um this is sort of just declaring a variable where it's just i have this um variable that's an integer called age and it just exists i don't know what like the the value is exactly but it just exists in like my code um if i then go like age equals six that's called initializing it and what that basically means is i'm giving this variable a value so declaration is first saying um this variable exists and this is like what it's called um in initialization is giving that variable of value next um why do we use variables so in your code um there are going to be times where you just want to store information and then use it later on so you want to use variables because first it allows you to like change your code easily and you can like basically hold information your code and it's also useful because like if that value of the very like of the variable changes um you can sort of um it'll change like it'll basically um be easy to change information in your code without um without having to do it by hand basically all right so next um we're just going to go over primitive versus reference types so for this lesson we're focusing on primitive types and primitive types are generally types that you could represent with numbers what i mean by that is like for example integers which are whole numbers booleans which are true or both but you can sort of represent you can like represent them in number form with like zeros and ones um and characters which if you guys are like familiar with the ascii chart that's like you can basically represent single symbols with numbers um primitive types are immutable which means that they can't be changed directly it's sort of hard to explain right now but you'll get a better um you'll get a better grasp of what immutable means um when you get to like objects and like class types and then finally the default value for primitives is zero so if i don't initialize a primitive um it will automatically be initialized at zero and second reference types are basically everything else so for example any classes you make in java arrays and strings and some are mutable which means they can be changed and others aren't um it just depends on the class type and then finally um the default for reference types is no so if you don't specifically assign a reference like an object or anything it'll just be um the value of it will just be no so um oh yeah by the way like if any of you have questions feel free to just interrupt or um just throw in a chat and i'll try to me and diana can try to answer it do the best of our ability so um as i said primitive types first represent by numbers um the three major types we're going to talk about are first number types which are basically integers um doubles which are decimals um the second one is characters which are symbols and then booleans which is true and false and then again default value is zero and then this is just another list of different kinds of primitives so first is in which is integer these are whole numbers like negative 10 or um 256. second one is double which are decimals so like 7.56 or 1.2 and then finally booleans which are just true and false so first off integers um integers are whole numbers again um these are just a bunch of different examples of code numbers and then um you declare them by saying in number equals whatever value one given and the general um operations you can do with them is like you can add subtract multiply divide and then here's just an example of like how you can declare a integer type so um the most important part is just in general for variables in java you have to tell java which type the variable is so like if i'm declaring an integer i have to tell java first that it's an integer called range so in range equals whatever value and then you can just print it out or something like that so next um doubles doubles are just decimals so 1.5 3.33 etc um just like with integers you have to use you have to declare it like double x equals 7.5 um and like with integers you can add subtract multiply and divide and um this is like the it's generally the same with um what declaring variables in java so just type variable name equals whatever value and then we also have characters so characters are single letters or symbols so this can be anything from like the percent sign to like the letter a or um the number one but most importantly for um for characters you have to surround them with like the single quotes so if you notice here all of these are single quotes if it's double quotes it'll become a completely different type so um just like with other variables you have to like declare the type so char c equals single quote a so um it can be a little confusing just having like i'm saying like primitive types can be are like types that are represented by numbers and it can be a little confusing because how can you represent like characters with numbers and you can basically do that through something called the ascii chart so this is basically a list of like all the possible symbols um that you can have and they all are assigned a number so um even like things like this space bar or like or um starting of a text or ending of the tags these are they all have their own number value so um that's how like what that's why like characters can be primitives because they kind of have number values based off of the ascii table and then finally we have booleans williams are just true false expressions and in java the type is directly just called boolean so boolean choice equals true or false and um if any of you guys are familiar with python just make sure in java the t for true is lowercase not uppercase and then um you can do like a lot with booleans like um making conditionals and stuff and that's something that we'll be talking about in our next lesson and then here's just an example of how you would declare it um basically the same rule as with like all the other primitive types and then finally um we're just going to talk about something called constants so um a constant is basically like a variable that you never want to change so um for example constance and like and other fields of stem would be like things like pi or like um trying to think like a of another constant or like the um or different like constants in like when you in like chemical like in chemistry and stuff like that so these are just numbers that that just never change and that you can't change so we declare constants by using this keyword called final so if you put final in front of like your variable declaration python or java will just be like you can't change this um this variable in other parts of your code and then finally um i'm just gonna go over like different things or like different aspects of um primitive pipes so um i'm just gonna open this and then we're gonna talk about it all right so um basically for like four different um primitive types you can do a bunch of different operations so for example if i have in a equals 10 and then if b equals 15. um you can do things like multiply them so this would print out 150. or you can like add them you can subtract them like your basic math operations um you can um so when when it comes to like dealing with like integers and doubles like as long as you stay within the same type um all of these math operations are pretty like they're pretty um i would say like they're they're pretty they're pretty like they they do like it they they kind of like follow the math rules however like it's kind of it gets kind of sketchy once you get to like adding characters together or like adding different types together um for example if i change this to a double so um what what java it will do is because all of these um primitive types are kind of um they're kind of all just like the same kind the same number type underneath java will actually automatically convert the integer to a double so if i do this this should print out a double so as you can see it didn't print out 150 you printed out 150.0 um when it comes to automatically casting a few different primitive types java will always um it will always cast you like the larger type so basically the type that can give you more information for example like as an integer you can't really represent 1.5 because integers only can only represent whole numbers so um what java will do underneath is because integers can't represent as many values as a double ten they'll just pass this in a into a double 10.0 and then i'll multiply 10.0 by 15.0 so and this sort of like automatic casting doesn't work the other way around so if i have nc equals a times b java will actually um not like it and it'll throw a compiler error because i'm trying to convert or i'm trying to automatically convert a double which is like the larger um the larger type to like a smaller type so this would actually throw a compiler error yeah i know tell me like incompatible heights um it's just afraid that i'll lose information when i convert downwards and then you can even like because like primitives are all technically numbers you can even do things like adding characters together so char a equals a and then i have chart b equals percent sign i can't even do something like a times b and this should actually give me like an integer return so it'll actually print something out like um 3589 because it it will actually convert all of these um all of these characters into numbers according to the ascii table and then like return an integer um when it comes to primitives so like in math and stuff um usually things like whole numbers and like and um decimals are they're technically infinite right um they're technically an infinite amount of numbers but um in java because variables are stored in spaces of memory and variables argue like can only be a certain size there's actually things like the maximum value of integers at a minimum value and this is all because like java gives you only a certain amount of space in memory after you store these these numbers so if i like use something like in a equals it is not in i remember correctly this will actually print out hopefully yeah so integer it's actually integer that max value this is a constant that's just the maximum value of integer and like the same goes for like doubles and whatnot um as you can see it's like a really large number so hopefully like you won't go past this but um if you like if this is just like basically keep in mind that integers and doubles and like all of your variables in java they don't have infinite storage and then finally um let me check my super secret demo notes finally um when it comes to converting things like um doubles to integers um what usually when you like round a decimal to like a whole number it'll be that like you'll round anything like above five to like two or above point five to and then like point four and below would be like would be zero right but when it comes to converting um two integers um what java will actually do it also cut everything off after a decimal place so something like 7.9 should actually round down q7 because what java is doing is it's just ignoring everything after the decimal and it's just saying this is just seven so basically um what can happen is you'll have something like um 11 divided by like or um you'll have something like 11 divided by 5. or let's do something more simple like 3 divided by 2. and this will actually give you one instead so um do you have any questions about like or do you guys have any questions about sort of everything we talked about so far with primitives sweet all right and finally um we're just going to go over the a few like practice questions um do you guys want the i guess like we're going to go over the ap stuff and diana if you want to take over yes that's good so do you want to just go to them or get me yeah you have them up so that's good okay so this question is asking what in a equals 10 and double b equals 1.0 and if we multiply them in a print statement what will it current so if anybody would like to answer and then if we want i can explain to after somebody gives it a go somebody said b in the chat and that is correct because we have an integer multiplied by a double so we're going to get 10.0 as our output um so for this question we are doing what we did in the previous question but saving it into a variable first so we're saying int c equals a times b and then we're printing out c so would this be the same as last question or does anybody think it'd be different a a is correct because you can't um just cast down without explicitly casting down won't automatically go to an integer if it's a double so that's good okay so now we have two characters for this one capital a and lowercase b and now if we want to print the addition of the two what do you guys believe will print based on what we've learned hey you think um what do you think jessica um i would say this one's a little tricky i would say it's c that's what i was also thinking as well just because normally you're adding characters they just like sit next to each other um right yeah so basically when it comes to sort of adding characters together um what java will do is that it will actually convert the characters into numbers so like remember back in the demo um i tried to like multiply two characters together and it actually came out with a big number so what would do is it'll look at this character a and then convert it into something based off or like a number if i remember is like 63 or something or 65 based off of the ascii table i know add these two together as numbers so come out as 163 yes so it's different than what we would like intuitively think but that's how java handles it yep sweet so um finally we just have just workshops and and practice frq questions so um just gonna copy this first um this is just a practice ap frq um if you're interested in doing it we also have a workshop which is kind of like it's kind of like ungraded homework so like if you also want to check that out um that one's just about like practicing how to like declare different types of variables and initialize them um and i have the effort to open up here so by my correctly it's basically um two questions um number two is two parts and the first one is just like in creating and initializing a variable and then um just like practicing how to create and initialize different primitives and the second one is same thing um just like these different they want you to initialize these different types of variables and like with their values and then same same idea with part b and then are any of you guys like you any of you want me to go over the workshop too all right um the workshop should be pretty straightforward um just remember like the difference between declaring initializing and then um yeah the direction should be in common it's basically kind of like a madness and then you're just like declaring different variables initializing them to like any value you want and then it will print out into a little story and finally we just have like these um this feedback form and then if you happen to do the workshop we also have like a submission form all right and then do any of you have like any questions about like say like the practice problems you went over or like anything we've talked about so far in the um in the class nice all right and then finally we just have like um all of these different resources in case like you want to check out more about data types