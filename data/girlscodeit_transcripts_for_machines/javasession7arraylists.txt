one all right so today we're going to be talking about um arraylist they're pretty similar to um to like arrays which we talked about last week but there are a few differences of like how they're stored and what kind of methods you can use on them so first off um we're just gonna go over the difference between a raise and array list so arrays are basically like so how do i put this arrays are kind of our and arraylists are basically stored differently in memory and the general um differences is that first off arrays are fixed size and they kind of store primitives and objects and you can basically look like see the size through this field called link um arraylist on our hand can basically you can basically add and remove stuff from arraylist so they can change in size um they store only objects and you can find out like how big they are through size yes so you have to import arraylists so remember how we have our scanner objects remember we've gotten really familiar with those we've used our scanner objects a lot and we use dart we've uh excuse me we've used our scanner objects to take in things like favorite ice cream flavors and secret numbers and all that stuff well scanners are imported objects and you have to do the same thing with arraylist so arraylist you need to be importing them and you can use that with the import java.util.arraylist at the top of your program so just as you would import a scanner you want to import your arraylist if you use them next slide please so initialization so this comes after we've imported so we've imported the arraylist at the java.util.arraylist beginning of our program done now we want to actually create our arraylist so how we're going to go about doing that we're going to use arraylist so we're going to use the keyword arraylist then we're going to put our data type in what i like to call triangle slash carrot brackets so we're going to put our data type in this case it's going to be a string so we're going to be having strings in the arraylist today um we're going to put the name of the arraylist so how we're going to refer to the arraylist in things like methods and in things like for loops so we're going to put the name in pet list that's what we're calling our arraylist notice how we have capitalization at key points um equals the keyword new arraylist so it's a new arraylist and the data type once again these two have to match so the data type originally has to match the data type over here and the initial size because arraylists are super duper flexible in varying size you can have um no initialization like size value because arraylist will grow as you need them to or um shrink as you need them to if you take values away so you don't actually have to have an initial size but if you have an initial size in your brain you can put that down in the initial size but both will work if you're trying to create an arraylist in your program so these are the four methods that we'll be going over for um arraylist the first one is add there's also get set and remove um hopefully add get and remove are pretty like pretty selfexplanatory um you just add something you can like access an element using git and you can remove something using remove and then set is just if you want to change like a element inside of the ray list so this will just set an index to like a new value so this is how you can use ads so you can basically do arraylist.ad and then you can pass in a new element or you can even add something to like a specific index so if you pass in the index first it'll add the element into like that part of the array list and push everything back and then next is good so get is kind of like indexing into an array so you can do like an arraylist.getindex and that will just return the element at that index um set index comma element so in this case as we remember we needed our specified index and we also need our element so pet list set um set one to pair it so in this case it would replace whatever was that index one with parrot um as always don't forget your semicolons and yeah so um if you remove something it'll make the arraylist shorter you also need to watch out for the index out of bounds exception because if you try removing an item that isn't there so if you try removing something at the fourth index but um your arraylist is too short for that you're gonna get the index out of bounds exception error um so just be wary of removing things from your arraylists and then finally you have like the size method and size will just return it's kind of like array.link it will just return the size of the arraylist um printing arraylist so if we ever wanted to just like print it out um in the console for any reason we can use a for loop or a for each loop a for each loop is also referred to as an enhanced for loop so if you know by that name um a for loop so four integer i equals zero i is less than pet list dot size i plus plus system dot out dot print line pet list dot get i so print out the element at every index of pet list starting at zero and finishing at size minus one notice we don't have pet list size minus one because we're using the less than indicator we're not using the less than or equals so if we were using i is less than or equals we would have to use pet list dot size minus one but since we're not we're just using the less than we can just have pet list.size yeah so important little piece of syntax there um before each loop um so for string pet pet list um system.out.printline pass pet excuse me and print out every element within pet list obviously this is a little bit neater than this but um in like real world applications i see this way more often than an enhanced for loop or like a for each loop kind of thing um there is a demo here for the for loop and the for each loop so um import.java util arraylist remember we have to import arraylist if we're going to use them very important so we have that at the very top right uh class main public static void main string whatever let's create a list of decimals so obviously right off the bat we know that we're doing a list of decimals so what are we going to have with our data type doubles right so arraylist double here's our data type here let me move this over so that's in one line um arraylistdouble datatype decimals so our arraylist is called decimals equals new arraylist double we don't have a set value here but we can fill that in later because arraylists are flexible and can grow and change now we're just going to add a bunch of values so we have five point five eighteen point four forty five point six yadda yadda yadda yadda all these numbers um what's important to note here is that when we're using add they add on to the end so notice how it goes 15.5 then 18.4 then 45.6 because we're just adding them on in the way that they came in and we add them on in the way that they were added to the array so it's a sequential order like that um let's print out the array for i z for i equals zero um i is less than decimals dot size i plus plus system.out.printlinedecimals.geti so in this case this is our regular for loop so we have i equals 0 and then if i our variable is less than decimals dot size we're going to add one to i so system.printline get i so in this case we just have our variable here and we're going to start at index 0 and then print all of them out so that would end like right here after the 10.2 we also have a for each loop so for each double x so in this case it's just like yeah so in this case um we can't use integers because our um arraylist isn't holding integers it's holding doubles so we match the data type so double x so just a regular it's like how we would instantiate an integer variable like into x but in this case it's double x because our value types are doubles and if we didn't set them to doubles we would have an index out of bounds exception no some kind of error there's a lot of different kinds of errors in java um and then double x um like for our decimal class um what's our semicolon mean i think it's just like relating it to the array itself so like our array name is decimals so double x um to the array name decimal so like double x for decimals system.out um line x so it just knows that like every single time we're just gonna add one to x so this is kind of just like simplifying all of this syntax into this double x um yeah so in this case we would have it printed out twice but if we wanted to comment these out we could do that and we'd only print out ones all right so now we can basically sort of look at all their bayless methods in this demo um i'm just gonna quickly share this in chat um as always like if you want you i would actually recommend you guys like go in and play around with the code um like change up the elements and um and change up the methods just so you guys like get a sense of how each of these methods work but as always like remember to work before you change code so basically in this demo we have an arraylist of strings called bands and um you can we've basically added like a couple of bands over here as strings and we've removed the second um index of this arraylist so the second index would be zero one two so we've removed this element from the bands of average and then we basically also set reset the fourth index to one direction and then now we're just gonna like take in a number from like from the user um scan it as an integer and then basically um sort of print out which band they should listen to so um this is just going to show you how like how you're going to get on the size of the band um get an element and also like add and remove stuff within your waivers um any questions about this sweet so when it runs it'll just tell you like um which band would you like to listen to enter a number from one to five um you can type in something like three and then it'll give you a bad name in return sweet and then here's just another demo about arraylist um it's sort of like the same idea we have this arraylist of um or we have like several different array lists of like strings integers um booleans characters and whatnot so notice like um if you remember from the really beginning of this lesson i've kind of said like a um can't take in objects or it can't take in primitives so notice how like in this these arraylists like i do have an arraylist of like integers but they're kind of spelled differently so um an in is kind of like the integer primitive is kind of like in x equals 10 or something like that but um over here we pass in an integer class so the reason we have this is because um arraylist can't um take in primitives so what we've done is we've java actually has these things called wrapper classes for um their primitives yep so basically um all the primitives are actually wrapped up in these classes and they're all just like their names but capitalized so that's how you can basically store a primitive innervate list any questions about this so that's kind of it for content and um i just have a list of a few questions that we can all go over um the first set are sort of like the easier questions where it's like you can just um or this is just like very basic questions and then we'll have um another set of questions that are a little bit more difficult yep so this first question is arraylist can change size so we've got two answers for true um anybody else have any idea sweet so it looks like most people are saying a and you're right so arraylist can change size so you can basically add and take away things without too much difficulty um on the other hand like arrays are more set in size so it's a little harder to like add and remove stuff sweet so the next one is the method used to find the size of an arraylist is linked so most people have said b and that's correct so the correct um answer would be um the correct answer for like a method used to find the select size of your waitlist is size next one is all of the following are ways to traverse an arraylist except this the correct answer is print all um just remember that d the enhanced for loop is also called the for each loop which of the following is the correct way to import their baylist class all right so the correct answer is the um all of these are so the first one import java.util um not exactly correct i guess you could import the entire util library but again this is not the way you do it um this is just a completely different class and um for c you don't have to have the java import and then finally be um it's not like python where you can just do like import blank um you'll have to actually specify the package that arraylist is in jessica i have a question um in some of the examples um i saw something that said import java.util.asterisk and it looked as if yeah it looked as if that was somehow replacing or or or instead of the array list and i it so is that what is that so basically the asterisk is like if you want to import everything from this library so arraylist is just one class from the java.util library this will import like all the classes in java.util so is that a good idea or not a good idea i mean does that take up like a lot of space or is it anything to be concerned about or you should is it better to just bring in the specific ones you want um i i don't think there's exactly like a correct answer but personally like personally i don't prefer to have this like import java.youtube.com because like it imports a lot of unnecessary classes um i i think it would just be better to import like the one class you need but like if you have yeah like if there's ever a case where you're making a complex program where like you need a bunch of different classes from youtube this might be good though okay yeah just like whatever you prefer all right so i think this is the next question hopefully all right so which of the following is the correct way to get the first value in the list called nums so it seems like most people have b and some people have a um i guess there's a little confusion of like is nums an array or a list um remember that over here we've called it a list so like a list is just a shorter way of calling it an arraylist um eventually you'll like learn that an arraylist is actually like a linked list but that's like its own can of worms but um over here nums isn't a ring list so we can't exactly um get the first value just by indexing it like a regular array um we'll have to use the get method so d is the correct answer so and now to the oh some more spicier questions i guess so over here we have a code segment an arraylist of strings and we added a bunch of stuff to it and we've set something something um in the list so what's the result of this code segment the thing that trips everyone else is the set over here so when you set something um unlike uh adding to a specific index you're actually changing that index so after this um list that's set to e you're not gonna have um you're basically gonna be removing a because you're changing that to e all right so which of the following is the correct way to sub i'm sorry i'm sorry could you go back did you did you did you change the answer to that is that so what is the answer to the one before it's speaking oh okay yeah because of setting you're replacing the the third element with the okay okay yeah so if it was a list one dot add two and then e then it would be d but we're setting it in b yeah so which of the following is the correct way to set the second element of a list called nums q5 oh shoot you're right the second element would be would be one yeah yeah so those are adding it setting the third element in the yeah list to five not the second so yeah it would be one instead of two yeah so yeah none of them are direct so b has the correct like the correct things you have to pass in you have to have like the index and the new element but has the wrong index yeah so you're right it should be the correct answer would be numstat set one comma five sweet so given the list nums four two three four five what's the result after executing nums that remove four so we have a lot of people saying d um just remember that nums is also an arraylist of integers so most people are saying yi and they're correct so this could be a little tricky that like you can it's easy to confuse like if you have an arraylist of integers is this like the element or the um or the index but java if you pass an integer will default to sorry can't give me it so when it when you're passing in an integer java will default to assuming that it's the index so it'll remove the fourth index of this list which will be five and then next is what is the list what is in this nums if initially contained five three one after the following code is executed so the answer is b um just from just um i think like this one's pretty straightforward um all you have to do is really just walk through the code and if you're confused about like um what's in the list each time you can always just write it out so it'll add um six to the end it'll add four to the front of this list and then it'll just remove the first index which after adding four to the zero index would be five so the result would just be four three one six um finally we'll just have a workshop um if i remember correctly yeah so basically you're free to do this workshop but you're also free to um change one of the one of the um demo links and then also submit that so slide 13. so basically you can either um change like the array extras um sort of make your own array like your own version of this array extra examples demo um change this up a bit or you're free to do this workshop which is just um if i'm if i remember correctly it serves a similar where like you're given an array list of strings um and you're supposed to sort of iterate through it and print it all out one um basically you're given an arraylist for boba of like basically a list of boba and you're supposed to sort of put it pass in the correct data type um be able to be able to um iterate through it and also be able to like add and change stuff in the survey list um i would recommend you if you're sort of confused about this um go back to the examples that we've gone through um in slides 12 and 13 and sort of use that as like as reference so all right and then i'm also going to post this submission form um but besides that there are also a couple of reference slides that you can look at um the first one is just an interactive review the second one's just the link about arrays versus arraylists and then if you want to get like more more into like programming speaking of realist you can do like nested arraylists which are um which are pretty fun and then finally um i would really appreciate it if you filled out the feedback form um this is really helpful for us to sort of sort of um get a feel for what you guys think is working um what you guys sort of want us to focus on or improve on um we've made a lot of changes to this course honestly through like the feedback from the past week so it would be very helpful if you get to know like what you guys think about this course