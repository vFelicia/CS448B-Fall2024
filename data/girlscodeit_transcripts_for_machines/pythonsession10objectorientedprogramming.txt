okay so for today um we'll just be talking about really basic objectoriented programming concepts in python and um don't like worry about the the terms and stuff this is mostly just about um how do you make classes in python and what how do you like um we'll talk about like data fields and um different different like methods and stuff you can do with like classes in python all right so our agenda today is just like talking about what is objectoriented programming um what are classes and then more specifically for python like how do you make class data fields how you make class methods and if we have time but probably not um for four basic principles of object oriented programming all right so first off what is like oop which is objectoriented programming um it's basically a programming like a programming design concept as you can put like a programming paradigm basically where code is based off of things called objects so objects can be things like um like cars or like animals like just like your basic objects in an abstract sense and these objects will hold things like data and code which will form fields which are basically your class variables and functions which are class methods any questions about that first so basically like in this example you can see we have a class called car and it can have methods like get fuel or like set speed or drive and they can also have attributes or um fields like um fuel max feed number of wheels colors stuff like that all right so first just a basic overview about classes and data fields so first off an object is a collection of variables and functions that like describe something abstract so for example um a car can be an object uh animal can be an object basically a very abstract thing you want to define using variables and functions a class is basically a blueprint of an object so in the previous slide we have like a class called car and that is basically like a blueprint that you can like make an object of a car basically it will tell you like what um what attributes a car should have what a car should be able to do and what information a car can store basically um another thing is an instance which is like the object itself so when you create an object it's called insanitation so that's just like um next like more specifically for python the self keyword refers to the instance so if you use the self keyword in python you're referring to the instant like the instance of that class um next an attribute is just any property of a class so it can be a variable or a function and finally a sub class is a class that inherits attributes from another class all right so first off we'll talk about class data fields all right so a data field is if you remember is something like information that a class can store so like let's go back to our um class card example if we have a class called card a data field that we can have in car could be something like number of wheels or um max driving speed or um the color of the car so these are information that class in store a data field has two types one is static which is a data that is shared across the entire class um or one that is instance which is data that is shared the order that is kept only by the instance of that class so um going back to the car example like we can have a static data field called like total number of cars and that would be the total number of cars would be the same across any instance of a car but like something like uh the color of the car or the um the license plate number would be different um different between each instance of a card and that would be an example of an instant state of view you can also control the visibility of your the data in your class so there are three types one is public which is a field that everyone can see one is private which is a field that can be seen and changed only within the instance or like only within the current class so for example a public data field can be the color of a card because everyone can see that and sorry just a moment so basically um a public data field could be something like number of people in a car um that is a field that can be seen and changed by anyone but a private data field would probably be like the um we could say like the type of engine the car has and can be a field that can be changed only within the current class finally you also have something called protected and that's a field that can be seen and changed within the current class and any subclasses of that class any questions about like data fields so far all right um finally we'll talk about we'll talk a little bit about class methods and then we'll like i'll walk you through some demos that will make all of this a little clearer so class methods are um just something that allows objects to perform actions so like if you have the class car you can have methods called like drive or speed up and slow down and those methods would allow the car to actually do a few things instead of just holding on to information um similar to um data fields you also have static and instance methods so like a data field um static is just the method that is tied to the class and not the instance and instances method is tied to the instance of that class instead of the class itself so the syntax is just if you want to call the static method it's the class name that method and then if you want to make a static method you have to use this static method tag um for instance when calling it it's just instant stop method and then making a um uh instance method it's just like making a regular method um within the class but you have to pass in self as the first parameter of that method and overall a class has three important functions so first one is constructor which just makes an instance second is setters which will help you set variables in the class and finally you have getters which helps you on access variables within class technically all of these are optional methods so technically like you don't have to have a constructor but you'll never be able to make the instance of that class if you don't have a constructor so first are constructors um for python constructors are defined by the under double underscore init double underscore method um if you don't define in it you won't be able to create instance of the class and first off we can look at a demo of this so in this instance you have a um a class called dog and you have like a static variable called dog count so we could we could use this to actually first go over um things everything we talked about before so first we could talk about um data fields so for a static data field you um you initiate it outside of instructor so if you have something called dog count you if you put it outside of like the constructor over here then it'll be defined as a static variable um next any instance variables will be created within the init function so basically um an uh instance variable you have to be referred to as self dot variable name so for example if i pass in name from my constructor then i can store it as an instance variable here self.name equals name you can also set like default um default values for your your instance variable so like self that noise equals bark or um if you don't want to set any specific value like starting value for your instance um be sure to specify it as none so you can't just like declare something like a static variable and leave it like this or also throw an error and python will be mad but so if you want to have something that doesn't have like a specific value to begin with just make sure you start as none first so if we define this init function and we can like we pass in like how many ever parameters we want into our constructor then we can define the instance instances of these classes and then pass in whatever information we need so if i have like a parameter like a constructor that takes in the parameter name av then i would have for like if i ever want to create over here then i'll still have to pass in like the um matching number parameters so name a b is the parameters i defined in this constructor then i'll have to make sure i have passed in like the same number of um variables into that constructor any questions about this all right notice that for my constructor i have to pass itself as the first parameter it's because this constructor is technically like an instance method you're just like creating an and it will actually do the creating of the instances if i don't like have this constructor then i won't be able to like create instances over here and it'll throw an error because there isn't um there isn't a defined in so if i do something like this um we can also do is i can also show you how to like just say you can also um access static variables within um within the class so to access something like a stack variable like dog count just make sure you have to access it instead of keeping like self dot um dog account like you would do with your instance variables you have to access it through the class so that would be like dog dot dog and then i can like edit it like this or um alter the value of the stack variable and then finally down here i can do something like print dog dot dog count and that should print two this is during the error because i added these two so as you can see here like i initiated two dogs and each time i i um call a knit it would increment dog count so and it prints two so this is just how you access instance variables and static variables and how you can like define instances and static variables using init and like placing your staff variables outside over here any questions about this code or anything like we talked about before all right so next we can talk about getters and setters these are just um generic names for methods that will for um get or set your variables so um getters will return like the value of whatever variable you pass in set will just set the value of that variable um the important part about this is it will let you access and change nonpublic fields and um in general like there are three ways to implement it first is like um implementing a getter and setter as like a normal instance method um next is just like using a app property tag and finally is um using a property method which we won't be going over because it's very complicated and not recommended so first um we can talk about implementing getters insiders like a regular method so this is generally like going over how you can create a regular instance method and um like how you could implement one way you could implement a gettering setter personally i would say like this is the best way to implement it because it doesn't like it's simple it's straightforward and it's a lot more um it's a lot more intuitive than the other two methods and the but the most important like downside of it is that it must be explicitly called so you can't just like you'll be able to see like for the other two methods that you can sort of um make it easy like make getting a setting pretty easy but um for this one just remember like if you implement a getter or setter as a regular method just make sure that like just remember that you have to explicitly call it in order to like change the variables of your um or change the values of your variables so we can take a look at the um the code and just i'll just walk you through like first how do you define nonpublic methods or nonpublic variables and then second um a very basic way of of um creating a getter or setter so first off like this is just building off of the dog class that i talked about in the previous demo so you still have like your dog count which is the static um static data field that we defined last summer um but i've changed the visibility of both name and noise a little so for um you notice that i have two underscores in front of name and noise and in python this is how you would define a private method so remember a private method is something that only that class can access like only that instance of that class can access so um usually like for a dog only they know their own name and you what like you shouldn't be able to access like the noise unless like they or they like bark or something so that was like the logic i put behind that but i made these two private methods or private private um properties so private variables so that nobody outside of that instance can see can access it so they can't see it and they can't change it so then if that's the case like how would i like what if i do want to change it in a certain case how would i be able to do that so for that i would define a set like setters that are basically instance methods in my class so one is set name which will just set the name if you like the new name you pass in next is set noise which would just set the self.double underscore noise to the new noise you pass in so it's this is pretty straightforward you just set the private variable to this new value um same with get so what if i want to know the value of these private private variables well you could just return um return self.double underscore name return so that double underscore noise these are basically like in this case like these are just um these are just average instance methods so you notice that i put bypass in south as my first parameter for all of these um and then in the main method you just have to remember to if you want to like get the name or like get the noise or you want to set it then you'll have to um you have to explicitly call it like dog that get named dog dot get noise or a dog that said noise to fred or something like that so um this is pretty straightforward the only downside is like every time i want to like access a dog's name i have to like call this method and maybe i'll take like a few extra lines of code in your program um any questions about this code so far all right so next the next way we can define a getter or setter it's a little more complicated so in python like you have you can tag your um your methods with like special tags um and one of them is the app property tag so if you like it's it allows you to treat like a nonpublic field like a public field so um and this is basically the general um the general template for defining a gettering setter that way so you would define the um getter as you would first tag it like with the property tag then you do like defau def um whatever attribute name um past himself and then returns the self.attribute next like for setters we'll just do um attribute that setter define the um define a method with the attribute name pass and self command value and then do self.attribute equals value and then af so after you like define it this way you would be able to like just set like treat your own your private values like their public values so you can just do like like outside of your class you can do like instance that attribute equals new value and that would like even if that attribute is private it would still be if you started so this is this would just like in general make your life a little easier um and i so i did do a demo of this and i'm not sure why it did not show on here but i can show you uh i'll share this with you not this there you go all right so here is just like a quick demo of how you can um define a getter and setter using this fancy property width this is the same class as we had um we had for the last demo so you have like your sad variable dog count um name and sound um you have a instance uh instance method called bart which is just printing out the um the sound private instance variable but if you notice for like like say i want to um i want to define a getter and setter for um my name my name attribute and i want to use this fancy property way so first off i would um we could look at the getter so for the getter you first um tag the the method with a property tag so at property and then i would define a instance method with that attribute name so if i want to define a getter for name then i would just do a property depth name and then remember to pass it so and then for the getter i would just return self that name and then next we can talk about um the setter and you would um tag it with at name dot setter so at attribute name dot setter and then it would be similar to the um the getter function except i would also pass in like a parameter that would be the new value of this um of my attribute and i just sent self.name to my new value so what's the benefits of where like the benefits of doing this this roundabout way basically one of them is i i don't have to explicitly call my getters and setters anymore what i can do is just access my um these attributes as public variables basically so if i um create instance of a dog called fred then i can just access my dog name as like as if it was a public a public variable and then same for um setting the variable so if i wanted to change the dog's name then i could just see dog that name equals bomb and then print out dog.name like that so one of the benefits for doing it this way is just that you can save a couple of lines of code and you won't have to worry about like oh do i have to call my getter explicitly and stuff like that any questions about this sweet so finally um you can also use like implement getters and setters using the property method um so basically you can define a static field that contains a property like property object related to that nonpublic field so i can define like uh um if i wanted to like do it um create like a create a getter and a setter for my um my like dog.name then i can define a stack field called name that contains a property object related to like my name field and then that would like it's similar to the second method with the property tag where it'll then allow me to like treat the nonpublic field like a public field and um i can just post yeah you can just post the um the link in chat and i personally would highly not recommend you do this because it's this one is like way more complicated than than like the property tag method and i personally don't see the like the benefits of doing it this way but if you're interested like you should totally check it out and there we posted a link to like uh um a tutorial in chat so so far like any questions about like classes or on or like everything we talked about so far i know it's like a lot of information to take in so feel free to like if you have any questions at all feel free to just drop in and chat um let me see if i actually have more demos about about visibility because this these are actually pretty important yeah so i can share more actually share more on more demos about about like the stuff we talked about in the first few slides because it can get a little confusing especially with python's um python's naming conventions so first off like this is just a basic demo about class like the visibility of data fields so just um were the differences between a public variable private a private variable and a protected variable so first off like this is again the um a class fund dog and we can define like we come to find like three different instance variables so one is color um another is name and another is ears so first um for public variables you just do you can um just do like self.color so no underscores before anything public um if you want to make a private variable um just like the last two make sure you put a double underscore before it and that way nobody outside of your specific class can um can access it so this could be useful if i want to make a solution um this could actually because like so if you want to make something like a simulation um sometimes like you would want to simulate like objects flowing in space right like objects within the solar system so you can have like a class called earth and an instagram object called earth or you can have even have like a general class called like planet and then instantiate different instances of planets called like earth venus or mars or something like that and then um you can sort of you can sort of simulate a solar system like that but um the thing about like why you want to make things certain things private and certain things public and other things is that sometimes like you don't want other people accidentally messing up your your variable values and you don't want people accidentally accessing things that they don't want to see so basically um like because in general when it comes to coding especially like when you're working on really large projects is you aren't making like one simple app or you aren't making like one small project that comes together really nicely sometimes you're making like entire libraries and you don't know who's gonna use that library and you don't know like what they're gonna do with that library so sometimes you don't want people to see things and actually change them because maybe like this this value will be important in a like another section of the code and you don't want anybody but yourself touching it and that's when you wouldn't make things like private or protected so in general like this is pretty important when you're um like worrying about privacy and like or visibility in your classes is pretty important if you want to like in order to make sure that like your values the values of your um variables stay consistent and like controlling who can access it and who can change those values so continuing on like we can have like uh we can also have something called protected and that's just we would justify that using one underscore so protective we haven't really talked about because um i'm not gonna go too deep into like inheritance or like making subclasses or like any of that for now because that it gets pretty complicated and there are a lot of like nuances when you talk about that but in general remember that protected it means that that variable is visible and accessible only by your like current class and any subclasses of that class so for example with this one we have a um a protected instance variable called ears and we defined as pointy so but like for protected um we can also like have what if we have like a subclass of dog called husky that might you can access your um your protective variables even in your subclass so that's why like this is here and this way when we run it um as you can see like it prints out like you can print out dog that color just like regularly um then you can like do dog that fart you can print the ears which are pointy and then you can um do like get me so notice that like i when i printed the ears i didn't actually um i didn't just print it like dog that color i actually had to make my own method called print ears within my dog class in order to print them properly so that's because like i can't access a protective um variable outside of that class in my main method and same with git name so like this is an example of the getter so finally like let's look out um why this well like next look at the husky on subclass and i will talk about why this isn't good so we've created um an instance of husky we done like husky.bark and then we print the ears as you can see like they're pointy and then finally like let's look at what's up with get names so for this one um let's see the error is there's no attribute husky that name so if we look at um the husky class so ignore this part this is just like this is just initiating like all the or inheriting like all the inheritance stuff so initiating all of these variables up here but if we look at get name this will throw an error because you can't access a private variable outside of that class even if like i'm in a subclass so unlike a protective variable private variables can't be accessed by subclasses so i'd have to like either initiate uh like let's say so that or something like that and this should be if you run so any questions about um the code in here so i would yeah i would highly recommend you look through this code and read the comments about like why i'm about like the different um levels of visibility and how you could like define like a private or a productive variable and you can also like play around with this just remember like if you want to change any code just to work this rapport before you do anything to it all right any questions otherwise um we can let's see otherwise i can try to find other demos i've made about this but i think that is it oh this one's the static method demo so this one is just talking about like how you can um so we talked about like insisted instance versus static this one's just talking about like how you can create a static method so if we go back to this slide um you can see static methods are methods that are tied to class um instance ones our methods are typed instances so so far in all of our demos we've been dealing with only instance not this methods so like we're passing itself as the first parameter and we're calling all these methods using like um instant stat method so like dog that get name or a dog that um set noise just things like that so this is just an example of a static method and i'll post this link in chat so this is again this is like the dog class and then we have a static variable called dog count so what if i wanted a static method that would return the um the dog count so what i would do is i would first um tag it as static method so this is just telling python like hey this is a static method unlike these other um instance methods and then as you can see we don't have to pass themselves for that because the method is tied to the class and not the instance and then again um just a reminder if you want to access a static variable you have to do it due to class name and not through like self.name or like self.um noise or something like that and then sit like a um static variable you access the static method through the class name so if i want to get dog count i would do dogs get dog count instead of doing like dog or like dog dog get me or something like that and this would return to and then over here it's like yeah if you want to access the instance variable you would just do it through instantly.um that method any questions about that sweet all right finally we can just look through um i'll actually post these examples of methods and we can also look through them and just check them out so this is just an example of a different class so in this one you have like you want to create a class called car and um first off like you have your constructor and in your constructor you're defining like a list of instance instance variables so you can like you can um store anything you pass in to the constructor using like an inspirable so like self.brand equals brand self that color goes color um you can also again if you don't want to like store any um any initial value in particular just remember to assign it as none you can also like store things like lists and dictionaries and then we can define um uh uh instance method so like description and then this will just like return a formatted string of like what the um coloring brand of the car is finally you can like these are just like getters and setters for the manufacturer and you can like look through these yourself and afterwards like this is just a demonstration of like you can create an instance of a car um just make sure you pass in like the proper amount of parameters that you defined in your constructor and then because we use the property tax um to define the getters and setters in this case we can just treat like a nonpublic variable as a public one so i can just set the manufacturer um using the equal sign instead of using like a specific method to do it and then finally you can like just call your instance method using instance name dot instance method all right and it looks like we have time so i can just go over like the just a really quick overview of the four principles of objectoriented programming so these are like the core principles of objectoriented programming are just um are just things you should take into consideration when using a language that supports objectoriented programming in order to be able to take full advantage of an oop language so this is what you should be thinking about when like you're creating classes in python or like any language in general that supports like making classes and instantiating things um in general like it's these are basic design principles so like so just how you should be designing classes and things to keep into consideration the um reason why like people use these principles or they program by these principles is it helps groups that prevent a lot of unexpected behavior so this like helps you keep your code clean um and keep your code sort of organized in a way that like you don't get weird bugs that come out nowhere so i'm going to focus mostly on the first two which are abstraction encapsulations because um these are the ones that we talked the most or these are ones that that um use the i would say like the concepts that we talk most about so like things like protection um things like data visibility and just like visibility of methods and um variables so first principle is abstraction and this is in general like this is just saying classes don't have to know what's happening under the hood in order to interact with each other so for example if i call like dog dot bark or something i don't have to know what's happening like what's happening in that function in the bark function in order to be able to call it i can just call it and then know like oh it'll return like a string or i'll print a string so what what's like the advantage of this is that it allows us to plug in different implementations of classes without like without drastically changing our code so for example like if you have a giant um piece of software like um something like like something sort of like photoshop or something and you change like one class within your program and you like change it you plug um another class in and or like you plug a similar like version of that class in but like what's happening under the for that class has changed a little bit um if i make small minor changes to that class it won't suddenly change the rest of the code and i won't have to like fix go through like a thousand lines of my program in order to in order to like compensate for one small change in like one tiny portion of my code so this just allows our code to be a little more modular and it allows it to be um it makes each class independent of each other basically the second one and this is the one um i kind of talked about is encapsulation so class attributes should be kept as private as possible so base the general gist is if like if other people don't have to see it then i should make it completely private and um variable should only be on it's sort of like a need to know basis where if other people don't have to see it then they shouldn't see it and this just prevents other classes and other people from modifying data accidentally and that that in turn prevents like a lot of unexpected bugs from happening so in general like this is super important especially if you're um if you're creating sort of like libraries or apis for other people to use and yeah just keep this in mind so the fourth third and fourth one are polymorphism and inheritance so polymorphism is just we can perform one task in many different ways by creating subclasses so like if i have a an overall class called dot and i have like a bunch of different sub sub classes of like husky um wolf beagle or something like that so different types of dogs then i can perform and each of these classes has like a bark method or something and they emit different sounds then i it's basically like i can perform this one bark method on my many different subclasses and they all have like they'll all have different outcomes finally is inheritance like when we make a subclass it also inherits the attributes of its parent class so as you could like if we go back to the let's see if i swap so if we go back to the um the class visibility demo so over here we have like a general dog class that had like color name ears and then we had like a hussy sub class which had um which didn't add any extra instance instance on variable but i could like even though it didn't um add anything extra i could still access like the variables of my parent class which was dog in order and that shows like how basically all the instance variables over here um generally get passed on into my subclass unless specified otherwise so for example like i said name was private so that doesn't get passed on but both color and ears you get passed on to husky over here so in general like a parent class will pass down its attributes to any subclass that has