okay can you see my whole screen yep you're good okay oh wait like we just see the google window or whatever like just the slides if that's like yeah i um do you want to go over just the slides from the last time okay okay so last time i think that was sunday we went over arrays and arraylists and the difference between them so we're just going to run really quickly back over that um just to make sure you guys remember because they're pretty important so arrays and array lists are basically like string uh are like lists of a lot of different elements so that you can handle them more easily rather than just like having random elements scattered all over so an array is an object that holds a fixed number of elements so when you define an array you set how many elements can be in this array and you can't change it and all of the elements in your array also have to be the same type so like they have to be all integers or all strings are all doubles and it's basically just like a collection of data um as you remember and down here is how you make how you form your array if you want a refresher um so you guys also should remember the concept of indexes from last week so indexes are how your array like keeps track of the elements in it um this also goes for arraylists so each element of your array has a different index number and the computer will start counting the index from zero instead of one like we usually do so we start counting from zero one two three four five six um in the index of an array or an array list and so you can call the element you can call it an element of an array or an array list using its index okay and also we taught you how to print an individual element of an array and that's pretty basic like we taught you before you use the print line method and you just write the name of the array and then in brackets the index of the element you want to print okay and then we have it realists um arraylists are kind of similar to arrays but there is one big major difference an arraylist you can change the size of your arraylist all throughout your code so you don't have to set a certain size that your arraylist is at the very beginning when you create it um the number of elements in your arraylist can like get bigger or smaller depending on like how many elements you put in and it can change that your code um and as a refresher this is how you make your arraylist and yep that is pretty simple oh also for arraylist you have to import the ability to make an arraylist at the very top of your code um and then we also taught you how to add and delete elements from an arraylist those are also pretty similar techniques so you to add to an arraylist you just use name of the arraylist plus dot add and in the parentheses you put the element you want to add and it'll just stick that onto the end of your arraylist and then when you'd want to delete an element from your realist you use the name of the release plus dot remove and in the parentheses you just write the index of the element you want to remove remember you can't like just write the element in the parentheses for remove you can't call an element by saying like what the element actually is because what if there what if it's an arraylist of strings and you have two entries in your arraylist that say like dog and then you say i want to remove dog but your computer won't know which element to actually remove because you have two of them so you're going to have to follow them using their indexes and that's why indexes are really important and also last time we taught you how to print a specific element of an arraylist um it's kind of similar to uh playing an element of an array it's just instead you type the name of your arraylist dot get to like access the element you want to print and then parentheses index okay so that's it for what we did last week um if anyone has any questions about that um you can just go ahead and meet yourself and ask them or type them in the chat it's really important that you guys get this and like are able to understand it so does anyone have any questions or you can view some anything at all or i can go over something more slowly okay so i'll take that to mean we're good so far um again if you have any questions like the other lesson please feel free to like ask us um type in the chat or something um okay so one very important thing that we need to know how to do with arrays and array lists is find the length of them so maybe sometimes you just don't remember how long you made your array or arraylist or it's in the case of arraylist it's always changing so you want a simple method to just give you the length or the size of your array array list so um these are different for the two types um so to find the length of your array which is basically like how many elements how many entries are in your array you type the numerator and then dot length and that should provide you with an int that a whole number that's the number of elements in your array so like six um and just to remind you so like if your array has six elements in it um that means that the last index is going to be five because we start counting from zero and not one um and then if we wanna do the same thing for an arraylist to find the length of it or how many elements is in your arraylist instead of the dot length for array you're going to do the name of your arraylist then dot size parentheses and um it can it can be confusing or people always get these mixed up but it's really important to remember that there are different ways to do stuff with the raisin wrap um before we move on let's just like try this really quick just this okay so if you guys want to open up blue jay i'm just going to go ahead and make a new class um i'm just going to call it loops because that's the main focus of today so opening that up and then okay like always just go ahead and delete everything and then okay so like alex said before whenever we're working with arraylist we have to import it so we're going to go ahead and import java dot okay so now that we imported that now we can use it um so just to show you how the dot length and dot size works um let's just go ahead and create a really simple array just so we can kind of see how it works we can use that in the next step which is the loops so let's go ahead and make in let's just make an array and then we'll make an array list and then we'll go from there okay so to make an array again so you do the data type which is to ins i'm just going to call it array equals new int um and let's just make it like three or something okay so now let's just fill it um i'll just keep random numbers it doesn't really matter okay so now we created our array and we filled our ray um so now let's just go ahead and array dot length and you might be wondering like okay well we know the length is three because that's what we declared up there but sometimes let's say you're coding and you have an array and you're working with your array but you can't remember what the size is um and you can't go back and like count it but you can't find it just when your code gets a lot longer and maybe more complicated um it's really easy way to just find it without having to search back there and find where you made your array so um compile and looks good so and i printed out three which is what we expected because we made it a length of three and we have three elements in it from indexes zero to two okay so now um i'm gonna comment this out um to block comment i don't know if you guys went over this um just highlight everything and at the top of your keyboard you see where it says f8 that'll comment all of that out so it will be run when we compile and run our code okay so now um we know that that one works let's try it with an arraylist i'm just going to do arraylist again i'm just going okay so now we have our arraylist created and again you could put like double string other stuff in there um okay so now do like and finding the length or size of an arraylist um is really really helpful because like like i said for regular arrays you could always just go back and find it but arraylist you might have things added randomly throughout your code and then or you might have it not you might not have a set number in your code of how much you added if that makes sense um so finding the length of the arraylist using the dot size method is really really really helpful especially for arraylist because you don't have that set um size and let's just go ahead and add one more then and we're going to do arraylist so again for arrays we're going to do dot length without a parenthesis at the end and for arraylist we're going to do dot size with parentheses at the end i know it could be a little hard to um remember and stuff because it's not the same but if you do it over and over you'll remember and um yeah okay so let's go ahead and compile this one oops okay and we have four which again is what we expected because here we added a one two three and four elements to our array all right do you guys have any questions about this okay cool let's go back to the slide okay and yeah so we finished going over how to find the length of your array array list and now we're going to move on to loops so these are really important things you need to know and like how to structure your code um and um so they're really important for you to understand how they're how they work so the first type of loop that we're going to talk about today is a for loop so this um is like a way to structure your code so that part of your program gets run through multiple times um and you can only use this when you know exactly how many times you want to repeat that part of your code um so i'm just going to get into how you format your for loop because that'll make it easier to understand how it works so first you type the word for and then in parenthesis inside your parentheses first you're going to make an integer variable you can name it whatever you want you can name it like x or count or number uh whatever you want and you're going to set it to well whatever value you want but usually we just start at 0 to make it easier to keep track of but this integer value that you make here like you can make it equal to one or two or three or four um so that's just what by your for lip is going to take advantage of this integer variable and use it to keep track of how many times the for loop repeats itself so after you make your integer variable you're going to add a semicolon and then after that you um basically create a limit um as so like the for loop is going to keep running as long as this limit or this condition is true so as long in this example as long as x is less than 5 then this for loop is going to keep repeating itself and then after that you add another semicolon to separate it and then you just add new tell the computer how many like what you want to be done to your int variable every time the four loop runs uh this is kind of confusing but for example so if you say every time the for loop runs you want to add one to x so you type x plus plus and then so that's the basic structure of how you set it before loop and then you want curly brackets and inside the curly brackets you write whatever code you want to be repeated over and over again so here we have a print statement and it's going to print hello so it's going to print hello as many times as the for loop runs through itself and so basically how a for loop works is it's going to execute the code inside the curly brackets once and then it's going to carry out this third operation so after it prints hello once it's going to add 1 to x and then it's at the end of the for loop and after it's added 1 to x it's going to check if x is still less than 5 and if x is still less than 5 the for loop is going to repeat itself again it's going to print hello again so the second time and then after this time it's going to add 1 to x again and it's going to check if x is still less than five so at this point x is two so two is still less than five so it's going to keep running so this is going to repeat itself over and over again x is going to get one digit bigger every time you run through um all the way until the fifth time yes um when x is going to be equal to five at the end of the for loop and then the computer is going to check is x less than five five is not less than five so the for loop is going to stop running and you're going to continue on with the rest of your code after that um for lips can be difficult and complicated to understand so let us know if you don't fully understand it and we can try to explain it over again okay well let's just go ahead and try to bleach it a lot of times it's like with coding even though you might not understand it when you first hear about it when you um do it on your own and actually run the code a lot of times it makes a lot more sense and then you'll gradually um you know understand it better and then finally you'll get it so let's um go ahead and try this i'm just going to go ahead and open up the same one as before and okay um so again i am just going to comment this out in case we need it later okay so let's just use the loop example that was in the um okay so for it and again you can name it whatever you want i usually just do x because it's easiest equals zero x is less than let's do x is less than seven and x plus plus okay so those are the three main parts of our for loop so we have kind of like our starting value our condition and how much we increase x every time we go through the loop okay so let's just do hi okay so when we run this it should print out seven times because x goes from zero to six um because as long as x is less than seven it's going to predict we have zero one two three four five six equaling seven times and when x becomes seven seven is no longer less than seven so it's going to exit the loop um and then go on to the rest of the code which we don't have anything else after this um so it's just going to not print anything so we have this let's compile it and then um i don't know okay there we go i don't know i wasn't working before okay so we have hi printed out one two three four five six and seven times just like we predicted okay so now you can kind of see how that works and again you could put anything inside of here it doesn't have to be printing something out and as you'll see later we're going to use these loops to print out um all of our elements from an array and you'll see that towards the end of today okay now what if we were to do something like x is less than or equal to seven caitlyn c how many times will high print out if x is less than or equal to seven keep one c you said a and that is completely right yes perfect eight times because when x becomes seven we're going to check okay is seven less than or equal to seven yes it is because it's equal so we're going to print it one more time and when it becomes eight it's no longer gonna be meet the requirements so then we're going to exit perfect okay um caitlin says in the computer said it reached the end of file while pressing i forgot what that means um um so caitlyn did it print out hi at all or is it just like a red error in your code when you compiled it it said air oh okay um do you want to maybe share your screen i think that might be the easiest way here kevin would you feel comfortable with sharing your screen so we could i feel like that's just the easiest way to help fix errors um okay okay i'm gonna go ahead and stop sharing my screen so if you want to share your screen and oh okay super easy fix for this i think all you need is just an end parenthesis at the end so whenever do you see how you have the 4 and you have x equals 0 less than 7 x plus parenthesis and then you have that open bracket so whenever we have that open bracket we're always going to need a close bracket so on the next line why don't you just try putting a closed bracket yeah and then now do you want to try running it uh i think you also need close brackets for the i think you need two more closed brackets yeah oh yeah so always remember when you make an open bracket you'd always need to have a closed packet to like pair it um so yeah okay do you want to try compiling just to be sure and let us know if um they're still an error or something i'm gonna go ahead and share my screen again and does anyone have any questions about the for loops it works cool good job okay um let's go ahead and move on to our second type of loops sorry making sure it's a little bit slow okay so now that we've talked about for loops there's another type of loop we need to explain to you um so now we have while loops um this is fairly similar to the for loop because it also allows you to repeat part of your program over and over and over again um but it's kind of less complicated than a for lip because you can use it when you're not sure how many times exactly you want to go through your while loop so before you make your while loop while you're coding you're not sure how many times you're going to go through because maybe it changes every time you run it depending on different conditions so basically your while loop is going to repeat itself over and over as long as the condition inside the parentheses here is true so every time you finish your while loop once the computer is going to go back to the beginning and check if for example x is still less than 5 and if that is true it's going to keep repeating um so in a while loop in the parentheses afterwards there is only one section only one condition um so you don't like have to make a variable specifically for your while loop to use um but typically you do basically have the same components of your for loop when you're making your while loop just like in a different place so for example here yes you only have one condition in the parentheses after a while loop but that condition like requires a variable to begin with so you're going to need to make that variable somewhere earlier in your code um and then in this example the main body of your the main body of the code inside your while loop is actually two actions it's going to print hello so basically this has the same result as the other for loop it's going to print hello five times and then the second part is it adds one to x every time it goes through so basically that this x plus plus is what limits your while loop it it's what like tells um it's what defines how many times you're going to go through the while loop kind of so like the good thing about having a while loop basically there are two benefits so one you don't have to set exactly how many times you're going to run through it when you create it so it can vary depending on your code and how you run it and also the variable that that defines how many times you go through um doesn't have to be specifically made for that loop it can have other purposes before or after during the while loop um but it's also true that this inside the parentheses of your while it doesn't have to be something like x is less than five it can also just be like a boolean so like if if you have a boolean value named running that's like either true or false you can say oh um while running is true then we're going to go through this code over and over so yeah you could also use it for example something like let's say you make a game like a yeah a game and um you ask the user do you want to play again and it could be like while again equals yes um then it's going to keep on playing the game but then as soon as they say no then it's going to exit and then the game will end so like alex said it doesn't have to be like a number kind of value in here um it could be like a boolean um so that's a big difference like the main difference between for loops and while loops also so what do you guys think would happen let's say this right here let's say we didn't have it um so the code just ended after this right here what do you guys think would happen like how many times do you think it would be printed or what do you think would happen to the code can take your mics off or if you want to type in in the chat um just what do you guys think any ideas it would run forever yes alex yeah so it would run uh forever so that's a really common mistake when working with loops because if we think about it we're only going to somehow be greater than five because x is increasing but let's say x never increased and x was always zero well zero is always going to be less than five so we're always going to be printing hello so again because we have x plus plus we'll go from zero to one to two to three to four finally to five where five isn't less than five so it'll exit so again like alex said before um we have the three same parts as in the for loop um like the we have the initial we have the condition and we have the increments it's just different placements um so all three are important and necessary so if you didn't have this um it'll run forever basically infinite loop um which again is a really easy fix it's just something that comes up a lot so if you ever see your screen it just like keeps on printing something then you've probably forgotten that statement but it's super super easy to add so just something to be aware of um so you can easily fix it okay do you guys have any questions about that okay then let's hop back over to blue jay okay so i'm actually let's actually turn this right here what we have right here and let's turn it into a while loop meaning that we're gonna have it perform the exact same function we're going to have high print out eight times we're just going to use a while loop instead of a four loop okay so let's start off with our int i'm just gonna do y this time equals zero so again this right here is going to correlate to this part right here and now we're gonna have bio y is less than or equal to seven and this right here is going to be correlated to this part right here so that's our condition and inside we're going to have system.out.printout and hi and then um as you can first see that right there is going to be the same thing as right here so that's our body of our loop and of course because we don't want this to run forever we need our last part right here which is our increment so we're just going to do y plus plus and there we go that's basically this basically performs the exact same thing as this does it's just going to be a different format so i'm gonna go ahead and comment this out and let's go ahead and run it okay and again like last time we have it printed out eight times three four five six seven eight um so now let's just see what would happen if we forgot this y plus plus so um like we talked about before it's going to be an infinite loop meaning that it's always it's going to be continuously printing out high because 0 is always going to be less than 7 so let's kind of see what that looks like or what it's going to do so compile it and run it and as you can see it just it keeps on going right it's printing pruning printing it's not stopping it just keeps on going um so that's how you know that you've forgotten that last part um so how to exit it if you see at the bottom next to the blue bar there should be an arrow just go ahead and click that and that will exit um yeah exit it and then once you see that then you can go back here you'll see yourself okay that's an infinite loop i know i forgot my increment so then you could just go ahead and add that back and it should be all good do you guys have any questions about infinite loops or just anything to do with while loops or anything like that okay cool um speaking about 10 minutes so let's go ahead and cover the last part for today yep my computer is being slow okay there we go okay so what can we actually use the for loop for like as a more practical purpose so um oftentimes we want to print the entire contents of our array or our array list so like instead of just printing one element at a time we want to tell the computer to print the whole array the whole list so this is where for loops really come in handy because we can use it we can use a for loop to like iterate through every single element of your write or array list so it's going to like move through every element and you can tell the computer how many times you want to go through it depending on how long your array or array list is so basically how you print out all the elements of an array for example so in this slide here we have an example um you're going to make a for loop then inside your parentheses you have the three conditions so first you're going to create an integrable um hero just and usually you want to set it to zero as i said before you can set it to like any number you want but if you set it to zero it's a lot easier to keep track of and then the second condition is um what under what conditions the for loop will run so here we're going to say as long as your integer variable is less than array.length so as long as the counting variable is less than the number of elements in your array and then the third condition is just adding one to your variable every time it goes through so it keeps counting through your array um so basically what this for loop is going to do is to start at zero which is the index of the first element in your array and it runs again for each it runs again once for each element of your array so inside the body of your for loop the code is going to be system.out.print so a print statement as always and then you're going to print do you guys remember how to print just one element from your array it's going to be this print statement and then the name of your array and then in brackets the index of the very the index of the element you want to print so this way your x your accounting variable is kind of acting as both the accounting variable and the index of the element you want to print so your every time you run through your for loop you're going to print the element of the array that has the that has x as its index number um you kind of need to wrap your head around that but it's a really like effective way of printing every single element of your array and running through it as many times as there are elements in your array uh let us know if you need to us to clarify that or anything or explain it again because it can be kind of confusing like everything we've been talking about and then your arraylist basically uses the same um method so the only difference it's also going to run through each and every single element in your arraylist but the only difference is the condition when you say how many times it's going to run instead of using dot length like you would for array to get the size or the number of elements in your list you use dot size parentheses as we taught you before at the beginning of the lesson so here you're just going to do the name dot size instead dot length and then also to print an individual element of an array list you use dot get and then the index in parenthesis unlike up here you use the name and then in brackets so those are basically the two differences and it just has to do with how you do different individual like it's depending on array or array list uh but it's the same overarching concept yeah so um let's go ahead and try that and i'm just gonna use um okay so i'm gonna go ahead and delete this um i don't know if we have time to try out both so it's the same concept like alex said so let's just go ahead and try this with our arraylist okay so we made our arraylist and we added some elements to it so we have four um it's in this arraylist and if we wanted to print all of them it's a lot easier to use this loop rather than doing a realistic get zero or real estate one real estate two so on so on especially if we have like 100 elements we don't want to spend 100 lines of code writing that out and we could do that in like three lines they're a lot simpler so let's go ahead and set up our for loop now let's just do it x equals zero in x is less than array list dot size and i've seen this arraylist.size here kind of confuses you just think about the arraylist.size is going to be an it's like if you remember at the beginning when we printed out the arraylist.size we got four so this is essentially just saying x is less than four it's kind of just a shortcut so we don't have to go out and figure out how many elements are in it but just think of this as an int in this case four so then we're going to do x plus plus open parenthesis always forget your always remember you're closed and then we are going to do just arraylist dot get and x and this is going to work because first x is going to equal zero so it'll print out arraylist.getzero and then and then x will equal once it'll print out this one x will equal two and then x will equal three and then it'll exit so i'll give you a second to copy that down okay so let's go ahead and compile that it all looks good and let's run it so we should have five three one and nine yep and we have five three one and nine exactly like um we expected so really quick before we end let's just try what if we add like what if we add one more well this will take it into account because now arraylist.size is going to be five so it'll be less than five and then it'll go all the way up until x equals four so then it'll include this last one so if we compile it it should be the same thing just with the number seven added on to the end and that's exactly what we have so we have five three one nine seven just like we have here so again this is really convenient as you can see this is really compact only three lines and we could use it to print an array list that might have like a hundred elements which is gonna be a lot easier than typing out each one um individually all right so again this is the same concept that you would use for array here you would just do um array dot length and here you would do array with the bracket and x instead of dot get x otherwise it's the same concept um and so if you want to try it on your own later that would be great okay we're kind of running out of time so i'm going to go ahead and stop sharing but do you guys have any final questions okay cool so then i think we're pretty much done for today uh thank you guys for coming and our next one will be saturday yep yeah so hopefully we'll see you guys then and thanks for coming yep thank you guys so much hope you had fun and learned something like two people