today we're gonna be talking about um just iteration and what i mean by iteration is basically like looping so like things like four loops while loops will be going over and how those work in java so first off um just like i said iteration is basically um you can do a bunch of things um in sequence to like a block of code and you can basically just repeat the same block of code over and over again for a certain amount of times so an inner like um technically speaking in iteration is sort of like one one loop around uh like running the code once so if you want to iterate over a piece of code like say five times that just means like running that piece of code five times all right so how java does iteration is basically through looping so living in java is basically you have um you like have a specific code inside a loop and i'll iterate it over it for a certain amount of time so it's basically um the same ideas as like iteration so um there are two kinds of loops or there are two in general there are two kinds of moves in java so the first one is basically like a for loop where um and then the other one is a while loop these are very similar like they both do like looping over a block of code but they're a little bit like there's a little bit of a nuance um which which will like affect when you want to use a for loop and one you want to use a while loop so um i'm just gonna um open up this image and this is basically a flowchart of a for loop so basically in a for loop you um have like a you have sort of a counter variable so usually it's called i and it starts at the value um usually zero but for this one it's two um a for loop will then do a check like is i less than or equal to six or something like that um if it's true it'll like perform whatever action you put inside the block and then next it'll increment the variable um a certain amount of times until this um this condition is false and they'll stop um this will make more sense once we get into like the syntax of a of a for loop so i'll come back to that um any questions about so far um yes um can you just tell us what exactly that uh would print out of course um basically for this specific loop um we'll start at over here so start um i equals two so we have this counter variable called i and we give it a value of two um inside the for loop it will do a check so is i less than six or is i less than or equal to six um right now the current value of i is two so that is true we'll then do on print i plus one so we'll print out um yep okay does it print two or does it print three is it adding one to the number yeah so we'll basically print out what i plus one is so print out three and then like afterwards it'll increment i so i equals i plus two so now i is four um it'll do this check again is i less than or equal to six that is true so then it will print out um i plus 1 so 4 plus 1 so it'll print out 5. and then it'll like continue until i is i is not less than or equal to 6. so and then it'll exit the program um basically this will just print out um let me give me a second to like do the math in my head it will print out three five and seven basically um this one this will um make more sense once i show you like what a four loop looks like in code but um this is sort of just like the general looping structure so we can like come back to this once i get into like four loop and while syntax yeah so next we're just gonna go over like the syntax of a for loop so in a for loop um you have the four parentheses and there are three statements um there are cert they're like there's like certain rules of like what each of these statements are but um i'll come back to that once we get into like the looping examples and then inside like you have the curly brackets and then you have weber block you want to like loop over um a while loop is a little more simple it's basically while parentheses there's like a boolean condition that you want to check um inside the while loop and then there's like the curly brackets and then whatever code you want to like go over so first let me um share you this first looping example this is just a demo of before this i'll just paste in chat here um just remember to like to fork before you change your code um and i'll just go over what this does so if i just run this um what the code actually does is it will print um basically um the counter variable i and hello like how many times you want so right now ten times um basically in the for loop you have a counter variable um usually people will call it i and then you'll have like a boolean check as your statement two and then your statement three is an increment so um let's go back here so statement one is basically you're initializing a counter variable so the variable if you count how many iterations you're gonna to go over so how many times are you going to lose in this um this for loop so you're going to initialize it here the next one is statement 2 is your conditional check so i is i less than um the maximum amount of times you want to loop over and then statement three is when you increment i so are you gonna like is it gonna be like i is gonna increment by one each time or is it gonna like increment by two um i don't think we've gone over what plus plus means in the primitive section but plus plus is basically um it increments i by one um there's also like minus minus which will decrease i by one but for now um the this basic for loop is like for integer i equals zero so like the counter is going to start at zero um if i is less than the number of bonds that we want to print out um and then at the end of each for loop i is going to increment by one any questions about this yes um so so the logic is if i is less than the number of lines yep i guess what i'm wondering is when does the increment uh incrementing it i by 1 happen before or after the print printing of the line sure um let me draw out sort of like the a flow chart for this so basically the general logic is you're going to initialize a counter variable i and then next what's going to happen is the java is going to do a conditional check so so basically what happens is you have in i equals zero the next thing um java's going to do is it it's going to do the statement to like the conditional check so is i less than num lines afterwards it's going to be like their print hello so it's going to be whatever is happening inside this code block so this line of food and then finally it's going to do i plus plus so the increment um usually happens or yeah the increment happens at the end of each loop and then it's going to go back and do this conditional check and then this is like the general structure of the loop um if it turns out that like this um conditional like i let's say like you print this out 10 times so like um and then um we're at this point where like over here i equals 11. if this conditional is false it will then go and exit the loop is that a little more clear basically i don't i don't think this has been explained before like explicitly in like in classes but i would recommend that like basically all semicolons think of semicolons as like the period at the end of the sentence so semicolons just determine like how it helps java think of determine like which where the lines of code are like what is code basically um should line 12 be empty um yeah this is valid code so basically um for system.out.printline um it'll if you leave it empty it'll basically print out it's basically kind of just like pressing enter and then printing out like an empty line um if you want to like yeah basically it'll print out just the empty line i know like skip to the next line so basically for this um this will print out um basically zero hello one hello it'll print all of that out up until nine it won't print out ten hello because um i haven't put the i less than or equal to num line so only print out when i is um zero to nine um there's also like this other trick so basically for for loops um we have these three statements right you can actually leave some of these statements blank so if i leave if i like initialize uh enter like j outside over here i can actually leave this first statement blank because j has already been initialized somewhere else this is just something to um keep in mind i wouldn't recommend like actually doing it this way just because it makes your code unbeatable but um in case like you see it in other people's code this is like this is valid code basically any questions about this i have a different question about why can't you just print why can't you just print lm left parenthesis why can't you just print j itself why do you have to put integer period t o string in front of it um basically so string and um and integers are different types and java is a little peculiar about like what types can you sort of like add together so okay because you're adding it to that other string okay yes right if you were if you were just printing if you were just printing the number and you didn't have another string in there could you just say print ln link paren right paren can you do that or can you yeah okay yeah so basically um i think like so java will i'm actually not too sure like if java will get angry if i wait let me actually try this so sometimes java will get angry if you like try to add a add an integer to a string and sometimes it won't it's just very peculiar about like when you're like adding two types together so right now it's like it's fine with it so this is like technically you can do this um i just personally i just like being careful and like doing integer.2 string and converting into a string because some languages are like very well some languages just won't like this but like other languages like job and python they might they may or may not be flexible with this um this might not work for like other types so if i have like a double um maybe it won't work i'm just yeah this is just personally like i like doing like the string conversion because like i've worked with other languages where like like doing just like j plus 5 will like make make the compilers mad but like for yeah it's just it's just my habit so um i was going to come back and like explain this but um i guess like my explanation like drawing outside all right so next um let's just move on to the while loop double done so for a while loop it's not exactly like a for loop where you have like three statements it's like a little bit complicated a while loop is just the while keyword front a parenthesis with a conditional check in it and then your brackets with your um with your code in it so let's just move on to this wow demo um basically over here we have like a while loop where that takes in like user input so um we first like scan in the user input if the user input is not 5 we'll just um print out basically whatever you type in so to do a quick demo once this runs this will basically be like i can like type in like random gibberish and then it will just it'll basically just print out whatever i can except when i print out five it'll just print out by and it'll exit this wow and the code so basically um what's happening here is just what whenever we like run this while we for each loop we'll do this conditional check while this conditional is true we'll continue looping over this and then once it's false we'll exit the loop um any questions about this so you have a question chat so this code is to reprint the user input exactly all this code does is it will echo back whatever you um whoever you typed in so if i see over here um it'll first print out the original user input asdf but then this line 14 basically um changes user input uppercase and reassigns it the user input and then once i run the same like print statement as line flow um you'll see that it's like all cats um i can also like add something outside the file loop so um let's say like system outside for a while loop um it's pretty simple all you have is like a single conditional check so is user input equal to buy um remember that like this is actually let me raise this because this is pretty confusing or it can be pretty confusing um is user input by basically this is like the question um while this is true we'll like execute code in this and then it'll loop that so while this is true it'll continue in this cycle um if it's not true it'll exit the loop so then the question becomes like what code is this so like what code is going to be executed movie and just like with the for loop it's everything inside of the curly brackets so we'll just like run all of these lines of code in sequence um does that make it a little clearer yeah oh yeah yeah see the general rule for like for java is anything inside of curly brackets counts as its own block of code so semicolons um basically denote like statements sort of like sentences and curly brackets are kind of like paragraphs so this is this is a block of food and everything inside of like the curly brackets in the main statement or in the main method counts also counts as its own block of code um so basically yeah this is all we've gone over for like the four loops so we have like statement one is like the initializing the counter variable statement two is just like the conditional check and statement three is the um the incrementation or i don't think that's a word it's like it it increments basically the counter um i don't know do you guys want to like do this example or basically this will just print everything like one two three but not four um and then while you again it's just like you have a while and then conditional check and they'll perform everything inside the curly brackets the thing for a while loop to watch out though is notice that unlike for loop um there isn't really like there isn't really a fail safe where like you have a counter and there's like a specific like there's a specific number of leads that can like go like there's a specific number of iterations you can basically go through so notice how for loops i have like this counter variable that keeps track of like how many times can i like go over this code but in while loops we don't have that so um when you're writing with a while loop just be very careful that you aren't um you aren't accidentally making an infinite loop so um in this example we've created our own like counter variable i and we keep track of that like inside the while loop conditional um you can also have things like just like in the demo code where it's like while like while the user doesn't um input phi um i'll like keep on running the soup but there's like a definite condition where like this wildly ends um and so like just make sure that you aren't actually creating a situation where like you can't exit and that um that is like really common a really common mistake for while loops um it can happen in for loops but for loops are generally like that's like it's rare in that case so um i think we only have like 20 minutes left so um you can like go over this example on your own it's kind of similar to um to like the demos but um like they have this counter variable and they're just like they're like doing the conditional check and they're incrementing so if like you're writing code like this make sure you always increment your um your counter every time so next um we're just gonna go over two important keywords for looping so the first one is break um if you remember from the switch statement break basically exits something for you so in the case of loops break will basically um break you out movie and then continue is just sort of a way to skip um skip something and do things so continue is just like i'm going to the next iteration i'm not gonna like um do whatever else is in the code after the community any questions about this all right so i'm gonna um first do the continue demo and we can check out this code so basically in this case i have like a for loop where um where i'm basically gonna um have a counter so wait so i have this first integer called counter that's not purpose for me and then inside the fourth i'm gonna loop over this 10 times except i'm gonna um skip three and i'm going to continue with three um the other code is like basically other than that i'm gonna just add um i'm gonna increment my counter so what's happening is basically um counter should this should this loop should run ten times but because i'm skipping three um the counter should only count up to nine so i equals sorry just a moment let me grab my drawing probably again so basically i equals zero and then um in this case of this force i is less the condition was i is less than ten um and then i'm going to increment counter if counter isn't three and then i'm going to continue digging over what's basically increments you increment the counter and then you check if counter you do the you increment the counter first so you're coming down and you said size less than 10. the first thing you do is increment the counter to one and then after incrementing it you check to see if the counter is equal to 30 is is not equal to three no so what's happening is basically um for code you always read code top down so the first thing i'm doing is i'm checking if i equals three if i was three i'm printing out the statement that i'm skipping um i'm skipping three and then i'll continue what continue does is it'll basically um ignore everything at the bottom here and it'll just go to next loop and then you will ignore the the increment yeah basically continue enforce the increment yeah it will basically um ignore everything that's after it inside of the loop so everything that's like after this continues um it'll basically skip over once i hit the continue keyword um the general gist of this code is i'm counting each time like the loop is run so if the if statement wasn't here this counter would be 10 because i went over the um the loop 10 times right however once i have this checked like if i go three print out i'm skipping three i'm gonna continue um what's happening is it'll skip over the third this makes it a lot more clear so like basically when i equals three it will just like um it will just skip everything after the company so continue basically like um it's nothing super like complicated it's just like anything after the um continued keyword is just skipped over any other questions is it okay if i move on from this one yeah yes sweet all right and then the last demo i'm going to show is the brake demo so brake um will basically break you out of the boot um it's pretty useful like in certain conditions so like i remember i said like remember when i said um in wild loops like you generally once you want to like um want to avoid like infinite loops where like where um it isn't possible for like whatever your whatever condition you're tracking to be false but that's kind of like not exactly accurate so there there are actually times where you want to lose infinitely over something um think about like at any time you like run a program your code never like when i'm running this browser it doesn't just run once and exit right um it's like here for like until i exit out of it like by pressing the x button um what's happening is this um program is actually running on infinitely and then there's like somewhere in the infinite loop like when i click on this like x button and close the program it'll like break out of that loop and this is like sort of what's happening here so i have this infinitely while true i'll run this code and in this code like you don't have to worry too much about like what exactly i'm like doing so like basically i'm like whenever i type in something um i'll basically like either repeat it back or like if it's something in the switch statement i'll like uh type in a response or something or like the program will give me back the response so say like i type in hi it'll like print out hello um stuff like that um this is just like another example of a switch statement if you want to like check it out um the more important part is i also have the ability to break out of this infinite loop so when i type in five um it'll the system will basically print out five and it will just exit this while loop um so it's sort of really similar to the first file loop we saw so it's the same idea of like if i print out five um i'll basically exit the loop um any questions about this there isn't a condition that this is checking um if i like let's say i didn't have this let's say i didn't have this break this will run forever this like it won't stop until like the program crashes and runs out memory or something so this will run forever theoretically okay however like if you want like an infinite statement like this you should always include like a weighted exit right and that way to exit is a break statement so this break will basically break you out of this infinite loop is that like a little more clear so think about like for example this web browser i don't want it that like when i click on this web browser it will just like run once and then exit on me right i don't want it so that it like opens for like two seconds and then it will just exit the code i wanted to run over a period of time so that i can like use it and like interact and go online and stuff so all like programs that run over a period of time even zoom it'll run on something like an infinite boot where like it'll run or it'll run forever but like if there's a condition where like i press x to exit it'll like break out that infinitely okay yep um they're like there are like definitely other ways to like to sort of like emulate that like you can like also do something like this where like while um user input doesn't equal like 5 or something like that um i'll keep on running it but this is like just another way to like do it and it also just shows like the what a break statement is unfortunately we only have like one minute left but um you guys can definitely like i would recommend you go over like the choice questions just best practice um and i think willa already posted like all the links to like the workshop um if you want to do it on submission and viva