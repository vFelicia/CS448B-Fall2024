javascript part four iteration lesson nine let's do it let's get pumped to loops imagine you have to write so loops are really helpful when we're trying to write code over and over and over and over again because they just do it for us instead of us having to write out the same thing over and over again loops allow you to run the same code over and over each time there will be a different value sometimes true sometimes not depending on what you're trying to do here the loop will continue until a specific condition is met so remember our if else statements if thing happens continue loop else stop loop um oh now we have animations this week fun so he's hungry um luke is like eating food so if he's full then we get back to here but eating and then yes you know external output um a for loop so a for loop goes through a block of code for a number of times so for a specific condition that's under the condition that the loop will be run so an example of this is like four mathematical variables this is where you're gonna see it a lot so for the variable i equals zero so the integer variable i equals zero for this variable it equals zero as long as the variable is less than five we're going to add one to i yeah so the variable starts at zero runs code once then we add one to i yeah so as long as i is less than five we're going to continue writing that code as soon as i reaches the value 5 it will stop running this code because it will be greater than 5. initial so that's basically how these things work for a certain condition the code runs itself for that given amount of time um for loop practice so these are just like some examples so this one's like basically what we just saw for i equals zero as long as i is less than 8 we're going to add 1 to i console.log will print i so we'll just print out the values 0 1 2 3 all the way to 8. all right so all the way to 7 because it's less than 8. 4 counter equals 3 counter is greater than equal to zero counter minus minus so for this one we have a variable just like i but we're going to call it counter so the same thing i encounter same integer variable just we call it different names and in this case counters equal to three so as long as counter is greater than or equal to zero we're going to take one away from counter so and then console.log counter so the console would print three two one and then zero because we have equal to zero yeah um and then last one um for cars bmw volvo saab ford um for i equals zero and cars dot length um is less uh for i equals zero and as long as i is less than cars.length i plus plus so it would print out bmw volvo saab ford because it would print out those until it got to the length so it would just print out everything in the given array a while loop so our two big loops are going to be four loops and while loops while loops loop through the code as long as a condition is true so remember our booleans true and false yes no one zero so while loops are only useful for booleans because it's only when a condition is true so i like to think of it that way if it makes sense to you adopt that thinking um variable i equals zero so while i is less than 10 console.log the number is i i plus plus yeah so let's go through this because this is um i know we've had a couple questions in the past weeks for like points counters um this is how you would do that variable i is equal to 0. yes while i is less than 10 then the console.log is printing out the number i so you know prints out this i plus plus see this like i plus plus thing here this is like how you would do a counter so like this kind of structure is how like counters would work for like point systems um i know we had a couple questions about that last week so this is like the kind of structure that you would try and adopt for that but this is a good example of a while loop no that will be added one time each is run through so a do slash while loop um a juice last while loop is a type of while loop so like under that while loop umbrella the difference with the while loop the code will run through once before checking the condition even if the condition is not met so even if the condition is not met the code will still run through once i'm gonna get my pointer here so in this case i equals 10 do console log the number is i i plus plus while i is minus 10. so since this is in here it will run one extra time before checking the condition you know what i'm saying because while is outside of the the do um it will do it one extra time like i i don't want to say like out of error but like kind of quote unquote out of error because your whole thing is like wow it's less than 10 but it does it while it is equal to 10 because it like the while loop saying that it has to be less than 10 is outside of the conditions for the do statement yeah so another example here i equals eight and then do console.log the number is i i plus plus so we add one to i after we print out the number this is while it's less than 10 so since this while statement is outside it will do it an extra time on accident because it doesn't check infinite loop so an infinite loop is when the loop will run forever regardless of circumstance regardless of case you might crash your computer a browser so that is true if you do one that's like adding up numbers um i know for a fact that like just because of the way that like the compiler works there's only a certain amount of data that like number like there's a certain number i forget what it is but there's a certain number that you cannot go past when coding because the compiler specifically in reply cannot hold all of that information so it's a smaller number than you might think but if you do like a plus plus thing it will just like keep adding the numbers and it will like crash because it can't like add more numbers to the number so that's an example of this it might happen when a condition is in the while statement is always true you can stop the loop by adding a break statement so break and um yeah so breaking is like when we say okay we're gonna stop the forever loop so that we don't crash our computers that's what that means um let's see this so let's go through this example a sleep equals true let hours zero so consistent a sleep is true yes so the the variable of sleep is true and let so the bullying asleep is true and let hours feel like hours of sleep is zero while asleep so while asleep is true it has been blank hours since i slept and hours plus plus the code will run forever because there's no break statement to stop the code so it will just keep adding more hours since you like last slept because there's no break statement so there's nothing telling it to stop right and since there's nothing telling it to stop it has no reason to stop and therefore it will keep going because asleep is always true and it will just keep adding hours forever so in this case if hours equals 10 so we're adding on a statement if hours equals 10 it's time to wake up yes so we have a condition here if the hours equals to 10 then we print it's time to wake up and then we add break because we don't want the loop to run anymore we don't want to say oh it's been 11 hours of sleeping when we woke up after 10 hours right so that's why we say break break makes the infinite loop stop it's very important to include break if you don't include break your code might not function properly so it's very important to remember break okay um is there questions i'm perhaps missing yeah timers could be coded like this um const i don't even know what const is that's a good question i don't know i thought it would be like constant like the constant asleep but i've never seen it before as a variable so i will get back to you on that that's a me error um okay why is this not okay nesting so nesting loops so remember how we had our nesting ifelse statement so like if this happens if else if else if else else so that's nesting that's nesting of if else statements it's like having one within the other within the other so nesting for loop statements is just having one for loop within the other yeah so hopefully that makes a little bit sense the first loop and the second loop see how they're indented that's how you know things are nested within each other so the indents are what tell us something that is like within each other um in order for it to be within each other it has to be like on an indent from the line above it so if we had another for loop that was like nested within this one it would start right about here because of the indents yes so anything that's nested is always like indented within itself um so in this case four counter equals one and counter is less than four counter plus plus so counter equals one as long as the counter is less than four we're going to add one to the counter console.log count from one to three so count from one to three one two three one two three one two three that's the output second loop four counter two so different counter for counter two equals one and as long as counter two is less than four counter two plus plus yeah so console.log counter two so this white count from one to three that's counter one so that's just regular counter this is counter one because it says count from one to three so it says okay counter equals one so we're going to print out count from one to three here we're printing out one two three from counter two so counter one counter two counter one counter two and they go in succession like this because they're nested within each other yes and this loop will keep going for as long as this loop is able to keep going right hopefully that makes sense the outermost loop is determining what if the loops continue right so this loop doesn't determine whether this one runs the outermost loop determines whether the inner ones run yeah would you mean if the outer loop doesn't run the nestle wouldn't that's exactly what i mean so like if this one like doesn't run so like okay it's like what's a good example of this visual example i don't know if we can see this this is a newton's cradle if we can see this basically how this works is if this ball hits all of the ones in between it then the outer one also goes right but it only works if the outer ball like does its part it doesn't work if the inner balls only do their part right so the outer one like continues the whole point of it that was not a good awesome but basically like the outermost loop dictates whether the inner ones run it like the outermost loop is the one that decides whether the other ones will run because it's the like it's the primary condition nestling loops within each other you make the outermost one the primary condition and therefore the primary condition has to be met for the code under it to run therefore making the outermost loop the primary condition hope that helped um recursion so a recursive function is when a function calls itself so we remember calling a function we tell this a little bit last week a recursive function must have a condition to stop calling itself so it's like you calling up yourself on the phone to do something you know what i'm saying like it needs to stop at some point but it makes more sense in a computer world um you can use an ifelse statement to do this so let's go through this function countdown variable number yeah we have an integer variable number and the function is called countdown console.log is gonna print out the variable number so the function itself is printing out the new number new number equals number minus one so new number is number minus one so whatever number was we're gonna take one away from it and we're gonna call it new number if new number is greater than zero countdown is gonna start again but with new number instead of number so what this means is we're going to have a number and countdown is going to say okay we're going to print that number out then we're going to take one away from that number replace it and then we're going to print out the new number that's one less than the original number so it's just a countdown so it's like six to five that's basically what this code does it goes six to five but it's a recursive function because of this countdown equals four so we call the original function when in like the function itself yeah so basically countdown four prints and calls countdown three and then count countdown three prints calls countdown two so it's calling itself within the function to keep the loop going a recursive function is a really good way to have like a loop but like in a sneaky way um so it just keeps going and going and redoing itself over and over and over again until it reaches zero because that's our base condition here so it reaches zero and then it says oh well we reach zero we don't have to do this anymore and then it stops yeah so this condition is basically the same as our break and a recursive function is basically the same thing as like an infinite loop let's get into the next one so number properties so remember um how i said like oh make sure when you're using numbers if you want to do math with them or you want to do like the already implemented functions with them make sure you call them an integer because you don't want to say oh it's not an integer like it's a string because then none of these things work so javascript and java but javascript has all these like already implemented functions that help you do mathematical things but they only do them with integers because it knows how to compute an integer like it knows what a number is but it can't do that with like words so min value max value returns the largest number possible in javascript returns the smallest number possible in javascript these are like what i was talking about when i said oh javascript has like a limit for how big the numbers can be this is what i'm talking about positive infinity negative infinity represents infinity returned on overflow so like it can't actually represent infinity so it has like overflow the excess um same thing here nine represents a not a number value that's kind of hard to explain um nan is like interesting i don't know not another values are like hard to explain um you don't really use them all that much um yeah that's all i'm really going to say about that um so let's go into the example here so variable k number dot min value console log k so basically what it's going to do is it's going to take k and then it's going to say oh well we're going to make k the smallest value we could possibly have in javascript and then we're going to print that out in the console yeah this one doesn't work because variable x equals 6 and then variable y is x dot max value y is undefined here it doesn't work y is undefined um because this is not the max value you know what i'm saying like it doesn't make sense this code doesn't make sense and therefore y is not defined and therefore it doesn't work yeah so there's a lot of these like inherent math properties that um you can use when doing stuff which is why it's important to like define your variables as integers if you want to use a lot of these number properties why is that okay there we go number methods so number methods can be used on any type of numbers call the method by variable.method so example2string method returns the number as a string um so this is like to convert integers into strings so changing your data type that's how you do it two fix method returns a string with a number written with a specified number of decimals yeah so it's like it's kind of like rounding but like it doesn't round it just kind of like cuts your number off um so methods are really good for little things like that um variable age equals 35 age.2 string it takes this number and puts it into string form so return 35 like it returns 35 it looks the same but you've just changed the data type from an integer to a string and then variable x is 9.656 x to fix zero rounds it to a whole number so we just get nine x to fix two we would get nine point six five okay hopefully so this one it's gonna be a fun workshop today i'm actually really excited about it um does anyone know what a cipher is just like out of curiosity while i queue up the the replit okay a cipher is like a fancy word for like code like a code like a like a code maker so um you know like you can have all those like things that like scramble letters and you like make a code with it that's what a cipher is so this one's a fun one i really like it um this is the reply this is the reply get excited it's a fun one i really like it so we're gonna run it um this one has a silly background that our lovely education director rachel did i like this one i think it's fun i think it fits with the cipher theme um we had a little bit of a disagreement on backgrounds before but i like this one okay so what this cipher does is basically you can input any text so this is the plain text so say like i wanted to do like my name is willa and say i wanted to shift it to so like encrypt it too and then i would press encrypt and this is my encrypted text so you know and then if i say decrypt it gives me my original text back notice it's in all capitals because the alphabet itself is in all capitals so um we can go through the code together but the alphabet itself is an all capital so anything you write once you like put in the cipher machine it's going to come back as all capitals because our alphabet is the capital letters um yeah so let's go through the javascript our index.html is like not bad it basically just like goes through you know our options of shifting stuff um let's go into our javascript so this is an alphabet and basically it just like is the constant like array of letters that is the alphabet so i would recommend not touching that if you want your things to like stay in english but um go for it um function.encrypttext we have a function called encrypt text and when it says document form 0 let title so document get element id title id encrypted text and we shift the number form shift value so there's a lot of like things in here um that are like basically what it's saying is like we're gonna get the text so what these functions are doing is they we get text we get like an input from the text so input from the text bar depending on the number that they selected here we're going to shift it that far into the alphabet so that's what this does i'm trying to find like yeah so basically we have like all these things where it says like shift so like let shift source detect but basically what this does is it takes your stuff um and then we have like shifting source text all these things like are defined later on but what it says it's like we're going to get the text we're going to say how much they wanted shifted by we're going to shift it by that much so shift it in the alphabet by that much and then we're going to spit it out as the output so um i'm trying to think of like what's the best okay so function encrypt character shift let include alphabet includes character to uppercase so it puts everything in uppercase because it just works with uppercase better if it includes um we let position equal the alphabet dot the index of the character uppercase so whatever the character is we're going to let the position be whatever the position of it is in the array so like 13 y 25 so we number them all off and we say like oh actually that's wrong m is 12 y is 24 because remember we start at zero so anyway so it takes that says that's my position for it and it shifts it mathematically you know two spaces whatever it is so shifting two would shift at two so like if i said i feel like a good way to illustrate it is this way my code is abcde and i said shift 1 my output is going to be bcdef because we shifted it one right decrypt if i say shift two encrypt f g h i j so that's what that means when i say shifting if that helps you um new position position plus shift alphabet length um returns alphabet new position returns character so basically all these things are just like defining what the stuff means so it's all just saying like we're going to take stuff we're going to shift it and then we're going to put it back into the function um so it all gets defined later on but we have it put it in so we can like say like oh um like form text value character encrypt character shift join so like all these things are like defined later on in the code yeah so your challenge for today is your challenge for today i honestly would say your challenge for today one change the background because i think that's fun so change the background go into the css change the background two what i would say your challenges is these are all gonna say um so your challenge right now is to change the options so it says like shift 2 your challenge is to make it like shift 5 shift 10 you know shift 30 and see what happens um i'm trying to look at the javascript and see like what's a good challenge and another challenge would be a willow what's the challenge um i'm trying to think about right now i said one like change how much it shifts by so like you know how it's like one two five or 10 26 like change how much it shifts by um and then also the letter count yeah sure like change the alphabet change it up all right sounds good yeah anything else apart from that um i don't know if you have anything though like message me okay yeah i thought we'd put challenges in for this but i guess we did not okay had a rough day over here at but yeah okay so let me know christian have a good one um yeah so i'm gonna stop recording