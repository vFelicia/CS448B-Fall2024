all right now we're recording so um for this lesson we'll basically be going over like um basic how to use objects in java and stuff like that so we'll be talking about like what objects are and um what like classes and instances are and also um i'll be going over to um two pretty basic classes in java that you'd find pretty helpful so first off um what is an object an object is basically like it's just a thing in java that's kind of separate from the concept of a variable so like a variable holds a value but object is kind of like a like an object in your life so like a bottle or like or just like a thing um it's basically an instance of a class so class is kind of like a blueprint on how you can like make an object like what this object does um what um what information can it hold and the object is like an actual instance of that class so um i guess the best way to put it is like for example um if you look down below um you have something like a class can be a fruit or a book and the objects would be like apple oranges and bananas and a book would be like jane eyre or like the great gatsby or like the hunger games so like the classes sort of describe like what an object can do and what sort of um stuff it has so like another example would be a class can be like a dog and the object would be like like um a puppy or something like that so a dog can bark um they could have like different colored birds and then like the puppy in real life would be like the um the instance of a dog that would actually like bark and you can actually see the color of the skirt so something like that and then in in java like you can create objects by let me move this upwards um you can create objects by just doing like class name equals new class and then you have to have like the parentheses at the end so for example you can have something like fruit apple equals new fruit or book jing error equals new book so the most important thing is like just like with variables um so like this part is the variable so you have like the class that describes this type so like the variable apple is of type through but this second part is how you're instantiating that object so it would equal a new fruit um any questions about this so far okay and um i have one real quick sure so downward has like book jane eyre new book um there's so jane eyre up top is capitalized in space and it's one word with just a lowercase down there do you not use the space when you're doing a class or um so basically for when it comes to like naming variables in java um the general you can't have any spaces in your names so um it has to be all one word and you can like have different capitalization so like the e is capitalized or something like that as long as it's one word then it's a proper variable name so that's why we have um we have the space missing in january um technically for variables you can like capitalize the power like however you want so like the j could have been capitalized but um in java it's usually good practice you have your um variable name start in lowercase and then your class name start with uppercase does that um yeah thanks um and if you guys have like any other questions or like you kind of want me to go over this or you're not like sure what's or like you're not really getting what's like what i'm talking about feel free to like tell me to like go like go back or like or um or just drop any questions all right so next slide um what so basically why i'm talking a lot about like objects and stuff is um i'm trying to get you sort of like objectoriented programming so objectoriented programming is basically a type of program you can do that's structured around objects and classes so if you've um looked through like the workshops and all the demos we did last class um you'll notice that literally everything in java is structured around objects and classes so like even your main method is in a class and it's like part of the main class and things like that so java is like a really good language to learn um olp or objectoriented programming because everything about it is centered around objects and classes um it's also i'm honest like we also there's also like procedure programming and that's basically just saying like all the um basically all the stuff you do in java is operated on by method so like you it's basically um java is a language that's structured around like making methods and like passing data into it um you don't have to worry too much about like knowing exactly what like um procedural programming is um it's more of that you should understand that oop is a way of programming where you have like concepts like objects and classes and basically um a lot of what you do in java is basically creating new classes um passing around objects and just like manipulating those to make a program and yeah like again in op like objects can contain data and methods so basically um in your classes you can have both like different types of data like oh what if i have a class dog like what color is it for what's the dog's name stuff like that but you can also have methods like a dog can fart a dog can run and whatnot all right so um um any questions all right so next um i'll just be going over like the four basic concepts of oop um you don't really have to um understand exactly what this is right now it's a these are a little bit like advanced but just like keep these in mind as you're like as you're learning java so um basically the four pillars of oop are abstraction encapsulation inheritance and polymorphism abstraction is basically um you only want to show the user the stuff that they need to know so like the the general like the general rule that goes with this is like try to keep your data as private as possible you don't want people like accidentally manipulating um or accessing methods that they shouldn't have access to so all users should only be able to see the stuff that they need to know um is basically hiding sensitive data from users so like making things private and um inheritance is basically like the cons it's basically like subclasses and secret classes so like super classes can inherit or subclasses can inherit methods and data from like super classes and went on and then finally polymorphism is the ability for an object to basically um take different forms so it's kind of like um grouping different objects that have like similar features together so for example a cat and a dog are both types of animals but um and they can like both make noises right except a cat can like meow but a dog can burp um these are a little bit like these it's these are a little bit complicated if you don't if you don't um understand classes and stuff so like right now i would say like um hobbies in mind know that they exist but will definitely explain it or you'll understand it a lot better once we get into the later parts of this this course so like in by like near the end of the course you should be able to understand it but right now like don't worry if it's going a little over your head um just know that like these like these four concepts exist and then this one is also pretty important so like that so basically java is a pass by value language and there's a difference between um pass by reference and pass by values so past my reference is basically like you pass in the reference of an object so a reference is like it's basic if the the powerpoint says it's like a subdirection directions to somewhere in the memory but it's a lot simpler than that it's basically a reference is something that points to someone's memory so um let me see if i can draw this out so last class we talked about um how variables store variables for primitive stored numbers right but um when it comes to like reference objects you have they instead of storing numbers they sort addresses so let me see can you guys see like what i'm drawing on here yes we so basically um when you have a variable let's say i have a variable called a um if i assign it to a primitive type so like a in a equals one a will hold just the value one but um what java does is basically if i have a class a so instead of in i have a class like dog a equals new dog um instead of having like a store dog in here what i would do is it'll do something like it'll point to an object called dog so it will store like if dog was stored in the address like 0101 it will store the address over here and they'll just point these on so that's what um they're talking about these slides what it's like about references basically when you when we have like how do i clear when we have like code like this so fruit apple equals new fruit um and they basically it's basically saying that for reference variables the apple is basically pointing to the fruit object um does anyone have any questions about that because i know that can be a little confusing so like yep um let me get this straight um a reference is a passing by reference is where you type a class or any other reference like a string and uh it gets another object and a type c and i like it gets the information of that object into this one and the value is just uh i'm not sure yeah i'm confused it's all good um yeah so basically um what i'm talking about sort of like java has two types of data so last class we talked about primitive types right they're basically like integers um integers doubles booleans and characters they're all like values that can be that can be um stored as numbers so like you can have an integer two or in like a double 3.5 but another type in java is called our reference type and that's sort of what i'm trying to get at here so like um a reference type is everything else everything else in java is basically like pointing to a different object so like a dog or something like that um basically when it comes to pass by reference um passed by like basically what i talked about is sort of like what a reference is a reference is sort of like a variable that points to like a different object so um if i have like if i have like root apple equals new root um in memory what that would look like is that i have this variable called apple but it points to the actual like fruit object that's supposed to be referring to and the difference in that is sorry you get a question okay like feel free if like if this is sort of confusing like feel free to just interrupting us well so basically what i understood from that is um the reference are like the ever like everything else like the strings and classes they point to another object however the values would unders from that they just store a value inside just only a value inside of them without pointing in any direction yeah yeah that's yeah that's correct so basically um what i'm getting at is sort of like just like you said like um references point to like a different part of memory so um what they actually like they're technically their value would be like whatever like memory address that fruit is at but like you can basically think about as apple is pointing to the fruit object on the other hand like there are primitive values like if i have like boolean x equals true um what this stores is basically i'll have a variable x but instead of going to anything it'll actually store like a true value so one so what's the difference between a value and a primitive primitive is just like a type of value so it's just like any value that can be represented by a number so like okay yep so like bullying to be one or zero then there's ant double float yep so exactly so primitives are types of valleys that can be basically directly translated into numbers so like just like you said um true and false can be zero um one and zero characters can be like any number on the ascii table and then like integers doubles like those are those are actually numbers but on the other hand um how java stores like classes and objects is they can't store the class and object directly into the variables they can only store the address of where that class is in memory so basically they just point to where that object is and that's all they they can do so that that basically relates to pass by reference in that like when you pass in like the the idea of pass by reference is when you pass in the reference to like a method um you're passing in like the actual address of wherever that object is but on the other hand when you pass by value um when you pass in like the when you pass in the um the data into like the method it will actually make a copy of that value into another place in memory so if you technically won't be like affecting the original variable this can be like a little confusing to like explain just by words so like hopefully like this gif at the bottom helps where it's like when you're passing by reference you actually pass in the actual like object itself but when you pass by valley you actually make a copy of that object and then pass the copy in um anyone have like other any other questions about that or like you want me to sort of clarify anything see all right so um next we can talk a little bit about like specific objects and classes that you can use in java so the first one the most common one is string objects so strings are um they're objects and they basically are a sequence of characters so words um they all have like you can access their attributes with using string.attribute and you can access the list of messages using stringout method um basically if you want to access the general rules if you want to access information to like an object you have to put the dot and then you can like put a variable name or like a method name and then um you can that'll be basically accessing that specific variable or method just remember for methods you have to like have the parentheses at the end so you can call the method um just like with other classes you can make a new string using like string name equals new string and you can also input like whatever text you want so um just be aware like for if you want to like create a new string that's like a specific word make sure you surround the word with double parentheses um yeah and it's not it's not exactly recommended because because you're basically like you're basic you can basically create copies of like the same string so in this example you have like string a equals new string abcd string b equals new string abcd however a would not equal b um and basically the idea is sort of like it's exactly what i talked about um in the last slide so basically you have like they have a is pointing to a b c d this string in memory however like if you like do another string b equals new string abcd b is pointing to another string abcd that's in like a separate part of memory so when you do this a equals b they're actually comparing the values of a and z so say like this a b c d is in the memory address like one and this one is in one one so the value of a over here would be one because it stores the address of this first string object the value of b would be one one because it stores the address of this second string object so they technically wouldn't be equal so anyone have like questions about that the better way to just like to just make a string like the same idea would just be like string a equals a b c d so it's just like how you um how you would instantiate like a a primitive type you would just have it's just like a character with but like you put it around double quotes instead and you use the string type um and sometimes like people get confused like it's so easy to create a screen like this that they'll think it's a primitive but this is still technically the same idea as this string a equals new string abcd so there's a way to sort of create strings without having to use this but just remember like the same thing would apply that like a would not equal b because there are two different objects and yeah this is the way of making that would just be like that though that way of making a string is just like using like creating a string literal so um yeah java automatically just keeps these strings in this like they keep it they keep up a lot of objects um in this place called the heap in memory and they also do a lot of like fancy stuff with string specifically that'll make it kind of work like a primitive and then um these are just a list of different string methods that you can use so um the first one is just getting a substring um if you like if we have this string called like hello hi equals hello um get making a substring would just be like getting one part of that string so um it would be this like this line would just be getting like the first two characters of a string so h and e um if you guys are familiar with with um a rate indexing the basically the places and strings start at zero so the the first like letter of the string would be like the zero letter in a sense um any questions about that all right so um just remember that it basically gets everything like starting from the first index all the way up until but not including so the second parameter and then you can also do like two uppercase which will make everything capitalized um there's also another method called q lowercase which will lowercase everything um you can if you want to like actually check stream quality um i would really recommend you check like use this dot equals method so actually for all your all your objects you should have a method called dot equals and it will actually check for um for the value equality of the object so um if we go back here if we instead of using like a equals equals z we use a dot equals b it'll actually return like the correct the correct thing that these two strings are like technically equal like they have the same letters basically so it's good practice to use that equals instead of like equals equals for any sort of objects that you have and second is stop me which is just the length of the string and then finally um index of which is um the index of like whatever substring you pass in so in this example you have like um index fdl it will return the first occurrence of like yell in this group in um hello in hello and then it'll um return one because e is the first index where it's the it's the character or e is at the um first index of the string any questions about this all right so the next object we're going to be going over is the random object so this will help you basically generate um random random objects so you can generate like random random like decimals or like random integers stuff like that so um just be sure if you're using a random class or like for for like most classes that you'll you'll have to um you have to like refer to you have to import it first at the very top of your code so for a random object you have to um type in import java.youtube.com at the very like the very beginning of your code um it's like basically this oh toe job like hey i'm using this random class um and you're basically giving the compiler the blueprint you like this is what the class does this is like um all the methods the class has basically so um you can basically use it in sort of like sort of like the same fashion as this example so like you can um do like random dot next in um to like get the next random integer so just like the first thing you'll have to do is like create a new random object and then next would just be like um calling next in and then it will take in like the um sort of maximum integer that you want yeah and like here are like just two methods you can um that would be pretty helpful so like next it would take in like the would basically give you a random integer if you give it like a maximum value it will basically take everything from zero um up to but not including the um the number you pass in and then um for next double um it'll basically um give you a random decimal between 0 and 1. all right so the last the last um class we're going to be talking about are scanners so scanners are basically how you're gonna um you're gonna basically take in user input so um again just like with random classes make sure you write um import java.util.scanner on the top of your on the top of your um java code so that java will know like what you're using um and yeah so the general thing is just like um you declare a new scanner object and you create a new scanner make sure you pass in system.in so system.n will basically there's like there's a lot basically it'll tell it'll tell you um that you're using sort of the standard system input um there's a lot of things with like java um streams and stuff but basically every time you pass in a new scanner you sh you have to um pass in a system back in within like the constructor so basically every time you create a new scanner make sure like you're using this line specifically otherwise it might get a little um sketchy and then um basically a scanner will call you can call like the a method called like next line which will get like the next line the user enters yep so let me see if i can sort of demo this so basically um for scanners what you can do is like the general rules like scanner my um you'll have to basically pass in you'll basically create a new scanner by like declaring a scanner variable that stores a new scanner that holds this system.in so make sure like you you have this line first so create the scanner object next would be like my yo yo you can call like this method in my scanner that next line which will basically get the next line the scanner inputs and it'll basically return something called as true um it will return a string so you can do like string a equals my scanner dot next line and then we can try printing that out yeah you'll basically have to just memorize this line first um there's once we get to like creating your own classes and stuff and we'll talk about constructors and like and all that this will kind of make a little more sense but for now just like just like memorize this so um this is basically what you have to do so then if we run this wrong library um it will first print out hello world then it will create a new scanner and next line will basically be like java sitting here just waiting for me to input the next lines so i can do like a next line like this and when i press enter um next line will basically store all that information into string and then java will just print it back out um any questions about this yeah i have a question so you put string right in line eight yeah why didn't you import the string because you said it was necessary so like why did it work so basically um the reason that you're like your code was probably breaking when you were using um this new string method was that um java was trying to find like the string constructor but it couldn't because you didn't import like the stream class itself the reason that this works is that instead of using the string class directly i'm using us i'm basically using this um string literal method where instead of like doing like new string abcd i'm just like storing it directly as like double quotes abcd ah so if you're doing string a equals abcd then you don't need to import it right yeah exactly because java doesn't need to basically the compiler doesn't need to go like oh what's this new method and then freak out when it can't find that message basically okay see so um the next thing we're gonna do is just questions but just like practice questions but if you guys have um any sort of questions about like what we talked about this class and even like what we talked about last class um feel free to ask so could we actually go through a little bit of stuff from last week because i couldn't even really get it started to work and i don't know if it's just because they walked through replied too quickly and i'm not familiar with it or uh what the situation was just dumb um so you want to go through the workshop from last class yeah like just like one or two of them to sort of see how to set it up like if i was doing something wrong um yeah let me just quickly pull up the workshop so i can link mine if you need her sure um if you're comfortable with like all of us seeing your code yeah i don't care okay sweet thanks all right so i'm just gonna take a walk through the code um basically the idea was to just get you guys comfortable with um with just like declaring variables and stuff so yeah yeah the um yeah the basically um yeah just like knowing to like be able to go through this you have to just be familiar with like what um what like the primitive types we went over were and um sort of when should you use them and how can you declare them so for this first part um i'm seeing um we have the first part if i remember crosby is that we one need to declare like a variable called num rocks and then um instantiate it so this is correct so you can do like num rocks um and then you can also you numb rocks equals five you can even um sort of let me see if i can work this so there we go yeah i couldn't figure out how to do that either so it's not good um so how you work it is like you can go up here click on the um yeah click on the title and then just click up here yep so um you can do like num rocks like this so this is this is perfect so you can do like it num rocks semi colon num rocks equals five semicolon or you can even do like in numbers equals five and that would also be fine okay yeah i tried that it hadn't worked but yeah it's like there java is sort of like very picky about the syntax you use so like just make sure you um you don't have like spaces in your um variable name and you like you spell everything correctly and then you have the second thing then okay because like a different space in the second one yeah yeah so um next we have like rhymer correctly we wanted you to sort of like declare a symbol and um from class we talked about the um characters like the character type so yeah you have like string symbol equals a play emoji but um remember strings are um first off they aren't primitives um also like make sure you you can also like capitalize this um the general the thing we were looking for was um character emoji equals okay equals like whatever symbol you want so like and remember that for characters it's a single quote instead of a double quote and you can do like hashtag or something like that or i i named that wrong that was would be symbol but that was um that was what we're looking for okay yeah i guess i thought it was straight it was multiple letters and character i thought was just one letter or something um yeah like yeah it was it was supposed to be we were trying to like talk of like you to like write a character but like it's totally understandable if you follow the celestial stream okay yeah yep and then he helped me debug my code um yeah we don't have to go through all of this for this i just sort of wanted to see what i was wrong okay um this is yeah i think like for most of this is correct um just remember if you want true or false um this should be boolean so like okay yeah usually um okay yeah yeah usually for booleans the thing the thing also is um booleans are usually named like is this is that or like okay because they were like true or false um and then for this it would just be a it would be a double because you want um uh you want a decimal for it so doubles represent decimals in java okay yep um thanks so what's the difference between a double and a float so doubles are basically like so if you remember from last class um integers doubles and all these numbers they technically can't be infinite right like there's a certain limit to like the largest integer you can you can make and the smallest is your right so um the difference between a double and a float is a float can represent larger digits than doubles so they can represent like even like even bigger decimals basically um the technical answer is that doubles and floats are different like they have different storage size so if i remember correctly doubles are like eight bits or something like that or one byte large but floats are technically the larger variable which means they can store more data oh okay yep and can you help me debug my code right now i can give a link to it um is it possible that we can do it after class so that like so that we not like so i don't have to like show your code to everyone and we can have i thought this was after class um class ends at six so like can you wait six minutes okay thank you all right i'm gonna just skip all these beginner questions um we'll post the the like slides after class so um if you want to go over them feel free to like go over them on your free time um we have the answers in the slides but um here is also just like a bunch of different things that you can refer to for like if you want to like know more about all the stuff we talked about during class and then we also have like the feedback form and the submission form so i'm gonna copy and paste in chat so basically the general workshop is that um we have this story but we want you to sort of like we also want you to get like user input and like whatnot so um first off we have to like um we have to sort of create a scanner object so um how do you create one and how do you like how do you like give it the proper information um next is like we want you to have this scanner scanning like your friend's name and then store it in a string object so think about like how you would declare a string variable and then we've done the scanning for you so you don't have to really worry about that and then that's them we just have a little bit about sort of like how do you um create a string literal um and just like how you would do that and then finally like this is just a little bit more about like creating strings and then also um generating a random number so what um what class would you import for to like get a random number and how what method would you call if you generate that yep and then this is where you would store your random numbers and that's it so the general gist of this is like again um we're just trying to see if you understand like the string random and scanner classes um if you know how to like how to create an object um specifically like a scanner and a random object and then finally like if you if you know how to um how to store strings properly so any questions about this workshop all right and then finally um i know someone wanted to um stay back and wanted help to um to debug their code so i'm willing to um stay behind a little and work on you with that um otherwise i think we're going over bullions next week so i'll see you guys next weekend