okay so hello my name is anu um i'll be your instructor for today i'm an instructor for girls coded and today we're gonna go over sets and dictionaries two data structures that we went over before but today we're going to go over in more depth now for agenda for today we're going to go over a quick recap what are sets and dictionaries again and then we'll go over them in more depth we'll talk about methods we could use with sets and dictionaries then um we're going to do a very cool demo in my opinion and we're going to try and solve five questions in under five minutes let's go now quick recap so both sets and diction um both lists and sets they're data types that can store a group of things or in other words they're a type of data structure and we'll go um later we'll see like um what are the main differences between them now also quick recap for dictionaries so um dictionaries hold a sequence of key value pairs we could create like an analogy like like a actual dictionary where the key would be the the word and the value would be the definition and going along with that analogy it wouldn't make sense if there were two of the same words in uh in a dictionary so yeah for dictionaries in python there are no key duplicates now what are sets now if you've taken um some advanced mathematics you would know or even just like precalc you would know there's um there's a real number set there's integers there's um complex numbers and sets in python actually represents a real mathematical set and we can perform um operations such as unions and intersections but that's a little advanced but the main idea to get out of sets is that sets are both unordered and unsequenced so we can't index into a set like we can with a list um but we can iterate through a set um just as with like a list with like a for loop um and because it's unordered and unsequenced um there are no duplicates allowed in sets and if you try to put a duplicate of the same value python would automatically get rid of one of the duplicates so if you see the syntax there um instead of uh you know the square brackets we have the curly brackets to signify a set but we can also turn a list into a set with the set function you can see with um the variable y now set methods so there's four methods we can use with sets now likes lists sets are mutable so we can in fact add values into the set unlike tuples um let's just go over the over them one by one so add what does add do now let's just start off with printing our set so example is a variable that contains um references the set is set over here we print it we get what we expected a set with four elements now what if we add a value of 100 oh get rid of indented block then yeah the important thing to notice here is that we didn't add 100 to the end of the set in fact python just randomly placed it um in um as the fourth element so um the add method just adds it to a random spot in the set and because because sets are unordered so sets don't keep track of order um now we can also remove values so yes we can remove the three over here um another thing we can do is we can pop out a random value so if we did pop over here oh taking a bit long let me get rid of this so you guys can see okay let me stop play okay so it popped out um the value one so pop gets rid of a random element in the set so that um the main differences between remove and pop is that remove we can specify what value you want to get rid of and pop just removes a random value and the last one is clear and as the name implies it clears the entire set returning an empty set so those are four methods we could use we could add to an element because we can add to a set because a set is mutable we can pop out a random element and we can also remove a specified element in addition to that we can just clear everything oh yeah as i said before we can do union and intersections we can do unions and intersections um i won't get into it now but it's just a good thing to know okay yeah as i said just to reiterate sets are not sequence they're unordered which means that the elements must be unique meaning that there are no duplicates and on the other hand list our sequence and ordered and that's why we can index into a list but we can index into a set because lists are yeah they're ordered sets are unordered and unsequenced um i guess we have an example over here okay let's fork it let's fork it here if we run this example we get what we expected a list can indeed hold duplicate values but a set as we said cannot hold duplicate values so it python automatically gets rid of one of the duplicates so there's only one um ones uh three that's a string so yeah why don't we always use list well if we wanted to have unique values and we didn't care about indexing into a data structure we could just easily use lists and python guests were the duplicate elements for us now dictionaries okay fun part dictionaries so dictionaries are also unordered like sets but we can index into a dictionary and um i guess another common thing like between all of them is that lists sets and dictionaries they're all mutable we can all change them but like as i said before sets we can't index into them but dictionaries we can index into them with um their keys well which we'll see later um yeah and this is the syntax for creating a dictionary you got the curly brackets and then we just um specify the key value pairs and then like the comma separating those key value pairs now yeah how can we index into a dictionary or how can we access items it should be an example around here okay yes accessing dictionaries okay let me fork it again okay now there's two main ways of accessing a dictionary and i'll just go over both of them um say example ah dot yeah get um let's say a print that out and then let's comment this out nope okay okay one that's expected so get is a method where we um specify um the key and then we get the value associated with that key and the value that's associated with the key a is of course one now if we wanted to get a key value pair that does not exist so you see there's no um key as a c it just returns none so now get isn't what we would call an accessor method so um the basic it's more of a like a java concept but uh an accessor method just accesses um the value within the dictionary and if it's not there then like no biggie it won't um throw any errors now this type of syntax on the other hand if we tried to say we tried to print out try to access c but with um this type of syntax what would happen now this would um thrown error and um the way i think about this is that um here we're just trying to access it it's an accessor method and if it's not there um then you know just return none because there's like nothing there but here kind of like with a list um you know list we did two three and if we did we tried to access um index four we did that then yeah that was thrown um an error as well so with this syntax the way i think about it is that we're assuming that the index a value at index four exists and if it doesn't then python will just throw an error so that's um one difference between those two ways of accessing methods but one cool way with this type of syntax is that we can automatically create key value pairs so if we did this oh and then we print example again then we would see um uh that python automatically creates a key value pair with the key c and the value three so that's one cool thing about that type of syntax and yeah those are the two main differences between them so example.getc would return none if uh the key value pair doesn't exist but this would return an error if we just try to access it but for this type of syntax we can automatically create key value pairs now yeah changing adding values so this slide just goes over what i've talked about before how we can um yeah we can create new values that correspond um to an existing key name so if we wanted to do this oh oh boy oh that's true because we have this here we did this then yeah we can change the value over here and we can also add um a new key value pair with this type of syntax if we did see over here so that just goes over what i've talked about before now we're moving values there's three ways we could do this let's go let's do another example three ways we can do this let's fork it again okay they forked it oh by the way fork just means um just make like if you know like google docs you can make a copy of like any um document and it'll then be your own so you can think about it like that um now okay removing values for sets we could pop and it would pop a random value um element within a set for dictionaries we can specify what we want to pop so okay actually let me print example here so right here that's where we popped um a so it doesn't exist anymore or the key value pair with a doesn't exist anymore because we popped it and it also returns the value for the key a which is one um for delete for delete which is kind of like pop um we can delete um the key value pair for d yeah which um after this line the um the key value pair with the key v doesn't exist anymore so that's just another way to get rid of the value and for clear of course that just um clears everything within the dictionary and returns an empty dictionary um you could memorize the syntax but the main idea with dictionaries is that um they're mutable one because we can delete and we can add to dictionaries and that um not um we can unlike like lists we have to index into a dictionary with um it's with keys those are the main ideas behind dictionaries so quite like with lists we can also iterate through dictionaries so let's go to our example gotta fork it again it's fork okay okay we got it okay so um i think it'd be easier if i did this oh boy okay yeah let's do this okay so entering through dictionaries it's better if i just take it one step at a time so what does this mean example.items um okay so this would just return a list of um the key value pairs with tuples so we can see there's a key value pair here the key a and then the value one and then python just create a tuple with um then a and one and that would be the um the first element of the list and then this uh the second element would be the second key value pair which is b and two so that's what items is so it has both um the keys and the values now let's go see another example okay now we can also just iterate um we could just return the values as well which are just um the values in the key value key value pairs and then same thing with keys we can only look at keys if we wanted to with the syntax so remember items values keys items both and values and keys as a name implies this looks like the values or just the keys um then next we're gonna go over like actually iterating over these three types now let me okay so for value okay so we went over this before like with lists as i had a list a and we had yeah for num for a number in our list a we could do anything with um that number or num so we could just print it yeah one two three four so same thing here for value value or um right here that's just a place letter we could put anything we could put for apple and it wouldn't matter except that we would have to change this but let's just go with value it's much more like readable and people that are not familiar with um what you're trying to do can just easily read the code and like just get it so for value and example.value so remember here values are just the values in the key of key value pairs so if we print this out then yeah value one two three four one two three four and i don't know if we i don't know if we went over this but this is an f string where and there's also we could also format it another way we could do um value um zero that format and then give them value which yeah kind of what we expected it to so that's just another way we could do that so yeah just prints the values as we expected so that's iterating over the values of a dictionary now we can also do key values we can iterate both over the keys and values with something called enumerate so to get both the keys and values we would have to use items because remember it's a it does it's a list of it's a list of tuples and the tuples are the key value pairs so if we did examples.items and if we did um index and then we did oh okay oh get rid of that see if it works okay so this is how we iterate over both the keys and values so right here this is the index oh okay actually print um index um index and index actually strength what am i doing string yeah so for enumerate we can unpack the index and also a value for like any iterable so um that includes lists sets or like any iterable so when i'm packing the first value would always be the index which is like um which starts at zero we can start it at any number so we start at 10 yeah 10 11 so just unpacks the index and and um and this is just another way of like doing a manual index where we would create an index variable and then within the loop we would like do index plus equals one instead of doing that we have enumerate to do that for us so then um right here we're looking at each tuple and um these are of course placeholder names and if you look at it like if you take a one for example a is of course the key and then one is the value so yeah for each of them we could print key and value and that's how we do that so demo time actually let's go over like the five under five first and then um i'll just take you guys quickly through the demo so five under five so for the five under pause it when i um i um i asked the question and i could answer it for yourself and then unpause it to see the answer so question one which line in this script will cause it to throw an error so let me i don't want to give you away the answer right here okay five four three two one if you haven't paused pause it and answer it yourself so throw an error on this line because b is an undefined variable and python would um doesn't know the value of b so that's why it would throw the error question two what's the output of this code over here so a equals a string with howdy and we're trying to slice it starting from negative one to um index three so what what is the output of this cone and give you a second deposit okay an empty string now why is this we went over slicing um i think last week and for slicing um if it isn't a valid slice then python would just uh return an empty string or an empty just an empty string or like an empty list so negative one refers to the last element i mean to the last character so y and then three zero one two three so that'll be d and since um python uh for slicing the default step value is one so we all we're always trying to go from left to right unless we indicate otherwise but since we're trying to go from right to left um python just sees that as an invalid slice and this returns an empty string uh in this case question three what's the output of this code over here okay so we have we have two lists and we're trying to add it together okay so what's the output of this code i'll give you a second to pause it and answer this question for yourself okay answer it just conjoins both of them together now yeah python operators are very flexible and can support many data types and the addition operator does support adding um lists together question four what is the output of this code over here so we have two um so we have uh over here a is a list we have a set which is signified by the curly braces and we know it's not a dictionary because there's no key value pairs and then we basically make a copy here for into c eight into c and then we have trying to do the same thing with b and then we're trying to figure out if those two lists are equal or not so what's the output of this code i'll give you a second to answer it yourself okay answer these two lists are not equal so um as we said before python would automatically get rid of duplicates within sets so this right here b actually has four elements rather than five elements like a so um so then as a result c would have would just be like a copy of a it's basically it would have like one two three four four but d would have one two three four because there's no um python does not allow duplicates in uh sets if we printed b right after um initializing it you would see that there's no one of the fours would be removed now question five last question what's the output of this code over here i'll give you guys um a second to answer this as well okay so answer is an error well if you notice um a is a set which is signified by the curly brackets and we're trying to index this as if it's a list but python throws an error because um sets are unordered so in unsequenced so we can't index into them as if they're lists and if you guys have time we have a challenge problem um so the problem is to give an unordered list of integers and print the values that occur only once in the set um this is probably the solution so try to do it i'll i'll just go through the solution so you can check later let's see yeah so this is the solution pretty sure see treat the values that occur only once in the set oh wait no never mind i think see list s3 oh wait i think this is a bit too advanced for you guys so you could skip over this or like try to solve the problem on your own whatever suits you and these are some further readings if you guys um have want to learn more in depth about some data other data structures and really in depth how um sets and dictionaries work they have something called a hash they utilize like a hash function but that's a bit advanced um we i do have a demo and i guess i'll just go over the demo quickly so i guess demo time okay demo time so we went over this yeah from like last week's demo but we'll be improving this with sets and dictionaries okay let me walk you guys through this code so set your kids um config so when we do input the syntax right over here we're asking the user to you know input some values so that's what we're doing right here we're trying to receive from some values from the user and then don't worry about script yeah strip just gets rid of the trailing white space um and because this is a wild true loop it'll never end until we break and in this case it will break only if we put in exit so then it will break and okay split let me run this again so split i did screen color equals red so split as a name imply um will split the the string will receive into a list so if we put abc equals xyz it would split it into this list right over here with this as a like a divider for this equal sign so right right here we're going to split down the middle and we're going to have two elements in the list config now if the user doesn't follow the proper format of like this equals um something else then there wouldn't be uh two elements in the array so then we'll throw an error and then after that we're gonna check config zero so that'll be the first element in the array or this right over here if this isn't config set so let's look at config set so we're checking if it's if this first value over here matches this this or this basically then once we do that we're checking to see like for the screen color we're checking to see if um the color we choose is one of the color options right here which is what we're doing right here and then after that we would append um a list another list will depend a list to a list so basically um config list would be a list with elements that are also lists so we'll append uh yeah screen color and then config one which would be our value red in this case then we would print um and if that is not the case if like if we did um black which is not a screen color it would just um throw an error and be like oh this this color isn't an option and then for in other cases we would just if it was like um screen brightness and we put like a hundred it would just um append kind of how we did here it would append it to config list and if this value happens um like if you put like screen if we put like screen darkness that's not a config in within config set so it would just return this isn't a valid uh config option and at the end would print config list which is our list of lists basically list with elements that are also lists that's a better way to put it we did color equals red and we exited it would just print okay now here's a bug within our code what if we did screen color equals red but then we changed oh you know what i want my screen color to be purple and we exited how can a screen color be both red and purple at the same time for our computer um computers aren't that flexible and they want i mean and it wouldn't make sense to have the screen color be both red and purple so that's a bug in our code so how can we fix this this is a list so a list allows for duplicates right but we know that dictionaries don't allow um duplicate key values so they don't allow um allow there to be two screen colors basically we can change this into an empty dictionary right over here and because of that we have to change a ton of other stuff so let's highlight this okay append see append is not an operate um a method that we can use with a dictionary so we have to change that so how can we add to a dictionary oh we could easily just do this screen color equals um config uh one so the second element so here we just um either create or change the value of screen color and then um make the key value pair so the value in the key value pair would just be the last element in our config list or what we get from um the user and we know it's a list because we use split which like converts it as we said into the list um see what else would we have to do we just have to do the pretty much the same thing over here but this would be just config 0 so that would be the this value over here and okay and over here config set we can also change this into a set because we have no reason to have duplicate um duplicate like um configuration configurations like there's no reason to have two screen brightnesses or like two of the same exact colors i mean we can specify like deep red or like light red but we can all we would have to do is maybe do like bright red and maybe have another one like dark red either way there won't be two of the same like values so we can just use a set i'll change this back to red okay add that oof let's see if this works oh okay so go ahead equals red but then i change my mind goes purple and then i exit would you look at that okay it works it works yes there's no um this green color is just purple and our computer will get that it's not both red and purple at the same time it works so that's how we can implement dictionaries and sets in a real life um setting and that's it for today that's all i have for you yeah i hope um you got something out of this and input try to implement um really try to implement anything you're learning into some sort of project and by doing that you'll understand the concept even more in a deeper level and if you have time try to read further into sets and dictionaries and as i said try to implement it into like some sort of project and yeah that's all i have for you today i hope you have a great day and thank you you