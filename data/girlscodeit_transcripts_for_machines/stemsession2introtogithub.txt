hey i'm sydney and i'm teaching today's intro to github lesson so to answer everyone's million dollar question github is a website it provides users with a graphical interface to easily manage their repositories which you can think of as a project and it helps users manage version control we'll go over what version control is in a little bit but for right now just know the distinction github is not version control github is a website the concept of version control is really simple and very useful you probably even use it yourself here's an example you're writing an essay for class in a google doc when you accidentally delete everything you've written without version control this would be pretty devastating but google has its own type of version control that saves you from losing all of your work you can easily go back into your files history and go back to the point you want and you can also look at other people's changes to your work and pinpoint who made changes where just in case someone tried to take your name off a part of the project you did this idea is what makes up version control the ability to go back to an earlier version of your work so you never have to worry about losing it here's where things can get a little bit tricky so github again is just the website you can host your code up there take other people's code from there and you can have a visual interface of your code and your repositories on github but when it comes to actual genuine version control people usually think of a command line tool named git or a terminal tool depending on how you want to call it so git was founded developed by linus torvalds who's the creator of linux and git's original purpose was to make it easy to collaborate and diversion control on an open source project by the name of linux so that is why git came around and that is what it is used for i know they sound similar but there's github the website and get the command line tool so let's go a bit more in depth about what git actually is i already told you it's a command line terminal type tool but what it does is it allows you through commands to create repositories you can think of a repository as a project but what it lets you do is you can add whatever files you want to keep track of into said repository once they're in there any changes you make to those files your repository will know so if for some reason something happens to the current version of your project that you're working on you can use commands with git to go back in time or revert your project to a previous state this is super helpful and you can do this using a bunch of different commands some of which we'll go over in the next segment so here are some of the basic commands that start up your git repository or project there are actually hundreds of different commands for git and it can be a little bit overwhelming at first so we're just going to go over these three so for the first one get a knit this command creates a new repository at the location you specify the location meaning where on your computer you would like that repository to focus on oftentimes you can just right click on a folder and open up your terminal and that lets your terminal know that that's where you want the repository to be so git add this is a little misleading because it's actually git add space and then a period but this command adds all the files in the folder you specified to your repository so this lets the repository know hey these are all the files i got to look at i got to keep track of these so i can have a log of them later so then git commit dash am it commits all the changes in your files to your repository with the message along with it these are usually short and sweet messages and you use them to kind of talk about what you did in the files so they can't be too long so they're usually very brief so for your first commit you might write something like first commit to the repository so very simple but important to have so when you're looking back at a log of all your history you're like okay i know what i did for each of these commits now that we've looked over the commands let's look at how git and github interact with one another so like i mentioned a couple times earlier github is used to host code and allow other users to take a look at your own repositories this is really really helpful when you're working with a team if you're with a team of people and you're all working on the same project being able to easily download and work on the newest version of said project is invaluable because otherwise you'd have to download your project onto a flash drive and hand it off to the person next to you would download it onto their computer and that would take forever so being able to just go online and pull the most recent changes onto your own computer is super helpful we use branches to do this efficiently and keep it from muddling up the main you know repository but we'll go over that in a moment once you've decided that you want to host your repository on github putting it up there is pretty easy to do this on github you need to open up a new repository manually on the site even though you already have a repository locally on your computer github will need you to create an empty one that you can upload your own local repository into this is done using several commands but we can explore those commands a bit more in a later lesson there are literally hundreds of github commands and they'd be kind of hard to cover in a 15 minute video but once you're able to upload your local which is on your computer repository to remote which is hosted on github repository it provides a very easy way for you to look back at changes easily and it allows other people to contribute to your code branches are a way to manage features while you're working on a programming project when you're working in a team this is an excellent way to make sure your code base doesn't get too muddled from everyone's code commits they allow different developers to have different sections of the project that they're working on without having to worry about conflicting with each other essentially branches provide playgrounds for everyone who's working on a project to work on your features for example if you're working on a website you might have two or more branches and one of these branches is usually called the master branch or the main branch this branch is going to store all the code going into production production code is all the code that is currently being used on your live project or anything your users can interact with so if you and your team decide to send out an update to a website then you're going to be using the code from your master branch another branch you may have in your project is the feature branch the feature brands provides developers a riskfree area to create and update new features without worrying about messing up the code in the production branch so if you were a developer and you decided you wanted to implement a new feature you would do that on the feature branch because if you did it in the test branch and whatever you wrote didn't work and you put that in production code that would be a big problem on your website some projects may have a test branch as well which is where developers can merge all the different branches working all the different features without worrying about conflicts messing up production code that is very bad production code is that is going to the user you want to leave it alone if you can but once the feature has been tested and is ready to go into production github the website makes it very easy to merge the branch with the feature into the branch with the production code after that it's as simple as deleting the branch we're working on you can also do this using git in a series of commands but github gives you a very easy user interface to work with let's talk about what open source code is when you're working on a project you might think of a feature you really want to implement into your code base but you don't know exactly how to do it or maybe you don't have the desire to reinvent the wheel from scratch so you look for other people's code to help you achieve your goal the reason why we're able to download and use other people's code in our projects is due to the concept of open source code this simply put is just making your source code available to the public this is quite a few benefits for one making your code open source allows other people to take a look at it and point out errors or mismanagements in your code base that you would have otherwise not found next for large companies like amazon or netflix making their code open source allows them to have people outside of their company work on the code essentially getting free work done of course proprietary code or code that can make the company money is not made open source but an api or an application programming interface could be open source and allow people to use however they want or maybe a userfriendly enhancement to a product could very well be made available to the public so when you're working on an open source project or a project with more than one person chances are you're going to find a bug and you want to let your team know about it on github this is pretty easy to do all you have to do is open up an issue and that'll let your team know hey i found a bug in our code let's get to work on it this is also pretty helpful when you want to create a new feature if you think of something that you think might be cool you can post it up for your teammates to see and that way everyone knows who's working on what nothing would be worse than you and your teammate working on the same issue instead of stuff that you could both be working on independently and that's time you'll never get back but communication is always critical when it comes to working with teams on a project working with the team is a totally different ballpark than working on your own when it comes to programming when you work on your own no one really cares if you have really bad poorly written code or how many branches you have if you have any at all if you're opening issues and closing them no one really cares about those procedures because you know you're the only one looking at your code when you're working with a team of people everything you do impacts everyone else so make sure to always be a team player there is no eye in team and teamwork is a dream work and you want to work like a welloiled machine not like a broken down car because it will come back to bite you in the butt so hard if you refuse to take your other teammates criticism critiques or work with them and use the the tools that github has given you to make a team environment it is super important to always be communicating always talk to your members your team members about the features you're working on or the upcoming issues or the things that you fixed because otherwise you're just going to waste a lot of time and i can tell you if you decide to go off on your own and go lone rogue and just do your own thing your teammates are going to get annoyed at you and annoyed code is not good code so make sure to always be working together so that's it for me today i hope you enjoyed the video if you have any questions please let us know but other than that uh yeah peace out guys