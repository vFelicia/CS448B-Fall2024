today we'll be talking about just like file input and output so the general gist is like how you would want to deal with files in python um i'll be going over just like what is a file how python treats files and then like any builtin um functions related to files and like how you can read a file how you can write to a file and stuff like that if you guys have like any questions or like you want me to clarify anything or like slow down or anything like that feel free to like drop in chat or um or ask in like here on your mic and ask either one is fine um first off what is a file so a file is basically any sort of um container that stores information so just like anything you can see on like your computer is stored in a file um file types include like csv txt html um powerpoints microsoft word documents things like that and another term that's related to files is called parsing which is basically reading in and interpreting the data on a file let's see when you upload like an image or something to like microsoft word um microsoft will basically parse that image file you can it's basically like a program's way of reading information from a file first off i talked about like file i o basics so like just how python will treat a file um for python it basically sees a file as a long sequence of bytes and bytes are basically like um just they're literally just numbers so like ones or zeros and they'll see a file as a long string or a long array of like just numbers and it'll basically keep track of where it is in the file using something called file pointer so how i like to imagine it is like say like you pass in a text document python will basically it's basically like python is reading your file line by line and it's like using a finger to like keep track of where it is in the file so when you open a file python will usually put the file pointer at the beginning of the file and that's like where it will either read or write to the file any um questions about that first let's talk about how you can open a file so we can read the contents of file by um using the open function so this is the general syntax of what you should pass into the open function first you have to tell python like where this file is um generally that's the file name just a heads up um it's only the file name if it's in the same if the file is in the same location as your um as where your program is but you have to first tell python where this file is and what the file is called and then that's you have to tell it what mode it is so like is it reading and or writing to a file where do you where like where should it start reading um sometimes like what kind of encoding the file has things like that and finally um the buffering so buffering is something another option you can pass into the open function generally you don't like you don't pass it past that kind of remembering unless like there's a special buffer that you want to um that your file has so um usually you just pass in the file name and and or the file location and the moon so like read write or append and then you can i'm buying open will give you back a file object that i can use to manipulate files and most importantly if you open files always remember to close them at the end so if you if you have it open in your um in your program always make sure you have a corresponding close next we can talk about like so these are just like um strings that you can pass in as the mode parameter is open um there are generally three basic problems there's read right and a pen so read is just like you read the file um right is when you're um writing to the file so when you want to like um print something into a file just be be aware that if you pass in right it will overwrite anything in the file so basically python will clear out that entire file and then start writing from the very top of the file um finally you have a pen which is basically instead of um putting the file pointer at the end or at the start of the file and open python will actually put it at the end of the file and then you can um write after anything after that so a pen will basically add everything to the end of a file you can also add a plus option after any of these um any of these options which will do like we'll add the extra option onto it so like if you do r plus it'll be read and write um w plus will be right in v and then a plus will be append in b so what's the difference between r plus and w plus done so r plus is basically python will read first and then write so it's kind of like a pen and then w plus will be right first and then v so what that means is um for w plus python will actually clear out the entire file first and then you can start writing or reading to it so just make sure you know the difference between r plus and w plus in case like you don't want to overwrite the file at all and then finally like how do you modify files so you have a few options for like reading and writing files so for reading reading files you can use the read function which will read in the number of bytes from the file and then the default is just reading the entire file read line is similar to b so you can read b bytes but from like b bytes from every any single line in the file and then the default is to read the entire line and then finally you can do read minds with an s which will just um return the list of lines that you read um b bytes from and then again default is reading the entire um the entire line and that is reading the entire file finally um if you ever want to write to a file you can just do file object dot right which will basically just print it into the file and then you can also use a function called seek which will take in a position and a relative location so what seek does is it will change the position of the file pointer so for example if i read entire files then my file pointer will end up will end up being at the end of the file but sometimes like i want to read the file and then like read it again or read it from line three or something like that so what i can do if i want to like rewind the file pointer is i can actually just use seek and then um choose which location to start my file pointer at so pause would be like the position of the file pointer and then lock is like where the um reference point of that position so usually like python will reference the um the position of the file pointer based off of the beginning of the file so like um beginning of file is like the zeroth line and then zero one two three from the beginning of five but sometimes like i want to read the second to last or i want to read the um second line before my current position something like that then you can pass in these different options one or two which will which will base the um position off of like the current location or the end of the file so i know i like i just threw a lot of words at you so first let's i think it would be better explained if i show you a really basic um example of how do you read or write from a file so so there's right have any other options um do you mean like the the right mode or like the um the right function because the right mode um is just one mode for the right function there aren't really any other options right is basically you kind of treat it like you're printing into a file so it's kind of like the print function in that way except you're not printing into like into your console or into the command the um command prompt you're um printing into a file so generally like you'll do something like fileobject.right i know write whatever string you passed it into that file um kind of you could it would usually be like say you're opening a file like f equals spoken file file.txt comma w if you like you'll first call like you'll first get a file object like that and then you can call something like f dot right and then that's the general um the general way you know um that's the general way you'll you'll call right and then make sure like at the end you'll be like f close and i can like show you more um once we go through this example so for this demo um first off we have this example text file which is like hello this is this is an example of text file so these are just like five lines of strings and then you know the general um the general flow of is like you'll open the file so like um file equals open example.pfc and then i'll also pass an option so this option will let me read and write so but for now like the code would just be reading so first i can use something like file.me and that'll read the entire file and then i can print that and as you can see it's printed all these lines however like i can also do like for line and file.readlines that'll first pass back like a list of all the lines in the file and i can print it line by line but like you notice that this oh like theoretically this text file should print twice right because i'm reading it once here and then i'm reading it twice every year so why do you think like this only printed once then so the general thing is like whenever i read something i'm like i'm moving my file pointer so i can read it like letter by letter or line by line so when i called read over here i basically read the entire test so what python did was it basically went through this entire text like pretend the cursor is the file pointer and it basically read line by line like this from like all the way to the end so right now my file pointer is actually once like i've done this read function my file pointer is pointing to the end of the file in the example.text so once it hits like this line where line and file.beadlines well the file pointer is at the end of file so there are no more lines to read according to python like that's what python thinks so that's why this um print line never is never um executed because basically by line six python is like well i'm at the end of the wow there's no more lines to be so i can just like skip all of this code so then like if i want to read if i want this to actually like work and print the text twice what i can do is something like file that speaks zero so what this will do is it'll it'll put the file pointer back to the zeroth point which is basically the um step back to the beginning of the text file and once i put that in you'll see that um file that this for the actually prints twice so another interesting thing is like well why is like why is this like single space and why is this double space so can i get a list of all the words in text using this yep so um you can do it two ways so you can read the um the file line by line and then use um because like you can do something like for a line and file that feed lines and then for each line like since it returns the entire line you can do something like string dot strip which will get rid of like the starting and ending um white space and then string that split which will split the string but by the spaces so give you back each word of each line and then you can add like all of these words into a giant list of all the words in the past and i do stuff like that or you can um i think there is a way for you to just get all the words i didn't follow that read um but to be honest like i personally don't use file.read that much and i think most people will use like four line and file that refines and then add all the words in line into like a giant list of all the words in the file so you can totally get like a list of all the words in text using these file functions so back to before like you notice that this print statement print file got v will return the text like in single space but for a line like this for loop will return a double space why is that basically the reason is like in this file you can't see it like you can't see it when in this sort of text editor but at the end of each line like whenever you press enter you're actually printing out a new line character which will basically tell like whatever program um you're using to view the text file to like hey this is technically the next line of the um of the file and then you have to print you have to like print whatever words on the next line so whenever you press enter that's actually like printing out another character so what happens is for um for read lines because like there's this new line character at the end of each line um how that read lines will actually include that new line character and then what print does is it will add a new line character at the end of everything you print so this is basically um basically equivalent to like you pressing two enters whenever you print lines so that's why this is double space wow wow that read is single space and what you can do to solve this is just like applying that strip and then that'll get rid of like all the extra white space in front of and behind of the um like at the ends of the line and that the white space includes like newline characters just kidding so it should strip the new line characters like this or not but like sorry there's there's like a function to like get rid of spending on characters we're away there we go and then you can use just fine you can find that script minion characters and just make sure like i did i did a sequence but just make sure you reassign it back to your lines so that when you print it it'll get rid of the newline characters so you can like this is how you can basically read mine um like read the file line by line and then you can even do like string manipulation for each of the ones so next we can talk about like how do you how can you um can you print those files so like let's first put our um file player back to begin so like i wrote in chat like you can just use file.right and that's basically like my your print statement and you um into whatever file you're on writing to so i can do something like file.right and as you can see it printed out hat over here and it basically overlooked like the first three um letters of the file so that's basically like how you can write to a file just be aware that like you have if you want to like write multiple lines of files always make sure you add a new line character at the end so um this is this is basically like you pressing enter on the keyboard and you run this as you can see it prints cap on it um is isn't this like super dangerous so like yes and though so you can certainly like you can definitely mess things up like you can overwrite things like accident um dangerous as in like can you mess up like your like any important files in your computer system um you shouldn't be able to because your computer system naturally protects against like against users acne overwriting um files that they shouldn't um write to you so like if it's any super important file like um let's say like whatever um code that actually reads your operating system or something like that like definitely you can't write to that you like it's that would be like a read only file so you wouldn't be able to write unless you have a super special permission um but you can definitely overwrite things by accident so just be careful about that is there a way to copy and then edit um you can definitely copy what you can do is like you can you gotta definitely like use um i would recommend checking out something like the python's os module which will let you like do a lot of um well which will basically let you do things like um new files or like copy files in your computer system and then after that you can like upload it back again um get your file from like the computer system and like get the file name then like change that finding to something like temp dot txt and then right to that and then after you write you that successfully you can then like change that name again to like actual file name dot like dot txt and then that might be a might be a little safer um but that would be that that would be a little more complicated um for it for like what we're talking about right now um so something like um usually when you like when you have a right option so like let me change this w so what right will actually do is like if you don't already have the file in your system um for example like i want to write you e dot txt well if it's not already in my system then um right will actually create it or like the right mode will create that file so let me comment out these first so if i if i'm in right mode and i open my file in right mode and it like this file doesn't already exist in my system then um python will actually create that file once i close this and then that way you can basically guarantee that you're never writing into like into a file that already exists and then you're never actually overwriting it yep so but camilla's camilla was like really close like always be careful about like what you're over writing and like where you're writing you so i could like create examples so like let's say i have a folder called assets and then in my phone like i want to write something into the assets folder always make sure you specify the location so like you tell python where i want you to you and then it will write it into that folder so basically like let me scroll back up to where we put open there you go so when we're referring to like file name in this open function it's a little bit misleading because it's not really the file name it's more of the file location so you have to tell python where exactly it is because relative to um your current location so like wherever your program is located so if i have like my program over here which is located and say like the main folder i have if i ever want to access a file that's in a different folder or in a different like in a different part of my computer i have to tell python where that location is relative to where my my python script is and then yeah just like be aware of that too any other questions about like anything we've talked about with files so far so next we're gonna just be talking about um csv files um this is sort of optional where um so first off like what are csv files csv files are just commerce separate like csv just stands for comma separated values these are basically files that only have letters and numbers so no like weird ascii things no like stars dots or slashes stuff like that just letters and numbers and these are like all of these values are separated by commas um it's a very common way to store a lot of data so let's say i have like i'm studying the solar system or something and i have um data of like the the temperature in in california from the past 10 years and that's like a that's probably like a data set of like a million data points so um what i can do is i instead of like storing it in a giant word document or like an uh excel file or something like that i can store it as a csv file so that it's only numbers and all these numbers are just separated by commas and this way like my file is small because um csv file doesn't have to account for like a lot of extra fluff that these more complicated files like word documents or xmls have to like store two and it's a lot simpler to be into um into a language like python and this is especially important for python because python is a very important language for like data processing so this is commonly used for like things like computer vision for like statistics um for any type of research where you're dealing with large data and um you can definitely parse the csv file using all of these um all of these file file dot reads um all of the functions that we talked about earlier but you can also um you can there's also an easier way to read a csv file and that's fine using the csv library that's built into private for this one like it's definitely a lot the syntax is definitely not as complicated as um first off it's not as complicated as python and um basically you can just like first open the file and then um make sure you import like the csv library first um the general way is like you open the file and after that you can just call like csv dot reader and then pass in the file object and then pass in a cylinder a delimiter is basically like what is separating the um the each data value and in this case it's just commas and then it'll return a csv reader object that'll basically let you beat the csv file line by line and then call by column so let's just check out a quick example of this yeah the limiter um sorry sorry cylinder can be anything so the thermometer can be anything like it can be spaces it can be cooling stuff like that but um generally like for csv it's always a comma and i think that that like they they've let you set the delimiter to like anything you want because sometimes people will like store csv files like spaces or like commas and spaces um yeah it can be it can be more than one character it can be like aba it can be like a string like note or something like that um as long as it's just one string so what i mean by that is like it can't be like it can't be like a comma or a period it has to like be consistently separated by one string so like it has to be consistently separated by a comma or consistently separated by a space but um yeah i think it's it's to compensate for the fact that like some people will store their data in different ways or like they'll store their csv files except with their data separated by different things but like technically it should always be a comma all right so back to the demo so for this demo we have a dot csv file called test.csv and as you can see it stores like it stores a bunch of strings it stores letters it also stores numbers and most importantly you must first call import. import csv so this will basically tell python like hey i need the csv library make sure you have all the um all the functions that you define in that library ready so that i can use it so the first thing we do is we have to open the file so i opened test.csv in the read mode because right now we'll just be reading um next i have to create like a csv reader object so i have to call csv which is my model module here csv dot reader and then i'll pass it in my file and then i'll pass in the limiter equals a comma and then it'll return a reader object that that i just called data so for a csv um for how a csv work or csb reader object works is that it will basically give you the like everything in that file um by row and by column so it's basically like a to like a nestedness so like a think of it like a matrix um so i'll always have you say like four wrote in data and in this case our data only has one row and then four data point in row so four row and data will just return me like this line of um of the csv and then for um for data point and row we'll return the each of each point in that note oh by the way make sure like you make sure you fork before you change code so that like we won't have issues with like um editing each other's code so just make sure you force before you um play around but um next i just at first i just to put in each data point but um we can also print each from each row as a string so you can see how like over here it shows that each each row is basically each row in this yes me and there you go um let me comment this out first so that we can see each data point and as you can see like it can print out each data point of the csv file so this is just a way um that if you have a csv file that you can like relatively pretty easily like just read each data point in that file without having to like because like if you use all of these like files like general file methods you'll run into like some it'll be like a lot of code that extra code that you'll have to write just to like read a bunch of data points from a very simple file but using the csv module will actually let you um will actually let you save someone's opponent and it'll be a little more intuitive especially like when you're working in like a rowbyrow columnbycolumn basis any questions about that all right um you can also definitely like the csv module has uh um a csv dot writer thing that or object that will let you write your own csv files but it's very complicated so um you can definitely like check that out on your own free time but it takes a little bit more understanding like what exactly like is a csv file and sort of like the specifics of um of that sort that like the um data science sort of side of python so what i would recommend you like if you're interested definitely check that out on in the official documents all right so finally i'm 505. so question one is which of the following are incorrect file handling modes um r a plus c w t plus or w minus and just a hint there are more like there are more than one correct answers and i'll give you a couple of minutes to um to think about it and you can drop your answers in chat yep c is one of the incorrect ones yep so e c f and d close but not quite b a plus is a valid is a valid about handling mode um i would scroll up to the i would scroll up to the this slide but it will show you all the answers is correct so fs1 sorry f is not a valid value so you can't have minuses because um python would be like i don't know what it what a negative um mode is but you can you can have pluses because the plus represents sort of like if i'm in a right mode then the plus would be like oh i can also read which is a little confusing but unfortunately that's how they designed it but um you guys are very close so it's e c and f so e like there's no um there's no t mode but the so yeah so there's no t mode um c there's no again there's no c mode and then option f you can't have a minus so the w is correct but the minus isn't and um if you guys are familiar with things like encoding you can also have the b mode which is a little confusing but it's basically like um usually i want to say um i want to say most files are encoded in like utf or something so so if you're familiar with like how files are encoded there's like a bunch of ways to encode files it's different between like linux and windows but um generally like most files are included one way but there are some files that are encoded in binary and you can have something like rb which is read a binary file or wp which is right a binary file and like 80 which is append to a binary file so you can definitely have that and then like you can also tack on the plus at the end and that's just a fun fact but we didn't include the binary because like in the slides just because it's it it will be a little confusing if you don't understand like the different sort of ways to encode a file all right so question two what's the output of this code so this doesn't really um related to this is more related to the um the lesson before halloween so we have a um we have code that's we have a equals 100 and then we define a function foo and where we define a equals 10 and then after that when i print a what will i get back um you will get like the value of a so like what's the value of a correct it'll be a hundred so why is that we have so over here we have the global variable a not exactly yeah so or you're on the right track but technically technically it's jack i can i can explain it first so like you have over here you're defining a global variable egg however inside of food you're actually defining a local variable called a so these two a's are in different scopes so they're technically different variables remember that if i want to refer to a global variable inside of a different scope a nonglobal scope i have to use a global keyword so if i define some i could have redefined you as like um as something like global a pretend that third tabs in front of this and then a equals ten then that would and then i called you outside so if i did something like print boo that's that way i've actually redefined as 10 but because like so camilo is partially correct that like that first off i didn't call food but even if i did call do um like this definition of food and i printed afn it would still print 100 because um this a inside of the two is actually a local variable so once i exit through this a equals 10 inside of you will actually be destroyed and then um python will actually refer back to this global variable a so does a outside of the function have a different reference than the a inside the function yes technically so like let me see if there's a all right let me it might be easier if i draw it out see we have paper so so first off like once i hit that can everyone see my little notepad so when i hit like equals 100 i have a global function or a global variable that'll basically assign a 100. oh wait jessica i don't think you could see yours i think it's because it's a virtual background though let me see okay let me let me try this annotate thing then so like you guys can see me drawing on the screen right yeah sweet so over here like what python would do it'll have basically like a little list tracking like like the variable names and mapping down to like the variable values so over here this little list will have like a equals 100. sorry sorry about the messy handwriting but let's pretend that says 100. then once it enters inside of the scope it'll actually create like a little we'll call it like an inside list of like a local scope so like this like where i'm like drawing this x this big list will be like all the global references so like this a goes a hundred but inside of this little box that you that's actually where um python will be putting this a and the time so inside this little box it'll be assigning the local variable a to the value pen however once it exits that method once it exits through what happens is that this local like this local list will be destroyed so then once i'm back at um print a over here like at the very end so once i'm back at this print a over here it'll actually be referring back to the original list because this little globe like this tiny local um local list of variable names and values will be destroyed so this 8 a 10 will be destroyed at the very end does that make sense so like you're right that um technically the a outside function will have a different reference from the a inside the function um in very basic terms it's just that they're they're in different like they're in different reference lists and the a that the reference list that this a was put in inside of um the foo method would have been destroyed once it exits that scope i want to say yes i'm honestly not too sure because python does a lot of a lot of like memory shenanigans so i can't say for sure that like that that's exactly how python works but in i like in general like on a very basic level yeah those are two different references um i can't even say like they're actually references because like python i believe like like the integers count as python primitives so like they're actually just stored like that but um they're not like usually when you like refer to your references in in um in programming you're referring to like um a is pointing to like a different address or like a certain address to like a different object but um technically yeah they're in two different places in memory because they're storing two different values so i i would give that a tentative yes but because python yeah sorry sorry i can't give you like a very definitive answer but it's just like because python does a lot of little memory shenanigans like and hides it away from you it's it's hard to say like yes this is what python does but tentative yes so most likely all right so next question what is the output of this code then so i have a um i have a function called add and it has two variables x and y the default um the default value for y is y equals 100 and it just returns x plus y when i call add 10 what will it return so what would be the output of this 110 um you're on like i can see like you've got heard of it right but um camille has a good point 100 is not a number so what happened if i caught add 10 in this case then can i add like a string to a number x plus y equals x 100 um what's x then are you referring to like are you saying that it will return 10 100 so like one zero one zero zero yep so it will return an error more specifically you'll return a tight error and that's because unfortunately python doesn't like do any conversion of strings to integers for you so you can't so yep exactly you can't um you can't add strings to integers the um the solution would just be like you have to um cast either x to a string or like y to an integer either one would be fine depending on what you want to do with ad or instead of like calling ad 10 i can actually just call add dog or something like that i just have to pass me a string all right question four so what are the advantages of using a csv file so we talked about the forum csv files are only taken numbers or letters and they'll always be separated by commas so why would i ever want to use a csv file then if i have like if i have infinitely more complicated files like why use a csv file over a word document yep it would use less space so like when you when you um save something to like a word document or like a um excel file you'll basically be not just saving saving not just like the is class done um it's seven so like if you have if you once you leave like feel free to um we have one more question left and i can take answers or questions after that but like yeah sorry about running over but if you want you leave feel free to so you're correct that it uses bus space so first off the csv file will like will be consistent yep it'll be easier to automate because it's always you'll have consistent characters you won't have to deal with like weird um weird ascii characters like an exclamation point or like an asterisk or something like that you don't have to take like those into account um it'll also take up a lot less memory space a csv file is doesn't save like your configurations or like any other fancy fluff it'll just save the numbers and the letters and the text and that way like because of those two you can store and process large amounts of data very efficiently using a csv file all right and then last question so what are some applications of file input output then what's the purpose of like learning file items or i guess you put it better like what's um what's one way you can apply file file input output or you can use like file processing in like in a real life application so i think of where some real epic real life examples of of file in like your and like your daytoday life so like um i would i would give up i would give absolutely like something like word or something like that but how do how do you applications use highlight custom automatic files what do you mean by that like they you mean like make you can have a list or a bunch of lists with different data names age classes something like that then you could call this search for any specific item and make a file for example all my classes or other students that are over 20 years or something like that yep that's a that's it like that's a good way to apply file like you can basically store large amounts of data and then into like a bunch of files and then you can search through those data um capture sensors data yep so a very um a very important part of file io is that you can store information so um if you don't use files what happens is like your program runs um you can like stir a lot of information in your program like get stored in global variables but once that program ends all of those variables disappear they all get cleared out in memory however if you write all those into a file you can have persistent data so your data will persist after that program dies um another thing is like communication between different programs so um you would it would that would be like one like program a will write a bunch of information into a file and then program b can pick up that file and like use that information for like whatever it would do um a very common application of files like file input output is actually like customization so like you know how in um in yeah it's pretty amazing but you know how like in um say like word or um or even like when you're setting up your operating system you can like choose different preferences like i want my night mode to turn on at like 6 p.m or i want my um background to be blue or i want my um i want word to like every time i press like ctrl d i want word to do something those are actually all stored in the file and each time like you open the upward it'll read that um customization file that configuration file and it will be like oh so this is like what the user wants and then it'll be able to like apply that to the program um so those are like that's a very common thing for um that you want to like do file io for any questions about like um file io and these are different um further readings that i would i would highly recommend you check out the um python csv official documentation and like these um these first two links are just like more more um more explanations about like file input output and i'll actually upload um the powerpoint in case you guys want to um check out the demo links or like check out the other slides yep so that's the end of the lesson thank you so much for coming to today's lesson and if you have any questions i'm willing to stay behind and and answer it um otherwise you're free to go