this is the um week 10 of the java lessons and today we'll just be going over inheritance um if you have any questions about like the slides or anything else feel free to just jump in and ask or put your question in chat and yep let's get to it so for today we're just going to be going over a brief introduction and review about classes um i'll also be going over like class diagrams how to read them um and then finally we're going to be talking about subclasses or like inheritance and how to make subclasses so again um we had for the past few weeks we've been talking a little bit about classes so just remember that like classes are kind of blueprints to objects they can have like they can have um states and properties so like for example a dog class can hold information like the color or the name of the dog they can also have behaviors or methods so a dog can bark or it can run also i remember last lesson um we were talking about um i talked about making a general list of terminology that that can be like pretty confusing or like terms that are the same and the ones that are different so here's that link um this is basically a general list of different kinds of terms that you'll often see like people use in like programming um some are java specific some aren't java specific so this is just like grouping all these terms together and then giving you basic definitions and examples of that so if you're ever confused about like what i'm talking about um feel free to ask in chat or like interrupt me or you can also try like refer to this as a little bit of a dictionary and also if like you're if you're confused about other terms that aren't on this list um just give me a heads up and i'll i'll like add to this document all right so we talked about classes for the past two weeks and now we're just gonna start going into more conceptual um things so the first one is like java is an objectoriented programming language so and as an objectoriented language it has four major principles um these four are encapsulation abstraction inheritance and polymorphism um you don't have to worry about these three so like encapsulation abstraction polymorphism don't worry about them um if you're curious about what they are you can always like look them up in your own free time um the one we're going to be focusing on today is inheritance so inheritance is sort of it's it's just like inheritance in the real world it's a class could inherit like the properties and behaviors of a parent class and usually when we're talking about um inheritance or like a real example is like you can inherit like um looks and behaviors from your parent or like um yeah or stuff like that so basically that's what inheritance also is in um in objectoriented programming so a parent class or a child class can inherit a behavior or a state from its parent class and when we're talking about like making subclasses we think of it as having an is a relationship so let's say we have um a class called animal and it has a subclass called fish so we think about it as fish is an animal so it gets all the behaviors and the states or and the properties of the animal parent class this is a little different from when we're talking about things like um like class variables so a animal can have a um age or a gender but that's different from having a subclass so like a fish is an animal and an animal can have an age so basically that's how um subclasses are different from si let's say like just having um a like a class variable or a field um yeah so basically for class diagrams um obviously this is an actual like java code but these are basically each box is a visual representation of like a class and what this class has so yeah like donna was saying um the top portion of this box these are the attributes or the fields of the class and then this bottom half is the um the methods this class can have so basically like the box itself is the class the top part is the information you can hold and the bottom part is what it can do so what methods does it have and now you'll notice that like we have these three other classes at the bottom and they all have arrows pointing to animal so what these arrows mean is that these um classes at the bottom are inheriting from animal so basically um fish can have its own like its own properties and its own methods but also inherits from animals so inherit these behaviors and these in for this information from animal so and the reason the arrow is pointed up is because inheritance is sort of a oneway street so fish can access like all the information and methods from animal but animal can't access the information yeah so don't worry too much about the pluses and minus um i think it's like it's a little nuanced like syntax stuff but right now we're just focusing on like in general what class diagrams are and more importantly like what these arrows mean so the reason like um i'm showing you guys these class diagrams is that like um for when you're like doing programming sometimes like you're like you're focused so much on syntax that um that you miss like the conceptual um the conceptual ideas so it's important to separate like like the syntax so like how to do something in a certain language from like the general concept so especially when you're like writing inheritance and eventually like you'll write programs that do more than just like inherit from like having a class in here sort of another class um it's important to keep like the concept of classes separate from like the actual code itself that way like you'll think more about the class design and not about like oh like how like or i guess like in another way it's like that you're focusing on the big picture and not like being stuck on tiny details all right so now that we've talked about just like inheritance on a conceptual level now we'll get to um actually like talking about how to implement inheritance in java so first off um in order to implement a subclass you'll basically use extends keyword so in like when you declare a class instead of having like just um class x it'll be having class um child extends parent class and then like the class step edition at the bottom um again like subclasses inherit methods and fields from their parent class and then in order to refer to the parent class you'll use the super keyword and inside the constructor you should always use like super parentheses in the constructor um what this does is it basically cause the parent class constructor first so that initializes all of like the parent methods and fields and then in java you can only inherit one class so this is more java specific but like for java you can only have one parent class so you can't inherit um from a bunch of different parents so based when we look at this um or i guess like we can also look at this diagram so like this is just another class example of a class diagram this one's way more simple like way simpler than the one we saw earlier um you can on your own like free time i would recommend you sort of try and practice um implementing this diagram in java so um next ignore the demo easy link so i'm just gonna actually just like like give you guys some live code of be like creating a custom class and showing you guys like how inheritance works so first um let's actually let's um let's not do this okay i'm just gonna go back and then um i'm gonna actually implement let's see i'm gonna implement the car class and then we'll implement a truck class that'll inherit from the car class so i'm just going to create a new file to make everything more more neat so first i'm just going to have a quick class card and inside this car class if i go back into into the class diagram um basically it has three um three fields so first one is color horsepower and and number of seats so i'm just gonna instantiate three let's say or they have to be public fields for me to show you how inheritance works um three public uh attributes so color horsepower and num seats so public stream color public eight and then let's actually i um let's say one class method so i want to have a method um drive just to show you guys like how inheritance works with methods too so first i'm gonna create the car constructor and again like when you create an instructor or a constructor you wanna pass in all the values to instantiate or yeah to instantiate these three um class fields so i want to pass in a string let's say c in h and then in so this dot color equals c this dot first power equals h and then this dot num receipt and then for this method drive public uh let's say void drive so this is a public instance method and that returns nothing called drive and then for drive let's just print out that or system.out.printline um driving let's just say it prints out driving so now i've insert or created a class sweet so i basically just um declared these three variables made a constructor and then made a quick public method so next let's get to a sub class so the subclass will be truck.java and for this subclass i wanted to inherit all the um fields from car and then add an extra class or add an extra field called trailer so for class truck in order to um declare a class as a subclass of another class i'm going to have to use the extends keyword so this will extend the um the from the car class so in other words it would hear all the values from the card class so when i'm in my field like or when i'm in the class basically now truck has all that has access to all of these three um fields and also this public method and then now i want to add on another um class field so truck or trailer and let's make it a public let's say it's a integer trailer and then um i'm going to create the constructor so inside a constructor for a subclass you should always call super first and notice how this kind of just looks like another constructor and this is basically what it is it's because it calls a constructor for the parent class so when i'm on when i'm calling the constructor for a truck class the first thing i'll do is java will do is they'll see the super line it'll actually call this car constructor so it can basically create like all of or um it can basically instantiate all of the values for the car parent class so because of that um we should also pass in like all the parameters that are required in the car constructor so um we'll have to pass in a string and two integers so that we can basically instantiate all the values in the or actually no i think i'm i'm doing this drawing sorry so you'll just have to call this super to create instance and you can actually just like now that you've um created instance of super you can basically um access these three values so this that color equals let's say all trucks are red for now and then this.horsepower i'm actually not too familiar with cars so let's just say 18. and then this thought numb seeds so basically after you create you sort of create instance using like this super line um you can actually access all the three values in car just by using this dot whatever and then finally um i actually need to create a parameter over here you declare the value of um trailer so this dot trailer equals all right and then so in this main method we can have um let's instantiate a car first car c equals new car um blue or i4 so this will create a car with the color blue um four horsepower and then four seats so we can do like a system oh that's good my and then now we can also create a truck key and then do something like system.out.printline t.n seats and let's see if this runs okay all right my bad so super actually does call the constructor yeah so sorry about that guys so basically um this super is just gonna call the constructor of the super class so the parent class and then as you can see like over here um truck can basically inherit the fields of the car class and then it can also access like whatever information the car has let me actually run this updated so in this main method i've created i first created like a car um object that has um the color blue four horsepower and um four seats and i just printed out the number of seats for the car let me actually add like car number of seats or c so over here i just print out the number of seats for um the car c and then over here i've and i think or i've instantiated a truck object that takes in four which is the number of trailers and then remember that inside of truck we've already passed in parameters for the um parent class so all trucks will be red have 18 horsepower and eight seats and the only thing that will be different between them is the number of trailers so i've just instantiated a new truck um that's four trailers and then over here i'm just gonna i'm gonna copy this over first and then i'm just gonna print out the number of seats 40. and what this will do is it should print out um 18 or sorry 8 because eight is the number of seats for all um trucks and then finally what i do is i'll actually access um a method in t's parent class so inside the um inside the cart class so for car.java i've created a public void method called drive and all that prints out is driving and i'm just showing in this main method that even inside like even for a subclass i can access the parent classes public methods so when you um run it it'll just print out number of seats for c is four number of seats for t is eight and then driving and then someone asked in chat why can't we pass these three values as arguments in the super method um yeah i sorry i made a mistake in that part so for the super method this is the constructor for the parent class so we'll have to pass in like three valleys yeah sorry about that um anything else so just to um show you guys some more um when i'm creating like or i guess like i could explain what like why droplet cause makes sense so um basically for for like especially for java um when you're creating like a subclass sort of think about it as you're building on top of the parent class so parent class is kind of like this base class and then you're sort of adding new um new fields and methods to it so that's why it's called like truck extends car because truck is extending the amount of information and behaviors that the car can do so that's also why like for your parent classes your parent classes can't access the um the the fields and methods of their child class because their child class is building on top of the parent class the parent class doesn't just doesn't have the information that the um the child class has it's um yeah i went like you can like you can read up more about like jvm and like different java compilers but um but basically what happens is like the first thing like when the first thing you have to do for a java program is to actually compile it um replit actually sort of hides that away from you because when you click run um it will actually compile first and then run but um when you're working on java like working a java program on your own um if you're not using like an ide like eclipse or vs code you actually have to compile the java program yourself and the compiler will just like it'll read all the syntax um first it'll do like syntax checking then it'll like it'll look at your dependencies so it'll see like oh i have like i have something called car and i have something called truck and these are classes so do i have like do i have this class defined inside of like these other files in these other java files and then finally it'll like it'll like it'll do other optimization stuff but um after that like you'll have to actually execute the run command and then that's when like um it'll just execute the main function like line by line so when it sees the the command on line 14 t dot drive it goes uh it it refers to truck.java or it refers to which one truck or car.java what does it refer to to print out the word driving period so basically um it'll refer to first it'll refer to truck.java i know see like oh truck is uh is a subclass of car so truck extends car so then it'll refer to car.car.java or the card class and then see that has a definition for drive so that's basically like how in a different way like i think like maybe it's sort of the syntax that might be confusing for you um so let's actually ignore like ignore the java syntax um and just draw like a little class diagram of like or i guess not even a class diagram but sort of um a visual representation a different way of like representing subclasses and classes so let's say i have this class um this isn't a class diagram by the way so this is just like more like a drawing of a class so let's say i have this class called car and inside of car has like a bunch of different information so like um let's say for now this card just has um number of seats and again like this will this is like this isn't any sort of java code so this is um just gonna be a different way of seeing classes and subclasses and let's say it also has like an action called drive so this is basically my visual representation of what a car is and next we have we basically want the subclass car out so we want to make a subclass called truck so what the subclass does is it actually just builds on top of or let's i'm just gonna say it just builds off of car so this is let's make this green and then we'll call this truck so for truck we add on a little bit more information so we want to add on information about the number of trailers and this is an integer so visually like um this entire thing like both the square and the triangle is what the truck is so it's a car but it's a car with a little bit of extra information about it so that's why um over here for line 14 we can access this drive method because like in the end a car or a truck is a car so can also have this method called drive okay i think i think i understand what's confusing you're i think you're having some confusion about like scoping so um let me actually let's change this um this very warning because i think like you're you're being confused about um we have like inside of the truck class we have a parameter called t but we also have like another like variable over here called t and it's a little confusing yeah um the so i can like i i can just like go over a little bit about like scoping in java so basically um for java like you can have multiple variables in your program that have the same name but like as long as they're not in the same scope as long as they don't exist at the same time um there's not going to be a problem so basically over here we have like think of like these parameter names or these parameter variable names as like they're more like temporary variables so these these parameter like variables exist in a local scope and what i mean by that is they only exist inside of this method so outside this method t technically does not exist and you cannot access it so that's why over here i can have another variable that's completely separate from the t and truck.java and still call it t okay so if you run this the way it is now will it still work properly yep so yeah that's why like over here um i can have this variable be called t and it can be a totally like separate thing from the t inside of here because over here um the variable name t only exists inside of this method outside of it like java doesn't java won't see it basically okay thank you yeah no problem um any other questions sweet so let's see we have like nine minutes left so um if you guys have like i guess i can go over the quiz questions really quickly um but if you guys have any other questions like i'm also free to answer them right now sweet so let's go over the quest question quiz questions then so question number one um in java can a subclass inherit more from more than one class yeah so the answer is false um in other languages you can inherit from multiple classes but in java it's strictly only one class all right question two a subclass has a blank relationship with their parent class so is it um a is a type of um b is a c implements and then d all of the above so b is the correct answer a subclass is a parent class so again like a subclass basically is the base class plus a little bit of more information and behaviors um for c like there that is implements is also like a java keyword for something called um something called interfaces and that deals more with polymorphism if you guys are interested in more like complex co like java coding you can also check out interfaces all right so what keyword would you use to refer to a subclasses parent class is it a parent b super c root and d supra yup so it the super class like the way you access a super cla or a parent class is through the um the super keyword that's why i'm also like calling it super class like and mixing them up together all right so number four is a class in a class diagram what marks inheritance so like what represents inheritance all right so we have two answers for b that's correct i feel like maybe making this when we made this crazy shiv we should have mixed all these answers together i feel like all the answers are b but yeah so the arrow must point away from the parent class b or towards the parent class and away from the child because that sort of shows sort the oneway street of inheritance all right so number five which of the following is correct if otter is a subclass of animal yep so in order to show that like when you're declaring a class um for a subclass you have to have class child class extends parent class and then finally in this diagram fish is a subclass of animal so which is not a field animal can act yep so again like a parent class can't access the fields of a child class so it's only that a subclass can access the field of a parent class all right so that's basically it for um you