hi everyone my name is rachel and i am an instructor for girls coded today i will be going over the python data types lesson and if at any point throughout this presentation if you have any questions at all please feel free to ask either me or any of the other instructors and we will try to get back to you as soon as we can and if you guys missed um if you guys missed last week's lesson we just went over an introduction to python and you can find that on our website at girlscoded.org so we go under past events you can find our python class one introdu python video and this will just help you guys help get you guys up to speed for today's lesson and please log on to replits so that you guys can code along with me throughout the lesson so for today's agenda we will be giving a basic overview on data types and variables and we will also be going over operators casting and finally we will have a really fun hunger games workshop slash demonstration so what are data types data types represent values that's how operations can be performed on a particular piece of data so some examples are numeric data types which are like ins floats complex numbers uh we also have strings lists tuples sets and dictionaries and data types have their own builtin methods slash functions so you can do different actions with them and you can use the type function to actually get the data type that you were using and i will show that in one of our examples so what is a variable a variable is a way to store or capture information all right so just to give clarification this first line is basically python script so you guys don't really need to know how to use this for right now but it is a good habit to get into because if you do have multiple files in your python program this is definitely useful so that you can specify that to run this uh to run this block of code only if the name of your program is main which it is you can see here main.py and so it will run this code but you guys do not have to include this python script so um yeah the program will work the program will work exactly the same whether you put the this line of code in or not okay so back to variables a equals 2 this assigns the value 2 to the variable a and then if we were to print that out you can see that it prints out two and you use the type function here to figure out what data type 2 is and then it prints out class int because this is an integer and then for the variable b we really quickly went over the input function in last week's lesson but basically what this does is whatever the user inputs here the this value here will be stored inside the variable b and when you print b it will show two and then when you print the type b it will always print out class string so no matter what the user inputs no matter what the user inputs here it will always come out as a string and that's just how the input function works and if you want to change it to an int we would cast that and i will be going over that shortly all right so python is also a dynamically typed language and what this means is that you do not have to actually declare the variable so if you guys have ever coded in java which is a static language you will know that you have to declare the variable with its data type so say you would have to do something like int and then variable equals a value or string variable equals this string but in this piece of code you can see that we did not actually declare the variable x and it just it runs as expected we did not have to declare the variable x and um basically this is a function we'll be going over functions later in our course so basically it takes this value here within the parentheses and stores it within x prints a hundred and the same thing here it's the resistant x prints x and it prints hello there okay moving on so here i just this is a numeric data type integers um what integers are they are positive or negative whole numbers represented by the int class so some examples are 3 500 213. um there you can do this really long number this really small number there is no minimum or maximum number um that can be stored within the end so you yeah you could do this whole long number and it will print as expected i will demonstrate this for you guys all right so basically what these um three single quotes do it comments out multiple lines of your code whereas this hashtag only comments out one line of code that's just a tip you guys can use and yeah so it showed this code shows and when you use the type function it prints out class int even though this is a really huge number this demonstrates there is no maximum or minimum number that can be stored in int now for floats this is also a numeric data type uh the floats are real numbers with a floating point representation so basically it is just a decimal number and it is represented by the float class and it truncates at a point which i'll demonstrate in a second so here are some examples 32.0 16.345 and i will demonstrate this all right so our first variable x we stored 15.20 inside x but when it prints out it prints out that it prints out as 15.2 and this is because the value was truncated to so that it does not include zero and this is to speed up the efficiency of your code because if um python were to print out all the zeros of this decimal number it could go on for infinity and that would not be a really great language it would run really slowly now for y what this is is scientific notation so how old would print is in scientific notation form 3.23 e plus 19. so this is 3.23 times 10 to the power of 19 which is scientific notation and this happens the same way you can do it either way you don't have to use the plus sign um or you can use a plus sign either way works and you can see that all three will print as class float okay moving on to complex numbers this is also numeric data type um how this is formatted is real number plus imaginary number times j so this concept won't really be used unless you are doing something like advanced calculus or um some advanced physics formulas so we will not be using this in our course but this is just good to know that this is a data type that exists and it is represented by the complex class so here are some examples of complex numbers i will just show you how this prints out but you guys do not have to worry too much about how to calculate it or anything yeah this is how we'll print out okay now for string data types a string is basically a collection of one or more characters within quotes and there is no actual character data type so um basically what a character is is a string that is of length one so say a or like an exclamation mark or even like a dollar symbol those are all characters but they don't have a character data type they are represented by the string class and then i will just show you guys some examples of some strings here okay again this is python script that you don't have to worry about for right now this is a string counter that we will be looking at later so don't worry about that just yet um okay so let's just run the code so i can show you guys what this does all right so for variable a we assign it with this is a string with double quotes around it it will print into the interpreter like this if you were to use single quotes it would also print out the same way um if you use three double quotes like this this allows you to print a multiple line string and however you format it within the editor here however you were to format it it will print in the same way inside the interpreter yeah so all the white space will all be shown in the interpreter okay for variable d this here this group of code just represents some special characters that you will need to use an escape sequence in order to print within a string and this includes quote double quotes single quotes and even the backslash and the reason why we need this escape sequence is because if we were to delete the backslash what this would do is that it would take this as the string and this would just be some unknown code that is not within the string but if you wanted to actually print a double quotation mark inside this string what you would need to do is use the escape sequence and use a backslash this is how it would print you would use a backslash for another backslash so print like that and the escape sequence also includes the this new line character and what a new line character does is it's essentially like an enter key but within your string so it will give you a new line as you can see here it enters and here is a new line at character okay now for g um here this is an unformatted string so um how your string will print depends on your white space it will include your white space as shown here here's the white space it also did a new line didn't you like here if you want to use the strip function is this showing here yes the strip function will remove all white space so basically here we see the strip function um a room it will remove the new line this is considered white space it will remove this white space right here that is considered white space and it will remove this white space here with the new line but what it doesn't do is it does not remove this new line here because um the strip function only removes the white space from either end of your string so remove these parts of the white space as you can see here um for the strip function specified with a character um this specifically deletes the new line characters at either end of your string so this is shown here so it only removed the new line character here and they removed the oh it did not remove any of the um it did not remove this new line here because there is white space here so it is not technically at the end of this string but it will also keep this white space here because it only gets rid of the new line character um and it will also even though you are specifying you want to delete to the new lines it only gets rid of it at either end of the string so it will not get rid of this d line or this new line and you can see that printed here uh now for the find function this basically you specify the substring that you want to locate within the whole string here and then it basically locates it based on the index of the string so um here i can show you guys what the index would be so this would be index 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 and 16. so at index 16 is where the um string shows up and you can see here printed 16 and 4 h this uses the format function specified with the variable string count so throughout the program we were counting the number of strings and then so what you would do is you place two curly brackets for where you want to input the number in to your string and you have to use the format function because you cannot concatenate a string within ins because there are two different data types so you can't um you can't connect concatenate them together so this is how you would print how you would print it out so that it would include the variable for string count within your string so let's say there are eight strings in this example all right so now we will move on to the split function and what this does it is is it specifies where you want to split this entire string into two separate sub strings so it will delete this colon here and then it will separate these into two sub strings as shown here you can see one substring and i'm not sure you can see that but it does it does um separate that into a second substring and finally we have the print function for indexing this just shows that you can index a string so basically at index three it will print out whatever is at index three so for this string index three will be i and they will print out i here and um oh yeah i just wanted to highlight this um indexing for python always starts at zero so always remember that indexing always starts at zero so the s here will be zero p will be one i will be two i will be three okay um now for the tuple data type a tuple is a collection of objects which is ordered and immutable which means that they cannot be changed so these values in here cannot be changed and here's an example of that okay so if we run this code we can see that tuple one at index zero will print out physics because for this tuple um physics is at index zero and then for tuple2 this just is asking um what will print if you include two indexes one and five so the first index is inclusive the second index is exclusive so i index so this will print out um the values within index one and five so from here index one will be two index five will be six but since the second index is exclusive it will not print out six but it will print out two three four and five as shown here okay um so now for lists this is an ordered collection of elements and this lists are immutable so they can be changed unlike tuples and i will show you an example of this and again we will be going over all of these lists tuples sets um most of the stuff covered in today's lesson we will be going over this again in a future lesson so you don't have to worry too much if you aren't able to completely grasp the concepts but if you do have questions again please feel free to reach out ask us any questions through our emails okay so if we print this you can see printing list one it will show up in the same way as you um declared list one as for list two we are using a for loop which will also be having a future lesson on for loop but basically for each of these values for each fruit in this list we will print the fruit like so apple banana and orange in order and for this last for the last two lines of code um this shows that you can have different data types within a list so you can have an int and a string within a list and that is a totally valid list for python and yeah if you were to print this list three add index two this would print out two here and then list three at index one here it would print out chicken nuggets and it would say i want two chicken nuggets and this would only work because we used commas so but if you were to actually concatenate the um if you actually try to concatenate the data type together this would end in as two well this would be a string and this would be a string so again you cannot combine a string and an in together and you would actually have to cast this which i'll be going over a little bit later okay so moving on to sets these are an unordered and un indexed collection of items and you cannot access any of the elements elements in the set by indexing because the elements always print in a random order and these are denoted by curly brackets oh and sorry i forgot to mention lists are denoted by regular brackets and tuples are denoted by parentheses and i will just show you how sets will print in the interpreter i will print um you would expect it to print chicken pot pie but since sets always print in random order it will say some um this just happened to print in the right order if you were to run it again it would be in a totally different order you run it again again it will be in a different order and that just shows the sets are always random okay now for dictionaries dictionaries are a collection of key and value pairs you can't have any duplicate keys but you can have duplicate values so in this example here a would be the key and 12 would be the value 12.3 would be the key and hello would be the value and uh remember keys are case sensitive so make sure your capitalization is correct when you call the keys and dictionaries are ordered indexed and so i will show you guys how this would look in the interpreter all right so we wanted to find a dictionary with the key as one and it will print out the value hello and then for this same dictionary at key 3 this will also print out the value hello and for the dictionary at key 2 it will print out the corresponding value by all right now for operators we will be going over action versus assignment okay so if we run this this here these two lines are assignments we are just assigning the value 1 to the variable a and here we're assigning the value 2 to the variable b so we're not actually doing anything to each of these values we're just assigning them to the variable now for this line of code this is an action we are adding 10 to the variable a but if we were to print this out a would still be one shown here and this is because we did not actually assign a any value we just did the action of adding so a is not a any new value at all it will still be one okay for this line of code this is both an action and an assignment using the plus equals operator so basically what this operator does is it's this is the equivalent of it but this is just basically a shortcut of this format so it is taking the value b the value from b to and adding it to 10 and then it declares the total sum of b plus 10 to b itself so if we were to to delete that to run it again it will show 12. so yeah that is basically the difference between an assignment and an action and how you can combine both to actually assign the whatever action you wanted to do to the variable and print that out into the interpreter now we will go over operators themselves operators in python are very flexible here we just declared two ins to the variables in a and into b and if we were to run this it would print out leave whatever value is stored in int a which is 5 and the value stored in in b which is 12 we would add them together so 5 12 would be 17 5 minus 12 negative 7 5 times 12 16. yeah these are all operators if we wanted to do an exponent you could do the value stored in into b with um you would have two asterisks or two multiplication symbols with the power you wanted to um multiply by so this raises into b which is 12 to the power of 2 which gives you 144. you can also divide into a y and b giving you this complex number here so here is the modulo operator and this is division into b divided by into a and it gives you the remainder of that so it would be 12 divided by 5 which would be which would equal 2 remainder 2 so the remainder 2 would be printed here booleans are another data type they return either true or false what this line does is it checks whether this whether boolean a or boolean b will return true so if either boolean a or boolean b is equal to true then it will also print out true which it does because boolean a is equal to true now for this line this is checking if boolean a and boolean b are equal to true if they will both return true but since boolean b is false um one of the conditions is not met but and since there is the and operator here both conditions have um i mean both booleans have to meet the condition of true and since that is not true the print statement will actually print false now first strings if you were to add two strings together using the addition operator this would just append string b to string a so it would say hello world like this and for list if you were to use the addition operator here it would just also append the list from list b to list a so what this would print out is one two three four five six shown here and if you were to append list c to list a it would go one two three one two as shown here and what i just went over only covers some of the basic operators and there are many more out there okay casting what is casting this casting is basically when you convert one data type to a different data type almost like this magician here and you would use the into or string functions to cast them into a different data type and i'll just demonstrate this okay so if you were to run this code you would come out with um an error if you were to put an int this would no matter what this would print out as class string and i'll just show you guys this because as i mentioned earlier um no matter what you input into the input function sorry no matter what you input into the input function it will always come out as class string you can see it came out as class string and because we wanted to add an int with a string this does not work you cannot um you can't add two different data types together because that doesn't work out so how you would fix this is you would have to cast b here into an int so it was originally a string but using the int function you casted it into an int and you can add the two values together so it would be adding 10 10 here plus what you would put it here two which was casted into an in so ten plus two would equal to the end twelve so another way you could cast the ins would be to use the hint function and just put it all around the input function here and that will also cast your string into an end and they will add it together but say you don't want to actually add them together you know traditionally mathematically you want to say append the string to to a string ten so you could do this by casting a as a string and then if you run it you will append two to 10 and then it will come out as 102. so you were appending it and you did not mathematically add it and that is the basics on casting and finally we have our demo and we will just be going over a hunger games character creator alright so here we are in our main file for our demonstration so what this line does is it imports the text file um it inputs the oh it imports this python file sorry not the text file it imports the python file so that you can run it in this main python file and don't worry too much about importing we will be going over that in future lessons again the python script will also be going over that in a future lesson and basically what this line does is it places a it calls a function and it stores it into this variable out and then it will print it out and where this function is located is in the character class python file so when this when the function is called here it is calling it from this character class file and it will it will call upon this code here okay with the file which is the character text file and here we just have some descriptions on each of the characters from hunger games okay so here you don't have to worry about this for right now you don't have to worry about this section here right now um what this does is it opens the file here character text characara dot text it will open this file and then here is a for loop again don't worry about for loops we'll be going over that in future lesson um so for each line in this file for each line we will um we will be executing this code for each of the lines in this character text file okay so what after that we use the strip function and store the stripped lines these stripped lines into the variable x and so that will just strip any white space so it will strip this white space here we'll get rid of that white space any white space on this side we'll get rid of two and again it stores an x and then in this conditional here if character in x this checks if the substring character is found in this line then we will carry out this code here and then we are using the split function to split this line of code into two sub strings with the colon and the space that was specified here we specified the colon on the space so we will get rid of the colonist space separate it into two substrings so one substring will be character and the second substring will be katniss everdeen and then we also specified it at index one we want to assign the split function with index one into the variable name so this will be printed out as a list so it will be character as one sub string with a comma and then candice everdeen as the second substring and so this will be index zero this will be index one so what we will actually be printing out is katniss everdeen that will be stored inside of name and then we basically just store this inside the output we'll return the output later and then we do the same thing with district and weapon so district and weapon it just keeps checking for each of these lines of code so basically how this will print out if we run the code um you'll see kadness everdane and then 12 bone arrow finna go dare for trident um and just keep going throughout the character text file and that's basically how you can sort through a text file using the specific string function so use strip and split and that is just how you can apply it to um a file like this all right so here are just some additional resources that are really useful if you click on this link here you'll see a bunch of documentation on data types in python this is really useful you can read through it if you have extra time and another really important resource is w3 schools and w3schools basically has a bunch of documentation on a bunch of different languages so this is definitely somewhere you can do a lot of additional reading on learning python some other python documentation there's a lot of documentation on python data types that you guys can go through yeah this is really this is a really widely used resource in the programming world so i would really recommend w3schools and that concludes the lesson for today um thanks everyone for watching our next lesson will be next saturday september 19th at either 9 a.m or 3 p.m pst depending on when your lesson is scheduled um we will be going over conditionals next lesson and if you do need any help or want oneonone tutoring please don't be afraid to reach out here are some emails you can reach out to or you can go to this link here and if you click the book button you can just fill this out get some oneonone tutoring for any help that you might need um and yeah thanks everyone for listening i hope you enjoyed today's lesson and bye