functions and like how to create functions in python and just like genome stuff related to making your own functions in python so first off what is a function a function is basically a block of code that is a part of a program but not included in like the main um execution part of the code so think of it as just like a block of code that does something consistently so as you can see in this example you have like um print hello print buying stuff like that um a function will help you like instead of having like competitive code like print hello goodbye and have that repeat mistake you can wrap that all up into one function and then call that function multiple times if you like do the same thing so it's just a block of code that does the same thing um consistently and this way it provides the code a little bit of abstraction that will um that will help you save a lot of lines of code and it simplifies your private code and also makes your code pretty readable so we can quickly look at a simple example of this so in this example we have just a array a one two three four and then a rate of b five six seven eight and then say i want to add 10 to both of these lists so i basically want to add 10 to each element for both a and b so i can first just have like just have go through them usually for both of them so like where i numb in a numerator i'll add 10 to like the element in a and then i'll do the same thing for b and i'll put them out so this way like as you can see i have basically two blocks that just do the same thing but they also use but all they do is just like um or they do the same thing besides like use taking in like a different list each time so i'm doing the same thing for both of these and i'm basically using um a lot of lines just to do the same thing instead of having like instead of having basically the two blocks of the same code what i can do instead is something like um define a function like that takes in a variable x and then for i num and enumerate x i can have x of i equals and then i can basically call that function so my function foo a and then and then pass both a and b and it returns the same thing so as you can see i've used like one two three four lines of code instead of basically six lines of code to do the same thing so a function in general is just a block of code that will help you reduce the amount of lines you have and will make your code more readable and then next step you will talk about um just the nandium function and how function works okay so when you're when you're writing a function there are a few things that you should understand and remember so one of the most important things in a function is remembering to use the def def keyword and that denotes that uh that basically tells python that yes this is a function that i'm writing and then right after the def keyword you write your function name so this can be anything you want like in this example um our function name is my function and right after your function name you should have two parentheses um and inside those parentheses you might you may or may not include parameters and you may have one uh you may have zero parameters one or as many as you want but i'll if you don't understand what parameters are yet that's completely okay because i'll probably explain that in the next slide then after you're um after the sorry sorry um after your parentheses you should always remember to have a colon and on the next few lines where you want to write the body of your function make sure that you have make sure for each of those lines in the body of your function you you have an um an indentation because python is pretty strict about uh that sort of thing and um right so all of your um statements in the body of your function will be executed when you call your function name you can go to the next slide right okay so let me explain a little bit more about arguments and parameters so a parameter is a variable that's used inside the function um definition and it's defined inside of the the parentheses that i mentioned before and if there are multiple parameters then you separate those parameters by commas so let's look at this example first on the um the example def my function so we have this function here called my function and inside the parentheses right after the um you can see that um there is a you can see that there is a parameter called food and you can think of food like um a variable but basically when you call your function my function you need to give python a value for food so let me now go back to what an argument is so arguments are information that are um that are passed into a function so okay let's look at the second part of this example um when i'm calling my function notice how i'm putting a value inside of those parentheses right after i say my function i'm saying uh pizza and then i'm saying like ice cream and then i'm saying fries so let's say i i said i put pizza i put pizza first right so when i say pizza i'm basically telling python that okay you have pizza right here now make food equal to pizza remember food that was in our function definitions statement um so because food equals pizza then whenever you see food whenever python will see food inside of your function then it's going to replace food with pizza so in the statement my function pizza when you when you write that in python it's just going to print out i like pizza and for ice cream it's gonna say i like ice cream and then i like fries for the next statement okay so uh like i mentioned earlier you can have multiple parameters and that would mean that you can have that would mean that you would have multiple arguments so if you do choose to choose to have multiple parameters then you need to separate them by a comma so in the first line you can see that def my function and inside these parentheses you can see that there's name comma food so that's telling python that there are two different um parameters that are going to be used inside your function name and food then you can see that we have this body of code where name and food are being used and outside of your function when you're trying to call my function then what you need to do is to tell python what the values of name and food are so um uh let's look at these examples where i say my function and then marissa and comma pizza so um then python would take name and assign the value of marissa to name and pizza and assign the value of pizza to food so in this first statement where i say my function marissa comma pizza i would say um what would happen is that python would print out name poland and then print out marissa and on the next line python would say favorite food and then um print out uh pizza sorry yeah and then for these other examples the same thing would happen so emily would be passed into name and then ice cream into food and uh natalie would be passionate name and then fries into food and jessica will go over this example yep so this is just another yeah another example of like python's um parameters and how parameters work in python so in this example we have our main body here and our a function called add so here i basically takes in two parameters a and b and i'll print out a plus b and in the main body we have we're passing in 10 and 11 for the first i and then in the second part we're passing in string one and string two and we can add it so here you can see that um like variables python's parameters are very flexible so you you um there is a way to specify like um parameter types if you really want to um pass in like only integers or only strings into your function or you can like check for the type in in your function itself but if you don't specify um the parameter type the type can be anything as long as it's um it can perform the operations in your function so here if we run this code you can see like if i have if i pass in 10 and 11 and that into add it'll print 21. but if i also pass in like hello and bye into i it'll also still do the ad but it'll do the ad for the strings instead of like adding them like integers or something like that and let me share this too so overall like pythons parameters are at like flexible just like variables um and just to note like to reiterate again you can you have to separate your parameters with a comma in your function definition all right next is something called optional arguments or optional parameters so this is um pretty python specific um in python you can also define something that's called an optional argument which is basically um just like with like your regular um function um header like this you can have like depth function name and then have a required argument and then if you want to um if you want an optional argument you name the parameter then you assign it a default value afterwards and then do stuff in your in your um function body so if you have an optional argument what you can do is you can call it with only the required parameters like pass in only the required arguments or you can pass in both a required argument and an optional argument the general gist is just that um the optional argument always has a default value so python will always like it will know that if you don't um assign a value to the optional argument it can revert back to the default value but if you want to specify like the optional argument you can um you can just pass it in in whenever you call the argument itself and then an example would be something like if i have death um we can say add a b and this is just like in our example so a b print a c and then in our main body um we have a equals 10 b equals 11 and then if i have the original example like this uh basically a and b right now are your required parameters so i can't exactly i can't just say like i just want to add a because then python will be like well what is b now and then this won't work so this will throw argument um and python will say like it's add is missing one one required positional argument which is just a really complicated way of telling us like hey you're missing the second argument for this function however if i make b of an optional parameter by giving it a default value say like b equals probably not 10 because that would be confusing b equals three then i can call um add a comma b like this and change the um and like pass in uh argument to the optional parameter or i can just call at a like this but when python goes back up here and checks the um the or it starts assigning values to the parameters then it can say like oh so i do have the um i did pass in like the required argument which is a but when it sees like i don't i didn't pass in b it will know that it can fall back to b equals three so next we're going to be talking about return values um sometimes in python you don't want your function to just like do something and then be done like you want it to return something to give you like you want to um you want it to give a value back back to like whatever main function you're doing um and you can basically pass back values by um specifying it or passing something back using the return keyword so in this example we have like um a function called calculate average and it takes in like a list of numbers and then it'll do like it'll calculate your mathematical average and sometimes you don't want to just like do something you wanted to like just like in this example it's returning back like the numerical average because you might want to use that for later or something like that so then once it returns back like the average you can capture it in like a variable say like average num and then print it out in your main function so basically the journal just is if you want your function to return something just write return and afterwards write like whatever data you want to send back but just um just like a clarification is like once you like return a value in your function that function ends there so um for example if i return average here if i write any code in the function after this return call it won't be called ever because the function exits upon return so we can check out like a quick example of this so in this code we have like we have the last example is add a comma b but instead of um just having it print out the um the sum you can return it like this um another example is just like finding the even finding like the even number in like your parameter a and then you can just find it like this um a quick question that like so quick question what is a what type can find what types of um what data types can find even taken based off this for loop you can drop the answers in chat so based off the four loop it's it's in general any data type that you can enumerate through in a form so this can be like or and any data type where each element in this collection can be um can be used with a modulus observation so this could be something like a list of numbers or something like that most commonly and over here as you can see you can also return multiple values and this will return it as a tuple so if i run this example in the in the main body i'm basically like passing in a list of 1 3 5 10 13 and i can capture the results of find even in this variable called results and then i'm printing um out the the um the elements within this result table so i can do it this way where i just capture the um the return values as one big tuple and then print out like each each part by indexing into the tuple or i can capture each individual element by listing a bunch of different variables so i'm just separating them by commas so what this does is basically in find even i'm returning the index and the even number that um the of the first even number in the list and in this part um python will basically map like the return value to the variable that like matches it in the like that matches the um the position basically of the return values so in this case like i would be mapped to pause and then num would be math you know and then i can print out the values like this so like if i what happens then if i run like b equals one three five nine so like i pass in a list you find even that has no um that has no no even numbers what happens so if we look back into find even um basically this will only return something if i find the even number so what if i don't find the even number what's the um value of result then well we can check it out right now by running it and you can see that it's the none type so none in python is basically the type that denotes like no value if you're familiar with them other languages it's basically python's version of the node type where um it's just it just like has no value so just be careful when you're doing return values because if python sees that that you're trying to like you're trying to capture some sort of value um from your function but there isn't like a like a final return value then like you might run into some trouble in like more complicated pieces of code so make sure that like you're it it's good practice to basically have like consistent return values or if like or if or like at the very least make sure you're checking for like none types if you ever have like a function like this where it might not always return a value at all see so finally we're going to be talking a little bit about variable scopes and scoping in general this is the concept that is um important to any any um coding language so no matter like which language you're using you always you always want to be familiar with scoping because this will help you a lot in coding in general so scoping is basically um how and where a variable can be accessed or like a variable or a function can be accessed within your code um this is basically like um how like how you kind of how the the um the language underneath the hood will map values to your variable name and like and how you can access that value when and like what values you can access when you call a variable so there are two um scope two types of scopes local and global and i'll get um to the details about that a little later another thing you should um be aware of is shadowing and shadowing is basically when a local variable has the same name as a global variable and the um two names are it won't conflict so like it's not something that's very bad and will throw an error or something but this is something that might like cause confusion as you're beating the code so if i have like a global variable called um a and i have a local variable a it might be a little confusing to read the code after like after a few months of not like of developing that program basically so just be very careful shadowing is not something that is like technically bad or like or something that will like cause your program to crash but it's something that you want to avoid because it might cause your code to be a little unreadable so first let's talk about global scope global scope is um basically a global variable is basically something that can be accessed anywhere in the program so um it's a value that so basically python will map the um value to your variable and then you can basically access that anywhere like in a function in a class or like in your main function um this is created outside of a function so like you're not defining this um in any function or like you can define it in the main function which is and stuff like that um in python specifically you can access a global variable in a local function by using the global keyword so basically if you want to access a global variable in your function you have to um tell python that you're trying to access a global variable first and second is local scope so a local variable is basically something that can be only the access within a function that it's defined in so um it's basically all the variables or not all of the variables but like it's something say like if i have x equals 10 in my code this would be a local variable because it's only defined within my add function basically so we can check out an example of this so for example um i have two two functions the first one is foo where i call a global variable z and then i create a local variable x and then i add 100 to z next is like for now like we won't worry about whack because it's a pretty this one's pretty like tricky but let's look at food first so if i run this like so let's like first in the main function we have like z equals 100 x equals 10 and then i want to print out z and x after i call through so if you like before we said that like here we're um we're calling the global variable z and then we're adding 100 to z so this will basically this line first of all basically tells python like hey i'm calling like like look i'm referring to the global variable z and then python would be like okay i'm going to map like 100 to this variable then and then next uh python will see that like we're creating a local variable x and that will map up the value of 100 to x and then finally python will just add 100 to z however once python exits this function this local variable value will basically just be destroyed because it's only local it so that about this value 100 won't be um won't be uh won't stay basically in like x and then python in the main function will still refer back to this x if it wants the value in this print so that's basically why when we print z over here it prints 200 because we've altered the global variable in this function but for x over here this one's global but the x in our um in our foo function was local so this value basically isn't kept anywhere and one python prints over here it would just print the 10 that was in the global variable x so this also applies to functions functions also have like the everything i've said about like local and global variables also applies to functions so for example we have this function in wac that has like a function within a function called inside func that takes in like a parameter x and then multiplies x by 10 and then in the function lac we define a local variable called num equals 20 and then we'll call inside func them which will basically just multiply them by um by 10 and then return 200. so basically when we look at this inside func this is a function that is local to whack so it can't be referred um it can't be called anywhere outside of the function whack however like technically black is a global function so it can be caught anywhere like in the main function or like outside basically so if we print out black it will print out 200. however like if i want i can't like call inside funk outside of black so if i try like call inside function here it will throw me an error saying like inside funk isn't defined in this scope any questions about um scoping see all right and next we have our five minor five so question one what's the output of this code so we have a function called zoo and we do x plus equals 10. so we're just adding x by a hundred then outside we're defining x equals nine and then we call through over here if i run this program what do you think will happen right so the answer would be an error basically in this part in the new function itself x isn't defined so what python will read is like x equals nine in the global scope but then once it enters the function foo first off um you'll notice that like this x in foo is a local variable because we didn't like we didn't use any global keywords before to like specify what x is so this x is is local and second on this local variable x hasn't had any like any value assigned to it it's basically undefined in this case so and then it would be like oh i can't add 100 to like an undefined variable so it'll throw this error local variable x was referenced before assignment that's basically just a fancy way of saying like you didn't assign um x anything like any sort of value before you started like doing operations on it basically so um in general make sure like when you want to access a global variable make sure you specify that is global before like you try to change it and if you want to like um make a local variable or if you want to make any variable in general make sure you assign it a value before like you start doing things do it so in order to fix this there are two possible solutions first off you kind of define foo you can define the global variable x by specifying like global keyword info and then adding 100 to the global variable and then it will like add 100 to this x equals nine and print 109. what you can also do is um have fu um take in a parameter that's instead and then return the x plus a hundred so this way you define a global variable x equals nine and then you can say like x equals four x and then it'll print it'll also print 109. so there are many ways like and these aren't just the only two solutions there are many ways to fix this just make sure like you as long as like x has a value before you change it and then like if you if you want to like return it as like if you want to return or if you want the function to return something then like specify that with the return keyword so question two what's the output of this code then so i have like again um function foo but this time i'm having like a global variable z and saying z equals 24. and then i'm calling foo and printing z so in this case like what do you think the output would be all right so um in this situation the answer would be 24. so like this might be a little confusing because we didn't define the actual global variable z outside over here but you can actually create new global variables by using the global keyword so basically what python does it's like it'll see that once it gets to like this line global z it'll see like hey i don't have a global any global variables called z um in my in my global scope so what i'll do instead is i'll create it in this function and then assign it to 24 and then add that to the global scope so and then out here um once i hit that print function python will see like oh in my global scope i have this variable z and its value is 24 and then i will be able to print it out as um 24 over here so um if you if you call if you try to refer to a global variable that doesn't exist in like a function or like in any vocal scope um you can python will basically just create that variable and then assign it to like whatever value you have from here um this is both like good and bad so like the good part is you don't exactly have to like define every single global variable you're going to use in like the um in the main function or anything so like you don't have to preemptively define z um if you're not going to like use it or if you're um if in your main function so like you can just start creating global variables like wherever you want to like um define it however the bad part is like say i i do have like or say i have a variable like abc that's in my global scope but then like somewhere like a thousand lines later i'm like in like i'm defining a function or something and i make a typo like i say instead of like global abc i actually say like global a b instead oh python would just like oh i can't i don't see like this this global variable called a b so i'm just going to create one myself and then that might cause like a lot of errors that might be hard to debug because it's actually not throwing an error it's just like python is just like being super being like a little too flexible and a little bit too forgiving so um if you're gonna if you want to like start creating global variables within like functions and stuff just make sure that you use that carefully all right next is is this a first off like is this a valid function and second off what data types can parameter x be so i have a function called wacky function that takes in a parameter x and i say like if x then like return 100 else return 10 20 30. so first off like is wacky funk like if i define this is wacky function of valid function like is my function body valid and like what or will python throw an error when i try to call it second off um what kind what data types can parameterx be can i pass just anything into it or like where can i only pass certain types of um can can x be only be like specific data types so this might take a little longer to think about but um feel free to drop answers or like any thoughts or questions in the chat about this fun so you can repeat that please is the class done um not yet we've got two more questions okay all right so let's look at the answer then first off is this a valid function yes because a function's returned values can be flexible um for python you can return as many and like as many types and as many like numbers of values in your function so you don't always like you can return one value like in one condition or like three values in another condition that the number and type of return values doesn't isn't doesn't have to be fixed basically um second off um x can be any data type that can be passed in as a boolean expression so like as you can see on this side um wacky function can be an empty string or it can be like a number or it can be like a list or just a boolean so as long as x can be evaluated by this if statement it can be passed in to yp function and because like python is very flexible in what can be evaluated by an if statement i'm honestly like not sure if there is a data type that can't be evaluated by ifs and to be honest but virtually um x can be any data type all right question four can a function be passed in as a parameter to another function so can i have like a function that just takes in other functions as parameters and then um do stuff with that what do you guys think i get i'll just give you this answer because this one is um this one is a pretty complicated answer to be honest but the answer is yes so in python and in in many other languages to be honest um functions are treated as their own objects so i can like have an example where like say i have a definition that prints x plus 100 and then um function fast that takes that prints out x times 100. then i can also have a function lam that takes in a function f and then just cause f um and passes in three to it and then when i call i can like pass in just the name of the function so like foo or vas and then it'll print out like whatever um it'll basically pass in this function into f and then pass in three into whatever function i've passed into lamb so a function that takes in other functions as parameters are called higher order functions so um many languages now support this like higher order function so i can have like like now i can have things like lists of functions or and then pass in like the same parameter to my list of functions i can even like store functions as variables and then pass them into like other functions or like um assign them to like different objects and stuff like that so this makes python like really powerful i can even like um do something like say i want uh i want a super customized sorting function and then i can like basically order an entire list by passing in like a custom sorting function into like another function that will like order my list based off of whatever sorting function i passed into it so be aware that like functions are treated are basically their own objects and this can like this can take your program to like your programming to a whole new level basically and finally um what's the output of this code so i have a function called say and it takes in a parameter message and then another parameter times which has a default value of one and then i print on the message um this number of times basically and then i have um in the main function i pass in hello world and three into function say so what do you think is that all right so the answer is it will print out hello world three times so because we specify the default value two times it's basically optional parameter um so if i just printed like say hello world and i didn't pass in three um it'll print out hello world times one which is just how it worked one time however like this time i decided to specify the number of times i want to say hello world so it printed out hello world three times