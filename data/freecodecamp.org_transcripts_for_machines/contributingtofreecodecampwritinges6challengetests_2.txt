awesome yo we're live again all right let's do this let me just twitter verse this and we'll get right back into it technical difficult these have been conquered that's how you spell that come join me live all right guys we're gonna get right back into it here guarantee it um i just gotta find the link to the video so i can share it a little bit here we go we're going again guys isn't that just great thank you quincy cool all right i'm going to give give it a few minutes just so i can get some people in here and then i'm going to get right back into coding because um this has been quite a bit of technical difficulties we got a mix of hardware we got some software we needed to you know fix some uh settings and things but now we're totally rocking it right with that i'm gonna do a little pop out the chat and then i'll knock you away get ready you cool got that there all right well so hello again to anyone who has joined us again uh two two hours later but we're rocking and rolling um i'm gonna go for a little bit longer until basically we get through as much as we can um so yeah to get right back into it uh i'm gonna restart the my dev tools here so we got the we've got mongodb running which is where all the challenges are stored and then we're going to go back over to the gulp profile run gulp so we have that thing building and then to give a brief overview of what we're all looking at i have my vs code editor which is running a terminal inside of it which is really awesome the code is right here for the es6 challenges then i have the github account um my github that i use to track my changes as well as the actual website you know the challenges itself what is being rendered onto screen um before uh the technical difficulties we completed the 11th challenge so we'll actually be able to update that here um actually no we won't update because we haven't done a pull request basically today every five that i do i'm going to do a pull request and i'll probably just keep a tally on a note card just for simplicity's sake that way i can keep track of what we're doing so we've done number 11 which is the first and let's move right into the next one great okay so use the spread operator to evaluate arrays in place introduces a spread operator which allows us to expand arrays and other expressions in places where multiple parameters or elements are expected the es5 code below uses apply to compute the maximum value in array returns 89 math.max.apply null and then the array we had to use null comma array because math.max array returns not a number math.max expects comma separated arguments not an array the spread operator makes this syntax much better to read and maintain okay it's unpacked array in other words it spreads it out yep all right only works in place like in an argument to a function or in an array literal the following code does not work copy all the contents in array one into another array array two using the spread operator oh okay two three array one cool all right so first thing that comes to mind for a challenge like this uh let's see what the test we have tests that array two is a correct copy of array one test that array one has changed and then i guess via part four it's going to be an issue though um because we can't test before and after yes thank you jesse yeah it's been uh we got everything working now we're rocking and rolling all right um test spread operator was used so i think i think i'm not gonna do test array one is changed we're going to remove that one i definitely want to test if they're the same and i want to test the spread operator is used and i think that's all we're going to have to do i don't think that this is oh you don't set it equal to each other i see well then i'll use a set i'll say that everything in array 2 is in array 1 meaning that it was a copy of it and then all right push who maybe we'll do instead i think we'll do is in the test itself we'll use something like this and we'll push an element to it and then verify afterwards that array two has not changed um so that is we'll keep this we'll keep this challenge simple um because what we're showing here is we're trying to show that we're just spreading an array in place we're not trying to you know show um every aspect of like assignment and whatnot uh also this needs to get updated because there needs to be a space there okay um another thing i noticed that we don't have the brake line so let's grab that real quick snag that go over here paste it in now we want to i'm going to want to remove this because i don't think this is important for this challenge and of course everything that i'm doing here you know making these changes and what we'll do is we'll propose these changes to the repository and then when someone comes through and says actually i don't agree with that then we can go back and we can add them in but for the purposes of contributing when you're writing code you get to make the decisions and then when you propose and you make a pull request then that's when people can challenge you and say i don't think that's the way to go or you should do it differently cool so back to here so let's write some a search assertion so test that array two is a correct copy of array one all right so we're gonna basic thing and then we're gonna have some function there comma the message okay and then we'll just i can write the message in now array 2 is correct copy of code right 1. great remove that for now and get my comma back over here okay so let's think about how to do this um let me grab my notebook real quick arrays are a lot of fun arrays you get to do some fun things with you get to iterate them you get to loop through them you get to compare them you get to even use sets so i don't know what the best way to do this will be we can probably keep it quite simple so i'll start by making an arrow function this way we can contain our code and then i'll basically can i do white space uh no i don't believe i can um so to start off we're going to say constant array 1 is going to equal just a very basic array of two elements and then we want to say that constant array two is going to equal the spread of array one and now we want to compare the two so traditionally when you want to compare to arrays i would probably write a deep equals method to verify that everything is equivalent but because this is such a simple example we can actually get away with doing a return array 2 0th spot is db equals the 0th index of array 1 and array 2 is equivalent to array 1. great that should do it for the first one now test let's do the let's save this one for the last because we'll talk about that now let's test spread operator was used okay so we know how the spread operator should be used um and we're going to use a code.match when we get to it write a message we'll say code spread operator was used now let's go over here we'll add in our um regular expression syntax and now let's think about the way this should look so no matter what because we need array two they need to be producing array two then we will probably want to test for this whole line right here with an optional oh well first of all um use strict and then we have i think this is valid yes that is so we can have optional white space between here and here but then we necessary white space here and then also optional white space between here and here it said we don't even want to test this let's just test this aspect right here so let's go ahead and write well i think i have to escape this yep have to escape that and then we're going to have optional white space the spread operator array 1 and then optional white space close the brackets and we're not going to test for a semicolon that's unnecessary and we're going to say dot dot dot spread operator was used to duplicate array one make sure we get the close in there i believe this is going outside right yeah cool all right let's let's work our way back through this to make sure that everything has worked so far and then we'll see where we can go just so i can talk through that basically i just ran node seed before which reseeds the database it goes back through all these json files and produces all the challenges and then i just restarted the account the um server that is running my instance of this locally okay so i believe all i have to do is write dot dot array one run the tests great they worked but um before i move on i think i want to add one more test here i want to i want to make sure that they aren't just doing this because if because technically this is a valid way to copy an array but that um if i remember correctly or the way at least this works in java is if you were to then edit an option an object like an entity in array1 it'll actually change it in array 2 as well so we want to test to make sure that what happens in array one doesn't happen to array two so let's assert again or actually this might not be working so i don't have a comma there we go comma all right assert close that off let's throw the message in here now let's say that um we'll say code array2 remains 008. okay i just realized um this first test is doing nothing because it's not i'm just i just wrote code to check the code we need to you code.match um otherwise this is pointless um because this is not like we can't test what they actually input here this isn't getting what they've actually input that's my mistake let me um let's think about this how can we do this better we could verify this is a tricky one well technically we really can't check that then because we're not using a function here what we could do is we we could edit the challenge and see we go from there so let's say let's make a function declaration let's say let's function we'll say duplicate and we're going to take in an array and we're going to just return that array is that is that reasonable is that a is that a fair thing to do and then we would want to say constant array two is going to equal duplicate array yeah so we're gonna remove this line would this still work oh wait no right one yes it still does okay so let's change the um let's change the challenge here um into so let's we're going to change the instructions here and we're also going to change the code so first of all we can delete this or actually let's keep let's grab the change this line say change this line and we're basically going to say i'm going to want to complete i'm going to want to copy this and i want to i'll do all my line by line well we'll just we'll just roll with it all right so we can delete this one it's already there and then let's snag this line toss it in here grab the return and then grab the squiggly bracket and we're going to need this line here and then that should be golden okay now you should be able to say so wait a second we're going to test one thing real quick you guys are learning with me here i'm not entirely sure everything that we have access to when it comes to um this testing framework i believe this will be a valid test i think this might work in which case we don't need all this but then there is an issue with testing hmm let's uh we're going to save this over here for just a little bit and uh let's just snap it into um kind of like text edit i have like a text edit here we go perfect ah let's uh let's not have that open that's my batch profile alright let's save that in there so we have that just in case i'll move that away yes this video will be available after the live session okay so we've done that let's go back to writing the line in that const array 2 should just equal the this and just edit when they say change this line okay and then this method should return true if these things are defined okay let's write a node seed i'm going to restart the server great let's do a refresh and let me just go ahead and basically just remove this uncomment this and then if this runs okay this passes this this passes okay so i was correct um i will i was wrong at first but now i'm correct we do have full access to the variable types the variables um that are written in the editor so with that let's think about how we can check if array two is equal to array one um i think a good way to do that is basically just do um basically just use a for each loop and then i believe the four each will pass in the index and yeah for there so let's just go to mdn and get the for each method so we can make sure we do this correctly um so it seems like we get the callback gets the current value the index and the array great all right so let's go ahead let's go over here i'm gonna say array two dot four each and then we're gonna have a callback and the callback is going to have the current value and the index and then we're going to know what we'll do we'll use every instead because i believe every returns true if it passes for every item every and it's a function let's see so we have the the current value index as well yep so we're going to use every guys yay for awesome es6 things and then we're going to say we're going to return true if v is equivalent to array one the index if that if this passes then we know we have a correct copy um we will return false in here for now remains unchained or when array one is changed okay i'm going to restart great let's go back over here we'll refresh my code should save good and if we run unlock and run there we go all right so this one's passing now which is great um it means that we do have a direct copy of which is um really really good uh so this if you guys are wondering this is the code snippet that i'm using i'll even post i'll even um copy it and paste it into the youtube chat so you guys can use it in your own thing so that is a shallow equal array equivalency um checker what i mean by shallow equal is that it doesn't truly check that each item here is equivalent to the other item because technically if you had if you guys are aware of some objects and some nested nested data structures can lead to being buggy when you just use a triple check so while something may actually be the same it will return false because two objects even declared exactly the same are not equal um we can even i can even show this quite quickly in here i believe if we do this is this going to be the same yeah so if you notice two objects of the same type of literally they literally look exactly the same but because they're not the literal same memory address they're not equivalent um so this the method that i posted there will not work however if you use the deep equals method where it actually traverses all all um keys and parameters of an item then it would be better so yeah let's move right on through here let's check to make sure that array 2 remains unchanged so if we go in here we say array 1 dot push and we're going to add an item like june then oh what are we going to do actually now we're going to use a function i believe so let's pass array 1 and array 2 into there and then we're going to return that array2 dot length is less than array1.length and before i commit i just want to make sure that that's how you do length yeah there we go cool all right save that and run node seed restart our server refresh the page and unlock our code yay all right good that's two down let's move right on through onto the next one cool all right what we got here use the structuring assignment to assign variables from objects we saw earlier we earlier saw we we saw earlier how spread operators can effectively spread or unpack the contents of the array we can do something similar with objects as well destructuring assignment and special syntax for neatly assigning values taken directly from an object to variables consider the following es5 code voxel axis 3.6 y 7.4 z is 6.54 okay basic es5 here is the same assignment statement with the s6 destructuring yep if instead you want to store the values of xlx into a b you have that freedom as well great okay use destructuring to obtain the length of the string greeting okay first of all we're missing the proper wait a second why is the hr below it it's a high up here uh that's interesting we go ahead and snag this anyways we gotta use we have to have that use strict line um but i'm still confused is why they use the things underneath it well we'll roll with it okay so we want to say use destructuring to obtain the length of the string greeting oh interesting um oh okay so let's think about this if we have a string in node um we're actually solving the challenges too guys it's kind of fun so let's say we have our string um you know uh let's just say like abc you want to get the length you just type that length right so if you think about it this dot length is a property of the object abc or the string so what you should be able to do in that instance is go ahead and say const or we'll just use i'll just use let length equals or let's just do length we'll assign it to the letter l equals a b c d e f l should be six perfect all right so what we're expecting here is curly brackets around the word length and it should equal greeting this is the expected solution and we want to test that destructuring was used i also want to make this challenge a little bit more and i want to assign it to len i want i want the user to assign the length to the word ln um because the word the the the string length is technically a keyword because it's so popular of a parameter for um arrays as well as strings so let's go ahead and go into our code first of all let's add some white line space in here um great so i want to say use destructuring to obtain the length of the string greeting comma and assign that assign the length to code len great this is going to be a fun one assert and then length this is really equals just equals 11. because remember they got to use the elen otherwise it won't work and then message is going to be code len equals 11. cool um then we can say assert um we're going to want to make sure that the length was assigned to lens we should well we should test that length exists um so actually we'll start with that assert type of len equals equals equals string string and then the message is um code uh constant we're gonna say variable length exists and is a string and that's that that that okay and if we want to make sure that's how that actually comes out we'll just do yep string now let's assert that our users actually went ahead and used destructuring so uh properly destructured um or just was gonna say destruction was used i think that's i don't think there's a better way to say that okay so let's do code.match close it off get our rejects ready let's think about how this is going to look so we're definitely we don't need to worry about cons but we definitely need the squiggly bracket and then we're going to have the optional white space we need the strict word length there's another way to get it and then we need the optional white space the colon optional white space the strict word l e n optional white space close the bracket off and then we should just test for pretty much that whole line so we can do optional white space equal sign optional white space greeting because they really shouldn't um there really shouldn't be any deviation from this and we'll skip the semicolon because people don't always put them so let's go ahead and write that it's ready all right regular expressions go so i believe i'm going to get rid of the squiggly mark and then optional white space the word length optional white space colon optional white space word len optional white space squiggly bracket optional white space equal sign optional white space the word greeting all right great let's roll it with that first need here node seed anyone has any any questions feel free to reach out in the chat i'd love to answer them change that up uhoh something broke ah something failed here oh unsigned token all right where did we go wrong i see i see okay no trailing comma it's json for you steven uh please ask any questions man i'd love to i'd love to help out all right we're running again let's refresh all right so code did not save so let's go ahead and let's type in the potential solution run the tests oh all right so what went wrong here doesn't need to be a string that is completely wrong i don't know why my brain was thinking that it needs to be a number i was thinking length but like string and i don't know let's just roll with that so that one's good um let's be verbose here and actually check to make sure that edit makes sense our code will luckily um this local uses local storage and we'll store my code so all i have to do is refresh and run the tests again and we should be set to move on to the next one and that would bring us up to three awesome refresh okay scroll down unlock the code run the test and happy coding all right three for three guys let's go to the next one use the structuring assignment to assign variables from nested objects we can similarly just structure nested objects into variables consider the following code a start oh well wait what um so we're saying get the variable start the property start from a and then from the object and then then get x oh no sorry store that as the object this is a confusing one i've actually never used this um yes i can fill you in what we're doing so we are contributing to free code camp right now we are writing on tests for the es6 challenges at the same time we're doing a little bit of q a we are um i'm going through the beta challenges and i am not only am i reading through the descriptions and trying to test out the challenges as is and filling out some of the solutions but i'm also writing the test that tests to make sure that everyone else is solutions in the future will pass as well um and while i'm doing that i'm explaining a couple es6 things and if i'm open to questions and um soon once we hit five five um challenges for two away i will be doing some github stuff to show you all like what it's like to um push and pull from the github the free code cam repository great so the maximum of tomorrow so this is going to be a complicated one i think first of all we know that we're going to be assigning this to the word forecast and max of tomorrow is going so we got to start with today and then we gotta say max and assign that to the word max of tomorrow and that nested block should do it um i don't exactly have a way to test it but i'm just going to run the test it's going to pass but we didn't actually write anything that just saved my code so now let's write some tests um we're also missing the use strict line i don't know if the use strict line needs to exist i'm going to keep copying and pasting it over until and i think it'll just be a very easy cleanup job if we don't actually need it um because i'd rather put it in there and then remove it later on okay so this one's an easy one this align so we're just going to write assert max of tomorrow row equals equals equals 84.6 and then the message is going to be simple as this and we'll go ahead and write code here remove that and now talk about we're going to say nested destruction was used so i'm going to test for this line pretty much exactly there there's really is no other way to do it um and with that let's do i'm going to um in case you guys are wondering i am writing some stuff down on the notebook just so i can see it um keep in mind and also shout out to github i've got my little hubot github notebook pretty special definitely guys should get some um yes steven these are the challenges that you see when you work through free code camp we're writing them right now so that when we release the beta hopefully on christmas um we'll uh have some fun things for you all to see all right let's go through here we're gonna have the screwy bracket potential white space word today um optional white space colon optional white space squiggly optional white space the word max optional white space colon optional white space max of tomorrow optional white space square bracket optional white space squiggly optional white space equals optional white space forecast great this is going to be a nice and long regular expressions let's go ahead and write this um first of all yeah well let's roll through here i'm going to say assert code.match message get that in there hello how you all doing today see someone just is here from india it's pretty awesome i'm in the u.s and um i'm in new jersey at the moment even though i spend a lot of time in boston let's go all right guys ready for this regular expression escape the squiggly optional white space the word today optional white space colon optional white space the open squiggly bracket and then optional white space the word max optional white space colon optional white space max of tomorrow optional white space close the screwy bracket close the next squiggly bracket but there also needs to be some optional white space in between more optional white space the equal sign more optional white space the word forecast great um is there anything else we want to test i think that's a solid one all right let's let's quickly let me just check over max of tomorrow's equivalent good and then we have we have the the close or sorry open optional today optional colon optional open optional max optional colon optional the word max of tomorrow optional closed optional closed optional equals optional forecast will it test for single white space or all white space between levers between letters great question so the reason why i'm using this right here is an optional it's wild card which means it can be zero or many um i can show you that in here um so let's simplify this let's just literally do we're going to say a optional white space b and we're going to stay at a and we have a ton of white space that passes we have a b um here and we can do a single space and all three of these pass these are all valid for this regular expression so what we're doing is we're basically saying there can be white space there can also be no white space and that's okay um and that's what this is testing for in fact the the forward slash s is white space and then the wild card means zero or many we also have a plus sign for one or many and then i think there's one more um i believe it's zero or none so there's alright is that what this is it's zero and one so if you have one if you so for example this does not pass but these two do um so those are our three white space tests great all right that ran let's run oh oh yeah let's run node seed and then let's go here and restart the server um oh what time is it it is almost 3 p.m for me in the afternoon which would be 1500 if you're on military time like i usually am all right let's refresh this saved it unlock the code run it all right something did not work why does it not equal that who can tell me oh because i made a mistake in my solution see that guys to tomorrow you'd think that i would catch that but you get kind of caught up thinking about the code and which means that i did this and correct this needs to be the word tomorrow instead all right let's be verbose check it and we'll get on to the next one there we go there we go that work oh no okay broke gulp cool all right let's see oh i apologize for the dog barking all right unlock the code run it and we're off to the next one all right guys that is four let's do one more and then we'll do a little we'll commit some things to get and do some fun things all right es6 makes destruction arrays as easy as destructuring objects it does one key difference between the spread operator and array destruction is the spread operator unpacks all contents of an array into a comma separated list consequently you cannot pick or choose which elements you want to assign to variables ah oh i know what this is doing um let's do this the variable uh variable a is assigned to the first value of the array and b is assigned the second value of the array we can also access the value at any index in the right with the structure we're using commas to reach the desired index use the structuring assignment to swap the values of a and of a and b so that a receives the value stored in b and b receives the value stored in a i think it wants us to do this oh it looks like this one might already have tests let's see oh look at that whoa what does it say you're right all right guys let's see what they have here uh see they're testing for a word um equals why would it be testing for two comma one it doesn't make a lot of sense oh unless they're using they're pulling let's just run it and see what happens okay so let me um not i guess it works so we're gonna skip this one because if it's running it works but i'm not entirely sure i guess what this is doing i don't i'm not familiar with regular expressions enough to say but i guess this is actually grabbing oh this is your capturing groups that's what it is okay so guys um let's learn let's do some let's learn something fun here so if you notice this here and you see where it also copied secondly these are capturing groups you notice that by the parentheses around the word uh forward slash w that matches any character any any like character a through z uppercase lowercase as well as zero to nine and underscores i believe so that captures the character and then this one this so this is going to capture and store it as like capture one and then this second capturing group with the second set of parentheses says grab the next letter and say stored in capture two then later on in his regular expression his or her regular expression this you escape a number and that will refer to a previous capturing group so this two refers to this capturing group right here while this one refers to this caption group right here awesome all right let's submit and go to the next challenge so that was technically that was 11 through 15 i believe let's just check so use what's what was the title of the last one to assign variables from array yep so we just did 11 through 15. so let's take a quick um break from coding and we're actually going to push some stuff to get first off let's go ahead and cancel this and turn these off and then let's think about the right way to do this i want to actually get my pull request up as well uh there may be a communication here all right i haven't gotten any review yet um so we're so this is a pull request that i have um which is currently tracking the feature request uh my ad es6 tests so because at the beginning of this video back when we were doing technique we were working through technical difficulties i um merged i i mean i updated my branch to the uh master so we're gonna have no we currently have no merge issues with this um with this pr so we're gonna be safe to push to it and with that let's run git status and see what we've changed so notice the only thing that's changed the json file that's a good thing because it's the only thing we've been typing in the whole day and what's awesome about free code camp is that it actually has a npm run commit command and what this will let us do is create our commits um but something is not working ah get add now run get npm run commit great so we'll go down to the word test and then we're going to say challenges and then we're going to a short short message we're just going to say um es6 chao 11 through 15. it might not be working because of the numbers no issue numbers so it's gonna it doesn't like me putting things so we're gonna say like c11 through c15 will that work there we go um we don't really need to do any of these awesome oh we have an mdm update i'll go run that real quick while we go check out um oh well here hold on a sec guys all right run that and now let's check on here so we'll refresh and yes it should any second now this should pop up with our commit right ah no we have to get push here we go push our commit origin feature add es6 tests here we go okay so we have the commit we've pushed the commit and now if you look over here we'll give it a minute ah boom right there it pops up it's running camperbot's running travis ci is running to make sure that the build builds successfully um and from here we would be good to merge now i do have the ability to merge into the master however i do not enjoy i want i always want someone to look over my code before i do that um so until then uh we're just gonna keep pushing here and as long as we maintain the the um forget the word i guess the the correctness of our branch which is feature idea six tests then we'll be fine um the way we do that is what i ran through before where i fetched the upstream master or the upstream staging reset my branch to that and then cherry picked my commits so what i'm going to keep doing is until i get to that point i'm just going to keep cherry picking these three commits until we're good to go all right so we're done with those five are there any questions in the chat before i move on to the next five you guys have an amazing bootstrap walk through any plans of making sas or css grid material well let's see what we have over here responsive web design we have the basic css visual design accessibility web design principles we have the flexbox tutorial and applied design so frontend libraries we have bootstrap and we also have sas right here um i believe yeah it has even has challenges steven so um you uh definitely it's coming um it's in beta and yeah cool let's also go ahead and update here we know that with polar crest finished so we're going to go ahead and update our emojis so that if someone else wants to come by and check they'd be like oh yeah look with all the work they've done cool halfway there guys halfway there let us get right back into coding um before i do that i'm going to take a quick drink of water and make sure this was run yeah we're good here we'll get everything going again and a quick drink always stay hydrated everybody it's important thing to do cool brain food called gummy bears all right and we're on to the next one destructuring assignment with the rest operator to reassign array elements i use this one a lot okay a b d structure the rest of the array great the rest element only works correctly as the last variable in the list as in you cannot use the rest operator to catch a subarray that leaves out last element of the original array cool stephen are you working through the beta or are you working through the main curriculum all right so the challenge is we're basically just going to do a slice and we just want to take the first two out main curriculum all right cool yeah keep keep going through the main curriculum stephen and um you'll see there's a little bit of sas in the data visual section um but i don't know it's not going to be if i remember correctly it's not going to be as you are familiar with like with all the testing and stuff i believe in the new curriculum that actually is tested and all that fun stuff um okay so how would this look i think this is as simple as going we would just destructure typing backwards here everybody do a b cool that should work and there doesn't seem to be any tests so let's go ahead and write some tests all right so we have to do a deep equals again in our shallow equals um i had the code snippet so we already know we can do that so snap that again and we'll just plop that into a text thing just so i have it oh look at that all right let's assert then put the message in here we're going to say code array is code now um oh here's a fun one ready so just do we'll just say array dot every and then we're gonna literally do vi is uh value is equivalent to i plus two so we're doing a little you know little like cheating thing here basically just notice that or actually index would be plus three because like you know you have zero one zero plus three is three one plus three is four so on and so forth um that's a good one that's a that's an easy way to do this uh because we're just using the incrementals and then we can do a cert source dot every comma i say that the value is equivalent to i plus one instead and say our message is code source code is i'll copy that in a second and we gotta finish the message block comma great all right let's get rid of these okay so we have two easy asserts to write so let's start with the first one and we'll say assert that the code dot matches regular expression i'm gonna put the message in here and we're gonna keep working through so destruction was used let's go back and look at our code so we know our solution basically is going to have some word character um sammy i have been coding for about four years now but i've really only been doing the open source thing um since like really like heavily like this past september but i've been familiar with the get kind of aspect for about a year so we have optional white space word character optional white or word character option white space comma optional white space so much fun white space word character optional white space comma optional white space destructuring with the word array because we need it to be named array optional white space closed bracket that'll be good enough regular expression i believe so we have to do the open go here then do the optional word character it needs to be one so we'll just do strictly one yep just leave it as is optional word character comma optional word character optional space word character optional space optional space dot dot dot array optional space and close bracket all right and we got one more um assert at the code dot match so we want to know that slice was not used so a fun one to write is you literally just you look for the word slice but you just know you just flip it to make sure that they didn't actually put it in there i'm going to say i'm going to say array dot slice was not used and i'll probably write this i'll do array dot because this is literal i might have to do this that's a bam or something like that stephen i'm not sure what you mean by uh bam bam sammy says planning to study electrical and electronic engineering next year which programming takes a big chunk out of the course but sometimes i don't know where to start and feel overwhelmed um sammy one thing i can tell you is um coding is a wild roller coaster and there's a really awesome community especially here at free code camp for you to learn so if you just start out as small as you possibly can and just keep working your way up eventually it'll be you know second nature and um with electrical and electronic engineering what i've been told is that you really your kind of programming will be more lower level um instead of like you know a lot of the high level object oriented stuff especially not even like web design you won't really see um unless you decide to take that of course and um with lower level with lower level programming it will be more complicated but if you get a good sense of math some discrete structures um you know learn the basic syntax of javascript and python um which we will be working heavily on you should be really you should be set and just take it slow take your time learning these things it doesn't it's not going to come overnight but it's definitely doable and there's also a lot of fun support so you can always reach out if you need it let me write this message and i'll respond um which one was this oh yeah the structure destructuring was used all right i think i got another question here while i write i'll do the node seed while i read this how are you feeling about the vue.js framework i just started learning it need to know you need to know do you think if it will get picked up because as of now there isn't much docs about it so vue.js is a incredible framework i do not know it yet i do plan on learning it um it's a great thing to have in your tool kit um there is for what i understand there is pretty decent docs and actually has a lot of really cool um addons as well i believe there's something called like nuxt.js which is a vue.js like uh like almost like a static web loader i believe really good for front end projects um vue is a lot smaller than react and i think it's a lot computationally less it doesn't have the same um obviously it's not going to be the same as react uh it's a great thing to have in your tool belt um and i wouldn't discount it i just think that react has a react does have a very large presence in the front end thing but they're not the only one and definitely learn view if you can um what motivated me to get into programming started with uh for me it was just i always thought coding was this really cool thing you know though you know you always see it on like tv and stuff like hackers and things um and i was like well i can't become a hacker so uh let me learn how to build websites so i did i learned um used i think code academy when it used to be like completely free um and i learned that in high school and then from there i just kept working on it and eventually worked my way up until doing um javascript and then getting more complicated from there earning some alert looking into object oriented programming and basically running with it all right we got everything to pass except one guys let's figure out what happened oh something did not work was that a is there something wrong with in here no all right um why did source not work zero one two three four five six seven eight nine i'm confused guys i don't know what's wrong with this line let me um let me run it in node real quick oh am i missing something nope well i'm not even in node oh wait interesting i wonder what's doing this why would that run false source.every is not a function um stephen says how long did it take you to learn node um still learning node actually uh done a little bit of contributing i've gone to two node conferences and that has helped a lot sort of learning views is much smaller you should pick up angler and react to my goals um dead zombie i'd encourage you to focus on one of them and then when you are very confident with one of them then pick up another and then leave it at that i think learning all three might be a little overkill and you'll realize that there really isn't a point especially the difference between angular and react i would encourage you to go with react it's much more widely adopted um and a lot more of like some popular open source projects like free code camp um i find it a little bit easier to understand and like i said do react then view or the other way around do view then react that's my personal opinion but i would refrain from going through all three it might be a little overkill um all right guys let's see what is happening is source being edited is that why does i don't think that that would affect it but what is source okay a and b and then array guys i don't understand what's going on let's um go back we'll run node seed one more time and we'll say node oh you know what it might be i think it has to do with the std out let's see maybe that's it let's unlock the code run the console ah it says source is not defined i don't know why i see the console says source that every is not a function but array had every is a function oh gosh this is really confusing guys i don't know what's wrong well then i'll just get rid of this line i don't know what's up and that doesn't make sense i think it might have to do with how we're spitting things out of these tests because obviously it's not just running so they might have to do is the way like what is being passed through um i'm not exactly sure we'll get rid of that and the other ones are passing so we're gonna one more time run node seed and that is our took us a while but that was our first challenge um for this set do a little restart um let's keep pushing through a little refresh i mean i don't even know why we'd have to test source to begin with it's not being it's not being written by the user great all right guys we're on to the next one the structuring assignments to pass an object as a function's parameters in some cases you can destructure the object in a function argument itself consider that yep okay yeah it does all right let's see what this wants us to do use function argument destructuring i think i know exactly what it wants basically just right max min um yeah all right we'll run our tests just so we have our code saved and now let's get to writing them oh something hung up yeah let's just go gulp being gold yeah stephen is very right um you just if you just you know one it's really easy to learn another and um if you know something in coding like if you learn python for example if you learn javascript do a well you can take that directly over to python and then when you know python really well you'll be and you have that object oriented mindset you'll be able to pick up java or c plus or c sharp and you'll be you'll be perfect um if you don't mind me asking how old are you i do not mind i am 19 years old cool all right let's test these things assert stats as an object uh sure we can do that type of stats equals equals equals object yeah go go 19 cool all right and on to the next it's an easy one let's do another another easy one here assert that the value half is equivalent to 28.015 no sorry half is have i had any coding internships jobs um i do i have um i started off as a web developer in high school part time and then from there i did a lot of um did a little bit of freelance on a lot just a little bit of freelance and then i went to college or university and learned a bunch of new programming stuff joined some clubs went to some events like a hackathon and then from there i built some of my own stuff and then did some open source and then recently i accepted a position as an intern with microsoft for next summer so going up cool all right let's check destructuring was used we need to test for this line right here so let's do some write downs right we got parentheses empty whites optional white squiggly optional the word max or technically not the word max we can just do we'll just do word because that matches a single character though right there we go cool and we'll do another one like that with the optional white spaces in between and another optional white space close it off white space parentheses and thank you very much sammy i wish you the best of luck with your with your uh endeavors too all right let's keep going through so open that up or escape it optional that optional word more than one optional comma optional word optional escape it optional close it and we'll say destructuring was used all right have a good one man thanks for joining us all right save that and let's do over here run node seed now that we will restart refresh unlock the code run it half is not 28.05 hmm well maybe that's not the right math so let's see 56.78 plus it was like oh well i don't even remember i can't remember it ah all right let me just go ahead and do it in node 56.78 plus negative 0.75 divided by 2. i don't have these let's go over here okay that should be that but it's not so let's find out why what is half let's check our console half is 28.015 so i don't know why this is failing well half is a oh i see ready so half itself is a function not just a variable so we actually have to pass it the variable stats and now we have to say half stats is it all right there we go restart the server refresh the page unlock it and run it we're golden all right we're flying through these onto onto number 18. a new feature of es6's template literals gotta love template literals use temperate little syntax with backticks to display each entry of the results object of the result object's failure array each entry should be wrapped inside a list element with the class attribute text warning whoa what is this asking all right if we're going to help this challenge out here it's a little confusing but we're first of all i'm going to call this result display array so people get an idea that they're actually dealing with it right here each entry of the result objects failure array each entry should be wrapped inside a list element with the class attribute text code warning comma and listed within the what's the variable name result display array great okay so i'm going to do result dot failure dot map now we're just going to pass the string into a anonymous arrow function and this is just going wait yeah map map does it right yeah actually we're gonna have some fun here i'm just gonna get rid of that and i'm just gonna one line it yay for one lining okay so to start off it's gonna have a li class equals text warning and then template literal v and then close out the li all right run it yay we passed we didn't do anything actually wow all right um it looks like this is a very literal challenge so it seems like we can kind of be stricter with our tests result display is a string no that's two i'm not gonna put no we're gonna we're gonna do this way i like the way that i did it making executive decisions when you're writing the code you get to make the decisions we're going to say that result display array first of all type of is i believe it's array oh it's object like that well it's better than it being like a string so is a list containing code results and we'll do a little fun result failure messages we'll say and result display array dot length is three that's a good enough one say our message is here we'll just grab this okay get rid of that and now we have to test for desired output ah okay um there used to be a way to provide a there there there was there may probably still is they just don't know it so i don't want to deal with it right now but i know there's a way you can provide a solution that you can test theirs against um but i think for the instance of this i'm just gonna do ah you're ready got every value it's going to equal value needs to equal and then we're just going to use we're going to use the exact same thing but and then instead of putting v here we're going to do what is it called result dot failure i result display array is the desired output attempt to test template strings were used all right how do we do that you ask well simply put we're going to need right i know we're going to use code.match and then the message okay so they need to use template literals along with the blink stuff um but i don't want to like limit them this is a tricky one because there's many ways to do it and some valid ways and i don't want to discourage can't be too strict but also can't be too laxed so what if i can definitely at least test for what if we did like we want to test the code for the backtick then potentially oh man excuse me that's the line that we want them to use is there any other way to do it they could concatenate but that's against the rule we're against the rules so i think we should just test for this literally coding and caffeine i could use some caffeine god that'd be a great it'd be a great thing to have right about now um maybe maybe if we if we go for maybe when we reach the next five i'll go make a cup of coffee during a little break all right let's copy that and let's just plop it in right here oh this is gonna be tricky one because i don't know if i have to escape everything in here i think i gotta escape those let's just run this through real quick over here ah we gotta put one here too escape it and then we also need to escape the backtick because that's important okay and then if this in this instance we would have then that does not match hold on so i can oh it's cause it has those in it there we go cool okay so snag you put you in there and we gotta just go back through and double tick i have a bunch of these those don't need to get double ticked yeah a big huge cup of coffee yep sounds sounds about right um i mean i believe every single one yeah you can't do that because that's that's for the text all right guys template strings of course used where is that here we go all right let's go for it i haven't tested this one yet great work let's run the test once just to make sure it's saved and now refresh unlock the code run the test pray everything runs uh things broke result display array not defined ah everything broke now result display is not defined what oh ah excuse me there we go guys all right that's number three two more and i get a cup of coffee let's do it all right es6 adds some nice support for easily defining object literals what are object literals oh oh oh i know what this is all it's asking us to do is just use this so basically we're going to test for i know what i'm going to do well let's see what they say test that the output is named zodiac hasbro 56 male test no colon is present yeah so we'll test we also uh it's an object so i technically can't i shouldn't test for order of things cool let's do this so let's first run the test so our code gets saved and then we'll go through here and write some tests all right assert that the output of create person uh oh we needed deep equals oh let's see how a good learn js book um i don't what's books you can read um learn es6 the hard way i think that one's free online has some good stuff in there eloquent javascript is also a good one um it has some as i don't know how updated it's been it's been a few years since they released eloquent i'm not sure if it's been fully updated especially not the es6 um maybe it has can't remember um also yeah mdn is a really good one i'm i mean i actually have it open right now it's it's just my it's my goto i find their documentation very nice um i never read the w3 school's documentation anymore it's i strictly go on mdn even for html and css um and then steven asked how did i learn javascript this has been the biggest roadblock for me i feel like i learned relearn and get nowhere ah this is a great question um first of all it's like practice makes perfect just um i started off with code academy i think the amount of javascript tutorials i've done probably is like way too many i think i've done one on a code academy i've done the free code camp curriculum i've done the w3schools thing i think they had a curriculum i've done udemy i've tried like coursera as well as um i think even treehouse for very brief time so i've tried a lot of different resources i find udemy worked for me so when you first when you find the resource that works for you keep going back to that resource um udacity that's another good one i think they're just a little bit more expensive sometimes and recently egghead io they have a good they have a good curriculum of stuff but again they have a little bit of a price tag so you figure out your learning resource you go through the videos and then then there's an aspect of putting it to use you really nothing will really stick if you don't use it and that said you don't need to use it all the time but you need to apply it so i think the difference of use and apply is sometimes people miss you need to apply what you learn and you can do that through many ways you can start side projects you can update projects you built while learning you can also contribute to open source now i tend to do the two of them i contribute to open source as you can see and i also write my own projects i believe i have i have two actively developed projects active actively developing projects right now both in javascript both with with react and both of them are quite different but use a lot of the same features so i'm doing a lot of new things for each of them for example one of them is going to have a very awesome authentication api using auth0 which i've never gotten to play with before um so i'm learning by applying my javascript skills to that and uh the other one is strictly just a lot of database stuff so i'm working with a lot of data uh yes they both are i think i can actually believe one of them if you guys um just bear with me a second i'll get up i'll show you guys my github and i'll put the links in the chat so you can see the projects that i'm talking about one of them is cookie jar it doesn't have any code just yet and the other one is viking honors manager so here is one of them i believe it's not on master yet i'm still working on integrate um on an integrate method or on a on a branch to integrate a database into it so that one the master branch on that one is outdated but then i also have this new project which i'm doing a lot more planning on but has if you look in it there should be some pngs those have a mockups for stuff that i plan on adding so yeah those are the two projects that i'm currently working on both open source but probably not as uh nicely open source as some other projects are all right back to the coding we were looking at this before yes we got to assert that create person well we should probably just copy this oh what are the objects the object the quality i think object has like a dot equals method but i'm not sure oh are they private repos oh um let me see uh sorry about that i think yeah i'll make um i can make cookie jar public cookie jar is public i believe yeah cookie jar is public um but the but the viking honors is not um so the uh what's it called the viking honors one is not and that i think i need to keep it that way because it's going to be for um some the summer summer camp that i work for uh yeah maybe i don't know how to tell if it's blind or not uh nope it doesn't seem like it's private uh i get a 404 for which one maybe it's maybe it has to do with um the white uh youtube does links but if you guys look me up on github i have a ton of repositories and then one repo is called viking honors manager and then another one is cookie jar so oh that's incorrect the other one is called that so those are the two project names on github if you wanted to look them up cool we were looking for object equals but it doesn't really do that it has something else yeah keys okay all right yeah youtube i don't think you i don't think youtube supports links and um it's chat or if it does it's weird about it let me see real quick okay cool let's keep moving forward so we're going to do some real funky javascript so first we're going to wrap our result object in object.keys and we're going to say dot um for oh this is a hard one i think i can do const name equals zodiac hasbro constant age equals 56 and then constant gender equals oh wait this shouldn't be a string gender equals male and then our function well now that it's not a function now it will do return object.keys that create person um name age gender dot every value oh well this is now this is every key all right every key um needs to be the value uh wait i think it might be better if i did const result bear with me guys we're getting there there might be a better way to do this so if anyone notice if anyone knows make sure to make sure to say so i'll keep tabs on the comment section of this video too after the fact so if you guys are watching this in the future um definitely give me some input i'd love to hear it and uh i'll definitely you know everything can get changed so let me know and you can also review it in github let me know if there's things that you want changed all right so that's the result that's what we want and then we're gonna go ahead and copy those three things again place it into here and then we're going to say the every key and we want the the result to be sorry guys now we're gonna all right how about this we do constant p person equals and then we need to return object.keys person dot every key i'm going to say person uh key is going to be equivalent to result key all right okay i think that does that wow and what's what's the intended message the output is okay okay great and now let's do a neat no we have to agree to finish up with an easy one no colons exist anywhere in this one no we're used all right guys wow that was this was a harder one could also be the caffeine that i need rt oh cool the link works your name is also very familiar i believe there's a character in the sherlock holm show i was watching that today and i think he has your name no expected expression got keyword const all right we need to wrap this in a function indeed yeah it does have your surname i knew it don't ruin it for me i haven't finished watching the episode all yet let's see that's that and let's read oh nope i always break gold can't just oneup it you gotta retype it every time all right here we go fresh fresh refresh keep going try again here we go there we go unlock it run it and it passes carlos can you use gulp watch yes so um gulp is watching but even if it was watching the json files we're it's um how do i explain this we need to rerun gulp when the database gets updated not when the json file gets updated so when we the reason why i'm doing i update the json goal probably already refreshes i wouldn't be surprised if it's not um but what at that point the database hasn't been changed so it doesn't matter so when we run node seed it redoes it like re entries things in the database and then you refresh gulp and it requeries things and then it pumps it all back into the page um this is just a development it's a way the development works it's kind of it's not optimal um and hopefully it'll change in the future but that's just how things are going at the moment um give me one hot second also we just finished another challenge so look at us nothing can stop us now all right great that is four right we're on to the next one one more and then i get to get coffee and then i'll do probably five more and be done for the evening afternoon when defining functions within objects in es5 you have to use a keyword function as follows es6 you can remove the function keyword and colon all together when defining functions and objects here's an example of the syntax we factor the functions that gear inside the object bicycle all right so i think all we have to do is write it's like here okay hold on a second what is this like tess the output is sending requests to yanoshima moto who is that is that that's not the bitcoin guy is it who's the no that's something with an ass right who created created bitcoin yeah that's satoshi nakamoto yanoshi mimoto well no idea but let's keep coding i guess um i guess he was the guy that uh created this challenge in the first place all right oh god let's do it all right well it sounds like this guy doesn't actually know what he wants me to test but we'll do it anyways basically we want to verify that set gear still works so let's do a before and after test um so we're going to say can't or we'll say actually we don't have to we just do bicycle dot gear equals equals equals two and and by sickle dot set gear three uh oh we can do i'll just do this don't get too complicated we'll just set it equal to like 48 and then we'll say oh let's do we'll use a function and we'll say return bicycle dot gear equals 48. yeah that's good message um code set gear is a function and changes the gear very oh no code gear variable great and we already wrote this one so let's just snag that all right and node seed give it a few seconds and we're going to restart gulp refresh the page you see the issue is this won't work because gear is using it so what we're going to do is we're going to check that set gear doesn't have it with it so traditionally set gear would have looked like set gear right what's the original uh and they would have to have the function so we're actually gonna test for this little bit right there okay i know i know what we're doing um what's this thing called what would we call this declarative function was used and we're going to say code.match well we'll start with the colon and then we'll have the optional white space the word function and then open close with a optional white space in there we'll make sure that that doesn't exist okay yes victory is ours another five completed let's uh commit the work and then i'm gonna take a very short break to get some coffee and then get right back to it so before i leave let's first shut down gulp then shut down run git status add our challenge mpm run commit we're going to say test challenges es6 challenges what do we do we did 16 c16 probably through c20 at this point which one is this use class syntax to define a constructure function use class syntax it that's 21. so we did c16 through c20 nothing else necessary and then get push origin feature add es6 tests all right and that does it for those let's go back over here give it a minute it should pop up and then we'll see what's to do next oh no is it gonna refresh for me usually it does automatically there we go awesome go through here guys look at all these look how great we're doing getting them done awesome all right and this probably just passed oh no it's rolling running through there how many more do we have we only have seven more i mean we probably could finish it all right well i want five minutes and then i will be back to push through these last seven and then that'll be all the tests we're in for the es6 challenges so um yeah be back in five let me just type that in here can i say something i guess i can't oh here we go be back in five minutes i got coffee and now i'm back it's time to do some awesome coding and finish up these challenges all right i think i got a couple questions hey how can i become a contributor like you if we could camp yeah so quincy sent out a message on medium um carlos definitely right there's also a contributor channel on getter um i'm gonna have that on this browser but there's one on there so you can totally use that and i don't think there's really much else to it a lot of stuff i'm doing today is what like we need when it comes to contributing so if you have this kind of javascript skill then like let us know we'll get you set up and it's a lot of fun so far today we've worked through basically 11 through 20. we've done these 10 challenges we've done a little bit of q a with them try to like test out what they're actually asking and then we need some edits and things and wrote some tests and soon i'm going to jump right back into it with the next seven and then hopefully when we finish these seven um i'll be able to merge everything into the actual repo and we can get some people running through them and getting some feedback and i'll be able to make more changes later on there's also a user in here earlier who was literally named like coffee and cafe or code and caffeine or something and was like yeah could use some of that okay let's get back into it so we'll move this up here for now okay let's see what we got use class syntax to define a constructor function and use getters and setters to control access to an object understand the differences between import and require i actually don't know the differences between those two i'm still confused about it so it'll be a fun one to learn use export to reuse the code block cool use ampersand or use star to import everything from a file you start to import everything from a file import a default export i think i got a duplicate in there so we'll get through that but all right we are back to it let's run d beta base then we'll gulp awesome and go back to the bash and now let's get back to coding es6 provides a new syntax to help create objects using the keyword class this is to be noted that class syntax is just a syntax and not a fullfledged classbased implementation of objectoriented paradigm unlike in languages like java python ruby in es5 we usually define a constructor function and use the new keyword to instantiate an object the class syntax simply replaces the constructor function creation yes it does notice that the class keyword declares a new function and a constructor was added which would be invoked when new is called to create a new object use class keyword and write a proper constructor to create the vegetable class the vegetable lets you create a vegetable object with a property name to be passed to the constructor sweet sounds good to me all right class vegetable and a little styling going constructor we'll just call it name this dot name equals name oh can you guys hear the fans yeah they're kicking in aren't they yeah i'm actually working off a macbook uh just just a standard macbook pro i believe so this thing's doing uh quite a lot um you know coding is live streaming off and coding at the same time i think it's running an instance of a database and a local server for the for the local environment and it's running a browser my webcam microphone yeah we're pushing it to its extreme it's a lot of fun all right let's see constructor name great all right that should work and we're gonna run the tests of course they pass there's none there but what should we test let's go over here test the vegetable is a class uh okay i want to see something real quick if i wrote class x this dot y equals z yep what is type of x function but we could do like function dot constructor oh here we go oops type of x dot constructor there we go okay so in order to test something as a class we can do assert that vegetable type of vegetable equals equals equals function and type of vegetable dot constructor equals equals function and then you put the message in here and then we say vegetable is a class why don't we use mocha instead of writing them by hand you you're asking the my favorite question ever because i would absolutely love to be writing mocha or tap tests um but i just don't think that's how this works for exa uh particularly in fact we actually may be using mocha underneath the hood um but in order for the whole curriculum to be able to just kind of be generated into any database anywhere like through like json files and then be version controlled via json files um i guess the developers quincy and bouncy like the guys who um like really originally sat down and put most of the original work in i believe the other guy is um what's his name berkeley yeah berkeley and quincy when they like pushed through all this through they were like this is how it's gonna be and um that's how it is it could definitely change in the future but um this this style is the same we have it's basically just the word assert like you're asserting something and then a true dash false and then a message here we go thank you all right message that's good now we need to assert that the class word was used so essentially well yeah okay i know what i'm gonna do i'm just gonna do a code.match guys i'll just do class it's really that easy test that other objects could be created with the class sounds good assert um what i want to do i'll just do like const a equals new vegetable uh should we do something stupid should we like put like apple yeah well we'll have some fun with this so we'll say const a equals new apple and then we'll say uh return type of a equals equals equals object it's four equals it's too many yeah i like that um first i'll delete this let's make that it will say message i forgot kept that other objects can be created using using other instances of vegetable can be instantiated right let's run node seed restart the server refresh the page unlock the code run the test on the next one let's go all right we're on to number 21 22 now so what kind of coffee we drink in um i think this is just some house blend that my family purchases just black i don't take anything in it what's your what's your kind of coffee i'm also i'm also a tea guy i like green teas and um different herbal tea i'm not a fan of black tea but it's uh yeah usually usually you'll find me drinking tea during the day i don't usually do coffee unless it's in the morning but someone got me thinking about coffee so i had to go with it all right getters and setters ah ground at home very nice yeah black black all the way i had i used to do ground my own and they used to have a french press but um that's not with me at the moment so back to just kcups at the mo right now cool uh coding coding coding these are classically called getters and setter methods yeah we're getting some object oriented stuff my favorite setters are meant to modify the value of an object's private variable based on the value passed instead of just could involve calculations or even over any previously completely get writer set writer see i've never actually used this before this is really cool um someone just asked what do you recommend me to do when i get stuck depends how are you getting stuck you just don't know how to um you know implement an idea or are you unsure about the idea in the first place um i guess a general answer would be mdn uh go to the docs look up documentation um i don't stock overflow is great don't always have to go there immediately um sometimes just figuring out i've spent i've spent i mean it's crazy to admit but i've spent sometimes an hour or more working through one little bug just because it was some i was i had a misnamed variable and i just kept overlooking it so um you know i guess another tip is take a break you know look at it if you can't figure it out do something else or go for a walk do something get a glass of water come back and i guarantee you you'll find it within seconds um strangely it just works like that so let's look over here so i believe that this under underscore means private they don't seem to go into that which don't know why but i guess that's an aspect here um oh yeah it seems like it notice the syntax we're using to invoke the getter setter they're not even functions we just oh oh okay so guys this is cool it's like properties oh this is actually this is actually a really fun example all right so we're going to create a class thermostat how does this do we can use the getter and setter in the method i don't know constructor we'll just call it temp oh we'll call this fahrenheit let the temperature hold on a sec i gotta think through this um oh i missed all right so interesting um so we're creating the thermos is going to be a new thermostat at 76 degrees fahrenheit and then we want to get the temperature is going to equal thermos dot temperature which is going to return which is going to set the temp variable to 24.4 so we need to have so hold on a sec i see okay so we'll do a get temperature and this will return oh we gotta do some math they gave us the formula interesting they gave you the formula to calculate fahrenheit wow this is this is an incredible uh challenge um quick i see a question do i invest in bitcoin i do not i do not have a single penny invested in any cryptocurrency bitcoin litecoin ethereum and though i am very um i like to say i'm pretty well educated in the field and have spent a great deal of time reading white papers and reading into it but um it's just not not something i feel worth investing at the moment and also it shouldn't be treated as an investment it should be treated as a currency and currently it is not so i don't i don't exactly support the use of bitcoin or at least the investment in this in bitcoin at the moment um that's a whole other conversation so let's see here uh our our api is going to deal in fahrenheit's so this guy gave the formula for fahrenheit with celsius but we're feeding in fahrenheit so we're actually gonna have to reverse this formula guys we're gonna do some algebra this is actually hilarious i haven't done algebra in way too long did you get for going to college and finishing your math minor way too early all right we're going to start off by subtracting 32 and then multiplying by 5 and then dividing by nine ah yeah all right so it's going to be five ninths times the quantity fahrenheit minus 32 we're going to equal celsius so we're going to reverse that over here so we're going to say oh wait we're over we're down here now we're going to say c equals 5 9 times quantity f minus 32. can i code if my math is the worst one possible um you could definitely do web development um html css javascript a lot of stuff like that could definitely be done without math but if you're looking to go into object oriented programming or data then you need math um even uh even basic algebra and a background in algebra with a back and then a little bit of discrete mathematics and you'll be fine for most programming but if you ever really want to get into like data databases and like um you you really want to have a decent understanding of so at least some higher other level math concepts otherwise your program will be limited uh one aspect to this though is algorithms and data structures if you don't have um a pretty good understanding of like precalc at least and like calc one may be then sometimes analyzing algorithms and making things as efficient as possible can be uh difficult but it's definitely not um you know impossible it can be done um but yeah that's usually why they're coupled because they go in hand in hand really well together all right put the fahrenheit in there now and now with that formula out of the way we can say what other free versus resources do you recommend while i'm doing free code camp um i mean i would recommend free code camp um read medium the blogging platform find follow blogs uh including the free code camp one uh youtube has a couple video guys i don't watch any of them but i know they exist and build side projects i always recommend having one side project i have two right now um we talked about that earlier today but definitely side projects those when you apply what you're learning that is even if you're not planning on launching anything or selling anything even if it's just like something that you use and or you build it and then you you archive it for forever the application of building something with the skills you're learning is instrumental to your future success all right let's do 5 9 times this dot underscore f minus 32. and we're going to set oh wait i think i just did this wrong uh this is killing me um no i did this right but setting it you're going to do this dot f oh oh but you said it so the ap this thing its api it stays as fahrenheit inside it but when you set it or get it it's always celsius i see all right so with that we're gonna call this c and now we know actually i gotta go put that calculation back s times 9.0 divided by 5 plus 32 i should probably do that too over here and now all right that should be a good enough hint wow all right guys oh let's do this all right and then we want to try i'll just do the type of thermostat equals function and and type of thermostat dot constructor equals equals function i used this is if you're interested in where i learned this little trick this type of and the type of itself um i was actually writing a asynchronous method for a back end library called fastify and one of the lead maintainers showed me that the best way to check if something is a asynchronous function is that it has a dot a dot then callback or something along those lines you can check that just based on the way functions are passed around within an application all right we're going to test i've already done the test if class keyword was used so we're going to snag that and test that other objects can be created with this class all right i'm gonna quickly copy the message i used here though i don't know oh wow sorry hold on here we go how do you want to how do we want to test this um oh yeah silly me someone's going to look at this code in the future and be like apple's not a vegetable you're gonna be like you're right it's not oh let's do 32. see ready we'll know that their thing is working so we can say return type let's choose t and we'll verify that t dot temperature equals e equals equals zero because 32 degrees fahrenheit is supposed to be zero celsius all right proof oh no it didn't save my work okay fine i'll rewrite the entire class for you guys right now do i need a function declaration here yeah i do and then this will return so this needs to return yep c for celsius and then and we'll be able to say this dot f oh oh and get that semicolon in there let's let me run the tests thermostat okay let me just in case this breaks again let's refresh uh that's not what i wanted their turmoil supposed to be thermo and now we run node seed and rs cool victory yay hi timo yeah we did and uh we've gone through um 12 es6 challenges we're gonna do our aim is 17 so five more to go it's been uh quite a quite a ride oh this one looks like it has a test just it's not working so we'll see okay in the past the function required could be used to import the functions and code and external files and modules while handy this presents a problem some files and modules are rather large you may only need a certain code from external resources es6 is a very handy tool known as import with it we can choose which parts of a module or file to load into a given file saving time in my memory consider the following example imagine that math underscore array underscore functions it has about 20 functions but i only need one count items in my current file the old require approach would force me to bring in all 20 functions with this new import syntax i can bring in just the desired function like so using object destructuring a description of the above code ah cool there are a few ways to write an import statement but the above is a very common use case the white space surrounding the function inside the curly braces is the best practice it makes it easier to read the important statement great note the lessons in this section handle nonbrowser features import and the statements we introduce in the rest of these lessons won't work on a browser directly however we can use various tools to create code out of this to make it work in browser yeah like babble and the appropriate imports add the appropriate import statement that will allow the current file to use the capitalized string function the file where this function lives is called called string functions in this same directory as the current file all right well i would write import capitalize string from um yeah so i thought string functions so i thought whoa all right uh what is it doing here uh it looks like they just never finished their not the declaration uh what should we call this uh valid import statement cool timo i love your icon the monkey is very cute the choir is not defined ah okay this seems like an issue challenge seed i am a little confused so it asks us for this do i have to use like use strict is that oh nope i mean right there you strict the t in the word the in the note paragraph should be uppercased where ah nice catch quinn so it seems like this in particular test wants the require word and it's not running without it but this is not i don't i'm gonna flag this one what number is this understand the difference between between import and require this is 23 okay so require is not defined so i don't know why this is doing it um but i have an idea that it has to do with the fact that we're trying to use like a import statement in browser and it might be something on the back end i don't want to try to delve too much into it let me just make sure it wants i why are they putting i in there i'll probably just use g and they're asking for that anyway yeah sure yeah team you think it's back end okay well we wrote the test case that's really all we need for that one so we'll move on to the next one keep pushing through let's see we only have four more to go i think this is the one that i create and export fallback with export default yeah i didn't write that one there i'll go copy that yeah luminous you're right that's a good point second note paragraph also has a typo let's see i can go back to this we'll keep working through it great note cool that's that i'd like to uh take a luminous good good catch teemo and i want to take a luminous um point into this because that is a very that's that's very true um and that this seems to skip right over that um the only thing though is what if we don't what if we're not using a a node a um an npm project and we don't have known modules could the with the import still work i mean maybe we can make we could probably write another note about it um but let me see so now that i've done that let me write the note paragraph and then we can go from there we can run the test again and see if the the dot forward slash fixes something um even though i don't think it will because the require still isn't being loaded alright let's write strong note um in most cases oh hi siri sorry guys um in most cases the file path requires a um before it otherwise comma node will look for a dependent or will look in the node modules directory before it otherwise node will look in the node modules directory first trying to load it as a dependency great i think that justifies that once we finish once i finish writing pretty much getting the base for all these tests done um making this this kind of part of the curriculum like usable uh we're gonna want some qa so if you guys um are pointing these things out now we have 27 tests to go through could use would love the help so but that's step two let's uh unlock the code run it yeah all right that's fine this test isn't running because it's having some require issue i'll make note of that let's move on to the next one though use export to reuse a code block oh well let's code for my trials in order for this to work though we must utilize one of the statements that goes with import known as export when we want to we want some code function or variable to be usable in another file we must export it in order to import it into another file like import export is a nonbrowser feature the following is what we refer to as a named export with this we can import any code we export into another file with the import syntax you learned in the last lesson here's an example capitalized string export had export functions how to export variables alternatively if you would like to compact all your export statements into one line you can take this approach either approach is perfectly acceptable below are two variables that i want to make available for others file other files to use utilizing the first way i demonstrated export export the two variables oh so we can he just wants the words export written here and here all right there we go i'll get rid of the eyes again oh and throw in this time he has the at least has a semicolon on the back but we need to write in message um let's write code foo food you guys know what's on my mind is exported great same deal i don't think exports are gonna work um this seems like some sort of challenge issue they're uh it's not something we're gonna try to solve this evening maybe another video or someone else does how much coffee i drink i'm so tired yep exports is not defined i don't know why um so we're just gonna add so we're gonna add exports is not defined number 24. all right whoever wrote these just forgot the right way to write the tests suppose you have a file that you wish to import all of its contents into the current file this can be done with the import star syntax here's an example where the contents of a file named math functions are imported into a file in the same directory import star as my math module from yep and breaking down that code okay you may use the any name following the import as portion of oh well first typo is that i'd like to inc because the ads is a very important part of the code cool easy peasy import star as my string module from um properly uses the code import star as syntax all right export in one line should be export in or export default export is named and that why export does not make any sense luminous i would encourage you to make a uh create a new issue and reference these challenges directly because um you're making some very valid points and uh i don't want to take full credit for him uh let me i can point you in the right direction there i'm going to keep going through what we have but definitely definitely for this export stuff um it sounds like they could they could use a nice little update so um in case you don't know just go to free code camp go to issues new issue and just go for it i believe you can also find the beta live here so you could just go to the beta freecodecamp.org map es6 and then use export to reuse a code block make sure you copy this link and go from there definitely be a great thing to add to the project cool no i'm missing something here here we go that'll fix that this test probably won't work but we'll we're not even going to try it i know they're not well actually let me get the error um so import star as my string module from come on so required not to find is the same error for question number 25. oh yeah timo i am nice catch i'm watching i'm tracking my uh battery use and stuff for my laptop to make sure things are going well and um vs code is currently using 162 of my battery which is why it's been slowly dying while we're sitting here um i believe it's the fact that i literally am running a database inside of my editor along with serving files via a local server so yeah let's move to the next one we're almost done in the expert lesson you learned about the syntax referred to as a named export uh luminous see this file has something to do on export default this allowed you to make multiple functions and variables available for use on other files excuse me there's another export syntax you need to know known as export default usually we'll use a syntax if only one value is being exported from a file it is also used to create a fallback value for a file or module here is a quick example of export default you cannot use export default with var letter const the following function should be the fallback value for the module please add the necessary code to do so export default that wasn't that hard all right same stuff this guy's just got that so let's get rid of his eye and then add our message in here so we'll say properly proper use of uh export here any export fallback i want to get the output error so i can track that this has the same exports not defined error okay oh my gosh we're on the last one forgot to mark these down one more one more in the last challenge you learned about export default and it's uses it's important to note that to import default export to import a default export you need to use a different import syntax in the final example we have a function add that is default the default export for the file malfunctions here's how to import it the syntax differs in one key place the imported value is not surrounded by curly braces default export okay cool so as simple as going import subtract from math functions yeah all right i'll run these tests we know they're gonna fail this is a requires one so we're gonna write number 27 here it's funny kind of alternates and we'll go down here guys we did it we're at the bottom of the file literally three hours later well six because things didn't work out at first um properly imports export default function method here we go all right let's do let's make sure everything looks good we're going to commit this thing and wrap up it has been a very very long live code session very thankful for everyone that got to join me today and uh learn a little bit about what it's like to contribute to free code camp all right great well uh missing a little something here ah semicolon all right we're not gonna render for that that's about that so let's wrap up one more time um i'll walk through it for the end quit everything that you're doing quit uh turn off turn off gulp run get status get status will tell you what has changed you're a git ad and you just you can add a file manually by typing the whole path or you can just do the dot and it adds everything and then normally you would write git commit m and then a message but because free code camp is awesome we have this terrific npm run commit command which has an interactive commit thing in the so we're going to write test challenges and we're going to say es6 chal and we'll do c what did we do before we did it now we're doing c17 through c27 right no sorry this was c21 through c27 and we don't need any other ones runs get push origin feature add es6 test so i'm pushing to my branch of free code camp which is origin i when i do get i always make my origin remote my branch and then my and then i might i use upstream and upstream refers to the like the master or like the one that like the developer has created so like for example free code cam free codecamp or slash free codecamp is my upstream um repository so now that i've done that uh we can go and check here we'll see we already have a notification and that means that this just got updated and that's all 27 challenges um tested and run through we still got a bit of more work to do um this was a lot of fun i'll end today just by going over here with the emojis i don't know how many of you guys are left in the chat but there is anyone left i'd love to answer some questions before we uh head out before i head out for the evening um we'll say pr challenges and i'm going to say update that comment we're going to say found issues with challenges number 23 through number c 27 oh what that was not what i wanted to do here we go nope come on work with me here uh require is not defined equals produced for challenges 23 25 27 and then we had exports is not defined produced for challenges 24 comma 26. great all right guys i am exhausted from coding for this long but i'm very happy i did it um glad having you all here this has been quite an experience uh feel free to reach out with any questions ever about open source about free code camp about coding in general i'll be happy to answer them i believe my twitter is in the description so you can find me on there you can also reach out to me through the um the getter chat for free code camp and yeah with that i'm gonna say thank you very much this is uh ethan airwood signing off hope to see you guys in the future