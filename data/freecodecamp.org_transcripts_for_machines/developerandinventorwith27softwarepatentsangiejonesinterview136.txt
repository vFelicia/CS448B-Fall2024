no one is like handing out these sorts of opportunities out of Charity like they just are not right and so if the seat at its table then that means that you earned it welcome back to the free Cod Camp podcast I'm Quincy Larsson teacher and founder of freecodecamp.org each week we're bringing you Insight from Founders developers and ambitious people getting into Tech this week we're joined by Angie Jones she's a teacher speaker developer and holder of 27 software patents she's also the global vice president of developer relations for TBD which is a financial technology company Angie it's great to have you here thanks Quincy good to be here yeah you're somebody whom I have admired uh for many years and you know you've been involved with the Freo Camp community in the past as well uh we we I think you were at lock lockdown conf back in the day yeah yes that's right yeah when uh the pandemic hit and everybody was first going into lockdown we had this conference and uh yeah it was cool to have you there too so yeah it much overdue like having you here on the freeo cam podcast yeah I'm honored to be here a a huge fan of um of you Quincy as well as free code Camp so the pleasure is all mine awesome well uh thanks for your kind words and uh I'm excited to to dive in we're going to talk a lot about your background we're going to talk a little bit about test automation which is kind of your area of specialization uh before you went into uh developer relations uh and uh we're also going to talk a lot about education and teaching because you are an experienc teacher both at the Collegiate level and through you know educ like instructional design essentially designing these uh awesome learning paths um uh through test automation University so um before we dive into all that though I just want to get a feel for your early days like what where you grew up and what your interests were when you grew up yeah um so I'm born and raised in New Orleans um actually moved back during the pandemic so I'm back home now um early days so I didn't grow up around like computers or like the internet or like anything like that so I wasn't even aware that you know technology was you know an industry that I might be able to work in um upon graduating from high school I knew I wanted to go to college but had I literally had no idea what I wanted to focus on I just really didn't um so I chose business as a major because I figured like that'll give me enough skills to figure it out um once I'm an actual working adult and um my father who was an accountant he recognized that uh technology was becoming this emerging Trend and he recommended did that I take at least one computer class Quincy so he's like you should know how to use the thing because I'm starting to see them you know in in pretty much all Industries and so um me not knowing anything I just kind of looked at the the um the course catalog for anything that looked related to computers and uh I enrolled in a C++ programming course course um I didn't even know what program it was but I enrolled in that course and um I actually like did really well and I I really enjoyed it and and so my professor um at that time recommended that I switch Majors to the rest is history that's awesome so early on it sounds like your dad was pushing you to learn about computer science and then you had uh some additional guidance from a uh from a professor who took an interest in in your future and uh business like in the United States for everybody like in our International audience like 20% or something like 20% of students study business when they go to university just because it's like a general purpose thing that you can study and people who don't know what they're going to study it's very common for people to go into business so uh you're pretty representative like I'm not sure what to study hey making money that sounds good yeah yeah yeah right right right yeah so um that's that's pretty cool so what were your um early experiences like with programming so you're at the you know the college level and you're you're learning C++ I think which is kind of like an Infamous infamously difficult to code in but very important programming language that a lot of uh important applications are written in like do you remember kind of those first few um weeks of just sitting down and trying to get things done yeah I do and um I don't know this might be abnormal and maybe I'm a a weirdo but it was it wasn't scary I mean I didn't know what to be scared of right and so um that's one of the things I was just like super naive and oblivious to it all and so I I wasn't fearful at all um and I think that set me up for Success so I just kind of went in with like this open mindset and no fear and and and just soaked up the knowledge like a sponge but I remember it being appealing to me because um it felt a lot like the challenges and the excitement that I get when I would play games at home like with my family right there's like some sort of challenge you need to kind of put the pieces together um in order to like come up with some sort of solution right right and so that that has always been fun to me and so this kind of felt the same way I remember like getting the program in assignments and like you know maybe they'll be due in like two days so let's say the course was Tuesday and Thursday right so you get it on Tuesday it'll be done by Thursday I remember like let out now mind you this is back in the day so I still don't have a computer or anything like that um as a computer science major but we had a computer lab um I remember like leaving the classroom and running to the computer lab cuz I can't wait till like start working on my homework assignment um and I was sitting there until I like did it and like one take and then we would submit these on like a floppy disc um to to our instructors so yeah those I remember like that that excitement and honestly that excitement hasn't gone away it's been uh decades later at this point point and they'll get joy when when I do get to Cod that's awesome uh I'm thrilled that you still have that that kind of Joy uh I'm sure I'm not pronouncing that word prce word correctly but like when it comes to like being on the computer you just it sounds like it's your happy place yeah I don't do C++ anymore but um yeah um somewhere in those College Years I was introduced to Java and and and I fell in love with that and and and still in love with Java yeah and we're going to talk about your Java relationship your extended uh kind of advocacy of java so not only did you fall in love with Java but you've since been a big advocate for Java a as a developer and uh have have become a known quantity among like Java developers and uh been a big part of the Java ecosystem I want to talk about that but one thing that you did when you were in University is a lot of people they graduate they go into industry immediately you decided to stick around and teach for a while can you talk about that yeah actually I did both so I went um into the industry right after uh undergrad and uh I went to IBM and I worked there as a software engineer and I'm I I have I don't know where I recognize that said I like to teach maybe I would help students or something like that but I mean I didn't have formal um training or anything and teaching right and when I first graduated you know you have all this time on your hands now that you're out of college like work is 9 to 5 where you're used to like going to class from like 9 to 4 and then um and then you would work on homework and all of this and so now all of a sudden I had all of this extra time because I didn't have homework and stuff to do so I remember um signing up to do like online tutoring and I would help uh like high school and college students with uh with math problems or uh computer science problems and I think maybe oh I really like you know helping other people learn and uh teaching and so that's when I went back for my M's in computer science and I did that while working at IBM I did both of those yeah okay awesome and this is great because I wanted to establish like a kind of a timeline uh so you uh worked at IBM and my understanding is that you just started out kind of like doing more software General software development and you were able to specialize on the job and this is something that I often tell people uh don't worry about specialization when you're just learning to code and trying to get your first developer job I often tell people try to get a developer job job and then see where they put you and which direction they push you in and then you can kind of specialize on the job while you're you know making money and not just while you're kind of like working a day job trying to get into Tech like I I I feel like people premature optimize for oh I want to be in security but it's much easier to get into security I guess once you're already a a developer like a general purpose developer right would you would you agree with that sentiment I would but I also think that having like some sort of specialty kind of opened the door for me as well and this was unique try to apply it like across the board but yeah um when I say that I like really love Java like I really love Java and so my Java Professor was um someone he had you know he was he was like this young Professor and he was in love with Java and his passion for it just kind of was contagious but what he did was he's he stayed back during the summer um and did like this Java boot camp for anyone who like really wanted to go into the depths of the language and he did that to prepare us to uh take the job the Java certification so back then that's when sun still owned Java so it was the sun you know Java programmer certification and so I did that um now during this time Java was actually um relatively new and so this is when we started seeing like these big corporations such as IBM begin to adopt Java as like a language of choice and so me this put me in a really um advantageous position where I was able to use that that specialty um um as a weigh in right now that doesn't mean I'm like Java Guru in IBM or whatever but it did hope open the door and you're right I did kind of work as just general purpose software developer and even like as much as I talk about Java right now um I've had to code in various languages throughout my career like right now we're not even using Java in my shop like so it's like JavaScript and um and and Swift and like all of these other languages right um and so I I agree with you that people shouldn't like limit themselves or box themselves into one specific technology um as the one all be all and that's their only shot but like put your eggs in a couple of assets make sure you understand the foundations and can work um in any capacity and and of course you can have your favorites like I do but um don't limit yourself to that right yeah so tell me about like the the first few I guess months at IBM this giant stored American uh Computer Company software company and now doing all kinds of Consulting Services as well but you know just imagine uh like like take us back to what it was like joining you know perhaps the biggest tech company at the time or or one of them I mean this you know this this was like the early 2000s probably 90s I'm I don't want to date you too much early 2000s don't P me that far back quiny um it was it was exciting like I I I I remember feeling like super excited that um and I actually did a couple of internships at IBM as well as Boeing while I was in uh undergrad and so um I was able to kind of get a taste of what life would be like there um and so I knew that it was a super Innovative company and so I was really excited to join there were like lots of smart um who were working on really cool things and so the first couple of years um they were great like I got to learn a lot I got to work with like you know some really brilliant people um but it was also intimidating so you know it was much different than my college environment where we were kind of all learning together and you know remember I talked about how oh there was no fear I didn't know what to be fearful of well that really changed in the workforce when you have like you know these amazing distinguished Engineers just kind of walking down the hallway um and you're like on a team with them and expected to contribute and so I remember um print uh from everyone like you know I'm young I'm I'm a woman of color like I don't know I just felt like I like not a sense of belonging right um and it's not that anyone like made me feel that way it just was a reality of what it was like there there aren't people at the table like me and so it was a bit intimidating and um that actually came back to bite me so um I would be hesitant to like share my ideas uh or speak up in meetings where you know we're brainstorming Solutions because like some of the ideas that I had were like really different than what everyone else was was suggesting and so you know you automatically just assume like oh my idea must be pretty dumb or whatever so I wouldn't speak up and uh I remember I got uh my performance review and it wasn't good and I didn't understand that back then because all you know on time and by deadlines and yet you know there's this bad review that's in it's and I remember that feedback was like it's not about what you do but how you do it and you know you're you're you're you not talking in the meetings you're not engaging with the teams you're not collaborating like those I remember just saying to myself like all right well I guess I have to say my dumb ideas or I'm going to like get fired but at least at least I said something and they won't be able to give me this feedback again and so I started sharing these uh quote unquote dumb ideas and uh people thought they were brilliant actually um and different and Innovative right and so we got to the point where I started patenting these ideas um within IBM and so that was a a a nice lesson for me I'm glad I had it like earlier in my career um so that I could course correct and uh from there I mean now I I if I tell people that I work with this story they probably wouldn't believe it because like I'm always speaking up now and like you know saying when things don't sound like a great idea and when they do you know yeah that's that's a really cool um you you went from to just like not not being so I guess concerned about what other people thought if it sounded like a good idea to yourself maybe there's some Merit there maybe it's worth sharing the idea uh I mean what would you say to somebody else who's coming into a Workforce where they are underrepresented and they may be feeling similar kind of trepidation about sharing their ideas or speaking up because they're like I'm surrounded by all these smart accomplished people like who am I to like have anything to say I would say that um no one is like handing out these sorts of opportunities out of Charity like they just are not right and so if the seat at is table then that means that you earned it and you know um it's warranted and so you're there for a reason and and step into that those shoes and you know um and do what you came to do like when when you went to that job you had ideas of like the impact that you were going to make and when you got there like yeah maybe it doesn't look like what you thought it would look like and maybe there's not people um who are like you in your immediate team but that's okay um you bring a unique perspective and what I've learned is like my differences are my superpowers right and so your cultural upbringing and how you experience life and your outlook on the world may be different and that's that's a great thing that's a great thing yeah awesome uh if you found yourself with a seat at the table you've earned it you earned it I love that because it just kind of gives you that that agency to push forward and it's like you have a mandate to share your thoughts because hey they they gave you the the podium right they gave you the mic like what you gonna do with it that's right yeah awesome well that that's really cool so uh of course you know you've done so much since IBM I do want to progress through that but but it sounds like those first few years at IBM you really found your footing and that this weird kind of out of nowhere uh negative feedback that you received was actually like a profoundly good thing in terms of uh you you know make a Mark um you you said that you started patenting things I do want to ask about that because I don't know anybody who has 27 patents uh I think like there are probably some people in the free C game community and have like one or two patents but like you're like very prolific in getting uh software related you know processes and things like that patented can you just talk a little bit about what that what your first few patents were and like what kind of what that process was like in case anybody has an idea and they're thinking about getting it patented yeah so I remember I was working on a brand new product um it never actually even saw the light of day um but at IBM you know we would we would always work on like really Innovative things and um you know pushing the needle um in regards to software and I had the pleasure like doing my internships to um a distinguished engineer at IBM so that's like one of the top levels you can get to as an engineer um within the company and so I worked with him every day and his work was very different than what I expected um a corporate job to be right and so at that level he wasn't like sitting around and coding all day he was doing a lot of brainstorming and a lot of innovating with other distinguished Engineers like I remember um just frequent meetings and whiteboard sessions and things like that and so I think I picked up a lot um over that summer about problem solving and thinking outside of the box um to come up with like innovative solutions and so I carry that with me um you know throughout my career and I'm always trying to work on like The Cutting Edge of tech because that's that's what excites me right um there's so many problems that are yet to be solved and uh technology is constantly improving and evolving and it's really fun to take like maybe even an old existing solution and apply it to a new problem and see like what comes from that right and so um a lot of my ideas or the the first patents were around like you know software Improvement and so it could be things even tools that I was using so email tools I have a whole bunch of patents and like collaborative software so better ways that email could work better ways that like um chats systems and things like that could work and especially across different systems um I remember when Second Life first came out do you know life is okay who don't know that's a virtual world um they call them metaverses now so Second Life um I remember like as me and like some other folks at my job we would kind of just set you know these lunchtime brainstorming sessions where we you that we're not necessarily working not but like this second life thing was fascinating so like wow I can I can basically have an avatar representation of myself and go like experience a a virtual world while I'm teleporting across this thing and speaking to people like this was before you know like Prime Time social media like before Twitter and like Instagram and stuff like that right so this was like next level where you were talking and and actually engaging with other people um over the internet and if there was like this kind of physical representation to it and so anyway so we went in there and just came up with like all sorts of like ideas and things of things that you can do and so a lot of my patents are in in that area as well um smarter planet was another big initiative at the time and so um thinking about a lot of things to improve like our um our environment like um automated systems and things like that so it's a it's a a great variety um another thing as I started inventing I I started recognizing like when to see problems and how to have like this inventor mindset on how to innovatively solve those problems and so it became a lot more natural to just be in the grocery store I'll tell you a fun one where it's like um you know how you go in the grocery store and and you inadvertently always choose the wrong line to get in right whatever line you choose is going to be the one that's moving the slowest right it's feels that way yeah there's some law to that like somebody should name that so anyway as I like chose the wrong line and I'm standing there there's this situation where like where you become annoyed with something would be a trigger like how would I solve this with technology right and so right then and there you know I came up with an idea of how you might be able to calculate um the weight times in like a queue right um and this could spend like a physical queue or whatever but in the context of the grocery store like so you start thinking like what technologies can I pull in right okay I have a basket of groceries everyone in the line has a basket of groceries can we some kind of way like count how many items are here and like count how many of these are scannable items versus produce or something that they have to punch in we know who's in line as well can we use things like Loyalty cards to um determine like what are they going to do when they get to the register are they going to like go ask for cigarettes and the cashier has to go walk off to go get the cigarettes that holds the lines up um what method of payment are they going to choose like are they going to write a check you know um which takes a lot longer than swiping a card yeah is this a is this a a a coupon queen who's going to pull out like a book of coupons in the line right and you start factoring all of these things in to come up with a calculation so that's one of my uh wow so you have a patent for like a system that like looks at those different factors determines like a weight time so that people I mean I could easily see in the future when like the these kinds of sensors and all this data is pervading like everything that you could basically be walking up and it would just say this line one minute this line this one or just say go over here like really simple like right this one you know and this one once people gets in that line it's just like kind of almost like direct like a police officer directing traffic or something like that yeah that's pretty cool so a lot of your patents are around like pretty abstract thinking like you get annoyed by a problem and then you're like how would we solve this with technology and then that's like kind of is that a common theme through a lot of your patents or um for a lot of them then I would also like targeted towards at some point I started like leading um patent sessions and this is interesting cuz remember I'm still pretty new in so I'm about two or three years into my career at this point a lot of these folks are senior but like I'm collecting these patents like Infinity stuff getting a reputation and respect within the company and so I started leading the uh patent mining sessions like after or right before relase release right and so okay we've done all of this cool work let's sit down and look at what we've done before we actually ship it and determine if there's anything in here that's worth you know um protecting intellectually okay and what is the actual process like if you don't want me diving more into it again I have zero patents so I don't know what what this entails like like what the patent office requires like like the more you can go into detail about the workflow okay I think a lot of people listening would be very interested in this yeah sure okay so um IBM is a big company and so they have like patent attorneys on staff which made life a lot easier so whenever I would have an idea I would just like open Microsoft Word or something like that and just kind of write the idea as if you were writing a blog post right you write what's the problem statement how might you go about solving this the interesting thing about patents is that you don't actually have to go through the trouble of implementing the thing like I didn't have to implement that um checkout calculator but I had to describe it and design it so you think about this almost like um a architecture skill right where you're thinking through the entire system and like what technology could be used to solve that problem and so you need a stepbystep guide on how to do this it can't be abstract but you don't actually have to go through with implementing it so anyway I would do that that in like a Word document and then there um you can submit it so every company I've worked in has had like some sort of patent submission um or patent program right where when people have ideas within the company they can submit it through some form some channel right and um someone will evaluate that and so at IBM you know that it was the same we was submitted and we had a board of um also prolific inventors to evaluate it from technical Merit but there would also be a patent attorney on those meetings as well to evaluate it from a legal standpoint right um and So eventually I even became a part of the these boards where I was evaluating patents across IBM and that was a pretty cool experience so anyway you go and you pitch basically um so they schedule a they review it sometimes if it was something like oh this has already been done they'll just go ahead and like close it out but you know if it sounds interesting enough it's like all right well here's a schedule time and you come and Pitch the idea to this board of inventors and like patent attorneys right so so maybe that's where I got my present if you can like present to folks like that like okay whatever like you can do it anywhere yeah I mean if you add the hourly rates of all the different people in the room when you're talking expensive right yeah so anyway you would have maybe I don't know 15 minutes or something and that includes like pitching the idea and then them like asking you questions about how it would work or any prior art that you found or that they found because if there's any prior art you can't patent it right yeah so um so we would go through that process and it would be like one of three outcomes so one would be uh we don't want to pursue with like our like business um you know realm or maybe it's just not a good idea maybe no nobody would want to license this you know um or it could already have been done or whatever so the three options were to close it meaning okay we're done with this let's act like it never happened um or you could publish it meaning it's not a patent but we'll publish this into the public domain and once it's in the public domain that prevents anybody else from patenting it so it's a way to um say okay yeah we can do it is a cool idea but we don't want to patent it but we don't want anybody else to patent it and we can't do it you know yeah and then the the third outcome is the one you're aiming for and that's the okay let's file let's file a patent application so from there the lawyers would take over they would take your Your Word document that's like a blog post and it's written in human langu language and they would put this into legal Le um and start drawing little you know diagrams and figures and stuff um that the courts would would appreciate and so your idea turns into like your one page idea turns into this 15 page like legal document that they then submit to the patent office um that's pretty expensive to do and so it was great to have a company kind of uh you know foot in the build there um or not so um you pay this fee and then you wait you wait years in fact um before you get a yay or nay on if this will become an actual patent yeah that's so cool so I mean like Einstein worked in a patent office right and his job was to review that you know the legal Lees and everything of these it's interesting like the the inventor's original idea and maybe this wasn't like this back in Einstein's day but uh having like a bunch of very experienced lawyers who basically specialize in creating patent applications submitting them to this US patent office um yeah I it's a really interesting process it must feel really Str originated this idea and be on one end of this giant kind of like uh rub Goldberg machine of like all the different things going on and then out the other side comes you know a patent number hopefully or years later right right yeah but it's so cool I mean it's super cool um I mean some of these ideas like they weren't issued as a patent or granted as a patent until like I was long gone from IBM so like it'll like some might still come through now and it's still like oh wow that's so cool do you have like the pieces of paper like framed anywhere like do they send you anything when they send it yeah so they would they would pay me um um money and then we would also get like um these certificates and when they're granted you would get like the actual patent in like a frame or whatever so I do have a bunch of those yeah that's so cool I'm going to tell a very quick story if anybody's interested in patents uh the water bed you may have heard this before the water bed that was very popular in like the the 70s and 1980s in the United States basically a giant cushion of water that sits on top of like kind of like a box spring type bed uh so you can like kind of like bounce around it's it's really comfortable it's good for your back I guess uh they've fallen out of favor recently but the uh the inventor of the water bed was unable to Pat it because it turned out that Robert heinan yes the the novelist who wrote I think he wrote like a lot of like Starship Troopers and he had described a water bed in extreme detail in one of his books and so the courts rule red or the patent office ruled that that was prior art and that uh it couldn't be patented so essentially what he had done inadvertently was he put the idea of water beds out into the public domain yeah that's right it could be a movie it doesn't have to be real life like even in movies or you know some sort of fictional uh scenario if it's been described and like you didn't come up with the idea like it exists already yeah but then you got things like one click checkout which very obvious uh but they were able to patent that and that was like a you know hundred million doll billion dollar multibillion dollar patent I don't know how many people licensed that from Amazon but but yeah that's cool like that thanks for giving us that quick tour of the process of getting a patent made um and telling us a little bit about what some of your your ideas have been so I want to talk a little bit more about your progression because you didn't say at IBM forever like you've moved on and you done a lot of things uh one of the things that I think was really important for a long period of your life was test Automation and just writing tests essentially doing like quality assurance and and just making sure that the code did what it was supposed to do um can you talk about like your journey into test automation yeah um this one is actually fascinating because um I did a couple of stance in like feature development and then also like in test Automation and test automation sometimes gets like a rep or you know this stigma as if it's like less than you know feature development or whatever but I'll tell you um I really enjoyed my time doing test automation much more than the feature development so for the feature development you know all right I'm giving a ticket like okay you make like a widget or something like that and like the fun is over after that like okay and now it's on to the next ticket whereas with test automation I don't know I just feel personally like it really strengthened my engineering skills um because like it's really hard like you one you write way more code to test something than to actually um especially as you come up with like all the various scenarios to test a specific feature right and so I was coding a lot more um and then I was thinking you know a lot broader so when you're pretty much going to have like the Happy path in mind like what is the what is the use case and that's what you build for with test automation it was like this way to explore all of these various um paths and scenarios and like what happens when the customer does this that and the third or they have this this like kind of oneoff use case or something like that and making sure like the the system was built um to handle that right and so I really developed like this um customer focused approach to development and always just thinking about like who is going to use this and how can I make this like a good experience for them um and how do I like capture all of the various ways that this can go wrong and so when I did build features like I just had that customer Centric mindset right and it made me a much stronger developer because I was no longer only developing for the happy path like I had a gazillion um error cases in mind as well that like oh I better make sure like the code handles this that and the third um and so yeah I just had like a much broader view of how everything operated it's like scope to one feature where when I was in feature development like I don't know it just felt like you this is all I know don't ask me about anything else in the system this is my domain this is what I am the subject matter expert whereas talk test automation you take like this this uh step back and this this uh big picture view of the application and all that you can do with it you know and so um I don't know I just just really I really enjoy that yeah can you maybe we could do like a quick like kind of like role play um like maybe an interaction between uh kind of a a naive feature developer developer I'll play that person uh they're like oh uh May we're just trying to do a very basic like uh ecommerce shopping cart feature okay okay so I'll be like hey Angie uh I finished like my shopping cart feature is perfect uh I don't think there will be any bugs in it or anything here you go uh take a look at the code all right and then now you destroy me right and so I might get in trouble but like I found that a lot of developers like are not really great at testing their code and I can say this because when I do feature development I'm wearing a different hat and I notice I'm not very great at testing my Cod right um because you're you just have Tunnel Vision on making that scenario work so what I know that that developer has done you Quincy you have basically added an item to the cart you say yep it's in there all right I'm good to go right and so what I'm going to do is take that and I'm going to say okay so what happens when like I add another quantity before I add it to the card and then what happens when I add another quantity once it's in the cart and what about subtracting a quantity and what about deleting it from the cart right to read it to the cart when it's already in there right and so my mind just starts going all over the place with various scenarios and then I automate all of these scenarios like with code so that they're repeatable um and like what that does I want to take a moment here because a lot of people don't appreciate this benefit of automated test um it's one yes to make C is okay but more importantly than that is to make sure it stays that way and so with proper test in place you have the the luxury and the comfort of kind of like adding whatever you want and changing the code base in any ways that you want because you have those tests that'll be able to catch if you mess something up if you don't have these repeatable automated tests in place it's much harder to refactor your C code it's much harder to add new features or definitely edit existing features because you don't know if you've broken something right and so gives you like that kind of leeway to be able to really go in and like modify the Cod however you want so it's almost like the the larger a project gets the more things you can realizing it uh and so you end up shipping code that uh is regressive in the sense that yeah you added this tests kind of give you the confidence to push forward with feature development or later complexity will just become too much for one person to hold in their head doesn't matter how familiar you are with a large legy working on it and it's constantly changing so you need to have the confidence that like okay I ran all the tests yeah push this production because we're all we're all greenl right yep and it gives you like a source of Truth as well because like I said you work on one feature then you move on to the next and now it's like two years later and you're like X number of features removed from from this one that you worked on right um and and now like maybe someone asked a question or you want to ask something or like you don't know how this thing was supposed to work like somebody is it supposed to do this or this and you go oh gosh I don't know I don't remember right um you're and let's say you don't have the documentation around like that level of detail well your tests are there to tell you exactly like what was expected and you say oh okay yeah according to the test like it's supposed to do it's also um leave your software in a great state if you moving on to a new team or a new company um people who pick this up have that historical data as well yeah so the tests kind of serve as like a backup form of documentation essentially or in many case probably the only documentation because let's face it a lot of people are they they finish the feature maybe they finish the test hopefully they finish the test and they probably move on and and you know maybe they mention it in some meeting that is lost of time but the tests are still there right almost kind of like comments in a way that like assert that you know if shopping cart you know I'm not sure how you exactly you'd structure it depending on the different tool you're using but like that scenario where I say I'm adding another one of these things to the cart what should happen so someone might say what should happen should we have two of these identical items or should the one item just increase to a quantity of two well I don't know but if we have tests we do know like exactly what's supposed to happen yeah so it's kind kind of the intention of the the consensus of the team that was developing that feature like every designed decision is some sort of tradeoff right like that's right there might be some Corner case where yeah I actually do want to have a second instance of this particular item in here um but often the most sensible thing would be to just have two of the same item and so you have to like figure out you want to do in those scenarios and in a way by writing those tests you're kind of like codifying what should happen that's right right that's exactly right yeah so I'm really excited about testing which like may seem weird thing to like geek out on and get really interested in but I mean compared to you who been writing tests and doing all this stuff but like I am I consider myself someone who very much appreciates test and the roles that they play and I think it's you know the the era of the cowboy coach who doesn't write tests and just kind of like quickly blazes through knocking out tickets and stuff I think that era is done and the larger an organization becomes the more complicated a code base becomes the more absolutely nonnegotiable testing becomes yeah that's that's true yeah so I I do have some testing related questions that I want to ask uh for a long time uh I think like Google and some other companies would like Pride themselves on like people write their own tests we have like one test engineer per like every 20 feature developers or something like that like what what are your thoughts on that approach and what do you think like a more realistic balance of uh test engineers and feature development Engineers should be so when I first started um blogging I I wrote this um one piece that was kind of controversial um and it was probably the title um that led it but it was like developers should not lead your automation initiatives and even though developers and this is a generalization forgive me but developer even though they hate to write test um they were offended right um like I hate having to go to the get the groceries you know and then my wife's like cool I'll go get the groceries no wait I want to be able to get the groceries even though I hate doing it I don't say that I can't geter yeah exactly so they took it as an affront like we're not good enough at writing tests you're trying to take away our privileges our you know yeah but my my my point there was that um writing tests like is is a discipline um which is one that you need to study like you have to learn like different techniques you have to keep up with them and maintain them you have to write them in a way that will last and stand the test of time right there's a lot that goes into test Automation and it's a craft in and of itself as is software development and so my point there was like you're asking a lot of people when you ask them to um basically like lead both of these initiatives and there's an opportunity CA that comes with that right like I said when I'm in full mode um full developer mode future development I'm I'm not as great um on writing my test as when I'm in like just full test automation mode right um and I don't think it's like a totally different mindset that you find yourself in um when doing either one of these tasks you know what I mean yeah yeah so I mean how many uh like when it when a company says oh we don't have any dedicated QA folks uh we don't have any dedicated test Engineers everybody just writes their own test and it just works like what would generally like at what point do you think a team is large enough or codebase is large enough that they they need to get serious about having dedicated people I think whenever you have multiple features that can integrate with one another right and so if you have like these Standalone features that never talk to each other like okay maybe it is fine like the developer writes their own cuz when a developer writes their own they're like typically writing unit tests that are just for that feature right and so it might be um scoped specifically to just the cart or something like that right like maybe just that API call that sends the the I the item to the card and that's like what that's the extent of what they're focused on versus like a integration scenario that goes all the way through like someone shopping right and going through multiple items and placing these items in the cart and then doing other things within the cart until they get to the part of payment right that's a total flow and if I only was responsible for the button the add button I'm not doing that whole flow in my testing right and the people who were responsible for the other pieces of that flow are only testing their flow so who's testing the integration of these things together no one is unless you bring in a dedicated person to do that sort of thing yeah that makes perfect sense and that's a good way of thinking about it like because developers are mostly focused on developing unit tests for their own code because like like at free code camp we have a policy that you can't check in a poll request without having tests that unit tests for the part of the code that is uh you know affected uh but that says nothing of the integration tests necessary so so how many types of tests are there there's obviously there's unit test integration tests kind of sit on top and Arch between different functionalities uh are there even more types of tests that people should be aware of yeah there's like these kind of in to end tests too that like well like more than just the integration of two or more components but kind of go through a a really big flow um from beginning to end there's like smoke tests that are written to kind of just make sure like your environments and everything is like UPS aart before you get into like real testing um there's performance testing of course like how performant is this and like are we meeting our which are service level agreements there's security testing like can people like hack this H you know like um can they penetrate this right in in a in a malicious way way um there's regression testing so those tests could be like some of your your integration tests as well could fall in that bucket there's lots of different things that like like I'm saying like if I'm just a feature developer I'm not thinking through all of these various concerns you know yeah and you can definitely tell like a developer okay be sure to keep Security in mind be sure to keep you know um all these other different considerations in mind but at the end of the day like like you said they're going to somewhat have tunnel vision and just like I'm trying to get this piece of work done and I can't spend like you know an entire day reflecting on like what if scenarios and stuff like that but that's basically the job of the test engineer is what if you know yeah yeah exactly yeah that's well not only did you work as a test engineer but you've taught a lot of test engineering Concepts over the years and that that brings me to something I want to talk about uh that you've been involved with which is test automation University can you tell us a little bit about that yeah so test automation University um was amazing so this was an initiative I started at um which is an AI uh test automation startup um but like yeah there was like a lot of Education I thought um how to properly test how to come up with test strategies as well as like how to use various tools that are out there in the market and so um we started this initiative there where uh we had community members to create like courses on the things that they were experts about um and I specifically sought out like the best in the business so who is the security testing Guru right who is like the master at performance testing and let's have them to teach a course on this um and offer it all for free and so all of these courses are are freely available still today on test automation.com um and people can basically follow paths or things like this we've seen like companies uh send their teams here if you like don't want to go the route of hiring testers and maybe you do need to educate your developers on like how this stuff actually works this is a resource for them and then if you do have like dedicated testers but they just want to level up or they're considering like switching to a new tool or something like that they found this to be very useful as well yeah I mean this is like a super powerful resarch resource uh that I think everybody should be aware of and I'm going to link to it in the show notes okay but just to verbally describe it for everybody who's listening to the audio version I won't I won't like do a screen share but like there there are so many different paths there's playright for example very popular uh framework uh Cyprus which we use with JavaScript there are um devops testing Pathways that talk about like you know continuous testing and things like that uh they're JavaScript specific Java specific uh there's even like you know a c and Ruby testing path and each of these is like probably like three or four hours some of them are like 12 hours uh and this is all free content like free learning resources that you can use if you are just want to expand your skill set as a developer or if you get a job as a test engineer this this seems like an amazing resource so thank you for helping put all these together um yeah yeah like biggest challenges in trying to document all these different practices that you had been using as a test engineer like and then figuring out how to like turn around and teach that were were were there like a lot of instinctual skills that you never really thought about until you had to turn around and teach yeah and and there are some techniques that um so I so I had this experience I worked um at a company called Terra dat and there like this was the sharpest like test automation team I'd ever worked on um it was just like packed with like all stars and so we were you know just kind of learning from one another and had come up with like all of these wonderful techniques um that I thought should be shared to the broader like engineering uh community and so around that time is when I started like writing blog posts and doing conference talks just to share like some of these techniques for example I'll give I'll give you one that is not very uh instinctive it's like okay let's say that you're task to do like some in to end scenario or even just a simple gooey scenario so for example I need to test like that from a shopping cart like that's the test right so there's a lot of setup and stuff that goes into that and these UI tests are notoriously known for being flaky um and because like as you're like automating clicks there's just timing issues there's like all sorts of things that come into play right and so like we started doing different techniques to like streamline this like and focus on what are you testing all you really care about on that UI is if that delete button works so what if you use like API calls for example to get the in the the application in the state that you need it to this is going to speed up your test right it's going to byass all of that searching and clicking around that you're doing to set the test up and then you can just open that window the product is already there you your test clicks the button and you make sure that that's gone boom so that's something that's like pretty straightforward but it's not really intuitive for people who are developing these tests and so like just sharing like those sorts of techniques and things like that um I think has really resonated with people yeah yeah and that's the next thing I want to talk with you about is is just sharing you've been incredibly prolific in terms of creating blog posts um and uh of course like sharing a lot of your thoughts on mentor ship I know that's something near and dear to your heart journey in toward becoming kind of like a developer educator in addition to being a developer and a test engineer and and I I imagine that's ultimately helped lead to your your current role uh your current area of expertise which is developed can you talk about that progression a little bit yeah yeah so okay around that time when I was like yeah I want to share things with people whatever um so I started like writing um um the blog post and I started attending conferences I had a goal to speak at just one conference Quincy and that would like make me really happy and so um I I did the one conference and then I started doing podcasts like these and um and then at some point like I started receiving these invitations to speak at conferences and it it took on a life of its own so at that time um I was working at Lexus these sorts of of like Community engagement I started building like a little name a little brand for myself um and so I was uh hired by Twitter to come and do um test automation there and so it's like oh wow I made it to the big Le you know it's like leaving and then I was living in North Carolina so leaving little North Carolina and I'm headed to to uh Silicon Valley you know with with the big fishing Tech I remember just being so excited about that and so yeah I went to work even more of these like conference engagements started coming up and I went from just doing this speaking to also teaching workshops at these conferences you know like full day workshops on something like if this is before playwright's day but that would be a prime example like everybody wants to learn about playright it's the hot new tool Angie Jones is going to do a workshop oh you know um so um and so yeah I started doing that a lot and it became where I was like on the road probably about 75 80% of the time and that's not my job like my job is literally to do engineering at Twitter and so I would find myself like out of the country like let's say I'm in Europe or or something on a totally different time zone and I'm doing like a full day workshop and then I would have to go back to my hotel room and do like eight hours of my engineering work for Twitter and so I started uh burning out pretty quickly Quincy it's like all right I got to figure something out I was like I really enjoy the teaching um and the speaking aspect but like I don't know how to make money from that right these conferences are in pain like they might a tiet to get the But it right and so I was like I got to figure out how to make money and um I actually met like the CEO or sorry one of the cofounders um of APPL toes while doing like the whole conference circus scene and so we were at dinner once and he was just telling me I was like kind of ranting about like how exhausted I was how to make money from doing this and he told me about developer relations so I didn't even know that that was a thing again with me and like being oblivious to like what's what's available as a career path um so yeah he told me about it and and also said like you know we could use someone like you um at our company like we do test automation it's AI so that's like Cutting Edge Innovation what you like or whatever and so um I made the Le deep into developer relations there yeah and what is developer relations for people who are uninitiated as you were yeah so it's basically um a role where you educate external developers about primarily about like how to use tools that your company makes but it could also be broader as well so for example in that um test automation role at APPL toe so I would talk and teach about like the cool products that they were building but also again about test automation just in general um in practices so it was cool you basically go all around the world your your scope expands from just the four walls that you work in and now you're like basically a part of everyone showing them like new techniques or new features in your favorite products or languages or things like that so yes it's like are talking shop and teaching like other developers about like new and cool things okay that's so I always viewed it as kind of like a hybrid kind of like like developer experience type role where like yes you're a developer and you can potentially turn around and like spec out or even implement but you're like almost the front line in terms of think of the product what kind of questions they have about it where they're having trouble getting things done is that accurate like you're kind of doing a lot of user research yeah you're basically like their contact person right they don't want to go to the help desk or you know do a ticket but like I'mma just ping Angie Jones on Twitter and I'm gonna ask her how how do I do X Y and Z with that product um where she works right and then Angie Jones is GNA respond to you with like probably a gist link with some code in it or something like that right um and so yeah like and you're getting a lot of insight so as these conversations happen more and more you learn some things you see some patterns like dang this is like the fifth person this month who asked me how do I use that feature that mean it's not intuitive and so that's information I can bring back in house and say y'all we got to fix this like no one knows how to how to do this it's not intuitive at all here's some suggestions on a better developer experience right um and I do a lot of that proactively and so I'm very involved in like the design and the development phases of features as well I'm like still today um reviewing pull requests on a daily basis and you know I call things out even before it gets into production like y'all that's not that's not a good name for that feature or that API or like why do I have to like provide so much data could we not like slim this down or you know you know what I mean and so um that that's definitely a part of the the role to advocate for the developers that are going to use your product yeah that's a great way of looking at it like basically you're trying stress free and experienc as possible using your tools because they don't want to be like having to read like tons of documentation to implement something really simple or they don't want to have confusing names or like so much of software development is a communication challenge right it's like figuring out how to get somebody on the same page as you and understand the same Concepts and once you can establish that like pretty much everything can be made simpler to tell you like an anecdote like Steve Jobs was very adamant with his Engineers that the iPhone should only have one button and so many people fought him and pushed back we can't have a phone with one button that's ridiculous we'll never be able to do that and and yet he was like kind of advocating for the typical you know what would ultimately become the master Market iPhone user who didn't want to have a phone with like 50 buttons like like a Blackberry or something right they they just wanted a simple device right and uh ultimately the engineers were able to get it done with just one button and then a few years after Steve Jobs's death like they figured out a way to like get it down to like zero buttons essentially where you just swipe and everything's like a about um what you've been doing since then like so you're uh you've risen several positions I don't don't know exactly like what I don't have your LinkedIn right in front of me but you've been promoted a lot over the years and uh what is your work Quincy I do good work what can I say there we go yeah what what is like a typical kind of like week in the life of Angie Jones like like are you do you spend most of your time in New Orleans or are you still traveling a lot I travel a ton um so New Orleans is home which basically might as well be like a vacation spot for me um cuz I'm I'm on the road quite a bit um which is fun I'm not complaining like that's really exciting to be able to like actually go and talk to people and in real life and like you know kind of geek out over software um or whatever but yeah what what I'm doing now um you know like I love working on The Cutting Edge of innovation and so right now I'm working on some Open Standards um that are actually part of w3c w um which is the web 3 what is what is it called the web the Consortium the worldwide web that's why it's three W's world yeah people always think like W3 schools is associated with that it's not it's not an official w3c thing but they chose a name that was like confusing enough and they so a lot of people just thought it was a standard documentation kind of like if if like freeo cam called itself like the the uh Mozilla developer Network or something like mdn uh when it's actually you know that's like yeah anyway okay so yeah some of these standards are around like digital identity and like um credentials and things and so it's really exciting work and it can be applied to so many domains at TBD we are a fintech company um we're part of block and so we're looking at it from like fintech use case like how do I move money across borders because that's super hard Quincy I know you have like a lot of people from like you know Nigeria and other African countries that frequent free Cod Camp so like I went to Nigeria last year and I hired this uh videographer to just kind of follow me around and capture my first time in Nigeria and I sent him the payment um before I even left right and I had to do this with a bank transfer because there's no easy way for me to just like cash app him across borders and so I sent him this wire payment by time I got there he still hadn't received it but he was kind enough to still do the work by time the trip was over he still hadn't received it by the time I got home he still hadn't received it so I'm just like showing him receipts where I swear I paid you or whatever and he's having to take these receipts to his bank and so anyway it's just like super complicated to send money across borders and so we're looking at like um these these new like uh digital standards that allow you to do this um in a frictionless way so that it's easy like that would be very nice if I could just like open VMO and like send send this guy money or whatever and so um like I said these Technologies they're called like um uh verifiable credentials verifiable credentials verif verifiable credentials so um I actually have this talk that I'm touring right now called like how I bought booze with with jots um which are Json web tokens so verifiable credentials are basically just a form of Json web tokens and Json web tokens are using web app development for authentication right so you had like um a server and they might send like this jot um to the client so that the Cent um anytime the user wants to take further actions right and so they don't have to reauthenticate with every action and so what we've done is taken like that same technology the J consists of like a body which is just Json and so it's like hm what else can you can basically represent almost anything and Json format so what about like claims and things like that so for my case my uh Louisiana in case you didn't know Quincy Louisiana is the first uh C the first state in the United States to roll out the mobile driver's license so there's been more States since us but we were the first so with this mobile driver's license I basically have this digital identification that lives in a wallet on my phone and what's cool about this is like it can issue like these jots these tokens these verifiable credentials to other businesses that might need to verify my Identity or like any other information about me so um the scenario that I experienced was like I needed to order wine off like a delivery service app and so I did that and the way that that typically would work is like not the identity part they can't verify my age and then when the driver shows up they have to remember to check my ID right and if they don't then you know they can be legally liable so could the delivery company so so this is a huge burden on like small business owners like bodegas and places like that the fact that they can get like serious funds for SC up and like misreading an ID or forgetting to ask for an ID and yeah like right I just want to emphasize like I I am 100 % in favor of people under 21 not being able to drink alcohol it can interfere with like their mental development and you know their loss of alcohol related accidents and stuff but we need better systems so that like you know people that are working in a comedian store like 12 hours a day don't have to like aren't like potentially going to get become extinct like their business isn't going to go under because they get some massive fine for for getting to like card some undercover cop or something like that right yeah that's right and so um what this does is now allows a wave to basically digitally um share this information and verify it right and so my mobile driver's license app right so that app basically connected with the delivery app before the purchase was question is she over 21 is she of drinking age and my app didn't have to show them my entire ID and say you figure it out for yourself right Bodega person no they were able to say okay yeah I'll issue a jot a verifiable credential that says yes true she's over 21 because that's all the information that you need right and because these jots are basically cryptographically sign like you know they haven't been tampered with you know who was the source of issuing this information and you can just trust government saying that she is over 21 and so cool cool so now all of that is done before the purchase is made and now is able to like this that burden is not on like you know the stores or the the poor delivery driver or whatever so that's how um it's being used I'm seeing it across the board Quincy and things like education you should do this Quincy I'm going to work with you offline but um you can issue like these verifiable credentials to like say yes someone has completed a course or they've completed a degree or something like that um people are using them and like uba has basically started using these to allow people to enter the country so you can basically obtain this credential before you even leave the house and you're good to go and it's like really speeding up like um their their lines at the at the airport and stuff and so it's really cool technology I'm having a really good time yeah and just one of the things that that uh I think is very important uh and is perhaps like I hadn't really even thought about this before until I was talking to with one of my security friends and he was telling me like it's ridiculous that you have to show your entire driver's license to anybody like that includes your address it includes your date of birth it includes like so much information that could be used to to gain access to your bank account or if if you know people know where you live they can send armed thugs to your house to like you know take your money or passwords right or something like that right so like I I love the idea of having credentials that just share exactly what is needed and nothing more and nothing more if I authenticate with like an app and I'm like okay I'm and it says Google uh uh Google will give them your email address and nothing else or something like that then I'm like okay cool my email address that's not a big deal but like if they're asking for like 10 different things I can say never mind I don't want to use this app right yeah don't worry about it it's just good data hygiene to not have you know your passport or like like like all this KY like know your customer type stuff antimoney laundering stuff floating around in The Ether right like that's exactly the cases we're working on at TBD so the kyc the antimoney laar like all of these like compliance things you need in order to move money um cool you need them but can we do this in a form that's like privacy preserving and not like just like sharing my info back and forth across the web you know yeah and you earlier you mentioned like the difficulty of sending funds to Nigeria I sent funds you know from Nigeria on our staff uh we also have people in like Kenya Bangladesh places uh that have frankly like less it uh Financial technology infrastructure right like and a lot of that is not because of Technology it's because like government regulations or something like that like it's complicated I have had to use like pretty much every different tool Under the Sun to send funds over the past few years uh you know like there are a lot of people that are you know crypto detractors and I'm not going to say that I'm like a huge crypto time to send funds need to money yeah um and and uh there there have been some really nice Innovations like this tool sendwave works pretty well uh that that's what I've been using for Bangladesh it still works for Bangladesh but it's not working for Nigeria so now we're using USD coin uh to send funds to developers in Nigeria so so like I'm very excited about the work you're doing it's going to make it a lot easier because currently people have to like spend a whole lot of time and energy getting the right bank account and like for whatever reason right now Nigeria uh their currency like locked down and you can't send funds there or like sending funds to Ukraine we have a Dev in Ukraine and I have to send it as multiple transactions because they're like these really low transaction limits and there are so many trans action costs it's ridiculous like Western Union Western Union is great it's like the bank for the unbanked essentially but the transaction fees are absurd when you compare them with like like you and I Angie we live in the United States of America you and I can send ACH back and forth all day long for zero fees like I think taste gives you like a certain amount for free and then you have to start paying but it's like I don't know it's like 25 cents a transaction or something nothing compared to like if you if you try to use use coinbase or if you try to use uh some of these other tools it's exorbitant so yeah that like so security transaction cost and just general availability and not having to wait for days and days and you know I I just feel really bad for your videographer see you already got it that's exactly right so those are the problems that we're looking to solve um with the verifiable credentials as well as the other like fintech open basically like a new open rail for money movement across um border so I'm going to send you some info I'm you can put it in the links but I want absolutely yeah yeah that that's so cool so I want to make sure that we've talked we've been talking for a long time we've covered a lot of ground but I want to make sure that like uh We've cover there are so many different facets to you as a person as a developer as a as a manager um and and just uh I have just a few quick questions first I want to I want to shout out this quote that you have that I think is so uh powerful and that everybody should keep this in mind don't trust a test you've never seen fail yeah yeah like there's so many situations where I forget to go red light oh green light my test fast the first time my must be perfect do you have any like really quick tips for people that are writing tests like don't do this like like uh any horror stories yeah like um I've seen it all pretty much I review a lot of codes I've seen the like true equals you know and things like that and I've seen ones where people are trying to actually test but has broken that and you go and evaluate the test and you realiz oh my God this test is will never fail right because the way that it was designed was not correct and so I always anytime I write a test like yeah I do want to see that green but I don't trust that green until like I then break the feature and I run the test again I say okay now I can try doing this job and I can fix it and and go ahead and submit that test yeah that's awesome and uh as far as like mentoring people and encouraging them to get better at testing like are there any like exercises or anything that you would recommend that people could try at home of course they can check out uh test automation University but like are there any like just general like fun things that you'll do in like a classroom or like a mentorship setting like I know you you Mentor a lot of uh kids um through is it called Diva chicks yeah yeah so like when you Mentor kids like do you have any like creative ways to like get them to like perk up and like become more interested in writing code or even writing test yeah I actually like give for the Cod piece or just like how to Think Through like software right and how software Works um I typically give them some sort of scenario um that used to be like getting money from an ATM but that might be like a little played out now Queen I I haven't used an ATM in like at least a year or two but um like some sort of scenario where they need to think through like a human action right and then equate that to what you know what do you have to tell the computer to do and it's a really good exercise the computer is just as smart as like the instructions that you give it and it's not going to think on your behalf right and so if you don't tell it something very explicitly to do like if this do this otherwise do that it's always just going to do the that right um and so just helping them to see like logical thinking and how to express that in terms that a computer could understand like I think that's really powerful even with like pseudo code right you don't even have to get into the code of it but just the logical thinking behind it so those are the sorts of exercises I love to do with students and nowadays like with the AI hype um there's one great one exercise that I did I really like um I did it with scratch so we don't have to like get into like straight up programming or anything but this was not even just for kids this was for adults too I I took this the conferences Quincy but it was like um basically like you're training uh a AI model um in a certain way but then you ask the AI model to make something and you see that it totally gets it wrong and so you take a step back and say why did that happen and you start evaluating the data that you trained it on and you realized like oh okay that was not great data how can I diversify this data so that it's able to accurately recognize patterns and things like that and then retrain it to do a better job so that's a really good one too um it has a little bit of testing in there awesome and since we're on the topic of AI and like I know you're somebody who's very much like up on like probably the new tools and everything uh I have to ask this to everybody because everybody ask this to me like how do you see AI like sofware development and especially test automation like when I say I'm talking about tools like uh gp4 for example um over the next few years like like are there do you do you think it's going to be powerful and and timesaving for test Engineers I do um I do and I think that it'll help like there's a lot of tedious work that goes goes into test automation right um one of them I have like this really great talk that I gave on how do you identify which test you should even automate and that was great for its time and now when I look at AI I'm like well you know to do that is pretty tedious because I walk you through like several things that you should think about and metrics you should collect and stuff like that to determine this this takes a quite a bit of time and effort to do do that and you like realistically probably don't have that time to do on a regular basis and so the things like AI can help with that sort of thing where you describe you know some of what you're building and ask for like scenarios or whatever now I wouldn't trust it 100% to like actually write all of the code and like um and then like we're just good to go or whatever but it it's definitely helpful in getting you started as well as like brainstorming in debugging um when you run into errors and things like that so from a testing standpoint um I going to just say from a software development standpoint like we've utilized it on this last release that we just did quite heavily um and I'll tell you how so we built an SDK in typescript so that was built pretty much you know just straight up Engineers building that then we needed to convert this uh to have also a cotlin SDK we needed um a swift SDK and so it's like oh my gosh so we need all of this within like two months um no one on the team is an expert in those languages and so this was a great exercise where we didn't just give the code base to like chat GPT and say spit it out and Swift or anything like that but like as you are basically like rewriting these features in like take a function and say Here's this function in like uh cotlin how might I be able to do this in Swift and it's been very helpful for that it's not 100% accurate but you can take that you can modify it you can makeing me your codings definitely a lot for us to do I I believe like software developers should be using these tools um as an assistant yeah 100% it sounds like it's really great for porting an SDK like a software development kit I think or is that what for yeah uh like porting it from one programming language to another for example is that I mean that can be a very tedious process like I don't want to have to be like okay let me dust off my my uh you know Swift let me go let me go Lear Swift yeah I mean that's something that that these tools are very good at is it has read every Swift book Under the Sun so here and and it kind of I've already written the logic right and so I can just say I just need this in a different language or where you say I know what I want to say in English can you help me translate this in Spanish and you know whatever you get from there might not be 100% right for that um but for the most part it's pretty good right so yeah I think it's kind of same thing yeah 100% well yeah Angie it's been so awesome catching up with you getting your insights learning more about your own journey into software development and uh I'm so grateful uh that your dad pushed you to pick up computers uh and I mean my goodness like so much has transpired from there I'm so uh you know happy that that Professor encouraged you to switch your major over to computer science and I mean this sound kind of weird but I'm really happy that that manager at IBM told you like hey you're trouble you need to share your opinions for we give him no credit Quincy I won't give him credit but but I'm happy it sounds like it worked out for the better right we may eliminate we may eliminate yeah and uh I just want to encourage everybody like to uh just follow Angie on Twitter she's super active there of course she used to work it at Twitter so it's like social media and is like the water you're swimming practically as you swim from one conference to the other that's right it sounds like uh you're you're going to get a lot of miles this year I hope you uh get you know don't get sick too many times and I hope you don't miss too many flights and everything but uh yeah it's just it's really inspiring to have you in the community just out there getting things done uh sharing your wisdom as you go through blog post through tools like uh test automation University and uh yeah like I I just want to emphasize like we except to have you in the community and uh I hope many people listening to this go on to learn a great deal from you thank you so much for having me Quincy it's a pleasure all right everyone well until next week happy coding