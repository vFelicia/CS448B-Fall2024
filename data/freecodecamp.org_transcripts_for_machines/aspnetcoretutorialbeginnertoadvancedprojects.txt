Master asp.net core by building three projects from scratch you'll start with a simple full stack project and work your way up to an advanced project this course will teach you everything you need to know to create your own projects in asp.net core MVC Allan from Koda future created this course hi there everyone this is silen in this video we're going to see how to create three different asp.net core MVC projects with different levels of difficulty and with different functionalities in each project you'll learn something new starting with a simple full stock project by creating a food menu web app then we will create a Google Docs clone where we will integrate user authentication in our project and lastly we will build the web app to accept online payments so let's get started I will start with a brief explanation of the asp.net core MVC structure just so that you understand how our projects are structured firstly we have models which are C classes where we need to define properties the models that we create represent the table in the database and the properties are The Columns of our tables then the connection string is the link from the C code to the physical database it contains the address where the database is located and how to authenticate to the database service we store the connection stream Str in a file called app settings. Json the context is a class that acts as a middleman it has C methods that you can call to ask the database to do something useful like add a record or return all rows in a table we use this methods and interact with the context in a file called controller where we handle the user requests the context itself relies on the connection string in app settings. Json to a physically Loc the database file and it also makes changes to the database Tables by connecting the models with the database the database itself is the place where all the tables are stored which contain all the data of the application that you want to store in them there are then the view Pages where we write all the front end side of the application or in other words what is displayed in the browser When We R the application The View Pages interact with the context in order to paste the data from the database into the pages and afterwards they display everything that is written in them to the browser in this first project we'll create the food menu web application the main purpose of it is to store data in the database and to be able to display them dynamically in the application so let's first create a new project we will select the MVC template and let's give it a name like menu just leave this all by default okay to begin with let's go to the package manager and let's install the three two or three things that we need for every project that we make so the first thing is Entity framework core then we need the Entity framework core tools and we need something from the SQL Server there are some commands here that we use to migrate our data to the database so as you can see we have these three things installed now we are ready to go let's go to the models and create a model first okay so adding a class I'm going to be naming this like menu okay first we need to create some properties here the first one is the int ID we need the name so we're going to be needing an image URL for the URL of the foods in the menu in order to put a picture there and and we need the double variable property for the price okay let's add the new class now for the ingredients of the foods in the menual we need an INT property in ID property and the name for the ingredient okay so it it would make more sense to rename this so to to make put a name like dishes or something rather than menu and then we're going to be creating a another model in order to connect the dish with the ingredient because one dish can have multiple ingredients and one ingredient could have would be part of many dishes so like we'll name this like this helper model dish ingredient we need a an ID for the first for the Dish Dish ID of course the property of type dish we'll name this dish the same thing goes for the ingredient model so an ingred gent ID and then down below an ingredient property so now we need to go to both the dish and ingredient models and connect them to the dish ingredient help per model so we need the list of dish ingredients I've name renamed this had the typing error then we'll name this dish ingredients and this had to be a list we'll make this nullable and we can just copy this down and paste it in the ingredient model as well okay so now we need need to add a folder for the context first we need to we usually store the context in a data folder so let's just create one and we can then add a context class in it you can name this something like menu context or something so firstly we need uh menu context Constructor the menu context class has to inh the DB context right there and okay so the Constructor takes a deep context argument there let's just import a few things here firstly so this here was DB context options so everything that I'm writing here is just the by default what we need in every context so really don't need to learn it next we we need a a model creating method here so we see this was cre cre itself and first we need to specify here the relation between the dish model and the ingredient model so we need to specify here basically that they are both many to many Rel have a they both have a many to many relationship with each other so first we need to specify the keys that we have written in the dish ingredient helper model so the first one was the dish ID which connected the model to the dish model and then the ingredient ID so then we need to specify the relationship of the dish and the ingredients with the dish ingredient model so firstly we WR here for the dish model so basically what we are doing here is that we are saying that the one dish is connected to many dish ingredients and we specify the forign key which is the dish ID okay then copy this down and do the exact same thing for the ingredient model we just need to change a few things here so one ingredient is connected to any dish ingredients and we specify the foreign key also so we need to connect we need to create two DB set instances for each model that we created so one for the dish model and we'll name dishes one for the ingredient model we'll name it ingredients and one more for the dish ingredient okay so what's left for us to do now is we have created successfully the models but we need to we need to add some data in it and to add first some data for in order to create just one dish item in our application so iting here that the dish has some data so we're giving it an ID of one and we'll name it something like I don't know for this video I'm just going to make it the menu of out of pizzas so like Margarita I'm setting the price to 750 and for the image URL we can just go to Google so just pick a photo and we'll copy the okay this one's fine we'll copy the image address there and we'll paste it here it's this long string here and then we we can add some ingredients to it to the database so the first ingredient we give it an idea of one and a name of something like tomato sauce or something we're going copy this and we'll make another one that we need for the margarita pizza so we'll change the ID to to and we'll name it m or something so these are the two things that make a margarita pizza and the last thing is we should connect the first model the margarita pizza with the two ingredients with the ingredients model so so in the dish ingredient model we are basically just going to specify the ID of the dish model and the ID of the ingredient model so new ingredient the dish ID was one and the ingredient ID so the first ingredient had the ID of one we can do the same thing for the second ingredient okay so this id1 ingredient did2 and I think everything is set for the database everything looks okay just looking if I forgot something but okay so now we need to connect the project to the database the SQL Server database we'll just go to there to server Explorer and create a new SQL database we need the server name firstly so let's just open up SQL Server management Studio okay so here's the server name and I'm just copying it down I'm pasting it here then we just need to give a name to the database menu database or something the database was created and here in the property window here we need to copy down the connection string and then go to app settings adjacent we need to create a connection string so firstly connection strings equals so we'll give it a name to the connection string I usually make it this like default connection string but it doesn't matter and then we just paste down here the connection string that we copied we need just to add the encryption of false because we're not authenticating with the database with a password or something the last thing is we need to go to program. CF yes and we need to add a service here and I have this copi down somewhere it's a long line but basically we just need to basically what we do here is just put the context name there and we put the connection string name also with the name so the default connection string name and basically what we're doing is just connecting the context to with the connection string so it can connect them to the database we just need to import here the data because the context there was not known let's first run the project and then we we need to add the migrations so we need to give it a name like initial migration or something so we hit enter and the migration was created we just need to update the database so the changes can be saved okay I forgotten the syntax there was wrong I needed a dash uh when I store when I enter this encrypt in the connection string this this shouldn't be a colon it should be an equal sign actually just changed it there just update the database one more time okay so now we just need to add the controller I'll just name it something like usually the controller has the name of the model but I name it manual as the name of the application I'm just importing a few things so the data folder in order to connect to the to the context and the models as well we need there so we just have first an index function there so let just go to the Views so uh we're making a folder called menu and inside it we can add a CL a view page we'll just leave it as that index so at the top we're importing a list the list of the model of the dish model so menu. models that this here we can name the view data title so the title of the tab to be like index or make new index so first let's add the div with the class of container for some paddings and margins inside we need to make another div with the class Arrow so that we can input the elements in a row and now we need a for each Loop to look through uh the elements in the the list that we are important so we'll just make it V VAR item in model and here we can just start inputting the data that we want to show in it so firstly we'll make another div with the class of column six which basically in bootstrap means that whenever we input some a div in a row and we give it the column six so it takes six out of 12 imaginary columns in a boot step row so this div will take just half of the row and then we can input the item name the item image URL and the price okay let's make it a header for the name so it's a little bit bigger and in bold can just run the project firstly to see what we are doing okay so we forgot to make the index function so here we The View has to return a model so okay and firstly we need to add the we need to import the context there we need the variable firstly for the context the menu context we'll just name it index uh context and then we need um we need a Constructor with for the context and there we give it the the context variable will give it the context okay so this is a asyn weight meth function so we need to change little bit the name of the function so async task and then in the view we can await the context that dish that dishes and to list ASN method basically just lists all the elements in the context okay so this has to work now we need to see in the index page we need to see our data now okay so it works but we have made some we need to make some changes here so firstly the image URL has to be inside an image tag in the source attribute inside it so inside a style attribute we need to specify the width of the image I'll just make it like 75% or 70% and we can add a class to each div element in order to place them in the in the center of their div so if you can open up the bootstrap documentation for the placing of the elements we need to First make the div deflex or like a flex box and we can then right justify content Center so this basically just makes the div's a flex box and then puts the element in the center of the main div and we copy this down to each div that we have here and we could format the price a little bit so it takes two two string and two which basically means two places after the comma and just stand the projects one more time and see if all this data looks better okay so this looks fine it had to take half of the row and it's in the center of it so this looks okay but we need also to add some we need so now for each item we need to add The Details page so we can just go to the controller one more time and we can add a a details function there this is also going to be an a sing8 function so so the details function here takes an INT ID will I just have a variable called called it something a dish and we'll take from the loop through the context of dishes for the element with the ID of the ID of the model that we have in the argument so this is pretty much the syntax to do it so the X so the element. ID in a database has to have the ID of the element in the argument so now in The Details page we also need to include there the ingredients so in the index page we didn't need to show all the data so we didn't show the uh ingredients of the dish but now in the when you open up the details page we need to include there the ingredients so firstly we'll just write include include the uh dish ingredient and then also include the ingredients so we are specifying here the connection of the dish with the dish ingredients helper model and then with the ingredient model then we can just return the view it's good also to have a an if close here in case the dish is null and just return not found page so now we need to go to the view pages and we need to add a details view page nameit details so now here on top we need to import just a model not a list of models because it's just One Singular model that we are we have in the details page so model menu that models that dish going put a title of the tab here in the view data variable of course we need the container div to give it some stylings then we need just to put each element in the center also so we don't need the column div because we just have One Singular element so firstly the title of the model and here the syntax is the a little bit different so we just put model. name so different to the case when we have a list of models imported so and just go to the index view page and just copy something down because these are pretty much the same so we need to change here also model that image URL okay let's just set the width to 50% because it's it's a whole row here it's just one item and down here also so here we need the we need to add the ingredients which we did not have in the index page so we'll just make a a list here make the for each Loop to Loop through each each item's ingredient so item in model. Dish ingredient I think dish ingredients and here we can make some ordered list some lists just input item that ingredient. name so this has to work seems fine oh we got we got to add a button here in the index page so that people can so the user can go to The Details page then so we just need to add another div and inside of it we need to input an anchor tag so we can specify the action is pretty much the name of the function in the controller and we need to specify the out ID or the ID that the function details takes so this is item. ID and just some styling we add a class of button and button info is the color it's like a light blue color okay the button is too small because we didn't input any name in the button so inside the anchor tags we can make Right View dish so this looks fine and here we have the details page which needs some styling the ingredients should be listed as a list so I've written down it should be a list not a not i l there and we can add here another button to in order so the user can redirect to the index page just add an anchor tag with a class of button and button info and the action is index it doesn't take any parameter any argument so and the name of the button back to the menu so the list should be ordered now should be presented as a regular list okay so it looks better and we have the button to go back to the menu so this is great but we can add some more data to the to our application and the easiest way to do it instead of going to the to the context is to open the database in the SQL management Studio and to open each model so it would take a lot of time if we did this in the context by adding the data to the models there so we can just open the tables from the SQL Server Studio okay and so we can write this manually here we can write the names I I'm just adding a couple more dishes here we're going to write the names here I'm just making a pepper only like because I'm doing this yeah I'm doing it with pizzas only so just give the price and we have to find an image of a pepperoni pizza let's see I'm just taking this one so copy image address and we can input here the URL okay let's just hit enter here okay so let's just add another one like vegetarian just find an image for it okay so let's inut here the URL and just put the price in it like nine so just hit the enter it is saved so I'm leaving it with this let's just go now to the ingredients table so I edit top 200 rows no this is the dish ingredients table let's just go first to the ingredients table to add some ingredients for the two more to to the two pizzas that we made we just make like pepperon a couple edges would be okay like paprika and mushrooms okay I'm just leaving it with that so now just need to go to the dish ingredients to connect this to each other so to connect the second dish with the third ingredient which was pepperoni wait it needs to be connected to the first and second actually but yeah just connect them to the three first ones which was I think sauce and mozzarella yes okay so let's just connect the third one to the to the just to the paprika and mushrooms ingredients so just around the project okay you can see the data is store is displayed out dynamically here so we have the two pizzas which all have the uh details Pages created we can see in the URL above that the index is displayed there so another thing that we can do here is just to edit a little bit the layer out page so let's just remove the home and privacy navigation items and what we can add here we can add uh we can add a search bar button to filter through the data and I've handled this in previous video how to add the search bar but in this one I'm just going style it a little bit better so it looks looks nicer so inside the navigation item here or we just need to add the form the action needs to be redirected to the controller named to the index not to the menu controller and yes the action is index and the method when we filter data was get so right now here just need to add an input firstly okay so just one tag so I add some styling to it to make it a little bit different from the previous video so I'll give the width of a width of 80% and the submit button is going to be an icon will make it like 20% so we'll float this to the left side which basically means that the input is and the button then will be both Flo it to the left side so they are in in one single line and the Border radius we'll just give a corner to the we'll just make it a corner to the top left to the top left search bar we'll just make it a little bit around it and we I say like 20 pixels and to the top to the bottom to the bottom left radius so here we we're just making it a little bit around it on the sides I make the background transparent this was it for the styling now just the type of the input has to be text we need a name for the input so we can take it and handle it in the controller then so the name search string and a styling of what you can edit of or make it as a form control which looks better so it'll give it the class of it so this was it for the input now for the button in this time I'm going to make I'm going to store an icon in it so I'm going to CDN awesome font awesome this is just a website where okay first we need to import import it library and they have some nice icons there so just first we need to import the library here in the header in the layout page just copy paste it there and then down here when we when we make a button we can add an icon in in the middle of inside the button text we can add the icon so first Just For The Styling we'll make this 20% and we'll float this to to the left as well so both the input and the button are in one single line so we I I don't want any border for it so it looks a little bit nicer I'll give it a background of transparent as well I'll give the height of 40 pixels this is it for the styling and the type of the button has to be submit and inside the button now here is the icon that we can import from the font aome website which have some nice icons there so we just need to add an i an icon and have a class the search for the search icon so this is the website where we can go font.com icons so here you can go and find any icon that you want and you can import the icons mine I searched for before and it has a class of fa fa search I'm just going to save the project firstly to just see what I'm doing here okay so you can see this nice search bar here we going see the search icon there it just needs to be a little bit more in the middle so in the list above we can add The Styling margin of Auto which basically means that it's equally distance from the left side and from the right side so this has to be now in the middle in the middle of the pce so this looks very good I think as a search bar this is actually pretty nice we just need to handle now the functionality of the search bar which I said that we pre previously did that in a previous video but I'm just showing it here also so we'll just go to the controller to the index So In This Very iable we'll just make a link query so we're just looking through the context uh so the information in the database will looping through the context of dishes this is just a syntax that you usually do it and in the we need an argument the search string which was the name of the input in the form that we had and now we can make an if close if the search string is not null or empty okay so we need to we'll take the dish variable here and we'll or the dishes it's better it sounds better we'll just make this Lambda expression that you usually do in this case to find specific data in the database so we searching by the name of the dish here we can return the view we can substitute here the context add dishes with ADD dishes and we can copy this and paste it down here also so in case the search string is not null it goes to the view in the if Clause okay the functionality should work fine now we can just try it here when this loads so just write pepper on here or just pep and it shows down here in this second project we're going to make an online text editor kind of like Google Docs where you can create an account and then create your documents edit and format them and then you can print those documents so even if you log into a different device you can access your documents modify them or print them we're are going to import a library from an online text editor in order to get all the commments that we need to format our text so let's just begin so let's just create firstly an empty project let's just select an MVC template and let's just give it a name like text editor click on next and in the authentication type we select individual accounts now let's just wait for the project to load the first thing we want to do is to create a model we're adding a class in the models folder and we will uh name it DOC or document for the documents that we will create in this application so firstly we will need an in ID property we'll need a title of type string next we'll also need a property for the content of the document and the last thing that we need we need to connect our documents to to a user so firstly we'll need to the user ID property and next we need to specify the foreign key so the foreign key is the user ID and this user ID is connected to our identity user model that is created when we firstly created a project when we typed authentication type to be as individual accounts and now we can just make these two properties knowable and we can write on top of the user ID property we can write there we can put it as required so that a document cannot exist without its user so if we it happens for us to delete the user this makes the documents of it of the user to be deleted as well now we just need to go to the context and there we can we need to specify the DB set instance for the model that we created we will name it docs and we need to import the models on top of the page so let's go to program.cs and here we can see the services that were injected when we created the project so we can see here that the context is connected to the connection string and we also see here that we have the service for the identity users which we here we need to specify here the confirmed account require confirmed account to false so that when we uh register a user with an account we don't need a confirmation for that account it will just be created now we are just going to create the database for our project let me open the SQL Server Studio okay so here need to copy the server name here I'm going to paste it here and then I'm just putting a name for our database which I just make it text editor data so we have created a database in the SQL Server studio and here in the window below we can copy the connection string and just go to app settings. Json the default connection string that was put here when we created the project let's just substitute it here and I'm also going to need to specify the encrypt to false here because when we connect to the database with we don't have a password for the database or some kind of encryption and all that is left to do right now is just adding the migrations to the database so I'm going to package manager console and down here just add migration and a name for the migration build succeeded now we just need to update the database as usual okay everything seems okay just going to go to the controllers and I'm going to add the One controller we need for this project I'm making it with views so there will be views outo generated and the crowd operations as well I'm going to just specify here the model class and the context the name I'm going to leave it as docs controller so our controller is created with the actions or the methods we actually are not going to need the details action here and the view page as well because just like in Google Docs for example when you click on a document you go to an edit link so you just go to a link being able to to edit it okay we're not going to need this line here in the edit method so what I'm going to do here in the edit and in the delete method I'm going to make it so only the user that has created the document can be able to edit or delete it so this is something we've seen in the previous tutorials as well so if we write this line here so if the document. user ID is not equal to the to the user that is uh currently logged in the application then we're we're going to return a not found page so user. find first value and in Brackets we're going to specify the claim types that name identifier which just basically just gets the usern the user ID for the user that is currently loged loed in and what I'm going to do is I'm going to copy this and I'm going to put it in the delete method as well so that only the users that have the user that create the document can be able to delete it or to edit that because if we leave it by default just like that if the user has the link it can go and edit or delete somebody else's document so I'm just running the project firstly just to see what we've got there and so that I can just register a user firstly so that I can start working because I'm going to need to connect each document that we create with a specific user so I'm just going to register a user here I usually use the Sean email I don't know why and just giving it the password Here below as well and so we are logged in as shown here you can just go to the docs link which takes us to the controller to the index index view of the controller and now let's just keep working with the methods okay so firstly I'm just going to make uh put the authorized tag on top of the class so that no I'm going to need to import here the authorization on top of the of the page and so this just makes it so only the users that are of authenticated can access this controller and let me just start with a method first I don't need this line here so I'll start with the create method I'm just going to go to the create view page next because this is okay so what I'm going to do here I'm going to delete a few labels because I think it looks better on the page and if you also know Google docs for example you just don't have a label for the content or for the text you just have a place to put them I'm just giving the title a value of Untitled document which basically just so when you don't put a name to your document it just print it as Untitled document removing the label down here and actually to get the user we just need an input firstly of type hidden so the user don't see the user ID TCH here has to be user ID and the way we can get the user ID of the current logged in view user we just need to import the asp.net identity on top of the page so microsoft. asp.net core. identity and we also need to inject here the user manager we've seen this before in the previous videos it takes an identity user as a parameter and then I'm just giving it a name here so I'm just taking the user that is currently logged in the application and doing it by typing user manager. get user ID of the current user and what we're going to do now here we're going to just fix the input the input is going to be a text area actually so for the for the content of the document we're going to need the text area tag with the asp4 attribute T content to connect it to the content and now we're going to need to open up Google we're going to find an online text editor online which this one that I'm taking here is tiny MCE which allows you to import the application so I'm copying this text here what what this basically makes allows you it allows you to have some way in your text area to edit your your text I'm going to the layout page to put them in the head text and here we can see here the no API key that we have that we have here which which basically is just like a free way to use this library but we could also register in the application and take an API key here this application has this page that we visit visit it has various packages for different things for different different plans and here just making a DOT here to separate this lines and as we can see there are different plugins to this Library here in the text area we just need to write the ID of tiny and if we try to view the create page now in the browser we will see that in our text area there will be some comments that allow us to edit our text just like in a word or in Google Docs as we can see we have some so we have this warning here because as we can see in the page of this tiny MCE there are different plans here we could sign up for a free plan and take the API key but I'm just not doing it because so that the tutorial don't take long Different Page different websites have different kind of plans so in The Styling I'm going to make the width to be a bit bigger I'm make it like 60 view of the view width and the height to be like 80 of the view height not I could do here is I could also put a link for our delete button you just need to specify the action to be the delete the text here to be delete or something and we need to specify the aspr out ID for the ID of the model that we want to uh Delete which is going to be the at model. ID and I'm just giving you the class of button and button danger to make it like a red button which what usually the delete buttons look like I'm just giving it a margin of two and down in the back to this link I'm going to give it a class to look like a button and button and button info which is a light blue color I'm just running the application to see how this looks like okay I've got an error here because we have no model created yet no document and it cannot take us to the route that we specified for the delete button so I'm just going to need to comment this out for the moment and if I run the application we should see our other changes that we did so as we can see the okay we have the the uh the section for the content is a bit bigger I could give here the this pattern also a bit of the margin on top set it to three I'm just going to delete this headers here both because I think it looks better without them so in the docs controller now we can just I'm going to see the post method for the create it looks good I just don't need here this okay I'm just going to the edit now to the edit view page I'm deleting this headers this headers on top okay I'm deleting a few labels as well see so the content has to be a text area so this is similar to the one that we had in our create page so I'm just I just copied that so I'm going to need to fix the way we take the user ID as well so this got to be an input tag of type hidden so that we don't see the user the user ID and this will be connected to the user ID okay I can change the back to list anchor here as Welling it like a light blue color with a bit of margin on top let me run the application actually I need to create first let document so that we can see what we do on in our edit page just something about technology I don't know just an example so I'm copying this down I'm pasting it here I'm going to delete this warning that appears often here I'm just going to make a bit of changes to the text so that we can see that the exact changes that we make are Sav then later okay I'm just making them I know you can play around with the tools you have here it's just like word I make the font larger so we just have different things here here different menus that we can work with Okay so we haven't actually fix the index view but I'm going to do it later can just go to the edit link of the with the ID of one okay as we can see that's so the text is just the way we created it with our modifications that we did to it okay so actually we could change a few things so this delete link that I had before here it wouldn't make make sense to put it in a create page and of course you can put it in an edit page but I don't know why I put it there before so I'm just pasting it here uncomment this and this are out now can be accessible let me just run this I'm just going to put these two inputs these two buttons inside the form group so they are aligned better and giving it a margin to the left so they are in in the same line so fix the create and the edit View and methods now we're going to need to fix the index View and just going to delete this whole table thing I'm going to create a big button to enter a blank to create a blank document so I'm putting this in inside a div firstly this anchor so inside the anchor I'm going to put a plus sign so I'm going to make the div uh Flex box I'm making the content to be centered horizontally and vertically with with these two boot boot STP glasses so the line items makes it centered uh in the vertical direction as for the styling I'm going to put the width to something like 50 pixels and the height to to 20 to 200 pixels so I'm giving it a background color of of like light gray and for the font size of the plus sign that I'm going to make later I'm giving it the size of 100 pixels and here in this anchor tag I'm going to write the plus sign and because the anchors are usually uh blue and underlined I'm just going to set here the text decoration to none so that it won't be underlined and I'm just going to need to specify the color so that the anchor is not blue which is by default blue It Is by default blue let me just turn around this firstly and we should just be able to see a button to to have a blank document so that's what I wanted to see so if we click on it we can go to the create page as you can see now and what I'm going to do I'm going to add the span below it so it says the name so like blank document and when we will create our own documents we'll make it will dis play there the title of the document so just like blank document and I'm putting there I'm making it bold so in the stylings I'm just making the font way to bold okay now I'm going to need okay so I firstly just write an HR tag so it's just a big underline so it separates the create new document to the other documents so I'm going to need a loop here a for each Loop for each VAR item in the model so the Sops through each document model that we store in the database and for each document firstly we I'm just copying what we did here above for a bit of structure and of course I'm going to change a few things so the color I'm going to make it like light blue and the action is going to be edit and the ASP out ID is going to be the ID of that model of the document so at item. ID and inside here I'm just going to need to add an I I think to add an text Emoji which I'm going to find in the internet so just like a paper emoji or something so let's just see this one I'll try to copy this it looks okay actually then putting it here I'll put it here okay I need to add the span for the title of the document so I'm going to make the style to the font way to bold as well and I'm going to take then thec uh the documents title this is basically just like you know in word when you have Word documents in your desktop you see the word logo and just the title of your document that's that's just the idea of it okay so and then I'm going to need to to make all of this in a column in a div in a colum in a class with a column with a column class and I'm going to set it to I'm going to set it to two so if you this is a bootstrap class that takes two out of 12 imaginary boot strap lines so in a line we're going to be able to fit six different objects and outside the loop I'm going to put this column class class Dives inside the row class div so basically each arow is going to take six six documents okay if we reload this we're going to able to see just one because we created only one document that's what we actually did before so this works now and as I said this a line could take up to six documents let me just create a new one I'll name it something else asp.net I don't know Cod the future okay so I'm out of ideas I'm just typing something whatever so that we can see how the next document will be showed and there we can see the title of the document and and the same image for the icon when we click on it we see our document just the way we edited it with our comments to edit okay so if we go to program.cs I'm just going to change the default controller to the documents controller to the docs controller so each time we run the application we go directly to the docs controller you're in the layout I'm just going to delete that privacy Tab and I could just specify here the Home tab to be connected to the documents controller so I can connect the text editor icon of the apption to the docs controller and the Home tab so now what this else left for us to do is that we can change the index method so it only loads up the documents that each user makes so if I log in as a user I'm going to see only my documents and if another user logs into the application he will see nothing if he has created nothing or it's the documents that the user has created I'm just changing this lines a bit here so what I'm going to do here I'm going to Loop through with this I'm going to Loop through the context. docs with this link query lines that we have talked before so this just Loops through the context of documents in the database and then in this variable that we had above we're going to specify so we're going to take only the documents that are of a specific user so that where so here we will take the documents that the their user ID is equal to the ID of the user that is currently logged into the application so with this line user. find first value of the claim types that name identifier here we are just taking the ID of the currently logged in user and we will just take the documents that are of that specific user so I'm running here the application and we should not see any changes to the index method but how are we going to be able to see the changes is if we create the new user now we can register we log out first we can register with another user firstly just like name I know Billy Billy and uh when we firstly log in the application we we will see nothing we will see only the option to create a new blank document and then if we create another document we will see only the documents that are created by Billy so I'm just going to try to create a new document here and this could be a useful application because if you log in the application from different computers you could be able to see your documents that you have worked on and Al so download them which we will see a bit later as we can see we have here the document that we created by Builder and I think I'm just just going to try and test the delete button here because I forgot to do until now so I just going to change a bit the user interface because it's a little messed up so I don't need the user ID to be displayed and that's for the content I could display it again in a text area tag I just copy this from the edit view page and I think that's okay I'm just not going to try to fix a lot of things here it doesn't really matter you can just play around with it so okay so we see exactly the content of the document that we will delete and if we try to delete it it will be gone okay so I'm just going to log into the Shan account one more time we had the two documents that we saw before and what I'm going to show you now is what I was talking about before so we can we have an option in our comments to modify the word the words the text that we input here so we have an option under files print and we can actually print our documents this could be an real application so just like Google Docs you can okay I'm just putting here a file name you can just open up the the application from different computers and you can print out your files there so I'm just going to see okay we have here the shown document was printed as a PDF and here we see what we wrote before so this was it for this video this was how you could create an online text editor in asp.net core in this third project we're going to see how we can use check to accept payment in our asp.net core project all we're going to need is a strap account and we will see from the documentation all the steps we need to take to integrate stripe in our project which is pretty simple by the way next we'll create a small ecommerce application by creating a few products in our stripe account and in our database as well and we will implement this payment functionality to the application it is really not that complicated so just make sure to keep on watching so the first thing we want to do is go to strip.com just enter that on Google here we are on strip.com what we will do now is actually you will have I'm logged in here you just need to you see uh an option to sign up it's a pretty straightforward process but since I'm logged in I can see this dashboard here I'm just going there okay so I'm logged in with my stripe account and what we're going to need here is we're need this secret key here I'm just going to go and find my API key and here we have our publishable key and our secret key the secret key is actually the one that we're going to need to so that we can make the request to the strip for the checkout session and what we're also going to need from this stra from our strip account we're going to need to to go to our products let's see our product catalog all products and here is where we actually specify each program each product that we want to have in our ecommerce application so basically each product you have you will have to create here and then when the user wants to pay for it we make a request to our stripe to stripe so that the price of the product will be specified here this is actually the most secure way to do it and so that the user don't so that the price is not so to say written in the client site that's actually the um the recommended way of doing it here I have two products that I have created here actually so just this Jordan tshirt here we see here the name the description and this is the API ID or for the or the price ID that we will actually use to create the checkout session actually I've given a price here like $25 and I'm going to create another product so that you see how we do it so just add a product here okay I'm I don't know what can I have like a watch I don't know something okay also I'm leaving it here I'm actually going to need to I'm going to need to download this image to my computer so save as here our M watch okay it's here okay let's go back to the product catalog like our money watch description man watch 223 and I'm going to upload the image here this here wait for it to download I'm giving here the password of my account okay it's downloaded and we're going to make the price to be to be paid for this watch uh one off and the amount to be paid for let's set it to I don't know how much it cost like 150 let's make it dollars and add product and as we can see our product was also here created what we're going to need to do now is let's just go to strap docks strap documentation and here let me just go to payments here we will actually get the code to create our payment to accept online payments let's just click here and strap basically just gives us all the documentation we need basically it's a very simple process here we have a server. CS class with basically the main method here is this one uh this create method here and we have also three HTML HTML files for the checkout and one for the success when the payment is successful and the other one when the payment is not successful so what we're going to do now is just go to how I'm going to do it is I'm going to create a new project in Visual Studio let me just search for MVC okay is the net core where is MVC here and I give a name to the project like strip web app click on next I'm leaving it everything as it is just waiting from for the project to load and the first thing I'm going to do here actually is I'm going to go to app settings. Json where I'm going to store firstly secret key our API key in our stripe account so let me just go to just write here stripe then secret key that's the key we're going to need actually just inside parenthesis inside double quotation marks here we'll just input our secret key let me just go to our strip account here I don't know where they were API Keys okay this is the key we're going to use okay just click on it to copy it I'm just going to the project once again and I'm pasting it here that should be fine okay now I'm just going to go to program.cs to actually store it to access it and we can see it here also in the documentation somewhere actually in the server class this is actually the way to specify our secret key but we're also actually going to access it via our app setting adjacent because that's the more secure way to do it to access these kind of secret keys and actually here because my account is actually logged in with my strap account this is actually the actual key that I'm going to need because strap basically has connected my API key with this documentation here anyways I'm just going to the project once again let me just where was it written here just written before user outing so I'm just going to do the same thing I'm just going to write it here basically so here stripe configuration. API key and here we actually access it from the app settings. Json file so we WR builder. configuration that get section here from stripe we get this secret key here we just need to write get string and that is it that's how we access our API key and actually here we have error because we need to actually install st.net inside our dependencies so just go here to manage nugat packages just right here strap. net and install it okay so it's installed already if we go back here let me just click on it again and we'll just write here using strap on top and everything is okay now so what I'm going to do next is I'm going to actually create a controller add controller an empty controller and I'll just name it payment control controller okay so here first we have an index view page and this is actually where we will store the checkout. HTML page that we saw in the documentation but firstly let me just create a folder here for the payment controller I'm naming it payment and here I'm going to add the view page view page an index view page I'm leaving the name as it is and actually I'm going to delete this here and what I'm going to store there is what we have in our checkout. HTML page so basically this here so basically here's the code where we we have just a product there and the option to go to the checkout page and the form here just redirect us to this to the method that we will see will store in the controller actually so let's just go back to the controller and just so that we have it we will I just also just create this success. HTML page and the cancel. HTML page the success. HTML page is the page where we be direct it after the payment was successful and the cancel. HTML page is the opposite the page will be redirected if the payment doesn't go through so I'm just writing th those now so that we'll get them out of our way so I'm just having two other methods like this just naming them success and cancel actually I'm just adding two more view Pages here we cancel so in the success page I copied the code actually no I didn't copy it just click on it to copy it here's the success page basically we appreciate your business if you have any questions please email and there's like a default email there and in the cancel. HTML I'm just copying this here so forgot to add something to your card sh around and come back to or something check out canceled and yes what we'll do now is go to our payment controller and we will actually write the most important actually the most important part of the project the code the code that the method that we actually have here yeah just this post method create method here where is basically all the most important part of the code I'm just copying this here just storing it here after the index method so we have a post method create checkout session I'm just changing the name just and here we actually what we do here is we specify domain the domain here action may be false let me just see what our domain is okay so this is actually our domain so I'm just copying this and I'm pasting it here just like that and then well here we actually see that some let me just make it a bit bigger so here we actually are specifying some session create options which basically are the options that will pass to our to our checkout session that we will create and here inside of it we actually specifying these line items basically these line items are the products that the customer will actually pay here we see here the price we specify the price of it and actually the quantity of the products and down below the mode is set to payment which basically is means a onetime payment we could do actually also subscriptions in strap and we have here the success URL specified and the cancel URL so basically here I'm just going to need to to actually access this in our project this success. HTML page let me just see the outout okay so this actually the route so after the domain name just just need to write payment and success payment SL success and the same thing goes for the cancel page and yeah basically this is it and yeah here above we see here that we this is the place where we give the price ID the price ID is what what we had here when we created our products then just go back to the products so all these products had like a price ID here and this is actually the place where we specify it so let me just go back if we copy this it's the place where we specify the price of the product that's actually the recommended way strap payments are done and if we go back to the documentation actually if we had the option here to define the product to sell and we choose here we see all our products that we have since this stri documentation page is connected to our uh to our account if we right here click here on the armman watch we see the price is taken automatically actually and yeah just go back here we can actually do it as an example just put the price there manually and where we left it here below the session service was created and the options that we created above were passed to it and then here is basically just the the page will be redirected to the session that URL to another page and here is the status code of 303 which is basically just a redirection status HTTP status code and actually let me just so that we test this out as it is we just go back to index page and here we actually need to change the action the action was create session create checkout I think I named it create checkout let me use this ASP action tags and let us just run the pro just for us to see it okay so here this is our index page this is what we had in our documentation basically this we have an image like a title the price and actually the checkout will redirect us to the checkout page for our our manual watch actually for our the product that we created but this is just visually just for now if I click on on checkout here will be redirected to the stripe checkout page here we see the product that we have since the checkout session took our price ID we have the title of it the price the photo everything and let me just make an example here we can use like an email address what like whatever here in the card information we'll use a test card which is like 42 42 you can find this in the documentation as well just only four tools and we just give a date here some date in the future just one uh a code just the numbers here the name of the card holder here just the country and all just complete this and if you click on pay the payment should be successful we see this success page we appreciate your business if you have any question please email orders example.com and basically what was done here as I explained it before just after we clicked on the this checkout button here we were redirected to our method here the domain was specified the options for the item that we wanted to buy which were here we saw that we specified the price ID and the quantity we let it to one and basically this session this checkout session was created with the options and we were redirected to that checkout page this was it this not basically too much complicated if you just follow each line if you just read each line actually and if you read the documentation and if we can actually verify how we that the payment went through if we go to our stripe to our payments to our stripe account to payments we'll see all payments here and actually we see here this is the time 123 p.m. the customer was James this was the product that was bought and we see this amount was successfully paid so what we're going to do right now is actually I'm going to create some products products that we store here I'm going to create them in our I'm going to store them in our database as well so that we can uh we can make the page actually look more functional so I'm just going to store some products in the database and I'm going to display each one of them those uh in our project and then we'll when when the client wants to pay for something we'll take that price ID make the request to stripe and the payment will be accordingly so let's just go back to our project here I'm going to actually need to create a model for our products or items like add a class here we can just name it products or items like item first I'm going to need an ID for those then a name for the product for the item public string actually an image URL would be needed so basically when the project loads will store each of our products in the from the database to the first page and then uh we'll pass here the product uh the price ID as well so that when as I said when a user clicks on it to buy it we make the request to the strip with that price ID string price ID so this is um our item model now I'm just going to need to as you know we're going to need to create the data folder to create a context as we do in our MVC projects like a data folder and then a context I'm adding a class here I'm naming it like m MVC context or something this will actually need to inherit the DB context and we'll see a problem here actually because we'll need to install a microsoft. Entity framework core actually I'm just going to go to dependencies manage new get packages and I'm going to also install some dependencies for us to make the migrations to the database but firstly so Entity framework this microsoft. Entity framework core this installed now just I'm using something else we're going to need something else the Microsoft Entity framework card. tools we can see here that we have some commments from it to add migrations and update the database which we're going to need after we create our model so installing this as well accept Okay this is also installed now just right here SQL Server the dependency we're going to need as well since we are uh we are storing the information in our SQL Server database okay everything was installed let's go back to our context here we should actually see that if we import something here using uh Entity framework card this is now okay here I'm going to need to write the Constructor for context as usual and here we're going to give it some parameters DB context option MVC context options this is what we usually do when create our contacts in MVC applications it's not that I remember this actually you can find this in the documentation this will also inherit some base options this was it for the Constructor and down below we just also need to specify our DB set instances so the instance for the model that we created so an item I'm naming it items and I'm just going to need to import the models I think yes on top of the page that was it for now uh what I'm going to do now is just we need to create a database this for project just go to view test Explorer I think no just go to view server Explorer you're just going to need to create a new SQL Server database we need the server name so I'm just going to open up the SQL Server management Studio to get that server name okay so I'm just copying this just give a name to the database stripe web data the name of our project just click on this to get the properties to get the connection string just copying this and I'm going to app settings at Json to store this connection string okay so just write here connection strings I'll give a name to the connection string usually what I do is just like right here default connection string and then we'll pass here inside double quotation marks the address the so to say the name of the database the connection string here I'm also going to need to write to set encryption to false just because we don't need a password to access the database and this should be basically it now what's left to do now we created the model then we created that instance inside the context we wrote created the database and stored the connection string in app settings. Json now we just going need to go to program. Cs and add one more service here Builder do services do add so basically we're adding here a service for the context so after the models instances were stored in the context then the uh context just basically so to say connects it with the database and here you write that properties of the database so here we write the of the context was MVC context we need to use the the that data folder for this to be known here I'm just passing it some options options. use SQL server and here we'll pass the address of the the actually the connection string so to access the connection string we write Builder do configuration thatg connection string side here the name of the connection string which was default connection string okay we're almost done now what we going to need to do is just go to tools and go to nugget nugget package manager go to package manager console so that we will add the model that we created to the database so just basically add Mig migration so actually I'm just going to need to cut this here and just paste it here actually down below that's where it should be and then just going back to adding the migration I'm giving it the name like initial migration okay imigration was Ed just we just need now to update the database okay everything was stored in the database let we created so now what I'm going to do I'm just going to go to the to our database here and add some products there manually then we'll also just need to handle the the way we display them so just go to databases here name of our database was strap web app data go to tables here you'll just addit top 200 rows okay so what I'm going to do here is just go back to our products okay so firstly for the watch I'm just going to take the name the description I don't know if I need the description so just the title there the name the image URL we can just go back here just copy copy image address I think just store it here and next just copy this price ID store this here as well this is our first product I'm actually going to take the other one that I had there this Jordan shirt so just Jordan tshirt I'll take the price ID here I know where I've taken it actually the photo so Jordan tshirt for the image URL I'm actually going to find another one since I don't no where I took it Tshirt image probably one of these I think seems similar copying the image address storing it here now the price ID as well I'm just adding a third one I don't know if I had the product here I think I had a product here without an actual image actually but yeah I'm just taking that ID summer tshirt and just find an image for it as well and the price ID is what I'm also going to need so we have stored three products in our database now let me just go back to the project and we will just take them from the database so we'll go to the controller actually firstly and I'm going to need to have a we're going to need to declare Constructor here to take that information from the context so firstly I need a variable to store the context so like a private read only MVC context I name it underline context as usual we'll need to import this folder here that has the context here we declare the Constructor so basically we're taking the context inside this Constructor and we're passing it to our variable so now we we need to access it here in our index page so basically just I'll make this an asynchronous method so we'll write here async task and here when we return the view we actually going to await the context so await underline context dot items do to list I think just need to remove this underline here need to use Microsoft Entity framework Corde here on top of the page and we'll have no errors anymore so the last thing we going to do is go to the index.html we're actually going to remove everything that we had here by default and here on top of the page we're taking the item model so add model iable name of the project do modeles do item here I'll have a container div to give it some styling some margins and padding then I'm going to have another div with the class of row this is basically just some bootstrap class uh styling with these classes if you know bootstrap and then inside each row I'm just taking a loop here a for each Loop we looping through each item in the model I have another class of column I have another div with the column class and inside of it we're also going to need another div where we'll store the form we making so here we're storing basically each element each item and we'll make them to be Center the title and the and the button actually everything that's inside the item that an item has so I'm using this deflex to make it a flex box justify content Center and just give it a bit of styling setting the position to relatives actually will specify the action method where as with this ASP action tags where the form will be submitted so to this create checkout method and the method will be post so firstly we have an input here of type hidden Name ID and this will take the item that ID that we take from the model this would be a single tag next we want the image so I'm taking an image tag the name of it will be image URL so that we can bind this in the method that we submitt it to this s course here we'll just write the image URL item do image URL and we'll also give it some styling set the width to be 70% so it's not too big and this will actually also be a single tag I will put the title inside an H6 tag name actually the name of the how we stored it name or okay it's the name not title it name will be name it's a big and and about this link let's give it the position of absolute I'll make it to be from the top 40% far away here inside the text we'll store actually the item that name I'm going to need another input to be invisible which will be the price ID since we don't want the user to see it so the name will be price ID and the value will be item. price ID and at the end just need an input for the bottom so input give the class of button button dark of type submit and the value what we want to be displayed in the button will be check out for the styling we want the button to be we'll give it a position of absolute so that we can place it so to say from the top 60% so it is a bit uh below what we had here the image title okay this is a single tag as well so this is the styling this is SE to you but just the way I want to do it let me just okay so I will go to program.cs and put the default controller to be payment so that each time I run the application will be redirected to that page then I just run to check okay so we see here we have the first image the second one and the third one and I style them a bit different actually but what did I do wrongly here in the second image the Jordan tshirt is not displayed let me just I think probably just got the false URL copy image address just turn on the program one more time so probably it's not updated yet what we inputed to the database but anyway I'm just going to play around also now I think I'll see it a bit later I'll play around bit with the styling so it looks better so just something small I'll give here a class of item so that I can access it in the style. CSS file and then I'm going to want to give a CL class also to the title here to the header so class item title and to the button as well item button okay so if I what did I do here if I go to this www root to CSS folder side. CSS so I'll make the item and item button so I'm accessing these two items I'll set the opacity to basically the display to zero so at first we won't see the title and the button but as soon as we will hover over them with the mouse we will see them just a bit of feature I actually want to play around with CSS in each project I make but it doesn't really matter just for the aesthetic part of it do item so we want so as long as soon as we hover over the item so the whole div we want to access this item title and the same thing is for the item button so as soon as we over over the item we will access this to the title and the button and you will change the opacity to be 0.4 let me just turn on the program again we'll wait for it to load okay so we see that that okay not exactly what I wanted let me see what I did wrong here okay so actually I wanted to set the opacity of of this to one when I hover over the item I actually wanted to make the image itself a bit disappear so item hover item image okay I don't know if I give a class to the image actually image image image class of no idea item image I want to make the opacity of the image to be 0.4 and yeah this should actually do it now okay so that's actually what all I want to do so here as soon as we hover over it we can see the button and the title and the background is a bit blurred or so that's it I will fix it a bit later I think maybe if I just refresh the database it should work but yeah anyway I'm just going over to the index to the payment method actually here and the last thing I'm going to need to do here is to take from the form the product here we'll use this bind tag here we bind the ID the name the image URL and the price ID to the model to the method here so we are we'll specify here that we're taking an item I'll name it item actually after the square bracket here and we will take it in our method and here we'll specify we'll take the price ID so basically just need to write here this to access this price ID with this string interpolation so inside uh curly braces I'm just need to access item do price ID and each time that we click on an item we should get make create the checkout session with the specific price ID and we should be redirected to this stripe checkout session for this specific product so if I run the project one last time here I actually just refresh the database I don't know what the problem was with the second image but now it seems to work and here we have our items and if I check click check out on the first one for example we should be redirected to the checkout session for this specific item we see here the name the price and the item also then just go back here click on the third one should be redirected to this one which I haven't created with an image in my uh stripe count let just check this second one as well so we should be redirected to the second product that we created actually for this one for $25 I'm just trying this one last time it's 42 42 42 42 42 Just some name and some data a date in the future just a number here the name click on pay and the payment should also be successful as we can see thanks so much for watching I mean I know this took a bit longer than I thought it would but I hope you didn't I didn't like uh you didn't get messed up in the way and I hope you understood a few things don't forget to subscribe or like the video if you haven't done already and I will see you guys in the next video