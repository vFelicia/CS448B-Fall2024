welcome to the great gatsby bootcamp where you're gonna learn how to build and launch a gatsby site from scratch if you haven't worked with gatsby before it's a framework based off of react and graphql that makes it really easy to create both websites and web applications i've been working with gatsby a lot lately using it for both my static sites and my dynamic web apps and i'm excited to bring you this class as it's a tool i've grown to love i'm andrew meade from mead dot io let's go ahead and jump right in welcome to the very first lesson for the great gatsby boot camp where we're gonna start using gatsby in this video in particular we're gonna focus on three things one we're gonna learn a little bit more about gatsby two we're going to install the gatsby command line interface and 3 we're going to use that command line interface to create and run our very first gatsby project by the end we'll have our first gatsby site up and running and that's what we're gonna build off of and customize throughout the rest of the boot camp let's get started with gatsby by pulling up its website we can find that over at gatsby js.org and i want to spend just a couple of minutes here exploring the tool in a little more detail as mentioned in the welcome video gatsby is a static site generator based on react graphql and nodejs now gatsby can do so much more than you can typically do with a static site generator and you actually won't see that term anywhere on the gatsby homepage so instead let's think of gatsby as a react framework for building complex websites and web applications so with gatsby you're not just limited to static sites you can also build complex web apps with data storage authentication and more so if i'm trying to build a personal website to make myself look good to potential employers i could use gatsby to get that done if i want to start a freelance web development business building websites for restaurants i could use gatsby for that too and if i wanted to launch the next startup and i needed to create my web app i could use gatsby to build that web app out now gatsby has gotten so popular because it's really fast and super easy to work with gatsby has so many core features baked right in so you can get started with a new project in a matter of minutes without needing to install or customize any build tools gatsby comes with everything you need to get started right away and the good news is that you can further customize your gatsby projects using one of the many plugins that it supports these plugins allow you to add all sorts of new features to your site both big and small and don't worry we'll be diving deep into plugins and how to use them a little later in the bootcamp now let's say i'm creating a personal website using gatsby i want to have a small portfolio of my projects and i also want to maintain a blog making myself look good to potential employers now for me i want to write those posts in markdown i like having my content directly inside of the project itself so what i want to do is write markdown posts then i want gatsby to convert those over to individual html pages for my site in that case there is a gatsby plugin that can help us get that done so all we need to do is write the markdown posts in new markdown files and gatsby handles the heavy lifting of converting those over to html pages using a unified template so everything looks consistent in your site now let's go back to that other example of someone who's starting a freelance business targeting restaurants in that case the restaurant owners want to customize things they want a blog where they can talk about new specials and they also want to be able to update their menu on the fly whenever it's convenient for them now in that case markdown is a terrible choice the restaurant owner is likely not technical and does not want to manage content in markdown they would have to learn about markdown and code and get and all sorts of things it's never going to happen that's why content management systems like wordpress got so popular it allowed website owners to easily manage the content displayed on the site without needing to write code the good thing about gatsby is that it can do that same thing there are gatsby plugins allowing your content to come from content management systems like contentful and even wordpress so you can have a website powered by gatsby but still allow the website owner to manage that content using a nice simple admin interface where they're just filling out form fields and clicking save and the new content magically appears i remember when i was running my freelance web development business from about 2011 to about 2015 and everyone you talked to wanted a wordpress site they didn't want a wordpress site because they cared about using php or mysql they wanted a wordpress site because they knew with a wordpress site they could customize the content on their own now everyone can have what they want developers can write their sites in a modern stack using node.js graphql and react and the website owners can still manage their content using whatever cms they're most comfortable with including wordpress in this bootcamp we'll end up covering both of those approaches so we're going to start off creating a simple gatsby site and getting comfortable with the basics then we'll convert that over to a blog powered by markdown files and from there we'll convert it over to a blog powered by a content management system and in this case we'll be using the contentful cms to get that done now let's actually get started with gatsby the only thing you need installed on your machine to use gatsby is nodejs if you don't have node installed you can grab it over at nodejs.org and you don't need a specific version just grab something modern let's say v8 or greater in this case we have v10 and 11 both of those would be perfectly fine and if you have something slightly different on your machine that's going to work fine as well now to actually use gatsby we have to install its command line interface that's going to be used to generate new gatsby projects and it's available as an npm module so what i'm going to do is crack open my terminal and from here we're going to run a single npm command that's npm install followed by the g flag to install the module globally and the module name is gatsby hyphen cli at the latest version 2.4.17 now if we go ahead and run this command it's going to work through the installation process and once this is done all we're going to do is generate a new gatsby project and open it up in visual studio code or whatever text editor you want to use so right here the installation did complete successfully and to generate a new project first we want to figure out where to store the project now if you have a folder on your machine where you like to store your programming projects go ahead and switch to that directory for this bootcamp i'm just going to put the new project right on my desktop so i'll use cd desktop to switch over to the desktop and from here we're going to use the gatsby new command now the new command is going to accept a couple of arguments first up is the project name now this project name is the name of the folder that's going to get created so in this case i'll call it something like gatsby hyphen and the other argument we provide is the url to the starter we want to use now gatsby has a few builtin starters officially released by the gatsby team and there are hundreds of other ones created by thirdparty developers allowing you to build all sorts of interesting sites and applications the goal in this bootcamp is to explore the fundamental gatsby features and if you know those you'll be able to work with and customize any of those other starters out there so for us it's going to be the following url https colon forward slash forward slash github.com forward slash gatsby js forward slash gatsby hyphen starter hyphen hello hyphen world so take a quick moment to run that command and it's going to do two important things one it's going to create that new project folder and pull all of the starter code in two what it's doing right now is installing all of the modules necessary for your project to actually run once this command is done we can crack open the new directory in visual studio code and get started building out our site actually before it's even done we can get that process started so over in visual studio code i'm going to open up that new directory now for me i put it on my desktop and i called it gatsby bootcamp so i'll crack that open and right here you'll notice we do have a set of files and folders showing up and we will explore all of these in detail for now all i want to do is run a single command from the terminal allowing us to start our site up now in the background i can see that the command has finished and we're actually done with the terminal we're not going to use this for anything else in the bootcamp all of the other terminal commands i'll be running i'm going to run from the integrated terminal that visual studio code comes with you can always go up to terminal new terminal to find the keyboard shortcut to open up the terminal in vsc it's definitely a keyboard shortcut i recommend now right here we're gonna run one of the few scripts that gatsby provides if we open up package.json we can see under the scripts property we have six the one that we're going to start with is the develop script which allows us to start up the development server that we can use to run our app locally and build the project out this comes with all sorts of great features like live reload so your changes are reflected in real time now there are a few other commands as well we'll be exploring later in the boot camp but for now let's start with that develop script so from the terminal right here in the gatsby bootcamp project that is npm run develop when we do that it's going to try to start up our gatsby project the default port for that is 8000 and once this command is done we should be able to crack open localhost 8000 and visit our site here it's saying that things have compiled successfully so let's crack the site open in a new browser tab localhost on port 8000 i visit that and what do i get i get a small html page printing hello world to the screen so there we go if you're seeing this that means you have successfully created and ran your very first gatsby project now for the moment it doesn't do anything too interesting so let's go ahead and wrap up by actually customizing what we're seeing on the page to get that done we need to focus on the source directory now we have a lot of other folders and files in the project we'll focus on those later in the boot camp for now the focus is on the source directory and if we open that up we can see there is a single directory inside of there called pages the pages directory is a very important folder in your gatsby project and it's actually the topic of the next lesson so for the moment we're not going to dive too much into the details of what it is or how everything's working if we go inside of that folder though we can see we have a single file index.js this contains the react component that's rendering the home page right here if i open it up we can see it's about as simple as it gets on line 1 we import react on line three we export a functional component where we set up a div with the text of hello world so this is the content we're seeing in the browser if i go ahead and remove that text content i can replace it with something like the name of the bootcamp the great gatsby bootcamp i can save the file and in real time we can see the changes reflected over here thanks to the development server we're running in the background all right that's where we're gonna stop for this one in this first lesson you got gatsby installed and you also created and started up your very first gatsby site in the next lesson the focus is going to be on gatsby pages we'll talk about customizing pages and creating new ones and the focus will be on that pages directory and the files inside i'm really excited to get to that and learn more about why all of this is even working so let's jump right in to the next lesson welcome to the second lesson for the great gatsby bootcamp where you're gonna learn how to work with gatsby pages now in the last lesson we saw that by default we had this source pages directory and in there we had a single file for the single page on our site it was index.js which exported a component that component rendered a little bit of text and that's exactly what we were seeing when we visited our static site over in the browser the great gatsby boot camp showing up in both locations so when it comes to page creation the source pages directory is where gatsby looks when it's figuring out what static pages your site needs so all of the files we put inside of this directory are going to represent the pages for our site such as a home page an about page a blog page and anything else you might need and that'll all depend on the type of site you're building to get started i'd actually like to empty this file completely and build the page up from scratch so right here it's gonna start off the same one thing we'll do in all of our pages is import react that's necessary if we're going to use jsx and react is something we can import as it's already installed as part of our gatsby project from here what we're going to do is create our react component for this page as a standalone variable so const index page you could pick whatever name you like this is just the one i'm choosing and what i'm going to do is set this up as a function this function is our react component and all we need to do from here is return some jsx containing what should get rendered when this component gets rendered right here return in parentheses i'll set up a div and in there i'll add an h1 header element with the text value of hello after that i'll add an h2 and i'll add a little bio about myself something like i'm andrew a full stack developer living in beautiful philadelphia perfect now that i have this in place i can go ahead and make sure that this component gets exported like we were doing before so export default followed by the name index page now there's no need to create the separate variable and then export it but this is definitely the approach i prefer i find it a lot easier to manage my code so with all of this in place we now have a new version of the index page if i save the file i can see that gatsby compiled a new version of the site and right over here we have everything showing up hello i'm andrew a full stack developer living in beautiful philadelphia so this is all it takes to create a page we add a file to the source pages directory that file is a javascript file which exports a react component now if you're not familiar with the basics of javascript or react those aren't topics i dive into in the bootcamp though i do have courses for both of those i have the modern javascript bootcamp which covers everything you would need to know about javascript and i have the complete react web app developer course which dives deep into react and that entire ecosystem if you're interested in either of those i'll include links on the screen and in the description down below so what exactly is happening when gatsby generates our site it starts by looking in that source pages folder to figure out exactly which static pages it should create in this case it sees we only have a single file which means our site is only going to have a single page now the pages you create should indeed be javascript files and those files should export react components gatsby will render that react component to figure out what should get shown on the page that's exactly why we're seeing our two bits of text when we visit the root of our site at localhost 8000. now the name of the files in the source pages directory is also important in this case we've called our file index.js this is similar to how index.html would be the default page for a website when you're working with gatsby index.js in the source pages folder that is your home page so in this case that's exactly why that content is appearing now to create a new page all we need to do is add a new file to the pages directory and that's exactly what we're going to do right now in total we're going to add three new pages in this lesson let's go ahead and get started by adding a blog page to the site so this is going to be a page where we will eventually show a list of all of the blog posts we've written to do that we create a new file in the pages directory i'm going to call this blog.js and like we did with the index.js file we have to export a react component which contains the content we want to render so let's get that done to start i'm going to import react remember we need react in order to use jsx and from there we're going to set up our functional component i'll call this one something appropriate for the blog page like blog page i'll set this up as a function and i'm going to return the jsx which contains the stuff i want to render in this case i'll also use a root div and i'll set up a title and some text so the header for this page is going to be something like blog or my blog then down below we're going to set up a paragraph element and right here i'll just say something like posts will show up here later on and that's true a bit later in this bootcamp we'll actually get a dynamic list of posts showing up below the title now the last thing we need to do is export the component it's an important step otherwise gatsby cannot get access to this function to actually render the page right here that would be blog page exactly as defined up above now we can go ahead and save the file and over in the browser we have access to a brand new page this page lives at localhost on port 8000 forward slash blog where this part of the url after the forward slash is the name of the page file so in this case i called it blog over here that's why we have access to forward slash blog and when we visit that page what do we get we get our component content i have my header blog and i have my paragraph text just below creating new pages with gatsby could not be easier all you have to do is add new javascript files to that pages directory now this bootcamp is not just you watching what i'm doing i've also included challenges which require you to use what you've learned to continue to build on the site so down below let's talk about what i'd like you to do then i'll give you some time to go off and do it before we work through the solution together so the big picture goal is to create an about page and a contact page so you'll be adding two new pages to our site by the end we'll have four in total step one create that about page you can include a page title and a bio use an h1 for the page title and a paragraph or two for the bio then you're going to create the contact page for that one include a page title and your contact details as well now when it comes to the file names which end up being the urls you can just use about and contact finally test your work once you have that code in place actually visit those urls in the browser and make sure you see your pages showing up so take some time to knock this out test your work pause the video when you're done come back and click play how'd that go let's get to it step one i'm going to create a new file in the pages directory for the about page now i'm gonna go with about as the url though maybe you wanted to do something like about me or even just me in this case about.js i'll start by importing react from react and then we'll set up our component so a new constant about page or something similar we'll set up the function itself and we'll return the necessary jsx like i had with my other pages i'll have a root div with all of the content right inside i'll have an h1 that says about me then down below i can add a paragraph to the page as well and i'll say something like i currently teach full time on udemy perfect so once we have this in place all we need to do is export that component export default about page and we are halfway done now that we have the about page created let's go ahead and move on to step two and create that contact page so once again we need to create a new file in the source pages directory i'm going to call this contact so that would be contact.js and then here we move through that same process importing react so we can use our jsx setting up a constant for that component contact page and then setting up the component itself and returning the jsx that should get rendered on the page now for the h1 i'll use the text value of contact whoops not contact page then down below i'll set up a paragraph and i'll just say the best way to reach me is via my twitter which is at andrew underscore j underscore mead perfect actually i'll say via that on twitter excellent so now that we have this in place once again just need to export the component export default contact page and we are done we have our two new pages which just equals a new javascript file that exports a component now let's go ahead and i'll remove those challenge comments we'll make sure everything is saved and we'll move on to the final step which was to test our work so first up i'll swap out forward slash blog for forward slash about i visit that and i see my about page which is awesome from there i'll visit my contact page right here that shows up with the contact details i specified so at this point we now know how to create pages with gatsby the next thing we want to do is figure out how we can link between those pages it's already getting a little old manually typing urls in the browser bar so let's jump right into the next video and learn how we can properly link between our pages when using gatsby now that you have a few pages in place let's go ahead and link between those pages now the most obvious way to get this done would be to use the anchor element provided by html itself and that would indeed work so let's start with the homepage i'm going to navigate over to index.js the home page component and in the browser i'll navigate over to localhost 8000. all we're going to do is include some text down below like need a developer then i'll have contact me which will be a link over to the contact page so what am i gonna do well over here i'll add some stuff just below rh2 it'll be a paragraph tag something like need a developer question mark then after that it'll be the link so here i'm using the a anchor element the link text will be something like contact me and i'll set up the href attribute to specify the destination that would be forward slash contact to navigate over to that page now this is indeed gonna work i save the file i see my new text and my link on the home page and i'm going to click contact me it brings me over to the page as expected now this does indeed work but you'll notice that we went through a full page refresh the entire page went away it went to a white screen then the contact page was loaded in let's see that one more time so we click the link we see that flash of content and the new content appears that's because we're using the standard anchor element this is indeed going to work as a tool to link between your pages but gatsby actually has a different way you can link between your pages which comes with a lot of optimizations allowing the content to be swapped out instantaneously so let's see that in action and the first thing we need to do is import something new up above right here for this import statement we'll be grabbing a named export so inside of curly braces that is capital l link and we'll be grabbing it from the gatsby npm module now remember gatsby is an npm module that's already installed with our project over in package.json it's listed out as one of our three dependencies so we're good to go no need to install anything new and what we're getting access to is link link is a react component when we use link to link between the pages of our gatsby site there's a whole bunch of optimization that happens behind the scenes for example gatsby is going to preload the page content you might be heading to so if you do click that link it loads instantly and you no longer get that flash of content between pages so down below we'll leave our old example in place and we'll add the new one just below it need a developer then we'll set up our new link using the link component so right here i'm gonna set that up now here we have a separate opening and closing tag and right in between we put the text for the link so once again contact me perfect the only other thing we need to do is specify a prop to the link component the link component needs the to prop 2 is the path we're trying to head to in this case it is forward slash contact exactly like we had up above so this is the correct way to link between pages in your gatsby site and if you're still linking to an external site like your github profile or twitter the anchor element is perfectly fine let's go ahead and see this in action i'm going to save index.js over in the browser we'll navigate to the home page and right here we see two links the old one we had before and our new link down below now let's pay careful attention to the content as we click the new link i click it and what do i see i can see the new content instantly no longer do we have the flash of content we got when we clicked that old link so it's a much nicer user experience once again when using link gatsby performs all sorts of optimizations behind the scenes to make sure the new content can be shown in what looks like real time let's go ahead and remove that first solution which wasn't working so well and with that in place we are done with new content down below a quick challenge for you to knock out the goal is to add a couple of new links to the site on the contact page i'd like you to take that twitter handle and convert it into a link to the twitter profile so it should actually take users away from your site over to twitter.com now if you don't have a profile you want to link to you can just link to any external website like google.com or something similar for step two on the about page i want you to link over to the contact page if someone wants to reach out based off of your bio so make sure to include the correct link there finally test your work actually pull up the site click both of those links and make sure they work as expected for this link the link internally between two of your pages you should see the content instantly without that flash all right knock it out when you're done come back and click play all right let's get to it on the contact page i'm going to link over to the twitter profile so right here i do want that handle in the future so i'll cut it out copying it to the clipboard then i'm going to set up the a anchor element and since we're working with an external link we don't need to use the link component now the text is going to be exactly the same as what we had before just the handle itself and the url will be specified via the href attribute that'll be https colon forward slash forward slash then twitter dot com forward slash the handle which once again i have as part of the clipboard perfect with the link in place we can always set up the target attribute setting that equal to underscore blank and that's going to open the link in a new browser tab so users aren't completely redirected away from our site let's go ahead and test that out over inside of the browser i should have that new link showing up i click it it opens up a new tab and it pulls up my twitter profile now i can go ahead and close that and i'm still on the contact page the next link you needed to create was on the about page on the about page i wanted you to link over to the contact page in this case we want to use the link component as we're linking internally so i'm going to import the named export link from the gatsby module then down below we're actually going to use it now i didn't tell you where to put it so anywhere is fine i'll just add it down below my other paragraph right here i'll add a new paragraph i'll put the link right inside the link text can be something like want to work with me reach out and then all i need to do is set up the to prop for the link component right here that'll be a string forward slash contact and we're done now let's head over to the about page and make sure this actually works if it does we'll be all done our challenge so i'm going to remove those challenge comments i'm going to save every single file in the browser let's go to forward slash about here we have our new link which is a good start i click it it brings me over to the contact page without that full page refresh which is excellent and now that we know how to link between the pages on our gatsby site let's go ahead and move on to the next video where you're going to figure out how to create shared components so imagine we want to take links to the next level setting up something like a navigation bar that shows up exactly the same for every single page that is the topic of the next lesson so let's jump right into that your gatsby site currently has four pages and the content for those four pages is completely unique there is no shared content we type out everything the page should render in the component for that page now this works really well for unique content but think about things that are shared across multiple pages in your site like a header or a footer this is not something we want to have to type out for each and every page we're going to have duplicate code all over the place instead we want to create a separate react component that all of these pages can use and render and that's exactly what we're gonna do in this video together we're going to create a footer that'll show up at the bottom of every page on our site then as your challenge for the video you'll create a header for the site pages with a shared navigation so it's really easy to access all of the content on the site so let's get started together with the footer to get started we need to create a new file for a new react component the footer then once we have that component in place all of these pages can import it and use it where they'd like at the bottom of the page that'll give us a shared footer now this new component file should not go in the source pages directory since we're not trying to create a new page we're just trying to create a component that can be rendered on every page so to do that we have to start by creating the components directory and from there we're going to go ahead and create footer dot js this will be the footer component now the components directory has no special meaning the files inside of here aren't going to do anything unless they're imported and used somewhere else and that's exactly what we want now to stay organized i'll put the footer all the way over here on the right let's go ahead and create the component i'll start by importing react from react and once we have that in place we can create a new constant called footer and that's where i'm going to store my functional component and i'll set up the content i'm going to render in this case it'll be the footer element as the root element and right inside of there all i'm going to do is add a paragraph and i'll put in a little text like created by andrew meade you can use your name there then i'll put the copyright information so copyright 2019 now on a mac to generate that symbol that is option g i'm not sure what it is on other operating systems you could always type out the full word copyright the last thing to do is to export the component from this file otherwise we'll never be able to access it so export as the default export footer and there we go everything in this file is done we can now import and render this component on the various pages for our site let's start with the one page we already have up that's the contact page right here i have the contact page component to start i'm going to go ahead and import the footer so i'm importing the default export calling it footer and i'm grabbing that from a file relative to this one so i'm going to start off with dot dot to get out of the pages directory where the current file lives then it's forward slash components since i'm looking for a file in there and it's called footer leaving off the js file extension now that we have the footer component imported it can actually be used on the page and in this case it's going to make sense to put the footer at the bottom where it belongs so right here just before that closing div i'm going to render the footer component now if i save things what do i see in the background i can see that my contact page does have the footer which is a great start using react components we're able to compose our pages and nothing we're doing here is gatsby specific here we're just using the fundamentals of react so i'll do the same thing for the about page importing the footer from we're going out of the pages directory into components and there we have footer and i'll copy this line to the clipboard so i can use it for my other files right here before that closing div we'll render the footer component and then let's check out the about page so i head over to forward slash about and right here i can see the footer is showing up which is great now let's take this over to the other two pages blog and index so for blog i'll paste that import statement in then just below where we have that closing div that'll be footer to render it and finally for the home page so right here importing the footer component and rendering it near the bottom of the page content perfect the last thing to do is to check those two pages the blog page and the home page i'll go to forward slash blog and the footer shows up i'll go to just the root and here the footer also appears now we have a single place to manage the footer content and if we wanted to update something like the year i would simply type it in save the file and now that change is going to be reflected on every single page for the site which is exactly what we want all right i'm going to change that back over to 2019 and now it's time for you to do something similar but for the page header so let's talk about what you're gonna do for this challenge the big picture goal is to create a shared page header so step one set up a header component that component should render a site title so a title for the entire site and it should include links to all four pages so this header component is going to contain our main navigation now don't worry about creating the perfect semantic html structure you can just get all of this content shown to the screen and as we work through the challenge solution i'll go ahead and set up the semantic html markup down below next up make sure the component you create gets rendered at the top of every single page for the site all four of them then test your work you should be able to see your navigation bar and you should be able to click between all of the links to navigate to the four pages on your site so take some time to knock this out test your work when you're done come back and click play how'd that go let's get to it by first creating the new component so this is going to be a new component in that components directory called something like header so that's header.js and in here we're going to import react since we're going to end up using some jsx to render the header component and i'm also going to import that named export link from gatsby as i do want to set up the navigation links as well down below we can actually create the footer constant and set up our function for the functional component now i mentioned that your job was to just get the content rendered to the screen and not to worry too much about the correct semantics for this sort of thing in this case though we will work through that together so i'm going to start with the header element from there i'll set up an h1 with the text of andrew mead which i'll use as the title for this site you could have used any text you wanted to then we'll focus on the navigation menu so for this we want to start with the nav element then we're going to create an unordered list and in there we'll have a list item for each and every link so this is the basic structure we're going to use and the first list item will contain our first link in which case i'll just link to the home page so right here a new instance of the link component the text is home and where are we going to we're going to forward slash down below i can set up another list item with a second link for this one i'll go to the blog page though the order of the links was not important as long as all four are showing up then from there it's about followed by contact so i'll knock out about first that is going to go to forward slash about and finally setting up the list item for our last link this link going over to the contact page so to forward slash contact so this is the basic structure for our header component the end result is our site title and four links showing up to the screen now i actually called this footer that is a mistake i should have called that header just down below let's go ahead and export our new component so export default header and all we need to do from here is import this file and render it somewhere on the site and in this case i want to do that for all four pages so that is step number two i'll start with the contact page so right here actually i'm going to start with the page showing up which is the home page so right here in index.js i'll start by importing the header from that's dot dot forward slash components forward slash header and i'm going to copy this line to the clipboard so i can use it in my other page components just down below as the first thing i render i'm going to render the header component and if i save the file i should see that showing up and it is here i have home blog about and contact and if i click one of those links like the blog link it brings me over to the blog page which is awesome now the blog page itself doesn't have a nav menu so let's fix that here i'll paste in my import statement i'll set up the header component and i'll do the exact same thing for my other two pages as well first up is about rendering the header and last up is the contact page perfect now once we have this in place we'll have that shared navigation and the final thing we need to do after saving the contact file is to test our work so right here i'm on the blog page i'll go to home then blog then about then contact and we can see that on each and every page we have our header showing up up top and down below we have our footer so when we're working with gatsby we can compose our site of various components exactly like we're able to when we're using react in any other context the only important thing to remember is that if we're creating a react component that's not meant to be an entirely new page that should not go in the source pages directory in this case we're putting it in the source components directory but this directory could be called anything you'd like its name is not important all right that's where we're gonna stop for this one i'll see you in the next lesson in this lesson you'll be taking your pages to the next level by creating a single page layout component so you can think of this video as a continuation of the last one in the last video we set up our header and footer and in order to render them on every page we had to import them on every page and then manually set them up in the correct position four times now that was four times four four pages as our pages grow and our layout shifts that's going to require us to make even more changes to every single page component what we're going to do here is set up a universal layout component that we can easily use to create a new page with just a couple of lines of code so let's see what that's going to look like and how it's going to help us to start let's create a new component in the components directory and this is something we're going to call layout.js and eventually this will be the only component that our pages need to import in order to get up and running now we're going to focus on layout.js and index.js if we can get the layout to work here it'll be really easy to add it to the other three pages so to start let's create the basic structure of the layout component right here we're going to start by importing react from react then we'll set up the layout constant right here it's a functional component where we return some jsx and i'll start off with a single root div now down below we'll go ahead and export this component so that's going to be export default layout and we're done well we're done for now let's actually try to use this over in index.js and see what happens so here's the big picture goal i want to be able to remove all of the components that are used on every page and just use that single layout component instead so that's the only one i'm gonna end up importing i'll import layout from dot dot forward slash components forward slash layout and then we're gonna use it down below now here's what that's going to look like i'm going to recreate the return statement and i'll remove the duplicate one in just a second right here we're actually going to start by rendering layout and the stuff we want to put on the page the stuff unique to the page that goes right inside so for us what's unique well it's not the div or the header or the footer it's just this stuff right inside so i'm going to copy those three elements i'm going to paste them into layout and this is the end goal of what we want now currently if i remove that duplicate return this is not going to work as expected i'm going to save index.js i'm going to navigate over to the homepage and what do we have we have a blank screen that's because we're passing stuff to the layout component this stuff right here but it's not actually rendering it so what is it rendering it's just rendering an empty div well in react we get access to the content inside of a component via the children prop and that's exactly what we're going to use to get all that other stuff rendered so right here inside of layout.js we get our props and we're going to use one right here we are going to render props dot children and i'm just putting that inside of curly braces to reference that javascript variable now what is props.children well it's the jsx passed in so it is jsx for these three elements now all i'm gonna do is save layout.js over here what do we see we see that on the home page we now have our home page content which is a good start from here we can customize the layout component to add stuff that's going to be shared on all pages like that header and footer so i'll import the header from right here that is dot forward slash header and i'll do the same thing for the footer and then finally we're going to use both of those now the header is going to go just before the individual page content so i'll put that right here and the footer is going to go just after that content exactly like we had before the nice thing though is that if i want to adjust the layout further i no longer need to go into the individual page components instead i just adjust the layout component which now maintains the page layout and here we go our index.js file is much simpler it's concerned with a lot less and over here we have the exact same stuff rendered to the screen that we had before i have my header with my nav links and down below i still have my footer as well so using the layout component is just going to make our lives a whole lot easier now let's go ahead and integrate that into the other three pages for the site over in visual studio code we can start with the blog page so right here we no longer need to import those two things we're just going to import layout from dot dot forward slash components forward slash layout and i'll copy that line to the clipboard for now then down below we have to use it so right here we need to restructure what we have we render the layout and inside of there what do we put we put what we have right here so i'm going to move that just inside and i'll delete the old div i had before and there we go the blog page is now also powered by that layout having the header and footer set up behind the scenes now let's quickly do the same thing for the other two pages so right here pasting in the layout import then setting that up down below and moving the unique content for the page so this stuff right here just inside and deleting the old structure we had perfect last up is the contact page so once again using the layout and putting the unique content just inside excellent so in the last two videos we had to do a little bit of restructuring going into each and every component file which can be a little bit of a pain at first but now it's done all of our pages are powered by the layout and no longer are we gonna have to move into individual pages and adjust the same thing in every page if you find yourself doing that it's probably something that needs to be broken out into a standalone component instead so over here let's just go to the about page and the contact page to make sure everything is working and there we go we have a basic static site created and powered by gatsby now we're not done not by a long shot there's a lot more to cover and what i want to focus on in the next few lessons is styling your gatsby sites so let's go ahead and dive right into that starting with the next lesson you now have a decent amount of content on your gatsby site spread across four pages the only problem is that all of this content is unstyled and looks pretty terrible in this lesson you're going to start to learn how you can style your gatsby sites using css along the way this video also covers the process of installing and setting up gatsby plugins which allow you to further customize your site in this lesson we'll be using a gatsby plugin to enable sas so we can take advantage of all of the great features of the scss syntax but let's get started with some basic styles getting those applied to the site in a visual studio code the first thing we're going to do is create a new place for our site styles now i'm gonna close all open editors there's no need to have all of these files open anymore and down below in the source directory this is where we're gonna add a new folder i'll call this something like styles once again the name is not important and in there i'm going to put a new file called index.css this will be the start of the styles for our site and to make it obvious whether or not these styles are being included all we're going to do is use the universal selector to select every element on the page and we're going to change its color over to red now by default we can see these styles are definitely not being applied nothing over here is red and this is correct by default gatsby is not going to load in any of your style sheets it's up to you to import them and in this case we're going to import our base style sheet from the layout component as the layout component is used on each and every page so all we need to do is set up another import statement to get those styles included in the static site that gatsby generates right here importing that's going to be dot dot to get out of the components directory forward slash styles forward slash index dot css now with just that one line added we can save the component and we can see that these styles are definitely being applied as everything is read and there we go we now have a style sheet loaded in and we could write every style for our entire gatsby site right inside of here now that's not the approach we're going to take we're going to break things up a little bit but this is a great starting point before we go any further what i want to do is enable a css preprocessor here we'll be using sas allowing us to take advantage of the scss syntax so we can use all of the great features functions mixins and other tools it provides now to do that we are going to use our very first gatsby plugin you can find a list of all available plugins on the gatsby site that's gatsby gatsbyjs.org and here's the site i had pulled up earlier in the bootcamp now in this case we're looking for the plugins page this allows us to search through all of the available plugins to find the one we're looking for now this list includes both official plugins released and maintained by the gatsby core team and it also includes third party plugins written and maintained by members in the community so right here the one we're looking for happens to be an official plugin and if i search for sas here it is it is gatsby plugin sas so currently i can use the import statement to import a css file but if i tried to import a sas file or an scss file gatsby wouldn't know what to do once we have this plugin correctly installed and configured it will all work as expected on the right hand side we have the documentation for this particular plugin here we need to install a few things and add a little bit of configuration and we're going to work through that process together so let's go ahead and set up support for this by moving into the terminal shutting down the development server using clear to clear the output and finally using npm install so right here that's npm install and the first thing we're going to install is the plugin that is gatsby hyphen plugin hyphen sas as seen over here so all of these are the names of the npm modules and the other thing we need which is mentioned in the docs for this plugin is node sas so this module is responsible for actually converting the files down to regular css and this plugin just allows us to actually do that from a gatsby site now we can go ahead and run this installation command installing both of those tools and once that's done all we need to do is configure our gatsby site to actually use that plugin it's not enough to just install the plugin it actually needs to be configured now this is done via a file that currently does not exist in our project but we can go ahead and create it it needs to live in the root of our project and it needs to be called gatsby hyphen config dot js now there's a lot we can do in this file as we'll explore throughout the boot camp one of the core things we can do in here is configure the plugins we want to use and that's exactly what we're going to end up doing this config file just needs to export an object but it's important to note that this is a node.js file so we need to use module.exports setting that equal to the thing we want to export in this case an object now on here one of the main properties we're going to end up using in this config file is plugins plugins is an array and here we can configure all of the plugins we want to use now in our case we only have the one plugin so we're going to provide that as one of our items in the plugins array and all we need to do is list out the name of the plugin that is gatsby hyphen plugin hyphen sas we can save the file and now we're actually ready to use scss or sas in the project so down below in the terminal make sure to stop your development server if it's running mine's not and then we're going to start it up again npm run develop and once it's up it's going to be using this plugin which means we can now create and import scss or sas files so i'm going to do just that what i'm going to do is take styles.css excuse me index.css in the styles folder and i'm going to rename it i'm going to call it index.scss then what i'm gonna do is import that file instead of importing the file that no longer exists i just add the s save the layout component and now our site should be back to a nice working state here everything is still shown in red and if i go over to the style sheet i could change that to blue save the file and i can see that my change is indeed being applied with that plugin in place we should also be able to use all of the great scss features so i'm going to create a variable up above using dollar sign followed by the variable name and i'll store the green color inside of there then down below instead of just providing the color i'll reference it via that variable so dollar sign color now this would not work in regular css but we're not working in regular css we are in an scss file and right here i can see that green is showing up so there we go with a little bit of configuration adding just a few lines of code to our new file we're able to tell gatsby that we want to use a gatsby plugin allowing us to customize the functionality for our site now let's go ahead and wrap up the video by grabbing a nice base set of styles we'll be using for the project you can grab these styles by heading over to the browser and going to the following url that's links dot mead dot io forward slash gatsby styles now this is just going to redirect you over to a github gist and here we have a very long style sheet this is what we're going to copy over to our project as our starting point so right here i'll click the raw button to pull up the raw file content i'm going to highlight everything using command a or control a depending on your os then i'll copy it to the clipboard and paste it over here in index index.scss removing the stuff we had before now with this in place we should notice a pretty big change to how our website looks over here what i'm going to do is pull up the site we'll notice it's no longer in green which is good and we'll also notice that it's definitely a little bit styled we have nicer font families and a little bit of spacing along with nicer font sizes now obviously we're not done styling just yet but using that base set of styles we'll be able to further customize the styles for our project so that's where we're gonna stop for this video we now know how to add basic styles into our gatsby project and in the next lesson we're going to take that to the next level by learning about css modules that is my favorite way to style react components so let's go ahead and jump right into that welcome to part 7 of the great gatsby boot camp in this one we'll continue to talk about styling our gatsby sites and the focus is going to be on css modules css modules are supported by default in all gatsby projects and it seems to be the preferred way to style gatsby sites as it's covered extensively in the official gatsby documentation now with css modules we're not learning a whole new language it is just css with a slight tweak making it really easy for us to create complex web applications without complex styles so let's go ahead and get started with the basics let's get started by closing all open editors and we're going to focus on just one of our components for the moment that's going to be the header component we want to add some styles to this making the header look a little bit nicer now to add those styles we'll be creating a new style sheet right here in the components directory i'm going to call this header.scss and in here we'll put the styles specifically for the header so as an example let's say we want to style the links here we are targeting all anchor elements and then we'll just set their color equal to a nice gray right here the pound sign followed by the hex code i'll use the number nine six times for that gray color now if we save this style sheet none of these tiles get applied since this isn't being imported anywhere so let's fix that in the header component we're going to import that style sheet just like we did in the last video when we imported this style sheet into the layout component so right here import i'm going to import the following file that is dot forward slash header.scss now if i go ahead and save the component we can see that all of the links in our header are styled which is a great start one thing you'll notice though is that it's actually all of the links on the site right here the link to my twitter profile that's styled in gray and if i go to the home page other links like the contact me link are also showing up in gray so it's important to note that just because you're importing a style sheet in a particular component doesn't mean those styles are scoped to that component in this case we are selecting all anchor elements on the page not just those that exist inside of the header so this is an important thing to note now what's the solution if i want to just target the links in the header well there are a lot of different things we could do a simple approach without css modules would be to target by class name something like link then i can use that class name wherever i want to apply those styles so inside of the header component i could add class name on it to the link this is the react prop class name and i'll just set this equal to the class i picked link and over here in the browser we now have that gray home link now this is a great start but it's important to remember that those styles are still globally accessible so if other components in our large application also want to style their links and they use a generic class name like link we're gonna run into a problem where we have styles for multiple files overriding each other leaving us with a big mess now the solution before css modules existed was to do something like use a naming convention a naming a convention that would allow us to create longer more complex class names though they were more likely to be unique so something like header link instead of just link then if i wanted a link styled in the footer i could use something like footer link and so on so we can't use those generic class names because there's a high chance of conflicting styles and the solution is to have a whole bunch of complex class names that's not ideal either the solution we're going to use to solve this problem is css modules css modules make all of the class selectors in the module style sheet locally scoped which means that we have to manually import them and use them and we'll see what this means in reality in just a second for now let's notice one thing we have our two files saved and that home link is gray all we're going to do is enable this file to be a css module by changing its name we're going to change the file extension down below i'm going to rename it to header dot module dot scss now you could also use header.module.css if you did not want to use the scss syntax though in this case i'll keep it in place now right away our app crashes and that's expected we're trying to import a style sheet that no longer exists so let's adjust the name here dot module dot s css now if i save both files it's no longer crashing but you'll notice that our link is also no longer gray i have the class name link right here and i'm also targeting it over here in this file that's loading so what's going on as mentioned earlier when we're working with css modules our class selectors they are no longer globally applied instead they're locally scoped it's something we need to import as part of the import statement and then apply directly to that element so let's see what that looks like the first thing we need to do is change our import statement i'm going to comment out the old one and add a new one just down below here on importing the default export i can call it whatever i want i'm going to call mine header styles and we're grabbing that from the same file dot forward slash header dot module dot scss so when we're working with a css module we actually get a default export this is an object which contains properties for every class we've defined in the module in this case we just have one link so what we have is an object with a single property link we can use that property to apply that style so no longer are we going to have a static string for the class name it's going to be dynamic so class name equals inside of curly braces the following header styles dot link where link is the name of the class chosen over here now if we go ahead and save the header component we'll see that once again our link is gray everything is back to working as expected and the great thing about css modules is that we're being explicit i'm explicitly loading in a set of styles from a specific file and i'm applying them directly to the element so there's zero chance of some sort of global style coming in and messing things up from another component and that's what we want we want our components to be selfcontained and easy to update and work with so now that we have this in place let's take a look at what exactly is happening over in the html for the site i'm going to open up the chrome developer tools in the browser you can always go to the menu more tools developer tools to find them and here i'm looking for the elements panel and i'll use this selector by clicking it and picking an element on the page i'm going to click that home link and it's pulled up down below now here we can see we do have the class attribute and there is a single class inside of there but it's not something we ever created it is header module followed by link followed by a random series of characters this is the class name generated by the css module that keeps our styles unique even though we're using a generic class name like link we could target links in other components in our project by using the exact same selector without any chance of overriding the ones in the header so now that we've seen how css modules actually function let's continue working with them to style the rest of the site to get started i actually want to add a css module for the layout component so right here in the components directory that's layout.module.scss and we're going to crack open the layout component as well and i'll just stay organized up above with the header stuff then the layout stuff let's get started adding a few styles to the layout allowing us to center the content on the site so it's not all pushed up against the left hand side let's start with a new selector selecting the container class and right here we're going to set up a few basic styles starting with the margin i'm going to use 0 and auto to center things left to right and we're also going to set up a max width for the site i'll use something like 750 pixels and finally a little bit of padding on all four sides so the content isn't pressed up right against the edge of the browser right here one rem should get the job done now we have to import this module in the layout component and actually use those styles right here import layout styles from dot forward slash layout.module.scss and once we have that in place we can apply that to our div right here so this one is going to have a class name equal to on the layout styles object we have that container property now if i go ahead and save things we can see all of our content has disappeared because it's now centered in the browser which is obviously a nice step in the right direction another thing we're going to do with the layout is set up a sticky footer so right now the footer kind of gets pushed up the page especially on shorter pages it would be nice if it was always at the bottom of the site to get that done the first thing we're going to do is create another div inside of the layout component so right here let's set up that new div element and we're going to put the header and the page content inside of there the footer is going to be just outside of the div and this is a common html structure for a sticky footer right here we'll end up applying a few styles to this div let's get started over in the layout module inside of the container we need to add a few new styles in order to get everything working the first thing we're going to do is set up display setting display equal to flex we're going to enable flexbox here and the flex direction for the container is going to be vertical since we want the content and the header above the footer not left and right so right here we're using column as opposed to the default value which is row i don't want the footer on the right i want it on the bottom the last thing we're going to apply to the container is min height setting that equal to 100 vh this is the viewport height so here i'm setting the container height to the screen height now that's the minimum height so it could always get bigger on longer pages and that's what we want only other thing we need to do is style that new div we created i'll set up a class content for this with flex grow set to 1 that's going to allow that container this container right here to grow as needed leaving just enough space for the footer in place so the layout module is all done we have our styles in place over here all we need to do is apply the class name prop to that new div layout styles dot content i save the program and over in the browser we can see we have the sticky footer in place so on the contact about blog and home page that footer stays where it's supposed to now if the site content was shorter it wouldn't be at the bottom still you'd still have to scroll to see it which is exactly what we want so now that we have the layout styles in place let's go ahead and head back over to the header as we are going to add a few more styles here so inside of the header module let's get to it first up i'm going to add another class selector for header to add a little more space for the header right here padding is going to be one rem on the top zero on the left and the right and 3 rem on the bottom so we're just trying to put a little space between the header content and the other stuff on the page now if we head over to the header component we can apply that right here so class name equals that's going to be header styles dot header perfect now over in the browser those styles should have taken effect and they did perfect now let's continue on to the h1 shown on the header i actually want this to be a link to the home page as well so what i'm going to do is set up the h1 and put a link right inside this link is going to have the same text i had before so the text value will still be andrew mead and we're going to send them to the home page so this is like clicking a site's logo and going to the home page i want to be able to do that same thing here so if i'm on the contact page i click the name and i go to the home page now clearly we have to add some styles to that and that's exactly what we're going to do so in the header module we'll set up a new class selector for the title and right here we're gonna do a couple of things first up setting the color equal to black that is the hex code with six zeros then we're gonna set the font size equal to 3 rem making it a little larger and finally setting text decoration to none removing the underline effect we get with links by default now let's apply this to that link so right here class name equals header styles dot title i save the program and over in the browser we can see that this is still a clickable link but it's now styled to look like regular text and you could swap that out with a company logo or whatever you wanted to next up let's focus on styling the navigation list so we can get rid of those bullet points and put the items left to right as opposed from the top to bottom approach which we currently have in place to style that we'll be styling our unordered list right here in the header module a new class selector nav list and we're going to apply just three styles first up display flex this is going to stack those items left to right which is what we want i'm also going to set up list style type sending it equal to none that's going to remove the bullet points which we don't want and finally i'll set margin to 0 to clear the default margin values that our lists typically get over in the browser we can see that none of our changes have taken effect i forgot to apply that in the component so right here class name is going to equal header styles dot nav list so here we have a camel cased version of what we typed out in the css and our styles are applied perfect the next thing we're going to do is add a few more styles to the individual nav items we added just one as an example but we're going to add a few more right here i'm also going to change the selector i'll change it from link over to something like nav item now the color is going to stay in place i'm also going to adjust the font size setting it to 0.9 rem a little bit smaller than it currently is i'll also add a margin on the right so the items aren't jammed right up against each other 1.3 rem on the right and finally text decoration setting that equal to none once again to remove that underline effect we were getting now we can use this for all four links in the navigation so right here i'll take that first one and i'll swap it out from link over to nav item and down below i can just copy this class name and definition for the other ones one two and three and i can see i have a little auto formatting from my visual studio code editor perfect now let's save the program over in the browser what do we get we have a nice styled header i have my links to my pages sitting below the header text which is also clickable now when we're using css modules we can still use pseudo classes or anything else we might want to use so let's say that on hover we want to adjust the color of the link item we can do that nav item then colon hover so when someone hovers over that with their mouse we'll just change the color to something a little darker right here hex code is six six times perfect now we can test that out over in the browser i have my links showing up i hover over them and i can see they're getting a little bit darker which is exactly what we wanted one more thing we can do with the link component is set up a class name that should get applied when we're on that specific page so if i'm on the contact page i could style this link differently giving the user a visual cue as to where exactly they are in the site down below let's go ahead and get that done i'll set up something like active nav item for that and all we're going to do is set the default color to something even darker this will be the number three six times a nice dark gray now let's actually apply that over in the header component then we'll be all done for styling so over here we have class name for all of the links if you want to set up a special class name for when you're on that page you use active class name so right here i would be setting that to header styles dot active nav item perfect so right here just matching up with what i had to find over here now let's take that definition and move it to the other ones we have just down below our other four links so i'll add it to the blog link i'll add it to the about link and to the contact link and once we have all of those in place we'll be able to test our work right here i'm going to save the program right here i can see i'm on the contact page and the contact link is darker than the others i go over to the about page that's dark blog home so now we have a nice navigation system letting the user know exactly where they are on the site all right that's where we're gonna stop for this one now that we have some styles in place we're done with what i would consider part one of the boot camp where we cover the basics of creating a site with gatsby in the next video we're going to start talking about how we can get dynamic data into our site using gatsby's graphql api so let's jump into that welcome back to the great gatsby boot camp in this video we're going to turn our attention towards getting dynamic data into our gatsby sites using gatsby's graphql api now if you've never used graphql before that's perfectly fine we'll only be using a little bit of graphql with gatsby and we'll go over the basics as we use them so right now everything shown in the browser is something that's only showing up because it's typed directly inside of the jsx for a react component all of the nav items the site title every bit of text showing on the screen now obviously that's fine as we're getting started but as we do want to create more complex dynamic sites this approach is no longer going to scale as an example let's say we were going to introduce the blog to our gatsby site without using anything new without using the graphql api creating a blog post would require you to add a new page to the pages directory for every single post and you would end up with a lot of duplicate code and you would end up writing your blog posts right inside of the jsx for the component which is never ideal that's not an easy way to get your thoughts down on paper and organized when you have to manually maintain the html structure along the way the other downside is that you'd also have to update the blog page so your posts showed up here you would have to manually copy titles and excerpts all over to this page to create a list of all your posts so well it's possible it's not ideal and it's not something we're even going to attempt instead we'll focus on getting data via the graphql api that gatsby provides now the best way to visualize this is actually on the home page of the gatsby site that's over at gatsby js if i scroll down just a little bit there's a section called how gatsby works now there's a chance this visualization changes over time but i think this is a pretty great visualization for what's happening here everything we're working with so far sits below this line right here so yes we're using gatsby and we're working with html css and react and we're also getting a version of our site up and running now we're not deploying it to production we're running it in development but it's the same idea and we'll get to the deploy stage a little bit later in the boot camp the only thing we haven't touched on is what's up above the data sources for your gatsby site so where does your data come from when it's not typed directly inside of a react component it could come from a cms like contentful or wordpress it could come from files on the file system in the form of markdown blog posts it could come from any thirdparty data source such as a custom api you've created so this is what makes gatsby really powerful we can pull in all of this data using gatsby's graphql api allowing us to create what is still a static site but that static site gets generated with dynamic data from thirdparty data sources now we will progress to more complex data sources like cms's and markdown files but we're going to start with one of the easiest builtin ways we can set up dynamic data in our gatsby sites and that is via what's known as site metadata it's nothing more than an object on there we can put key value pairs for whatever we'd like as an example the site title maybe the twitter profile name and the author of the site anything like that that we'd want to be able to easily adjust across the entire site now to get that done all we need to do is go into visual studio code and make a change to that gatsby config file we've created so for the moment i'm going to close all open editors and we're going to open up just the gatsby config file and we're going to add another property onto this object just alongside of plugins and in this case i'll call this site metadata and the name here is important it needs to be exact otherwise gatsby's not going to be able to find it let's get started by setting up a title property for the site title i'm going to call mine something like full stack boot camp perfect you can choose whatever title you'd like for your own site let's also set up one more property on site metadata i'm going to set up an author property which i can use throughout the site and right here the value for that will just be andrew meade so there we go we have two pieces of data and we'll add more onto site metadata later in the video for now though let's figure out how we can actually query this using the graphql api that gatsby provides once we've pulled these values into our components we'll focus on adding more and more data now let's actually fetch this data using gatsby's graphql api and to start we're going to head over to the browser open a new tab and we're going to pull up a url that's only available when our site is running in development mode right here that is localhost on port 8000 like we had before then it's forward slash underscore underscore underscore graphql so that's triple underscore graphql this is going to pull up a tool called graphyql which is an inbrowser ide for exploring a graphql api so if you've ever worked with a rest api before maybe you've used tools like postman or insomnia this is the same idea just for a graphql api so we type our query over here in the left hand side we click that play button it runs the query and we get our data over here on the right hand side so we can use this to mess around with all of the data we have access to figuring out exactly what we need and where it lives once we have our query and we're getting back the data we want we can move that query into a react component to actually set things up in the gatsby site for now we're going to start by using graphyql to mess around with the basics of graphql once we know how to fetch the title and the author will actually bring that into a react component to wire that data up dynamically if you haven't worked with graphql apis before one of the great things about them is that they're selfdocumenting graphql uses an explicit schema and tools like graph eql can show you that schema letting you know exactly what data you have access to and how you can get it so for us let's crack open this docs panel on the right hand side now in graphql there are three main operations we can perform queries mutations and subscriptions when it comes to graphql inside of gatsby we just use queries to fetch the data from those external sources so right here let's go ahead and click on the query and we can see a list of all of the queries we have access to there are quite a few and this list is actually going to change as we move through the class later on there'll be new queries for fetching markdown pages or for fetching content from a cms for now the one query we're going to focus on is near the bottom of the list and it's just called site so i'm gonna click on site we can see a few different things about the site query i can view the arguments we can provide we're not gonna provide any and i can view the type definition which is what we want so when we grab site what do we get access to well if i click that we get access to all of these fields i have quite a few different fields the one that we're interested in is called site metadata now if i click on site metadata i can see that is of the following type i click on that and i can see what fields i have access to title and author the two things we defined over in site metadata over here so let's go ahead and actually run a query to fetch this data now i know we clicked through a lot of screens but once we see the query in action it'll be a lot easier to figure out what's going on so step one is removing the comments over there and starting by defining our query we do this by listing out query then we open and close a set of curly braces and inside of here we can perform whichever of those queries we wanted to in this case we decided we wanted to use site so i set up site opening and closing a pair of curly braces and in here we can list out everything from site we want access to for us it was site meta data now this alone is not going to work we can't just grab everything from site metadata we have to be explicit grabbing just the fields we're actually going to use so we set up another pair of curly braces and i list out what i want access to in this case title and we can see we're even getting a little autocompletion i can always use that to populate the final value and there we go our very first graphql operation we are performing a query called site on site we're grabbing site metadata on site metadata we're grabbing title and if i click that play button to run it what do i get over here i get my data back i can see full stack bootcamp showing up now one thing you'll notice about the response is that the structure of the response is dictated by the structure of the query here we have site site metadata and title here we have site site metadata and title so we get back exactly what we put in though the fields we requested are obviously populated with the correct values so now that we've seen a basic query let's go ahead and run this exact same query from a react component so we can fetch dynamic data into our site we're going to focus on grabbing the site title like we're doing here but we're actually going to populate it as the value that shows up in the header up above now for us that means we need to make a change to the header component so right here let's crack that open this data right here is going to end up becoming dynamic and to get started we have to grab two new things from the gatsby library alongside of link the first thing we're going to grab is called graphql and the second thing we're going to grab is called use capital s static capital q query using these two things we'll be able to perform a graphql query getting access to the data then we'll be able to inject the data right in the jsx down below so let's do it let's start by creating a variable called data to store the data we're fetching from the graphql api then we're going to call that use static query function this is going to allow us to query our graphql api now we're going to call it as a function and inside of there we're going to provide a tagged template literal so right here we're using a template string but just before the template string we're using graphql which is a function so this is a syntax called a tagged template literal essentially it allows this string to be processed by that function and in this case it's going to convert our string graphql query over to something that can actually be used a complex abstract state tree with all sorts of object properties and stuff that we just don't need to worry about so for us what we type in this string is exactly character for character what we were typing over in graphql so it's a query in there we're using the site query i'm asking for the site metadata and on that i want the title now we're done we have access to that data and we can go ahead and use it in the link down below or wherever else we might want to use that data so for us i'm going to remove andrew meade in the h1 in my header and we are going to set up some curly braces so we can inject the value the value is on data dot site dot site meta data and it is title now if we save the program we can actually pull our site up and what do we see i see full stack boot camp showing up in the header which is fantastic we were able to create a react component that fetched data from gatsby's graphql api to come up with something that's dynamic now what's cool is that as that data changes the site will also change so over here i'm going to alter that title adding an exclamation mark on to the end i'll save things head over to the browser and i can see that change is already in place so this is one way we can access some dynamic data in our gatsby sites using site metadata this is great for key value pairs like title author your email address social media urls and that sort of thing so once again inside of header what did we do we worked with use static query to perform a query we got access to the data and we injected that somewhere in the jsx now that we've done this once together it's going to be your challenge in the video to do it again on your own just up above i'm gonna paste in the challenge comments and your goal is to run another graphql query fetching the other site metadata we have so step one use graphyql in the browser to fetch the author making sure you get the correct value back once you know how to fetch the author update the footer component to display the dynamic author value instead of the static one so right now andrew meade that's hardcoded in the footer component i want this value to come from the site metadata instead once you have that in place you're gonna test your work so actually make sure that you can see the name show up and when you change the name in the gatsby config file you should see it change in the browser as well so take some time to knock that out pause the video test your work and when you're done come back and click play how'd that go let's get to it with step number one so over here in the browser we're going to use grapheql to fetch the author so once again that lives on site metadata alongside of title so right here instead of accessing title i'll access author i'll run the query and i can see that value showing up so this is what i need to run from the footer component let's go ahead and get that done over in visual studio code i'm going to crack open the footer component and we're going to import those two things we need from gatsby right here that was graphql and use static query grabbing both of them from the gatsby npm library exactly like we were doing over here from there we can actually use these in the footer const data equals i'm going to call use static query i'm going to use graphql with a template string and we're going to provide our query the query is using site from there we're grabbing site metadata and on site metadata all i want access to is the author now we should have access to the author and i can use it down below so i'm going to remove the static author and swap it out with a dynamic value that would be data dot site dot site metadata dot author and we're done now that we have this in place let's test our work i'm gonna save the footer component in the header component i'm gonna remove those challenge comments and save that file too and hopefully i see andrew meade in the footer right over here i do now let's actually change that value in gatsby config just to make sure it's showing up so i'll swap this out with something else like the author save the file head over to the site and that's what's showing up in the footer so now we have two dynamic pieces of data in the site and we figured out how to use gatsby's graphql api which is a great step in the right direction all i'm going to do to wrap up is revert that change back to a value that makes sense and we're done in the next video what i want to do is take just a couple of minutes to show you an alternative to grapheql that you can use with gatsby in my opinion it's a lot easier to work with and comes with a nicer user interface i'm excited to get to that so let's jump right in to the next one welcome back in this video as promised i just want to take a couple of minutes to explore how you can set up an alternative to graphyql this is the default ide for working with your graphql api in gatsby but gatsby also comes with support for another ide known as graphql playground it's a lot newer and comes with a much nicer feature set including some what i would consider essential features now to swap out graphql for graphql playground all we really need to do is set an environment variable on our machines and we're going to do this in a cross os compatible way so right here we can close all open editors we don't even need the source directory for this video and we're going to focus on package.json now this could be as easy as setting up the environment variable right here in the script the problem with that is it's not cross os compatible so instead we'll create an environment variable in a separate file which will load in a very common approach so right here a new file in the root of the project called dot env dot development in here we're going to define our key equals value pairs for the environment variables now in our case we just need one the name is gatsby underscore graphql underscore ide and the value we want is playground that's going to enable graphql playground support giving us that new tool in the browser so now that we have this in place the only thing we need to do is actually load this file in when we're using the development server and to do that we'll use the very popular env cmd npm package down below in the terminal i'm going to use ctrl c to shut down the development server then we'll use npm install with the save dev flag since this is a dependency we only need in development and from here we're going to go ahead and set up the following env cmd so let's go ahead and install this and once it's installed we're actually going to work it in to our package.json so inside of package.json what are we going to do we're going to change the development script right here it's going to use envcmd to load that environment variable file in then it'll run gatsby develop right here we're going to modify this script that's going to be emv hyphen cmd the new tool we just installed and from there all we're going to do is provide the name of the file we've created dot env dot development and we're done now it's going to load those environment variables in then run the gatsby server so let's save package.json in the terminal down below we're going to start it up like we've done before npm run develop and once it's up and running all we're going to do is refresh the page over here and we should see something quite different i'll go ahead and give it a refresh and we can see it's loading an entirely new interface here we have graphql playground now it comes with the same set of features i type my query over here i can run it and see the response but it's a lot easier to work with we can manage tabs so we can have multiple queries at the same time we also have a nicer set of docs that in my opinion is much easier to work with so here we have site then we can see all the arguments and our fields below site metadata title and author so we can see everything in one shot making it a lot easier to construct the queries we want to perform so that's it for this video i just wanted to show you how you could set up support for this new tool going forward i'll see you in the next one a couple of videos ago we went over to the browser and went to the gatsby homepage to look at the following visualization here we talked about how we were going to use the graphql api that gatsby provides to source our data from external data sources now so far we have done that with site metadata we were able to pull in some basic information getting that rendered in our react components but it's not exactly a great place for more complex data for example the blog posts we're trying to create for our site storing that inside of that little site metadata object just is not realistic instead we're gonna start to focus on creating a blog powered by markdown blog posts so inside of visual studio code we'll be adding markdown files for each of the blog posts we want to create those will then be listed over on the blog page of our site and we'll also have gatsby dynamically generate brand new pages based off of a page template for each and every blog post so that's the end goal let's get started by writing a couple of posts in visual studio code what we're gonna do is put our blog posts in the source directory for the moment we can collapse the other directories inside of there and we can also close all of our open editors we're going to create a brand new folder in the source folder and i'm going to call this posts you could call it something else like blog or blog posts the exact name could be whatever you want in here we're going to add a couple of posts i'll have one called gatsby.md and real quick i'll create another one let's call it react.md so for the gatsby post we're just going to add a little bit of sample text i'm not actually going to write out an entire post let's get started by adding what's known as the front matter for our markdown posts so we start with three hyphens we end with three hyphens and right in between we can add key value pairs for whatever makes sense for us now for posts you might want to include the post title maybe the date the post was published a list of tags the author whatever sort of data you want to add onto the actual post content so right here let's keep it simple i'm going to set up a title for this post so that is title colon space inside of quotes i'll call this the great gatsby bootcamp then down below i'll also set up a date right here 2019 the fourth month and the fourth day then we can just put a little bit of content on the screen so right here i just launched a new boot camp then i'll set up a second header using two hash signs followed by a space for a new section i'll call that topics covered then down below i'll just list those out so i have gatsby as the first one i'll go ahead and put graphql in there and last up is react so there we go we have some front matter and we also have our blog post content itself with a couple of things for markdown that should end up becoming different in terms of how it looks on the screen i would expect this to be a small paragraph and this to be a large header now let's go ahead and do the same thing for the react post so right here we want to set up that front matter the title for this one can be something simple like react and i'll set the date to an earlier date so right here i'll use 2019 the fourth month but the second day so two days ago then i'll add the content below in this post you'll learn react perfect so what do we have we have a blog with two posts the gatsby post and the react post what we need to do is figure out how to get this inside of gatsby because once it's in there we need to transform it from markdown to html and we need to get that rendered to the screen step one though is to tell gatsby that we're now sourcing content from an external source it's coming not from site metadata not from a cms not from a thirdparty api it is coming from the file system everything we need is right here in the posts folder there's a plugin that's gonna let us get that done let's head over to the browser and go back to the gatsby site if we scroll up a little bit we're gonna head over to the plugins page and we're gonna use the search bar to just search for source right here we're going to see all of the gatsby plugins that allow us to source data from an external source for example bigcommerce a postgres database custom apis instagram google photos vimeo trello and more now in this case we're not trying to source from any of those our content lives on the file system so we're trying to source it from the file system right here source hyphen file system is going to bring up the gatsby plugin that we're going to use so this plugin is going to allow us to pull those markdown files into gatsby then a little bit later we'll use another plugin to convert them from markdown to html we can actually render to the screen let's get started though by adding this plugin into our gatsby project and getting it configured so over here we're going to shut down our current development server i'll use clear to clear the terminal output and we're going to install that new plugin so npm install that is gatsby hyphen source hyphen file system at the latest version 2.0.28 i'm going to run the command it is going to set that up and all we need to do is enable it by adding it to our plugins array over in the gatsby config file now we've only worked with one plugin before and it didn't require any customization i simply listed out its name as a string and that was enough to get the job done with the file system source plugin there are a few options we have to provide so the setup looks a little bit different let's add a second item onto the plugins array and this second item is not going to be a string it's actually going to be an object now when we set up a plugin as an object we still have to provide the plugin's name and we do that via the resolve property so right here as the value for resolve we type in the plugin's name that is gatsby source file system and there we go this is identical to what we have above the only advantage is that now we can expand on that object adding what the file system plugin needs which is an options object on options we have to provide two things both our strings first up is a name we can pick source for this and the second is the path to the directory on the file system that we're trying to source our content from so right here that's path and we're going to use a template string to get the job done to start off let's interpolate a value that is double underscore der name if you're not familiar this comes from nodejs and remember this is a node.js file that's why we're using module.exports instead of the export syntax and after der name all we have to provide is forward slash source forward slash so with just this little bit of setup we're now telling gatsby to source content from the file system this includes everything in the source directory which would also include our markdown posts now that we have this in place let's start up that development server once again so down below npm run develop and what we're going to do is head over to graphql playground and i want to take a look at exactly what's been added with the addition of this plugin because there are two new queries we now have access to so over in the browser we'll go back over to the playground and give things a quick refresh if we head over to the docs we're gonna see we have two new queries that did not exist before we have a file for fetching an individual file and we have all file for fetching multiple files let's go ahead and use all file to explore some of the files in our project right here under type details we can see we have edges that's what we want edges makes it possible to perform pagination and in there we have access to node node represents an individual file and here we have a bunch of information about the file that we're currently requesting we could request its size the extension the absolute path when it was created the directory the name all sorts of interesting things show up inside of here now remember this did not exist before because we were not sourcing content from the file system now that we are we can actually use that right here in graphql playground and that's exactly what we're going to do so i'm going to remove our current query by removing everything from inside of it and we are going to use all file and from there as mentioned we're going to grab edges and for each edge we have the node and in the node we have access to whatever we want about that file let's go ahead and grab the name the file's name we're also going to grab the extension finally i'll choose to grab the directory as well using dir now if i go ahead and run this we're gonna see a list of every single file in our source directory with these three pieces of information so here i have about with the js extension that's sitting in the pages folder that's correct below that i have blog and contact i have our index page the header component the footer i have our css files in there as well and if i scroll to the bottom i can see that amongst those other files i have my gatsby markdown post right here and down below i have my react markdown post so now we are correctly sourcing content from the file system from here the question is how do we specifically target these markdown files and how do we take their contents and convert them into something that's useful for us inside of react components so this is just step one of about three steps to getting the markdown blog up and running in the next video you're gonna learn how to transform these markdown files into html you can actually use and render i'm excited to get to that so let's jump right into the next one welcome back to the great gatsby boot camp now that we have the gatsby source file system plugin set up we have pulled in files from the file system allowing us to access them via gatsby's graphql api in this video we're going to take that to the next level what we want to do is target just our markdown posts and we want to parse them from a file like this into content that's actually useful i want to be able to pull out things like the title the date and the post body so i can render them to the screen we're going to get started with that process in this video and to start we're going to use another gatsby plugin that pairs with the gatsby source file system plugin so this is going to load those raw files from the file system the plugin we're about to use is going to look for markdown files in there and it's going to parse them into useful data we can find this by heading over to the gatsby plugins list right here if we go ahead and search for something like remark we should find the one we're looking for it is gatsby transformer remark so we used a source plugin to pull content from an external source now we're using one of the many transformer plugins to transform that content into something useful and this plugin could not be easier to use there is zero configuration we just install it set it up and we have access to our post data so let's see what this looks like in visual studio code i'm going to shut down the terminal use clear to clear that output and we're going to install it that's npm install gatsby transformer remark at the latest version which is 2.3.8 now if you're wondering what remark is that's a standalone javascript library for parsing markdown files so all we're doing here is using a gatsby plugin that runs that library behind the scenes i'm going to go ahead and run the installer and up above we can set this up in our plugins array at the end of the array we're going to add a new item and this is just going to be a string with the plugin name gatsby transformer remark there's no need for any options like we had up above as this plugin doesn't require any configuration now that we have this in place we can save the config file the installation has completed down below and all we're going to do is start up our dev server once again so npm run develop and once the server's up and running we'll actually be able to access our parsed markdown posts via the graphql api i'll be able to extract the front matter i want as well as the html for the blog post body so let's see that in action over here we have graphql playground i'm going to give things a quick refresh and if we crack open the docs under our queries list you'll notice down at the bottom we have two new ones i have markdown remark and all markdown remark the first one is used for fetching an individual post the other one is used for fetching a list of posts and that would be useful for something like the blog page where i might want to show all of the posts i've ever published with the most recently published ones up top so to get started we're going to use this query to fetch some data about every single post we've created now in this case we just have two i'll crack open a brand new tab we're going to set up the query we are going to use all mark down remark then we can take a look at what exactly we have inside of there and the structure is really similar to the general structure over here with edges and node in the docs down below all markdown remark we have edges we have node and node contains things about our post we have the front matter this is where we can access the title and the date and anything else we choose to add and we also have access to things down below like the html for the post the excerpt and all sorts of interesting information like time to read which is calculated based off of the post's length so let's go ahead and actually grab some of this data in our query over here that's edges node and in there let's just start with the title so the title is in front matter we're gonna grab the title i'm gonna fire off this operation and what do i see i can see i have two posts the first with the title of react and the second down below with the title of the great gatsby boot camp from here we could grab additional information like the date outside of front matter but still in node i could also grab stuff like the html or an excerpt depending on what exactly i needed in this case let's grab both i'll fire off the operation and right here we can see we have the parsed html for our post and an excerpt we could show in our list of posts now this post was pretty simple but if i scroll down we can see there's a more complex html structure for our more complex post i have the paragraph i have my header i also have my ordered list with the list items that i set up so all of this markup is based off of what we put in those markdown files now that we actually have access to this data via the graphql api we can run queries from our components to pull this data in and use it to render a list of the posts available getting that done is gonna be your challenge for the video so let's talk about what i'd like you to do over here we're gonna move into the pages folder in there we have the blog file this is where you're gonna spend your time for the challenge and i'll paste those challenge comments in just above so the big picture goal is to show a list of posts on the blog page now for the moment we're not worried about linking to any other page where the whole post is showing and we're not even worried about rendering the post body all we want to do is render the title and date for each post so to start down below you're going to need to query the graphql api fetching the title and date for every single blog post using what we just talked about over in graphql playground then in the page down below you're going to render an ordered list using the ol element from there inside of the ol element you want to render a list item for each and every post the list item should have a nested h2 header tag for the title and a paragraph tag for the date now if you don't remember how to take an array of objects and convert that into a list of jsx elements you can google something like render array of objects react and that'll get you to the right place and get you the information you need to jog your memory now there's no need to do all of this at once before ever testing things out test it in stages run the query use console.log to print the data to the terminal make sure that looks good and get comfortable with the structure of the data then use what you've learned there to actually get stuff rendered to the screen finally test your work on the blog page of the site i should see my two post titles react and the great gatsby boot camp both with their dates just below alright knock that out test your work and when you're done come back and click play all right how'd that go if you ran into any trouble along the way the good news is as always we're gonna work through the solution together now i said the solution more like a solution as there are plenty of different ways you could have structured this now step one is to query that data and we can't do that without importing a few things from gatsby we need graphql and we also need use static query grabbing those from the gatsby library and once we have both of those in place we can move into the function for our blog page component and actually set up a query similar to what we have over here we need the title and we need the date so const data is going to equal we'll call use static query providing graphql along with our template string and in here we're going to have essentially the same thing we have over here but without html and excerpt which aren't needed so right here let's knock that out we'll start with query we're trying to use the all markdown remark query then we're going to go ahead and grab edges from there node from there we need the front matter which contains all of the data we're looking for and we want title and we also want date perfect so now that we have the query in place let's just use console.log and dump the data to the terminal to make sure this part is actually working as expected if we get the correct data then we'll move on to steps two and three actually rendering it on the page for now though i'm going to head over to the blog page i'll crack open the chrome dev tools right here i have the console and down below i have an object this is the data variable we have all markdown remark and we have our edges array where each edge represents a post right here one of the posts as an example has that node property we then have front matter and on there we have date and title so the structure we're getting back here is the exact same structure we got back over here now let's actually use that to render some content to the screen so remember step two was to set up an ordered list and i'm going to do that down below i'll remove the paragraph i'll set up the ordered list and inside of here we want to put a list item for each and every post we found that means we want to iterate over that edges array and we want to take the edges object and we want to convert that to a list item so let's actually get that done right here setting up some curly braces and we're going to access that array that's data dot all mark down a remark exactly like we just saw in the terminal from there we grab edges and that's an array now we have an array of objects and what we want is an array of jsx elements so i'm going to use the map function to convert the object over to jsx now in this case our function gets called one time for each edge so one time for each blog post and right here we'll get access to the individual object which i'll just call an edge now it's the job of the map function to return some jsx this is going to show up for each and every post so right here we start off with a list item and i mentioned in there i wanted a header to tag and i also wanted a paragraph so i'll set those up as well now all we need to do is pull the title and the date off of edge and put them right inside of these two elements so we'll start with the title over here we can see that for one of the array items we have the node property then front matter then date and title so that means over here it would be edge dot node dot front matter dot title and with this in place we could test our work so far to make sure at least the title is showing up and it is right over here i have react followed by the great gatsby boot camp next up we have that paragraph and i want to put the date right inside of there that'll be edge dot node dot front matter dot date identical to what we had up above just accessing something different from the front matter now we can actually remove the console.log call as we're all done we have successfully fetched the data and used it to render a list to the screen if we check things out in the browser we have our list item one the title is react and the date was april 2nd and here we have the great gatsby boot camp post with the date april 4th with this in place we've made some really great progress towards what we're working towards now this page is not done yet we do need to link over to a blog post page and eventually we're going to include some additional information here but this is a really good start next up over in the terminal all i'm gonna do is close down excuse me delete the challenge comments and that's where we're gonna stop for this one we have our query which is fetching the markdown post data down below we're using some jsx and javascript to get everything rendered now the question is how do we create a new page for each and every post i mentioned what we're not gonna do is manually add new files to the pages directory instead we're going to use a gatsby api that's going to allow us to dynamically generate new pages with dynamic content so we'll be able to generate new pages where the page content is the blog post content i'm excited to get to that and we'll be starting that in the next video so let's go ahead and jump right in now that we have a list of blog posts on the blog page it's time to dynamically generate pages for each and every post so if i want to read this post i click on the title that brings me over to a new page and that new page is dynamically generated using the markdown data from graphql and a blog post page template which is nothing more than a react component and we're going to use that same blog post page template for every single blog post since as we saw in graphql we have a standardized set of data i have a title i have a date and i have the body content for each and every post now let's head over to visual studio code close all open editors and i'm just going to crack open a new file where i'm going to outline what we're going to cover in this video the reason i'd like to outline things is that we'll be spending a little time working with the internal gatsby api and that can be a confusing topic so it's a good idea to have the big picture in mind goal number one is to generate a slug for each post so let's say we have a post like our gatsby post that is gatsby.md that is the markdown file what we want to do is generate a slug which is nothing more than the file's name stored as a string gatsby that's going to allow us to set up the url where someone will be able to view this post now that url could be whatever we like for example it could be forward slash gatsby or something a little more complex like forward slash blog forward slash gatsby either way though we need the slug from the file name in order to set up the correct endpoint where that particular post should be accessible so that's goal one generate a slug for each post goal two is an easy one for us we are going to generate the blog post page template that's nothing more than a react component and there's not a lot to say about that for now pretty straightforward next up and the final thing we're gonna do goal number three is to actually combine those two so we want to generate a new page for each post so in order to generate that new page we're going to need a template and we're going to need access to the file and the slug so we can set up the correct url where someone will be able to view our new dynamically generated page so those are the three goals and to get started what we're going to do is actually create a new file that currently does not exist in our project in the root of the project this file is gatsby hyphen node.js this is the gatsby node configuration file which allows us to tap in to a lot of the node apis that gatsby exposes this is what we're going to use in order to generate that slug and in order to dynamically generate those blog post pages before we start using these internal apis let's check them out over in the gatsby docs so you know where you can learn more i'm going to head over to the gatsby website we're looking for the docs page here we need to scroll all the way down in the sidebar and go to api reference once we're there we're looking for the gatsby node apis these are all the things we can define in that new file we've created and on that page if we scroll down just a little bit we get brought to a list of all of the different apis we can tap into using that new gatsby node file now in this video we'll end up using two of them and the first one we're going to use is on create node this is what's going to allow us to attach some new data on to the individual node and what we're going to do is attach the slug so we have access to the slug throughout the entirety of our application if you're wondering what a node is remember it's nothing more than a data structure for storing your gatsby data and we already saw this in place with the graphql queries that we ran in the last couple of videos so right over here we have the all markdown remark query we grabbed the node to grab individual data about the particular markdown node here we grabbed the front matter html and excerpt and there were other fields which we didn't grab but were available so that is the individual node this api allows us to do something when that node is created so when a new markdown node is created all we're going to do is attach the slug field onto it and that's nothing more than a string the file name without the dot md extension so right here we're going to take this code and bring it over into that file now this file is indeed a node.js file so right here what we're going to do is set up module.exports exporting the very first thing on create node so that's how we use this file we export functions and these functions get registered to gatsby and run when they're supposed to in this case our function runs when a new node is created now over in the docs we saw we get access to an argument and we can destructure that to get access to the node and to some actions which are destructured down below now we don't need create node but we do need create node field so we're going to make sure to grab that as well right here let's destructure this argument grabbing the node and grabbing our actions then down below i'll destructure the actions grabbing create node field from actions and there we go we have our little boilerplate version of the function in place now it's time to actually see what this is going to do for us and how we're going to use it to generate the slug field first thing i'd like to do is just use console.log to print the node to the terminal so we can see what exactly we get now when we use just this it's not going to print in a way that's easy to see so let's pretty print the node instead with the following here we're just going to use json.stringify to convert the node object over to a formatted string that'll make it a lot easier to view things down below so right here how do we call stringify while we pass in the object as the second argument we provide undefined this is an optional filtering function in this case we want to see everything so we'll leave that off and the final argument is the number of spaces we want to use when printing it to the terminal in the formatted version here i'll just use four so now we're going to see a pretty printed version of the individual nodes when we restart the server because that's when oncreate node runs so down below let's shut down the terminal i'll use up and enter to restart the server and when we restart it we're going to see our console.log call print a bunch of new objects to the terminal which is exactly what we got the first object right here is quite large it runs from up above it contains about two dozen different properties and it runs to down below now the only thing we're concerned with about this object is internal internal itself is an object and on there we have a type property this is the type for the current node and in this case we can see the type is site page site page is a builtin gatsby type this is for new pages on our site and right here we can see this is for index.js in the pages directory and that is our home page now if we continue to scroll up we'll see site page nodes for the other pages we've defined so up above we have site page for contact then we have site page for blog followed by site page for about then we have a page that's generated for us site page for dev404 page now don't worry you're going to learn how to create a proper 404 shortly but past that that's where things start to get interesting up above we have a new node and the internal type is markdown remark these are the nodes that we actually want to tap into so oncreate node runs for all of the nodes for our gatsby site we don't want to do something for all of the nodes i just want to do something for the markdown remark nodes i want to take that entire file name i want to reduce it to a slug and i want to add that as a new field onto the node so it's easily accessible throughout the rest of our app so that's exactly what we're going to do here we have the node for the react post up above we have the node for the great gatsby boot camp which also has an internal type of markdown remark so to take this to the next level we're going to set up an if statement we're going to look at the nodes internal type when it equals markdown remark then and only then are we actually going to do something now for the moment we can just take our console.log call and move it inside of there to make sure it's still running when expected so i'm going to save the file i'll restart the dev server down below and now i should still see some logs print but i should only get two one for each of those posts right here i scroll up the first one is an internal type of markdown remark which is great above that we have our other post and above that there's nothing so no longer are we seeing the nodes for our site pages and that's what we want we've now successfully targeted just the nodes we're actually trying to manipulate now if we head back to the node up above we'll see there's one particular field that does contain the entire file path that is file absolute path that's available on both of our nodes and this is what we're going to tap into we're going to take this we're going to remove the entire path except for the file then we're going to remove the extension leaving us with just the slug in this case gatsby or in the case up above just react now there's actually a nodejs module built in called path which allows us to manipulate the path and that has a function which allows us to extract the file name from a complex path like the one we've seen so we can find the documentation for this at nodejs.org here we want to go to docs once we're on docs we want to pick a version the api we're using is pretty standardized so it'll be the same no matter which one you pick we're going to scroll down to path these provide a bunch of different methods for manipulating string paths and we're looking for one called base name base name takes an entire path like this one here and it reduces it to just the file name and the extension we can use the second argument however to remove the extension leaving us with just the file name and that is exactly what we're trying to do so let's go ahead and close down the documentation here and actually get that done up above i'm going to load the builtin path module const path comes from requiring path there's no need to install it as it's a node core module and down below what we're going to do is try to get access to the slug so constant slug is going to equal we'll be using path dot base name like we just saw in the docs we're going to provide the path and we saw that on node file absolute path and then as the second argument the extension.md which we're trying to remove and that should leave us with just the slug let's actually see if that's the case i'm going to remove the old console.log call and add a new one into the mix right here i'll print a bunch of at signs to make this easy to find in the long list of terminal output then as the second argument i'll print the actual slug so i'm going to save gatsby node i'm going to shut down things from the terminal and i'm going to start them up once again and hopefully we see our little message printing twice once for each markdown post right here i did see them move by i have the first one with the slug of gatsby and the second one with the slug of react so we've successfully extracted the data to get the slug now we have to call create node field to actually add the new field onto the node and this one really isn't too bad down below we'll remove that console.log call we're going to call create node field and we need to provide an object with three different properties the first is the node we're trying to create the node field on now here i'm using the shorthand syntax to set the node property equal to a variable of the same name then down below we need to set the name for our new field i'll go ahead and use slug for this and finally the value what is the value for slug well i have that stored in the slug variable and that is it this is all we need to do to achieve goal number one of adding the slug on to our markdown nodes now let's go ahead and test this out so i'm going to restart the project from the terminal for the final time and instead of looking at something from a console.log call we're actually going to try to grab the slug for our posts over in graphql playground so over in graphql playground we can go ahead and check things out right here we have the node with the front matter html and excerpt based off of the new stuff we just set up we also have something called fields and fields has a single field that is the slug perfect now if we actually run this we're gonna see that for each post we do get a slug right here we have the great gatsby boot camp we have the slug of gatsby and down below we have the react post with the slug of react so there we go that is goal number one achieved we've successfully created a slug for all of those blog posts the next two goals are what we're going to focus on from here on out now originally i was going to have this all as one video but let's take a moment to take a break as this went on a little longer than i wanted to but i wanted to move through the individual steps using console.log so we could actually see what we were doing with this code over here so that's it for this one in the next video we'll wrap things up by setting up the template and actually dynamically generating those new pages i'm excited to get to it so i'll see you then it's time to continue on with our three goals we already have our page slugs goal number two is to generate a new template for the blog post page and we're going to do that by creating a new directory in the source folder called templates now the reason i'm creating a new folder is that i want to differentiate the react component we're about to create from the standard components in the components directory or the specialized components in the pages folder here we're working with page templates and those are going to work slightly differently so we'll create this new folder in there we'll put a new file i'll call this blog.js and in here all we need to do is create and export a react component the template for our blog post pages so right here let's start with the very basics i'm just going to import react from react then down below i'll set up the blog component which is just a function and i'll have it return some static text now i'm actually going to put that text inside of a layout so let's import layout real quick as well importing layout from dot dot to get out of the templates directory forward slash components forward slash layout now we can use it and actually render some content to the screen so right here layout in there this is the blog template now you'll notice that we're not rendering anything specific about the post like the title the date or the actual body we'll work on that in just a little bit for now we just want to get the basic template file in place down below export default blog and we're done so we have the template in place for each and every blog post page that is goal number two the third goal is to generate a new page for each post and that's going to require us to use another api from inside of the gatsby node config file we can check this out over in the api docs so right over here what i'm going to do is scroll to the top of the node apis page back to that table of contents and the one we're looking for is actually the very first one as of now create pages create pages gives us everything we need to dynamically generate new pages for the site now down below we can see exactly how this works don't worry we're going to work through all of this together and we'll actually be using a slightly newer syntax to make life easier what i really want to focus on are just these two lines right here we export a create pages function and gatsby gets access to that function and runs it a single time and we destructure that first argument to get access to graphql and actions graphql is going to allow us to fetch some data in our case we want to fetch those markdown nodes which contains the data we need and on actions we get access to an action for creating a new page so let's go ahead and actually set this up then we'll work through the rest of the function getting everything in place so right over here inside of the gatsby node file module dot exports dot that's going to be create pages with a capital p and this is just a regular old function now i am going to destructure that first argument like we saw them do in those api docs the first thing we have access to is a graphql function it's actually a little different than what we've been importing from gatsby in the past and the second thing we get access to are a bunch of action functions in this case just one right here we're going to grab that it is called create page and we're going to call it for every new blog post page we're trying to create right here i'm just destructuring that from actions which is itself an object so down below we can now take advantage of this api to dynamically create the pages and we need to do three things one get path to template two get markdown data and then finally three render excuse me not render create new pages so these are the three things we need to be able to do and the first one is super easy we just want to get the path to that new template we've created that's blog.js i'm going to store this in the following variable i'll call it something like blog template and this is going to be a path an absolute path to that file on your machine starting way back from the root of the hard drive and to do that we'll use path dot resolve that'll resolve a partial path which will provide as a string right here now for us this needs to be the path from our current location in the gatsby bootcamp folder to the destination which is blog.js so that's dot forward slash source forward slash templates forward slash blog.js the resolve function itself is going to add everything up front to create an absolute path from the root of the hard drive now the next thing we need to do is actually fetch the markdown data we need access to all of those slugs so we can dynamically create these new pages now we already know how to query those we've done just that in graphql playground and we're going to use a similar query inside of the node file now we don't need to grab anything except for the slug so the operation we'll be performing is going to look a little bit like this the end result is that we get a bunch of edges with the slug defined for each that's all we need now let's head over to the file and talk about graphql this is not the same as the graphql we've been importing from the gatsby module in files like our header component this is actually a function itself that we pass a string graphql query2 right here that's going to be graphql we're going to pass to it a template string and in here we just type out the query we want to perform exactly like we have over in graphql playground so it's a query that is all mark down remark from there edges from there node from there fields and finally slug so this is what we need to provide in order for everything to get fetched correctly now you'll notice that we're not doing anything with the return value this function actually returns a promise so we have a couple of different options i can add a then call down below to get access to the value that eventually comes back or i can use async await which is what i'm going to do so right here we're going to mark this function as async then i'll set up a new constant response and i'll be awaiting the promise from this function now unfortunately i can't dive deep into async await in this particular video as i want to stay focused on graphql if you're not familiar with the syntax though it is nothing more than a way to make a promise api look a little more unasynchronous so right here we have some very synchronous looking code down below we can now do something with the response now what exactly are we going to do well we want to iterate over all of those posts and we want to run that create page function for each of them so right here we have our response we have data we have all markdown remark and on there we have edges now we're going to use the for each array method to run a function this function right here for each of those now if we have an array of edges i could call the individual element something like an edge and now inside of here the goal is to call create page so i'm going to call create page and i'm going to provide to it an object and on here we have to provide three things first up is the component we're trying to render now the component is not an actual react component it is just the path to the component and we already have that up above i have the blog template string which i'll use down below the next thing we have to add on here is path so we're creating a new page but where exactly should someone be able to access the page we're creating for example forward slash test would be localhost 8000 forward slash test in our case though it's going to be dynamic based off of the slug that each post has so i'm going to use a template string that's forward slash blog forward slash the slug so right here inside of the template string will interpolate the following value that's node excuse me edge.node then we're going to grab fields and we're going to grab the only field we have slug so now when i visit forward slash blog forward slash some slug i'll see that blog post page rendered down below just one last thing that is context context is an object and this contains stuff we can pass down to that template now in our case the only thing we really need is the slug if that template has the slug it can fetch the rest of the data for the post like the title the date and the body content so right here we're going to pass the slug through which you could consider kind of like an id as it is unique for each and every post and right here we'll just use the following that is edge.node.fields.slug once again so this is going to run twice creating two new pages the first is forward slash blog forward slash react and the second is forward slash blog forward slash gatsby both are going to be rendered using the template we've defined and both will have access to a little extra data which they can later use to pull everything they need about that blog post now that we have this in place we're all done i know that this indepth configuration can be a little dry but if you are interested in using gatsby being comfortable with create pages and with oncreate node is essential for doing what we've just done here this exact same stuff is just as essential if you're pulling your data from a cms like we'll see a bit later for now though let's test things out down below i'll shut down the server i'll start it up once again and we're actually going to try to visit one of those two pages let's start with forward slash blog forward slash react over in the browser i'll head back over to the gatsby site here we're on the blog page now we don't have links to our post pages yet so we'll have to manually visit them i'll go to forward slash react first if i visit that what do i see i see this is the blog template which is awesome if i go to forward slash gatsby what do i get i also get that blog template and if i go over to something else like forward slash node what do i get right here i get a 404 page so there is no node blog post but if i were to create it this particular page would exist and we would actually be able to view the blog so let's go back to one of the post pages that did exist and there we go we now have a way to dynamically generate pages now we're not done yet there's still two very important things we want to do on this page we actually want to render the post content and on the blog list what i want to do is link to the individual blog post pages now that second task is something you already know how to do so that's going to be your challenge for the video then in the next one we'll focus on pulling in the individual data to the template component so for the blog page what you want to do is actually create clickable links for each and every post that heads over to the correct url so let's talk about what i'd like you to do we don't need any of these files any longer including our little goals list as we've completed all three of those the only file you're going to need is the blog page and just up above i'll paste in the challenge comments so the goal is to link to the blog posts in the list that we're rendering down below now right here to get that done first you're going to need to fetch the slug for each post by modifying our query down below then you need to use that slug to generate a link make sure to use the link component provided by gatsby and you want that to go to the correct location so forward slash blog forward slash slug finally test your work actually pull up the page in the browser click those links and make sure it brings you over to the correct blog post page all right take some time to knock out those three steps test your work when you're done come back and click play how'd that go let's get to it and the first thing i'm going to do is grab the link component from gatsby as i know i'm going to need it a bit later down below we want to make sure we fetch the slug for every single post now we have that query right here inside of node alongside of front matter we want to grab fields and in there we want to make sure to grab the slug so we can actually use it when creating our links destination now down here when it comes to modifying the structure i didn't give you any specific rules for how to create the link or what to put inside of it so for now anything works what i'm going to do is set up the opening tag for link right here and i'll put the closing tag below the paragraph making both of those clickable perfect now all we need to do after indenting things is to set up the two property and this needs to be dynamic there is no one static destination it is based off of the static text forward slash blog forward slash and the dynamic text stored in that slug field and for us right here that would be the following edge dot node dot fields dot slug so there we go we have our link in place and hopefully it's working as expected before we actually test this out i'm going to remove the challenge comments up above save the component file and now we'll make sure our link is working over here i have the blog post page and i am seeing links for both posts if i click the react one i'm brought over to the react page if i go back to the blog page and click the great gatsby bootcamp i'm brought over to forward slash blog forward slash gatsby which is awesome so at this point when it comes to the markdown blog there is only one thing we need to do we need to figure out how to actually use the slug in this template to fetch the data the title the date and the post body because all of that needs to get rendered to the screen that's what we're going to do in the next video so let's jump right into that in this video we're finally going to render the post content on the post page replacing our little placeholder text with actual data about the post like the title the date and the post content now to get this done what we need to figure out how to do is how we can set up a dynamic graphql query this query needs to accept the slug and it needs to give us back the data for the associated blog post so over here in our template file what we have access to is the slug and we can't just have a static query we need a dynamic query that actually takes that slug value into account so to get this done let's start in graphql playground i'm going to crack open a new tab we'll figure out how to use graphql variables and arguments and once we know how to use them we'll actually integrate that into the blog post page template you can view the docs to see exactly which query we're going to use down below we've already used all markdown remark to get a list of posts here we're going to use markdown remark to get a single post now up above we have the call signature we have the query name followed by the list of arguments followed by what we get back which is markdown remark and here we can see the type details of that and we've already used this sort of stuff fetching things like the front matter the html or the fields and that's stuff we're going to end up grabbing if we keep scrolling down though to the arguments list this contains all of the different ways we can target the post we're trying to fetch and in our case we're going to target it by its fields so i'll be using the fields argument and in there the only field we actually have is a slug and there are a few different ways we can target it we're going to use eq which is short for equality that will allow us to target a post by its slug value let's actually get that done i'm going to collapse the documentation and we'll set up a sample query right here let's get started with the query in this case that is mark down remark from there we're going to provide our selection set what exactly do we want to grab in this case let's just grab the title so that's front matter accessing the title when we actually wire this up in the component we'll grab more data so we can render it for now though we actually have enough in place to run this if i run it what do we see we see we're getting back an individual post the great gatsby boot camp being the title so by default if we don't provide any search criteria it's just going to return the first post it finds now that's not particularly useful for us we want to target it by the slug value and to do that we have to set up arguments for our query the arguments come right after the query name and you could list them out right here on the same line but it's common to break those out into separate lines like so and inside of parentheses we can specify the arguments we want to provide in this case the only one we want to provide is fields so that's fields colon space followed by the value now in this case the value is an object because we want to target by slug that's also an object and in there we want to target by equality now this is just a string right here we can target by any of our slugs for example react so now we're fetching data about an individual post but it's targeting a specific one and if i run the operation i can see i'm getting the data for that post back which is great now i could change this over to gatsby and i could run that and we get that data and i could change it to gatsby with two y's which does not exist and in that case we get null as there is no post with that slug so this is the basic idea of what we're trying to accomplish now that we know about arguments for our queries the one other thing we need to talk about is query variables query variables is nothing more than a set of data passed into your query your query can then use that to populate things like argument values so when we type out our operation in the component we don't want this data in line this is static we want it to be dynamic so down below when we're using graphql playground we can provide query variables by just clicking that item at the bottom and setting up some json so right here i'm going to set up one key value pair i'll have the key be slug and the value will be the slug value like react this is exactly what gatsby is going to do so it's important to understand how these work now what we need to do is set up our query to actually accept that variable slug and we define that right here after the query keyword inside of parentheses in this case like we did down below we start with the variable name prefixed by a dollar sign so that would be dollar slug to match up with what we have down below then we define the type for slug so we have to be explicit about that and in our case that would be string that's capital s string dollar sign now i'm not going to dive into the details about all of the other types that graphql supports there's a lot of great content out there on graphql and i also have a udemy graphql course if you're interested but with this in place we now have enough to actually use this variable down below as the argument value so right here instead of a static string it is dollar sign slug we run it and we get our react data so this is exactly what we need to do from our component file we can get started by grabbing this entire query and copying it to the clipboard then over in visual studio code we can focus on getting this set up the first thing we need to do is import something from gatsby right here i'm going to import graphql from gatsby now in the past we would have also imported use static query but our template files work a bit differently instead of calling use static query we will instead define our query separately and export it and the reason for this is that currently there's no way to access the context which contains our slug if we were to work with use static query so this alternative approach is going to work really well just for our template files and this is the only one so right here we're going to create a new constant called query and we're going to set this equal to right here we'll use graphql along with a new template string like we've done before and then we're just going to paste the entire query in now by default it's getting reformatted and that's okay it just put all of our arguments and variable definitions on a single line down below we're still grabbing the title in addition i'm going to grab the date from front matter and just outside of front matter i want to grab the html for the post as well now to ensure that gatsby can actually access this query and run it we need to export query as a named export by just tossing export right up front so gatsby's going to grab this graphql query it's going to run it now the variable slug is going to come from the context we set up when we created the page then it's going to take the response all of the post data and it's going to provide that as a prop to our component down below so we're actually all done up above and down here we can set up our props and start to use them the first thing i'm going to put inside of layout is an h1 we are going to render the title right inside of there now here's the structure for that right here it's props dot data this contains the response so that means on there we have a markdown remark property let's grab that and once we have that we can grab front matter and title and there we go that's all we need to get our header rendered to the screen now let's actually test things out by heading over to the browser and right here i see the great gatsby bootcamp which is excellent so next up we have our paragraph i'm going to use the paragraph to render the date that's props dot data dot markdown remark dot front matter dot date i'm going to render that to the screen and make sure it shows up right here we have it which is great and then from there we'll continue on with the last thing which is going to be a container a div now we already have access to the html and to render an html string inside of a component we set up a div and we use the following prop it's called dangerously set inner html i type da and i see it showing up in the auto completion options this is the one we need to use in order to set our markup from an html string now right here we provide as that prop value and object so inside of curly braces i set up a another set of curly braces for the object itself and the property is underscore underscore html we set this equal to the html string we want to render in our case that's props.data dot markdown remark dot html and we're done now if we actually save things we can check it out over in the browser and what do we get we get our post we have a paragraph for our text we have a header for the header we created in markdown and we have a nice list down below for the list we set up so there we go we have our complete blog structure i have the blog page with the list of all of our posts i can click one to go over to that post i could then go back to the blog and click on another one now that we have the basics of a gatsby markdown blog in place there's just one other feature i want to add to our markdown blog which is the ability to set up images in our posts once we're done with that which is the topic of the next video we'll start to focus on sourcing our content from a cms i'm excited to continue on with the bootcamp so let's explore how we can work with images in our posts now that we have post content rendered on our site what i want to focus on in this video are two final things before we move on to sourcing our content from the contentful cms we're gonna focus on adding support for images in our posts and we're gonna add a few final styles to make the post and the post list look a little nicer than they currently do but to get started what i want to do is figure out how we can add images into our posts and this is really going to require us to just install and configure three new gatsby plugins now before we get to any of that we need an image to actually put in one of our posts you're more than welcome to use any image you already have if you want to use the image i'm going to use you can head over to links.meade.io forward slash grass pick when you visit that url it'll redirect you over to this picture of some grass and we're going to save this image to the project so i'll right click save image as on the desktop i have my gatsby bootcamp folder and there we have the source posts directory and for the moment i'm just going to put this file right alongside of my two markdown files so let's save that file in its place i can close that tab and over in visual studio code we can make sure it's actually showing up inside of posts we have grass.png and right here we have our image now we want to render that image in one of our posts and i'm going to put it in the gatsby bootcamp post i'll put it right here just below that paragraph text and just above the topics covered list now to add a image to markdown we use the following syntax it's an exclamation mark followed by a pair of brackets followed by a pair of parentheses in the parentheses we put the path to the image in this case we're going to have a relative path from this file to the image they're in the same directory so that would be dot forward slash grass dot png then we can set up our alt text for when we're unable to load the image or for when someone's using an accessibility device like a screen reader we can just use grass for that so with this in place we now have the finished markdown post and before we actually install and configure those three plugins i talked about let's just see what we get in the browser right here we get our alt text so by default gatsby doesn't know where you're trying to fetch the image from what we need to do is install and configure those three plugins to set up support for this sort of syntax right inside of our blog posts so to get started in the terminal down below what i'm going to do is shut down the dev server use clear to clear the terminal output and we're going to run npm install now the first plugin we're going to install is gatsby plugin sharp and this plugin allows us to use the sharp library inside of our gatsby site the sharp library provides all sorts of tools for working with and processing images and it's a dependency of the other plugins we're going to use so this needs to get installed at the latest version 2.0.32 next up that is gatsby hyphen remark hyphen images and this is what's going to allow us to use images inside of our markdown posts when they're processed with remark right here the version for this one at 3.0.10 and the final one we're going to install is gatsby remark relative images this is going to allow us to source images relative to the markdown file so in this case dot forward slash grass dot png is going to correctly render the image right here and the version for this one at 0.2.2 now we can go ahead and install all three of those and while that's running in the background we can head over to our gatsby config file as we're going to need to make some pretty big changes to the plugins array now the first plugin we're going to set up is the sharp plugin and that's going to go right here before we transform our markdown files so right here that would be the following gatsby plugin sharp now no options are required for this which is why i'm providing it as a string as opposed to an object up above now the other two plugins we installed are both remark specific we installed gatsby remark images and gatsby remark relative images both of those actually get configured in the options object for this plugin that means we need to remove it from just being a string and switch it over to being an object and resolve resolves that same plugin value so at this point what have we done we haven't added any new functionality but now we do have a structure where we can set up options since it's an object and not just a string and that's exactly what we're going to do so right here we're setting up an options object and on this options object we're setting up a plugins array so these are plugins specific to the remark transformer and this is all outlined in the docs for those specific plugins so if you're wondering how i knew the documentation can guide you in terms of how to configure things now right here what we need to do is set up both of those plugins like we would do with our main plugins array so the first one is just going to be a string as no options are required that is gatsby remark relative images and the second one that's going to be an object as there are some options we want to provide so right here resolve this is gatsby remark images and we're going to provide an options object just down below now there are only two options i want to provide and the first is max with so let's say i have an image that's 1920 by 1080 a standard hd size the problem is that i use css in my blog making sure that the blog width never gets past 750 pixels wide so that image is unnecessarily large for the context in which it's going to be used we can have our gatsby site automatically resize it using sharp and our other plugins by setting max width equal to a value in this case i'll use 750. next up i'm going to customize link images to original this is another option we have available and i'm going to turn this off otherwise when you click an image in the post it brings you over to the actual location of that image and that's not really behavior i ever enjoy when i'm reading a blog so i don't want it for mine and then we are done so we've configured our gatsby site to use sharp and then when we transform our markdown files we have a couple of other plugins that make sure the images get rendered correctly now all we need to do is start up our server once again with npm run develop that's going to start up the dev server it's going to get the image and it's going to make sure it actually gets included in the static site right here let's just refresh things over in the browser and what do we get down below we get the great gatsby boot camp we have our date and then we have the post content the paragraph up above our nice grass image and topics covered down below so now when we have those plugins in place we can add images to any of our posts by simply specifying them like we did here now one thing you can additionally do is organize your posts directory further let's say that grass is specifically for the gatsby post it could get a little confusing if i have dozens of images inside of here one thing i could do is create a folder for each post something like gatsby for the gatsby post then i could move the markdown file and the image right inside of there i could even take this further creating an images directory inside of there if i wanted to but in this case now it's a little more organized i can see the assets for the gatsby post right there and for the react post down below so with this in place our site should be working once again we have the exact same url structure and functionality all we've done is we've organized that posts directory just a little bit more now let's wrap this video up by adding a few styles into the mix one thing i want to do for the post page is add more space between the bottom of the post and the footer down below as the footer kind of looks like it could just be some content for the post so to do this we're going to work with css modules i'm going to start by closing down all open editors and we want to focus on the components directory we have our footer component there is no css module for that so i'll create it a new file in the components directory footer dot module dot scss and from there all we're gonna do is set up a single class selector for footer and i'm going to set margin top equal to 3 rem which is the same spacing i use on the bottom of the header now we can import this and apply it to the footer element right here so i'll import footer styles from dot forward slash footer dot module dot s css then we just set up our class name down below like we did when we originally learned about css modules that is footer styles dot footer and we're done if we save things we should see a little more space between the bottom of the post and the footer that looks a lot nicer now another major problem is on the blog list page itself we want to make sure that this content is clickable but now it looks terrible and we still have the numbers we want to clean this up and we're going to do that by adding a few more styles into the mix now this content comes from the pages directory in there we have blog.js so i'll close the components folder and the two files we were just working with we're gonna open up blog.js and we're going to create styles specifically for it right here i'll create a new file blog.module.scss and now we can actually set up some styles for it we're going to style the entire list itself and the individual list items let's start by styling the list itself i'll set up a class selector for something like posts then we'll set up a few styles i'll start with list style type setting that equal to none we don't actually want to show those numbers next to each post and i'm also going to set margin equal to zero to remove the default margin that those lists usually have let's start there in the blog component we have to import those styles so i'll import blog styles from dot forward slash blog dot module dot s css and once the import statement is in place down below will use it now i designed that for our ordered list right here so class name setting that equal to here it is blog styles dot posts now with this in place we should be headed in the right direction over here at least we no longer have the numbers and everything is nice and aligned now we want to target the individual items when it comes to the dom structure it's pretty complex well it's not pretty complex but it could be we have the list item we have our link which just gets converted to an anchor element and in there we have h2 and p now in the end of the day i actually want to apply styles to all four of these things and there are two approaches to that i could set up four new class selectors over here and i could load for in and set up four instances of class name or i could just use one so let's explore how we might get that done right here that is dot post and this is going to apply some general styles and all we're going to do here is put some spacing between our posts above and below them so margin 1 rem on the top and the bottom and then zero on the left and the right now this particular class is going to get set up on the list item this represents the individual post so right here class name setting that equal to that's going to be blog styles.post now what we're going to do is just use some basic principles from css and scss to style the rest by element name this is perfectly valid and it's a common approach so right here i could say something like let's target our anchor elements inside of posts and apply some styles to those maybe for example i want to set the background equal to a offwhite i'll use the hex code f4 f4 f4 for that and i don't want that purple and blue link text so i'll set the color equal to black which is the hex code the number zero six times so if we just set that up we should see those styles actually applied and over here they are so we don't have to just use class selectors in our modules sometimes we want to set up one and just style some stuff inside of it making our lives a lot easier this is also just fine now we're going to add a few more styles inside of here i'll set display equal to block so we can control the spacing i'm also going to set padding equal to 1 rem to put some space between the text and the edge of this offwhite box and from there i'm going to set text decoration for the link equal to none i don't want to have that underlined link and over here we can see we're now headed in a nice direction now when we're working with css modules and using this approach we're not limited in any way i could still set up something like this i could target anchor elements using the hover sudo class so when you're hovering over the link we could make the background a little darker here i'll set the background equal to that would be a hex code of e4 e4 e4 which is just a slightly darker gray this is going to apply exactly like we would expect as we hover over we see it now from here we can continue styling the other elements inside of the post like the h2 and our paragraph so let's add those into the mix as well nothing to stop us from just targeting them by elements right here i'm going to set up margin bottom for the h2 removing that and then i'm going to set up some styles for that paragraph as well and then we'll be done right here just three styles first up is the color i'm going to use the hex code with the number seven six times which is a slightly dark gray not too dark not too light then we're going to set the font size equal to 0.8 rem a little smaller than it currently is currently it's sitting at one rem then we're going to set the font style equal to italic just to differentiate it from the other content in that box and there we go we set up a single class selector in our css module and we targeted the elements inside using element selectors now if we check things out over here what do we get we have our styled blog list i can still access those posts by clicking on them i can view the post content and everything is looking pretty good so now we have a complete site with a markdown blog all powered by gatsby we could take this and we could continue on with it really making it our own for either ourselves or for a company we're working with now this is just the start being able to create a markdown blog is awesome and it works really well for a lot of folks who prefer that but with gatsby we can also source our content from a cms and that is exactly what we're going to cover next i'm excited to get to that so let's jump in to the next lessons in this video we're going to start the process of connecting our gatsby project to a content management system now in this boot camp we'll be working with the contentful cms but the exact same principles would apply if you wanted to use another content management system like wordpress or drupal gatsby has plugins to support all of those cmss and more but once again we're going to end up using contentful it's my personal favorite of those options it's really easy to work with and we can get started for free you can find it over at contentful.com and right here we're just gonna go ahead and create a free account everything we're going to do in this boot camp is completely free and doesn't require a credit card just a free account so let's create that account and once we have it created we'll get some content into the mix right here i'm going to create a new account with you so i see the exact same stuff that you're seeing so let's fill out those basic account details when it comes to choose your development platform we're just going to pick javascript though honestly this choice doesn't matter and down below we'll toss a password into the mix now we can go ahead and actually create the account and when we do it's gonna bring us over to a little welcome screen trying to get us to pick one of the tutorials to work through over here for content creators like a copywriter and over here for developers honestly we're not going to work through either of those as we'll be discussing things together in the video and the quickest way to get what we want is to just click explore content modeling this is going to create an example project for us and that's not a project we're going to work with this comes prepopulated with models and data but what we want to do is figure out how we can set things up from scratch for our needs so once the example project is created we're just going to create a brand new one and start there alright let's explore the example project and we're done exploring it let's create our own from the menu we can click create space a space is like a new project and we're gonna go ahead and use our second free space we get two on a free plan and right here i'll just call this something like the great gatsby boot camp though the name is not important and right here we want to create an empty space that we can populate with our own content in this case the blog content we want to show in our gatsby site so let's actually create this new space right here a confirmation screen and once it's created what we need to do is focus on defining the type of data we want to track so there are two main tabs i want to talk about up here we have content model and we have content content model allows us to define models for the content on our site this could be a model for a blog post where we have a title a published date and a body it could be a model for an author where we have the author's name their twitter profile link and a profile picture so over here we're creating structured data under the content tab we actually create instances of those things so this is where we would define our six blog posts and our two authors and whatever other content we wanted to create so let's see this in action under content model we're going to create our first content model for a blog post so right here we have a required name field i'll just use blog post and down below it's creating an api identifier for us which we'll end up using a bit later there's no need for a description so we'll leave that blank although you could come back and edit it later and now we're just going to create the model now the model by default isn't tracking any data whatsoever it's up to us to configure the fields that make sense for a blog post now we already have some structured data over here in our two markdown posts for both we have the title we also have the date and finally we have the actual post content so those are three distinct fields and we're going to be adding three fields to the blog post content model let's go ahead and add our very first field right here we can see that with contentful we have a lot of field options this could be a text field a complex rich text field with formatting images and more it could be a simple text field it could be a number date and time location media a boolean like a check box and a whole bunch of other options now in our case we just want a simple text field for the title so let's pick that and give it a name right here we type something to show in the contentful forms in this case capital t title and behind the scenes it generates a field id and this is how we'll access our data from the graphql api a bit later down below we have a few options none of which we need so we can create our first field let's go ahead and add our second field and it's actually one i forgot about this is also going to be a text field and the name for this one is going to be slug so there's no longer a file name that we can use to find the slug so we're gonna have the post creator pick a slug for that post next up is the published date right here we'll use their date and time field for this giving in a name like published date we'll create that field and from there there's only one more field we need the field for the post body and that is going to be a rich text field so right here we'll click that option and go ahead and provide a name right here i'll use body for this one now once we create that we've finished off our content model we have modeled a blog post with four pieces of data and as long as those four pieces of data are provided we have enough to actually get something rendered to the screen from here all we need to do is click save to actually save this content model and once it's saved we can start to create blog posts based off of the model over here for this we go over to the content tab and we're going to click add blog post that option is also available up above whoops it's not available yet not until we have our first post in place so let's get our first post in place right here add blog post and were brought to our blog post editor page it has all of the fields we specified title slug published date and body and now we can create our very first post for the title i'll use a contentful blog post for the slug i'll just use something like contentful i can pick whatever makes sense for me then down below i'll say this one was published today and we can set up our post body as well my post is here dot dot dot now currently this post is not published which means that even if we did have things wired up with our gatsby site this data would not be accessible to the outside world we can fix that by changing the status from draft to published by clicking our publish button now we have our first published post and if we head back over to the content page we can see it showing up right here from here we can add a second post into the mix then we'll figure out how to actually pull this data into our site right here something like debugging nodejs i'll have the slug be debug hyphen node for the published date i'll say this was published a couple of days ago and for the body i will say here's how you can debug your apps dot dot dot and we'll go ahead and publish this one as well so now we have our very first content model blog post and we've created two instances of it a contentful blog post and debugging nodejs from here what we want to do is figure out how we can access this data via our gatsby graphql api once we have that in place we'll be actually able to show this content on the site getting that done requires us to set up a gatsby plugin so let's head over to the gatsby site go to the plugins page and we'll be searching for contentful now right here the first result that's the one we're looking for gatsby source contentful that's going to allow us to source our graphql content directly from the contentful cms now actually setting this up is really easy down below all we need to do is provide our space id which is the id for our project and our private access token and we'll look at where that lives in just a moment now before we actually set this up i did want to mention there are source plugins for other cms's as well for example if i search wordpress we can find one for that gatsby source wordpress and if i search for something else like drupal there are plugins for that as well so when it comes to your gatsby site you can source that content from a lot of different places you could even use multiple if that made sense for your particular situation in this case though we are going to set up that contentful source plugin so let's head over to visual studio code shut down things in the terminal and we're going to run npm install to get that installed that is gatsby source contentful and we're going to go ahead and install that and we can go through the process of setting it up in the meantime so to get this set up what we need to do is head over to that gatsby node file excuse me the gatsby config file where we have our long list of plugins and we're going to add a new one into the mix now we could put this wherever we'd like i'm just going to toss it right up top as the first item in the plugins array right here this is something we'll be setting up options for so this one needs to be an object in there setting up the resolve property with the plugin name right here that's gatsby source contentful and i can see down below that it did indeed install correctly which is a great first step next up we provide our options object and on the options object we have to specify two things our space id that's a string and we also need to specify our access token that is also a string this is what's going to allow us to actually fetch that content now both of these we can find over in the contentful web app so let's head over there from here we can go to settings and down to api keys now your spaces by default have an example key pair set up for you so if we click on that we can view all of those details down below down here we have our space id and we also have our content delivery api access token that is what we need so to set this up we're going to use environment variables to prevent the sensitive data from sneaking into our source code we already have an environment variable file for that so we'll just make some more changes to the dev env file right here we have our one environment variable let's add two more first up will be contentful underscore space underscore id then after that we'll have contentful access token and all we need to do is populate those two with the correct values i'll grab the space id i'll bring that right here then i'll grab that content delivery access token and i'll bring that over to the env file as well now with this in place we can access those two things in our config file and then we'll be all done we'll have access to all of that contentful data let's go ahead and use those variables so over here for space id that is process dot env dot contentful space id and down below for access token that is process dot env dot contentful access token and we're all done everything is configured so with this what seven lines of configuration code we're able to set up everything we need to source content from contentful now what we're going to do is start up our app in development mode using npm run develop and once that's up and running we're gonna head over to graphql playground and take a look at the new queries we have access to because those queries are going to allow us to access the data we just created so right here these sites starting up i'm gonna head over to graphql playground and give things a quick refresh and over in the docs we should see those new queries showing up and right here we have six now we have two for working with content types this is not going to allow us to fetch the content itself but it's a way to work with content types not something we need and we also have a couple for working with our rich text node as there's some specifics to that we'll talk about shortly for now what i really want to focus on is contentful blog post and all contentful blog post we can use the first one to fetch data about an individual post and we can use the second one to fetch a list of all posts and that's exactly what we're going to end up doing now if i crack that open we can see a similar structure to what we had with our other queries we have edges we have node and node represents our post we have title slug published date and body so let's actually set up a query to fetch some post data i'm going to crack open a new tab over here we'll set up a brand new query and this query is going to use all contentful blog post to fetch something about every single post we're working with now we want to work with edges and there we have node and all we're going to do is grab the title for each and every post so if i take a quick moment to fire that off what do i get i get debugging node.js and i get a contentful blog post so there we go we've successfully sourced the content from the cms right inside of our gatsby graphql api let's grab a couple of other fields real quick as well we're going to grab the slug for each post and we're also going to grab the published date now i'm intentionally not grabbing the body field because it's not as simple as just getting a body back which is a bunch of html there's a little more to it and don't worry we're going to address that in the next video for now though we can fire off our new query and we get new data i see the correct slug and the published date for both of my posts we're also going to talk about how we can sort our posts from most recently published to oldest and we'll figure out how we can actually format this date to be a little more friendly when it comes to rendering it to the screen i'm excited to continue on with contentful but let's take a quick moment to recap what we did essentially we use contentful as a web app to manage our site content we have our content models and our individual content themselves we were then able to pull all of this into our gatsby graphql api using another one of gatsby's source plugins in this case it was gatsby source contentful now that we have access to it via our api we could use those queries in our react components to get that data rendered to the screen that's the topic of the next lesson so let's jump right in now that you have content in your contentful cms what we're gonna do is figure out how we can get it rendered in the browser we've already seen a sample graphql query that fetches our blog posts from contentful and the goal in this video is to get our post list rendered using contentful posts instead of using the posts we created with markdown files so to kick things off what i want to do is talk about how we can customize the all contentful blog post query we're going to learn how we can sort our posts in a particular order and how we can customize the response of things like published date getting a date that's a little more user friendly as opposed to the current time stamp we're seeing in the response let's get started by figuring out how to sort our data and remember graphql is selfdocumenting so the docs contain everything we need in order to get this done down below we have all contentful blog posts the query we're using here we have our type details that's the response we're looking for the arguments allowing us to customize the response there are four we have skip and limit which is useful for pagination we have filter which is useful if you're trying to implement something like a search bar and you want to filter to a subset of your posts and we have sort sort allows us to sort our data in an order that makes sense now right here when we use sort we provide two pieces of information we provide the field we want to search by excuse me sort by and we also provide the order either ascending or descending so right here for fields we can see we have a bunch of different fields available now this allows us to sort by various fields that aren't applicable to what we're working with right here we have a lot of different fields because of that special rich text field we set up in our case if we scroll up a little bit the one we're looking for is just sorting by published date and that's exactly what we're going to do so let's take this over to the query right here on the query we are going to set up our arguments i'm going to set up sort and remember we have to provide fields that's plural and the field we're working with here is going to be the following that is published date then next up we have to provide an order and in this case we could sort in ascending with asc or descending with d e s c and this is the order we're going to go with we'll have the most recent posts first and we'll have the oldest ones at the bottom so if i run this we should see the order reversed as this was published on the 8th and this was published on the 10th and right here that's exactly what happens so we have our newer content first using this argument one more thing we can do is customize the published date value so let's check this out if we head over to the docs once again we're going to go all the way to the left and we're going to go to the type details we have edges we have node and here is the node we're currently working with we have title slug and published date and you'll notice that with published date we have a parentheses set right here if we click on that there are actually arguments we can provide for just this one field to customize it i could do something like from now to say this post was published three days ago or 10 seconds ago i could use format string in order to customize exactly how i wanted to format it let's explore both we'll start with from now so right here set up some parentheses from now setting that to true i run it and i can see a day ago and three days ago so maybe that's what we want in which case this would work really well if we wanted to customize it even further what we could do is use the following it is format string now this uses the formatting pattern made popular by the moment js library so here's an example i will use the following pattern it is four m's followed by a space capital d lowercase o comma then y four times that's month day and year and if i run it we can see we get the following setup april 10th 2019 april 8th 2019. now you can provide whatever you'd like in there to really customize it and make it your own if you want to find all of the patterns you can use you can open up a new tab and go to moment js dot com forward slash docs once you're there on the right hand side you want to go to display and down below you can see all of the different tokens you can use in your pattern so there are different ways to represent months the day of the month the day of the week there's all sorts of great patterns here allowing you to generate the specific output you want in our case though we're not going to go any further we're going to leave it like this april 10th 2019 is exactly what i want to show on the screen so now that we have this query in place we're going to take this over to our blog page and we're going to render these posts instead of the markdown posts now getting that done is actually going to be your challenge for the video so let's dive right into that in visual studio code we're going to close all of the open files we have and we're going to focus on just one inside of our pages directory we have blog.js now currently we have a query that fetches the markdown data and renders that down below we need to change both of these things to work with the contentful data so up above i'm going to paste in the challenge comments and they're pretty straightforward the goal is to render the contentful posts in our list so first up you want to swap out the markdown query with the contentful query and if you want to customize it further using other arguments or options you're more than welcome to but in general this query can be used inside of the component next up you have to update the component to render the new data so our data structure is a little bit different even though we still have those same three things we still have the title the date and the slug they're just in a different place on the response and for the moment don't worry that your link is gonna link to a nonexistent page we'll address that shortly finally test your work pull up the blog page and make sure you see your two contentful posts showing up as opposed to the two markdown posts all right pause the video knock that out test your work and when you're done come back and click play how'd that go let's get started and the first thing we're going to do is swap out the queries now we have the old query over here so let's go ahead and get rid of that it's no longer all markdown remark we're going to go ahead and work on the new one so that is all contentful blog post from there we're still going to be setting up our arguments now we could do all of that on one line or we could break it out onto multiple if we wanted to do it on one line it would look like this we'll set sort equal to an object on there fields is equal to published date and then we'll go ahead and set order equal to descending perfect next up we have to go ahead and specify what exactly we want back on the response that is edges node and from there we need the title we also need the slug and finally we need our published date and we're going to format that exactly like we did over here using format string so right here that would be format string setting it equal to whatever format string we wanted to use and i'll use the same one from before the full month followed by the day of the month a comma then the full year all right now that we have this in place we are done with step number one and at this point our program would crash if we tried to run things that's because we're trying to access data down below that no longer exists since we've changed the query up above in the browser if i go over to the blog page it is indeed failing as expected so now that we've seen things fail let's actually get things working we can go ahead and move on to step number two where we update the component to render the new data so right down here let's knock that out data dot all markdown remark that no longer exists it is all contentful blog post now we still have edges and we still want to map over that down below here we have our list item what we need to do is customize this starting with the slug it is still edge node but there's no longer fields it's just edge node slug exactly like we're seeing up above edge node slug down below we have the title as well that does not exist on front matter it's right on node and below that we have the old date front matter that no longer exists and it's called something different right here edge.node.publisheddate perfect now with this in place we have the new query and we're rendering that brand new data and hopefully everything works as expected when we actually move on to step number three and test our work so i'll refresh the page over in the site and what do i get i have my two blog posts a contentful blog post and debugging node.js now i can see down below at the bottom left in the little gray bar that it is linking over to the correct pages but if i click those links obviously we don't get the pages content since we haven't wired that part up but the blog list itself is indeed working and that is a great start with this in place we're all done for the moment in the next video we're going to go ahead and actually create those pages dynamically using the contentful content i'm excited to get to that so let's jump right in to the next one now that your list of blog posts is populated from contentful we want to make sure we're generating pages for each of those posts right now if we click on them we get nothing and that's a problem so in this video we're going to accomplish two things first we need to dynamically create new pages for the contentful posts and then two we need to make sure we're actually rendering the post content in the post page template so that template is going to need to change a little bit the entire focus is going to be on gatsby node where we dynamically create our pages and the blog template where we render the content to the screen let's get started with gatsby node now to set things up for markdown it required us to use two of the internal apis on create node and create pages now oncreate node was just used to generate slugs for our posts that's a field we set up in contentful so we actually don't need this anymore we can remove it entirely down below the only one we're going to use is create pages we just need to adjust it instead of fetching the markdown slugs and using those to create pages we want to fetch our contentful slugs and use them so let's get started right here we have all markdown remark i'm going to remove all of that we still have our base query though this time we'll use all contentful blog post like we've used before there are no arguments required as we just need a list of slugs there's no need to order it as that doesn't matter right here edges node and the only thing we're going to grab is the slug as that's the only thing we need now down below when we loop through the data we can use the contentful slug right here dot response.data that still exists no longer do we have all markdown remark we now have all contentful blog post we still have edges and we still want to iterate over that using four each inside we have the create page call the component is still blog template the path is still forward slash blog forward slash the slug but remember the slug no longer lives on fields it is just edge dot node dot slug down below for context we have to make the same adjustment removing fields and one of those extra dots and there we go that is it so when we're working with a cms there's a lot less for us to do behind the scenes to get things to work we removed a lot of code and now we're actually going to have pages for our contentful posts before we worry about restarting the server let's head over to the blog template and pull in the new data so we still want to set up a query though it's going to look a little different than this one so i'm going to comment out this one and we'll build up the new query from scratch down below we also have our blog component everything in here is gonna be similar though different enough where we're just going to start from scratch with this as well so now blog just renders an empty page using the layout component let's make sure that we're at least seeing that page instead of the 404 page so in the terminal down below i'm going to restart things since we have made changes to the gatsby node file and once the server is up and running if i refresh this url i would expect to see something valid as a page should exist with this slug from contentful right here i give things a refresh and this is a great first step we're no longer seeing that 404 page now let's set up our query once again to fetch the contentful data so we can actually render some stuff to the blog page now it's gonna look similar to what we have up above though obviously slightly different we'll start off the same exporting a new constant called query all of which is required in order for the gatsby parser to find your query and run it right here graphql inside of template strings we put our query this query is still going to get access to the slug variable which we need we need to be able to target the individual post and slug is a string just like we had to find up above now inside of here which particular query are we going to use over inside of graphql playground we had worked with all contentful blog posts in the docs there is a way to get a single blog post using contentful blog post so this will allow us to target a specific post and if we scroll down to the arguments we can see there are quite a few different ways we could target a post i could target it by its title the slug the published date the content and others in this case we're going to target it by its slug so we'll be using this slug argument and in there we'll use eq to find the slug using equality all right let's set that up so over here that's going to be contentful blog post setting up the argument we just talked about slug in there eq and the value would be whatever is stored on the slug variable so now we're targeting the correct post and we can fetch some data for the moment we're just going to fetch the title and the published date don't worry we are going to render the body in this video but it requires an extra step so let's get started with the simple stuff right here we'll have the title down below we'll have the published date which i'll also format using format string and i'll provide the same format we had before i'll start off with the month then the day of the month and finally the year with this in place we should have access to that data in our component down below let's get these two pieces of information rendered we had the title nh1 header tag and we had the date inside of a paragraph so right here for us that would be the following it's still props.data exactly like what we had before this time though we have to go into contentful blog post and in there we have the title down below let's do the same thing for the published date that's dot props.data.com blog post dot published date and now if we save things we should see these two pieces of data showing up over in the browser right here i have the title and the correct published date for this post and if i go back to the blog list and select the other one that data shows up as well which is a great step in the right direction now that we have this in place we want to focus on getting the post content itself rendered and as i mentioned it's not as simple as just grabbing a single field and then using that field like we did with the html field that we got with our markdown query from up above so let's explore this and to get started we'll remove that redundant query and what we're going to do is head over to graphql playground real quick and take a look at another property we have access to so all we're going to do is modify this all contentful blog post query we already have in place alongside of title slug and published date we're going to grab body now body itself is not something we can directly grab there are fields inside of it we need to access and in this case when we're working with a rich text field in contentful we want to grab jason this returns a json string which is a representation of the content in that rich text field so if we go ahead and set this up and run our query it's going to work and we're going to see we get a lot more data in the response here for our first post we have body jason and we can see the value is a complex structure we have all sorts of different fields and arrays and objects and somewhere inside of there we can see the data that we actually wrote out my post is here and if we scroll down for the other post we can see that as well now the reason they use this complex structure is to keep track of things like the paragraphs embedded assets like images headers bold text italics and more all of that is mapped out in this object now the good news is that we don't need to manually parse this and figure out how to render things to the screen contentful actually provides an npm library we can install and it's going to take the json and it's going to convert it into a set of react components that we can render anywhere so it's not just specific to javascript the library is actually specific to react which makes it really easy to work with so let's install this library and set it up it'll be as simple as a function call right here we need to shut down the server and i'll clear the output and we're going to install this library that's npmi it is at contentful forward slash rich text react renderer so this is going to allow us to render rich text fields using react it provides a single function we're going to import it and call it and that's going to allow us to get our rich text field shown on the screen let's run the installation and while that's running up above we can focus on our import statement so we're going to grab a single thing from that library it is a function and it's called document to react components now this is going to take in the json that we're grabbing from the api once we set that up over here and it's going to spit out react components that we can render wherever we want to now we're going to grab that from the library we just installed contentful rich text react renderer perfect now that we have this in place let's actually use it and it could not be easier to work with so first up we do have to grab the data so that's body grabbing the json value and we use this down below now what i'm going to do is set up right after the paragraph a set of curly braces so we can set up our function call we're going to call document to react components exactly like we imported up above and all we do is we pass in that document that jason data so for us that is props dot data dot contentful blog post whoops got a little ahead of myself with the keys there and on here we want to access body and we want to access jason with this line in place we now should be able to see our post content on the screen right here let's restart the server with npm run develop we're going to check out that content then we're going to make more complex changes to the content in contentful and check those out as well right here things are starting up so i'll refresh my site and once we get the blog post page we can pick a post and we do see the content in a paragraph which is awesome i have the content for the first post and for the second one now let's head over to contentful and add some more complexity to those posts so we can see what we get down below in the body let's add some more stuff below our text i'll add a header a new section and below that i'll add some more text i love gatsby with contentful and i'll go ahead and make gatsby bold because i can and now we're actually going to add an image into the mix as well so right here we can link an image using this plus button we can link an asset now we haven't added any images to contentful we can do that in two ways one we could go to the media tab and add them there then link them or we could just add it right here when we try to link it so there are no assets we haven't added any from the media tab we could just create one on the fly so i'll click that button and here we just need to pick a title for this one i'll call this grass we have a description and we have the actual file down below in this case for the file what i'm going to do is pick grass from my machine which we downloaded earlier so i have that in my project that is gatsby boot camp source here we have posts gatsby grass.png this is the one we had used in our markdown posts now we're going to use it in our contentful post so once we have things loaded in we can publish this asset once the asset is published we can use the back button to pick it from the list and right here we can see it's already been put inside of our post so i'll remove the extra little space down below and now we have a little more complexity i have some text a header an image and some more text down there let's publish these changes and check things out over in the browser what i'm going to do is shut down the server and start it up once again so it can fetch that new contentful data and then we'll just rerender excuse me refresh the post page to check things out so right over here we want to go to the other post a contentful blog post i'll give things a refresh and what do we get we get some of our new content i have a header which looks styled consistent with the rest of the site and i have my other paragraph with the bold text down below the only thing i'm missing is my image by default your images are not going to show up but the good news is that we can make a small change to how we're calling that document to react components function to actually render those images right in line before we focus on changing the code let's look at the new data for our complex post so right here i'm going to rerun the same query we had before where we grab that json and we can see that it's a lot longer than what we had in the past we have our initial paragraph with the text here then down below we have our heading 2 with that text a new section and below that we have a very long and very complex object for the asset the image that we've embedded in that post if we scroll down there's a lot of stuff we just don't care about and are not going to use but we can scan for two things one is the title right here grass we're going to use that as the alt text for the image and then down below that we have the url this is what we're going to use to actually fetch and render that image now this object can be really overwhelming as there's just a whole bunch of stuff we don't need to worry about almost any of it all we're going to do is drill into that object to grab those two values and we're going to generate an image element like we would do in any other situation so let's leave the actual rendered post up in the background and over here we're going to focus on drilling down to that data right here to do that we have to set up an optional options object so a new constant options is going to be an object and we pass that in as the second argument to that function the document to react components function so i'm going to pass that in now what we can do is customize how certain node types are rendered on here we start by setting up the render node property this allows us to override how specific nodes are rendered and we saw various node types in that data for example we saw things like paragraph and heading 2 we set that up as the property saying that's the type we want to customize in our case the type we want to customize has a hyphen in it so i have to wrap that name inside of quotes that is embedded asset block and all we do is provide as the value a function to run we're customizing how the node is rendered we get the node data passed in and we return some jsx in this case all we're going to do is return an image now we want to set up values for the alt text and for source so let's start to get that done right here i'm going to create standalone variables for both of those things so it's a little easier to work with we'll have alt then i'll have url down below and both of these are going to get applied on to the image alt will get its value from the alt variable then when we set up the source for the image the value will come from url now in order to get the correct values we need to drill into the node which is that really big complex object so let's check that out in graphql playground over here we have our complex object there's quite a bit to it we have the data we want and then we have a bunch of other stuff we just don't care about now our node is this object right here it starts with the data property we have data.target now we also have cis which we're going to collapse and when we collapse that we'll see the two fields we're looking for so this object is the node which means we need node data target fields title enus for the alt text and then on fields we need file en us url for the url now it's never fun to drill into a complex object like this but that's just where our data lives and it's going to be necessary just a single time so let's get that done over here we'll start with the alt text that's node.data.target from there it was fields dot title and we're grabbing the title in the locale i have en us if you see a different locale over in graphql playground you want to go ahead and use that and then down below we're going to grab url this is going to be node dot data dot target dot fields here it was file followed by the locale en us followed by url now we should be able to see both of those things showing up in the image element and the end result should be a rendered image in the browser and that is exactly what we're getting right here we have all of our post content showing up including the image and all of this is managed from contentful so when we're working with contentful we can easily manage our content or someone else who owns the site can manage the content using this nice interface and behind the scenes they don't need to worry about changing code or changing markdown files or changing anything else now once again contentful contentful's not for everybody and neither is markdown it's really up to you to pick what makes the most sense for you and run with that alright that's it for this one let's continue on and the boot camp is almost done there are just a couple of things that i didn't get a chance to cover so far that i want to cover in the next lesson or two so let's get started there are just two videos left in this one you're gonna learn how to set up a 404 page and you're also going to learn how to customize the head of your document to set up things like a page title and then in the next lesson the final one we'll take our gatsby site and we'll deploy it live to the web for now though let's get started setting up a 404 page and this process could not be easier in visual studio code i'm going to close all open editors and all we need to do is create a new page in the pages directory and this file should be called 404.js in here we export a react component and that is what renders when someone visits a page that's not found so let's actually get to this right here i'm going to start by importing react since we'll be setting up a react component and down below i'll create it const not found equals i'll use a new functional component returning some jsx and then down below we can export it so export default not found now on the not found page i still want to render the layout so people can use the navigation bar to go over to a page that does exist and i'm also going to link to a different page like the home page in the not found text so right here i'll import link from gatsby and then down below i'll import the layout component that we created from that file that is dot dot forward slash components forward slash layout now we can actually fill out the return value for our functional component and we're going to start by rendering the layout let's set the layout up and inside of there we will render a couple of custom things on the page as well i'll start with a header something like page not found should get the message across then down below i'll set up a paragraph and in there all i'm going to do is use the link component and i'm going to link them over to a page that i know does exist i'll say something like head home and this link will go to forward slash and there we go that's all we need to do to get a 404 page setup with our gatsby projects let's actually test this out so down below i need to start up my server npm run develop and once that's up and running we're going to visit a url that does not exist so right over here i'll go to my site forward slash this is not real and i misspelled it but who cares that's the whole point now when we're running our development server gatsby first brings us to this page which is designed to give us more information as we're creating our site we can see pages that do exist we can see why we're seeing the 404 in the production version of the site though this would never show up now we can view our actual 404 page by clicking preview custom 404 page and when i do that we get what we designed so this is what a regular user would see once we actually get our site up and running in production which once again is the topic of the next lesson so right here they can go to a page that does exist or they can just click that home link to get back to a working page so there we go the 404 is all set up now i want to focus on customizing the head of our document so we can set up things like page titles and to get that done we'll be using the very popular react library called helmet if you're not familiar with it it's pretty much the standard for working with the head of your document from react and there's a gatsby plugin that's going to help us integrate that into our sites let's head over to the plugins page on the gatsby site and search for helmet right here gatsby plugin react helmet that's the one we're going to end up using now there are actually two libraries we'll install we'll be installing this plugin and we'll also be installing the react helmet library which is linked to right here we can crack that open in a new tab to check that out as well this is just a standalone react component that we could use outside of a gatsby site it's a really great choice for managing the head of your document and they have a ton of great examples down below as to how you can get all of this done now when it comes to the plugin we're going to install this pulls all of that information in to the static pages for our site so it's definitely going to be an important piece to the puzzle let's take a quick moment to install both of these then we'll actually wire them up in our app so down below we'll shut things down i'll use clear to clear the terminal output npm install first up is gatsby plugin react helmet at the latest version 3.0.12 and next up is react helmet itself at 5.2.0 now we can go ahead and let these install and while they're installing we need to configure this gatsby plugin in our gatsby config file now there's no need to provide any options for this one so it's as simple as listing it out in our plugins array and i'll add it right up top as the first plugin right here gatsby plugin react helmet and there we go it is configured now what we can do is import the react helmet component and actually use it to set up titles for our pages now there are two ways we could do this we could manually set up this configuration in every single page component as well as our blog template or we could create a component that handles the configuration for us something simple that we can render on all pages meaning that we only have to configure react helmet once and of course that's the approach we're going to take so in the components directory let's create a new file called head.js for the component that's going to manage the head of our document right here we're going to import react from react and we're also going to import something from react helmet right here it is a named export called helmet that is a react component from the library we just installed react helmet and we're done now we can create our component and export it from the file so right here const head equals a functional component where we're going to return some jsx which we'll get to in just a second down below let's export it export default head now when it comes to what this component should render all we're going to do is render helmet itself we're not actually going to add anything else into this component and when helmet gets rendered it doesn't show anything on the screen instead it just manages the head of the document so right here we can configure things like the title using the title prop this is a test so let's leave our component file like this don't worry we will grab a proper title from the site metadata a little bit later for now though let's just get this title showing up to do this once again this component needs to be loaded in and used in every single one of our pages including our page templates let's get started with the most obvious one the home page then we'll move on to the other pages we have so right here we have to import head import head from dot dot forward slash components forward slash head and then we render it and we're just going to do that as the first thing in the layout and remember it's not going to show anything there this is just going to allow us to manage the document head so right here i'll render our component we can then go ahead and save things and start up the development server once again so i'll use clear followed by npm run develop and once it's up and running we'll visit the home page and hopefully we see our custom title showing up over here we have the home page i'll just give things a quick refresh let's try one more time there we go the server is finally up and in a second we should see our page we have the page and we have our title this is a test is showing up now when it comes to customizing that fob icon all you need to do for that is swap out the file in the static directory down below fob icon dot ico so let's continue on with this particular example and what i want to do is focus on actually pulling in useful information the first thing we're going to do is we're going to pull in the site metadata title this is something we're going to show as part of the title for every single page it's not the only thing we're going to show but it's part of what we're going to show so right here for a site like gatsby i can see that if i hover over this title for a second it's going to show me the full thing we start off with something specific to that page gatsby plugin react helmet followed by a vertical line followed by the site name gatsby js that's similar to the approach we're going to take here so each page will have something specific to render up there but then we'll also have something generic like the site title to get that done let's first pull in the site title so right here we're going to use use static query i'll import use static query and i'll import graphql from gatsby then down below we can actually grab that information so const data equals we're going to call use static query using the graphql template tag with our string and right here we're going to perform one of the first queries we ever set up query site site meta data in there grabbing the title so now the title is something we can actually use down below let's go ahead and set that up so instead of the static title we're going to set up a dynamic one we have that data at data dot site dot site metadata dot title we can save things and hopefully we now see that showing up on the home page right over here i have full stack boot camp so this is a great start the next thing we want to be able to do is pass in the part that's specific to this page which is going to come first to get that done the actual component is going to get called with a single prop so whenever someone renders ahead they can pass in the title they want to use for that page so here i'm using head on the home page so i could say something like home now i can go ahead and actually access that prop in the component and use that when determining what the title should be so right over here let's get that done we have our props passed in i'm just going to destructure that object to grab the title and now we can use that in helmet down below right here we're going to change the title prop that we pass to helmet we're still going to include this information but we're going to put all of that in a template string so we'll start off by adding in the page title that's the title prop up above then a space the vertical bar and another space followed by the site title right here once again data.site.sitemetadata.title now we're going to see both of those things on the homepage so right over here i have home followed by full stack bootcamp so now we have a little component making it really easy to integrate this into all of our pages instead of needing to write this code in every single page let's go ahead and actually get that done for the four other pages we have in the pages directory and we're also going to do the same thing for the dynamic page template for blog posts so right here what i'm going to do is copy the import statement to grab the head component and we'll continue on in the contact page we'll paste that in we'll set up the head component inside of layout and right here all we're going to do is provide the title for this specific page which will just be contact next up we have the blog page so we want to import head down below we want to use it right here we have layout i'll go ahead and set head up providing the title for this particular page which will just be blog perfect next up we have about where we do the exact same thing import and set it up head title about and we're done and finally the new page we just created our 404 page we can also use the head component inside of here i'll import it and down below we'll go ahead and use it setting up the title to something like 404 perfect the only other page we need to worry about as mentioned is the template for our blog posts right here what we can actually do is use the blog post title as the page title so i'm going to import head exactly like we did before and down below we're going to set it up so right here in layout we're going to set up head but instead of providing a static string which made sense for our other pages we're going to provide a dynamic value the actual blog post title which is used just down below so that's props dot data dot contentful blog post dot title and we're done now we have this set up everywhere on our site and we can test things out so over here we go to the blog page we have blog on about we have about on contact we have contact and if i actually visit one of my posts i can see that showing up in the title as well now that we have this in place we have a really nice site and it's working really well locally the next and final thing i want to focus on is actually getting this up and running in production so anyone with an internet connection can check out the site you've created that's exactly what we're gonna do next so let's jump right into that we've got a site and now it's time to get it live and that's exactly what we're gonna do in this one now the first thing we need to do is to get everything up on a github repo we're gonna end up using netlify to deploy our static site and netlify can pull the assets right from github so that's a really good solution for us over here in the editor we can close all open editors and we can collapse all expanded directories and the only thing we're going to do before we make a commit is make sure that our environment variable file does not get committed this can contain sensitive information and it's something that we don't want to commit as part of the repo because right here this is not stuff we want to expose to just anybody so to do that what we're going to do is actually rename this file right here we're just going to call it dot env originally i thought i would create multiple environment files but that's not the case we just have this one locally and we can see that by default it's already ignored based off of the get ignore file that comes with gatsby the only other change we need to make since we renamed that file is over here in the develop script right here dot env dot development just becomes dot env now we're ready to commit our changes and push them up to github let's get started by actually creating a github repo for our new project so right here i'll go over to github.com i'm going to create a new repository and we're going to set this up i'll call it gatsby bootcamp and i'll leave this one as private down below we can create it without customizing any of the other settings and once we have it created we're going to take our existing repository and pushed that up from the command line so let's take this first command which adds the correct remote and we'll head over to the terminal now by default all of your gatsby projects already have a git repository created so all we need to do is make sure that our changes and all of our new files actually become part of the repository i will use git status to take a look at the status of the repo right here we can see we have a bunch of untracked files that we're going to want to track and up above we also have some changes to existing ones i'll use git add dot to move all of those to the staging area and then git commit to create a commit right here final gatsby site and now that we have this in place we can push the code up to github i'll start by pasting in that first command which sets up the correct remote then all we have to do is use get push u we're going to push to origin and we're going to push up the master branch and once this command is done we'll be ready to connect our github repo to the netlify hosting service to host our gatsby site all right i'm seeing everything right here so let's pull up a new tab it is netlify.com this is a great hosting service for static sites it's an increasingly popular choice when working with gatsby because there is direct integration so it's super easy to manage and once again everything we're doing here is completely free there is no credit card required for any of this let's take a quick moment to create an account and i'll work through this process with you just so we're seeing the exact same stuff i'm going to sign up for a new account now once we sign up we do have to confirm our email before we can deploy our site so i'm going to take a quick moment to pull that up off screen then we'll continue on with the setup all right when i click that verification link this is exactly where i was brought there's a little quick start guide with some information about how we can get started we're going to go ahead and close that down and work through this process together what we want is right here new site from get and we're going to connect with our github account now this is going to require us to give netlify permissions to read some of our data and right here we can see we have the option to pick select repositories or all of our repositories we could go ahead and just pick one so i could crack that open and i could find the new one i created gatsby bootcamp giving it limited access to just that and down below we can see we have access to all of the repository features and we're going to install that as part of our github account now once that is installed we'll actually be able to select our repository from a list and once we have that it's going to set up the build options down below we have the owner that is me this is the name automatically generated for me we have the branch to deploy i'm just going to deploy master the only branch we have and down below we have other things like the build command and this is correct we want to leave this and this in place the public directory is where the static site is going to live when the gatsby build command is executed now we also want to go to show advanced right here we can set up environment variables for our environment and we do need to do that we have those environment variables locally and those are the only things getting our site working right here we don't have to worry about setting up graphql playground as the graphql api is not even available in production but we do want to set up the space id so let's start with that i'll grab the variable name and i'm also going to grab the value pasting both in we're going to add the other variable as well for the access token i'll set up the name then i'll go ahead and grab the value making sure not to grab the equals sign and now we're actually ready so it's going to grab the code it's going to run the build command and serve up that public directory and it's going to make sure it can actually get our contentful assets since we have these values defined from here all we need to do is click deploy site this is going to work through the deployment process and especially for the first time this can take a little longer it can take upwards of maybe 60 seconds to get everything up and running so what i'm going to do is just cut the video to win the deployment is complete the deployment is now finished and we have our url up above let's go ahead and open that up in a brand new tab and what do i see we have our site live on the web right here all of our pages are working and we also have our contentful data i have our first post and our second post now when it comes to deploying a new version of your site you have a few different options so let's go ahead and make some changes and get a new version up we're going to change not just the site code we're also going to change some data in contentful so we can see what that process looks like too and i actually want to start with a change to the contentful data let's go ahead and just alter the title of one of our blog posts right here we have contentful i'm going to go ahead and change a contentful blog post over to something else my new post and i am going to publish those changes now this alone is not enough to have the new content showing up remember this is a static site so when netlify first ran the build command that's when it fetched the data and populated things if i refresh we're never going to see that new content so if i just change the content and i want to show that new content on the site we can indeed get that done right over here what we're going to do is go to the deploys tab for our project and right here we have a few different options what we want to do is trigger a new deploy we're going to clear cache and deploy site so this is going to go through the process of recreating our site once again and here it's just bringing us over to the deploy logs once this is done we'll be able to see our new contentful data and this is actually a nice thing we can make changes to our data and once we're ready we explicitly deploy a new version of our site to view that new data now let's go ahead and go back to the overview page for our site and once that deployment is done actually let's stick on the deploys page we can see it's building down below all we're going to do is refresh the site once again so i'm gonna cut the video to when the new build is done all right right here i can see my new build has been published and if we head over to the site all we need to do is give things a refresh and we see the new data showing up so that's the workflow for changing just the content we update contentful we trigger a new deploy manually and then we see our new changes now let's actually make a change to some code for the site so i'm going to close all open editors and we're just going to change something on the home page so i'll go to source pages index.js right here i'm just going to remove this paragraph where i link over to the contact page as i already have that link in the navigation with that change in place all we need to do is commit our changes and push them up to github so right here git status and we can see the only changed file is the one that we changed then we're gonna run git commit once again providing our commit message clean up home page links once the commit is in place we have to use git push to push our code changes up to github and when this is done we're gonna see that over in netlify a new deploy is triggered so by default it is going to deploy changes from master it's going to generate a new build and it's going to publish it so we'll see that start in just a couple of seconds here there's no need to manually trigger a build when we're making code changes we really only need to manually trigger a build when working with netlify i'll give the page a quick refresh just to see if anything new has been pulled in and here we have it we have a new build in progress so this is starting up and once it's done we should be able to see our changes over on the site so i'm going to take a quick moment to cut the video to when this build is finished all right that deploy has finished and now we should be able to see our changes on the site here i have the home page i'll give things a refresh and my paragraph is gone so that's as easy as it gets working with netlify allows us to deploy our site managing our contentful data and managing changes to our code and now you know how to work with both of those now netlify can do so much more than we're gonna have time to talk about in this video if we go to overview you can easily set up a custom domain and enable https and up above there are a ton of great features for managing your site for now though that's all we need to get gatsby up and running that's where we're gonna stop for this video and that's also where we're gonna stop for the boot camp we've gone through the process of creating customizing and deploying our very first gatsby project we can now continue to work with gatsby and build off of this to create anything we might want to build with react that is it for the great gatsby boot camp if you want to check out other content i've created i have more videos right here on youtube and i also teach premium classes on udemy covering topics like javascript react node gis and graphql i'll include links to all of that and more in the description down below once again i'm andrew meade from mead.io and i hope to see you in another video sometime soon