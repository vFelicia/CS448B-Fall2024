hey this is Andrew Brown and welcome to the start of this Vim course and I want to tell you why you'll want to learn vim and the reason I want to teach Vim is because I I truly believe that it will be a huge upgrade uh to your workflow it's just going to speed things up uh tremendously and let you compete with people that if if you can't compete with them in terms of uh their their knowledge base you could compete on them at a just pure speed level and so let's get into why we want to learn Vim so I'll get my head out of the way here here okay and let's talk about the first points why we want to learn Vim the first is greater output and focus so you'll be able to focus on what you want to do instead of visually looking where you need to be and I think this is a big thing that I noticed for a lot of people that are learning um how to program or doing technical things that uh you know require a lot of keyboard movements but the idea is that when you are um always focused on thinking about where to move your mouse as opposed to just uh pressing a button uh you are you're losing your focus because you're now trying to coordinate where something's going as opposed to just something happening um so I think that is something that's very important is you'll get Focus back uh you'll be able to write Faster by multiple factors giving you a Competitive Edge to your non Vim peers my old boss Pablo he uh went to Computer Science school where I did not he had um he was able to build like realtime strategy games all these kind of things but the thing was is that at the end of the day it's like he could not move as quick as I could um and so I could um ship faster and and have more time to write code whereas he might have had better comprehension of technical things but uh you know his output was significantly lower than mine another thing would be less rist strain so Vim uses the least amount of hand movements to accomplish taas tasks and greatly reduce injuries such as carpal tunnel syndrome uh my old founder Ty um so he did not use vim and I used vim and he actually liked emac in particular but when he would code emac requires you to use a lot like it has it's all hot Keys too but you have to use the control key and the ALT key and those a lot all the commands are built around that and so you know he got such bad carpal tunnel he'd have the wrists I think he was even thinking about getting surgery whereas I never had issues and I again would output a lot more than he would so I think that's another Advantage is that if you want to do this long term you want to invest in something that's going to uh put the least wear and tear on your hands which are your most important tools when working in Tech uh it's portable so when you are remotely logged into a Linux machine you have the most powerful IDE to expediate your troubleshooting or configuration needs and basically VI or Vim is installed on most Linux o distributions by default and it's super easy to install and it's generally very very small it's the original one at least was written in C so so the idea is that you can pretty much install it anywhere that Linux is um and you can install it on Windows and other places as well but the point is is that it is super easy to install and generally always is installed or at least some version is installed um okay and another reason why you should learn Vim is because you have to there are going to be situations that you are forced to using Vim or you stumble into vim and you might have seen those uh very funny memes where people are talking about they ended up in vim and they got to quit we have we have that in a future slide here but um that's an that you can run into and most Linux distributions and I know the x is missing here where's it supposed to go Linus Linux there we go Linux o distributions by default set their Text Editor to Vim so you might end up opening a file or trying to commit a file then boom you're in vim and you don't expect to be in it so having basic navigation is very important and then some programs like the man command will use VI style commands for navigation so again learning those basic commands might come in handy when you open up a program as not an editor but it's using the same style of commands and it's the only way you can navigate it so that is a reason why you want to learn Vim so those are my reasons why but next we'll set up some expectations and goals okay all right so I just want to set some expectations and goals for this course because I don't want you treating this like a certification exam where uh you have to study forever I want you to acquire skills extremely quickly in a practical way that's going to serve you for a long time so uh just understand that we're going to cover more than uh just necessarily jumping in and learning the Vim commands we're going to do some additional stuff but it's going to benefit you but the point is you don't have to memorize it okay so let's take a look at what we're talking about here so the first thing is that I want you to understand the history and evolution of Vim because this is going to explain the origin of syntax and commands where there's just like funny things that you're like why is this here or uh you know why does the command work this way or it's written this way and if you have a a small understanding of the history um and you can just remember some key points you'll know why it is the way it is and that will help you remember how to use it if you do encounter it um another thing is that I want you to see how powerful and portable Vim can be so if you do decide to adopt it as your as your primary editor or you're in a situation where all you can utilize is VI or Vim that you can get the best out of it if you choose to go that extra length but again it's not important for you to fully commit to VI in this um okay but the thing that I really want you to get is fluency and core viim commands for everyday scenarios uh for development or devops uh I'm not sure what it's supposed to be in for that doesn't make any sense but the point is is that I want you to gain fluency and at the end of this course you're not going to be fluent but you're going I'm going to step you through all the stuff so that you can then go practice so it's going to be up to you um to then utilize it dayto day I'm not asking you to do drills or anything fancy but to just try to use it every single day when you are programming or scripting or going into servers uh whether that is for your own personal uh uh projects or if you're doing this uh you're already working a tech role and you want to do this uh with your current work but it really only takes 10 to 14 days even less depending on how how much you commit to it but the point is is that this is a very small commitment we're looking at 1 to two weeks of commitment of just regular use that will last you for the rest of your life so I strongly suggest that you put in that time because it is going to again be a huge payout for you uh in the long run on uh for your risks for your productivity uh just uh your ability to get things done okay so there you go now if you've never really used Vim you might have some uh preconceived uh uh misconceptions of what Vim is because a lot of people talk about how it's super complex and super frustrating to use and they'd like to avoid it as much as they can but I can to tell you that Vim is actually not that hard to learn it does not take too long to learn um but the thing is that if you know nothing it feels extremely difficult at the start and you are having to build muscle memory so there's a quote I don't know who it's from but there's a quote that kind of fits this which is people fear what they don't understand and hate what they can't conquer so it's just the fact that there are some people out there that have not committed any time and their first experience with how frustrating it is which is like instantaneous is so frustrating that they're just like nope no thank you I don't ever want to do that and so there's a bunch of memes online that make fun of this so we have trying to exit Vim uh we we have why do use Vim he says you wouldn't get it One does not simply exit Vim exiting Vim like a book dedicated just on getting out of it and then someone saying like they're going into vim and then they can't get out of vim and then the idea is that we have like an alien photo of uh trying to communicate basic commands about how to get out of Vim so you know you get the kind of idea that um you know generally again people that don't know it really don't like it um but you know we'll get over that hump extremely quickly okay but yeah hopefully that was just fun to look at some memes and let's go jump into the history of where Vim comes from okay all right let's talk about PDP 7 so this stands for program data processor 7 it is a micro computer created in 1964 by a company called digital Equipment Corporation so deck and it was the successor uh uh to the PDP 4 which is uh you know a previous computer there and so there's an example of one you might be asking Andrew what does this have to do with vim and trust me it has everything to do with Vim uh but we'll take a little bit time to get there you don't have to memorize any of this stuff just enjoy and and just absorb what you can by uh watching the video okay so PDP 7 specs where it was a 12bit machine and so it was able uh to process data in 12bit chunks um I not sure how that's different from Modern machines but it sounds like very little amount of bits uh its memory could be between 4K to 12K the reason why there's a range is because was modular so just like how you buy your MacBook Pro or any kind of expensive laptop um you know it ships with a a small amount of Ram or memory and you can increase it modularly so I like to think I'm not sure this is the case but I like to think that these are the the RAM chips here so four 8 12 I don't think that's true but I think that would be funny if that was the actual case um so the processor had a simple instruction set also known as an Isa which supported data movement uh a a Matic operations logic operations the control flow um I imagine that it's simpler than even more modern um processors or instruction sets that are out today um the PDP 7 did not ship with an operating system so deck would provide a toolkit which companies could then use to Aid in building programs or the operating system okay so there was no OS with PDP 7 and this is going to play into our story here um but the PDP 7 at the time had cost $72,000 USD in 1964 so maybe near the start of when Star Trek started on TV uh and so in today's money that'd be 0.5 so half a million dollars today it was considered cost effective compared to larger mainframe computers at the time so just notice that we called this a micro Compu so you can only imagine what a Mainframe computer uh must have been it must have taken up a whole Warehouse or something but that's the PDP 7 but yeah PDP 7 is very important to our story okay so uniplex information Computing systems also known as Unix is an operating system created at Bell labs in 1969 so this is what 5 years after uh the PDP 7 was introduced and on the right hand side uh this is actually a simulator pdp11 that might be fun to try out so there is some kind of simulator here um and you can experience it but at the time in 1969 it would have not looked like this because they did not necessarily have monitors to work with uh Unix so the U input and output was a different system which we'll talk about later but let's talk about the features of Unix so the first thing is that there was a kernel probably heard of kernels before and these manage the core components I like to think of them as like drivers but that's not exactly accurate um but this is where you have memory processing power profuel devices Process Management file management Hardware communication the really lowlevel stuff you never want to touch yourself then we had the file system so this was called um the Unix file system ufs and I'm not sure but Unix might have been um born out of this file system so I think that might have came first and then everything else got built around it then there is the shell so that's the command line interface which is the thing that we see on the right hand side but again uh that interface would have been uh not a monitor but something else and then we had utilities and tools that it shipped with so these are small tools which input and output could be chained together using an operator that uh that used the pipe character um and if you've done any bit of Unix you seen these think of the tools that are bundled into Linux or Ubuntu by default you probably seen it like Echo man cat you probably heard of them before or you know them pretty well it had multiuser and multitasking and so you know why does Unix why did they want to make Unix well the first reason was that we talked about PDP 7 doesn't ship with an operating system right so if if if Bell Labs said to ptb7 they're going to have to code something themselves but the thing was they actually already had an operating system it was called uh the the multics I think I'm pronouncing it right over here I'm going to get my pen tool out here the multic operating system but uh Ken to Thomas and Denise uh Dennis Denise I was going to say Denise Richie which is actually a um a Star Trek actor or actress but Dennis Richie using a PDP 7 built Unix out of frustration of Bell's lab's more complex uh multic operating system and it was built and it wasn't well maintained and they just said we don't want to use this junk we want something similar so they built out Unix if you've never heard of bell Labs Bell Labs is a subsidiary of AT&T and they purchased a PDP 7 machine from deck uh which Unix was built for so that is the relationship with the PDP 7 okay uh so Unix was successful because it was written in the C programming language and C allowed Unix uh to be a portable OS where where wherever C could run so could Unix but it wasn't a coincidence that it was written in C because uh Dennis Richie who worked at Bell Labs created the language C so he created the language C and then wanted to use it for Unix so that kind of just ties it all together okay so yeah that's Unix all right so something I thought would be fun is if we could start up uh Unix version one and it's really actually hard to find an emulated version even though it ran a PDP 7 people were suggesting that it was never licensed for free and so probably the only thing we could simulate would be a pdp1 and then get uh that on there but I don't want to go through that hassle I just want to experience Unix one as it was the best I can and so somebody here has created a Docker file supposedly that will allow to run um that addition so what I'm going to do is go ahead and see if that actually works so it says based on the Unix first edition June 1972 source code which is over here and apparently that's all here just on GitHub which is kind of cool but what we'll do is we'll go ahead and we'll need some kind of Docker environment now if you don't have Docker don't worry about you just watch me do this for fun but um I'm going to use G pod and G pod has Docker installed code spaces does as well so whatever thing you want to open up you could also even do this probably um on AWS if you were to spin up um a container with Docker installed or anything but anyway we'll go ahead and we'll spin this up and take a look here it's probably just the easiest way to do it so I'm going to SP up an environment we'll be back in just a moment okay all right so um I spun up uh this here and I'm going to go and all I did was click on this repo I have the git pod um uh extension installed so if you type in git pod Chrome extension you install you'll get a button here or again you have to figure out how to open yourself but the point is once you have Docker installed you just take this command as such uh which will interactively allow us to uh connect to it and it should download the image and run it and all that stuff so we'll go ahead and try this out and we'll hit enter so it's pulling the image pretty cool and so I'll just wait for this to pull and then start up okay and right away it's asking us to log in so I guess the question is how do we log in now type root at the login for the prompt so we'll go ahead and type this type in root and so now we're inside of Unix so we're literally using the first first version of 1972 Unix okay so the question is what is available here because I'm really curious what would have existed at this time if we type in LS we have LS do we have PWD so print working direct directory does not exist um would di exist nope okay so can we do we have clear nope clear is not a command which makes sense because at the time they wouldn't had visual screen so why would you need to clear anything if there's no terminal right um and then whoa we have a bunch of output here I wasn't expecting okay so oh I just wanted the output tab I think it's fine we'll go back to terminal so that doesn't exist so what commands would have existed back then let's go ask chachy PT here because I'm really curious like I I don't even know I I've never used Unix one so what commands existed for Unix one let's go ahead and ask it archive Li Library manager the assembler cat change directory L replace with CD that's kind of interesting so I'm going to type this again LS so we could say change directory and go into Temp and then LS that's kind of cool we have add the line editor we have find Ln LS we know LS we can make a directory we can move for files print files so not a whole lot I'm not sure if there's more than this but that's not a whole lot um we get the time let's go ahead and type time but notice that there is no VI there is no didn't get any time here there's no VI and there's no Vim okay so on this there is no means to actually edit files because if we wanted to create a file that would be tricky there's not even an echo is an echo let's find out Echo hello okay so that apparently does exist um so I wonder if I could pipe out a file so if we do Echo and this is the pipe we're talking about it is this symbol here that appears above your return where there's the backlash it's the shift it's the vertical line I just wonder if I can make a file saying hello.txt does this work uh maybe not LS I think it's sorry I think it's Echo oh it's mucking up here uh Echo hello oh it does not like it if I back space out oh I can't even make mistakes okay we'll try this again Echo hello this hello.txt hit enter oh did output the file we type LS um so it lists out the directories but I don't see the file anywhere is it there let's type in cat hello.txt cat hello.txt so yeah I don't know it seems pretty hard to use but at least we get an idea that it's more limited there is no VI let's type in VI here is it in here yeah there's no VI and so we'll have to worry about the next step but that's all I wanted to show you for fun okay let's talk about what is Ed so when we were looking at the Unix emulator we saw that there was a line editor called Ed and so Ed is a text editor built for the Unix operating system in 1973 um which is confusing because the Unix version we had there was 1972 so it does understand there's some leeway in terms of these dates here because they're not always very clear at least to me um from what places uh State their sources Ed was um uh the first three parts of the Unix OS in 1963 so obviously existed 10 years prior or was created in that 10e period the three parts being the assembler the editor in the Shell we saw there was an assembler there I think it was like the uh ASM command or something like that and then Ed is the editor and the shell is actually the interface that uh we were working with um we interfacing with it and so here's an example of us um uh using Ed it says Ed fstab I don't remember what fstab is if that's the file name or something else I think it yeah maybe we're editing a file called fstab that's what it is yeah and uh file system something I'm not always great with storage with Linux but anyway so Ed is a line oriented text editor and is challenging to use because you cannot visually see how you're editing your text files what do we mean you can't visually see well the thing was back then they didn't have monitors so how did they get input and output well this was via uh uh teletype machines and so teletype machines uh were basically like typewriters where you'd enter input into the typ so you type it in hit enter it would then send it to the machine and then the output would literally get printed back on the paper hence why the command is called The Print command because it literally printed on paper um and so Ed is is part of the poix and open groups standard of Unix OS so now when we talk about Unix we usually talk about as being an open group standard as opposed to the operating system itself um meaning that most or uh most versions of Unix space operating systems carry this Edition okay so we can open up any edition of Unix and it pretty much always has Ed so that's the the most Bare Bones editor that is shipped um with Unix okay but why don't we use Unix that or sorry Ed if it's with all them well it's because it's very hard to use because it wasn't designed for monitors but let's take a look at some of the commands so here's an example of us using Ed and so what we would do is we'd press a because imagine you're on a on a keyboard right or sorry like on a on a typewriter and you want to send a command in and you want it to be as efficient as possible you don't want to type out a bunch of stuff so they made like single letters indicate that you're starting a command so a uh would bring you into input mode meaning that you're already now to to append each line and so then You' press a hit enter and then the computer would know okay we're input mode and then you'd enter your uh enter in align hit enter enter it Al line hit enter enter it Al line hit enter and it would add it to your file and then when you wanted to say it was done you'd give it a period okay just like at the end of a sentence you'd have a period on a single line by itself and it would then go back into command uh command mode or normal modee whatever you want to call it so depending on the mode these Keys could change the behavior so obviously when you're input mode a does not it just acts as a regular a right so just understand that okay so now if you weren't in input mode and you were just in the normal normal or command mode and you press period it would actually get it would print out the current line okay so that's what I'm talking about where you have these modes and it changes the nature of the keys now let's say um you wanted to print all the lines well the way you do it is you'd enter in one for the first line then command line mode or command mode you give it a comma and you'd say dollar sign and dollar sign is part of a regular expression so end of end of the line and then P for print so we have one which represents the first line because it's in position one comma so that's setting a range operator dollar sign represents the last line it's a reg X thing and then P which is a lowercase p here which will print the range of stuff okay and the reason I'm showing you this is because this actually comes up later in Vim uh uh not like you don't ever have to write it in but I'm just saying like I saw it I was like oh ha that came back to Ed so this is where we're kind of seeing the history here um so now let's take a look here if you wanted to um write and quit what you would do is you'd have to type in WQ and then the name of the file and that's how you would uh save and quit while in Ed mode okay so if you've ever used Vim or V and you saw the WQ command it's coming all the way back from this tool here so there are many more commands such as line changing joining lines regx search reg regx substitution and more uh we're not going to get that much into it because this program even for me is challenging to use um but again it was much more efficient than having to uh feed paper into machines because that was the other way that they um they would get data into a computer they would like literally punch holes or they'd have um uh tape or other things to feed information in so uh obviously a typewriter was more efficient at the time okay all right so I just left this environment open of us running Unix because what would be interesting to see in Unix one is the Ed so it says here that we have Ed where is it here uh Ed right the line editor so let's give it a go so what I'm going to do is type it Ed and then we'll give it a file called um just in case hello already exists there I'm going to type in um and I'm not sure if my G pod's messing up I'm just going to refresh here because sometimes I have to refresh it it's just the nature of G pod and I'll just let the terminal reopen here yeah okay so we're back here and let's see if it acts a bit normal now go back to terminal tab oh no it's not so I'm just I'm G to just stop this um this Docker container here so on the right hand side I have it right I'm just going to stop it and come on Docker you can do it there we go I stopped I'm going to start it up again so just so we have a a fresh experience here and so I'll type in root to get into Unix one and let's go and create a new file so we're going to type in ed for Ed and we'll type in hello.txt and so now we are in the editor I do not know why it starts with a question mark okay but let's try the commands that we had over here and and see what we can experience so let's go type in a enter and I'll say this is my whoops I did not mean to go to the next line this is my second line enter this is my third line which it might not be the case I don't know there's some kind of key I must be hitting that it doesn't like I think it's the back slash you're not allowed to go back but anyway that's fine I will hit period and now I want to see my current line which shows a question mark so that's not very useful um so I'm going to type in WQ or just going to type in Q sorry q and see if I can quit so I've actually just quit we'll try try this again so we'll type in Ed hello.txt and this time I'm not going to hit backspace this thing does not like me backspacing out whatsoever I'm going to quit again hold on here quit there we go so I make no mistakes Ed space hello.txt enter we'll type in a I'll just say this space is the first line period I'm not used to not making any mistakes and then we have this is the second can't fix it can't fix it Line This is the fourth line all right and type in Period okay so now we should be back in a command mode we just have to remember that right I'm going to press period and show it shows us the fourth line so now let's print out all the lines I'm going to put one comma and let's do two first and then do p to print it so it prints the first and second line we'll do one comma dollar sign P hit enter and that is the fourth line we type in WQ space hello.txt enter and I'm not again not sure why we have a question mark here we'll type in Q did it save the file I'm going to type in cat hello.txt cat hello.txt LS and uh I don't know maybe we can't save the file in that directory I don't know but that is kind of the experience of it so I mean hey we kind of made it work but let's go take a look at it now in Ubuntu so I'm going to go and just stop uh this container and we can do this here in uh in in um giod but I'm actually just going to go into like anist account or something you can spin up whatever you want I'm just on windows so I can't show my local machine but if you're on a Mac you can just open up your terminal and do this but I'm just going to log into here just give me a moment all right so I'm in my ad's account you could use Google you can use um Azure doesn't matter as long as you know how to launch an ec2 instant or sorry a virtual machine and I'm just going to use the buntu as the Baseline here so I'm going to go here and say um launch an instance so we'll go ahead and do that and I'm going to say my web server and you'll have to know how to get into your machine so if you've never done that before you know you know use something that you're familiar with launch some kind of auntu system that you know how to utilize and so I'm going to go to auntu and I'm going to choose a T3 micro here didn't think we'd be doing any Cloud did you and we'll uh you can choose a key pair I don't like launching this with a key pair what I like to do is I like to launch this with an IM profile and I have one called uh ec2 SSM roll all this Ro does is allow me to use sessions manager so if I go into rolles here okay and we go over to rolls SSM roll and I go into the actual permissions here which is I all I'm doing is adding this one here this one doesn't need to be this one I think I added that for some tutorial but all we need is the Amazon SSN manage inance core so if you want to create this Ro yourself you just go create rooll say ec2 I'm not going to fully created but I can just show you some of the steps and we say uh core manage instance you go name it save it right you come back over to here to your launch instance you'd refresh and you'd select that rule that's all that thing is doing so I'm going to go down below to the ground I'm going to launch this instance and I'll just launch let it launch in the the default uh place I do not want it with the key pair I'll go launch that and we'll just wait here a moment okay and just to be fair if we end up having to utilize some kind of other uh computer I'll use something other than AWS just to show you that I don't always just use AWS okay and actually to monitor this I'm just going to click through so I don't have to like guess when it's ready so all I'm waiting for is these two status checks to pass it doesn't take too long so we'll just wait for that okay all right so I waited a few minutes here I'm going to refresh and the status checks are passed so I'm going to checkbox this and then I have a connect button this allows us to use sessions manager without that roll you're not going to be able to get in here and uh so we'll go ahead and launch this up okay and so um the default user with this if I type in who am I it says that I'm the SSM user we could probably use that one but it's not proper to do so I'm just going to increase the font here a bit so you can see what's going on I'm going to type in uh suyen ec2 user it just switches me to the or sudo Su hyen ec2 User it's going to switch me to the ec2 user oh right this one doesn't actually have um a user called dc2 it's called Ubuntu so I'll say Pudo Su Ubuntu forgot we're using Ubuntu and so I'll type in who am I now I am the um Ubuntu user tells me the name here and this and you can see there's nice styling so that's good so let's take a look and see if Ed is installed so I'm going to type in Ed hello.txt hit enter it says there's no such file directory so there's no file there we can't open it so we'll type in Ed and so now we have a new file I'm going to type in a hit enter I say hello world and I can actually go back now so it's actually acting normally now hello world goodbye Moon okay goodbye Moon and we'll give it a period here so much smoother experience we'll give it a period here we'll say one comma dollar sign P not too bad and we'll type in WQ hello.txt and it says 27 I imagine that might stand for the amount of characters that are in there and so I'll type in cat to print out the file and there it is so clearly we have a baseline editor that we can utilize so that is whatever and that's all I really wanted to show you is that it basically is everywhere so we'll go ahead and terminate this but again it's not the easiest thing to use so I go over my instances and we'll go ahead and terminate this instance and that rle you don't need to delete because you'll probably use it again it's a very useful role to have I'll see you in the next one okay ciaoo what is X well it stands for extended and it's the Align oriented text editor created in 1976 for units that improved upon the feature set of uh Ed so X supported additional functionality such as more extensive commands history and undo uh so only one level of undo multibuffer support and visual mode and that is the big thing that we'll talk about here but it wasn't that it came initially with it there's a bit of a story there but I want to talk about 1976 so imagine that uh what was it they said Unix was developed what in 1969 so then a few years later it's getting distributed out to schools with the source code um and then people are experiencing it and making their own improvements to Unix um and the community is sharing everything so there's a a threee gap three to four year Gap where people have an opportunity to do developments and I think at this time they end up getting a visual a visual monitor so George keris who was at a school in the UK developed a better version of Ed called M that could take advantage of video display while kis was visiting Berkeley uh I believe that's I don't know where that is I don't know if that's in the US or or the UK sorry I'm in Canada I don't know sounds like a a US school he presented his program to Billy Joel not the singer but whoever was there at uh I assume a programmer or teacher or something would go on to modify to be less demanding and then uh the editor was to be included in the Berkeley software distribution so I think the time Berkeley wanted to uh extensions or improvements to uh Unix and they called it BSD uh my first operating system I ever used was called free BSD so I know BSD pretty well but I imagine that ceris went over to Berkeley because he wanted to get his software included into this distribution um and so that distribution came out in 1.1 and obviously Billy Joel had made improvements for for that to come through so here's an example of the Ed syntax that we saw previously that we tried in the last video and now this is what the X syntax looks like so it's similar but there are some key differences the first thing you'll notice is that there's this colon and this character in The X editor is used to indicate that the user is entering a command in the command mode why did do that I don't know but um I mean it definitely makes it more distinctive from the last one um and then there was a new mode coded in by Billy which allowed users to see their document while they entered commands uh and the command was called colon V VI which stood for visual mode so you got to imagine they had V video displays and this whole entering things line by line was getting tiresome so this is where um VI starts to come into play so let's take a look at this visual mode and an ex in the next video okay hey this is Andrew Brown in this video what I'm going to do is go ahead and uh launch up FreeBSD because that's based off a so it should have EX in it I'm going use Google this time even though it's a big pain to use Google for this and so I just looked up I just said um uh FreeBSD G uh gcp or Google if I go down below here they appear to have a command uh I tried this in the last video didn't work but I think maybe uh it might work this time if uh I use a later version so that's what I'm going to try here I'll create a new project just so we don't have a big mess here I'll just call this um my FreeBSD if it lets me make a new org or sorry project sometimes these are used up so I'm not allowed to do that so I'm going to create a new project and then we'll get going here so just I'll give a moment for this project to create okay uh and is it already done sometimes as fast sometimes as slow so now we are in our new project so what I'm going to want to do here now we could open up uh we could create a new VM this way but we will have to enable the service so I'm just clicking that and enabling the computer engine API so just give that a moment uh to work its magic okay and so this sometimes takes a bit of time so I'll be back here in a moment okay all right so it looks like um that's enabled and notice that we have our option here now if we were to go down to our options and change you notice they don't have uh free BSC here why they do not I do not have any idea why but that's okay because we'll go ahead and use the cloud shell so I'm going to click Cloud shell here this is going to open up the terminal this takes a little bit of time and so the idea is that we can just enter in this command here which is I'm going to just bring this on to another screen so I can I can clearly type it and so this is going to be gcloud um compute instances create I'll just call this my FreeBSD and then we want our image so this one's going to be free BSD 13 hyphen 3 release a hyphen AMD 64 and we'll say image hyphen project equals free BSD org Cloud Dev now I don't know what size of image this is going to launch up but I imagine it's probably nothing super big that for the time we're going to have it if you're not comfortable just blindly launching with the default settings you can just watch and confirm that I got it right and then go back to this video because I'm not going to um confirm here but I'll go ahead here and just hit enter I think I have everything typed in correctly and it says do you mean UA Central because I didn't specify Zone we'll say yeah just launch it wherever it wants to launch it it and so we'll go ahead and do that and so we'll let it create okay I mean while it's waiting we can navigate over here and see if it's spinning up it's not going to hurt it so I'm just going to keep clicking back here and I'm just going to stay in this UI because if you make a new tab it'll act weird I'll go to VM instances here and so it's spinning up I'm not getting any warning last time I did this I I pulled an older version and so that is spinning up uh so again we're just waiting for this to uh start so that will take a bit of time what we could do here is check our firewall rules while we're waiting here because we should need to have um the port 22 open and the way gcp works is everything's kind of like Global which is kind of annoying but if we go here we can see we have Ingress T TCP 22 is already open here okay so it looks like we already have SSH open so we're not really wor worried about whether that's going to work so I'm just going to go back over to our computer engine here and again I'm just going to wait for this to provision all right actually while we're waiting I just wanted to see what size this is launching because I kind of wanted to tell you whether uh this is big or not and so this one is what what is it uh what size machine type N1 standard one so I don't know if that is a small one and one standard one one vcpu there are smaller ones like 25 so it's definitely not uh super small but it's nothing that I'm worried about yeah we could just ask chat gbt how much does a gcp cost per month in US Dollars i al get rid of this I'm not even using that and I'm not using this and it says $34 a month yeah so not the most efficient for spend again I don't plan to keep this up for long but looks like it is now running so we're in good shape um could we log in by going over to here so inst stopped it isn't stopped we'll refresh here there we go and so I want to utilize this via the gcloud command so we'll go ahead and type this in and so this is the command it's suggesting for us to log in we'll copy this I'm going to go down I'll just run into the shell which is really nice we'll go ahead and enter and hopefully we can SSH this way so normally what it would do is it would generate an SSH key because we probably wouldn't have one and hopefully that just works and it's refusing from the host so I'm not exactly sure as to why but maybe we do need to open up Port 22 but it said that it was available so let me go figure that out okay there's a few suggestions here I don't know why I'm having such a hard time with connecting but uh we can use telet to check if the port is open because FreeBSD might need the port open itself so people were suggesting to add metadata and say Port enabled uh I'm not really sure if that would do anything I'll I'll try it for fun see if that does anything I don't think that's going to do anything but I'll I'll do it anyway so let's say my free BSD say yes if that works that'd be really nice and we'll try this no that's fine okay so if we can't get through Cloud shell which is fine we'll go ahead and say open in the browser and maybe it'll just show up here okay not the nicest way to do it but I just want it to work so give that a go and I mean essentially this is what um the other one's doing so allow say authorize okay and so we're doing gcloud it was trying to bring them over and stuff like that but if it works this way that I don't care FreeBSD is kind of a weird image so I don't really expect uh the gcloud to just work like first try but if this works I'll be happy all right so it says VM has a firewall rule that allows TCP Ingress from I uh this range so maybe that's our problem I'm going to bring this on over here I I thought that everything was fine but I'm the worst at firewall rules with gcp so I just feel like it's my fault here and so I'm going to go over to firewall here and if we go down below it doesn't specify specifically an IP range this is VPC firewall rules the like groups okay uh all right so what I'm going to do is I'm going to create a new firewall rule not a policy but a rule we'll just say uh SSH for um uh FreeBSD and then we'll go down below network is fine party that might matter Ingress that's what we care about specify specific targets um I mean we can just say all instances in an account and then that would be sufficient I hate Target tags because I never know what to do for Target tags I'll just say all all instances in the network ipv4 range um which is what it has and then what I'll do is supply from this little box here I'm going to supply that value because that's what it's saying to do is to do this I'm surprised it's not like just uh 24 which would be the the very or 32 or whatever the very specific value is um to specify uh just that single one but this is clearly a larger range um I don't think that matters the filters don't matter and then we're going to say allow on Port 22 okay so that's what we'll do we'll create that rule and hopefully that's our problem all right so I'm going to just wait a couple minutes I don't feel like it's instantaneous I'm going to just hit this retry button and see if that fixes our issue okay all right so I think I've waited long enough I'm going to go ahead and try this again hit retry and see if that was our issue and the priority matters as well but I think um because it seems like it orders it based on this so I'm thinking that this is going to take a a better priority here and I've lost that screen just let me give me a second to get it back here it is here we'll see authoriz and hopefully that was our issue ah there we go okay so we probably could get in with g CL now if we went back and tried that um I kind of prefer that as our means to get in I'm going to go back over to here and open up the shell and if we go back over to cute engine uh virtual machines I wonder if it's still here if I hit up it is okay great so I'm going to just hit that and see if I can get in this way and so now I'm in the uh the virtual or BSD so we're in BSD here type in who am I I just like to do that every time I'm in a system to know I am so I'm Andrew name me it name me oh no am I even in here let me take a look here welcome to FreeBSD am I in FreeBSD yeah I am okay so created a user for me called Andrew just I'm just not trying to get mixed up with the cloud shell environment and so the whole point that we wanted to do was to use ex right or X so we type in ex we're now an ex so let's use it as if we did before so what I'm going to do is type in a oh hold on right so it has a coal in there so I think right now in command line mode and the a is always there so it's kind of telling us that we're in command line mode which is a better indicator of what's going on so a I'll say this is line one this is line two this is line three you get the idea and we'll press in Period okay and so now the question is um well hold on let's just try to print something so say uh one comma dollar sign P does that still work it does and let's try out this VI mode and so now in VI mode and this looks like um VI all right so if you've ever used this it might be really confusing um but before you touch into the keyboard let me just tell you that you can get back to commands by typing colon so if I type in Colon here notes down below it appears down here which is like a like a small command line and I can hit Q all right and so it's saying we've modify the file since last time so I'm do colon Q exclamation mark to get out of it completely ex exits me out so I'm going to go ahead and try this again type in E ex I'm going to see if there's anything there there shouldn't be anything there because we uh didn't save the file right this is the second address smaller than the first because there's no data in there so we'll hit a this is a line this is a second line we'll type in period we'll type in VI and so now we're in V mode so I'll tell you a few commands that we can do so like if we hit I think it's K we'll go up J will go down K will go up J will go down I will go to insert mode even though nothing changed we are now in insert mode and if I type in hello nois typing space hit escape to go back to normal mode escape and I'm going to type in Colon look down below see the colon Q exclamation mark all right so hopefully that is clear um but yeah that adds the vi the vi mode and so obviously people would definitely prefer to just start in VI mode and so this is the like one step to getting to VI okay um so I'm satisfied with this what I want to do is go ahead and shut down this instance I'm going to go here to VMS I'm going to go ahead and delete it we'll say delete and that is good and so we'll just let that go ahead and delete and I'll see you in the next one okay ciao hey this is Andrew Brown and we are taking a look at VI so VI is a text editor built for the Unix operating system and when BSD 2.0 was released so we talked about BSD 1.1 shipping with ex or X um when it came about to version 2.0 X was renamed to VI after the command uh that changes it to visual mode that's what v stands for uh there was no longer a visual mode as this was now just the default or normal mode because why would you want to be in a line oriented way when everybody has monitors now um and one thing I want to point out um uh that's important about VI is understanding what the keyboards looked at the time so at the time the common layout was the ADM 3A so this is an ADM 3A terminal with a keyboard on it but if there was even other keyboards they would follow the same uh pattern and so the keyboard had an Escape key to the left of your que so if you look at your keyboard now if you're on an English keyboard your Escape is in the top top corner but here it's where the Tab Key would be and this is really important because the Escape key is used to go back to normal mode which is something you do a lot so it's not in the most convenient area now uh but at one point it um you know it was somewhere nice somewhere nicer right beside the q key so VI the time was not considered a lightweight small portable editor uh because it could barely fit into memory on a pdp1 or or PDP 7 so history remembers this as a very Advanced robust but very heavy editor but of course over time things became more efficient the program stayed the same size and so it's looked at a different way now uh remember Billy Joel our singer who's not a real singer he actually went on to uh be a cofounder of sun micr systems and Sun Microsystems is a u they produce their own computers and Os and well maybe not their computer yeah I guess they produce their computers themselves as well um and they were amazing machines that got bought out by um Oracle and that's why uh some Microsystems doesn't exist anymore but anyway uh let's go take a look at VI now okay hey everyone it's Andrew Brown and we are in Microsoft Azure I'm going all across the cloud here again if you do not utilize all the clouds use the ones you're familiar with or if you just can't really follow along just watch and experience it because we're not really at the point of using Vim I'm just trying to uh show you that these things exist and add additional uh knowledge here as we go go along um but anyway let's go ahead and launch a new virtual machine so I'm in Azure I'm going type in virtual machine here at the top and basically Vis on everything so we'll go ahead and create a new virtual machine here we'll give it a moment here to yeah I did I did press it and I'm just going to go ahead and say new create a new Resource Group this be my uh VI group and this will just be my VI uh VM I don't care where it's created the Zone's fine that's fine I want to buntu so that seems good um I want this to be cheap not like how we did gcp but um if we look on the left hand side we can see the B1 is $759 we're not going to keep these up for long so it doesn't really matter x64 arm anytime we can choose arm I like to choose arm it says the image is not compatible with it oh fine I'll just switch it back to x uh x 64 I guess it's because this is not the arm one where's the arm one so let's switch to arm here hold on a second up here maybe arm 64 oh the security type okay that's fine um well where's the security type right here standard okay yeah we're fine with that I don't need a TPM for this well I just want to use Arm because it's more efficient and we will can I not choose that okay I guess it's too complicated so we'll go back to TPM we'll go back to x64 we'll go back to uh this one we have 20 22 it doesn't matter we'll choose 2022 the latest that is out right now we have SSH public key or password um if I don't have to I'd rather just do a password they're not like the most safe but I'm going to do that here today so I'm going to make this uh we'll call it Billy Joel because that's the creator of of VI and the password is going to be capital T testing 1 2 3 4 5 6 exclamation mark capital T testing 1 2 3 4 5 capital T testing 1 2 3 4 5 6 exclamation mark okay so that is what we have it set as um um we do want estation there so that is good we'll go ahead and hit review and create and so it's Billy Joel is the username and the password is testing capital T testing 1 2 3 4 5 6 so let's just make sure we remember that we'll go down below hit create and so we're going to wait now uh for this to revision so I'll see you back here when this is already normally you'll have another step after this I'm just going to wait a little bit there we go and so we're going to wait for this deployment to finish okay all right so let's go Ahad ahead and go to that resource now it says it's deployment is complete so I'm assuming that it's probably in a running state it says it's running and so what I want to do is establish a connection we can go here can we do it right in the browser using the Azure CLI local machine local machine I don't like that let's open up the uh shell here and at least it shows us the IP address here I don't want to start in po shell mode Let's switch over to batch I guess we have to wait for it to launch whenever the terminal decides to start give it a moment to get started here there we go and I'm going to switch over to bash well hold on I wonder if it gives us the command here so if I select this would it just show us the Azure SEI command uh yeah it's not showing us uh well let's see if it works here I'm I'm just going to say in power shell oh I think we can use power shell okay we'll say SSH BM hyen hyen IP probably just copy the command here we're getting a lot better of just giving us the stuff that we want want I'm going to go just paste this in here it'll hit enter see if that works it will say yes and it thinks us we Andrew which is not what the user is but the password is capital T testing 1 2 3 4 56 exclamation mark and so that's probably not going to work exactly so I wonder with uh as SSH change username how do we specify the username name that's the name of the machine okay we'll try that so we'll hit up again and I'll just say uh local name or local user this will be Billy Joel and we'll try this again capital T testing 1 2 3 3 4 5 six exclamation mark and now we're in okay great so now that we're in here um let's just take a look around so I'm just going to go just to make this whoops this thing is a finicky make this bigger here and I'm going to type in LS PWD okay so uh if we type in V now we will now be entered into VI notice it's it's actually not launching VI it's launching Vim because I can see that says uh very improved and so what's happening here is that um some or most of uh most unixes out there or linuxes out there will actually install them and then link to the latest version of VI because it's a better version so this is not really a good example to see VI because we'll have all the improvements here so I'm going to do is close this out but that does show you that uh that case where that will happen and so I'm going to go back over to our virtual machines and maybe there's something else that we can launch launch up that does that actually launches up VI cuz right away I knew that it wasn't VI when it said very improved uh Vim because it won't say that when you you launch it up so I'm going to go ahead here and just um delete this resource say delete actually that's not going to be good enough we'll actually click into the virtual machine and I want to go to its Resource Group here and then I want to delete the resource Group because that will tear down all the resources in the resource Group and enter the name of the resource Group which is here delete and I'm going to try this again so we we'll launch it with another one we might still end up with the same problem but at least we're trying to see if we can get something else so we're going to go ahead and create a new virtual machine I'm going to make a new resource say my V2 group and instead of launching a bun to we'll choose something something else so I'm trying to think of something that would not have that so we'll go to se all images here and here's a question is like does Debian ship with VI or Vim okay which OS LX OS ships with v instead of Vim Arch okay can we use Arch never even used arch before what is Arch Arch Linux is that like a micro one oh you know what I actually have used this I think this is a lightweight one okay great so what we'll do is we'll say add uh AR Arch Linux and we'll go ahead and say we'll choose gen one I don't really care if it's gen one or gen two if it's gen one we just have to choose standard there difference is I think gen two have uh TPM so they can't be tampered with we'll say Arch uh Vim or VI example I don't care what it's called we'll go down below here it's x86 uh we want to choose the cheapest one which I don't think is that one I think it is oh it is b1s yeah b1s are the cheapest still seems is really expensive I feel like there's a cheaper one than that whoever tells me the prices here there was I thought there was like one for $7 let's just sort it by cost this one's the cheapest all right we'll do that one and I'll do password again this will be again Billy Joel the creator of VI we'll hit review create and we'll go ahead and create this and we'll just wait again and try to establish that connection okay so you know the routine here we'll be back here in just a moment all right so it says that's Deployable go to that resource and uh it says it's not ready yet so maybe we should just give it a little bit of time sometimes there's a bit of delay so I'm just going to wait a couple minutes before we do anything we'll give this a refresh it's not ready yet even though it says it's running so I'm again I'm just going to wait a little bit a few minutes I'll be back in just a second all right I'm back I had lunch so this should definitely be ready now and it still says machine agent status is not ready troubleshoot the issue so maybe because it's Arch it doesn't tell us the usual thing here so I'm just going to ignore that status there go ahead and go to connect we're going to go to the Azure CLI here I'm going to also open up um uh the shell here and we'll do what I did before where we're looking for the information for the Azure CLI to connect um where to connect connect from your local machine I'm not sure what this wants here okay we'll still click that I guess entra ID login extension did I want all that stuff I don't think I really wanted all that we'll just go back to this here this is really what I want maybe don't press that button I don't think it's going to hurt anything but I pressed it too late so what we'll do is go ahead and type in AZ actually I'll just copy the line it's a bit easier that way and then we'll let it paste in super slowly we'll go ahead and hit enter and uh that's not going to work because we need to go ahead and say local name or local user Billy Joel enter and we'll say yes to accept the fingerprint it will be capital T testing 1 2 3 4 5 6 exclamation mark and we are now in so there we go we'll just expand this so I'll just type in clear to clear this out let's go ahead and type in VI and it's saying the vi command is not found so Arch is supposed to have VI okay why is it not here we'll say so we'll say where is VI where is vim doesn't have it but that's totally fine we can install Arch install VI how do we install VI on this so I'm looking the for the installation instructions install the vi package okay but okay what's the package manager for Arch I don't know what it's called PacMan is that is that the name of the uh one okay I'll I guess I'll try this we'll say PacMan install single package say hyphen s this is off screen so you don't see what I'm doing we'll go ahead and hit V unless you are the root user little type in pseudo will that help we'll say yes but look how small it is it's like super super small hopefully it's installing Vim or VI and not Vim we'll just say uh invalid or corrupted sure we'll delete it I'm not sure what's going on here no package no errors occurred no package upgrade let's try this again we'll say Yes again um no I'm not going to delete it I just want to install it what is going on here so I'm going to copy this ER here why can't I install so we'll try to update the keys again I'm not sure how this works but I'll just try it till we get something to works not sure what that does ignore that link does not apply anything uh thanks for answering says this we need to repport the arch Keys why should I have to redo anything is this thing done doesn't seem to be doing anything so I'm going to do control C here let's try this again we'll try uh buy we'll try to install it again yes keep saying it's corrupted yeah how do you get this installed give me a second okay all right someone's solution here is like I did again we're going blind here PacMan key init Pacman key populate so we'll try those two and see what happens we'll say PacMan which is the package manager somebody's trying to be clever here with their silly named package manager we'll go ahead andit enter needs to be root sure we'll do root pseudo PacMan key andit and then we'll try populate again this is not the one I ever use but sometimes you got to just get things working and now let's go ahead and try this again I'll say yes uh yeah still doesn't work and people are suggesting that those two keys have to be ran if we want to populate anything so yeah I'm not sure what else to do here there's another link here that's like do this stuff okay so let's try that then so it says PacMan hyphen s y hyphen needed Arch Arch Linux key ring at sign at sign Pacman hyphen Su again if you don't want to do this you could just watch but I like I want to get it to work because I want to get to the original VI and we'll say yes so now I think what it's doing I guess it's getting the latest key ring something about key Rings or something like that I don't know I usually don't like using um a lightweight uh lightweight um L distributions they just always just seem to be quite the headache they never seem to work exactly how I'd like them to work but anyway I'll just wait for this to finish that was pretty quick okay great so now you cannot perform this operation unless you're a root maybe what it means is that I have to type pseudo here as well so I think this is the issue here we'll go ahead and do this one second uh I don't know I don't care one we let it go with the default yes just install all the other stuff yeah other lightweight lightweight uh Linux distros just try to think if there's any other ones that I know about no I think Arch is the one I guess I just kind of forgot I forgot it but every time I think that I've used Arch it's always been the biggest headache and I've never liked it but if we can just show off VI that'll be great so I'll just wait for this to finish and again just watch I'm just going to show you what VI looks like so we can distinguish it from Vim we're not we're not here to really get into the commands yet okay all right so I took a little bit of time but it's now uh complete so what I want to do here is I guess try to see if I can install violet see if we can install it and so we'll say yes and there we installed it finally there we go okay having some patience is a good thing to have let's go ahead and type in VI and notice it does not say improved Vim it literally looks like ex uh like we saw before so if I hit I to go into insert mode and by the way I was trying to find a piece of software that would show the commands I was typing I could not find one to say my life but anyway so I'll type in testing and now I'm still in insert mod and hit Escape get out of it and now notice my cursor is hovering over the character that's a key difference from ex where you couldn't really tell where the cursor was if I hit H I go left if I hit L I go right H I go left L I go right let's do uh shift uh or I mean just make a colon down below here so we can get out of here I'm going to type in Q xation Mark that's all I wanted to show you okay so but for the most part it seems like we're being forced to use Vim but not always sometimes you're just using uh sometimes you're just using VI right okay um so just be aware of that because the feature set's going to be different so let's go ahead and uh shut down this so the the easiest way to get rid of stuff in in Azure is to go to the resource groups go over the resource Group here and I'll delete the resource Group because when you launch a a an instance it actually Provisions a bunch of stuff and the only way to get rid of all that stuff is to do this if you don't do that it might not tear down this other stuff so we'll go ahead and delete that that is deleting I will see you in the next one okay ciao all right let's take a look here at Vim which stands for Vi improved it was written by Bram mullinar in 1991 and it's a clone ofi so that means it doesn't use the original source code um but it greatly improves on the functionality of VI improved features are things like syntax highlighting plugin support multilevel undos multiple new modes with a new Mode called visual mode which has nothing to do with x's visual mode it's just using the same name enhance search and replace split windows and tabs command line history Auto completion and more so there's a lot of stuff going on here with the increase of RAM and storage RM is now considered very small and portable and can be easily installed anywhere uh c and a terminal can be found I believe that it's still written in C uh many Unix distributions may ship with vim and even Alias VI over to Vim as we saw in our last lab uh so you might be using Vim instead so just pay attention there because that will affect your feature set that you can use V might also be set as the default editor in the OS um and sometimes you're prompt prompted to that and that's what throws people off and that's where that Meme comes from with the how to exit Vim Vim has a builtin tutorial for beginners called Vim tutor which is usually installed along Vim but is separate executable and can be run with a a shell so that's something that is interesting if you ever need help in Vim you can use the help command all right so yeah we're now going to start learning about Vim okay all right so in this video what I want to do is show you um how you would how you could use Vim so we're not going to focus on installation right now I just want to show you the the Vim Tor and the help command that's all I want to do so I already have have WSL installed on Windows here if you're on a Mac you don't have to do this you just open up your terminal and you can install uh Vim probably uh using Brew tools but anyway I just want to show you I'm just going to close this out here I just want to show you what it looks like we have Vim so I don't know if I have Vim installed here I apparently I do already and if I want to I could type in vimtutor okay you're just watching and it's going I'm going to go ahead and hit enter and we are now in vimtutor so vimtutor is supposed to be a tutorial that you can go through I don't personally like it because you have to do a lot of reading but the idea is that you read through this and it tells you how it works right so it's telling you the the movement Keys is hjkl so I can do J to go down L to go to the left or right H to go there K to go back up and the idea is that you just keep reading through it and you'll learn Vim um but I'm going to go ahead and exit out this and do uh uh Co and Q and what I want to do is just open up Vim I'm just going to make a I'm just going to open up with no file here and I just want to do colon help and just show you that it opens up help and then the thing is in order to move around the help file you have to know Vim command so you need to know the move Keys again here right and so the idea here is that you can read about how Vim works all right it gets into detail and actually for the content of this course I was going through this and and referencing the docs here so this was very useful for me I do col and Q and exit out of that okay so the way I want to use Vim with you is that um I want to get it installed using a visual editor and so I'm just going to wait till we get to that slide and then we'll talk about it okay or well I mean we'll do it for real all right ciao hey this is Andre Brown and we are taking a look at Vim version so it's important to understand that uh these features have been added over time so when I listed all those features previously himm they weren't there on day one okay so uh version one came out 1991 and it had those many improved features uh what they were I do not know but it's just apparently an improvement over the original one then version two which came a year later added multilevel undo and the ability to edit file simultaneously it had better support for different terminal types I'm not sure why there's an A on the end there I think that's just a mistake on my part so just ignore that this is not here then uh another year later it supported horizontal split windows which I love having that ability then it introduced gvm allowing Windows users to use um Vim okay and I'm actually on a Windows machine I I use a Mac generally but uh it's not easy to hook it up so um that's why I'm not recording from one here so I'll be showing G Vim um as our way of using Vim on Windows then we have Vim 4.0 this had improved syntax highlighting Advanced support for different file types and programming languages we have support uh using Vim script and enhance enhancements to gvm for version 6.0 we're now 2001 so we're past Y2K here it added folding vertical splitting improve syntax highlighting and better intern internationalization then we have Vim 7.0 which came out in 2006 this says spellchecking multilevel undo branches tab Pages improve performance with larger files we have Vim 8 which included a new package system we're going to talk about neovim and why maybe Vim 8.0 introduced a new packaging system and it has async processing and then uh Vim 9.0 again maybe because of neovim uh created Vim 9 script which is a more improved uh syntax over Vim script improved performance enhance UI um so there you go all right so let's take a look here and um uh look at the Vim version that's all I want to do here so I think we typed this we might see the version does not tell me there we's do hyphen v um maybe it just means hyphen V there oh actually opens it up but right away it tells you the version is 8.1 you can see Bram is the one that wrote it but I prefer to do this here so that it doesn't completely open and you can see it's using 8.1 so I'm not even using the latest one but for the most part um most Vim versions that are installed on servers are good enough if you're not installing an extension so if you're just doing devops you're going into a Linux environment you you'll never care about what the version is but uh when it comes to actual development you'll care more about the specific version okay all right let's first take a look at Mac Vim just because um I'm not showing how to use Mac Vim in this video but it's pretty straightforward you go here you download it you install it um it'll also have a uh binaries that you'll have to copy to your specific um uh directory so that you can either type in MVM or if you want to just double click the application and launch it so this one is pretty straightforward while doing G Vim here today so we'll go over to G vim and we have um different versions so we can see yeah it's it's telling you to go to macf here and for un Unix it says there's something going on here I'm not exactly sure what but we're going to use GM all right um so we'll go ahead and install GM I'm just looking for what the difference why there's this many I'm going to go with the installer because I find installers are easier on Windows and we'll go ahead and give that a go okay and I'm going to go ahead and open that up and I'm just double clicking the installation I'm just doing that off screen and so my question is like I'm not installing uh Linux on this system I have WSL which we don't cover in this uh video but um I'm going to go ahead and install it and so say let's install uh Vim 9.1 which sounds great to me that's the latest version right now we'll go next and we have a bunch of stuff here so we have create uh create bat files I'm not sure what that is vim uh bat files for Vim variants in Windows directory for commandline use I don't think I care about that everything else looks fine uh console version of Vim okay so maybe we can use it in command prompt that sounds good we'll hit next so here it says V Vim Behavior Vim with enhancements so we have VI compatible Vim original Vim with some enhancements or Vim with enhancements all of them so it seems like what it's doing is modifying the vimrc file so we don't even have to configure that maybe remap a few keys for Windows contrl v contrl c contrl a contrl srlf i don't know if I want to do that so I'll just leave it alone for now we have behavior of right and left windows uh I'll leave it alone again we'll go ahead and hit next we'll install it and so that should install it okay give it a moment all right so show read me after installation's finished uh I don't really care about that and so now it should be installed so supposedly we can launch it from the command line which would be interesting but I just want to open up uh the program so somewhere on my computer if I just type in the start key if we go there right actually that's the first thing I see I'll just show you here look we will see uh Vim right so there it is there's the G Vim example I'm going to drag this off the screen but there was two there was vim and G Vim I'm going to click on G Vim because I'm going to assume Vim is just in their terminal and G Vim is the other one and here we go so we actually have Vim a little bit ugly but that's okay I dragged it out and it already mucked up the settings but the nice thing is that we now have these options so we can work with it and yes I realized it's ugly but we'll figure that out as we go here uh if we go actually here maybe we just change the color scheme we'll just say desert and that's probably editing the vimrc file underneath or the gvm g g vimrc file which we'll cover in a separate video but if I think we could go here we might be able to look at those settings somewhere here so global settings I'm not exactly sure where those files are but anyway the point is we can now work with with Vim so yeah there you go I just wanted to get this installed and ready and then in the other videos we'll uh look at what we can do with it okay ciao hey this is angre brown we're taking a look at Vim script um I don't know what Vim 9 looks like but I am very familiar with Vim script it's not very important that we learn that much about Vim script because it gets kind of complicated but we will have to kind of get some exposure when we change our configuration files but vimscript is a scripting language that is used to write Vim configuration files plugins and inputs in the command mode a vimscript is considered challenging to learn for beginners to understand and write which is why people have shied away from uh fully using fully configuring Vim but again I'm going to tell you that there is uh Vim script 9 which is supposedly nicer to use which I don't know how to use I just want you to know that it has its own language um it has functions it has variables it has Loops um I don't think it's that hard but it is not the nicest thing to work working okay all right let's talk about Vim configuration files so Vim has two configuration files uh on Linux they're stored in the home directory on Windows I don't know and I'm on a Windows machine so that's kind of problematic but there's two files we have the vmrc which is for configuring vim and the G vimrc I always thought it stood for Global but it's actually the graphical version of Vim uh but it's always worked for me because I use macvim so I guess that's just lucky and here's an example of the vmrc file and so I'm just going to get my pen tool out here but notice that we are setting um the color scheme here we in GM we we directly just select it and changed it but the idea is that you normally would change the underlying file if you're on Mac Vim I think you have to modify the VR VR uh VR uh Vim RC file which is in your home directory notice we are setting uh configurations here so I don't I don't think that's variables this CU let is a variable so set is a function and we're saying set this stuff of um of Vim here and uh we have some remappings of keys and other things like that okay um and so then this is a a g Vim example which would work for Mac Vim as well and we are setting things but these are specific to the guey right um so yeah hopefully that is clear um and configuration files are written in Vim script so mostly we're just calling functions here so it doesn't look like functions and stuff like that because we're just calling functions as opposed to writing functions and Loops but it is script all right so I'm back in Visual Studio code um where I actually have WSL install which is a pain to install on Windows which I'm not covering in this uh in this course whatsoever if you're wondering what this project is this is actually how I stitched together um large courses so this one here was the um solution architect associate which was a giant 50 hour course but I'm just going to drag this up here so we have a little bit of room and um what I want to do is just configure the the um uh the vimrc file right so that vimrc file would be in your home directory and this is applicable to Linux and um Mac so if you're a Mac open up your terminal and you will find the file in the same place so I don't need to se in here but I'm just going to say cat and I'm going to do um the Tilda which is above your tab key slash. vmrc and this file might not even exist but this is where you would configure Vim so how would we set this Vim file Well we'd use them to configure our configuration file which is kind of funny so what I'm going to do here is see if we can change the color scheme I don't know if this command color scheme will work I thought it was a different command but I keep seeing that so I'm just curious if it will work uh so what we'll do is type in Vim uh the Tilda for. vimrc you're going have to listen very carefully before I hit enter here because it's very easy to get stuck in Vim so we'll go ahead and hit enter and so we're in here and so right now we are just in normal mode so what I want to do is enter into insert mode so I hit I no step down below it says insert okay don't touch your keyboard because it'll mess things up so now we just type like normally so we're going to type in color scheme desert and that's all I want to do so I'm going to hit Escape we're now back out out now into normal noral mode I'm going to do colon to bring in a command write and then quit okay and so now what I want to do is open that file again and I want to see if any of my my stuff has changed and notice that the color this thing is a different color so that's telling me that this is probably working so we've just set a thing in our file here so I'm do colon WQ so now where is this in GM I have no idea but like on on a Mac if you want to change it you just open up GM okay and you could probably even write if you copied in the right place you could do MIM to open it up if you copied over the binary but we'll go over here we'll see if we can change or figure out where it is in here because I have no idea um I don't know where it would be let me go find out okay it says that it lives in our home directory on Windows that's where it says that it is okay so let see if that's actually true or not so what I'm going to do here is I'm going to go find my home directory so that would be the C drive users sorry users Andrew so it's suggesting that it's in here okay um I mean we see Vim files here but there's no vimrc file and it's possible that your files are hidden but mine aren't hidden on my computer so I'm thinking that maybe it's in here and they kind of lied to us colors no how did it change colors then let me just going take a look here H so what they're saying here let me go here if I go here for a second if we type in h and then type in uh what was it vimrc I didn't even know like H is the help command I think they're saying that they'll tell us where it is so here it's saying that it's in our home directory and it's called vimrc or it's in the vimrc so if we go here I don't see it okay do I have I'm pretty sure all everything is being shown here so we go to property sharing security I used to know where this was Advance Maybe uh no maybe like view yeah so it's showing all the hidden files but yeah I don't see it in here so it's not a big deal um but at some point we might need to be able to rename this at some point so but maybe just give me a second okay you know what they're suggesting that they it doesn't create it for you automatically okay so maybe what we can do is just make that file and we'll just follow those instructions so this is what we have open here and this is a split window I didn't mean to do that so what I'm going to do is just close that out um again I'm trying to close this without actually uh using Vim commands because we haven't got to that yet but I'll go ahead and hit close and so this is a window open I'm going to go ahead and make a new file here right you can do this on macf as well and um what I'm going to do here is change the theme so I just want to see like what uh default teams for Vim I just want to see what the list list there is so apparently if we do colon color scheme it should just tell us what we have okay then we have this one uh space nope so it's telling us that's our theme right now but I wanted to know what possible ones there are yeah okay so I found a list here just on on stack Overflow we got blue dark blue all this kind of stuff here so what I want to see is if we if we make a file here we'll call this color scheme and if I change it to blue or maybe dark blue will it uh will it actually pick this up or will whatever we configure get picked up so go ahead and save this as and what I want to do is go to our I'm in Andrew here and I'm looking for that Vim files directory they said it's called Vim RC we'll save it okay so I'm not sure if this will take effect until the next one but what I'll do is I'll create a new file here so I'm going just say new file I'm going to close it I'm going to reopen it because a lot of times you have to reopen it I'm just opened up my start menu here off screen and I'm looking for gvm I got to type G Vim here and so now it's blue sometimes you have to restart it so clearly it is taking effect there we go and so now we have way of editing our vimrc file even though it's not in the most convenient place and and it didn't say anything about a g vimrc file so um maybe there is still one like G Vim are seeing the same directory but that's totally fine um but uh obviously we had this setting here it's just like confusing like which one would take priority so maybe that would just only be temporary so if I take that out and I open it again so say gvm what's it going to retain it's going to retain the blue one so whatever is in our VI uh um our uh VR uh our configuration file and that's how I would normally want to do it I want to configure it I don't want to use these settings here I usually don't do that the only advantage of having G Vim or Mac Vim the only thing is copy and paste commands like that because it's such a pain not having those um and that's the only reason also being able to just like easily resize the window um and then having the normal save command uh as opposed to doing right quit uh but that's all I wanted to show in this video and we'll look at more configurations when we need to okay all right let's talk about vim's plugin manager so Vim has many different plugin managers to easily install and manage plugins we have BM plug pathogen bundle I can't say that I don't know what that says Neo bundle volt and more there's just tons of them and so here's an example of using Vim plug to install something so Vim has not conformed to a single plugin manager and there may be plugins that only work with specific plugin managers and this is really frustrating about Vim uh has been the plugin ecosystem but I think most people now settle on Vim plug my frustration is that I've been using Vim for such a long time so I remember using a bunch of these at different times um but since Vim 8 uh you can easily the plugins can be easily installed by just cloning them into the correct directory so it's not going to manage plugins for you but with the new package manager you just drop them in the right place and this makes things easier there's also something called a Vim ball and uh that's a spelling mistake there's supposed to be a space between is a sorry about that but it's a self extracting archive format used for Vim to distribute and install plugins and scripts Vim bols have the extension of VBA which is confusing because VBA is another kind of uh Visual Basic something or something other kind of file fball is not commonly used today since plugin managers are more efficient and easier means to install plugins but sometimes you'll read about these things or you might find a really old plugin you want to get to work and it's in a Vim ball um and the idea is that it's not they're not fun to use I so I just avoid them as much as I can okay I want to talk about Janice um which is a distribution of plugins and mappings for Vim G vim and macm to quickly configure Vim to provide a modern experience which is located at the Carl Huda repo um or GitHub user and so I actually use Janice still just because it's so darn easy to use and I've been using it since it first came out um and I mean you should install your own plugins but this thing just works really well the box for me it was for rubius or R rebound rails programmers which is what I am and so I still just use it today but it was created by yahuda cats and Carl uh lury I don't know how to say the last name because at the time Vim was not seen as something cool it was kind of a pain to utilize um and so at the time everybody was using textmate which became a very popular text editor it was really really big deal back in like 2009 but obviously Vim was super powerful could be used anywhere but people had a really hard time configuring packages to make an environment that matched these more powerful IDs so the idea was that they would just go configure it and then you just have a on line install and then you could start using Vim as serious as any of these other ID Ides at the time I do have to say that the uh Janice is designed around Ruby programmers cuz at the time that was the dominating framework it was a big deal for years if you miss that uh time period oh well but that's why it was optimized for that and that's why people today just assembl their own configurations that are inspired by Janice so sometimes you'll type in like uh you know modern version of Janice and then people will have like a plugin list that does something very similar okay all right so what I want to do in this video is show you Janice now you can install this right on ma uh on your Mac if you have it um on Windows obviously you'd have to have WSL um I just want to launch up a new instance to show you it and the only requirement that it really needs is Ruby but most computers or like most os's come with Ruby installed so that should be not much of an issue so I'm going to just go ahead and launch a new instance here on AWS and we're going just call this a Janice example and here I have Amazon Linux I'm going to switch over to auntu I'm going to choose 24 which is fine I'm going to launch this on a T3 micro which is what I prefer and I don't want to launch this with a key pair I'm going to go down below here and use that um roll that we had earlier so we can uh log in with VI our session uh which is wherever it is here I'm just trying to find it um our profile here as such excellent so I'm going to launch this and I'm wondering if sessions manager is going to be enough here but I think that it will work um as opposed to using a proper terminal but we'll go ahead and while that's way let's go to GitHub and look up Janice again it still exists it still works because I still use it and we'll just type in Carl Huda but this kind of give you an idea of some plugins that you might want to utilize so if we go down below here it should tell us what plugins there are so this is all the new like mappings that they added here and so they have like act uh contrl P nerd commenter which um we'll actually manually install this because this one is super cool nerd tree which gives you like a um like a uh tree of files on left hand side just tons and tons of stuff Easy Motion which is really cool I used to use that all the time but I just stopped using it but it makes it really easy to find um find stuff lots and lots of configurations okay this is not even the full list I think if I go up to here and Janice and we go into vim and we go into tools then we can see all the ones that are being used so these are all the plugins that are that are going in there I'm going go back over to here and we'll take a look at our instance and see if it is ready probably not but I'm going to go try connect to it anyway probably will'll let us connect and before we do anything else I'm going to go say pseudo Su hyphen Ubuntu get to the buntu user and I'm going to type see if there's Ruby installed here so say Ruby hyphen V okay but on a Mac it's preinstalled so we're going to do Pudo snap install Ruby Ubuntu has um snap and app Snap is the newer one so it's usually recommended to use snap for installing stuff and so that will install a version of Ruby okay I don't care yeah yeah sure classic classic here I think that's like the only requirement that I think that really matters uh to utilize this but that's again one of the reasons why some people might not want to use J but I just want to show you what it looks like with a whole like a environment that fully has a bunch of plugins okay and I I'm not expecting you to know how to utilize anything in here still we will get to commands I know we're taking time but we're just laying that Foundation okay so here they show you like how you do M Brew macf install so this is the one command we need to install it this why I was confused by color scheme because they just do color here I guess color and color scheme are the same thing I go ahead and paste this in and say enter and so this is the on line command it's going to go ahead and set up all the stuff so anytime I have to set up a new Mac first thing I do is go over here dump this in and I'm happy so I'll just wait for this to finish okay and all it's do like you know it's like cloning all the individual repos and it's going to um do that so I think like if we went over to here and you go back into this directory into tools uh notice that they these look funny because these are actually pointing to other repos right at least that's what it looks like to me yeah it is which is interesting because you can click through and read all about those ones so it's finished okay and so now what I want to do is open up Vim so I'm going to go ahead and type in Vim um and I'm going to hit enter again and so it doesn't look a whole lot different but it did bring in a bunch of um templates or or sorry not templates but uh other things but if I do leader n notice now I have this that's nerd tree so that that's not part of Vim by default so we just installed that but I'm going to go ahead and close this because I want to change the styling again just watch so you can get some experience here I'm going to go ahead and open up the vimrc this is what you do on your Mac or whatever and I'm going to go ahead and set the color so I'm in Vim so I'm going to go down to the bottom I'm going to do shift G and I'm going to hit uh o to go below and just go delete up to the wall I'm going to set the color here to be mokai because that's the one I like to use if you ever watch my videos and you see those like code Snippets they're always done in uh that mokai I thought it was like monai monai versus mokai monokai I just got them mixed up now I don't remember which one I used but anyway I'm going to set it to mokai today m o l o Kai k AI all right all hit Escape colon WQ again just watching to see what it looks like and I'm just going to open up Vim again so that should look a lot nicer I guess it doesn't really show up on here um sometimes like you set color schemes they just don't pick it up because it's the limitation based on whatever colors are available in this view we just don't have really nice things but uh and apparently I just closed that tab but anyway that's how you could install a bunch of plugins but I kind of want to show that a bit nicer so I'm going to do this again again just watch for the time being I'm going to go ahead and just shut down that server and we'll say terminate but I'll just bring it up here in Visual Studio code and we can open up them because I don't think I have it installed here just say Vim sorry Vim yeah see like I'm hitting leader n on my keyboard leader is um uh backs slash so back sln and it's not opening up um uh that ner tree there so I'm going to back over well before I do I'm just make sure I have a Ruby version installed I do 2.7 which is old but that's probably what came preinstalled on this machine and so I'm going to go ahead and copy this we'll go back here paste this in hit enter and I'll do the exact same thing okay so I'm going to clone that down and bring this up here and we'll give that a moment to install okay but this would not work on Windows because you'd have well you'd have to have Ruby and it's it's for Linux all these commands are Linux commands so they don't really have a a Windows equivalent to uh install this natively but you'd have to have WSL like I have here all right but we'll just wait for this to install all right so now it's installed I'm going to go ahead and type in MV and uh you know what I might do is actually open up a file here just so you can see a little bit more here so I'm going to go mbim and go into lib and I have a bunch of Ruby files here so it doesn't really matter I'll I'll open up um auditor that's a large one for me here I keep typing mm because I think I'm on a Mac and so there we go so it has nice coloring this is coming from um actually I think it's the theme that we set before this is not mokai but I think it's the desert seam I I set before I sorry cough there I'm just going to quit that I'm going to open this up and I just want to change it to the one I like say vimrc here and I'm going to go down below and notice there's all this stuff here before we used to just have colar in here and I don't see it anymore but I'm going to go ahead and just type in color color and say mo moai and then we'll save that and we'll go back up to this file I it looks the same I don't know I maybe I got the color wrong here we's say color again color it's default still okay I'll try this one more time I must have typed something wrong yeah I can't find the scheme it's uh what about monai monai let try this still can't find it why won't it like it oh you know what it is we're not supposed to put um I don't think we're supposed to put quotations around it that's why it's not working so we'll say molai here there we go and that's what I'm used to so you'll probably recognize these colors right um but right now I'm using full vim and again I'm just showing you here but the idea is like when I'm working with Vim I will open up nerd tree here I will go in here and I'll be splitting windows and I'll be going crazy and I'll be switching over and doing a bunch of stuff um but uh but anyway and it's kind of hard to close windows here I'm not sure why it doesn't let me close it with the command there I'm just going to type close manually that's not usually how to close I'm usually hit a command key for that but like one plugin that's installed is um nerd Commander so what I can do is I can select multiple lines and then um I can do uh leader CC and that will comment out a bunch of stuff so that is a plugin so there's all sorts of plugins that you can have uh but again I just wanted to show you how to get a bunch in there really quickly we will install our own plugin here uh separately but I just wanted to show you that if I wanted to get rid of this install um I'm just going to make sure I get out of this here I'm just trying to think here this is all stored in the vimrc directory so if we go to our home directory here for a second I do LS La in here we have vmrc and it's linking over to Janice here right so if I want to um get rid of all this stuff and it copied our old ones our old ones here we just need to get rid of the Vim directory so if we go into Vim this is all the Janice stuff so I'm just going to go ahead and just say vim and get rid of it and so so now if I open Vim sorry Vim we're just back to normal I can't open up nerd tree that stuff doesn't exist all right but um yeah we'll just end it here and we'll look at installing a plugin in a separate video okay all right so in this video what I want to do is install a plugin I was going to do nerd Commander but you know what I'm thinking is that maybe we should install something that you think that Vim can't do which would be something like having AI in uh in Vim here so and this is my point is that there's always somebody coding some kind of plugin that lets uh Vim stay up to date with everything and so this one's called vimi I've never used it before and supposedly we can install this using um uh Vim plug and so maybe that's a good idea I've haven't used Vim plug in such a long time but let's go ahead and give it a go and so I just typed in BM plug to get to the repo and so there should be an installation way uh like an inst a way to install this so we have two ways we have uh this is the Unix way then we have the windows way since I'm on Windows here today I'm going to have to do this I'm going to have to open up Powershell so I'm hitting command and I'm searching for Powershell and then I'm right clicking Powers shell I'll just open it over here for a second I'm G to just show you here whoops whoops whoops whoops whoops I opened up Adobe Acrobat by accident but we open this up and we type in Powershell again if you're on Mac this is so much easier for you just uh follow along uh modle through the the Mac instructions here but I'm going to run this as administrator I'm going to open this up here a big ugly poers shell I'm going to copy this command here and I'll paste it in and we'll hit enter okay and so supposedly I guess Bim plugin is installed now all right right now how do we use it is the next question usage add Vim plug section to your Vim RC file or nit Vim so it's telling you that we need to add it to that so we know that our uh vimrc file is located in that specific directory so I'm going to go back and open up our Vim I'm just going to get this out of the way our G Vim here I'm going to go ahead and say open and I'm going to open up vimrc and what it wants us to place in there is this hold on here so add a Vim plug to your section that's not what I want to do I want to just start installing oh here it says plug install install plugins that's actually what I want to do so what we'll do is do colon plug install I'm going to hit enter not an editor command well you know what um I think we need to close this first and then reopen GM because we uh we installed and didn't necessarily reopen gvm and we'll now see if it's in here so we'll do colon plug install still not a command so there must be more to this huh just a moment okay now something we could confirm is if it's actually in that directory so notice here says Vim files autoload plug uh plug so what I'm going to do is I want to go look in that directory and see if it actually is there okay so I'm just navigating to it uh locally here just give me a moment and I'm looking for Vim files give me a moment just a second here all right and so if it installed correctly it would be in the autoo directory here and we have plug. Vim but it's telling us that this command does not work so add a plugin a plug a Vim plug section to your Vim I mean maybe we still need this section maybe it won't work without that so I guess I'll still open that I suppose we say file open and we'll open up our vmrc and what I'm going to do is hit o to go down below now I'm in insert mode I'm Type in call plug begin uh pound begin parentheses and it'll say call plug pound end parentheses and I'll do right quit and I'm going to reopen G Vim I'm going try this again let see colon plugin install because I remember when I used this or they at least they show the demo right they go here so maybe what we need to do is put it in the list first and that's our problem okay so I'm going to go back and open the last file we had so open it again I maybe we need to specify our plugins so what I'll do because this plugin is called um I just need to see how their Nam so I'm thinking that it's just go back over to here take a look so it's just that so I'm going to hit uh K up on my keyboard then I to go to insert mode PLU if you're struggling with this it's not a big deal you can just again watch me until we learn all the commands and I hit escape to get out of insert mode colon WQ and now I'm going to reopen gvm I just want to show you that this is the way we install plugins so now I'm going to do is col it I'm going to say plugin install what are you telling me it's not there buddy all right let's go back here for a second oh you know what it's plug install plug install and so now it's going to install vimi and so now vimi is now installed this is our no name file that's here let's take a look at how we configured this so this says uh save your API here on your machine so I guess the question is where would that be for Windows so I'm not sure where this would go for Windows just give me a moment okay so right away what I'm noticing here is it's saying like Vim AI requires Python 3 and so now I'm running that problem where I'm basically forced back to Linux so again you know Vim is mostly powerful on Linux and and Unix it's very hard to configure this stuff like with this there's probably some way to hook up WSL with uh Vim here uh let me see if I can figure that out so I did find this script here for GM and the idea is that maybe what this command would let you do is it would launch launch up um it looks like it launch up CMD and then it would launch the GM program so I don't think I have version 81 installed I think it's 9 9.1 installed yeah this is 9.1 and then the idea is it would launch GM and GM so I'm not I don't really care that much about GM I just want to show you how to install a custom plugin so what I'm going to do is go back over to cuz at the end of the day we're going to use to do a code just so you know when we learn it all this stuff but I I I just want to show you all this configuration stuff so you you know again if you want to figure it out or if you're on a Mac or Linux it's a lot easier so what I'm going to do is just start this all over again and I'm going to I'm in WSL here and so uh what I'll do is I'll go install um Vim plug so we just type in Vim plug which is right here and I'm going to grab this command here and paste it in and that's going to put it into the correct directory good and so then we will open up our vimrc file again so let's just say vim vimrc and I just want a couple things here so I want this call plugin so trying to do this while looking at both of them at the same time hold on insert mode call plug begin parentheses again if you can't follow along with the commands do not worry about it we'll cover that and you can always come back here and then do this yourself uh so we'll go do this and I want this to be called this is what this is called called madox 2 forvm aai WR and quit I'm just doing that below you can't see it but I'm doing right and quit there we'll exit out of there can open linked file for writing because it thinks this file is linked darn it one second here LS hyph La I have an old file here from this I'm just going to go ahead and say remove uh vmrc because it's an old one e LS hyphen la like that now it's gone I'm going to move the old vimrc back into play so vimrc will now be vimrc and I'm just going to reopen that up vim vmrc and we'll try this again so the plugin here here is called plug madx to Vim Ai and then over here we'll say call plug begin parentheses call plug and all right I'm just going to jump this like that madx uh Vim a etc etc looks good to me call plug begin plug end and that looks good so I'm going to do right quit here I'm just going to bring this back up to screen right quit down below and then we're going to reopen this up I'm going to open Action a file UPS here so I can see what I'm doing so I can do vim and I I am in a project right now so I can just actually no I'm not I'm going to go back into sites exam Pro audit here I'm just going to open up a file auditor as an example I keep typing mm because I think I'm on a Mac it has a problem with our file here uh unknown function plug end plug begin did I type that wrong doesn't look like I did so I just quit quit again clear them vmrc and we'll take a look here call plug begin call plug end huh oh this is neovim here I copied the wrong line that's why okay so I guess we got to pay attention to what we're copying so go ahead and copy this line here not a big deal we'll go back to here we'll paste this in we'll hit enter and so now I'll open it up that file I want uh it's a VI Vim lib auditor okay now it's not airing out I'll do colon plug install and now it's going to install that plugin all right for this to work I have to have python installed because that's what this thing relies on based on the the source code so I'm going do colon Q here get out of that and do colon q and get out of this file with the exclamation mark so now what I want to do is configure AI so I actually do have an open AI subscription so for me I can actually do that so again just watch you don't have to necessarily do this and so what it wants me to do is set this token here so I'm going to go grab an open API key I just don't want to show this on screen but I'm going to go grab that from open API or open AI so we'll go here and where's my login where's my login products API login here we go and I'm going to go generate out well I'm got to log in first I don't think it shows keys yet so I think it's okay we'll go to a API it's fine get started I'm going to go here on the right hand side somewhere in here I have keys your profile well what else would it be us your AP have been repl with project Keys okay that's fine and I'll call this one Vim and I'll say all and now I have a key and I expose it I guess it doesn't really matter I'll just delete this afterwards but it's really silly that they did it that way okay so I'm going to go back over to the instructions here and I'm going to go ahead and type in Echo and then paste it in sh this a bit here and we have freaking jeez that make that symbol and send it to ourc config slopen ai. token okay so that's where it tells us to put it oh we could have exported it as well whatever uh okay so now that's there so I'm G to drag this up so I have more room here and I'm going to go back and open that file I had earlier and so now that I have it configured there should be some way to use it so it says here to use AI command type the command followed by the instruction prompt all right okay so what I'll do here is I'll go down somewhere in my file all right again just watch and I'm going to type in Colon oops Escape I'm going to type in the command they told me to type in so uh colon AI all right uh help them AI here complete the text on the current line complete the prompt okay let's try the prompt so do AI write me a ruby function that prints hello world feel like it's not going to work for some reason verify that the billing plan is pay as you go what do you mean I do pay as I go don't I or did Bo downgrade me just give me a second okay all right so I went in here my billion at zero it says when your credit balance reaches zero your API requests to stop working so if we go into limits here um or limits here in my or I'm going to go down below here I'll just set like say the use Li is this what if I just send like $10 to do that oh uh five five can I do that okay great I'm gonna go back over to billing and I'm going to add credit to the balance we'll say $10 and we'll pay for that give it a moment here because I'm assuming that's the reason why it's not working right the question is like would there be one that integrates with chat GPT I don't know but this is obviously using that part of it um so I'm going to go back over to here and we're going to try this again I mean it is anyway I think that this is sufficient um but there might be like a chaty PT with uh plugin Vim there might be one for that so there's all different kinds of plugins you got to find the one that works right so here's another one which is US uses the open API key but for whatever reason this one didn't work that great like this one looks a little better say like ask and stuff like that but I just want to point out that you can do it and that's the trick is that you have to configure and that's the hard part um about utilizing this stuff so we'll call this successful because we definitely did install a plugin um but we we'll end it here okay so I'll see you in the next one all right ciao hey this is Andrew and we're taking a look at neovim and I just want to point out we're going to get the command soon I just want to cover neovim and then basically after that we're basically going to be using visual studio code and learning our Vim commands Okay so Neo is a clone of Vim which was Rewritten from the ground up to be hyper extensible version of Vim in 2014 looks just like Vim plugins are easier to write better end end documentation it has an ASC producing parsing tree it has remote plugin runs as Cod processes safety async builtin terminal emulator which is really nice fully compatible with vim's editing mode and Vim script version one so when they say that it is a rewrite of Vim they're talking about Vim one okay but it does allow you to use Lis scripts so the time this is a big deal because people were getting like they liked Vim but it was just a pain uh because it it wasn't keeping up but then Vim 8 and Vim 9 came back and they made great improvements and so now it's debatable whether you want to use neovim or just Vim 9 um I'm in the camp of just using Vim 9 UM or the LA Vim because I don't really care about neov but you know if you do need to write your own plugins it is easier and there are some really amazing uh plugins for neovim but these days I'm either using Mac with Janice or I'm um with on Vim 9 or Vim or whatever or I'm using visual studio code with Vim Keys okay and if you're wondering I did get rid of my API key for open AI so no one's going to abuse it what I want to do in this video is take a look at neovim um I think I shut the server down earlier right yeah I did okay great uh so we'll go take take a look at neovim I've never installed neovim uh as like since it came out so I don't even know if there's anything different I think it's just the same thing so I can go ahead and install now if we are on Windows I'll go here obviously they have a bunch of different ones here so we'll go ahead has an MSI so that is an installation thing I imagine it's going to look just like the normal uh normal Vim here so we g go ahead and install that uh I want to run it run anyway and we'll go over here and we'll install it all right I imagine Mac is a DMG and you just drag it over in Linux you probably have to run a command or looks like there are other ways for us to install it so I believe it is now installed I'm opening up my uh my um uh start menu and and I open it up and there's neovim okay looks exactly the same okay all right um I imagine that plugins are probably easier to install with this thing so go back to neovim Modern goys yeah sure yeah nothing nothing super exciting to run home with maybe people that know neovim more than me are excited about it but remember had like really nice looking uh screenshots before yeah what's this a fork of vonm what the heck is vonm um simple modal ID built on neovim the goal is to create the ideal programming environment so it seems like it has a lot of stuff built into it and then you have neovim a simple modal ID built on neovim with v vs code extensions oh that sounds interesting ridden in electron okay so it seems like a lot of people have leveraged Neo's API to build um their own visual things on top of it because if you think about it like we have G Vim but we're not opening up in G vim and the one that we opened up neovim is actually not opening up I don't think that's a standalone application I think that is just opening up in uh command prop or something so maybe there's something really nice like this but this is showing it on a Mac so I don't even know if you can do this on Windows I mean it says electron so if that's the case it should be able to run on anything here if we go over to releases uh there's a Windows one yeah I might as well give it a go for fun I'll download the exe maybe I'll be a convert to this but you know maybe the ecosystem for neovim is easier on Windows than it uh like than it is GM is and so you know this is why I'm just kind of exploring these and seeing what we can take a look at because then end the day it's up to you to choose what tools you want to use if you're just going to use it with vs code which is totally fine the stuff installed uh like sorry with the evm commands on you can do that so now I'm just opening up that executable and we'll open it up that it's electron app doesn't sound very efficient memory wise so I don't know if I would necessarily want to run this day today but we'll take a look and see if it actually can start up and this was released 2021 so it doesn't look like it's being really that well maintained and I'm waiting for it to start is it going to start it didn't even make a version one and so this is kind of where I give up with this thing we could take a look at Vim here and did this ever get nope so I mean there's stuff out there which is cool but uh yeah that's neovim so I would say we're done here okay all right one more thing um I just want you to know about this if you want to use use it but there is a Chrome extension called vimium that allows you to have Vim like commands that control your Chrome web browser so you have a bunch of commands um and they're not exactly like Vim but they're very similar and this could be a really good way to train your hands to uh work with themm um and that's all I wanted to say there okay hey this is Andrew Brown let's talk about Vim support and other Ides so most Ides will have direct uh support or indirect support via plugin extension to emulate the Vim command so it's not like the full Vim ecosystem but it's the commands and that's good enough and so vs code has an extension Cloud9 has one you you just turn it on you set it to Vim mode you have jet brains uh any of their IDs have a a Vim mode xcode and you can get Vim in Android Studio I think noad Plus+ somebody allowed you to have Vim there as well so there's a lot of places where you can uh get Vim like commands so IDs are simulating or emulating I should say I don't know I wrote the word simulating because it's actually emulating emulating the level of supported uh commands and Vim functionality with uh will vary with each implementation just understand that there could be limitations but for the most part when I use vs code it feels like I'm just using all the commands that I'm used to okay hey this is Andre Brown this video I want to show you um how to install Vim mode or uh Vim uh Keys here for for visual studio code just go to extensions here on the the left hand side you're going to go and type in Vim you're going to have more than one option uh just because there could be other implementations but the one that I know is the vs code Vim one but just make sure that you don't end up installing more than one because that can mess up problems and so you just install it and then you'll have them if you ever have any issues you can always just disable it um I can uninstall it here just to show you what it looks like but the idea is you just hit install it's installed and then your cursor will change okay and you'll notice that all your keys will not work the way that you expect them to work uh but there you go hey this is Andrew Brown before we start to learn commands I want to talk about the default position of where your hands will be and that is always on the home row uh so Vim is designed around using the least amount of keystrokes with the least amount of hand movements so your hands should always be resting on the home row forget about your mouse so you do not need it when you are working with Vim uh notice that there are ridges that indicate uh the F and the J key uh if you forget from your typing tutor early days when you learn use a keyboard This is how you know where the H and the J are um and so that's where your index fingers should be resting so if you take your index fingers they should be sitting on the F and J key um but yeah we'll just cover a little bit more about vim and then we'll get jump right into commands and start doing that okay let's talk about the different modes of Vim because it's very important to know them so you can navigate around uh the the default mode the mode that you enter in is the normal mode and you can always get back to normal mode by pretty much always hitting Escape All right so that's how we always get back to normal mode uh from normal mode we can transition to other modes there is a a big comp complicated diagram of how everything connects to each other but I basically just look at everything being connected to normal mode so we have command line mode this is where you enter in commands um so anytime you type a colon you'll notice at the bottom that that colon will appear and then that bar in the bottom is where you're entering in commands so we have entering a command uh if you try to search something by doing forward slash then you'll notice that it's actually fine but sure we'll call it search or if you want to search backwards or find backwards that will put you into command line mode you have insert mode insert mode um happens with a lot of characters if you type in I or capital I you'll enter insert mode if you type in a or capital A you'll enter insert mode o or capital O C or Capital C there's a lot of cases where you'll enter into uh insert mode which we'll cover uh in detail in each section then we have visual mode so visual mode is a new type of mode um and it actually has uh two subset modes which is visual line mode and visual block mode um this is a way of selecting text and then doing something with that text and we'll cover that when we cover visual mode we have replace mode and this will replace a a character or replace or you have the full replace mode which you'll stay in replace mode as you replace characters and we'll cover that when we talk about Replacements there are other modes there's a select mode an X mode and a terminal job mode we are not going to cover them because I never use them so you don't need them either okay some developers like remapping the Escape key to be more true to the original position the Caps key or the tab key if you remember earlier from our history if you did watch those videos that the um Escape key used to be to the left of the que so some people like remapping it um I don't remember what the recommendation is anymore but I I don't do that another very popular remapping is uh remapping the control key to the caps lock key again to reduce the amount of movement um but again I I just leave everything in its default position if you're wondering where the command line bar is it will show up there down below and it will generally tell you in the command line bar in the front what mode you're in so they saying that it's visual block mode and that's how we know we're in visual block mode um some will not tell you that there you're in normal mode you just if there's nothing there you're usually normal mode some will actually tell you if you're in normal mode okay all right so I want to just show you modes so if you look down below in Visual Studio code we are right now in normal mode so it does indicate it here way down here that we're there so I'm just going to click anywhere in here let's just to say on this line open up a programming file whatever you can work with and if I hit I on my keyboard notice that we're now in insert mode and if I hit Escape I exit back to normal mode if I hit I I'm in insert mode if I hit Escape I'm in normal mode that is pretty straightforward uh there are other modes so if I do um B I'll be in visual mode I hit Escape I'm out of visual mode if I do capital r I'm in replace mode if I hit Escape I'm back in normal mode so you kind of get the idea uh but usually normal and insert are where you're mostly going to be so just pay attention to what you're doing there you go so file commands are ways to work with files um at the command line and they always start with the c we've obviously done some because or you've seen me do some because there's no way you can quit without uh using a file command so we have WR for saving a file uh WR in the f to save it to a specific path or file name we have W exclamation mark which will attempt to force the file to save sometimes you have readon files or um you don't necessarily have the permissions that you're trying to force uh Force save a readon file you have wa which will save all files I never use that one we have quit we have quit for sometimes you just want to drop everything and get out of there so you do that QA to quit all open files and then there's Zed which isn't a command line file but it's like uh it doesn't start with a coal and you can just press Zed to get out of it really quickly which is interesting um but for these when we're in Visual Studio code we don't have to worry about these so it doesn't matter but we will go ahead and just quickly demo them okay all right so we're back in here and I'm actually going to use Vim Down Below in the terminal so I'm going to type in vim and it's not responsive again I don't know why this happens sometimes it happens there we go if I go back and I type in Vim I can actually create I can actually do make di in here and some other commands I didn't cover those in there because I think they're kind of exotic and I don't necessarily like using them but uh it's very straightforward you know you could do q but one I wanted to show you was the Zed key so if you do shift Z capital z or maybe control Z or Z it should quit there we go let me try that again and and that I'm actually just doing what is it I actually have to tab it twice I'm not sure why it's being so unresponsive but if you were to use that let's say in um you like shelled into a server remotely connected and you did uh capital Z it would it would quit right away but I think these are pretty straightforward um just be aware that they exist okay all right let's look at motion commands that these are things that are going to um allow you to move quickly around your document and often they will uh uh these are shortcuts that only start in normal mode but will generally stay in normal mode as well because it's about movement and not necessarily uh modifying uh text okay so motion commands would be something like directional motion so being able to move up down left and right so standard Mo uh movements word motion so move based around words uh text object motions which I rarely ever use um which are paragraph and sentences we have jumps which will jump you drastically to another part of the document marks which will Mark a position to jump back to so let's take a look at a couple of examples of um of motions as we will see a bunch of them throughout this course so let's just take a look at a couple here the first is if we wanted to go to a specific line so we'd say we give it a count like 22 and then we say G to say go to line 22 and it would jump to that line so that would be considered more of a jump motion then we have W so if you press W while in normal mode it will jump to the start of the next word um so those are an example of a couple of uh uh motion commands uh there are operator commands which can be used with motion command so um operators generally are trying to change something um and so we have change delete yank um uh Tilda which I rarely ever use in this case a swap case we have another one for swap case make lowercase which I actually do use make uppercase which I like using as well GQ which I've never used before um shift left shift right which you'll use quite often and more so just understand that um operators can be used along with motions and the way that would look like is you would say all right let's say I want to delete something so I'm going to say delete the current word and actually be like from the current cursor to the to the start of the next word or change three so C for change three for the quantity and then three words so hopefully that makes sense okay all right so let's take a look at the easiest possible motions first which you should absolutely have memorized um and and learn extremely quickly which is the hjkl Motions so here we have H for left J for Down K for up uh and L for right it looks like an I but it's actually an L um and one thing you can do is you can add uh values to it so if you were to um add a number a count prior to the number then you would change how much You' move because usually just be one Val like one character or one line but here if you say 10 H and I'm get my pen tool out here so just look down below here H is this way so 10 H would be 10 characters to the left 3j would be three lines down 2K would be two lines up 8 L would be eight characters right I often don't remember which is up and which is down but my fingers seem to remember so like if you were to ask me like on the spot which goes up and which goes down I couldn't tell you um but I know that if I had to move it's muscle memory now okay all right so what I want to do here is practice motion commands and the great thing is that we can actually do all of this within GitHub I was just thinking about this that there's the GitHub dodev editor and that will open up a a vs code like experience and I believe that we can install Vim there so what I'm going to do is I'm going to go to something like um the ad Cloud project boot camp which is a very large project um that is visible and you can use whatever you want but I'm just trying to give you something that we can both uh look at at the same time so this is the adabs boot camp creditor application I'm going to drop this down to tags or branches M I guess I want to go to Omen King one actually sorry this is my personal one and so you can go to this one as well I'm going to go to week X here and what I'm going to do is press period on my keyboard what that's going to do is open up github.io use it loads very quickly and it's vs code if you don't like the theme you can go down here and change your theme um but on the left hand side I'm going to go to extensions and just make sure you go ahead and install the Vim extension I here so I think this is uh starting up but yeah mine's already installed so just go ahead and install yours there and when you have done so we can just go up here and open some kind of file so the app.py is kind of large and so I guess we can work with that or we could open up some cloud formation that might be a little bit better I'm going go into this cluster file and so here's an example file open so I want you to click anywhere in here and put your fingers on the uh JK L and now let's move around so I'm gonna go hit H to go left and do L to go right H to go left L to go right H go left L to go right and so you should be following along with me and starting to do these motions let's try J which is the your index finger um that will go down and then K will go up J will go down and K will go up so it should be pretty straightforward so just spend your time here trying to turn that into muscle memory all right now let's try to add the modifier so I'm going to go back to the word certificate and uh using my left hand I'm going to type something like five I'm going to hit five I'm going to hit J which is the index finger you should feel it because you should feel that little um bump there and I'm gon to hit down and so now now notice it jumped down five I get five again I'm going to hit K which is my second finger that will go back up so five down five up five down five up five down five up you get the idea let's try five left five left five right five left five right try a bigger number 12 right 12 left 12 right 12 left let's try 20 uh 22 22 down that's J 22 K that's up 22 J that's down 22 K that's up so pretty straightforward um but what you find is like you can really jump to where you want to go to so I wouldn't say that I overly have to use um uh directional motions but uh they are the basis uh uh of what to learn okay so hopefully you got that we'll move on to the next thing okay let us take a look at the go to motion commands and I want to point out I'm just going to get the pin tool out here look at where this letter is it is one key to the uh to the left hand's index finger so clearly this is an important command that they want you to know because if it's on the home row it's valuable real estate this is a command that uh you're going to be using quite a bit and I use it a lot so the goto command will go go to a specific line so if you type in GG that goes to the top of the document or the first line if you do capital G or shift G uh that's going to go to the last line now if you want to go to a specific line you type either 22 like the number of the line you want to go to and then GG or 22 shift G um and often I just do shift G but you can do either or um and that will take you to a specific line so just a reminder GG to the top shift G to the bottom okay all right so we're continuing on here now with the goto Motions I have the same document open you can open anything you want on GitHub just find a repo press period and find a large enough file to work with we're using the uh boot camp from 2023 all right so um let's take a uh take a spin for these goto commands before we move on let's make sure we remember our directional commands so J to J to go down Down K to go up H to go left L to go right so I just want you to do that for a second and now keep your hand uh get your left hand on the on the keyboard and so make sure both are on the on the home row and I'm going to press GG to go to the top and then shift G to go to the bottom GG to go to the top and shift G to go to the bottom GG to go to the top and shift G to go to the bottom it's that simple okay a to go up J to go down g g to go to the top shift G to go to the bottom it's all just drills really if you think about it um so let's say we go to a very specific line I'm looking at maybe cluster name here I want to go to that line in particular so going to type in 262 shift G or let's go to Line 270 so I'm going to type in 270 GG just decide what you're more comfortable with if you want to do the number and GG or number shift G I apparently always do shift G and I did not know that it's just muscle memory for me so again let's go back to the top so we'll do GG to go to the top shift G to go to the bottom all right so an easier way to remember this is that because the G's are lowercase they feel like they're smaller so they should be at the top or the top of the document and then the G is the grownup one so it's at the bottom of the document the shift G and that's why uh it's like that I'm not saying that's the logic behind it but that's how I like to remember it okay so there you go all right let's take a look at some word motions um and these are the most common ones there might be more than these ones but these are the only ones that I really know uh so let's take a look at them so word motions uh we have is W so move to the start of the next word we have e which moves to the end of the next word and B which moves to the start of the last word notice their position so if you notice here you can easily get to the W or e with a one single press cuz imagine that your fingers are here um and then for B I normally use I normally extend with this finger here so I'll go do this I'll do all of these word motions just with my left hand but again it depends on how far you can reach out for me it's not a big deal okay hey everybody it's Andre Brown and we're looking at word motion so there are three letters that we're focused on here w e and B so click anywhere in the document I'm going to go right to the start and what I'm going to do is hit the letter W so w is always going to move to the next the start of the next word now what's interesting here is that it moved to the colon because it's like a special character here and so it it thinks that that is the next word just understand programming languages are kind of funky so it's not always going to do what you think it's going to do let's go down to like something that looks more English readable and I'm at the start of theth if I hit W it's going to go to the start of the next word if we hit it again W it goes to the next word if I was to press two w it jumps two words right we see that modifier let's Press B to go back okay it's just the reverse right so now what would happen if we started in the middle of the word let's say we're in the middle of this word and we hit W it still goes to the next word all right let's try out e so e is going to move to the the end and I actually was wrong I said move to the end of the next word but it's going to be moved to the next closest end of the word so we hit e here it goes to the current word end and then the next end right all right if you try B you go here but notice if I hit W and b or sorry e and B it'll just keep flipping between these two all right so these will become more important later on when we learn about selecting so like later on when you want to select words you're going to be typing like V and then go to the end the word e to select exact words or you could do like two and then you might want to copy something particular but we'll get into that when we talk about visual mode but right now all I want you to be able to do is do W and d right so I'm hitting W here or we can hit e which goes the end the word we go B to go back all right so there you go so this is a command I wish that I would remember to utilize but I always kind of forget to do it and what it will do is it will join other lines to the current line and the key that we're using here is the capital J okay so indicate that that is capital here and it's on the home row so it's a very useful um uh uh uh command and so we have J will join the bottom line with the current line and then the next line is is 10 J so if you want to say the 10 bottom lines join to the current line we can do that so it make more sense when we uh utilize it in practice okay all right so here I'm in my document and imagine that I want to bring a bunch of lines into one line so maybe a good example would be to write some code here actually we we'll leave that alone because we haven't really gotten into editing but I'm going to go here to this line of description and what I'm going to do is type uh type uh shift J and notice it brings it onto the current line so this is really useful when you have a bunch of lines and you just want to have a single thing now let's try something Lar so we're on line three and let's say we want to go down to line 17 so 13 would be 10 14 15 16 17 sorry um 10 uh 13 so this is 10 11 12 13 14 so 14 lines I'm going to type in 14 shift J and now they're all one line okay so there you go okay so we looked at goto line which which allows you to go all the way to the top of the document or the bottom of the document or let's say um to a specific line but what if you want to move on the horizontal access to the extremes well this is where these two uh Keys come into play um and I don't have a good way of defining these groups but the idea here is that dollar sign will go to the end of a line and uh the carrot that's what it's called The Carrot will go to the start of the line and if you know regular Expressions it makes sense because do dollar sign always selects the end uh end of of a of a document and uh or a block of text and carrot will always go to the beginning so if you know a bit about regular Expressions that kind of makes sense so let's go try that out okay all right so we're back in our usual documents I'm just going to click into the middle of this long line here and what I'm going to do is uh make a dollar sign so notice it jumps to the end I'm doing this all with my left hand and then have uh the carrot so you can see we can toggle back and forth because sometimes you just want to move to the start or the end but you don't necessarily want to uh insert um there because it'll be actually very similar commands that do the same thing but they'll directly take you to the insert mode Let's try a couple things so we'll go to the top GG shift G to go to the bottom uh and we'll go and do GG to go back to the top I want to go to four shift G to go to line four I want to go to the end of the document we'll do dollar sign uh we'll do carrot to go back to the beginning so we'll go a bit slower okay so bottom of the document shift G top of the document GG I really should have went slower probably sooner right let's go to line four so 4 G G I forgot to do shift G end of the line dollar sign start of the line carrot end of the line dollar sign to the bottom of the document shift G to the top top of the document GG so there we go now we have the extremes uh the most extreme movements in all directions okay all right let's learn about the replace command this will lets you write over top of existing characters so the idea here is that with uh the r command we can replace a single character or with capital r we can enter replace mode and everything that we will type will be replaced um this functionality is very similar to the insert key if you've ever used uh Microsoft Word back in the day and you had a Windows keyboard and you accidentally hit this button you know what I'm talking about here it does the exact same behavior so let's take a look at it all right so we're back in our document and let's go ahead and try that out so I'm going to go up here to theth and I'm going to type in R and so that's going to enter us into rep uh to replace that character and so I just press any other key like H and so now it's been replaced now it didn't say it was in replace mode because it's a single character um but I want to undo that so we'll go up to here to the top and we'll say edit undo right and so now imagine I want to just completely overwrite all this stuff here so what I'm going to do is um do shift R to make a capital R and I'm just going to say hello world I am overwriting all of this okay so you get the idea I'm and now notice down below I'm in replace mode to get out of replace mode I have to hit escape on my keyboard and I'm out of there let's undo that so I'm going to go here and say undo nose is going to do undo it per letter so that's kind of annoying um and so I'm just going to use the regular control Z to get out of that so just understand that um there is a separate do a letter for Vim but the thing is is that you can uh when you're using vs code you can undo that way if you are using G Vim uh you can also undo from the top again it just depends on what you're utilizing I'm hoping that you're following along here um with uh with Visual Studio code okay but uh there you go all right let's talk about the undo and redo command so undo and redo allow you to revert or reapply text changes I'm sure you are famili with undo so to undo it's the UK key all right and if you want to undo an entire line it's the undo line which I don't think I've ever used before but um now that we use the replace mode I think that might be something interesting for us to try out then we have the uh uh the controlr key so not shift R but controlr and that will allow us to redo something so let's give that a try okay all right so we're back in our document here and what I'm going to do is change some text so let's go ahead and do shift R and um we'll just type in hello world and I'm going to hit escape to get out of replace mode and now let's undo so I'm going to hit U to undo okay and notice that it took multiple undos there so let's try that again so I'm going to do shift R to go into replace mode look down below replace mode type in hello world all right and then I'm going to hit escape to get out of replace mode back to normal mode and I'm going to hit U to undo and undes uh it will do the full undo so again I not really sure what the shift U like the undo line is for but maybe if we made lots of changes let's try this so what I'm going to do is go ahead and and we'll say shift R and type in hello world all right and now what I'm going to do is hit Escape I'm going try shift R again I'm going say goodbye Moon and now I'm going to try shift U okay so that will undo multiple undos on the same line so that's probably what they're talking about um but let's say we wanted to redo something let's go ahead and do control r r on our keyboard and uh just understand that this might not work it might not work on um this because of the mapping so it's not working for me try command r and so this is where we might not have something says already the newest changes so I think it is actually trying but it's not working so what I'm going to do is I'm going to go ahead and do shift R okay and then hit escape and then I'm going to do undo and going to try control R again there we go so I'm doing U control r u control r u one thing I'm noticing is that if you look down here below it says already on the oldest changes it kind of shows you like uh the history of what like what is being changed so let's go just pay attention to this for a second all right so I'm going to go ahead and type in hello world Hit escape and I'm going to go ahead and make another change so I'm going to do uh shift R again and say goodbye Moon and his Escape I going to do it one more time I'm going to do shift R and say uh Ola uh Venus and hit escape to get out that mode and now I'm going to do is hit undo so now if you look down below it says one change before two and we'll undo it again and it says one change before one and then undo one change before zero so and then we do undo and then we get back to that so I never really noticed that before because this is probably what shows up in um only in Vis Studio code and not necessarily uh G Vim or Vim okay but yeah there you go all right let's take a look at the change command so this is a way of selecting and then deleting amount of text based on word motions so we have the C line for Change and the capital c to change the end of the line which I use a lot is the capital c one uh a way of combining it with a motion would be something like CW so change the end of the word um so that's an example right there you could change to the end of the last word or c g which would be Chang from here to the first line so remember supposed to be an e on the end there so just remember uh all of our motions that we learned that will move to places it'll work with that even with like let's say the dollar sign let's let's go practice that now all right so let's go ahead and go back up to the word the and I'm going to press the word c and so now I'm ready to change something notice that the character is is shown in half to indicate that it is ready to change something and I want to change uh I want to take out to the end of the word so to do that I'm going to hit e and so now that word is gone and it automatically brings me into insert mode so that I can change whatever I want to say like hello okay and so we'll hit escape and we'll hit you to undo all right but understand that that's what C does okay so C is about changing using and then using some kind of emotion so I want to click here I'm just going to click to Cluster here for a moment and imagine that I want to replace the word cluster and configuration so if we wanted to do that we want to get to the uh this letter here n so we want to uh go to the end of this word and then the end of that word and that's two away so what I'm going to do is type the word uh type the letter c okay and now notice that there's a half character to indicate that we are uh ready to make a change or do something and then type in two and then e okay and now those two words are gone I'll just type in hello world all right and then we'll get out of insert mode by hitting Escape we'll hit U to undo and so that's pretty clear um let's say we want to do change to the end of the word we can do c and then remember dollar sign will bring us to the end so we do dollar sign that brings us to the end of the word so I'm going to hit escape to get out of insert mode I'm going hit you to undo that now a more efficient way is just to do shift G so I'll do shift G now Capital I'm saying G right C Capital C so we'll do Capital C and that brings us to the end of the word so we'll hit escape again we'll hit U to undo and we'll do shift G so I use that one quite a bit when I just want to like get rid of everything at the end there and so I'll hit escape and undo so the idea is that you're trying to figure out the least amount of presses to do the thing that you want so imagine I want to get rid of lines 4 to 9 and then enter insert mode because I know immediately that I want to do something so we have 1 2 3 4 5 six six lines um so I'm going to try or sorry one two three four five I want to go down five lines so I'm going to type in C to change and I type in five okay and then I'm going to hit J to go down five lines and so I took out those five lines all right so I'll hit escape and undo okay but the point is that we're entering insert mode because we want to do something there so just think of those things that you can combine it with any kind of word motions if we want to go backwards let's say we want to change to the front of the line I'll do c and then I'll do uh carrot to go to the front Okay so Works in both directions un undo that imagine I wanted to go back uh just a single word I can do change C for change and then B for back okay hit escape to get out of that mode undo all right so it's not a delete it's a change the idea is that you want to enter into a mode to start typing something okay all right let's take a look at delete so we have a few I mean you can imagine what delete does but delete is going to do a few things so we might want to delete uh to the to the next word delete the next two words uh next to next two start of the words DD to delete the current line 5 DD to delete five lines uh Shifty to delete to the end of the line and then we have X which deletes the current selected character uh so whenever you delete something and I should have said this for change as well but anytime you uh uh you imagine that you're removing text like text vanishes almost like it's getting cut or deleted it's going to end up in the unnamed register which is the clipboard which which means the next paste action that you will use will will paste that thing we'll talk about that when we get to paste okay all right so we're back in our document and I want to go ahead to this line here for and let's delete some stuff so let's say we want to delete to uh this word here cluster so we have to go to the end of this one one 2 3 four so four to the end so we'll do D okay notice it it went half because it's ready to do something just like when we hit C and say 4 e now notice that we're not in insert mode okay so when you want to delete something and then immediately enter insert mode you're going to use C and when you literally just want to get rid of something you're going to use D because you want to stay in the mode that you want to be in otherwise you have to escape and that's an extra action right um so what I'm going to do here is hit U to undo and uh now let's try um lines because lines are more interesting I think so what I'm going to do is I want to get rid of line four so I'm going to do is hit DD to get rid of it okay and then I'm hit U to undo all right DD to delete the line U to undo now if I go in the middle of the word here like configuration imagine I want to get rid of just the end of the line so what I'm going to do here is Type in D and then dollar sign to the end of the line now I'm still in normal mode right so I can just hit u i don't have to escape but we could just do shift d which is going to be more convenient just like the shift C the shift d will delete to the end of the line so we'll hit undo there all right uh X is a useful one if we hit X it will just delete the Single Character so sometimes you just want to get rid of single characters I want to undo that entire line so we'll do shift U to bring those back if I wanted to um I think like delete the first next four characters I think we do 4X we'll try that out and it works I just guessing here because once you start to learn the patterns here you can start making up your own things that will work for you okay so hopefully that is clear but uh I just want to show you one thing we'll talk about this in the next video but the idea is that every time you uh Delete or change something it's actually going into the unnam register and it's basically like you cutting or copying something into your clipboard so let's say I wanted to delete this line I'm going to press DD if I wanted to bring that line back I'm going to type in shift p to paste above and it's back because it's the last thing in My Clipboard if I do shift p again notice it's in my clipboard okay so I brought all those lines back with shift p i want to get rid of these lines so we have one two 3 4 5 6 7 8 9 10 11 11 here down below so what I'm going to do is just type in 11 DD and now we're back to here okay so we'll see you in the next one ciao all right let's take a look at yank and pace so yank will copy text into the clipboard to be pasted later um and it's not really clipboard it's actually the unnamed register but I'm going to keep calling it clipboard because that's the easiest thing to think of it so imagine you want to yank a word Yank A Line uh yank the current line which will be capital Y so you might be starting to see a pattern that sometimes capitals means that it's applying an entire line or a double letter is is a line but um notice that y y and capital Y are redundant I don't think we checked that in well shift d went to the end of the line but definitely capital Y is the current line it's not like to the end of the line but we'll test that to make sure that's true uh for p we have paste before or paste after so above or below paste before and after makes sense only when you have yanked entire lines if you're copying individual words uh it doesn't work how you think it would work okay but let's go take a look all right so we're back in our document I'm going to go to this line here and let's try out yank so what I'm going to do is type in um actually let's go to a random line that we weren't at before like ALB Security Group I'm going to hit y y to yank the entire line okay so y y to yank the entire line and so now I'm going to hit P to paste so notice it pastes down below we'll hit undo if I do shift p it will paste above we undo P below undo shift p to go above so pretty clear all right now let's say we wanted to grab this line here I'm going to try shift Y and see what happens sorry shift Y and now we p uh we press P not now we P but we press P right uh that was kind of embarrassing but notice that it doesn't go to the end the line it copies entire line so it doesn't work like how C or D does where goes in the line but it takes the entire line so it's up to you whether you want to do y y or shift y but I find that I use this command quite a bit uh if we wanted to uh copy very specific words like Network and cluster we'll press uh y to get into yank mode now so notice that I mean it's not really a mode per se but notice that it's now half a character so it's ready to do yanking and so I want to get I want to go 1 2 3 so um 3 e to copy Network and cluster so now I'm going to do p to paste it and notice it's pasting in there if I do P or shift p it makes no difference so if we go up to this line which is empty if I do p okay it does not matter if it's p or shift p but that's how you do that and so often you know you'll want to do that uh let's imagine that we want to select um two lines we'll do two y y and then shift p and I'll paste the two lines we'll undo pretty straightforward okay all right so youve patiently waited and now we get to do aend and insert and append and insert are probably the most commonly used commands because often the whole point of a document is to modify to write and a and I are going to really play a role in that well so let's take a look at these command so these commands will insert will enter insert mode there's no append mode they're both insert okay so a is going to append insert is going to insert a is going to append to the end of the line and I is going to insert the start of the line so I have a visual here to help it makes sense imagine your current cursor position is on the E okay so if we were to press I it's going to put the cursor to the left of the curs uh to the cursor box okay that's going to be insert mode if you press a it's going to go after the letter okay after the cursor box if you press shift I it's going to uh put you to the beginning of the line in insert mode if you press capital A it's going to take you to the end of the line in insert mode and I use these all the time okay all right let's take a look at insert and aen so I'm going to just click my mouse here to uh maybe the word cluster and so we are hovered over here I'm going to make this much larger um just for this purpose here just because I want to play uh uh pay very close attention to what we're doing so I'm just going to make it really large here and so notice that my um cursor is blinking here on the C and so what I want you to do is press I to go to insert mode so now notice that it went to the left of it right and so now I can start typing stuff so like hello I'll just hit Escape okay and we'll sit undo so let's try that again we'll press I it goes to the left notice that we are insert mode down here okay and we can type in front of it okay I'm going hit escape to get out of that mode I'm going hit U to undo all right now let's go take a look at a so we'll press a and notice that it inserts to the left of the character why do they have both because it's all about efficiency right you want to again make the fewest amount of keystrokes to get what you want done here um so here you know we can type whatever we want I'll hit escape to get out of that insert mode and we'll hit you to undo now let's say we want to edit something at the start of the line where characters actually begin not the absolute start but the start line I'm going to do uh whoops undo sorry whoops whoops whoops whoops whoops it's very easy to mess up in Vim but we'll do shift ey and so shift ey will bring us to the start of the line where where there's actually characters it's not literally on on the actual start of the line but here uh to the stuff and so I can start typing stuff like Hello World okay I'll hit undo for that if I want to go to the end the line and uh start inserting I'm going to do shift a capital A and I can just continue on here okay we'll hit Escape undo so those commands extremely useful you'll be using them day in day out okay this is a very useful command I don't think it has a proper name but I call it line insert so line insert allows you to quickly create a new line above or below the current line and enter insert mode it's very simple it's the o key so it's uh o is going to insert uh a line below and enter Insight mode and then uh capital O will uh insert a line above and enter insert mode EAS way to remember this is that below and above both have an o in them that's all I can think of why they might have named it as o um but also the fact that it's really close by is another reason okay all right so we're back in um our document here I'm going to go back to this line here so imagine that I want to create a new line below and start adding to this list so what I'm going to do is is Type in O and I can start typing it even match the invitation level so I can just continue on where I was I'll hit Escape undo so we'll try that again we'll press o and I can add another item super super useful we'll hit undo imagine we want to go above we do shift o all right undo shift o Escape undo and I'm not always saying that but just remember that when we do this it enters inert mode okay you got to remember that certain commands will enter you insert mode and you have to hit that escape button afterwards uh but there you go all right let's take a look at the fine command so the fine command lets you quickly find and move to a search result I use this all day every day because it brings me to exactly where I need to be if you type in forward slash that's going to start that fine command it's going to move forward to the uh from your current position to the the key uh the word here which is hello if you want to go in the opposite direction you do question mark I rarely ever do the question mark because once you start searching you can always just um change the position which we'll talk about in a moment one thing you can do is you can also say where you want to end up after the match so if you want to um go to the start of the match so imagine that there is a word that you're selecting you want to be at the start of the word you do s and then you want to offset it by uh uh either plus or minus characters you can do minus two so you'd be two behind the front of the word if that makes sense and you can do Plus in the other direction e is for the end of the match um and so you can say go to the end of the match and then add four characters you can also offset by line so I can say plus three lines to go three lines below and what if you have multiple matches well that's where the N key comes into play so that will get your next match or if you do capital N let shift n it will go to the previous match okay all right so let's give this uh a spin so what I'm going to do here is I'm going to go top of the document I'm going to click into here I'm going hit forward slash on my keyboard now Look Down Below in the command line here it's it's waiting for us to put our our match in here so I'm going to type in the word hello I'm going to goit ahead and hit enter it did not find anything for hello so I'm going to type in for slash again and this time I'm going to type the word cluster because we have cluster here and notice we have one out of 11 match matches so notice that it's jumped to the start of the match I'm going to go ahead and hit next to go to the next one next to go to the next one all right if I want to go back I'm going to uh do capital N okay so shift n or n to go to that so pretty clear how that works all right now imagine that we want to um go to the next word cluster but we want to go to the end of that word so let's try that again so I'm going to type in cluster I did forward slash look down below forward slash cluster forward slash again and then we'll put an e and we'll hit enter and now we're at the end of the word if we hit n notice that it does the same thing it's going to remember that we want to go to the end of the word every single time I'll go back up to here let's try another one so we'll try for slash cluster to match for slash I'm going to do plus one line okay so now what I'm doing I'm hitting n to go to the next line line but it's jumping me to the next line I'll do shift n to go back so it's up to you whether you decide that's useful or not I don't really like that one but we we'll try this again so I'm up here I type forward slash cluster look down below I'll do forward slash again and we'll say the start of the word minus uh one okay so now look we're at the word cluster but one character to the left and if we hit n we'll do that but again for the most part you just type in hello whatever you want fargate and you just jump to what you want could you use regular Expressions here I actually have no idea let's give it a go so I'm going to type the word uh cluster and then I'm going to do uh period for matching and then I'll do period again so yeah I guess you can use reg X's I never actually use reg X's I usually just know what I want um and it'll work but I guess you can use regular expressions in there so that's nice to know but yeah there you go all right let's take a look at the substitute command so substitute is a command that lets you replace text in a file using regular expression I use this for um simple Replacements but if you find that this is hard a lot of times I just will use another editors uh find and replace I'll literally drag files into another editor just because this stuff is um hard but it works for simple stuff so let's take a look here so the first one is um first we're going to use colon to bring up command and then we're trying to say the context so if you remember back when we were learning about the Ed editor we had to um tell it to select certain lines and so here period represents the current line so we're saying uh on the current line we want to substitute the match of hello which is a regular expression we can have what weever want and replace it with the word world so and it will replace the first occurrence okay here we're saying on line two substitute the word hello and uh replace it with word now world now we want this to be case insensitive so ignore the fact that if it's Capital H or lower c h if it matches the word hello match the word replace the first occurrence on the on line two and ignore casing that's what we're doing here then we have a range so remember the range from uh using uh Ed so we're saying two comma five so line two to five replace the word hello with world and replace all occurrences G stands for Global and that's what it does here we have one comma dollar sign so here we're saying the entire document right replace hello with world all occurrences and we have a shorter one here so this percentage is just a short it says short cut or short cute it's not cute it's cut but this is the same thing as this so often I will just do colon percentage s and I'll be off to the races I don't know why I have a space in between here because you don't need a space um and that might mess things up but let's go take a look at using substitute all right let's learn how to use the substitute command so I'm going to go to line two and I'm going to make a colon because we want to enter a command in and I want to change something on line four let's change the word cluster so I'm going to type the uh the number four for line four okay and then we'll type in s for substitute forward slash and then we'll type cluster notice that it's matching cluster here so we know exactly what it's thinking about to replace um if if you want you can use regular Expressions so I can do period plus and it goes in the line and then I can put maybe a question mark to say don't be so greedy um but you know uh I usually just type the word that I want okay so you can use complex regular Expressions uh it's not going to replace with anything so we have to put something in here so we'll say hello so now it's going to replace it with hello okay and I'll hit enter and it's replaced cluster okay so we'll undo that now normally when I use it I almost always do uh colon and then I'll just do percentage because that's pretty much easy you always want to look at the whole document so imagine I want to change all the words that are cluster in this document I'm going to type in s for slash cluster hello and by default it seems like it's case in sensitive which is interesting so I'm not sure what it would be to say like match the case but it looks like it's going to replace them all but if I just hit enter right now and I did what did it do so we'll do uh GG to go to the top and replaced all instances so I didn't actually have to put a g there but this might be the implementation of Visual Studio code but generally and this is specifically to to regular Expressions usually you put a g here uh to do that the way I know that is like I'm not saying that this is the regular expression engine they're using but if we go to rub.com we want to practice regular Expressions normally if you have a a piece of text here like let's just copy a piece and I wanted to match cluster notice that it's not matching this one and so normally I'd have to say I here to match those two okay so just understand that uh regular expression engines will vary based on their implementation um if we used regular Vim this might be a bit different so what I'll do so I'm really curious I'm just going to open up G Vim really quickly in here okay so I got G Vim here I'm just going to copy this block here I just want to see if it actually acts the same way so I'm here I'm going to hit I for insert and then I'm going to right click and paste I'm going to hit escape to get out of this mode because I just want to test I'm I just want to test to see if this works properly so I'll do GG to go to the top and so what I'm going to do is do dollar sign here down below here and I want to do percentage s for slash cluster hello and then notice it only replac the first instance I didn't put a g on that so it only replaced the first one we'll do undo I think there's only one word cluster though so let's try try that again so we'll do colon percentage s and we'll say cluster hello and this time we going to put I here okay so replaces both so I didn't have to put a g on there but again you know uh you have to use these things and figure out what works um but I know that g is something that you can put on there as a command but notice that in this one you had to put the i in so just understand that the engine is going to vary okay and Neo might be different from uh Vim 9 versus dim 3 versus what vs code does versus whatever does um but yeah I again I just try to use the the find and replace when I can but I do use this for smaller uh substitutions okay let's talk about a special key called The Leader key which is by default map to the backslash you can see it over here all the way on the right uh normally your enter or your enter return key would be here so hopefully that makes it clear this key is specifically used for triggering user or plugin defin shortcuts uh one that I use a lot is the nerd commenter plugin hotkey which should be leader key CC um and you can map your own keys if you want to um set up the leader key so this is an example of um something that we could map some devs don't like the location of the leader key and we'll map it elsewhere like the space bar I leave it where it is cuz I think it's totally fine okay all right um so in this video we're going to take a look at the leader key what I'm going to do is go over to Janice because I just want to show you uh where there are some mappings so you get an idea of like how often these are used um and then we'll go set our own uh mapping for a key okay so I'll go back here to Janice and we'll just scroll on down and I want to show you here let they have leader ew leader ES and they have a bunch of commands to do a bunch of things so hopefully that is uh pretty darn clear uh we aren't going to be able to do things over here because we actually have to um update our vimrc file so we'll do this with uh GM G Vim here today and what I'm going to do is go ahead and say file open and we're going to open up that vmrc file and um I'm going to ignore this just say make changes no I don't care and so we had that plugin here before I'm just going to take out cuz I don't even want to use that plugin I'm going to go insert mode and what I'm going to do here is I don't know if I can make this larger no I'm not sure if I can make this window larger here the font it's kind of small select font here uh 14 16 here let's see if that's 18 is that a bit better there we go now we can see what we're doing and so what I'm going to do here is uh remap a key so so we have n no remap I don't know what n no means but I just know that that's how you start a remapping and so we'll do leader and we'll do B this will be something we learn about later is buffers but we're going to do this right now so we'll do buffers and then CR buffer space okay I've never bothered to learn what all the stuff means but I copy and paste them and it works so that is fine so I'm going to go ahead and hit Escape here and I'm going to do colon WQ which will quit out of GM I'm going to reopen GM you can do this wherever you can set a vmrc file and hopefully this works I'll bring this on over we've lost our beautiful font size we probably have to set that as a default and I'll make that a bit bigger still kind of small say 18 here 18 there we go that's better and so the idea is that if I press the leader key it was leader B so we'll try leader B okay notice that it triggered that buffer command because that is what we configured um and so I'll just hit enter so I'll do leader B and so that shows that there all right so that's how you would set that key but just understand that when you install plugin some of them will require the leader King you need to know where that is okay let's take a look at visual mode so visual mode allows you to select text from either yanking deleting or manipulation we have three uh modes here we have the visual mode which allows you to select multiple characters that's the regular V capital V which is for visual line mode for selecting entire lines and control V which is my favorite which is a visual block mode allowing to select vertically uh and by line so I think it's by line as well but we'll we'll find out here in just a moment okay all right so we're back here in um right I'm just using the the uh hjkl Keys here and this is what I want to copy then what I'm going to do is hit Y to yank and so now I'm yanking it says down here seven lines yanked and so if I do shift p I'm pasting that selection will undo okay you could also use that to delete so if I do V again and we go down I'm just using those uh hjk commands and I hit D that's going to delete them we'll undo that we'll try that again so I'll say V and I'll go down somewhere else anywhere doesn't matter and I hit um C it'll change and bring me into those modes so we can do our r c r d or Y or yank or delete or change right uh let's take a look at shift V I use this one quite a bit because if I want to select multiple lines I do that I just go up and down and it will always select all the lines this is useful when you want to yank a bunch of lines and then paste them above I find this faster than than having to figure out the number and then go 22 yank or whatever it's just easier to go shift V and just select what you want now what is really really really really useful is control V I find this to be extremely powerful H so imagine that we want to on this line insert something in front of here all like in this entire line right let's say we want to put um a dollar sign all the way down here so what I'm going to do is go do contrl V that's going to enter me into visual block mode and now want to hit J to go down notice okay notice that it's selecting vertically and so if I hit C I can now do dollar sign or type whatever I want hello and that is super powerful right so I would say that one's one of my favorite I think that if you're at the end of the line if you do that let me just see here if I do one space on the end here and I do um contrl V and I go down here it'll actually select all the ends of the line so I can then go ahead and say C it didn't exactly work we'll try that again okay for some of it's it's working for some of them they're cutting it off and again this might be an issue of Visual Studio Cod uh Vim implementation yeah but I don't think that would happen in regular Vim so let me go ahead and just try this out here for a moment so I'll copy this here I'll Escape hit I to go to insert mode right click past hit Escape I'm going to try that again so I'm going to do shift a to go to the end of the line I'm going to hit Escape I just want to get it a space okay and I'll try uh V and I'll go down and now this acts completely different notice that it's just like cutting right through it so just understand that the behavior again is going to change um I'm pretty sure I've used it somewhere else where it'll actually always go to the end of the line but anyway that's that so that is visual mode let's take a look at indentation because this is something we do quite a bit with code the leading white space can be adjusted based on the tab size indentation so indent line outward to the right indent line outward to the left you can use count to modify the amount of lines useful to use the visual line mode when you select your line so let's go ahead and give that a try all right so we are here in with Visual Studio code I'm going to click here to this line and imagine that I want to select uh the first seven lines honestly every time I use this command I always do shift V and go into visual uh visual line block mode or visual line mode which is what I recommend to do and so I'm going to go down to a few lines and now I want to indents indents so to make the arrows you have to hold shift on the period or the comma on your keyboard and so I'll make the right arrow or angled bracket and I'll move that way and I'll I'll select it again and I'll do dollar sign that way okay um and there actually is a way to uh get your selection back so if you lose the selection there is a way I didn't talk about that before but I'm trying to remember how do we get that back just give me a second and wow I cannot believe I forgot the command but if you type in G and then V that will grab the last visual mode so remember G and then V because I just wanted to get those again so what I'll do is type in three and then do the right arrow or right angled and it'll indent it three if I select again GV and then I want to do shift and then to the left it'll bring it back to the wall so pretty straightforward uh you can do individual lines so here I'm just doing individual lines I'm just doing um uh the right angle bracket left angle bracket but that's indentation but for the most part I'll do shift V and do that and I forgot about GV which is really nice to get previous selections uh in the visual mode so I'm not going to go back and adjust that we just just done it here but there you go all right let's take a look at Windows splitting so Windows splitting allows you to have multiple windows open on the screen at once so here's an example of us splitting a window and if we take a count we have uh one one two three and four you can split them as much as you want and sometimes you'll uh some some people look at my screen and they'll see like 14 split windows they're like how can you keep track of that and I'm like I don't know you get kind of used to it and I find uh Windows splitting extremely effective it's one of the reasons why I I will work in macm over Visual Studio code because the ability to split windows and have uh finetune control of it is extremely useful um so the commands here is we have control W uh which is the modifier that you want to press to to work with Windows always going to be control W and so we want to split horizontally we hit H want to split vertically it's going to be contr WV if we want to close the window it's going to be control WC or we can do Co and close to close the window if we want to move around between Windows we're going to do contrl plus W and then the direction um and the direction is going to be those hjkl keys okay so let's give that a go all right so I don't think we can do windows splitting in uh VSCO but we'll take a look here so if I do contrl WV oops cancel it WV it notice that that key wants to close the browser so that hcky is already taken up there and vs code is not going to split the way that we want our stuff to split so I'm over here um in uh vs code in the terminal I'm just going to go uh Vim I just want to open up the project here I think this one's messed up so I have to open up a new one here so I want to open up this uh directory that I'm currently in we'll do Vim period and that will open that up now this shows a directory because I've opened multiple files but I'm going to go down here and I want to open one file uh maybe not just yet but I'm using hjkl to move here but I'm going to go down here I'm going to hit o to open a directory when we're in this directory listing uh these keys are a little bit different okay so um o doesn't do insert above it it actually changes the behavior this is now o to open a folder and so I'm going to go here and I want to open up uh let's say banner ads all right so now it's split three which is kind of a mess it's just how the default directory Works normally people replace this with nerd tree or something else but what I want to do here is I want to get rid of these two other windows so what I'm going to do is going to do uh control W J to go down okay so now I'm in this window I'm going to do control w c to close that window but I want to I could do colon and close and so now I have one window and so often I will start splitting things so I might have like contrl WV control W or sorry control WS to split I think I might have said in in uh earlier hold on here I might have said here H for horizontal but it's actually S I apologize it's not I'm not going to go fix that video because H is already being used for moving left so that makes no sense but if we go here like um notice I can't click here so this is where um it kind of sucks because we're limited based on this and this is where G Vim becomes very handy because if I open up G Vim okay um this will be a lot more useful if we split here so I do control V contr s contrl VR S contr V notice I can split all day long but what's really cool is that I can go here and I can click and change my focus right and I can also drag these to be whatever size I want so this is where this becomes an extremely powerful tool okay so I have all these open here and so I'm going to do contrl W J to go down whoops sorry control W J to go down control w L to go right contrl WJ to go down contrl w k to go up and you got the idea so um I love this I use this quite a bit and this is one reason that again I will prefer to work in u g Vim or Mac Vim because I'm going to be more efficient this is even better when you have the nerd tree here or some kind of nerd like some kind of uh thing here but um the default one is not very good so maybe I'll just quickly show you what that experience is like as with nert tree so you can see how efficient it is um so I'm just trying to think of how we can do that and so maybe what I'll do is I'll just install Janice because that's just something really easy to install it's a lot of work to install um uh at least I always find it hard to install uh ner tree or something like that nerd tree versus B tree and nerd tree is one that was been around for a long time but a lot of people try to migrate away from it because nerd tree is not known for being very efficient when you have a lot of files um but for the most part I've never had many issues with nerd tree so I want to go do that so going to go ahead and grab Janice I apparently still have it here and I'm going to go ahead and just install it again you're just watching now this is more like Advanced functionality so you don't really necessarily have to uh do this but I'm just trying to show you uh how things become very powerful very quickly when you have the right tools installed and the right configuration if I get this working with G it' be really great but um doesn't want the dollar sign there but I'm not a Windows user so I don't know the best way to do it but I'm going to just install GM here and we'll just give this a moment to install all right so now it says it's installed again just watch so you can kind of get an idea but I'm going to open this up in vim and so now it's open and it already has nerd tree here and so right away I'm going to use the control W to move back and forth here and this thing now works more normally I'm going to hit o to open it up and then now I open a file o and so I can go between here and I can go here and say uh control W split and then I can go here and open up this file I can split this vertically and then I can go to this one um and uh I'm not sure why but when I'm when I'm using this I I kind of start forgetting the uh keys I'm thinking too hard about how it works but some of these Keys like if I want to control nerd tree I'm just going to go ahead and take a look at what the command is because for some reason I forgot how to do it and so here I think it says leader end to toggle it I'm not sure why forgot that but it's uh lader n and that will get rid of and bring that back up we can also uh search across files which is really useful so like there's um uh a key for search across files let me see if I can find it here um I'm not sure why again it's just like this is muscle memory for me but when I have to start telling you stuff then I completely forget and uh what is it contrl P or control t uh is it control T nope control contrl P I completely forgot I can't believe it um but what I'm looking for here is I'm looking for the uh the global search because that's there just give me two seconds to find it yeah the command I'm thinking about is the control P command so fuzzy find buffer mru tagfinder replaces the command T command so for users uh of command T Janice Maps control uh control P to the uh DT command which I don't really understand why it says DT but I would have thought been leader leader liter T So if I do liter T here liter T nope that's not it lader P nope what the heck is DT all right we'll try this capital D T nope but normally what I could do is I could search across all the files so uh maybe we'll just click into this I just think this is such a cool a cool thing I mean we have it in other things like um uh other things here but basically what it'll do is it'll bring up a search and so you can search across stuff so here they're saying like contrl P so yeah I guess I could do that here let's just say contrl p so now you can just search across files and say auditor but normally that's a that's a leader key so you do like leader leader T and and that would normally pull that up but for some reason it's pulling up this tab thing so maybe they've changed the configuration since I last use it but you can see how you could be really productive very quickly with this if you can just remember all the commands um but yeah this is uh this is what this is how I like to work but I'm going to go ahead and just quit out of that and do control q and we'll just keep quitting out of this there we go um but that experience would be again a lot better than G Vim but I'm not going to invest that time to learn how to configure that in Windows um if you want again use Windows as your primary platform and uh figure out how to hook up WSL and stuff like that you'll have to investigate that yourself but I'm going to just tell you if you're on a Mac it is so easy to use Mac vim and take advantage of this stuff okay all right let's take a look at uh buffer so a buffer in the context of Vim is a temporary memory being utilized for an open file every time you open a file you create a buffer and it's pushed uh it pushes the buffer uh it pushes the buffer onto the buffer stack buffers are only deallocated when you completely close Vim so if you have 10 open files you have 10 buffers and uh there are a few commands that we have here we have the ls or buffers command the same command we can uh pick a buffer by doing buffer and then the number or the file name we get the next buffer with B next B previous B first B last and then we can apply uh changes to multiple files basically buffer so like here's a substitute that's going to cross Lo multiple fire files here's what buffers look like here on the left hand side and you can remap the keys which some people do honestly I never mess with buffers I think buffers are probably useful before people had nerd tree or like some kind of way of navigating but now that I have that I I have no interest in ever uh working with buffers but um it's just the point that you build up a lot of buffers over time and only closes when you close the app we'll take a look at buffers okay all right let's take a look at buffers and we're not going to be able to look at this in vs code because it's just not a feature that exists so if I do colon LS or um that didn't really help that might have already been a command that's in here but if I do colon I have to open up a file to do this I lost the file that we in here we go but I do colon buffers notice it says this command is not yet implemented because it's just there are no buffers in Visual Studio code so it's not going to do the same thing if we go back over here and I'm in terminal so I'm opening Vim in terminal and I still have Janice installed but let's say I open some files I'm hitting up and down and I'm just going to open some files I'm just showing you this you don't have to do this yourself so look I'm just opening a bunch of files just a bunch of files and now I type in buffers this is all the stuff that open so and it's opened in the order that I did it I have no idea what these characters mean but what people used to do is that they used to not have this here on the left hand side they would navigate completely with buffers okay um and so if I go here um we could say like get next buffer stuff like that but anyway I don't do anything with buffers but the point is is that buffers are here um I don't know there's not much for me to say because I really don't use them but they are here and the idea is that you can move between them but let's take a look let's say what would happen if we did B next okay and then we can do B previous so that again that's just a way of moving around so we do LS look at the buffers uh we could try oh enter we'll say buffer 4 move to buffer 4 and that is a way of navigating around but again if you have a nerd tree or something like that or you have contrl P where you can search across files very easily with um like a hotkey value then you don't really um need that there okay so there you go all right let's talk about registers so registers in Vim are memory allocated for a block of text you can think of registers where your clipboard or undo history is stored and the one that I just really want you to know about this is why we're talking about registers is the unnamed register so whenever uh you use yank delete a put operation like change um or something like that that thing goes into the unnam register that's going to hold that text for you but there's other registers you have so you have the numbered registers name registers read only registers and special registers these ones here just how we saw buffer it's just numbers it just numbers them so you can figure out what it is and you can give it a the buffer name or so the register name so you can pick it out by its name then over here we have readon registers which allow us to um have selected text and we kind of used these before so remember we were using um yank last text no I I thought this might map to the other thing remember like the ranges and stuff but it doesn't but here we have like zero so we say we want the last y text we do zero or uh deleted text from the the ver the numbers uh back or uh here this current file name or whatever then there are special registers down here where we can search across stuff let's see if we can make sense of registers again I don't really use them but the way registers work is they start with this um uh double quotation so let's play around with them but they're not that important to know I just want again for you to know about this unnamed register and that that's where your stuff is going when you uh are deleting changing things okay all right so I left this open from last time because I can't use registers in Visual Studio code but we'll take a look at registers here so I believe the way they work is let's say we copy some text I'm going to go here and I'm going to go ahead and just uh yank this line and say y to yank it I did shift V and then y to yank it and then down below I'm going to do quotation and again I'm not really the best at figuring out registers give me two seconds okay first let's try the r command and see if we can see registers okay here we go so now we can see some registers and I think that we're seeing is the last command we copied so this is the unnamed register I believe because it doesn't have a number here and so it's going to um output uh that there when you use it right so if I did P it would it would paste that that value but I think what we can do is we can use P here paste in order to paste a register so if we do a quotation and then let's say um quotation and then one it should print out that so let's give that a go and see if that actually works so I'm just going to hit Escape here or enter and so what I'm going to do go up to M line here I'm going to go uh double quotation so I have to do shift and then we'll do what was the number two and then P okay that's not what I wanted because I I guess I don't remember what the number was and the number was uh it's actually one in this case we'll try that again enter here so go back up here I'm going to try double quotation one p and so it prints out the pry and so that's the idea it's kind of like a clipboard um but again I never use registers um I guess they're probably useful if if you could figure them out in a more advanced way but those are the more advanced things you should know about registers and buffers um and that's pretty much all I really wanted to cover it would have been nice to cover Mark um which allows you to go back to your mark position but um I I'm not really worried about that one okay but I'll see you in the next one okay ciao all right so I'm back and I just wanted to show you um something that you could utilize cuz now we're at the end of the um the course really and so I just wanted to show you that you could print out like a cheat sheet so you type in cheat sheet Vim I remember this one being around forever I swear that uh I know if this is the original one or this is the original one but this kind of looks like the one that I I'm used to or this one here and so these ones are pretty good where you can print them out um or uh this one looks pretty decent as well but generally the idea is if you print this out and put it to your monitor you now have a way to work with the stuff and basically you can just open this up and you can pretty much see how most of the stuff works and uh what would be really interesting is to take a look at Mark because we never used it but if you look here we have set Mark okay so that's set Mark and there's some way to go back to a mark so that might be interesting to find out so just give me a moment all right so I just like staring at this for a while but if you look here it says goto Mark is here with the the um uh single quotation so let's go give that a try for fun um I don't think this would work in Visual Studio code but we'll try this in um in the terminal still in Visual Studio code but I still have this open here and so what I'm going to do is I'm just going to go somewhere random so let's say I want to be here right here I'm going to type the letter M and then I'm going to give a a letter to indicate the mark so let's say I want to call this e that's Mark E so if I go all the way down here let's say I'm somewhere else like at the bottom of the page page if I now do single quotation and then e it should jump back uh uh to there now what's interesting is it didn't go exactly back to where I wanted to so I'll try that again so let's say I'm on this line here and I say uh Mark R and I go down below here and I do single quotation R it's going to the same line so not exactly what I want so if I look at this again there's probably a character here somewhere this says jump to mark this is go to Mark and this is jump to Mark so let's take a look what would happen if we um instead of doing the single quotation we did the back tick okay the back tick is this here it's the same thing where the Tilda is so if I now do till the r it's going back to kind of looks like where I was so let's go back on this o here I'm going to do Mark E I go down here I'm going to go Tilda e yeah it goes back so there we go it's not hard to pick up new things and whatever you want in Vim absolutely exists you just have to look up uh Vim plugins so if I go here there should probably be a website for Vim plugins I think Vim awesome is for a bunch of awesome plugins right but you basically can find pretty much anything you want okay so you just have to kind of go through that and find something and uh you know there's there's just tons and tons of stuff um but anyway there you go that's it all right there we go so that's the end of the course and what I want you to do is I want you to go and try to utilize them for 14 days the best you can in Visual Studio code which I imagine most people are using as their IDE or if you're using a different ID just see if you can turn on that mode and use those basic commands because you'll have the directional commands the the Motions the change replace the yank the delete uh the find which is very useful and try to figure out what works for you because what works for me is not necessarily what's going to work for you when using Vim everyone has a different workflow with vim and and what they want to utilize with it but um you know again it's it's going to be a longterm investment uh for you for a short amount of time and if you want to go more deep into Vim you can absolutely do that but if you want to stick with Visual Studio code and just use the key Bindings that is totally fine as well but there you go ciao