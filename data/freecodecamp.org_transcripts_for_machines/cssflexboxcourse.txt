hey there in this lecture you're going to learn how to create your very first flexbox layout using the example you can see on the page here i've already added a little bit of styling in the basic.css file though this has nothing to do with flexbox itself here in the index.html you can see the markup for the example it contains a nav element with the class of container and inside of that container we have three divs which are the flex items as you might guess we're going to create a navbar here as this displays home search and logout now the first thing you need to understand is the concept of a container and its items as that's always how you build up your flexbox layout they don't have to be divs or navs could have been ul element and this could be list elements or whatever you want as long as they are direct children of the flexbox container they turn into flex items so let's turn this example here into a flexbox layout i'm going to head over to the index.css and i've already given the container a border which you can see around the example here but as we haven't done anything else with this layout these divs will now just stack themselves on top of each other so to turn this into a flexbox layout simply give the container a display of flex as you can see it automatically lines up the elements horizontally as opposed to vertically as it was before so by default flexbox will distribute the items going from left to right and as you also can see the flexbox container is by default a block element as it takes up all available space in the width except for the little margin i've added to the left and right hand side okay so that was a very quick introduction to flexbox in the next lecture i'm going to teach you about the concept of axis as that is core in order to understand flexbox properly so i'll see you there hey in this lecture i'm going to teach you about access as that is a core concept you need to understand in order to work properly with flexbox because a flexbox container always has a direction and by default this direction is horizontal as that's how it lays out its items starting here on the left hand side and going towards the right hand side what we then say is that our main axis goes from left to right along the row and we also have a cross axis which goes from top to bottom now the reason you need to understand this is that we're using different css properties in order to position our content along the main axis which goes horizontally in this case and the cross axis which goes vertically in this case however that's not always the case as we can also flip the direction of the flexbox container let's do that we'll head over to the container and give it a flex direction by default this one is set to row so if we write row nothing will happen however if we change this to column now as you can see that results in stacking the items from top to bottom going downwards instead of going from left to right and now the main axis actually goes from top to bottom and the cross axis goes from left to right now we're going to flip this back to row as i've found that i've used the default direction much more often than the column direction when building websites so i want to focus on that in this course as i wanted to be as practical as possible but i want you to be aware that the main axis is horizontal because the flex direction is set to row however it can be vertical as well okay in the next lecture i'm going to teach you how to position items along the main axis so stay tuned and i'll see you there hey there in this lecture i'm going to teach you how to position the items along the main axis which goes as you hopefully remember from left to right and that's because we probably don't want all of our items to be squeezed together over here at the left hand side because we might for example want a little bit of spacing in between them or maybe move the log out item over to the right hand side so let's jump into the code and see how we can achieve this we're going to use the property called justify content as that's the one which controls the content along the main axis justify content can take a range of different values i actually want to paste in a few of them here for you to experiment with towards the end of this lecture by default justify content is set to flex start meaning that the content is squeezed together at the start of the main axis which is the left hand side if we change it to flex end and as you can see the content will move over to the end of the main axis on the right hand side we can also use center and that will of course center it now it also has a few other nice properties which start with space let's try this space round this value will give each item an equal amount of space on its left hand side and right hand side because as you can see when two items are beside each other the space is twice as wide as if as if it's only an item and then the start of the container or the end of the container because this space here is twice as wide as this space here and this space here so what i want you to do now is try out these last two values for yourself space between and space evenly so pause the screencast and change this value here to these two and observe how the items are laid out in the main direction and try to understand how these three space between space evenly and space around differ from each other once you've done that just resume back to the screen cost and then we'll continue with the course okay so hopefully you have been doing a little bit of experimentations if you have any questions feel free to ask them in the q a section and in the next lecture you're going to learn even more about how to position items along the main axis so i'll see you there hey in this lecture i'm going to explain how you can adjust the position of single items along the main axis using the good old technique of margin auto because these various justify content values are nice and handy but they don't always do what you want them to do for example i might not want to have the items spread around the container like this perhaps i want the home and search over on the left hand side and the log out over on the right hand side and that's not something you can do with any of the justify content values alone so let's actually remove justify content so that they're all squeezed together on the left hand side as that's the default layout now what i want to do is move the logout item over to the right hand side and as that forces us to target that item itself i've given all three items class names home search and log out so to change the log out item we'll simply target it and give it a margin on the left hand side and set that to auto and as you can see that pushes the log out item all the way over to the right hand side and this space here now is the margin left of the log out item so this is normally how i adding single items along the main axis if we want to have both the log out and the search item over on the right hand side we could simply target the search item instead so if i remove it from logout it'll be placed in the default layout and then i'll simply give the search a margin on the left side instead and as the search is before the logout in the markup it'll push the logout as well to the right hand side when it adds a margin to its own left hand side now i want to give you a little task first i'm going to remove this one here and i'm going to set the justify content to flex and pushing all the items over to the right hand side what i want you to do now is to make the home item rather appear here on the left hand side i want you to do it by adding a margin to the home item so go ahead and do that then just resume and come back to the screencast when you've managed to do it and then i will show you the solution as well okay so hopefully you pause the screencast and try that out what you need to do is to give this home item margin on its right hand side so we'll do margin right and set that to auto and boom that purchase the home item from this space here to this space here and this is now the margin okay that was it for this lecture in the next one you're going to learn a really cool property called flex which allows you to have responsive width on the items themself so i'll see you there hey in this lecture you're going to learn about the flex property which allows you to set the width of the items according to the width of the entire container meaning that they will become responsive that's unlike our current items which stay the same regardless of the width of the container so if we want all of these items to stretch across the entire container and grow and shrink with it we'll simply target the items with dot container select all the direct children which also are divs and then give them a flex property of one and as you can see they now take up an equal amount of space a third each and they grow and shrink with the size of the container now there's a little bit of magic here as flex is actually a shorthand for three other properties radar flex grow flex shrink and flex basis however i don't want to dwell about this now because i think there are other parts of flexbox that are more important to learn before you jump into understanding these three so we'll start by using flex the easy way and then in a later screencast i'll explain these three in depth but for now i'll just keep them here to remind you that this is a shorthand now setting flex to 1 is much better than the old way of doing it where you'd probably set the width to a percentage like this apple works however now you have to change this number whenever you wanted to add a new item in the container whereas with flex you can simply add as many items as you want and flexbox will take care of doing the math for you and making all of them responsive so let's actually try that out we'll turn on the flex again and let's simply add a fourth item here we'll call it profile let's run the code and as you can see let's automatically allocate space for all of the items according to how we've specified it here now each of them take up 25 of the width and they grow and shrink with the container we can also target specific items let's say that for example we want the search item here to be twice as wide as the rest of the items then we'll simply do container search and set flex to 2. as you can see it's now twice as wide as the three other items the reason i'm specifying container and then the child that container which i have the class of search is because doing just dot search wouldn't work as this selector here is more specific than this one and that's how css works works if this one is more specific given that it has both a class name and tag name its styling will be prioritized above the less specific styling added here as that's only using just a class name so let's use both that container and the child of the container has its class of search so that was just a little digression about css selectors so while this example here is nice for learning i can say that i very often use this way of creating layouts where all of the items are one and then some of them are two or three or whatever what i've found to be a more realistic use case is to have one of the items doing all the flexing while the others stay at a fixed width and we can achieve that by simply removing the flex 1 on all the items except the search now as you can see the home logout profile have a fixed width while the search item is growing and shrinking with the width of the container and now we can also remove the specification here and just use dot search okay now i want to give you a little task and before that i'm going to remove this profile item so that we only have three now as you can see the search in the middle does all the flexing while the home and log out are fixed with what i want you to do now is to make this layout do the exact opposite meaning that the search item will have a fixed width while the home and the logout will grow as you widen the container so pause the screencast and do that and when you come back i'm going to show you how i would do it okay so hopefully you paused the screencast and did the task now i'm going to show you how i would do it so i'll start by making the search item fixed with again to do that i can just remove this here and here now it's fixed with and rather give this value to the home icon now that is doing all the flexing and what i also want to do now is to change this to one because when this is the only item doing the flexing it doesn't matter if this is one or two or a hundred or a thousand or whatever you want and therefore i think it's easiest to just have it as one now we also have to give the same behavior to the logout item so i'll simply do log out and just as that we have both the home and the logout item growing and shrinking while the search has a fixed width now i really don't know why you would create a layout like this but this is at least how you would do it and that was it for this lecture i'll see you in the next one hey now that you know quite a bit about how to control the items along the main axis using stuff like justify content margins and flex i want to teach you how to control the content along the cross axis which in our case goes from top to bottom and by default the items stretch themselves across the cross axis to make this a little bit more apparent let's set the height of the container here to 100 now as you can see they stretch across the axis going from top to bottom regardless of how tall it is now a quick note on this height hundred percent this only works because we've set the height of the html and the body to a hundred percent if we hadn't done that then the height of the html and the body would just be whatever the container forces it to be meaning whatever height the container needs in order to display its content and thereby setting the height to 100 wouldn't have any effect at all just remove it doesn't do anything so this is a nice technique for having the container responsive in the height as well setting the html and the body to 100 and the container as well okay so by default align items is set to stretch so this align items here is the property that controls the items in the cross axis if we change it to for example flex start as you can see then they're pushed all the way to the top the start of the cross axis and they only take up as much space in the height as they need in order to display their content we can also do flex and that'll push them downwards to the end of the axis and of course you can also do center that'll center it now as a little side note here i want to point out that flexbox is great for centering an item inside of a container for example let's say that we only had one item here it could be a button with the x inside of it like this for example and we could easily center this inside of the container using align items and combining it with justify content and doing center there as well now as you can see the button is centered no matter how you change the container so that's a nice little trick which i've found often comes in handy when building various layouts okay so let's change this back again and remove this one because finally i want to show you how to align a single item at a time let's for example target the logout item we can then do align self after that for example to flex start that will push just that item to the top of the axis now what i want you to do is to make this home item appear all the way at the bottom here so go ahead and pause the screencast jump into the code and make that happen when you've done it come back and i'll show you how to do it as well okay so hopefully you managed to do that let's look at how i would do it i'm going to first target the home item and we're going to give it a line itself and set that to flex and because the end of the cross axis is all the way here at the bottom and now we have this really weird layout kind of a diagonal nav bar which also works responsively in a very weird way so i have no idea how you want layout like this you've at least learned how to do it using align self and align items and that was it i'll see you in the next screencast hey in this lecture we're going to talk about flex direction column because up until now we've used the default way of laying out items which is flex direction row meaning that the flex container lays out items along the row going from left to right so now let's try flex direction column as you can see that changes the container so that it lays out the items going from top to bottom and this again means that justify content no longer controls how the items are stacked across the horizontal line but rather how they're stacked across the vertical line and that's because the main axis now is vertical going from top to bottom and not horizontal going from left to right which it was when we had flex direction row like that okay so let's try and add justify content and set it to for example flex end that doesn't result in any change actually so why is that well it's because the height of the container is not set explicitly it's just as tall as the content inside of it forces it to be meaning that it has no extra space when it's trying to push all the content towards the flex end which is the bottom of the container what we have to do is explicitly set the height of the container to 100 and there you can see now the container takes up the entire window or almost at least and the justify content purchases all the content down to the bottom of the main axis now just as a reminder when using this height 100 you also have to set the height of the html and the body to 100 here okay if we change the flex end to flex start all the content will just be on top here that's also the default way of doing it as you can see we can also do center and that will center it okay let's now look at align items which controls the layout in the cross axis which now is horizontal going from left to right if we want to shove the items over to the right hand side for example we can do line items and do flex and that'll push the item towards the end of the cross axis as you might remember by default it's set to stretch to stretch so they stretch themselves all the way from the start of the axis to the end of the axis let's also try flex start and of course we can do center now i want to give you a little task i want you to make the content appear in the bottom right corner here so go ahead and pause the screencast do that and when you come back i'll show you the solution as well okay so hopefully you paused the screencast and completed the task let's look at the solution we want this chunk of items here to appear down in the bottom right corner and let's first push it all the way over to the right then we'll need to target the cross axis the align items and change that to flex end as this is the end of the cross axis the horizontal one now we also need to place it in the end of the main axis which now goes from top to bottom meaning that we'll also set justify content to flex end and there you go in the next lecture we're going to look at wrapping so stay tuned and i'll see you there hey in this lecture you're going to learn how to wrap items in flexbox so here we have our standard navbar it contains three items and each of them are just as wide as the content inside of them forced them to be what i want to do now is target each of the icons give them width of 300 pixels as you can see they now fill the entire width of the container however they're clearly not 300 pixels wide each they're scaled downwards as the container is less than 900 pixels wide in total however if we widen it here as you can see they become 300 pixels wide when the container is wide enough so what happens here is that flexbox won't allow you to set the width explicitly if there's not enough within the container itself to fill that content it'll automatically scale it down and by default it won't allow you to for example push any of the items down to the next row and that's because flexbox has a flex rat property set to no wrap by default it doesn't allow wrapping meaning you can only have one row or one column along your given main axis but if we change this to app instead you can see that it now allows you to wrap the content because you have the home here the search here and when it tries to fit in the log out it doesn't have enough room to add the item so it wraps and puts it on the next line the next row if we shrink the container even more it'll wrap so that there's only one item in each row now the total width of the container is less than 600 pixels meaning it can only fit one 300 pixel item on each row however if it has enough room it fills up with as many items it can on each row okay so that was a quick intro to flexwrap i'll see you in the next lecture hey there in this lecture we're going to take a deep dive into the flex property which we talked about in a previous lesson so now i have a very simple version of our navbar this time it only contains two items the home item and the logout item and they both have a flex of one that means that they'll take up half the space each and they'll grow and shrink with the size of the container however as i mentioned earlier flex is actually a shorthand property for three other properties they're called flex bro flex shrink flex aces and setting flex equal to run and when we set the flex value we're actually setting all three of these and even just writing one is actually also kind of a shorthand because what we're actually saying here is one one zero the first number is the grow value the second is the shrink value and the third is the basis value so this is also the same as setting one one zero so it's kind of three levels here you can write it the hard way doing like this or the slightly easier way doing it like this or the absolutely easiest way doing it like this okay this might seem confusing so let's actually go through these properties here one by one i'll remove this one and also comment out the flex grow and flex shrink now copy that over here now what we're going to do is set the flex bases on both of the items we'll set it to 200 pixels and edit that on both now we have a container with two items which each are set to 200 pixels at least they'll be 200 pixels if the container is more than 400 pixels wide so flex basis is a way of setting the base width of the element so they'll now stay at 200 pixels regardless of how much extra space there is in the container if there's less than 400 pixels they'll actually start to shrink but that's something we're going to look at a little bit later so let's not get ahead of ourselves there let's move on to the flex grow if we cut this out here and paste it in there and do the same thing here now you can see they actually grow with the width of the container so flex grow basically decides how much of the extra space should be distributed to the various items if we set them to zero on both of these this extra space will not be distributed to either home or log out since they both have a flex grow of zero however if for example log out gets a flex scroll of one it'll take up all of the remaining space and home will get nothing of the remaining space but as you saw if the home also has value 1 it too will grow with the size of the container and now as these values are identical both have one the flexbox layout will distribute the extra space evenly across the two items so these two numbers also work in relation to each other if we set log out to two you'll see that the logout grows twice as quick as the home this will be a bit more apparent if we use a larger number for example five now when it grows you can see that the log out is clearly glowing faster than the home item and actually it's growing five times faster so just to reiterate on that if we set both of these to zero then we have the extra space on the side and the wider we make the container the more extra space we have however if we give the logout next grove one it will take up all of the available space and grow into it we make only the home have a flex grove one it will take up all the available space grow into it and if both of them are set to one they will distribute the extra space evenly across each other okay so now let's move on to flex shrink let's set these like scroll values back to zero copy the shrink down here and down here so as you remember even though we've set the bases here to 200 pixels the flex container will force them to be less than 200 pixels if the container is less than 400 pixels like now now there may be 150 150 pixels each or something like that and that is because flex shrink is set to one meaning that they will both shrink at an equal rate and this is actually the default value for flex shrink so while the grow is by default set to zero the flex shrink is by default set to one meaning that if i remove this one and this one will still have the same behavior they both shrink at an equal rate let's get them back again okay now let's change the flex shrink to zero for the home item what'll happen now is that when we reach the 400 pixel threshold and the items will have to start shrinking the log out will do all the shrinking while the home stays at 200 pixels so the log out is doing all the drinking since it has flex shrink set to one while home does none of the shrinking since it has flex shrink set to zero now let's change the flex shrink on this one to something greater than one and see what happens then let's add five for example rapids now is that when we reach the threshold the home item is shrinking much quicker than the logout item it's actually shrinking five times faster than the logout item so these numbers work in relation to each other meaning that you have to look at both the numbers this one and this one to understand how one of the numbers play out on the page because now log out has a flex string of one and as you can see it shrinks really slowly because one is a small number in relation to five however if we take this back again and set the flex ring of home to zero then suddenly log out does all the shrinking because one in relation to zero is infinitely more okay so let's rewrite these two here to the behavior we want we want flex grow actually to be at one and we want flick string to be at one and do the same thing here and have the flex spaces stay at 200 so now they grow and shrink at the same rate and they have and they are 200 pixels by default so now we can get back to the shorthand again we're going to do flex and do 1 1 200 pixels this is the exact same thing as this meaning we can remove this and also copy it over to this logout icon okay so finally i want to give you the task for this lecture what i want you to do now is that once this container here crosses the threshold of 400 pixels i want you to make the log out item grow 10 times as fast as the home item so go ahead and do that and when you come back to the screencast i'll show you the solution okay hopefully you paused the screencast and did the assignment it's really easy actually if you want the logout to grow 10 times as fast as the home item you simply set the flex grow which is the first one of the three to ten and now as you can see the log out grows really fast and home grows really slowly however when they start shrinking they both shrink at an equal rate meaning when they're less than 200 pixels they both shrink and grow actually at the same rate but once they cross the 200 pixel threshold about here the log out takes over okay so that was it and i'll see you in the next lecture hey there really nice thing about flexbox is that it has socalled source order independence meaning that you can move around on the items regardless of how they're laid out in the markup and an example of this is the order property so let's see how it works we have the three items home search and log out in the container here and i've given them number as that simply makes it easier to follow what's going on here i've also given them classes of item 1 item 2 and item 3. let's head over to the css and give the item 2 for example order property one and what happened here is that the search jumped over to the third spot where the logout used to be and i've not changed anything in the html the source order is still one two three but the order on the page is one three two and you might be a little bit confused about why setting the value to one results in it being placed all the way at the end and that is because by default the order is set to zero so whatever items that have an order above zero for example one will be placed at the end however if we give it a value below zero for example minus one it'll be placed in the beginning so let's also add a selector for item one and item three and by default we're all set to zero so if we set them to 0 that won't result in anything if we want the first item to for example appear at the last spot can give a value above 0 for example 5 or four or three or two doesn't matter stay at the end of the main axis as long as its order is above the order of the rest of the items so what i want you to do now is to make these three items appear in the opposite direction of how they're originally laid out meaning it's three to one instead of one two three and i want you to do that using both positive and negative numbers in the order here so go ahead and do that now and when you come back i'll show you how to do it as well okay so hopefully you completed that task let's now do it ourselves the second item here stay at the same place that's the first and the third which will basically be swapped and we're going to use positive and negative numbers so i'll start with targeting the third item the log out one and set this to minus one now that's first and then we have to set the item one the whole to a positive number one and now that is laid out towards the end three two one and that was it i hope you managed to do this as well and congratulations you've completed the main section of this flexbox course so give yourself a pat on the back and if you have any questions feel free to ask that in the q a section and i'll answer it as soon as possible thank you hey in this bonus lecture you're going to learn how to create a fully responsive navbar which adapts itself to various screen sizes using a bunch of the concepts you've learned so far including flex grow flex shrink flex basis flex wrap and the order property so here is our nav bar it has four items and it's only the search item which is flexing as you can see it grows and shrinks with the size of the container and that's because we've given the search item a flex value of one while the others are only as wide as the content inside of them forces them to be i've also added a bit different styling to this example as you can see we're only using one background color as that looks a little bit nicer and the reason we used different background colors in previous examples was because it was a bit more pedagogical however by now you should know the basics of how flexbox works so we don't need different colors in the html you'll also see a few changes as the container we're using an unordered list and list items as the flex items as this is a little bit more semantically correct for creating a navbar the search item can be found here and as you can see i've added an input field so you can actually write inside this search field so nothing happens if you try searching for anything now this navbar works well on wide screens and it works well to right about here where it starts breaking because the search suddenly can't fit anymore so what we want to do here is actually allow the container to wrap and to place two items instead of four on each of the two rows so let's do that head over to the index.css and we'll simply create a media query set it to 600 pixels and inside of it target the container and allow it to wrap because right now it won't wrap regardless of how narrow you make it simply will not allow you to add items on multiple rows it'll only allow one row to change that we'll do flicks wrap and set it to wrap as you can see now it'll allow wrapping here the logout wrap down to the second row though this doesn't look very nice let's go back here and we'll target the items at let's appear flex value to flex grow one flex shrink one however flex bases fifty percent because that'll make each row fit two items like that and as you can see we have home and profile in the first row and search and log out on the second row each taking up 50 percent of the total width now i actually want to align the search placeholder text in the center instead of at the left hand side so i'll do search input and do line so that looks a bit better this has nothing to do with the flexbox itself it's just a design choice okay so now we have two different states this one and this one and it's actually pretty nice however if the screen becomes even narrower look what will happen it'll actually break at this point pushing the search and the log out onto a row each however home and profile can still fit on one row so flexbox will allow them to stay on the same row when it reaches this point each item's a single each so i don't want this middle stage here this one the vertical layout is good for very narrow screens mobile phones for example and this one is good for a bit wider screens but this layout isn't really that useful so let's rather control this by creating another media query this time simply copy it from here and we'll add it at 400 for example and what we need to do now is at this point target each of the items like we're doing here however instead of giving each item 50 of the row and the width we'll give them 100 so i'll just copy this actually and change this to 100 and as you can see now the breakpoint at 400 pixels to reach here gives us a clean transition from this state to this state now finally what i want to do is move the search all the way to the bottom because i think it makes sense to have the search at the bottom when the layout is fully vertical to do that we'll target the search and simply give it an order of one and it jumped down to the bottom and remember that's because by default order is set to zero for all these items and whatever item which has an order above the others for example this one has one which is above zero will appear after the others so that was it i hope you learned something feel free to play around with this and change it however you want and if you have any questions just leave them in the q a section thank you hey and welcome to this bonus lecture where we are simply going to experiment a little bit with an image grid in flexbox if you've seen my css grid course you'll probably recognize this grid as i've simply cloned one of the screencasts there and changed around on things a little bit and i actually do recommend you to create image grids in css grid as that is made for twodimensional layouts while flexbox is mainly onedimensional however you can't recreate quite a lot of cool grids in flexbox as well so let's just jump into it and play around with it a little bit here we have our images they can also be found in the img folder over here we have the basic setup here the container just has a display of flex and as you can see that just lines up the images after each other and there are a bunch of them and they're way out of the flexbox container because flexbox won't allow you to wrap any of the items it'll force everything to be on the same line so let's first actually scale these images down a little bit let's give them a width of 850 pixels and a height of 100 pixels now that'll change their aspect ratio a little bit but let's not care about that because it looks kind of nice okay um now we want the images to wrap of course and as you remember to do that we do flex wrap and which by default is no wrap and we're just going to remove the no and boom there you can see now wraps to a nice little image grid however as you can see at this point they're skewed over to the left hand side so one thing we can do to make it a little bit nicer is to do justify content and set that to center that'll center it looks pretty decent we can also try these around for example that'll add some space around the images though here you can see the problem when flexbox only can fill three items on the last row the space around the images will be different than these of course resulting in this funny looking gridish layout here but with a different type of grid down here there's not an easy way to have these three images over at the left hand side for example so that only the last spot here will be open when you do space around it'll do space around on each of the rows separately if we did x start wouldn't center it like it did previously now we have much more space here and here even though we have this more gridish layout okay so what if we want these images here to be flexible in their width now we've just hard coded their width and height though what we can do instead is actually use percentages here let's do 100 and 100 and we'll also do object fit cover remove this justify content and now it looks really broken just hang on a minute what we'll also do is we'll target the items themselves and we'll give them a flex value of flex grow one flex shrink one and a base width for example 150 pixels which we previously had now you can see they scale up and down and also shuffle around when needed so here their base width 150 pixels but they're allowed to grow and shrink and the images themselves just take up whatever space each of the flex item has got available and with the object fit cover they take up all the width and all the height and cover the entire window and that will result in you not seeing all of the images any given time so if that's important this is not a good solution however if you just want most of the images to appear in the box don't care if it's cropped a little bit this is actually a pretty nice solution so however xbox lays out as many items as it can on each of the rows doesn't evenly distribute it throughout rows so when it gets to this point where we have 10 images here and our 11th image which is the last one down here it'll be placed on a single row meaning it'll be five times as wide as the others which isn't optimal however these widths looks pretty nice now we also have some big images here i've given them class names of big here what i want to try out is actually do container and then target those big ones and here i'll actually target the normal ones specifically as i've given them classes of normal as you can see here and now they're the same however if we give the big ones 250 pixels in base width you can see that that works as well it scales up and down however now we've said that we want the big images to start at 250 pixels with and the normal images to start at 150 pixels with and they are both to grow the container has room for it meaning you have this pretty cool looking grid okay feel free to play around with this perhaps adjust the values here you can drag and drop some more images in here maybe some vertical and horizontal images and try to adjust their flick spaces basically do whatever you want so that was it i hope you learned something thank you