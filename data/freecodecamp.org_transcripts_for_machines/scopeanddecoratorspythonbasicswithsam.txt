hi everybody uh welcome back today uh i am sam uh from python basics and we'll be doing a another two hour live stream today on uh free code camp here and the regular the way the agenda usually works is um it's about two hours uh don't see anything happening today was not feeling too hot last week so but we are gonna finish up uh some dictionary stuff because that was requested and that is very very important to me um and then i think there were a couple we were talking about formatting and maybe we'll look just real quick at formatting some numbers and then we're going to jump into scope and the reason why i like scope so much is really lays out how python looks at variables and scope is just basically layer of priority of where it's pulling from so and then then we'll look at nested functions and then those are just a half a step a half measure that gets us to decorators and if we have time very cool use of nested functions and um yeah it'll take us a while to get to some really really case scenarios of decorators but i will show you how they use but the the the one today uh if we get to and i'm super excited about it is the monty hall example so all right let's just get into it is everybody here everybody ready yes and i had completely forgotten this so i had gotten some feedback that maybe there was glare and i know uh i've seen this a lot of times that people like the darker so what does everybody think about the dark background is it easier to see because i had the red is a little hard all right all right let's go cool we're glad to have everybody here so let's just get into it so let's finish up dictionaries so we can get on to our new stuff all right so what i really want to look at to wrap up dictionaries is the reason why they're very powerful is one of the awesome examples is if we were to make a link and a um basically a building block of association so let's just look at the alphabet real real fast and then tie these in so from oh we don't need this let's comment this out but also one thing i just uh a little crash course reminder about the dictionary first you have to initiate initialize it and then link a value to the key all right don't need this anymore i hope everybody has had a good week uh i am glad to be back so from string uh import as key lowercase as lower so all right if you are unaware of this module builtin module and basically what we're doing here is we're building uh it's one of the ones that i like to do for a really encryption and decryption um pretty cool building block of uh messages but for i n range when lower then key all right so what i'm doing is i'm going through this reason why i'm using the range len function is so i'm going through so i don't have to go and wrap an enumerate object wrap it up so i can just go through here and then we're going to look at counting with a all right then run this then called key so oops that is not what i wanted to do what did i leave out ah there we go key so for i and key print so what i did is i associated actually four items print and i need key value key value key comma value so what i did is i went through our builtin lower all the letters so lower just so you can see where i got this from if if you're new joining us does anything here not make a lot of sense all right awesome i'm glad you like guys are like in the background hey uh is the is it very blurry on your playback because it is very blurry on mine if you guys are seeing it good all my kids are home i was kind of a little worried about this today uh is the picture clear for you guys if it is that's great because like i said all my kids are here and we're all streaming awesome i'm glad i'm glad the color the darker is good all right okay not hearing any feedback that it's bad so i'm gonna keep going i don't need to see me i'm just looking over here at the chat okay so i took and i ran through okay all right okay so what i did is i ran through and i made a dictionary and i associated a key so you could flip this around so basically you could the reason why i like this exercise is i want to get you to understand to go through because you'll see in a minute what we're going to do is we're going to count we're going to count a if it's if it's in the dictionary we're going to increment up if it's not in the dictionary we need to create it so we're actually going to look at the raven and the poem the poem the raven from edgar allan poe and we're actually gonna count all the letters excuse me all of the all of the words in the poem that's what we're getting to so all right i went through i took the letter then i associated a number to it and then incremented up each letter or i let lynn the range increment each one so i went through and i went through each letter then went through range so range incremented through iterated through my lower and then i let that count and i let that be offset by 1 because we know range starts at zero now now i'm going to show you how to do this where we can zip the dictionary and this is where it very cool and if time allows i'll show you how to do dictionary comprehension alright so we don't need this we comment that out and we can do this in three lines right here so i'm gonna do this a little a little stretched out so we could see this i could do this in two but just so we can letters equals lower so just so we can have this together then num list list range 1 through 27 okay so we're off setting 26 letters all right then key wrapping this so we're zip we're making a zip object so check this out this is so cool all right so think about it the thing about a zipper so you have the the actual zipper then the two sides and it goes through and it overlaps i don't even know if i'm in frame here so all right it goes through and it zips each side together so i have two objects that are the same length and i zip them together then i'm telling it to turn it into a dictionary so i commented all this out boom oop letters and i'm not spelling anything right today sorry everybody and then key boom same thing so i just wanted to show you how you can create a dictionary with a zip object zipping a dictionary there you go all right so cool we are almost wrapped up cool we're doing this in about 10 minutes all right oh is it sporadic for everybody is he breaking up because like i was saying that i was a little worried about the stream with everybody on at my house quincy or beau are you guys available to give me some feedback is it too is it too bad and too choppy because my view is just completely frozen alright is it present for everybody okay i just got a yellow and an orange on my on my stream i'm clicking over it's bouncing from red huh i'm not getting any response from anybody okay well i'm just going to keep going and we'll go from there until i until i hear otherwise so all right now we're going to do something pretty cool so i'm just going to put this in and i actually have the file you can go out and and pull it down the raven but i also have it on my github so you can click over to my channel and look at that but here's the raven here's the raven and i'm just going to put it right here it's a boom here's the raven the file don't need to comment that out now this is how you go about creating something and you don't know like i like i alluded to or made a passing comment about a dictionary is very powerful uh one of the tools that i like using it for is if i have no idea blurry okay it's going blurry and then uh okay it's going blurry and then not blurry okay well thank you for the feedback all right so a dictionary is perfect so you initialize it and then if you have a scenario which you'll run into and i've had plenty where you don't know how many variables you're going to have so instead of thinking of it you have a key be your unknown you have an unknown amount of keys so if it's not in there and i'll show you exactly how to do it if that key doesn't exist you create a new key for it and then if it does exist you increment up and this is a perfect example so all right let's look at this and it's literally this simple so we take our file we're going to then split it so file dot split so what does that do takes my string puts it into a list with each it's going to i'm not passing it any delimiter so it's going to split on the white space boom step one then i'm going to initiate my dictionary we're just going to call this book helps if you actually then create a dictionary and dictionaries live inside curly brackets all right then for we'll just stick with word word in file then if word not however you want to think about this but we're going to look at it if it's not in the dictionary already we're going to create it we're going to assign it to a count of one if word not in book then book then our key so it's word that's our key equals one else then book word plus plus equals one so what i'm doing here taking this file because it was file uh variable and i'm splitting it turning it into a list we're gonna and then i knit i initiate my dictionary iterate through my list looking at each word if that word is not in the dictionary assign it count it one then if it is in the dictionary then increment that value up by one so let's run this and we have book holy moly 114 lines this is what i think is so cool so here we go so this is every word counted in the poem going open a minute making the code shorter if would you mind giving open a minute in this oh um actually what i was planning on doing was we were gonna do not just open but next week we were gonna because i wanted to entice everybody we were going to then go and actually pull this down off the internet with uh with um url lib and thai url lib and open together so that's what i was thinking i didn't want to deviate too much because i think we already got uh but it's a great idea and you can already i like i like how you think and that's why i think we work well together is that um i'm going to tie those into next week next week's lesson so we can yeah i i try to i try to i'm trying to do a little bit more foreshadowing uh but yeah if if we could just stay with this right now i'm i i want because open can be a little tricky so uh i always try to tie that with something else so the open url well awesome good and there's also if if there's ever anything that you guys want because the reason why we're doing dictionaries right now is somebody hit me up on twitter so look this is y'all's tutorial so whatever you guys want and i haven't if i haven't done the complete lesson plan i'm more than happy to uh augment and do what you guys need and want to see because i mean i could talk about any of this and as you can tell i can get sucked in to some of it a little bit too deep so but that's a great idea and that's actually where we were going to go next week i didn't want to tie these in and deviate too much especially with bow being awesome and allowing me to uh almost do anything so just wanted to do i thought that that would wrap up the dictionary and we might do sorted i just remembered we didn't do sort here and i don't have my notes right now but yes we will we will do that definitely uh next week then because i was on the fence about it so that solves it so thank you guys all right so where are we um oh two more two more questions that came up last week and then we'll get into this so we don't need this so it was formatting we were formatting the uh our probability the odds of winning powerball and i can't remember who asked but it was um it was hey what happens if we wanted to change the format of of our number so what happens if we wanted to do so here let's just look at it and we do phone phone number then one two three four five six seven eight nine zero so basically it would be you'd hardwire it in if it because when i did the placeholder colon comma python already knows in that string format in that formatting uh logic that it goes and puts that comma after every third so that was for phone number that was the example that i had for that so then literally if you look right here i have my placeholder with my string and then i've wrapped parentheses so in the united states we typically put parentheses around our area code then our prefix then is separated by the local selection so it's basically routed to where in the united states where inside that where in the united states and then that number so now let's look at the the other one which is basically the exact same but it's um it was it was my example for uh here in the united states and i learned something cool about uh australia somebody was asking how to do the math so may maybe you guys can confirm but in australia if i understood they that is the sequence of when you were born in the united states our identification number our social security number is is built upon geographic so the first one is what state then you have the group number and then the sequence in which you apply for it so and this is more dashes but i just changed it up so let's see ssn one two three four five six seven eight nine and then i just go from there but that was uh i just wanted to throw that out because somebody made a comment and you just would need to hardwire it in so all right i think that's that so very cool that only took 21 minutes to clean up uh those things and i think there's another dictionary something was it or did i get it all ah one more dictionary comprehension let's just get it out of the way so all right we'll look at this and i'll throw it in here and i promise we'll be done so this is this is what's cool about this so let's let's look at this so all right who doesn't like uh list comprehension i can't remember all right so basically same idea here's my for loop so then now here's my key and value pair all right so i have a list of names an iterable so i'm going to here's my iterable here's my temporary iter right no i shouldn't have said that temporary object iter is something else so forget i said that here's my loop then here's my key and value pair so what i'm doing is i'm saying i want you to count a student i thought it was him i thought it was him so uh but you just have to look look all right you have to do something over and over again when you got on a bike you couldn't ride it right so i remember when i started doing this and i couldn't understand for loops well guess what now i understand them really really really well it's just time and energy and it really doesn't have to do anything with how long like how quick can i you can learn it in 10 years or five years or two years well it's a length of time i like to say it's 10 000 hours you want to become an expert at something you got to spend ten thousand hours and that's it that that's it that that's the magic number if you take ten if you stretch it over ten years okay it takes you ten years if you can compress it down to five great takes five years you want to become an expert at something you got to spend 10 000 hours on it that's that so what the standard math is it's a little over it's like 6.7 years if you do whatever task for 40 hours a week that's that's the math so let's just look at this one more time here's my key i'm taking my student the first letter then i'm turning it then i'm putting an upper method on it and then i'm in my value or my temporary uh so what i'm doing is i'm saying how many students have this first letter so i have steve i have a john i have an atom and i have a will so that's that all right cool you weren't stitching that's funny that's very funny all right let's get done with that let's close that out i don't need that to run don't need to see that and distract me but i really hope everybody had a good week um last last week was hectic and busy for me hope everybody did good so all right so we need to talk about scope so i you're going to hear me use another term and then so it's local it's l what legb legb and it goes in the reverse order you think it will go so and i got a i got a pretty good example that i think that'll really help sell it it looks locally so inside then it looks enclosed and closing nonlocal so if it's a nested right outside there that takes next priority then uh global then built in so legb and i'm gonna have we're gonna we're gonna go through this really really really really slow so first i'm gonna handle uh local global and builtin and then we're gonna do uh enclosed and closing uh nonlocal those are all the same we're gonna do that next to really kind of wrap our head around it and i think we will have time to do our monty hall problem so i'm very excited all right so i have well one let's do this so you guys can see from math import pie not super super important but does everybody know what pi is the mathematical term the ratio between uh circumference and uh radius everybody everybody anybody that's a old movie from my from my time period uh not ben stiller um but ferris bueller's day off all right okay good so as you can see here i have this variable in three separate locations and we are talking about right now we're talking about uh local um global and built in local global built in so i'm going to leave all three of these here and i'm going to show you so it takes priority from local first global next well actually nonlocal next but i don't want to we're going to do that in a minute and i'll show you so we'll put this in parentheses it's not here global and then built in and as you can see i have these at different lengths so you can see the uh scientific notation wow um i cannot think of that term i thought i was going to be super nerdy so all right i have all three of them sitting here but python will look here first because this is local then if i comment this out then it will look global significant figures that's what i'm looking for so i have because pi built in pi is i think it's 12. then my local was five then my global was two then my uh built in is 12. so i comment that out then it will look then it looked right here so then when i comment this out and i run this again then it goes then it looks globally then it will see that so the reason why i like doing it in this order is it shows you where it assigns and goes with priority of how it looks so all right now now let's look at a nested function now the nested function is the built in excuse me is the building blocks of decorators so this is going to look weird and seem weird why would we do this well it's a kind of precursor and a building block for something else all right let's comment that and then we'll use this as a jumping off point to look at our nonlocal scope and in several weeks when we build a tkenter calculator you'll really wrap your head around local orbs oops okay am i back am i back yet i just gotta i just saw that uh obs went down everybody back up okay so yes locals are within a function global variables are outside and get pulled in and builtins are already there okay awesome yeah i i apologize guys uh for with all this with everything going on with school our uh our kids are delayed going back and they are all home with me on zoom meetings so we are eating a bandwidth like crazy so um hopefully this will all be resolved very quickly let me see what color i am it's red right now but i think i'm back i haven't gotten a message okay i'm back all right so boom then def num then return exponent exponent in then return num so what in the world is going on here let's see what color we are or yellow orange hanging around red yuck all right bounce screen okay now it's blurry god all right i will go slow i need to wonder if i need to send my kids to my parents house during during tuesdays we'll figure that out all right we'll just go slow today all right so well that's very cool thank you for the new supporter all right just re just refresh the page all right all right so what are we doing let's let's let's look at this so here's our standard function that we're used to seeing we have and we are going to return this now this is where it gets weird this function is going to return this function all right so this function my exponent all right exp sorry my exp function is going to return my num function so let me give you an example of what in the world this will do square equals xp 2. so start on the outside build your way in so now this is this this is where it gets a little weird but once you start thinking about it you'll get you'll get used to it so i'm taking i want to create a function that's going to square something and this exponent is here so whatever exponent i pass in this will be and then now this basically this is how i want you to think about it basically just renamed this right here so function function this renamed this so whatever i pass in here at the end of this object we'll take that number and raise this number to the exponent of this that's why i called it squaring so now i'm going to put this in memory then i'm going to call square oops square and i'm going to i want to square 2. so i get i get 4. all right so now i want to make a cube function cube and i go my x my exp function and i want to pass in 3. all right let's put that into memory so then i want to cube uh what do i want to do 3 that's 27 3 times 3 times 3 27 haha i remember i remember math okay now let's do now let's look at nonlocal this is a perfect it's a perfect way to look at nonlocal right here so that was our nested function okay nonlocal scope all right so now what happens if i were to pass in a 1 right here and if i wanted to be able to touch it from this function because if i say global it's going to look outside so there has to be a way for i just want to move a variable from just out just outside not not crazy not globally it goes right here so this is how i change the scope of this i pull this in say nonlocal and now so when i pass in this so what i change this up whoa square square three stays the same because i overrode this and changed it to one so i had changed it bend so whenever and you'll see this when we do our uh oh i think we're gonna have plenty of time to do our monty hall stuff yes and that is a very very cool very cool yes very good i'm sorry yes the enclosed uh the enclosed so you have you have nonlocal and closing you're going to hear that that term so if you're reading closing that's typically the documentation and closing i then also call it so if you heard me say enclosed or nonlocal all right if i used any of those those are all the same this is the this is the technical definition work you use case in closing because it is enclosed it's not it's not it's not local it's not global it's in closing so there we go great question this is why i love the the interaction because you guys keep me keep me on task all right so now now let's look at decorators so we need to look at decorators they're very very very very cool they're a little odd at first and especially they are in this case in the these couple of cases they're going to be weird you're going to say why but it's to see the context uh perfect example that um i i've used um is to change a function especially with django so if you for whenever you're having a pages and you're building them you're building a you're building a function for each uh page and then you need to lay on top of it some functionality and you can lay as many decorators on as you want to think about it is because you're going to see it here and we'll talk about it a wrapper a wrapping a wrapper function so it's going to take a function wrap it in another function wrapping it around your deck decorative wrapping you're wrapping up the outside so that was that's the way i like to describe the decorators all right so let's undo this so i can see all right so decorator same same type concept here just the way that we use it a little weird all right so did i need to leave that no we'll just start over all right gory tours so we're going to take a cube then all right let's see if we're blurry we good all right so we take this decorator takes in a function because it's going to sit on top of the function and you'll see this so then def i just like to keep this wrapper wrapper function so then we've taken an argument so we can be really clear so we don't have to think about it so then we're going to return the function and the argument okay funk and we're going to go real slow because this can be really weird and then we return the wrapper right so this is this and this then this returns this all right let's look at it so now i'm going to do a def num x then return x num pass in three all right so let's go through now my decorator it's going to take a function wrap it up take that argument then do this to it take this function take its argument and do this so when i do this right here this is all that it takes so i don't have to create and go out like we did with our outer where i'm building my way out to in this just sits on top and you still only interact with the function that you're changing you're augmenting you're decorating you're wrapping it up all right does that throw anybody for a big loop because i remember the first time i saw this i said what but i'm decorating i'm augmenting this to the power of three all right now here's one that can be a little bit a little bit easier to wrap your head around that works that works pretty well uh let's see all right you got the it's going to be for string upper so we take in our funk our function close that out then we do our then we do our wrapper sorry guys i think somebody's coming home so this is not going to take any any arguments right here so then it's just going to return the function then then we're gonna have this right here wrapper just like so just like before so we're taking our function which is going to be a string because this is just returning and if this is a string we know that that method works completely so let's create a death of hi then return hi how are you close that out close that out so we call hi i call it hi i think i did yeah hi how are you so now on top of this i'm just going to slap my upper oops and you you decorate it with the at symbol upper and that's it now later if we're still working together and we get around to i don't know i think they already have a bunch of django but that is a perfect one and those are even more sophisticated those those decorators because it is a three three layered here to take in an argument here to then redirect but all right i digress sorry because i know right here that this can look a little odd you're like well why why would and i get it it's a great question because i asked the same one why would you need to do this why wouldn't you just change it in here if you have a bunch of functions and you're going through and you only want to then augment specific functions and you're like okay here i want this one to do this and i want to do this here so then we just now now that we have this called i got hi and everything's uppercase or if you need to call one sometimes you got you can uh have it call another one but this this just sits up and and you can have these layered i can put more decorators i can put as many decorators on this as i want that would work with the type of object that it is all right so there we go that is decorators well awesome this is gone very quickly so we have we have a very long time to work on a perfect example of scope variables and um the monty hall example so let's let's go ahead and get after it so to give you guys a little bit of a back story of what the monty hall it was a game show in the 60s i think and it was a very interesting concept so i had heard about it but uh when one of my kids was in seventh seventh or eighth grade they they were doing probability and statistics uh probabilities and ran across this problem so it's if you have three doors you pick one of the three doors then so there's a car behind one of those three doors excuse me excuse me there's a car before behind one of the three doors and what the where the trick comes in is the host of the show will show you a door that is not a winner and apparently uh they would have so there'd be a goat behind two of the doors and a car behind the third one so what what the trick would be is he would show you one of the doors that had a goat and he would open it up and what that does to our brains is it messes with the probability and you then have the option is are you going do you want to now that you know which one is not the car do you want to change or do you want to keep the door that you have and almost always the person sticks with their door and here's the problem and then this was a perfect python problem for me to come in and do for the class because we ran a simulation and we did this and were able to prove this on a huge scale but if you change doors you have a 66 chance of winning if you stick with the same door you only have a 33 percent chance and i was blown away by it and everybody right now and i've actually had people leave comments in the vid because i have this on my channel uh the original time i did it and people argue about it because it is contradictory to what we think and that's why the game show host did it because most people didn't change doors so when they change doors they they are 66 percent more likely to win all right so let's get into it and it's a perfect example because i remember when i was because when i was first learning i go okay and i did this with um some really really clunky clunky clunky programming and then i ran across nested functions and scope and then so i redid it so i i don't think i've redone it uh you'll see the original uh junkie version if you go back to my channel but um we're gonna have it here so we we're going to go ahead and knock it out so we're dealing with um randomness right and then we're also going to be moving the doors around so we need to import a couple of things from uh from the random library all right so from random import shuffle and choice all right so we need to bring this in and look and see what in the world we're doing so help on shuffle all right shuffle a list in place what does this mean anybody we've been going over this couple times in place return none means you would need to make a copy if you want to keep the original you need to make a copy of it oh that's actually one thing we need to talk about at a later class i need to make a note of that copy yeah hang on copy and pointer hang on pointer and copy because we need to talk about this because you can get hung up on referring to a place in memory or an exact copy can be very tricky all right anybody all right cool all right so shuffle moves everything around in place will not be creating a new object and then choice we need to look at choice oops help so what does this do choose a random element from a nonempty sequence so basically we're gonna have a uh a list of two goats and a car and we're gonna shuffle it then we're gonna randomly just pick a an index so our index is going to be our door numbers so that that that was the example they brought out a wall and it had uh and it had doors on it one two three well we have a list uh indexing zero one two and we're gonna randomly shuffle uh the goats and the car in there then we're gonna randomly pick one then we're gonna have the goat from the list from the remainder get kicked out and then we're either gonna keep the one we have or swap for what's left in the list so it's a great when i heard when i heard it brought up if i could uh if i could program something and teach the class it is a awesome programming challenge so you have to we have to really be paying attention so in the nested way we need to do this we need to create our game right so our overall function and then inside the function our two nested is switch and what do i call it no switch and switch so in a scenario uh we're gonna we're gonna switch ten thousand times well the game is gonna take in the number sorry um and then uh and then we're not gonna switch and we're gonna see and it is it was very very eyeopening when i saw this because everybody thinks and then i finally went and started looking and uh was doing some research and it just shows why why this show was wildly successful and why so many people did not win because it's contradictory to what what our brains think where you're like well you just remove one of the doors and i'm gonna stick with my door well you just found out that a third of the um possibilities have been removed you need to change doors and you're more likely to win you're actually twice as more likely to win all right okay so we need to deal with lots of stuff game then number of number of times we're going to test this and then we're going to change if we're going to change so we're going to default this to false all right so now we have our doors right i know i'm saying a lot right now any questions right now any questions at all all right cool let's get going and i think my kids are coming off their zoom meetings so hopefully it won't be blurry and it'll stay good all right so we got one goat two goat car close this out all right so now we need to shuffle the doors because we want this to be random so then we're going to go how we're going to do this anybody got any guesses i gotcha okay all right so shuffle is in place so i want to shuffle these doors so i don't have to do any assignment right here so and let's see uh pass in take shuffle pass in our object shuffle and we pass indoors so print here actually we already have all this so uh shuffle doors print yeah we'll just do print doors here so again uh right now false okay all right so now it's shuffled and it's car goat goat and then we run this again go go car let's move this over so we don't keep getting ate up so we got car goat goat go goat car goat cargo goat goat cart goat all right okay now oh and we need to track we don't need that anymore now we need to track our wins losses 0 0. now now what we need to do get that down there now we need to create our nested functions this is where it gets fun all right cool so our nested functions first one is going to be no switch so right here so then it needs to know the reason why the reason why i'm setting up like this is well one it's it's it's great practice for uh to wrap our head around nested then nonlocal and especially since we have two scenarios inside the game right okay you can either switch or not switch absolutely perfect all right and then things will act things will act differently so no switch we don't need it to do anything but we have we have variables that are going to be we're going to be working with right on local wins losses because we want to pull these in here and manipulate them if we pick the coat the goat or if we pick the car okay and it's literally now when we get down into the actual game that is where this is where it gets fun so no switch is we're gonna pick a door if if the um if the choice is the car you straight up win if it if you don't but the fun part to laying out this logic is for the switch so if car equals choice so let's look at choice again choice is sequence and then so sequence is our interval our list choose a random element from the nonempty list so we're going to pass in choice pass in uh doors all right and oops then wins if if the choice if this choice is car equal to car then we're going to increment up one else losses because it's if it's not oops one all right now here comes the fun part because we really gotta do some thinking here oh we may be we're way ahead of schedule okay i thought all these others would take a little bit longer all right switching doors switch apps if you spell switch right and let me check my notes so now we have our doors goat goat and car then on local because we're bringing in our wins losses now all right so we need to this is going to get a little a little complicated so we're going to pick a door then we're going to get shown a goat doesn't matter what what door it's behind then in this one we're going to grab what's left so so let's let's think about this for a minute all right i need a graphical think i have paint somewhere all right so here that's not what i wanted where's the shape is that okay all right so i'm going to pick my door then then they're going to show me because there's definitely going to be at least one goat left because there's two of them so then they're going to show me a door and then i'm going to switch and pick the other door all the time so it's going to be the last the last door the only door left alright let's go through this again so i'm going to pick a door randomly choose a door this is all random randomly choose a door the game show host is going to show me another door and then i'm going to pick the last door the the last door that's left the last object in our list all right cool is that does that make sense all right so let's just get after this so yeah especially when the math teacher brought this up i thought it was well one i wanted to do the simulation to test this because she had explained that they had done it in class and proven it well i was like okay well that's how are you doing that because she said that they did it by in recreating and uh well i was like well i we can do this with a computer and check this any number of times and it's unbelievable how percent well you'll you'll be able to see but it just becomes it's like flip it's like flipping a coin the more times you flip it the closer it gets to 50 percent and your significant figures just go out and out and out it's just ah i don't know it's cool i'm not that good with probabilities but when it's a concept that i get i really love it so all right so we're going to pop out a choice so range three so let's go over this why i'm popping out why i'm popping out i'm removing the first random choice pick pick an index pop it out boom so now we're down to two so it's at least going to have one go right so now now i'm going to remove a door now i'm going to remove a door that has we need to look at remove so we got door right i just realized that that all right so we need to look at uh pop and remove i thought we did that but we did not who knows pop and remove yeah i changed thank you i just changed it to door thank you um so we put door in memory and then uh we need to look at der on door so we have pop and remove i realize we did not do pop remove sorry wow door dot pop okay it will remove and return item at index whatever we index or if we leave it blank it defaults to negative one or the last object remove well all right you'll be surprised um okay the very cool thing about pop okay the very cool thing about pop is it brings it out and returns so you can grab you do two things at one time you go and grab it and then you can assign it to something because it pops and returns it so if you don't put it with some something assign it to something it goes away but right now we are pulling it out of the list we're pulling it out of the list then we have our two then we're gonna have a goat shown and then we're gonna have something left here and either this is going to be the car or a goat but we're going to take this one every time then now no it doesn't put it into memory it pulls it and as you're pulling it out you can assign it to something but if you don't assign it to something it goes away so be very so let's see am i not because right now my first choice i just want it gone what you'll see here in a minute is uh um we'll do remove and we'll see so if i wanted to pop it out and then have it assigned to something because right now we are just because because we're switching so i could have used um pop out a random choice grab it and assign it i could could have done that but right now i just wanted to pop out and have it go away because i'm not using my first choice i'm gonna go for this one so i'm picking this going away don't care what it is because i know i already know i'm going to switch i'm going to i'm going to what's left so i'm grabbing this throwing it away going to see a goat because they're going to show me a goat and then i'm just going to get the other door i'm going to pick whatever's left and if you think about it 66 percent of the choices are being removed for me i'm just going to take the last one that's why this works all right have i thoroughly i thoroughly confused everybody so all right so now so i took it pulled it out got rid of it now remove this is what's very cool help on door dot remove removes first occurrence of value so you're actually passing in so i got door so i have goat so if i go door dot remove goat then i go door so i have goat and goat now we can't see so it does not remove index it goes and finds the object that you want to remove and remove it so when we pick here at and then we can so that now i'm going to be down to two objects then i'm going to remove a goat because again doesn't matter because there's at least going to be one goat left there's either going to be after this after this first choice i'm going to grab it throw it away doesn't matter because we already know where we're switching all i know is that i'm going to get whatever's left then there so either this is going to be a car or a goat and i'm going to throw it away and there's always going to be at least one goat here right so then they're going to show me a goat and i'm all in this scenario i'm always going to get what's left over i don't care what's left over i'm going to take what's left over and this is how we're going to do it so second choice equals oops equals door zero then if second choice choice equals car then wins okay and then oops else losses equals one all right let me pop over here and see all right believe well i thought it was going to remove a here doors all right so as you can see that is not with remove does it have a default it would only default it would only remove first item if that was a if that was a default value okay good does that make sense and i misspelled second awesome thank you so does that make sense and the established spell awesome thank you no you guys are great no that was actually one of the things if i haven't said this one this has helped me with my typing because i've had to be more consistent but two you have to come up here and you have to problem solve not only are you problemsolving and laying out how to solve the problem but when you make a mistake like this you will you will be sent you will be sent be like look you're trying real hard i get it but i got this and this doesn't make any sense all right so cool so yeah that only that only just like this so yeah no whenever you whenever you're seeing this and you don't have any equal signs a default argument optional argument default optional basically same thing okay all right let's keep on moving keep on checking so actually we may only get to about 90 minutes today so now we need to do our for loop with uh how many times we're going to do this because we just we've created our number of times then if we're going to change so then we need to have some logic here to which which function to run if change is true or false let's get on the right layer so for i in range x then let's bring this up let's get rid of that uh if change then switch switch yuck and else and no switch all right so now we need to lay this out i'm just going to copy these two because if i've already been spelling this much all right okay all right so let's go through this i think we can see all of this so i have my change so i'm bringing this in then going through and then down here as i'm testing how many times are we doing this and if change is false so right so this is either going to be true or false if it's false we switch excuse me if it's false we don't switch see see why i set this to default to true excuse me to default to false so if that's true we run switch we run this we call this function if we don't switch if that's false if they don't input to change we come up here and run no switch very very standard all right so now now let's now let's call this and run game 10 000 times all right all right wins 33 of the time and loses 66 percent of the time so print and game ten thousand thousand true all right this is where it gets weird this is where it's so crazy so if you switch doors you win 66 of the time and you only lose 33 it's it's just absolutely it's absolutely nuts and i remember when the first time i did this i just i was like there is no way that that's true and then i went back and i laid out the logic and i was like this is absolutely this is absolutely the truth and how just very very interesting so actually you know what we flew through this do we want to look at um open and url lib because uh we can limp through that's not so complicated so i can use my old notes everybody want to do that so we can stay on a little bit longer how's that sound everybody i can go a little bit more i really thought that i had i really thought that all this would last all right url okay so cool let's go ahead and do that then let me give me a moment or two to dig up these things because i know i have it very close there's the raven stuff url lib here i am i'm in the wrong file url lib all right so here we go we need to let's all right let's comment all this out uh check and see because again i i lose track if url lib is already in here i know i know what program i can check and chord u r l lib all right i have one program that's not touched so we're going to be looking at url lib anybody ever heard of url lib url lib and then ooh if we can get through this and we can do and i don't know another 15 20 minutes that'll get us close to 90 minutes and then uh i'll make sure we have two hours because that'd be two weeks in a row not doing it two hours so i apologize all right url lib let's do let's just look at it help url lib and this is where it gets odd packages so now we have to be laser focused on what we want to import and ooh and then after this i know what i forgot to do we didn't sort the dictionary that is so cool so we're going to do that next because i have a feeling this won't take that long so url lib whenever you have things like this packages you then need to be laser focused to bring them in so then you're going to do request as url so now because i know this can get so confusing so so odd so now when i run actually let's go let's do this real slow uh help url lib no i want to do dur on url lib okay so see it only has parse sitting in here so then when i go and do request so now i run dir on url lib so see now i now i have request and response i know this i know this is weird but i don't want to do packages yet but you begin to see that python helps you manage memory so it will only bring in things that you say hey i really need this and okay so request request and response so now we're now we're tipping our toe into client and server so you're going out requesting then you're getting a response does that makes does that does that makes does that make sense let me see all right so now i want to i'm sure you've learned by now and it's dangerous for me anyway to be typing all of those letters so we're going to shorten this to as url and in case we have anybody new joining us i'm sam doing some free code camp streaming i'm from python basics every video that i've done here i have micro videos on my channel so there's pluses to both of them a lot right here is a lot more freestyle and a lot of interaction uh the other and also a stream of consciousness where the other is uh micro videos just uh laser focused one subject at a time all right so url and it's request so now we're going to have so now let's look at help on url oops didn't bring this into memory help you url holy moly let's run dur on url see why you don't bring it all in when you import url lib it's ginormous so that is this is just we're just going to be touching the tip of the iceberg with uh where is it url then url open um if i knew my alphabet so see there we are and then we're going to bring in the file and then drop it in and then we need to understand the text and then we're going to look at open then we're going to write and then we're going to go from there so let's see how we do let's bring this down here help url all right we got we know that's a ton of it yep i want to i want to expand this and i know it's a lot okay url lib request and it's in the url module and you have a ton of support and then here are the classes and then as you can see i think there's even more packages okay but we're just going to be touching url open okay and i think i have this i know i have a i put the raven on my on my github but maybe i'll go at the top of it and put this file so you can practice it let's get this back undone so now let's bring this over here so you pass in the the address and the reason why i choose chose the raven is because it's um public domain it's uh it's very very old as you'll see it's 18 18 what 1836 18 and that's actually 1845. so it is when he he died it's 100 years pass after the author's death so all right oh shoot there we are so now we bring this in so we do text equals page actually let's not let's go real slow page oh aha so now here's my response object because it came back like i said you have your uh url open because it's um that's going to take forever endur on url it brought in request and response right and now we have a response so now we need to read it and we run der and look dur if i haven't said this in a while dur and help your friends don't don't try to memorize this stuff because you will get into you'll you'll get url to the raven is the description of the video i can't post url post urls but the video uh was dictionary uh part two well thank you very much for doing that okay well i really appreciate that so everybody uh jan is already on top of it uh if so if you have a hard time coming back and can't find this it uh it's it's uh dictionary part two so all right so cool all right so we're running on page all right here we go so now my page object is my response right so my page objects is a client response and what can we do with page page can read okay so let's let let's read it so text dot text equals page dot read all right so text 70 lines and what is okay all right super important right there right so help help on text ooh it's bites what can we do with bites let's see oh oh we can do all kinds of stuff so there's the help on it but so we can be laser focused der on text so we just ran help oh wow is that text yep and then here's here's the breakdown of all the methods but here's a list of all the methods methods that we ran so okay so we have uh we can do all of this and we get it but we can clean this up just a little bit text equals text dot decode there we go it's just regular irregular text now so now give me a second because i need to figure out where all right 3 8 all right i don't have this so we can all right so now what we need to do is now that we've brought this and we have we still have i want you to see this you want to be a good you want to be a good steward of connections so right now we have an open response right now so we need to close this we need to make sure we close the page page.close you don't want to leave anything open you want to finish it up so now page still a response object but it's closed okay so now now we're going to create a file file open we're just going to name this the raven dot txt txt now all right all right open file name file object built in function uh in module input output now you do not what i just say you do not have to remember because our little shopping list is going to come very handy so all right r read there's a default to mode r defaults to r defaults to read w open for writing goes to the first x creates a new file open it for writing uh a open writing appending in the file if file exists binary text mode open a disk file for updating this is so cool new line mode all right so there is a lot here we are opening a file to write all right and we'll get into more of this i don't want to do um especially don't want to do it text context editor we're not going to do a context editor right now because that can really throw people for a loop we're just going to open the file right to it close it all right let me get this over here all right so right now here is the last order of my files that i have so we are open we have we have our file around it's not what i wanted to see this let's bring this in so i can read these okay so all right we open close brought it in so now we have we have the all of the data that we want and sitting in the text text object so now we're going to create create a file object we're going to open it what are we going to name it we're going to call it the raven dot txt then we're going to write to it all right so now i have a file object file sorry okay i got a file object what can i do with my file object all right i can read line read lines seek mode all right and of course it's right on the scene or i can write to it i can read and write so whenever you're doing something to your file object it has a method read write so we're going to file get our file we're going to write to it and we're just going to what what are we passing what are we passing to it our text now we also want to be a very good steward of our connections and what we have to do with things so we're opening it we're writing to it excuse me we're opening our file we're saying we're going to write we write to it we close it and we go from there all right so that's that whoa look at this handy dandy little thing we will be i promise you okay since we're doing this now let's do our shopping list uh next week and you'll see how we handle that there is a way that you go this then that and that and this and that's your little tease for for this week to to come back so but no there there there is and actually if you read the documentation it'll tell you i'm not gonna tell you until next week so here's our nice little pretty raven file god look at that and we're going to look we need to look at this text i want you to look at this format just laid out just like this i want you to look does the spaces has the end have we talked about this escape character in well i really i really appreciate it i it's interesting how i've stumbled and bumbled and stummed across this stumbled across all of this i love i love teaching python i'm more of a teacher than i guess i thought i'd ever ever uh thought but i absolutely love so this is here and all kinds of gobbledygook but all these nice awesome little rules sitting right here and then bam comes out in this perfect format and tells text exactly what to do i mean look at this it's just it's just right here and it knows to do a new line and come through and just look at it new line a whole new line you can just see it right here boom new line new line all right now can i believe we didn't do it so we're done with this that's open and we'll since we've done these two this week we'll do our shopping list next week and i'll try to figure out how to make that sound better than a shopping list so we get a lot of people who really can understand um file control and then we're going to build a context manager uh that that is it it handles a lot of things for you it's the width it's the with uh keyword it's phenomenal very very powerful all right i just realized we did not sort our book so we need to learn we need to look and see how to sort our book that we just did our dictionary with our book so let's do that and then we'll wrap it up so all right so let's get our book down here where'd our book go all right copy they won't go back and forth copy copy and paste undo this all right so then book 100 and how many keys are there how are we going to find out keys so we do book lynn book 569 different words in the raven 569 because there's 569 keys so that's now that's not the total of then what do we call it file so now we're going to do lan on file so the total poem is 1059 words and there's only 569 different words so we had a lot repeat so now we're going to see how to handle this so we need to create we need to create a function last and you'll know why in a second return return x minus 1 then book now we need to turn this in and to see all the items book.items all right so now we need to sort this and you'll see why we did uh why we did items here in a second because we need the key and the value right we need to be able to see it we need to be able to then sort it and then go from there so now we're going to do sorted book equals sorted didn't want to do this with lambda we could do this with lambda but i know that can be very tricky i need to do a bunch of lessons on lambda because uh once you get it you get it all right the key so first it's book so it's my key in value then my key to the sorted is last i want you to sort it off and then we're going to reverse it so it goes it automatically goes from lowest to highest i want to see which words in the raven occurred more the most and then go backwards sorry reverse true true true that's horrible all right so for i am sorted sort book and oh yeah in this sample i only want to see the top 10 top 10 words in the raven that's what i'm doing here to print i zero and a colon i guess i didn't feel like putting this in an fstring format i wonder how old that is close that out close that out oops uh would i miss i n 10 1 2 print ooh what didn't i close out let me see where's my syntax error i got an error somewhere all right we're gonna cheat copy this paste that there we go wow looked exactly the same i wonder what i did did anybody catch what i did okay so here we go so this is the sorted book sort book so i sorted it i took i took the file we threw it into thank you okay all right so i throw it into my dictionary if the word doesn't exist i count the first count at first time if it does exist i increment it by one so then i created a my last function because i'm sorting this by the last of the key the value key value so i'm sorting it by value don't care what because what when you sort a dictionary you will be sorting by the key so if i just sorted my dictionary it would come out in alphabetical order for my keys and not caring what my value was so i have to resort this off of the key for my items right here so because i took key and value brought in items so book right now is my key and value pair how many times did those occur so then i took my key in value sorted it went in reverse so i went in reverse most so i want you to sort it by the value and i wanted to go in reverse i want it to be it automatically goes from smallest to largest i want you to go in reverse i want you to go from largest to smallest and then right here i printed out each key and value like so and i brought it in because my sorted book is this right here in order and mike here and oh shoot there's a lot in memory that's why this is acting up sorry guys so then the case matters in sorting yes just bring this back in there we go and to probably be a little uh did you see how slow this was so so it probably wouldn't be hurt wouldn't hurt to do because i saw it in my notes here and now that makes sense so now i have a file object and a book object so it probably wouldn't hurt to stop being a memory hog and start deleting book and file uh up here especially file probably but so here we go so the top 10 words are the and i my of a that chamber this and at the or the happen 56 times in the raven so there we go guys um you guys are absolutely awesome uh thanks for coming back and hanging out with with me for another uh week want to appreciate um quincy and bo for allowing me this opportunity to connect with you guys because if there's anything i can help you guys with and saving you some pain and time and energy and your python journey i want to do it because mine mine has been mine has been a bumpy road and uh so that was the reason why i created the channel that i did uh at python basics was what channel what would i want if i were starting over what would i what would i what would i want the channel to look like and that was how i started and also did an experiment uh put together um if you hadn't seen it the first six of my live streams it's five hours so now we have you guys have this everywhere so you can go back and look at it it's going to be a little bit different everywhere mainly the same big chunk but a lot of like i said a lot of stream of consciousness so things that it's like when you hear the audiobook the the reader the author might go off on a tangent and explain what they were thinking and i've seen that a lot so you get a little bit more in depth so don't just do this and think you have it you've got to practice it just like i was talking about at the beginning 10 000 hours 10 000 hours however long it takes doesn't matter how long it takes just do it sorry guys i've rambled on enough thank you guys for um putting up with me and hanging out with me i really appreciate it it's very humbling right now we got 140 something uh people here like i said very very humbling so as always guys thanks for watching please hit that subscribe button for uh free code camp if you haven't already and also that like button so i will see you guys next week and we will work on that shopping list so we can really examine uh context managers and files i think that's a great idea alright guys see you guys next week bye