what's up guys andre here and today i'd like to show you how you can use graphql with laravel and vue i feel like there isn't too much information out there when it comes to using graphql with larabel and vue so i figured i'd make a few videos about it and share my findings along the way so if you're not familiar with graphql it is an open source data query and manipulation language for apis it's been growing in popularity over the last few years and is said to be the replacement for rest apis i personally think it's great and addresses the issues with rest apis so in this first video we'll take a look at some examples of graphql just so you can get more familiar with it and see its advantages over rest we'll take a look at some of the packages we'll be using for laravel and in view so for laravel we'll be making use of this lighthouse php package and for view we'll be using view apollo so this is the part where i usually show you the finished product so you can see what we'll be building in the next few videos but i'm not done it yet as i'm just sharing my process along the way i am done the design part so i'll show you that and just talk you through what it's supposed to do so a very simple app as we're just trying to learn graphql it's a book recommendation site built with graphql and all these technologies we just talked about so basically you can just perform crud operations on books and we have one basic relationship where a category has many books and a book belongs to one category and we'll also have an option to add a book update a book and delete the book so we'll click on this it should go to this other screen and here we can view the link for it if you want to purchase it edit and delete so there's no concept of users in this app because that kind of just adds complexity obviously you need users for most web apps but i just wanted to get you to understand the basics of graphql so we'll be leaving users out of this demo so yeah i just want to give props to where i got this idea from so if you go to ihbooks.com i saw this on product hunt a few weeks ago and it is basically where i got the idea from uh even the design i basically just ripped and even the book covers but i figured it'd be a good app to build so we can learn how to use graphql so yeah props to the person who built this site it's also a great site with many books i've actually read so check it out if you're interested in some book recommendations okay so i want to start with a quick overview of some of the problems that graphql solves over rest and for that i'm going to be looking at the github api because github has a traditional rest api and also has a graphql api so if you go to this url you'll have access to the graphql api if you click on explorer and you do sign in with github and here's where we can play around with graphql and i also have my rest client open and we'll play around with the rest api here okay so here's one of the end points for the github rest api and it's just information about myself so if you go here here's some information about myself so with rest it's all or nothing if you only need one or two of these fields you can't do that with rest because you'll have to return everything when you make the call to the api i have seen some apis where you can do something like fields equals and you just specify the fields here that you want returned but there is no common specification across all apis and if you're going to look at a new api they might have that and they might not so with graphql you can specify exactly what you want returned so let me just erase these comments and right here it's going to erase these and you can specify whatever you want return so if i want my login is the username and name is my name and there you go we get exactly what we want and none of the extra stuff we don't need so this is a graphql query which will be doing all of our work on graphql in and if you notice the query structure is the same as the result that comes back except the result has actual data and i think that's a more intuitive way than hitting multiple endpoints and requesting data that way so that's another thing with uh graphql there's only one endpoint usually it's a post request to slash graphql but you can change that if you like but in general that's the end point with rest there's multiple endpoints and sometimes there can be confusion over which endpoint it should be when you're making a new api what's restful what's not restful with graphql there's no arguments because it's just one endpoint and this expressive query language here okay so another problem with rest is sometimes the information you need is not in this endpoint but another endpoint so say for example i was making an app that had to get the github info uh so i'd hit this endpoint because i need information about myself but then i want to show my followers and there is an endpoint here for followers so right here if i hit this you'll see my followers here so that means we have to make two ajax requests which is not exactly ideal i mean it's not the end of the world but you can see that that can start to add up if you need information across different endpoints in graphql since we have access to this expressive query language we can just specify that we want to show followers in this one request so again there's also this nice intellisense here so followers and you can specify parameters here i just want the last 10 and don't worry too much about edges and nodes which has to do with pagination i believe and i want the information for my last followers i want also their login and their name if i hit that there we go we have all the information requested here in this nice format and we can display this as necessary in our front end of our application so yeah just a high level overview of some of the advantages of graphql over traditional rest and now we can take a look at some of the specific implementations and we'll start with laravel okay so like i said earlier we'll be making use of this lighthouse package which is a graphql server for laravel it's an excellent package which has excellent documentation and works really nicely so if we go into the docs and if you go into tutorial there is a tutorial here which shows you how to get graphql up and running with a typical blog so there's also a github repo which we'll just make use of here instead of building it from scratch so let me just clone this real quick so let me just go here get clone and let's open that up house tutorial oops lighthouse tutorial and then open that in vs code so you can go through the tutorial if you want from scratch but let me just show you the essentials here so like i said it is an implementation of a blog so it's important to know the models we have here so we have users posts and comments and it's also important to know the relationships between them so users has many posts and a post belongs to a user also a post has many comments and a comment belongs to a post so let's go ahead and add some data in here and play around with graphql so there is no environment file so let me just quickly copy one and let me just change my database so i think i have one called lighthouse tutorial setup already and root route and i think just factory setup here yeah so this factory is for each of the models here and in post factory so yeah when i did this this should actually be a sentence not a title and is there cedars here no there's no cedar so let's just see if we can migrate first oh sorry i have to composer install all right that's page b artisan migrate okay so let's quickly whip up some seed data here using factories so i'm going to start with users app user and let's make 10 create and let's make say 20 posts and let's make 20 comments oops so i just made another 20 users i meant to make more posts sorry post and let's make 20 comments okay don't know why that first time didn't work let's see if all our data is in here so i think this is the right database so let's check our users a whole bunch of users posts a bunch of posts and a whole bunch of comments okay so now we have data so let's go ahead and play with graphql so back into the docs so if you go to installation if you want that graphical tool that i was showing you when i was playing with the github api you have to install this package and you don't have to but if you want that tool in the browser then you have to install it there are also desktop applications which i prefer but let me just show you this one first and then i'll show you the desktop versions that i prefer so let's install that and if we go into chrome let's see if that works so it's lighthousetutorial.test and i believe it's slash graphql or it could be graphql playground let's see okay so it's graphql dash playground to access the tool so there you go just make that bigger so now we can play around with graphql and you can see that there's already errors here because i don't think there is a query specified for user so yeah let's take a look at the schema here which is where you're going to be spending most of your time so it's under things under routes graphql schema.graphql so in here you have to specify all your types also the relationships so this is exactly like it's specified in the database the user and all the types the exclamation mark means it's required and here is the relationship so user has many posts and is using a directive here which this package makes a lot of use of directives so same for the post we specify the relationship the other way or not the other way the relationship oh here's the other way between users and posts but here's relationship between posts and comments and the same here and here is where the queries live so if you want to make a new query we have to define it in here again there's heavy use of directives which you should learn it looks weird at first but it's actually really powerful and allows you to write less code but if you don't like directives then you can just use custom resolvers and just query eloquent the fashioned way which i will show you as well so yeah back into here so this is a rex red squiggly because there is no query for user there's only posts and posts so if i change this to post then this should return there is no name for post it's a title if you want auto complete i think you can press control and control space but that is bound to alfred for me but shift space works for me and you can bring up the autocomplete and you can hit this play button or you can press command enter and there you go it brings back that one post that we asked for with id of one again you can do everything that you like in here specify more fields if you want the content there you go so let's look at the post for a second we can also get the user it belongs to and get those back so user and just specify what you want returned so we want the username and we want the user email and this is the user that created this post and also if you want to get the comments for this post there should be comments i think comments and we can just specify what we want so i think the replies what is it in comments uh could be empty let's see let's try putting the id in here which id is this oh you know why this post doesn't have any comments so that's why it's returning an empty array so let's i think maybe post of 20 maybe okay so 50 has comments and there you see it there cool so let's quickly make a query for users and let's just take what we already have here and let's just change it for users so this will just return all the users so this is the query this is the return type so graphql is typed that's what allows you to have that nice autocomplete and the nice intellisense which is great so again this is a directive and there are a lot of directives for this package which you should get to know right here this is for the one user we want to pass in an integer that's required and we want to make sure we we return just one user here this is an array of users so it can be one or more this is just one so we're going to find the user with an id of whatever is passed in here same thing with the post but for users and now this should work in our schema so let me just write another one here so query user id of one and let's just grab the name i believe so we have to refresh it first someone knows about it okay and now we should get the autocomplete sorry this should be a user array not a user's array refresh and the error is gone and there you go so so far we've just been looking at query operations which are just read operations but there's also a mutation type which has to do with any writing of data so an update a delete or a create so let's quickly go over that it's going to paste in some code again when we build out the real app we'll start from scratch this is just a demo so you have an understanding of how it works with laravel and this package so we specify a mutation and let me just fix this okay so these are the parameters it takes in a name which is a string and it's required and here are some validation rules again this package makes heavy use of directives which does look weird at first but you'll get used to it and if you don't like it again you can use custom resolvers which i'll show you in a second so email again is required and a password which it will hash using bcrypt and then it will return a user it will return that created user so let's try this out so let me just comment this out and instead of query it's going to be a mutation so let's do that mutation the autocomplete is really really nice really helps even if you don't know graphql if you just play around it will help you so create user after refresh so there you go create user and it's going to give the parameters that we need name andre what's next email andre at andre.com password is password and then it should specify what we want back we just want the say the id and the name and if we do that there we go id of 91 go into our database if i refresh and go over here sorry it should be users so there we go i think i saw it yeah right there cool so yeah let me show you custom resolvers if you don't want to use directives or if you can't do something with just directives and you need something more powerful or need complete control then you can just use custom directive so i'll show you in here so let's just name it latest post this again this can be anything it could be a really complex query which you just want to use eloquent with and you just have to specify the name and the return type and in this case it's going to return a post just one and then let's go to the docs and i think there's a guide for types no it's not types fields i think there we go custom resolvers um so here's the example i'm about to do but you can just make use of this artisan command so whatever you name the custom resolver just make sure you make a class with a capital l in this case so i'm going to paste that in phpr is in lighthouse it's a query you can do custom resolvers for mutations as well so latest post let's go to that latest post and you can also have parameters here and then you can access the parameter from within the class but in our case we don't have a parameter so in here if we did have a parameter we'll just specify it like like this so we just get it arcs and then if the name of the parameter was that you can just do that but we don't have one so and in here you can do whatever you like and you just have to make sure that you return whatever you said you would return here so in our case we have to return a post so just one post so i'm just gonna do return post all and this is called last again you can do complex query or whatever you like in here just make sure you return the right thing and that's it so if we go back in here um let me just comment this out and let me just refresh actually let's take this out and i think i named it latest post yeah so just lay this post so that should return the post and just grab the title up post not found make sure to import it so just import it here okay let's try again there you go there's the latest post but now we're using a custom resolver if you need that extra power so yeah that's the gist of it uh you'll be doing most of your work in this schema graphql you can also split this up if you like into multiple files if this starts to get bigger and yeah so that's basically it for laravel oh yeah so i personally like to have this tool as a desktop app and there are desktop apps for both graphical and graphql playground so this one's graphical playground and the other one that we used when we were doing the github api is called graphical so just search for them graphical desktop and you can download them i believe they're electron apps and graphql playground desktop you can search for them i have both of them installed already um so let me just show you quickly so let me show you graphical first so just paste this url in and you can do the same thing so let me just grab this paste that in and try it and it works cool the other one's called graphql playground and let me just grab the url again it's a url and for some reason it knows i guess it took the information from here and there you go it works i personally like this um this is more like your text editor so you can do things like command d you can move it up and down you can have multiple cursors so i prefer this over graphical but you can use whatever you like i prefer it again as a desktop app because you know we tend to have a million things running in our tabs so just organization purposes i like to use the desktop app okay so let's take a look at how to use graphql on the front end so up to now we've just been playing around on the back end and using these tools uh to to interact with graphql so how do we consume it from the front end we need to use a graphql client and in this case we're going to use view apollo which is very nice and easy to use so let's go ahead and get started and let's install it so i already have a view cli 3 application scaffold it out and i literally did not do anything to it i just did view create and that's it and it's running right here so the installation is very straightforward if you're using vcl3 you can also do it the manual way but this way is much quicker and easier so i'm just going to do view add apollo oops let me go into it first and view add apollo so it's asking if you want example code i'm going to say no we don't need a server because we already have one okay so there are the files that have changed and it's installed so let's go ahead and go into actually no this is there well let's go into our view app and i'm just going to play around here in hello world so let me just close the stuff so what i want is i want to make a data property down here and i want this populated with stuff from the back end so return say users let's make it an empty array and let's also make one for just user let's make that null okay so how do we get the information from our backend graphql into here so obviously we'd make use of these queries so let me just bring one up so let's just get something very basic users and let's grab their name and their email and not sure why this isn't working let me refresh okay there we go so we just want this information in our front end so if we go into the docs for queries so obviously we'd have to make use of this query somehow so the way to do that is to import this graphql gql thing so let me import that up here and we have this new apollo property and so let's put that right underneath here and here is where you would specify so we want to populate users with this query so we'd use gql and then we use template strings to put the query in there so in our case um we just want this so you can put query but you don't have to so i'm going to leave it out for now just so it's a bit shorter users so it's basically this basically that this query right here so we just want name and email name and email and yeah let's give that a try what is this complaining about i'm sorry this should be a method okay so let's see if this works so this should populate when the component loads so let's see if that works i'm going to open this see if you have any errors first and check review devtools let's go into our hello world app and let's check our users it's undefined so it's not working so yeah obviously it's not working because we didn't specify the endpoint so if you go into this file view apollo.js within the source directory we can specify the endpoint here so it's trying to hit this endpoint obviously that's not the correct endpoint so it's what is it again it's lighthousetutorial.test slash graphql okay so that should do it save that and see if this works so there it is loading and as you can see we're getting course errors here so let's quickly fix that so we have to install laravel cores on the back end and specify a middleware for the lighthouse package let me just install this real quick in the back end and while that's going usually you would install the the uh the package using middleware here in app http kernel but in our case we want to put it in the config of lighthouse so let's go ahead and do that let's go back to our back end and i believe it's in config lighthouse there it is and i think there's a section for middleware here yeah so it goes right here under this route config sorry uh let me just uncomment this and then we can add that package right here cool and now this should be done obviously okay and this should work now on the front end okay no more course errors let's check our view config view devtools i mean and there you go 91 users so this corresponds to our database there should be 91 users in here and there is cool and you will display this as you please in your front end i'm not going to do that okay so let me quickly do a mutation and then i think that should give you a good idea of how graphql works in our back end and our front end so let me just make a button here quickly in the hello world component up here just put it right here button sorry um say at click equals handle click say mutation test mutation and let's make a methods for handle click so i'm going to put it right after apollo methods handle click so if you look at the docs there's a section here for mutations right here so i'm just going to copy and paste this video getting quite long so you would just make use of this apollo mutate and then put in the graphql for the mutation so let's go ahead and do that real quick just gonna paste this in so this apollo mutate and the mutation i'm doing is this so i'm creating a user and i'm just hard coding some data in here and this corresponds to the create user mutation that we have here and that should work so let me just do that and then let's see if this works okay so that should have reloaded i'm missing a comma somewhere i think i'm missing a closing bracket here okay let's try it again yeah i was missing another closing brace there okay so there it is so let's test this mutation uh there's going to be no feedback let's just see if that added like it did so let's just refresh this and there you go cool i like to start building out this book recommendation site in graphql if you haven't seen the last video we took a look at using graphql with both laravel and vue and the tools available to us in this video i'd like to start building out this app and we're going to start with the back end using laravel okay so let's go ahead and make a new laravel app so i'm going to do laravel new let's call it books ql laravel and then the front end will be called booksql view alright let's open that up and let's open it up in code so let me just set up my database i already have a database made so it's called booksql laravel and it's root root okay so we need to start by making our models and our migrations so again if you look at the design we only have two models and one relationship between them we have categories and we have books and the relationship is a category has many books and a book belongs to one category so realistically you probably want to have a book to belong to many categories but i'm just trying to make this as simple as possible so we're just going to have the belongs to one category relationship so let's make our models let's start with the category make model category and dash a will create a migration and a controller which we don't need but let's create it anyways in the factory let's do the same for the book so let's open that up and let's set the relationships so start with category and i'm gonna set the guarded to an empty array just because i'm gonna make a cedar later on and let's set the relationship so a category has many books so i guess my snippets don't work anymore okay books and let's do return this has many book class okay and let's do the same for the book so i'm going to do guarded as well then do a this belongs to category class okay now let's set up the migrations and on all the fields on the book so create books table and i am just going to paste this in to save some time and then i will go through each of the fields so the title obviously the author so the image is going to be a string and it can be empty the description is just a longer form text the link is a string this featured flag is because in the design i have a featured category here uh maybe i'll design a different two maybe i'll have a hero that displays some featured books anyways that's the idea i'm not sure if we're going to use that but there is a featured boolean column there so this is the relationship with category so a book belongs to a category so we need a category id and that is a foreign key on the categories table and that's it so let's do the same for create categories table and this only has one field it's just the name of the category okay so let's see if we can migrate this okay so that works so now i want to make a seeder just so i have realistic data and the data i have in my seeder are all of these books here i have in the design maybe i'll add more later on but there is about this many and i didn't make it very very realistic in terms of the categories i just dumped like the first six in the first category and the next six the next category and the next three in the next category just so how every category has at least a few books so let's make a cedar start with the categories so php artisan make seed categories table cedar oops why is there a dash there okay and let's also do one for books and it's going to our seeds database tables heater and it's just to start with the categories and let's do the books after that and obviously i'm not going to make you watch me do this i'm just going to paste in what i have here in my other project so this is the books tables heater it's a whole bunch of books and i'm going to paste in the category staples theater and this is just a few categories okay so i have these categories and all of these books over here cool so now let's try to migrate fresh where's migrate fresh and it's also seed dash dash seed and that looks good let's see if we have data some books cool a bunch of books and some categories here cool okay so you see i also have the cover images here so i'm just going to put these in so this is the project i already did and i already have the cover images here so i'm going to put these in the public folder we're not going to use it in this video but we're going to need it eventually when we make use of the cover images so i'm just going to put it in an image folder and paste them in i guess i can't paste can i paste okay so they're all in here now cool okay now we can start using the lighthouse package so let's go ahead and install that installation composer require let's do that okay next is this publishes the default schema.graphql file which we can make use of and then we can modify it later on so let's do that okay and i'm not going to use this dev tools i'm just going to use the one on my desktop so it's graphql playground and we'll use that when we need to use it and i also want the config where's that i have to publish the config as well okay so that okay and that is published cool okay so now back to our code and the first thing we need to do is let's go into our schema graphql so that's in routes graphql schema and you can see we have some boilerplate here which we can use will not use we'll model our models after it so first thing i want to do is define our types so we'll like i said we're not going to have users in this app just to keep things simple so it's definer types we'll leave it in there for now we'll leave the user in there for now so the first thing we have is a book and this is just the field we defined in the migration so create book so all of this stuff but in graphql format so we have id and this is of type id and id is a field type in graphql and it's required title is a string it's required author string required image string not required link string not required description string not required featured boolean not required and a book belongs to a category so we have to specify the relationship here and it is a category and we'll define that right after this and it is it belongs to relationship okay so that is our book type and then the next type is category and let's do the same thing id is id required name string required and it's set up the relationship books is an array of books that's what it returns and the relationship is has many and that is it for our types so now let's start defining the queries and the mutations so um let's get our design to see how the app's supposed to work so the default view although this doesn't represent that i just want to show all the books um no pagination because that just i mean in a real app you would have pagination but again it's trying to make this as simple as possible you can see that the example here uses paginate and we won't be using paginate anyway so we just want all the books so that's the most basic query we can do so let's just do books and that's going to return a book array and that's required actually it's not required because it can be null and we're just going to use the all directive and that will return all books so let's go ahead and try this out in our graphql playground so it's books ql dash laravel booksql test graphql okay and what is it again it's books so query make this bigger that big enough one more so query um books and let's return the title there you go book was not found okay so in the config so if we go to the lighthouse config it's in config lighthouse there is an option here that says where the models are supposed to be not sure why they defaulted to app models because the default functionality for laravel is it just goes into the app folder so if we do that that should fix that error let's try again refresh it first let's try again there we go and we can do whatever we like here id what else author cool so what else do we need for our app to work we also need to be able to get the details for one book so for this view we need to make another request when we click on one and it goes here so let's do that and let's go to and we'll just copy this and we'll just change it so this will be book just one book and the parameter is the book id um later on maybe we can change this to a slug that would be more url friendly and more seo friendly and it's going to return one book and we want to find that book based on the ideas passed in so you can specify the model but i don't think we have to and let's go ahead and try that so let me just query book oh let me refresh book there we go we need an id fashion one and we can do the same thing id title author cool and if you want the category for this book since there's a relationship we can already we can do that as well so let's go category and then what's the types here we can just get the name so there you go this book by this author is in this category okay so let's go ahead and define the endpoints for categories as well so let's do that so it's basically just this but for categories so let's be categories this will be an array of categories and all this will be a category and we'll take an id as well and this will be a category okay let's try that out these this should work as well but for a category let me refresh real quick and this should be a category and obviously a category doesn't have this has a name cool and we can also do categories and name cool so that's all the categories so back to our app we want to be able to click the category and just have it filtered by those books so that's really built in since we have that relationship defined so say for example we wanted everything in marketing category so marketing is id1 i think okay it is so let's get the category first so category id one and because we have that relationship defined right here in the type the category i mean then we can get the books for this category and that's exactly what we need in our app so let's just do books and we can specify the fields we want so in our case what do we want we're going to want the name the author the cover or i can name the image and the id because we're going to click on that and we want to go to a different route okay so id uh title author and this thing i call the image so there you go we have all this information that we need which we can use on our front end when we start working on our front end what else so like i said we also have this featured category which is not really a category it's just an extra field on the model so how do we filter by just books that are featured so let's add one more here to books let's call it books by featured so like i said in the first video if you don't like directives you can just use custom resolvers but if you want to make use of directives you can do it like this so featured is a boolean as required and we want to use the eq directive and this is going to return an array of books and it can be empty so let's not put the exclamation mark and let's grab all so all the books that are featured based on this parameter coming in so right now another feature so this should return an empty array of books so let's see if that happens uh what did i name it books by featured let me refresh this books by featured and then let's grab the title it should be empty oh sorry i need the featured is true so it should be empty because none of them are featured cool and if i say false this should be all of the books okay so if i add one if i manually set one to featured or a few of them let's go to books let's say this one this one this one this one and this one and save that let's go back here and this should now have a few of them cool and again i did this in the last video and i just mentioned it but if you have some complex query that directives can't handle or if you just don't like directives you can use custom resolvers so let's say some complex query search is the parameter and it's a string and it returns an array of books and we can just use the command line uh forgot what's called it's called lighthouse query i think yep so php artisan light house query and name it some complex query so it has to be the same name as this and obviously you don't use directives here because the class will handle that okay so that goes into i think app http graphql some complex query so here is where the logic goes so you can do whatever you like in here some complex query but since i named the premise parameter search let's do a basic search here you can do this with directives as well but let's just do this return book where say app book author so this is going to do a search for the author like and let's do this so i just want to search on the argument that's passed in so i'm going to do some wild cards here and to pass into the argument here's to args and the name of the argument so we named it search in our graphql schema so we can use that and just add another percent here so it does a wild card search and just make sure to get it and this should be a search now so let's try it refresh and i'm going to do um some complex query which is actually a search search by gary i have two books in there by gary vee and let's grab the title and obviously the author is the same so title and author and let's try that app book not found slash app slash book refresh try again there we go so there's that custom some complex query which is actually just a search but we're using custom resolvers okay so now let's do some mutations uh we obviously want to be able to create update and delete our models so let's do that so back to our schema right here so there's already an example for creating updating and deleting users and we can make use of this for our models so let's start with creating i'm going to copy this and let's start with categories so let's rename this to create category and we only need a name for category so here is this so it's going to be a string it's going to be required and i also want it to be unique so let's say unique when you choose variables rule rules unique on categories table and unique on the name column so that should do the trick make sure to change this we can take the small note it should be create it should be category and let's do the same for update and delete and then we can test it out after split space here so update category so it's required the id is required and it's just a name and it is the same rules as this and we don't need this this is a category and the same for delete required category delete don't need the model okay so let's start let's try creating one updating one and then deleting one and then we'll do the same for books actually it's the same process for books it's just more fields i'll do that behind the scenes and then i'll show it to you guys working so let's try let me just put it here in the middle so it's easier to see so it is let me just delete this it's a mutation we're going to do create category let me refresh create category and create a name say new category and then we just want the id and just to say the name okay so that created a new one called new category so if we check the database there it is right there cool and what's next update category so let's change that to update and the parameter is the id so it's seven i think it's the id yep seven so let's say seven and we also need the name we wanna change it to so new category update and let's change see if that works and it did let's check the database there we go cool and let's delete the category so delete it just needs the id i think cool and we can return that so if you read the error message it says the id should be nonnull so the idea should be none no cool let's try it again refresh try again there we go seven should be gone now there we go awesome so yeah i'm gonna do the books behind the scenes it's basically the same things just more fields and then i'll show it to you guys when i'm done okay so i added mutations for creating updating and deleting books so let me just show you that it works so let's try this one first create book a new book and i'm just hard coding the category in here and returning the id and title okay so that's id26 see if that is in the database so there it is right there cool so let's update it so the next one is update so let's change it to 26. a new book changed some author changed okay let's run that okay check the database there you go cool and let's delete the book so mutation delete book 26 and that should delete it and it's gone cool so yeah i think that's all the operations we need on the back end um we might tweak things while we work on the front end and realize we missed something but i think that is all we have all the crud operations for both our models and we tested both and everything looks like it's working i like to start the front end of our graphql app using view and view apollo in the last video we built out our graphql backend in laravel and in this video i'd like to start on the front end okay so let's go ahead and make a new view app using the view cli so i'm going to do view create books ql view and let me make sure to add view router because we're going to be making use of that we need a router and let me just add view x we probably won't need ux but let me just add it anyways okay so that's done let me go into it and it's npm run serve okay so here it is i'll style everything later on in another video using tailwind css for now i just want to dump everything on the page and get everything wired up and working with our back end so it's going to look ugly for this video and then we'll make it look pretty in the next video okay so let me show you what i have in mind as to how we're going to approach this first i want to dump all the categories on the page so we'll make use of that categories i mean the categories query in our graphql and then i want to dump out all the books just all the books for now and then we can focus on getting just the books in a specific category and then we'll get routing working where we click on one of the books and it goes to this page and then after that i want to get the mutations working so editing deleting and adding a book is here and i think i'll add a new route for that too so yeah a lot of work to be done let's see if we can fit it in one video it's going to be really long but if i can get it within like an hour or so i'll leave it at one video okay so i need to add laravel cores first on the back end i did that in the first video so let me just quickly do it here um so yeah if i was running both on localhost then it shouldn't i shouldn't need to do this but since i'm using laravel valet and i'm running on a test domain then we need cores so let me just install this real quick and i need to install it on the booksql laravel site okay and let me just grab this and put it in the lighthouse config so i think i have it running here in the background there it is so i think it's lighthouse config should be right here so middleware we'll just put that in here and we should be good to go okay so back to our yeah so i just want to dump the categories so let's go to our front end and i'm going to put it in it's going to dump everything in this home view and maybe in another video we'll refactor our code into nice reusable components so let me just get rid of these two and get rid of this and this okay so let me go into the docs we have to install it i should do this after i installed the view app so just to view add apollo and that should do it okay that's done let me just add the endpoint in our view apollo.js right here it's going to be booksql laravel dot slash graphql okay and let's go ahead and finally dump the categories so if we go to queries we can import this gql thing we need to perform queries in our front end so let's do that so i'm going to import gql here and then make a query in here so i'll put it right here cool and the query we need is just grab all categories so let me go into graphql playground and do it in here first so that would be um let's get rid of this categories and we're gonna want the id and the name okay so that is the query we need so let's go back into our code and let's do just categories id name so categories id name and let's make a data state property called categories uh i'm not sure if i actually need one or if i can just put it in the apollo property like that we'll just make one we're actually not going to do it this way i'm going to show you how to do it using components in a second but just as a starting point so categories and let's make it an empty array okay oops should be returned return object okay so let's see if this works back to our app here let's see and it looks like i'm still getting coors errors okay oh okay it's gone now so that should work now let's see let's go into the home component and there are the categories cool so it does work awesome okay so like i said i want to make use of components so apollo components apollo query uh you can still do it this way if you would like but doing it this way just allows you to clean up some of your javascript and in some in this instances you don't even need the javascript and you just use this apollo query which uses a scope slot to grab all the information you need so yeah let me just grab this and let me show you what i mean so i'm going to paste this in up here and here you would you're going to separate your actual graphql query into a file and that is a good way to keep your code more organized in my opinion so i'm going to make a new folder here called graphql and i'm going to make two new folders one for queries and one for mutations and for this one specifically i'm gonna have one called this is categories so categories dot gql and all this is gonna have is our query here so let me just grab this paste this in here and save that and let's continue working on this so this would be graphql slash queries slash categories graphql and like i said this is using scope slots and if you're not familiar with scope plots don't worry too much about it this just grabs the data and it destructures it here which allows us to use it in our template so let's erase these comments and there's a conditional here and it just shows loading you can put a spinner in there if you like if it's not loaded yet but if it is we can iterate through them and display them so let's do that so we are using a category and we're going to get it from data dot categories and then we can just output the id and the name and it's also put a key in here and make a category.id and that should work hopefully let's see if it works so yeah when i was doing this i got this error and it took me quite a while to figure out how to fix it and hopefully what i did before i fixed it again and the answer to that is just to delete your node modules and try again i mean delete your node modules and npm install again so i'm going to do that so let's go ahead and do that let me just stop this and do it in here so node modules should be in there so let's do rm rf node modules and let me npm install again okay so it's done let me try running it again and let's see if it works this time okay so it looks like it did work there's some warnings there but let's see if it worked and there you go it did work it showed it and it's displaying it correctly so these warnings can get quite annoying as you write more queries so there's a package that allows you to have autocomplete for graphql in here which is really nice but i actually haven't had a chance to look at that so what i'm going to do is just add a eslint ignore file and i'm just going to add star star slash star dot gql to it and hopefully that removes the warnings so let's try again okay so it looks like it did cool so back to our code if you look here there should be a brief period where there should be a loading state and it's getting it from here and it's displaying loading when it's loading but if you look closely if i refresh there is no loading here so you see nothing there so i'm not sure if that's a bug but the way i fixed it was to use another property here called is loading and use that instead and if we do that that works so if we save that and if we refresh there you see the loading indicator before the data is load from the back end okay let me just make this a bit bigger for you guys okay so these should actually be links so let's change that so i'm not going to use a ul anymore i'm just going to use a div and for these i will use anchor tags and let's just make them go to nowhere and we add a period between the id and the name and let me just add a class here called link margin and let's put it here in the style sorry style link margin let's make it margin right well 24 pixels see how that looks doesn't seem to be auto reloading for some reason okay that's fine okay now let's dump all the books so very similar to this let's just dump all the books so i'm just going to grab this duplicate it and let's add a new query for books so first let's do it in here so it should be books and when we have id title author and image i think okay so let's grab this and put it into our books query okay and then let's put it in here the whole should the whole thing should be a link as well but we'll just put as a div and let me just remove this again we'll style this in the next video if i get through all this frontend stuff and this should be let's just dump the books book sorry this should be book data.books key is book id and let's just jump dump the book id and the book title just to see if it works and yeah does seem to work cool okay so now we want to be able to click these and have these books filter based on the category that we clicked on so first let's take a look at the query that we need for that so that would be a specific category so let me just remove all this so it'll be category and then i need to pass it an id so just grab the first one and we can get the id in the title of that category but what we want is the books for it sorry name of the category and then books and then we want id title author and image there we go okay so let's copy this and let's make a new query let's call it category singular and let's paste that in let me save that and back to our home view let's change what we have here to make use of that new one just to see if it works so instead of books let's use category and right now the category is just i mean the id is just hardcoded we obviously want to pass the id from here into the query and we'll do that in a second let's just see if this works and yeah that's not going to work because the format of the data coming back is different so let me put that back and we make another one here just underneath all of this uh let me comment that out for now let's make another one and this one leaves the category and let's look at the structure coming back so the structure is data.category.books so let's go and do that so book of data. category dot books and that should still work so we hard coded category id 1 in there so this is one so that's good so it seems to work if we change it to two here that should return everything in category two and that's cool so now let's see how we can use variables so the id is not hard coded and it's passed in so in our category graphql we can just accept variables like this so we need an id it's of type id as required and we can just accept that in here and now in our front end back to home we can accept a variables prop like this so variables equals and we can just put it in line here so id is we'll hardly close it for now and then we'll have a dynamic piece of state that keeps track of that as we click a category so let's say two or put it back to one actually and this should work and there we go back to one change that to two cool so yeah we need to keep track of the selected category so let's go ahead and do that i'm going to put a new piece of state here called selected category and let's default that to one that should still work cool but as we click on those links so these links here we want to update that selected category so where's that link right here so let's make a click handler here on click sorry it's click i am going back between react and view so okay so click is let's make a method called select category let's pass in the category category.id and down in our method let's just update that state so let's make a new section here called methods select category and that will accept a category and let's just do this dot selected category is the category that's passed in so now this should switch based on what we click so by default it's one and that doesn't seem to work let's see what's going on select category is not a function oops select category try it again let's refresh this okay and there we go it's getting a new passing in the variable and getting a new set as we click on the category cool okay so if you look at the design you'll see that we have all the categories here but we also have these two extra they're not categories but there's one for featured and one for all categories so these are separate queries from the categories so let's see how we could implement those so first i want to add those two here so let me just add those to the template so just hard code them in here outside of the for loop and let me just add a prevent here just so because if you click on this it it goes to the top of the page if you have a hash in here so let me just add that so let's do that again add link margin let's add one for all let's add one for featured and see how it looks okay so here we're passing in an id and for these ones let me describe this we don't need ids we need a whole whole new query so here's what i'm going to do let me add these for this one i'm going to pass in all and we'll do a check in that select category method and we'll check if it's either all featured and if it's not all are featured then it's just going to be an id and then we can just fetch it this way but if it's all or featured we have to use another query here so let me show you what i mean so let's go back to that method select category and we still have to do this we still want to update it but now we need different queries based on the category so if the category coming in is all then i'm going to make a new piece of state called query and we're going to hold each query in a variable so let me show you what i mean so let's make this new piece of state first called query and we will default that to a query called books query which we already have and should return all books so let me fix that in a second let me just finish this conditional here so else if category is featured then we need another query called let's call it books featured query and we'll add that in a second else this dot query equals category query which we already have but we have to set it to this variable so i hope that makes sense so let me just add these queries so i'm going to add this one because we already have it first so let me just get rid of this i don't need this anymore since we are using apollo components and what can i get rid of there yeah we don't need all of this okay and let me add we can just import the queries here so i'm going to import category query from graphql queries category query and i want to set that in our state so i can do category query and i can set up the category query or i can just leave it because it's the same name so now we can replace the query that we imported up here right here to just category query and everything should still work and it does not sorry did i name it category.query should be category dot gql sorry it should be gql okay so yeah this is not gonna work because i have to import this query as well so let's go ahead and do that this one already exists we just have to define a variable for it but books query is it's called books and that just returns all books and we can add that here as well and we might as well import this one up here that we're using already categories query and we'll use that we'll just use that instead so we'll call it categories query let's import that so right here categories query and let's use that just put underneath here and we need one more for the featured query so if you click featured we want to filter by that so i'm going to make it here books featured query books featured and let's add that here books featured query so yeah let's take a look at that sorry i had to restart my computer i was being really slow so i lost everything here so let's just test out that books by featured so books by featured i think it takes a featured let's say to true and this will just return all the books so id title author image okay so let's grab this let's add a new query books featured gql let's paste that in and let's add in the variables while we're here so it should be featured boolean required and featured is featured okay save that save this i think okay this is not going to work yet it should run but it's not going to work okay so wait i think these ones okay so right now it is will this work okay so this one doesn't work because in our template we only have one apollo query and the structure of the graphql coming back from the back end is different for each case we have here so we're going to need a conditional in the template here to check if it's either all featured or the default case or the else case is going to be a category so what is it right now where's the data so right now it's defaulting to the selected category of one which is what you see when you reload the page so i want it to default to all to show all the books so let's do that let's change this to all and then we're gonna have to change the structure of our apollo query actually i think i have it up here yeah i do have it up here so let me just use this and then we'll add a conditional around this probably not the cleanest way but again this is just a first pass so this is going to be what is this books query sorry no this is going to be query because this gets updated as we click on it as we click on these links up here and we're changing it down here yeah okay and the default is this books query okay so now we have to add the conditionals so let me add a div here do the if selected category is all then we can just do this let me just indent that and then we can do a so this case would be uh this should this is going to be the else case and i'll have an else else if case as well for the feature let me just handle this one so this will be the v else and yeah this should work but the uh feature this one should not work but all and the categories should work okay so right now it's showing all of them cool if i click on one of these it should work as well and it does cool two three awesome okay so this one's not gonna work let's just add that case in so we need grab this it's going to be else if category is featured and this is fine all right like i said there's a lot of repeated code here but i'm okay with this for now so for this it's going to be book of data dot if you look at the query it's books by featured by featured and this remains the same and i think this should work now oh you get all them featured i think i have some features in there books by featured of undefined oh yes i need variables for this so in this case we can just hardcode true because we don't want the case for its when it's false featured true let's try it again so all there we go so these are the featured ones and these are the categories so i get an error here but still seems to work i'm not sure what that error is but yeah this seems to work cool okay so next i want to work on routing here so i want to click on one of these books and then i want to go to this dedicated book page so let's go ahead and do that so let me make a new view called let's call it book and let's just just copy this and just call it this is a book page okay and let's set up the route for that so if we go into router js right here let's make a new one we'll just duplicate this and we'll call it books and then the wild card is going to be id and we'll call it book and book.view okay so that should work so book slash one okay so let's make a link here for these books um let's do that so back to our home view let's just add a link here so now it has to be a link so change this to that actually not a anchor we're going to use a router link and it's going to go to these template strings here slash books slash book dot id and we have to do this for all of these cases here so let me just do it like this didn't close it properly router link and the same for this case router link okay let's see if that works it does so let me just wrap these in divs so they're block level elements and so they're on their own line same with this and this one too and that did nothing oh sorry i meant to wrap this within a div is that what i meant to do i think so let's try um so yeah let's try wrapping this in a div okay there we go okay so no i didn't mean to do that i just meant to leave this as a div and have the router link here so let me just undo these changes back up okay so that should be back to where it was before and yeah i want the router link around here so it's going to be a router link let me just put this at the end and it's going to be i should just copy it two equals slash books slash book id okay so yeah that's what i want so let's just make sure that works cool effects like it okay it goes there and let me just make sure i put this on these ones as well okay so now that we're here we might as well add the image and the author name in here so i'm going to do that in here so let me add the author first uh book author okay and let's add the image so image let's do that a bit so this would be cover image and let's find this and i'm going to use a template string here and in the back end if you remember let me show you the database we have the image just the name of the file and what i should have done is just have the full path in here so we can just grab it from the back end and just spit it out on the front end so i'll probably make that change behind the scenes but for now i'm just gonna hard code the actual url here so it's books ql image slash and then book.image so yeah again you should store the full path on the back end but i'm not going to do that here i just want to say it working okay so there it is and there's the rest of them cool okay so i am going to copy this and do the same for these two okay so now there should be images for all of these okay featured marketing cool and all the categories awesome cool okay okay now i would need the book information as i click on this and here we want to make another request to the back end to grab the book information here and we have the id in the url here so let's go back to our book component and to get the id all you have to do is this uh route params id i think this is a dollar sign so let's see okay there you go and if i change this cool so yeah all we have to do is just grab an apollo query here similar to this and just display the book information so i'm going back here let me remove this let me just indent okay so query is going to be let's just go back to the require syntax and it's going to be graphql queries book dot gql so i don't have that defined yet but that's the one that just gets one book and that goes here like that and we also need variables and the variable is just going to be the route param so it's going to be id is route.params.id and let's take a look at the playground to see how to structure that query so we just need a book that's going to be book pressing the id start code 1 and id title author and we probably need all the information here since we're on the book detail page but we'll just return what we need here book author image what else do we have here anyways let me check the database so yeah let's just return everything here image description link featured description link featured and we want the category we're going to need this later on so there's a category yeah it's category and we need let's grab the id and the title okay sorry this is name cool so yeah let's just grab this and let's make a new query for just book let's paste that in and let's add the variables or the parameters that we need so id is type id required and here instead of hard coding it will put in the id oops id okay so that looks good and down here so we no longer need a v4 since it's just one piece of information coming back so it's just going to be let's see is it data yes it's gonna be data dot book dot whatever so data.book.title and data.book.author and you can put in the rest of the stuff we'll add this when we style it but let's put the image in here as well so image source is again i'm gonna hard code the url but you should store this on the back end as a full path booksql variable test image slash data.book okay book cover close this out and let's see if this works so it does work awesome yeah so it works for all of our books here and let's go back to the home page and see if clicking it works awesome so yeah i thought i could fit all of this into an hour but this is already pretty long so i'm going to stop it here so we have all our queries done which takes care of reading the data but we still have to work on the mutations so if you look at our design we can edit and delete a book from here and we can also add a book from here and there's also crowd operations for categories but we'll just be focusing on the books here i like to continue working on the front end of our graphql application and more specifically i like to work on mutations so in the last video we got most of our queries working so we have the ability to display all books featured books and books in certain categories here and we also have a routing so it goes to a specific book and shows the details of that and now i'd like to work on mutations so if you look at our design you'll see that there are links here for editing and deleting this specific book and there's also a link here for adding a book so let's start with adding a book and then we'll work on creating and deleting i mean updating and deleting after so back into our home view let's go all the way up here and let's just put a link here let's make it a router link and we are going to make it go to books create books that's great so let me just put that in the router so i am going to duplicate this one and i'm going to put it up here so it takes precedence over this one so books create our let me name it books add that kind of sounds better because you're not creating a book you're adding a book so let's name it add book and let's name it add book view okay let's make a new component here for adding a book view and let's just put something in here form for adding a new book goes here okay and let's see if this works and i don't think i have my app running i do have it running so where is it oh i forgot to put something in here add a book so there it is okay did i change this i think i forgot to change it books ad sorry books ad so let's try that again so there we go okay so i'm just gonna paste in a very generic form here for adding a book and all the fields of a book just so you don't have to watch me add the form fields because that's going to add a lot of time so let me just do that a few moments later okay so here's what i added it's just a basic form and there's nothing view specific here yet and there's some basic styles in here so it doesn't look too ugly it still looks very ugly but there we go and these categories are hardcoded as well okay so let's start making this dynamic okay so the first thing i want to do is populate these with the correct categories so let's go ahead and grab some code from here so the one with the categories let's grab so let's grab this apollo query and let's go back to add book let's paste it right underneath here so underneath this form group and let's remove this and let's just list the categories here so let's put it as a div take off this href and let's get to the correct query so we already have this it's uh this is required in and add slash graphql slash queries slash categories jql and let's remove this click handler and the class and if i did this correctly this should show the categories in our book view and it does cool so we want this but we want it in the drop down so let's just replace this div with a select because that's what we want we just want to copy this and each one of these is going to be each one of these and the v4 so we'll change the option and we will add a value here the value is category.id and in here it's just going to display the category name so this should work now let me comment this out or just remove it i'm gonna take this move it in there and this should now populate the categories and it does cool okay cool okay so now i would like to add a v model to all of these fields and just hold them as state in this component because we eventually have to submit this to a back end so let's go ahead and do that so let's start with this the model equals title and i'm going to do the same for all of the fields this one is author this one is image and obviously this is going to be some sort of image picker component or like a file uploader but that's out of the scope of this tutorial uh description v model description link link featured featured and for the select we can put a category here and now let's make some state script data turn so let's just put everything we just defined so title author image description link featured will be false by default and the default category is just one okay let's see if this works okay so we're not going to see any changes here but if we open dev tools let's see if this reacts to changes let's go into our component and change does this change it does cool author image description link featured works this works awesome okay now let's work on that create a book mutation so let me go into graphql playground first and let's try it out here so it's gonna be mutation i think i have one called createbook and this takes in the id oh no no id just uh whatever parameters you need to create the book title new book author and all the other fields okay so here is the mutation so let's try this up okay so that created a new one called new book let's just double check the database so it should be number 25 and there it is cool and it added everything we specified in the query okay so we can copy this and let's go ahead and make a new query under mutations new mutation i mean let's call it ad book or create book i'll name it ad book but the actual mutation is called create book uh yeah just get your names right great book so let me just replace these so i'm gonna put a bracket here oops i want it here and paste that in and then i'm going to replace that with variables okay and now let me just replace these with the variables okay so now back to ad book let's make a new submit handler on the form where's the form here it is at submit.prevent let's call it adbook and let's go ahead and make a method methods add book and let's just see if this works okay add book adding book and let's go into the documentation and take a look at how to do mutations so let's grab this so this this apollo mutate so it's all of this i think it's all of this so it's pretty long and a lot of stuff we don't need so let's just work with this see if it's the right indentation so this closes this okay don't need this okay so we don't need any of this don't need that but we do need the variables and let's go ahead and just import this instead of using this gql thing here so let me this and we'll call it create ad book yeah it's called ad book and let's import that up here just like we did in the last video so import add book from graphql mutations add book dot gql okay oh sorry this goes outside and this can be add book and the variables so let me just grab everything in here see if we can just do this and see if we can work some magic here copy that and say this dot let's add okay i think that is it let's see if i did everything correctly so any errors no errors cool so if you're curious about what this web socket is it has to do with graphql subscriptions which is a feature of graphql and i haven't explored it yet in the lighthouse package but i think this is what this websocket error is coming from where this websocket air is coming from so just ignore it for now okay so let's see if this works so this is what happens when it's successful in this then callback after the promise resolves so we just want to console.log the book that is added and in our query we're just returning the id in a title okay so let's try this say great book great author and the image is going to be broken like i said it's just a text field so just make sure this image exists or it's going to be broken this is the description same with the link just make sure you add a proper link see if this works and let's see if this works so it should be two category id two if it works so it looks like it did work awesome so there's the data coming back it's just the id and the title and just to double check we can check the database and there should be a new one in here and there is awesome and two is correct for category id and everything else looks like it worked so what do we want to do when the promise resolves so we want to clear this information or in our case we just want to redirect back home so let's do that so let's just do this router push and let's just go back home so one more time one more author image i'm just gonna type gibberish featured biography so now this should redirect to the home page and it does see if it's down here and there it is cool and let's check the database just to make sure it should be in there 27. there it is cool okay so now let's work on editing a book so we go into one of them and then we want to be able to edit this book so we want a link in here so let's add that link first so let's go to book and just underneath this let's add two links here let's just say edit and delete and it's both give them a class of what i name it i think of link margin just to give it some margin on the right and see how this looks all right let's put that in a div let's just wrap it in a div like this cool okay so now it's on the bottom awesome so let's start with editing so let's go into our router and make a new one for editing so i want it to be box id slash edit books id slash edit and let's name it edit let's name it edit book okay and i'm gonna i'm gonna duplicate this one because we're gonna be reusing a lot of the logic here duplicate let's call it edit book and say edit book let's change this to edit book and down here let's change it to edit book actually no that was the method right yeah and let's change this one to update book and we will import that and we have to make that new mutation and changes to okay so let's first again play around in the playground and let's check out how this works so i'm gonna paste that in because it's very similar update book but now we need an id so let's update the one we just created or the one we created in here so 25. and let's say new book changed andre changed image changed changed amazon changed description and featured false category 2. and we just want to return the id and title see if this works i think it's called update book so it did work let's see if all that stuff changed in the database 25 so you saw all of that changed cool so let me grab this and let's do the same thing say update book let's paste that in and let's add all the parameters in here so we need all of this stuff let me just do this okay and let's be a dollar sign here they are mostly strings so let me just do that and i will edit this id this is required this is required these are not required this is a boolean and the category isn't it required okay and same for this change this oops just add the variable like that and that should do it update book update book okay and let's give that a try so right now it is not going to populate it with the information that it already has um we'll do that right after so it should go to 16 slash edit we'll put the link here let me just put that right now so edit book and book this should be a router link two where's it slash books slash id slash edit so they should be book dot id okay does that work oh what's wrong data.book.id okay okay so yeah like i said this should show the information about the book but we haven't done that yet i just want to check that it does update but i think i forgot something here so in our update book so we have the id here but for editbook we don't have the id here as state actually we don't need it as state but we do need it when we're passing it to the mutation so let's just add that id is this dot route dot params dot id so let's save that and let me just go to one that i created down here just so i don't edit one the ones that has a proper image so this one edit okay so title is 27 since that's the id author change and for this stuff let me just do this let's make it asdf for all of them featured and science and what did i do after i just oh it's gonna go back here i don't want to do this let's just see if it works and seems like it did work there you go 27 let's check the database there you go so added all that i mean it updated all that and everything seems correct so where do i want it to go after we go in here we edit it i want to go back to the read page so instead of this we just wanted to go to slash books slash this route.params.id okay but yeah like i said we want this information to be populated as we hit edit so this has to be populated with the correct information so we already have a query for that and we already did that in the book view so let's do something similar so let's import book from let's grab this queries book dot gql and instead of using the apollo query component i'm just going to do it the original way where we just use that apollo field here because i need to do something after it is successful and i don't think there's a way to do that with the component so let me show you what i mean so if you go into the api reference there is the example i will show you in here so this result hook is what i want to make use of so this is this code is executed after a successful query and i need that because i want to update the state once we have a successful query so let me just grab all this and remove what i don't need later okay so i'm gonna put it right here okay so so let's make a state to hold the book so i'll put in here and it'll be null by default and this is what we want to populate book and the query we already have imported up here so we want to be booked so we can remove this and variables so we have to use it this way is the correct way if you look at the original example over here it is just where's variables variables yeah it's just a an object here but we have to use a method and i'll tell you why um as i write the code so i tried doing it this way originally and it didn't get the route parameters which we need because that's the variable we need so let me just show you what i mean this that route that perhaps so you have to wait for the route params to be available and this is the way to do it let's do that and the variable we want is the id and it'll be this that route that params.id so yeah like i said if you just did this like this then it wouldn't work the route param won't be available so you have to use this method okay so we don't need this but we do need this result and we don't need any of this other stuff and i don't think i need this okay so all i want to do here is just update this state over here just so this can this information can show here in the template so i just want to do this that title equals so it's going to be data.book.title and i want the same for the rest of the states this is going to be author this will be um image and category is going to be a bit different it's just going to be data dot category dot id because that's the way the data's coming back so if i did this correctly this should work hopefully and it does cool so as you can see the data is populated with the correct information so which one is this this is number three so if i were to change this in the back end this should update number three sapiens changed and let me just save that if i refresh this it should be reflected there cool so one more test here to see if this works i don't want to change this one because it's going to change the image it's changed let's make it not featured and let's make it go to biography update book they should go back to the view page it does and it looks like it worked check the database refresh there we go awesome okay now let's work on deleting and that should be it so i want to delete this and then i wanted to go back to the main page with this deleted so let's go ahead and do that so let's go to our book dot view it's right here and let's add a script here we have to import that delete query delete book mutation i mean so import we'll make this in a second delete book from graphql mutations delete book dot gql okay let's make that late book and let's go to graphql playground and check out how to delete a book so it's just mutation you need the id and that's it i think oh sorry delete book you need the id let's delete the last one here 27. and that's it we can return the id of the deleted thing and even the title if you want and that should be gone cool so let's grab this let's paste it in here should be an id required and then id is id okay back to book let's put a click handler on this the delete link let's do prevent so it doesn't scroll to the top of the page so delete book and let's add a methods in here delete book so this dot apollo dot mutate mutation delete book and variables we can just do it the normal way so id this dot route the params dot id and then then smooths up data just going to log it and let's go back to the home page so this router push home and that should do it see if this works okay so let's go home and it's deleted the last one let's refresh this let's go all the way here let's go to 26 great book okay let's delete it okay that looked like it worked 26 should be here okay it's still here okay so it is still here that's because it's cached so if i refresh this should be gone so yeah we have to handle that case let me just show you the database should be gone um i don't really do too much research or i didn't think about it too much of how to solve that issue of caching we obviously want caching if it was like a real app because that would save hitting the database but for this case i just removed caching completely which is not ideal but it does work so i think it's called fetch policy so if i change this to no cache that is not gonna cash at all no cash so let's try it again let's delete new book changed delete and that should be gone it is gone awesome it should be out of the database too awesome so there you have it guys we've done a lot of work here on our front end and now have complete crud functionality for all of our books so a few things i would consider if this were a real app the first one would be so remember when we did categories here this is just happening in the browser say for example you wanted to send a link to someone with the specific category selected that wouldn't work so what i would consider is adding a route to save the state so that would be like categories slash four as we click this and then you can send this off to someone and that would preserve the state so that's one thing i would consider doing another thing i would consider doing is using nuxt for serverside rendering mainly just for seo if you care about seo and it also makes routing slightly easier so that's another thing i'll consider using next and yeah i think that's it for now i'd like to style our graphql app with tailwind css you've seen the design throughout the videos already so let's go ahead and get started so there's the design we'll be recreating and yeah let's get started so let's go to tailwind the docs and let's install it so npm install taylor and css okay next is to create a tailwind config so just do this command and we'll name it tailwind.js okay win.js okay next is to create a css entry point so let me just grab this and let's put it in let's put it in assets let's put in here just call it main css okay what's next next we can just paste this into our post css.config.js let's do that i think there's a post css config.js there it is so let me just do that okay all right and then that's it so let's remove our styles here the default styles i think it's an app view so there's some default style here so i'm going to remove all of this and i'm going to import our main css so source equals dot slash assets main css i believe and then let's just see if this works um let's just put something here p dot pg blue text white lorem 20 okay see if this works and i think i forgot to change this so it's not tailwind.js okay so there we go there is tailwind working and we can start okay so the first thing i want to do is change the font so the font i'm using in my design is roboto so let's import that and use it so i'm going to go into app view actually now i'm going to import it in here so i'm just going to paste in the import from google fonts and i'm using just the regular weight and the bold weight and now in our app view i can set the font stack here um font signs let's make it antialiased as well and let's make everything black let's make sure to update the font stacks it's right here so let's put rubato on top okay or i can just move this up that's fine okay now i think it's using roboto let's double check it is not i'm sorry this is supposed to be class okay that should work now okay that looks like roboto awesome that's roboto cool okay so let's start with the header here or the nav so let's do that okay let me just remove this and will you make use of this so i didn't have and we'll add a class and it's going to make it bg purple dark i'll just use tailwind's default colors and i want a container here so the whole thing is constrained within a container and tailwind does come with one but you have to uncomment it in the tailwind config container so yeah i want to center it and i do want some padding so let me uncomment that and let's put these within a within a container okay and let's see how this looks okay cool so i'm gonna want the logo here and then these two on the right so let's make it flex right here flex i want items center so they're vertically in at the center and justify between to send them to the left and the right let's add some padding so now the first flex item is going to be the logo so let's add a new container for that logo here it's link and i wanted to go home so we'll do that it's an image and i already have it in here so svg let's do slash assets slash logo.svg and we'll do logo here and then the second flex item is going to be these two so let's wrap it in a div and let's see how this looks okay looking pretty good let's just fix these so i'm gonna do this class equals so i want to be white and i want to have a hover just of a change of color when you hover so let's do text gray light when you hover over it and i want some padding on just this one okay it looks pretty good and i want to remove the underline first okay that pipe is right here and i want to remove the underline on all of the links so we'll do it in here so we'll just add it after this a text decoration none cool okay now let's move on to the next section which should be the hero so this part over here and it's within a container as well but it has a great background so we have to do the same thing so let's do that so i'm going to put it in home because it only appears in home so let's just put it up here let's make some roof right here okay i'm gonna name it hero i want some bg gray light and i want the margin bottom of 24. and then this is where the container goes and just put some stuff in here see how it looks okay looking good and again i want to flex make it a flex container and then this will be one item and this this will be the other item and i can justify content space between so let's do that so it's going to be flex item center justify between and let's give it some padding so now the two flex items should be the first one on the left is where the where this goes so let's say book recommendation site built with graphql so let's make it an h1 book recommendation site built with graphql and then underneath it i'll have built with variable i should just paste this in too bad you're watching me type it graphql okay and the other flex item is going to be the hero image and i also have an svg for that and some assets it's called hero svg put the hero in here okay so let's see how this looks okay it doesn't seem to be flexing what i do around here i spelled it wrong that's why that's great okay cool i actually don't want item center here so let's move that okay so for this i don't want it to be the full width so i just want it to be like here let's add a class let's see if i can do width threefourths or something like that okay that doesn't do anything let me add a margin here just push it down a bit okay cool so i want let's try putting the width on here on the h1 and also on this so class equals width threefourths okay so that's better and let's just put a margin here after the h1 say mb4 cool and the line height looks a bit too tight here so let's do normal i think okay okay now let's add i think i have buttons here yeah so the view books and the view screencasts button buttons so let's go ahead and do that so it's going to be another section here and it's going to be flex as well and items center and let's make them anchor tags class equals bg purple dark text white i want to be rounded px4 py4 let's get a margin right and i want it to be slightly different when you hover over it so let's do however it's slightly lighter and it's going to be called view books see how that looks okay looking pretty good just put a margin after the paragraph right here say six okay and let's do the other button so it's going to have a border border purple dark border solid let's be rounded as well it's gonna be purple dark px4 py4 and hover bg purple and hover text white this one's called view screencasts okay okay looking pretty good hover works awesome okay let's continue working on the next section which is the grid of books so let me just turn on my grid here and as you can see it's in quarters so one quarter here and one quarter for each of the books so let's go ahead and do that so i'm going to go into the tailwind docs and if you just search for grid we'll just make use of this and change it to our needs so i want something with a gap so let's look for that column spacing okay so this one is in thirds and yeah just make use of this okay so where am i i'm gonna put it right after the hero so this is the hero let me just end this and let's see what we get with this this should be thirds see if that works okay so it does work cool so let's wrap this in a container cool okay this is not aligned here i think i don't need this one so let's remove this and this one as well okay see how that looks okay so now that's lined up i think yeah cool and we want quarters so let's make one more of these and then make them quarters so one third should be four okay okay looking good and i want the gap to be a bit bigger so i'm going to change this these these twos i'll change these to four okay awesome so if you take a look at the design we obviously want several books and we're going to be looping over some sort of variable that has all the books so we wanted to wrap uh so let me show you what i mean so right now if i can just keep adding more of these then it's not going to wrap it's just going to stay on the same line here we do want it to wrap so if we add flex wrap it will wrap okay that's what we want let's just add a margin bottom on them as well so for these let's just put mb say 12 or something okay it looks good however we don't want the whole thing to wrap because this first section the first quarter is just the menu and then we want these to wrap so let's make some changes here so what i'm going to do is going to have the first one to be one quarter and then the next one to be three quarters and then within that i'll have more items let's see how that looks first okay that looks good and from within here we want these items to wrap so let's add flex to this one flex flex wrap and then these ones we want to be one third each so if class equals with one third let's add that px4 and the mb12 so let's see how this looks let's just say lorem 20 or something let's add a few see if that works okay so that is looking like what we want let's add a few more see for wraps and it does so that is looking like the layout that we want cool okay so this first section is where we want the the navigation to be so let's do that so here's where the nav goes okay so let's go ahead and grab that and this is the one so let's grab this whole thing and let's just see how that looks right here let's reinvent that and let's see what we have okay cool let's make this an unordered list with some list items so here instead of a div let's make a ul and these are still anchor tags but they have to be list items so let's do that for these and the same for this one see where that gets us okay uh i didn't do the list item correctly for this one so yeah this should be a list item because that's the thing we're iterating over so we don't need this anymore but this should be an anchor tag now let's see if this works okay excellent and we also want the add book here so i think i have it down here yeah so let's just add this one too at the bottom so after this loop we just add this and let's wrap that in an li as well okay so i don't want these numbers i was just there so i can see the id okay and let's remove the bullet points so for the ul i can do class equals list reset and let's also make it a bit larger okay and if you look at the design the spacing between them is pretty liberal so let's add some margin for all of these here here i'm going to put it here oh there's already a class on that one let me just add that after so class equals amb6 let's take this out and mb6 okay cool looks good and let's just remove these purple links so we can do here on the class so let me just do it for these ones first so text black and let's also make a hover state hover text gray darkest so let me just crop copy this oh there's two there's one one and i have to add it to this too class equals this and this one too i think okay looking good there's the overstate very subtle but that's good for me okay looking pretty good okay so now let's work on the book images here so right here they should be in here and they should be looped over so let me just grab one of these from i'm gonna grab this one here so i'll take care of the different cases later on let me just try to get one working and displaying correctly so i'm gonna remove these ones and just work with just this one okay so let's paste this in and see what we get okay okay so it is not in the grid format that we want see what's going on here so we want the thing that we're iterating over to have these classes so this actually belongs in here where we're iterating over the books so let's see if that works okay so i made it smaller but still not quite what we want that's because the parent component of this should have the flex container so let's move this and here so this is the parent of this so i think this should work okay there we go so yeah there's a lot of nested divs here and yeah so that should be fine actually so let me just move the title and the author underneath so i'm going to move this underneath the book okay and you can see it's not a block element so let's just wrap this in a div okay looking better and the books images are almost the same size but you can see some of them are not the same height so we can specify a hard height on the image so here we can add a class on the image you just put h64 was what i found worked for me see how that looks okay so that looks pretty good now now everything's aligned okay and let's add just a small margin underneath it okay looks pretty good now we can work on the styling of the title and the author so it's just bolded and slightly lighter color okay so let's do that so i'm also going to move the id i don't want that i just want the title okay inside a class on this let's make it slightly bigger let's make it bold and is it a link color right now it is so let's make it black let's make it hover text gray darkest and let's put a select margin on it okay let's see if the helper works okay there's a subtle hover color change there and let's work on the author and i just want the color to be a bit lighter text gray darkest okay so that looks pretty good to me okay cool um let's also add the link right now it's just too uh it's all it's only on the title let's put it on the image as well so let's just grab this router link and we can just paste it here let's close that and i can close the router link here see if that works okay it does cool um i think this has to be block or the margin it doesn't apply there we go so that moved down slightly cool okay now let's work on getting this other stuff to work because right now we only have this case working so let's go ahead and do that so if you look down here we have vf categories all else if it's featured else it's just one of the categories and we can do the same here and we can just put the conditional on the actual apollo query so we can do this and then we can grab the other cases as well so i'm going to copy this let's put it in here and that case is what's that case v else if it's featured so i'll do that for this case let's put it in here and then let's do the last case here it's just vl so i'm just gonna grab all this and let's put a vls on this and see if this works sorry i think i put this in the wrong place this should be up here yeah up here sorry yep put that in there that should work now see okay so there we go let's see if this works now okay we have to change that but you can see that these are changing awesome okay so for featured you have to do the same thing so let's do that so featured is this one and what do we do again we added this class for the thing that we're iterating over so we're iterating over this let's add the class and then for here we added class equals flex flex wrap so let's do the same thing here class equals flex flex wrap and the thing we're iterating over gets that class see if that works cool featured okay so that's working and these work too but now these are in a different format as well so we can just do the same thing we did up here for the all category or we can just extract this to a component and make use of and reuse it down there so that's probably the smart thing to do so let me just copy this let's comment it out and let's make one called a new component called book listing and then we'll pass in the book cool let me close that and let's make that component uh we're making points book listing dot view template space that in and we're going to accept a book prop script props let's just use the array syntax it's going to be a book okay let's import that in here down here say import book listing from components slash book listing view and then we can use this in here and see if i did everything correctly okay so it looks like i did let me just refresh to make sure and it does work so we have that new book component and now we can just make use of that in the other ones so let me grab this and i'll just leave this in here so if you look at the code you'll see that in there but we don't need this anymore what is this so yeah we can just remove this and say book listing and same for this book listing okay let's see if that works so all works featured i don't know why that doesn't work why is there no image oh sorry i forgot to add the image into the component so it's here still that's why i was working in the first case so let me just grab that save that now the first one shouldn't have okay so now we can just add that in the book listing sorry about that that should work now there we go featured awesome awesome everything works and is looking pretty good now awesome i say awesome a lot okay let's quickly make it responsive not too much work here so the navigation is fine since there isn't too much in the nav i just want this to stack after a certain breakpoint so i'm going to make it i think 992 is the large breakpoint right there so we'll just work with that one okay so let's see what's going on here so up here so on mobile we want it to be flex direction of column so it stacks but on large screens we want to be flex row large screens we also want justify between and that should stack now i think and it does cool um i just want some margin on top of the image so let's do that for the image container so that is right here so on mobile i want mt say 12 let's say 10. okay that's fine and then large empty zero okay see if the normal one still works okay it is cool this looks pretty good um this we can make full width too it might look weird when it's still kind of big but you can add more breakpoints if you want so let's make it full width here so this thing right here so on large screens we want with width three fourths same with this one but with full on mobile and up with full okay cool so that looks pretty good awesome that's that and for this i just want to stack this so again it's it probably looks fine at a certain point like here you can still fit like maybe two but i'm just gonna stack it so first um remember how we had one fourth and three fourths let's stack that first so one fourth right here so large screen we want onefourth and we'll pile it up let's do that and same for the threefourths one with full large width threefourths okay so that's the actual and then we also want the same for the thirds here so do for each case let's just do it for this one sorry not this it's the categories for this case so right here large width full and that to anything okay there we go cool again that's kind of still a lot of room here but i think you'll get what i'm trying to do here so let's just put this on the other cases too let me just grab this so here and here so now it should work for all these cases let me just refresh it first so all cool featured cool oh this is the other thing we can just delete this this is all we had before and all these cases awesome so it is responsive now let me get rid of all this stuff after what's this this is the container so that's the end of it and container so all of this stuff what is this and that's probably the whole container yeah so all the stuff we don't need cool let's see if everything still works awesome it's responsive let's see if large screens don't work and it does okay let's quickly make this view work not going to make it too pretty just just a little bit i think i do have a design for it yeah let's just do something like this okay so i think it's called book view so book.view let's just add a container okay and in here is where we can style it so i'm going to add flex let's add a margin and i'm going to do a responsive at the same time here just so i can save some time okay so the first flex item i want that to be the image so let me just make a div for it and then i'll move the image inside of it and then the other flex item should have these inside of it oops and even the stuff i want inside oh yeah let me just grab these as well okay see how this looks okay and yeah let me just style this real quick so uh the title first class equals text 4xl font bold for the author we want text to excel text gray darkest let's add a margin bottom and i think i don't have the description so let's add that text lg and we can leave that and say letting normal and data book description okay see how it looks okay so i don't want this to be full with this part so let's change that so up here uh so let's do mobile at the same time so mobile i want with full but for large queens i just want to be twothirds and on mobile margin left of zero but on large screens let me have a margin too large greens empty zero and large greens ml16 margin left 16 and that's looking pretty decent and i also want a view link button here so let's do that quickly so right under the description let's add a new container let's make it like that and let's add href of data.book.link let's make sure to bind that okay and then let's make it open in a new window class equals so this is just uh the same button as on the main screen so this button right here okay let's see how that looks okay it looks pretty good and this should open the link awesome and this is pretty good too let me just add a i'm going to remove this link margin actually let's use tailwinds classes and i want a uh mid dot in between where's edit this one's edit that i want mid dot so that looks pretty good to me and let's check if response works and it does cool okay so um the edit and the create screens are the same so i'm gonna do one of them and i'm not gonna make it look too nice i don't actually have a design for that i'll work on the create one but let's just make it so it's not ugly uh so create book i think i named it ad book oh sorry that's the query add book view so let's first add a container on this let's add a margin top too okay and i'm just going to make use of the styles i already have down here so type equals text so i'm going to paste in some stuff to add some because uh tailwind and the resets remove the borders for the text areas so i just added that back in with this okay and it's gonna do label display block and that is good enough for me let me just add some spacing here create book mb4 and for all the labels so i'm going to add maybe a font bold on these class equals font bold and maybe a margin bottom of two okay that looks pretty decent so yeah you can do the same for the edit book but i'm pretty happy overall with how the styling is and yeah so let's do a final check make sure everything still works um so we can change the categories okay cool can we add a book just add something add author let's just add an image that exists so it looks decent awesome new book uh let's say amazon let's make it featured and let's put it in business and there it is right there cool let's see if edit works should work i didn't change anything there yeah you can restyle this but change update awesome so there you have it guys we managed to style our graphql application using tailwind css i'd like to deploy our graphql app to a real production server i've received a few questions on how to do deployment so let's go ahead and do that so i'll be using laravel forge to deploy the level back end and for the front end i'll also use forge but i'll also show you how to do it with netlify so i've made a few changes to get this app ready for production so let me just go over them here so the first is in the back end here i am in the git repo and let me just go to the commits and this last one i mentioned in a few videos ago that you should use absolute urls so before i just had the name of the book file book image and now i have an absolute path and i'm using cloudnary to host the images so this is probably what i do if this were a real app as cloudnary is the best service for hosting images as it offloads some of the load off of your server and is also a cdn so yeah i just changed all of these to cloudnary links and for the view end let's go into here check out the commits and so i changed the book url to instead of relative it now just getting it from the back end so that's one change i made same here and here i made two changes uh for this one i'm now using so i changed the end point to the actual endpoint we'll be using i'm going to put it to this domain because that's sort of a test domain i use and i also added a emv file so let me show you in the actual code so i added a emv.development.local file so the way this is going to work is if we're running in development then it's going to get it from the environment file but if we build it for production which we'll do in a second then it will use the correct production endpoint so here's the local file and it's just pointing at the development server okay so those are the changes i made and i think there's one more yeah i just turned off this web sockets just to get rid of those annoying errors in the console and yeah that's it so let's go ahead and go into forge and start here so i'm going to go into forge i'm gonna go into laravel ecommerce and i'll make a new one so like i said i'm going to deploy it to this domain booksql.laravelecommerce.ca so let's do that and general php laravel and public that's fine so let's add that site okay let's go into it and let's install a git repo and the git repo is tray himself slash books ql level okay install the repo okay so before i deploy it i want to make a new database because this server already has a default database for the laravel ecommerce app that's on it so i am going to make a new database so just go here database and let's make a new one here let's call it booksql and we'll add a user later on i mean right now so we can add one here let's do books books ql underscore user and this is a secret password i'm going to delete this after so it doesn't matter and can access this new books ql database we just made and let's add that user booksql user secret password and it's installing and it's done okay so i'm going to ssh into the server and change the dot env file so let's go ahead and do that so let me just ssh forge at laravel ecommerce example dot ca okay so that new one should be there and there it is right there booksql dot laravel ecommerce example.ca and there is an environment file so i'm gonna go ahead and change the database credentials to the one we just created okay so i changed the credentials there let me just quit out of here and now we can deploy it so go back into our site and let's deploy it and hopefully it works and it looks like it did work uh let's check over here so books ql dot laravel ecommerce example.ca okay so it did work i just want to quickly add ssl it's like two clicks so let's just do that and obtain certificate and that should do it okay that's active let's see if it's https now and it is cool so now we should be able to hit our graphql endpoint on this new server so let's open the graphql playground and go to that endpoint slash graphql graph ql and that should work let me just make this bigger and yeah this query should work let's see if it works oh so there's no data in there yet i have to seed the database so let's go into here and this is the app we can do php artisan db seed yes and now this should work so there you go there's all the books in our new server okay now let's work on our front end so all we have to do is run the npm run build command so let me just open up a new tab here books ql view okay and i just have to run this command npm run build and this will make a new dist folder which will package up everything we need to build for production so there you go we have this new dist folder with all the files we need and we can just use this to upload to our server so you should definitely make use of purge css to make your file size much lower for tailwind css and i actually have a video on that which i will link to below and let's just take a look at this in our code so we have a new dist folder here and we'll just be uploading this but let's just make sure that it is using not using this one this is the development one but using the production this one so laravel ecommerce example so let's just double check and search for it here okay so it's not that file it's probably this file okay so there it is so we know it built correctly so in theory before we throw this up on the server we should actually be able to run it here so i'm just going to go into the disk folder and i'm going to run my own server and i have one called i have an alias called server and it just runs a php server so i'm just going to in the local in the current directory so i'm going to do that and it's running in localhost 888 and this should work so there we go and it's pulling from the actual server let's make sure it works and it does cool so let's throw this up on forge first so i'm going to make a new site again on laravel ecommerce and i'm going to call it books so books dot laravel ecommerce example.ca not to be confused with books ql where where our backend lives so this is just a static html so the web root will just be the root which is fine and let's go ahead and add this okay it's done let's add ssl so let's go into it actually add ssl okay okay that's done so if we hit this so it should be books there should be a default page there and there is cool so if you want to see that on the server it should be here so there it is books dot laravel ecommerce example.ca and there's the stat index php so this is where everything in the dist folder goes so if you just drop it in here it should work so we can set a git repo if we want but i'm just going to do it the oldfashioned way and just ftp it in so i'm going to use my ftp app transmit and let me just open it up and there it is kind of small sorry about that i can't zoom in so it's just books and i'm just gonna think i have it here it's gonna drag it in so the dist folder i'm gonna delete this and it's gonna grab everything in this so everything in here and just drag it in okay that's done so now this should work and it does awesome so let's try so this works let's try adding a book so add a book actually let me get let me just grab the url for one of the images because i'm going to be using that so copy image address add a book new book andre's author image let's paste that in this is an awesome book link amazon featured and put it in biography at book and it should be down here and there it is and yeah it works awesome okay so let me show you how to do this with netfly it's that simple let's go to netlify and log in and all we have to do is drag in that dist folder so let me just go up one drag in the dist folder and that is it let's give it a second and i think it's done and it gave us this random domain and it has https on it already and since it's pulling from the same back end there it is it should have that new book we just added and it should be right there cool and everything still works now if you wanted to add a custom domain you can totally do that and i have a video on netflix that show you shows you how to do that so check that out if you are interested so there you have it guys we've deployed both the front end and back end of our graphql application using both forge and netify i'm not going to keep these urls live as it's just taking up extra server resources and it's something else i don't want to maintain but you saw exactly how i did it and can set it up on your own if you need to i'd like to show you how you can call graphql queries from within your laravel app so i just finished up a graphql series with laravel as the graphql server and view as the client so i was wondering how i can make graphql queries from within laravel as the client so it's the same case if you're just building a traditional server rendered app and you need to make http requests you'd probably make use of a library like guzzle or curl i want to see how to do the same but for graphql so i'll show you a few ways and a few packages to accomplish this so the first one is this package here which is specific for php and i actually have a laravel app scaffolded out here already and we'll just make a use of that so let's just composer require this okay and let's see how to use this so it says within oauth2 provider we'll do it without okay so it looks like it's instantiating it here passing in the graphql endpoint here and then here's the graphql query here and some variables and there's a response so yeah all these libraries just use guzzle under the hood because if you look at graphql queries they're just http requests and guzzle is the most popular one for php so let's go ahead and do this i'm just going to work in the routes file so i'll just work in here and paste everything in here so let's paste that in and i am going to make use of this endpoint that we did in the graphql series if you don't know if you haven't seen that i made an app a book recommendation app and this is the endpoint for that so let's grab this and it's paste it in here and here is where our query goes so this operator i actually didn't know what that was i had to look it up it's just a way to do strings but that's doesn't look right to me because i've never used it before so i'll just use normal strings and we can just close it here and we don't need this and this should should still work okay so let's just paste in this query we have here that we know works because we can see it here so i'll get rid of this paste it in and this should work so we don't have any variables so we can just leave it actually i think it will just ignore it and after this let's just tie and dump the response see if we get anything okay let's try this out okay so it looks like we get a response and let's see what we have here so there's our books right there so we can also do you can see the response is an array if you want the response to be the actual books you can just do response get data it just it makes it less nested so there you go cool so that's the first way actually let's take a look at how to do variables so first let's change this one to use the other query which has variables which is uh querying for one book so this would be yeah just passing the id say we want three this should work there we go so let's see how to do that in here so let's just change the query up here so book id is id and title author and we just have to accept the parameters in here so let's say get book we can name it i don't think you have to name it but let's name it anyways id is of type id and it's required and that should do it and the variables we have to change let's see this is hardcoded in so we don't need this one so the id is just put three in here and this should work as well there we go there's that book and there is that book with id of three so let's see how we can make use of mutations so let's quickly do a mutation here so we have one called create book create book and i think you have to pass it a title new book and author say andre and a category let's say just one so it's an int and let's say id and title okay okay so 35 is that new book we just created and we can do the same thing in our code here so let's put in the variables first so i'm going to do title awesome new book and the author is andre and the title uh sorry the category is just an end so let's say three okay now let's get the query i mean the mutation we just did here so we can just copy this and paste it in here let me just reinvent that and let's use the variables instead of hard coding here it's going to be title author and category okay and let's accept the params up here so let's call it create book as well and say title is a string required author string required category int required okay and you can change this to mutation as well but i'll just leave it as query should still work the same way and if i did this correctly this should make a new book from within our code and that didn't seem to work i think i have an extra closing brace here so yeah this one is not closing anything let me just delete this one and let's try that again so there we go create a new one called awesome new book and that's how you do mutations cool okay so let's take a look at how to use just guzzle so like i said earlier graphql queries are just basic http requests and you're just passing in json so let me show you what i mean so if i go to my rest client which is insomnia here i have the endpoint for the graphql and like i said if you just pass it some json you can you can actually do a graphql query here as well but we'll just take a look at how to do it with json so if you just pass it a query and then the graphql query in here so for example we'll do query let's do a one line books and we want the title and the author this should work i think this has to be a string as well let's see okay so let's try this and there we go so this is the response that we get when we're using graphql so it's the same thing we just have to make an http request and pass in some json with the key as query and then the graphql query in here so with that knowledge we can actually just use guzzle and just pass in some json using guzzles functions so let's do that so i'm going to make a new route here oops route call okay and it's called a let's call it guzzle and since guzzle is a dependency for this other pack package we just used we can just use it so let's do client equals new causal http client and let me paste in some code here and this is what makes the response actually i have to add the client sorry the response here response is client and it's a post request to the endpoint books ql parable.test graphql and then the second parameter is this thing i pasted in so that just some json to the request okay what is this complaining about okay okay so um let's see let's just die and dump the response actually we have to dine up the response i have to get the body and me to get the contents just so we can see what's coming back okay let's see if i did this correctly and let's hit the guzzle end point what did i do wrong here i think i'm missing an opening array square bracket here and then a closing one here okay sorry some formatting issues there let's see if this works okay so there you go there's the response for our graphql query let's test just json decode this so we can get it as an array there you go so there's our data cool and these are all the books in our database cool and we can also do the same thing we did above uh if you just want to get a specific book we can just pass in an id this is hardcoded in id1 that should work there we go there's that book and you can also do mutations if you like so let's quickly do a mutation here sorry this is a mutation yeah this is a mutation and it's called create book and it needs a title say new book it needs an author and it needs a category and we'll return that okay see if this works and there we go it created this new one awesome with id of 37. okay one more way i want to show you and that's just using a wrap another wrapper around guzzle called zttp this is the http library i prefer it just makes it easier so there is i'm looking at the tests here and there's one that lets you pass in json like this so it's going to grab this actually i have to install it first but let me just grab that paste it in let's call it zttp and let's try this out let's install it first and you actually have to do slash like this okay and let's do composer require i think it's what is it kite tail kite tails http sorry that should be a forward slash okay so that's done let's take a look here so let's put in the url here we just need one key and that's going to be query and then the value is the graphql query so let's quickly do what we did before query say books say title author close that out and that should work let's just dine dump response json and let's see if this works so let's do zttp and there we go there's our data there's all our books and we can do exactly the same thing we did in here we can pass in parameters and we can also do mutations which i won't show you because it's exactly the same as we did here so there you have it guys we've managed to query our graphql server from within a laravel app we've taken a look at three ways to do so so you can pick which way you enjoy the most i'd like to take a look at a graphql server package called graphql laravel this is similar to the lighthouse package which we used in my graphql series to build out in app they are both similar in that they are both graphql servers however they take a different approach which we'll take a look at throughout this video if you haven't seen at least the first video in that graphql series definitely check it out as i'll be making comparisons between both packages so these packages both make use of the graphql php package which is a vanilla php implementation so this graphql laravel package is more similar to that whereas the lighthouse package sort of conforms more to the graphql spec and makes use of heavy directives so if you don't know what that means don't worry we'll be going over everything in this video okay so let's get started let's install this i have a laravel app running already and i didn't do anything to it yet so let's composer required it okay let's publish the config okay and that is it okay so let's do some quick setup in that first video uh where we took a look at this lighthouse package which is right here we took a look at an example where it was a basic blog implementation so the models the models we had were users comments and posts so we'll do the same thing we'll just have users in posts and the relationship will be a user has many posts and a post belongs to a user so let me quickly set this up in this example which is a blank laravel app so let's do this quickly so let's make a post make model sorry it's making migration okay so let's just copy and paste stuff so the user has many posts so let's go to user as many posts a post let's go to post here and let's just do a belongs to relationship and like i said we won't do comments here it's the same thing same relationship between posts and comments but we'll just keep it simple okay and let's just steal the migration so it's create posts table yep so let me just grab all of this and should be a great posts there we go okay so that should do it and let me just set up my environment file i haven't created already so root root oh sorry it's a graphql variable example root okay let's migrate and hope everything works and it does cool and let me just quickly whip up some seed data i'm going to manually in the database so let's make a few users and let's make a few posts okay so i have two posts here two for andre and two for john okay so now if you take a look at the original package so let me just close these okay so remember on in the first video of the original package we spent most of our time in this schema.graphql file so there are three things or two things depending on how you want to look at it that we have to do here so the first thing we should do is define the types and these types are just the models and they have the same fields on the models and this is how they are defined and in the lighthouse package they conform to the graphql specification so all of this is the graphql specification but it does have some differences in that it uses directives to get things accomplished in this graphql package graphql level package i mean it is the same thing but everything is in php so there's more code to write so let's go ahead and start doing that so let's go into the docs and let's take a look here say create a query there's no dedicated documentation page like lighthouse has everything is in the readme here so so it says first you have to create a type and that's what we want to do so again we want to mimic we'll start with the user this okay so you have to make a new file in this folder app graphql type just makes bigger and then we have to define everything in php like i said so everything here we have to define it in php okay so let's do that uh i kind of wish this package had a cli tool to scaffold everything out so that's one improvement i think they can improve on maybe if i have time i'll look at putting in a pr okay so where does it go it goes into app graphql type and it's called user type so app new folder graph ql and type let's make it a folder type okay and new new file so user type so each type is separated into their own file whereas in this package everything is in here you can actually separate them in different files but in general everything is in this schema.graphql file so that's one difference let's just paste that in sorry i have to open php and let's paste that in okay let's take a look at this from the top all right any other errors here okay looks good okay so all your imports and the attributes and just specifying the model a name and a description this is fine and this public function fields returns an array of fields so this is the equivalent of this these are the fields and see within each field they have a type and that corresponds to this so this field has this type and this exclamation mark means it's required so to do required we have to use this nonnull function so let's go ahead and do this so we don't need this alias because the id is just id in the database so we have email which is a string so again that is this and it's not it's required here so should be required but we can add that in if we like let's add it in type string okay and there is no name here for some reason so let's add in name and let's put it above email so let's say name name is required too right yeah same so same thing name string and description is the name of the user and let's remove this is me this has to do with authentication which we won't look at in this video okay so this is just a resolver method so if you want to return something different from what the actual value of the field is then you can define a resolver like this in this format and it will resolve it here so we're not going to do that but it's nice to have that option okay so let me save this we have the type defined and the next thing we did in this lighthouse package was define the queries so we'll define the post in a second let's just define the queries first and we'll also look at the relationship in a second so here we have to define all the queries available to the consumer and the most basic one is just returning all users so let's see how to do that so back into the docs so we have the type defined and we also have we have to add the type to the config graphql which is already there by default i believe so config graphql and there's a section for types here somewhere so here's a section for queries and there's a section for types it's actually not defined so let's go ahead and do that so they have these examples here so we don't have this so i'm going to comment this up and same with well when we get to queries and mutations i'll show you that but these don't exist so we have to remove those okay so to define the types we just have to let me just grab this and it is a user type and that lives in app graphql type user type class okay so our type is now defined and now we can make a query okay so yeah it says you can use the facade we won't be using that okay so now we can define the query so let me just grab this again i kind of wish they had a cli generator and this goes into app graphql query and it's called users query so let's do that app graphql query let's make a new folder query and new file called user's query i think that was called users query okay let's paste this in and let's take a look we have so this is just the name of the query and this type let's go back to our lighthouse one so yeah this is the name so users and this type is what it returns so in this case in lighthouse we want to return a list of users and this is what this is saying so list of users so again it's the same thing it's just in php format and this arguments function sort of specifies arguments which can be confusing because this query can list all users but it can also filter them down to using an id and email and in this implementation we have them separate so we have one for all users and then we have one where you can find by an id but this one allows you to do both i'll show you in a second so after that this looks fine this is the resolver so this is where it gets the eloquent query and retrieves the users so in lighthouse we just used the all directive or the find directive and you can also use custom resolvers if you want to do it that way but here it it's more of the custom resolvers approach where you've got to specify the query yourself so this is just checking if there are arguments again i kind of think it's better to separate it out and then if there are arguments then you just find them using this eloquent query but there isn't then you just return everything so let's go ahead and see if this works i think we have to define it first in the config so yeah right here so we have to specify that this is one of the queries so let's go into our config again let's go up here and again these don't exist so let me just copy them out same with the mutation which we'll look at in a second and let's just paste that in so it's exposing a user's query here and this is where it lives and all the logic for it let me put a comma there okay so now finally if we go into our graphql client and what is called graphql variable example dot test so this is the original url i was playing with graphql laravel example.test and let me just erase this so this is oh yeah so sorry that shouldn't have brackets okay so this should work and it does cool so it's returning all the users in our database so let me show you the arguments so like i said it does take arguments and they are optional which uh should be separate but let me just show you that it works and they take two arguments and i think the id takes precedence again this should be a separate query but let me just show you so if i search for id and they defined it as a string should be an int but let's say one and then it should just return andre there we go okay let's quickly take a look at relationships because that doesn't work yet so essentially we'd like to be able to grab the posts from the user and then list that out as well so let's do that so the first thing we have to do is define a post type so let's go ahead and do that so i'm going to do a new file post type php and i already have it copied in my clipboard and it's going to paste it in so it's basically the same thing as the user type just specified for the fields of a post so posts models post so a post has an id a title and content and here's the relation which we didn't take a look at in the user which we'll do in a second but we just have to specify the type so graphql type user and they can see find it from the config and it's just this one that we have already and here's a description for it and we don't need any custom resolvers or anything like that so save that and let's define the relationship here too so i'm going to grab this for the user i mean for the post in the user so right here paste that in and the relation is posts so a user has many posts the type is a list of posts so we have to type list of graphql type and type post okay and let me just say a list of posts written by the user okay and i think i have to just import the graphql here and i think it's just graphql and i think i have that in here already sorry in the post type i mean and i do have it cool and yeah i think that's it now we have to specify the post and oh we have to do the post query as well so let me just type that paste that in as well let's make a new file here called posts query posts query dot php and i'm pasting it in but again it's basically the same thing as the users query that we did already so it is a list of posts and again there's an optional argument which i think should be separate and to resolve it you just have to post all which is the one we're interested in but if you want to pass in an id you can do that as well and now we just go into our config and let's add those so posts and posts query and add the type the type is down here post poster type and yes let's test this out save last refresh okay let's try posts and it's just let's say title okay so it looks like it does work content yep okay so there is id1 if you want everything just remove this and there are all the posts cool so let's try the relationship so we want the for posts we want the user associated with it it looks like it works and we want the username and email so there we go so this post was written by andre this one too this one's written by john and john let's take a look at the other way so let me just comment this out query users id name but we also want the post and then we want the title and that seems to work too cool okay now let's quickly look at mutations so let's go back into the documentation and let's take a look at this mutation and it's almost the same as a query except it's a mutation so let's go ahead and copy this and this one is updating the password but we'll make one for creating a user so let's copy that and this goes into app graphql mutation so let's go to that app graphql new folder mutation and what's it called okay we have to make our own say create user mutation so file create user mutation dot php space the same and let's make changes create user mutation create user so the type let's go back to our lighthouse example so here's a create user the type is just the thing it returns so in our case we want to return the created user so that's what we're doing here and the arguments are the things we need to create a user so here we have a name email and password so we don't need this id but we need name and email and i'm just going to paste them in to save some time and it's basically the same thing just we need a name and email and they are of type string and then in the resolve function is where it happens so this is for updating the password we don't want to do that we want to user create and then we want a name and that's coming from args name so this is what the user is specifying in the graphql query we want an email and we want a password but we want to make sure that the password is hashed so we do bcrypt okay let's see if this works and we have to specify this in the graphql file so there is a section here for mutations let me just copy this let's paste it in it's called create user and app graphql mutation create user mutation and i think that is it let's see if this works so let me just do it here so it is a mutation okay let's see if it appears user and then see if yeah there you go name email and password so let's try this out tony stark email tony avengers.com and password is iron man and let's return the id and the name okay so hopefully this works there we go it created a new user and if we just uncomment this you should see that in the list of users so let me just change this to users and let's get to names there we go cool so there you have it guys we've taken a look at this graphql level package so you can build out your graphql server again it is a similar package to the lighthouse package but takes a different approach and makes use of php more so i think they're both great it's just a matter of preference so you try both out and see which one you like better i'd like to show you how you can do authentication with graphql we'll be looking at doing this with the lighthouse package and laravel passport now i'm going to be assuming that you understand the basics of tokenbased authentication with passport if you don't make sure to watch my videos on this which i will link to below there's two videos so there's one for the back end where we set up passport and get auth tokens returned to us upon receiving the correct credentials and the other one is the front end where we take that token send it to the server and are able to log in so we'll do the same here where we'll first set up the back end with passport and get an auth token returned to us upon successful login then in the next video we'll see how we can take that token and send it through for subsequent requests so let's first install passport and see how to do this traditionally with rest and then we'll try to mimic that with graphql so i'm going to be starting from the project we built in the first video so if you watch that video you know we built a very basic blog implementation where we have users posts and comments and a user has many posts a post has many comments and we set up our types here in our graphql schema and we also set up our queries and we have one mutation here so yeah as a refresher here's a a query we can run there it is so yeah i started using graphical more if you watch the other videos i was using graphql playground and i've just encountered more bugs than i do with graphical so i kind of switched over just kind of wish they had a dark mode okay so let's install passport first so if you already know how to use passport you can feel free to skip this but i'm gonna do it from scratch really quickly so composer require it that is the incorrect repo sorry it's a lighthouse tutorial this one okay that's done what's next next is to migrate okay next is to page hprs in passport install and this will install our clients and we're interested in the password grant client so we are interested in this one so let me just copy this and now it says and has api tokens to your user class so let's do that user has api tokens and let's import that okay next call passport routes in your auth service provider auth service provider passport routes so i'm going to do that but i'm just going to specify that i just want the routes for password grant so passport routes and we'll just patch pass in a closure function router and we just want something like this router for access tokens okay make sure to import passport and in config auth change the api to passport config off change the api to passport okay i think that's it so yeah i think that's it so to use this again this is just the traditional way let's do php artisan route list list unexpected service provider sorry forgot a semicolon okay so let's do that again really all right let's try key generate okay so there's our route list and at the endpoint we're interested in to log in is this oauth token so i'm just going to use my traditional rest client actually let me just show you um where's the password grant so here we just have to pass in again to oauth token it's a post request pass in all these fields and then if it's correct then we should get a token back so let's go ahead and go into my risk client and try this out i'm going to make a new request it's going to be called passport login it's going to be a post request and let's set the header accept application json okay and then set the url http lighthouse tutorial.test token okay let's see if we get a response okay let me do cool that's just because we didn't pass in this information which we will do so here so we'll just pass in a multipart form and it's passing everything i said here so grant type is password id is what i copied i still have it copied see i don't let me check here okay so the id is two and the secret is this two and it's client secret i think is the next one client secret yep paste that in what's next and now it's just the username and the password so any users in our database and i think we have a whole bunch let me just user name and password and we don't need the scope okay so let's go into our database i think i have some here so yeah there's a whole bunch here we'll just pick one and i think the default password is uh secret so i'll pick javon let's copy that and let's try an incorrect password first and see if we get a proper response and we do valid credentials but if it's correct this should return a token and it does cool so in our front end we would store this in local storage or cookies and then we would make subsequent requests with this token and that should authenticate us so let me show you what i mean actually um so if you make another request let me just copy this it's a get request subsequent request paste that in but if we make a request to check out routes api sorry let me just remove this routes api and this endpoint is beha behind api slash api slash user and it's behind this middleware and it's just returning the logged in users details so let's do that so slash api slash user so there's no token being passed in yet so this should be an error i might have to pass an application json yeah i do um accept application json okay but if we pass in that token so the header would be authorization and value is bearer and then the token that's not the token token is here then this should return that user's details there we go so yeah that's the traditional way of doing it in rest and now let's do it in graphql so the creator of lighthouse actually has a video on how to do this which i followed i will link it in the description if you're curious so i did everything manually like he showed in the video and i actually had it working but then i came across someone who wrote a package to make it even easier to do everything so we'll take a look at using that instead so this is the package here it's called lighthouse graphql passport auth and let's go ahead and use this so let's just compose or require it okay next is to add these into your env file so let's do that just put it down here and the client is two and the secret is in our rest client so it's just this token sorry not this token let's token okay is that right that's the entire one yeah okay and that is basically it this this exposes some graphql mutations and queries just like how we would do in rest so let me show you what i mean so you can publish the config if you want if you want to override the defaults and here's what's inside the config but the defaults are fine so it exposes these new mutations so log in refreshing token logging out forgot password and update forgot password and up here are the types for them the types are required so an input is a new graphql type i just learned about using this package so an input just sort of groups together inputs that you need so for example this login input just groups together the username and the password and it's just sort of a cleaner way of passing in inputs into your mutations so i'll show you what i mean when i do it so the login is of type login input so it requires a username and password and it returns an auth payload so it's going to return this stuff which is exactly what's returned in here and this is the custom resolver with all the code so let's go ahead and try to log in and see if we can get an access token so let's go into graphical and let's comment this up and let's make a new mutation mutation okay and it's called login i might have to reload this oh i reset the size sorry does that happen every time i reload oh man that sucks sorry about that okay so um login yes login and it is of type login input so yeah that input type i was talking about you're probably used to doing it like this so you have to pass in a username and then like this whatever and then you pass in a password um so this is basically the same thing it just groups them together and makes it a little bit cleaner so let me just copy this but now instead of passing in separate fields you just pass in one as json so it'd be data and then you have to pass in json here and you can put it it's online if you like the username is let's just give it an incorrect username first see if we get an error and password and the autocomplete still works that's good and we still want to return some stuff back so we're just interested in the access token so let's just get that and yeah there we go we get this message the user credentials were incorrect so let's go ahead and again let's get something from the database let's get someone else this time let's get emmanuel and paste it in here and the password is secret and let's see if we get that token back and there we go there's that token so same thing as in the rest but now we have this token so i'm going to copy this and just like how i showed you for subsequent requests in here we had this route here we can hit we can do something similar in graphql so i'm going to go into my schema file so schema graphql and i'm going to make a new query here called me and this is going to be similar to this like i said this right here where it just returns the authenticated user's details so as you can see here there is an auth api middleware so we have to do that here too so it returns a user and we're going to use the middleware directive and we're going to check that it is an auth api middleware and then we're going to also use the auth directive which basically does this this returns a user but this is going to check for the header so it has to make sure that that token is passed in through the header so we can do that in our graphql client which i'll show you here so let me copy this again just in case okay so i'm gonna comment this out i'm gonna refresh and make it bigger and then i'm gonna do that me query we just did before passing in the headers just to see if it works so there it is me and let's just say the name and the email see if we get anything we shouldn't get anything because we didn't pass in the token okay so we're getting the http response we want the json response so to pass the header in this program we just go up here edit http headers and let's first add the accepts is accept i think it's accept let's see yeah accept application json just grab this and then so now this should okay so that disappeared where'd it go yeah that's another bug with this program sometimes it when i'm in that header thing and then i escape out sometimes the query disappears so let's write that again me name and email so now this should result in a json response so there we go on authenticated so let's do one more let's send in that authorization header and the values bearer and token oh let's go up here it's this one and save hopefully it doesn't get rid of my query okay it's still there but now this should work and it should return this user's details and there we go so we've successfully mimicked what we did in rest but now we're using graphql okay let me show you the rest of the auth endpoints here so let's log out and a logout response is returns a logout response logout returns logout response and it's just a status and a message okay so let's do that so let me comment this out it's just a bug it won't disappear that sucks let me refresh it okay uh so log out so that is a mutation let me put it here mutation log out and what does that expect just a message so i'm passing in the token obviously you have to be logged in to be able to log out so this should log the user out okay so this user with this token is no longer logged in so the token is invalidated so this should no longer work so i uncomment this this should not work anymore okay cool and let's go ahead and log in again so i'm gonna do this i'm gonna uncomment this actually no let's not log in again because these next ones i'm not going to refresh token but i'll do these two okay so forgot password just requires an email so we'll do this person over here the same person okay so mutation forgot password and was this oh no that requires an email right yes so data email and it returns a message and the email is this person so before i do this let me set my email driver to log just so we can see it so where's my email sorry it should be mail yep so let's change it to log okay so let's try that this should work hopefully and we should see the email in the log okay so this it's saying this error because we have to set up the auth scaffolding so php artisan route sorry make off okay let's try that again there we go we have emailed you your password reset link let's look for this in the darebell.log should be this one scroll all the way down and there it is right there cool and let's take a look at the last one where we can actually update our password so update forgotten password and we need all of these fields okay and then after that we'll log in again with that new updated password okay so am i doing update forgotten password just comment this out let's do another mutation update forgotten password that is type data and then we need all of this stuff so the email is okay the what's next token we can see that in here so it should be this okay next is the new password sorry password and it's a secret to and the next one is password confirmation secret to and i think this requires something just a message again yep and hopefully this works give it a try there we go your password has been reset so now if we log in again up here this should not work because secret 2 is now the new password so let's see what we get awesome incorrect but if we do this and there we go cool so there you have it guys we've managed to use this package to recreate the functionality of passport and everything needed for authentication in graphql so you might be wondering where a register is we actually did that already registering is just creating a new user and we actually already have that from the first video just creating a new user right here so in the next video we'll take a look at how to use this token in the front end using view and view apollo i'd like to show you how you can get authentication working in graphql with view apollo so if you haven't checked out the last video we set up the server to work with laravel passport and lighthouse and now i'd like to see if we can get to use view on the front end to do authentication so we'll build a very basic auth system where we can log in and upon logging in i want to show that logged in users details so here's a very basic login form and i'm going to log in with an email here and i'm going to put in the wrong password then we'll get this alert here and then if i put in the right password it will redirect to a protected view with that logged in user's details and we can also log out here cool so yeah let's build this from scratch using view apollo okay so i have a view cli 3 application scaffolded out here and the only thing i've done is view add apollo to install apollo so yeah like in the last video if you saw we can log in using this mutation and we get a token back and then with this token we can call this me query and get the user's details back but we have to pass in this token through the header so the question is how do we pass it into the header so in traditional rest if you're using axios you can set headers on axios so let me just open up some code here which is from my to do series and let me just look for axios here right here so you can see i'm just setting the headers here and i'm setting the authorization token authorization header to bearer plus the token which is stored in view x so in view apollo let me just show you something here so there's a config file called view apollo here in source and you can see an auth token right here right here so let's search this off token it's called token name actually so okay i don't know why i did that but what i'm trying to say is if this token is set in your local storage then it's going to pass that with any graphql query or mutation that you do and there's actually helpers here that you can call after you log in which sets the local storage item here so as you can see it sets the local storage i think it's called apollo token that's what i was trying to show you earlier it's called the key in local storage is called apollo token and you have to call these methods to create it so on login to create it and on logout to destroy it so let me prove that to you so to do that let me just put a query in graphql query in the hello world component so i'm going to use this hello world component and i'm just going to make some data here okay let's return and i'm gonna do that me query and set it to null initially and then i'm gonna make an apollo key here and me is going to be that graphql query so um i have to import this actually import gql from graphql tag okay so now i can just do the query here with backticks i'm just going to do query and it's going to do this basically where is it this so me name email me name email and let's throw the id in there too so right now the local storage item is not set so this should result in an error see what we get here so let me open up view or console i mean okay so yeah we do get an error failed to fetch cool so yeah just ignore the websocket there so let's go ahead and log in um so i'm going to log in using this mutation just to get a valid token okay so there's that token and i'm going to manually set the apollo token just in the console here so local storage dot set and the key is called apollo token like in the config and i'm gonna just paste in the token here sorry it's set item okay so now if i look in my application let me just make this bigger local storage and for this domain there it is right there apollo token and that key so now this should work so if i refresh this i still get failed to fetch see if it's in here hello world it's undefined oh yes sorry i forgot to set the endpoint in the config um so yeah i should do that before so go view go to the apollo i'm actually going to set the web sockets to null to remove that annoying error set this to null okay and let's set to the end point here right here so what was the endpoint again it was this set that okay and now this should work okay let me remove the key first just to show you that it shouldn't work when it's not there and then we'll read it so let me just delete token okay and this should not work okay internal server error that's correct and let me readd this and now this should work okay let's check view let's check hello world check our data and there i am me or not me but the logged in user so that should show you if the token is set then it will send it for any graphql requests okay so with that knowledge let's get basic logging in working like i showed at the beginning of this video so i'm not going to do any state management and i'm not going to do view x to manage state here but you definitely need to do that for any bigger application i just want to mention that there's also an alternate way to handle state in graphql using something called apollo link state the idea is to use a graphql cache to manage state and bypass view x entirely i'm still in the process of learning it so if i do i will make a separate video for that okay so let me quickly make two new routes and two new pages so in pages and views i'm going to make a login view let's just say template login goes here and let's make a login route so i'm just going to copy this and it's going to be login and this is going to be login okay and i think an app that's where the yeah the router link goes so make a new one say login login okay does this work all right put a pipe here and okay and let me just paste in some code for the login just to save some time i'm going to paste this in and there's already some view code in here which i'll go over this is the method that's called when we submit the form and there's a v model on the username and the password so let's set up the script so we need a username and password username empty password empty and we need a methods section so methods and one called login okay and i'm also going to paste in some just a bit of css so it's not super ugly okay let's see how this looks okay that's decent and i'm going to make one more route here for the protected area where the login user the logged in user's information gets displayed so let's say protected template protected actually it's making an h2 users info and it's going to the router add that as well so i'm not going to make use of guards here but you definitely should what i mean by that is i can just manually manually go to this route and it will show up it won't show the logged in users details if you're not logged in but you can still show the route and you should use guards to prevent the user from doing that so yeah check out my video and my video on just doing it in rest and it's the same thing it's protected okay so i'm not going to put it in the menu because i don't want that to show but we can actually just go here so yeah that's what i mean if you had cards in place you wouldn't be able to go here if you're not logged in okay and we'll put the login route in a second after i finish logging in and i'm not gonna do any validation here as i'm just giving you a very basic example okay so here we want to perform the login mutation here and if it's successful we want to call that on login helper which sets the token in our local storage let me actually remove this because it's already here i'm going to delete that okay so if we go into here we can see how to do mutations and i'm just going to copy this let me just grab everything this is the entire methods key and i'm going into login okay so this is all of methods okay let's indent this and change it to login and i don't want any of this okay i also need this gql so import gql from graphql tag okay don't need any of this okay so the mutation we need is this one so let me just grab this actually and paste it in and we can indent this and let's make some changes here so i am going to accept some data and it is of type login input it's required and this i'm going to cut out and the data goes here and i want to return the access token and the variables is where i'm going to paste what i just cut and this should come from our state which is bound to v model so it should update as the user updates and that should work so let's see if this works so let's just see if we get the token in our console so that looked like it worked the work don't need this okay so that worked let's test this out here refresh so i'm going to use the same user here let's try an error case first i'm going to type in gibberish okay so it's an error is that the right error we'll see let's type in the right password okay so i'm missing something here so yeah i am missing another yeah so this should be another key so data is this like this okay let's give that another try so wrong password okay now we're getting the correct user error user credentials were incorrect and correct password we should get some data here there we go this should include the token where is it there it is right there so now we just have to set or call the helper the on login helper i've been talking about in here in view apollo on login right here so let's go ahead and do that so back to here we have to import it let's import it import on login from up one view apollo okay and now we can just use that or just called it when it's successful so let me just call it right here so on login and what parameters does need it needs the apollo client and the token so the client is just this apollo provider default client and the token is data.data.login.access token if you remember here so data data login access token or you can destructure it if you like i'll just leave it and i also want it to go to that protected route so this router push protected and let's try this again and now the local storage key should be set so let's refresh okay secret and then let's check the application so it's not in here it should be in here there we go let's set it right there and we'll work on showing the user's info in here in a second i just want to work on logout so we can destroy this token okay so back to our code let's go to app view and we can make a new link here it's not a router link it's just going to be a normal link because there's no view associated with it so i'm going to click that prevent and we'll call a logout function and say log out let's make a pipe here too and down here script let's make a new method log out and we're just going to do the same thing we did in here i'm going to import on log out instead of on log in there on log out and we are going to just call it on logout and the only parameter it takes is the apollo provider apollo provider default client and i want to push to the home page and all this is going to do like i said is just destroy that token in our local storage so let's give that a try oh sorry this is in the same directory okay so i am logged in right now but if i hit log out this should be deleted and it should redirect awesome okay now let's work on that protected page so yeah all we have to do is just call that me query and since the token is set that should work out so we already did that in the hello world so let's just copy that so i'm just going to copy all of this and then i'm going to comment it out here because we're not using it and protected let's just do it in here okay let's just import this okay let's see if this works and let me just output it here let's do media id name email and we only want to output that if it's set so i'll just do v if me and we're going to need a root div here okay see if this works so let's log in and okay i don't have it in there anymore where's my email there it is that's not it okay secret so there we go you can see it got set in here and we are redirected to the correct page with this user's information so there you have it guys we managed to build out the authentication on the front end using the token we got from the server and using vue apollo and its helpers please like comment and subscribe if you haven't already done so thanks for watching guys see you in the next one okay thanks bye you