hello world so today i want to talk why serverless is a really cool tool i don't know software engineering technique or whatever it is for empowering developers so the first question to ask is why you're interested in learning this so maybe to start out we should go one step backwards and answer the question what is serverless i'm sure you already heard it million times but it will be brief so serverless is competing execution as an utility so it's like the water top at your house you just drink it you flush your toilet you wash your clothes use it to solve different problems that you have at your house but you really don't care how you're building have structured the pipes and how the city managed to deliver the water from the central water tower to your house and you don't care how the country gets that water and how it comes to you you don't care about the infrastructure about the water you care that it's just there and you can drink it whenever you need it and one thing about water or other utility is that you just pay as much as you so if one day it's hot and you want to water all your garden you will pay quite a lot of water because you fill your pool you water your garden it's very hot summer day so yeah but then maybe you went on holidays and you didn't spend anything no water use because there was no one at home and then your bill of water is close to zero same happens with electricity and other utilities and the idea behind serverless is similar is to have computing execution as in utilities so you can use it as much as you want it can be scale so if you need to fill pools of computing power you are able to and you don't care how your provider of computing power solves that problem for you but if some months you are on holidays and you don't want to have any computing power you just don't pay for it so to summarize serverless is computing power as an utility it can scale automatically and you pay as much as you use so why you care about learning this why you care that's a valid question and you should ask it all the time before starting to learn something there's so many technologies around and it's hard to decide when which ones you should choose and so first i will give my answer to server developers if you're a server developer serverless is the next thing after containers i'm sure you learned docker a couple of years ago now it's time to learn serverless it's just how the evolution goes if you want to keep on the trend and you want to have a cool job for the future you should learn this so sorry man but if you're a client developer then the story becomes a little bit different because your main job is not to produce server so why you should care if you're a web developer or an android developer ios developer game developer all these clientfacing developers that are not working in the server why they care about learning serverless and i think my first answer is if you're a client developer and you learn serverless you will become way free yes free how i how you become free as a developer because i think it's a very easy fast step to become a full stack developer and i'm not meaning with this that server developers will be like discarded and we don't need them anymore no no no no i'm meaning that now as a game developer or a web developer you're able to solve some problems that are pretty simple without the need of asking another developer for help so if you're at home doing side projects or you have a small company or you have a project with little people then you can be more independent and solve more problems so you can create a small server that connects to a database and returns something or that process some data or resizes some image or you are able to get done a lot of things with very little knowledge because if you're a web developer you might already know javascript very well so it's just about learning some tools to work in the serverless world if you're a game developer maybe you're using c sharp so you can also go to net and start working with serverless so there is quite easy steps in order to get started and i think serverless is a really good way to get started with the cloud because i think the whole at least in aws the whole serverless landscape has been done with the mentality that people don't need to be experts to get started so getting started with these tools is way easier to get started with instances and bbc's and all that kind of older stuff if you want to get started with cloud if you want to be more independent if you want to become a full stack developer you should learn serverless so now that i convince you i will show you some steps to get started so let's go to the screen and let's go to it so the first thing you need to do in order to get started with serverless if you don't have one is to create your aws account i have made a video about this i will link the link of this video in a card in the corner or then in the description box below so you can go there and check how to create a secure free aws account so follow the instructions and you will be ready after doing that you need to go to the serverless.com web page and install and configure serverless framework and for that there are instructions they're pretty straightforward so just follow those four steps from which you have already done one that is number three that you created your account download now download serverless and then configure the provider credentials after you have your aws account and then you're ready to go after you have that done those two things now you're ready to go to your terminal create a new directory i will call it first serverless project you can call it whatever you want i will get inside the directory and then i will create my first serverless project that is pretty straightforward sls create that's just template aws node.js that's just name and the name of the project so this is the easiest way to create a new serverless project you just do sls that is serverless that is what you just have installed a serverless framework create to create the project you pass the template name in this case we are going to use aws ours our cloud and node.js as our framework and then the name of the project that we will need it's pretty straightforward just press enter and serverless framework will generate some files for you then i always do npm init that's yes because that creates a empty packet json so if i need dependencies or something i will put them there after that i open this in atom and you can see that we have three files first one is the handler js packet json and serverless yaml let's visit the serverless yaml first the serverless yml is the file where all the serverless framework configuration is so this is a file specific for the serverless framework here you will define the service name that is the name that we just put when we created the project the provider and under runtime that's come from the template in this case it's aws and then ojs 6.10 and then you will also define all the resources aws resources including the lambdas and the api gateway so if you scroll down the template already has one lambda function called hello that is managed with the handler code that is in the file handler and in the method hello we are going to go there in a second but if we want to define an api gateway that is a front door to our lambda that is the end point we just do this event then we put htp because this will be triggered by an http event that is the path hello and in the method get so easy like that we create a new endpoint that will trigger this piece of code it's very very simple then we can go check this package json that doesn't have anything interesting for now and there you have the handler.js that has the information has the code on how to run this lambda and here is a very simple hello method that comes out from the template and the only thing you will see is an object response and a callback that is returning that response we are going to modify that response object to just change the message hello and congrats on your first serverless project so you can see that we are deploying the right project and then this body will include also an event that is the event that comes from the handler so usually in the handlers you have three parameters the vent the contacts and the callback the event is the information the lambda is getting from the trigger in this case from the api gateway and you will be able to see it in the body and the response is a 200 status code so then when we save this and we go back to our terminal we can run sls deploy that means serverless deploy so this is deploying this project into aws because we have configured the credentials from serverless framework your your aws credentials into serverless framework is possible to just with a small command put all this project into your cloud serverless framework will package this and then deploy it serverless framework is using cloud formation but you don't need to know what is going on in the background to understand what is going on at the beginning so i will speed this up because usually this takes a couple of minutes and you cannot do anything after the deployment is complete you will see this service information that will show you the service name the stage we have not defined the stage but serverless framework by default if you don't define the stage we'll put it to the stage step you can have any name if you defined it same with the region if you don't define any region it will just deploy us east one that is north virginia you can put in the aws region that you like the stack name that's the cloud formation name of the stock that you don't need to know for now we don't have any api keys we have one endpoint that is that one and one function that is also there and then if we grab the endpoint that url and we paste it in our browser we can call the lambda you see that the endpoint is a get in the path hello so if we put it in the browser we will see that there is the message hello congrats on your first serverless project and then the input that is all the event that this lambda is getting from the api gateway this was a video for today i hope you like it if you did give a big thumbs up and if you have any questions comments concerns things you want to see in the future just let them know in the comment box below i always happy to make content that you want to watch