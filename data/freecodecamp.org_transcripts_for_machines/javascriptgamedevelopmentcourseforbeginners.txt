in this complete game development course you will learn how to develop a variety of games using javascript frank's courses are top notch and he has a really creative way of presenting things you are going to love this course hi coders in this class we will use html css and javascript to build nine separate game development projects i will write and explain all the code from scratch line by line using just plain vanilla javascript no frameworks and no libraries we will start by learning individual 2d game development techniques on smaller standalone projects and once we covered everything we apply all of them to build a simple mobile game simple point and shoot game and a more advanced fastpaced 3d side scroller with precise keyboard controls and special visual effects my name is frank and i'm a frontend web developer if you want to learn even more about game development and creative coding you can check out my youtube channel in this course we will learn everything you need to know about sprite animation we will write the javascript code that handles seamless endlessly scrolling parallax backgrounds we will learn how to extend javascript classes to create a variety of enemy types with different visuals and different behaviors i will show you how to implement state design pattern to manage player states and special abilities we will learn how to use collision detection by color collision between circles and between rectangles we will add different particle effects and many other things this class is made out of nine separate standalone projects and a couple of special lessons so if you already know some of these techniques you can skip around this class is not for complete beginners but if you are already comfortable with the basics of javascript and you understand functions for loops objects and arrays come join me and let's build some games in the first class we will explore two different javascript techniques you can use to animate sprite sheets and we will build this project where you can choose different player animations from the dropdown we are giving away a lot of free art assets you can download them in the video description and you can use them to follow along with this course for more beautiful game art assets visit this website now let's do a quick javascript setup i will show you how little code you need to animate something on canvas i create a custom variable called canvas that will hold a reference to my actual html canvas element i created in index.html i point javascript towards it using getelementbyid and i pass it id i gave it canvas1 constant variable i call for example ctx shortcut for context is equal to this canvas variable from line one dot get context and i pass it to d i could also pass it webgl here which would give us access to a completely different set of drawing methods but that's for another video now i have all canvas 2d drawing methods stored in my custom ctx variable and i can call them from here for example ctx fill rect will call a method to draw a rectangular canvas if i console.log ctx we can inspect this object it has some properties which basically are global canvas settings such as fill style that says color of shapes we draw or font which sets size and font family of text we draw on canvas this tutorial will be focused on sprite animation we want to learn how to create animated characters for games so we are most interested in building canvas draw image method which sits right here i will explain everything you need to know about draw image method and its three versions in a minute it's easy don't worry about it before we do that i will quickly finish canvas setup to make sure we have correct scaling i need to set canvas width and canvas height by default canvas will be set to 300 x 150 pixels and our drawings can come out distorted that's why i will manually set it to 600 x 600 the same values i gave it in style css i create a custom variable called canvas width i will use capital letters here to make it clear this is a global variable i set it equal to canvas from line 1 dot width and i set it all to 600 same width i gave it in style css i do the same for canvas height also 600 now that we made sure scaling is correct let's bring an image into the project in this tutorial i want to show you two different ways you can animate sprites very simple one for beginners and then more advanced more complex and flexible way where you can just run commands like run jump sit and it will play the correct animation for us when you know both you can decide which one to use when you are building your games i want everyone to get the same result that's why i will be giving away this animated sprite sheet for free today to bring image into javascript project i can just declare a custom variable i call for example player image and i set it equal to new image like this this is a builtin image class constructor it will create html image element same as you would create if you put image tag img tag in index html markup we can append it to our web page if you want but today we will just use it to store that spreadsheet image for us so that we can animate it with the javascript i need to give it source so player image variable from line 6 dot src and i set it to path to my sprite sheet your path might be different it depends on how you organized your project files let's animate something on canvas i create a custom function called for example draw frame actually let's call it animate because this is our animation loop let's make sure that's clear inside animation loop first i want to clear old paint from canvas between every animation frame so i take ctx variable from line 2 dot clear rectangle builtin method it expects four arguments to specify what area on canvas we want to clear i want to clear the entire canvas so from coordinates 0 0 to canvas with canvas height now we can draw i will just test if everything works by drawing a simple rectangle at position 50 50 and i give it width and height of 100 pixels now i can call a request animation frame builtin method which will simply run a function we pass to it it will call that function once if i pass it animate the name of its parent function from line 9 it will just run over and over create an animation loop so we declared animate i also have to call it like this and we have a black rectangle drawn on canvas if we don't specify fill style color of shapes on canvas always default to black it looks like a static image but it's actually animating the same rectangle over and over i can simply prove it by creating a global variable called x i set it to 0 and here on line 12 i replace hard coded value with this variable and every time animation loop runs i increase x by 1. i told you you don't need much code to animate something on canvas well done you are a programmer now see you later okay there's a bit more i can show you let's put it back and let's use builtin draw image method to draw our sprite sheet on canvas draw image method is a bit special you can pass it three or five or nine arguments depending on how much control do you want to have over the image you are drawing the first argument is always the image you want to draw so i pass it player image variable from line 6. then i pass it x and y coordinates where on canvas i want my image to be drawn if i pass it 0 for x and 0 for y it will be drawn from the top left corner of canvas coordinates 0 0 it will also keep the image at the original width and height the sprite sheet i'm using has 10 rows and 11 columns of animation frames it's many times larger than my canvas so now we can only see this small part 600 times 600 pixels in the top left corner of my sprite sheet it's 600 x 600 because that's the size i set my canvas to so this is the version of draw image with only three arguments it works and you can change x and y coordinates to move your image around but you would need to resize your images using some other programs such as microsoft paint or photoshop but you don't have to do that because draw image also accepts five arguments that's its second version if you pass it five arguments the fourth argument will be width and fifth argument will be height so we are now able to scale the image up and down and we can also stretch it vertically or horizontally if i pass it canvas width and canvas height it will stretch the image to match my canvas area 600 600 pixels and since the image is not the same ratio as my canvas you can see the image is stretched just a little bit let's remove the black rectangle by commenting out line 11. i can pass any values as width and height and javascript will just stretch my image based on these values you can also change x and y to move the entire image around the final third version of draw image method accepts nine arguments this gives us the most control over the image the first argument again is the image you want to draw the next four arguments determine rectangular area we want to cut out from the source image source x source y source width and source height and the last four arguments will tell javascript where on our destination canvas we want to draw just that cropped out part onto destination x destination y destination with and destination height these last four values basically work the same as these four values in the previous draw image call i showed you the only difference is they are not used to position and stretch the entire image but just the area we cut out using these arguments i comment outline 12 but i will leave it here for reference and on line 13 i will add source x source y source width and source height arguments and i will use them to cut out only one dock at a time one frame from my large sprite sheet so these four values determine area we cut out from the original sprite sheet and these four values determine where on canvas we want to place that cut out piece of image on two if i set source x to 0 source y to 0 source width to 200 source height to 200 we are cutting out square 200 x 200 pixels from the top left corner there is nothing in the area if i change it to square 400 times 400 pixels we can see part of our dog i can put any values here and cut out any chunk of the original sprite sheet i want i can also scale it stretch it i can do whatever i want here i create a global variable called sprite with let's have a look at our sprite sheet if i take width of the entire file and divide it by number of columns i get width of one frame my spreadsheet is 6876 pixels wide and it has 12 columns 6876 divided by 12 is 573 i will use 575 for now because i made the last frame a bit smaller when assembling my sprite sheet in photoshop and there's some margin that snuck in sometimes when you see that your animation is moving sideways when it shouldn't try to fix it by adjusting width and height by small pixel amounts and watch what happens i will show you a bit later what i mean it's simple you can just ignore it for now sprite height or height of a single frame will be height of my entire sprite sheet which is 5230 divided by the number of rows we have 10 animations 10 rows so 5 230 divided by 10 is 523 on line 15 i can replace source width and source height with sprite width and sprite height variables i just calculated and now we are cropping out exactly one frame from our sprite sheet and in destination width and destination height instead of stretching it to cover the entire canvas i can also use sprite width and sprite height variables here and we are drawing the frame at its original size if you are still not clear what each of these individual arguments passed to draw image method does feel free to play with it change the values and see what happens it's quite straightforward once you get used to it here i'm giving it an image i want to draw these four values specify a rectangle area to crop out from the original large sprite sheet and here i am telling it where i want that cropped out piece of my sprite sheet to be displayed on canvas if i set source x coordinate to 1 times sprite width i'm jumping one frame as this number increases i am moving to the right jumping by the amount of sprite width this way i can display my animation row frame by frame when this number gets too high there will be no frame there eventually so source x argument allows us to cycle through sprite sheet horizontally if i want to swap between different animations the way our spreadsheet is structured i have to travel through it vertically we have source y argument for that again starting from top would be 0 x sprite height variable from line 9 and that will give me the top row in this case we have idle animation there one times sprite height is row 2 jump animation then there is fall animation running and so on traveling through the sprite sheet vertically along the y axis switches between different animations and we do it by changing source y argument traveling horizontally cycles between individual frames of these animations and can be done by changing value we pass as source x argument instead of manually changing numbers like this let's output it to variables i create variables called frame x and frame y and i set them to 0 initially then i just replace hard coded zeros inside my draw image method with frame x and frame y and now i can swap between animation frames by assigning different values to these variables frame x cycles through frames of each animation horizontally frame y swaps between different animations it travels through my sprite sheet vertically now let's cover a very simple way you can animate your sprites and then i will show you proper advanced scalable technique that is suitable for both small and larger game projects the simple way is this we know that frame x variable cycles through our spreadsheet horizontally first row in our sprite sheet is idle animation it has 7 frames inside animation loop on line 18 i can say if frame x from line 10 is less than 7 increase frame x by 1 frame x plus plus else meaning when it's equal or larger than seven reset it back to zero you can notice two things our animation is blinking and it's going very fast let's deal with it first frame is zero so last frame is actually position six if i change this to six the empty frame is removed and blinking is gone on line 11 i can just change values of frame y and we are animating different rows in the sprite sheet problem comes when i get to frame y 4 which is row 5. we are starting from 0. this animation has 11 frames but i'm cycling only until frame 6 so we are not playing the entire animation when i get to this row we have a problem again sitting animation has 5 frames and we are cycling through more frames here so now it's blinking because we are including some empty frames to get this to work properly every time we want to swap between animations we have to change frame y value on line 11 but also this hard hardcoded number 6 on line 18. ideally it would have to be a variable that always changes to the correct value that reflects the number of frames for each animation row depending which one we are animating right now i would solve it by having variable called for example max frame i would slot it here and every time i change frame y variable i would change value of that max frame variable from 6 to whatever value we need here to display all frames so 10 for this row and 4 for this row since we are animating from frame 0. animation is going very fast to slow it down we can use this simple trick i will create a led variable called the game frame and i set it to 0. on line 22 inside animation loop i take this game frame variable and for every loop we increase it by 1. so now game frame is endlessly increasing as our animation loop runs over and over on line 19 i create an if statement let me just write it and i will explain it when we see the whole thing i say if game frame modulus percentage symbol something question marks for now is equal to 0 only then increase frame x on line 13 i create a custom constant variable called stagger frames whatever value i give it it will slow down animation by that amount let's try 5 on line 20 i say if game frame modulus stagger frame is 0 only then increase frame x modulus operator percentage symbol is also called remainder operator it returns remainder when we divide the first number by the second let's say game frame is 17 and stack of frames is 5 17 modulus 5 is 2 because 17 divided by 5 is 3 that gives us 15 and remainder to 17 is 2. remainder operator simply divides the first operand by the second one and returns the remainder here i am checking if the remainder is zero game frame is ever increase in the number and stagger frames is always 5. this statement will return remainder 0 and be true every 5 frames so because i set stagger frames to 5 this code block on line 20 will run every 5 frames slowing down our animation 5 times new frame in our sprite sheet will only be served every time the main animation loop runs 5 times i can also slow it just by 2. 0 here will stop animating the higher the number you use here as stagger frames the slower the animation will be let's leave it at 5 for now i think it looks good for most animations as i said when i change frame y to 4 if i want to display all frames in my animation i also have to change 6 here on line 21 to number 9. for shorter animation rows like this sitting animation it has only 5 frames so i have to change this number to 4. so now we have a way to swap between animations but we always have to change two values let's refactor this code and let me show you more advanced sprite animation method that allows us swooping between different animation states by changing just one value we are venturing into a bit more advanced territory if you are new to javascript don't worry if it takes you a bit longer to understand what i'm about to show you it becomes easier with practice we all started somewhere i delete code between lines 20 and 23 we used it to cycle between animation frames horizontally in this more advanced method we will do it differently i set frame y to zero that's my top row idle animation i also delete lines 17 and 18. they are commented out anyway let's clean this up inside animation loop on line 17 i create a let variable called for example position its job will be to cycle through horizontal sprite sheets but in a different way we will need this later i take a game frame variable from line 12. this variable is increasing over and over on line 20 as animation loop runs i divide it by stagger frames variable from line 13 and i wrap all of this in math.floor to get rid of potential decimal points i want this value to be only integers whole numbers without decimal points then i take this entire value and i do remainder operator and six six is here because i'm doing idle animation which has six frames counting from zero this line of code is not the easiest thing to wrap your head around i said this would be slightly more advanced don't worry if you're struggling to read this this is not beginner level javascript anymore what's happening here on line 17 game frame divided by stagger frames means we will have to increase game frame 5 times before we get to 1 because as game frame variable increases 1 divided by 5 is 0.2 2 divided by 5 is 0.4 3 divided by 5 is 0.6 game frame 4 divided by stagger frames 5 is 0.8 and only when we get to game frame 5 divided by stagger frame 5 we get value of 1 here so as game frame cycled from 1 2 3 4 5 by dividing game frame by stagger frames we go to 0 0.2 0.4 0.6 and 0.8 all of these values were turned into zeros because it's wrapped in mastered floor it took five animation loops five increases of game frame variable to get the number one here when this is 1 1 modulus 6 is 1 because 1 divided by 6 is a 0 and remainder from 0 to 1 is 1. basically this value increases by 1 every time game frame variable increases by 5 slowing or staggering our animation 5 times making it 5 times slower we are using math.floor removing decimal points from these divisions for the first five frames we get zero modulus six which is zero then this calculation increases to one for the next five frames one modulus six is one then two modulus six is a two 3 modulus 6 is 3 and so on position variable increases until it reaches 6. 6 modulus 6 is 0 7 modulus 6 is 1 8 modulus 6 is remainder 2 and so on this calculation makes sure position variable only cycles between a 0 and this number i appreciate that this calculation is quite complex this is not course in advanced mathematics and logic so for now just take this little formula here and believe me when i say it works don't worry about understanding it completely we are focusing on javascript today being able to understand this calculation has nothing to do with your ability to be good with javascript these are two unrelated skills on line 18 i take frame x variable from line 10 and i set it equal to sprite width from line 8 and i multiplied by this position variable we just calculated on line 17. as i said this position variable will cycle between 0 and number we put here first row in my sprite sheet has 7 frames starting from 0 frame x will be cycling through these values horizontally on line 19 inside the draw image i remove sprite width because width of our sprites is already accounted for inside my frame x variable on line 18. i misspelled stagger frames on line 17. when i fix this small typo we can see this is working and we are animating row 1 in our sprite sheet don't feel that you need to fully understand this calculation online 17 to be good at javascript i did not come up with this formula tricks like this are usually figured out by someone much smarter than me we can just use them and they will work for us i could have achieved the same result using a bit more code and simple more readable calculations this is more complex and hard to read for beginners because it's such a short calculation it's kind of a neat trick to use this but it's not a necessity i like it because it makes the code look clean and compact i can still change value of stagger frames variable on line 15 and it will slow down or speed up my animation this is really nice code base to animate any sprite sheet but it can be done even better to swap between animations i still have to change frame y variable on line 11 and i have to make sure that this value on line 17 sets the correct amount of frames per row to make sure we don't have any empty frames or that we are animating all available frames from that particular row depending on what animation we are currently drawing i would like to have code structure like this some kind of data array called for example sprite animations that contains objects each object's name in this array is the same as the name of that particular animation it holds data for so for example idle jump run and so on each of these objects can contain additional data for example for irregular sprites it can be pixel values for width and height that can be different for each frame and mainly it will contain locations array this location array will hold a set of javascript objects and each of these objects will have x and y property each of these objects represents one frame in that particular animation and its x and y properties will be coordinates we need if we want to use draw method to cut out this particular frame from the sprite sheet that way we can access any frame we want anytime by directly targeting positions in this array i can just cycle through this location array with a for loop and it will always play the entire animation for me without the need to set up number of frames each animation has each time it will know how many frames that animation has based on the number of objects in this location array each object will be one frame so how do we create a data structure like this with javascript and how do we map it correctly to match our sprite sheet let me show you on line 14 i create a custom constant variable i call for example sprite animations and i set it equal to an empty array this will serve as the main container to hold all data for all my animations i will create another variable i call animation states this will also be an array and i will use it as a place where i can create kind of a simple map that will match my docs sprite sheet i will go through my sprite sheet row by row from top to bottom for every animation row in my sprite sheet i will create an object like this with two properties name property will be whatever i want to call that animation row so for the first row let's call it idle and i will also need frames property i check my sprite sheet and i see that idle animation is made out of 7 frames the second row i will call jump animation and it has 7 frames i will create an object like this for every row in my sprite sheet going from top to bottom but before i do that let's check if it works on line 15 i have this animation states array which currently contains two objects one for idle and one for jump animation i could have also given it more properties but this sprite sheet is not irregular so name and frames properties is all i need to map coordinates for each animation frame i take animation states array and i call build in array for each method for each method execute provided function once for each array element i will do es6 syntax here this is so called arrow function it's a simplified syntax to write function expression in javascript i can skip function keyword here and i just create brackets where arguments i pass to this callback function go with for each the first argument we pass to it is just a variable that will represent each element in the array as we are cycling through it i will call it state as for each method runs state will first represent this object then this object and so on if we add more i'm simply saying inside this callback function i'm about to write refer to these objects as state so this name property can be accessed as state dot name for example i'll also pass it second argument i call index index is another builtin feature of for each array method it simply stores number of each element as we cycle through the array so this first object will have index 0 this will have index 1 and so on i expect you understand basic array manipulation with javascript and fundamental methods like for each but i still wanted to explain in case we have some beginners here so this callback function will run for each element in my animation states array now i want to run through animation states and create data structure like this that maps my sprite sheet and coordinates for each frame i create lead variable called frames and i set it equal to an object inside i will have property called loc location that will be an empty array for now i will create a for loop that will cycle through state dot frames property so for idle animation it will run seven times as i set it here on line 18. every time this for loop runs i want to calculate x and y coordinates of that animation frame from my sprite sheet and i want to place them inside location array on line 27 how do i calculate that i create a temporary variable called position x and it will be equal to j variable from the for loop times sprite width that i set to 575 pixels earlier as the for loop runs and j increases position x will be calculated for each frame i will also need position y which will be index from line 25 times sprite height we declared sprite height earlier and we set it equal to 523 pixels to match our sprite sheet position y will be the same for all seven frames of idle animation when for each method moves to the second animation object here index will increase and for that animation row different position y will be calculated this might be quite a lot going on if you are a beginner this is more advanced than the first sprite animation method don't feel discouraged if you are struggling to follow it takes time and practice it wasn't easy for any of us at first so this for loop calculates position x and position y for each frame as it cycles through my sprite sheet every time we calculate x and y i take frames dot location array from line 27 and i use push method i create another small object here on a fly it has x property set to position x from line 30 and y property set to position y from line 31 i push these values into my location array on line 27 so this for loop will run through all the frames in one row in this case seven times and once we create seven objects with x and y coordinates and push them into location array i take sprite animations array from line 14 and i create a new key in there i will create something called key value pair key is the name of the property value is the value of that property so i'm taking sprite animations array from line 14 and i'm passing it state dot name which will first refer to idle then to jump as for each method runs through animation states array i'm saying create a new key new property in sprite animations array call it idle and its value will be frames from line 27 frames object contains locations array which i just filled with seven objects that contain x and y properties for each frame in this animation that's it we created the data structure that maps locations in my sprite sheet i can console log it now i can see i made a typo here on line 29 you probably noticed it already this should be j not s so now i'm going to consoling animation states from line 15 that's fine but what i actually want to see is sprite animations array from line 14 which we just created and filled with data you can see that my sprite animations contains two properties called idle and jump if i look inside each contains a location array from line 27 and number of elements in that array corresponds to frames i declared for each animation each of these values was calculated here on lines 30 and 31 you can see that all y coordinates for idle are 0 and for jump animation vertical y coordinate is 523 as we moved on to the second row in our sprite sheet now i can replace hardcoded number six here on line 40 with length of this location's arrays i access this location array by targeting sprite animations dot lock actually no i skipped one level i need to specify if i want location array for idle or jump let's just hard code idle here for a moment and i want length of this array remember i am just replacing hard coded number six that was here so dot length and that's it now it's dynamic i can add animations with 4 or 15 frames per row or however many i want and it will still work with no blank or left out animation frames here i am accessing sprite animations from line 14 idle location dot length inside animation loop we are still calculating frames using frame x and frame y variables from lines 10 and 11. we don't need these anymore because now we have the exact coordinates stored in locations array i delete lines 10 and 11. on line 40 i add let keyword in front of frame x and i will declare frame y variable here frame y is just the value we can see here so i can access it by saying sprite animations idle dot location at index position from line 39 dot y i could do the same thing for frame x or i can just leave it as is both will work let's replace idle with a jump it breaks notice that row 1 with idle animation was working and row 2 doesn't which suggests something is wrong with how we draw vertical position inside the draw image on line 43 i remove sprite width value from source y argument we don't need it anymore as frame y contains complete already calculated coordinate now i can go back inside animation states array and i add data for all the remaining animations it's important to understand that you can't skip rows here you have to go row by row from top to bottom to match your sprite sheet because vertical y coordinate is tied to index in for each method i add full animation with 9 frames run animation has 9 frames dizzy 11 frames seat has only 5 frames roll seven frames and so on i also need to make sure there is comma between every object if i try fall i can blink in there must be an empty frame full animation is actually only 7 frames if i put less here we play only part of animation if i put more here we get blinking because some frames are empty run animation works dizzy works seat animation works as well you can see seed animation has 5 frames and this animation has 11 frames and i can swap between them easily without having to manually change number of frames like we did before roll animation works byte animation works let's go back to idle putting hardcoded text here like this is not ideal of course i go up to line 10 and i create a variable called player state i set it to run initially down on line 71 and 73 i replace idle with this new player state variable now i can swap between animations here on line 10. so it works jump works full works in index html i create a new div with a class of controls inside there will be a select element with an id of animations and name animations label for animations will say choose animation i give it some options that match names we gave to animations in script js file in style css i target controls and i give it position absolute set index 10 top 50 pixels and transform translate x minus 50 to center it horizontally i take controls select and option and i increase their font size to 25 pixels i can also remove the border around my canvas i want animations to change when i choose different value in this drop down in script js i take player state from line 10 and i put it up top on line 1. i create a constant variable called dropdown and i point it towards this new select element with id of animations i take drop down and call add event listener on it i will listen for change event every time its value changes we will take player state from line 1 and since we are inside callback function on event listener we have access to event object i'm referring to it as e event object has target property target is simply referring to an element that was clicked and it has value property because i have added values myself whenever any of these option elements in my drop down is clicked player state variable will be set to its value attribute now i can easily swap between different animations in my sprite sheet just by selecting different options in a drop down parallax scrolling is when background images move past the camera slower than the foreground creating an illusion of depth in a 2d space this is what my game looks without it and this is what it looks with parallax which one do you prefer today we are learning about vanilla javascript game development for beginners and by the end of this video you will have deep understanding about endlessly scrolling backgrounds and how to add parallax effect to your games and websites when we have full control of individual layers we can match scroll speed to different actions our game character takes for example my dog character can sit down and the game stops moving or it can do this rolling attack and the game speeds up art assets for this episode were created by this amazing artist check out their website for more if you want what is the easiest way to create endlessly scrolling backgrounds how to make different layers move at different speeds to create parallax effect how to make scroll speed dynamics so we can easily change it we will learn all of that and more let's bring our coding skills one step further today together and have some fun with plain vanilla javascript this tutorial is for beginners let's go click the like please i create a basic web page markup in document head i use link tag to include my style css file we will use it to position canvas at the bottom of document body i place my script dark script.js file will contain all functionality and logic for our project i also create html canvas element with an id of canvas 1. it will be our main project area and we will draw on it with javascript in style css i take bodytalk and i set its background to black canvas will be set to position absolute border 3 pixels solid white width of 800 pixels height 700 pixels i do transform translate minus 50 for x axis and minus fifty percent for y axis and then i offset the top by fifty percent and left by fifty percent this will center my canvas in the middle of the page both vertically and horizontally in script.js i create a custom variable called canvas and i point it towards my html canvas element by id canvas 1. ctx shortcut for context will take this canvas variable from line 1 and it will call get context builtin method on it getcontext can only be called on a variable that holds a reference to canvas element and when i pass it argument that says 2d it will create an instance of builtin canvas 2d api object that contains all properties and drawing methods we will need today i need to make sure we have the correct scaling because if you don't set canvas width and height it will default to 300 x 150 pixels i create a variable i call canvas underscore with all capitals to make it clear it's a global variable i set it equal to canvas from line 1 dot width which will access with attribute on html canvas element we created in index html and i set all to 800 pixels the same value we gave canvas with in style css i do the same thing for height canvas underscore height is equal to canvas dot height is equal to 700 pixels this is how you set up most canvas projects now we have our drawing board ready and we can focus on building parallax effect i want the scroll speed to be dynamic tied to a variable so that in our game we can speed up or slow down using special moves with our character to control scrolling speed i will declare a global variable called gamespeed and i will initially set it to for example 5. notice i didn't use const keyword here i used let that keyword in javascript is used to declare variables that can be reassigned to different values later i will need this to be able to dynamically change scrolling speed it's time to bring images to the project art for this episode was created by this artist i really like his art style you can download them in the video description you can use these images for learning purposes for commercial projects you will have to purchase a full license from his website this effect will also work with any other image but maybe you first want to use the same files i'm using so that you get the same result and don't have to worry about calculating different width and height or making sure your layers match once you fully understand the code from today's lesson it will be easy to switch the images and adjust values so that the code base works with your own files the images are very large if you experience any lagging or frame drops making images smaller will significantly improve performance i kept them large on purpose so that we get nice clean visuals but especially if you are creating a mobile game these images can be much smaller you can download the project files in the video description our background will have 5 layers it is perfect to demonstrate seamless parallax scrolling for games this is one of my favorite 2d game artists if you want you can go and check out his website i will leave a link in the video description he offers some free art assets you can play with and used in your games but if you want something a bit more special his prices are very affordable there aren't many 2d game artists out there so if you can help me out to support them and buy some of their assets for your projects it will help us to make our games unique and by purchasing from and supporting our artists they can make more beautiful game assets for us to bring image into our canvas project is very simple with javascript i create a constant variable called background layer 1 and i set it equal to new image this is built in image class constructor it simply creates an image element we can use append child built in javascript method and it would slot image tag img tag into our html file same as if we wrote that dark in index html ourselves we can also choose not to append it and it will stay hidden and it will just store the image for us image constructor has the same functionality as the document.createelement img we are simply creating html image element and saving it in this variable at first that image element is blank so i access its source property and i set it equal to layer 1.png for you the path might be different depending on how you structured your project files and folders i left my image files in the same folder with my script file for now we have 5 layers 5 different images so let's do the same thing for all of them to bring them into the project let's create animation loop i create a custom function called for example animate it will contain all the code i need to draw my backgrounds i will be calling it over and over to create animation let's start by calling image built in canvas method this method will take image and it will draw it on canvas the first argument i pass it is the image i want to draw so background layer 1 from line 7. i want to draw it at coordinates 0 0 so from the top left corner of canvas then i call build in the request animation frame function and i pass it animate the name of its parent function from line 18. this way animate will run over and over creating my animation loop on line 19 i need to call draw image from my ctx variable from line 2. background layer 1 image is not the best one to use as an example let's try layer two layer three four five let's do this at first with layer four to see exactly what's going on and then we can throw in all the other layers it looks like a static image but it's actually animating over and over let me show you on line 18 i create a variable called x and i set it to 0. on line 21 inside draw image method i replace hardcoded0 with this x variable and every time animation loop runs i decrease x by 1. this will make our image move to the left in a negative direction on horizontal xaxis the reason the image is being smudged like this is because we can see all previous frames we can see old paint if we want to see only the current animation frame we need to delete old paint i use built in clear rectangle method it expects four arguments to determine what part of canvas i want to delete i want to clear the entire canvas so from coordinates to 0 0 to canvas width canvas height now old paint is being deleted and we can only see the current animation frame image is moving to the left by 1 pixel per frame on line 5 we declare the gamespeed variable so down here on line 23 i can say x minus equals gamespeed and now scrolling of our game is attached to this gamespeed variable if i do 15 it moves much faster as you can see the background just moves endlessly to the left and eventually it leaves canvas empty these images were specifically crafted for endlessly scrolling games and they are seamless it means you can stack them next to each other and it will look like it's one repeating image i need to somehow detect when my image has moved off screen and i need to reset it so it can scroll again let's try it what if i say if x is less than minus 1000 pixels set it back to zero else x minus equals game speed i increase game speed to 15 here on line 5. you can see the image is reset in but we can clearly see the jump when the reset happens let's try 1600 on line 23 still it jumps i know that images we are using today are 2 400 pixels wide so what if i use 2400 pixels here and i also reset x to 2400 now we have this image that is 2400 pixels wide scrolling endlessly over the canvas and there is this black empty space that is also 2 400 pixels wide the trick people use is to simply draw the same image twice and always reset it the one that has moved off screen so that it's available to scroll again and canvas is never empty i will show you exactly what's going on using two separate x variables one for each image and then we will optimize it once we fully understand what's going on on line 18 i have x variable which will serve as horizontal position for one of my background images i will create variable i call for example x2 that's for the position of my second identical image x will start at position 0 and on lines 24 and 25 i have my reset checks to make sure it cycles around endlessly x2 will start where the first image ends since my images are 2400 pixels wide x2 will be 2400 images we are using today are very large you might experience frame drops and login if you do you can make them smaller but maybe if you can just follow along with me till the end and then refactor your code and image files for performance just to make sure we are looking at the same numbers at first it makes it easier for you to debug your code if it's the same as mine once you fully understand this technique you can use it for any image size and any scroll direction your game needs on line 24 i just call draw image again for the same identical image but instead of drawing it at position x from line 18 we will draw it at position x 2 from line 19 like this i also need to reset x2 the same way i'm resetting x this is so called spaghetti code we have some code repetition here and it doesn't look very clean yet i'm just doing it for complete clarity to show you what's going on we will refactor it later you will notice we have one problem when we do it this way but don't worry we will optimize it and fix everything i want even beginners to understand now i can see some frame drops because my images are large but i only see it on my screen recording software it still runs smooth in my browser don't worry about the frame drops at this stage it can be easily fixed by making our images smaller let's focus on the code first and make sure we understand it you might notice there is a gap between my images what's happening now i have image 1 drawn at position x from line 18 and i have image 2 drawn at position x2 from line 19. the problem with this technique is that my images ignore each other they reset based on two different variables x and x2 these variables are completely disconnected so if width of my image is not divisible by gamespeed variable it can actually happen that this gap between images will grow larger or smaller over time and we really don't want that we want endlessly scrolling seamless background let's deal with it step by step so what's this gap between my images why is it there and how do i offset my images to get rid of it part of the gap is my game speed because these if statements that reset x and x2 happen independently of each other we have situations where x resets and x2 will move 15 pixels to the left for that frame 15 pixels because that's what my gamespeed variable is set to on line 5 at the moment they never reset at the same time because one of them is always visible on canvas so when x resets image 1 resets on line 25 or when x2 image 2 resets on line 27 i need to offset the other one by the amount of game speed to account for the fact that for that frame the other image kept moving while the other one was reset in gap is smaller now but there is still a gap game speed is 15 pixels per frame and my images reset when their x position is less than minus 2 2400 so unless 2400 which is my image width is divisible by the current speed with no remainder there will always be some leftover pixels creating a gap this gap could even grow larger and larger as the scrolling and resetting continues some people deal with it by only allowing their game speed to be certain values so that image width is always divisible by game speed without any remainder but we don't want this limitation we want our game speed to be fully dynamic maybe you want your game to slowly go faster and faster as player progresses to more and more difficult levels or maybe you want to have special moves in your game and when player performs these moves you want them to affect speed of scrolling like i do with this role attack for example to do this we just need to make sure that our x and x2 reset statements check position of the other image before they reset and they offset its new position based on the current position of the other image that way even when gap is somehow created it auto corrects itself next time around during the next reset i do it by accounting for the current x2 position in my x reset check on line 25 and i account for current x position in my x2 reset check on line 27. keep in mind that when these reset checks happen x or x2 are small numbers somewhere around 0 at that point this might be a bit tricky to visualize and i know that some of you are already saying frank what are you doing there is much simpler way to reset endlessly scrolling backgrounds using just one variable there is no need for this x2 variable there is no need for all this offsetting by speed and position of the other image to synchronize them it can be done with much less code and it is so simple and if you already realize that well done you are good let me know in the comments if you are one of those people i went through all of this to show you my process and to actually show you how it works i didn't realize it can be done with one variable until i got to this stage when i was building the initial prototype also i think everything we have done so far is really good for beginners to see what's going on and how this trick is achieved we will clean this all up and optimize everything but before we do that let's animate all layers and make them move at different speeds parallax effect is when foreground layer moves faster than the background layer it creates kind of a 3d effect illusion of depth in a 2d space it can be used in games but it also looks really nice on websites in our project we will have 5 layers 5 images and i want each one to move at a different speed at the same time i want all the layers to be tied to the same gamespeed variable so that when player performs special move for example the speed of all five layers is affected proportionately how do we do that let me show you first let's check if all five layers are animated correctly everything is working perfect so how do i animate all of these layers at the same time i guess i could just copy draw image on lines 23 and 24 and duplicate it for all 5 layers then i would have to create a separate reset checks for their x and x 2 positions to make sure they scroll at the different speeds it's possible to do that but there will be a lot of code repetition let's do it in a clean way i delete x and x2 variable from line 18 and 19 i also delete all this code between lines 20 and 25. i will use javascript classes to create a blueprint for a layer object then i create five instances of that layer class one for each of my five layers i will put all of them inside an array and i will be cycling through that array to update and draw them it might sound complicated if you never used the javascript classes before but don't worry i will explain everything it's actually quite simple javascript classes are used when you want to create many similar objects in our case we will create five image layer objects javascript class is a blueprint i will define it and then whenever i call it it will create one instance of that object based on my custom blueprint when i say it creates similar objects i mean these layer objects will have shared properties and methods but some of the properties will have different values they will all have the same width of 2400 pixels each layer object will also have image and speed property but each layer will have different image assigned to it and different speed value that's what it means when i say similar same properties but maybe different values let me show you how simple it is step by step we define class by using class keyword followed by custom name of that class starting with a capital letter i will call my custom class layer for example each javascript class has one mandatory method called constructor in objectoriented programming when you say method all it means is function attached to an object method is just a function so this special mandatory constructor method has only one job whenever our class is called later constructor will trigger itself it will create one new blank object and it will assign values and properties to that new blank object based on blueprint inside the constructor constructor runs only once per object every time javascript class is called using the new keyword i will show you in a minute my constructor will expect two arguments image we want to assign to that layer and speed modifier because i want each layer to scroll at slightly different speed we will pass these arguments from the outside when we create our five layer objects i will show you in a minute for now let's finish our blueprint the syntax might be a bit strange for you if you are new to object oriented programming each layer object will have horizontal x coordinate that starts at position 0. i say this dot x because my layer class will create many similar objects so i'm saying here on line 20 set x property on this particular object you are creating right now to zero because we are inside blueprint that will trigger every time we call our class to create an object i will also have vertical y coordinate that will be set to zero all our layers will have the same width of 2400 pixels height will be 700 pixels for all my layers x2 coordinate will be where we draw the second image the second image needs to start where my first image ends so at the horizontal position 2400 pixels i know i said we could do this without x2 property using just one variable let me just recreate what we had before as a class and then we optimize it together i want to do this step by step for clarity this dot image equals image this declaration is a bit different what i'm doing here i'm telling my constructor create property called image on this new object you are creating right now and set it to image we pass as argument on line 19. i will show you how to pass arguments to constructor when the class is complete i will do the same now with this dot speed modifier it equals the speed modifier passed on line 19 as an argument to my class constructor this dot speed will be how fast is my image layer moving i will calculate it by taking my global game speed variable and i multiplied times this dot speed modifier from line 26 doing this will allow me to pass different speed modifier value for each of my five layers and that way each layer will move at a different speed but it will still be tied to my global game speed you will see in a minute my layer object will also have access to custom method i call for example update its job will be to move layers horizontally by changing their disk dot x and this dot x2 properties from lines 20 and 24 and it will reset them when the layers move off screen the same way we did it before we are doing the same thing we had before but this time we are wrapping it in a reusable class syntax so that we can do all of this at the same time for all 5 layers we will also have a method i call for example draw its job will be to take information about this layer object and to draw it on canvas every time update method runs to change horizontal x position draw will run again to redraw the image after the new position to make sure my game speed is dynamic and always reacting to the current value of my global gamespeed variable from line 10 i need to recalculate this dot speed like this if you want your game to have a constant never changing scrolling speed you don't need to do this line of code now i just say if this dot x from line 20 is less or equal to minus this dot width from line 22 so minus 2 400 pixels then set this.x to this dot width plus offset it by the current position of my x2 minus this.speed i'm just recreating the same thing we did before i explained why i'm offsetting it by x2 and speed it is to make sure there is no gap between my images i copy this entire code block and i do the same thing for this dot x2 property from line 24. so this.x needs to be offset by the current value of x2 and this.x2 needs to be offset by the current value of this dot x if they are not resetting i just want my x property to decrease by the amount of this dot speed from line 27 to make my background layer move to the left i will wrap it in method floor to make sure we have no decimal points in there not sure if this is a good idea let's see a bit later i do the same thing for this.x2 this can be optimized and simplified and we will do it in a minute now i can take this newly updated x and x2 coordinates and i draw two identical images next to each other like we did before so draw image built in canvas method i pass it distort image from line 25 this dot x and this dot y this dot width and distort height then i draw the same image but i will draw it at this.x2 horizontal coordinate like we did before and that's it layer class is complete we have a blueprint inside the constructor and my layer objects have access to custom update and draw methods now i can create a new constant variable i call for example layer 4 and i set it equal to new layer like this the new keyword is a special command in javascript it will look for class with that name in our code and it will trigger its constructor on line 19 i can see that my layer constructor expects two arguments image and speed modifier i need to pass them here when i'm creating an instance of my class so i will pass it background layer 4 variable as image and speed modifier will be maybe 0.5 i want this layer to be moving at half of my game speed so if my game speed is 10 pixels this layer will be moving at 5 pixels per frame let's test it so here on line 46 i call my layer class constructor from line 19. it created one new blank object for me and assigned it properties and values i defined in my blueprint between lines 20 and 27 then it saved that new layer object inside this layer 4 variable so this is how you create an instance of your custom javascript class as we know my layer class has access to update method from line 29 and to draw method from line 40. i can just go inside my animation loop i can take layer 4 variable from line 46 and i can call update and draw on it like this and here we go we refactored our image layers into javascript class and now it's very easy to work with it i can pass it different speed modifier on line 46 to make it move at a different speed that speed is still relative to my global game speed variable from line 5 because i keep track of that on line 30 inside update method i create variables for all my five layers i will pass different images to each one i could just call their update and draw methods by duplicating lines 54 and 55 like this now i'm drawing layer 4 and layer 5 but there would be a lot of code repetition if i did it for all 5 layers if i change speed modifier value i pass the layer class constructor on line 50 you can see their relative speed changes and we have parallax effect awesome it is because that speed modifier takes game speed and adjusts it by multiplying game speed from line 5 times this modifier value at first it happens on line 27 when the new object is created then it happens on line 30 whenever update method runs to make sure we can change global game speed dynamically which we will do in a minute then we are just using this dot speed property to recalculate horizontal x position of our background images here on lines 37 and 38 and this is how you make your layers scroll at different speeds but still tie them together by using global game speed variable inside my animation loop i can just call update and draw for all five layer objects but i don't want any code repetition i create a new variable i call for example game objects and i set it equal to an array i put layer one variable from line 46 in there layer two three four five now i have all five layers inside a single array so on line 56 i take this game objects array and i call built in for each array method for each method we'll simply run through all elements in the array and it will apply whatever callback function i give it to each of these elements each of the layers first i need to declare how i want to refer to individual objects in game objects array within my for each callback i will refer to them as object for example i'm doing es6 arrow function syntax here where you can omit function keyword so for each layer object in my game objects array i will call their associated update and draw methods like this here we go we are drawing all five layers now awesome let's pass each layer a different speed modifier to create proper parallax effect 0.2 0.4 0.6 0.8 and 1. now each layer moves at different speed but they are all still relative to our global game speed variable from line 5. if i change global game speed variable it will affect all 5 image layers proportionately because their speed is calculated by multiplying game speed times speed modifier if you get any frame drops at this point it is because we are using 5 images that are 2 400 x 700 pixels you will get much better performance if you make the images smaller in photoshop or some other graphics editor as you can see i can change my game speed to any value and parallax background will still scroll based on that i want to allow my users to easily change scroll speed in index html i create a div with an id of container inside i will have paragraph tag that will say gamespeed colon and span element with an id of show game speed this will show real time value of gamespeed variable i create html input element with type properties set to range min value will be 0 max value will be 20 starting value will be 5 class will be slider for example and id slider as well i put html canvas element inside the container in style css i take container i give it position absolute with 800 pixels i center it in the middle of the page using transform translate i set canvas to position relative so that it aligns with container i put border on the container so we see where it is input with an id of slider will have width of hundred percent text color white okay that doesn't work i take paragraph tag and i move text color there on container i set font size to 25 pixels and i remove border in script js i create a new constant variable i call for example slider and i point javascript towards my new slider element with getelementbyid on the first page load i will set slider value property which is here to gamespeed variable from line 5. then i take hold of this span element with id of showgamespeed and i save it in a variable i call showgamespeed as well on the first page load i set its inner html equal to the current value of gamespeed variable from line 5. if i change value of gamespeed and reload page you can see it works now i want to change scrolling speed of my layers when i click this slider to do that i need to connect it to gamespeed variable from line 5. on line 22 i take slider from line 18 and i call at event listener we will listen for change event and in callback function whenever change event occurs on the slider which means whenever user clicks on it to change its value i will run some code callback function on event listener has access to its builtin event object i will refer to it as e here i can refer to it however i want javascript knows that the first argument passed the callback function on event listener refers to this builtin event object if i console this e you can see it gets console locked every time change event occurs on slider and it contains a lot of useful information about that event right now i'm interested in its target property which references target of this change event which is html input element with an id of slider when it gives me that i can access its current value attribute which is exactly what i need if i console.log e.target.value it will give me the current value of this slider input element i set minimum value to 0 and maximum to 20 here all i have to do now is take gamespeed variable from line 5 and i set it equal to e dot target.value like this and i will also update innerhtml in showgamespeedspan so that it displays the correct current speed for us now i can change scroll speed of my layers by clicking on slider if i change it to max 50 we can get it to scroll really fast i hope your computer can handle that these images are too large let's set max value back to 20. you probably already realized earlier that we don't need to have this.x2 property here online 33 and we can calculate position of both images using just this dot x that way we don't need to have two separate reset checks here and since everything is coming from just one variable we don't need to do all this complicated offsetting we did earlier because we don't need to make sure x and x2 are synchronized if you want little challenge pause the video right now and try to refactor update method yourself by deleting all references to this.x2 and using only this.x to calculate positions of both images if you don't know how to do it don't worry i also didn't realize it at first until i started working on this tutorial i comment out line 33 on line 51 inside draw image method i replace this.x2 with this.x from 929 i comment out this if statement and also this line 48 i remove reference to this.x2 since i'm using this.x for both images on line 51 and 52 you can see our parallax has gap again this time a big gap lucky for us it's very simple fix on line 52 i set horizontal x coordinate to this dot x from line 29 plus this dot width from line 31. that doesn't quite fix it yet as you can see i also have to look at my if statement on line 40. if this dot x is less or equal to minus this dot with minus 2 400 pixels set this dot x back to zero if you don't understand what is happening right now look at this i have one image drawn at position x which starts at 0 and the second image is drawn at position x plus width these images sit next to each other and scroll to the left together like this when the first image moves past the left edge of canvas the second image is there to fill the gap and make it look seamless when the right edge of the first image hits the left edge of canvas at the same time digital x is minus 2400 pixels because my image is 2400 pixels wide we will trigger reset it will just jump back here and start scrolling again the first method was controlling xcoordinate for these two images separately by using this.x and this.x2 variables we had to make sure it synchronizes correctly both images were moving independently and i was offsetting them by their scroll speed and by the current horizontal position of the other image to make sure they stayed aligned this is just a visual representation of what was happening of course the transition itself where the image resets after leaving the screen was happening instantly more like this this second improved technique uses just one variable to move images horizontally this image is at position this dot x and the position of the second image is calculated from that by adding this dot x plus this dot width the second image is always 2 400 pixels to the right of the first image this way they will always be synchronized since the position of both images is coming from the same variable as you can see the movement is different now we never actually fully see the second image anymore we just see this small part that pops in place so that it looks like it's one long seamless image again the transition the reset where the images move to the right to start from their original position happens very fast it happens instantly so we jump from this to this and that makes it look like it's just one seamless movement we can also calculate position x differently i can create game frame variable and i set it to 0. then in my animation loop here on line 65 i increase game frame by 1 for every animation frame this way we have a number that is endlessly increasing now i can replace this if statement on line 40 with a different calculation when i remove this if statement completely the backgrounds no longer reset when they leave the screen i also comment outline 43 and i can replace all of this with just one line of code i say this.x from 930 is equal to game frame variable we just created and i use remainder operator and this dot width from line 32 this.width is currently 2400 pixels and game frame is endlessly increase in number this calculation will make sure this dot x cycles endlessly between 0 and the value of this.width between 0 and 2400 pixels which will have the same effect as we had before oh it will go to the right i need to do game frame minus minus or 966 that's better but now all our layers are moving at the same speed i need to factor in this dot speed for line 36 in this calculation on line 44. this dot x equals to game frame times this.speed modulus this.width now we have the same parallax effect this one line of javascript replaced all the code between lines 40 and 43. i don't think it's very clear and easy to see what's happening on line 44 just by looking at it i really have to use my brain and remind myself how modulus operator works to understand why it's cycling between 0 and this dot width i did a complete breakdown of this technique in my sprite animation video i will link it in the video description i'm not going to explain this calculation all over again i don't think we need to understand this line because it has one disadvantage when compared to the code i had previously on lines 4043 look when i change scrolling speed the position of background jumps somewhere else because we aren't gradually increasing this.x like we did before we are recalculating that value completely every time gamespeed changes clicking this input slider changes gamespeed global variable changing gamespeed affects this.speed because of line 39 and this.speed changes value of this.x on line 44. if you know how to use this technique to make it seamless without jumps in horizontal position when i change game speed let me know please i'm sure there is some smart way to do it i played with it for a while and i couldn't work it out do you see how the background jumps every time i change game speed let's comment out these lines so that we can compare it when using the original technique horizontal position transitions smoothly without jumps and that is exactly what i want i need to be able to change my scrolling speed dynamically because i want the scroll speed of my game to change when a character performs special moves like roll or set let's comment out line 66 since we decided not to use this technique and i also comment outline 6. our images are large it works well because i'm running my code locally if this code base was hosted somewhere online we need to make sure all images and html elements on my page are fully loaded before we start the game on line 19 i take browser window object and i call add event listener on it i listen for load event in callback function when the page is fully loaded only then i will run all this code that depends on images canvas and slider element to be properly loaded and available in this video we will build four small projects completely from scratch we will learn how to generate groups of animated computer controlled characters for our games and we will explore four different movement animation patterns i went to the forest and i caught some dangerous magical creatures for you today we will study them and learn how they move some of them have wings some of them spin around and some just float in the air it will be interesting to explore their movement patterns this is creative coating tutorial for beginners let's learn fundamental vanilla javascript principles and techniques by building fun projects together hope you get a lot of value today art for this episode was made by this amazing artist go check out his website if you want to see more we will cover 4 different movement animation techniques and by the end of this video you will have 4 complete projects and you will be able to introduce a variety of different enemies and movement patterns to your personal javascript games sometimes we tend to make our games too easy and predictable let's give our players some challenge by including different enemy types i create a simple web page markup i give it some title i link style css file in document head we will draw everything on canvas so i create it here and i give it id canvas 1 so that we can target it with css and javascript later i also link my script.js file which will contain all animation logic in the style css i take my canvas element i just created and i want to give it some border size and i want to center it in the middle of the page so border 3 pixels solid black position absolute top 50 percent left fifty percent transform translate minus fifty percent minus fifty percent now it's in the middle let's make it vertical so height thousand pixels width will be for example 500 pixels everything else will be drawn with code in script js file this is a beginner tutorial so don't worry i will take you through it step by step as with every canvas project i need to point javascript towards my canvas element we just created in index.html i do it by using getelementbyid and i pass it id i gave my canvas element canvas1 like this ctx shortcut for context is equal to canvas dot get context and i pass it 2d we will use a builtin set of 2d drawing methods today now i can call all these builtin methods from my ctx variable if i type ctx dot like this you can see that in vs code editor my autocomplete feature doesn't suggest any built in canvas methods if i want them to be suggested i can go up to line 1 and type add type html canvas element like this this way i tell vs code this is a canvas project and it will suggest builtin html canvas methods for me you can see arc method here to draw a circle clear rectangle to delete paint from canvas and so on we will use some of these in a minute when we start drawing and animating but first let's quickly finish canvas setup we need to set canvas width and height to make sure we get correct scaling of our drawings so i create a custom global variable called canvas underscore width i set it equal to canvas from line 2 dot with and i set it all equal to 500. canvas underscore height is canvas dot height is equal to thousand these values need to be the same i gave it in style css i want to create a factory function that will produce many similar objects for me each of these objects will be one animated enemy before we create many enemies let's just build one and make it absolutely clear for beginners what's going on when we have that it's easy to scale it up i will create a temporary enemy1 variable and i set it equal to javascript object i give it x and y properties and i set them to zero these will represent horizontal and vertical coordinate on canvas where we draw that enemy i will also give it width of 200 pixels and height of 200 pixels like this so now i have this simple javascript object that is storing position and size of one enemy let's animate it to create animation loop i like to write a custom function i call for example animate inside i call build in fill rectangle method this method expects x y width and height of the rectangle we want to draw so i will give it x y with a height of this anime object when i call animate like this we are drawing a black rectangle representing the enemy object i can change its values and when i refresh the page it will be reflected on canvas we are not animating yet what if i want the horizontal x position to be slowly increasing to make the enemy travel to the right i can say for each run of animation loop increase enemy1.x property from line 8 by 1. to create animation loop i call builtin request animation frame method i pass it animate now animate will run all its code and then it will call itself again this will create an endless animation loop i also need to delete old paint previous frames from canvas i do it by using built in clear rectangle method and i clear canvas from coordinates 0 0 to canvas with canvas height now we see only the current animation frame i can also increase vertical y position by 1 for every frame so we get movement towards bottom right like this i can change width and height of my enemy easily you get the idea i think let's comment out this temporary enemy object and make it into a javascript class so that we can generate a large number of enemies at once javascript class is kind of a template to create many similar object it's a factory and every time we ask it it will produce one new object for us based on a blueprint we give it classes are new syntax for older javascript prototypes under the hood is the same thing it's just socalled syntactical sugar simpler nicer way to do the same thing classes are very easy and intuitive let me show you we use class keyword and then we name our class starting with a capital letter my class will be called nme constructor is a mandatory method every class must have it will contain a blueprint based on which every enemy object will be created so here in constructor i just give it x y width and height same as we had in this simple enemy object on line 7. the syntax might be a bit strange at first here i'm telling my constructor on this new enemy object you are creating right now give it property called x and set it equal to 10 pixels starting vertical y coordinate will be 50 pixels width will be 100 pixels and height 100 as well so this is how you recreate single javascript object into a reusable class now we can call our enemy class as many times as we want and each time it will generate one new enemy for us based on a blueprint inside constructor method between lines 16 to 19. i can delete the old code and now these variables are undefined because anyone doesn't exist so i create a new constant variable called anime1 again and i set it equal to an instance of my new anime class to do that i use the new keyword followed by a class name the new keyword will simply look at that class name in my code it will enter its constructor it will create one new blank javascript object and it will assign it values and properties based on a blueprint inside the constructor now my fill rectangle method online 21 can use these values again to display a rectangle what if i want another enemy i can create another variable called enemy2 and i set it to new enemy again inside animation loop i take nma2 and i increase its x and y coordinates as well and on line 25 i need to draw another rectangle representing that enemy like this they're moving at the same speed in the same direction so we can't see the second one let's adjust its speed for example now we can see that there are two of them we can control them separately like this but this wouldn't be very efficient if we had let's say 50 or even 500 enemies so how do we make this code better and remove repetition first let's output this code between lines 21 and 24 that handles movement along x and y axis into a shared class method that way we can write this code only once and it will be available to all objects created by enemy class i will call that custom function for example update and as i said its job will be to update coordinates of my objects it will handle position calculation and movement so inside i say for every frame increase x by one and also increase y by one let's delete all this code and to run update method i just created all i have to do is call anyone dot update like this since anime1 object was created here on line 19 as an instance of my enemy class from line 7 it automatically has access to this new update class method from line 14. i also need to remove line 25 so now we put all movement calculation functionality into this update method i also want to put this drawing code into its separate method so that we can draw all enemies at the same time we can also give them animated sprites and so on i will show you in a minute on line 18 i create a custom draw method inside i call ctx fill rectangle the same way we did here on line 27 but instead of hardcoding enemy1 object here like this i will use this keyword that way this method will be reusable and can animate not only enemy 1 but also anime 2 enemy 10 and m800 it can animate all the enemies created by this class at once on line 27 i can replace these hardcoded values with anime1.draw it will look the same but now it's reusable and scalable inside constructor between lines 9 and 12 all enemies start at the same x and y coordinates so if i create 50 enemies they would all stuck on top of each other and wouldn't be visible let's randomize that every time i create a new enemy its horizontal x coordinate will be a random number between zero and canvas width and vertical y coordinate will be a random number between zero and canvas height now every time i refresh page my enemy appears at a different position i could also randomize width and height if i wanted to to make each enemy random size i think you get the idea so how do i create many enemies instead of just one i comment out line 22 and i create a for loop this for loop will run for example 100 times actually let's go up to line 6 and create a constant variable called the number of enemies and i set it to 100 and i replace hardcoded 100 on line 24 with this new variable that's better we shouldn't be hardcoding values if we can avoid it i want this for loop to run 100 times and create 100 enemies for me using my custom anime class but how do i store all these anime objects and their properties such as their x and y values i can for example go up here to line 7 and create a custom variable called enemies array and i set it equal to an empty array down here on line 26 i take that enemies array and i call build in array push method push method will just take whatever we pass to it and it will push it to the end of the array i pass it new enemy every time this for loop runs and it will run 100 times it will create one new anime using my enemy class constructor and it will push that new enemy into enemies array it's the same as we did with anime 1 on line 24 but here we are doing it 100 times let's delete line 24 i also have to comment outlines 31 and 32 because anime one variable doesn't exist anymore how do i access all these hundred objects i just pushed into my enemies array and how do i trigger their update and draw methods one by one so that they can be animated on canvas first let's console.log enemy's array to make sure that for loop on line 25 did its job and filled it with hundred objects in console i can see we have hundred enemies and each one has randomized x and y coordinate perfect so as i said the goal now is to cycle through all hundred enemy objects inside enemies array and to trigger their update and draw methods this will need to happen for every animation frame over and over because we need update method to constantly recalculate enemy position and a draw method to draw them at that new position on line 33 inside animation loop i take enemies array that contains my hundred objects and i call builtin array for each method for each simply calls providedcallback function for each element in the array i will use new es6 syntax with arrow function here inside my for each callback refer to each individual object as enemy as you cycle through enemies array and for each of these objects call their associated draw method and also their update method like this perfect you can see that each rectangle appears at randomized x position and they all move in the same direction because of lines 17 and 18. what if my enemy had randomized speed i create a new property called this.speed and i set it equal to a random number between minus two and plus two because i want some of them to go to the left and some of them to go to the right if you find it hard to read this line of code as a random number between 2 and plus 2. think of it this way this part of code generates a random number in this range so between 0 and 4 and this number sets the start of that range so we are generating a random number between 0 and 4 but we are pushing that range to start from 2 so result we get is a random number between minus 2 and plus 2. i remember i always found math at random very unintuitive until i found a better way to think of it anyway now i have this top speed property and i can replace it here on line 18 for horizontal position and also on line 19 for vertical position now you can see we have rectangles moving in many different directions i delete code on line 29 and also on lines 32 and 33. on line 21 inside draw method our enemies don't have to be represented by black rectangle we can write any drawing code here and it will be called and replicated for all enemies at once i can for example try stroke rectangle instead we can also draw circles stars you can put selfies from your holidays to represent each enemy object here we have complete flexibility what i want to do here is to create animated creatures because we want these to be enemies for our javascript games with this video we are giving away 4 different animated enemies drawn by this amazing artist go check out his website for more content he is very talented he allowed me to share this prize with you for educational purposes for free you can download them in the video description and you can also find link to his website there if you want to use these sprites for commercial purposes you would have to go to his website and buy a full license they are free only for purposes of this educational video show him some support if you can we don't have many good 2d artists like this if we support them they will be able to create more beautiful game art assets for us today we will create four different projects each one will have different enemy with a different movement pattern and on each one we will demonstrate different beginnerfriendly movement animation technique i want you to always have a nice complete project at the end of my videos so that you have something to show to your friends or on your coding portfolio it feels good to complete something don't you think you can use these as animated backgrounds or a screensaver or you can take this code and slot it into your personal games it will be compatible with my previous games if you follow these tutorials let's start with a very simple one the first project will have baths flying in random jumpy patterns perfect for halloween game or even a website for example i'll leave the creative applications of this on you first i need to bring new image into my javascript project to do it i create a custom variable called anime image and i set it equal to new image animeimage.src is equal to enemy1.png if you are using the same spritesheet i am using it might be a good idea to use the same files at first and follow along and once you understand the code it's easy to adjust it and to use your own custom images on line 26 inside the draw method i call built in draw image canvas method we will use it to animate our butt sprite sheet i will explain sprite animation quickly as i code but if you need more detailed explanation i made a special video where i focus on it in depth i will link it in the video description ctx dot draw image and i pass it image i want to draw and i pass it x and y coordinates and this is what we get we can also pass it optional with and height arguments which will scale the entire image into that specified size you can see it pushes the entire sprite sheet with all six frames inside the rectangle we don't really want that we only want to crop out one frame at a time and we want to be jumping by the amount of sprite width to the right to display the next sprite frame we want to go frame by frame from left to right until we reach the last frame then we want to jump back to the first one and start again we can do this with the draw image method because it offers additional four optional arguments we can pass to it let's go up inside anime constructor to create property called sprite width i check my sprite sheet divide its width by the number of frames and i can see that width of a single frame is 293 pixels sprite height of this particular sprite sheet is pixels now let's add additional four arguments to draw image method to tell it what area we want to crop out from this sprite sheet to display only one frame let's start by displaying just frame one so i want to crop out area from coordinates 0 0 to coordinates sprite with sprite height now we are drawing just frame 1. so in this version of draw image method we are passing it nine arguments in total the first is the image we want to draw the next four represent the area we want to crop out from the source sprite sheet and these last four arguments determine where on canvas we want to place that cropped out frame onto you can see my pads are slightly distorted because i am stretching them to fit this.width and this dot height here which are unrelated to the actual dimensions of my butt enemy character ideally i want to preserve the aspect ratio so i make width and height relative to the sprite size i take width and height and i move them to go after sprite width and sprite height so that they can see these values now i can make width one third of sprite width and height one third of sprite height now our bytes are the correct ratio maybe i want to make them a bit larger let's try 2.5 that's better right now we are displaying only frame 1 because of these hardcoded 00 coordinates let's cycle through all frames and animate our characters on enemy class i need a new property called this dot frame and i set it to 0. on line 30 instead of hard coding horizontal coordinate 0 which will give us this frame i will take this dot frame variable and i multiply it times this dot sprite width that way when frame is 0 we display this frame when it's 1 we display this frame 2 3 and so on so now all i have to do is that frame cycles between this and this frame between 0 and 5. i will use es6 ternary operator which is a simple one line if else statement basically i say if this dot frame is more than four question mark set this dot frame back to zero else colon increase frame by one this dot frame plus plus this should be colon our buds are flapping their wings and animating but they flap very fast and all of them flap at the same time let's fix that there's a proper way to time animation frames using request animation frame and delta time and i will show you how to do that in some other video today let's slow down our animation the simplest way possible on line 11 i create a variable called a game frame and i set it equal to zero inside animation loop on line 46 i increase game frame by 1 for every loop and up on line 28 inside update method i say if this ever increasing game frame variable is divisible by let's say 2 with a remainder of 0 only then serve a new animation frame this line simply means run this code only every 2 loops of main animation loop if you are getting a little unsure i made a special sprite animation video where i go in depth and slowly over all of this for now let's just move on and focus on movement patterns now bats animate slower but they all still move their wings at the same time in the same rhythm i want to randomize their animation frequency i create a custom property called for example flap speed and i set it equal to random number between 1 and 4. i replace hard coded 2 on line 29 with this randomized flap speed value this will make some of them animate very quickly some of them slower some will animate every one or two or three or four frames it will be randomized the reason it doesn't work is because math at random returns numbers with the decimal point so game frame is never divisible by that very specific number with a remainder of 0 and frames never increase to fix that i just need to wrap it in math.floor now some bats flap their wings slower and some do it very fast i will remove the stroke rectangle i can also take enemy image variable from line 9 and actually make it a property on javascript class like this this dot image equals new image this dot image src source is nma1png i delete that and inside draw image on line 34 i refer to this dot image in stat by changing value of number of enemies on line 6 we get a different number of bots in our project currently our buds just fly away from canvas and never come back we don't really want that let's create the first simplest movement pattern which will simply be just randomized jumpy chaotic movement i comment out this dot speed on line 17 and on line 26 i replace it with math at random times 3. i do the same with this.y on line 27 since we are adding positive numbers to x and y all bats are going to leave canvas like this how about we tried a random number between minus 1.5 and plus 1.5 now they kind of stay in place and just wiggle around we can increase their wiggle by giving this random number a larger range for example between plus 2.5 and minus 2.5 i can see that my initial enemy x and y coordinates are not 100 within canvas let's adjust line 15 like this and since i'm using this.width here i need to move it after this.weight has been declared now they initially spawn within canvas horizontally these brackets are important look what happens when i remove them they just start from minus distort width which is wrong these brackets need to be here let's do the same thing vertically for this dot y i reduce the number of enemies to 100 or 10. let's make the range much larger on line 26 between minus 7.5 and plus 7.5 i can just play with these values and get the random simple jumping movement this is the simplest way you can animate enemy characters or npcs for your javascript games we will do three more adding a little bit more complexity each time let's see what comes out of that i will be expanding deleting and adjusting the same code base so if you want maybe it's a good idea to create a copy of this project at this stage so you have this movement pattern saved in case you want to use it for your games later i will be using different enemies spreadsheet and different movement pattern for the next one i hope you're having fun for the second movement pattern we will do something a bit different first let's switch to a different sprite sheet here on line 14. i will use image i called enemy2 png it's different size so i have to change sprite width and sprite height sprite width is 266 pixels and sprite height is 188 pixels i uncomment this dot speed on line 15 and i give each game character a random speed between 1 and 5 pixels per frame for example on line 26 i set this.x to be equal to minus this dot speed if i comment out why we can see that bats just fly to the left in a straight horizontal line and they never come back let's first do a reset check if this dot x from line 20 plus this dot width from line 18 is less than zero meaning when the character moved behind the left edge of canvas and is completely hidden that's why i included this dot width here when that happens i want its horizontal x position to be reset back to canvas width moving it behind the right edge of canvas so that it can do another flyover now we have endless right to left movement awesome we already have something interesting here but what if i want them to sway up and down as they flap their wings making it a bit more dynamic and if these were enemies in my javascript game maybe it would make it a bit more difficult for player to avoid them how do i create wavy movement do you know what sine wave is let's do a little bit of a very simple beginner friendly trigonometry trigonometry is a branch of mathematics that studies relationships between side lengths and angles of triangles we use it to create wavy and circular movement in our javascript animations thanks to built in javascript math methods today we will have a look at math.sine and math.cosine built in javascript methods sine is a trigonometric function of an angle defined in a context of a right triangle all we need to know for now is that market sign returns the sign of a number we pass to it that number represents angle value in radians and it returns numeric value between 1 and plus 1. so this input angle value it takes if i put it inside animation loop and slowly start increasing it over time by very small amounts when i pass this angle value to math.sine it will return a series of values that endlessly cycles between 1 and plus 1 making it easy for us to convert these values into wavy movement so called sine wave what i just said might be a bit complicated for beginners and it might not make much sense yet let me show you i will need this angle property on my enemy class constructor and i initially set it to 0. this is the number that will be increasing and after being passed to my dot sign it will give us that series of values between 1 and plus 1 as i just mentioned let's do it so you can see on line 28 i set position y plus equals math.sine and i pass it this dot angle then i increase this.angle by 0.1 for every animation frame as the angle slowly increases do you see the waves i can change the value here on line 29 to change shape of my sine wave angle doesn't have to start from zero it can be a bit randomized let's try with math at random times two it will not be very visible it will become clear what it does a bit later i will point it out quickly said starting value of this.angle determines what position along the sine wave this particular character appears at first before it starts moving it's more obvious if we map movement to a circle and we'll do that in a minute i can also randomize the speed at which angle value increases on line 30. i do that by creating a new property called for example angle speed and i set it to a random number between 0 and 0.2 then i take this variable and i replace this hardcoded 0.05 with it now each anime has its own angle value that is being increased by a slightly different amount for each frame this will randomize the wave shape for each enemy let's set this.angle to 0 for now i reduce the number of enemies on line 6. as i said method sign returns values that cycle periodically between 1 and plus 1. what if i wanted to make the curve more prominent i can simply just multiply it times 3 here on line 29 and now we are getting values that cycle between 3 and plus 3. do you see how the sine wave of enemy movement is more prominent look what happens when i put the different numbers here i hope it's becoming more clear what i'm doing if i put times 10 we get a very prominent curve if these are enemies in your game good luck to all players trying to avoid them especially for certain sprite sheets this movement might be very suitable maybe you have some strange aliens in your space game and you want to move them in this weird wavy pattern instead of hardcoding number 10 here i can again put this value in a variable that will be randomized for each enemy that way we get even more variation in movement between enemies i will call it this.curve for example sorry about my variable names sometimes it's hard for me to come up with suitable names for all these custom properties i hope it's becoming at least a little bit clear what each of these properties does so far i want curve property to be a random number between 0 and 10 and i replace this hardcoded 10 with it here on line 30. maybe 10 is too much let's do times 7 here on line 26 do you see what we just did some of them move in a very prominent waves some have barely any vertical movement this would make our game more unpredictable i can add as many enemies as i want let's put 200 here on line 6. but infestation this will be a hard mode in my game so we did endless horizontal movement with vertical sine wave element to it what if we bring it a step further and also add some trigonometry for horizontal xcoordinate we can make the enemies move in all kinds of different shapes and patterns that way let me show you as usual i will first swap to a different image on line 14 i set image src to nma3 png i check my sprite sheet and i see that width of a single frame is 218 pixels and height is 177 pixels let's comment out lines 29 and 30 which will stop our character from moving around on line 29 i want horizontal movement to be cycling within a certain range i call math.sine and i pass it this.angle from line 24. this.angle value is increasing over and over on line 31 as update method is called from inside animation loop i will also multiply it times method pi divided by 180 let's just experiment here a bit if i multiply this whole thing by 10 nothing happens 50 we see some movement 100 yes they are moving now this angle speed on line 25 affects how fast angle value on line 31 is increasing if i set it to 0.9 they will move faster times 2 might be a good speed for now they kind of disappear behind canvas edge i can move them by adding some value to this dot x position like this plus 10 will move everything slightly to the right plus hundred how about plus canvas width divided by two i want to center them horizontally now they are too much to the right i need to offset them by the amount of their width i change this.curve on line 26 to be a random number between 0 and 200 and i replace hardcoded 100 on line 29 with this dot curve property now some of them move in a large range some only in a small area as we said before method sign when we feed it an angle it will return a value between plus 1 and 1 since this angle is ever increasing on line 31 we are getting a continuous series of values that endlessly bounce between minus 1 and plus 1 by multiplying all of this by this dot curve here for characters that have this dot curve 200 for example they are endlessly cycling between 200 and plus 200. put it in brackets actually this has to be this dot width divided by two yeah now they are centered horizontally on line 29 we are animating horizontal x position let's also do this with this dot y on line 30 and see what happens if i copy the same formula and replace width with height because we are dealing with vertical movement we get this pattern this is where cosine comes in i'm not going to explain trigonometry in detail in this video but the main idea is you have a circle and radius of that circle can represent hypotenuse the longest side of a right angle triangle if we connect lines like this to complete the triangle sine value represents relationship between opposite side of the triangle and hypotenuse cosine is the relationship between the adjacent side of that triangle and hypotenuse hypotenuse size never changes but sine and cosine is cycle periodically as the size of opposite and adjacent side of this imaginary triangle changes as a result sine and cosine complement each other to map a circle path and that's what we are taking advantage of here method sign is creating periodical horizontal movement for me online 29 and on line 30 math.cosine is doing that for vertical values together they complement each other in a way that results in a circle movement you can play with these values swap sine and cosine make both of them sine or cosine it should illustrate it better what's going on if you see how these changes affect our animation if i want to have some space in the middle we know that this dot curve determines radius of the circle my characters are moving in that value is randomized for each one i can give it a minimum value for example let's do a random number between 50 and 250. i can also change angle speed on line 25 this will affect how fast angle is increasing on line 31 and because that angle is being passed over and over to mattered sign and mattered cosine it will increase the speed at which our characters move along the circular path see here we already have some interesting movement pattern for our enemies i could use this in some parts of my game right now sine and cosine are even what i mean is they cycle between the same set of values over and over which results in even circular movement what if i make the horizontal position the cycle at half the speed compared to vertical position by saying math.pi divided by 360 here now vertical position does two cycles while horizontal position does only one because of the difference between 360 and 180 these two values here this will give us a different movement pattern if i give both of them the same number it will be a circle smaller numbers will result in a faster movement the resultant movement is always a relationship between these two values these values don't have to be directly divisible by one another but it might help to visualize it better for example here horizontal position will go over five cycles while vertical position will do one cycle it's because of the relationship between 90 and 500 it gives us interest in movement i can change their speed also by adjusting this.angle speed on line 25. so this technique can be customized to achieve movement pattern you are looking for maybe your game starts easy but later it becomes more difficult so you need faster enemies if i put 360 here 360 is divisible by 90. if you watch the animation we will get four horizontal cycles before we get one vertical cycle because 360 divided by 90 is 4. don't feel like you have to fully understand sine and cosine at this stage to take advantage of this technique i will make a special video where we deep dive into this functionality for now this is all we need to know to be able to use this for our games if i want the shape to be number 8 i can just make vertical value double of horizontal value here i can play with different numbers and see what happens can also have cosine for both like this it will cause them to backtrack to go back and forth following the same path rather than moving in circles swapping sine and cosine will make our characters follow circular path in the opposite direction i don't like how they fill the entire width but they don't fill the height of my canvas how do i make them use all available space we are using this.curve which is a random number between 50 and 250 and it makes them move within that range what if i replace it with canvas width on line 29 okay that's too much because this value is radius of their movement half circle if i want them to cover width of canvas i need to give them canvas width divided by two much better let's do the same for vertical position on line 30 canvas height divided by two awesome now our movement path is even more obvious i will increase number of enemies on line 6 just so that we fill the path with more objects and see it better now you can clearly see that our enemies are running along a set path shape of this particular path is determined by relationship between 90 and 270 here three horizontal cycles fit into one vertical cycle because 270 divided by 90 is 3. if i make the values the same we get circular path again it's an ellipse because i'm stretching the movement here and here 108 in x and 90 in y will mean two vertical cycles happen before we get one horizontal cycle what happens if i swap 180 and 90. interesting to get h shape i would have to swap sine and cosine here are you starting to understand how these values affect the shape of path our animated characters take you can play with this for a while experiment with different values and see what happens on canvas trial and error can sometimes be the best way to come up with unique interesting results trigonometry is a big topic and we will come back to it in some other course i'm sure some of you get other ideas for this technique it doesn't have to be used for patrolling enemies in games as we are doing here you can for example use it to create automatically moving particle effects and animations for website and many other things creative coding gives us a lot of opportunities to come up with unique beautiful stuff and that's why we are building these projects together to improve our vanilla javascript skills and at the same time to explore what's possible maybe it will spark new ideas in some of you i know that there are many creative people watching my videos i'm just here to give you the tools where you take it and how you decide to use it is up to you we can play with these values and create different paths this.angle property on line 24 determines where along our path our animated characters appear at first i can spread their starting position along the path by using math at random i could have also used something a bit more unusual like oscillators or pearly noise here but i want to keep this video beginner friendly we can do more advanced path following and random movement algorithms later another simple technique uses a completely different trick and it results in what i think is the best movement pattern if you want your enemies to appear like they have mind of their own at least when we stay in the world of simple beginner algorithms there are many advanced ai techniques you could use but this is javascript for beginners you might want to make a copy of this codebase because to achieve the next effect i will break this one little bit let's delete lines 24 25 and 26 i will also set this.x and this.wire to 0 inside my update method and i delete line 28. comment out lines 26 and 27 and now initial x coordinate is randomized on line 20 and vertical coordinate is randomized here on line 21. i will create a new property a call for example new x and i set it to random number between 0 and canvas with i do the same for vertical y coordinate with this dot new y property so i have initial horizontal position on line 20 and i have a new horizontal position on line 22. on line 9 i have game frame variable that is endlessly increasing inside my animation loop i will say every time game frame is divisible by 30 with a remainder of 0 which basically means every 30 frames of my main animation loop i want to reset this dot new x and this dot mu y to a different random position basically i just need to copy lines 22 and 23 here now i will calculate variable i call for example dx distance on horizontal xaxis it simply is the difference between this dot x from line 20 and this dot new x from line 22 dui distance on vertical y axis is this dot y from line 21 minus this dot nu y from line 23. now that we have distance between current position and the new position i can make characters move towards that new position by saying this dot x minus equals dx from line 32 and this dot y minus equals d y from line 33 it's resetting too fast let's change 30 to 60 here on line 28. now we get instant position change every 60 frames i can make them travel towards that position by saying dx divided by 20. i can also do that for vertical position by saying dy divided by 20 here now current position is always moving towards the new position by 20th of their distance for every animation frame i can increase these numbers to make them move slower i can also increase the interval on line 28. i like this but you can see that positions reset every 100 frames for all enemies at the same time that looks a bit weird i want each character to reset at its own randomized interval i create a property i call for example distort interval and it will be a random number between 50 and 250. then i replace hardcoded hundred with this.interval on line 29. it won't work yet because this.interval is a random number with decimal points so gameframe will never be divisible by that very specific number with a remainder of 0 so new positions will never be calculated to fix that i need to wrap this in math.floor which will round it down and make sure we get only integers whole numbers without decimal points also now you can see that each enemy is moving at their own rhythm i can add more enemies on line 6. it kind of looks like a swarm of mosquitoes i also need to swap enemy sprite sheet to keep up with tradition i will use anime 4 png here i look at my sprite sheet and width and height is 213 pixels this time there are many other calculations and algorithms that you can use to make enemies move in a certain way let's make that today's challenge can you alter some of the code we wrote today and create your own movement pattern you can also make enemies follow the mouse or maybe try to avoid it there are many ways to make this interactive let me know in the comments if you watched all the way here if you did well done today we added an important set of techniques to our vanilla javascript game development toolkit i'll see you soon if you want more game development check out my playlists links in the video description collision detection is important if you want to build the javascript games and you need to detect when two elements collide or when you are building particle systems where objects interact with each other or maybe you want your canvas animations to interact with regular website elements for most projects all we need is simple collision detection algorithm between two rectangles or between two circles for more complex shapes we also use collision detection technique called separating axis theorem it can be used to detect collision between convex polygons or rectangles that are rotated and aren't axis aligned you might also have more specific needs for your games or creative coding projects some of other common scenarios are collision detection between point and circle point and square between line and circle line and square between two lines and so on it becomes more complex when you need to detect collisions where shapes such as convex and concave polygons are involved there are some clever tricks people came up with to handle these more advanced scenarios such as detecting collision by color or projecting lines from a point and checking if the number of intersections between that line and polygon is odd or even a number with more complex shapes it's a good practice to wrap them in simple rectangles and only run advanced collision checks if these rectangles collide and we know that the shapes are close enough and collision is possible for many games all you need is to create a generic shape around our objects so called hitbox even though the collision is not pixel perfect we can adjust these hitboxes to roughly match collision areas of objects with different shapes main advantage is that the code is very simple and performant because it doesn't require complex calculations to determine whether two objects collide or not these hitboxes can have shape or rectangle circle or polygon the simplest collision detection algorithm is between two rectangles that are axis aligned it means that they are not rotated it simply compares x and y coordinates and width and height of these two rectangles if they overlap we get collision if there is a gap between them we know there is no collision let me show you two different simple algorithms you can use to detect collision between two rectangles two hitboxes in our games let's say we have rectangle one and rectangle two both of these objects have x and y coordinates and some width and height the first way i can check if they collide is this i create a simple if statement and i check if horizontal position x of rectangle 1 is less than horizontal position x of rectangle 2 plus width of rectangle 2. basically if this point is less than this point less means if it's to the left on horizontal xaxis at the same time we want to check if x of rectangle 1 plus width of rectangle 1 is more than x of rectangle 2. that means if this point is to the right from this point we also do this vertically so we check if vertical y coordinate of rectangle 1 is less than vertical y of rectangle 2 plus height of rectangle 2 if this point is above this point and lastly we check if vertical coordinate of rectangle 1 plus height of rectangle 1 is more than horizontal y position of rectangle 2. if this point is below this point if all of these 4 conditions are true we enter this code block in our if statement and collision is triggered else we know there is no collision we can also flip the logic completely this second algorithm does the same checks but it's a bit more efficient if i change the logic a little bit and use or operator it returns true if at least one of its operands are true let's go through the logic here if x of rectangle one is more than x of rectangle two plus width of rectangle two we know they cannot possibly collide so this will return true and we know straight away there is no collision also if x of rectangle 1 plus width of rectangle 1 is less than x of rectangle 2 again we know these rectangles can't possibly collide just one check and we know there is no collision if y of rectangle 1 is more than y of rectangle 2 plus height of rectangle 2 there is no way for collision to happen if y of rectangle 1 plus its height is less than y of rectangle 2 we also know they don't collide so if at least one of these four checks is true we know there is no collision if all four return false we know that the rectangles must collide else statement is entered and collision is detected i hope this was visual enough and you got some clarity on how these checks work if you have any questions let me know if you want to see how to implement these particular algorithms in an actual project and where exactly to place them in your code base i use them in many of my games such as in tower defense frogger flappy bird and many more i will link some in the video description if you want to learn more with me check out some videos on my vanilla javascript game development playlist i also do web animations generative art for beginners and more everything with vanilla javascript using no frameworks and no libraries hope you have fun and show me some of your creative coding projects please you can message me on twitter if you want let's be friends collision detection is important if you want to build particle systems where elements interact with each other or when you are building javascript games and you want to detect when two objects collide or maybe when you want your canvas animations to interact with regular website elements three of the most common techniques we use for games and creative coding are collision detection between circles rectangles and polygons there are also other potential scenarios and some clever people came up with interesting ways how to detect them with code some are easier than others one of the most useful ones is collision detection between two circles you can detect if two circles collide with javascript very easily the algorithm just takes two center points of our circles and checks if the distance between them is less than the radii of these two circles added together what does that look like in code let me quickly show you let's say we have two javascript objects circle one and circle two they have some coordinates so position on horizontal xaxis and position on vertical yaxis and some radius i connect their center points with a line this line represents distance between center points of these two circles i connect position of circle 2 to my current mouse position so we can move it around if the distance between these two center points is more than radius of circle 1 plus radius of circle two we know they can't collide if the distance is the same we know they touch and if the distance is smaller then some of these two radii added together we know the circles overlap they collide to be able to measure distance between two points of a javascript in this case center point of circle one and center point of circle two we will use simple and very powerful algorithm once you learn this and get comfortable with it you will unlock next level in your coding and animation projects to measure the distance between these two points and check if the circles collide we need to know length of this line we calculated by imagining there is a right angle triangle in between like this in this triangle our distance is actually hypotenuse the longest side of a right triangle opposite to the right angle this is the right angle 90 degrees we know x and y position of center point of circle one and we also know x and y position of center point of circle 2. with that we can calculate length of both arms of the right triangle this side is simply just the difference between horizontal x position of center point of circle 2 minus horizontal x position of center point of circle one we can do the same thing to calculate this side vertical position of this center point minus vertical position of this center point now we have this imaginary right triangle between our two points we know this side we know this side and we know this is the right angle 90 degrees now we want to know how long is this side hypotenuse of our triangle opposite to the right angle we can achieve that easily with pythagorean theorem it allows us to calculate relations among the three sides of a right triangle imagine we draw squares on top of each line like this pythagorean theorem tells us that the sum of the areas of the two squares around the right angle equals to the area of the square on the hypotenuse c squared is equal to a squared plus b squared that means c is square root of a squared plus b squared if you want to know why this is true check out radu's video i will link it in the video description so distance between center point of circle 1 and center point of circle 2 is dx times dx which is side a squared plus d y times d y side b squared this would give us a squared value and i want square root so i wrap it in math dot square root like this now we calculated the hypotenuse of the right angle triangle which is the distance between center points of circle one and circle two the distance is less than radius of circle 1 plus radius of circle 2 we have collision if the distance is exactly the same number as the sum of radius of circle 1 plus radius of circle 2 we know they touch if the distance is more we know there is some space between the circles and they don't collide visual and audio feedback that reacts to player actions and ingame events is really important if you want your javascript games to feel good you can for example attach sound and explosion animation whenever collision happens in your game you can also use this technique to make score points float from defeated enemies or from collected items today we will build an easy fun project together that combines javascript audio and sprite animation when we covered all these basics of triggered eventbased animations we will build a game that will look something like this to really put all these principles in action i create a regular web page markup in document head i link my css style sheet i create html5 canvas element with an id of canvas one we will draw on it with code i also link my javascript file down here at the bottom just before the closing body tag all i need to do install css is to position my canvas element so i target it with id i give it border 3 pixel solid black position absolute height 700 pixels with 500 pixels background black let's center it so top 50 percent left 50 and transform translate minus 50 minus 50 this trick will only center elements that have position set to absolute as we do here on line three everything else will be drawn with plain vanilla javascript here in script js file i need to point javascript towards my canvas element so custom variable called for example canvas is equal to document.getelementbyid canvas1 ctx shortcut for context is equal to canvas.getcontext2d this will instantiate object that holds all 2d drawing methods we will need today canvas width is 500 canvas height is 700 let's test if we set it up correctly by drawing a quick simple shape it's good to test your code as you go makes it easier to debug i set global canvas fill style to white this will apply to fill of all shapes now unless i redeclare it again and give it a different color i call build in fill rectangle method i pass it coordinates 5050 with 100 pixels and height 150 pixels perfect we set it up correctly and we are drawing on canvas now let's make it more fun i delete the rectangle and i create a variable called for example explosions i set it equal to an empty array its job will be to hold all active explosion objects i create i created them using javascript class i call it for example explosion with a capital e constructor will expect x and y coordinates coming from the outside this is important because we want the animation to be triggered at a specific location where the event happens for example we wanted to animate at coordinates where two elements collided or at coordinates of mouse click i will pass this x and y coordinates to the constructor whenever i want to trigger new animation and create new object using this class it's very simple i will show you in a minute so on this new explosion object give it this.x property and assign it to x that was passed as an argument on line 8 from the outside do the same for this.y vertical y coordinate this dot sprite width will be weight of a single frame in my sprite sheet i calculated by taking width of my sprite sheet and i divide it by the number of frames in this case my sprite sheet is 1000 pixels wide and has 5 frames 1 000 divided by 5 is 200. height of my sprite is 179 pixels sometimes you get sprite sheets that are too large or too small so you might want to scale it while still keeping the aspect ratio relationship between width and height to make sure the image is not stretched or squished i declare the slot width property and i set it equal to this dot sprite width from line 11 divided by 2. this load height will be this dot sprite height divided by 2. it's important to divide or multiply them by the same number to keep the same aspect ratio by the way for optimization it's always better to multiply than to divide division operation in javascript is more performance expensive so instead of dividing them by 2 i could have multiplied them times 0.5 i will bring my sprite sheet into the project you could declare it as a global variable but i think it's a bit cleaner to put it as a property on class like this this dot image equals new image this is just image class constructor and it will create new blank html image element this dot image src will give it source attribute and i set it to boom.png if you want to use the same file you can download it in the video description this image was kindly provided by one of my favorite game artists i will link his website in the video description as well he has a lot of cool game art there if you are interested to animate this sprite sheet i will crop out one frame and i will be jumping to the right by the amount of sprite width frame by frame to do that i will need this.frame variable i will set it to 0 at first we will also need to add some behavior to this class we do it by creating class methods i will need one to update and one to draw my explosions update method will only have one job for now to increase this dot frame from line 17 by one for every animation loop this dot frame plus plus draw method will take values from the constructor and it will draw current frame of animation on canvas we will use built in html canvas draw image method that takes image we pass to it and it draws it draw image method has three versions with three or five or nine arguments depending on how much control you want over the image you are drawing since we are animating a sprite sheet we will use the longest version with nine arguments the arguments we need to pass to it is image we want to draw source x source y source width and source height of area you want to crop out from the source sprite sheet and destination x destination y destination width and destination height these last four arguments will determine where on destination canvas you want to place that cropped out image on two it might sound complicated but it makes sense if you use it couple of times when you learn how to use draw image method and you get really comfortable with it you will have complete control over sprite sheets you want to animate it's really good and so useful so now i will replace these placeholder values with actual variables we prepared inside constructor image we want to draw is this dot image from line 15. source x is the only one from these nine arguments that might be a bit more complicated for beginners to calculate current horizontal position i need to take sprite width from line 11 and i multiplied times this dot frame from line 17 as the program runs this dot frame increases inside update method on line 20 we will get frame 0 1 2 3 4 because we are multiplying sprite with times frame source y is horizontal y coordinate we want to crop out from the source since this sprite sheet has only one row source y will always be zero source width is this dot sprite width and source height is this dot sprite height from line 12. so now we told javascript what sprite sheet we want to draw and what area we want to crop out from it to display just one frame now i just simply tell it where on canvas i want to draw it destination x is this dot x from line 9 destination y is this dot y from line 10 destination width and height is this dot width and distort height from lines 13 and 14. our class is complete this is all we need to trigger this dust cloud animation and attach it to any event we want to there are many events we can do here let's try one i call window.add event listener built in javascript method we will be listening for mouseclick event and in callback function that will run every time click event occurs i will at first just draw a simple rectangle to make sure everything works fill rectangle expects four arguments x y width and height i want this rectangle to be drawn at the current coordinates of my mouse click to do that is easy callback function on event listener has access to builtin event objects usually we name it e or event like this but you can name it anything you want javascript knows that this argument passed to callback function on event listener refers to event object you can put abc here and it will still work as long as you refer to it as abc later in the code as well basically here i am saying take event object with information about this click event and save it in a custom variable i call e if i console log this e i will get an error let's comment outline 29 for a second now whenever i click on canvas i get this console log that contains all information about current click event that just occurred if i open it i can see we have all kinds of details here all we want is where on canvas this event happened so we can draw a rectangle at the least coordinates i can see x and y coordinates are down here as properties called x and y now that i know the name of properties i'm looking for i can use these values inside fill rectangle method i want to draw it at x coordinate of current mouse click i know that value is stored on my event object in a property called x as we just saw so i put e dot x here and e dot y width and height could be anything i want i want my rectangle to be for example 50 x 50 pixels i can't see anything when i click that is because i used black background and default fill is also black i set fill style to white color when i click you can see that we draw a white rectangle on canvas but it's not being drawn under mouse why is that in this case event.x gives me value that doesn't account for this top and left margin between start of my webpage and start of canvas what i need to do is offset my coordinates to account for it good way to do that is to measure canvas position first you can do this with one line of code i create a custom variable called for example canvas position and i set it equal to canvas from line one and i call get bounding client rectangle builtin method on it get bound inclined rectangle is a very useful builtin javascript method it returns an object provided information about the size of an element and its position relative to the viewport i can console log my canvas position variable now and you can see the object here it contains bottom left right and top position on the graphics here you can see exactly what these values represent it also contains information about its width and height and its x and y position you can use this to measure any html element on your page if you are offsetting something it's really useful i delete console log on line 7. i like to clean up after myself as i go so if i want my white rectangle to be drawn under the current mouse position i need to offset e dot x and e dot y by top and left margin between viewport and canvas horizontal x coordinate is e dot x minus canvas position dot left now you can see that horizontal position is exactly under mouse i also fix vertical position by saying e dot y minus canvas position top perfect you can see that rectangle is being drawn towards the right bottom from my mouse cursor this is how rectangles work on canvas if i want my mouse to be exactly in the middle of the rectangle both vertically and horizontally i need to do one more small tweak here i offset my positions by half of width and height my width and height is 50 so i offset x and y by minus 25 now when i click mouse cursor is exactly in the middle of white rectangle when i place it on canvas i know this might be very basic for some of you but i want beginners to be able to follow along with us this course is for everyone now that we understand how to draw a simple rectangle on click let's take it to the next level and use our custom explosion class to create sprite animation every time we click somewhere on canvas first thing i want to do is to take this calculation that offsets and centers my horizontal and vertical positions and i put them here in separate variables this is just to keep my code clean and easy to read i call them position x and position y and i just copy this formula in there i can't really do 25 here if i want to keep my code base reusable i need to offset it inside my explosion class i will show you in a second i do this position y vertical formula i remove console log on line 31 and i also delete my white rectangle we will be drawing animated cartoon explosions now on line 5 i have this array that will hold all my current active explosion objects the goal is to use explosion class on line 8 and when we click we push new object into this array from line 5. we cycle through all its frames using update method on line 20 we draw each step to display the animation and then when we reach the last frame we remove the object from the array and we delete it line 31 inside click event listener i take this empty explosions array from line 5 and i call push on it push is a builtin array method it will take whatever we pass to it as an argument and it will push it at the end of the array i pass it new explosion the new keyword will find my class on line 8 and it will run its constructor to create a new object based on this class's blueprint on line 9 i can see my constructor expects two arguments for x and y coordinates this is important because we need to know where on canvas we want to create this triggered animation here on line 31 i just pass it position x and position y variables we calculated on lines 29 and 30. so now i have a way to add new explosion object into my array on mouse click i will need a function to cycle through all objects in the array to update and draw them let's create animation loop i will write a custom function called animate inside i create a for loop that will cycle through all elements in the array sometimes if we click really fast in sequence we will have many objects animated at the same time sometimes this array will be empty it will have 0 elements and this loop will be skipped for each object in the array we will call its update method and also it's a draw method to create animation loop i call built in request animation frame function and i pass it animate the name of its parent function from line 34. now i can call animate to kick off animation loop awesome this is working kinda we can see old frames because we are not clearing canvas and i also need to center my animation around the cursor better to only see the current frame i call built in clear rectangle method and i want to clear the entire canvas if you look closely you will notice we are skipping frame 0 because update method increases frame variable by 1 before we draw the first frame i want each triggered animation to have its own timer that way we can stagger the animation speed on line 19 i created this dot timer property and i set it to 0. on line 22 inside animation loop i increase this dot timer by 1 for each animation step now i can say if this dot timer is divisible by 10 with a remainder of 0 this simply means run this code every 10 frames only when timer is divisible by 10 increase frame by 1. this will slow down the animation timer has to increase 10 times before frame increases once now we can see the initial first frame as well and animation speed is 10 times slower than before let's make width and height slightly bigger on lines 14 and 15. you can see that my animation is drawn too much down from mouse cursor same as we did with white rectangle before i want mouse cursor to be in the center of the animation to do that i can simply offset x and y by half of width and height i can either do it here or i can also do it here inside draw image method it would give us the same result i can't offset x and y here in my event listener because at this point i don't know what width and height my animation is i could hard code some values here but that would not be reusable i think the cleanest way is to move this.x and this.y to go after width and height here so that they can see these properties and i offset them here this dot x is equal to x which was passed as an argument on line 9 minus this dot width from line 12 divided by 2. this centered my animation around the cursor horizontally and this dot y is y minus this dot height divided by two perfect right now i'm just adding more and more objects into my array they stay there even after they stopped animating you can see that if we console explosions array from line 5. we are just adding more and more objects into the array every time we click i need to find a way to remove the ones that have stopped animating we could do object pooling here to avoid instantiating and deleting objects over and over but i will show you how to do that in some more advanced tutorial today let's just do the simplest solution on line 45 inside the for loop that runs through all objects in my explosions array after i draw and update them i check if this particular object has frame property more than 5. frame property comes from line 18 and on line 24 we are increasing it to draw our animation frame by frame sprite sheet has 5 frames and we count from 0 so i know if frame property is more than 5 we played the entire animation on line 44 if this particular object has frame property more than 5 i will remove it using builtin array splice method splice method just wants index of object we want to remove so i for index and i want to remove one object at this index so i comma 1 to make sure the next object in the array is correctly updated and animated after we removed its neighbor we need to adjust index by 1 i minus minus because i'm controlling my array on line 36 in browser console i can see that we are correctly adding and removing objects from the array awesome we have a solid infrastructure for triggered animation and we can connect this code to collision coordinates for example and run this animation when two objects collide in our game we can also connect it to different events and user input it doesn't have to be a click event to avoid code repetition i will put this code into a separate custom function i call for example create animation i cut all this code and i paste it here i call create animation from inside my click event we need to pass down reference to event object to calculate coordinates like this look what happens if i connect it to mousemove event it gives us pretty cool effect experiments this looks like some deep sea creature when i move it like this you can see that the first frame of dust cloud animation is always rotated the same way maybe i want to rotate it a different angle every time we create new explosion to do that i use builtin save and restore html canvas methods let me just write this and then i will explain what's happening translate will set rotation center point in this case i want to rotate around its center so this dot x and this dot y i want each one to be rotated by a different random angle value i create a new property on line 20 called this dot angle circle is 360 degrees html canvas rotate method expects radians so 360 degrees is roughly 6.2 radians this dot angle will be a random number between 0 and 6.2 i pass this.angle to canvas rotate method on line 31 like this now it's rotating too much it's because i translated the drawing context to this.x and this.y on line 30. then i rotate it and then i go from that point further to another this dot x and this.y here x and y coordinates for our animation are already captured here on line 30. so on line 32 i replace this.x and this.y to zero think about it this way i use translate which would be point zero zero on canvas to this.x and this.y so between these save and restore calls 0 0 is actually this dot x and this.y that's better i also need to offset it by this.width divided by 2 and this dot height divided by 2 here inside draw method and remove it on lines 14 and 15. this is how you rotate anything on canvas you save the current state of canvas to make sure the following changes affect only one draw call i translate rotation center point on top of my current object i want to rotate i rotate the entire canvas context by random angle value we draw our image and we restore canvas context to the original save point to make sure this translate and rotate only affects one draw call of one object canvas rotation is one of the more difficult concepts for beginners to understand i spent the entire halloween episode explaining it so don't worry if this was too fast for you if you want more details on how to rotate things on canvas i will link that episode in the video description for now let's just move on you can see each dust cloud is now rotated randomly so the trail itself looks more chaotic as every dust trail should let's comment out mouse move event now we have this nice cartoon dust cloud animation whenever we click on canvas it's missing something let's give it some sound it's really easy to attach sound to event animations in javascript i go to opengameart.org and let's click browse and sound effects i remember there was one i really liked here on left i will type magic in title search oh yes it's this one magic special effect spark it contains four cool magic sounds i download it and i take the one called ice blast i rename it to boom.wav for you the path might be different if you chose different file or you placed it in a different folder i only want to play the sound file once per animation so in update method on line 25 i say if this dot frame is equal to 0 take this dot sound from line 21 and call build in play method on it like this choosing the right sound and animation speed is very important to how your game feels in the end if you do it well your game will be satisfying and your users will love to play it don't forget to click the like if you learned something new today for more vanilla javascript game development and animations check out my playlist i will link relevant videos in the description down below thanks for coding with me today hope you had fun do you want to build awesome games and master front and web development at the same time in this final javascript and html5 canvas game tutorial i want to show you 5 techniques i wish i used sooner today we will build a game completely from scratch step by step with no frameworks and no libraries we will learn how to achieve pixel perfect collision detection using colors how to use time stamps and delta time to make sure our game runs at the same speed on different machines we will learn about arrays and i will show you how to remove all the game objects using array filter method and how to use array sort method to create a correct draw order in a 2d game we will also talk about modern javascript syntax and we will learn how to make our animation code cleaner and less repetitive with spread operator i will also share many small tips and tricks as we go along students of today's course will get two premium spreadsheets completely for free kindly provided by this amazing artist check out his website for more click the like please if you are excited and ready to learn let's talk about javascript have fun i want you to build projects you can show off to someone and be proud about so as usual we will build a game and by the end of this tutorial you will have a complete project i learned some of these techniques from my friend raju he has a lot of other cool things to teach you if you want you can go and check out his courses i will link some in the video description some of you tell me that you only make games by animating divs and other html elements it's a great way to start and learn the basics html canvas can handle many more moving objects at the same time so if you want to try and build games that have a little bit more complexity maybe this is the time for you to give canvas a chance let me show you it is easier than you think to build interactive animated projects with it i will take you through it step by step and help you understand i have a introductory game development series and a beginner playlist where i go slower over all the important techniques if you find yourself struggling at some point or you think i'm going a bit too fast maybe try to watch that one first over there we also create really cool projects but i keep beginners in mind at all times it might be an easier starting point for you and then you will be ready to take on videos like this one and actually properly understand everything i will leave some links in the video description let's go let's create some ravens i will have an array that will hold all my raven objects it needs to be a led variable not const i will explain why in a minute i create a custom class called raven it will be a blueprint based on which all my animated ravens will be created by javascript constructor will create one blank new object every time it is called and it will assign it properties and values as we define them here it will have width property and its value will be for example 100 pixels height will be 50 pixels this dot x starting horizontal x coordinate will be just behind the right edge of canvas so they can fly across to the left so canvas width vertical y coordinate will be a random number between 0 and canvas height since rectangles on canvas are drawn from the top left corner going right and down i don't want any ravens to be partially hidden below the bottom edge of screen initial y position will be a random number between 0 and canvas height minus the height of a raven between here and somewhere around here it needs to be in brackets like this to give us the correct range of values direction x will be horizontal speed basically it will be a random number between a 3 and 8. i want ravens to bounce up and down as they fly so the initial vertical speed i call direction y for example will be a random number between minus 2.5 and plus 2.5 minus values will move upwards plus values will move the raven down along the vertical yaxis update method will move the raven around and adjust any values that needs to be adjusted before we draw the next frame at first i will just simply move it to the left so this dot x from line 11 minus equals this direction x from line 13. draw method will take these updated values and any drawing code we put here will represent single raven object visually first let's start with a simple rectangle i call built in fill rectangle method and i pass it x y width and height ravenclass is complete we have a way to create ravens let's create animation loop i create a custom function i call for example animate it will take argument i call timestamp this will be a numeric value in milliseconds so one second will be number 1000 i will show you exactly how it works any code inside this animate function will run over and over updating and drawing our game frame by frame the first thing we will do between every frame is clear old paint all the drawings from the previous frame so clear rectangle and i want to clear the entire canvas from coordinates 0 0 to coordinates canvas with canvas height we will run some code in between and then at the end we will use requestanimationframer method that we'll call animate again create an endless animation loop i will console.log test to make sure it works and i also need to call animate like this on the first page load to trigger the first loop in browser console i can see the loop is running perfect it's good to test your code as you go to make sure there are no typos it's safer than to write the entire project and then try to look for bugs there step by step approach will save you a lot of time i can also test if my raven class is working i will use it to create many ravens but i can also just create one i create a variable called raven and i assign it to new raven like this this will create one raven object for me which will have access to update class method from line 16 and draw method from line 19. i call it from inside my animation loop and here's my raven it just flies over once if i refresh the page it flies again this works so far we are doing great instead of having one raven i want to create a new raven periodically and i want to make sure that periodic event is triggered at the same interval on very slow old computers and on brand new gaming super pcs to make sure the timings in my game are consistent and based on time and milliseconds rather than on the power of my computer and its ability to serve frames at a certain speed i will use timestamps i will compare how many milliseconds elapsed since the last loop and only when we reach certain amount of time between frames only then we will draw the next frame it's actually very simple but it might take some time to get used to it if you are a beginner let's do it and see how it works what is happening here we are calling animate using request animation frame animate becomes a callback function on requestanimationframe method and default javascript behavior for callback here is to pass it automatic timestamp as an argument its value is in milliseconds just so you know where this timestamp will be coming from it's a default javascript behavior when using request animation frame it will pass its callback function in our case animate automatic timestamp argument we will see it better in a minute as the loop runs request animation frame calls animate over and over passing it timestamps my goal here is to take time from the current loop save that value run the loop again with a new timestamp value and compare them to see how many milliseconds it took in between frames i will need some helper variables here time to next raven will be a variable that will accumulate millisecond values between frames until it reaches my interval value and trigger next frame initially it will start at 0. raven interval will be a value in milliseconds every time time to next raven accumulates enough to reach 500 milliseconds it will trigger next raven and it will reset back to 0 to start counting again i will also need variable that will hold value of timestamp from the previous loop the initial value will be 0. inside my animation loop i will calculate delta time this will be a value in milliseconds between timestamp from this loop and saved timestamp value from the previous loop after i used last time value to calculate delta time i will assign last time variable from line 8 to the new timestamp passed here in this loop so that we have that value ready to compare in the next loop let's console timestamp i can see i misspelled last time here capitalization of letters is very important in javascript you can see in console i'm getting timestamps in milliseconds since the loop started the very first value is a second so it goes like this seven eight seconds and so on so this is the automatically passed timestamp value here it's generated by default by javascript because we made animate into a callback function on request animation frame method here on line 33 there is a way to do this without calculating delta time at all but i haven't tested that and i'm not sure what is the browser support for that technique so let's go with this tested safer solution today i will remove console.log leaving too many console logs in your projects especially the ones running so often like this can affect your performance so keep that in mind on line 6 i have time to next raven variable here in my animation loop i will increase its value by delta time for every animation frame i will console log delta time now again i need to be careful about spelling my variables correctly here i can see that on my computer time between frames is around 16 milliseconds my computer is powerful and it is able to serve a new frame every 16 milliseconds on your computer the number might be different i would actually be very interested to know if it's the same number or a different one for most of you if you are following and coding with me can you leave a quick comment with that number please you can just type 16 if it's the same number or whatever different number you are getting right now so time to next raven starts at 0 and is increasing by this value of around 16 milliseconds per each frame on line 7 i created a variable called raven interval and i set it to 500 milliseconds in my animation loop i will say when time to next raven reaches this raven interval when this number that starts at 0 and increases by the amount of milliseconds that happened between frames reaches 500 at that point we will take raven's array from line 10 and use builtin array push method i will pass it new raven which will trigger my raven class constructor create one new raven object and it will push it inside raven's array when that happens i set time to next raven back to zero so it can start counting again from the beginning i know i just said raven a lot time to next raven starts at zero it increases by the amount of a delta time by the amount of milliseconds between each frame which will be dependent on performance of your computer however since slower computers will take longer to serve the next frame their delta time will be a higher number and it will move towards our target raven interval in bigger steps as a result this code will be triggered at the exactly same time on slow and fast computers this is one way how you can properly trigger periodic events in your projects using time stamps this might be a bit too much to wrap your head around if you are a beginner it's one of the reasons i don't always use timestamps in my animation tutorials because i can't really explain all of this in every single video but try to learn it if you can if you still don't get it don't worry i will explain it in future projects again so eventually it will start making more sense repetition and practice is the best way to learn at least for me it is i console cravens and i see nothing is happening even though my animation loop is running it seems that this if statement never evaluates the true so the code inside is never triggered controlling is great for debugging i console time to next raven first oh i can see its value is a non not a number here's our problem why is it this value it must be because we are adding delta time to it here i consolidate delta time and i can see that the first initial value is also not a number delta time is calculated here on line 30 so now i console log timestamp and this is the root of our problem that cascaded all the way through my variables that use each other to calculate their values when the animate loop starts the very first time stamp is undefined because timestamp only gets created on the second loop here on line 39 when we call request animation frame to fix that is easy i just need to give timestamp a starting value on the first call of animate that starts my animation loop here i will pass it timestamp of 0 as an argument awesome that fixed it and since i'm consolidating raven's array on line 36 i can see it adds new raven object to the array every 500 milliseconds i remove the console log we have data for ravens inside the array we just need to cycle through that array through every single raven object and call their update and draw methods so that we can actually see movement on canvas i declared my ravens array here on line 10. inside animation loop i will use this syntax which might be a bit unusual for you here i'm creating so called array literal by just dropping square brackets like that i'm creating a quick new array on the fly and these three dots are so called spread operator now i'm spreading my ravens array inside this new quick array i just created spread operator allows us to spread iterable such as this ravens array to be expanded into another array let's finish writing this line of code and i will explain why i'm doing that since we are dealing with an array i can call builtin array for each method i need to assign it a variable name for each object in this array so we can use it as we iterate as we cycle through it i will call that variable for example object so this object variable now represents each individual raven object in raven's array and i can say for each raven object in ravens array call their associated update method we wrote on line 20. so this line of code will cycle through the entire ravens array and it will trigger update method on all of them since we are inside animation loop this will happen over and over for each animation frame i will do exactly the same thing for draw method from line 23 and we are updating and drawing our ravens awesome now you might ask why am i using this fancy syntax here where i created a new array and i use the spread operator to expand my ravens into that new array just so that i can call update and draw on them i could have just called it on the raven's array directly without expanding it like this the reason i did that is because when i create particle class in a minute i can just spread my particles into the same array along with the ravens as long as my particle class will have update and draw methods to call the code will work and i can call all my classes by just expanding more and more arrays in here i can for example also have an array of enemies obstacles power ups and other elements in my game i can spread all of them into a single array and call their update and draw methods all at once i will show you exactly what that looks like in a minute i think it makes the code look clean and easy to read what do you think online 34 i'm periodically adding new object into raven's array right now it's an endlessly growing array of objects and on lines 37 and 38 i'm iterating over all of them even the ones that have moved off screen and are not visible anymore eventually this would build up and cause performance issues so i need a way to remove the ones that have moved past the left edge of game area sometimes i use array splice method to do that i used splice in many other tutorials before but there might be a better way to do it using splice while cycling through the array removes objects from somewhere in the middle of the array so then we have to write code to adjust the index to make sure neighbors of that object don't get skipped easier way to discard objects we don't need might be using builtin array filter method we will just run through the array call update and draw for each raven and then we will filter out ravens that have moved past the left edge of screen what does that look like in javascript let me show you i create a new class property called marked for deletion and initially i set it to false in update method i say if horizontal x coordinate of this particular even object is less than 0 minus this dot width meaning it has moved all the way behind the left edge i set its marked for deletion property to true inside animation loop i take the variable that holds my raven's array from line 10 and i reassign it to a new array that's why the initial declaration of raven's array needs to be a led variable not const because const variable cannot be reassigned it will be the same array but objects that have marked for deletion property set to true will be filtered out filter method creates a new array with all elements that passed the test implemented by provided function so here i'm saying take raven's variable from line 10 and replace it with the same array but i wanted that array to be filled only with objects for which this condition is true here we have a little bit of double negative sorry the test in my callback function wants marked for deletion value to be false if marked for deletion is false then this condition evaluates as true and this particular even object will not be deleted again and said very simply take raven's array from line 10 delete everything in there and replace it with contents of the same ravens array but only with those objects that have marked for deletion property set to false exclamation mark here means false since we are going to look in raven's on line 42 i can check in browser console and i can see that number of objects in the array is between 3 and 6. it only contains ravens that are active and visible on screen perfect i remove the console log these ravens look a bit boring just black rectangles let's use animated sprite sheets instead on my class i create a new property called this dot image and i set it equal to new image i set source on that new image as raven png art for this episode was made by this amazing artist link to his website is in the video description he also allowed me to share this particular spreadsheet completely for free with my students so you can download it along with all other project files in the description for more game art check out his website and support him if you can there aren't many good 2d artists like this and he's one of my favorites i try to buy his game art assets whenever i can i will need a couple of helper properties here this dot sprite width is width of a single frame in my raven's sprite sheet in this case 271 pixels if you are using a different sprite sheet take its width and divide it by the number of horizontal frames maybe it would be easier if you follow along with me using the same sprite sheet and then when you understand the code and it's working for you you can replace it sprite height is 194 pixels on line 31 inside draw method i call built in draw image method it expects between 3 and 9 arguments depending on how much control you want over the image you are drawing minimum is 3 arguments image you want to draw so this dot image from line 20 and x and y coordinates where to draw it now it's just simply taking the entire sprite sheet and drawing the whole thing at its original size we can also give it optional width and height arguments which will scale it i need to make sure my brackets and commas are correct here so now it's scaling the entire sprite sheet to fit inside 100 times 50 pixels let's do stroke rectangle here so we can see it better we can also give it a total of 9 arguments these additional 4 arguments will allow us to only crop portion of the image source x source y source width and source height so the longest version of draw image method takes 9 arguments image we want to draw x y width and height of area to group out from the source image x y with an height of where to place that cropped out image on destination canvas let's just crop out the first frame now source x and source y is scored in at 0 0. source width is sprite width and source height is sprite height you can see our ravens are a bit stretched it's because these initial width and height values are completely disconnected from the actual dimensions and aspect ratio of our sprite sheet i move sprite width and sprite height up here so that we can use them to calculate values that come after with could be for example sprite width divided by 2 and height could be height divided by 2. this works but now all our ravens are the same size and as my friend marcus says multiplication is faster than division so let's create a new property called size modifier and it will be a random number between 0.4 and 1. now instead of dividing it by 2 i will multiply width and height by this random size modifier value which will make the ravens be different sizes while still preserving the aspect ratio so no stretching this dot frame is the number of frames in our sprite sheet counting from zero so the initial value will be zero this frame this dot max frame could be four or five depending on how you reset it back to frame zero let's go with four maybe i will adjust my frame reset check to this value in a minute if this dot frame from line 25 is more than this dot max frame from line 26 set this dot frame to zero else increase frame by one to actually reflect this value on canvas i replace source x argument on line 37 with this dot frame times this dot sprite width so it will go 0 1 2 3 4 5 and back to 0 as frame variable cycles on line 32 all the ravens are flopping wings very fast and at the same interval how do we speed up or slow down sprite animation the speed at which the next frame is served and how do we make sure it's consistent across all machines on old slow computers and new powerful ones as well we can do that by using delta time we calculated delta time on line 43 inside animation loop delta time is the difference in milliseconds between last frame and current frame and this value will differ based on power of your computer some computers can surf frames much faster than others since i already calculated this speed at which my machine can surf frames in my game i will just pass a delta time as an argument to my update method here on line 50. that way it will be available up here let's test it i console delta time it won't be available until i passed delta time as an argument here as well now the values are coming through i will need a couple of helper properties time since flap will be 0 at first it will be growing by the amount of delta time until it reaches value in flap interval then it will trigger next frame of sprite sheet and reset back to zero this time since flop plus equals a delta time remember that delta time is the amount of milliseconds between frames so faster computers will have smaller numbers here slower computers will have high delta time values as a result it will reach the target value at the same time on slow and fast computers unifying animation speed across different devices i say if this.time since flap from line 27 is more than flap interval from line 28 only then run this code that handles cycling through frames for this to work every time this condition is met and if statement is entered i also have to reset time since flap back to 0 so it can start counting again when to serve the next frame now i can change the value of flap interval and you can see it changes the speed at which we cycle through frames in our sprite sheet 500 milliseconds per frame is very slow five milliseconds per frame is fast faster than my computer can handle us since we know my computer can handle the serve next frame every 16 milliseconds as maximum i can also randomize flap interval so that each raven animates at a slightly different rhythm random number between 100 and 200 feels too slow how about a random number between 50 and 100 that feels better quick recap we are calculating delta time difference in milliseconds between last frame and current frame the value of delta time will be different on slow and fast computers to make sure we have consistent time in across different machines we have time since flap variable that increases by the value of delta time per each frame until it reaches target value in the flap interval then it serves the next frame resets back to 0 and starts counting again preparing to serve the next frame ravens are flying in straight lines from right to left i also created the direction y property on line 21. it's a random number between minus 2.5 and plus 2.5 so summary events will move up and some will move down in negative or positive direction along vertical y axis based on this value inside update method i say this dot y plus equals this dot direction y now you can see some vertical movement it's now a little bit harder to target them making our game more difficult for players one thing i don't like now is how they disappear behind the top and bottom edge i want them to move all the way across the screen and when they touch bottom or top edge of game area i want them to kind of bounce and reverse their vertical movement to the opposite direction i do that with an if statement i say if this dot y is less than 0 or if this dot y is more than canvas height minus distort height set their direction property from line 21 to its opposite value this to direction y times 1 now they just bounce when they reach edges of the game area let's draw score i create a led variable called score and i assign it to 0 initially i create a custom function called draw score inside i set fill style to white i want white numbers i call built in fill text method inside i will hard code string score colon space plus score variable we just declared and i wanted a drone on canvas at coordinates 50 75 for example now i just call draw score from inside my animation loop keep in mind since we are drawing everything on the same kind of a sequence in which you call this will affect how our game is layered i want score to be behind ravens so first i draw score then i draw ravens it's very small so let's set the global canvas font to 50 pixels impact now it's easier to read i will play with it a bit i can use canvas shadows here but i can also just draw the same text again at slightly different coordinates for example 55 and 80. the first layer will be black the second layer will be white in the game we will have to click ravens before they disappear behind the left edge of screen i create an event listener for click event callback function on event listener has the default access to this event object i assign it variable name for example e it contains information about the click event that happened for example its x and y coordinates in relation to viewport if i console e dot x and e dot y i get coordinates of my click whenever i click somewhere in the game area i promised we would do collision detection by color today to do that we first need to know what color is the pixel we are clicking on i create a custom variable i call for example detect pixel color it will be equal to built in get image data method get image data simply scans area of canvas and returns an array like object called uint8 clamped array it's a simple data structure full of unassigned 8bit integers it's clamped which means it can contain only integers whole numbers between a certain value range specifically between 0 and 255. let's scan canvas and inspect what it gives us get image data needs four arguments x y with and height of area we want to scan i want to scan just one pixel we click on with mouse so coordinates of this click event e dot x e dot y and width and height of scanned area will be just one pixel we want pixel perfect precision here okay let's just console log this variable to see in what format get image data gives us the pixel color to make sure we understand how it works if you are getting error at this point keep watching i will explain it and i will show you how to deal with it now whenever i click somewhere on canvas get image data scans area of one pixel directly under the mouse click and it gives us this image data object this autogenerated image data object contains three main properties data property which is an array currently it has four numbers inside and within height of scanned area in our case one pixel the way color data is structured here is that each four elements in this data array represent one pixel specifically it's red green blue and alpha value if you use css you know that any color can be created by combining a certain amount of red green and blue the only difference between css rgba declaration and this is that in css opacity is a value between 0 and 1. here opacity alpha is also a number between 0 and 255. 0 is transparent 255 is fully visible here for example you can see i clicked and it gave us 0 0 0 for red green and blue and 0 for alpha it means we click somewhere in the empty area keep in mind that canvas is just the ravens and score the rest is transparent rainbow colors you see are on the background and are applied to body element with css we are calling get image data on ctx variables so it is just scanning that particular canvas element it doesn't see anything else some of you might be getting error when you click on canvas and try to run get image data on it we are drawing sprite sheets our raven images on canvas in some browsers you won't be able to call get image data on the same canvas where you draw images it will give you an error that says something like canvas was tainted by crossorigin data if you are running your code locally most likely you see that error i'm using local server so i'm not getting that error right now it's a security measure related to crossorigin resource sharing apparently there could be viruses hidden in some images and by scanning that image with get image data you could expose yourself to that virus there are many ways to get around this problem and scan canvas without exposing yourself to any potential risks in our case it's simple let me show you but first i will assign a differently colored hitbox to each raven so i want one canvas that has only these hitboxes and no ravens because when i click it i want to get color of that particular hitbox not of the black raven if i create a secondary canvas and i use it just to draw these hitboxes and no images it won't give me tainted canvas error i will explain more as we write it in index.html i create an additional canvas with an id of collision canvas in style css i comment out rainbow background for a moment so that it's very clear what we are doing the same as i set up the first canvas i will also set up this new collision canvas be careful here i always make mistakes and typos when assigning multiple canvases like this for some reason i don't know why constant variable called collision canvas is document getelementbyid collisioncanvas collisionctx which is context is collisioncanvas.getcontext2d i also set collision canvas width and height just to check i give it red background yes it's covering the entire browser window perfect on my raven class i create a property called random colors at the point where each raven is created i want to roll the dice and randomly give it red green and blue color value we know that color values can be in a range between 0 and 255 so red will be math at random times 255 like this it will give us decimal points i need only integers here so i wrap it in math.floor i do the same thing for green and blue now we have three random values in this array assigned to each raven object i create one additional property called this dot color and here i concatenate rgba color declaration using these values red is random colors index zero green is index one blue is index 2 plus closing bracket like this to use this color i declare fill rectangle on line 54 and i set fill style to this dot color from line 37 now each raven has a random red green and blue color assigned when it's created by our class constructor and we use these three values to create rgb color for its hidden box hitbox means collision detection area and in our case it's the colored rectangle around each raven we can also do much more complex shapes and still get pixel perfect collision detection but for purposes of this tutorial rectangles are fine i don't want to complicate things too much this tutorial is to help you understand the technique so now each raven has an array of three random values between 0 and 255 and these values are used to draw its hitbox we will use these values scan as a unique password for each raven we click on canvas get rgb value of that pixel we clicked on using getimagedata method and we compare them with this random colors property if they all match we know we click on this particular raven this technique has one downside there is a very small chance that there will be two identical colors generated next to each other but since we do random number between 0 and 255 3 times and we only have between three and seven active ravens on the screen at any given time the chances of that happening are astronomically low if we have any math experts who can run the numbers let me know in the comments it will be one in millions possibly billions now i told you what i want to do what does that look like in javascript before we write collision code there is one small thing layers i want big ravens to be up in front and small ravens to be behind to create a sense of depth and correct the draw order in a 2d space right now sometimes you see smaller ravens up front because they are drawn here on line 83 based on the order at which they were pushed into the array on line 78 i don't have to sort them for every animation frame only every time i push new raven to the array i want to sort out all objects in the array by size i use built in array sort method sort method will simply reorganize order of elements in the array their indexes based on provided check in a callback function it will run through the array and compare every element against every other element and sort them in ascending or descending order ascending order is default it will run over my ravens array and use these a and b variables for each object i can choose many different properties to sort them by today i will choose width because i know ravens in the back will have smaller width than the ones up front i'm just gonna return it like this simple syntax and i'm comparing width of every element in the array against the width of every other element in the same array a minus b will sort my array in ascending order based on width which is exactly what i want i want small ones to be drawn first and larger ones to be drawn on top you can read more about built in javascript sort method online we can see that it works large ravens are up front and smaller ones are behind perfect as i said i want to avoid tainted canvas error so i need to make sure i have a separate canvas i can scan color from that doesn't have any images drawn on it i take collision context variable i declared on line 6 and i draw my colored rectangles on that canvas instead by adjusting code here on lines 54 and 55. nice that worked i can see we are not clearing the old paint on that canvas so on line 74 i call clear rectangle on collision context as well now we have two canvas elements one has colored collision rectangle and the other has ravens and score drawn on it on line 68 inside click event listener instead of scanning my main game canvas for pixel data i will scan just collision canvas instead now when i click it will ignore the black ravens and imagedata object will give me red green blue and alpha value of rectangle i clicked on i will compare it with red green blue value inside random colors property on each raven to know which one was clicked on and then i will set its marked for deletion property to true there are many techniques you can use to compare two arraylike objects against each other let's just keep it simple when i click on one of these rectangles i can see the values are inside this image data object on a property called data data is an array with red green blue and alpha value of pixel we clicked on i create a variable to get hold of this array detect pixelcolor.data which refers to this uint8 clamped array with four elements there is also a way to check for collision detection between two objects based on opacity alpha value like this but today we will do collision between point and shape between mouse and ravens i will ignore alpha value from now on and i will just focus on these three values red green blue so this pc pixel color variable holds this data array with four elements i take my ravens array and i call for each on it for each raven object in the array i will check if its random colors property from line 36 if the first element in the array index 0 is the same value as pixel we clicked on at the same time we also need the second and the third element to match if random colors array on my raven matches exactly red green and blue values on pixel we clicked on we know we have a collision index 0 is red index 1 is green index 2 is blue we are comparing the 2. if they match we have collision so i will take that raven object and set its marked for deletion property to true and i will increase score variable by 1. awesome it works i can click on ravens and they disappear and increase my score i can set opacity on collision canvas to zero and i can enable rainbow background on body element collision detection still works correctly well done if you followed this far you are doing great what should we do next how about we add explosion animation and sound effect whenever we click on a raven i will just repeat the same pattern we did for raven class i create an array called explosions it will hold all active animated explosion objects i will create a class to create a blueprint for these objects its constructor will expect three arguments x y and size because position and size will come from the outside and will depend on the raven we clicked on this dot image will be new image this dot image src will be boom png you can download the spreadsheet for free in the video description sprite width will be 200 pixels sprite height 179 pixels this dot size will be size we passed as an argument on line 61. same for this dot x and this dot y these values come from the outside this dot frame active frame will start from zero this dot sound will be new audio like this this dot sound src source and here as a source you can add any sound you like for example i will go to opengameart.org website i click browse sound effects and i will search for magic sfx special effects i will choose this pack of 4 sounds i download it and i will use the one called ice blast i will rename that file as a boom dot wav and i will add it to my project folder you can choose a different sound if you want you can also have multiple sounds and play a random one here it's up to you in update method same as we did before i will use delta time to time my animation we will have one variable to accumulate the delta time values called for example time since last frame it will start at zero then we need a second variable to define limit when the next frame triggers i call it for example frame interval and i set it to 200 milliseconds i pass delta time as argument to update method it will be coming directly from animation loop i will show you in a minute this.time since last frame will be slowly increasing by the amount of delta time if time since last frame is more than frame interval 200 milliseconds i increase this dot frame from line 69 by one i also want to play the sound when we are on frame zero when the explosion first appears there are better ways to do that but for today i will simply check if active frame of this explosion is a zero and i take this sound from line 70 and i call build in play method on it explosions will also need draw method which will draw the actual sprite sheet animation we will pass the draw image 9 arguments same as we did with ravens image we want to draw this dot image from line 62 four values for area to crop out single frame so source x is this dot frame times this dot sprite width source y will be zero because we only have one row of sprites source width will be sprite width from line 64 and the source height will be sprite height from 965. so now we told javascript what area we want to crop out now we need to give it x y width and height where to place it on destination canvas so this dot x this dot y and this dot size for width and distal size for height as this dot frame variable increases here on line 79 because of this source x property here we will show frames 0 1 2 3 and 4. now where do we trigger this code to create and animate new explosion the best place would be here i think this if statement detects collision by color so when collision is detected i take explosions array from line 59 and i push new explosion in there this will trigger explosion class constructor on line 61. i can see it expects value for x and y coordinates and size because i want explosion to depend on the size of the raven we clicked so here we are cycling through raven's array referring to individual ravens as object i want to pass x y and width of that raven as x y and size arguments here okay that should work i can test it by console again explosions array from line 59. i can see as i click and hit ravens explosions are being added perfect i made sure my explosion class has update and draw method same as my raven class that's why here on line 123 i can simply just use spread operator and expand the entire explosions array into this array i'm creating on a fly so that i can call update on all ravens and all explosions at the same time like this i do the same thing for draw method on line 124 i like this syntax it looks clean down here i will also remove all the explosion objects from the array using builtin array filter method i need to create a property called marked for deletion on my explosion class for this to work as you can see i'm repeating the same pattern we used for ravens i hope that using the same structure like this helps you to understand and navigate in the code a bit better initially i set it to false in update method i write an if statement if this.frame from line 69 is more than 5 which means after all the frames of sprite sheet have been displayed one by one and explosion animation is complete i set marked for deletion from line 74 to true when i click on ravens sound plays and explosion sprites are animated we are making great progress we just need to polish some details here if i change frame interval on line 73 to 500 you can see it only affects the first frame the rest of animation is playing really fast oh it is because i need to reset time since last frame back to 0 every time so it can count towards the next frame interval over and over to serve next frames 500 milliseconds is too slow let's try 200 i want to align explosion animation better over the raven sprites let's move it a bit upwards by adjusting destination y argument in draw image method i will make it relative to size this dot y minus this dot size this dot size divided by four yeah i think this is aligned well now let's create game over condition on line 11 i create a global variable called game over and i set it to false initially inside update method on ravenclaws i create an if statement if any raven manages to get all the way across the screen and behind the left edge of game area game will end if this dot x is less than 0 minus this dot with set game over from line 11 to true and inside animation loop on line 132 i only want to run request animation frame and serve the next frame of our game as long as game over is not true exclamation mark here when raven gets all the way across the screen game over will be set to true and game will stop like this i also want to display game over message same as we did at draw score i will create a function called draw game over first style will be black fill text will be for example game over your score is plus i concatenate score variable i want it in the middle of the screen so x coordinate will be canvas width divided by 2 and y coordinate will be canvas height divided by 2. now i need to call my draw game over function here in animate if game over is false keep serving the next frame else call draw game over method to display message and final score it's not centered it's because these coordinates on line 101 mark top left corner and the text goes towards right and bottom from that point same as when you are drawing rectangle or image on canvas with text it's easy to center by setting text align property to center like this yes that worked same as i did with score i want to give it shadow i will use this trick where i draw the same text twice with different fill color and i offset it by 5 pixels nice let's change direction of background gradient maybe 45 degrees 125 degrees let's do a little bit of experimenting now and also to solidify what we learned today i will use the same code pattern we used for ravens and explosions to add particle effects to our game i will go a bit faster now this part is just for fun feel free to run your own coding experiments i create an array that will hold all my particle objects i create particle class constructor will expect x y size and color this will be coming from outside the class and will depend on what raven is leaving this trail and creating these particles it will be shooting from their tails as usual we will create properties for this dot x and this dot y this dot radius since particles will be drawn as circles it will be random number tied to size of a raven let's try this formula and see what it looks like particles will be growing in size so we need max radius to know when to remove them and also at which point they reach maximum opacity it will be random number between 35 and 55 for example marked for deletion as usual will be false at first horizontal speed x will be a random number between 0.5 and 1.5 because i want the particles to slowly draft to the right this dot color will be passed from the outside update method will move particles to the right horizontally it will increase radius by 0.2 per frame and it will check if this dot radius is more than max radius if it is it will set marked for deletion to true draw method will just draw a simple circle begin path to start the drawing fill style will be this dot color from line 101 arc method to draw a circle i pass it x y radius start angle and ant angle like this and we fill circular path with color we have a class that will serve as a blueprint to create particles i want them to follow ravens as they fly to create trails behind them to do that i go up inside update method on raven class every time we serve next sprite sheet frame at the same interval we are going to take particles array we just created and we will push new particle inside my particle class constructor expects four values to come from the outside x y size and color so i pass it x and y of this raven width of the raven as a size argument and this dot color we use for collision detection rectangles will also be color of particle trail for that particular raven you can see here on line 95 constructor wants these four properties to come from the outside so that it knows where on canvas to draw the particles how large and what color i can see i forgot to declare this dot size here like this it will come from here and it will be used here to make radius of particle circles relative to the size of raven smaller ones should have smaller trails so we have particle class here on line 52 we are creating new particle object and pushing it into particles array inside animate i use spread operator again to expand contents of particles array here so that their update method gets called and i also expanded here for draw method i also need to make sure all particles with marked for deletion properties set to true get filtered out from particles array nice we are drawing particle trails you can see they come from the top left corner of raven hitbox i will adjust that position a bit here inside particle class constructor first i need to move this dot size up so that its value is available for all properties coming after it this dot x will be x passed as argument on line 95 plus this dot size from line 96 divided by 2 to center it horizontally yes this dot y will be y plus this dot size divided by two no that's too low this dot size divided by three much better i want particles to be drawn behind ravens we are drawing everything on a single canvas element so how things are layered depends on the order at which javascript cycles through these objects and calls their draw methods for every frame i will change the order here to draw particles first and then ravens and explosions will be drawn over them like this awesome we have a working code let's clean it up in update method on particle class i want radius to grow faster 0.5 0.8 0.5 is fine drawing trail on every single raven can be performance expensive i want a property that will allow me to randomize it and allow me to set what percentage of ravens will have particle trails on my raven class i create a property called this.hessa trail i want this property to be true for certain amount of ravens and falls for the rest as marcus pointed out in my generative art tutorial any conditional expression results in a boolean value so instead of doing if else statement here i can simply just roll dice with math at random master random code like this will return a random value between 0 and 1. so i call it and i check if that random value is more than 0.5 and that's it it should be true roughly for 50 of ravens this conditional expression results in a boolean value true or false depending on if math at random rolls a random number that's higher or lower than 0.5 i really like this syntax very simple and clean inside update method on ravenclass i will only create new particles if this dot has trail is true like this now only half of my ravens will have trails i also want particles to animate from fully visible to transparent inside draw method on particle class i set global alpha property on my canvas to be 1 which is maximum fully visible minus the current size of the particle divided by max size as the particle's radius grows eventually radius will be the same size as max radius so let's say max radius is 30 pixels at that point where the current radius is the same size as max radius we will have 30 divided by 30 here which is one and one minus one is zero particle is slowly growing more and more transparent and at the point when it reaches maximum radius it will be at zero global alpha this formula might be a bit difficult to completely understand if it's the first time you see it but it's very useful we will talk about it again in some other video as you can see global alpha is spilling over and affecting my ravens as well that's an easy fix if you want to change some global canvas properties such as fill style global alpha rotate translate and so on and you want those properties to affect only a single element you draw and not the others you can just wrap that drawing code between builtin save and restore methods save will create a snapshot of current canvas global settings and then we change global alpha here which will affect just this one particular particle and then i call restore to revert canvas settings back to what they were at this point save and restore are especially useful for rotating elements on canvas but you can also use them for other things like this my particles are blinking before they disappear it is because javascript first runs over the entire array before it filters the particles that are too large out and my global alpha formula works only in a specific range between 0 and max radius some particles get outside that range and are drawn fully opaque for a second before they get filtered out to fix it is simple i just trigger marked for deletion a little bit sooner for example by saying max radius minus 5 in my check online 111 let's make the trail nicer i will add five particles every time instead of adding just one on line 54 i create a for loop like this and i put this code inside if i make radius grow slower trail will be longer because it will take particles more time to reach max radius be a bit careful here not to have too many active particles on screen at once because at some point it will start affecting performance and frame rate i can also randomize the initial x and y coordinates a little for example i can add random number between minus 25 and plus 25 i think it looks a bit more interesting like this i can also add more enemy types for example i can add fast flying bats that will be worth extra score points maybe i want ravens with trails to be worth more score but also have more lives there are many things we can do here if you are still feeling creative check out some of my playlists i have creative coding for beginners game development playlists and advanced animation effects everything with just html css and plain vanilla javascript no frameworks and no libraries check out some recommended courses in the video description i'll see you there if you want to build games with javascript all you need is a small set of tools and techniques let's add a couple more of them to our toolkit today and make sure we really understand them in javascript the extends keyword is used to create socalled child class that way i can have my main parent class where i define properties and values share between all my enemy types and then i can have child subclasses that define specifics such as different visuals different movement patterns and so on for each enemy type then when i instantiate my ghost object and i call update on it if javascript can't find update method on the ghost class it will go look for it automatically on the parent anime class and it will run the code from there there is another special keyword called super today i will show you exactly when and how to use it let's build a project step by step completely from scratch and in the process let's learn everything we need to know about subclassing in javascript and how to use it to keep our code modular clean and easy to read this tutorial is for beginners i will take you through the code in a way to make sure you understand everything we will build a really fun animation project and i will show you many game development techniques today this video is independent and i will explain the code from scratch but it's part of a larger series where i teach you tools and techniques you will need if you want to be a game developer or if you just want to learn frontend web development and javascript on fun visual animation projects if you go along with me today you will get three free premium sprite sheets so that you can get exactly the same result check out this website for more beautiful game development art assets to start my project i create a basic webpage boilerplate markup a link style css file javascript file and i created html5 canvas element with an id of canvas one i bring my three images into the project by creating three img tags with ids worm ghost and spider you can find these images to download in the video description it might be a good idea to use the same images as me at first and then modify the code and use your own art assets once you get everything working it might save you a lot of time debugging if you follow exactly what i'm doing especially if you are a beginner i give my canvas a border width and height and i position it with css in the middle of the page i will also hide the project images we will draw them and animate them with javascript in a minute by including images as image tags i can make sure they are fully loaded before my javascript code runs by using load event listener it will prevent potential errors i will show you exactly what i mean as we go along i set up my canvas using these four lines of code as usual let's outline the entire project structure now so that you can see what functions and classes we need and how they are connected to each other when we have the complete project structure we will be expanding on individual parts to add more functionality the most important thing today will be my game class i will use it as the wrapper that contains and controls all movement and animation logic and basically everything else it's a javascript class so it will need a constructor which is a monitor method for all javascript classes it will also have update and draw methods in game class constructor i create a property i call this dot enemies my game object will hold an array that contains all enemies like this my game class will also have a private method called add new enemy this method will be called every time i need to create and set up a new enemy for my game if method's name starts with a hash symbol like this it will be a private class method it means it can only be called from within my game class to manage some kind of internal functionality in our case adding a new enemy into this.enemies array from line 8. if you try to call this private method from outside game class you will get an error notice that update and draw methods are public because i will need to call them from my animation loop from the outside a bit later my add new anime private method will need a way to create new enemies for the game so we will write another class i call anime and inside we declare a blueprint whenever i call this anime class from inside add new anime method it will create one new enemy object for me i will show you how to make animated ghosts worms and spiders they will all be created by this enemy class but they will have different animations and different behaviors to make our game more interesting and maybe more difficult for the players so again as you know every class needs a constructor to hold the blueprint and we will also have update and draw methods here update and draw method on gameobject here will be handling updating and drawing my entire game for example all enemies player obstacles backgrounds menus and so on update and draw method here on the anime class will be handling only each individual enemy such as their position movement pattern sprite animation and so on and finally to complete the skeleton of our project we will need a custom animate function that will call what needs to be called and a loop around to move and animate things in our game here in animation loop i declare what happens in our game frame by frame at first we will call built in clear rectangle method and we will clear old paint from the entire canvas so from coordinates 0 0 to coordinates canvas with canvas height if you are a complete beginner this is horizontal x axis and this is vertical y yaxis so point zero zero is here and point x two hundred y two hundred for example is here this is the basic thing you need to understand if you want to draw on canvas so we cleared old paint from canvas to make sure we can only see the current animation frame we write some code here depending on what we want to happen in our game and we call request animation frame built in javascript method which will simply take function we pass to it and it will call it once animate will run its code and call itself again run its code and call itself again over and over this is how you create animation loop i don't want any of this code to run until i'm sure my web page including canvas element and all project images have been loaded so i highlight all the code and i cut it for a second i want to put it inside load event listener document dot add event listener and we will listen for dom content loaded javascript event i actually made a mistake here because the dom content loaded event fires when the initial html document has been loaded and parsed but it doesn't wait for style sheets and images the correct event to listen for here is the load event which only fires when the whole page has been loaded including all dependent resources such as style sheets and images so please replace dom content loaded event with load event here you will not notice any difference if you are working locally because images will load instantly but if you are loading images from an online server somewhere load event is the one you need here so i paste all the code back here inside my load event listener we have canvas setup main game class enemy class and animate function if you want to animate something it's important that it runs at the same speed on slow old computers and on brand new gaming super pcs not every computer is able to surf frames at the same speed also some screens have different refresh rates and request animation frame adjusts when it serves the next frame based on screen refresh rate so what i want to do now is count how many milliseconds happened between frames and only when we reach certain threshold we will serve the next frame since we are passing animate as an argument to request animation frame here request animation frame has another secret feature it will pass an automatic timestamp argument to the function it calls so our animate has access to timestamp argument which was automatically generated by javascript because i called animate using request animation frame here i want to calculate the difference between previous and current animate call in milliseconds difference between frames and animation is also called delta time simply explained as request animation frame runs over and over it is passing animate this automatic timestamp argument i want to know what is the difference in milliseconds between previous timestamp and timestamp from the current loop so called deltatime i will calculate it by saying a timestamp that was passed in this loop minus timestamp that was passed in the previous loop i will call it for example last time after i used last time variable that was holding old timestamp from the previous loop to calculate delta time i can reassign last time to the new time stamp from this loop so that it can be used in the next loop again let's console delta time to see if it works here i declare animate i also need to call it the start the first animation loop oh yeah last time is not declared i declare it right here and i initially set it to 1. this value of 1 will only be used for the very first loop because on the second loop it will get reassigned to the current timestamp in console i can see my delta time is around 16 milliseconds this is very common refresh rate for most computer screens but if you have high refresh screen you can get a lower number here and if you have old computer you can get higher number here especially when you create a bigger project where you animate many moving parts at this point even very slow computers should handle 16 milliseconds delta time time between animation frames since our game doesn't have any graphics yet if i scroll in console all the way up to my first delta time console aux i can see the initial call was none not a number it's because animate only receives automatic timestamp argument here when it gets called by request animation frame on the very first initial call it doesn't have any timestamp argument so i will pass it 0 just for that first loop now we know how to calculate delta time number of milliseconds between frames faster computers will have lower number slower old computers might have higher delta time because it can take them more milliseconds to serve the next frame since we have this delta time value we can adjust animation speed with it to make sure our game runs at the same speed on slow and fast computers i will show you where and how to use it as we build our project and start animate and move game characters around on canvas console lock like this can cause performance issues so don't forget to remove your console logs when you don't need them anymore on line 22 i have my anime class it has a mandatory constructor method which will be used as a blueprint to create one new enemy object whenever i call this class with a new keyword from somewhere in my project let's write that blueprint and inside we declare properties and values of our enemies each anime will need x and y starting coordinates so that javascript knows where we want to draw them on canvas our first hard code coordinates 100 hundred we will change that in a minute i will also give each enemy width of 100 pixels and height of 100 pixels update method on enemy class will just move the enemy by 1 pixel to the left draw method on my custom enemy class we'll call build in a fill rectangle method and it will first draw a black rectangle representing my enemy i pass it this dot x from line 24 this.y this dot with and this load height great we have anime class now we can call it to create enemy object and add it to our game inside add new enemy private method i take this loot enemies from line 9 and i call build in push method push method can be called on arrays and it will take whatever we pass to it and it will push that at the end of the array so i pass it new enemy the new keyword is a special command in javascript it will make javascript look for a class with the name enemy and when it finds it it will take its constructor and use the blueprint inside to create one new blank javascript object and assign it values and properties based on instructions inside the blueprint that new anime object will also automatically have access to update and draw method on anime class when you instantiate object with the javascript it will run its blueprint inside constructor so i will do something which might look a bit strange to you any code put inside the constructor will be executed when you create a new instance of that object with the new keyword so here when i create new instance of my game object i will create enemies array and i will call its private add new enemy method automatically which will push new enemy inside enemies array to check if that really happened i will also console lock this dot enemies to execute all this code here all i need to do is to instantiate my game class so let's do it down here on line 39 i create a new constant variable i call for example game and i set it equal to new game like this doing that created one new blank game object and a train code inside constructor here on line 8 so this console log from line 11 is showing that this dot enemies from line 9 contains one new enemy object perfect you can see that enemy object has x and y width and height as we declared here on line 25. now inside update method on game class i will cycle through all enemy objects inside this dot enemies array and i will call their update method from line 31. i hope you know syntax of for each method i'm simply saying here take this.enemiesarray from line 9 and for each object in this array run their associated update method this is es6 syntax so called arrow function i will also take the same enemies array from line 9 and i will call draw method from line 34 on all these enemy objects currently there is only one inside but there could be many more down here inside my animation loop i take instance of my game class from line 39 i call update method we just wrote and i also call draw method and here we are animating one enemy in our game i hope you can see advantages of code structure like this let's say i also have array of obstacles background layers power ups players and so on i can call all of these from update and draw method on my game class to get everything moving with very little code from a single wrapper function keeping my code clean and organized this way it's a good practice not to use global variables inside our classes so i will take context with and hide and i will put them inside my game class these arguments will be passed here on line 39 when i create an instance of game class so i pass it ctx from line 3 to tell javascript which canvas i want to draw on i will define width of my game by passing it canvas width from line 4 and canvas height from line 5. these three variables just as my game class constructor expects here on line 8. then i take these arguments and convert them into class properties this dot ctx is ctx passed on line 8 this.width is width and this.height is height now i converted public variables into class properties and i can pass them around when i need them by passing game object as an argument i will show you let's say i need width and height of my game inside the enemy class because i want my enemies to appear behind the edges of game area on line 23 when i create new anime object i will pass it this keyword which here refers to the game object we are currently inside that game object will carry all references to its width height and other properties with it let me show you so i'm passing this keyword and inside my anime constructor i will call it game here i created this.game property and i set it to game that was passed as an argument now i have access to game object from inside my anime class i can console log it and you can see all its properties including width and height so now i have access to width of my game from inside enemy class by saying this.game.width the initial starting x horizontal coordinate for enemies will be just behind the right edge of canvas initial starting ycoordinate will be a random number between 0 and this dot game height so in this case between 0 and 800 pixels because height of my game is 800 now whenever i reload page new enemy is generated with random vertical coordinate i achieve that by passing reference to my game class to enemy class constructor online 23 which will take all these properties and values with it i call it game and convert it into class property on my enemy class making them available when i need to position newly created enemies this is one way how you can pass class variables around if you want to avoid using global variables in your projects i don't really want to add just one anime when i create instance of game class i want to create new enemies over and over in a certain interval if i just call this.add new anime from inside update method it will create new anime for every animation frame that is too many and it would freeze my game very quickly i commented out game class is responsible for adding new enemies to the game so i will give it two new properties this dot enemy interval will define number of milliseconds between adding each new enemy into the game let's try 400 milliseconds this dot enemy timer will count milliseconds from 0 to 400 over and over in update method i can say if this dot enemy timer is more than enemy interval call add new enemy private class method also at that point we want to reset enemy timer back to zero so it can start counting again else meaning if enemy timer is less than 400 milliseconds increase enemy timer by one every time we add a new enemy i will counterlog this.enemies array from line 12 just so we can check if it's adding objects or not i decrease enemy interval on line 13. awesome we are adding enemies but you know how we said that each computer could run at a different speed that could mean that enemies are being added faster or slower on some computers i want my game to run at the same speed on every computer and that's why down here on line 56 in animation loop we calculated the delta time time between frames and milliseconds i will use it now i pass delta time to game.update method on line 58. from my previous console log i know my delta time is 16 milliseconds my computer can serve a new frame every 16 milliseconds value of delta time is dependent by the power of your computer but also on your screen refresh rate because request animation frame method adjusts to maximum screen refresh rate if the computer can handle it now i have access to delta time value here in my update method so instead of adding hardcoded value plus 1 i will add value of delta time to my enemy timer on line 13 i set an m interval to 400 milliseconds or maybe 1000 milliseconds here i am increasing enemy timer by 16 milliseconds per frame when we accumulate enough to reach 1000 milliseconds one second we will add new enemy to the game if somebody has a faster computer their delta time will have smaller value on slow computers delta time will have higher value and will be getting near to the target 1000 less often but in larger steps so in the end my code will run at the same or very similar speed on slow and fast computers regardless of their power or monitor refresh rate and this is how you use the delta time to trigger periodic events in your games or animation projects i also need to make sure i'm passing the reference to my canvas properly and not using global variable let's follow the logic we declare ctx here on line 3. i pass that global variable to my game class when i instantiate it on line 52. on line 9 i take that argument and i convert it to class property then i pass ctx from line 9 to draw method on my enemies and on line 47 i need to make sure draw method on enemy class expects that argument and this way line 48 is using this.ctx that was passed around from gameobject rather than using globalctx variable i'm going to log in this.enemiesarray online20 and i can see it keeps growing i need a way to remove enemies that have left the screen we could potentially also use something called object pooling here but i will leave that for another episode first i will need a flag on my enemy objects that will mark them as ready to be deleted and then we will simply filter these objects out i will call that property this dot marked for deletion and i initially set it to false then inside update method on anime class i will check if this dot x is less than zero minus this dot with meaning the enemy has moved across the screen and behind the left edge of canvas if it has i will set its marked for deletion property to true now i can go inside update method on game class and here i will take this.enemiesarray from line 12 which currently has around 20 objects and it keeps growing and i will filter it filter is a built in javascript method that manipulates arrays it simply creates a new array with all elements that pass the test implemented by the provided function so here on line 17 i'm saying take this.enemies from line 17 and reassign it to the same array but only include elements that have this dot marked for deletion property set to false exclamation mark here means false let's run the code and see if it works yeah we stop at 10 enemies and it's not growing anymore because we are removing old ones as we are adding new ones might be one good performance idea here you don't have to check and filter enemies for every frame of animation we could for example do it in a certain interval i could even take this line of code and put it inside this if statement it would still filter old enemies but it would run only periodically whenever i add a new enemy to the game we are making nice progress we have already implemented so many features here between lines 35 and 53 i have my enemy class it's a blueprint with properties and methods that determine what my enemies look like how they move and how they behave let's expand on it and make them more interesting rather than simple black rectangles i will create a socalled sub class or child class by saying class worm extends enemy doing that will make anime a parent class of worm and for example if i call update or draw and javascript can't find that method on my worm class it will automatically go looking for it on the parent class so it will look for that method on anime class same goes for properties declared in constructor if there is no constructor on my worm class it will automatically use the constructor from anime when i do this i can have shared enemy class that declares all logic properties methods and features that all my enemies have in common for example their sprite animation logic collision checks with player and so on while at the same time i can declare child classes where i can override improve and change some of these properties and methods to create unique and very different behaviors for different enemy types and that's exactly what we will do now let me show you how much visual and behavior variety we can create without repeating the code all enemies have in common doing this will keep our code clean and modular and you can go crazy with different enemy types while still keeping your logic organized and easy to read on my worm class i don't have to declare constructor at all and javascript will automatically use constructor from line 36 on enemy class but in most cases you want each enemy to have different width height x and y position and so on so i kind of want to use both i want to take all properties from enemy constructor and i want to add some additional properties on top of it that will be specific only for my worm objects i declare constructor and i know worms will have unique value for image properties so this dot image equals worm this line of code is a weird syntax and i will explain what's going on and how comment works when i bring image to my project this way in a minute let's first finish constructor method on worm class same as on line 36 worm class constructor will expect the game as an argument now i want to say take all the code between lines 37 and 43 on enemy class constructor and use it here to do that we use special super keyword the super keyword is a special command in javascript and it's used to access and call function on an object's parent so here i call super and i pass it game to literally run the constructor on its parent class after that i can add more properties on my worm class constructor like this important thing to note here is that you have to first call super and run parent constructor like this before you declare any additional properties using this keyword otherwise you will get a reference error in derived classes like this super must be called before you can use this keyword so now my worm constructor contains all the code from between lines 37 and 43 and additional distort image property set to worm each enemy type will have different starting x and y coordinates and different width and height so i will actually take all these and put them on my worm i want enemy class constructor to have only properties and values that are shared for all my enemy types up here on line 31 inside private add new anime method rather than instantiating parent anime class i will instantiate child worm class again i'm passing it this as an argument and because we are inside game class this reference is the entire game object so all these properties we travel down to worm class and inside constructor we are taking that game and passing it to super instantiating constructor of its parent anime class which is here anime class also has update and draw methods and when i call update and draw on my worm and javascript can't find it it will automatically go looking for them on the parent anime class i hope it's becoming a little bit more clear how this works and how parent and child classes relate and work together if i run the code we have our worms coming again just to prove that draw method that is called from line 46 is taking properties from worm class constructor let's change this dot with on line 56 as you can see now my worms are 200 pixels wide so what is this weird syntax online 58 this is not how we usually bring images into a project usually i would use getelementbyid to target my image element with an id of worm that i created in index.html in the beginning i wasn't aware of this so all the credit goes to dany who says a little known fact is that any elements created in the dom with an id attribute are automatically added to the javascript execution environment as a global variable this means that you can access any html element with a javascript using its id no need for document.getelementbyid or queryselector i'm just doing this as an experiment and you will see in a minute that it actually works if you're having any issues you can still bring the image into the project the usual way and also ideally pass it to the worm class constructor as an argument so that we are not pulling global variables directly from the outside i'm just experimenting here a bit i really like tips like this thanks danny nowhere in my code have i declared this worm variable the only place you can find this reference is id on line 12 inside index html but this image will still work you can test it by console logging this.image i have too many console.logs let's comment outline 38. yes you can see that the javascript is actually finding the image with an id of worm automatically without us having to use getelementbyid like we usually do so let's use that image and make our worms look a bit better than black rectangles you can download these spreadsheets for free in the description and you can use them to follow along with this video for educational purposes to use them in any commercial project you would have to buy a full license from the artist's website i will link his site as well he has a lot of great game development art assets there check it out i feel like i explained built in canvas draw image method 100 times on this channel this method is so important at first i will just use the version with 5 arguments image we want to draw x y width and height where to draw it on canvas this way we will just squeeze the entire sprite sheet with all its six frames into the predefined area of 200 times 100 pixels notice that i'm calling draw method on my worm class it's using these properties but since javascript can't find draw method on worm it will look for it on parent enemy class and it will use that one let's remove this console.log and this fill rectangle as well i can change width and height but now i would actually like to draw just the first frame from the worm sprite sheet i removed all these lines i commented out earlier i create a new property on worm class called this.sprite width and it will be a width of a single frame in my sprite sheet if i take width of my sprite sheet and divide it by 6 the number of frames i will get 229 pixels height of a single frame is 171 pixels i take width and height and move them up here now i need to use draw method to cut out just single frame from that sprite sheet and place it on canvas for that i will need to give it nine arguments so additional four to tell javascript what area i want to crop out from the source image i need to give it source x source y source width and source height arguments source x and source y will be 0 0 since i'm just cropping out the first frame for now source width and source height will be distort sprite width from line 52 and this dot sprite height from line 53 so to crop out a single frame from an image with draw image method i need to give it nine arguments image i want to draw x y width and height of what area i want to crop out and x y with an height of where on canvas we want to place that cropped out piece of image onto now we are drawing just one frame perfect you probably noticed that it's a bit stretched that's because this width and height which is coming from here has no relation to the actual size of a single frame so the ratio is different let's make width and height the same aspect ratio as our sprite sheet i do that by making width half of sprite width and height will be half of sprite height i need it to do half because the original size would be too large as long as i use the same modifier on both width and height in this case i divide both of them by two it will preserve the aspect ratio of the original sprite frame all my worms are moving to the left by one pixel per frame what if i want each worm to have different speed for example a random value between 0.1 and 0.2 and up here inside update method on enemy class i say this dot x minus equals the slot speed that will be very very slow let's make it faster you might have realized that i'm not using delta time in this movement calculation so let's use it to make sure the worms move at the same speed on all machines i'm calling this update method here on line 25 so i pass it delta time which we made available here before now that i have access to delta time in update method on enemy class i will pass it here as an argument and to factor in time difference between animation frames when moving something around we have to multiply it that way faster refresh rate with lower delta time will move often but by smaller steps slower pcs will have higher delta time they will not draw frames so often but they will have higher delta time so they will make larger steps to compensate for the difference now the base speed is too much so i amend it on line 59 i will actually rename it vx velocity on horizontal xaxis because maybe some other enemies will have a vertical movement also i need to rename it on line 41. if i go up on line 13 and reduce enemy interval to 100 milliseconds we will get a lot of worms and something will become apparent they are layered randomly in order as they are added to the game for example this worm should be probably behind this one and this one behind this one if we pretend this is 3d game space and worms that are higher should be behind worms that are lower it would look better how do we achieve that that index or whether worm is in front or behind at worms depends on order at which they are added to the array on their index in that array because as i push them into enemies array one by one we cycle through them from index 0 to the maximum index in that array and we draw worm with index 0 then worm with index 1 on top of it if they are in the same area then worm with index 2 will be on top of them and so on i want to reorganize my array so that index in the array is tied to their vertical position so that we first draw worms in this area and then we draw the ones in this area on top of them as we go down on the page vertically in plus direction on vertical yaxis that will cause worms to look like they are properly behind each other and not messy like this look at this this is a mess this one is sliding over the other one's eye so every time i push new worm into the array i will just build javascript sort method you can simply just call sort on the array and it will sort them in ascending order by default if you want more control you can give it a callback function sort simply takes every element in the array and it performs a check comparing values between these two elements pushing them up and down in the array depending on the condition in the callback i want worms with lower vertical y coordinates to have lower index so that they are drawn first so my condition will be a dot y minus b dot y like this sort is a built in javascript method it abstracts away the actual algorithm that does the sorting work so let's not spend more time on it now all we need to know for now is how to use it when i run the code you can see that worms that are higher are drawn behind the worms that are lower making it look like they are moving in actual 3d or maybe in two and a half the cartoon space well it doesn't look messy anymore you can swap between ascending and descending order by swapping these values in our case we want a minus b also notice i'm not sorting the array for every animation frame only when i add new enemy into the array so this is our worm class it's a child of anime and it doesn't have update and draw methods because as we said if javascript doesn't find them on the worm class it will go looking for these methods on the parent class but what if i want to use the base code from draw method on enemy class and i want to add some extra code to it to create some additional visuals for example as boris suggested ghosts need to be semitransparent but i don't want reduced opacity on worms only on ghosts so how do we do something like that i'm sure you can come up with some clever if statement but let's keep it clean and use child classes for that i will copy my room class and rename it to ghost image online 74 will be ghost referencing the id here on line 13 in index html i look at my sprite sheet width divided by number of frames so sprite width of single frame is 261 pixels height is 209 pixels in this case horizontal speed modifier will be a little bit higher than worms let's say a random number between 0.1 and 0.3 so that's the base ghost child class how do i randomly push worms or ghosts into my game one way to do that is to create a property on my main game object called distort enemy types it will be an array with two elements for now worm and ghost inside add new anime private method i will randomly pick one of the options in the array i create a constant variable called random anime and i set it equal to this dot anime types and square brackets so if index here is 0 we get worm and if index here is 1 we get ghost how do i randomize this index and let it choose one of these randomly every time we run add new anime method i can just put math at random statement and it will be a random number between zero and length of distilled enemy types array that way i can keep adding more and more enemy types to the array and this code will still work maybe my game will have 20 different enemy types it doesn't matter it will still work the only problem is that math at random returns numbers with decimal points and there is no index 1.5 in this array it's easy to fix i will wrap it inside method floor which will round it down to the closest integer now i can check if random enemy variable is warm we will push new worm into this dot enemies array else if random anime is ghost we will push new ghost perfect so we have this.enemy types array on the main game class this can contain as many enemy types as you want inside add new enemy we randomly choose one of them every time we are about to create new enemy object and based on that random choice we create either worm or ghost so now both worm and ghost are child classes that extend my main enemy class let's switch to kind of flat 2d view i want worms to move only on the ground so i change their vertical y position to this.game.height minus distort height worms are sliding on the floor ghosts are flying in the air i want ghosts to take up only the top 80 percent of the game area not to be so close to the ground their vertical y position will be a random number between 0 and game height times 0.8 or maybe 0.6 yeah since we switched to this new view i don't really need to be sorting my enemies by their vertical position anymore so i comment out this code on line 35. with both worm and ghost we are only modifying properties on the constructor they both inherited the same identical update and draw method from the main enemy class with no modifications at the moment we said we wanted to make the ghost semitransparent so let's do it i declare draw method on ghost class and now two things can happen we can override the draw method with a completely different code here because when we create a new worm javascript will not find the draw method and we'll go looking for it on enemy parent class but with ghost it will find the draw method right here and it will ignore the original draw method on enemy class the second option is that i want the code from draw method on enemy class to run plus i want to write some additional code on top of it that will be unique only for ghosts i can do that by calling super the super keyword here simply represents parent class so imagine i'm saying enemy dot draw because i want to call it's draw method first super.draw means animate.draw basically super represents the super class the parent class so here inside the draw method on ghost class first i call draw method on enemy class and i know it expects ctx as an argument so that it knows what canvas we want to draw on that ctx property is coming from here on line 29 by the way where i'm calling draw on all objects inside this.enemies array i'm calling draw on all ghosts and all worms at the same time so first we call draw method on parent enemy class from 950. we will run all the code in here but we will also add some additional code that will be specific only for ghost objects in this case i will set global alpha property to 0.5 this will set opacity to 50 you can see that it affects all ghosts and all worms as well it's because global alpha canvas property works the same as fill style for example once you set it you are setting it for the entire canvas it will stay that value for everything drawn on the same canvas unless you redeclare it to something else since i want global alpha to only affect ghosts and nothing else on canvas i set it to 0.5 i draw my ghost and i set it back to 1. the alternative way to do this would be to call ctx save builtin method which will take a snapshot of all canvas settings at that point then we can change global alpha and anything else we need to change we draw the ghost and we call ctx restore which will automatically restore canvas properties including global alpha back to what they were at this point when we called safe for the first time this technique is especially useful if i was changing multiple canvas properties at the same time not just global alpha so this is how you extend a method from parent class with a help of super keyword now that we know how to do it we can also extend update method and make ghosts move in wavy patterns let's try i redeclare update method on ghost class and i pass it delta time i call super dot update and i pass the delta time this will run all the code in update method on enemy class from line 46 here i add a new property called this.angle and initially i set it to 0. then in update method i will say this dot y vertical position of my ghosts plus equals mastered sign built in javascript trigonometry function and i pass it this.angle as an argument i covered this in my enemy movement patterns episode as part of the series before so now just quickly moth.sine is a builtin javascript function that returns a sign of a number we pass to it it expects angle value in radians and it will return a value between 1 and plus 1. if you keep calling it and passing it every increase in angle value as we are about to do here it will endlessly cycle by small increments between minus one and plus one creating wavy movement pattern so called sine wave so every time update method runs i will increase this dot angle from line 79 by one that angle value is being passed to math.sine function here at the same time you can see it makes the ghost shake up and down we can also multiply it times a certain radius value this will make the curve larger like this we need to be increasing angle much slower let's try 0.1 per frame 0.05 0.02 you can see how that affects the movement curve i change radius value and angle value let's randomize the wave size for each ghost i create a property i call for example this dot curve it will be random number between 0 and 3. and i use it here now some ghosts move in smaller some in larger waves i reduce the number of enemies by increasing enemy interval on line 13. let's add a new enemy every 500 milliseconds for example so with ghost class we are extending draw method to make it semitransparent and update method to give it wavy vertical movement worm class is just using the base draw and update methods from its parent anime class let's create another child class and let me show you a completely different type of movement for the third enemy type i just copy worm class here so that i don't have to write all of that again i will call it spider i check my sprite sheet sprite width width of a single frame is 310 pixels sprite height is 175 i want spiders to start from just behind the top edge of game area so 0 minus distorted height their horizontal speed will be 0. i only want them to move up and down image will be spider referencing this id from line 14 in index html i give them v y velocity y property and set it to 1. now i create update method i pass it delta time first i call update method from parent anime class from line 46 and then i add some additional code at first let's just increase vertical speed by one on line 15 i add spider to my enemy types and here i say else if random enemy is spider push new spider object into enemies array my spiders are not showing and that's because yes they just move down and their horizontal coordinate is off canvas so we can't see them i set their horizontal coordinate to be a random number between zero and game with nice we have spiders here let's make them move up and down let's say if this dot y is more than 200 pixels from the top revert this v y to a negative number since we are adding this dot v y to vertical position here on line 110 if it becomes a negative number it will make the spider go up awesome we have spiders going up and down what about instead of hardcoding 200 here each spider will have a different maximum movement range this.max length is a random number between 100 and 300 for example actually between 0 and game height might be better now i just replace hardcoded 200 with this.max length here i also want each spider to move up and down at different speed so this dot v y is a random number between 0.1 and 0.2 i should also multiply it times delta time so we get consistency across different machines i want the spiders to swing up and down from a spider web so let's extend draw method as well and draw it first i will call draw method from parent class from line 51. here on line 88 i need to pass ctx as an argument i forgot to do that we don't want to use global variables inside our classes so on line 114 i pass draw method ctx i call draw from its super class from enemy parent online 51 to run all the code in there and also i will draw a spider web here so begin path to start a new shape build in canvas move to method to set starting coordinates of the line let's pass it coordinates 0 0 for now line 2 will be the ending coordinates of my line so this dot x this.y i want it to be where my spider is at the moment i stroke the lines and here they are we have spider webs coming from coordinates 0 0 2 coordinates of my spiders let's change the starting coordinates to be exactly on top of the spider horizontally so this dot x horizontal and 0 vertical this dot x position is top left corner of my enemy rectangle so if i want the web to come from the middle i need to take this dot x position and add half of enemy width to it i also do that for the starting coordinates i can see there is a small vertical gap between spiders and the ends of their webs so let's do this.y plus 10 pixels to make the lines a bit longer notice that i'm not actually animating the sprite sheets we are just showing the first frame for each anime type the best thing about our code structure now is that i can just write sprite animation logic once and it will automatically be applied to all spiders worms and ghosts i go up to line 46 inside constructor on enemy class where i declared properties and values that are shared between all enemy types in my game we will need frame x property which will cycle between 0 and 5 to specify which horizontal frame from the spreadsheet we want to show i also declare this.max frame which could be specific to each enemy but in this case all my enemy spritesheets have 6 frames we count from frame 0 so max frame is 5. i also need to account for delta time when animating frames to make sure it runs at the same speed on slow and fast computers we already done it once today i will have a frame interval variable so let's say 100 milliseconds and then i will have one accumulation variable that will be going from zero accumulating delta time until it reaches my frame interval value i will call it for example this.frame timer i set it to 0 initially i check if this dot frame timer from line 49 is more than frame interval from 948 if it is i do something else i increase frame time variable by delta time now i just realized we need access to delta time here so all this code actually needs to be inside update method here now i can say frame timer plus equals delta time remember that delta time is milliseconds between frames so fast computers will surf frames of our game animation very fast but will have smaller delta time on the other hand slow computers can't surf frames so often but their delta time is larger so as a result it evens out and both fast and slow computers will reach frame interval of 100 milliseconds at the same time this will ensure all the movement and animation in our games has the same timing regardless of speed of the machine we run the code on frame timer will start at zero it will be increasing by delta time and when it reaches frame interval we can move to the next frame in sprite sheet i have to check if current frame x from line 46 is less than max frame from line 47. if it is slice we increase frame x by 1. else we set frame x back to 0. at the same time i set frame timer back to 0 so it can start accumulating delta time again on line 46 i set frame x initially to 0. now i'm cycling between frame x 0 and frame x 5. to actually display that in game i have to replace hardcoded source x and source y properties in draw image method which i set to 0 0. i have to replace them with my new variables source y can actually stay hard coded to zero because our sprite sheet has only one row there will be no vertical navigation within this sprite sheet source x argument will be frame x from line 47 times sprite width from line 70. that way when frame x is 1 we cut out this frame frame x2 is this frame and so on i have entire episode on this uh as part of this series if you want more details about how to animate sprites properly and in that episode i also show alternative techniques how to do this i can also add more functionality here in update method on enemy class and it will be shared across all my enemy types it could be for example collagen checks with player some javascript generated sounds enemies can have particle effects and so on being able to write code here in one place and share it for all my enemy subclasses will save a lot of code repetition that would happen otherwise on line 53 i'm checking if enemies have moved behind the left edge of screen and i'm marking them for deletion this check works for both ghosts and worms as they move from right to left the problem is that spiders never move past that point they have no horizontal movement so as you can see in the console if i let my game run it will just keep accumulating more and more spiders i need a different check here to mark spiders as ready to be deleted i go inside update method on spider class and i say if this dot y is less than 0 minus this dot height times 2 then mark it as ready for deletion spiders start at 0 minus distant height as declared here on line 114 they will move down and then they will move back up when they reach point 0 minus this dot height times 2 we delete them i will be extending classes a lot in my games so i hope you learned something new today creating child classes is not only useful for animations and game development but it's a very important javascript technique with many different applications across all front and web development i think sometimes it's better to learn these concepts on fun projects like this to learn more fundamental javascript techniques on creative coding projects check out related videos in the video description great job on completing today's course say hi in the comments hey coders so i heard you like making games me too i think projects like this are great not only for aspiring game developers but also to learn and improve html css and javascript skills in this class we will build easy animated side squirrel game completely from scratch with plain vanilla javascript no frameworks and no libraries the main goal today is to learn about basic code structure how to split responsibilities between objects that make up our game how to make them communicate with each other effectively and how to put all of that together in an easy to understand way this class is a part of a longer series in each episode we built a small standalone project for beginners to learn about fundamental building blocks of game development with the javascript full series is linked in the description in this part we will build a simple version of the game to learn the fundamentals in the next part we will expand on each element using the things we learned across the series let's see how it all comes together games should be exciting full of secrets and special features i hope this series helps you to bring your creative ideas to life we will work with three files in index.html i link my css stylesheet and javascript file i create html5 canvas element with an id of canvas 1 and i put all my game assets here in this area so that we can use load event listener to wait for these assets to be fully loaded and available before we run the game art assets were provided by this talented artist you can find more on their website i will have player image background image and anime image here you can download project files in the video description install css i give my body black background i make canvas blue and i position it in the middle of my web page i also want to hide my image elements because we will draw them with javascript on canvas so player image display none same goes for background image and enemy image i want javascript to wait until all images are fully loaded so i will wrap my game inside an event listener we will listen for load event load event waits for all assets such as sprite sheets and images to be fully loaded before it executes code in its callback function i will place the entire code of our game inside this anonymous callback function in javascript anonymous function usually means a function without a name by placing all my code inside this anonymous callback function i separate scope of my game from a global scope to make sure my custom class and variable names don't clash with any other outside code when all the assets are fully loaded the code inside will be executed line by line i assign variable to my canvas element i create context instance of builtin canvas 2d api that holds all drawing methods and properties we will need to animate our game i set canvas width to 800 pixels and canvas height to 720 pixels i make canvas transparent in this class i want to make it very clear how we split responsibilities between objects and how these objects interact with each other to create a complete game so let's just write all the building blocks we will need today our game will need input handler class which will apply event listeners to keyboard events and it will hold an array of all currently active keys player class will react to these keys as they are being pressed drawing and updating the player i will have a simple separate class that will handle endlessly scrolling backgrounds we will also need a class that will generate enemies for us we will have multiple active enemies in our game so i will have a function called handle enemies that will be responsible for adding animating and removing enemies from the game i will have a utility function i call for example display status text which will handle things like displaying score or game over message and lastly we will have main animation loop this function will run 60 times per second updating and drawing our game over and over so that's it here we can see all the building blocks we need to create a complete game i could have wrapped everything in a main game class for example but i'm trying to keep it clean and simple today input handler class will apply event listeners to the game and it will keep track of all keys that are currently pressed down inside constructor i created this dot keys property and i set it equal to an empty array the way i want to handle controls today will be a bit different from my previous courses i want to have an array and i will be adding and removing keys from it as they are being pressed and released that way i can keep track of multiple key presses i will place event listener directly inside the constructor when we create an instance of a class all the code inside constructor is executed because of that just by simply creating an instance of input handler class later all event listeners will be automatically applied i will have event listener for key down event callback function on event listener has access to this built in event object i will assign it a variable name for example e and i console log it now i create an instance of input handler class which will run all the code inside constructor so at this point the event listener is applied let's test it when i click my canvas and i press key on keyboard i can see this event object here it contains all different details about keyboard event that just occurred what i care about today is this key property it contains a string that represents name of key that was pressed so to get that value directly i say e dot key now i'm getting those values as console logs i care only about arrow keys right now so i say if e dot key is arrow down take this dot keys array from line 9 and push that value inside i move this console log here and i will also console log this.keys we will get an error this dot keys is undefined javascript cannot find it it's because i'm instantiating input here and the event listener is called from window object by the time that event listener is called javascript forgot that this keyword refers to this input handler object and it's this.key's property to make sure this keyword points to the correct object i can use javascriptbind method or i can use es6ro function arrow functions don't bind their own disks but they inherit the one from their parent scope this is called lexical scoping doing that will make sure javascript doesn't forget which object this keyword stands for and it will work you can see pressing arrow down adds an entry into this dot keys array i don't want to have multiple entries for each key here we can see it added arrow down 4 times i only want to add it if that specific key is not in the array yet so i do second condition here and i say if this dot key's index of e dot key key that was pressed is equal to 1 with arrays if index off is equal to 1 it means that element is not present in the array so i'm saying if key that was pressed is arrow down and if that key is not yet inside this dot keys array only then push it into the array now you can see that when i press arrow down multiple times it adds it to the array only once perfect i copy this code block and i turn it into key up event if key that was released is arrow down i want to remove it from this dot keys array so i call splice that takes two arguments index of element we want to remove and how many elements starting from that index we want to remove so i find index of arrow down inside this dot keys array by using index of method again and second argument to splice i want to remove one element at this index so here i'm saying when we release a key if that key is arrowed down find index of that key inside this dot keys array and use splice to remove one element from that array now when i press down arrow key it's added to the array when i release it it's removed from the array nice let's also listen for other keys using or operator i start with arrow up then we also need to listen for key down on arrow left and arrow right i'm gonna break this down on individual lines for clarity and i use tab key to make them vertically aligned be careful here not to forget a bracket otherwise the code will break i will also listen for the same four keys inside key up event so we have this dot keys array here in key down if arrow down up left or right is pressed and that key is not yet present in this dot keys array we push it into the array in key up when any of these four arrows are released we find index of that key inside this dot keys array and we use splice method to remove it this dot keys array now holds information about which arrow keys are currently pressed down sometimes it could be multiple ones at the same time i remove these console logs by instantiating input handler class here on line 50 all the code inside constructor on line 8 will be executed we have this.keys property as an empty array and we use keydown and keyup event listeners to add and remove specific keyboard inputs from that array and now we know how to handle keyboard inputs in a game we will use them to move player around in the next part player class will define properties of player object it will draw it animate it and update its position based on user input player object needs to be aware of game boundaries we don't want it to run off screen so i pass it game with and game height as arguments and i convert them into class properties like this i'm using sprite sheet of specific size here we have frames of width and height of 200 pixels it's a good practice to size your sprite sheets to the actual size you will use in your game i can also resize them with code but it's cleaner to have art assets of the right size this.x will be 0 and this.y will be 0 at first player object will have public draw method it will expect context as an argument to specify which canvas we want to draw on in case we want multiple layers and multiple canvases in our game i will start by calling build in fill rectangle method to draw a rectangle to represent our player i pass it x y width and height since i have black background i set fill style to white so that we can see the rectangle on line 62 i create an instance of player class using the new keyword here on line 31 i can see player class constructor expects game width and game height as arguments so i pass it canvas width from line 4 and canvas height from line 5. i get an error game with is not defined it's because i made a typo here on line 32 now it works and i can display our player by calling its public draw method we just wrote it expects context as an argument so i pass it ctx from line three i can move player around by adjusting its x and y coordinates let's make it stand on the bottom of game area so this dot game height minus this dot height we will also need update method to move player around let's start by increasing player's horizontal xcoordinate by 1 for every call of update method if i call update method just like this there won't be any visible movement i put it inside animation loop and i use request animation frame built in method to make it loop i pass it animate the name of its parent function to create endless animation loop and i call animate like this to start it i also need to put draw inside i delete this we can see trail behind player rectangle i want to only see the current animation frame to delete old paint from canvas i use builtin clear rectangle method it will delete entire canvas between each animation loop perfect now we have player moving from left to right as we defined in its update method instead of drawing a white rectangle let's draw a player image i call build in draw image method i need to bring player sprite sheet into the project so this dot image property is a document dot get element by id and i give it id of player image i pass this.image from line 38 to draw method and i pass it x and y of 0 0 so top left corner of canvas it will just draw the entire sprite sheet at these coordinates i pass it this this.x and this.y instead you can see it just draws the entire large sprite sheet with all the frames draw image method can accept optional fourth and fifth arguments for width and height it will then stretch or shrink the image to fill all available area like this i actually just want to draw one frame so i pass it another four optional arguments source x source y source width and source height this defined rectangle we want to crop out from the source sprite sheet and the destination x destination y destination width and destination height define where on destination canvas we want to place that cropped out rectangle onto i pass it 0 0 as source x source y and we are cropping to this dot with this dot height so this area now we can see top left frame in the sprite sheet i can use source x and source y to jump around the sprite sheet by changing value of source y we can jump between different rows by changing the value we pass as source x we are navigating within the sprite sheet horizontally let's just turn these values into class properties called for example frame x and frame y i replace them here and now we can navigate around sprite sheet by changing values of these properties perfect i commented this line out the movement will work this way we will have this dot speed property initially i set it to zero we will be adding this dot speed to this dot x at all times when it's zero there will be no movement when this dot speed is a positive number player will move to the right when it's a negative number player will move to the left on the negative direction on horizontal xaxis now we can connect keyboard inputs to player movement update method will expect input as an argument i take input from line 69 and i pass it to playerupdate method here we are interested in this.key's property from line 9 which holds all currently active keys we can access that property from input argument we are receiving here so this section will deal with horizontal movement if input dot keys contains arrow up so if index of arrow up is more than 1 run the following code actually let's start with arrow right and set this dot speed from line 41 to 5. when arrow write is found in this array from line 9 set player speed to 5. it will make player 2 move to the right but there is nothing to set speed back to zero so it never stops moving i create an else statement here and inside i set player speed back to zero now player moves to the right only when i hold down right arrow key nice i do else if statement here be careful about the brackets it's easy to get it wrong and get an error here else if arrow left is pressed set player speed to 5 now i can move player left and right player can easily move off screen if we hold the arrow for too long let's introduce some horizontal boundaries if horizontal x coordinate is less than zero set it back to zero now we can't move past the left edge of game area else if player's horizontal coordinate is more than game with minus player's width meaning right edge of player rectangle is touching the right edge of canvas area also don't allow it to move past this point perfect jumping is a bit more complicated but it's not that hard i say if arrow up key was pressed set velocity y property to 30 i set velocity y property on player object and initially i set it to zero let's just move this around so that i have controls in one place horizontal movement separate and i create a section for vertical movement actually this line also belongs under horizontal movement here at all times i will be adding velocity y property from line 42 to player's vertical coordinate from line 37 initially velocity y is set to zero so we will get no vertical movement when i press up arrow key velocity y is set to 30 and player just flies off screen i need a force that will push in the opposite direction i can call it gravity or maybe weight i set it to 0 at first i need a check to see if player is in the air or standing on ground i will need that check in multiple places so i might as well make it into a utility method like this i call it for example on ground and it will return true or false based on how this statement evaluates if this.y is more or equal to game height minus player height we know player is standing on solid ground here in vertical movement section i say if on ground is false meaning if player is currently in the air take velocity y and start gradually increasing it by distort weight from line 43 i set this.weight to 1 we jump and eventually player falls back down size of the jump depends on how long you hold up arrow key we don't want it to work like that let's fix it when we press up arrow key i set velocity y to minus 10 so we can see it better i create an else statement here and inside we set velocity y back to zero so if player is in the air gradually add more and more weight to velocity y else if player is back on ground reset velocity y back to zero to stop vertical movement if i jump too high player partially falls through the floor before velocity y is reset back to 0. to prevent this from happening let's introduce a vertical boundary on the ground level if player's ycoordinate is more than game height minus player's height i set it the game height minus player's hide player can never be below this point that works the height of jump is still dependent on how long i hold up arrow key because each tick adds another 10 to velocity y also if i press up arrow over and over player will keep jumping higher and higher we only want player to be able to jump when it's standing on solid ground here on line 55 i say if up arrow is pressed and if player is on ground only then decrease velocity y by 10 now we can't double jump anymore let's do 30 for a bigger jump maybe minus 32 so jumping works like this velocity y is 0. when we press up arrow key velocity is immediately set to 32 this statement on line 66 becomes true and weight of 1 is being added over and over to velocity y that will make velocity y go from 32 to 0 and then back to positive numbers so player will go up it will gradually slow down stop and it will start falling back down again as the value of velocity y goes from negative into positive numbers when we hit the floor again line 69 will set velocity back to 0 and the jump is complete when we jump we want to animate a different row of sprite sheet i want this jumping animation so i set this dot frame y to 1. when we land back on ground i set frame y to zero endlessly scrolling backgrounds are very easy to implement i made a special episode about different techniques i like to use and how to split it into individual layers for parallax effect today we will just do a single endlessly scrolling layer constructor will expect the game width and game height and i convert these arguments into class properties this dot image will be my background image i gave it an id of background image spelled like this this dot x will be 0 this dot y will be 0 i check my image and i can see its width is 2 400 pixels height is 720 pixels draw method will take context as an argument to specify which canvas we want to draw on i call built in draw image method and i want to draw this dot image from line 84. i pass it x and y on line 109 i instantiate my background class by calling the new keyword i pass it game dimensions so canvas width and canvas height inside animation loop i call background dota draw draw method from line 90 and i pass it ctx as an argument we are drawing everything on a single canvas element so i need to draw background first before i draw the player so that the player is visible now i want to make the background animate to the left first i pass it width and height here even though i didn't have to do it since my art assets are already correct final sizes there is no need for resizing them with code custom update method i create a property i call speed and i set it to 20. horizontal coordinate of the background will be minus equals 20 pixels per frame this will make it scroll to the left inside animation loop i call background update and it just scrolls off screen in update method i create a reset check i say if this dot x is less than 0 minus this.width from line 87 meaning if background scrolled all the way off screen set its horizontal x position back to zero to create an illusion of endlessly scrolling background we need to use a trick here i will be drawing the same image twice i will position the second image to the right next to the first one by setting its horizontal x coordinate to this dot x plus this dot width now it looks like it's just one single and less seamless image if i put a gap of 50 pixels you will see where the first image ends and the second image starts i remove the gap we never actually see the full size of the second image they are both scrolling at the same speed and when we get to this point the image on the right just fills the gap before the first image can reset and start scrolling again this happens very fast so it creates an illusion of endlessly scrolling seamless image i go much deeper on this topic in a special episode for now this is all we need to know here sometimes you can still see a small gap where the first image ends and the second one begins you can easily fix it by accounting for scrolling speed when setting horizontal position of the second image i will comment out line 120 for now so the movement doesn't distract us you can do the same or keep it going it's up to you in our game player needs to avoid dangerous enemies by jumping over them enemy class will serve as a blueprint to create a single enemy object constructor will expect game width and game height as arguments because enemies need to be aware of game area boundaries i check my sprite sheet and width of single frame is pixels height is 119 pixels this dot image will point towards image element with an id of enemy image draw method will expect context as an argument we call built in draw image method i pass it this dot image from line 107. i will also need this.x and this.y properties on my enemy i pass them to draw method here i create an instance of anime class using the new keyword i pass it canvas width and canvas height i call enemy1 draw from inside animation loop and i pass it cdx now we can see what we are doing so back inside the draw image method on anime class i pass it width and height i also need to pass it source x source y source width and source height like we did with player because we want to crop out single frame from the sprite sheet source x will be number zero times this dot width source y could be zero times this.height but since this sprite sheet has only one row there will be no vertical navigation so source y value can stay hard coded to zero i create frame x for horizontal navigation in sprite sheet and i replace it here inside the draw image method vertical coordinate of the enemy will be game height minus height of the enemy and horizontal position is game width so that it's hidden just behind the right edge of canvas i create an update method and inside we will just decrease x by one per frame to make enemy move to the left i call enemy 1 update from inside animation loop and we are animating one enemy created with our enemy class i don't want to just have one enemy i want to have multiple active enemies on the screen at the same time up here on line 6 i create a led variable i call for example enemies and i set it to an empty array i delete these two lines of code from inside animation loop we will draw and update our enemies from inside handle enemies function on line 121 handle enemies function will also be periodically adding new enemies to the game so i take enemies array from line 6 and i call push on it we will push instance of enemy class so new enemy like this i know i have to pass it game with and game height so i pass it canvas width and canvas height here then i want to call draw method and update method from line 116 for each enemy object in the array so enemies for each i call individual object in that array for example anime and i use arrow function syntax here for each enemy object inside enemies array call their draw method i pass it ctx and also call their update method i will be calling handle enemies function for every animation frame so i can't just leave this line of code here like this i don't want to push 60 enemies per second into our game i take this line outside temporarily so it will just run once on the initial page load so it will add just one enemy to the array at first i call handle enemies from inside animation loop here on line 143 perfect everything still works let's say i want to add new anime into the array every two seconds how do i do that we can use timestamps and delta time i create a helper variable called last time which will hold the value of timestamp from the previous animation frame inside animation loop i create a constant called delta time delta time is the difference in milliseconds between timestamp from this loop and timestamp from the previous loop the value of delta time tells us how many milliseconds our computer needs to serve one animation frame usually if we are running at 60 frames per second delta time is around 16 milliseconds so delta time is timestamp from this loop minus timestamp from the previous loop this time stem value is autogenerated here request animation frame has a special feature it automatically generates a timestamp and passes it as an argument to the function it calls so because animate is being called over and over by request animation frame here it receives timestamp values as argument each time it's called the first initial call of animate here on line 149 doesn't have autogenerated timestamp because it's not being called by request animation frame so i have to pass it something here i pass it zero when i calculated delta time difference in milliseconds between timestamp from this loop and timestamp from the previous loop i set last time to timestamp so that it can be used in the next loop as the value for timestamp from the previous loop our animation loop is created by request animation frame it automatically adjusts the screen refresh rate so most screens will run at 60 frames per second which means if i control delta time i should get 1000 milliseconds divided by 60 frames per second my delta time should be around 16.6 milliseconds if you get a different number here let me know i wonder if we all get the same value now that we have delta time we can use it to time different things around our code base we will use it to trigger periodic events i pass delta time to handle enemies i comment this out i make sure handle enemies expects delta time value to time something periodically with delta time i need two helper variables enemy timer which will be counting milliseconds from 0 to a certain limit and every time it reaches that limit it will trigger something and reset itself back to zero we will need enemy interval which will be a value in milliseconds for that time limit i want to add new enemy in the game every thousand milliseconds every time timer reaches 1000 in handle enemies i say if enemy timer from line 140 is more than enemy interval from line 141 push new enemy into enemies array then reset enemy timer back to 0 so we can count again else just keep adding delta time to our enemy timer until the limit defined in enemy interval is reached using delta time like this will make sure our events are timed the same on slow and fast computers because faster computer will have lower delta time so it will take more loops to accumulate enough in its timer that way fast and slow computer will reach the limit at the same time i explain this in more detail in a special class i can also set enemy interval to 2000 milliseconds 2 seconds i create this dot speed property on enemy class i could give each enemy randomized speed here using math at random i will give all of them the same speed of 8 and here i say this.x minus equals this.speed you can see enemies come in a set interval of 2 seconds very predictable maybe i want to randomize that interval a little bit i can for example create a variable called a random enemy interval and i set it to a random number between 500 and 1500 milliseconds i change enemy interval to thousand whenever enemy timer reaches enemy interval plus random enemy interval i push new enemy and i set random enemy interval from line 147 to a different value i could have also randomly set some enemies further along xaxis to get the same result now enemies are coming in more random less predictable intervals inside the draw method on player class i can remove the white rectangle behind the player i pause the background again by commenting out line 154. we are displaying just the first frame in player and enemy sprite sheets let's actually animate those sprite frames the sprite sheets we are using are optimized for speed between 15 to 20 frames per second so i would like to be able to set fps frames per second for sprite frame animation while still allowing the rest of our game things like player position and background scrolling to update 60 times per second how do we do it with delta time i'm passing delta time to handle enemies here on line 157 i pass it along to enemy update method and i make sure update method on anime class expects that value update method is being called from inside animate 60 times per second inside update method here i will use the delta time to keep track of how many milliseconds passed between individual calls and only when the right threshold is reached i will swap frames in the sprite sheet to animate sprite sheets horizontally i will cycle between frame x of 0 and max frame which in case of enemy sprite sheet is 5. to time frame rate with delta time i will need 3 helper properties this dot fbs to set frames per second let's do 20. keep in mind this fps will affect horizontal navigation within enemy sprite sheet how fast we swap between individual animation frames nothing else will be affected i want the rest of the game to run at 60 frames per second i could use this technique to slow the entire game down to 20 frames per second but then player controls wouldn't feel very responsive we would get delays in collision detection displayed text and so on i want to slow down only animation of enemy sprite sheet nothing else i will also need frame timer which will count from 0 to frame interval over and over and frame interval will define that value we are counting towards it's a value of how many milliseconds each frame lasts so thousand milliseconds divided by 20 frames per second in this case first let's cycle between frames at full speed so if this dot frame x from line 111 is more than max frame set frame x back to zero else increase frame x by one i have to do more or equal here so we don't get empty frame because of this source x attribute we are pass into draw image method on line 119 cycling between 0 and 5 with the frame x variable will animate sprite sheet horizontally now you can see anime sprite sheet is animating but it's very fast these particular sprite sheets were designed for lower frame rate we defined fps of 20 on line 113 here i say if this.frame timer from line 114 is more than frame interval from line 115 only then run this code that manages frame x cycles at the same time reset frame timer back to zero so it can count again else just keep adding delta time to frame timer until the threshold of milliseconds defined in frame interval is reached now you can see enemy sprite sheet is swapping between frames slower at 20 frames per second while enemy movement is still at original 60 frames per second inside update method on player class i will do exactly the same thing first i say if frame x from line 40 is more than max frame which i need to define here we will start with this row and there we have eight horizontal frames counting from zero if frame x is more or equal to max frame set frame x back to zero else increase frame x by 1. run an animation on player is animated i go down here to anime class and i copy fps frame timer and frame interval properties and i paste them here on our player class inside update method here we are dealing with sprite animation here are controls yes so if frame timer from line 44 is more than frame interval run all this sprite animation code and reset frame timer back to zero else keep increasing frame timer by delta time update method doesn't have access to delta time so i make sure it takes it as an argument when we call it here on line 181 up here i make sure update method expects that argument now player sprite sheet is animating at 20 frames per second when i jump we get blink in because max frame is set to 8 on line 41 and jump row doesn't have that many frames so we are including empty frames we have only two player states basically jumping and running on ground so dealing with that is easy down here we deal with vertical movement when we are not on ground we set max frame to 5 for jumping animation else meaning we are on ground set max frame to 8 for running animation on line 151 we are adding new anime to our game in a randomized interval when i console look enemies array i can see it's endlessly growing and adding more and more enemies i actually want to remove enemies that moved offscreen from enemies array on enemy class i create a property i call marked for deletion and i initially set it to false in update method i say if horizontal xcoordinate on nma is less than 0 minus enemy width meaning if it has moved past the left edge of game area set marked for deletion to true inside handle enemies i say take enemies array which we defined earlier as a let variable and reassign it to the same array but filter that array first and only include elements that have marked for deletion property set to false filter is a built in array method which creates a new array with all elements that pass the test implemented by the provided function in our case all our elements are tested and checked if their marked for deletion property is false now you can see in console we have between one and two enemies in the array at any given time older enemies are being removed i want to display score on line 7 i define a led variable called score and i initially set it to 0. on line 168 we have display status text function i will use it to display current score i pass it context as an argument to specify which canvas we want to draw on i set fill style to black color i set canvas font to 40 pixels helvetica fill text built in canvas method will actually draw the text it expects text we want to draw and x and y were to draw it i want the text to say score colon space plus value of score variable from line 7 x coordinate 20 ycoordinate 50. i call this new function from inside animation loop and i pass it ctx inside update method on anime class i will count score every time enemy moves off screen assuming player successfully avoided colliding with that enemy and i increment score by one that works nice i want to highlight the font i can give it canvas shadow but for some reason in firefox built in canvas shadow property causes lock and frame rate drops so i will do a trick here i will draw the same message twice one black one white the top one will have two pixels offset so i kind of created my own shadow manually let's check for collisions between player and enemies first we need to decide on the right technique to use here the easiest ones are collision between rectangles and collision between circles where we give elements like player and anime hitboxes shaped as rectangles or circles we could also do more complex and more precise collision checks here such as collision check between polygons called separating axis theorem or we can base collisions on color or opacity our stroke rectangle around our enemies so we can see basic collision hitbox let's make it white i do the same for player you can see the rectangles now if i use collision detection between rectangles and i keep those hitboxes at their base sizes whenever these two rectangles touch or intersect we will get collision between player and enemy i tried to apply it before and i played with it and sometimes we get really unfortunate collisions like on this screenshot where my player is landing from a jump duck and worm images are clearly far away from each other but you can see that the corners intersect and we got game over i asked you in my community tab how you would approach this challenge we spoke about the different options we have here some of you suggested separating access theorem for collision between polygons some of you think that we could use a set of smaller rectangles that match shapes of player and enemy sprites more closely than one larger shape some of you think that simple collision detection between circles would be enough in this scenario let's try to draw circular hitboxes around our objects to see what it would look like it's also easy to offset these circles by a specific pixel value horizontally or vertically in relation to player and enemy object we can also make them smaller or larger if needed i agree with you and i think that using circular collision detection for jumping game like this will get rid of accidental collisions where two corners of rectangles collide now i need to decide where in our codebase we will run collision checks i know i need to check position of player against position of all active enemies for each animation frame so i might as well do it inside playerupdate method i pass it enemies array as an argument it contains all currently active enemy objects on line 59 inside update method on player class i make sure update method expects that argument we will calculate collision detection here we need to run it against every enemy object in enemies array so enemies we passed as an argument for each and then i do collision detection calculation between player circle hitbox and enemy circle hitbox to do that we need to calculate the distance between the center points of these two circles and we compare that distance with radius of circle 1 and radius of circle two if the distance is less than these two radii added together we know we have a collision to get distance between two points two center points we use pythagoras theorem formula we have a center point of player circle and center point of enemy circle we calculate distance on horizontal xaxis dx we calculate the distance on vertical yaxis d y it gives us imaginary right triangle and we know hypotenuse of this triangle is the distance between these two points we calculate it as square root of dx squared plus d y squared if distance between center point of player circle and center point of enemy circle is less than radius of enemy circle plus radius of player circle we have collision and we set game over to true upon line 8 i create a led variable called game over and i set it to false at first i want the game to pause when game over is true so inside animation loop i say only run request animation frame and continue animating our game if game over is false you can see that when collision is detected game stops perfect i also want to display game over message so inside the display status text function i say if game over is true set text align to center fill style to block fill text game over try again and coordinates canvas width divided by 2 and 50 200 make a copy again set fill style to white and offset the second line by 2 pixels i need to fix our collision detection we are using enemy x and enemy y coordinates as center points of collision circle which means collision area on each enemy is this blue circle and same with the player since player x and player y is at the top left corner of rectangle area from which player image is drawn i can't set it as center point of collision circle because i did do that we are not checking for collisions between white circles we are actually checking for collisions between the blue circles i just drew the fix is simple dx distance on the horizontal xaxis between two center points needs to be offset by half of enemy width and half of player width to move these center points from top left corner to the middle of rectangle area same goes for vertical dui check brackets are very important here now after this fix collisions are correctly being detected between white circle areas around player and enemies i can offset these circles by specific amount to move them around i can make them smaller or larger we will expand on this in the next episode in this class we will learn how to use native javascript full screen functionality how to add touch support to our games and how to measure length and direction of swipes so that we can attach specific events to them full series linked in the video description let's make a mobile game with html css and javascript let's go this is the game we built in the previous lesson i will be using google chrome browser as usual and if i right click to inspect the page we have this small mobile device icon here this tool is great for designing responsive websites keep in mind this is just an estimate there might be some differences when you run the same code on the actual device this simulator is not 100 accurate as you can see canvas doesn't even fit mobile screen on landscape currently this project is not mobile friendly at all it's actually very easy to fix this i can click this icon to toggle between landscape and portrait view i can choose different devices from this drop down so the first thing i want to do is to make sure we can see the entire canvas at all times on mobile i will do it with css i give canvas max width property of 100 we are missing left border here let's reset all default margins and paddings and set box size into borderbox to make sure elements border is included in its total width modern css makes life so much easier so now in portrait mode you can set canvas to any width and it will always scale up or down to make sure we can see all of it i switch to landscape and we have the same problem how do we solve this this is actually also very easy barely an inconvenience i give canvas max height 100 now canvas will scale until it hits edges of screen vertically or horizontally depending on aspect ratio whichever boundary it hits first look what happens when i make canvas wider it still works i can switch devices toggle between landscape and portrait we can see all of canvas at all times perfect there is also a way to make canvas fit the entire screen with no black edges but because of the scrolling background we are using here i would have to calculate aspect ratio i want to keep this class beginner friendly with no algorithms so i will get back to that in more advanced tutorial now you know a quick and easy way to make canvas fit on mobile screen without stretching and distortion the only way to restart game right now is to refresh browse window let's write an actual restart game function so that we can connect it to buttons or keypresses or touch events we have to think what needs to happen when game restarts well first we need to restart the player to its initial position i will actually do it as a method on player class i will call it restart and inside we set x and y to the original values let's move player 100 pixels to the right here and here that's better after we start i want player in running animation so max frame will be 8 and frame y is 0. down on line 200 inside our custom restart game function i take instance of player class from line 205 and i call restart method we just wrote i don't really have to restart background or maybe i will just restart its exposition back to 0 so that we get some more visual feedback that we are actually starting a new game again i take an instance of background class from line 210 and i call restart method we just wrote the last thing i need to do when game restarts is to take enemies array score and game over and send them back to their initial values notice i'm removing led keywords because i'm not declaring new variables i'm just assigning new values to existing variables where do we call this restart game function from here inside event listener inside key down event we listen for arrows and we push them into this dot keys array i will create an else statement and if key that was pressed is enter and at the same time game over from line 8 is true we call the new restart game function we just wrote it's still not working and it's because when game over is true i stop calling request animation frame here since we are setting game over back to its initial false value i can call animate again the start new animation loop like this so we are playing game is running i get game over i press enter and reset function resets our game awesome we are doing great so far i should tell the user to press enter otherwise how would they know you can see after game reset score is off screen it's because it's taking this text align center we used for game over message i need to set text align to left here and the message will be something like game over press enter to restart this works ok touch events this will be fun first i remove this console log from line 175 up here inside input handler class we will create a new event listener for touch start event it will run whenever user touches browser window when that happens i console lock something i will actually also need touch move and touch end events i'm gonna console start in touch start moving in touch move and end in touch end the way these work touch start fires once as we start interacting with screen then touch move fires over and over as long as we are moving finger over the screen and touch end just fires once when user releases the touch this is important to remember as we have to consider these when we are structuring our code code in touch start and touch end will run once and the code in touch move will run over and over as long as the event is firing this is actually very useful and we can use touch start to set something up touch move to make calculations such as direction and time of the event and in touch end we do some cleanup and discard or reset values we don't need anymore there is no swipe up and swipe down event so let me show you how you can easily use these three touch events combined to determine direction of swipe let's have a look at auto generated touch start event object by console login e when i touch screen this event fires and i can inspect it there are many useful values here for example it keeps track whether alt and control keys were pressed at the time of the event we have timestamp of the touch here very useful and the main thing we care about is x and y coordinates of the touch x and y coordinates of touch event are stored inside this readonly changed touches property it's a list that stores autogenerated touch objects that contributed to this touch event with touch start event we get just one object so we have to open index 0 and here we can see page x and page y properties perfect we know where on screen this touch event started if i console touch move and i swipe across my screen you can see that event fires many times let's go to one of the ones at the start if i check inside change touches list at index 0 i can see page y is 71 as i was swiping the event was firing so let's go to the last time it fired and here i see page y is 104. i know this particular swipe went vertically from coordinate 71 to coordinate 104. we have all these values we need to determine whether user swiped up or down i put this console lock into touch start event and i remove all other console logs to access vertical coordinate of touch event i say e dot changed touches index 0 because this is a list and i want this page y property okay let's put that inside touch move and touch end i create a new property on input handler class i call it for example touch y it will store the initial start in vertical coordinate maybe i also want the game to only react to longer swipes to make sure user actually swipes and the game doesn't accidentally react to the simple short tabs i will call this property touch threshold and i set it for example to 30. i wanted the starting touch point and the ending touch point to be at least 30 pixels apart to trigger the event i could also make the player jump higher here based on how long the swipe is this technique is easy and very powerful if you are designing mobile games i hope you are realizing the potential here in touch start event i just want to set starting coordinate so this dot touch y from line 13 is equal to page y value from this event let's delete all these inside touch move i will compare current coordinate and starting coordinate to determine direction so let's have a temporary helper variable called for example swipe distance and set it to page y value of this tick of touch move event minus the initial start in vertical coordinate so minus this dot touch y from line 13. keep in mind that touch move fires over and over again as long as user is swiping i need more space here if swipe distance is less than minus this dot touch threshold from 914 so minus 30 we are swiping up so this dot keys push swipe up this might be a little bit difficult to visualize for some of us so here's some animation if it helps at the same time i want to check if swipe up is not yet in the keys array so this is the distance between current vertical coordinate and start in y coordinate if this swipe distance is less than 30 and swipe up is not yet in keys array push swipe up into keys array else if swipe distance is more than this dot touch threshold so plus 30 push swipe down into this dot keys array also here i need to check that swipe down is not yet in the array before i push it in there i don't want duplicates of the same value in touch end i just can't lock this dot keys i can see we are getting many duplicates in the array so something must be wrong here i zoom out a bit so i can see the whole thing on a single line these brackets need to be here brackets are important it's easy to make a mistake and even a small thing can break the entire project that's programmer's life attention to detail and debugging perfect now it gets added only once per value as i said i will use touch and event for cleanup i will use splice method to find swipe up in keys array and remove it and i do the same thing for swipe down so in touch start i save initial vertical coordinate of touch event in touch move i compare starting vertical coordinate to the current vertical coordinate to determine whether user is swiping up or down and in touch end i clean up and remove all touch events from our custom keys array let's remove this console log i want to restart game when we swipe down i might as well put it in here why not so if we swipe down call our custom restart game function we wrote earlier but only do it if game over is true like this so i get game over i'm swiping up nothing happens i swipe down and game restarts great i can increase touch threshold if i want some functionality to work only with very long swipes i set it to 200 i swipe down but only short nothing happens longer swipe still nothing i have to swipe almost the entire screen from top to bottom to restart game now so let's put the threshold back to 30. i want player to jump when we swipe up so here inside update method on playerclass i put this part in brackets because i want it to evaluate first if keys array contains arrow up or if it contains swipe up and at the same time if player is on ground make player jump be careful about brackets it's easy to create a bug here if you forget one let's see reload game i run swipe up and player jumps i swipe again and again this works touch events work really well with simple games like this in the next episode i will create a game with more complex moves and special abilities game like that is a bit more complicated when it comes to touch events also in most cases to make a mobile game like this work you should resize your art assets my player's sprite sheet has frames 200 times 200 pixels that's massive for a mobile game and if i had many animated objects on screen at the same time it would start lagging very fast for a bigger game i would have to create two or more sets of art assets for different screen sizes let's change game over message so that user knows we can now swipe down to restart javascript also offers builtin native full screen api that's easy to use it's now well supported in all modern browsers as far as i know only internet explorer and mobile version of safari don't fully support it we are web developers here so i'm sure all of you use updated version of a modern secure browser on your machine full screen api gives us methods that allow us to present a specific element and its descendants in a full screen mode it will hide all browser user interface elements sidebars and other applications as long as full screen is active let's create a button to toggle full screen i give it id full screen button for example and it will say toggle full screen in css i give it position absolute font size 20 pixels but in 10 pixels top 10 pixels and transform translate x minus 50 to center it horizontally i bring it to my javascript project using get element by id i create a new function i call for example toggle full screen let's console.log document.fullscreenelement like this and call toggle full screen function we just wrote full screen element is a builtin readonly property on document object that returns the element that is currently being presented in full screen mode if it's null it means the full screen is not active we can use this property to check if we are currently in full screen mode i say if full screen mode is not active take canvas variable from line 2 and call built in request full screen this method is asynchronous it returns a promise which means i can chain then and catch methods to run some followup code when the promise is fulfilled or rejected i will just use cache today to display potential error notice that the request full screen is called on the element i want to make full screen but full screen element property sits on the document object today i won't put any followup code in then method so i can delete it in catch i will take the auto generated error object if error happens we will create alert and it will say some error message to concatenate message i can use backticks instead of quotes this is so called template literal syntax it's just a simple way to combine strings of text and expressions that need to be evaluated into a single final line of text i say for example error can't enable full screen mode and to insert variable or expression inside template string we use dollar sign and brackets like this here i just put this auto generated error object and its message property so we can read what went wrong so if full screen is currently not active present canvas in full screen mode else meaning full screen is active call built in exit full screen method to switch back to windowed mode notice that exit full screen is again called from document object if i save my project and refresh browse the window i get an error you can see catch method worked and created alert popup window with our message in console i can see more information it says full screen can only be initiated by user gesture here i declared my toggle full screen function and here i'm calling it on the first page load we can't do that full screen can only be triggered by user generated events such as click or touch that's what this error message is telling us we can't just make javascript to automatically trigger full screen it needs to be triggered by a usergenerated event so instead of running it on the first page load i create an event listener for click event on full screen button element we created earlier when user clicks button then run toggle full screen to exit full screen on a computer you can also just press escape key on mobile you can exit full screen by swiping to reveal main controls and press back or home key depending on which phone you are using sometimes we get unexpected collisions and game over when player and enemy images are not actually touching like this it's because we are checking for collision detection on circular hitboxes around player and enemy and these circles don't exactly match the sprite sheet image collisions between complex shape take a lot of performance and especially for mobile games performance is something we need to be more careful about phones don't have as much computing power as our desktop computers do it's usually not a problem when hitbox doesn't exactly match sprite sheet shape but it should be positioned in a way that it's predictable when collision can and cannot happen i drew a simple circle around player and now we can see its collision area let's copy this code to display collision area of enemies as well you can see when these two white circles touch we get collision and since the circles are larger than player and enemy image sometimes we get collision when player and enemy images are clearly not touching especially this one when we are about to land from what seems to be a successful jump how do we fix this since player and enemy images are not scalable in this game they are drawn at fixed width and height we can shrink and scale hitboxes by a value relative to image size and we can also move the hitbox left and right by specific pixel amounts to try and match images more closely and make collisions more predictable we don't want surprise game over like this i'm using a bit unconventional technique here because sprites are in a sense rectangular they have start in x and y position and width and height but i chose collision detection between circles to remove rectangular edges from sticking out outside player and enemy shapes what i'm about to do will work with rectangular collisions as well if you prefer that we are calculating collision detection between player and all active enemies here i explained it in the previous episode we are basically checking distance between center point of player circle and center point of enemy circle first horizontally and then vertically we are drawing imaginary right triangle and using pythagoras theorem to calculate the length of hypotenuse which is basically the distance between center point of player circle and center point of enemy circle then we are comparing radius of player circle plus radius of enemy circle to that distance if distance is more than sum of these two radii circles are far apart if it's the same circles are touching and if the distance is less than sum of radii circles are overlapping here i'm just drawing white collision area circle it's just a visual it doesn't actually detect collision collision is being detected here we are inside player class and this is the horizontal center point position of player circle this is being used for collision detection here this is vertical coordinate of that center point which is being used in collision detection formula here and this is the radius of collision area circle we are drawing and that same value is being used in collision detection formula here i can simply offset and resize that collision circle visual in this area and then replicate those changes inside the actual collision detection calculation area here let me show you what i mean what if i want player circle to be smaller maybe i don't mind that ears and tail overlap let's say they are soft and they don't count when it comes to collision also maybe i want to make my game a bit easier and forgiven this will allow a small overlap between player and enemy image what if i want to move the collision hitbox downwards relative to player image i change its vertical center point position here plus 20 pixels seems fine now i compare changes i made to the visualization and i make sure i update the actual collision detection formula to match these new values i didn't make any changes to horizontal center point so that value stays the same i added plus 20 pixels to vertical center point so i update it in collision calculation here i also made the circle smaller so i update player radius value in this area we successfully adjusted player hitbox let's also do something about enemies i can for example reduce the radius of enemy circle i also want to move it to the left to cover head of the worm better maybe 20 pixels for a horizontal center point i'm actually happy with this i want collision to only happen when these two adjusted smaller circles collide let's take the changed values we used to adjust enemy hitbox visual and transfer them into collision detection formula like we did with player i copy this line just so i can look at it for reference i put it here just temporarily collision detection is inside player class so this keyword here points to player object if i want to point towards anime object i can't use this keyword in this area we adjusted horizontal coordinate of enemy circle center point so i need to adjust it here minus 20. vertical center point of enemies stated the same so i will not be making any changes here we did change enemy radius so i will change enemy radius here and this is how you resize scale and reposition hitboxes in your game to make sure they match your art assets more closely i didn't plan to make this episode but so many of you asked how to add mobile support to our games so here we go we can take it much further but i think this was a good beginner friendly introduction check out full series in the video description if you want i'll see you there when your games and applications start getting bigger more exciting and full of extra features it will be more and more challenging to keep your code clean and organized over time people came up with the general reusable solutions to commonly occurring problems these well tested and widely used code structures are called design patterns design patterns are a tool kit of tried and tested solutions to common problems in software design you could split design patterns into three main categories in this class we will use state design pattern to control player character in a game it's a behavioral pattern that lets an object alter its behavior when its internal state changes why do we need to manage player state let's say we have a simple side scroller game our character is standing and when i press up arrow key i want it to jump this code has a bug if i keep pressing up arrow while jumping player character will fly off screen so i have to do a check here only run this code and jump if character is standing on a solid ground great that fixed it i also want to add sitting animation but player can't enter sitting state while it's in the middle of jump player can sit down only when it's standing or running on solid ground maybe i also want a dive attack when player tackles enemies from the air again this move can only be entered by pressing down arrow key while jumping because when we are standing down arrow key will make players sit down i'm sure you can imagine how adding more moves will create a very complicated ifelse statement and since all of that is contained in a single piece of logic adding one new move later on can break all your other existing conditions and you will have to review that single massive logic tree every time you need to fix a bug or add a new feature since this is a very common challenge game designers had to deal with for a long time there is a tried and tested way to do this right what if instead of this complicated spaghetti code if else statement we model our code structure based on finite state machine we want to have a limited set of states player object can be in such as standing jumping or sitting player object can only be in one of those states at a time and for each state it will only react to a limited set of inputs we define that way we have a class for each state and in rules of that class i can say that while player is jumping wait for a certain time before switching it to falling state or if you detect down arrow key input transition player into diving state other than that while in jumping state ignore all other inputs so pressing down arrow key while jumping will switch player into diving state pressing down arrow key while standing will transition player into a seating state in this class we will learn how to implement state design pattern in a side scroller game we will learn how to use the native javascript modules to split our code into multiple parts and many other important game development tricks and techniques as usual big like if you are ready to start building bigger games and learn how to make our code bases scalable easy to navigate in easy to manage and debug we are diving into more advanced territory today the challenge for beginners will mostly be to keep track of what each class and function is doing and how they interact with each other check out some beginnerfriendly game development tutorials in the video description if you just recently started with html css and javascript i created a simple web page this doc image will be our spreadsheet you can download it in the video description it was made by this amazing artist check out his site for more game development art assets i include my image as img tag this time that way i can wait for the image to get fully loaded before i run any javascript i include my javascript by using a script tag but this time i will set its type attribute to module like this this will cause the browser to process any contents of this particular script as javascript module which will allow us to split our code into multiple separate files and use import export keywords to connect the data inside you can see i'm importing only the main script.js file but we will also have player.js state.js input.js and utilities.js splitting files like this makes our project a bit cleaner and easier to navigate in javascript modules allow us to split our programs into separate parts that can be imported where they are needed node.js had this ability for a long time but now modern browsers support module functionality natively use of native javascript modules is dependent on the import export statements and we will cover how to use them today it's easy don't worry there is only one catch when using modules you need to run the code in some kind of dev environment you need to have a server if you just write index html file and click to open it in browser locally as you can do with all my other course projects import export keywords will not work you need to run this code through a server there are many ways to set up local server the easiest one is to install a small plugin to your code editor i'm using visual studio code and when i click here on the left side on the extensions icon and i search extensions for live server i find this plugin it's been downloaded over 17 million times so it's very popular mine is already installed but if you don't have it it will say install here after installation you might have to close or reopen your vs code when it's successfully installed you will see this go live icon right here if you never used it it can act a bit unexpectedly when you click go live it doesn't open the file you are looking at at the moment it will run code from the entire project folder your vs code is currently pointed at to make sure your live server goes live with the correct set of files you click file in the top left corner and then click open folder and you navigate to your project folder on your local computer when you find it click select folder and then when you go live the correct project will open if you can't see this new live server notification area close your vs code completely and reopen it and it will get loaded the best thing about live server extension is that when you save any of the project files it will reload browser window automatically you can always see the latest preview of your code without constantly manually reloading browser on my windows computer i use control plus s keyboard shortcut to save changes to my file i use it a lot while working in this environment so now we should have a project folder running through live server extension we have index html file style css main script js file we will have player js where we write all the logic to control and animate our player character state gs will be where we write state design pattern to swap between different player states input.js will handle keyboard input and utilities.js will have small useful functions that for example display status text or some other small tasks i will speed up css setup because that's very basic global reset to make sure the page looks the same across different browsers i will give canvas some background so we can see it and i will hide the sprite sheet image since we will be drawing and animating it with javascript i will also show you how to create a very simple loading screen i wrote this h1 tag with an id of loading so i grab it here i center it in the middle of the page and i adjust its font size script.js is my main module which will connect all other parts into a final piece of logic the spreadsheet we are using today is a big image file so it might take a second to fully load to make sure javascript waits for all the assets to be fully loaded before it runs i will create a simple event listener for load event load event will wait for the entire page to be fully loaded and available including page content such as style sheets images and so on in the meantime this text that says load in will be visible so if you add more art assets user will see this loading screen for however long it takes to load all assets when everything is fully loaded this event listener will run its code and inside i will target this loading text and i will hide it because the page is fully loaded at the point when this code runs i will also set up my canvas so document.getelementbyidcanvas1 i instantiate context object which contains all builtin 2d drawing properties and methods we will need today i set canvas width to window in width and canvas height to window inner height i can see canvas is now full screen so i make it transparent it's time to draw the player in player.js i create a class i call player player always needs to be aware of boundaries of game area since we will be running and jumping around and we need to know when we reach the edges of screen so i will pass it game with and game height from the outside as arguments and i will convert these arguments to class properties like this today we are learning about state management we will be swapping player between different states this dot states will be an array and each position in that array will be one possible player state such as running jumping sitting and so on then we will have this dot current state property because player can only ever be in one state at one time current state will be one of the options from this dot states array so for example this dot states index 0 will be standing state index 1 will be jumping state and so on this dot states is an empty array now but we will fill it with states very soon this dot image will be the docs spreadsheet i already loaded it into our project on line 12 in index html so here i just point this variable towards it using its dock image id i gave it the dock image is a sprite sheet with multiple frames when you divide width by number of frames in the longest row or you can think of these as columns you will get width of one frame in this case it's 200 pixels height divided by the number of rows will give us the height of a single frame in this case 181.83 pixels let's first draw it at x and ycoordinates 0 0 so from the top left corner of canvas area i create a public draw method that takes context as an argument to specify which canvas element we want to draw on i call built in canvas draw image method i pass it my doc image from line 7 and i draw it at coordinates x and y so this is our player class creating a selfcontained class that handles all player functionality is a good example of the first principle of objectoriented programming called encapsulation encapsulation means we rub variables or data and functions that operate on that data into objects encapsulation can be used to protect our data from unwanted outside access it simplifies maintenance of our code by keeping it organized and easier to understand since we are including our main script.js file as a module and we are running our code through a local server we can use export import statements native javascript modules are part of es6 standard and allow us to split our code into separate files so called modules members of these modules so classes functions and variables can be exported and imported around our program wherever they are needed i want to export my player class there are two types of exports named exports and default exports each module each file can have only one default export but there is no limit on the number of named exports namedexport looks the same just without this default keyword to make my player class available in main script.js file i go up top and i say import player from player.js this dot slash means that player.js file is in the same folder as script js since player is a default export i don't need brackets for named exports exports that don't have default keyword in front of them i would have to wrap them in brackets like this but since player class is a default export we don't need brackets here and i can also refer to player using default here but there is no need to go into that much detail about modules today i just want you to understand the main idea and get comfortable exporting and importing your variables classes and functions between modules so now player class is available here let's test if it works and instantiate it i create a constant variable called for example player and i set it to new player here on line 2 in player js i can see our player class expects game width and game height arguments so i pass it canvas width from line 8 and canvas height from line 9. if i consolidate player i can see my object here and i can inspect it to see all its properties and values congratulations now you understand how to use native javascript modules what else should we learn today click the like if you are getting any value we created a public draw method on our player class so let's call it here i have an error because draw method needs an argument for context otherwise it doesn't know what canvas to draw on i pass it ctx from line 7 because in this project we only have one canvas element nice we are drawing player image on canvas what you see on canvas right now is the entire sprite sheet on line 14 here we are telling draw method what image to draw and what coordinates to draw it at draw method will just take the entire image at its original size and it places it at these coordinates i can change the coordinates here built in canvas the draw image method can take 3 5 or 9 arguments depending on how much control we want to have over the image we are drawing if i give it optional fourth and fifth arguments these stand for width and height and the entire image will be stretched to fill the rectangle defined by these starting coordinates and these ending coordinates the last longest version of draw image method expects 9 arguments and it gives us full control over the image we pass it image we want to draw x y width and height of rectangle we want to crop out from the source image and x y width and height of rectangular area where we want to place that cropped out piece of image on destination canvas so right now i want to draw just a single frame from player sprite sheet so destination values will be this dot x this dot y this dot width and this dot height and source values will be let's start by cropping out this frame in the top left corner so from coordinates 0 0 two coordinates distort with this.height these two values determine start of cropping rectangle so i can navigate around the sprite sheet horizontally and vertically just by changing these two values now i'm traveling along the sprite sheet horizontally it's not very obvious on this simple standing animation if you watch doc's tale you will see we are swapping between frames source y argument here is for vertical navigation now i jumped to this frame i can swap between frames just by changing these values i might as well put them into separate variables i create frame x variable for horizontal navigation and i replace it here i also create frame y for vertical navigation and i replace it here now i can jump between frames in our sprite sheet by changing frame x and frame y variables wow we covered the main principles of javascript sprite animation so fast today i have a special glass about it if you want to go deeper to finalize sprite animation we just rotate between sprites on each row endlessly using frame x property and as we swap between different player states such as running and in we will be swapping between rows of sprite sheet vertically using frame y variable before we do that let's place player in the middle bottom of canvas to make it seem like it's standing on the ground this dot x is a game width divided by 2 minus player's width divided by 2 and middle bottom placement is game height minus height of the player like this there are many ways to handle keyboard inputs i want to keep our code clean and modular so i have this input.js file inside i create a default export again and this time it will be a class called input handler this class's job will be to setup listeners for specific keys and to keep track of the last key that was pressed or released and it will have only one class property called for example this dot last key this value will be updated every time one of our selected keys is pressed or released inside constructor i create an event listener for keydown event callback function on event listener in javascript has this autogenerated event object that is automatically passed as an argument here i will refer to it as e for example this e event object has all kinds of different information about key down event that just occurred you can console e to see it i used it many times before so i know this event object has a property called key that gives us the name of keyboard button that was pressed i could use ifelse statements here or i can use a javascript switch statement which is used to perform different actions based on different conditions we use it to select one of many blocks of code to be executed based on which key was pressed the syntax goes like this i open switch statement and i pass it expression to validate in this case i wanted to check for value of event.key which contains name of the key that was just pressed in this keydown event i say case arrow left and here some code to be executed if e dot key is arrow left in this case i will take this to the last key from line 3 and i give it value press left make sure you spell it the same as me it's case sensitive we can have multiple cases here so far i just have one but i will add more arrow keys in a minute switch expression on line 5 is evaluated once and it is compared with each case in this case it will check if e dot key is equal to arrow left if it is code on line 7 will be executed we can also give it default case with code to run if there is no match but i will not be doing that today let's copy this event listener and i change it to key up event when arrow left is released i will set this dot last key from line 3 to release left this way i can keep track of specific keys being pressed and released i can't lock e dot key inside key down event just to check if everything works so far so i have this custom input handler class and all this code is inside its class constructor which means all this code will get auto executed when i create an instance of this class using the new keyword instantiate an input handler class will automatically attach these two event listeners to our browser window object i'm exporting this class here and i will instantiate it from a main script js file by saying import input handler from input.js with input handler class available i create a constant variable called for example input and i set it to new input handler that's it now when i click my canvas and i start pressing keyboard it will console log names of those keys those names are values of key property on auto generated event object coming from e dot key here so creating an instance of input handle class automatically executed all the code inside its constructor which added event listeners to our project we care only about certain keys we will ignore others right now pressing and releasing left arrow key will update this dot last key property last key stores the last keyboard input that was pressed or released i will add more keys in key down i add case for arrow right and i set last key to press right and in key up event listener we set it to release right i will add break keyword after each case if we find a match we don't have to check the others so we are listening for presses and releases of left and right keys let's see if everything works i can't lock input from line 14 dot last key which is coming from line 3 and input js file it's not working because we have a problem with this keyword since i'm attaching event listener to window object from inside a class i need to bind that reference to this keyword so that when event listener runs this line later it still remembers that this keyword stands for this property on input handler object i can use built javascript bind method here or i can use es6 arrow function syntax which has a special builtin feature when compared to regular function arrow functions do not bind to their own in this but they inherit one from their parent scope this is so called lexical scoping because of this behavior arrow functions allow us to retain the scope of the caller inside the function so we don't need to use bind in other words use an arrow function here we'll make sure these lines of code will correctly remember we are pointing them to this class property i will also need animation loop so custom function i call for example animate inside i will console input.lastkey request animation frame and i pass it animate which will create an endless animation loop i start the loop by calling animate like this now when i click on canvas and i press left or right arrow keys we get the correct console logs for left i misspelled arrow right on lines 9 and 19. now everything works great utils.js is just a place where i can have my small utility functions i want the function that will display the last key that was pressed i want to draw that text on canvas so that i don't have to check console it will be very simple i call it draw status text it will take arguments for context to specify what canvas we want to draw on and input so that we have access to the last key value i set canvas font property to 10 pixels helvetica for example fill text method takes text we want to draw and x and y where on canvas we want to draw it so i pass it last input colon space plus input dot last key and i want to draw it at coordinates 10 20 i guess let's export it and import it in script js this time i'm not exporting it as a default so i have to wrap it in curly brackets like this i import draw status text in brackets from utils.js and i call it inside animation loop here on line 19. it expects context and input as arguments so i pass it ctx from line 9 and input from line 15. let's make it larger maybe 30 pixels and coordinates 2050 nice it works i need to make sure i clear my canvas between frames to delete old paint build in clear rectangle method and i want to clear the entire canvas from coordinates 0 0 to coordinates canvas with canvas height this will delete my player so i have to redraw it for every frame by placing player.draw inside animation loop nice so far we only care about left and right arrow keys when we press them canvas gets updated let's delete this console log state design pattern allows objects to change their behavior based on their current state in this case we will start very simple to demonstrate the main idea we will swap player between stand and left and stand and write state entering each state will draw a different row in sprite sheet and in each of these states player will only respond to a limited set of keyboard inputs when we are standing left we will ignore additional presses of left key and we will only react when user presses the right key which will swap us to standing right state in the stand and right we will ignore any additional presses of right key and only pressing left arrow key will swap us to standing left state in each state we can limit what keys player will react to and we can write logic that defines behavior for each key press separately i will keep all potential player states in this dot states array here and i will keep track of the current one in this dot current state here the way this is done is that each state in this dot states array will be its own object generated by a separate class don't worry let's go through it now and make sure we explain it properly so that it's easy to understand in state js i will define class for each state i will have an object that will contain a list of all possible states usually it's a good idea to use enum for this in this case we will use enum to define a set of named constants we define a name for each state and assign it a number the order of these states must match the order in which we add them to player states array and that way swapping between states will be more readable because instead of swapping to state 0 i will be able to swap to state standing left for example it will make our code easier to read that's why we're writing this enum statement i will have just two states at first to demonstrate the entire logic on a simple example standing left will be state 0 and stand and write will be state 1. i create a custom class called state its job will be just to hold this dot state property which will be passed to constructor as an argument it will take this argument and it will turn it into class property this is just to keep track of name of the currently active state so that we can write that state name on canvas in state design pattern each state is usually defined by a separate class so let's create a class called standing left and that class extends state class from line extends keyword is used to create a child class by extending a class i'm setting up a relationship between these two classes this is parent and this is child extending classes is a good example of one of four pillars of objectoriented programming called inheritance inheritance is a process where one class inherits attributes and methods from another class we use it to avoid code repetition i will create multiple child classes that all extend this state class if i want i can define a method on parent state class and it will be inherited by all child classes automatically so that i don't have to define them on each class separately all child classes will also have access to this.state property because if i reference a method or a property from inside a child class if javascript can't find it on this class it will go look for it automatically on the parent so this is our parent class also called super class and this is so called child class or sub class it will have its own constructor and that constructor will expect player object as an argument because i need access to player properties on here since i want to be changing things like player sprite sheet row or player speed as we swap between different states constructor is automatically executed when we create an instance of a class so the first thing i will do is use super keyword we can use super keyword in child classes to access and call methods on object's parent when super is used in a constructor like we are doing here it must be used before this keyword calling super here will execute all the code inside the parent constructor on line 7. in this case we need to pass it name of current state standing left and constructor will set it as a value for this dot state class property on this particular subclass we'll just use that to write currently active state on canvas a bit later now i take player object passed as an argument and i convert it to class property here my standing left child class will have enter method that will do everything that needs to be done when player enters this particular state for example it will change its speed or sprite sheet it will also have handle input method which will listen for a predefined set of inputs and swap to a different state when the correct key is pressed enter method will just run once when standing left state is entered handle input method will run over and over per each animation frame let's copy all this and make another child class called standing right i pass stand and write string to its super class constructor notice that we have two subclasses extending one superclass both of these child classes have methods that are named exactly the same this is very important placing methods with the same names on different objects is an example of one of the core concepts of objectoriented programming called polymorphism out of these four concepts it's the most complex one to fully understand since it has multiple types in this case polymorphism allows methods to display different behavior depending on which class calls it we will be calling enter and handle input methods from player class using the same line of code every time but as player swaps between different states different code will be executed because enter method and handle input methods will contain different behavior for each player's state for each class those differences will be defined here so for this code to work every player state class we define needs to have enter method that runs once every time we enter that state to set things up and it needs to have handle input class method that runs continuously waiting for specific inputs to be pressed to switch player object to a different state handle input method will take input as an argument player object has this dot frame y property which determines which row of player sprite sheet we are animating when we enter stand in left state i want to animate row 1. stand and write animation frames are on row with index 0. the main principle of state management pattern is that when in specific state object will only react to a limited set of inputs other inputs for which we don't define behavior here will be ignored so inside standing left class if input is pressed right we will set state to stand in right when player object is in stand and write state and input is pressed left we will switch player to stand in the left state and the final piece is the mechanism that will actually allow us to swap player to a different state that code will come here i create a custom public method on player class called for example set state and it will take the new state as an argument inside i set this dot current state from line 6 to distort states from line 5 and index will be this state number we passed as argument of course this will only work if this.states actually contains some states right now it's empty we will fill it in a minute we know that each of our states has enter method which will run once when player enters that particular state to set up our sprite sheet to make sure we are animating the correct row back in set state we switch player to a new state and we call that enter method if we pass it 1 here enter method will be called on standing left state if we pass it 0 here method will be called from and write state because in our enum we gave standing left state a value of 0 and standing right state is value 1. so now we have a public method that can swap player between different states if player is currently in standing left state and handle input method detects that we pressed right arrow key we call it this.player.setstate and on line 18 here i see it expects state as an argument that argument will be a number right now we only have two states so either zero for standing left or one for stand and write will come here you can see we say distant states and index in square brackets so we are referring to this dot states from line 5. again we will fill this array with state objects in a minute so i want to swap player to stand in right state here i can see stand right is 1 here so to pass it number 1 i pass it states from line 1 dot stand and write from line 3. this entire enum object is here just to give me more readable values to these numbers that represent states it would also work if i just passed it number one directly here but number one past the set state method will be passed here on line 18 as an argument and this dot current state will be assigned this dot states from line five index one this array will need to have two elements as we have two states element with an index of zero and element with an index of one these will not be just simple numbers like this these will be entire instances of standing left and standing right class but before i can use those classes here in player.js i need to import them to import multiple classes from the same file we need to wrap them in brackets in state.js i export standing left class from line 10 and standing right class from line 22. in player.js i import both of them from statejs like this i need to make sure i save changes to all files i made changes to i have an error because i didn't finish this other if statement if player is in stand and write state and handle input method detects we press left arrow key call set state on player class and pass it number 0 states that standing left this stands for 0 so 0 is being passed here to set state and this dot current state is set to this dot states from line 7 index 0 which is this now we can finally define our states here properly so index 0 in player states array will be an instance of standing left class so new standing left and index 1 will be new standing right we need to make sure that state objects in this array have the same indexes as numbers we defined for each of these states inside enum here now that we can swap between states i also need to be calling a handle input method over and over so that we can listen for new inputs and change states when needed i create update method on player class and it will take input as an argument inside this method i will be periodically calling handle input from this.currentstate property from line 8. this property represents currently active state because of logic we defined on line 24 so player will be either in standing left or in stand in write state it will call either handle input method from line 19 that reacts only to press right or handle input method from line 30 that reacts only to press left i call it like this and i pass it input that we passed here as an argument that input then comes through here so that handle input method can check what was pressed and if the right key is pressed it will swap player states we call playerupdate we just wrote from animation loop and i pass it input from mine17 dot last key from line 3 in input.js we are done we just wrote the entire logic for state management of player object let's quickly follow the logic one more time to make sure it's clear we are calling update method for every animation frame and passing it input.lastkey the last key from selected inputs that user interacted with that input last key is passed here this time i call it just input and i pass it to this.currentstate from line 8 dot handle input and i pass that same input value along this dot current state represents the entire state object at first i am setting it to distort states index 0 which is this standing left object so for this animation frame handle input will be called from standing left class so from here i can see constructor for standing left and standing right expects player as an argument so that we can then correctly set up our sprite sheets here and here inside player.js i need to pass it that player argument since we are inside player class right now i pass it this keyword which in this scope of this class represents the entire player object okay so current state is this dot states index 0 which means our standing left class and we are calling handle input on it so handle input from line 18 will be called if the initial current state is index 1 that would be stand and write state so this handle input method will be called from line 30 instead if handle input is called from standing left class it will only react if right arrow key is pressed and it will swap player to stand in write state if player is currently in stand in write state handle input will only react to left arrow key being pressed and it will swap player to stand in left state whenever we set a new state it will update which of these two states this dot current state is pointing towards and then from that new state it will call this enter method enter method was defined on lines 15 and 27 and depending on the current state it will set sprite sheet to animate a different row i save changes to all my files and when i click my canvas and press left and right arrow keys we are correctly swapping between standing left and standing right state let's display what state player is currently in on canvas as well here on line 24 every time set state is called we set this dot current state from line 8 to one of our available states so far we have standing left at index 0 and standing right at index 1. parent class of all our states has this.state property in its constructor we are given that property a different value from each child state by calling superclass constructor from each subclass basically all that this is we are declaring this.state property on parent class that property is being inherited by all child classes and it's set to standing left on this class on line 12 and to standing right on this class on line 24. i just wanted to draw this value on canvas so that we know currently active state i will use our existing draw status text function for that we are calling it from inside animation loop here and i need to pass it player object so that we can access current player state here i make sure my function expects that argument the same as we did with input last key i will call fill text and i say active state colon space plus player we passed as argument dot current state dot state when current state is set to standing left this dot state here will be set to standing left and that's what will get displayed for standing right it will display this line as i said before using super keyword inside child class constructor will call constructor of its super class its parent class and it will execute all its code in this case this code will assign value of stand and write to this inherited state property when using live server in vs code watch for these dots here it means you have unsaved changes in your file so just make sure you save all your code in each file if you're not getting the same result as me i save my changes i also have to give fill text some x and y coordinates how about 2100 maybe 90 and i reduce font size to 28 pixels when i save my changes and interact with canvas now when i press left and right keys we see status text that tells user the last input that was pressed or released and currently active player status that's it state pattern is complete now we just add more states by extending it before we add sitting and running state let's recap the logic because i realize this must be lot for beginners to follow if you are following so far well done you are doing great it all starts by calling playerupdate and passing it the last key that was pressed or released inside update method we take that input and we pass it along to handle input method the whole trick here is that we are calling handle input from this dot current state property which swaps between different states when we pass it 1 it points to state with index 1 inside this dot states array so in this case stand and write object if it's zero it points towards standing left state object both of these objects have their own version of handle input method so that as we point current state towards different state objects behavior of player will change even though we are always calling the same handle input method it's important that all our state objects have their own definition of enter method and handle input method i could also created a backup enter and handle input method on their parent class here in case child class doesn't have methods with these names but let's not over complicate things i like to think of this type of state management as we are locking player in different states while player is in a specific state it will ignore some inputs and it will only react to inputs we define in its handle input method here we can see that while in standing left state player will only react to pressing right arrow key and it will make it switch to stand and write state while in stand and write state player will ignore all inputs except for pressing of left arrow key which will make it swap to standing left state you might notice that state design pattern has some code repetition but the code is easy to navigate in and if we get a bug it will be limited to a specific state making larger projects much easier to manage and debug if we get some unexpected behavior we can see what state was our player object in when that unexpected thing happened and what was the last input key that was pressed or released and we check our code inside handle input method on that particular state to see what went wrong structuring your code like this comes very useful when you want to give your player multiple abilities weapons and special moves we are capturing the last key that was pressed here inside our input handler class i'm importing and instantiating that class here in script.js and passing it to playerupdate method we pass that input value along to handleinput method and value of that input gets checked against the set of specific values we define for each state and based on that we swap player to a different state using our custom set state method setstate method takes a single number as an argument as we defined them inside enum state that standing right is one state dot standard left is zero so right now i'm basically passing it number one here that number travels as an argument past the set state here it's passed along here and it represents index of that state inside this dot states array on player class so number assigned to each state inside enum object in state js have to correspond to index of each of these particular states inside this dot states array on player class that way when it receives number 1 here it swaps to stand in write state if it receives number 0 it will set state to stand in left after swap into a specific state enter method will run once to set up player object for entering that state in our case we just adjust spreadsheet row for now and then it continuously calls handle input method from that state class which listens to specific set of keyboard inputs that's why we have enter and handle input methods with the same names on each state so that we call them from the same place but we get different behaviors depending on which state object is player dot current state pointing to words at that particular moment let's add sitting state i copy this code block and case will be arrow down if you want to know what are the values of e dot key so that you can check for correct spelling of key names you can just console log it here i'm going to say if e dot key value is arrow down set this laplace key from line 3 to press down in keyup event we set it to release down in state.js i copy this code block i use it to create a new class called sit in left i pass it sitting left here i check my spreadsheet and i see that sitting left animation is on row nine we are counting from zero while in sit in left state if we detect that user pressed right key we will swap player to sit in right state which we will create in a minute else if we detect that user pressed up arrow key we will make it stand up again i need to create these new key value pairs in my enum object up here so sitting left will be 2 and sit and write will be 3. in input js i will check if pressed key is arrow up and i set last key to press up in key up event i set it to release up so now we are tracking presses and releases of all four arrow keys perfect in my new sitting left class when we press right we set state to sit and write and when we press up our dock will simply stand back up so here i need to do standing left because we are going from sit in left state i copy this code block and i turn it into sit and write class we set name of state to sit and write so that it displays correctly here while in sit and write state if we press left we set state to sit in the left if we press up we set state to stand and write in player.js i import these two new state classes i instantiate them inside this.states array while making sure i am adding them in the right order nice so we have two new state classes i hope you can see now how state pattern limits the number of inputs player reacts in each state we have logic that defines how player behaves while in these two new sitting states but we have no way to actually enter these sitting states i go inside standing right class and i say if input is pressed down we set state to sit in right if we press down while in standing left class we set state to sit in left i also need to make sure enter method on the seat and left class sets player sprite sheet to the correct row sitting left is row with index 8. actually sorry sitting left is row index 9 sitting right is row index 8. now it's correct i will also set the initial state to stand and write so distort states index 1 just for the first page load before we start pressing keys and swapping player states now when we press the down arrow key player will sit we can press left and right keys to make player turn left and right while sitting and pressing up arrow will make it stand up and face the correct direction this is going really well we can also change how the entire sitting state works by only making the player sit while arrow down key is being pressed and when it's released player will stand back up automatically so inside sitting left state if input is released down we set player to standing left and inside sit in right we set player to stand and write it well depends on what kind of game you are building and what player behavior you want i hope you can see that you get a lot of freedom and flexibility with this code structure you can easily control every detail of player behavior when you structure code like this the way i wrote this code we only react to the last key pressed i'm not keeping track of multiple key presses in memory since i want to keep this simple but i will cover how to handle pressing multiple keys at the same time in a special episode as well probably added running states will be similar but we will have to handle horizontal speed so let me show you how to do that again i start by adding new states inside my enum running left will be state number four running right will be number five i make a copy of this block and name it run and left i put running left here i check my sprite sheet and the row for this animation is 7. when we release left while in this state we will switch player into standing left state and when we press right we will switch into run and right i also copy this line of code from here and when we press down from running left state we will go into sit in left state duplicate this and turn it into run and write state if we press left arrow key while in run and write state we will switch into run and left if we release right key we will go into stand right and pressing down arrow key will make players sit to the right not every game needs to have left and right version of each state also there are other ways to write code when you have a set of states that each has left and right version or maybe each state has a version with weapon ready and weapon hidden for example again i'm doing it like this for simplicity and to demonstrate the main idea of my version of state management pattern so we defined behavior for player while in running states now we need a way to actually enter these states we can enter running from standing state for example while standing left if we press right we set state to run and right here inside run and write state we see that when we release right key it will switch back to stand and write state so we are only running as long as the key is being pressed down if we press left while in standing state we will start running to the left i get this error because i refreshed my project before i finished adding new state on player class don't worry about that while in standing right state if we press left we will start running left if we press right we will start running right so here we are exporting two new state classes we just wrote here we are assigning them values four and five these numbers need to correspond to indexes to order in which we add these states inside this dot states array here first i import them on line 1 as usual and then i add instance of running left class as index 4 in this array and running right will be the fifth item in this array counting from 0. i save changes to all my files run in right animation is row 6 in our sprite sheet perfect it works and swaps between running and standing states correctly we also want player to actually move when in running state so let's give it this dot speed property and set it to zero then i create max speed property and i set it to 10 pixels per frame for example when we enter running state we set player speed to player max speed and in running left we set player to minus player max speed because moving left is in the negative direction on horizontal xaxis inside update method on player class i will be adding player speed from line 16 to horizontal position from line 12. problem now is that player will just move off screen because even when we switch away from running state nothing is setting player speed back to zero so when we enter standing left state we set player speed back to zero we do the same thing inside enter method on stand and right sitting left and sit in right state perfect player now stops moving when we enter standing or sit in a state i will also introduce horizontal boundaries so users can't move player outside the canvas if horizontal position of player is less or equal to zero i set the position to zero else if the position is more or equal to game width minus player with meaning player's right edge is touching right edge of canvas i will also not allow it to move past that point this is going so well we applied state management to our player and we have granular control over its behavior separated for each state we can do so many things with this common thing you will see in games is jumping again there is a new small trick we have to use here if you never coded jumping in a 2d side scroller game we will learn how to do it properly right now and we will make it look really good by switching player to a separate falling animation after it reached peak height of its jump let me show you that swapping between states doesn't always have to happen on user input we can also tie state swapping to other game events in this case we will swap a player from jumping into falling state after it reached maximum height of its jump we are creating new states as usual i will first add them up here to our states object which we are using to pair readable state names with numbers that represent each state i copy already exist in state class and i turn it into jumping left class i check my spreadsheet to see which row has a jump in left animation frames i delete player speed i think because i want the speed to be inherited whether we enter jump from standing on running state we will see about that i delete all these inputs for now i copy this block and turn it into jumping right class frame y for jumping right is row with index of 2. i go up to standing left state and when input is pressed we switch player to jump in left inside stand and write state when we press up arrow key we set state to jump in right i'm exporting these new state classes so in player.js i can import them and i instantiate them inside player states array i'm getting an error it's because up here in my enum i skipped some values let's assign my new states to the correct values now we correctly enter jumping state when i'm in that state it doesn't matter what i press we are locked in that state because inside handle input method i didn't give it any way to switch off to a different state first when we enter jumping state let's push player upwards on minus direction on vertical y axis when we enter i say this.velocity y minus equals i do the same for jumping right state in player.js inside update method we will deal with vertical movement here i give player v y velocity y property and i give it property i call for example weight i could have also called it gravity or something i will use velocity y to pull player upwards and wait to pull player down as the ratio between these two values changes during the jump it will create a nice jumping curve for every frame we will add this.velocity y from line 14 to player's vertical y position from line 13. right now velocity y is zero so even when we are adding it there will be no vertical movement if player is not standing on the ground so if player y is less than this.game height minus player height gradually add value of player weight to velocity y else meaning player is standing on the ground set velocity y back to zero give me a second to figure this out to make sure i'm doing it correctly in state gs here i actually want to access the velocity y property on player object so this dot player v y minus equals 20. i get small jump and it stops moving again oh yeah this is a typo this needs to be game height now it's working we have multiple places in our code where we need to check if player is standing on the ground or if it's currently in the air this is a good time to create a small utility method on our player i will call it unground and its job is to check if player is standing on the ground i will just make it return true or false directly like this based on how this expression evaluates if player's y coordinate which is the top edge of player image rectangle if it's more or equal then game height so this point minus player height so if this point is more or equal than this point we know player is standing on the ground so this method will return true else it will return false now i can just call this method whenever i need to do this check and it will also make the checks more readable here on line 32 i'm checking if player is not on ground so i say if on ground is false actually if this dot on ground is false now it's working i want player to be able to switch sides while jumping so in jump in left state if we press right arrow key we set state the jump in right in jump and write state if we press left arrow key we set state the jumping left player is flying off screen really far let's change this to minus equals 10. that's a very small jump but you will notice a bug here if i swap between jumping left and jumping right quickly each time we enter these states we are running their enter method so each time we push player further and further up i want the player to only be able to propel itself further up if it's standing on the ground so in enter method on both jumping states i will first check if player.on ground is true before we push it upwards if it's already in the air this will be false and player will receive no vertical push i change these values to minus equals 40. i just make sure i spell on ground correctly perfect we are able to turn to sides while jumping i will actually give it some horizontal speed as well when we enter jumping left set player's horizontal speed to half of player's max speed and the same for jumping right in jumping left it actually has to be negative number since we want to move in minus direction on horizontal xaxis that works awesome i can switch between jumping left and jump and right states but otherwise i'm locked in jumping i didn't give it any way to get back to running or stand in state inside jumping left i check if player on ground is true and when player gets back on the ground we set its state to stand and left in jumping right again we check if player is back on ground and we set it to standing right we are running standing sitting and jumping well done if you followed this far let's polish this and make it look even better jumping works this way we are always adding velocity y to player's vertical position here on line 31. most of the time that velocity y is zero so there is no vertical movement when we enter jumping state we set velocity y to minus 40 which will push player upwards in minus direction on vertical y axis when that happens player is no longer standing on the ground so this if statement triggers and we start increasing velocity from line 14 by player weight from line 15. this happens for every frame step by step so actually velocity y goes from 40 to zero making player move up slower and slower when it's zero player will stop moving at that point we are still not on the ground so this line of code keeps increasing and it moves velocity y from negative to positive numbers which will make player reach peak of its jump and it will start falling back down when we touch the ground this else statement triggers velocity y is set back to 0 and vertical movement will stop understanding how velocity y goes from 40 to zero and then into positive numbers gives us ability to tie player state change to it i can tell that player is at its peak of its jump because its velocity y switched from negative to positive values i will just add a quick check here to make sure player doesn't fall through the floor it shouldn't happen but this is kind of my insurance if player y is more than game height minus player height set player y to gain height minus player height this line will make it impossible for a player to move below ground level under any circumstances i don't think this check is needed even when i increase player weight to 10 we still don't fall through the floor maybe you can just comment it out it's up to you it's just the check to be secure i created falling states falling left is 8 and fall in right is 9. i copy one of my state classes and i turn it into fall and left enter method we'll just set frame y to five inside handle input method while in fall in left if we press right arrow key we want to turn so we will switch to fall and right i also want to keep this check when we fall all the way to the ground we will switch player to standing left state i copy this and turn it into fall and write class frame y here will be 4 and when we press left we set state to fall in left i import these classes in player.js and i instantiate them inside player states array so how do we enter fall in state as we said when we enter jump velocity y is set to 40 and we start adding player weight to it so it goes all the way to 0 and into positive numbers i know at the point velocity y reached 0 we are at the peak of jump and as it goes into positive numbers player is falling back down bear with me a second here please so inside the jumping left state if velocity y on player object is more than zero we set player state to fall in left inside jump in right state if velocity y is more than 0 we set state the jumping right so this is one example of how you can switch states based on other conditions state changes don't always have to be triggered by user present keys on keyboard this works really well we created standing sitting running jumping and falling states we are just drawing the first frame in each sprite sheet row let's actually animate the frames horizontally we have frame x property for horizontal navigation within our sprite sheet for every animation frame i check if frame x is less than max frame and i increase frame x by 1. i set frame x back to 0. some rows have different maximum number of frames but that's easy to deal with initially i set max frame to 5 we are counting from 0 you can see that sit in animation has less frames so it's blinking since we are animating empty frames we will start with standing animation so the initial max frame is 6. every time we enter a new state we set max frame to a different value when we enter standing left we set max frame to 6. probably i should be set in max frame before i set frame 1 because in some cases if i switch row at first we can get blinking before the right max frame is applied or maybe i could also set frame x to zero every time we enter a new state i'm not gonna go deep into this today i made other episodes about sprite animation this is just a quick solution running left and running right we'll set max frame to 8. jumping and falling have max frame six awesome we are correctly animating all our rows if you want to make player move faster you can change max speed property here on line 20. this value affects horizontal movement the sprites are animated very fast maybe i want to slow them down a bit without changing fps of the entire game how do i set fps for how often we switch between horizontal frames in sprite sheet while still keeping everything else running at maximum 60fps as always we can use timestamps and delta time last time will be the value of timestamp from the previous loop animate takes this auto generated timestamp argument which was produced and automatically passed to it by request animation frame from line 23 delta time is the number of milliseconds that passed between the last animation loop and this animation loop it's the difference between timestamps from each loop so delta time equals the timestamp from this loop minus timestamp from the previous loop when we have that calculation i set last time to the current timestamp so that it can be used for the next loop i also have to pass animate the initial timestamp just for the first loop because request animation frame also generates it from the second loop onwards so now we have delta time we know how many milliseconds it takes for our computer to serve the next animation frame it depends on power of our machine how much animation and calculations our game is doing per each frame as well as on refresh rate of screen we are using this number can be different for every computer but we can use it to unify how our game runs across different machines today i will use it to control how often we serve the next horizontal frame in doc's sprite sheet i pass delta time to player draw method here and in player js i make sure draw method expects that argument damning things with delta time needs three helper variables one variable to set fps frames per second one timer variable that will accumulate delta time until it reaches a certain value and one variable that defines that value we want to reach i call that value frame interval and it will be thousand milliseconds divided by frames per second which will give me number of milliseconds i want each frame to be displayed on the screen before we switch to the next one so if frame timer from line 22 is more than frame interval from line 23 only then switch frame x variable at the same time set frame timer back to 0 so that it can count again else just increase frame timer by delta time and wait until it accumulates enough milliseconds it's not working i see here in animation loop i need to correctly assign last time to the new timestamp value after we used it to calculate delta time so that it can be used to calculate delta time in the next loop if i change fps it affects how fast we serve horizontal sprites while still allowing player to move around at maximum 60 frames per second or whatever your request animation frame can handle on your computer if i give it fps that's higher than my screen's refresh rate request animation frame will automatically copy it so it won't animate faster past a certain value that maximum value of frames per second is limited by your screen's refresh rate making games with javascript is one of my favorite ways to practice coding today we will build a 2d game and we will animate everything to bring it to life i want to show you how to make keyboard controls feel quick and responsive we will apply animated sprite sheets and parallax backgrounds we will learn how to give our game different skins we will explore a new technique to make particle effects and we will challenge our players by giving different enemy types different behaviors on my community page i asked you to choose between three super powers and you chose the fireball tackle so let me show you how to turn into a flaming ball of plasma and vaporize enemies to earn points come join me and learn how to create your own 2d adventures with html css and plain vanilla javascript no frameworks and no libraries click like if you want more games to keep the code organized and easy to navigate in i will split javascript into multiple files so called modules and i will export and import them around the code base as needed to enable this functionality we have to run our code in some kind of dev environment they need to be run through some kind of server you might already have a preferred way to run a local server you can go ahead and do that for the rest of us the easiest way to create a simple local server is to use vs code editor which has a builtin one when you open your vs code check if you have this notification area down here that says go live if you can't see it you can just come here to extensions and search for live server it's this one mine is already installed you can just click install here when you install it close your vs code and reopen it and you will see go live down here one last thing to do we have to point vs code to the correct folder with the files we want to run through this live server we do it by going to file open folder and in there you navigate to the folder you will work with today on your local computer and click open now when i create new files they will be automatically created in that folder so i create index html style css and main js in index html i create a basic blank web page markup in vs code you can just press exclamation mark and tab key and it will create it for you let's give it some title and link style css file like this i create a canvas element with an id of canvas one down here i link my javascript using a script doc i give it type attribute and set it to module to specify that this file will be a javascript module it will be my top level module and we will be importing other javascript modules inside i click this go live button and the live server plugin will automatically open my default browser and it will run our project in it it will also automatically reload the browser window whenever we save any of the project files you don't have to use vs code and live server plugin if you know how to create your own local server in a different way feel free to do that so now i can see my live server is running on port 5501 it will reload browser window whenever i save any project file i usually use control plus s keyboard shortcut to save sometimes you have to manually reload the browser page for the first time and then it will start doing it automatically in style css i reset margin and padding to 0 on all elements and i set a box size into border books this is so called a global reset and we do it to make sure our page looks the same across different browsers canvas 1 will have border 5 pixels solid black and i center it in the middle of the page so the usual four lines of css position absolute top fifty percent left fifty percent transform translate minus fifty percent minus fifty percent i will provide you with game art assets you can use to code along with me and at the end in the experiment sections i will show you how to apply different skins to your game so that you can make it unique based on your own creative preferences check out this website for more beautiful art assets that are already compatible with today's project today we will be using images for player backgrounds enemies and other things the easiest way to make sure our code runs only after all art assets are loaded is by placing the images inside index.html which we will do in a minute and we will put all javascript inside a callback function on event listener for window load event that way javascript waits for all dependent resources such as stylesheets and images to be fully loaded and available before it runs when the page is fully loaded we will point javascript towards our canvas element using its id i create an instance of builtin 2d drawing api using getcontext method and i save it as ctx shortcut for context canvas width will be for example 500 pixels and height 500 pixels as well you can make your project wider but keep the height at 500 pixels for now because i optimized the background images for that size we can make canvas scale up and down to make sure it's always fully visible if i set width to 1500 pixels we can only see the middle it's cut off on left and right i can give it max width 100 percent and it will make it scale down until it's fully visible whenever the width of the page is less than the width of the canvas element i can also give it max height 100 in case that the restricting factor is page height now we can always see the entire canvas regardless of its width and height i set it back to 500 500 for now the main brain of our project will be this game class all logic in our project will somehow go through it it will expect width and height as arguments and inside we convert these to class properties like this it will have update method that will run for every animation frame and trigger all calculations that need to happen and draw method will draw our images score and so on right now we don't have anything to update or draw yet i create a new javascript file called player.js if you are a beginner it will be easier for you if you follow my code exactly and use the sprites and images i provide you and only once you have a working project then you can modify it and add your own art assets and game features if that's what you want to do inside player.js i create a class called player its job will be to draw and update our superdog character constructor will take the entire game object as an argument through it we will have access to some things we will need such as width and height of the game area and so on javascript objects are so called reference data types which means when i pass the entire game object to other classes like this i'm not creating a copy of the game object i'm just pointing to it so now it's time to bring player image to the project it was provided by this talented artist and you can download it for free in the video description and use it for learning purposes to follow along with this class check out their website for more game art assets if you want to make your projects unique so we have some images and sometimes it can take a while maybe even a couple of seconds for the images and audio files to load in javascript if you try to use an image that hasn't yet been fully loaded you will get an error we need to make sure our images are loaded and available before we draw them one way to do that and the simplest way to do that is to actually include those images on our web page i simply create an image element and as a source i point it towards the image file i have a folder called assets in the same place where my index.html file is and in there the image i want is called playerpng i give it id player like this i will draw that image on canvas with javascript so i don't really want to display it on the web page like this install css i target it using its id and i set its display to none it's a good practice to make your images the exact size you will use in your projects we can scale it down with javascript but for maximum performance it's better to size your images in photoshop or some other graphics editor i already did that with the images i gave you today and i sized each frame to the same size we will display in game the width of each single frame in the sprite sheet will be 100 pixels and height will be 91.3 pixels if you are using your own sprite sheets you can get the width of a single frame by taking the width of the entire sprite sheet and dividing it by the number of horizontal frames and height is the height of the entire sprite sheet divided by the number of vertical frames the number of rows player will also need to be positioned somewhere on canvas so it will need x and y position it will have update method that will move it around based on user input and it will cycle through the sprite frames and the draw method will take those values and it will draw currently active frame and the current coordinates it will need context as an argument to specify which canvas element we want to draw on let's start by calling fill rectangle first and we draw it at coordinates this dot x this.y and we also specify its width and height if i want to use this javascript class in a different module in a different file i need to export it i can just say export like this each file can have unlimited amount of exports or i can say export default each file each module can have only one default export in main.js i import playerclass by going up top and saying import player in brackets like this from dot forward slash player.js in quotes class constructor on javascript class is a special type of method it gets automatically executed when we call this class using the new keyword it will create one new instance of this class and as a side effect all the code inside the constructor will run we can take advantage of that by putting in any code we want to run at that point when i create an instance of game class i also want to automatically create an instance of player class since i'm importing player class on line 1 i can instantiate it here this dot player property on game class will be new player like this inside player js on line 2 i can see that player class expects game as an argument so here since we are inside that game class i will pass it this inside game class this keyword means this game object now that we have access to the player object from within a game class here inside draw method i can take this dot player from line 13 and i call its draw method we declare that draw method here on line 12 inside player js and i can see it expects context as an argument my main public method will be this draw on game class it will get context pass from the outside in a minute and we will just pass that reference along to player draw like this our game class is complete let's create an instance of it i need to pass it width and height so i pass it canvas width from line 6 and canvas height from line 7. so now we created an instance of game class which triggered class constructor and that automatically triggers class constructor on imported player class and also creates our player make sure you save changes to both player js and main js file every time you make any change if you have any unsaved changes in player js at this point you will not get the same result as me i console log a game and i can see it has height width and it contains player object as we defined in the constructor perfect we will also need animation loop because i want the game to update and draw over and over 60 times per second i create a custom function i call for example animate inside i call game.draw from line 18 and as context i pass it ctx from line 5. then i call request animation frame and i pass it animate to create animation loop when i call it we are drawing this black rectangle representing player object nice this code inside draw method on player class will determine what the player looks like i can make it red for example i can move it around by changing its coordinates if i want to align the player on the bottom of the game area player object needs to be aware of game height i have width and height of the game area here as properties on game object and i'm passing a reference to the entire game object to the player here inside player js i convert that reference to a class property called this.game and i can extract width and height of the game from that so to position the player on the bottom of game area i set its vertical y coordinate to this.game.height minus distort height height of the player i don't really want the player to look as a red rectangle we have a special sprite sheet with our superdog to use here we are about to learn how to use builtin draw image method to animate a game character from a sprite sheet if you want to go deeper on sprite animation the very first episode in the series linked below will explain it in a beginnerfriendly way this is an advanced video if you feel it's too challenging for you at some point don't worry it will make more sense if you keep going and you can always watch a special episode describing each technique on a simpler project so draw image is a special html canvas method we can use to draw and even to animate an image it's simple i have my player sprite sheet here in html and i gave it an id of player i create a property on player class called this.image and i point it towards that image element using getelementbyid now i can draw that image draw image method needs at least three arguments image we want to draw and x and y where to draw it by the way i'm not sure if you know but i don't really have to use get element by id here i give my image id of player here and javascript automatically creates references to all elements with ids into the global namespace using its id as a variable name so i can simply just use that id as a variable name here and it will still work it's a bit strange and for some reason nobody uses this feature but it will work i will go back to getelementbyid here even though it's kinda redundant draw image method can also accept optional fourth and fifth argument for width and height and it will shrink or stretch the image to occupy these dimensions now it's just squeezing the entire sprite sheet into the small space the longest version of draw image method takes nine arguments and that's the version we need we pass it image we want to draw source x source y source width and source height of the rectangle we want to crop out from the source image in our case a single frame of the sprite sheet and destination x destination y destination width and destination height will define where on destination canvas we want to draw that cropped out rectangle onto at first i just want to crop out the top left frame in my sprite sheet so i crop from coordinates 0 0 and the area will have a width of 100 pixels and height of 91.3 pixels i'm cropping out exactly one frame i don't need the red rectangle anymore we are redrawing the same image over and over 60 times per second but it looks static let's check if we are actually animated by putting some code inside playerupdate method for every animation frame i want to increase player's horizontal x coordinate by 1 pixel to actually run the code i need to go to update method on game class and i take this.player from line 13 and i call update on it like this finally i call game.update from inside animation loop and we have some emotion congratulations you are javascript animation master okay we can do a bit more with this if you want the dog is leaving a black trail behind that's old paint we can just see all the previous frames if you want to see only the current animation frame we need to clear canvas each time we update and draw i call built in clear rectangle method and i want to clear the entire canvas from coordinates 0 0 to canvas with canvas height now we can just see the current animation frame i don't really want the player to move like this let's comment this out i want the player to move left and right jump and to use super powers based on keyboard inputs i create a new javascript file a new module i call it input js its job will be to capture and keep track of user input again i will create a javascript class here i will call it for example input handler inside its constructor i create a property called this dot keys and i set it to an empty array at first i will be adding keys that are pressed down into this array and removing the keys that are being released that way we can always check if a specific key is pressed by chicken if it's included in this array as we said before the code inside a class constructor is executed automatically whenever we create an instance of this class so i will take advantage of that and i will apply key down event listener from here event listeners return an autogenerated event object which contains all kinds of information about the event that just occurred the property that holds the name of the key that was pressed is called key so let's console.log e dot key i export input handler up here inside main.js i import my new input handler class same as i did with player i will create an instance of input handler class inside gamer class constructor i will call this property this dot input this way input handler class gets automatically instantiated when i create an instance of game class it will create this dot keys array from line 3 and it will also automatically apply this key down event listener now when i press keys on my keyboard i can see their values i don't want to react to every key we will ignore some and we will only respond to specific controls defined here we will also make sure each key can be added to this dot key's array only once so when the user holds down a specific key it will not be added 20 times it will just be added once let me show you i say if e.k meaning the key that was just press has key value of arrow down and at the same time this key that was pressed is not yet included in this dot keys array so this dot keys index of e.k is equal to 1 you can also say is more than 1 in javascript when element has index 1 it means it's not present in the array then i just do this.keys push e dot key so if the key that was pressed is arrow down and if arrow down is not yet inside this dot keys array push arrow down into this dot keys array i can console lock key that was pressed and this dot keys array you can see it will stay empty until i press arrow down if i press it it will be added to this.keys array once i will also create an eventlistener for keyup event if e dot key is arrowdown meaning if the key that was released is arrow down i will use splice method to remove it from this dot keys array splice method takes at least two arguments index of the element we want to remove and how many elements to remove at that index let's test it actually to test it properly i want the console log after the if statement now when i press arrow down it gets added to this dot keys array through the code inside keydown event when i release it keyup event removes it from the array perfect i also want to listen for arrow up key so i use or operator be careful about brackets here i have to wrap this block in brackets like this if key that was pressed is arrow down or arrow up in brackets and at the same time the key is not yet present in this dot keys array only then push it inside i also need to make sure i remove that arrow up key on keyup event again pay attention to how i use brackets here it's easy to make a mistake here and break your code we will also listen for arrow left so or operator e dot key is arrow left and another or operator and i check for arrow right i will check for one more key for now i will use it for a special move and attack and you can use alt ctrl but be careful mac and windows call alt and control keys differently they might have a different value console e.k and press them on your machine to check for that value in this case i will use enter key which should be more universal and compatible with both mac and windows systems let's add all these keys to key up event as well and i have to make sure my syntax is correct now it should work i click my canvas to select it and when i start pressing arrows and enter i can see they are correctly being added and removed from the array you can see we are also keeping track of multiple key presses at the same time great so now this dot key's property on input handler class always contains all currently active keys i have an instance of that class here saved as this dot input for every animation frame i want to pass the current list of active inputs to playerupdate method as an argument so that it can react to it i will pass it this.input.keys inside player.js i make sure the player expects that input value i will call it for example input it still refers to this.keys array we have on our input handler class inside update method on playerclass i want to check if it includes specific values i use builtin array includes method i could also use index off method here it would work the same if input includes arrow write increase horizontal xcoordinate of the player by 1. else if it includes arrow left decrease x by one making the player move left on the negative direction on horizontal xaxis i actually need to say this.x to correctly refer to the property from line six the error i'm getting now is because i didn't save my changes to input js or main.js files with file structure like this when we're using modules we always have to make sure we save every file whenever we make any changes to it now when i press right arrow player moves right when i press the left arrow key the player moves left let's refactor this i give player a speed property and initially i set it to 0. i also give it max speed property which will be its speed in pixels per frame when it's moving so this section of code will handle horizontal movement for every frame i will increase player's horizontal x position by its current speed so right now the speed is zero so the player is not moving down here i say if input includes arrow right set this dot speed to mark speed if it's arrow left set speed to minus max speed now i can move left and right again but i can't really stop there is no condition when the speed returns back to zero i can fix it by saying else this.speed is zero meaning if input array doesn't include arrow right or arrow left stop the horizontal movement i also don't want the player to be able to move outside of the game area so i need to introduce some boundaries i say if this dot x is less than zero set this dot x to zero now i can't move past the left edge i also say if this dot x is more than this that game width minus the width of the player set x to game with minus player with now i can't move past the right edge of game area as well perfect it's time to handle vertical movement which will include the jump in and also a special dive move where we crush enemies from above i create a new class property called this dot v y velocity y basically a vertical speed initially i set it to 0. for every animation frame we will add the current vertical velocity v y to player's vertical y position currently v y is set to zero so there will be no vertical movement at first i will have to check in multiple places in my code whether the player is standing on solid ground or if it's currently in the air to make our code more readable and to avoid code repetition i will put that check into a small utility method i will call it for example on the ground and i just want it to return true if the player is on ground or false if the player is in the air i do that simply by say in return this dot y is more or equal to height of the game minus the height of the player let's start by saying if input includes arrow up set this.velocity y from line 8 to 20 i press up arrow key and the player just flies up offscreen okay that worked i only want the player to be able to jump while it's standing on ground i don't want it to jump higher and higher in the air when we are pressing up arrow repeatedly i add one more check here to see if on ground from line 28 is true i set velocity y to 2 nice if you want a nice jumping curve in a 2d game we usually do it by making the power of the jump in our case vy property work against the gravity or weight of the object and while that object is in the air we keep increasing its weight until it eventually is higher than its jump power and it will make it slow down and start falling down let me show you exactly what i mean this used to be a bit confusing for me but it becomes easy when you use it a few times i create a new property called this.wait for example and i set it to one so we have velocity y property on line 8 and when we press up arrow key we set it to 10 this will be the power pulling the player upwards at the same time i want the weight of the player from line 9 to be pulling it down and i want that pull to be stronger the longer the player is in the air to get that smooth curve when we jump i do that by saying whenever this dot on ground is false whenever the player is not standing on the ground increase its velocity y by this.weight nice we kinda jumped i also need to make sure that when the player lands back on the ground velocity y is reset back to zero to stop all vertical movement i say else this dot velocity y is a zero for this to actually work as intended i need to first run this line of code and then this one and we are jumping velocity y is constantly being added to player's vertical y position at first it's zero so nothing is happening when i press up arrow key i give it a push in the negative direction on the vertical y axis so upwards at that point the player is currently not on the ground so this line of code will start running and velocity y which is currently set to 20 and which is moving the player 20 pixels up per animation frame will start decreasing by this dot weight from line 9 so minus twenty plus one is minus nineteen minus eighteen minus seventeen all the way to zero when we reach velocity y of zero player is at the peak of its jump but it's still not on the ground so this line is still adding weight to velocity y making the player fall down faster and faster when the player hits the ground this else statement will set velocity y back to zero and the jump is finished the ratio between weight and this minus value will determine the curve height and speed of the jump i will keep weight at 1 and i will adjust velocity y to make the player jump all the way to the top of the game area we have run in and jump in i would like to add more player states and properly animate them we need a fireball attack and when the player sits down i want the game to stop scrolling how do we organize and manage this functionality by structuring our javascript code in socalled state design pattern i will show you exactly how to do that in the next part we are building a fastpaced animated side scroll game with vanilla javascript and html canvas in the first episode we created the main game logic animation loop and the player let's continue building our game in this class we will apply state design pattern to our player to make it switch between the states properly we will learn how to control fps how to animate sprite sheets and how to implement multilayered seamless backgrounds with scrolling speed that reacts to player movement part 1 is linked in the video description let's go i like writing my code like this for small simple games as you can see there are quite a lot of if else statements in here already i want to add some special moves this single code block already does so many things and we have just run in and jumping if we keep adding more and more in here we can get to the stage where changing one line of code can break something else unexpectedly for small games it's fine to have all logic in one place like this but for this game we will go ahead and structure our code a little bit better i will manage player states separately in its own file i call it player states js at first i will create a simple enum object that will pair values and names of each state it will help with code readability rather than swap into state 2 i will swap the state.jumping which has a value of 2 behind it it will be easier to see what our code is doing this episode might be a bit challenging for beginners we will be passing values around between javascript modules and classes and i can imagine if you are a beginner it might take some effort to keep track of which values are coming from where i will guide you through all the steps and we will make our code easy to navigate in but this is the finale of my vanilla javascript 2d game development series so i expect you either already watched my beginnerfriendly episode on state management linked in the description or that you have already done some javascript coding before i will explain everything today no previous knowledge is needed but it will be easier if you watch the beginner class first it's up to you today's tutorial is mainly to show you how i put everything together to make a polished animated game that feels good to play check the video description for the full series i create a class i call for example state each state will have its own class so that i can give each state a different entry method to set the player up when it enters that particular state and handle method that will react to different user inputs depending on which state the player is in at that moment in time for example when the player is in the running state and i press arrow down i want to switch to sitting state but when the player is in jumping state and i press arrow down i don't want the player to sit in the air i wanted to do a crushing dive attack from above state design pattern is perfect for changing how the object behaves depending on its current state i will show you exactly what i mean as we write the code constructor will take a single argument called for example state it will be a simple line of text with the name of the state such as sit in runin jump jumping and so on inside i converted that argument to a class property i will use this value only so that i can console the name of the currently active state for debugging purposes it's not important for the logic of state swapping we will have one class for each state the first state will be sitting which will also be special because it will stop the game from scrolling as the player sits down we will export it so export class sitin constructor will take a reference to the player object as an argument so that it can access properties on the player class i am extending a class and i want the code from this constructor on the parent to run as well so i have to call super keyword here the trigger constructor of its parent class also known as a super class we can see that the parent class constructor expects a value for state this is simply for monitoring purposes i will pass it word sitting and it will get converted to this dot state property here only after we called super we can use this keyword here in a child class if we use this keyword before using super we will get an error super on child class always needs to be called before this keyword is used each class will have enter method that will run once when this state is entered and handle input method that will take input as an argument and it will keep checking if the correct key is pressed and it will switch player to a different state when that happens for example it will switch to jumping state when we press up arrow key in player js we will need three helper properties to apply state design pattern let's just write them and i will explain in a minute we will need a property called this dot this.states which is an array of values we will also need this.currentstate which will point to indexes in this array when the player object is initialized for the first time we will call its entry method to activate its initial default state i'm exporting my sitin class here let's import it up here in player.js i import the entire sitting class from playerstate.js quick overview of how we will apply steady design pattern into our code base today player object will have this dot states property which will be an array containing individual states such as sitting running and so on the player can only be in one state at a time so we will have another property here called this dot current state when this.current state is equal to this dot states index 0 player is sitting when it's this dot states index 1 the player is in the running state and so on the final piece of logic will be that each player's state is actually its own class we will have a class for sitin another class for runin there will be a separate class for every state the reason for that is that each state needs to have its own separate enter method that will set speed animation row and everything else that needs to be done whenever the player enters a new state each state class will also have handle update method which will listen for keyboard inputs and it will be ready to switch the player to a different state whenever the correct key is pressed because all state classes have their own enter and handle input method and because this dot current state points to different states as the player switches from one state to another we can just keep calling this.currentstate.handleinput and we will get different behaviors depending on the current state the player is in at that point in time and this is the entire logic behind state design pattern if it's still not clear don't worry i will go over it today step by step as we write the code it will make more sense if you practice and code with me inside this.states array i will instantiate each state class right now i'm creating an instance of sit in class here on line 14 in playerstates.js i can see that it expects a reference to the entire player object as an argument because here we are inside playerclass i pass it this keyword which references this entire player class when we enter sit in state i want to draw a different animation row in player sprite sheet let's set up sprite animation we will have frame x horizontal frame that will cycle from left to right animating the player and we will have frame y which will travel in the sprite sheet vertically whenever we switch to a different state you can see that frame y 0 is standing frame y 1 is jumping and so on changing the values of frame x and frame y will jump by the width and height of a single frame so that we can animate the sprite sheet in draw method i replace hardcoded coordinates 0 0 which are currently displaying this top left frame to dynamic values source x value will be this dot frame x times the width of the player frame source y will be dot frame y times the height of the player frame i'm getting a console error it's because i forgot a forward slash here on line one in player js now it's fixed so now frame x cycles horizontally frame y travels around the sprite sheet vertically i can see that the setting animation is frame y5 when we enter sitting state i take this dot player from line 16 which points towards the player object and i set its frame y property to 5. i could have defined getters and setters on the player object to do this by the book but i don't think it's necessary for our purposes today this code will work well back in player.js i set the initial frame y to 0 which is this standing animation now i need a method that will allow us to switch player between the states i define it down here on the player class i will call it for example set state it will take this new state we are about to switch to as an argument it will be a number corresponding to indexes in this dot states array from line 17. inside i set this.current state from line 19 to one of the states from line 17 depending on which index i passed to it right now we only have one element in the array the sitting state that's index 0. if we have more state classes in the array on line 17 i will be able to swap to index 1 2 and so on to switch player to those states keep in mind set state will take one argument called state which will be a number corresponding to the index in this dot states array then we call enter method on the currently active state to set up things like speed sprite animation and so on there's also handle input method we defined here enter method will run once every time we enter that state handle input method will be running 60 times per second waiting for keys to be pressed so it can switch the player into a different state when the user requests it by pressing the right set of keys in our case mostly arrows so far i will be calling it from inside update method on player class here so this dot current state dot handle input and pass an input value as an argument to the update method here the value of input is coming from update method on game class pointing to keys array on an instance of input handler class from line 15. this way playerupdate method can always see what keys are being pressed in our game by checking if they are present in this input keys array we defined it before here on line 3 in input js if you remember we pass it through game class to update method on player class and i will just pass that argument along to handle input method like this this code will be run in 60 times per second constantly checking what keys are present in input keys array handle input expects keys array here as an argument i called it input and we will be checking and waiting for specific keys to be pressed the main function of state design pattern is that we are basically locking player object in one state at a time and while the player is in a certain state it will only react to a limited number of keyboard inputs while the player is in the sitting state we will react to arrow left and arrow right keys and when they are pressed we will switch into running state so i say if this input value that was passed as an argument which points to this dot keys array on input handler class if that array includes arrow left key or if it includes arrow right key call set state method on player object here we can see that setstate method expects state as an argument and it will set the current state of the player to that index in this dot states array from line 17. right now that array has only one element so it will only work when i pass it index 0 as a value of this state argument here it will then call enter method on that new state we just switched to back to player states js so now we know that we have to pass this set state method a number that will be used as an index in player states array to correctly switch it into that state i can pass it number 0 here but we have this enum object here to convert numbers to words like sitting and running to make our code more readable the order of states in this enum must be exactly the same as the order of states in this dot states array on line 17 inside the player class index 0 is sitting state because it's the first element in the array this enum also needs to have the value of 0 paired with sitting which it does now i can call set state and instead of passing a number 1 which would also work but it would be less readable i pass it states from line 1 dot run in which has a value of 1 behind it as well i hope it's a bit more clear this is the most complicated part and we just covered it just keep coding with me and it will start making more sense right now there is no index one in this array yet we need to create running class to add it i copy this code block and i rename it to run in and i also put a run in here i check the sprite sheet and i can see the fourth row in the sprite sheet is run in so i set frame y to three because we count from zero in handle input on running class we will listen for arrow down and when it's pressed we switch player to the setting state we are exporting running class here i import it up here in player.js and i instantiate it as an element with an index of 1 inside this dot states array nice so now when we are in the sit in state and we press left or right key we switch into the running state when we are in running state we listen for arrow down key and when it's pressed we switch back to the seating state perfect we have all the logic for swapping states in place let's add a jumping state again i copy this code block i rename it to jump in and i put a jump in here i comment outline 31 inside player js that we used for jumping before let's refactor it when we enter jumping state we set frame y to 1. if the player is on ground that method comes from line 39 in player js we set velocity y on the player to 30 pushing it upwards as we discussed in part 1 during a jump velocity y goes from 30 to 0 moving the player upwards and then as it moves into positive numbers the player will start falling down we have a nice falling animation row in our sprite sheet so let's switch the player into falling state when it reaches the peak of its jump instead of listening for key presses we can also check for values of properties on the player when velocity y switches to the positive values and is more than player weight more than one we know the player is falling down at that point so we set state the states dot falling that will point up here so i add fallen in our enum and i give it a value of 3. we have our new jump in state but there is currently no way to enter jumping in our game we can enter it from running state for example when the player is in the running state we already listen for down arrow key we will also be checking for up arrow like this if input includes arrow up while the player is running set state to jump in so value two now i copy jump in state and i rename it to fall in i give it a text value of fallen in here while we are falling we won't be listening for any keys we will just wait for the player to be back on the ground and then we set state to run in we are exporting jumping class on line 46 and falling class on line 62. i import them up here inside player.js then i instantiate both of these classes inside this.states array the order in which you do that is important and it needs to be the same as states enum we have on line 1 inside player states js those indexes have to match you can see i'm importing jump in as index 2 in this dot states array falling is index 3 and here inside enum object jump in has also the value of 2 and falling has a value of 3. it needs the match while we are inside the sitting state we can press arrow left and arrow right and it will switch player into running state while we are inside run in state we can press arrow down to sit or arrow up to jump to keep things simple i can also check for arrow left and arrow right here inside update method because i want the player to be able to move left and right in basically all states when the arrows are pressed the controls feel better that way that means we can move left and right in the air even while we are jumping or falling or rolling when i'm in the running state if i press up arrow key we jump and when we reach the peak of the jump we get automatically swapped into a falling state when we hit the ground we automatically switch into running state great i adjust this minus velocity y value to change the height of the jump well done if you follow the code all the way here now you know how to apply state design pattern which is quite an advanced technique especially if you are a beginner we will add more states to it soon but before we do that let's properly animate the sprite sheet of our dock i want it to animate and move i delete this line of code we will handle sprite animation in this area inside update method on player class we have frame x property which holds the index of horizontal frame we have frame y which refers to the vertical position in the sprite sheet you can see that different rows have different number of frames i want to rotate between frame 0 and max frame on that row depending on which row we currently are on sitting state and running state have different number of frames we will hold that value in this dot max frame property and we will adjust its value every time we swap states since we have our code nicely organized in state design pattern it's easy to do that and to keep track of each state separately let me show you so to animate each row we will always cycle between frame 0 and max frame on that row if frame x is less than max frame increase frame x by 1. else reset frame x back to 0. it's going too fast and it's blinking for sit in state because we are including empty frames it's animating so fast because this particular sprite sheet was designed for lower frame rates it really depends on which art assets you are using but it's also easy to control fps of sprite animation independently of the fps of the entire game i can for example have the docs spreadsheet animate at 10 frames per second while the entire game is still updating at 60fps you can do it by checking animation timestamps and calculating delta time it's easy let me show you i will explain it right now we will need a helper variable here last time we'll hold the value of the timestamp from the previous animation loop request animation frame method has two special features first it automatically adjusts the screen refresh rate so most of us will get 60 animation frames per second unless you have some game in high refresh screen request animation frame also auto generates a timestamp value and it automatically passes it as an argument to the function it calls in our case animate i can assign it a variable name here i will call it timestamp for example so this timestamp is also generated by request animation frame every time it serves a new animation frame every time it loops i will use it to calculate so called delta time delta time is the difference in milliseconds between the timestamp from this animation loop that was passed here and the timestamp from the previous loop it will give us the value of milliseconds for how long each frame stays on the screen before it gets redrawn last time we'll always hold the value of the timestamp from the previous loop so when we used it to calculate delta time we override the last time with the value of timestamp from this loop so that it can be used to calculate delta time in the next loop this might be a bit complicated to understand at first but don't worry it will make more sense as you use it more often for this to work timestamp gets autogenerated only when it's called by request animation frame so for the very first initial call of animate i have to pass it some value for timestamp i will pass it zero i console delta time and i can see that it's around 16.6 milliseconds which is around 1000 milliseconds divided by 60. my frame rate is 60 frames per second perfect yours should be similar the value of delta time calculated this way depends on the power of your computer and on the refresh rate of your screen so as the animation loop runs we are recalculating delta time over and over every time we calculate it we pass it the game update method up here on line 17 i make sure update method expects that argument i want the delta time value to be used inside player class so i pass it along to playerupdate method as the second argument here inside player.js we make sure that it's expected so now the player class has access to delta time value we know how many milliseconds it takes to serve the next frame we can use that value to adjust sprite animation speed for example we can say only serve the next horizontal frame in the sprite sheet every 50 milliseconds or something like that we can get complete control over that frame rate it's simple let me show you how this particular dock sprite sheet works the best when it's been animated at 20 frames per second i will need a number of milliseconds for how long each frame should stay on the screen if the frame rate is 20 frames per second one frame should stay for a thousand milliseconds divided by this dot fps divided by 20. frame timer will cycle between zero and frame interval increasing by delta time for each frame every time it reaches the interval it will trigger the next frame and it will reset we will handle that logic here if this frame timer which starts at 0 is more than frame interval set frame timer back to 0 so it can count again when that happens also serve the next frame x horizontal frame in the sprite sheet else keep increasing frame timer by delta time until we reach that frame interval value perfect now you know how to control fps in the game the sprite sheet of our dock is animating at 20 frames per second you can see it's blinking it's because we are animating this empty frame here for sitting animation max frame isn't 5 so i remove this value when we enter sit in state we set max frame on player class to 4 we count from 0. when max frame is 4 we are not seeing the whole running animation so i set max frame inside running state to 6. i will also swap max frame and frame y to prevent occasional blinking if we swap states too fast in jumping max frame is 6 and falling is also 6. now we are correctly animating each state do you see how it's easier to keep the code organized when we separated each state into its own class occasionally we can get a situation where we swap state and frame x is currently too high and that row doesn't have that many frames so we get a quick blink to prevent that from happening every time we enter a new state we set frame x back to 0 before we swap to a different vertical sprite row with frame y it's just a small thing we have complete control of fps how fast we serve frames in player sprite sheet i can come here and set it to 5. the great thing is that the player still moves at 60 frames per second but the sprites are animating at 5 frames per second we can control these two things separately it would be very bad if controls reacted so slowly but maybe you have a sprite sheet in your game that was designed for lower fps our sprite sheets were designed for speed around 20 fps depending on what art assets you are using for your game level you might not want the player to be standing all the way at the bottom of the game area sometimes you need to adjust this value today i will give you all art assets to use so i know we will need to create some margin on the bottom that margin will have to be considered in more than one place around the code base so let's put it in the main game class so it's easy to access i want the ground level to be 50 pixels from the bottom edge of canvas this dot ground margin is 50. inside player gs we have access to it through this dot game reference so the initial vertical coordinate will be height of the game minus the height of the player minus ground margin like this this will not work because here i am creating player before i declare that class property i need to put it up here so it's available at the point when the player is created that worked i also need to adjust this on ground check because being on ground now also involves this ground margin perfect you can adjust ground margin value to match the environment in which your character is currently moving in our environment will be an abandoned monochrome city you can download all art assets in the video description if you are a beginner i suggest you use my art assigns first and get the game to work before you start adjusting it to your own version it will save you a lot of headache if you encounter some unexpected challenges because you can just look at my code to fix it we will be animating a parallax multilayered background i made a special episode about this if you want to go more in depth at a beginnerfriendly pace we build a small standalone project in there showing all the concepts and alternative approaches let's use the quickest version here so we have a new file i called background.js i will need two classes here helper layer class that will handle logic for each state separately and main wrapper class i will call for example background that will be exported and animated from the main game class it's actually quite simple let me show you layer class will need access to the game object because we need to be constantly aware of width and height of the available game area we will also need the width and height of the actual background image we will need speed modifier argument because each layer will move at a different speed but relative to the current game speed the last argument will be an image each layer will have a different image all five images are available to download in the video description i might also include some alternative art assets in there for experiments later as usual we convert the arguments that are passed to layer class constructor into class properties each layer will also need x and y position update method to move it and draw method to draw it on canvas you know how it goes now i try to keep similar code structure across all classes for clarity i could also name these methods something else if i wanted to the background images we used today are seamless which means that when they are scrolling from left to right continuously we can't see where they end and where they begin there is a small simple trick to create an illusion of endless background in a side scroller game and we are about to learn it right now click like if you are getting any value today we will be updating horizontal x coordinate vertical y coordinate will always be zero if this dot x is less than minus its entire width which means it has scrolled all the way behind the left edge of the game area and now is hidden reset it back to 0 so it can scroll again else keep decreasing x by the current game speed times speed modifier because i want each layer to move at a slightly different speed for parallax effect gamespeed doesn't actually exist yet so i declare it here on line 15 inside main js let's set it to 3 pixels per frame for example draw method will need context as an argument to specify which canvas element we want to draw on we call builtin canvas a draw image method again this time we don't need the longest version with nine arguments for backgrounds we just need to pass it five arguments image we want to draw x and y where to draw it and width and height of that image so this is a helper class that will handle logic for each individual layer our parallax background will have five layers we create and combine them together in another class i call for example background and i will be exporting that class it will need access to the main game class because we need its width and height and gamespeed properties i'm providing new images of a specific size for this project the width of each layer image is 1667 pixels and height is set to 500 pixels i made those images the exact size we will draw on canvas for performance optimization reasons you can also use larger images and you can scale them down with code but that will take more computing power and it can affect the fps of your game let's bring all 5 images for our layers into the project this dot layer 5 image is equal to layer 5. if you downloaded the project images and place them inside your assets folder you can go ahead and inside index.html bring them into the project image element with an id of layer 5 and source assets slash layer 5 dot png i also bring layer 1 2 3 4 5 like this in style css i give all of them display none we don't want to draw the actual image elements on the website we want to draw them on canvas as i said before javascript automatically creates references to all elements with an id in the global namespace so i can just pull the images in using its autogenerated variable name like this it would work like this but i noticed more people are comfortable using get element by id in here so i will do that we will also need an array that will hold all background layers so i created here and here inside background class constructor i will create an instance of layer class from line 1. i call it for example this dot layer 1 and it will be equal to new layer you can see it expects 5 arguments so i pass it this dot game this dot width distort height speed modifier will be 1 for now and the image will be this.layer 5 image from line 25. now we have one instance of our layer class let's put it inside background layers array i give it update method and inside i take that background layers array and i call for each array method on it for each layer object in the array i call its associated update method i also do the same for draw method and i pass it context because we know it expects it up here on line 15. let's see if it works i import the new background class up here in main.js i instantiate it inside game class constructor and i pass it this keyword as a reference to the entire game object because i know it expects it here i have my background now so i can call its update method i get an error we will fix that in a second i will also call draw method on the background and i call it before i draw the player because i want the background to be behind the player and i pass it context so we have an error somewhere inside our background class the first typo i made here probably already noticed i need to use this dot here to correctly point to the instance of layer class now we get draw image error so i know something is wrong with the way i'm linking my image if i check here i can see i misspelled the name it's supposed to say this dot layer 5 image nice we are animating our background layer i can adjust ground margin to move the player a bit up to match the background artwork the trick to create seamlessly scrolling backgrounds is to draw the same image twice next to each other so one at the position x and the other at the position x plus this dot with like this i give it additional plus 20 so that we can see where the second one starts here so what is happening here we have two identical images scrolling side by side when the main image one scrolls all the way off screen we quickly reset it so that it can scroll again image 2 is never fully visible it's just there to fill the left gap before the first image has a chance to reset i hope this visual makes it clear what's happening and now you know the secret of endlessly scrolling seamless backgrounds it's easy let's make them parallax which means it has multiple layers that move in slightly different speeds to create an illusion of depth of distance i already brought those images into our project in index html so i just turned them into class properties here i instantiate each layer class with its associated image i put all those layer objects inside this dot background layers array so we can cycle through all of them at once using for each method inside update and draw now we are animating all layers at the same speed i can give them different modifiers layer 1 is just gray sky no need to move it at all so its speed will be 0. the speed of layer 2 will be game speed times 0.2 layer 3 is game speed x 0.4 layer 4 will move at 80 percent of the current game speed and layer 1 will move at the same speed as the actual current game speed perfect you can see that if i change the modifier even higher it gives us faster scrolling since we connected everything to the current game speed i can change the scrolling speed of the game when the player switches to a different state maybe i want the game to stop scrolling when the player sits down and i want double scrolling speed when the player does a special attack or a role there are many ways how we can structure the code at this point i can either bring a reference to the main game object into player states so that we can manipulate game speed property from there or i can for example do it from within set state method on player class because from there we already have access to game speed i will give set state a second argument called speed inside i set speed property on game object to the speed value passed as an argument at first the speed of the game is 3 pixels per frame since we start in the sitting state the initial game speed should be zero in player set state whenever i set state i will also set game speed i might refactor this later maybe it's not the best solution but it should work let's see when we are running game speed will be one in game speed 0 jump in game speed is 1 falling also 1 run in 1 i save all unsaved changes in all my files now the game stops scrolling when we sit and it starts scrolling again when we start moving we can refactor this to make this code a bit better on the game class i create a new property called this.max speed and i set it to 3. i set this dot speed to 0 at first inside set state we set the current speed to max speed times the speed that was passed to set state that way i can adjust the actual game speed by adjusting just the max speed property on the main game class rather than adjusting the values we passed the set state in all those places in playerstate.js now we have quite a lot of logic going on if you are a beginner well done you should be really proud of yourself if you managed to follow along this was the most complicated episode in this entire project the rest will be relatively easy when you understand the tips and tricks i'm about to reveal it's important that player feels like they have control over the character quick responsive controls add a lot towards positive user experience we are building a fastpaced animated 2d game with plain vanilla javascript and html canvas element we applied state design pattern to animate our player we have endlessly scrolling parallax backgrounds where scrolling speed reacts to player movement today we will learn how to make our game more fun by adding three very different enemy types are you ready to take our dog for an adventure and help it find its way home while avoiding enemies and creatures of the dark let's go i create a new file called enemies.js and inside we declare a custom javascript class i call for example enemy i will have a constructor and inside i declare this dot frame x which will handle horizontal sprite sheet navigation and frame y will navigate in sprite sheet vertically the sprite sheets we will be using are optimized for 20 frames per second so we will control them with timestamps and delta time again so three helper variables fps frame interval and frame timer it will work exactly the same as it did in player class we will also need update method to move enemies around and draw method to actually draw their sprite sheets i want to create multiple different enemy types to keep our code organized and easy to navigate in we will use javascript sub glassine which means we will have a parent anime class that will define properties and methods shared between all enemy types and we will extend that parent class into multiple different subclasses each subclass will have properties and methods behaviors that are specific just for that enemy type so anime is socalled parent class also called a super class and we are using this special extends keyword to create three child classes also called subglasses javascript actually doesn't have classes this is just syntactical sugar modern cleaned and simplified javascript syntax behind the scenes this code is just setting up prototype chains using javascript inheritance it just looks cleaner and easier to navigate in if you write your code this way so we have a parent anime class and three child classes called flying enemy ground enemy and climbing enemy all three child classes are using extends keyword pointing towards their parent anime class this will automatically set up prototype chain behind the scenes and all these classes will have access to properties on their parent class and also to this update and draw method that way we can avoid code repetition and we don't have to redeclare methods and properties that are shared across all enemy types inside each subclass we will only define what's unique about them i will show you exactly how this works as we create three unique enemy types with very different behaviors and movement click the like if you are getting any value let's start by bringing images into our project in the video description i will give you sprite sheets for many different enemy types for now we will use just three of them if you are a beginner you should maybe use the same ones i'm using and when you have a fully working code base you can play with it and use your own custom sprite sheets we will use enemyfly enemyplant and this big spider i will hide images with css because we want to draw them with javascript on canvas there is one more thing we have to understand when extending javascript classes there is a special keyword called super it's used in two different ways because we can extend code from parent class constructor or we can extend a method from the parent class i will show you how to do both as we create different enemy types with different behaviors i have flying enemy subclass that extends this enemy super class when i create a new flying enemy i want to run all this code from parent class constructor and then i want to add some additional properties that are specific only to the flying enemy i do that by first calling super like this this will automatically run all the code from here while extending classes i can only use this keyword after i used super if i use this keyword before super i will get an error flying enemies will need access to the entire game object because they need to be aware of game area width and height so that they know when they are off screen i will pass game as an argument to the constructor here and i will convert it into a class property as usual each enemy type will also need width and height but because each enemy type has a different size i couldn't put these values on the parent class width and height will be declared here i look at my fly sprite sheet and i can see that the width of a single frame is 60 pixels and the height is 44 pixels each enemy will also need starting x and y coordinates flying anime will start at a different position than a ground nma so x and y properties will also have to be on the child class not on the parent class speed x will be horizontal speed and max frame on our fly sprite sheet is 5. by the way all my flying enemies will be flies for now but i could also have multiple flying enemy types i can have flying anime class that extends parent enemy class and i can have a bird fly and ghost classes that extend flying enemy class we can go down multiple levels if we want to in that scenario flying enemy class would only have properties and methods shared between all enemy flyers and things like width and height speed x or max frame would be declared separately on each subclass because each anime will have different sprite sheet we are keeping our code modular and well organized so that it's easy to make these changes later if we want to inside update method on the parent class we will handle movement for every animation frame i want the horizontal xcoordinate of the enemy to be increased by its speed x property i will do the same for vertical ycoordinate and speed y property we will also handle cycling through sprite frames here it will work exactly the same as it does for our player sprite sheet update method will have access to delta time difference in milliseconds between the previous and the current animation frame if frame timer from line 7 is more than frame interval from line 6 we reset frame timer back to 0 so it can count again for the next frame and we serve the next horizontal frame in the sprite sheet or if we are at the last horizontal frame we reset back to frame x 0. else meaning frame timer is not yet higher than frame interval we keep increasing frame timer by delta time until it gets there draw method will expect context as an argument inside we will draw an enemy spreadsheet using canvas drawimage method it will need 9 arguments the first argument is the image we want to draw i will hold the reference to that image in this.image property since each anime type will have a different sprite sheet it needs to be placed here on flying enemy class i use get element by id and i will point it towards this img element with an id of anime underscore fly from line 19 in index html so draw image expects nine arguments in this case the image we want to draw source x source y source width and source height of the rectangle we want to crop out from the source sprite sheet one frame and destination x destination y destination width and destination height to specify where to place that image on destination canvas it will work exactly the same as it does with player we already explained before how frame x multiplied by the width of a single frame travels spreadsheet horizontally source y argument will always be zero because enemy sprites will only have one row so we have image to draw these four values define what to crop out these four values define where to place that cropped out image on canvas as i said before we can extend parent class constructor using super keyword we can also extend a method from a parent class in this case i want to have update method on flying anime type i wanted to first run all the code from update method on the parent class and then i want to add a little bit of code that will be specific only for flying enemies update method will expect delta time as an argument i will call update method on the parent class from line 9 by saying super referring to its super class dot update and i pass this delta time along because it's expected here on line 9. doing that will first run all the code between lines 9 and 19 that code will be shared for all enemy types after i run that code i will add a little bit of code that will be specific only for flyers i can make them do so many different things here i made a special episode focusing only on enemy movement patterns before let's just pick one maybe i want vertical wavy movement before we do that let's actually add some enemies into the game to see how the movement changes let's make sure we are exporting all our child classes i imported them up here inside main.js i want to periodically run some code that will add enemies in a specific interval i will declare that code in a special method on game class i call it for example add enemy we will need some helper properties to build this functionality this dot enemies will be an array it will hold all currently active anime objects every time add enemy method runs it will take this array and it will use builtin javascript push method to push one new enemy in there push method adds one or more elements to the end of an array and returns the new length of the array we want to push one new flying enemy in there for now we are importing flying enemy class here from enemies.js and here i can see flying enemy class constructor expects game as an argument so down here in main.js i'm creating an instance of flying enemy class and i pass it this keyword as an argument referring to this main game object we will handle enemies here in sight update method on game class similar to how we use delta time to periodically serve the next frame in our sprite sheet we will have timer and interval helper variables to periodically add enemies into the game enemy timer will start at zero it will be increasing by delta time every time it reaches a value in enemy interval we will add one new enemy into the game and we will reset enemy timer back to zero let's say i want to add a new enemy every second so thousand milliseconds let's write that logic in code if enemy timer from line 23 is more than enemy interval from line 24 call this dot at nme custom method from line 38 and also reset enemy timer back to zero so it can count again towards the next enemy time else keep increasing enemy timer by delta time until we reach enemy interval again let's put a console lock inside add anime to see if it's working i will console lock this.enemies array from line 22. nice you can see as the game runs every second one new flying enemy object is added into enemies array perfect so all our enemies are held inside this dot enemies array i will run through the array and i will trigger their update method to make sure they move around for each method execute a provided function once for each array element i will use fat arrow es6 syntax here in the callback function i just trigger update method on each enemy object and i pass it the delta time from here because i know it's expected there i will do the same thing inside the draw method i will cycle through all enemy objects and i will trigger their draw method i pass it context as an argument i don't see any enemies coming let's try to use minus equals here to make them move to the left still nothing i'm consoling enemies array so let's check the console i open up the array let's change the initial x and y coordinates to 50 50 now if i open the array again and i check one of my flying enemies i can see their vertical y coordinate is none not a number javascript doesn't know where to draw them vertically let's track the problem i define vertical ycoordinate correctly on line 33 but as the game runs i'm increasing it by speed y property here on line 12. speed y doesn't exist so as a result we are breaking our code i will define vertical speed y property on my flying enemy class let's set it to zero nice we have enemy flies moving from right to left from the initial starting coordinates 50 50 as defined here i actually want them to start from the point just behind the right edge of available game area so the initial x coordinate will be this dot game from line 29 dot width nice i randomize vertical y coordinate to spread them around i want them to only move in the upper half of the game area so master random times this.game.height times 0.5 in console you can see we have an endlessly increasing array as more and more enemies are being added i actually want them to be removed when they fly past the left edge of screen i will check if enemies are off screen in this area if horizontal coordinate of the enemy plus its width is less than zero meaning it's completely hidden behind the left edge set its marked for deletion property to true this property will be shared for all child classes so i can define it only once up here on the parent class initially i set it to false so we are adding new enemies they fly from right to left when they are hidden behind the left edge we are setting their marked for deletion property to true here inside update method on game class in the area where we handle enemies we are cycling through every object in enemies array triggering their update method at the same time i will also check if their marked for deletion is true and if it is we splice it out of the array removing it splice method needs two arguments in this case index of the element we want to remove from the array so index off this enemy with marked for deletion set to true and how many elements to remove at that index we want to remove only one element now i check in the console and i see that new enemies are being added and old enemies are being correctly removed perfect let's play with the movement a little bit i can do so many things here and there's a special episode about it i can't for example randomize their horizontal speed x value so that each enemy flies at a slightly different speed let's try a random value between 1 and 2 pixels per frame i can also randomize their initial xcoordinate so that we get even more randomness in their spacing when the player starts running it becomes obvious we need to account for the current game speed when making enemies move up here on line 12 i just include game speed in horizontal position calculation i actually need to use plus here now when the player moves and when it stops moving the enemies are always positioned correctly in relation to our dynamically scrolling game world we made a lot of progress today if you are still following well done these are all fundamentals of 2d game development i hope you are getting some value out of this so the flies are moving in a straight line from right to left what if i want to give them a wavy up and down wobble as they move it's easy i will need two helper variables and these will be specific only for flying enemies so i declare them down here angle will start at 0 and we will be increasing it slowly and feeding it to mastered sine method which will map it along a sine wave it will be increasing by this custom va value velocity of angle and it will be a random value between 0.1 and 0.2 inside update method on flying anime class i first trigger all the code from the parent anime class and i will add some extra custom code that will be specific only for flying enemies for every animation frame i will increase angle by va value and then i update vertical y coordinate by math.sine of this ever increasing angle value passing a slowly increasing angle to method sign will map positions of our enemies long sine wave we can also create a circular movement by using math cosine on horizontal xcoordinate for now let's leave it like this we have our flying enemy type perfect let's create a ground enemy it will be applied so it will have different behavior it will be much simpler to implement let me show you class ground anime extends enemy so again this class will automatically inherit everything from the parent anime class we declared up top the only properties we will declare here are the ones that are specific to ground enemies shared properties will be inherited automatically because of this extends keyword constructor will expect the game as an argument and we convert it to this dot game property the width of a single frame is 60 height is 87 pixels initial x is just behind the right edge of canvas so this.game.with we want the enemy to be sitting on the ground level of our game world so vertical ycoordinate will be game height minus height of this enemy minus ground margin image will point towards anime plant image from index html horizontal speed will be zero and vertical speed will be also zero this is a plant it won't move around sprite sheet is very simple it has only two frames max frame is one because we count from zero if i don't declare update and draw methods at all on ground enemy class javascript will automatically travel up the prototype chain and it will find update and draw method on the parent anime class in main.js inside add anime function we only want to be adding ground enemies when we are moving if we are sitting down we don't want the game to keep adding new ground enemies because they would just be accumulating off screen we only want to add a new enemy if game speed is more than zero when the game is scrolling and also i don't really want to add it every thousand milliseconds every time add anime method runs i only want there to be a 50 chance that we add one so math at random is less than 0.5 master random code like this returns a random value between 0 and 1 so a value lower than 0.5 should occur on average 50 percent of the time so every time add enemy method runs we always add one flying enemy and if the game is scrolling and this 50 check is true we also add one new ground enemy i get an error which tells me i forgot to call super class constructor on my subclass easy to fix like this nice we have a ground enemy in our game i can see there is a small wobble between enemy planes and the ground texture i'm not really sure what's causing it now if you know let me know in the comments we will fix this later let's add a climbing enemy climbing anime will be a big spider suspended from a web i showed you how to extend update method to make our flies move in a different pattern i also showed you how it works when you don't need to declare any additional update and draw methods with the plant now i will show you how to extend the draw method and how to add some additional graphics in this case spiderwebs constructor will expect game as an argument we call super the trigger class constructor from the parent enemy class this.game is game as usual width of a single frame is 120 height is 144 pixels the initial starting coordinate is behind the right edge of canvas so this.game.wav vertical y coordinate will be a random position in the top half of the available game area image will point to the big spider image we linked earlier in index html horizontal speed x will be zero our spiders will be moving up and down vertically vertical speed y will be either plus one or minus one depending on this math random check this is so called ternary operator we are using it as a simple one line if else statement if math at random is less than 0.5 which should be roughly in 50 of cases set speed y to 1. else set it to 1 so if condition is true question mark return this else colon return this this will make sure some spiders are moving up some are moving down when they initially spawn in our game max frame of spider sprite sheet is 5. update method will take delta time as an argument it will first call update method on its parent anime class to run all the code from there we will also do the same thing for draw method like this here i'm checking if game speed is more than 0 and if random check is less than 0.5 and i'm adding a new ground enemy i'm going to add else if here and if this random check is false and at the same time if game speed is more than zero we will add one new climbing enemy into our game now every second we always get one fly and we get either one spider or one plant nice i'm extending update method on climbing enemy because i want to climb up and down when it's moving down and it reaches a bottom boundary we define here i want it to kinda bounce and start moving in the opposite direction upwards let's make it move upwards whenever it climbs all the way down and touches the ground level so if vertical y coordinate is more than game dot height minus height of this spider enemy minus ground margin set its vertical speed to its minus value so this.speed times 1 also i want to set its marked for deletion to true if it climbs off screen vertically so if this dot y is less than minus height of the spider sprite sheet set it's marked for deletion to true this spider spawned moving up this one is moving down when it reaches ground it bounces and it starts moving back up perfect we are also extending a draw method so let's draw a spider web spiders don't fly they should be hanging from a spider web we are calling draw method on the parent anime class that will handle drawing of the actual spider sprite sheet and we will add some extra code here just to draw the spider web i want to create a line so i start by calling begin path move method will set the initial x and y coordinates of the line i give it coordinates 0 0 for now the top left corner of canvas line 2 will define the ending x and y coordinates so i pass it spider's current x position as x and 0 as vertical y now i can stroke my line i don't see any line right i need to use this dot y here to move it on screen and here's our spider web it works let's make it look better i wanted to start from this dot x and 0 so just above the spider nice so it goes from the top left corner of spider sprite sheet upwards i need to center it horizontally so plus the width of the spider divided by 2 and i increase y by 50 to actually touch the spider image almost there i just need to also offset the initial starting point of the line like this i'm happy with this if you are designing a game with multiple levels you can for example have a different flyer different ground enemy and different climbing enemy for each level so three enemy types like this could be enough depending on your game structure also it's possible to put many more enemy types into the game and mix them together it's up to you i gave you all the tools you need if you have any questions let me know we will learn how to handle collision detection next time we will also apply particle effects to give the player a fire trail and we will add two more states with unique animations for when the player is attacking and when it gets hit well done on completing the lesson see you in the next one we created a player we have our game world and we added dangerous creatures of the night it's time to add some interactions and special moves today we will learn an easy way how to handle collision detection and we will resolve collision between player and enemies in two different ways depending on the current player state if the player is rolling enemies are destroyed and we get score points in any other state it's the player who receives a hit we will also add dust particles and fire trail if you followed any of my other creative courses you can also use those animated trails and use them here like you see in this demo i like to combine game dev and creative coding with javascript and html canvas it's all the same set of techniques let's go we have player and enemies in our game we want them to be able to interact in different ways with each other let's apply collision detection first i want to draw a rectangle around the player and around each enemy to see their collision areas so called hitboxes i go to input js file and i delete these console logs i want our game to have a debug mode when i press letter d on my keyboard we enable debug mode and collision hitboxes will be drawn when we press the again we exit debug mode and hitboxes will be hidden it's very simple to implement in keydown event i create an else if statement if e.k is d set debug property on the main game object to its opposite value if it's currently true set it to false if it's false set it to true in main.js i created this.debug property on game class and initially i set it to true in draw method on playerclass before i draw the player's spritesheet i say if this.game.debug is true draw a rectangle around the player this rectangle will be exactly the size of player's hitbox so from this.xdist.y player's coordinates to player's width and height like this now i can go back to input js here we are toggling debug mode on and off by pressing letter d for this to work i need to bring a reference to the main game object here i pass gameobject as an argument to the class constructor and i convert it to a class property from here we can point to the game object and toggle debug mode on and off finally we know that input handler class expects game as an argument so here on the main game class i passed this as an argument now when i press letter d on my keyboard we are toggling debug mode on and off perfect i can also create hitboxes around enemies inside the draw method on anime class i say if this.game.debug is true stroke rectangle around the enemy like this this will work reference to the game object is not on the main parent enemy class but we have it down here on each enemy type separately our game now has a debug mode you can toggle it on and off by pressing d these hit boxes represent collision areas when the player hitbox touches any of the enemy hitboxes i want them to interact in some way we can have multiple different interactions today i will show you how to have two different interactions when the player collides with an enemy while in rolling state it will destroy that enemy and we get some score points if the player is not rolling it will get hit and it will stop its movement for a moment and play dizzy animation from our sprite sheet we will use a simple collision detection formula between two rectangles to check if player and enemies interact here inside the player class i create a new helper method i call for example check collisions inside we will cycle through enemies array that holds all currently active enemy objects and as we cycle through them one by one we will compare their x y width and height to the current x y width and height of the player object so this dot game dot enemies each and for each anime object i will run the following callback function we will have a simple if else statement if some conditions are met collision is detected else there is no collision to check if two rectangles collide which means they touch or they overlap we have to compare their x y width and height keep in mind that the way images our sprite sheets are drawn on canvas we go from their x and y coordinates from the top left corner of the image to their width and height like this so now player's current horizontal x position is here and vertical y position is here for example we need to check if xcoordinate of this enemy is less than xcoordinate of the player plus player with if this point is less or to the left on the horizontal xaxis from this point at the same time we check if xcoordinate of the enemy plus the width of the enemy is more than the current xcoordinate of the player if this point is to the right of this point if these two conditions are true we know that the player and enemy are colliding horizontally we still don't know if they collide because they could be far away from each other vertically we will need two more checks here we check if the enemy's current vertical y position is less than vertical position of the player plus player's height we check if this point is above this point and finally we check if enemy's y position plus its height is more than y position of the player if this point is below this point only if all four of these conditions are true player and enemy are colliding even if one of these is false this entire if statement will evaluate to false and we know there is no collision if we collide we will set marked for deletion property on that enemy object the true i will also add one more score point so this.game.score plus plus i save changes and in main js i need to create this dot score property and initially i set it to zero now i go back to player js i take our new check collisions method and i'll be constantly calling it over and over from up here inside the update method like this and we have interactions in our game whenever the player hitbox touches a hitbox of any enemy that enemy gets deleted perfect whenever we destroy an enemy we are also increasing our score but we can't see it yet let's create some ui elements i create a new file called uijs inside i create a custom class i call for example ui and i will be exporting it be careful about lowercase and uppercase letters with the word ui make sure you spell it the same across our code base constructor will need a reference to the main game object because that's where the current score value is stored i create a property called font size and i set it to 30 pixels for example font family will be helvetica you can also use any google fonts here just link them in index html and use their font family name here if you want to it will work this ui class will have just one method i call for example draw its job will be to draw all ui elements and game statuses that we need first i declare some basic settings context.font will be this dot font size plus pixels space plus this dot font family in this part we will declare code that's specific to drawing score up here some more global settings text align will be left and fill style for all fonts will be kept on the main game object in case we need to draw fonts from some other modules as well this.game.font color it doesn't exist yet so i declare it here online 27 in main.js file to draw score i call built in fill text method and i pass it some text we want to draw so score colon space plus this.game.score that's a variable from line 26 in main.js and i want it to be drawn at coordinates 2050. we are exporting our new ui class up here so we can import it to main.js like this i will instantiate ui class inside game class constructor as usual and i pass it the reference to the main game object so this keyword inside the draw method on game class i take this dot ui property that holds an instance of our new ui class be careful about capital letters here and i call it the draw method and i pass it context perfect we are drawing score and it's increasing as we collide with enemies so this is how i like to handle drawing game text and statuses if we want to display more information to the user we can just add more code inside the draw method on our new ui class we are keeping our code modular and organized today it's easy to expand it later i want to add more player states we will have two different attacks and a separate state that will play dizzy animation when the player gets hit by an enemy let's go ahead and add them up here inside player states jazz into our enum object that holds key value pairs and it assigns each state number a more human readable value we will have rolling state with index 4 diving state with index 5 and hit state with index 6 for when the player gets hit i copy this entire code block and i rename it to rolling i will also put rolling in all caps here i check my sprite sheet and i can see that rolling animation is on the row 6 counting from 0 so frame y is 6. i want player to start rolling when we press enter and i want it to keep rolling as long as enter key is pressed down inside handle input we deal with switching states we only want to switch player to a different state when enter is not pressed anymore so if input doesn't include enter and at the same time if player is currently on ground we can exit rolling state and switch the player into running state else if input doesn't include enter and player is not on ground if we stop drawing in the air switch into the falling state like this we have a rolling state now we can decide from which states we will allow the player to enter rolling in this case i will allow it from all states because player can start rolling anytime inside handle input method on sitting class i say else if input includes enter set state to rolling and pass it speed of 2. rolling will increase the scrolling speed of our game compared to the regular running speed i take this else statement and i paste it down here inside the running class we can also start rolling when we are running i do the same in jumping class we can also start rolling while we are in the middle of a jump for now i will not allow player to start rolling while it's falling let's see how that feels we can always add it later so now we have rolling with a value of 4 up here inside our enum and we are exporting rolling class on line 94. on line 1 in player js i import rolling and i create an instance of it inside this.states array on line 21. i get an error it's because i didn't save changes i made to playerstate.js vs code editor indicates that you have unsaved changes in a file with this little icon here i go in i save it and now i can press enter and i can roll around nice work i can start rolling from running state from sitting state and from jumping state i'm testing my gameplay and i feel like i would like to start in while i'm rolling on the ground like this but the game won't allow me to do that i can't enter jump while rolling on the ground because we didn't write that behavior let's do it in handle input method on rolling class i say if input includes enter which means we are rolling and if input also includes arrow up at the same time remember that our input keys array can hold multiple keys at the same time if enter and arrow up are pressed at the same time and if we are rolling on the ground at that moment so this dot player on ground is true we will push player up in the negative direction on the vertical y axis this dot player velocity y minus equals 27 now i can roll around and i can jump up and down like this this feels much better to play this is a superhero dog i want the controls and movement to feel good and quick this dog can roll and jump around freely and the controls are very precise time to add some particle effects we will have three different particle types in this game dust that comes from the ground at player's feet when it runs on solid ground blazing fire trail when the player is rolling and diving and a big splash of particles when we dive and stomp into the ground i create a new file i call for example particles.js inside we will have the main parent class called particle i will not be exporting it it will just contain properties and methods shared between all three particle types constructor will need a reference to the main game object marked for deletion will be false at first update method will also have some code shared between all particle types horizontal xcoordinate will decrease by the amount of speed x and the game speed like this vertical y coordinate will be affected by speed y property for every frame the size of each particle will decrease by 5 when size is less than 0.5 pixels the particle is small enough and we will set its marked for deletion property to true values like speed x and size don't exist yet i didn't declare them on the main particle class because they will have different values for each particle type we need to make sure we define them on the child classes because if javascript can't find these properties when update method runs we will get an error so child class i call dust extends parent particle class we will be exporting it we will also have splash particles for when we hit the ground at high speed and fire particles for the attack animations i start with the dust class constructor will need a reference to the main game object and x and y coordinates because the location of the particle will depend on the player's current position we want them to appear under the player as it moves around i call super and pass this game along because it's expected up here this will trigger class constructor on the parent particle class activating all shared properties size of dust particles will be a random number between 10 and 20. xcoordinate will be x that is passed as an argument same goes for the ycoordinate horizontal speed x will be a random number between 0 and 1. vertical speed y is also a random number between 0 and 1. color will be black draw method will take context as an argument as usual i want to draw dust particles as circles so we start with begin path we create an arc add coordinates this dot x distort y with a radius of this dot size start angle will be zero and angle is mothered by times two so full circle we set fill style to this dot color and we fill the path with black color we are exporting dust so i will import it up here on line 1 in player states js since we are using state design pattern it makes sense we control particles from here as well because they will be closely tied to player states i have a problem now if i want to handle particles from here this way i need access to the main game object when i initially built this state management code i thought i would only need access to the player class but we need to go one level up and access the game object this is why it's good to plan your code bases well before you start writing the code i will have to do a little bit of refactoring here to make sure we have access to the main game class from within each individual player state class here on line 14 i pass the main state parent class a second argument called game and inside i convert it to class property this.game equals game i want to replace all references to the player object with references to the game object game object contains the player so i will still have access to the player object from there constructor on the sitting class will expect the game as an argument we delete this line with player i pass that game object reference along to the parent class constructor as a second argument because i know it's expected here on line 14. it will get converted to this.gameclass property now if i want to access player in these 5 places i need to say this.game.player in vs code you can highlight a portion of text and hold ctrl key down then whenever you tap letter d it will highlight another occurrence of that text using this you can select multiple lines at the same time i tab d four times to select all five occurrences of this text and that gives me multicursor selection i can use left and right arrows to move around and i just type game dot i do the same in the running class i pass it game i remove this player line and i pass game as the second argument to the superclass constructor then i select one two three four five six and i need this.game.player here in all these places i do the same in jumping class refactoring sorry i should have planned this part better we are almost done i replace all 9 occurrences of this dot player here with this dot the game dot player falling class doesn't have much code so this one is easy and rolling class is the last one we need to refactor one two three four five six seven eight nine and this.game.player if i save this it will break our code because our state classes are expecting game as an argument now so on line 21 in player.js we are currently passing this keyword which means player object i need to pass this.game from line 5 instead to all of them now we are getting some new errors and that's because i'm passing game object as an argument and immediately i'm triggering that state class and its enter method but at this point the game object is not yet completely loaded so the initial state is failing i need to cut these two lines of code and i only want to run them when the rest of the game object is ready so add the end here when everything is ready including game class player class and all state classes we take current state property on player class and we set it to states 0 sit in state and we trigger enter method on the sitting state we refactored our code and now everything is working again we are well positioned to start adding particles through our state classes we have a lot of console logs here i press ctrl f and i search for console i delete this one on line 61 in main.js and this one on line 65 we also have a console lock on line 57 in player js i delete it debugging is better with a clean console so we are exporting dust class here and we are importing it up here in player states js i will hold all currently active particles in an array on the main game object so i created here these two particles will be an empty array at first back to player stage gs i only want to add dust when the player is running so inside handle input method on running state that runs 60 times per second i will be pushing one new particle in every time it runs this.game.particles.push and i pass it new dust on line 14 in particles.js i can see that the dust class constructor expects game x and y as arguments so i pass it this dot game from line 16 i will also be passing the current x and y coordinates of the player because i want the new particles to appear at player's current position i close some of these javascript files for now to keep our workplace clean inside update method on the game class after this block that handles enemies we write our code to handle particles on line 25 we have this dot particles array that holds all currently active particle objects we are pushing new dust particles in here from inside running state class i take that array and i call for each for each particle in the array i will call their update method if particle is small enough and its marked for deletion property has been set to true we call splice method to remove it splice method will need index of the particle we want to remove and how many elements to remove starting from that index for each method passes autogenerated index argument so i can just assign it to a variable name here i call it for example index and i pass it the splice to identify the particle to remove and i want to remove one element at this index so here we call update on all active particles and we delete old ones inside the draw method i will cycle through all the particles again and i will call draw method one optimization tip here would be not to cycle through the same array once in update and once in draw method i can for example have a utility handle particles function that does all of that there are many ways to refactor this code we might do it later for now this code will work well you can see we are drawing our dust particles from the top left corner of the player hitbox only when we are in a running state nice i will count lock this.particles array to check if old particles are being correctly removed we don't want to have an endlessly growing array in our project that would become a performance problem soon in console i can see that particles go up to 50 or 60 and when we stop running the array is getting smaller and smaller until it's empty again perfect i want the dust particles to come from a different point relative to the player i adjust horizontal xcoordinate by the half of player's width like this i will also adjust vertical y coordinate by player's height pushing the particle's initial coordinates down closer to the game level ground you can see how well this works in combination with state design pattern we are only adding new particles when in running state when players feet are moving and touching the ground i can go to my dust class and play with properties of the dust i can make the particles different shape or size here if i want to i can also give them a different color red blue it will all work i can also do a semitransparent color using rgba color declaration like this i'm happy with this but feel free to play with the code and adjust these effects i came up with two different versions to animate fire for this game i showed you both versions this is the version with svg filters where we are blurring and sharpening particles to create this liquid smoke effect i use this a lot in my generative art videos you could actually look at any of my creative coding videos where we build trails and use that code to give your player a unique trail effect it will be compatible with everything today i will do something i haven't showed you how to do before i will use a particle image it will be this simple flame texture canvas is very good and efficient at drawing images drawing a rectangle or an image are often two most performance efficient options for an effect like this from my experience you can download the fire texture in the video description the texture is big i will probably make the image smaller before i give it to you for download you can also color shift the image in photoshop to create blue or red fire trail if it fits your level art assets i set its display to none with css we will use this image here for our fire class constructor will expect game x and y as arguments this.image will be this fire texture image i gave it an id of fire size will be a random value between 50 and 150 pixels x will be passed as an argument and same goes for y horizontal speed will be 1 pixel per frame and vertical speed will also be 1 pixel we have update method on the parent particle class i will first call the code from here so update super update like this draw method will take context as an argument and it will call draw image i pass it this dot image from line 39 this dot x this dot y this dot size as width and this dot size as a height nice so this is our fire class we are exporting it so i can import it on line 1 in player states js i can copy this line of code from running class that is adding a new dust particles i pasted inside handle input method on rolling class and instead of dust i instantiate the new fire class we just wrote now when i roll i'm getting a trail of fire i adjust these properties a bit before we fix the position of our fire trail let's make the individual fire texture images rotate i will need two helper variables called this.angle which will start at zero and this dot va velocity of angle it will be a random value between minus 0.1 and plus 0.1 in a site update method i will increase angle by va for every animation frame we will be rotating so to make sure the rotations don't overflow to other elements and only affect this fire particle i will wrap this code between save and restore this will make sure all canvas settings i declare in between will only affect this one particle to rotate anything on canvas first we have to translate rotation center point from its default position at coordinate 0 0 in the top left corner of canvas over the center of the item we want to rotate so i will translate to this dot x and this dot y of this fire particle that particle is a rectangular image so i'm translating to its top left corner then i call build in rotate method that takes angle value in radians and it will rotate everything that's drawn after this call unless we restore canvas again to its original default state if i roll now we are getting a spiral of small fire particles in a big circle around the player it's because we are translating to this dot x this dot y and from that point we are drawing again to the distance of this dot x this dot y here i fixed that by setting this to 0 0 because position of particle on canvas is already defined in translate method here translate method moves rotation center point and what is considered coordinate 0 0 on canvas to the coordinates we pass to it so because of this translate call for these particles coordinates 0 0 on canvas are here in this area i'm translating to the topless corner of each fire image of each particle rectangle i want to center it so i adjust this value by half of its width and this one by the half of its height canvas rotation can be difficult for beginners but we just covered all of it i have more detailed lessons on this topic but for now let's just move on i can increase the size of fire particles here on line 40. i can also give them some horizontal wobble using the same technique we used for flying enemies for each frame i increase x by a sine value of ever increasing angle and it will map horizontal x positions along an endless sine wave shape if you are a beginner all you have to understand about this is that if you pass math design and ever increase in angle value our angle is increasing here on line 50. it will mod positions along a wavy path if you look at the particles now there is some left right wavy movement i can also make the particles shrink slower by adjusting this value this will result in a longer fire trail as particles take longer to be small enough to be removed i can make the rotation faster or slower by adjusting this range of values i can increase particle size i can make them shrink faster in main.js i remove this console lock on line 53 i want to make sure we don't get too many particles i want to have a property that will limit the maximum amount of particles we allow in our game so we can easily adjust that value if we need to so inside update method on the main game class in this section where we handle particles i say if the length of particles array is more than 50 i want to slice the array and remove everything from 50 upwards i do that by taking these particles and assigning it to the same array but sliced from index 0 to index 50. it will only allow the first 50 particles to be in this array anything over and it will get sliced away slice message returns a copy of an array with only a portion of elements from start index to end index we defined the original array will not be modified so that's why i'm overriding it like this because in this case i want to modify the original array so we have some hardcoded values repeated here and here let's replace them with a variable i call it for example this.max particles i declare it up here and i set it to 50. i can see it works because it slices particles from the array you see how they disappear and we are getting gaps in our particle trail i actually want to slice particles from the other side of the array i want to remove the old ones not the new ones i can change the arguments i pass the slice method or i can change how we push our dust and fire particles into particles array in player states js on line 104 instead of using push method which adds one more element to the end of the array i will use unshift built in array method instead unshift method adds one element to the beginning of an array so now when i'm slicing from index 0 to index 50 i keep those new particles and i'm removing old ones if their index exceeds the value stored in max particles variable i do the same thing on line 48 i will be unshifting dust particles adding them to the beginning of our particles array to check if everything works i will control lock distort particles from here it starts empty if we start rolling it fills with fire particles if we run it fills with dust particles it never exceeds 50 particle objects so our slice method is correctly limiting the length of the array nice i'm on a strong computer so i will set my maximum particle limit to 200 but you can keep it on a lower number if you want to it's up to you i will also delete this console look on line 57 to clean up congratulations on completing this lesson in the next part we will make our game look and feel better by adding more animation it will help the player to get more visual feedback to the events happening in the game i'll see you there hey creative coders in this episode we will finalize player abilities and particle effects we will animate collisions with a special sprite sheet and we will add win and loose condition based on game timer we will also clean up some loose ends in our code let's finish the base game and then we can talk about some optional bonus features havana i want to create a second attack this time it will be a crushing meteor attack from above player can only enter this state when it's in the air it's a perfect use case for state design pattern we have here in our code base when the player is running on the ground and we press down arrow key it sits down when the player is up in the air we press down arrow key it will do a crushing dive attack from above i copied the entire code block with the rolling state class and i call it dive in i also pass a string that says dive in in all caps to superclass constructor all the values inside entry method will stay the same because dive in uses the same sprite animation row as rolling we will also leave the same fire particles code because diving also leaves a fire trail while the player is in diving state it is just moving fast towards the ground when it hits the ground and this statement is true we switch player to the running state to keep the momentum going i can delete this entire else if statement and here i say else if input includes enter and player is on ground transition directly into rolling state it should make the transition animation connect better we have our diving state but there is currently no way to enter that state let's define rules for when it can happen we can enter dive in state while we are in a jumping state when we are jumping and we press arrow down we set state to dive in and game speed will be zero because we are moving directly down let's take full advantage of the fact that the scrolling speed of our game world is connected to player states we can also enter dive in state while falling so i just copied the same else if statement here and we can also dive while rolling let's test it and see i save my changes and the code breaks because we need to import and instantiate the new dive in class i import it on line 1 and i create an instance in this dot states array on line 21. it works i want to feel like we are slamming into the ground with a great power but right now the player hovers in the air for too long in enter method on diving state class i set velocity y to plus 15 instantly giving the player a massive push towards the ground nice now it feels like there is some power behind that special move as i'm diving and hitting the ground player kinda gets stuck below the ground level let's fix that so here inside update method on player class we handle horizontal movement and horizontal boundaries here we handle vertical movement and vertical boundaries will be defined here let's keep ourselves organized i want to make sure that the player cannot get stuck below ground level like this so i will limit its vertical position if this dot y is more than the height of the game area minus the height of the player minus ground margin set player's vertical y position to game height minus player height minus ground margin like this now the player can never move to the space below this point below the level of ground texture in our game world we have one more particle class i called splash when the player does a meteor dive attack from above and it hits the ground i want it to do a flame explosion and i want the flames to splash in all directions to make that move look and feel very powerful constructor will need three arguments as usual game and x and y positions i trigger constructor on the parent super class and i pass the game along so this code will run size of the splash particle will be a random number between 10 and 200 pixels this dot x is x this dot y is y speed x will be a random number between 3 and plus 3 because i want them to splash in both directions horizontally speed y will be between 2 and 4 for example i want the particles to start moving up but as the gravity slowly grows stronger i want them to curve and start moving down similar principle we used for player jump in logic image will be the same one we are using for fire particle class update method will at first call update on the parent particle class as usual gravity from line 40 will be slowly increasing by 0.1 and this dot y will be increasing by the ever increasing gravity value to get that curved path draw method will just draw the fire image from line 41. we are exporting splash class so i import it online one in player states js i can't really create this particle explosion when we enter dive in state because at that point the player is still in the air i wanted to create it as we hit the ground so i could add exit state to all my states which would be an ideal location for this to happen given our code structure i can also create some small transitional state just for this or i can just do the simplest option and create the explosion in this else if statement on line 133 when player is in diving state and handle input method detects we touch the ground we set player state to run in and we create our splash particle i use unshift again to add one particle to the beginning of the array and i pass it game x and y position of the player one particle wouldn't be very impressive so i create a for loop here and i will run it 30 times we will create a splash of 30 particles i'm getting some errors it's here on line 1 in player stage js i misspelled my class name when i dive i get another error it just says that i forgot to pass context to draw method on splash class console errors are usually good at pointing us to the file and line of code where the problem is these two errors were easy to find and fixed thanks to my browser console now when we hit the ground we get a splash of particles i offset initial x coordinate maybe like this i also offset the ycoordinate i adjust the initial position values i pass to splash particle class constructor i'm kind of just playing with the values and offsetting them in random way because i want the particles to shrink in size which makes them move towards their top left corner i adjust this value there is a better way to deal with this but i think for the purposes of this class we can just do this quick hack it will look good enough and i just speed x like this this looks alright for now i think we get a nice impact animation when we hit the ground perfect i also want to have a player state that will play dizzy animation when we get hit by an enemy while we are not in a fireball state i call it hit i delete this line that adds fire particles i also deleted this i check my sprite sheet and i can see that max frame for this animation is 10. frame y is 4 and i delete this i will spell class name like this and i pass it hit here with this state class i will do something i haven't showed you before we can enter a state have it play its animation row once and when that animation has been played we automatically transfer to another state so the trigger for switching state will be animation frame this time so while we are in this hit state this animation row is playing i will wait until frame x is at position 10 and i check if player is on ground and i switch player back to running else if we are on the last frame on this animation row and if player is not on the ground we set state to fallen nice up here i can see that hit state has an index of six i import it into player.js module and i instantiate it as the item with an index of 6 inside this dot states array ideally i want to do all my state swapping from within player states js i could do it through a set of flags and flipping values around but since this class is beginner friendly i will do a simple thing and switch my state from here now i want to enter this new state when player collides with an enemy and it's currently not in rolling or diving state so if collision is detected we will always mark enemy for deletion regardless of what type of collision it is i delete this else block we won't be needing it we are going to run if else statement if collision is detected if we detect collision and player is currently in rolling or diving state so index 0 1 2 3 4 and 5 player is invulnerable in these states so it will destroy enemy and give us plus 1 score this.current state is this dot states 4 rolling or if this.current state is this dot states 5 divin increased the score else meaning the player collided with an enemy while it wasn't in one of those two states it means player will get hit by enemy and it will play the hit animation we will of course get no score points for that i call this dot set state and i pass it 6 the index of hit state and i pass it speed 0 because i want the game to stop moving for the duration of this state to properly emphasize that we collided with something if i test it i can see the score is correctly increasing as we hit enemies in rolling or diving state and if we collide with an enemy while not in one of these states we enter hit state perfect great job if you are coding alone hope you are getting a lot of value when the player collides with an enemy i want to run this sprite animation let's handle that logic in a separate module i will call it for example collision animation js you know how we do this by now there will be a class called collision animation constructor will expect the game object reference and x and y positions we convert game into class property as usual you can download the image in the video description i place it in my assets folder and i link it here in index.html i give it an id of collision animation i hide the image with css sprite with the width of a single frame is 100 pixels sprite height is 90 pixels we will have size modifier to randomize the sizes a bit it will be a random value between 0.5 and 1.5 the width will be multiplied by this dot modifier value like this sprite width times size modifier height will be sprite height times size modifier it's a rectangular image and i want x position to be in the middle of the image that's why i waited until now to convert x and y into class properties we can only do it after we calculate the width and height of the animation i want to push x and y over the center of the animation so x will be x coordinate passed as an argument minus half of the width y will be y coordinate minus half of the height frame x will start at 0 max frame is 4. marked for deletion will be false at first we are animating a sprite sheet so as usual we use a draw image built in method and pass it nine arguments image we want to draw so this dot image from line four source x will be frame x times sprite width for horizontal navigation around the sprite sheet source y will be 0 because this sprite sheet has only one row source width is sprite width source height is sprite height so these 4 values specify which area we want to crop out from the source sprite sheet now i pass it for more values destination x will be this dot x from line 10 destination y is this dot y destination width and height will be the width and height we calculated on lines eight and nine these last four values determine where to draw that cropped out frame on destination canvas update method will make sure that collision animations move with the game world so this dot y minus equals this.game.speed we export the class up here on line 1. i import up on line 2 in player js because this is the module where we handle collisions i create an array that will hold all currently active collision animation objects i call it this dot collisions and it will be an empty array at first we have collision animation class available so i go down to check collision method and every time player collides with an enemy we set marked for deletion on that animator true and i will also push one new collision animation object into this.collisions array i can see it expects game x and y so i pass it this.game and i pass it x and y coordinates of that enemy since enemy is a rectangle i pass it in the middle of that rectangle horizontally and vertically like this i want the collision animation to be centered exactly over the enemy that just collided with the player inside update method on game class down here we will handle collision sprites for each object inside collision array we will call its update method and i will pass it delta time because we want to slow the animation down if that collision object is marked for deletion i splice it out of the array same as we did with particles inside the draw method i will cycle through all the collision objects again and i will trigger draw method on each one nice we are drawing collisions we are just drawing the first animation frame in the sprite sheet let's go here inside draw method on collision animation class and animate frame x if frame x is more than max frame set marked for deletion to true and console collisions array and i can see that collisions are correctly being added and removed i can delete this console log collision animations are running very fast we can control their fps frames per second using delta time delta time is the difference in milliseconds between the time stand from this animation frame and the timestamp from the previous frame it will be passed as an argument up here we will need three helper properties fps will define frames per second frame interval will be the amount of milliseconds that needs to pass before we serve the next animation frame it will be one second thousand milliseconds divided by fps frame timer will be counting from zero to frame interval over and over every time it reaches the value in our frame interval it will reset back to zero and it will serve the next animation frame in our collision animation sprite sheet so here i say if frame timer is more than frame interval only then serve the next horizontal frame and reset frame timer back to zero so that it can count again for the next loop else keep increasing frame timer by delta time now collision animations are animating at 15 frames per second i can also randomize that fps not sure what that will look like let's try a random number between 15 and 25 frames per second i can make that a larger number it will be capped at 60fps anyway i think smaller numbers will look better since this spreadsheet only has 5 frames this will make sure they don't disappear too fast i will set the initial value for debug to false so we don't see collision rectangles on the first page load you can still view them by entering our debug mode by pressing the letter d win condition for this game will be a time limit we need to get as many score points as possible within a specific game time window i want a fast paced fun game we will store game time in this dot time variable here on the main game object when time reaches max time value the game level is complete for testing purposes let's set that time to 2000 milliseconds 2 seconds just for now inside update method we will be increasing game time by delta time that's passed as an argument up here milliseconds between animation frames will be accumulating in this dot time variable giving us the total amount of time that has passed since the game started if time from line 33 is more than max time from line 34 we set game over to true we need to declare this game over property up here when the game over is true i want to display a scoreboard a custom message and i want the game to stop animating down here in animation loop i say only request the next animation frame if game over is false this will make the game freeze and stop animating when game over happens i could also have just disabled controls and have the player running endlessly in the background you can customize your game over screen later based on your preferences i open uijs and here i want to display game time and game over messages let's start with the timer i want the font to be smaller let's say 80 percent of the font size we used to draw score i call fill text and i say time colon space plus this dot game time add coordinates 2080. nice we are drawing game time we will fix this but first let's also draw a game over message if game over is true set text align to left i want font size to be double of the base value i will have two messages one where the level is successfully completed and one for when the player fails to get enough score points in time this will be the winning message i will say booyah in large letters codiness will be the middle of canvas so game width times 0.5 and game height times 0.5 okay i set text align the center i need to fix this to actually set font size correctly i need to move this space from here to here and the same on line 14. nice winning message will have a second line of text with smaller font size that says what are creatures of the knight afraid of you exclamation mark exclamation mark this message will show up when we win i change font size to 70 i move the first line up 20 pixels and the second line down 20 pixels nice so this is our winning message i want this message to display if score is more than 5 for example this is just for testing purposes when we have the whole game working you can tune it and you can set game time and the score required to win the game to different value depending on how difficult you want your game to be if game score is more than 5 we display this message else meaning game over is true and game score is less than 5 we display a different message i will say love at first bite i like to keep the halloween theme the second line will say nope better luck next time so this is when we fail the level the tested i give us more game time so we can get enough score points 10 seconds nice win condition works well and now lose condition let's wait perfect we can also lose if we don't get enough score points in time we need to fix game timer it's showing milliseconds i want it to show seconds so i multiply it by 0.001 to move the decimal point from milliseconds to seconds and i only want to see one decimal space so build in javascript to fixed method and i pass it one we can also highlight the text to make sure it doesn't blend in with the background i wrap all the code inside the draw method on ui class between save and restore that means all the settings here will only affect this text i want to apply canvas shadows and i don't want them to be applied to players and enemies canvas shadows are still not well optimized in firefox so if you notice lower frame rate i suggest you don't use them but if you want to know how to use them it's simple shadow offset x 2 pixels shadow offset y 2 pixels shadow color white and shadow blur 0. now our text gets a nice white highlight we could also achieve the same effect by drawing the same text twice and the second one would have 2 pixel horizontal and 2 pixel vertical offset that would be more code but it's more performance efficient than using builtin canvas shadows let's clean up the code and fix some small bugs we have here when the player gets hit i don't want it to be able to move left and right when the player is in state 6 left and right arrow inputs will be disabled on line 11 in collision animation gs we are calculating vertical ycoordinate so this value should be height in running state we are setting max frame to six we are missing two frames max frame should actually be eight when i'm rolling on the ground and i press down arrow key player starts diving and it's causing this weird movement pattern we are not supposed to be able to do a dive attack when we are on the ground we can only switch to diving state when the player is not on the ground like this that fixed it one last small thing is here on line 61 in main.js we don't really need to call slice method we can just set length of particles array to max particles value like this in the next episode we will add more bonus features but from this point you can consider the game complete feel free to add your own features and run your own creative coding experiments i'll see you in the next one this is a final episode where we quickly implement some of the bonus features i showed in the previews we will improve visuals and clean up our code i will start by quickly changing background images just to keep things interesting you can download the forest background layers in the video description and i just replaced them in the assets folder overriding the city images i backed the old images up somewhere else on my computer you can also go to background.js and adjust speeds of individual layers sometimes a different background art looks better when speed modifiers on the background layers are adjusted i also changed ground margin on line 17 in main.js to better fit this new forest environment since we are changing visuals let's also change the font to something nicer you can go to google phones and choose any font from there it will all work and it's very easy to implement let me show you with creepster because this is a halloween themed game we are in a scary dark forest escaping from creatures of the dark when you choose your font click select this style now i click up here and it will give us everything we need to use this font on the web in our web browser game i copy this link tag you can also select multiple fonts and they will be automatically added to the same tag i will use just one font for now i copy the link tag and i paste it up here in index html notice i put it before my custom style css file because i want the font to be available when that file loads then i just take this css rule and i apply it to canvas element now i can use this font all over my project and canvas will draw it i will use it in uijs for score timer and game over messages by replacing helvetica with gripster here i think this looks much better and you can choose from so many different google phones to fit the art style of your game i have other favorites on here for example a font called bangers for a really cool comic book art style i want the player to have a limited number of lives and i want those lives to be displayed on screen each life will be represented by a small image of dog head you can also use heart image or something completely different it's up to you if you want to use the same image as me you can download it down below as usual i bring it into the project here in index.html first then i hide it with css i will be drawing the lives here in uijs so in the constructor i bring the image into the project like this i will call it for example this dot live's image down here under timer we will draw player lives i will call draw image and i pass it the image i want to draw i want to draw it at coordinates 20 95 and width and height will be 25 pixels nice we are drawing it here i created this.life's property on the main game object let's start with 5 lives back in uijs i create a for loop that will run once for each life and it will draw an image that represents it now i'm just drawing five images on top of each other i need to multiply horizontal x position times index from the for loop actually it will be the width of the image so 25 pixels times index plus left margin of 20 pixels perfect now when i change the value here it changes how many lives are drawn on screen maybe you want your game to be easy you can give the player 15 lives to start with i will go back to 5 lives in player.js in the area where we handle collisions when the player collides with an enemy while not rolling or diving this animation is played by setting stage to state 6. we call that state hit and at the same time i want to remove one life so this.game.lives minus minus after we removed one life we check if total lives are less or equal to zero and if they are we set game over to true i tested by colliding with enemies on purpose you can see that each time we collide we lose one life per anime and when we lose the last life we get game over screen perfect i want score numbers to fly from enemies as we defeat them this can also be used for other floating messages in our game i create a new file called floating messages js i create a custom class i call for example floating message and i export it constructor will expect value of the floating text starting x and y position and target x and y position text with this value will float from this position to this position and then it will disappear i convert these values to class properties as usual i also create a property i call timer just to set some simple time limit after which the messages disappear we will need update and draw methods as usual update method will push horizontal exposition by the difference between target position and the current position making it slowly move towards the target same for the vertical y position difference between vertical target and current vertical position for each loop timer will increase by 1. when timer is more than 100 we set marked for deletion to true draw method will take context as an argument we set font to 20 pixels creepster fill style will be white and fill text will draw value from line 3 at its current x and y coordinates now i show you an alternative to using canvas shadows for score and timer we are using canvas shadow properties here we will achieve the same effect by drawing the same text twice white first then black on top of it and we give it two pixels horizontal and two pixels vertical offset we are exporting our new floating message class i import it up here on line 3 in player js inside check collision method when we successfully hit an enemy and score increases i want those score points to fly from that enemy towards our scoreboard i say this.game.floatingmessages push and i want to use floating message class to create one new floating message object first i need to go to main.js and on the game class i create this floating messages array it will be an empty array at first now i'm pushing a new floating message into it like this i check here and i can see that class constructor expects text value starting x and y coordinates and target x and y coordinates value will be plus 1 because we get one score point we could also make this value dynamic if every enemy type gives different amount of score points starting coordinates will be x and y of the anime we just collided with and target x and y will be for example the top left corner of canvas so coordinate 0 0. inside update method on game class the same way we cycle through all anime object inside enemies array we will also cycle through all floating message objects inside floating messages array for each message we will trigger its update method i delete this splice to remove old messages because we will do it in a better way i'll get to it in a minute so for every floating message object i call their associated update method i copy this code block and inside draw i also call draw method on every message and i pass it context if i play the game messages will be moving too fast so there is no animation i just see the bottom of the letters here i need to go to update method and i need to multiply both of these by 0.03 so i'm saying here for each animation frame increase the current vertical and horizontal position by three percent of the difference between the target position and the current position this will make the text move towards its target position by three percent of the distance per animation frame meaning it will start moving fast and as the distance between current and target position gets shorter so it's a smaller number three percent of that value is less pixels so it will travel slower and slower giving us a nice ease out effect you can see that the movement is faster at first and it slows down as the letters float closer to target 0 0 coordinates on canvas i adjusted the target coordinates i want them to flow somewhere to the end of score line maybe these coordinates yeah let's do 150 and 50. right now we are creating an ever increase in floating messages array because we are not removing the old ones i will use filter array method to do that it's better than using splice for a reason i will explain in a minute built in array filter method runs a provided callback function once per each element in the array array elements which do not pass the callback function test are skipped and are not included in the new array so when i say this.floatingmessages.filter and as a callback i say marked for deletion property on each object needs to be false the new array will contain only elements that have marked for deletion set to false elements that are set to true will be excluded at the same time i am assigning this new filtered array to the original floating messages array overriding it so this simple line of code filters out all elements that have marked for deletion set to true in the previous episode i mentioned a pack where i noticed that ground enemies jump and wiggle horizontally even when they are supposed to be static it's especially visible when comparing ground enemies against the ground texture but it is actually happening with all enemies it is because as i cycle through the array i am removing enemies that collided with player or moved off screen using splice problem is that when i splice out and remove enemy from the array while i'm in the middle of cycle and through that array it changes index of all the following elements in our case enemy objects because of that their position is not calculated correctly for that loop and they jump around instead of splice i will use filter method and i will only remove enemies that have marked for deletion properties set to true after we finished cycling through the entire array so there are no problems with indexes and skipping positions basically i will do the same thing for enemies i just did for floating messages i will also do the same thing for particles like this and finally i also do it for collision animation objects now that's better we fixed the bug and i think this syntax is a bit cleaner as well i just quickly can't lock all my object arrays i put it inside at enemies so it logs it only periodically not for every animation frame i play the game and i can see that all the arrays are being correctly filled with objects and those objects are also being removed perfect player class doesn't have this dot current state property because i had to define it from inside game object here that property belongs on player class so i can define it here and initially i set it to null this is just to clean up the code will still work the same let's tune the game difficulty to make it a bit more challenging max time will be 30 000 milliseconds or 30 seconds in this time the player needs to reach at least the minimum winning score of 40 to see the winning message we can do other things for example every time player gets hit by an enemy and this animation is played we can remove 5 points from the score as a penalty you can tune your game however you want you can make it easier or more difficult by adjusting these values when the game is over after 30 seconds i check if score is more than winning score and if it is we display winning message else we display the losing message let's test it i play it and i get hit over and over my score is in minus values i get game over and losing message from line 35 is displayed nice i increase game width to 900 pixels i will keep game height at 500 pixels because our background images are optimized for that size we're not gonna go into aspect ratio calculation in this class this time i will really try to play the game and let's see if our winning condition works i need score over 40 in 30 seconds it's actually pretty close yes i played well i got 55 score points and when a message is displayed awesome we are done let me know in the comments if you code it all the way through and if you learned something new i'll see you later