hello and welcome to our bongo db tutorial what we're going to build in this tutorial is a very simple node express application deployed on turbo using the database of course and it's going to have two models it's going to have a profile and a team so it's gonna simulate sort of like a like a project for like a team like some sort of sport or a recreational league something like that we're gonna use a rest api to interface with the data so we're gonna set up a basic rest api for all the querying and inserting data and things of that sort we're obviously going to focus on the mongodb in terms of topics we're going to use the mongoose orm which is uh definitely the most popular orm for the javascript community for mongodb and we're going to cover all the crud operations for using and mongoose so crowd is create read update and delete and we will cover all four of those in this tutorial again using the rest api this is a beginner tutorial but it's not for complete beginners you should have a basic not working knowledge of html css and javascript as well as how to set up a node express project the the basics of node express should be familiar to you you don't have to be an expert again this is a beginner project but you should know how to set up a nodexpress project install npm modules etc know how to use uh the static directory as well as templating engines things like that you will need a turbo account so that we can deploy our projects so that is free and you're we're also going to use the mlab service for our hosting so you'll need an account on mlab which is also free and you can sign up at mlab.com so make sure you have all that ready to go and then we can go ahead and dive in so in this video we're going to get our tools set up so first thing you want to be sure about is you want to be sure that you have node and npm installed on your machine so head over to nodejs.org if you don't and make sure you install the the lts version right here and you should be all set to go with node and npm if you want to if you want to check beforehand you can do node dash fee and you can see i'm running 8.11 and then you can do npm dash v to see what version of npm you are running if neither of these return values for you just go ahead and install the node runtime on your computer and you should be good to go next we're going to need to install itself which i'm going to use uh homebrew to do that so brew sh head over to here and install home brew if you don't already have it you can just copy and paste this into your terminal and you should have that will install homebrew homebrew is a package manager for your machine it installs well installs and updates packages so that's what it does and we're going to use that for installing so if you do not have manga well let's check if you have so one way you can do that is by doing dash dash version and here i'm running 4.0.1 so if you do not get a return value from this command that means you need to install manga so one way you can do that is brew brew install db like so and that will install the database on your local machine that normally takes a takes a couple minutes so just be patient with that and follow the commands whenever you get prompted with further instructions next we will need the turbo cli so make sure you have the turbo cli installed you can check by running turbo version and make sure you have a version number like this or higher so if you have a previous version then this uh that means you need to update and that's very easy you just do sudo and pmi dash g and then turbo cli and this will install the turbo cli on your machine that'll give you the ability to deploy your projects onto the turbo environment staging environment which is also free so make sure you have that set to go and once you have all that we should be all set so we should be ready to start with our project and let's go ahead and get started with our project so first things first you got to make sure you have a an account on turbo360.co so head over here so that we can go ahead and set up our account so that we can deploy to our staging server this is free so don't worry about that so once you have that open up your terminal and cd change directory to your desktop like so or wherever you prefer to do your work i'm going to do it in the desktop and let's create a new turbo project so let's call it proj and this creates a node express project a very basic node express project so i'm going to open this up in the text editor i'm using sublime and here you will see the app.js where the project is set up and we have our standard you know our routes our views in our public directory uh the views are for your templates we're using our the mustache templating engine routes we have two routes we have an api route and an index route these are just scaffolded by the the scaffold right out of the box we can change these as needed obviously and public is for your static assets javascript images and css so that is all set to go now if you look at the well let's head over to our terminal and cd into the proj now given that this is a node express project we have to install our dependencies as defined in the package.json these are not yet installed so make sure you head over to your root directory and do npm install in order to install those packages and that usually takes about a minute or so so while that's going let's head over to our app.js where our project is basically set up and let's step through this to figure out our configuration so if you look at line four you'll see that this is where the app is initialized and this is an express app it's called vertex here because that's the vertex is the is an express application basically configured modified uh for the turbo environment so it's just an express app with a few minor modifications so here is the instantiation but if you look down here on line 24 you'll see another instantiation which takes a config object which is defined on line 11. and inside this config object is where we set up our some configuration options view static directory and most importantly db on line 14 so what we want to do is we want to use this instantiation instead so let's get rid of line 4 just remove it and then uncomment this right here and like so actually we can just get rid of this whole thing so now we're going to use the config object to configure our project and the most important line right now is this one right here line 8 where we define our database url so we're going to comment that out and replace it with our own database url which for now will be an empty string so what this is going to be is a reference to our local server so what we want to do is db colon slash slash local host slash proj and this last term right here will be the name of our database so this is the pattern for the default pattern for local urls so and again the last one here is the name of our database which we can name it whatever we want so here is how we configure our project to run with a local server so what we want to do now is test that so we can do turbo dev server and we will see this message here db connection failed which is this message right here the on error callback that's because we're not running a local database so we want to stop the web server and then do command t to open another tab and then we want to do d like that and this will run the local server and all these lines will pop up but most importantly is this last line right here waiting for connections on port 27017 this is the default port number for local instances so now we're running a server locally on our machine we can head back to our web server and run the dev server again but before we do i'm going to include an on success callback so that we can get a confirmation message db connected in order to confirm that the database was successfully connected to our web project so let's go ahead and check that out so we can do turbo dev server again and there we go the database has successfully connected and our project is running locally on localhost 3000 so we can head over to localhost 3000 in our browser and we can see our project running locally this is the how your project should look uh while running the database so this is now database connected to your local instance so everything is ready to go we're going to create our models for our project to work with which will be profile and team and that's it so let's go ahead and get started let's go ahead and head back to our terminal and run the server so in a separate tab i'm running the local server and then in the web server i'm going to run turbo dev server and then head over to localhost 3000 to make sure everything still works which it does so everything is still in working order so i'm going to turn off the web server make sure you're in the root directory and we're going to create a new folder called models which is where we're going to store our models models for profile and team which will define the schemas for each so we want to head over to that directory and create a profile js and we may as well do the team one right now as well and then head back to the root and let's go back to our models directory and open up the profile.js and here is where we will define the schema the attributes which comprise a profile in our project within the context of our project so we're going to need the mongoose orm so let's go ahead and import that and then let's go ahead and create the profile schema which is a new mongoose schema object now make sure you insert the json argument here and then let's go ahead and export it module exports and this is a mongoose model which we will call profile which takes the profile schema that we're about to define so in here is where all the action takes place here is where we define the actual attributes which comprises a profile so first name last name email password things like that all that goes in here so let's go ahead and get that process started so we want to start with first name and these all take json arguments or these are all json values excuse me last name age team and position okay great so these are all empty json values but obviously they shouldn't stay empty so these all these attributes are going to be strings except for age age is going to be a number so we want to define that in these json arguments we inside these json values we define we determine the data type of the respective attribute so all of these are going to be string except for the age which is going to be a number and then technically we can stop here and this is a complete schema but we can actually go we want to take advantage of a few more options we want to assign default values to all of these and in the case of all the strings the default value will be empty string in the case of the number it will be zero so the default value basically gives these attributes an automatic value if the user doesn't input one during the process of creating uh the profile so when there's data being sent to our uh our server if the first name attribute is undefined the mongoose schema will insert an empty string on our behalf which is a nice tool so so this is one extra tool we can use that provided to us by mongoose to make this uh our data more consistent in the database so another value another tool we want to use is called trim and this is a boolean which we will set to true so what this does is that it removes a trailing white space so for example if we have a user named bob like so bob during registration bob may have done something like this where he put an empty space in at the trailing edge by mistake in all likelihood this is not on purpose so we want to trim those trailing and as well as preceding white spaces so that this doesn't mess up our database integrity so we definitely want to uh take advantage of things like that so we want to trim the last name as well team and the position and there are a series of other options we can include which we won't get to for now just just understand that the mong use orm provides us a series of tools like this which makes the data more consistent within our database so that it's it's across all of our records there's more consistency within the attributes which is very very very very useful so now that we have our profile set up schema set up the question is how can we query those profiles how can we use this to to fetch the profiles from our back end so what we're going to do is we're going to use one of the provided routes from the scaffold specifically the api route the api route is provided to us automatically from the scaffold we're not going to use what's in here so let's get rid of this and we're going to create our own routes instead so what we want to do is create a get handler which takes a string argument and we're going to call it profile and this get handler will fetch all the profiles currently in our database so this takes a rec request and a response object and for now we're just going to return a json response with a hardcoded output sometimes these are called endpoints instead so we'll just call this endpoint so right now that's all it's going to return right so what we want to do is we want to test that endpoint by heading back to our terminal running the dev server head over to localhost 3000. now if you look at the app.js you'll see that the routes are connected on the bottom and you'll see that the api route is connected in the path with the path slash api so if we do slash api and then slash profile that will invoke this endpoint so we do slash api profile and here we have the endpoint we just wrote a few minutes ago so that worked so now what that means is within this endpoint we can query the profiles using this schema so let's go ahead and do that so we do co we have to import that of course okay so now here we have our profile model which is a mongoose object so we want to run the find query which returns a promise the promise success block returns the profiles from the database so we can get rid of this now and this right here is our first mongoose query this is going to query every profile currently in our database our backend and return them in this success block right here so we can do res.json and then confirmation success data profiles and that will return the profiles in our browser just like it did over here and before we finish that though let's handle the error scenario so this is the catch block which is the error case so we want to return an error message here obviously the confirmation is not success it's fail and then we should return a message from the error object which should indicate what went wrong so this query right here is for every profile in our database our database so now if we rerun this this request we should see an empty array because there are no profiles in our database so that's that's the expected outcome because right now we don't have any profiles so here what we've done is we've set up a very simple query for a schema that currently uh is defined in the models as per this set of attributes right here and then we created we ran a request against that schema but we don't have any data in the backend so right now we're just getting empty results at so so far so good but obviously we want to have some data to work with next we're going to set up our database with some initial data what's often called seed data using some static json objects and then we will insert those records into our database so that when we run this query we have some stuff to work with and my terminal is right here i'm going to turn off everything that's running so we can start from scratch so first things first let's run the server locally so by doing mongod and then head over to your web server and do turbo dev server and then make sure that everything still works so here is the api slash profile route that we created specifically to fetch profiles and again there are no profiles so let's go ahead and turn off our web server and let's create a json file which will we can use to insert some initial data into our database so right now we're doing what's called we're using what's called seed data we're going to seed the database with some initial data so that we have some stuff to work with right away is a json based document storage database so what that means is if we just create some json records json objects we can insert them directly into our database using the cli which is exactly what we're going to do so first things first we've got to create the json files right the json object so let's create a directory for this uh let's call it initial for initial data let's cd into the initial folder and let's create a profiles.json file head back to your root directory and then actually no you want let's stay in the initial okay and then open this up and let's create our profiles so this this set of profiles we're about to create should be consistent with the profile schema that we defined in the previous video so first name last name h team position so we have first name last last name age position and team i believe we have team on there yes and notice how all these are string values except for the age because that that is defined as a number in the schema so we have to be consistent with that over here so now that we have our first profile we can just add a few more all right and uh let's see actually i'm going to add one more okay so here i have four profiles to start with all json objects fitting the schema as defined in our models directory and so we can insert these records into our database right away so that we have some data to work with so let's go ahead and do that so the way we want to do that is through the the shell so we can directly the cli i should say we can directly interface with our database using the cli so one way we can do that is by doing like this just directly connect to our database make sure your instance is running otherwise this won't work now we can do show dbs right and we can see what our current what what the current databases are in our database so we're going to create a new database uh let's do control c and we're going to insert these records into that database as a collection so a collection is a basically it's what it sounds like it's a collection of records uh all under one schema so what we want to do is we're going to use a tool called import and it takes a few arguments the first one is db and that's going to be the name of the database if you recall we set the name in the app.js called proj so we want to say db is praj so that we're going to interface with the same database and then collection is going to be called profiles which is basically the pluralized version of our schema the profile schema profiles is plural and then we can we can pass in a file argument and that's going to be the json file profiles json so just so you understand what's going on here the import is going to create this database proj because right now it doesn't exist and then afterwards it's going to create a profiles collection which will use the profiles json file for the initial set of data so once i press enter here it says imported four documents which are these four documents right here so it created those four records in our database so we can head back to our root directory and run turbo dev server and now we can test this endpoint again and now we have our four football players for um quarterbacks or three quarterbacks and one wide receiver so it worked everything worked one thing that's very worth pointing out is that there's this extra field called underscore id which we did not define in here you will not see an underscore id in these initial record set that's because assigns that for us automatically but does that on our behalf and these are unique identifiers for each record in the database so this is a unique number that ties to this entry in particular it's kind of like a social security number it only it only relates to this one record and manga does that on our behalf so now that we have some data to work with we can start running queries in our api route let's go ahead and find that right here in our api route uh for specific profiles based on things like you know position position team things like that we're going to start running those kinds of queries basically adding filters to our query so we can get specific profiles based on uh parameters that we the project may need at a certain point of time at this juncture of the video a good exercise would be to do the same thing for teams you may remember you may recall we created a teams model which is empty so we want to create a similar uh setup so that would be a good pro a good assignment to work on the team should be the attribute should be something like team name uh city um uh conference so this is american football we're talking about so you know team like the new england patriots uh is the the city is boston the name is patriots the conference is uh afc american football conference and that should be enough for the team schema so um so yeah that's it let's try to get that put together here in the terminal i'm going to run the local server and the web server okay and then if i run a query for all the profiles we see everything that we added to our database so now what we want to do is is query the same data with specific filters so that is done inside here the api route inside this this find method from mongoose inside here we can add a json object that specifies the filters for example if i say i only want to query for profiles whose position is qb i'll do it like that and then if i rerun the query everyone but odell beckham should be returned see his position is not qb so here we have three players all of whom are cubies and then we can do the same thing for a wide receiver and now we get only odell beckham who is of course a wide receiver so the filtering of your queries in mongoose is pretty straightforward we want to make it more dynamic of course by having the filter come in from the actual user so what we want is something like this to return only the qb's so right here this is the request query we can parse that out inside the api route like so so that this rec object gives us the query which is really this key value pair in json form so it's ready in json form for us which is nice so now we can just insert the query object into the the find method from mongoose so if i do this now it'll give us all the qb's if i do wide receiver it gives us only the wide receiver we have in our database which is one player odell beckham if i want to query by team i can do team like that and here i have the two players on the giants of course i can do the other teams as well oops so here is the one player on the patriots and if i query a team that's not that doesn't have any players in our database um of course we get an empty array which is what we expect so that's it it's good the query filters work so far we can also query by the numerical value so here we have three players four players excuse me ages ranging from 24 to 41 so let's say we want to query for profiles who are only older than 41 or we can do exactly 41. like so so this gives us the one player who's 41 but if i do 40 then i get nobody so maybe what i want to do instead is older than 40 right so the way you would do that is inside here the way it would look is you query by age and then you pass in another json object and then inside here you have a special mongoose key with the dollar sign that's denoted by this dollar sign that means it's a special mongoose key and the gt stands for greater than and then you can do 40. right so here now we should only get tom brady who is older than 40. and if i do 30 then i get three players aaron rodgers eli manning and tom brady and then i can also add in a less than filter so query dollar sign lt for less than and then 40 this will give us the profiles ages between 30 and 40. and so that now we should only get these two players and that gives us aaron rodgers and eli manning and so that works and so um it's up to you how you want to structure this from the actual query itself the query uh request query itself but for now i'm just going to use the um uh the greater than exclusively so one way we can do that is if we see the age parameter at all if so what we're going to do is we're going to create a filters object and we are going to let's see here if the query contains the age key so if this age key is is present inside the request query what we want to do is take the filters and set the age as greater than the query dot age value and let's see here the best way to do this would be let's set the filters to the query to begin with like that and then we can pass in the filters like so so by default if the query the request query has the age key we're querying for every profile older than the specified value so right here line 12 we want rec.query excuse me 14 okay and that should take care of that so now we get tom brady here because he's the only player older than 40. if i enter 30 i get everyone older than 30. so forth and so on if i enter 20 i get everybody so here i'm just adding a default greater than if there's an ah key passed in that's only if there's an h key passed in if there's no h key passed in the filters will be automatically inserted inserted into the request basically as is so i can do team and giants and we still get these two or we can do position and qb and we only get the qb's we can do wide receiver so forth and so on we're going to query for a specific record so that we don't have to filter add filters based on an attribute every single time we can query for a specific entry based on the unique identifier so let's go ahead and get that started so i'm going to run the local server and then the web server and then let's go ahead and set up another endpoint for querying a specific entity a specific profile i should say so let's go ahead and set up in a route a route for that it's going to be another get and the path is going to also be profile but this time i'm going to add a request parameter called id and that's going to be a variable passed into the actual url and then the callback for now let's just have it hard coded and this id param can be parsed out as a param like that and then we can just return that in the json response for now just to make sure everything is uh properly set up so let's test the endpoint all we have to do here is do another slash and then some random text and here you'll see that the data is returned to us pretty much as is which is what we're specifying right here good so it's connected so if you look at the profiles you'll see that they all have an id string that's randomly generated by and assigned to the entity by so we can query specifically by using that id so what we want to do is grab the profile and this time it's find by id and we pass in the id and that returns a promise again same as before and here is the success callback so we can do confirmation success here and in the error callback we want to handle the error appropriately by returning a failure confirmation with the error message so now what we can do is we can grab so make sure you have everything here like this we can grab the profile id like so and in this case we have tom brady and just append that to this route and now we get specifically the request result for tom brady and of course we can test all the profiles that way so if we do aaron rodgers so forth and so on we can confirm that they all work and then what we want to do is make sure that it works in the failure scenario as well so for example if i do if i enter an id that doesn't exist it should return an error message um now this error message is a little bit hard to decipher if you're not not a programmer or not very familiar with uh sort of the mongoose error styles so instead of returning just the error message we should replace that with profile id not found a much more human readable message so that it's very quick and easy to see uh what exactly what went wrong so i think that would be a better way to handle that so that when you when you come across this error it's immediately obvious what what went wrong i was just testing something there don't worry about that so that it's it's a lot faster to determine what the proper adjustments are and that's it and this is one this is a way to query a specific record by the identifier which is a much more efficient type of query than using this this kind you don't want to use this general query every single time because it's not the most efficient if you can query by a specific key an id that's much faster so you want to do this one whenever it's possible or whenever it's appropriate you want to use the identifier to query for a specific record we're going to create the ability to add records from the web interface rather than from the client side cli excuse me so that users can add profiles when they sign up so that's it let's go ahead and get started so now what we want to do is add the ability to create a profile from the web web interface so what we want to do is go to the api route where we set up our queries and set up another endpoint where a user can create a profile probably through signing up this all this usually happens through a post request rather than a get request so these this is a get request that's a get request but this time we want to set up a post request because adding data is usually happens for a post request especially dealing when dealing with a rest api which is essentially what we're setting up here on a basic level so here we want to set up a post endpoint and then like usual we just want to return a hardcoded confirmation now the data in a post request is in a node express application is returned to us in the rec.body the body attribute of the request so when the post data is submitted to the endpoint here is where the actual data can be retrieved so now the question is how do we set up the post request well that normally happens through a form on the on a web on a website an actual html web page so if we go to the home page of this project localhost 3000 here you will see our homepage and this is just regular html css javascript etc and this page in particular is inside the views directory right here index dot mustache and mustache is the templating engine that is installed by default so we can use this to create a form where a new profile can be submitted so let's get rid of all these other all this other content because we don't need it anymore so let's get rid of all this stuff and here inside the last remaining div let's set up a form where we can create inputs for each of the attributes of the profile so we have first name oops this should be the type is text excuse me text text inputs so we have first name last name team position and age now these attributes these name attributes should correlate to the properties in the actual schema so they should match up with what we see here uh and also in terms of casing uppercase lowercase that all has to match up so make sure yours matches up as well and if we take a look at the homepage now we should see this it's going to be hard to know what field corresponds to what so we can use the placeholder attribute for that first name last name team position age so now we have the placeholders makes it easier to remember what goes with what and the final input should be a submit type it doesn't need a name but it could use a value add profile so now we have a button which will send the request now now we have a form here that right now points to nothing so we want to point the data of this form to this endpoint so the way you do that is by adding two attributes in the form itself action and method now the method is post and that this post right here is in relation to that post right there in other words this is a post request and the action is slash api slash profile as specified by this path right here and it's slash api because it's that's the original path right there so slash api slash profile is where this should go this data should be submitted to and if everything is properly set up this is the response we should get basically just it'll just spit the data right back to us in json form so if i load the home page and i add another profile i think it's one word here we have the data basically just returned right back to us in json form thereby confirming that it worked that this endpoint this endpoint right here is successfully receiving the data so now that we've confirmed that we can now create an entry a profile entry in the database using the create command and we can simply take the request body which is the data in json form it's all of this already in json form and run the standard promise sequence now mongoose returns the profile or the object the document that's created it returns it back to us in the completion block the success block so right here we can just return the success confirmation with the profile that was just created and then in here is the error block so we do what we normally do here return a fail message a failure confirmation with the error message so that we can see what went wrong and then we can now get rid of this and if we go back to the home page we can try it again qb and now it's going to return the json again but notice this time there's a version an id and a version that comes from so what that means is the request was successful if i actually take the id and run the id request we get russell wilson again and if i run the general profile request we get all the quarterback all the players including russell wilson the player we just created who is a quarterback so if we do position qb now we get russell wilson as well inside the results set and so forth and so on so so it worked so this is the the proper way to handle inserting data into the database which almost always happens through some sort of form of this sort like like this is a very conventional way of submitting data from a form to a post handler like that and then and then inserting that data into the database this is the proper way of handling that situation so hopefully you got that working at this juncture a good exercise is to continue this process for the teams you may have noticed that we haven't really been doing much work with the teams because this is something i want you to do on your own as you go through this project so you should set up corresponding endpoints for profile and teams and as well as post handlers so that you can create a team through a form on the on the home page in this fashion we're going to set up a simple way to update the data it'll be done through a simple get request which is not the conventional way by the way we're going to take a little bit of a shortcut here just to illustrate the concept as well as the the commands to create an update and then we'll update some of our profiles and that's it so let's get started and so let's say we want to update this right what i'm going to do is set up a an endpoint just for updating so it's going to be right here router this is going to be a get but normally this is a put uh the reason i'm using a get is just to make this process a little bit more convenient but normally this would be done through a put so profile and then update actually this should be over here uh you may be wondering why i placed the handler above this one because this one is a generic has a generic id parameter after the profile path which will be interpreted first and if i put this one beneath it it no request will ever ever actually get to this end point because this one will reach first if that makes any sense however by putting this one above the update command will happen will be interpreted before this one and so we can we can process the requests so let's try sending a hard coded hardcoded response and let's see if that works there we go and if i go back here this still works fine so we are set to go okay so what we want is the query parameters and this should require id and key value pairs for what to update so for example it might be like here's an id number for russell wilson so the request would look like this id equals that so we're specifying which profile specifically we want to update and then let's say we want to update the team let's say he got traded so team equals cardinals and this will update the profile this particular profile the team value and that's it or maybe he um you know he aged one more he got one year older or a change position etc so what we want to do is grab the id and then we want to get the profile and then find by id and update and this will take the profile id argument and then the query and then new equals true this last part is a little bit tricky what's happening here is that by default mongoose will return the the record prior to the update where in reality we normally want the record after the update so by returning by passing in this true boolean that's what we get that's a bit of a sneaky gotcha that you want to keep in mind about mong use and then here we just do what we normally do let's get rid of that and the error is the same as always just return the failure confirmation with a message and then the success return the updated profile so here we are grabbing the profile id from the query and then we are identifying the specific profile based on that whatever else is in the query parameters we pass in here as the updates actually i'm going to do one more thing just to be sure i'm going to remove the id so now all that's left are the parameters that we want to update like the team the position the age things like that so and then we return the new version over here so let's try it so now when i run this request it should say team see cardinals and there it is now if i run the overall request head down to russell wilson it says cardinals uh let's say uh eli manning let's insert his id let's say the age is 38. so at some point i'll turn 38 and there it is and then if we go back here you'll see that the age is still 37 if i reload it now should say 38. so this is a standard update using and mongoose again i want to point out that this is normally handled through a put request right here put rather than a get but the reason i set it up as a get is so that i can run it through the browser like this for a convenient way of doing that rather than setting up a whole web front end just for this however just be aware that this is not this area right here is nonrestful very important nonrestful and normally it should be handled through a put so this is how you handle updates in and mongoose i recommend you set up the same thing for teams now so that you can update your teams if not really sure what what categories of a team will change sometimes cities teams change cities fairly frequently so maybe that's something that you might want to test and that's it we're going to complete the sequence the crowd sequence by deleting a few records and making sure that that can be handled as well uh like before we're going to set that up through a get request which normally wouldn't be the case but for the sake of convenience i'm going to set it up as a get request so we can we can test it run it through the browser and make sure everything works so let's go ahead and get started here we set up this request right here for updating i'm going to do one more after it has another get profile and this is going to be removed to remove a record a specific record and it's going to be the same idea it's going to take an id and in this case that's all it's going to need because that's enough to identify which record we want to remove right so we want to grab the query object and then we want to do profile find by id and remove that's the mongoose corresponding mongoose query for removing a profile and then this is going to return the usual this is just a promise but this time there is no profile keep in mind because um there uh excuse me the profile has been removed so what we want to do is handle the error like we normally do and then here on the success return a success confirmation and then just return a message saying uh profile query dot id successfully removed that's good enough for now and that will confirm that the removal of this specific record is complete and successful so let's go ahead and test it out so it's profile slash remove and then we have to pass in the id into the query so let's say we want to remove uh aaron rogers so we do slash profile and then don't forget the end point is remove so slash remove and then we pass in an id filter and then we paste in the id and then profile was successfully removed so if i do a general profile request now we should no longer see aaron rodgers and that is that has been completed so obviously we can continue testing but oftentimes what happens during your uh throughout your testing process especially locally is that you end up with all these records that were just inserted for pure testing purposes and have all sorts of inconsistent data patterns and things like that like maybe you initially had the age as a string and then change your mind later making it a number so forth and so on things like that this is very common in a local testing environment so it's not unusual at all for within local testing to want to remove all of the records the whole thing the entire the entire collection would be the way to phrase that so this happens a lot so um what what you want to do here instead of removing everything one at a time because maybe you have instead of four or five you have 50 or 60 so that can be very tedious to remove everything one at a time what you'd rather do everything what you'd rather do instead is remove the entire collection in one command and we can do that through the cli i do this a lot through the cli so if i open a new tab i can connect to the database directly and the name of the database if you ever forget you just go back to the app.js and you just look it up right here in the url and i can just connect directly to the database and so here i am and then i want to do show collections to see what i have and currently have i have profiles and then i can do db profiles and then find and then i can see spell the wrong profiles i can see what profiles i currently have in the back end the database which is obviously the examples we used in the video so far so i can just drop the entire collection very easily by doing instead of find i can do drop like that and it should return true if it was successful so now if i go back to the api and i run this request i get an empty array because now i removed all the profiles in one quick command so that's another way you can do that by interfacing directly with the cli rather than mongoose and then when we're done we can just do exit we're done with that and then now we're back down to zero so uh that's that's another way of quickly removing a whole set of collections which again is very common in a local testing environment because oftentimes you have all these records that were only there for testing and the data is all messed up and things are inconsistent and you just need to sort of wipe your slate clean and start fresh which is what we just did right here so that's it that completes our crud operations for now there's obviously a lot more that you can you can look into using the mongoose documentation i highly recommend you look into the documentation for mongoose well this is the npm page what we really want is the documentation page and it will give you the entire set of apis that you can use in the mogu's orm which extends much further than what i've showed so far but in this series so far we've gone through the basics which is enough to get you started and putting together a very basic application web application so now it's time to deploy to a staging environment and get our database working on an actual database server so we're going to get that set up today and that's it so let's get started you're going to need an account on mlab right here so make sure you have that as well as turbo you should already have that but if you don't go to turbo360.co this is where we're going to deploy our projects and we're going to host our application on here and host our database on here so make sure you have that properly make those make sure you have those accounts properly ready to go so what we want to do next is head over to our project and we're going to make a slight adjustment here so this early on we had commented out this line right here which is using environment variables to establish the database urls so this one right here mongodb uri is your local environment variable for the database local database so really what we want to do is we want to reuse this right here so if we head over to the env file right here is where you will see the environment variables configured for your project so we need to define the mongodb uri and that is going to be our local url what we've been using so far so now if we head over back to app.js instead of using the actual string we want to use the environment variable like so and this is a better way to handle it so what we can do now is test it by running the server and then running the dev server to make sure everything still works as expected and it does so everything is still set to go we can just run one quick query to make sure about that and uh just confirm that everything is still working which it is that's great so we're good to go on that so now what we want to do next is set the production database url and this is the mlab url so we need to establish that first so we head over to mlab and we sign up if you don't have an account i already do so i'm going to log in and we now want to create a new database uh right here so make sure you click on that uh you can choose any of these three i'm going to use amazon because that's my preferred provider i'm going to we want to create the sandbox account because it's free i'm going to use a us east one doesn't really matter but i'm in the east coast so i'm going to use usc one uh database name so praj uh it's good enough turbo approach doesn't really matter but this will help me keep track great and here are some just configuration options etc and then we go ahead and create the database and this is going to create the database for you right here and we can click on that now and we need to create a database user which we can just call admin for now so we the user that we create needs a username and a password so we add a database user we'll call it uh admin and password will just say turbo 360. obviously you can make these whatever you want and in doing so we now have our production url string right here so you copy that and then you head back over to your project and then you enter you paste that in but make sure you have your user and your password so the user well the password is turbo 360 and the user is admin and so now we have our production database url right here and that's ready to go so now we can head back to our app.js then really we can just uncomment the original url line and remove this and so what this establishes is that if the environment is the dev environment or the local environment it will use the local database url otherwise it will use the production database url so what's important to understand here is that the turbo environment is right now dev inside the env variables dna file but when you deploy the project to your turbo staging server it will automatically switch to production so you don't have to change this in fact you know you really never should change this so now what we need to do is set it up so that we can deploy our project to turbo so we have our mlab configuration all set that's done we're ready to go with that so now what you want to do is head over to turbo and sign up over here which is free or you can sign up on the right side if you don't have if you don't see this and then log into your account and then in your projects you want to create a new project here called project or demo whatever you don't need a description though just go ahead and create it and click the create site i'm not going to do that because i already have a project set up for this and when you do that you should see this interface and what we need right now is the app id this is what we use to connect our local project to our staging server on turbo so you head back to your terminal you turn off the local server and the first thing you need to do is log in to turbo like so and just log in using the account that you used to set up just now and then you want to do turbo app and then you paste in your app id from here just copy and paste it right there like that and this command will connect your local project to your staging environment on turbo it's really that simple and then once that's connected you're all set to go you do turbo deploy and it will deploy the project to your staging environment on turbo which usually takes around a minute and when it's done it will give you a staging url uh you know a webbased url that's a live web url that you can hit on your browser and check out your project so mine is wrapping up just now and when it's done right here you get that deploy complete message and this is your staging url right here and that is where your project is hosted if you copy and paste that into your browser you should get a you should get the interface that we had last time locally but now it's on our browser so before we test anything let's copy that over into another tab and do api profile and see if we get any kind of response which we do and that's because it is currently connected to our mlab account right here and if we click on the home we will see that we have our turbo proj right here of course it's empty there's nothing in here right so what we can do next is head back to our home page and add our first record in our production database or at least our staging database so let's see here whoever not gotten to yet um matt ryan falcons quarterback 32. so let's see what happens here so here on production we get the json values for the entry we just added with the entry so that's a good id excuse me so if we head over to the mlab page you will see if we reload the mlab you will see the profiles says one document and that corresponds to the the entry i just inserted and more importantly if we head over to our api profile page sorry that's localhost if we head over to our api profile endpoint we now see matt ryan the quarterback who we just entered into our production database we can now grab the id and then do backslash id and we get the same person there's only one anyway we can test all the filters so position equals quarterback and we still get that ryan because that's the only one if we try a wide receiver we get empty array so that's good we can do profile update id perhaps i got the age wrong i don't really know his age so i'm just guessing so maybe it's and then age maybe he's 31 and then 31 and there we go and everything we set up before now currently works on our staging environment just like we saw on local so everything is successful on staging as on local which obviously is very very important and that's it so if you got all this working congratulations you have a node express application with a database connected and successfully reading and writing data to your database so that's clearly a big step towards your development as a full stack engineer and hopefully you got everything working if you have any questions comments anything like that feel free to shoot me an email you can reach me at dequan turbo360.co that's my email and i'll get back to you as soon as i can and um and yeah that's it thanks again for watching and uh best of luck in your future endeavors