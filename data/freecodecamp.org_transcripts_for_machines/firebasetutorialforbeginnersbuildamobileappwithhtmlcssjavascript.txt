Firebase is an app development platform from Google that offers tools and services for building and scaling applications. It includes real time databases, authentication, analytics, and hosting features. In this course, you will learn how to build a mobile app with HTML, CSS, JavaScript, and Google Firebase. Hey there lovely freeCodeCampers and welcome to my fully interactive Scrimba Firebase course. In this course, we'll be building a useful shopping list mobile app, which you can use by yourself or with other people you live with. And of course, we'll be using our new friend Firebase to hook up a real time database to our app. Now, what do you need to already know to take this course? Well, you need to have a basic understanding of HTML, CSS, and JavaScript. Exactly how much more on that a little bit later. Okay, an important thing about this course is that it's challenge based, which means that rather than leaning back and just copying the code that I'm writing, I'm going to be giving you a bunch of challenges to solve. Alright, there are two ways for you to take this course number one, of course, is to take it here on YouTube. And for that, you'll need to set up your own local environment. But number two, and my personal favorite is to do the interactive version on Scrimba. And if you haven't tried Scrimba before, oh, my God, you're in for a treat, you'll find the link to the Scrimba version in the description below. Okay, finally, if you enjoy this course, and you happen to scroll back to this part of the video, then I would absolutely love it. If you could give this video a like. And if you have any feedback for me, then please leave it in the comments below. Or even better reach out to me on Twitter, or LinkedIn. And with all of that said, enjoy the course. Hey there and welcome to this new Scrimba course where we're going to be building a mobile app using Firebase. Don't you find it frustrating when you want to make some dinner and in the middle of cooking, you find out that you're out of a key ingredient. So now you got to get all dressed up and go to the grocery store. But wait, what other things did you need to get again? Yeah, well, you see the problem here, right? Now here's the thing for 99.9% of people out there, making their own app would be an impossible dream, but not you because you're a programmer now, which means that you can use your newly gained superpowers to solve a problem in your life by building your own app. Now, how cool is that? All right, I hope you're as excited as I am. Let me show you what we will be building introducing Add to Cart a shopping list app that lets you keep track of what you need for your home and makes going to the grocery store. Easy peasy. You can even use the app with your partner family or flatmates. We even have a testimonial here from a diehard fan. Now let's see how it works. All right, so this is the homescreen. And this is where you put in the name of the item that you want to get, let's put in oranges. And then let's press Add to Cart. Boom, there it is added Perfect. Now let's add some more items. There we go. Very nice. Now when you go to the grocery store, you can just open up this app on your phone and start checking off items that you've put in your cart already. Let's delete oranges by clicking on it perfect. Now, that's what I'm talking about. Now, I gotta mention at this point that what we'll be building is not technically a native mobile app. It's a web app that's disguised as a mobile app. But by using a special technique, our app will look and feel like a native mobile app. And we'll even be able to put it on the home screen of our phones, both iOS and Android. Now the question is, what do you need to know in order to take this course? Well, you definitely need to have a good understanding of HTML and CSS, how good you ask, well, you need to be able to code this by yourself. And if you don't know how to do that yet, don't worry, I got you covered. You want to start off with pears free course, learn HTML and CSS, you can get to it by clicking here. Alright, now what about JavaScript? Now I'm going to show you a bunch of concepts related to JavaScript. Now pause here and read through all of these carefully. If you feel comfortable in all or most of these concepts, then you're good. And if not, don't panic, because you can learn all the JavaScript you need by taking pairs free JavaScript course on scramble, click here to access it, and then you can come back to this one. Alright, now that we've got all of that covered, let me introduce you to the hero of this course. Ah, damn wrong picture. Sorry. There we go. In this course, we're going to be learning how to set up our own database using a popular service by Google called Firebase. So very quickly, what is Firebase? Well, Firebase has a database which means that users can save data to Firebase, which can be accessed from anywhere in the world and you browser any day vise next Firebase allows the database to be updated in real time. Which means that if I make a change to the database on my device, it will be immediately visible for everyone using the app as well. And finally, and my personal favorite, Firebase is very easy to use, which makes it the perfect database for beginners. Now, before we start this course, I feel like we need to get to know each other a little bit better. So here's a little bit about me. My name is Rafa Nadal, super easy to pronounce. I know, I was born in India in 1991. Then I moved to Norway with my family when I was five years old. And I've lived here ever since three idiots is one of my favorite movies. Seriously, if you haven't watched it yet, you got to see it. I absolutely adore butter chicken with garlic naan Of course. And finally, the thing I love the most in this world, apart from my wife, of course, is technology, learning about it, and especially sharing what I know with others. So I hope you're ready to start this course with me, make sure to grab your favorite drink, I'll do the same. And let's get coding. Okay, so what's the first step, I've actually gone ahead and set up the basic HTML for us to get started faster. So we have an input field here with an ID and a placeholder. And then we have a button here as well, which you can see right here. Let's run that. Yep, that's working. And then we have just a little bit of CSS here to just to take care of the margin and the padding, let's take a look at the index.js file. So here, I already have a challenge for you. Because I want you to make it so that whenever you write something in here and press this button, whatever you wrote in here to get console logged. So take a pause here, try it out for yourself, and I'll be with you very soon. Good luck. Okay, I hope that wasn't too bad. Let's take a look at it together. So the first thing we want to do, of course, is to find a way to connect what we have here the HTML elements with the JavaScript. So the way we want to do that is use const first, and then make an input field, l, I'll call it short for element variable. And in here, we're going to use our trusty old pal document, dot get element by ID, of course. And what was the thing that we named it here, let's take a look here, input field. So we'll say input in put field right here, perfect. The other thing, of course, is going to be the add button L. And we'll say again, get element by ID, and that I believe was just add button like this. Perfect. And what is it that needs to be clicked before something happens? That's the button right? So let's attach an event listener to the add button L that we just created. So let's do add button L and then add event listener. Inside of here, of course, we want to be listening for the click event. And what is it that we want to happen? Well, let's make the function First, open up that with curly brackets. And inside of here, I always just like to make sure that things are working by just doing a very simple it works console log. Let's try that out. Now. Run and click, it works perfect. Okay, what's the next step now? So we got to get whatever value is entered in the input field when the button is pressed, okay, so I know for sure that I am going to need this because this is where all that data is saved, right? So I'm going to put that in here. And first just console log that let's try that first run and console log, that console logs the entire HTML, right? So what is it that we want from that? Well, we don't want HTML, of course, we want the value that is entered. And so here, we can use dot value, this method that gets us the value. So let's try it out. Now. run this again. And I'm gonna go in here and say, hot dogs. And hot dogs console logged Perfect. Now, before we end this, I do want to add a little bit more code here. Because I just think that it's much better to do it this way. Let me show you. So in here, I'm going to make a variable. And I'm going to say that it's input value. And I'm going to set that equal to input field L dot value. And then I'm going to use this instead. To say that I'm going to console log that instead. There we go. Oops, get rid of that. There we are. Now, why is this better? While it does the same thing, but this is much better, because we know that we want to use input value later to write and it's much better to have it defined up here once and then just use this in the rest of the code. So good job on working on the first challenge, and I'll see you in the next one. And now it's time for you to add the CSS and here you go. This is how it should look. So first, we got this really cute image of a cat. And then comes the text input field, and then the button. And of course, you want to write all of the CSS code inside of the index dot css file. And as you can see here, I've added some comments here that will give you some information that you need, like the Google Font, the background color, and all that. And I've already gone ahead and added the Google Fonts code right here. Now remember, this is a pretty big challenge. So give it your best shot. But don't worry too much if you don't get it exactly right. So pause the scrim here, do the challenge. And I'll be back in just a few moments. Good luck. And we're back. I hope that went well. Let's have a look at it together. So first thing I want to do here is inside of the index dot HTML file, I want to add a div container so that all the elements are inside of the container. There we go. And then we want to add an image tag, of course, for the cat, let's do assets and then cat dot png. Is that working? Let's have a look. And we have the cat up here. Perfect or perfect? Get it? I'm sorry, for the bad joke. Let's go over to the CSS file. Okay, Let's uncomment all of this first. There we go. Okay, already looking better. Okay, so what do we want to start with? I'm going to actually start with the container. Let's do container. And I do want to use Flexbox here. So I'm going to say display flex right away. There we go. And I do want to set the flex direction to be column. Perfect. And then let's do max width 320 pixels. Now, why am I doing this this max width? Well, it turns out that if we set the max width to be 320 pixels, that basically all devices in the world, especially mobile devices, will be able to show that no problem. Alright, so what's next, let's center this container. So I'm going to use margin for that. Let's do margin 20 pixels, auto, maybe, maybe let's put a little bit more there. 30 pixels. Okay, looking better. Now, let's fix up this image first. So let's go in here and target the image. And then we're going to do with 150 pixels, much better. And then of course, again, use margin here to center that as well. Perfect. Now let's take care of the input field and the button. And as you can see here, they both look very similar. So we can do some copy pasting here. So let me start with the text input field first. Okay, let's get rid of the border first, zero, perfect. And then let's add some padding 15 pixels, perhaps. Okay, that's looking pretty good. Now, we do want a border radius as well. And what do we want to do here five, maybe that's a little bit too little, and maybe do eight instead. Okay, looking better. Now we do want to increase the font size to so let's do font size. I'm going to do 20 pixels. All right, that's looking pretty good. Now. Now what else is there, we do want to center the text. So let's do text align center. And then of course, we want to apply the Google Font turns out, you have to manually do it for the text input field and the button, it's not good enough to put it here. a bummer. But that's how it is. Let's copy that and put that in right there. Awesome. Okay, I think it's looking pretty good. So I'm going to actually go ahead and copy all of this, and paste that in right here. And of course, now it looks pretty much identical to this. Now I'm going to get rid of these two. And there we go. See, that's all what was needed. Now, we do want to add some spacing here between these two elements. And perhaps this element too. So why don't we pick the middle element, which is the input field, of course, and add a little bit of margin, top and bottom. So let's do 10 pixels. Yeah, that's looking pretty good. Now, let's make it a little bit smaller here and compare it. Is it looking good? Yes, it's looking pretty much identical. So awesome job. Now we're done with most of the CSS and we can focus on the JavaScript. I'll see in the next scrim. All righty, in this scrim, we're going to be setting up our very first Firebase real time database. I don't know about you. But I am super excited about this. Because this is where we take our projects to the next level, a database is going to give us the ability to save data that can be accessed by anyone in the world. So the first step, of course, is to head over to the Firebase console. Click this link to open it up on your side. Once you're there, make sure that you sign in using your Google account. If you don't have one, you have to create one. Okay, once you're logged in, you'll see this press Create a project then you can name the project playground, check off these two things and press Continue. We don't need Google Analytics for this project. So just disable it and press Create Project, it's going to take a couple of seconds, and it's going to set up the project for you. Once it's done, press Continue, it's going to take you to your console. Now, on the left side, you'll see real time database, click on that, then press on create database, it's going to ask you which location Do you want to go for, pick the one that is closest to you, I'm going to go for Belgium, then it's going to ask you do you want to set the database in locked mode or test mode, we're going to go for test mode now. So choose that and press enable. And there we go, we have our real time database setup. Now the final step is to go over here and press on this icon to copy the database reference URL, which we're going to use in just a little bit. All right, so let me show you the app that I have here. This is called real time. And it's just a simple movie app where you can add the movies that you want to watch with someone together pretty stupid, I know. But it'll illustrate the point. So the first thing I'm going to do is go all the way up here and make a const and say, app settings, I'm going to set this equal to be an object. And in there, I'm going to say database URL. And that I'm going to set to the string that I just copied from Firebase, remember your database reference URL, paste that in here, let's minimize the browser. There we are perfect. Now going forward, you have to make sure that whenever I give you challenges, or you're running the code on your end, you need to make sure that this is replaced with your specific database URL, otherwise, you'll be writing to my database. And that's not a good thing. Because imagine 1000s and 1000s of students writing to the same little database, that's going to be pretty chaotic. So just remember that going forward. Okay, so what's next? Now in order to use Firebase, we need to use some code that lives on Firebase servers. So how do we do that? Exactly. So let's look at a very simple example that I have set up and then come back to this. So on the left side, you'll notice that I made a file called functions.js. Let's go inside of there. This has a very simple function that just adds two numbers together. But you'll notice that it has a keyword in front export. What does that mean? Well, imagine that I want to use this function, not on this file, but in a different JavaScript file. How would I do that? Well, the first step would be to write the function here, and then add export, so it can be exported to another file. And then you got to go into the file that you want to actually use it in and use the Import keyword first import, and then whatever we want to import, we have to put inside of curly brackets like this. So what is it that we want to import? Well, we want to use the add function. So we'll just say add, just this right here. Okay, what next? Now we have to tell it, where do you get it from? So that's going to be this file, right? So we have to say import this thing from? And then we'll say functions.js. So can we start using add here? We actually can, and I want you to make sure that it can. So the challenge is console log add, by using just two numbers, pause here, and I'll see you in a bit. All right, I hope that went well. You probably had some trouble with it, I can't imagine. Let me show you what I mean. Let's go in here. Now, of course, you would think okay, let's just do console log. And let's just do ad and then one and one, right, so this should work. But that actually gives us an error, it says cannot use import statement outside of module. So in addition to this, we actually got to go inside of the index dot HTML. And here, we have to say type, and then module. This is the only way this will work. Now, there's one more thing we forgot, we actually also have to use the functions or js file here. So we got to say functions.js. And both of them need to be set to module because you need module to be able to export it, and then import it. So both of them need to be set to module. Let's try it out now. Run that. And now it worked. Perfect. All right back to Firebase. I'm going to get rid of this. And we're actually going to be importing a Firebase function called initialize app. And where are we going to get it from? We're going to be getting it from this location. There we go. And if you want to see what this code contains, just feel free to copy this and open it up in a new tab. You'll see all of the code there. And we specifically want the function that is initialize app from this location. All right, so with that set up, let's go here and make a const and call it app. And for that, we're going to use the Initialize function that we just imported. And what are we going to give it as an argument, we'll see the app settings here which has the specific database URL, this is going to be the missing link, because this information here is going to connect our project with the project that contains this database. So let's do that. Now. Let's go in here. and see app settings. There we go. And we do want to see if this is working. So let's just do a console log. And we'll just console log app, see what we get. I don't know what we're gonna get. And we get this. Let's have a closer look, open up the console. What do we see here? Okay, Firebase app. Alright, that's good. And we get the database URL. And that's the one that we're using. Perfect. There seems to be communication now between the Firebase database and our specific project. Alright, so what's next, let's get rid of the console and keep going. So next, I'm going to make another const here and call it database. And actually, for this, we have to import another Firebase function. And so this time, I want you to import that. So time for another challenge, import the get database, Firebase function from this place right here, following the same principle as up here, pause here, try it out for yourself. I'll be with you soon. Good luck. Alright, I hope that went well. I'm going to just copy this URL, get rid of this. And then say, import, get database from this place right here. And you'll notice here, the only difference between these two is the app and the database. Alright, with that important, let's go back here and say, Get database. Now, again, we got to feed it some information, right, that's the only way this is going to work. So let's feed it the app object inside of here. There we go. Now we're getting pretty close to this being finished, there's just one little thing that we're missing. So let's have a closer look at our database. So this is where we can start pushing data. But before we can do that, we need to create something called a reference. Now, what is a reference? Well, a reference in this case is any location inside of the database. And so since it doesn't have any data yet, we're going to create a reference here called movies, where all of the movies that be pushed using this input field, and pressing this button are going to go inside of that reference. If that was a little bit too technical for you. Don't worry it, let's just make it work. And we're going to be hearing the word referenced several times during the section. Okay, so let's make another variable here. And I want to call this movies in dB short for database, of course. And let's open that up. And again, we need to use another function, import it from this place right here. So let's go up here, say comma, and then ref. Short for reference. Let's go in here and say, ref. Now ref takes in two different things. First, which database are you working with? You got to see that explicitly. So let's say database, because we got that up here. Right? So it knows what that means. Now, the second argument is going to be what the reference should be called. Let's just call that movies. All right. So is it going to work? Let's see, if we enter anything here and press this do you think anything's going to happen? So I already went ahead and added this code, right? The input value, and then it console logs, whatever you put in, and it says added to database. But there's no code here that we've added that specifically pushes this to the database, we're going to do that. And for that, of course, you probably guessed it, we need another function from Firebase. So let's go up here and say, push. Now watch this. Let's go in here and say, push. And what do we want to push? We want to push the input value. But is that enough? No, because we need to tell this function exactly where we want to push this in the database. So we want to give it the reference first. So let's do movies in dB for that. And now let's cross our fingers and try it out. Let's run this. And of course, get rid of this annoying thing first. Now, I'm going to enter in a movie here, let's say three idiots, press. Did that work? Yes, it did. Let's have a look. And it added it to the database. Again, if it didn't work for you make sure that you changed this URL to your database URL. So I'm going to add Shawshank Redemption. And I'm going to add another movie to School of Rock. And did those two get added? Indeed they did. And we got all three of them their amazing work, we finally have our Firebase real time database hooked up to our project. Great job. And I'll see you in the next one. Now. It is finally time for us to set up Firebase for our project. Let's get into it right away. So I want to start you off with a big challenge. And here it is. Make sure to read this very carefully before you get started. And again, this is a big one. So please don't stress too much if you don't quite get it. And please feel free to go back and refresh your memory if you need to. So with that, pause here and give it a go. I wish you all the best and I'll see you in a few moments. Okay, how did it go? If you manage to do all of that 10 Bravo, let's have a look at it together. So first thing we got to do, of course, is head over to the Firebase console, then press Create a project, name it real time database, check off these two things continue, disable Google Analytics continue, project completed, continue. Now on the left side, let's go to real time database, create database, choose your nearest location, choose Test mode, and then enable. And here we go. We have our database setup, make sure to copy the database reference URL. Okay, let's dive into the code. So let's head on over to index.js. And I'm actually going to give you a challenge again. So I want you to first import the Firebase function initialize app from this place, and then get database from this one. So pause here, give it a go. And I'll be right back. All right, I hope that went well. I'm actually going to use these comments to do this. See import there. And we want to make sure that these are inside of curly brackets. And there we go. That's it. Same thing. Here import. Perfect. Okay, now you can relax a little bit, because I've given you two challenges back to back. Let me take over for a bit. Okay, let's go back to the Firebase console and make sure to copy the database reference URL. Once we have that, let's go back here and say const. And then app settings, make that an object and say database URL, and set that equal to this database reference URL. Now, again, I have to reiterate that whenever you're interacting with scrims in this section, you got to make sure to use your own database URL. Otherwise, as you can imagine, there's going to be chaos inside of this app. All right, so what's next, let's set up an app variable and set that equal to initialize app. And we need to give it some information, we need to give it an argument, that's going to be the app settings that we've set up, right, which contains the database URL, which is going to be the key thing that's going to connect our project with Firebase. Alright, so what's next, then we're going to set up a database variable. That of course, uses get database. And in here, we're going to pass in the app. Alright, one last thing remaining here. And that's going to be setting up the reference. So what should we call this thing? Let's call it shopping list in dB, and set that equal to ref. Now, of course, we got to remember to import that from up here. So ref. And of course, the ref functions takes in two things, first, the database. And then we got to call this reference something. Let's call it shopping list. Okay, let's pause here for a little bit to see if this is even working. Let's press run. And we get an error cannot use import statement, our we forgot to do that key thing. Let's go into index dot HTML. And we always have to remember to go in here and say type module. When do we need to do this? Anytime inside of any JavaScript file where we're either using the Import or the export, or both of them, we have to set this equal to module, otherwise, it's not going to work. All right, let's test it out again. All right, we didn't get an error. So hopefully that's working. Now to conclude this scrim, I want to actually give you a final challenge that we put it right here. So I want you to use the Firebase function push to push the input value to the database. So pause here, try it out for yourself, and I'll be right back. Okay, I hope that went well. Let's do it together. Let's do push. And first, we got to give it the reference, which in our case is going to be shopping list in dB. And then we're going to just give it input value. Now, is this going to work? Well, not exactly because we haven't imported push from up here yet. Alright, let's test it out now. So I'm going to press Run, open this up. I'm going to put in oranges here. Let's cross our fingers and press this button. And I see that it worked for me. Great. I hope you got it to work on your side as well. Awesome job. And I'll see you in the next scrim. Just a very quick scrim where I'm going to cover something that I glossed over in the previous two scrims, and that's security rules. Now if you remember when we created our real time database, we chose to start in test mode. Now this is a perfectly fine way to start. However, as you can see, this message right here says something important. The default security rules for test mode, allow anyone with your database reference to view, edit and delete all data in your database for the next 30 days. Now what that means is is that reading and writing to the database can be done by anyone starting when you created the database and until the next 30 days, which means whatever the time is, at this moment in time denoted by now here It must be less than this long and weird number. Now this is just one way to represent time in programming. It's called Unix epoch time. And if you'd like to play around with it, you can just go to epoch converter.com, or click here. But Firebase has been helpful here and giving us this as a comment, which you can see is the 10th of February 2023. While is definitely past that date now, which means that we won't be able to read or write anything to the database. Let's fix that. So let's go back to our database. And as you can see up here, you'll see rules in the menu. Let's click on that, there we go. So as you can see here, there are two rules, one for read and one for right now just click anywhere here to edit the text. Now you want to go ahead and change both of them to true, remember the comma in between. So this means that anyone can read and write to the database. Now, is this a perfect scenario? Absolutely not. Because it means that literally anyone can write to your database. However, if you're only using this app by yourself or just with a couple of other people in your life, then it doesn't need to be a problem, because you'll only be sharing your app URL with those people. So let's go ahead and publish the changes. Now you'll see this warning message which says exactly what I just explained. But for my database, I'm going to actually set the writing rule to false because I want to make sure that my database doesn't get spammed, you know what I mean, which is also why whenever you run the code on Scrum, but during this project, you will not be able to write anything to my app. So that said for this scrim, this is actually a very important aspect of Firebase. And something we'll definitely cover in much greater depth in a future Firebase course with that covered on to the next one. Alright, so before we can work on fetching the database items from Firebase, we need to first write the code that will actually add the item to the DOM. In other words, we need to write the JavaScript that's going to add the HTML necessary to show the items right down here. So at this point, you've actually already done this before, you've been using innerHTML to add HTML stuff using JavaScript. So I'm going to give you this task as a challenge. But before that, let's quickly add the necessary HTML code we need. There we go. So we got our UL right here with ID shopping list. And to Li is that I have as examples here, oranges and hotdogs, which let's be honest, here are really the only things you need to survive, right? Let's see if that works or not run. And we got those perfect. Okay, let's go over to the JavaScript file. So I have the challenge written out right here. So you basically want to make it so that whatever you put in here, and you press the button, that gets appended right at the end here. So pause here and give it a go yourself, and I'll be with you in a few seconds. And we'll look at it together. Now, before you start. If you don't remember how to do this, feel free to go back a little bit and refresh your memory. Okay, good luck. Okay, did you get it? Well, let's look at it together. So the first thing I think about here is we need to connect our HTML and our JavaScript. And I'm going to do that right up here. So let's do const. And make a shopping list element. And of course, we're going to use our favorite method here, get element by ID, and we call it shopping list. There we go. Once that is done, I can just copy this, put it right in here. And what do we want to apply to this thing? Well, we definitely want to use inner HTML. And then of course, we want to say plus equals, and this is where I'm going to be using template strings, because that's going to let us do this in a very elegant way. So let's do backticks. And inside here, first, let's open it up with an LI tag. And then we're going to say, input value. Close that with a curly bracket and then enter that thing. There we go. Does that work? Let's test it out. Open that thing up. And let's try adding some chocolate here. Chocolate, add to cart and it added it right there. Amazing. Did it add it to the database? Yep, it did that too. Perfect. Now before we end this scrim, I've noticed something that I really want to fix. It's a super simple thing. But did you notice that? Do you notice that when you enter in something here and press the button, it doesn't clear the input field. And that's really annoying, because we want to make this thing as user friendly as possible. In fact, why don't you go ahead and add that code? Pause here, give it a go. And I'll be right back. Okay, I hope that went well. So what are we doing here? So we definitely want to start using the input field element. Let's copy that here. Now what is it that we want to do to it? Well, the value is this thing right here, right? And that's what we want to reset. And how can we do that? Let's just say that the value should would be equal to the empty string. That should work. Let's try it out, run. And I'll add a Red Bull here and press this. And there we go, it clears it. Now notice that the chocolate disappeared. And that's because we haven't started fetching the database items from our actual database. But don't worry, we're going to do that pretty soon. Great job so far. And let's keep going. Okay, I feel like we got to take a little pause here, because you have been doing an incredible job. Seriously, just think about when you started off learning with Scrimba. You were learning simple HTML and CSS not too long ago. And now you're making your own mobile app, and you've just hooked up an actual database to your project. Isn't that crazy? Now, just think about how good you can get if you continue coding, how amazing Are you going to be in three months, six months, a year, five years? Truly amazing to think about if you asked me. So with that, let's have a look at the challenges for the scrim. So in this one, we're going to be spending some time refactoring our code. It's always good to pause every now and then to rewrite your code. In a better way, this gets more and more important, the more complex your projects get. And it's especially important when you work with other developers. So here are the two challenges that I have for you. So take this line of code and refactor it, which means just create a new function for it. And the same thing with this one. So take a pause here, try it out for yourself, and I'll be with you in just a little bit. Good luck. All right, I hope that went well. So how do we think about this? Well, I definitely want to take the first line of code and cut it from here. So let's cut it from here. And let's remove this as well. And then we're going to go down here, I'm going to make a new function. Now what do we want to call this function? I don't know. Let me just give it a temporary name. Let's just call it Hello. And then we're going to paste in that line of code. And now let's think about a good name for this function. So what is this function doing? Well, it's taking the input field element, and it's setting the value to be the empty string. So it's kind of clearing the input field, right? It's resetting it. So I like the word clear more. So why don't we call this clear? input field? L? So clear. Make sense, right? And what is it clearing the input field L, which is exactly what this is called as well. So that kind of makes sense, right? So once we've done this, we can actually take this function and copy it and call it up here. So it actually runs. So that's the first one. What about the second one. So let's start off the same way. We want to cut it from here, cut that, and then let's remove this. And we want to make a function down here. Again, I'm not really sure what I should call it. So I'm just going to call it hello for now. And then in here, let's paste in the function. There we go. Oops, there we are. Now let's think about what this function is doing. So this one takes the shopping list element uses the inner HTML to append the input value at the very bottom. Okay. Hmm. Okay, so what element is it that it's changing? It's changing the shopping list out? All right, so it's appending, a new item to the shopping list L. Let's just write that out. So I'm going to go with a pend item to, and I'm just going to copy this and paste it in there. And of course, we're using camel case here. So I want to turn this into a capital S. Let's see how that sounds. Append item to shopping list L. Is that a super long function name, kind of? Is that a problem? No, I don't really see a problem with this. It's a pretty good function name. If you ask me. Let's go with it. Now, is this going to work? Let's copy this up here. And then try to run it. Let's run that. Let's see read. Does that work? It's not working, because it's giving us input value is not defined. Of course. What do we have here? We have the input value. Does that mean anything inside of this function? No, this is coming from up here, right? That's the one. So we got to use a parameter in this case. So why don't we go in here and say that we're going to feed it the input value, whatever that happens to be. And then in here, we're going to create a parameter and let's just call it item of value. And I'm going to take that one instead. And use that in here. All right, so let's try that again. Now. Let's do bread once more. Is that going to work? There we go. Now it works perfect. Now next up, we're going to be looking at how to fetch items from the database and do that in Real Time. However, before we can do that, we need to go on a tiny little tangent here, so that we can learn about something that we really need to know. And that is how to take a JavaScript object and transform it into an array. Okay, see you in the next one. So much of coding is about turning a piece of data in a specific format to another format. As programmers, we need to do that all the time. So let's have a look at what kind of data we have here. So here we have a let variable called scramble users, that is an object that contains three users. The key is the ID of the user. And then the value is the email address. Now what if we wanted to turn this object into an array? Now, you might be asking yourself, why would we even want to do that in the first place? Well think about it, maybe you want to write a for loop, and you prefer to work with a race. Okay, so how do you do that? Exactly? Well, in this case, it turns out that the awesome people that contribute to the JavaScript language, already thought about this. In JavaScript, we have an object type, and you can get to it by writing object with a capital O. Now, we don't need to worry too much about what types are exactly at this point, what we are interested in right now is how to use a method on object. So we can convert this object into an array. Alright, let me show you. So what we want to do here is say object and then dot, and then I'm going to write values. Okay, and this is a method, of course, so we got to end it with these parentheses. And we can also feed in the object that we want to use here. So I'm going to take this, copy it and put it right here. Now, of course, we do want to console log this. So let's do console log, right here. And let's see what we can run. And we get an array. Let's have a closer look. Yes, it is indeed an array, and we get all the email addresses. This is perfect. Now, what if you wanted the keys instead? What if you didn't want the values but the keys? Well, of course, we have that too. So for that, we just change values into keys. Let's run that again. And there you go, you got the keys. And then of course, naturally, you're probably thinking, Okay, what if I wanted both, while they thought about this, as well, of course. And so the final method I'm going to give you is going to be entries, and this is going to give you a little bit more complex of an array. Let's have a look. And see, it gives you an array that contains arrays that each have two different things in it first, the key and then the value. So in this case, we get both. Alright, now before we end the scrim, I want to give you three challenges to get some practice with this. So I'm going to remove this. And here are the challenges. Make sure to read them carefully. Pause here, try it out for yourself. And I'll be right back. Good luck. Alright, I hope that went well. Let's have a look at it together. So first, I'm going to go for let's and then scramble users emails, set that equal to object. And then of course, the first one that we learned was the values one, right? And what is it take? Well, it's going to have to take this one, that's the only thing we have. That's the object. So this together now is going to return us an array. Let's see if that's actually the case by console logging it here. console log, this one, let's see added gives us the emails Perfect. Now once I've done this, the rest are pretty easy. So I'm going to just copy this one, put it right down here. Replace it now with IDs instead. IDs. And what do we want in this case, we don't want the values we want the keys. So let's see if that works now. Beautiful. Okay, the last one, again, copy this one, put it down here. And then we go for entries instead this time. And of course, we want to use entries like that. Let's see if that gives us the final one. And there we go. Perfect. As I said earlier on, this is a very useful thing. Programmers change the format of the data all the time. All right, great job with this one. In this grim, we're going to be using a magical Firebase function that will make it super easy for us to get exactly what we need from the database whenever it changes in any way. I hope you're ready for it. Okay, so let's spend a little bit of time looking at exactly what's going to be happening here. So this thing right here is a real time database. You'll see this type of icon pretty often. It's usually used to denote a database. And so here we have a person using our app on their phone. This app uses this database to store all of its data. Now this party right here is also called the client, if you've ever heard that technical word before. Now, of course, the client could be using any device could be an iPad, other kind of tablet, desktop, computer, laptop, Android phone doesn't really matter. So let's bring in another client right over here. Now this person is also using the same app, which of course also uses the same database. And so let's say that this client over here adds in some value to the input field, and presses this button, at which point the data is saved on to the database. Now, we've already done this, but this is where the magic happens. Because right after this action has taken place, the database immediately sends a signal to everywhere saying that the database has been updated. In fact, it does something even better, it actually sends the new data from the database to all of its clients. Now, this data at this moment in time is something that Firebase refers to as a snapshot. We'll be working a lot with snapshots in this scrim, so just get used to that word. Okay, now let's have a look at the app that I've got set up here. So this app is called a best REITs. And it's supposed to show your favorite books right under here. Now, I've already gone ahead and written the HTML, CSS, and most of the JavaScript for it already. Now, before we start adding any code here, I want to show you how you can add data to the database through the Firebase console. So if you don't already have it open, let me show you a shortcut on how to do that, you can just copy this URL for the database, of course, use the one that you're using, and just open that up in a new tab, it's going to take you to your Firebase Console to the real time database. All right, so I've got my real time database right up here. The first thing we want to do is go right up here, and then press this plus button. Once you've done that, this is going to appear, it's going to ask you for a key and a value. Go ahead and write books right in here. There we go. Now, instead of putting something in for the value, we're going to just go ahead and press this plus button. And did you see what just happened there, this now allows us to nest the data inside of the books, which is exactly what we want. Okay, so let's go ahead and add our first book. For the key, we're going to say one, and for the book, I'm going to put in make time, which is one of my favorite books. Once you're done with that, go ahead and press Add, boom, we got make time in there perfect. Now let's go ahead and add another book, go up here and press the plus button again. And then again, we want to put in two here. And then I'm going to put an animal farm one of my all time favorite novels, go ahead and press add. And there we go. We got two items. I think that's good enough. Okay, now let's go back to the code. So what's the first thing that we want to do? Well, in order for us to fetch the database items in that magical way that I was talking about, we want to use the on value function. So let's go up here and import it. First, we're going to see on value Perfect. Now what now let's go down here and start using this function. So how do we use it exactly, first, go ahead and just write on value. And then let's open up the parentheses. Now the first argument that we want to give it is going to be the reference where we want to fetch the data from now what is that? Well, that's going to be this one right here, the books one, and I've already got that set up here. It's using the reference function right here. So I'm gonna go ahead and copy this and put that in right there. Okay, now we know where we want to get the data from. Now, what's next, the next argument is going to be a function, which inside actually contains the snapshot, so we're going to be able to use the snapshot inside of here. Okay, let's go ahead and open that up. Okay. So as always, we want to just do a test first. So let's go ahead and console log snapshot just to make sure that things are working. All right, let's go ahead and press Run and hope for the best. And there we go. We got both of them. Perfect. Now let's open up the console. And you'll notice here that this is an object and we don't really want to work with objects. In this case, we want to turn this into an array. So let's go ahead and do that. Okay, so let's make some space up here. And let's make a left variable and call it books array. Now, how do we turn an object into an array? Well, we just learned how to do that, right? So let's do object and then values. And then inside is where we want to put the snapshot. Okay, hopefully, this is going to work. So let's now console log the books array instead, press run again. And we get something very weird that I do not understand. It does look like an array, but it's not quite right. problem here is that we don't want to use snapshot directly, we want to actually say snapshot, dot Val, which is going to make it work now hopefully let's try it again. Run. And there we go. Now we got that beautiful array with both of our items in it. Perfect. Okay, now this is where I want to give you some work to do. So here's your challenge by using this array that we just made. Write a for loop where you console log each book. Alright, pause here. Give it a go by yourself, and I'll be right back. Good luck Okay, I hope that went well. Let's Do it together. Now let's do for let i equals zero. And then I smaller than books array, of course, the length of that. And then we want to do i plus plus super standard stuff. Let's open that up. And we want to do console log. And then we want to do this books array, but not the whole array. We want the item of it right. And so we can console log that. Okay, so let's see if this works. Now, Ron, do we get it? Yes, we get both of them perfect. Now, before we end this, I do want to add something here because I normally like to do it this way, let's say current book, and then put this right up there first. Once we have that, we can just use current book in here, pores, let's make sure that that also works. Of course, that's going to give us the exact same thing. Perfect. All right, but we're not done yet. Because we don't want to console log the books, we want to actually show them here. And I've actually gone ahead and already made a function right down here called append book to books list L. It's kind of a long one, but use this function inside of the loop so that you can show the books right here. Alright, so I'm going to put the challenge right here. So pause here, try it out for yourself. And I'll be right back. All right. I hope that went well. Let's have a look at it together now. So first thing I'm going to do is just copy this whole thing, because that's what we want to use. Put it right down here. So what is this book value here? Well, that's the parameter of the function. And we don't really have that inside of here. So we got a substituted with something. Where's that book? Well, the book is right up here, current book. So let's just copy this and put that in there. And I believe that's all we got to do. So let's see if that works. Let's run that. And do we get it? Indeed we do. We get both of these here. Let's make it a little bit bigger. And there we go. Perfect. Now at this point, you might be thinking are great, we're done. Not so fast. Because let me show you what can happen. So let's say that you go into the database, and you make a change. Let's say that we want to change the title of this for make time to make time. And I don't know why you would want to do that. But let's just do it to demonstrate a point here. So let's go inside of the database. And what you can do is you can just go ahead and press this, and it's going to let you edit it. So I'm going to do that on my side A B, go ahead and change that. Now before I press enter to make this happen. Let's see what happens here now. Okay, I'm going to press enter in 321. Did you see let's have a look what just happened, it didn't remove the first books, it appended it at the end, this is a problem, because every time the database is going to be updated, it's not going to clear any of the first stuff, it's just going to keep adding that's going to be super chaotic. And we definitely don't want that. So at this point, I want to give you the last challenge of this scrim, which is to try to fix this bug. Now before you go ahead, though, notice that there is a function that we haven't talked about. And that's the clear books list L which actually contains the functionality that you need. Now you just need to place it somewhere inside of this on value function. I don't know where that's what you're supposed to figure out. So pause here, give it a go for yourself. And I'll be with you in just a couple of seconds. Good luck. Okay, so how do we think about this now? Well, here's how I think about it. So the on value function is that special function that runs every time there is an edit to the database. So in this case, we just changed the title of this slightly. And so it ran the entire code. Now this is the part of the code the for loop that is actually doing the appending. But before that we're not clearing anything. So why don't we just plain and simple copy this. And right before the loop runs, we say Hey, make sure if there's anything there just clear it before you start a pending. Okay, let's see if this works or not. I'm going to run this again. Now. Okay. Again, we have both of the books ah, hold up right there for just a second. This is future mean talking to you. After recording the scrim I noticed that at this point, I'm actually seeing both books on my side. But you're actually seeing a blank web page right now with just the best reads heading. Now this is due to a little bug with the scrambled mini browser. But I want to assure you that this is actually working. In fact, to prove it to yourself, you can pause right here and put in your database URL right in here, and then press run. And you will see that it works. Feel free to make edits to the database. And it's going to update here again. Sorry about this. We're of course going to try to fix this as soon as we can. But until that I hope you can forgive this bug. So yes, indeed. This code right here is what fix that bug that we run into. Now before we end this really long scrim. I want to give you an extra well done. We managed to cover a lot of ground in this one. All righty, so it's fine The time for us to fetch the items from the database in real time. Firebase is a gift to the world seriously. So why don't we just start the scrim off with a challenge. So let's go down here. And I'm going to give you a challenge right here. So I want you to call the on value function, you're going to have to import it up here first, with shopping list in dB as the first argument. And then the function snapshot as the second argument, this will get us started building our own value function. So pause here, give it a go yourself, and I'll be right back. Good luck. Okay, I hope that went well. Let's do it together. So let's do on value. And then open it up and do shopping list in dB. First, we have to specify the reference first, so it knows exactly where to fetch the items from. And then let's make that function. And then of course, we got this snapshot in here. And then open this up. There we are. All right, it's time for the next challenge. Here it is console, log snapshot dot Val to show all of the items inside of the shopping list in the database. Pause here. I'll be right back. Good luck. Okay, so let's see, let's scroll down a little bit. And let's start doing this. So let's do console log, and snapshot dot Val. Let's see if that works. Run that. And we have on value is not defined, obviously, because I forgot the most basic thing, which happens all the time. So I'm going to go up here and import that. Hopefully you remember to do that. There we go. Let's run it again. And we got our object with all of our items. Perfect. Okay, now I want to give you the final challenge for this scrim. Let me get rid of this first. And here it is. Use object dot values to convert snapshot dot Mal from an object to an array. And you want to create a variable for this. And also make sure to console log the result just to make sure that it's actually an array. Good luck, pause here. I'll be right back. Okay, let's do this thing. Let's go up here. And we'll say let an items array. And we'll set that equal to object. And of course, we want to use that object dot values, right, that gives us exactly what we need, in this case, snapshot, dot Val goes in there. And we do want to make sure that we console log that just to make sure that things are working. As always, let's run that and see what we get. And we got that beautiful array. Perfect, great job working on the challenges I'll see in the next one. Okay, so now we've got the on value function, giving us the snapshot every time the database updates. And then we've turned that into an array right here. So of course, the next natural challenge is for you to write a for loop using this items array. So that's the challenge. Pause right here. Give it a go. And I'll be right back. All right, let's do it together. So let's go with four and let i equals zero. I smaller than items array, the length of that, of course, and then i plus plus. Let's open that up. And how do we get the specific item per iteration. That, of course is going to be items array, and then the IFE element inside of that, right. So let's console log that. And then we'll test this thing out. Let's run that. And there we go. We got a full list. That's perfect. Okay, my next challenge for you is this one, use the Append item to shopping list element function that we made before inside of the loop to append each item to the shopping list element for each iteration. So basically, when you run this, all of the items should show up here. Okay, good luck, pause here. And I'll be with you in just a couple of seconds. All right, I hope that went well. So what do we do here? What's the first thing that we should do? Well, we definitely want to use this function. So I'm going to just go ahead and copy this. And then paste it right in here. Now let me get rid of this console log. And do we have something inside of here called item value? Absolutely not. That's the parameter for this function. So we got to substitute that with items array, and then the eighth element, of course in there, right. So let's see if that works. Now, run that. Did we get it? Yes, we did. Now there seems to be a little bit of a problem here because we're getting oranges and hotdogs up here. These were just examples that we added in the beginning. So let's remove them now. There we go. Let's go back here again. Try to run Once more, and then for some reason we're getting bread two times. I wonder why that is. But the rest of them seem to be right. Actually scratch that. That's my bad. I actually was the one who accidentally added two breads to the database. So let's actually delete it from the database. I'm going to do it from the console and see if this fixes itself or not. So let's see here. I'm going to delete one of them. Yes. And there we go. Okay, so it now did it two times, right. So we got to fix that. Because here we have everything. And then we have everything once again. Now at least it only has one bread. So let's actually end this scrim here. And we'll fix this bug in the next one. Okay, so in the last scrim, we discovered that there was a big bug with our code, whenever there was a change to the database, something isn't working, right. See, we got all of these here. So what is going on here? Well, can you guess what I'm going to say? Now? While if you guessed that I'll be giving you a challenge to fix this bug, then you're absolutely right. Pause here, try to figure it out by yourself. And I'll be right back. Good luck. Okay, how did it go? Well, the most important thing is that you try to think about it yourself. Okay, so let's look at the code together. So I want to immediately go to the on value function. And so this function is running whenever there is a change to the database, right? And what are we doing inside here? We're using the snapshot to turn it into an array, so that we can run a four loop on it, right? So every time this happens, this for loop is running, which kind of explains why it's continuing to add the items at the end. We're not clearing the items before that happens, right? So we got to do that right up here. So how can we do that? Well, we can just say, shopping list, l innerHTML. equals and then the empty string. So let's try to run that now. Okay, looking good so far, let me try to add a new item to test this thing out now. Coffee. And we have a new bug. Or at least maybe this was there before as well. But we still haven't fixed all of it yet. At least it wasn't rendering all the items now it was just duplicating this one last year. Okay, duplication. What does that mean? To me that says, okay, there is somewhere in the code where we can remove something that is already happening? Well, this one we can't remove, because this is the key thing that's that we need to keep. But if you look up here, you'll see that we're running the same function with the input value. So we're doing it two times now. So let's just get rid of this. And I think that's going to solve our problem. Let's run it once more. And now let's add in solo, which is a Norwegian soda that we like here. And now it works perfect. Okay, but before we end this scrim, I am looking at this piece of code right here, I actually want to take this out and refactor it. So I'm going to copy this. And instead of that, I'm going to say, clear shopping list L. And we're going to use this one here. So let's take this out of here, make a new function, clear shopping, list L. And then of course, we're going to paste that in right here. Let's test it out again. There we go. And let's add something healthy here. Let's add in a salad, there, we are perfect. Always grab the opportunity to refactor your code. Well done. I'll see you in the next one. So up until this point, Flexbox has been making our lives so much simpler than it could be. It's one of the best things about CSS for sure. Now, let me introduce you to another feature of Flexbox. That is just incredible. Let's have a look at this website right here. So I've got some of my all time favorite YouTube videos showing right here. There's a total of 12 video thumbnails that are showing here. But the problem is that these thumbnails are continuing along this horizontal line, as you can see by scrolling. Now, of course, this is a horrible user experience. So let's fix this problem by using something called flex wrap. Now, check this out. So all I got to do is tell Flexbox pay, take all of the elements inside of this parent div and wrap it around the max width of the parent element. Okay, let's do it now. So flex wrap, and then we'll say yes, please, we do want to wrap it. So let's do that. And there we go. Isn't that amazing? Do you see how beautiful that looks? Imagine how much more CSS we would need to write without flex wrap. Now before we end the scrim let me show you two more values that you can put right in here. So the others would be no wrap, which takes you back to the default. And then there's wrap reverse, which of course reverses the order. So let's take it back to rap. And there we go. Beautiful. So here we have one of the most iconic album art so One of the best bands in history written in HTML and CSS, of course, now currently, we're using margin right here in order to create some spacing between the pictures of the Beatles. This right here. Now that's fine, of course. But now we know Flexbox, which means that there is a much cleaner way to achieve the same result. So instead of using the individual elements here to create a margin, we can instead say to the parent element that you should create a gap of, let's say, 10 pixels between all the child elements. Let me show you. So let's remove this. There we go. And let's go in here and say, gap. And then how much gap do we want? Let's do 10 pixels. And there you go. That's all there is. Now let's add some more gap. So let's do 20 pixels. Now, of course, that's too much, because we have a max width here of 420. We can increase that to 440, let's say and then we're back here. Perfect. Now what if you wanted to have a different gap top bottom, then left and right? Well, you can do that in an easy way here, too. So let's say go in here. And let's do 10 pixels here. So here, you'll see left, right is 10 pixels, and top bottom is 20 pixels. So you can control even that, but I'm going to just let it be at 10 pixels. So let's get back to that. Okay, this is where we're going to take a little pause from working on JavaScript for just a little bit so that we can add some more CSS. As you can see, the list items are being displayed like this, which is the default way, but we want them to be displaying like this. And so that's your challenge to solve. Now, before I let you work on this, I gotta mention here that you want to put all of your code inside of the CSS file. In fact, I've already gone ahead and added all of this for you. So make sure that you write your code in between here and here. And there's also a CSS comment here that includes the background color, the cream color that you can see here, and also the code for the box shadows right here. Okay, so this is a big challenge. So please take your time with this. And of course, if you don't fully get it, then that's completely fine. The most important thing is that you try. So pause here and give it a go by yourself. And I'll be with you in just a little bit. Good luck. Okay, I hope that went well. Let's have a look at it together. So what's the first thing that we notice here? Well, I don't know about you. But I noticed that there are no bullet points here. We don't have that. So let's get rid of that. And then of course, the items are laid out next to each other. So we definitely want to be using Flexbox. And then we want to use flex wrap to wrap the items around. There is a little bit of a gap here as well that we want to include. Okay, let's get started. So I'm going to go inside of the UL first, and I'm going to use list style type. And I'm going to set that equal to none. And there we go. Beautiful, all of the circles are gone. Okay, what's next? I definitely want to get rid of this space right here. I believe that's the padding. Let's see. Padding equals zero. Perfect. Okay, next, let's do display flex. There we go. Very nice. Then let's do flex wrap and set that equal to wrap. Awesome. Okay, let's keep it like that for now. And let's go down here now. And I'm going to uncomment this first. There we go. Very nice. Let's get rid of this line and add some padding here. How much padding Should we add? I'm going to try 10 pixels. First. Let's see how that looks. Looking pretty good. But I think I want to increase it to 15. Actually, there we go much better. Okay, we also have a border radius here, of course, like everything else. So let's go ahead and add that right under here. Border Radius. I also want to make that eight pixels like the others. So let's go for eight pixels right there. Now is there anything we're missing, as you can see right here, the items are kind of cramped together. So we definitely want to give it some gap. Let's do gap 10 pixels. Okay, that's pretty good. But still, we can see that there was a little bit of space right here on the right side for this Red Bull item. And I want these to be stretched out as much as possible. We're gonna use flex grow for this. So we're gonna say flex grow equals one, and that should fix that perfect. Is there anything else we're missing here, it's a little bit difficult to see. But you can see that the text is not quite aligned to the center. Let's fix that text align center. And you know what, I think this looks pretty much identical to this now. Awesome. Now there is one thing that I also want to change, I can see that the font size right here is smaller than the one up here. I want to see if it looks better if I change it the same font size of the rest. Let's try that up here. Let's copy it from here, font size and explicitly define it up here. So let's set the font size to 20 pixels. In my opinion, this looks better. Now of course it's up to you what you like better, feel free to make changes whenever you see fit. Okay, let's have a final look at it. Let's run the app. Let's stretch it out a little bit. Oh my god, this is looking so good. This is genuinely looking like an app that you would download from the App Store. Is that crazy? Or am I a little bit delusional? Don't you think this looks pretty good? Well, that's my opinion. Of course, this definitely looks pretty sweet. Okay, good job so far. Let's keep going. Okay, so now our app is really only missing one feature. And that's the delete feature. So we wanted to make it so that whenever you press on any one of these items, it is removed from the cart, meaning it's removed from the database. Right. Now, in order to do that, we need to understand something very important in software development. And that's the concept of a unique ID, let's have a look at our database. So here we see all of our items listed out here inside of the shopping list. Notice that each item is listed with a key and a value exactly the same by the way as in a JavaScript object. Now, what is this weird thing right here? Well, if you notice, all of these are different from each other, which means that it's a unique identifier. Now, why do we even have to have these in the first place? Well think about it. If you want to delete a specific item from the database, don't you need to know exactly which item it is? And then you might think, well, don't you already have the name of the item right here? Yeah, sure. But what happens if someone asked the same item twice the way we've programmed this, that's definitely allowed. So we need to have a unique identifier. And that is why we have this ID. Now luckily, we're using Firebase. So we don't need to worry about creating this ID for ourselves. Firebase does that automatically. However, we do need to figure out a way to get the ID somehow inside of our code, because that's the only way we can tell Firebase to delete an item for us. Okay, let's go back to the code. All right, I'm going to go inside of here. And I'm going to use the old console log trick. And I'm going to say snapshot dot Val. That's what we started off with. Right? So let's do that. Again. Let's run that and see what we get. Okay, great. Those are all the items from our database. And notice here we have both the ID and the items. Okay, so what we're doing here is that right here in the items array, we're using Object dot values, to convert those into just the values. I wonder if there's another method that we can use on object that gives us both. Can you think of anything? If you can pause right here and put it in here? I'll be with you in just a few seconds. Okay, did you remember it? While remember, we can use values, but we can also use keys. Remember, that will just give us the IDs. Let's try that by console logging items array. Let's run that. Now we get only the IDs. But remember, there was a third one called entries. Let's try that one. Now. What do we get now? Now we get an array with smaller arrays inside of it that contain both the ID and the value. This is perfect for us. Okay, so what do we do now? Well, we want to access these things right inside of the loop here. So I'm going to go ahead actually, and do what I always like to do, which is make a variable here for the current item. And in here, I'm going to say items array, and then the if element. So we can use current item here. Okay, so we got the current item. Let's see what we get. Now. Let's open this up. Ah, do you see? Now this is getting pretty congested, but we got both the ID and the value. Okay, this is looking pretty good. Now I have a challenge for you, because I want you to use current item, but make two new variables, call it current item ID and current item value and use current item to set both of them equal to the correct values. Okay, pause here, try it out for yourself. And we'll be right back. Okay, I hope that one well, let's do it together now. Current item ID. And that's going to be current item. Remember, this is an array with two things inside of it. What's going to be the ID, well, that's the first one or rather the zero of one because we're dealing with arrays. So I'm going to say zero in here. Similarly, we're going to say current item value. And here we're going to set it equal to one. Let's try it out. Now. Id first let's see how that looks run. Do we just get the ID indeed we do. Perfect. Let's do it for the value now. Run and now we're back to getting the value only. Perfect. Now we have the information that we need. Well done. Okay, now we have a little bit of a problem here. How are we adding a new item to the shopping list element? Well, currently we're using innerHTML with template strings. And while that works in a lot of simple cases is not going to work for us anymore. Why? Because we need to make it so that we can attach an event listener to all of these items, and we need to do that so that we can run a function every time the user clicks on any of these items. And that's just not possible this way. So what we need is Create Element. And you've actually already seen this, although very briefly in a previous scrim. However, in this one, we're going to dive much deeper into it. Now I gotta give you a little disclaimer here, create element can be one of those things, that's pretty confusing to understand, at least in the beginning, so I'm going to try my best to explain it to you in an intuitive way. Okay, so as you can probably guess, from the name, Create Element is a function that lets you well create an element, of course, but it's a method that needs to be applied to the document object. So you can say document dot Create Element. And then you have to make a decision about which element you want to make, do you want to make an h1, a paragraph tag, a div, you can make anything. And in our case, we want to make a new list item. And li That's step one. Step two, is to give your newly created item, some text content. And in our case, that's going to be the name of the item. Alright, download step two, the last step is to place the newly created element into its parent element. And in our case, that's going to be the shopping list element, the URL. Okay, so let's go back a little bit and start with step number one. So I'm going to go down here. And for now, we're going to just comment out this line. And so the first thing we need to do is to create a variable, and I'm going to call it new L. And I'm going to equal that to document dot Create Element. Okay, inside of here, we got to give it what is it that we want to make? In our case, we want to make a list item. That's step one completed. Okay, so what's step two? Well, that is put some text between the tags, right? So let's go down here and say, Hey, new L, I want to add some text content to you. And I want that to be something we'll fix this later. We'll just put in a string here to test it out first. All right, what is the last step, the last step is to take this thing that we just made, and place it inside of the parent element. And for that, where is our parent element? Well, let's go up here and take a look. That's going to be our shopping list L right. So let's copy that. Go down here. And say, start with that. And then append. We're using a method called append. What do we want to append? Well, we want to append new L at the very end. So let's put that in here. And hopefully, when I run this now in the mini browser, it's going to take away all the names of the items, and is going to show us a bunch of items that say something. Let's see if that works. Let's run this now. And there we go. It works perfect. Okay, now, this is where I want to give you a challenge, pause here and change the code so that it actually shows the name of the items rather than something for everything. So pause here, give it a go. And I'll be right back. Okay, I hope that went well. So this is how I think about it. We already have item value here as the parameter, right. So we can just use this. And we're actually feeding it up here using the current item values. So that should give us what we're looking for. So let's just go in here and say Item Value, just copy it up from here and replace it down here. And let's now try to run it, see what we get. And we get all the items. Amazing. Okay, so before we end the scrim, I do want to do one more thing, because even though we're getting the value of the items in here, and that's fine. But we also would like the ID, because remember, we want to later on make it so that we can delete these items by pressing on them. And for that we're going to need the ID. So let's do that now. So how are we supposed to do that now? Well, we are getting item value here, right? But if you look up here, this is where we're actually using this function. And we're feeding this thing to it. Why don't we just feed it the current item, which contains both pieces of information, right, and then deal with that down here. Let's do that now. So let's do current item, put it in here. And then we'll go inside of here. And we'll say let and then let's do item ID, item, and then zero. And then we'll say lead again. And then we'll say item value. And then we'll say item. And then of course we want to get the first one, right. So we can now delete this. And let's delete this too. And let's change this to be just item instead of item value. And I think that should work. Let's run it now. So this, of course, is still showing the item names, which is good. Let's change this now to Item ID just to make sure that that's working to does that work and we get them beautiful, perfect. So I'm going to just replace it with item value again. And there we go. Well done. We achieved a lot in the scrim. I'll see you in the next one. Okay, so how do we go about deleting items from our Firebase real time database? Let's take a look at this project that I've got set up here. So here we have the Scrimba Times, a publication running since 2016. Which is your one stop shop for Scimba news and beyond? Actually, I like to go as far as to say that it's the most trusted publication in tech. But unfortunately, that's not true. See, with the rise of Scimba, we've been getting a lot more contributors to the Scimba Times. And that's a good thing, right? Well, not always, because sometimes we end up publishing fake news, which, of course, is very bad. And that's not something we want to stand behind. So in order to combat this problem, we've hired fake news to leaders, yes, we actually have to hire people to detect the fake news and delete it. And so in order for these people to do their jobs, we need to create the functionality for them. So how would that work? Exactly. So here, I basically gone ahead and written all of the code for this, almost all the code and here you can see we've got some stories, three per row. And so we want to make it so that these fake news, the leaders can double click any of these items and delete them from the database. All right, so where exactly are we supposed to write the code? Let's scroll down here. And writing here's where we're going to be writing most of our code. As you can see, we have double click event right here, we have a function that's going to be executed anytime any of these are clicked. So what's the first step? How do we go about doing this? Let's have a look at the database. Here we have the database with all of the stories and the IDs for it. In this case, I manually added the IDS myself just to make it a little bit simpler for us. But it would work exactly the same with the automatically generated Firebase IDs. Okay, so if we wanted to tell Firebase, hey, delete this story right here, we need to tell it delete the story that has the ID n s zero. That does make sense because it's a unique ID, right? So let's do the first step, which would just be literally to console log that ID. Let's do console log. And where's that ID? Can we see it anywhere? There it is. Story ID, let's try that. Put this in here, run this. And if we double clicked any of these, we get the ID perfect. Does it work for all of them? Looks like it. Amazing. All right. So what's the next step? Well, the next step is a little bit more tricky, because in order to delete this story with this ID, we need to give it the exact location. So it's not just the ID. But the fact that it's inside of the new stories inside of the database, we need to give it the full path to that. So remember, references, the ref function that we use before, that's what we're going to be using. So let's do that down here. So let's delete this now. And I'm going to make a variable for this, let's call it exact location of story in dB, and equal that to be ref first, and then always, we got to provide it with the database first. So let's do database. And then this is where we got to point to the location. So in here, we're going to need the ID. But before that, we're also going to need this one right here, the news stories reference. And so let's let's put that in there. Let's do new stories. And then let's do one of these IDs. Now, let's just test it out. Now with n s zero, I see if that works or not, and S zero, okay, is this by itself going to do anything? No, this is just the location, we actually got to remove it from the database. And for that, we need the Remove function, which is fairly simple to use. So we're just going to go up here and import it from Firebase first remove, let's go down here again. And we're going to do remove and we're literally just going to feed it this whole thing which contains everything that it needs. So at this point, if we run this now and double click on any of the new stories, this first story should be deleted. Let's test that out. Okay, is the first story of fake news scramble gets acquired by Microsoft for 11 billion. That's definitely fake news. That's way too little money for scuba. So we're going to delete that double click and delete it. Perfect. It works. Okay, so what's the last step now? Well, we're going to make sure that this ID is just replaced with whatever ID we're going to be using for that specific news story. So let's use template strings for this, go down here, make it into a backtick. And then we're going to say which one do we want to use? We want to use this ID right. So let's just replace it in there. Okay, hopefully it works now. So let's run this again and delete all the fake news. Okay, let's see. What do we have here? 89 year old becomes oldest scramble student to get hired. That's definitely not fake news. That's amazing news. scrambler releases first course entirely made by AI. Definitely fake news. Let's double click on that. Elon Musk welcome 16th child to the world. That's not fake news. This one is that fake news now is not fake news, either. And this is not fake news, either. I think we're good now. All right, just to recap really quickly, the two main things that we needed to do was to get the exact location of the item that we wanted to remove from the database, and then just feed that information to the Remove Firebase function, and then it takes care of the rest. And how does it update instantaneously? Well, remember we're using that on value function that takes care of that right because deal Eating something from the database also updates it, which means that on value gets new information, which it runs. Okay, I hope that was clear. I'll see you in the next one. All right, this is exciting because we're finally ready to add the code that removes items from the database when we click them in the app. Okay, so we know by now that the key information that we need is the ID of the item in the database. So let me actually give you a challenge. Let's scroll down to this function right here. And right here is where I want you to add an event listener to new L, so that you can console log the item when any of these buttons are pressed. That's the first step. Pause here, try it out for yourself. And I'll be right back. Good luck. Okay, how did it go? Let's try it together. So let's start with new L. And then we want to add event listener. We've done this a million times before. First, of course, is the event that we're listening for, that's going to be a click, and then we got to write the function in here. Let's open that up. And of course, first step is always to just console log, I personally find that the easiest to start with. So what did we want to put in here though? The ID of the item? Do we have that already? Indeed, we do we have it up here. So let's just copy that and put that in right here. And let's run this now to test it out. Okay, what do we want to remove from here? Let's remove the salad. Click, and we got this console log. Is that the same one? Yep, that's the same one right here. P and B is what it ended on. So we know that's right. Perfect. Well done. Okay, what's next. So let's go inside of here. And this is where I actually want to give you the second challenge. And that is make a lead variable and call it exact location of item in dB. And set it equal to ref. That's the function that we're importing right up here. We've already used it here before. And so we want to use it again, because we want to get the exact location of the item before we can run the Remove function on it. So you want to set it equal to this. And then first, of course, this database as always, and then there is something and you are supposed to figure out what that something is supposed to be. So pause here, try it out for yourself, and I'll be with you in just a sec. Okay, I hope that went well, let's do it together. Now, let's go in here and say exact location of item in dB, set that equal to ref. And of course, ref always requires you to specify the database. So let's do database. And then in here, what are we supposed to put in here? Well, let's take a look at our database right now. So right now we've specified that this is the database that we're dealing with. Now what other things that we need to specify? Well, we first need to say we're inside of the shopping list. And inside, this is the ID that we want to take away, or this one, or this one, or whichever one that we're clicking on, right. So we're going to start with this first. So let's go in here, and I'm going to use backticks. Let's start with that. And then do shopping list. And then we want to do just slash and then this is where the ID goes. Now do we have the ID again, we do have that because we just used it right up here. Let's just copy that and put it right in here course using the dollar sign in here. And there we go. I think this is going to work. The last thing we got to do is to actually use the Remove function. And that's where you come in. Because this is going to be your last challenge for this scrim use the Remove function to remove the item from the database, pause here, try it out for yourself. And I'll be right back. Good luck. Alright, so before we can use this function, we got to import it from up here. So let's go ahead and say Remove. And then we'll go down here. And we just got to call it like this. And all it takes is the exact location of the item in the database, which we already have. So we're just going to feed it that information. And that should take care of it. So let's run this now and test it out. Let's try to delete something, or should we delete? Let's go ahead and delete the salad. click and delete it gone. Perfect, great job. So I don't know if you've noticed, but there is a big bug that we haven't looked at yet. Try to pause the screen right here to figure it out. Here's a hint. It has something to do with the database items. So try to remove the items from the database. I'll see you soon. So did you spot it? Let's have a look at it together. So let's start off by deleting the database items one by one. Okay, we're fine so far. Let's continue Okay, so now we're down to the last item. Let's click on it. Uh, ha, we got an error. Let's have a closer look at that. Okay, let's minimize the minimum browser, we got a huge warning here. And then it says here cannot convert undefined or null to object. Hmm, what's going on here? Let's close the console. And I want you to pause the scrim right here, again, to try to think about it for yourself. Before we look at it together. What is really going on here? Okay, pause here. And I'll see you in just a sec. All right, so we got to do some detective work here. First of all, which code is being executed whenever we press the button to delete it from the database? Well, that's, of course going to be this code right here, right? Remember, whenever the database has changed, this runs every time but in this case, did it really run, it gave us an error. And it did that on the last item. What's so special about that one, we'll see when we deleted the last item, Red Bull in this case, with it, we also deleted the shopping list reference. And when the reference no longer exists, this odd value function fails, which means that at that point, we don't get back a snapshot, because no snapshot exists. Okay, so how do we handle that? Well, I can tell you that you don't need to stress about this at all, because the awesome people of Firebase, of course, already thought about this, which is why they provided us with a method called snapshot dot exists, which returns a true or false boolean value based on if there is a snapshot or not. Okay, so armed with this method, I want to give you a challenge, change the on value code, so that it uses snapshot dot exists to show the items when there are items in the database. And if there are no items, it should show the text, no items here, dot dot dot yet. Okay, pause here, try it out for yourself. And I'll be with you in just a few moments. Good luck. Okay, I hope that one, well, let's have a look at it together. Okay, we're using the snapshot method, which is returning a true or false value. Whenever I hear that, I immediately think of an if statement. Let's start with that. Let's go up here. And let's say snapshot dot exists, okay, this is going to return us true or false. In the case of true, that means that there is a snapshot, which means that there is at least one item in the database. So I'm going to open this thing up here. And I'm going to put all of this code inside of there. So let's cut it from here and put it right in here. Let's make sure that we indented properly. There we go. Now, the else clause, of course, is going to be when it's false, which means there are no items in the database. And so in that case, what do we want to do? Well, we want to show the text, no items here yet. Okay. So which element is it that we want to change? Let's go up here is in that shopping list L That's the one that's the one showing all the elements. So let's just copy that one and put it right in here. And here, we can just use innerHTML. That's going to be the easiest. And let's just say no items here, dot dot dot yet. Okay, let's run this now. And now it shows this perfect. Now let's test it out by adding another item here. Let's add some honey. And there we go. Beautiful. Let's delete it again. And we go back. Perfect, great job. So we have to once again, take a little pause here so that I can acknowledge how awesome you are. Seriously, you've been doing an amazing job. And we're so close to being done. And I can't wait to see your project when it is done. So now we only need to add a little bit of CSS to finish our app. Now, of course, we'll need to do a couple more things before we're finally done. But as far as the core code for the app is concerned, this is it. So here's my next challenge for you add these two hover effects. When you hover over the Add to Cart button and all the items right here. Another thing is that when you hover over you see how it turns into a Mickey Mouse Cursor. Make that happen, too. Now let's have a look at the CSS file because you're going to need two color hex codes, one for the add to cart and one for the items. And I've included both of them here. Now one thing I want to do before I let you start this challenge is Do you see how these item colors are black and not dark brown? Let's change that. I forgot to do that earlier. There we go. Perfect. So pause here and make this happen. Good luck. Alright, I hope that went well. Let's start with the first one. So I'm going to copy this thing. I'm going to all the way down here. And under button. I'm going to say button when it's the hover state. What do we want to do? We want to change the background color to this. And then we want to do cursor pointer as well. Let's see if that works. Hover over and beautiful works perfectly. Let's do the same thing for the other one. Copy it From up here, go down to the UL. And Li, this is the one, but we want to do it when it's hovered. So hover, and then again, put this in here, and then again, cursor, and pointer. That should do it. Let's see. And it works amazing, great job. The deeper you get into development, the more you'll realize that as a coder, you literally have to think about everything, even the smallest things. Let me give you an example. Here, we have a simple project that displays how many cookies you have given the cookie monster at any given moment. So let's run this thing. So he starts off with an empty plate. And in order to give cookies, you just press this text, here we go, let's give him a couple. See, everything is fine when you go slow. But what inevitably happens when you have this over to an actual person is that they start going super fast. And when you do that, this happens, see, you start selecting and D selecting the text. And in some cases, you can even select everything like this. Okay, so how do we fix this? Well, it turns out that there is a CSS property that fixes this, let's go over to the CSS file, this property is called user select. And it's super simple to use, you can either tell it to select nothing or everything. So let's go inside of the h1 and tell it to select nothing, let's say user select and then none. Okay, let's test it out again. Okay, pressing super fast now see, it is not able to select the text. Now, here's the thing about user select, you can just have it inside of the h1, or you can actually put it inside of the container, or even the HTML in the body. So at this point, you can still select and deselect the image. So what I normally like to do is to just put this thing inside of here, and that takes care of everything. But just so you know, you can narrow it down to whatever you like. Okay, let's try it out once more. Beautiful. Okay, time for a little story. And for this story, we need to get inside of the DeLorean. Let's travel back to the early 2000s. Those were simpler times, internet adoption was growing insanely fast. It was an exciting time to be alive. There was no YouTube, Spotify or Facebook. kind of missed those times. But what definitely didn't exist back then was this thing right here? Nope. Back then, if you wanted to get on the internet, you pretty much could only do it from a desktop computer laptops existed, but they weren't that powerful. So for the people making apps and websites, they knew that their projects would be consumed on one type of display. Simple right? Now let's get back to our time. How is it for us now? Well, now we have so many different devices, it's hard to keep track of all of them. And all of them have different sizes. See the people that wrote HTML back in the day didn't think about this. And so what they decided to do is that if a website would be shown on a smaller screen, they would just shrink the website to fit the display, like here. And while this works for monitor displays, it completely breaks down if you're on a mobile display, because this website will look like this on a phone. Okay, so how do we fix this? Luckily, there's a very easy way to fix this, we just need to explicitly tell the browser not to shrink the website, but rather use the width of something called the viewport to be the device width instead. If you'd like to read more about this, feel free to click on this link. And so there isn't really much for me to show you in this scrim. All we got to do is go inside of here and paste in this code. Now I would like to link to this excellent YouTube video by Kevin Powell. If you want a better understanding of this, I would recommend you to watch this video, you can click on this to open it up in a new tab. And so that's it for this one. Okay, we're in the homestretch. Now in this one, we want to do two things. Firstly, what can happen sometimes is that if we press too fast on the screen, we might accidentally select a text or even the image. Now, this is a common problem that happens. But luckily, there is a simple fix for this. In fact, that's my challenge for you make it so that you can't select anything on the app, pause here, try it out for yourself, and I'll be right back. Okay, I hope that went well. I'm gonna go inside of here and just say user, select None. And there you go. See it removed it from here. So now you can try as much as you want, but you can't select anything. Perfect. Okay, what's next? Well, this isn't something that we're going to be able to recreate in the scrambled mini browser. But what happens is that unless we add a very crucial piece of code inside of our head tag, this app is not going to look very good on a mobile device. It's going to be Ranking, which is something that we obviously need to fix. Now, I never seem to remember the exact code for this. So I always Google it. So let me actually give you a challenge right here. So the challenge is add that code that makes this app look proper on a mobile display. Pause here, see if you can figure it out. And I'll be right with you. Okay, I hope you got that. So actually went on Google and found the W three schools page for it. And I just copied the code from there. And I'm going to paste it right in here. There we go. That's the one well done. I'll see you in the next one. Have you ever noticed that when you use a browser, every website has an icon up here? Yeah, well, that's called a fav icon. And it's definitely something that you should spend time on adding to your website. Okay, so first, you got to make sure that you have an icon. This is a cute image I found that we can use as an example. And an icon in this case is really just an image. Now do make sure that it's a square image. And also make sure that it's in a PNG format, I've included this image for you inside of the assets folder, so you can try it out for yourself. Now once you've got your image ready, you want to head over to fab icon.io and press on the PNG to Ico button, just press this image to get to the website, then you want to drag and drop your image right here. There we go. It shows up here, then go ahead and press the Download button, that's going to download a zip file, which you can unzip, and there you'll find all of the files you'll need. I've already gone ahead and added those files to our project here. And now we're going to need to install this onto our website, which really just means to copy this code and paste it into the head tag of our HTML. So go ahead and copy this. And you want to paste this right inside of the index dot HTML file and put it under the title tag. Now, technically, as long as you have it inside of the head tags anywhere is going to be fine. Now, unfortunately, because of the limitations of Skyrim, but I can't really show you how this looks in this grim. But if you're doing this locally, you can preview the website in a browser, and you'll see the results of it. Okay, now check this out. This service gives you some extra options. So we have some variations of the image, you'll notice that we have several image files that we've downloaded. Now, why is that? Well, this is just so that the image quality is the best that it can be on different devices. Okay. And then you might ask yourself, what is this file right here site dot web manifest? Well, this is the magical file that's going to let us show our icon on the home screen of our phones, as if our web app was actually a native mobile app. But more on that in another scrim. We're getting so close to finishing this thing. Now, we got to make sure that this app has an icon, so that we can see it on a tab header in a browser. But more importantly, so that we can put that icon on our phone homescreen to launch the app. So this is the image that we'll be using. And I've actually included this inside of the assets folder, add to cart dot png, now we're not going to use that image directly, we're actually going to use the service fab icon.io to generate all the stuff we need. So open that up on your side, you're gonna press this image to open up the webpage, and then press on the PNG to ICAO converter, then you want to just drag and drop the image here, and then go ahead and press the Download button, that's going to download a zip file, which you want to unzip, and you'll find all the files you will need in there. I've actually already gone ahead and added those to our project right here. Now the final thing we need to do is to scroll down a bit on the page and copy this code right here to install this thing. So let's go ahead and add that right inside of the head tag, indent that thing, perfect. Now, because of how scribble works, I can't really show you how this looks. But you'll see the difference if you're working locally in your browser. Now you might notice that there is a file right here as well site dot web manifest. We're going to talk about that in just a little bit. So remember, when you made a Chrome extension with ped earlier in this module, remember there was a manifest.js file? Let's pull that up. Now what exactly is this thing? Well, in the case of a Chrome extension, this file tells chrome the information it needs to hook this program into Chrome. So things like the name, the version number, the icon, the description. Now all this data turns into this inside of the Extensions Manager in Chrome. Now similarly, there is a web manifest file that we can make when we want to turn our web app into something that looks and feels like a mobile app. Now the fancy word for this is a PWA, or a progressive web app. Now let's go into the project to take a closer look. So here I have a project set up that's called the cat app. And all it does when you run it is show a random picture of a cat. And these pictures are actually generated by an AI so all these pictures are being fetched from this website called this cat does not exist.com Okay, so on the left side, I have a site dot web manifest file. out here. Now look at this, this looks completely messed up. But the only reason for that is because there's no spacing and no indentation. So now I actually have a challenge for you pause the screen right here and add the appropriate spacing and indentation to make this look more like a JavaScript object, something that you're used to. Okay, good luck. I'll be right back. All right, I hope that went well. I'm just going to paste the solution here. There we go. This looks much better. Now what do we have going on here. So first, we got the name. And then we got the short name. Let's go in and say cat app for both of those cat app. And then here we have the icons, this is what's going to pop up on our home screen. So these are images that we already have in our project, of course, generated by that five icon.io service. And then we have the theme color. Now this color right here is something that you can control. And let me show you where that is visible. So that color is going to be popping up right at the top here. I haven't turned to red, so it's easily visible. So I like to just set this color to be the background color that we're using in the app. Okay, now, what is this background color? Well, this is the color that's going to be visible before the styles for your web app have been loaded. So if it takes a while to load them, this is what's going to be showing, okay, now finally, what is this display, it's set to stand alone. And so this will make the app look like a standalone application. So any extra things that the browser has is going to take that away. So it looks and feels like a native mobile app. Now there's actually a lot more to the web manifest file than what I showed you. I can't cover everything in this scrim, feel free to click on this page right here and read more about all the things that are possible. But for our use case, this is plenty. We're finally ready for the very last step. Can you believe it? You made it here? One tiny little thing, and we're going to be done with this bad boy. So exciting. Okay, let's do this. So let's open up the site web manifest file. And I want to give you a challenge right here, pause the scrim and fix this thing up. So it looks better. That means add spacing and indentation. I'll wait for you. Okay, I hope that went well. I'm just going to paste this in. There we go much better. Let's start filling in the information here. So the name of course is going to be Add to Cart. And let's just copy this and paste it right in here. The icons are already set the theme color we want to set to the background color here. So let's just fetch that from the CSS. Let's go here and copy this one right here. We'll put that in for both theme color. And actually background color as well. There we go and display. We want to just keep on stand alone. And we're finally done. Can you believe it? You just finished building your first app. Oh my God, I hope you're proud of yourself. Because I certainly am. Seriously, take a moment and give yourself a pat on the back. Also, make sure to celebrate this very special moment. Hopefully you're more excited than this guy. Seriously, though. Amazing job. Now the only thing that's left for you to do is to deploy your project using Netlify. And we're going to do that in the next scrim. But before we go ahead and deploy the app, I want to take a little pause here to briefly talk about something very important. And that is that you should spend a little bit of time personalizing your app, because otherwise your app is gonna look exactly the same as mine, and probably the same as a lot of other scoring students. Now let me show you how easy it can be to give your app a personal flair. So this is what we have right. Now let's change the image of the cat. That's looking pretty good. Let's do another one. Okay, not quite there yet. There we go. That's the one. Okay, what about the font? Let's change it to another one. Okay, let's keep going. One more. And there it is. All right, what about colors? Let's change it up a bit. Okay, looking pretty good. How about adding a little bit of contrast, there we go. See how just a few minor changes can make these two look pretty different. So make sure to personalize your app so that you really feel that the app is showing who you are. And I know it takes a little bit of time to do this. But it adds that little extra you know. Drumroll please, because it's finally time for us to deploy our app to nullify, let's jump into it right away. So of course, the first thing we got to do is to make sure that all of the project files are inside of a folder on our machine. So if you have been following along with me on scrim by this entire time, then you want to go ahead and download the files as a zip and you probably already know how to do that. But just in case you forgot, you want to press on this button right here. And then we want to go up here to download a zip press on that. And there we go. We're downloading the zip file on our machine, then you of course want to go ahead and unzip that file on your computer. At which point you're going to get this folder with a very weird name where all of your files are now you want to go ahead and rename that to something like add to cart There we go. Now if you've been following along on your local machine this entire time, then of course, you already have a project folder. All right, this part is done. Now, now we need to head over to nullify, you can go ahead and press the screenshot if you want to open up Netlify on your end, okay, so I'm going to quickly go up here and login, I'm going to use email to log in. But please feel free to use whichever account is best for you. And for a lot of you, that's probably going to be your GitHub account. Okay, let's go ahead and log in. And then you should see something like this. Now we want to scroll down a little bit until we see this. Now down here is where it says you can drag and drop your folder, which is exactly what we're going to be doing. So just go ahead and drag and drop your folder here. There we go. Now it's gonna take a couple of seconds, and then boom, it's done. Now, I want to take a little bit of time to appreciate this moment, because I've been deploying my projects for a very long time now. And I remember a time when this whole process used to take several hours, sometimes even several days. And we just did all of that with just a simple drag and drop truly magical. Okay, anyway, now our app is finally deployed. Now we want to go into the site settings to rename our app. So just press right here. And then we want to scroll down a little bit, there we go. And then press change site name. So I'm going to change it from this very random name to something a little bit more appropriate. There we go much better, then go ahead and press save. Perfect. And that's it. Now we can go ahead and press this URL to open it up in a new tab. Oh, yes, look at that beauty. That's our app, which is now live for the entire world, just like that amazing job. Now in the next screen, we're going to do the very final step, which is to put this bad boy on our phone homescreens See you in just a bit is finally time for us to put our beautiful creation on our precious phone. Okay, let's get right into it. So this scrim is going to be split into two. First, I'm going to show you the steps on how to put your app on your phone. If you have an Android, then we'll do the iPhone. Okay, first thing you want to do is to open up the default browser on your phone, which for Android, of course, is Google Chrome. Once you've opened up Chrome, you want to write down the exact Netlify URL for your app. There we go. And there it is. Now go ahead and press this button to open up the menu, then you want to go all the way down to where it says Add to Homescreen. Press on that, then it's going to ask you if you want to change the display name, I don't want to do that. So I'm going to just go ahead and press Add, and boom, the app is now added to the very last position of all the apps. So if you have a lot of apps on your phone, just got to go to the very last page. There it is right there. Once you found the app, just move it to a more appropriate position. I'm going to move it to my first screen. Perfect. Now let's finally open it up. Oh my god, do you see it looks exactly like a native app. Go ahead and try it out. All right, let's do it for the Apple people now. So again, we want to open up the default browser of the system, which in the case of Apple is Safari, then we want to put in the URL of the app right here. There we go. And there it is. And then we want to press this button right here, it's going to open up the menu, we want to go down to where it says Add to Homescreen. Press on that. And then it's going to ask us to set the display name of this, I'm going to just keep it to add to cart, press Add and boom, there we go. There it is. Okay, now for the moment of truth. Let's open it up. And there we go. Do you see it looks and feels exactly like a mobile app. And there you have it, that was the very last step you made it. You know the best part about finishing a project being able to share it with the world. And that's exactly what I want you to do if you're comfortable with it. Of course. Now there are two platforms that are perfect for sharing this kind of thing, Twitter and LinkedIn. So the first thing you need is to get a great screenshot of your app like this one best to do it from your phone. And if you want to spend the extra time you can even make a video or a GIF, then just write a tweet or post about you finishing this course. And showing off your awesome creation like Brian has done here with a scrim of project that he finished on LinkedIn. This one's from James. And this one's from Bianca. This is Oscars finished app on Twitter. This one's by So Sean. And here's another one. Now apart from being able to share your creations with other people, my favorite thing about this is that you're documenting something that you did in your life. Imagine how good you're gonna feel looking back at this in three, five or 10 years, especially compared to what kind of hardcore stuff you're gonna be working on then. So definitely share your wins with the world. And remember to tag me and scrim by in it that way I'm gonna get a sweet notification And I can give you a like, and a comment to show you some love. All righty, the very last thing I want to say is this. If you have any feedback at all for me, then I'd love to hear it. This is chrimbus first course on Firebase. But we think it's an awesome technology. And we'd love to create more courses going forward. So if you have anything at all to share on that, let me know, the best way to reach me is to tweet at me or DM me on Twitter. Or you can also send me a message on LinkedIn. That's all for this one. Thank you so much for listening. Can you believe it? You did it? You just finished this entire project? I am so so so happy for you right now. Seriously, do make sure to do something very nice for yourself after you're done watching this scrim because what you've just achieved is no small thing. Amazing, amazing job. Okay, we got to do a little recap before I let you go. So the first thing we looked at was import. Now what was that? So we wanted certain functionality from Firebase, which we just imported in the form of functions. So these are the things that we imported from this location. And then here, this is where all of the code was. And we only got certain things that we needed. And then we covered the Initialize app function from Firebase, which we use down here to initialize the app using the database URL. And that is just so we have an app object to work with in our project, this is what sets everything up, then we use the get database function right in here, when we created the database object using the get database function and fed it the app object that we just made. This is still part of the setup that we did. And then we use the reference function. Remember, in a Firebase real time database, everything is a reference. And so we needed to make a shopping list reference where all of the shopping list items would be saved, then we use the push function from Firebase, which was a super simple function right here to first say that we wanted to push a new thing at this reference. And then we just fed it the value. And that was it. And then we finally came to the magical en value function, which is where we wrote a lot of the code. So this on value function just sits here and listens for changes in the database. And whenever a change happens, it gets a new snapshot, which it uses to run this code all over again. And so that was the snapshot, of course. And then we talked a little bit about IDs, because in software development IDs are super important. And so as we saw in our real time database, every single item has to have a unique ID, then using that unique ID, we could remove a database item, which is what we did right here, we got the exact location of the item in the database, and then we just ran the Remove function on it. We also looked at how we can transform objects into arrays, which is what we needed to do inside of the on value function, so that we could actually write a for loop on the array. That is what we did right up here. And then of course, we used Create Element instead of innerHTML. Because we realized innerHTML wasn't powerful enough to do what we wanted it to do, which is why we wrote this function, where we created a new element, and then we gave it some text content. And then we made sure that we ran some code whenever you press on that button, and then we appended it to the parent element. And then of course, we looked at flex wrap of Flexbox feature, which let us wrap these elements around like this. And we also looked at the GAP feature in Flexbox, that let us very easily create this gap between the items. Then we used user select to make it so that the user couldn't unintentionally select parts of the app, which is just a much better user experience. Then we added a crucial line of HTML to set the viewport, this one right here, which made it so that the width of the app would be correct on mobile devices. Then, of course, we added a five icon using that service fav icon.io. It added all of these images as well. And then of course, the final thing was the web application manifest file right here, which made it possible for us to transform our web application to look like a native app on our phones. Oh boy, when you list it out like that it looks like so much stuff. And so finally, I'd like to say well done on completing this section.