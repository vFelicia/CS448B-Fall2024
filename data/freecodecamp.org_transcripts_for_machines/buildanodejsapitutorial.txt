this tutorial is a quick and simple guide to nodejs the express framework and mongodb focusing on the fundamental rest routes and basic database interaction you'll build a simple api boilerplate that can then be used as the foundation for any app so this you should have a basic understanding of rest apis and crud operations which is just create read update and delete and you should also have some understanding of some basic javascript knowledge i use es6 mainly fat arrow functions but nothing too complex for this tutorial we'll create the skeleton of a back end for a notetaking app think something like google keep you'll want to be able to do all four crud actions on your notes like i was saying create read update and delete special thanks to scott domes who wrote an article that this video is based off of if you want to see the original article you can check the description okay let's get started okay i created a directory for this project just called notable i'm in that directory in the terminal now if you don't have node installed check the link in the description for instructions on how to install node so once you're in the new directory we're just going to run npm and net and then we're going to follow along with the prompts so for the we'll just give it the name notable that's already set there version 1.1 you know we don't have to do really any of this stuff so i'm just going to use the default for all this yes okay once that's done you should have a package.json ready to go in your directory so this means you can just start installing the dependencies you need for your project you're going to use express as your framework mongodb as a database and a package called body parser to help deal with json requests so i'll just do mpm install save express mongodb body parser and i also highly recommend installing nodemon as a dev dependency it's a simple little package that automatically restarts your server when files change okay i got everything installed and now i just open up the folder in sublime text so i'm going to go into the package.json file right here and then under scripts i'm just going to add nodemon server and we actually don't we're not even going to use this test once i'll take that out and that should be good on package.json so i'm going to save that and now i'm going to create my server.js file and start building the api so go to new file server.js so first we're going to start by requiring all our dependencies in server.js so const express const client const body parser and let's just line up everything here okay and then finally const app express you're going to use the client to interact with your database note that you also initialize your app as an instance of express your framework the last thing you need to do to get your server up and running is to tell your app to start listening for the http requests you can specify the port and start the listening like so console.log we'll just do a log here and we are live on port now i'm going to save this i'll go back to my console let me clear that if i run npm run dev we should see an error okay express is not defined let's see what we have to do here i spelled this wrong so let's uh save that and go back over okay it automatically saw the changes it restarted and it says we are live on 8 000 so our server is live but it doesn't do a whole lot or anything really so let's fix that we're going to make some crud routes so for this example we're going to build four routes a route to create a note to read your notes to update a note and to delete a note so this will give a good idea of how to structure almost any basic route with node to test the api we're going to need to mimic a client side making requests so to do so we're going to use a great app called postman it allows you to make simple http requests with custom bodies and parameters so to install postman you can go to getpostman.com and you can download it for various browsers there's also a chrome extension so i'm just going to go to postman chrome extension and add to chrome so this is one of the easiest ways to get it you don't have to install any special program on your computer and you don't even have to sign up i'll just do take me straight to the app okay once you get postman installed it should look like this we're going to come back to this later so let's start setting up our routes most node.js tutorials and many real apps put all their routes in one big routes.js file but we're going to do something different we're going to split up the files into separate folders and that's going to lead to good readability and makes big apps more manageable now we don't have a big app but let's do this right so we're going to make some directories and some folders i'm just going to do it right from the console you can do it from your file browser or from sublime okay first we'll stop the server so i'm just going to make a directory called app and i'm going to go into that directory and then i'm going to make a directory called routes and then i'm just going to go into that directory and then i'm going to make a file called index.js and then i'm going to make a file called note routes dot js okay we're going to go back into sublime text and we'll see if they're they're showing up here and you can see they're right on the side so are the index.js is empty and then routes.js is empty so these directories may seem like overkill for this simple small app but it's just always good to start with best practices and let's start with the c in crud which is create so how would you create a note well before you do that you have to build a bit more infrastructure in express routes are wrapped in a function which takes the express instance and the database as arguments here's what i mean in your note routes.js we're going to put module dot exports equals function app db just like that and then you can export this function through your index.js so let's start filling in that file first we're going to have a const note routes equals require and we're going to require require the notes routes file what we just exported and then module.exports and it looks like i made a spelling error here so x ports there we go no routes app db so we're just going to export that that route so basically the index.js is our master route file and then we have individual files for all of our individual routes and we just bring them all together in the index.js so now that we've exported the route here we can import it in our server so back in server.js we go right here and i'm going to put require require apps slash routes that's going to our directory so this is how we're going to basically import the route into our server note that since you don't have a database yet set up you're just passing in an empty object that's why we just have an empty object right here okay now we can make the create route so the syntax is simple we're gonna go back into our note routes.js and we're gonna actually start creating the route here so we're gonna do app.post here is where we'll actually create our note so we'll create the note here but right now we're just going to do res.send hello so when the app receives a post request to the the notes path here it will execute the code inside the callback so that's the the callback right here so that's the callback right here and in that callback it's going to pass in the request object which contains the parameters or json of the request and a response object which is used to reply so we're going to actually test this by going into postman first let's make sure all i'm going to make sure all my files are saved i'm going to run my server again with npm run dev oh i have an error it says requires not defined i actually have a spelling error you may have seen that earlier so i just have to put require here okay now that i've fixed that air let's try running our server again and another error looks like oh i see what happened we spell i spelled the word function wrong a lot of spelling errors here okay so now let's try let's see what happens we're just restarting the server here and now we're gonna finally get to test this on nodemon so back in nodemon i'm going to do a post request instead of get i'm going to go to post here and now i'm going to put localhost 8000 slash notes and then i'm just going to click send and you can see it says hello here it's pretty small it's pretty small but if we go back into our file it says res.send hello so it just sent hello when we did a post request to the notes route so we just created our first real route the next step is to add some parameters to the request and process them in the api and finally add in the database so i'm going back into post mode i'm going to try to zoom in a little actually so we can so everything's a little bigger and in the body tab we're going to add some key value pairs after selecting the xwa form dash url encoded so this will add encoded form data to the request which we'll be able to process with the api so we're just going to make a title my note title so this is just some sample data body what a great note now i before i send the sample data i'm going to go back into our note routes and we're going to do a console.log and i'm going to put rec dot body so we're just going to log out the body of the request so i'll save that and we're going to go back over here i'll send this and then you're going to and then we'll see undefined you can see undefined here that's because on express can't process url and coded forms on its own but we did install the body parser package so let's go back into our code we're going to go back into the server and right below the port i'm going to do app.use body parser dot url encoded and extend extended true now it's going to be able to process that correctly so if i save this and i'm going to go back into postmod i'm going to send it send that again let's go back into our server and now we can see it title my node title body what a great note the last step in the preliminary route is to set up the database and then add the data in the easiest way to set up a database is through mlab it's free for the small size and quite fast to set up so let's do that we're going to go over to our browser and we're going to go to mlab.com now you're gonna create an account if you don't already have one or for me i'm just gonna log in okay after you get logged in to mlab or you create an account we're going to create a new mongodb deployment so i'm just going to click create new and just click the free one here continue continue and i'm going to call it notable continue and submit order and now i have to just create a user so first i'm going to go into the deployment and go to user add database user so i'm going to call it bow fcc and i put in a password and create and now i just have to copy this url right here so i'm going to go to copy okay now i'm in my console and i'm in the root directory the notable directory i'm going to create a configuration file first i'm going to create a config directory now i'm going to go into that directory and now i'm going to create a db.js file where we're going to create put our configuration for our database so i'm going to go back into sublime there we go and here is my config directory that i just created and here's my database file so in this file we're going to add the url so module.exports equals this is the url we just copied on mongodb url and we're going to make sure it's in parentheses so i just copy this now i also have to insert my username and password so the username is bo fcc the password this is a very secure password it's just password and uh we'll uh change that in a little bit here now if you are going to commit this project to github you want to be sure to include the get ignore file so that you can so you don't share your password for with everyone like i'm doing through this video um so now in the server.js file we can use the client to connect to the database and then use this to wrap the app set up so let's see how to do that first we're going to require it so const db we're requiring the database that database configuration file require okay now i'm going to line this up up here and then down here we're going to use the client so dot connect so we can connect to the database db.url that's from the the url that we just created in the configuration file and we're going to pass in um we're going to create a callback function we're going to pass in the error and the database and we're going to check if there is an error and if so we're going to return we're just going to log the error okay this next part this text up here we're going to put into our mongod client.connect so i'm going to cut this and i'm going to put right here so i just paste it in there we're just going to change a few things so instead of passing in an empty object here i'm just going to pass in database and actually that's all we're gonna change so that's the last of the infrastructure setup it's all route building from here mongodb stores data in collections which are exactly how they sound in this case we want to store notes in a collection called notes so since we pass in the database as the db argument in the routes see right here we're passing in the database right here in the routes so we can then access it like so well first let's delete this this was just temporary and if we write db.collection and notes so that's just how we would access our database so creating a note is a is as simple as calling insert on the collections so we can put dot insert and we pass in the note that we we still have to create the note but we're also going to um pass in the callback function with an error and a results okay so so we pass in the note here i'm going to create the note right above this line so const note equals now it's just going to be a json object and it's going to be a text is going to equal rec dot body dot body so wreck that body dot body just gets the the body variable from the request so rec.body.body just gets gets the body variable from the request here so if we go into the uh to postman we can see that we're passing in the title and a body so that's where we're getting that body there so i'm also going to create the note with a title rec.body.title okay once the insert is complete or has failed for whatever reason we want to either send back an error or send back the newly created note object so here's how we finish this code up here if error res.send we're going to send an error this is just json here and error has occurred else res.send result dot ops zero so the result is going result to opt is going to be an array here and we're just going to send the the zeroth element or the first element in the array back which is the note that we just created so let's try out i'm going to save this i'm going to make sure my server is running it is now going to postman and we're going to send a x dash www.that's url encoded post request with postman with a title and a body just like we have here so i'm just going to click send and there was an error connecting to the server so let's see what we did wrong hmm result is not defined okay here's the problem i have results here and i have a result there so this was supposed to be the same so result now it's a singular and singular so let me save that and we're going to go back into postman we're going to send this again and here we go we got this the text is what a great note and the title is my note title so we got this response from the server and also assigned an id to it so let's go into mlab now so if we go into mlab we go to collections and then i refresh here we can see there's now a collection called notes and in there what a great note and my note title and it looks like it created a note twice one for the error and one for for the one that did not cause an error it still created the note both times but the response caused the error so it didn't show up in the response and i actually can delete it right through mlab so i'm gonna hit the delete button here okay so now we just have one note in our database now the read route we can pick up the pace a bit so say you want to get back the note that we just created by navigating to let's say we want to go to localhost 3000 slash notes slash and then we put some id so in this case the id would be this bit number right here and i want to put the id and then i does that do anything no it doesn't but we can easily create that so here here's what that would look like in the notes.notesroute.js so we're going to create another route here app.get so instead of a post it's a get so this is how we get data from the server notes slash and then id we're going to go to that route note slash id rec res so it's pretty similar to this one up here the app.post you have the route and we create a callback function with rec and res just like before we're going to call a method on the database collection of notes so here it's going to be the aptly named find one we're going to find one element from the database so first i'm going to create a variable called details which is going to be the element we're trying to get from the database so it's going to equal trying to get something with the id and the id is going to equal well i'm just going to put a temporary thing id goes here i have to show you later how we're going to actually put the id in there but first i'm going to show you the rest of this code so if we do db.collection and notes dot find one details we're going to pass in the error and the item to this callback function and now the error in the result is going to look very similar to this code down here so i'm just going to copy this and paste that in but instead of um the result.ops 0 i'm just going to put item we're going to return the item which gets gets it right from here so let's go back to this id up here now we could grab the id from the url parameters via rec.params.id however if you just try to plop in the string into this above it won't work mongodb requires not just an id as a string but an id as an object or as i call it an object id so that's actually an easy fix to do we're going to have to require something at the top so i'm going to do var dot var object id equals require db dot object id and then down here after the the get command app.get when we put const id equals rep dot params dot id so now this id is just the string of the id from the query the parameters in the url now we can fill in the rest of this so the id we're going to take this offer says id goes here and i'm going to put new object id id so it's going to create that id as an object to pass into so let's try it out i'm going to save this i'm going to check my server to see if there's no errors and there is an error so let's go back okay here's the problem i need a parentheses here and i have to take off this parentheses and while i'm at it i'll add some semicolons okay let's go back to the database and see if there's an error okay no error so i'm actually this time i'm gonna go to my browser and just refresh this oh and this is actually supposed to be eight thousand sub three thousand so let's do that and it returns with the id the text what a great note and my note title you can also do in postman first of all let me copy this let's see if that's let's see if that's the same one yep that's the same id so i'm going to do a get and i'm going to do slash and then put the id there send that and yep it comes back with my what a great note my note title and that was directly from the database okay now the delete route deleting an object is actually pretty much the same as finding an object so i'm just going to copy the the get code the fine code because we're just going to make a few changes to make it the delete the delete code so we're just going to use the instead of find one we're going to use remove also instead of get we have to show that it's a delete request and then here instead of sending back the item there is no item so we're going to send note id deleted and let me put another space in here and that's the delete route and now the update route this is the last one the put is basically a hybrid between read and create you find the object then update it accordingly so the put is basically a hybrid between the read route that's this one and the create route which is this one here so you find the object and then update it accordingly so i'm going to copy this one this one right up here and let's put it right here so instead of get it's going to be put and this is going to be the same this is going to be the same but now i'm going to get this line from here the const note equals and the the json object with the text in the title i'm going to put it right here under the details and now we're going to change this next line a little bit db.collection notes dot update and we're going to pass in the details and the note and then after we pass in the note everything else is going to stay the same so let's go into postman and we're going to try these out so first of all let's try this delete request so if i pass in delete and send that over this note was deleted and if we go back into mongodb if i refresh there is no longer a note in our database so let's create another note by doing a post and this time i'm gonna have to pass in a body and i'll say my note title and put some exclamation points in here so it'll be different we'll send that and if we get this id here i can now do a um a get request send that and we get that note back that we just created and again it's going to be in mongodb if i refresh mongodb yeah our note is there what a great note my note title and if i go now we're going to try the the put so here i'm going to pass in this body so i'm going to go to this route here but i'm going to instead of saying what a great note i'm going to say what a bad note and send that over okay let's see if that worked we'll go over into our mongodb and refresh it and it's hard to see here but it still said it says what a bad note so it has changed and if we go back we can even do another get to see what it is so if i send a get what a bad node so now we have every route in crud we have create read update and delete note the imperfection in this code if you fail to supply a body or title the put request will nullify those fields on in on the note in the database you could easily add some conditional logic to update the fields only if they're present in the request i left that out just to keep it simple well that's it you have a working node api with each of the four major crud operations the goal of this tutorial was to give you a degree of familiarity with express node and mongodb you can use your simple app as a launching pad for more complex projects my name is beau carnes don't forget to subscribe and remember use your code for good