in this comprehensive react course you will learn everything you need to know about react by building an ecommerce website harsha is an experienced developer and a popular instructor hello guys my name is harshavadhan i am famous udemy instructor mentor team leader and also worked as senior developer on various frontend and backend technologies welcome to the course of react for beginners let us see what kind of project we are going to build in this course this application is a smaller demo application for practicing various concepts of react in this course we are going to build the react application using class components in react you can create components that means pages in two ways either with class components or functional components in this course we are going to use the class components but in my full udemy course we are going to build the application with functional components for react beginners it is really recommended to learn the react class components first before trying to understand the functional components because in class components you will really understand how does the rendering process works how can you share the data from one component to another component and how do you intermingle the design logic and programming logic once you are clear with the class components then you will try to understand the functional components so exactly in this course we are going to build this basic application on react using class components let us see what kind of pages we are going to build at first as you can see there is a login form once after you enter the email and password values if it is successful login you can see the simple dashboard design and this is the customers page where you will learn about various rendering techniques such as rendering the buttons rendering the images conditional formatting etc and also this is the shopping cart page where you can increase or decrease the quantity of the product and also buy now in order to proceed for the payment that's all these are the pages we are going to build so what are the prerequisites to learn this course you require to know the basics of html css and general concepts on bootstrap such as buttons navigation bar etc but in this basic application we are going to learn various concepts of react you will learn how do you render the lists how do you render the methods images and css styles how can you communicate between the parent to channel components and lifecycle methods such as component date mount etc and also how do you create the forms along with the text boxes etc and also twoway binding and then how do you interact with the rest api servers by making http requests and also basic routing in order to create the page navigation so by end of this course you will be able to know what are the various concepts in react and how do you build the basic applications in react so what is react react is the javascript library to build dynamic and interactive user interfaces that executes faster so like i said react is a javascript library it is not a framework so what makes a difference between the framework and library a framework provides the complete solution for creating the frontend applications but when you talk about react being it as a library it is the lightweight it provides the support for building only view that means only the user interfaces for your application but it is not necessarily a drawback it provides proper mechanism to build user interfaces and to make them interactive with the user that means you can accept inputs from the user and also provide dynamic information to the user that's how the real world applications work for example you take facebook it provides all the posts in the field page and also lets the user to create their own posts so this kind of user interactions can be created by using react react was developed by facebook in 2011 and it is mainly used for development of single page applications so what is a single page application a single page application is an application that renders small pieces of user interface and make the complete application in react you can actually build reusable ui components each component is a representation of a meaningful page in your user interface for example in a modern application you have a navigation bar and the sidebar as well as the page content here each of these can be represented as a piece of ui and those are represented as components in the code and these components are by default reusable that means you can display the navigation bar wherever required in the application that means for example if you create a navbar as a ua component you can reuse the same navbar in multiple pages wherever required in your big application so by default ui components are reusable pieces which consists of the desired logic as well as the programming logic here the design logic is written in the form of html and the programming logic is written in the form of javascript and by default these components are arranged in hierarchy that is called virtual dom so a virtual dom is the hierarchy of the components which imitate the real dom of the browser when you update any changes in the virtual dom react internally compares the virtual dom and real dom and only the changes made in the virtual dom will be updated into the real down and the same appears on the browser we will understand more about components and virtual dom in the next lecture but how to create the components react supports a new syntax called jsx which stands for javascript with xml that means the developer can actually use all the concepts of javascript along with xml within the same program here the html tags are written in the form of xml that means here html is being case instead and every tag should have opening and closing or they must be self closed these are the features of react what makes it exciting about react is that react is the most popular frontend library or framework which is very competitive to the other frameworks such as angular or vue.js but often react is compared with angular so you might have a question such that what is the difference between angular and react well angular is the framework but react is the ui library so react being as a ui library it provides sophisticated solution to make the ui interactive and dynamic but angular provides much more beyond these in addition to ui angular provides necessary features to create routing and make rest api calls in angular applications so angular provides much more beyond react.js because react sticks to only view it is not necessarily a drawback but you can actually extend that means use thirdparty tools in react in order to use the features such as routing or making rest api calls angular forces us to build only single page applications suppose if you want multipage applications in your project it is very difficult or sometimes becomes impossible in case of angular but react can be used for either single page or multipage applications so before development of your application you need not worry whether it is a single page application or multipage application eventually in the middle of the development also you can convert the single page application into multiplex application by creating multiple html files in react but the same can be most problematic in case of angular angular directly operates based on real browser dom that means when you update a value of a property in angular the same will be directly reflected in the real dom rather than first operating in the virtual dom but in case of react it directly works based on virtual dom and every time when you make any updates in the virtual dom for example if you modify any property value in virtual dom it actually compares the virtual dom and real browser dom and updates the real dom only for the specific change instead of overwriting the complete dom so this makes react applications work faster i will talk about components and virtual dom in the next lecture and another difference between angular and react is angular by default supports twoway binding that means it can actually read inputs from the user and also provides state data to the user but when it comes to react it by default supports only one way binding it officially doesn't support twoway binding it actually can render state to the user but cannot read the inputs from the user but however developer can manually read the values of the text boxes and update the same in the state in that way it can become twoway binding anyways we will demonstrate the binding in the further sections so these are all the differences between angular and react this is a good time to learn react and necessarily you need not know angular because we will actually demonstrate all the concepts of react so you don't require any prior knowledge of angular to understand react in case if you are not much familiar about ecmascript 6 don't worry as part of the progress we will understand various concepts of ecmascript whenever we actually use them in the code so let's get started with react and in the next lecture we will understand what is a component actually and how the component hierarchy is formed internally and after that we will really start creating the react application to make our hands dirty let us learn what is a component and how they work based on virtual dom in react a component is a piece of ui that contains the design logic and programming logic the goal of the component is to read data from a javascript object and render the same to the user so it contains the design logic in the form of html it may include with any html tags such as div or h1 or table etc and it may include with javascript code to make the ui be interactive with the user by default every application should contain a root level component that is called app component eventually this app component may have children for example in the real world application we have various sections such as navbar side menu and page content and those are represented as chain components and by default these components are reusable that means you can really use the same navbar in a different page or in a different application wherever required because it is individual sophisticated and isolated component it is selfsufficient enough to have the data in the form of state and project or render the information to the user and each component can have children for example the side menu has menu item and page content may have grid or signup page and of course these components also be reusable so as you keep on nesting the components the component hierarchy will be formed where the app is the ultimate root or parent level component you can invoke the child component in the parent component by invoking its name and this hierarchy structure of components is called as component hierarchy and in this component hierarchy the data can be shared among the components but only from parent to child but not from child to parent how will you create a component by definition component is a class and it contains substrate that is the data that you want to render to the user so what data that you want to render to the user all that data will be stored in the form of a javascript object and that object is called as a state for example in a food ordering application you wish to display the food item name and price so you will have that item name and price in the form of an object and that is called as a state next it contains a method called render method this method tells react how the state should be rendered to the user the render method actually returns a react element it contains the actual html tags defining how the data should be rendered to the user a react element is a simple javascript object that represents a piece of ui much like a dom element in javascript but the difference is react element is called as virtual dom and actual dom element is the real dom a virtual dom or react element is the dummy representation of real browser dom but making the changes to virtual dom is super easy and lightweight when you compare to real dom virtual dom occupies very less amount of memory and updates are faster in virtual dom when you make any real changes in the state of the component react automatically compares the virtual dom and real dom and updates only the specific changes in the real dom instead of rerendering the complete real dom for example in a component we have four text boxes and we have updated the state of the first text box only if so react updates only the specific text box value in the real dom instead of rerendering all the four text box values this makes react work faster than expected so what you can understand from this lecture is a virtual dom is a simple javascript object that reflects the real dom and every time when you update the virtual dom the changes will be automatically affected in the real dom by react internally but it never overrates the complete dom at any point of time so making updates in the state is super easy and simple as well as lightweight in case of react this is how the react actually works but this is all theoretical but how will you really get started with react by creating a new application that's what we will do in the next lecture we are going to build a simple web application in react in the next lecture let's get your hands dirty by creating first application in react at first we need to set up the environment which are necessary for creating react application first you need to install node.js so you may wonder why we require node.js this is not the actual node.js course this is the react course the reason why we installed node.js is that for working with the package manager called npm that is node.js package manager it has plenty of packages and you require a package called create react app which is shipped through npm not only that we need additional packages such as babel and webpack that are shipped through npm and this npm is a part of node.js so that is the reason why we require node.js for working with react in addition to this for execution of react application also you require a lightweight development server and internally that server is built based on node.js so that is the reason you need node.js for working with react so you can actually download and install either current or lts version but i prefer using lts because the current liabilities of react were already be updated with the lts version rather than the current or latest version of node.js so prefer using lts and you will get a file like this and run the file and it's a simple wizard to install node.js and you can complete this simple wizard by clicking on next next and finish and after completion of installation of node.js you require to install the code editor that is visual studio code it is open source lightweight and free to use so go to code.visualstudio.com and click on download for windows and run this setup file it installs visual study code for you so after installing visual studio code open the command prompt window by typing cmd alternatively you can also use node.js command prompt from the start menu after installing visual studio code this is the time for installing a package called create react app which helps us to create the react applications easily in order to do so open the command prompt or terminal on your mission and use the command npm install create react app hyphen g that means hey npm that is not just package manager install a package called create react app and install it globally that means this package must be available globally on any folder in the same machine so that you will be able to create and run the react applications from any folder on your mission so run the command npm install create react app hyphen g it downloads the package and installs the same on your local mission and after installing this package this is the time for creating a new react application but before than that let us create a new folder to place our react applications i am trying to create a new folder by using md command that means make directory and specify the path of the new folder that is for example sequel and react with this name a new folder will be created and you need to locate the same folder by using cd followed by the folder name that is sequel and react so make sure you're in the correct folder that is c colon react in this case and now you need to use the command called create react app in order to make a react application so create react app space application name the application name can be anything but should not contain capital letters for example i am giving the name my first app you can use hyphens for separation of words but uppercase letters are not recommended so run the command create react app space and provide your application name so this command creates the react application and automatically set up the necessary development server pebble and webpack the development server helps us to execute react applications after compilation and a webpack package helps us to bundle the files and the bubble package helps us to compile the javascript files from jsx files into regular plain javascript files so those compiled javascript files can be really executed on the browser and after creating the react application you can use either of these commands like npm start npm run npm test etc but for timing you require one command called npm start in order to compile and execute the react application so first switch to the application folder that is cd sql react my first application so make sure you're in the correct folder that is my first application and run the command npm start this will automatically compile and execute the react application in the default browser in case if you want to change the default browser you can use the windows settings and go to apps this is the cool default output from react application but how does it work let's edit the source code by using visual study code now in order to get started with go to start and locate visual studio code and go to file menu open folder and select the appropriate folder that is current react my first application folder and click on select folder and in this folder you can see something called public and src the public folder you can see index.html this will be the starting point of your react application so it contains the typical html syntax and it imports the icon and contains the basic metro tag and of course these meta tags are optional and if you scroll down you can see something called no script this message will be appear when javascript is not enabled on the browser because to execute react application it is necessary that user must enable javascript but of course javascript is enabled by default in all the user missions in all the modern browsers and we have a tag called div tag with id called root this due tag is the placeholder where the actual react output will be rendered at runtime and after that there is nothing much just closing of body and html and now coming to the src folder you have something called index.js which has a statement called react dom dot render and which eventually invokes app that means it renders the app component in the root element which is already present in the index.html file so where is the definition of the app component go to app.js file in the cersei folder there you can see something called app and it has a new tag that renders all the relevant output that we have seen in the browser for example this rotating icon is the img tag which is written here and after that you can see some hyperlink for example land react which appears here and you can make any changes in app.js but in the next lecture we will try to learn how to build react application from the scratch then you will understand how these files are working internally now let's try to make some changes in the app.js file to bring some output in the browser in order to do so let me arrange the browser and vs code side by side so this is the code of the app.js file that comes up automatically at the time of creating the application so it has a function called app in which we are trying to written a div tag which contains some content so let me remove this particular div tag and save the changes and return something here for example a deal with hello the moment once you make the changes and save the file automatically the page refresh in the browser so as you can see it shows hello as the default output you can use the control plus button in order to increase the zoom as of now the zoom is 140 we can use control plus to increase the zoom and we can use ctrl minus to decrease the zoom so whatever the html tag that you written in this particular function will be printed as it is in the browser this is the default code setup i recommend some preferences go to file menu preferences settings and go to text editor and then formatting and check the checkbox format on save so because of this checkbox as soon as you save the file automatically the code will be formatted that means the code will be properly maintained with proper indentation and optionally i recommend an extension called prettier so go to extensions that means the fifth icon on the top left corner then search for prettier and install this code formatter called prettier and then after that come back to the app.js file press alt shift tf in order to format the file or press ctrl s to save the file in this case as soon as you save the file automatically the file will be formatted for example if you give unnecessary spaces here and not maintain proper indentation like this and upon saving the changes the code will be automatically formatted and also you make sure you add default formatter in the preferences to do so go to file menu preferences and then again settings go to open settings json and then at last make sure you set up the printer as the default formatter for both javascript and also for jsx files okay let's close these preferences now let's try to build the same application from the scratch without using the predefined files so let me select all the files of the src folder and delete them now the src folder is empty but all the files of the public folder exist as it is and mainly we have the index.html file and the react compiler expects a file called index.js in the src folder so let's create the index.js file in the src folder so right click on src folder new file file name is index.js so this is the index.js file in the src folder in this we are trying to create an element and i wish to render the same into the react dom in order to create an element we are writing where element is equal to some html tag for example new hello world so as we have set the default formatter in vs code as soon as you make the changes automatically the file will be formatted so you need not format the code manually every time now you can see an error called react must be in scope when using jsx which means that this particular tag will be converted into react.createelement by using a javascript compiler called babel so babel is a javascript compiler that converts the jsx syntax into regular javascript to demonstrate babel go to beveljs.io and click on try it out so once you click on try it out we are just writing some html tag for example p hi the same will be automatically converted as a reactor.create element and the name of the tag here is p and the argument for the attributes is null that means it has no arguments and the content of the element is high like this whenever you write html code as xml syntax automatically bevel will convert the same into react.createelement this is also called as react element this particular react element will be a part of the virtual dom of the react in the previous lecture we have understood the virtual dom it is the hierarchical structure of the elements that you render on the page you can notice that in the actual code that you write on the left hand side we don't have anything related to react but once the bevel compiles the same into javascript it has something called as react dot create element it means that this object called react must be declared or must be imported in this case we should import this object from a predefined module called react and that is the reason even though we are not using react directly we must import react from react module so just above the actual statement you try writing import react from react module so we are importing an object called react from a predefined module called react that means it is importing the object from the module that is present inside the node underscore modules folder ok we need not worry about the node underscore modules these are already installed by npm now save the file now that errors were clear in the browser console now this is the time for rendering the same into the react dom in order to render the react element into the react dom we required something called as import react dom from the module called the react hyphen dom always the right hand side one is the module name and the left hand side one is the default import of the particular module so we are importing an object called react dom from the module called react hyphen dom and make sure you write the correct casing that is r must be upper case and d o m dom should be the upper case again so based on the same react dom object we are trying to render the element by using a predefined method called render so for this render method you need to pass the element that you want to render that is the variable name element here that means it represents the value well and after that you need to specify the position or placeholder where this particular element must be rendered so come back to the explorer window go to the index.html file in this index.html file we have a new tag in the body tag with id equal to root this is the placeholder where you can render the element remember it has an id called root and based on this id we need to select the element in the actual js file in order to select the element based on the id we have a predefined method called get element by id in the plain javascript itself alternatively you can also try using document.queryselector but in that case we have to write hash before writing the id so document.getelement of roach will select the element that is present inside the index.html file and inside this particular div we are rendering a due tag called developer and let me save it automatically the page refreshes you can see the output as hello world that means this particular element called hello world will be rendered inside the root element that is present inside the index.html file if you can notice if you want to exactly investigate where it is rendered exactly you can use the browser developer tools to do so right click on hello world inspect element or inspect in chrome it opens the developer tools there you can see the new id equal to root which was already present in the index.html file but dynamically the react element was rendered inside the root element so as a result of this particular div tag only you are seeing the output called hello world here and now let's render the element in the console.log in javascript the output statement is console.log so it shows the value of this particular variable inside the browser console here so have a look at the console so that particular div tag is represented as a react element and if you can expand the same so this is your actual react element and it has a property called a type and its value is due that means this particular div tag is represented as a react element that is why the type equal to do and also it has other properties such as props and children equal to hello world as the text so this particular text is being displayed inside the actual element and this react element is the part of virtual dom which i have explained in the previous lecture so overall a big application is the composition of various components and each component is represented as a react element which will be rendered on the dom whenever the state of the react dom has been changed automatically a new react element will be created in memory and then react automatically compares the new object and old object of react elements it identifies the changes between the new react element and older react element and then go to the actual browser dom and update the actual browser dom with only the specific changes that you really make for example if you update the inner html of the particular h1 tag only that specific h1 tag will be updated rather than reentering the complete page this makes react execute faster but this example is pretty simple but in the real world applications we will not write actual content just like this element we will need to create the components as the classes inside the jsx files we will learn to create the components in jsx files in the next lecture before creating our own components let us add bootstrap in this application so that you can make the ui look better bootstrap is one of the css libraries that provides plenty of predefined css classes to make the ui look professional with minimal less amount of code in case if you are not aware of bootstrap please check out my other quotes of bootstrap which covers all essential concepts of bootstrap from the scratch in this course we are straight away using boards tab from the beginning so that you can see the designs of real web pages from the beginning itself so as of now let me remove this console.log and i am writing the code in the index.js file so here we have to install essential packages that are required for bootstrap actually bootstrap works based on jquery and popper.js so you need to install three packages from npm that is jquery popper.js and bootstrap to do so go to your command line window and make sure you are locating the correct application folder that is c current react my first app and run the command called npm install jquery because jquery is the prerequisite for bootstrap in other words bootstrap works based on jquery internally and also add iphone iphone save that means that we are trying to save this package name called jquery in the package.json file of our application which tells that our application depends on jquery package so the command will be npm space install space jquery space hyphen iphone sale let me run this after installing the package you proceed to the next package that is npm install popper.js space iphone iphone sale actually this popper.js package is optional but sometimes you will be using accordions or drop down menus there exactly you require proper.js file internally because the code of the bootstrap internally works based on proper.js package so that is why it is recommended to import popper.js from the beginning itself now we are installing the actual package called bootstrap so the command will be npm install bootstrap hyphen iphone save once you run this command the bootstrap package gets installed on your application all these packages jquery popper.js and bootstrap packages will be installed inside the node underscore modules folder so as you can see if we scroll down the node underscore modules folder you can see the package called bootstrap and also other packages such as jquery and popper.js now you need to install essential css files and js files into the index.js file of your application so at the top of index.js file add this code that is import jquery so we are importing jquery.js file from the jquery package which we have installed before a moment and after that you need to import something called bootstrap file from bootstrap package so in the bootstrap folder there is something called list means distributable and inside which we have js folder in which we have the file called bootstrap.js file so we are importing that particular bootstrap.js file into our application now so as of this case we have imported the jquery and the bootstrap.js file and just before importing bootstrap let us import popper.js file also so import popper.js slash dist slash umd slash popper and in the command prompt window make sure you are giving npm start command in order to execute your application so now our application executes including the liabilities of jquery popper and bootstrap js files but visually there will be no much difference because we have to import one more file called bootstrap.css file from the bootstrap package so import bootstrap slash this slash css bootstrap.css this case we are importing bootstrap.css file into our application so that we are able to experience some visual changes that means the font has been changed and also the margin and body of the body tag has been removed by bootstrap css file so these are the four lines that you have to keep inside your index.js file in order to import bootstrap and to make it fully work in order to actually test whether the bootstrap is working properly instead of writing a simple div tag let me write something called as button tag with a class called btn and space beaten hyphen danger here the btn and btn danger or the predefined css classes comes from the bootstrap.css file so as you can see bootstrap works correctly that means gives a red color when you mention the class name btn danger so from now onwards you are eligible to use any bootstrap component in your page for more information about bootstrap components you can visit getboardstep.com site and then go to documentation and there go to components and layout you can see plenty of components of bootstrap such as forms buttons cards etc in case if you wish to build a real application based on bootstrap you can check out my other codes called bootstrap in two hours let's come back to the react app and in the next lecture we are going to create actual component by using jsx file now let us actually learn to create components by using jsx files the benefit of jsx file is that we can use the javascript along with xml here html tags are written as xml tags that means they work based on xml rules such as all the tags are case in store and each tag must be closed or they must be self closed this is an example of jsx expression so here in case if you write a different case for example t capital this is not allowed because of jsx and also in case if you forget to close a particular tag it will be an error as per jsx these rules are imposed by xml language so that is why we call them as jsx so let me create another file in the src folder so right click on src folder and set new file specify the file name as app.jsx and press enter key now i am writing the code inside the app.jsx file here it is recommended to create every component as a class for example i am trying to create a class called navbar here the navbar is a class in javascript and i need to export the same so that this particular class can be accessible from other classes so how will you access this particular class from other files now come back to index.js file here i am trying to add import a class called navbar from the file called app.jsx so this is how you can export the component class from the jsx file and access the same in other file that is index.js file make sure you're adding dot slash to represent current working folder that is src folder that is the folder where our index.js file is present so dot slash refers to current working folder by default but still the output is not changed because we are actually rendering the button element still so how do you render this particular content from the jsx file in order to convert this particular class as a component let me extend a predefined class called component here the extends keyword refers to inheritance in javascript which tells that this particular child class extends the super class called component which is also called as parent class you can really import this particular component class from the react module and sometimes you will be writing the braces while importing sometimes you should not so what makes the difference between with braces and without braces for example if you wish to import react we have to try writing react without curly braces in case if that particular object was exported with default keyword as export default in that case you should not use braces while importing the same in other file so since in the react module they have already exported this particular react object with export default you should not write braces while importing the same because from one module only one object can be exported with default and other objects can be exported with name so since this component class was exported without export default it is exported by its name you should write braces while importing the same here so what i am trying to say is that the react was exported with export default and the component was exported with just export keyword instead of export default from one module only one export default is allowed for remaining objects or classes we cannot use export default so that is why we have to import the same with braces which are not export default and this extends keyword says that the component class is the parent class and now bar is the child class for the same here since the navbar class is the user defined class you can give any name instead for example you might be creating sidebar or page content or grid or whatever you wish you can give and inside this particular class we are writing a method called render method and whenever this component is rendered automatically react calls this render method that is why it's a fixed name and in this render you can return anything but we are trying to return h1 with hello but still we cannot see that heading in the output it's because we have created the component but we have not rendered the same so how will you render this particular component now come back to index.js file instead of rendering the button you need to render the nav bar component which was created before a movement so let me delete this particular element and instead i am trying to invoke the component called navbar component and as per the syntax of jsx every tag must be selfclosing or should be closed explicitly so you have two choices either you can write the closing tag separately or you can make it selfclosing here generally selfclosing tags are used for components now instead of seeing the button you can see the output from the nav bar that means by using the method called render method in the react dom we are rendering the output of the nav bar component and how does that react executes navbar component and it automatically calls the render method for the same and whichever html tag that you have written here that will be rendered within this specified element that means it will find the element called new id called root which is already present in the index.html file so in between the opening and closing of this particular div tag the actual h1 will be rendered and in this case the object of the navbar class which is automatically created is called as react element which is the part of virtual dom as of now the virtual dom contains only one object at the root level as long as you nest multiple components the hierarchy will be extended with parent and corresponding children for example if you can render another component inside this particular navbar component that will be the child of this particular navbar component and you can render multiple child components right so in that case the nav bar will be the topmost root level inside which we have multiple chain components it forms a hierarchy so that hierarchy is called as virtual dom you can investigate the actual output of the browser so right click on hello world inspect element and i'm using firefox browser you can try using firefox or chrome or ms edge at your practice time so right click on hello and say inspect element or just inspect otherwise go to menu web developer and click on the option called toggle tools and in this case you can see the output called hello inside the root element this particular root tag was already created in the index.html file but we have rendered hello from the navbar component but here the noticeable point is that you can actually return only one element from this return statement if you try to return multiple html tags for example i am trying to written a paragraph it is not allowed by default by jsx it's because internally this particular jsx syntax will be converted into regular javascript by using bevel which is the javascript compiler and that particular bevel don't know how to compile multiple tags at the same time for example if you add h1 tag along with this particular paragraph it is not valid as for jsx so babel cannot convert these tags at a time you can convert either of these tags only at a time but there is a solution for this problem you can actually nest both of these tags inside another container for example a new tag so as per the syntax of jsx we have written only one tag called due and which contains two chain tags and that is allowed in this case first it generates a statement called react dot create element of due which is the actual element that you are trying to render and inside which we have two children that is h1 as well as the p tag here the content of the h1 is heading and the content of the p tag is high you can use the same exact technique while your component render method so come back to your code i am trying to nest a tag called duo inside which we have something called h1 and p to make the code readable and understandable better let me write multiple lines so that we can read the code easily now you can see the heading as well as paragraph output in the page so the syntax which we are using is jsx bevel converts this particular jsx into js file and automatically it has added parenthesis in the return statement so that either you can write this particular div tag in the same line or you can shift it to next line as well so as you can see inside the root tag we have something called new this is the div which we have created here and after that inside that particular div we have the h1 and p tags that we have created so overall this particular content is rendered by the navbar component that we have created here and that is represented as a react element but here you can notice a small problem that is you must always have an extra div tag along with your content if you don't require or don't want that you can use something called react.fragmenttag that is react.fragment the meaning of the react.fragment is that without rendering any html tag in the dom it acts as a container for both of these tags so it satisfies the rule of jsx that must contain only single tag at the same time this fragment tag doesn't render any html code in the output it actually renders only the content inside it now inside the root team tag we can see the actual inner tags without an extra div tag so it is up to you finally if you don't want an extra due tag it is better to use react.fragment this acts as a parent or container for multiple html tags without rendering an extra due tag and moreover in this class also you can use something called export default so remove this particular export keyword here and you can write export default and specify the class name that is navbar alternatively you can write the same within the class itself that is as export default directly here near the class keyword but don't try to use both at a time you can use either of the syntaxes either below or along with the class name itself in this example i am writing export default below the class so in this case since the navbar is default export while importing the same in the index.js file you should not use braces but directly mention the class name as nav bar but you can see the same output in the next lecture let us add a little bit of css styles for the same let us try to add css files for this application in order to do so open your explorer window and then right click on the src folder create a new file file name is index.css of course you can give any name for example app.css or anything and we are using this particular css file as a global css file that contains the global css styles that are applicable for all the components so by default any css code that you write here should be affected the entire page not for a specific component for example i am trying to add a class called highlight and adding some background color so this particular class can be used in all over the page in any component so how will you import this particular file into the application so come back to the index.js file here just like you import bootstrap.css file earlier you try to import index.css file see since the index.css file is the local file within the same src folder you have to prefix it with dot slash here dot slash represents current working folder that is src folder in which we are writing the code currently now the css file has been imported in the application and it can be used anywhere in any component now come back to the same component that is navbar which is inside the app.jsx and then for either of the heading or paragraph you can try to add something called as class equal to and then specify the class name that we have created here that is highlight now you can see that the class gets updated like this apart from using predefined bootstrap css styles you can also use your own css code in this index.css file this is how to add global css file for your application in the similar way you can try to create specific css file for the specific component and import that particular css file in the respective jsx file that means we can import that particular css file in the desired jsx file in which component you required that particular style this is how to add the css styles for your application in this lecture let us actually use the bootstrap navbar in this application it's pretty easy first open getbootstrap.com site which is the official website of bootstrap then open documentation from the menu select components and then switch to navbar and it shows the example of navbar in boards tab so this is the bootstrap navbar which can contain one or more menu items and below is the code of the anal bar let's expand this and here you can see the copy button so that all this particular code whichever is being shown here will be copied into clipboard so that you can return back to your application and paste to the same so i am trying to remove this h1 tag and p tag inside the app.jsx file and paste all that particular html code that we have copied from the bootstrap website press alt shift df in order to format the code and now let us remove the things which are not required in our application first of all we have a navigation bar by using the nav tag in html and inside which we have navbar brand which displays the website name or title for the application i am trying to change it as my app so this will be appear in the output but currently we are seeing some compilation errors in jsx and this particular button tag displays the toggle navigation that means the menu button for opening and closing of the menu in case of smaller devices so keep it as it is and then scroll down let's try to add one or two hyperlinks each hyperlink is represented as li tag which means list item and let me delete the first one let's follow the second one that is now item here you can write your link text for example home and hrf is the url which should be opened when the user clicks on home you can repeat the same for all the remaining items in future in this case we don't really want this particular drop door item let's delete the same and even this disabled menu item also not required for us so let's delete it and then this form tag is not required really for us and that's all so this is the navigation bar which we have created here which contains the nav tag and then navbar blind item a tabular button along with one or more menu items inside the navbar now and then after that you will close do close and then nav tag close make sure all the opening tags are closed properly otherwise you will get jsx compilation errors so once you save this code you can see the application nav bar along with the tabular menu icon and if the user clicks on the same it expands the menu items as you create and it's a table button so that it can be closed as well if needed you can try to change the color of the navigation bar for example instead of navbar light we are trying to apply navbar dark and bg dark now this navigation bar is the darker one in case if you want to apply a custom background color for this navigation bar you can do the same by using your own css style so open the index.css file which is present in the src folder which we have created in the previous lecture and in this index.css file let's add a class called navbar style which contains the background color property of your own color whatever you desire for example i am selecting some kind of grain and let's apply this particular css class inside the app.jsx file so come back to the app.jsx file after writing all the css classes i'm trying to add something called as navbar style which is the class name that we have created before a moment still you cannot see the actual color so come back to index.css file again and add important that means this particular property overrides the default setting of bootstrap which was already in the black color now you can see that everything is in green color that is the color what you selected here and of course make sure you have already imported index.css file in the index.js file like this this is how will you add the navigation bar for our application and of course by default bootstrap navbar is responsive so if you try to maximize the screen it converts into regular nav bar where all the nav links are shown side by side without having any menu button on the top right corner so this is the look and feel of the navigation bar on the larger devices and this is the look and feel of the navigation bar on the smaller devices this is how to create bootstrap navbar in the react application this is the navigation bar that we have created in the previous lecture but if you can notice the browser console you are having some errors in the browser console we are talking about this particular error that is invalid dom property called class the reason behind this error is that in javascript already you have a class keyword which is used to create a class so that is the reason in the same file you cannot reuse the same keyword for applying the css class so alternatively you have to use class name property for applying the css class then it will not be confused with the class keyword in javascript so that is the reason wherever you are writing the css class you always replace with class name property instead of class in order to do so you can take the support of find and replace in visual studio code so press ctrl h and then specify the find as class and replace with class name like this in camel case so wherever you have a class keyword you're replacing the same with class name property and click on replace all in order to replace all instances in the current file but unfortunately the class keyword which is present to define the class also got renamed so let's make this adjusted as the class keyword that's all now that error has been fixed and let me clear out this class name duplication right so as you can notice that error has been cleared out here and that class name must be in camel case and let's target another error that is href attribute requires a valid value to be accessible it's because simply hash is not allowed for href in case of react to fix this error always use slash hash instead of simple hash in react generally we use hash in href attribute for representation of dummy link and make it look like url that begins with slash so that react will accept that even in any other place wherever href equal to hash replace the same with slash hash so if you can scroll down here also once again we have to repeat the same so instead of hash slash hash now that error has been cleared out here this is how do you fix the class name and hre of related errors in react we have done good enough by creating navigation bar but what's next i would like to place some content below the navigation bar but it is not good to place that content inside the navigation bar component itself and i would like to create a new component called main content in which i can place some content that could be appear below the navigation bar so let us open the explorer window in visual studio code and to right click on src new file file name is maincontent.jsx that means we are going to create a component called main content and for all the components file extension will be dot jsx and there must be another component called app component which wraps both main content as well as navigation bar actually in this file called app.jsx we have really created navbar component but not app component so let us rename this app.jsx as navbar.jsx so right click on app.jsx rename and specify the file name as navbar.jsx now let us create another file called app.jsx inside the src folder so right click on src add new file then specify app.jsx so i wish to really render app.jsx that means app component in the index file so let us create a new component called app component inside the app.jsx so in app.jsx i am trying to define a class called app component so the class name is app that extends a predefined class called component that is imported from react module and also import react from the same module called react because this class will be converted into react dot component so after compilation of the class it requires a predefined object called react from this particular react module and every component must have a method called render method that renders something for example renders a htable tag so this particular html tag will be rendered in the webpage as you can see open the index.js file and instead of rendering navbar let us render app component so i am trying to import app component from the app file that is app.jsx file and i'm trying to render app component but not navbar component and then switch back to app.jsx file here i would like to render two components that is navbar component and the main content component first let me render navbar component so how can i render one component in another component this is called as nested component so right from the app component we have to import the navbar component from the navbar.js file notice this navbar is already having default export as you can see like this so that is the reason you can import this navbar from app.jsx file so import navbar from navbar.jsx file here dot jsx file extension will be taken automatically and to represent current working folder that is src folder we have to give dot slash and since the navbar component class is the default export here known as using braces while importing the same here so this is the code for importing the nav bar from the navbar.jsx file you can use the same syntax for importing any component in any other file so instead of rendering hello i would like to render navbar by writing the opening and closing tag for navbar this is the actual class name which we have defined in the navbar.jsx file so always we use the class name of the component as the name of the tag here but you can also write the same tag as unpaired tag that means selfclosing tag instead of paired tag so optionally you can convert this as self closing by keeping a space and then slash so in this case no need of writing the separate closing tag for navigation bar so it works in the same way as expected and after that i would like to create main content component in the main content.jsx file then i would like to render the same in the app.jsx file so let's go to the main content.jsx file let's add a default export class called main content and also import react and component from react module every component must extend a predefined class called component and also must contain a method called render that must return something for example at least a tag here i am trying to return hello from main content so for time being just it contains hello misses but as you can see still main content was not rendered in this particular page it's because we have created the main content component but we have not invoked it in the app component but can you return multiple components at a time like this now in order to do so we have to use react.fragment that act as a parent for both of these tags before than that let me import main content from the file called main content dot jsx here dot slash is must in the file path to represent current working folder so the react dot fragment tag represents as a parent for both of these tags so as you can see react.fragment is the parent inside which we have two components that is nav bar as well as main content now above you can see the nav bar and below the navigation bar you can see the content from main content component so now we can say that the app component is a root level component or top most component in the hierarchy inside which we have two chain components that is called navbar and the main content components so this is called component hierarchy where app component is a root level component and it can have one or more child components inside it so the component hierarchy decides the parents and children depending on where a component is being invoked for example instead of invoking the main component inside the app component if you write the same code inside the navbar component suppose i just write the main content component here now we can say that app component is the root level component and it has only one chain component that is nav bar and the navbar component has a channel called main content so the component hierarchy changes depending on which component is invoked in which other component all right let me undo the changes i wish to really invoke main content only in the app component like this so this is how you nest the components and build up the component hierarchy in react in the next section we will render a lot of things dynamically into these components we are going to understand about straight props in the further lectures so keep continued but to be frank this is not enough for building real world react applications you will really require to know the functional components and also advanced concepts such as redax and that is where you will check out my full course on udemy that is complete react ultimate guide in this course we are going to build the full pledged ecommerce application along with red x redex toolkit router and bootstrap in this udemy course we are going to learn the complete react with class components as well as functional components for example if you can check this section of course project with hooks here we are going to learn various hooks such as use state use effect validations use callback and many more advanced features of react hooks and importantly context api and additionally in this course we are going to learn red x react redux redux thunk red x promise redux saga and many more latest features and moreover in order to properly understand all these concepts of react and red x one should have the proper knowledge on javascript concepts especially functions and objects so in this udemy course we have provided the prerequisites of javascript that is javascript functions and objects and also ecmascript 2015 classes so even though you have less or basic knowledge on javascript you need not worry in this udemy course we have covered all the basic concepts of javascript that are necessary to understand this react android x and this is the advanced version of ecommerce application that we are going to build in the udemy course see after entering the essential email and password we have the dashboard page where the user can see his previous orders and the products in the cart from there he can buy the product or delete the item in the cart and if you click on the store page you can see all the available products you can filter out them the products and brands which you don't want you can select a particular product and add to cart and the same is visible in the cart itself and from there you can either buy or delete so this is the application that we are going to build with react hooks in the udemy codes all right we are good enough to nest the components that is navbar component and main content component but in real world applications all the content will not be static content right in many places you require to render the content dynamically so this section talks about how do you render the content dynamically and how do you update or modify the state of the page in order to store the dynamic content of your component you require to create a property called state inside your component class so the state is the property that contains dynamic content of your component which you want to render on the page or it may contain the information that you want to read from the user as well so inside your component class that is main content component let me add a property called straight so this property contains the dynamic information that you want to render on your component so this is the object literal in javascript which can contain properties and the property values can be of any type it can be number string date or even aries also you can use nested objects inside the state for example i would like to display the title of the page inside the main content component so actually i can render something called h1 or h4 as title of the page that is customers but this is static information isn't it how do you make the same as dynamic you should store this information inside the state for example there is a property called add title that is equal to customers and then you can render this particular property value in this place so how do you render the value of the property from the state open the braces and close the braces in between opening and closing the braces you write something called this dot stage that means you are accessing the state property of the current working class here this keyword represents the current working object of the current class and inside the state property we have another nested property called app title and you can render the same so now you are getting the same information that is title dynamically this is how you render the content dynamically by using expressions so this braces are called expressions in react which is used to render the content dynamically and the beauty of the state property is that as soon as you update the state property by using set state method automatically in this place the state will be refreshed so when you make any changes in the virtual dom automatically react compares the virtual dom with actual browser dom and updates the properties which are exactly modified instead of rerendering the complete page for example if you modify this particular app title property only that particular property value gets updated in the dom rather than rerendering the complete page that's what make react faster anyways we will see how to update the state dynamically in the further lectures so for time being when you make any changes in the property value for example employees since the page refreshes because of development server you can see the same information dynamically render in the expression and just for styling purpose you can add something called class name notice i am using class name but not just class because in javascript you have a keyword called class in order to create a class but for css classes we are required to use the class name instead for example i am giving border bottom and margin one and also padding one these are just css classes provided by boardstrap in case if you are not aware of bootstrap or feeling confusing about bootstrap css classes you can check out my other codes called bootstrap or refer to bootstrap documentation in the getbootstrap.com site in my course i am not much deeply explaining the bootstrap related to css classes because that's all a different subject so in the next lecture we will see how to handle events in react well in the further lectures i would like to show the customers grid so the app title is customers and it is not the app title and it is the page title so let me change it as page title and render the same as base title and then i would like to show the customers count so let's have a property called customerscount and for example it is 5 and in order to render the same i am just writing a span tag so inside the span tag i would like to render the value of customers count dynamically by using react expression so react expression is the braces and you can access the state that is this dot state dot the property name that is customers count that is 5 in order to stride it up i am trying to add the css class name that is badge and badge as secondary and let's apply some margin for the same by writing m2 so every time when you modify the value of this property automatically the same gets reflected in this place where we render the particular component property now we are going to learn how to handle events in react in javascript we have events such as click double click focus blur key press key up etc you can handle almost all types of events by using react in order to do so we have to write on click on focus on blur etc attributes within the specific html tag in react and there you can call a method that is written inside the same component you cannot call the methods of another component inside this present component for example let me add a button inside the h4 by using button tag so there is a button called refresh when the user clicks on this particular refresh button i would like to call a method to do so i'm just writing on click in camel case that means on in lowercase click c is capital in click here i can call any method that is present within the same component first let me create a method inside the same component class so as of now here this is the closing brace of the render method after that let me add a method preferably the method name could be a meaningful name for example on refresh click you can actually give any method name but better to follow the naming convention so that your code will be self explanative and any developer can understand that this method executes on clicking the refresh button and also let me add comment to make it easy to understand later so inside this particular method i can write any code that is for example i am writing console.log of refresh click claim you can actually write any code whatever you require now i would like to call this particular method inside the on click event so let's come back to render method and inside the on click i am just writing on click the method name must not be in codes but must be inside an expression that is braces so this indicates that when the user clicks on this particular button we have to call the onrefreshclick method notice we should not use the parentheses for calling but it must be as it is just name of the method and also we have to represent the method along with this keyword so we should write this dot method name in order to access the method of the current working class object that is just like how you call this dot state in the same way you should write this dot method name so as you can see when you click on the button you can see refresh clicked in the browser console but how do you really update the component state that's what we will do in the next lecture all right in order to update the state of the page we have to use setstate method but it should not overwrite the values of the state property directly it's because every time when you update the state internally based on the virtual dom the real browser dom should be updated by react so if you overwrite the values of the state properties react cannot identify that and cannot rerender the same ui so that is the reason you have to use the set state method in order to let react update the browser dom based on the changes made in the virtual dom so inside the method called on refresh click we are just writing this dot set state in this case it is a predefined method and you can supply only the property values which you want to really update so we have two properties i don't want to update page title but i wish to update only the customer count for example i wish to make it as 7 so to do so just add customer's count property only and give the updated value that is 7 it will overwrite the previous value that is 5 and then this particular change will be taken into virtual dom first and then react compares the virtual dom changes with actual browser dom and updates the browser dom only for that specific property will not render the full ui so let's click on refresh button and as you can see it is showing an error saying that cannot read property called set state of undefined the reason behind it in javascript by default that this keyword context will be changed when it is indirectly called so in this example we are not calling this method directly but we are calling the same with on click event of the button right so that is the reason that this keyword by default refers to button rather than representing current object of the component class in order to overcome this particular problem we can convert this method as a error function so that that this keyword of the error function always refers to component class rather than a button so how do you convert this method as a error function just say equal to and then after the parenthesis you just add something called arrow operator that is equal to and greater than and that's it you have successfully converted your method as a error function so that the benefit of error function is that always it's this keyword stick to the component class that this keyword context will not change to any button or something else so even though you are calling that add a function through a button that this keyword refers to a component try clicking on the button once again see as soon as you update the value of the state the particular ui gets changed it's because we are using set state method in order to update the state of the component and go to elements right click on the title inspect element and try clicking the button again so as soon as you click on the button as you can see only the value of span tag is being updated rather than reentering the complete h4 that is what the actual benefit of using virtual dom in react so overall we have understood how to update the state of the component by using setstate method you can apply the same logic for updating any type of value not only number but also for string array or any other type in the next lecture i would like to demonstrate a customer's grid in this main content component i would like to show you how do you render the table that is grid by using map method of javascript array first you require to store the data in the form of array inside the state of the main component in order to do so let's write the properties line bearing and add another property called customers it is an array so in this array i would like to add all the list of customers that i would like to render inside the customer's grid whereas each customer is represented as an object literal suppose for each customer we have id name and phone number similarly let us add some sort of customers so this is the date of the customers that i would like to render so how do you show this particular array data in this react component to do so let's look after the h4 so after closing the h4 i am trying to add a table tag and in order to apply the bootstrap style of table let's add a set of css classes that is table and inside the table i would like to add header row and i have just added the column headers that is id name and phone number which displays like this in the large screen and here i would like to show the actual list of customers so let's take up t body means table body so inside the t body i would like to have a tier tag with some sort of td tags so this particular tier tag should be repeated once for one item in the customer's array how do you repeat this particular tier tag for each customer to do so in javascript arrays we have a predefined method called map the map method of javascript array receives an error function and executes that error function for each element inside the array so in order to call it let's take up an expression and write this dot customers.i mean this dot state dot customers.map and then we require to pass an error function so this particular error function will be executed once for one item in the customers array and each time you will receive the customer object as an argument and then you require to return the tr tag inside the arrow function so whatever you return inside this particular arrow function this will be rendered inside the output so as you can see since there are five customers in that array five tier tags have been generated automatically as you can see here see in the t body we have five tier tags automatically got generated with empty 3d tags but how can you render the actual content in each td tag you can use your expression and you can use the parameter called cast in order to access the current working customer the same error function executes once for each customer right so for the first time the first customer object will be passed into the cust parameter that means for the first time cussed parameter equal to this particular object and the second time this is the second object assigns to cost parameter like this you can access the customer details by using cust parameter every time so you are writing custom dot id so as you can see it is printing customer ids in all the rows you can try accessing the name and other properties that is id name and phone properties so cust.name customer dot phone number so this is how the table appears in output but if you look at the browser console it shows an error saying that each child in a list should have an unique key property it is a mandate of the react in order to identify the each row of the table it requires an unique key which is also considered as a primary key so you should specify the key property in the tier tag which is being returned from your error function based on this specified key react identifies each row inside the table in our customers area which property is unique it is id isn't it so we have to specify that id property of the customer is the unique key inside the map function here so go to the tier tag add key equal to customer dot customer id that's it that error gets cleared and of course you should not use double quotes for the same so this error has been cleared out and you can see the data comfortably here sometimes in the array elements you will have nested properties for example we have something called address and it contains several properties such as city straight etc for example let's add city as new delhi and some other values for each other customers like this every customer has their own address and each address contains other properties such as cd how can you render this type of output inside the grid you can access the reference variable that is cursed dot address dot cd that means while rendering you can write like cust dot address dot siri this is how you access the nested properties in case of arrays let me add a header row for the same as you can see cities are rendered in the table all right by using map method in javascript arrays we are good enough to display the grid in the page but now i would like to render some content based on the condition means if the condition is true i wish to render one content if it is false i wish to render another content so that is called conditional rendering so how can you do that for example if the phone number is not available for the customer i would like to show the text like no phone to do so let me remove some phone number for one or two customers let's say james and john don't have a phone number it is empty value or can be null so since the value is null it is rendered as just empty in the output rather than empty i would like to show the text like no phone that is called conditional rendering to do so come back to the table tag in the main.content.jsx go to the place where exactly you are entering the phone and here check the content before rendering if the custard dot phone is equal to null in this case you would like to render something like no phone otherwise you have to render the content called custom.phone itself this is the simplest way to render the output conditionally sorry it is no phone let us check the output as you can see if the phone number is not available for james and john it is displaying as no phone instead of empty text alternatively instead of plain text you can also render the tags so remove the codes and use any tags such as new tag and place the text inside the new tag this is what the exact advantage of the jsx anywhere you can return a tag just like a normal value in javascript this case if the condition is true this particular tag will be written so that this will be displayed in the output and in this new tag you can add custom css classes by using class name and specify background color and also padding for example 2 and the condition can be better as custod phone in javascript the values such as null undefined empty codes and 0 are called as false values so in case of 4 number property contains any of these values in that case it is considered as no 4 number so in all those cases the condition will be false so in the else case we should keep this new tag that is here so we are checking this condition in case if the four number property is other than the specified values that is false values the custod.4 number property will be rendered otherwise it returns this particular div tag what are the false values as per javascript null undefined 0 empty codes are called as false values in all those cases the condition become false so you will render this particular due tag and also let's add another class called text center here so as you can see it shows no phone as new tag along with the padding so the syntax of conditional rendering is simple first check your condition if the condition is true that means if the condition is not null undefined or 0 or empty codes in that case this particular true value will be returned otherwise this particular false value gets written this is how to render the content based on the condition for another example in ecommerce application suppose if the product is not available you wish to show the output in one format if the product is available you want to show in another format suppose if the product is not available you want to show it in grey color for that cases we use this conditional rendering technique so in case of conditional rendering sometimes your code will be much more complex than this you may need to write much more number of statements to render the content conditionally such as checking more than one condition in that cases instead of making this code complex and lengthy it is recommended to write the same code in a method and call that method in this particular dd tag let's try the same let's cut this particular expression and scroll down in the main content component that is after the method of onrefreshclick method let us add a new method for example get phone to render so in this method let's paste the same code as we have written in the 3d tag previously and i would like to return this particular value of the expression and give a semicolon at the end now i would like to call this particular method in the td tag so let's call up this particular method inside the td tag here so in this expression we are calling the get phone to render method whatever that method returns that will be rendered here and what are you going to return in this method either phone number or new tag as you can see if the phone property has any value that means any of the truthy value it returns the phone number itself in case if it is a false value it returns the due tag here instead of using conditional expression like this you can also use the regular if statement if you have a complex code for example i am just writing regular if statement that is if cust.phone then we are going to written custod phone value else we are going to return the due tag so for complex code and complex operations you can use this technique of writing your expression in a separate method and invoking the same in the expression wherever you is to render the same that is in the particular tv tag where you want to show the output but in the output you can see some error saying that cust is not defined it's because the variable called cust is a parameter which is available only inside the boundary of the map method but not available outside so that is the reason we have to pass the cursed parameter as argument to the get phone to render method alternatively you can supply only the phone number property instead of passing the whole customer object so that is the reason in this method you can receive only the four number directly rather than receiving whole the customer object actually it is up to the requirement either you can pass the complete customer object where the output depends on various properties of the customer or in case if you want to check only the phone number of the customer to render in this case i am just passing only the customer phone number as argument and i am receiving the same inside the method and checking the same in the actual if statement so i can just use if phone instead of if custod phone and now if you can check the output again we have another error called get phone to render is not defined it's because we have to use the arrow function syntax in order to call this method even though it seems sometimes optional it is always advisable to use error function all over the react so get phone to render is equal to error operator and also we have to use the this keyword while calling the same so here we are calling the get phone to render method and supply the argument based on that argument we will return some value here either 4 number or new tag and this particular returned value will be rendered in the same place where you originally call it this is how it works let's check the output now it's working fine every time you make changes you have to save the code then automatically the page gets refreshed by react development server and now let's remove this unnecessary border so go to the h4 tag and i am removing this water bottom so that that unnecessary water gets removed as you can see here in the similar way optionally you can render this particular tbody content in a separate method rather than writing the same in the render method because as long as the application is improved the code of the render method is getting increased right in order to simplify the code of the render method let's move this particular code into a separate method so let's cut this expression and scroll down in the main content.jsx file let's add a method called get customer role and preferably make it as an arrow function and here written the same expression use the parenthesis rather than expression here all right now we have to call this particular method inside the table tag so let's go up in the t body in the expression let us call the get customer row method so now the code of the render method is simplified the actual logic of tier tag is being written in this particular get customer draw method in this way you can simplify the code of the render method so that the render method becomes readable and understandable easily where each piece of the ui is being written by different different methods of course this modification doesn't affect the actual output it remains same and no errors in the browser console as well so how do you render images in react for example before the customer name i would like to show a random image for each customer to do so i'm using something called pixelm.com which provides random images so for every customer in the customer's area i am adding a property called photo and specify the url as https dot photos slash id and you can use any id starting from 1000 and specify the size of the image that you want for example 60 pixels the same number will be taken for width and height alternatively you can specify the width slash height also for more information you can visit pixelm.com site let's repeat the same syntax for all the remaining customers so we have added photo column for each customer as you can see here now how will you display these particular photos inside the grid so scroll down in the main content.jsx file go to the get customer role method which renders the actual tr tag of the grid and we are calling this method inside the table tag as you can see here now in the method just add a td tag off to the id and in which you will render the photo that is cust.photo sorry let's write photo so in this case it is displaying the path of the photo that you mentioned there to render the actual image we can use img tag and bind this particular value into the src attribute of the img tag so let's do that img src equal to the custod photo by using the expression that is curly braces so don't use codes but use the braces to mention the dynamic value into the attribute and as per the recommendation for every image prefer using alt attribute and specify any content whatever you wish for example customer in case if the specified path of the image is not found or not loaded into the browser it shows customer instead let us see the image now as you can see same image appears for all the customers but i want different images now come back to the customers array again that is at the top of the file we will give different ids for each image let's say thousand eleven thousand twelve and so on in case if you want to know what are the available images you can visit this site that is pixelm dot photos slash images there you can find id of the image for example for this image id is thousand these are the random images you can mention any of these ids in your url here the credit goes to pixelm.com site anyways we have mentioned different ids of the images and let's refresh the same page as you can see we have different images for each customer this is how do you render the images by using src attribute of the emg tag you should bind your dynamic value by using braces in the src attribute not only a sorcery attribute you can use the same syntax for any attribute of any html tag sometimes you want to render or apply the css styles dynamically in react in that case you can assign an object into the style attribute of the html tag for example we have a requirement such that if the customer name begins with yes it should be having blue color background and if it begins with j it should be having red color background to do so we can use something called style attribute and assign an expression into the same here we can take the property for example background color and in case of value you can take an expression and check the condition for example if cust dot name starts with yes in that case you want to return the value called green otherwise you want to return the value called red and you will close another parenthesis here and since this is a property we are going to use another curly braces so in this case you are checking the condition if the condition is true you will return green otherwise red for this background color property and in the corresponding table let me add another th tag for photo column so we will have four th tags like this one is for id photo customer name phone and cd so this is how do you apply conditional styles in react we are checking the condition here if the condition is true we will return green otherwise red for this background color property so overall in this place either of the values will be taken at runtime for example if the condition is true that means if the name begins with yes green will be taken here and this become as a object lateral and that will be assigned to the element by using the expression that is the outer curly braces this is how it works so let's check the output as you can see we have green color for squat and otherwise we have red color for remaining customer names sometimes you wish to write much more complex logic like this let's say you want to set more than one property of the style and also if you want to write more than one condition for example if the name begins with yes green color if the name begins with j another color if the name begins with k another color in that case it's better to write this as a separate property so let's go to the top of the class that is inside the main content class i am trying to add another property after the state property that is just above the render method in the main content.jsx file customer name style and in order to define the values for the style dynamically let me convert the same as a method rather than a simple property and inside the error function we are receiving a parameter of customer name then we will check if custname begins with s we will return the style property as background color that is green otherwise in case if the customer name begins with j we will return red otherwise we will return an empty object which doesn't specify the background color particularly so either of these values gets written when you call this particular method now let's call this method in the place where exactly you are rendering the content let's scroll down in the same file instead of writing this clumsy code simply write this dot the method name that you write here that is customer name style now the code looks cleaner and simplified to understand so whatever you written in this particular method that gets applied for the style of the td tag and of course since you don't supply the value for the cust name it is showing an error saying that cannot read the property of starts with of undefined because you must supply the value for the cust name from the place where you are calling that is cust.name here so let us check the output as you can see in case if it begins with j it is red color if it begins with s it is green color otherwise it is normal white color but setting up the css styles dynamically by using style property is okay for one or two properties but not good if you want to reuse the same css styles for multiple elements or you want to set multiple css properties at the same time for example you want to set background color font size border radius etc at a time in those cases better to use the css class rather than setting style attribute we will really do that in the next lecture now let us convert this method into css class rather than setting independent properties of the css style to do so let's open index.css file that is present inside the src folder consider this as a global css file that is available for all the components of your application it's because we are importing this index.css file in the index.js file here so it becomes global for all the components alternatively if you want to import a separate css file for each component you can create a separate css file for each component and import the same in the respective component file anyways now let's switch to index.css file and add two classes that is green highlight and red highlight specify some properties as per the requirement so these are the two css classes that are created in the index.css file i would like to apply either of these classes dynamically based on the condition in the grid so the same requirement if the name begins with yes it should be green highlight if the name begins with j it should be red highlight so how can you do so let's come back to the main content.jsx file so in case if the customer name begins with yes we will return the class name as green highlight otherwise we will return the class name that is red highlight you can add more than one css class at a time with space operation for example you can use the builtin bootstrap css classes let's say i'm using border left and border right in case of red like this you can conditionally add different set of css classes whatever you wish and in the else case you will return nothing that means no specific css class and now you can call the same method in respect to place where you are rendering the customer's grid so in the same file that is main content.jsx file at last instead of binding the value into style attribute bind the same to the class name that means css class and of course you are calling the same method already that's all let's check the output in case if the name begins with yes the green highlight class is not applied correctly let me check again oops spelling mistake in the index.css file it's green highlight right let's check again so as you can see if the customer name begins with yes it applies the css class called green highlight the same can be seen in the browser dom as well and in case if it begins with j it's having red highlight css class as you can see here this is how do you apply conditional css styles by using css classes in react in real world applications better to use css classes rather than applying the style properties directly while handling events in react such as click event or focus event or blur event etc how can you pass arguments to the caller function for example in this application i would like to create a button near the photo that is change photo and once the user clicks there i would like to access the currently clicked customer details inside the function so how can you pass the current working customer details as argument to that click event handler before than that really we don't require the styles of green and red in further examples let me remove the same so let's remove this class name equal to customer name style so this td tag remains simple and let me go to the top of the main content file and let us remove this customer name style method which we don't require and locate the img tag of the customer photo inside the same 3d tag let's add a div tag with a small button that is chain picture so when the user clicks on this particular chain picture button i would like to pass the current working customer details as argument to the click event handler so let's come back to the code let's make this as a class name and on click we are regularly calling a method observe carefully here we are not calling the method directly but we are passing the reference to the method in the onclick property so in that case it will be difficult to supply arguments to this particular method to overcome this particular problem you can actually use an error function so that it will be easy for you to call the particular method instead of passing its reference so there you can pass any arguments whatever you really wish and then close the brace for example i am trying to pass the current working customer details as a custom parameter which was coming from the map method so the current working customer object is being passed as argument to this particular method of course you can call any method for example the method should be on chain picture click this method is as of now not defined let's define the same below so after completion of the get customer row method below let us add that on chain picture click method as error function and here i can receive the current working customer details as custom parameter which was passed above so first of all we are reading all customers from the customer's array by using map method the map method itself gives you the current working customer as cust parameter the same is being passed as argument to this on change picture click method and from here we are receiving the value into the onchain picture click method definition here let's print the same by using console.log that is considered log of cost let's check here now if you click on either of these chain picture button for any customer for example i click this particular button for the fourth customer the fourth customer object is received as parameter and the same is being displayed in the console this is how you supply the value dynamically through the click event handler so while handling any event if you want to supply the argument value to the target method you can use this error function technique and it's not only for click event but also for any javascript events such as on key press on key up on change or any other javascript events that we have for almost all javascript events you have the properties that begins with on in react okay let's make it on click again but sometimes you used to really pass the index of the current working customer so for this requirement the javascript array map method itself provides you the second argument that is index so the arrow function of the map method receives two arguments the first argument represents the object from the array and the second argument represents the index of the corresponding element for example for the first customer index will be 0 second customer index will be 1 and so on so after declaring the index parameter here you can carry forward the same index parameter to the on chain picture click method like this so first of all your index is being given by the map method and the same you carry forward to the particular method which you mentioned here and also let us receive the same here you can actually do anything based on the index such as updating the specific customer in the customers area in real world applications when you want to really perform edit delete such operations this technique will be really useful for you so let's check again this time try clicking on any one of these buttons for example i click on the change picture button for the second one so i am receiving two arguments in this case one is the customer object which i have clicked which includes all the properties including photo and second argument is the index that contains index of the currently clicked customer which i clicked here so since i click the second customer its index is 1. suppose i would like to update the status of the photo to something else for this case we can actually use the set state method because the customer's array is a part of the state of the current working component and the key logic here is that anytime when you make any changes in the customer's array through the set state method automatically react read enters the particular element based on the change that you make for example if you make any changes in the photo property of the specific customer object that specific img tag src attribute value gets updated by react dom let's try this so this dot set straight and i wish to update the area property and suppose i am passing an empty array since you supply empty array and click on the button see the complete array got removed it's because you have really updated the state of the component it immediately renders by the react so instead of overwriting the complete array first let me update the photo of the specific customer so where customer array equal to get customers from the state of the current working component and in this array go to the specific index based on the value that you have received through the parameter and update the photo property of the same for example i am trying to change the id as 1 0 4 and then i am trying to give the same as the customer's array value here so as soon as you try to supply the array because of the set state method automatically react updates the particular image in the specific customer let's try here suppose i click on the change picture button for the third customer this time automatically as you can see the picture has been changed for the same and let's try once again i click on the chain picture button for the fifth customer as you can see the same image gets updated here this is how do you update the state of the array by using set state method so always keep in mind such that the array is the background information which renders as a table in the output any element or information that you want to change here you can update the same in the corresponding array in the state so that react automatically updates the same in the corresponding table this is how to make dynamic changes in the array in react i have just added some comments in the same method for your clarity in this lecture our goal is to create the shopping cart application which displays the list of products as shown here in this case the shopping cat is the component and each product is another component that means we are nesting the components here where shopping cat is the parent component in which the child component called product component has been rendered that means the shopping cat component is the parent component and the product component is the chill component which is rendered through the loop so here each product is an instance of product component so let's come back to our application currently in the main content component we are displaying customers list so let us convert the same into customers component where we can create another component called shoppingcat component that displays list of products let us rename this main content component as customerslist.jsx and in this customerslist.jsx the component class name is customerslist and we don't want to render it right now instead i would like to render shoppingcat component so let us create a new file in the src folder that is shoppingcat.jsx import essential react and component and creating the component called shoppingcat and i would like to render this particular shoppingcat component in the app.jsx file so switch to app.jsx file instead of rendering main content let us render shopping cat and import shoppingcat class from shoppingcat.jsx file now switch back to shoppingcat.js file have a method called render and in this render method i would like to written a new tag with some default content as shopping cat now it displays shopping cat in the output and i go to public index.html file change the title tag as ecommerce and then go to navbar.jsx file change the application name as ecommerce so as you can see the browser title as well as the application title has been changed as ecommerce now inside the shoppingcat.jsx file let's make this as a heading that is shopping cat and in this particular new tag i would like to render a set of products so first we have to store the list of products as an array in the state of the shopping cat component so in the state of the shopping cat we have a list of products and each product contains id product name price and quantity and let me add few more products so i have added some data in the products area of the state in the shopping cat component i would like to render this list of products in this new tag but each product must be represented as another component called product component so i would like to render this particular ui of the product as a separate component and that component should be repeated once for each item in the array so let us create another component called product component right click on src new file product dot jsx file in which i would like to create a new component called product component so inside the product.jsx file import react and other default elements and written something like product i would like to invoke this particular product component for each element inside the shopping cart so read the set of elements from the product's array and render product component in this place so how will you read the elements from the array that is through map method right so this dot state dot products dot map and we have an arrow function this error function will be executed once for each element in the array and this is the closing for the arrow function this is closing for the map function and this is the closing for the expression of react and this error function receives each element as an argument which can be received here as for example prod you can give it any name and in this error function you can return any instance of product that means for each element of the array it produces a new instance of product component here your invoking product component inside the shopping cat component right since you are invoking one component in another component the component which you are invoking is called as chill component and where you are invoking that component is called as parent component so shopping cat component is the parent component here and product component is the child in the similar way suppose if you switch back to app.jsx file in the app component you are invoking navbar and the shopping cat so navbar and shoppingcat are the chill components of app component again switch back to shoppingcat component you are generating one instance of product component once for each element in the array now in the browser you're getting an error saying that product is not defined it's because we have to import product component from the mentioned file so import product from which file that is product.jsx file so as you can see since we have six products in the array six times the product component has been repeated that means six instances of product component has been created but here the big question is that how will you supply the data from parent component to child component here i would like to supply the data from parent component to jail component how is that possible that's what the topic for the next lecture in the browser console we are getting an error saying that each child in a list should have a unique key that is key property so remember this wherever you're rendering an element by using map method in the react you must be specifying the key because internally react identifies each instance of the element by using the key property so that is the reason while rendering product component we have to specify the key the key must be the unique value in your data source in our example we have id property which is the unique it's not necessarily globally unique and not necessarily a number it can be even string or guid or whatever the data type it may be it must be unique generally we use the id as a key here so i am specifying prodi dot that means product dot id now that error has been cleared out in the console but the question is that how will you supply the data to the product component so that it can show up the same information inside the product component the data is originally available in the shopping cat component state the same must be supplied to the product component wherever the product component is being invoked there exactly we have to supply that value for example shopping cat component wants to supply id of the product to the product component so it can supply the same as a property here for example id is equal to prod dot id you might be wondering why we have to supply the same id once again because already we are supplying the same in key it's because key is internally used by react and the developer no longer has access to the same to print out that is the reason whichever the data we have to print or access in feature in the product component that must be supplied while invoking the child component so here i am supplying id equal to product dot id this prod is the variable which we are receiving through map error function for the first time the variable prod represents the first product and next time prbod represents the second product and you can give any name instead of pr voting now let us access the same in the product component here i am just adding hash and then followed by actual id how will you access this particular id property which is supplied here all the properties that are supplied from the parent to channel are by default stored in the object literal called props so every child component in fact every component contains a predefined property called props which refers to an object that contains all the property values that are supplied from the parent with this kind of syntax in this case it contains only one property called id let's display the same that is props dot id so as you can see the id has been displayed here as hash of course hash is a constant character or literal character ignore it but this is the actual id value that is supplied from the parent to child so the parent supplies the information to the child by using the properties like this and all those property values are accessible in the channel by using props optionally just for observation you can print it out so in the render method i am just writing console.log of this.props as you can see in the console you can see id equal to 1 for the first instance and id equal to 2 for the second instance totally we have six instances of the product component that's why it is showing up six times for one component only one props object exists and notice carefully in the props object you will not see key here key is undefined you can only access id but not key whereas key is internally accessible by react to uniquely identify each instance of the element react identifies which element is being added removed and changed by using key internally but how will you supply multiple values other than id for example i would like to supply the product name that is prod dot product name and also price now we are supplying three values into the props that is ide product name and price all these values are accessible in the product component now switch to product component let's display all that information in the product.jsx file for representation of each product i am using bootstrap card if you are not sure about bootstrap card card is the box or rectangular representation of information where you can render something about a particular person or particular product or something else here each product is represented as a card order to create bootstrap card the class name must be called and inside which we must be having another view tag called called body inside the code body you can write your actual content to show in this case you are taking another div tag with the text muted that means with gray color and then print the static character called hash that means id then how will you access the actual value of the product that is this dot props dot id this property name which you are using here must be same what do you pass from the shopping cat component here you are writing id in lower case you must use the same property name here while rendering in the product component so as you can see each product is represented as a card and in gray color the id has been displayed here and if you can notice each props object contains three values now that is id product name and price so you can access either of these properties through this dot props now continue writing the code in the product component add heading that is h5 that is along with padding that means spacing around the content along with border top so top lane border inside which you will display product name and how will you access the product name that is this dot props dot product name and in about case it must be class name but not class so as you can see it displays heading five and i would like to have padding only for top side that is padding top and on the next line i would like to add price dollar as a static character and then dynamically render props.price so the first due tag displays the id and the name and then price of the same so this is the card which displays id name as well as price but there is no any distance or gap between each card let's apply some margin for the card so while rendering the card add m1 or m2 that means margin so there is some distance between each card and by default the cards are displayed line by line how will you render the same side by side in order to do so come back to the shopping cart component while rendering the products we have a due tag right so for this new tag apply the class name called row that means we are taking up a bootstrap row and as per the bootstrap recommendations apply the class name called container fluid for the shopping cat the container fluid manages the default margins of the page this is the code of the shopping cart component now the size of the card is not correctly aligned as you can see it displays all the cards side by side now let us switch to product component that is product.jsx file so already we have created a row in the shopping cart component let us add call lg6 that means on the small or larger devices it has to occur six columns out of 12. and let us paste the content of the card inside the call lg6 sorry it must be class name and class name must be camel case for the card body so let's check it out as you can see all the products are displayed side by side that means it displays two products in a row but when you switch to smaller devices you can see all the cards displayed line by line instead of side by side it's because we have given call lg 6 instead of call 6 that means it has to take up 6 columns on the larger or higher devices but by default it occupies 12 columns on the smaller devices so overall the shopping cat component is the parent component that invokes product component as a child and in the chain component called product component we grab the information from the parent by using this.props this dot props is the builtin property in the product component that contains the list of properties that are supplied from the parent while invoking the child so every component contains two things that is props and straight so what's the difference props is the set of values that is supplied from the parent component while invoking the child component see in this case in the shopping cat component we are invoking the jail component called product so whatever the properties that are supplied here is called as props for the jail component called product but state is the own and private to the same component itself the state of one component cannot be accessible from other component so even the shopping cat component is the parent and the product component is the chilled each component has its own state and one component cannot access the state of other component for example in the child component called product component if there is some state value for example x equal to 100 this value is private and own information of the same component cannot be influenced from other component that is the difference between straight and props and another difference is props is always be read only but state can be read and write so as a developer you cannot change the value of the props but you can anytime update the state by using set state method for example if you write a statement such as this dot props dot id equal to 100 and execute the same application you are getting an error saying that cannot ascend to read only property called idea of object that's because props always be read only so that is what i'm trying to say you cannot modify the value of props that always comes from the parent component to channel component but state can be anytime changed by using set state method of course you should not assign the value of the state property directly you must use a set state method only because every time when you use the set state method internally react calls the render method to reflect the same information into the browser dom and in our application instead of printing the props value directly in the expressions you can take up this information into the state so that if needed you can modify the same later to do so let's declare the properties in state that is for example id get the value of the props and assign the saving to state dot id in the same way you can repeat name equal to that is product name equal to this dot props dot product name and in the same way price so as you can see the product component state has three properties that is id product name and price let's render the same here instead of this third props we are writing this dot state dot id same with this.state.productname and this.price now this state can be updated within the same child element the benefit here is that if required the jail component can update the state but it doesn't affect the parent one and output remains same that is id name as well as price and let me reduce the padding top as padding 2 that is pt2 and there is another alternative for the same instead of passing loose values from the parent component to jail component you can pass the whole product object at a time which includes id product name and price let's try this let me supply product instead of individual properties that is just directly past the parametric or product that is prod in this case the props contains only one property called product so props is an object that contains only one property called product and that refers to the complete product object include id product name price quantity so as per the props point of view only one property is there that is product and it is an object now let's update the code of the product component accordingly switch back to the product component instead of accessing this dot props dot id you should access this dot props dot product dot id here the property name product is supplied in the parent component and let's continue the same for remaining properties that is this.props.product.productname and so on and it's working as expected in the output so the props contain a property called product which refers to an object which contains id product name price and quantity and there is alternative way for the same instead of copying each individual value into the state you can also have single property called product in the state so in the product component we have only one property in the state that is product that refers to directly this dot prompts that product so you need not have individual properties for id name and price so in this case while rendering you should write like this dot state dot product dot id because in the state you have only one property called product that is equal into product property that you supply from the parent and this dot props dot product is equivalent to product object from the product array which contains id product name price and quantity you can access the complete object through this dot state dot product that is why you are writing this dot state dot product dot id and update the same for product name and price so there are multiple ways to supply and receive the information from parent to child so overall which is best policy either supplying individual values or supplying the whole product object at a time see if you want to supply the complete object including all the properties without adding anything to the chain then this approach will be better but if you wish to supply only set of properties but wants to hide some sort of properties in that case the previous approach would be better for example the parent wants to supply only id and product name but don't want to supply the price and quantity in that case supplying individual properties is the better choice but in our application right now i don't want to hide any information to the child in that case supplying the whole object at a time like this is the better choice so overall in the shopping cat component we are supplying the complete product object while invoking the chill and this property called product is accessible as this dot property product and its reference is stored in the state dot product in the chain component so this is how it is working as of now while invoking the chain component the parent component can supply a set of html tags as content to the jail component see currently we are in the shopping cat component and here exactly we are invoking the child component called product so in between the opening and closing tag of the product you can actually supply some html tag and that is called content for example here i am writing some html tag such as h1 hello this is called as content that is supplied to child apart from the so the parent can supply two types of information to the child that is props as well as content in the previous lectures we are able to receive the props and print the same in the respective chain but how will you render this particular content in the child it is as simple as this dot props dot children for example in the product component that is inside the shoppingcat.jsx file i am trying to render a button with class name of btn and btn primary that means blue color and for example i am trying to add by now so i am supplying the button from the parent to channel so how will the child render the same by default it's not rendered in the channel anywhere so you cannot see any buy now button by default in the channel component but how will you render the same now switch to the channel component that is product.jsx you decide the place where exactly you wish to render the same for example below the price as the card footer i would like to render the same so after closing the card body you try to start something called card footer inside the card footer i would like to render that particular button and that button must be right side so i am trying to add text right so inside the card footer i am trying to enter something called this dot props dot children here children is a predefined property in props which represents the content that is supplied from the parent before a moment we are supplying the button from the parent isn't it so this particular button tag is represented as this dot props dot children in the channel component let's check it out as you can see in the folder you can see something called buy now and the same reflects in the this.props in the console.log as well so the props has a property called children which represents the react element of the button so this is the react element and type equal to button and of course we also have product object along with children this is how a parent component supplies content to child component and chill component renders the same anywhere in the desired place here the question is how to handle the events of chill elements in the parent component for example in the chain component that is product component there is some button and i would like to handle the click event of that button in the parent component called shoppingcat component so how to do that first let's create the button in the card folder i am taking two boxes that is left side and right side with the float left and float right and in the right side box i am trying to place the this dot props to children and that represents the actual buy now button and inside the float left here i would like to add plus and minus buttons for the quantity first let me take a span tag with badge and let's render the quantity that is this.state.product.quantity and the default value of quantity is by default 0 as per the array and this must be class name but not the class and after the badge i would like to add two buttons as a button group the first button is for plus and second button is for minus and let me remove this text right css class all right so we have two buttons that is a plus and minus by clicking on the plus button i would like to increase this value and minus for decrementing the quantity but instead of handling the kick event of these buttons inside the same component class that is the jail class component i want to handle the click event of these buttons in the parent component that is shoppingcat component so how to do that let's switch back to the shopping cart component and after completion of the render method let's add another method here that is for example handle increment equal to an error function so this particular error function should be executed when we click on the plus button over there and let me add another method called handle decrement and this must be executed when we click on the minus button over there and i would like to pass these two methods as props so while invoking the chill component that is product component let's supply on increment equal to this dot handle increment that means hl component i am giving you a method called on increment so that you can use this method in order to handle the event in the child component in the similar way let me supply handle decrement so these methods are available as on increment and on decrement properties inside the district props of jail component so let's go to product component that is the chill component now you have access to this dot props dot on increment and on decrement see in the browser console also you can check the props it contains on increment as well as on decrement and those are the functions let's handle the click event of the buttons and bind these methods that is on increment and on decrement respectively for these two buttons so in the product component for the first button on click that is equal to this dot props dot on increment in the same way for the second button on click equal to this dot props dot on decrement notice the name it is not handle increment and handle decrement but it is on increment on decrement the actual method names that is handle increment and handle decrement is not the matter here because the names that you mentioned here is considered to be a part of the props so only these property names must be used here in the props but not the actual method names so let's add some console.log bases in the handle increment and handle decrement inside the shoppingcat component so this is handle increment and this is handle decrement let's check it out i clear the console and click on any one of these buttons as you can see it calls handle increment method that is created in the parent component actually click event was raised in the channel component but the corresponding method of the parent component executes in the same way if you click on the minus button you can see the handle decrement method executes this is how you handle the click event of the jail component in the parent component that means the events are originally raised in the child component and those are handled in the parent component but here the question is that how will you supply the information that means arguments to the even handler methods so in the click event of the jail component i would like to supply the arguments to the parent component method anytime when you are trying to pass event arguments you must be using error function right so make this as error function and then you can call the method instead of mentioning the method name and then you can supply essential argument values that you want for example i would like to supply the complete product object reference that is present under this dot state so i am supplying the argument of this dot state dot product to the on increment method so when the user clicks on this particular plus button first of this error function execution starts as a part of that we are calling the on increment method of the parent and supplying the current product information as argument to that particular method and let's remove the same in the respective shopping cat component now i am inside the shopping cat component that is a parent component let me remove the product and display the same for our information in the console.log let's repeat the same for remaining other method that is handle decrement so switch to product component make this click event as error function and call the handle decrement method and then supply this dot state dot product as argument means you are supplying the current product object as argument to the respective method and then switch to shopping cat component let's receive the same product and display the same in the console.log so overall the kick event raises in the chain component that is product component you are calling the method of the parent and supplying the current product as argument to the same so let's execute this i am clearing the console and click on plus button for any component so i click on plus button here as you can see it invokes handle increment and has reference to the product that is the product which you click here in the same way if you click on minus button for the same it calls handle decrement and has referenced of the same product so you can access the same values that is id product name price and quantity and even if you want you can update the same let's write i wish to really update the quantity value so by default it is zero let's either increment or decrement it based on the button now switch to the shoppingcat component.jsx file how will you update the quantity if you write like dot quantity equal to quantity plus 1 it doesn't work really because react will not reenter the information when you directly assign the value into a specific property or specific array check the output i click on the plus button here nothing increments but internally the property value is being updated every time but it doesn't reflect in the real output it's because every time when you are expecting some change in the output that means expecting some change in the state you must use set state method you should not update the value of any property directly in the state how can you do that first we have to identify the reference of this product object in the products array which you got here in order to do so let's use index of method of the javascript arrays before then that let's clone the products array into a local variable for example all products equal to just clone everything of this dot state dot products in ecmascript 2015 the spread operator that is three dots gets all elements from the particular array so all the elements of this particular array will be copied into a new array into this particular reference variable that means we have a clone of this array into this new variable so from this clone you have to search for a specific product by using index of method index of the product parameter that you receive from the child component so this method gives you the actual index of this specific product and let's print the same let's check the output as of now i clear the browser console and click on any one plus button here as you can see it displays the index that is true that means we have clicked on the product at index number two so we have the index with us based on the index you can access the specific element directly from the array right that means from this array we can access the index number 2 that is samsung qled tv so the same array has been cloned into all products right so you can access all products of index so overall you are fetching the product object based on the index let's check the output as of now i clear the browser console and click on the plus button for xbox as you can see you can access the product object based on the index now in this object you have to apply the quantity value so you should write like all products of index dot quantity plus plus because you want to increment the value and this particular quantity has been updated in the clone of the array but not in the original array the state still contains the old information before updating so how will you update these changes into the actual state that should be done only by using set state method of the component so this dot set state and which property wish to update products and what is the new information that is all products and notice now this all products array contains the updated quantity which is incremented here so the complete array will be overwritten in this place of products property so that react compares the actual value which is really updated and updates the same exactly in the browser dom instead of rerender the same so if you think the complete product details will be updated in the browser dom it is wrong it really compares which value really updated only that specific information will be reflected in the respect to browser dom so as you can see switch to elements in the developer tools and right click on your plus button and say inspect now you are pointing to plus button of the particular element and try to click on the plus button there as you can see it really updates only the number two instead of one i keep clicking the plus button every time it updates only span so it highlights only the span tag but not any other html tag so that's what react will do it updates only the specific html tag instead of reentering the complete browser dom anyways here you can see the change in the quantity so overall what are you trying to do is that first user clicks on the button of the channel that is plus button for example then you are invoking the on increment method of the parent and supplying the current product as argument for the same now in the shopping cat component that is parent component the handle increment method executes and you receive the product object as argument which is supplied by the child then you clone the complete products array into all products variable then get the index of the supplied product argument example you got the index number two and update the value directly in that quantity property and overwrite the changes in the state by using only set state method this is how you update the state let's clean up the code that is remove the console.log statements now let us repeat the same logic for the handle decrement method also here the logic remains same only the difference is instead of you write plus plus you are writing minus minus so i just copy and pasted the same code instead of plus plus i am writing minus minus so let's reexecute the same now you can use plus button to increase the value of the quantity and you can use minus button for decreasing the quantity but there is a small issue here if you keep clicking minus button it becomes unlimited it goes negative value as well and another issue is that if you keep clicking plus button there is no upper limit so it increments up to unlimited number suppose you want to keep upper limit for the quantity increment suppose you wish it should be maximum 10 so how will you keep validation that is minimum 0 and maximum 10 so before increasing or decreasing we have to check the condition if the condition is matching that means if it is between 0 to 10 then only it must be incremented or decremented respectively but what if you want to change it in future let's say the child wants to supply the minimum and maximum value and accordingly the parent should work so instead of hardcoding the minimum and maximum values in the parent component lets chill dynamically supply the same so while calling on increment method from the child component let's pass the argument value currently i am writing the code in the chain component that is product component in the click event of the plus button while calling the on increment method let's supply some argument value that is the maximum value for incrementation suppose maximum value for example 10 so that in future whatever the maximum value that child requires it can supply you can change it later for example 20 or 30. and in the similar way let's supply minimum value for decrementation let it be 0 for example so on increment has two arguments that is the reference of the current product and max value and on decrement method has two arguments one is reference of the current product and minimum value for the quantity let's receive the same in the parent component that is shopping cat component so switch to shoppingcat component here in the arguments you can receive something called max value and in the handle decrement you can receive the min value in the handle increment method before incrementation let me check if the quantity value is less than the max value then only we have to increment it and update the state otherwise you need not increment and you need not set the state so there is no need of else case whenever the quantity is less than the max value then only the quantity must be incremented and update the state similarly let me check the condition in the handle decrement method also if the current quantity of the current product is greater than the min value then only we have to decrease the value and update the state otherwise nothing need to be done so there is no else case for the same now let's check the output so i click on the plus button it keeps incrementing up to 10 but after that even though i click on plus button there is no any change in this output because we checked the condition before real incrementation and in the same way let's use the minus button so 10 becomes 9 and so on up to 0. and after 0 it should stop right but in this case it is working even for 1 but after that i cannot decrement anyways let's fix this issue of minus 1 here unwantedly i have just added equal to so it should be if quantity is greater than min value then only it must be decremented but not for equal to let's try again so i click on minus button see there is no change in the value because the minimum value is 0 here you can increment by using plus up to 10 and decrement the value and in the same way you can try updating all remaining quantity of all the products it works as expected this is how you handle the events of the channel by using parent component now i would like to create delete button for each product so if i click on the delete button for the product that product must be deleted from the list in order to do so let's display the into mark that means delete mark by using font awesome package as of now we have not yet imported font awesome package so let's install the same first open the command prompt window and locate secure and react my first app and install the package called font awesome that is by using npm install font awesome hyphen f and seo font awesome is one of the third party packages which provides plenty of icons which can be used in the applications such as error marks plus symbol and many more icons this is the official site of 1000 that is fontousam.com here you can search for icons whatever you wish for example i am just writing arrow you can see plenty of icons of arrow here some of the icons are free and some other or pro version that means requires payment anyways let's use the free icons for timing and when you install this particular package it provides 1000.css file on your node underscore modules folder let's import the same so i am writing the code in the index.js file after importing your bootstrap import 4000 package and under css folder import font thousand dot css file so now you have successfully integrated font awesome in your application you are ready to use any icon from the same now go to the channel component that is product component at the top of the card that means here i would like to display the delete button towards the right that means i would like to show a delete button at the top right corner of the card so after printing id of the product let's add a span tag and that must be present at the right side so pull right and use the font also so by using font awesome you're displaying the into mark that is fe hyphen times so this displays the interval that that means delete button at the top right corner of the each product let's apply hand symbol that means hand icon when you hover on the same so switch to the css file that is index.css let's add a custom class that is hand hyphen icon with cursor pointer it is the user defined css class and already we have imported index.css file in the index.js file so straight away we can use that class in the product.jsx file so in the span tag here let's add the class name that is hand hyphen icon so that you can see hand icon when you hover on the same now when the user clicks this i would like to execute some method in the parent component just like what we have done in case of press and minus buttons so go to the parent component that is shopping cat component after completion of the handle increment method let's add one more method that is handle delete and let us receive the product object as argument and let's get the index of the product just like above based on the index we have to delete the corresponding product isn't it so all products dot supplies of index comma 1 that means starting from the specified index one element will be removed in the all products array now we have to reflect the same changes in the state dot products that is done by using set state method right so this is the statement for the same if you think like you want to remove the element directly in the state dot products it never happens you need to clone the array into all products variable and you need to remove the element in the all products and overwrite the same changes into the state dot products that is by using set state method this is how it works now let us call this particular method in the click event of the child before than that the parent has to supply this particular method reference while invoking the child here so while invoking the product component you need to supply the reference of the handle delete as for example on delete here handle delete is the actual method name and on delete is just reference name for the same which is represented in the props you can use the same name in both cases or you can use different name for avoiding the confusion so in the chilled component props you can see the properties such as on increment on decrement and on delete but actual method names are handle increment handle decrement and handle delete respectively and now you can use this property in the child component now switch to the channel component that is product component near the span tag let's apply the on click event so when the user clicks on this delete button have an error function and there you can invoke the props dot on delete and supply essential argument of product that is this dot state dot product so when the user clicks on this particular span tag you are calling on delete method that is on handle delete method in the parent component and supply in the current product as argument which will be eventually deleted in the parent component itself so let's run this so if you click on the plus button over here you can see the same has been deleted you can click any delete button of all the products so whichever the delete button you click the same is being removed from the parent component how does it work so first user clicks on the delete button in the channel component and you are calling the on delete method of the parent and supplying the current product so in the parent component in the handle delete method you are receiving the currently clicked selected product and removing the same element based on the index in the all products and overwriting the updated all products in the state dot products then react compares the previous state and this state and identifies the changes it identifies that the specific object has been deleted from the array and accordingly it will reexecute the map method so that the corresponding element will be removed from the array this is how when you click on delete button the corresponding element is being removed from the dom but suppose you would like to show a confirmation dialog box before deleting how can you do that so in the handle data method in the parent component that is shoppingcat component let's add something called conform with message or reshore to delete that is exactly window.confirm so if the user clicks on the ok button then this confirm method returns true then you are removing the element and updating the state in the current component otherwise you are not deleting anything so there is no need of any else case let's reverify the same so i click on delete button for the first one and it is asking me our show to delete if i click on ok then only it removes but next time i click on cancel it's not removing anything it remains same as it is this is how you delete the elements of the jail components from the parent component react is responsible to render the components and manage the component at run time that means react is responsible to completely manage the life cycle of the components during the execution of the components react executes some predefined methods internally at different phases and those are called as life cycle phases totally every react component contains four phases that is mounting phase updating phase unmounting phase and error handling phase at each phase of the component different methods will be executed the developer can use those methods in order to manage the component and load the information from the server and also make the component rerender or avoid reentering the component wherever it is not necessary so it is necessary for the developer to know what methods will be executed at which phase and what kind of code can be written at each method mounting phase is the phase where the instance of the component is being created and rendered for the first time into the dom for example you have a component called shoppingcat component when you execute that particular shopping cat component the shopping cat component will be mounted that means rendered on the browser during that process the mounting phase will be executed as a part of that three methods will be executed of your component class that is constructor render component did mount execute in the same order as they mentioned every time when the property value or state is changed the updating phase will trigger out in this case render component did update will be executed and at the time of leaving or closing the application the unmounting phase will be executed generally this happens only when the routing is enabled and the user navigates to another route from the current route or it also executes whenever the parent component removes the instance of child component and finally the error handling phase will be executed whenever react identifies an error during the rendering or life cycle method or constructor of the child component for example we have a shopping cat component which contains children of product components while executing any one of the product component it has an error so that leads to error handling phase of the shopping cat component or during the render method of the shopping cart component itself there is an error at that moment also error handling phase of the shopping cat component occurs in this phase only one method that is component date cache method executes if you can check react docs there are some additional methods that you can identify for example get derived state from props etcetera but those methods are noted as extremely rarely user methods by react docs itself here we are focusing on only the methods that are really useful and frequently used in the real world applications so 90 percent of the times we use these methods in the real world applications so how and when we use these respective methods at different phases we will understand about each phase by lecture will lecture in this section first let me demonstrate mounting phase to you as a part of the mounting phase the constructor render and component did mount methods will be executed in the same sequence the constructor is suitable for initialization of the state and binding the event handler methods but what you should not do in the constructor is that you should not make http requests or fetch the data from database or something in the render method you should not update any changes to the props or state that means you should not use set state or anything like that in the render method but the render method should return the ui as html element and the component did mount method executes after execution of the constructor render and the complete lifecycle of all the children let me demonstrate all these three practically so we are taking the example of shopping cat component and the product component here shopping cat component is the parent in which one or more product component instances are displayed like this so this is your shopping cart component and each box that is each product is an instance of product component we have six products in the array so six instance of product component has been rendered so in this context inside the shopping cat component and trying to add something called constructor by definition the constructor executes as soon as an object is created for this particular class that is the definition of object oriented programming in other languages but being in react the constructor will be converted as a function so there is no object for this class actually to be frank the constructor executes when the component is mounted that means execution started the major thing that you will do with the constructor is initialization of the state in all the previous lectures we are directly initializing the state property by assigning an object literal into the state property that is one way the alternative way for the same is that you can initialize the same state in the constructor by using this dot state equal to something so you can do either of these either outside the constructor state equal to object or in the constructor this dot state equal to object and moreover the constructor is the only one place where you can directly initialize the state by writing this third state equal to in nowhere else that means in nowhere other methods you should assign the values into the state directly by ascending that means if you try to assign this dot state equal something in other methods such as render it is not valid in all the methods except constructor you must use this dot set state in order to make updates in the state so if you run this application now in the browser console we are getting errors that is must call superconstructor in the databoard class before accessing this or writtening from their order constructor which means that you must call the superclass constructor inside your derived class constructor that is shoppingcat componentconstructor so you should write like so for so by this statement you are calling the superclass constructor what is the superclass here the component class so from this statement you are calling the super class constructor that is the constructor of the component class that is the parent class now that error is cleared out and moreover in this case the problem is that in case if someone has supplied some props for this component that you will miss out because the super class constructor expects a parameter called props that must be supplied from the statement so how will you receive the props which are supplied by some other components while invoking the shoppingcat component for example we are invoking the shoppingcat component from app.jsxfile so in the app.jsx file suppose you supply some value such as x equal to 10 so this x value will be received into the constructor so in the shopping cat component the constructor by default receives those props and you can initialize the same in your current working component by passing the same to the parent class constructor so first you are receiving all the props that are supplied from your parent component that is app component and you are passing the same to the parent class constructor so these properties will be initialized in the props property of the current working class so this is the common code that you will write in every component so it's a threestep process first the parent component supplies one or more props that will be received into the constructor first and then you are repassing the same to the parent class constructor those will be initialized in the current working component then in that way the props is really available in your component so anytime when you're creating the constructor in your component class don't forget to call the parent class constructor by using super and also supply the props for the same so what code should not be written in the constructor is that you should never make http requests inside the constructor the same can be made in the component did mount method because that executes after completion of all the component lifecycle of all the child components that are rendered inside the render method so as a sequence of execution first the constructor of your component executes and then your render method of your component executes as a part of that in case if you invoke any other chain components for example we are invoking some x widget component the complete lifecycle of x widget component executes starting from constructor render and the component read mount and after completion of the lifecycle of x widget component and other child components the component did mount method of your shopping cart component executes so let me add it after the render method i am trying to add a method called component read mount so this method executes after the constructor and render method of the current working component including the lifecycle of all the child components if any used in the render method so this method is a perfect time to make any http requests to fetch data from database or any other data source but as of this lecture we are not making any http requests to fetch data from data source we will do that later in the further sections but for a timing let me add console.log messages for each place that means in the constructor first so console.log of constructor of shopping cache and i am adding a console.log message in the render method and also after that i am trying to add a console.log message in the componentdidmount method of the same component so let us see the output to identify the sequence of execution as you can see first it has begin with constructor of the shopping cart component then render method of the shopping cat all the jail components have been executed that means the complete lifecycle of jail components execute here and after that the component did mount method of shopping cat component executes this is how do you understand the mounting phase of your lifecycle of react component in the next lecture we will demonstrate updating phase let's focus on updating phase whenever the props or state is changed by the developer the updating phase executes the props out supplied from the parent component and the state is the one of the same component itself so whenever either of these props or state has been changed at runtime the updating phase will be triggered out as a part of that the render and component did update methods we will execute in the same sequence first the render method executes which returns a html element and that is treated as a react element and that is treated as a virtual dom then react compares the new virtual dom with old virtual dom which was already rendered and identifies the differences or changes if any changes are found the corresponding changes will be updated in the browser dom in this case this render method is the same which was already written in your component but let me add the component did update method so inside your shoppingcat component already we have the constructor let me minimize it for clarity and then we have render method and then we have componentdidmount method and after that let me add component did update method and let's have a console.log message and update ue uppercase let's test it as you can see first constructor then render method and lifecycle of all the children and after that component date mode method executes notice there is no component date update method executes here so whenever there is some change in the props or state then only the update phase will be executed right so for initial render component update method will not be executed for example let me click on this plus button to increase the quantity so in this case only it has executed the render method the lifecycle of all the children and then the component date update method executes let me clear the browser console and try again so i click on the plus button the render method of the shoppingcat component lifecycle of all the children and then component date upgrade method executes so the component date update method indicates that all the children have been loaded successfully in the current working component and in this component rewrite method you have two automatic arguments that is pre props and prime state that indicates previous properties and previous state and already we have the current properties and current state if needed you can check it out that is this turnpops and this third state so totally i am printing four values through this console.log one is the message that is component read update previous props previous state that are received as automatic parameters that are supplied by react automatically and also the current working props and state of the current working component that is shopping cat component itself so let's run this of course for initial render component did update method will not execute right so let me clear the browser console and click on the plus button for any one component for example it supplies so as a result the shoppingcat component went to update phase because there is some change in the props that means the products array have been updated by the parent component so in this case the render method executes and the lifecycle of all the shell components execute we have six components that's why it shows this six times and then only one time component did update executes for the shopping cart component and this is the previous props and this is the previous trade and this is your this dot props that means the current props and this is the current state and what has been really changed is that if you can verify there is no difference between the previous props and the current props both are x equal to 10 but there is some change in the state so in this in the first case you can notice the products with all quantity as 0 0 for all the products and in the current state expand you can see the quantity has been changed as one for samsung queue led tv so this is how you identify the changes or differences between the previous props and current props or previous state to current state sometimes you will have a logic that is whenever there is some change in the particular property or particular element in the state or props you want to make http request to fetch additional data from the server or make any other changes in the database so in that case you are free to perform any kind of database operations by making http requests in the component did update method but always make sure you make http calls conditionally but not unconditionally in this method that means we have to check for example if previous props dot x equal to current props x value then i don't want to make any http call if it is not equal to the x value then i would like to make http call so i should make http call only when this condition is true but not unconditionally in case if i make http call unconditionally without checking any condition it leads to performance issue because this method will be executed for each change in the state or crops in a realworld application the state will be updated many times from various buttons or various clicks of the user for example your real world application may consist of various buttons such as filtering sorting delete new etc for each button click the state may be updated and each time the state is updated the component goes to updating phase and for each time this component did update method executes right so if you make http call unconditionally for each updating phase a http request will be sent to the server so it will be a performance issue so that is the reason it is not advisable to make http calls unconditionally in this method but if you have a proper reason or logic you can check your condition if the specific condition is true for example if the user has entered this particular input value then only you will make http call in this component read update method otherwise it is better to avoid such http call if you don't require so so anyways currently as per our application we don't require an http call in this case so this is how do you understand the updating phase of the lifecycle of the component now let's focus on unmounting phase in this phase mainly one method will be executed that is component will unmount this phase will be occurred before leaving or deleting the current instance of the component generally this occurs when the user navigates to another route in case if routing is enabled or when the parent component deletes the current instance of the current working child component so in either of these cases the component will amount will be executed and you will use this component will amount method in order to unsubscribe that means cancel the http requests if any so overall you will place your cleanup code to cancel the http requests in this method let me demonstrate this so presently this condition is not required for us let me comment this out and let me add the message called componented update for shopping catch that is in the component update method so this particular component will unmount method will execute before deleting the current instance of the component that is shoppingcat component in this method let me add console.log message component will amount for shopping cat so let's run this when the page is refreshed that is called mounting phase in that case the constructor render the channel component lifecycle and component did mod method execute after that whenever some state of props has been changed for example i click on plus button the render method the lifecycle of all the child components and then component data update methods execute after that when the user navigates to another route for example if the routing is enabled the user clicks on another hyperlink in the navigation bar in that case component will unmount method will be executed for the shopping cart but as of this stage we have not enabled routing in this application right so that is the reason it doesn't trigger component will unmount method but let me demonstrate the same for product component so let's copy the same method into product component so in the product component after the render method i am pasting the same and let me make this as component will amount for product and let's run this and let's clear the browser console now let's delete any one child component instance for example i click on close button or delete button for the sony camera and i say yes as you can see the component will unmount method has been executed for the product component because that specific instance of the product component has been cleared out and after that update phase has been executed for the shopping cat component so it doesn't trigger component will unmount method of the shoppingcat component it executes only when the routing has been changed or the component has been removed by the parent that is app.jsx file this is how do you understand unmounting phase what kind of code will you write in this component will unmount method you can write some cleanup code to cancel http requests if any this is how you understand unmount phase in the component life cycle in case of nested components how does react manages the lifecycle of parent and child components that means will it perform the complete lifecycle of parent component first and then child component next or first child component and then parent component actually you are rendering the child components through render method of the parent component right so every time the render method is invoked the chill components lifecycle will be performed and after that it returns back to the parent component life cycle to understand this process clearly let me demonstrate the life cycle of the parent component that is shopping cat component and the chill component that is product component so let's back to the code in the shopping cart component let me comment out all these products let's make it single product to avoid the confusion so we have only one product that is iphone and we have considered log messages in all over all the methods that is in the constructor of the shopping cat and the render method of the shopping cart component and also in the component date mount method of the shopping cart component and the component did update method of the shopping cart component and component will unmount method of the shopping cart component and these are even handler methods we are not focusing on them and now switching to product component let me add those lifecycle methods in the product component too so in the product component let's add the constructor and the constructor receives the props as argument which are supplied by the parent component and you must repass the same to the parent class that is the componentbased class by using super keyword so this will reset or overwrite the props of the current working component and after that you can set the state by writing this dot state so this.state is equal to the state object that you have written already and let me add the console.log message and then another console.log message inside the render method and after that adding component did mount method and also component will unmount method all right so these are all the methods that are added in the product component so we have complete lifecycle methods of parent component that is shoppingcat component as well as in the channel component that is product component let's test it so when you run this application for the first time by default it is in the mounting phase as a part of the mounting phase it begins with the lifecycle of the parent component that is a shopping cat first the constructor of the shopping cart component then render method of the shopping cart and the constructor of the product render method of the product component date mod method of the product so these three lines indicate the mounting phase of the chain component which executes after render method of the parent component and after completion of the mounting phase of the chain component component did mount method executes for the parent component so this is the total mounting phase includes parent and shield now when you click on any state update for example plus or minus oops let me clear the browser console let's click on plus button now it went to update phase for both components first it begins with the update phase of the parent component because the data of the parent component has been changed first it begins with the render method of the shopping cart component as a part of that it calls the update phase of the chill component that is product component so what methods must be executed for the jail component update phase that is render method and component data update method so it executes a complete update phase of the jail component that includes render and componented update method of the child component and after that it executes the component deduplic method of the parent component and now let me clear the browser console let me close or delete the child component by clicking on that close button now parent component went to update phase and jail component went to unmounting phase so as a part of the update phase of the parent component the render method and at last component did upgrade method executes for the parent component and in between that is exactly after the render method of the parent component the chill component went to unmounting phase so as a part of that the component will unmount method has been executed as a part of unmounting phase of the child component but still we have not seen unmounting phase of the parent component that is shopping cat component because it has to be unwanted from the parent who invokes the shopping cart component that is from app.jsx but to demonstrate this we really require routing we have not yet added routing in our application as of now so let's ignore it this is how do you understand parentchild component life cycle in react so overall the conclusion is that each time the child component phase will be executed after the render method of the parent component this is how do you understand the complete life cycle of parent and jail components in react whenever while executing a component or rendering a component or execution of any lifecycle method or while execution of any constructor of nhl component in all these cases if any exception or runtime error is raised in that case the component did catch method automatically gets executed and that comes under error handling phase so suppose you have a component and while executing that component that is in the render phase or lifecycle method or constructor of hl component then this component did catch method automatically executes which receives two parameters automatically that is error and info the first parameter that is error represents the actual error message which causes the error and the second one info contains the additional information about the particular error such as component stack that means the list of methods that causes that particular error see in case if there is no error this particular method will not execute so i am adding that method in the shoppingcat component that is after component will unmount method i am adding a method called componentdid catch and it contains two arguments that is error and info these will be passed by react automatically and let me print that console.log message error comma info so when you run this application as of now there is no any error so that method did not execute as you can see there is no componented catch method executes for the shopping cart but alternatively let's make some changes to make it error suppose in the constructor of the channel component that is a product component let's make some changes for example instead of this props dot product i'm just writing prouct where d is missing so this causes error while executing the child component that is product component which is being invoked as a part of the shopping cat component you can add a statement to store that information in the local storage so local storage dot last error equal to that error and on the next line we want something called info here backslash n represents the next line character so we are storing error and info details in the local storage dot last error property which will be available in the same browser so like this you can write any code in order to log that information somewhere in the memory and we can convert the same into json format so that it will show up the details correctly so let me add something called json.stringify of info sorry the message must be component did catch but not component unmount let's execute this as you can see whenever react identifies some error while executing the constructor of the product it raises an exception and the component did catch method executes for the parent component that is shopping cat component and this is the information of the first parameter that is error that means the complete details about the error and after that the second argument that is info is the component stack that is a list of components that arises or causes or catches the exception actually that error was originally raised in the product component but has been accelerated to shopping cat component and the same has been accelerated to app.jsx file and you are going to store the information of error and info inside the local storage for future reference purpose so if you can check application and switch to local storage you can see the details of last error along with the corresponding component stack like this you can use your component did cache method for logging the errors somewhere in the memory such as local storage this is all how to use component cache method in your application and before the next lecture i will be removing or commenting these console.log messages in order to keep the browser console clean to make it clear to understand further lectures here my goal is that to create a login form that means overall i would like to demonstrate how to work with the forms in react a form is meant for collecting information from the user which includes form elements such as text box checkbox ready button drop down list etc and in react we can use all html tags to create the form but here the important point to understand is how will you bind the textbox values to the properties of the component state let's try let me create a new component called login component so right click on src folder login.jsx and we have a component called login import react and component from react module and your render method renders something such as a new tag with login and now i would like to render this particular login from the app.jsx file instead of rendering shoppingcat component don't worry we will invoke the customers list and shoppingcat component later when we go to the routing section so for time being after the navbar i would like to render login which can be imported from login.jsx file so import login from login.jsx and by the way we have commented out all the console.log messages in all the lifecycle methods that are demonstrated in the previous section okay now switch to login.jsx file here i would like to use html and bootstrap to create the login form i want a bootstrap box with nine columns and a heading called login with margin top as well as padding and border bottom which is rendered like this and below the heading i would like to place the email and password text boxes so update react.component as just component as we have imported component earlier and also in app.jsx file comment out this shoppingcat component import statement as we don't require it for time being and now in the login.jsx file create a new tag with form group class as suggested by bootstrap a bootstrap form group represents a set of label and a text box that represents a specific field and you would like to place a label that horizontally occupies four columns in a row that is email and you wish to create actual text box by using input typing called text and apply the css class name as form control and input is unveiled tag for clarity let me add comment where email starts and comments look like this in react where it is the javascript comment along with expression and here email ends so this is your email and similarly let's apply the same for password and input type equal to password and the label is password so when you run this you can see email and password text boxes in the form but here the question is how will you bind these text box values to the respective state properties first let us create necessary state properties to store the email and password values there are two ways to initialize the state right one is that you can directly write like state equal to object as we did earlier the another recommended way is that initialize the state in the constructor but in case of constructor you must call the parent class constructor as a first statement by using super keyword this will receive the props which are supplied by the react and pass the same to the parent class that is component class so that overall the properties get initialized in the current working class object that is login so here you should write like this dot state is equal to your state object and here you require two properties called email and password to store or represent the actual value of the text boxes and i'm initializing them with empty codes that is empty string now i would like to bind these particular values into the corresponding text box so let us write value actually in the value whatever the value that you give that gets appear in the text box for example if you try giving abc the same value as disappears in the corresponding text box but alternatively you want to fetch the value from the state property isn't it so that is the reason you have to bind it through a react expression and ascend the value of this dot state dot value that is this.state.email so it reads up the value of the email from the state and assign the same into the corresponding value property of the text box similarly let's assign the same into value of the password text box so value equal to this dot state dot password and for understanding let's initialize the email and password properties with some default values such as abc8test.com and password for example abc123 so if we can see these values in the browser that means it is working correctly as you can see the state values have been displayed in the text box because we have assigned the values of the state into the value property of the text box so this is how will you bind the text box values from the state while working with the react form but in the browser console it shows a warning but it is not an error that is failed prop type that is you provided a value prop to your form field without on change handler that means it is trying to explain that in order to enable twoway binding we have to add on change event in the input field will solve it in the next lecture by enabling two way binding the problem with react is it supports only one way binding but doesn't support twoway binding directly that means you can actually bind the state into the text box but not in reverse by default so there is no outofbox supports that automatically retrieves the value of the text box into the state so only it is one way binding wherever or whenever you update the value of the stage it gets automatically updated into the text box for example if you try using set state and update the value of email automatically the updated value gets reflected in the text box but not reverse so rewards must be done manually by identifying the changes in the text box by using on change event and update the state manually by calling set state method in that way the reactor developer can achieve the twoway binding even though twoway binding is not supported out of the box let's see how to do it so in the input tag that is the email text box you need to add a property called onchange this event executes whenever change event occurs in the text box that means as soon as the value has been changed in the text box so in this case either you can write an error function directly inside the onchange or you can call a method of the component in this case i prefer using an error function because we have only one statement execute so we don't require a separate method for that so i'm creating an error function and in order to get the latest value of the text box we use the synthetic event that is event parameter that is supplied by the browser automatically for all the event handlers and access the even dot target dot value so here event is the synthetic parameter that is supplied by browser automatically that contains additional details about the current working event for more information you can refer to any javascript tutorial that even synthetic parameter is supplied for all the even handlers by default so based on that synthetic event your accessing target.value that automatically represents the latest updated value of the textbox so you need to update the same to the state property that is email property here but can we ascend the value directly by using state dot email equal to something no it is not recommended right except in the constructor in nowhere else you should assign the value directly into the state property but alternatively always we have to use set state method in order to update the value into the state so here you are updating the email property as even dot targeted value so that the updated value of the text box gets updated in the state dot email property and let me close the parenthesis here and let me close under brace yes so this must work let's check it as of now whenever you update the value of the text box automatically this particular latest value whatever you type here will be automatically updated into the email property of the state in order to ensure the same in the same error function i am writing another statement that is console.log of this dot state dot email so as you can check here as soon as you type something here for example i am trying to type x widget and click the cursor outside so you can see the latest value has been updated into the email property and notice that setstate method is asynchronous so we are not sure that the next statement that is console.log statement will execute only after updating the state since the set state method is asynchronous so let's clear the browser console and let's try to type something for example abcd you are not seeing the lastly printed message that is avcd here because set state method is by default asynchronous you don't need to really worry about this it's a default behavior in react but still if you have a doubt in that you can explicitly add a button and explicitly identify the value of state dot email so let's remove the console.log statement from this error function and below the text box let me add a button with class name btn and b10 primary as for bootstrap and we have something called login button and when the user clicks on this login button we are calling a method called on loginclick so when the user clicks on the login button we are executing a method called on login click that must be present in the same component this is end of for render method so let me add that on loginclick method that is an error function this executes when the user clicks on login and here we are printing the latest value of the state that is this dot state and now have a look in the output so suppose i update something in the email let's say xyz at something.com as soon as we have updated the value of the textbox this particular value gets updated or refreshed in the corresponding state dot email property because of on change event it's because we are using set state method in the on change event of the email text box but we have not added on change event for the second text box that is password so password will not be updated when the text box is changed let's clear the browser console and click on the login button as you can see email has been changed but password has not updated this value abc123 has been initialized in the beginning that is in the constructor itself so now we are showed that because of onchange event in the textbox we are able to get the latest value of the text box into the state so let's repeat the same thing that is on change event for the password text box also let's copy paste on change into password text box and simply update the property name of the state that is password so let's verify this output now that error has been cleared out of course so try to update something for example squat at testo.com and password is squad123 so we have updated both values and we are sure that as soon as you modify something in the textbox that particular value gets updated into the corresponding state property whereas the first textbox value into state dot email and second textbox value into state.password this update will not wait for login button click that means even though we don't click on the button the values gets updated into the state property all the time because we have updated the state dot property value in the on change event but not in the click event so we are using the click event only for getting us know that the value has been updated so let's click on login button now you can see the latest value of the text boxes are visible in the state that is scott test.com and password is called one two three this is how you manually create the twoway binding in react whereas if you compare the same thing in angular kind of frameworks angular by default supports twoway binding whereas react by default supports oneway binding that is state to form element but not reverse where react developer manually should update the state through on change event of the form element so we have to repeat this on change event for each and every form element not only for text boxes but also for check box radio button or any other form element but in case if you have additional logic to perform in the onchain event alternatively you can make this as a separate method in the component and in that method you can write the same statement that is this third state along with your additional logic to execute for example every time when the text box value has been changed you want to make a http request to server so you can do that by calling another method for the onchain event this is how you create twoway binding in react suppose the requirement is that when the user clicks this login button you want to check whether the email and password is correct and show the feedback to the user saying that either successful login or invalid login so when the user clicks on the submit button you can access the updated values of the text box that are entered by user by using this dot state dot email and this dot stated password while writing the code in the button you need not worry how to get the values from the actual text boxes because in the on change event of the text box we are already updating the state so that you can access the latest value of the text box in the button click method itself so in the login.jsx file for the due tag let me add text write to display the button right side and already we have on click event for the button that calls on loginclick method that is written here and also in the state let me make the email and password as empty string because we don't want to see the default values in the text boxes of login form and now in the login click method let's write your logic for example if this dot state dot email is equal to some dummy email for example admin gmail.com or admin test.com and password is admin 123 for example of course this is a dummy example we are not connecting to any database in this application as of now we will learn to make http requests in the further sections but for time being we are checking some dumb email and dummy password so if both email and password are matching then we have to show a success message to the user otherwise some error messages to user in order to show a message to user what we have to do since we cannot show directly on the web page we have to create a property called messages for example and update your message into that message property and then render the message property somewhere near the button let's try let me go to the constructor and in the state of the component let me add a property called message by default it is empty string that is empty codes and after that let me update that message property after clicking on the button so in case of success message ascends to some value for example successfully logged in and i wish the same should be in a green color so instead of a plain string let me add a span with the class name that is text to success that means green color as per bootstrap and in case of error let me update the message as invalid login and that should be appear in red color that means as per bootstrap recommendation it is text to danger class so at the time of application launching by default message is empty string user type something in the text box and because of onchange the value gets updated in the corresponding property of the state that is either into email or password depending on the text box so user updates the email and that gets updated in the state dot email user type something in the password that gets updated in the password property of the state and finally he clicks on the button it calls on loginclick method by the time already state.email and stated password contains the updated values of the text box that are entered by user so directly you can access the updated values of the text box by using this dot state dot email and this third stated password then you are checking them with some dummy email and password and if the condition is true you are assigning successful login span tag into message property of the state otherwise invalid login sorry i must be using set state method right so set state message property like this and similarly in the below statement also this dot set state of the message property that is sends to the span tag so this is the correct code let's check this out oops there is an error invalid dom property class so for the due tag we are using class instead of class name it must be class name right and also it is recommended to use triple equal to instead of double equal to for comparison of course it is not must to use but react by default shows a warning that recommends you to use triple equal to i think you know that triple equal to checks the value as well as type whereas double equal to checks only the value but not the type here email and password are by default string type and the value that you mentioned in codes is also string type so triple equal to checks both type and value at both operands anyways let's check the output finally suppose i am typing some wrong email and wrong password click on login as you can see the latest values are visible in the console that is updated from the text boxes but we have to render the message then only it's visible to the user right so near the button i am rendering the message by using this dot state dot message and i would like to show this message before the button isn't it so let me place it before the button so we are rendering the message before the button and for the button there must be a margin for example m1 let's recheck it again i am trying to type some wrong email address and wrong password click on login so it shows correct message that is invalid login and after that trying to type some correct email address that is admin at test.com and password is admin 123 click on login as you can see it shows successful messages here the message property holds a reference to the react element that represents the span tag so as you can see the type is a span this is how you create simple form in react ajax is a technique to send http request in background and get the response from the server in background without refreshing the web page first user performs some activity such as clicking the button then browser sends a background http request to server the server receive the request process the request such as connecting to database and send the response back to the browser so the browser executes some code or function in the client side this is how a web page interacts with the server in these days to create the server side program you can use any server technology such as asp.net mvc or asp.net web api or node.js or python or java or any other equivalent but in this course instead of connecting to real database we are using a third party package called json server which makes a json file as a database here json server is extremely helpful that act as a fake rest api server which receive the request process the request and send the response back to the browser in fact json server helps ui developers to quickly interact with the server without needing to create separate server side program either by using node.js or java or python let me demonstrate json server open the command prompt window and install a package called json server and install it globally by using hyphen g after that you need to create a folder to place your database file here the json file acts as a database we have a folder called sequel and data and in this folder let me create a json file that acts as a database so switch back to visual studio code go to file menu new file and save the file and in the save as dialog box select the folder sql and data and specify the file name as react iphone db.json so this file acts as a database for you as per the rules of json server package you must have a json object that contains your array that acts as a database table for example i would like to serve a set of products so the array name is products and it is an array which contains a set of products which includes id product name price and quantity similarly you can add any number of products but already in the shopping cat component we have a set of products right so i am copying and pasting the same array into this particular json file and we have to add double quotes for each property name also like this so this particular file that is react db.json file acts as a database by json server package so switch back to the command prompt window and enter the command json hyphen server and what is your name of the database file that is react hyphen db.json file and in order to keep the file watch for file changes add the option hyphen iphone watch and also specify the port number as wish for example hyphen fn port equal to 5000 so at port number 5000 json server has been started and you must be able to see this url called localhost 5000 products if you copy paste this particular url in the browser you must be able to see the list of products that are present in the json file so we have to make the same kind of request asynchronously through code in order to make http request from the react you can use either javascript fetch api and another thirdparty package called xcos but in this course fetch api is being used fetch api is one of the standardized api in javascript to make http requests it can be used as alternative to xml http request which was used earlier for more information about fetch api you can use the website called javascript dot info so instead of having the list of products directly initialized on the shopping cart component let's make a request to the json server and get the list of products from that so let me make this products array as empty and as of now it will not display any list of products so let me switch to shoppingcat component in app.jsx file so in the app.jsx file instead of rendering login component let's render shoppingcat component which is imported from the shoppingcat file so now it renders shoppingcat component as you can see here and now because the array is empty it shows nothing in the list of products so i would like to fetch the same data from the json server it is not recommended to make http requests in the constructor of the component but it is always advisable to make http requests in the component did mount method so go to the component did mount method of the shoppingcat component you can make a http request by using fetch and you can specify the url to which you want to make request that is as shown in the command prompt it is http localhost 5000 and products so localhost 5000 slash products for this url you are making a get request yes by default it makes a get request optionally you can specify the request type as get request by writing method equal to get and by default this switch method returns a javascript promise and you can receive the same into a variable based on which you can subscribe to promise and you can pass an error function as soon as the response is restored from this particular url this particular error function will be executed where the actual response from the server will be received as a parameter in this particular error function so let me show the same response in the console here the method called then is used to subscribe to the promise that means as soon as the promise is resolved it is ready to call this particular error function which is supplied here and the actual response value will be received into this parameter that parameter name can be anything and then you are displaying the same response in the console.log now let me show the same every time when you run this application the browser makes a http request to the particular products so i just refresh the page apart from all other requests as you can see it makes a request to products so the full url is http localhost 5000 slash products and we made get request and the response status code is 200 which indicates that successful response and if you click on response tab you can see the actual response received from the server so i would like to convert the same response into object array format from json and assign the same into products array see by default it is in json format we have to convert the same into products array to convert the same into json format we can call a method called json and it returns another promise and let us subscribe to the same promise by using then so this particular error function will be executed as soon as the response has been converted from json format into javascript array so this error function will be executed after converting the json into object array and this error function receives the list of products as an area of objects in javascript so let me print the same in the console.log so console.log of products as you can see after receiving the response from the server like this the same has been converted into object array format from json and the same is visible in the console.log so the one what you're going to see here is that javascript array now i would like to finally assign this into this dot state dot products and how will you update the state so this code set state i would like to update the value of products equal to the products parameter which is received from the error function for avoiding the confusion i am writing short name prods that means products here products is the name of the property of the state and pr yes is the name of the parameter that is received after converting from json into object array so as you can see here the list of products loaded from the http request have been assigned to products and as soon as you ascend something into the state the render method will be reexecuted right so at the initial run of the render method the product's array is empty so the map method doesn't execute even once but after receiving the response from the server since you are calling setstate method the component leads to update phase so during that update phase the same render method reexecutes right so at that moment the products array has been assigned to an array so that the map method executes once for each product in that way you can see the updated output here this is how to fetch the data from json server but isn't it complicated to use two promises and two subscriptions and two error functions which is nested in order to solve this problem practically javascript offers async and await concept so with async and debate the same process can be done more easily with simplified syntax async and await uses promises internally but really makes it easy to write the code for example instead of using them here you can use something called await then promise that means after resolving the promise this particular event will be satisfied and the actual response will be returned into the specified variable at the left hand side so you need to write all this then function here and moreover instead of receiving the promise into a separate variable and then writing the await on the next line you can write the same event keyword on the left hand side for the fetch so that directly you can receive the response and print the same on the next line so this particular subsequent statement after the average will be executed after receiving the response from the server so step one we are making a request by using fetch and what kind of request we are making get request after receiving the response from the server this particular event keyword receives the response and assigns the same into the variable that is present at the left hand side and after resolving that means after receiving the response only the subsequent statements in the same function will be executed meanwhile all the remaining statements will be waiting that means will be holded so let's check on the browser console it is showing an error saying that cannot use keyword called avet outside the async function it says that the event keyword can be used only inside the async function the async function says that the function must be executed asynchronously unlike regular functions so while creating the component read bound method convert the same into async function by keeping the async keyword so let's try again now you can see the response from the server so here response is by default an object that contains properties such as body ok status status text etc but we are not interested to see all these details but we want to see the actual response that is available in the response.body but the response.body is by default of readable stream type so we have to convert this readable stream into actual response that is actual object so in order to read the data from the readable stream and convert the same into object array format we have to use another promise called response.json so the response.json method reads the data from the readable stream first it gets the data in the form of json and after that the same json will be converted into a javascript array and finally it gives you the data in the form of object array in javascript that can be ascend into your regular variable for example products so to do all this process it has a promise and we have to subscribe to the same by using await so wherever you want to subscribe to a promise we can use await so the subsequent statements execute after successfully converting the response body into object array let me display the same products value in the console.log so as you can see now the data is available in the form of object array which is ready to assign into the state still the output doesn't show anything because the state dot products is still an empty array so we have to assign this array into the state by using set state method so this dot set state products is equal to the variable called prods that is products in short so once the function has been converted into async you can use the average any number of times that means you can use a weight only inside the async function the difference between async and await function is that the async function says that the function executes asynchronously that means some of these statements may wait until the promise has been completed and after completion of the promise only the subsequent methods should be executed for example by calling the fetch method we are creating a promise and after completion of the promise that means after receiving the response from the server then only the value gets ascend into the response variable and it proceed to the subsequent statements and similarly we have another form is executed by response.json function and after completion of the response body into object array format then that particular value will be assigned into the products variable which is later is being assigned into the state definitely async and await is a better way of writing the code for working with the promise by using fetch api in this lecture successfully we are asserting the data into products array so that you can see all the list of products loaded from the database server that is json server in this case let's convert this static email and password into dynamic by using json server that means i would like to make a http request in case of login click and based on the response i would like to determine whether it is successful login or invalid login so switch to app.jsx file instead of shopping cat component let's render login component and import login from login.jsx file and go to react db.json file to store the list of users let me add another array in the david.json file that is users along with email and password values for example we have two users called scott and ellen scott gmail.com and scott123 or squattest.com and every object must be having a property called id as per the recommendations of json server it must be a unique number so we have two users called scott and ellen in the user's array inside your db.json file make sure the json server is running and it shows two urls now that is localhost 5000 products and users so you need to make request to this particular url for the login form and pass the email and password as corresponding parameters then it checks for the matching values and only returns the matching objects instead of passing all as response so now switch back to the login.jsx file and i'm trying to use async and await here so that is first convert this function into async function so that you are eligible to use avet keyword here where response equal to await fetch of the url that is localhost 5000 slash users and you have to concatenate your email and password values from the state for easier concatenation let me use backtick operator in ecmascript so that you can concatenate the email and password easily that is email equal to you can interpolate the email value by using dollar and then braces and supply the actual value so in this place the actual value from the state dot email will be substituted so overall it means that the json server should return the data from the user's array only when the email is matching with the supplied value but we have to check the password also right to supply another parameter we use ampersand in the query string and supply the other parameter name that is password and fill the actual value that is state dot password so we are trying to make a get request for this particular url and it returns the corresponding user object that is matching with the specified email and password if the email and password doesn't match it returns an empty array so after receiving the response from the server the response will be ascend into the response variable and after that the subsequent statement will be continued but you need to read the response body convert the json object into a javascript object by using response.json method after successfully converting the json object into a javascript object or javascript array this particular promise will be resolved so that is the reason we are using await keyword here now the body variable represents the actual response body that is received from the server now we have to check the condition that is if some body is received that means at least one object is received then we have to say that it is successful login in case if the array is empty array it means it is invalid login for information let me print the console.log of body so that you can see the response body in the console let's run this application make sure the json server is running in background i am entering some wrong email and wrong password and click on login and this is the response body that is empty array since the email and password is invalid but it shows successfully logged in because we have to check the length of the array so if the response body length is greater than 0 that means at least one object is found in the array then only it has to say successful otherwise invalid now i am entering the wrong email address and wrong password again click on login you got the same response since the email and password doesn't match on the database.json file so this time it shows invalid login messages but next time i am trying to enter squat test.com and squat123 then click on login it says successfully logged in because this time the response body is an array with one object that is the data loaded from the database.json file so since there is at least one object the if condition is true so since the if condition is true here we are updating the successful login message in the message property so it shows the correct output here this is how to make your login form dynamic by making http request and in case if you want to retrieve the data conditionally or unconditionally we have to use get request for inserting the data into server we use post request for updation of data on the server we use put request and for deletion of the data from the server we use delete request and when we use all these types of requests that is get post put and delete that is called restful service or restful implementation that is why we call it as restful services routing is a mechanism that maps between a component and url for example it maps like whenever the url is slash dashboard i would like to open the dashboard component in this place so let us learn how to do it first switch to app.jsx file in this case i would like to make one more component that is dashboard component and the dashboard component should be opened after successful login so let me create a new file called dashboard.jsx and let's create a dashboard component and i would like to invoke this particular dashboard component in the app.jsx file so as of now instead of login i am trying to invoke the dashboard component and import dashboard from dashboard.jsx file and it's working here but the same should run through routing in order to work with the react routing we need a package called react router dom so switch to command prompt and locate your application folder that is sql and react my first app and install a package called react router dom and add hyphen f1 save so that this particular package name gets added into the package.json file after installing the package import all the components that are necessary for routing that includes login form and shopping cat and also the customers list and then import route from router package now import browser router from react router dom now instead of rendering react.fragment render something called browser router which helps us to render any one of the routes available or in other words browser router enables routing in our entire application and first you are rendering the navbar that means the navigation bar after that any one of dashboard shopping catch and customers should run right so play something called route and specify the path so you need to map for which path which component should be executed for example in case if the path is equal to slash and exactly it is equal to slash in that case you want to execute the component called login component initially the url will be slash so that automatically picks up login let's run this as you can see the empty url that is localhost to 3000 is understood as slash so this url is equivalent to slash in that case the login component executed on the screen similarly we can add necessary routes for other pages such as dashboard shopping cache and customers so in case if the url is dashboard component is dashboard component and for customers customers component that is customers list component and if the url is cat then the component should be shopping catch component the property called exact is optional but it enables us to render the component only if the url is exact match if you don't add exact for example if i remove exact for the cat for all the urls that begins with cat it renders the shopping cat component for example even if the url is cat slash something in that case also the shopping cat component will be executed to avoid such situation we use something called exact as a property for every route so let's run this so in case of slash login component in case of dashboard dashboard component and in case of cat shopping cat component and in case of customers customers component is working so based on the url changes the corresponding page or component gets opened here each component acts as a page or you can say it's a part of the page because in the whole app component we are loading a component that is any one of these components depending on the url so this is the routing that we have created which maps for each url a specific component but what if the user has entered a different url which does not exist at all for example he is typing something like this which does not exist at all in our routing configuration in that case apart from the navbar it renders nothing because this particular url doesn't match with any one of the routes that is defined in the app.jsx file so for that case you can define another component and that is called 404 page or 404 component you can really give it any name so let's create a new file that is no matchspace.jsx and let's create a component that is no match page and some text like page not found so i would like to execute this particular page whenever the user has entered a wrong url in that case go to app.jsx and specify the path as star means asterisk which matches with any other url other than the above mentioned in short asterisk indicates all so it matches with anything and for this we cannot add exact because it should match with any url not only just asterick and specify the component name as no match page which can be imported from no match page.jsx and now whenever the user has entered some wrong url something like this it automatically opens the no match page after the nav bar always nav bar is constant because we have rendered it outside the routing so always it renders nav navbar unconditionally and any one of the routes execute based on the url but there is a practical problem here suppose if the url is customers of course it renders the customers page but after that at the end it is even rendering the no match page which you don't expect it's because the url customers even matching with this asterisk so since asterisk matches with all urls it always renders the no match page even for above urls that is dashboard customers and cat so overall your goal is that you want to execute either of these only you don't want to execute multiple for that case we use something called switch i will be demonstrating switch in the next lecture so we need to keep all these routes inside the switch tag so that any one of the routes only will execute at any cost no routes will execute at a time now we got narrowed saying that switch is not defined so let's import switch from react router now as you can see if the url is customized it loads the customers page but no match page doesn't execute unlike earlier in the same way if the url is cat only it executes the shoppingcat component no match page doesn't execute and in the same way dashboard and login pages are working only when the url is unknown that means other than the specified routes in that case only no matching page executes that is the use of the switch so switch ensures that any one of the routes only will execute in no case multiple components will execute now i would like to create the navigation links in the navigation bar for dashboard customers and the shopping cat so switch to the navbar.jsx file already we are placing something called home inside the nav bar so let me make it as login and instead of using the a tag we have to use something called the link tag in order to create the hyperlink for react router so why not the html anchor tag why should we use the link tag because the browser makes a request to server as soon as the user clicks on the hyperlink but we should not make a request right alternatively we have to load the component in the same page then only this application can be single piece application so in order to avoid sending a request to server but alternately react has to handle that routing and load the corresponding component into the switch for this case we use link but what are the classes that can be used on the regular hyperlink tag all of those css classes can be applicable even for link so that you can assume your link tag as anchor tag of html but instead of writing the address in the href attribute we have to write the same in the two so instead of a hrf you are writing link two and here you will specify the actual url that means the route path that route path should match with these route paths that are defined in the switch for example you want to create hyperlink to login so it must be slash so in the nav bar i'm writing link to slash and specify the css class name now hyphen link just for styling purpose similarly let's repeat the same syntax for all the remaining hyperlinks that is customers shopping cat and also dashboard let me place the dashboard at the first and fill the urls as a slash dashboard slash customers slash cat so this path must match with the path that you mentioned in the app.jsx file and also we have to import link from router so import link from react iphone router sorry it is react router dom so these are the hyperlinks that are created here let's run this as you can see you click on login dashboard customers shopping cat all are working fine and there is a starting issue here all hyperlinks are by default rendered line balance in order to make them horizontal we have to place this inside the la tag right so let me place this link tag inside the la tag with the class name now hyphen item and after that open another la tag let me repeat the same for all now it's correctly placed now as you can see login dashboard customized shopping cache is working when the user clicks on any of these router links browser doesn't make any request but alternatively react handles that route path and based on the path that is mentioned in the app.jsx file the corresponding component gets loaded inside the switch place so in that way first nav bar be constant and after that any one of these selected components will be executed and let's go to login.jsx file let me remove this class name call lg9 and also customerslist.jsx file this is fine and then shopping cat component remove this class name called container fluid and then product.jsx file here add div class equal to row and wrap the entire content inside this particular div tag so close the new at the end of the render method so now all the pages are working fine that is login dashboard customers shopping cat now switch back to app.jsx file place a due tag with class name container fluid and place this new tag before the switch that means place the switch tag inside the container fluid so as per the recommendations of bootstrap container fluid is required in order to make the content look center of the page and avoid the alignment issues and then go to product component here avoid placing row and delete the corresponding closing tag all right now the login page dashboard customers shopping cat all the components are working fine but to be frank this is not enough for building real world react applications you will really require to know the functional components and also advanced concepts such as redax and that is where you will check out my full course on udemy that is complete react ultimate guide in this course we are going to build the full pledged ecommerce application along with red x redex toolkit router and bootstrap in this udemy course we are going to learn the complete react with class components as well as functional components for example if you can check this section of course project with hooks here we are going to learn various hooks such as use state use effect validations use callback and many more advanced features of react hooks and importantly context api and additionally in this course we are going to learn red x react redux redex thunk red x promise radix saga and many more latest features and moreover in order to properly understand all these concepts of react and red x one should have the proper knowledge on javascript concepts especially functions and objects so in this udemy course we have provided the prerequisites of javascript that is javascript functions and objects and also ecmascript 2015 classes so even though you have less or basic knowledge on javascript you need not worry in this udemy course we have covered all the basic concepts of javascript that are necessary to understand this react android x and this is the advanced version of ecommerce application that we are going to build in the udemy course see after entering the essential email and password we have the dashboard page where the user can see his previous orders and the products in the cart from there he can buy the product or delete the item in the cart and if you click on the store page you can see all the available products you can filter out them the products and brands which you don't want you can select a particular product and add to cart and the same is visible in the cart itself and from there you can either buy or delete so this is the application that we are going to build with react hooks in the udemy codes