hello and welcome my name's dave today we're going to build a to do web app and we're going to use html css actually sas that compiles to css and then javascript for the functionality and we want our web app to be mobile first and responsive so of course designed for mobile phones but then also ready to scale up for tabletsized viewports and then larger widescreen computer monitors or possibly even tvs and then we want our web app to be accessible and by accessible i mean accessible with a keyboard using the tab index and the enter key or also using a screen reader and then we want to use persistent data and that means we can close out of our web app come back a week later reopen the browser load up our web app and our todo list will still be there with all the items we had on it let's get started i would like to thank free code camp for sharing my video and bo quincy and everyone involved in making free code camp such a great resource a quick note about me i'm the father of some great kids and some have autism please check out my youtube channel and you can connect with me on twitter linkedin and reddit okay we're starting our project with a blank slate you can see over here i have a folder named to do underscore list i've got vs code open and we should start with the html that is the foundation and the framework for anything else we might do we'll start with a file called index.html and in this file we'll first use an image shortcut just type the exclamation mark and you can see emmett abbreviation i should say right here we'll choose that and it puts in a basic page outline i'm going to hit control z i'm sorry alt z and that will wrap this line that we couldn't see here before so now you can see line 5 is just a little deeper and that's because i'm wrapping the line that it put in here so now we'll put in some of our own custom information we need all of these lines especially this viewport line that will help make our project responsive and we will later on we'll put in a style sheet line a script tag for our javascript and that sort of thing right now we'll just change the title from document to todo list save that and we've basically got our basic head section right now so now we need to go ahead and put some things in the body and i like to use semantic elements when possible we'll start with a main element of course this also helps our accessibility it's a great habit to have instead of just using divs and now our project as you can see the finished project over here to the right is really broken down into two sections we've got the area where we add a new todo list entry and then we have the area that actually contains the list and that's how we're going to break this out is into two sections and so we'll put in section elements there's our first section and this is going to be the new item entry so let's give it a class that says exactly that having trouble typing again new item entry and now that we've got our section what this section is really going to hold is a form you can see this is an input it's a text input and this is a button which is a submit button and that's basically what's inside this new item entry so let's start with the form and we'll give it an id of item entry form now inside the form we want to have a label for the input again this will help with accessibility we'll call this label well it's four new items we'll actually call the input new item and in the label we'll put enter a new to do item well we don't even need the period there we go and now it's time for the input and as i said it will be called new item so in the label the for attribute names the id of the input attribute and this will be a text input so we'll put type text let's cap the size at 40 characters and we'll set auto complete to off you may want it on on yours of course that's when it gives a list of suggestions or things you have previously typed underneath that's always kind of annoying to me so i'm just going to turn it off a placeholder and this is the text like you see add item that is the actual place holder that goes inside the text input of course i need to put an equals there add item and then a tab index and this makes sure it is keyboard accessible it is part of the keyboard index when you tab through the items so we definitely want this input to be part of that put a tab index of zero oh and then we can just slash close because that doesn't have a closing tag for the input it's just a slash and then close out the element okay what would go after that the button and it is just a button element let's give it an ad id of add item yeah that makes sense add item class let's just create a button class because we're going to have another button as you can see later for the clear as well the title attribute of this should be add new item and title is what when you mouse over text will pop up and show now i can't show you that in when the dev tools are open because i just get this kind of zero and it doesn't do it but if i were to close devtools and mouse over you would see the title there that's add new item i'm going to give this button an aria label this is part of the accessibility that we want to create for this web app and here i'll put add new item to list now why did i do that well there is no text on the button it's just a plus symbol and that's not really descriptive for anyone that is using the screen reader so this aria label will help out with that and let's also give this a tab index of zero and we'll close that and now a button as you can see does have a closing tag as well we're just going to put the plus symbol in here that's what you actually see on the button so now we've got our form it's got a label an input and a button element and that's the first section so i'll save that now let's create the next section and this section is for the container that has the list so we'll give this an i let's give this a class equal to list container now inside this section we are going to create some divs at this point the first one div with a class equal to list title and this will be this area here that has the title and it has the button it's just the top of the list so inside this we will put the title and give that an h1 and you really only want one h1 per page and this will be the one for this page or for this app and now we'll also put a button here and this will be the clear button so this button is going to have an id equal to clear items the class just like the other button we created will be class i mean sorry will be button totally get that turned around the title is going to be equal to clear the list remember that's what pops up when you mouse over the button and let's also give this an aria label because just saying clear it gives a hint an indication of what the button does but it's not as descriptive as we could be so we'll say aria label and remember this is what a screen reader would read remove all items from the list that seems good oh and then a tab index again because this button also needs to be part of the tab order of the page and we'll close that and of course a button has a closing element as well or closing tag for the element and we'll put clear in as the text for the button like you see up here go ahead and save that now that should pretty much be it for that div but underneath the div we have a horizontal rule this line you see so we can create that with just the horizontal rule element and close it out at the same time it doesn't have its own closing tag so just like that input element it just has a slash at the end of the element okay now our next div and this is for the list itself so create a div and give it an id equal to list items now really that's all we're going to need in our page the rest is dynamically created when we add an item it adds it to the list and that will be created with javascript but when we style the page it will be helpful to see an item or two in there before we start working with the javascript so you kind of want to plan ahead and know what you want to create with your javascript don't just wing it so inside of here we'll put a couple of items that later on we can remove and each item will be created with a div we'll give each item a class of as you might expect item and then inside each div will be an input as you can see the check box and then a label for that check box and by using these elements that are built into html that once again helps us with our accessibility we're not creating some new text node or something like that or just some div that we have to make accessible later a label is already associated with the check box in html so screen readers will respond to this by just using a check box and a label so we'll put an oops an input element and this type of input is a check box and then each list item in our todo list will have an id number so here we'll just id of one remember we're just specking this out later on we'll remove these and they'll be part of the tab order of the web app so we'll give that a tab index of zero also so it's included in the tab order now this input needs a label and it will be for whatever id number the to do item has so that in this instance it will be four id of one and then we just say whatever we want to say and here is eat we've got eat sleep code so there we go there's an example item let's just copy this and put in at least one more so we'll say two two and sleep other than that it's the same and there we have finished the html for the project and remember these items are just here for now we will remove them and they will be generated with javascript but we're putting these in because we want to style this next and we'll see what we get when we start styling the page okay let's get started styling our html you can see we have what the finished product should look like here and we have the html we created here and i have started the live server you can do that by clicking right on your html and use open with live server if you don't have live server already in vs code go to the icon over here for extensions type in live server and here it is go ahead and install live server and then you'll be able to do the same thing you want to run a local server and it makes it really easy to do with live server so you get the live server extension right click choose open with live server which i've already done and in this other tab here's our html doesn't look quite as good as the finished product yet but it is the same html so we need to go ahead and style that html let's look at the file tree here and all we have is our index.html file i want to add a folder i'm going to call this folder sas and now you see i have a sass folder and we'll include sas files in here actually they'll be files that end in the extension scss because that's the style of sas i'm going to use now sas is very much like css3 but it gives us a few other advantages to go along with that so the first file we'll create in this sas folder is going to be style.scss and now that we have a sas file as well we need to add another extension and one that will look at our sas and we'll compile it to css as we create it so once again come to the extension icon over here and instead of live server type in live sas and we're looking for live sas compiler you can see it's my third result here i'll click on that install live sas compiler and that's exactly what this will do it will take your sas files it will merge them because we are going to create more than one file and it will compile them all down to one css file now that you have that we come back here we can click the button that says watch sas and this will start to compile our sas so i've created that now you can see it went to the output window here and it will start to look for that now i really don't need that right now and matter of fact i can close it and it will continue to watch see it says watching and what it did when i clicked that was automatically created my dist folder which stands for distribution and inside that folder i have a css folder and inside the css folder the live sas compiler created a css style.min.css it also created a map because that's the default i haven't changed that we don't really need the map but it doesn't hurt anything this minified css and that it will actually be minified code is what's created when live sas compiler does that now there are some settings that we could look at quickly if we come to preferences in vs code then go to settings and then i type in live sas we'll get to the live sas compiler settings and you can see it's got a few different settings auto prefix exclude list formats and formats is what we'll look at and notice it has a settings.json it says edit in settings.json so i probably have settings that aren't the default i don't really remember what the default settings were but i can show you what i've changed mine to so the format that i have in this settings json says compressed and that means it's going to compress the css down to a minified version then there's an extension name and i end my file with dot min dot css which is the standard to kind of tell you that file is compressed and then it has the save path and i like to save mine to a distribution folder and in the future if you start using a bundler like webpack this will make more sense but i saved to a distribution folder and then the css folder and so those are the settings that i have you may have different default settings and that would be okay too i just wanted to show you how to get to those settings if you want to change them and so now our live sas compiler is watching anything we do and it will compile that sas right away and the live server is watching for changes and as there are changes it will automatically update what is served from our local server and we will see it over here in chrome so that is all ready to go now our style page is really just going to pull in other files we create and on the sas website it shows how to do this with the use or at use however live sas compiler doesn't seem to be supporting that at least the version that i have you can look at the sas page and i'll link to that in the video description and of course look at a tutorial for sas and you can see if your version of live sas compiler is supporting use but right now i need to type import is the way i can pull in a file with the version i have and i'm going to pull in a base file and we may get an error first because it doesn't exist but i'll highlight this folder once again and i'll create this base file and you say base with an underscore because this is a sas partial and sas knows it's a partial because it starts with the underscore so our style file will look for this base partial and we'll start writing what looks a lot like css in this base file the very first thing i like to do in my base file is start to define colors and i can do that because sas supports variables and so i define the first color usually with a default font color and the reason this is handy is because then i know one place to go in my sas files that has all of the colors for the project and then i'll just refer to these variables in the project so i'm going to define a few starting colors here i've got a background color and this color is a shade of blue that i like 9 0 e2 and then we'll have a container and i'll abbreviate background color and here will be an offwhite and then a container border color yeah it's just a one word it's fine just so it makes sense to you and anybody else that reads it if they need to work on your code and as long as you spell out what it is a good description like that should work for your variable name so there's four color names to start with i'll save that and let's see what else we should put well i'll use media queries later of course to make this project responsive and sas also supports something called mixins and we start out with just saying at mixin and now i'll put an mp here and we'll put in the size variable and a thank you to kevin powell who has a great channel on web design and he is originally who i learned this from instead of typing out all these media queries and it's a great way to do it so we don't have to type all of this stuff except one time media only screen and then we'll put min width and size here that's where we pull in our size parameter and now we can just put at content and that will be our mixin for future use when we need to use a media query now we can start what looks more like just regular css and i start with a reset we've got the asterisk and that means select all this applies to all elements everything on the page i've got a margin of zero padding of zero and i like to put box sizing in my reset we'll set that at zero and then i start with html and body and i apply these to both elements we put in some basics for the page or the web app and the first is font size 16 pixels i never like to go below that and we set that as our base for the project and then font family is another one and we're going to pull in a font from google fonts so we'll take a moment to look at that in just a second but i'll go ahead and tell you what one i'm going to use i like the font montserrat and then we'll back that up just in case it wouldn't load with sans serif okay color and this is the text color so we go to our default font color that was available width we want 100 width on the html and body elements min height 100 and then we're going to include a media query so we'll include now we say mp like we defined above and 768 which is the ipad size so once we've got to tablet size from phone size and we want to remember that we're starting with a mobile first design and you can see we have a mobile phone view over here actually an iphone 8 layout in chrome in the dev tools and this of course is the finished product we want to start small and build our way up and if we need to change things as the page gets bigger or as the viewport gets bigger we can do that so the only thing i'm really sizing up is the base size of the font as the page gets bigger we're just taking that font and going from a base of 16 pixels to 22 pixels now you can see in everything else we're going to add to the project we're not going to refer to a font size with a pixel anymore we will use rems which will always come back and refer to this base size we've set in the html and body okay let's save this and now let's add a couple of things to the body alone that we're not going to add on to the html and one is padding 20 pixels all around and then the background color and we'll use the background color we defined from there we can go to the section and remember we've got two sections here you can see we've got the background color we just set on the body is that blue color and now we've got our two sections we're working with so you can tell they will not be as wide as the viewport they will have a different background color so let's set that background color and it will be the container background color that we defined kind of that offwhite and then we'll set the width to 90 percent now it doesn't look like this is really a 90 percent width but remember we set padding of 20 pixels as well on the body so 20 pixels in from all sides and then instead of using a hundred percent of the available width we're using 90 of the available width so we've already subtracted 40 pixels from the possible width and then we're only using 90 of what's left okay max width 700 pixels so when we get to a larger screen we don't want this to continue growing beyond 700 pixels margin we'll set those to auto and you can see that's why the sections are centered we've got a margin left and right that is set to auto and now a border one pixel solid and we'll come back to our container dash border color that we defined and then we'll round the corners with the border radius of 10 pixels now why don't we see this applying to our html yet well let's go ahead and take a look at this html and we'll hide the file a little the file tree for a second so we can see everything a little better and we don't have it linked yet we haven't linked our sas or the finished product which is the css is what we really need to link we haven't linked that to our html yet so of course we're not going to see that let's link it right up here above the title i'll put link and then rel attribute equals stylesheet and then href and this will link to what we have and you can see the dist folder and then there's the css folder and then there's style.min.css so visual studio code was helping us out with everything and as we save that now you can see what we get doesn't look great yet let's go ahead and get the google font montserrat that we talked about as well and what you want to do is go to fonts.google.com and there type in montserrat if i'm pronouncing that correctly even and then we click on the result and it will give us a list of available styles and if i remember right i chose medium 500 so if you click select this style it actually gives us the link we can copy and then of course it says what to put in our css rules which is what i did earlier we had the font family and it's montserrat and back that up with sans serif so we'll just copy this link and we will put this link in our html oh there's something i must have forgot i put a semicolon there instead of just closing out the link tag there we go now let's go ahead and put this above the style sheet we're creating so this style sheet can actually use the montserrat font family as well so we'll save that and now we can get rid of that and we have it doesn't look much better but we are using the correct font that we want to at this time okay we're ready to add another partial and that is for our shared classes between the buttons so let's show the file tree once again and we want to add a partial file named underscore sharedclasses.scss now i want to define a few more colors before we get started on the buttons so we'll start with text box dash border color because that is going to be right up there where we're working with the text box and the first button and then we'll have button text color and that will be white and then we'll have button hover color and that's when the mouse hovers over the button set that to dark or black and then we can have an add button color and that is where we're adding an item so that's going to be a green and that is 4 c a f 5 0 and then we'll have our clear button color and that will be 9 9f6060 there we go so we've got all the colors we need let's come over to the shared classes partial and we'll start adding some code for these button classes so the first class is just button and that's what we added in the html we'll set the width to 15 percent well i need the percent now we'll set the min width to 48 pixels and the min height to 48 pixels and that is the minimum size you want a button especially when it is mobile friendly because that is where you'll have your thumb or your fingerprint your fingertip and if i remember right i read this from google dev advocates but you don't want a button smaller than that 48 pixels by 48 pixels is pretty much the minimum mobile friendly size for a button for your finger to fit on it properly so 48 by 48 are the min width and height settings there and now for the color we'll go with button dash text color that we set earlier and now border two pixels solid and we'll go with the text box border color we set now we didn't set it specifically for the button but it's right beside that text box so i'm just going to use the same one and border radius 10 pixels that'll give it that rounded uh feel instead of just being squared off in sharp corners and then i'm going to set the outline to none and this is usually not good and let me tell you why this is not good it needs to be visually you need to somehow see i guess that the focus is on the button so something visual needs to happen and usually that is an outline many screen readers will outline by default anyway but you don't want to remove the outline if you don't have another plan for the hover and the focus but we do so let's set those next we'll take that button class and we'll choose the hover and the first thing we want to do is just change the cursor to a pointer and that's where the cursor changes from the arrow to the little hand with the finger pointing and now the next thing we want is not only button hover i'll put a comma and then we also want to choose button focus and now here we're going to do a couple of things one is set this filter property and we'll change the brightness and you can see it accepts a parameter and we'll set that to a hundred and twenty percent that means it's going to get brighter when we mouse over or focus on the button it will lighten up the color so that should be a visible change we're also going to set a box shadow which is kind of an outline in itself so we'll set that to 4 pixels 2 pixels 5 pixels and black and like a shadow now that we've added our button classes let's go ahead and import that partial we'll save that and let's see what we've got going in the live version of our code that we're creating so far again this is the example version that we'd already created to start out the project and here's what we've got and i need to close devtools so you can actually see some of that hover or mouse over in action you can see it brightens up the button although we haven't styled the button the way we want to yet and we also brighten up this button but we haven't applied the specific colors or anything like that to the buttons yet but we will okay we'll come back into devtools there we go let's look at this example again of course we want these colors on the buttons and there's some other things we're going to add as well so we've got the shared classes partial and the base partial now we want to go ahead and tackle each section on its own and the next section or partial we will add we can go ahead and do that here first import and we will call this new item entry so we need to add a file a partial file that has the same title new item entry dot scss although note we don't have to put the file extension here sas knows to look for these types of files so now in the new item entry scss we'll start out with that class and that is what we applied in our html as well new item entry and now everything inside this because sas supports nested styles everything inside this class will only be well it will only target what's inside this class so this is a parent is a way to put that so if i just say input at this point it's only going to look for an input inside this class because it's nested i want to start out with the position sticky though and that is because if our list gets long enough i don't want our add item area to scroll off the screen so we'll make it so when it gets to zero it'll just stick and stay at the top and the rest of the list can scroll underneath and we do that with position sticky and top zero just those two settings you'll only see that if you get a really long list and then scroll through the list and it'll just stop right there which we can try that out later margin on the bottom of this we'll set to 1 rem and then padding will set to 0.75 rem and those are our main styles just for the container the new item entry container now once again inside the class we're going to use nested styles and the first thing we're going to target is the form because remember the rest of this is a form and it has the text input and the submit button so this display is going to be flex and we're going to justify the content to space between and that will have these two items the input and the button going as far left and as far right as they possibly can so i'll go ahead and save that and let's see what changes are being implemented here yeah it looks a little different than it did before it's definitely not what we want yet but we're working on it now inside the form we have a label but you don't see the label let's look back at the main one you don't see the label here you see the placeholder text but the label is nowhere to be seen but we still have a label and that is for accessibility however i'm going to style the label way off the screen i'll put the position as absolute and then i'm going to send it left and i'll put minus ten thousand pixels and that will take that label way off the screen but a screen reader will still read that label because it relates to the input and now we can target the input and we probably could just say input but since we have a button which is a submit type and you could have an input with a type submit and then it would show up as a button it gets confusing so i'm going to just get a little bit more specific here i'll say input type equals text and so that's a way you can see how to make a more specific selector there based on the input type and i'll set the width to 80 percent font size is going to be a little bit bigger than the standard so 1.25 rem and then border 2 pixel solid text box border color and then border radius 10 pixels once again to round those edges padding 0.75 rem that will give a little bit of space inside the text and then once again i'll set this outline to none but then i have to make sure i'm doing something with that input when we get there so we will have a focus and hover setting for this input let's look at the changes now that looks a little better we're getting there okay so what will we do for the input and once again i need to specify type equals text oh focus comma yeah and then input again type equals text and hover now let's add a box shadow to that input and let's come back and look at that again we'll close the dev tools here and we've got a box shadow over the text when we hover or when it has focus the box shadow stays so that is what we wanted there let's come back to dev tools and we can add a few more things here so we've got the input taken care of and this is our specific button now even though we have our button class in our shared classes partial we have a button specific to our item entry area and so within that class we're going to target this button this button element put font size it's 1.25 rem background color it's going to be our add button color padding 0.75 rem at include let's include our media query font size of 1.5 rem when the page gets up to tablet size and that's where we just increased the font size a little bit to scale up with the size of the page and let's save all of that okay we have one more partial to add and that is for our list container styles and so we will add the extra partial to our sas folder and we're going to call it underscore list container.scss and we'll need to remember to go to our style and include that with the import statement and we'll say underscore list container just import that partial as well okay in the list container itself the first thing we want to do is name the class the same class we used in our html and once again everything will be nested within this class we'll set just a couple of properties for the class itself we'll put a minimum height of 60 viewport height that's what i call it viewport height units um it's kind of like 60 whatever the viewport height is the minimum height of this will be 60 percent of the viewport height and so that gives it some room if you don't have much in your list at that point it'll still expand at least to that 60 and i think it looks just a little bit better okay padding we'll go ahead and add 0.75 rems here as well and now let's get into the list title if you remember we had that list title class nested within and that has the todo list title it has the clear button in this section right here we're going to display in a flex flex display flex box is what we're using justify the content again we'll do the space between like we did at the top for our form so that'll take things far left and far right and here we're going to align items and we'll put flex end instead of at the beginning from there we'll look at the button that is inside the title say font size one rem background color here we'll do the clear button color we defined now for padding i'm going to set the top to zero and then we'll set well the top and the bottom to zero actually and then we'll set the sides to just just a little bit of padding one or 0.1 rem just to give it just a hair of padding okay margin at the bottom 0.5 rem that's just to give it a little bit of space between the horizontal rule we have at the very bottom and the button okay and let's add a media query with include and remember we defined our mix and media query and this is once again when it reaches the size of an ipad tablet i'm going to change that font size now let's not change the font size it can just stay where it's at let's add padding just a little more padding so the top still and the bottom still has zero but the sides will now have 0.5 instead of 0.1 rem okay there's a little bit now besides the button we also have a horizontal rule that we can do something with and we'll just set that width to 100 so it goes all the way across except there's a little bit of space here where we have that padding that we defined up here at the beginning of the container so that padding is in the container but it takes up a hundred percent of the width available to it okay so we're in the list container and we defined everything in the list title area now our buttons look right of course here our title looks correct also and we do have the horizontal rule so that's all good so now we need to go to the item area and if you remember in the html the item area is where we start adding those list items here we have our list item and inside that were the items themselves and we're going to dynamically create these items in our app so we need to go ahead and style those let's get back to our list container and we've got the list title class and we're finished with that so now let's just go to the item class and we'll also set that display to flex and we'll justify the content and we'll set that content to flex start so this starts at the very top and then we'll also align items here and we'll center those items and we'll set uh the padding on the top to one rem we need a little bit of space there okay the inputs the inputs if you remember are check boxes so here we'll specify the type equals check box and we'll get a little room for the definition we'll go text align center and we'll have the width and that would be 2.5 rem to get a little bit bigger check box there the minimum width kind of look at this like a button because once again could be touching that so we want 48 for min width min height will also want 48 pixels just like we treated the buttons and then height itself which maybe we should have put here before the min height height will set to 2.5 rem also underneath the min height we can switch the cursor to a pointer just like we would for buttons and then margin on the right because we want to give some space between the check box and the label set to 1.5 rem now let's go ahead and add something for the focus that will help our accessibility once again identify the check box input and we'll say focus but now there's one more thing to add here plus label because this is the label out to the side where you see eaton sleep or in the finished version you see eat sleep code this is because when we tab through say using a keyboard or when we select the item but when we tab through and this item has focus we want to underline those todo items we need to give it that extra visual for the each item like the the word eat or sleep needs to be underlined and here we can do that with a text decoration and underline that to do item and then for label itself and this is the label which is also the to do item here font size will set to 1.1 rem just a little bit bigger than normal and let's go ahead and save that oh this looks much more like it okay a quick correction i was trying to figure out why i was scrolling left and right and yet the original that i had designed was not of course and it shouldn't be i went back and i was in a hurry and on box sizing after setting margin and padding to zero i made the mistake of putting a zero for box size and we don't want that we want border box is the value that we need and now you will see well it's still moving just a little bit here but i think if we close dev tools as this sometimes happens and then if i put it back into there we go put it back in now it's not scrolling left and right at all sometimes you have to open and close dev tools to get your mobile simulator to adapt just right so now it won't scroll left and right at all and that's exactly what we want so everything is as it should be with the border box setting i had mistakenly set that to xero before with that our sas is completed our app is styled and we are ready to move on to the javascript we're now ready to move on to the javascript of our project and so we want to create a javascript folder let's go ahead and just name that js and inside the javascript folder we're going to have more than one file let's start out with a todo list.js file and i want to create a class for our todo list this isn't going to be an app where we can have multiple todo lists we're just going to have one major todo list and so it's not too complicated we'll start with an export and this will be the default export as a matter of fact the only class in this file and it will be a todo list so we have to have a constructor in this constructor we'll have this dot underscore list and it will equal an empty array to start out with and now we'll have a few methods or kind of a getter and setter if you will will definitely have a get list and with that we will return this dot underscore list we'll also have a clear list so we can empty out the contents of the list and for that we'll just set it equal to an empty array once again and what else can we add add item to list now here we'll need an item object because each to do is going to be its own object and with this one we'll have this dot underscore list dot push item object and we'll push the item into the array and then of course we need to be able to remove one item from the list so we'll have remove item from list and we'll supply the id of the to do item when we remove it this will be just a little bit longer than the other methods we've added here so we'll define a list and it will be equal to the list and then we'll say 4 let i equal 0 and while i is less than the list length we will loop through and now we'll say if the list item which would be represented by the list with the iterator in bracket notation and then dot underscore id so this is specifically the id number if it equals id and we're not using a strict equals here that's because we're going to grab the id from the dom and we'll just grab it right out of the attribute so it won't necessarily be a number it will probably be a string value at that point and so we'll just use the two equal signs instead of the three for strict equals and at this point we can splice to remove the item and we'll start with the iterator and then we'll use the number one because we're only removing that one element from the array and then we're finished with the loop so we can break at that point we'll save that and there is our todo list class now we need to create a todo item class which will also be fairly simple so let's go ahead and add another file and call this to do item js and in to do item js it'll start out much the same way export default class to do item now unlike the list we're going to create mini to do items we'll start with the constructor it'll be this dot underscore id equals null to start out with this dot underscore item will equal null also no predetermined values there so then we'll have a getter a get id it's going to return this dot underscore id then we'll have a setter with a set id and i prefer to use methods named like this rather than the get and set keywords it just reads better to me throughout the code it's easy to see what's going on oh and with the setter we we need to pass in the id as a parameter we'll have this dot underscore id equals id now we'll also get the item and we'll return this dot underscore item and then we'll have a set item and here we need to pass in the item along with this dot underscore item equals item and that is our to do item class so you can see we just really have the two properties in the constructor and we have getters and setters for each of those properties okay we'll put the rest of the javascript for this project in a file that i typically name main js main.js and in this main.js file the first thing we want to do is import our todo list from the todo list dot whoops dot js and then we'll import to do item from to do item there we go dot js and then we'll create a todo list object from the todo list class so it's a new todo list and now at this point we haven't added the script tag to our html yet so we'll need to go back and do that and we'll come up to the top i'm going to go ahead and hide the file tree again just so we can see a little better and we need to add that script tag when we add the script tag and i'll do that below the css link we identify the source starts in our js folder and then it will be our main js but we also need to add type equals module because we're using imports and it has a closing script and that should be good i'll show the file tree once again and we'll go back to the main js file now i can probably hide that and give us a little more room and we'll go ahead and get started by adding the very first function and that function should be what listens for the load event that we're listening for but it's not specifically the load event but we're going to add a document and then add event listener directly to the document and we're listening for the ready state change and with that event we will fire uh well we'll listen here if event dot target dot ready state we'll listen for that and now a strict equals equals complete and that means the dom is fully loaded and ready to interact with if we get to this point we're ready to launch our init app function and so now we're ready to get started and what would go in our init app well we won't add everything right away but our init app and i'll make an arrow function here for it we'll have our event listeners so we're going to add listeners here and then it's also going to have a couple of procedural items that we're going to call other functions we're going to make and so i'll put here procedural things that we want to do right when the app loads one is going to be to load our list or our list object and especially if we store that in any persistent data if we use our web storage api to do that we're going to want to load those list items out of there when we come back to visit so they're still there the other thing we want to do is refresh the page and that can have a few items within it so let's go ahead and create that function right now so our refresh the page function is what would be called into action so we need to create that function below it and it is going to contain a few helper functions kind of a procedural function of its own so we'll define refresh the page doesn't need any parameters and one thing we're going to do is clear the list display so that's a function on its own another thing we're going to do is render the list a third thing we will do is clear the item entry field that would be that text input where we're entering things we don't want leftovers hanging out there and the final thing we want to do is set the focus on the item entry field we don't want to be somewhere else and always have to click in the box or tab back to it we always want the focus set back to that item entry and ready to go right when the page loads or whenever we decide to refresh the page so there we essentially have a procedural function here that's calling for helper functions and we'll start with the clear the list display so how will we do that we'll define our clear list display function which will also be an arrow function and from there we need to define a parent element so that's exactly what i'm going to call that variable and we'll select the parent element from the document with the document get element by id and we're going to look for the list items container that will be the parent element for all of the list items and now we're going to create another helper function that deletes the contents of whatever element we feed this function so we need to feed it a parent element and that's what we defined so one more helper function here and we're breaking these into smaller functions because they're easier to manage and you really only want your functions to do one thing if they're not procedural functions and a procedural function like refresh the page should be calling these other functions that are only doing one thing each and sometimes when we get something like clear the list display if we determine that it needs its own helper function we can break that out as well so now let's define this delete contents this delete contents function isn't necessarily just for this web app this could be used in a variety of web apps and honestly it's a function that i use in almost every web app that i create with vanilla javascript because it's just a function that will delete all of the child elements of a parent element so let's go ahead and define that let's say let child and we'll set it equal to oh we need to pass in the parent element we're calling that before so i'll just call it the same thing here parent element let child equal parent element and then last element child and then we'll say while child so while there is a child element we'll say parent element dot remove child that's a method will pass in the child so it removes the child while there is a child and then the child is going to equal the parent element last element child once again and that is if there is another one then you reset it to that last element child and you continue that process until they're all gone so we can save that and now our clear list display function is complete so we call that and it selects the parent and then we pass the parent in to delete contents and those contents are deleted okay now let's look at the render list function that's the next one called in line so we'll say const render list and this would set into action the processes that render our todo list so we'll define a list inside of here and we'll say todo list remember this is the new todo list object we created at the beginning and now we want to call in that method get list right now of course it would be an empty list but we're still getting the list and then we'll say list and it's an array so we can use four each and this is for each item on the list we will call a helper function which is build list item and we'll pass in the item from the array that single item we'll save that so now we know we need a build list item function to help out our render list so let's define that build list item and it's going to accept item as a parameter and now this function gets just a little longer because we're creating dom elements like divs and we're setting attributes so we'll start out with a div and really we could go back to our html and just take a quick peek because what we're creating is what i commented out here that i could bring back in and now i'll hide the file tree and give us a little more room right here this is what we're creating now why don't they show up huh well it could be that our clear list function is working if we come back into our main js file and come to the top and we comment out our clear list display function now they load in just like they were so we know our clear list display function is working so that's great and this is how they should look and it's what we're going to be creating with this build list item so once again quick look at the html and we're going to be creating a div with the class of item and inside that div we're going to have a check box input and a label and there's several attributes that they'll have as well so now back at whoa back at the js in our main js file let's do this build list item function so we start with the div it's document dot create element and we pass in a div so we know that's the type of element we're creating we've set it equal to the variable div so then we can just say div dot class name to set the class equals item now let's build our check box so once again document.create element we have an input element that is a check box and we'll say check dot type equals check box that's the attribute there and then check dot id equals the item we've passed in which is a to do item so it has the method get id that was our getter for the id attribute and then check dot tab index because it needs to have that tab index attribute so it's part of the tab order so we can tab between the items so we'll set that tab index to zero that is good so far and you can see how we're creating those elements and there could be some of you that would say hey you should have a separate function for each one of these elements you're creating and that is a possibility because that would really break it down to doing one thing each and i just haven't broken it out that far we're going to end up with a function that has about 15 lines here right here i'm going to add a comment but we want to add a click listener to check box and we pass in check which would be the check variable so this is going to be a helper function we will come back to that now we'll define a label variable we'll say document dot create element pass in label now our label is going to have a four attribute but in javascript that is html4 looks just a little different that is item.getid because you want the four attribute of the label to be identical to the id of the check box okay label dot text content now we're setting the actual text of the label it will be item dot get item and now we want to append what we've created so div dot append child so we have our div and we're going to append the check box and then right after that we'll have div dot append child and we're going to append the label and now we need to go ahead and create a container or at least select the container we're not going to create the container what am i thinking so this is document dot get element by id and it's our list items container and from there we can just say container dot append child and pass in the div well that's all right so all we haven't done is create that helper that adds the listener to the check box but everything else looks good so let's come back up because this was the helper to the render list and here's the render list function well the list is empty so it doesn't have anything to render at this point we're going to have to go back and tell it how to create an item very soon so we can start doing that but right now we can render the list which calls the build list item function and from there we need to go ahead and create a helper function that is called add click listener to check box so that way when the user clicks on that check box something happens now check boxes do have their natural behavior of adding a check to the box we don't really have to do anything to make that happen but let's create this helper function here that says add click listener to check box and we're going to pass in the check box that we're adding the listener to and now inside this function we can say check box dot add event listener listing for the click event and we could pass in the event here although we're not really doing anything with it we've just listened for it and now when it's clicked we can call the todo list remember that's our object that we defined up in the global space above that is our overall todo list and we can call remove item from list because that's when we're checking it off we want to remove an item we can pass in the check box id and the check box id that we had grabbed or it has that attribute that was set and we're grabbing that from the element itself so there's the checkbox id we're passing in and now at this point besides removing the item from the list there we and that is removing it from the object we're removing the to do item we would also want to remove it from uh the persistent data so i'm just putting a to do reminder here remove from persistent data and we'll come back to that as well and notice i also have a little extension i'm using for todo's that does this and we could look that up but pretty much go to your extensions and search for to do and you'll find an extension that highlights to do's for you the one extra thing i want to add is this will happen so fast when we would check a box to remove it that i would prefer to slow that down or at least not refresh the page so quickly that it's just a blur because you get a little bit of satisfaction out of seeing the check mark in the box yes i've checked this item off so i want to use the set timeout that is built into the window object this is one of those things that you could say window.set timeout but you don't have to use the word window and so i'm using the set timeout and inside this set timeout i'm going to call the refresh the page function and that will refresh the page delete the previous items load the new list because we have added an item to the list it doesn't just automatically add to the dom we have to once again pull that data from the dom and i'm going to set the timeout to one second this is a thousand milliseconds which is one second so we get the satisfaction of seeing that check box or our item that we have worked hard on and checked off our todo list for at least one second before it disappears so we'll save that and other than having it to do for the persistent data we have finished that so now when we build a list item it's going to add a click and apparently i'd mistyped listener it's going to add a click listener if we spell that right to every item when we build it and we build these items in a loop so for each item in the list we build the item so every item also gets a click listener attached to it now that we've completed the add click listener to check box function except for the to do that we have remaining and the build list item that all comes back to our render list we called we just have a couple of small items left in our refresh the page function one is clear the item entry field which is our text entry and the other is set focus on item entry which would just set the focus back here so we could start typing right away without having to click in the box or click a button or tab through so let's go ahead and create those functions and those are quick and easy as far as that goes so we'll come down here under our add click listener to check box function and we'll start with the clear item entry field function does not need a parameter so all we need to do is select the item entry field get element by id and that is new item and then we'll at that value equal to a blank value we'll save that and that is that function that just clears out the text input box and the other function we needed was set focus on item entry once again no parameters needed we'll set the focus element by id and we'll get that new item input again and here we'll just say focus and that will set the focus back to that input and i've noticed we're still using the iphone 5 the smallest view which is what i like to do because it's always easier to expand and make it bigger but we can go ahead and possibly expand our phone just a little let's get a different phone choice maybe an iphone 8 and we can see fit to window it'll let us go a little bigger there with a 91 that's great that gives us a nice clear view it adds just a little space i felt like the iphone 5 look was a little cramped so there we have everything needed in our refresh the page function and it is a procedural function that calls these other four functions and these functions at least the first two also had some helpers so we've completed all of that now we're probably anxious to start adding uh items to our list and to see some of this in action for sure so let's get started with that what we need to do or is add event listeners then in our initial initialize app or init app function so we'll come back up to the top where we add the listeners and let's go ahead and start with some of that the first thing we want to do is select the entry form and there we go document dot get element by id once again and it is the item entry form so we've selected that entry form and now we can say item entry form dot add event listener and we're listening for the submit because this is a form so when the form is submitted listen for that submission event or submit event and what we want to do let me go ahead and save this real quick and show you why we want to do this right now forms have the default behavior that they submit via a get method even if you don't define that in your html so watch the elements over here to the right when i click the submit button everything flashes it actually reloads because it submits the form we don't want that to happen we want to handle the data ourselves we don't need to submit that form so what we want is an event as we specified in our parameter the event prevent default and that will prevent that from happening so now when i click the button watch over here nothing flashes we can click submit as much as we want to but we've prevented the default behavior of the form and it doesn't reload everything like the dom it happens so fast you don't really see it here but you can see it here in the code so we've done that and now we need to essentially process the submission and that's what i'm going to call this function and that is once again a procedural function a little bit larger that does a few things when we process the submissions so we'll get started with that we need to scroll all the way down underneath our set focus on item entry function and we'll start defining the process submission function no parameter necessary to start out with the very first thing we need to do is grab the text the item what has been entered so we'll say const new entry text and we'll set that to a function named get new entry and as you might guess this function is just going to do the one thing and that's what we want functions to do if at all possible get new entry and we're going to return the document.getelementbyid new item once again value but also trim that value we don't want the white spaces to the left or the right that might exist so we've got the new entry item now by calling that simple function and now we'll say if the new entry text dot length is false which would be zero so that's how we could say if it is equal to zero uh return just exit the function and we're done nothing else needs to happen there but if there is some length to the text there's at least at least one character there something that we want to put on our todo list we need to go ahead and process this submission so first thing we need to do is get the next item id because we might already have items on our list and if we don't it's clearly going to be the first item but we need to have a function to do that so we're going to say calc next item id and now we need to create a helper function called that so we'll start here and we'll say calc next item id start the arrow function and we'll add let next item id equal one because that's what it will be if no items exist so we might as well start out with that value and then we'll grab the list from our todo list object by calling the get list method just set that equal to list and now i'll say if list.length greater than zero the next item id is going to equal now we're going to refer to the last item on the list and we do that by saying list dot length minus one and that refer using bracket notation there with our list array that would be the last item on the list and now we could say get id we'll call the id for that last item then we need to add one to it and that would be the next item and of course if it was not greater than zero then we just return the next item id which would be one and there is our calc next item function okay so after we calc the next item id we need to go ahead and create an item so now we say const to do item equals create new item now we've got a couple of pieces of data already and since they exist we need to go ahead and create this item we say next item id is passed in as a parameter and also the new entry text is a parameter for creating that new item okay creating the new item we just scroll down below and create that function and we'll say create new item and we're going to set this equal to an arrow function actually also so we'll say item id because we're passing in the next item id and then we'll say item text because we've passed in the text as well oh yeah arrow function almost forgot again and now we need to create a new todo item so we'll say to do equals new to do item this is a new object created from our to do item class and we'll start using those methods so we'll set the id equal to item id and i'll say to do set item equal to item text and then we'll just return the to do that was easy enough so if we come back now our todo is held in this todo item variable now that we have our todo item we can just call our todo list into action this is our todo list object that we've created and it has the add item to list method so we just call that method and pass in the todo item now a note here again another reference to it to do this is to do in our code this is where we would want to update our persistent data once again because we've added a new item so that would need to go into that storage as well so what we're seeing is anytime we update our todo list whether it's adding an item or removing an item we also need to update our persistent data and then when this is all completed we need to refresh the page again and that is because we have added a new item and so that page needs refreshed and it will now show the new item as well and it's not like refreshing a web page in completely this will happen so fast that you won't even realize that all the items have been deleted and shown again it will look like just one new item appears if you can believe it we are almost finished with the app we still need to add something for our clear button and we need to handle our persistent data one quick correction this new to do item needs to start with a capital t as when we import these classes you can see the lowercase t on my todo here but when we scroll to the top we can see we're importing these with capital ts capital letters because they're classes that we have imported so that needs to be a todo item with a capital t now that said let's go ahead and check out our process submission function where we could say eat and we could say sleep you notice the focus goes right back to the input and we can say code and that all works like we want but we could also say sleep more and tab over to the submit button and hit enter there and when we hit enter it goes back and sets the focus back into the text input like we need so that's also very convenient and that submit function is doing all of that is not submit the submit event is what is happening there and that is triggering the rest of that we didn't need to have any other click event listener or anything else it's just the forms submit event that is making that happen when that fires whether it's from the submit button or from us hitting enter because this is a one input form so we can just press the enter key and it works just as well of course we can tab through all of these and you see the items get underlined and the hover and focus were focused on the clear button they were focused on the submit button or focused back on the text input all work like they should so let's go ahead and finish up this app by adding a listener for the clear event button or the clear button and listen for its click event and then we could also finish up by adding the persistent data so let's scroll to the top and add the other listener that is missing for that clear event or the the click event on the clear button starting out we'll define our clear items variable and we'll grab the element we need which is the button document get element by id once again and we'll grab the clear items id which is the button and now we'll say clear items dot add event listener listen for the click on that button and pass in the event even though we won't really need the event in there and we want to say get the list which is the todo list object we've created and we'll say get list again once we have that we'll say if list dot length that means if it has a length that is not zero if there's length to the list we want to use a confirm a little confirm window so we'll say confirm and the message is are you sure you want to clear the entire list question mark and of course we need a semicolon there i want to go ahead and wrap this so it's not scrolling off the screen there we go are you sure you want to clear the entire list and after we ask that if confirmed because confirmed will the confirm window will return or the confirm popup will return a boolean so it's either true or false whether they click ok or cancel and so if confirmed if we click ok and it comes back true we'll say todo list which is our object called the clearlist method that we've already defined to do here update persistent data once again because we've cleared out the full list so at that point the persistent data should also get emptied out and then we'll say refresh the page because anything that was displayed should be deleted from the list and so that is the event listener for the clear button so let's add a few things let's say eat sleep code and now let's click the clear button and we get our confirm we'll say okay and it cleared the full list likewise if we said eat sleep code we had two different ones it doesn't really matter and we clicked and then we got the confirm and we click cancel then it doesn't and that's the behavior we wanted so that is great and that finishes the clear button action so now we need to handle this persistent data and that is in several places in our codes here so let's look from the top let's look for all the todo lists we might see and the very first thing we see is update persistent data and i think we're going to see that several times throughout there see we're on line 30 we have an update persistent data whereas our next to do on line 88 remove from persistent data and that could just be update the persistent data again because we could just grab the list after it's been removed from the list and then online 109 we have an update persistent data so we need to do that in several places let's just add our update persistent data right under our add click listener to check box function and it's not a big function at all update persistent data we're going to pass in the list array and there we'll use the local storage and we'll set the item and now we need to name what we we're going to call our storage i'm going to call it my todo list now we need to use json stringify local storage works great with json so we're going to stringify our list array because local storage only stores strings anyway it will convert it even if we don't use the json so we might as well use json and take advantage of that and that is the full function that we need to update the persistent data so now let's just look for the places that call for that persistent data to be updated and call this function update persistent data and inside we'll always pass the todo list get list so as long as the list has been updated whether it's had something removed or something added this will update the persistent data so i'll copy that and we'll just look for these other places in our code that needed it any other to do is highlighted i think there might be one at the top yes there is now we have updated our persistent data in all of the places we need it so when we come back if we leave the site and come back maybe even a week later our todo list will still remain and the only thing we haven't done now is one of the things we talked about at the very beginning and that is to load the list object we need to load it out of our web storage and read that into our app right when the app starts up so let's call that a function and we'll just call it load list object and then we get to define that function so we'll put it let's say let's put it right above the refresh the page function because that's where it's called in our code as well so load list object make it an arrow function and besides the event listeners and of course the init app that it's within is the very first function that actually does something other than listening for the app to start so what we'll start out with is defining our stored list we'll say local storage dot get item and we're getting my todo list out of local storage so now that we've grabbed the list if it exists we need to see if it exists and i'm going to say if the type of so i'm checking the type of data that's coming out here the type of the stored list if it's not equal to string then it's really not what we're expecting so just abort mission at that point so if the stored list is not equal to a string and it should be string data that's definitely what we're storing we're stringifying json and putting it in there but if it's not get out of there so if the list exists and it's what we expect it will be stringified json data so now we can say const parse list and call jsonparse and put the stored list in here and parse that out and now we should have our parsed list that would be the object we brought back in so now we can say parsed list for each because this json is going to have our item objects in it so we have item objects so we'll say for each item object create a new to do item and this is because our todo items have methods so we're not just pulling the data out we want those methods but when we stringify or even if we didn't stringify if we just stuck them into the local storage or with the web storage they lose those methods those methods don't stick with them when we pull them back out so we want to just create new items again remember this is when the app loads so we know we have a list of items now we're actually making each item a todo object again and storing it in the list so this is why we take this approach so we create a new item new to do item and we have to call our create new item function that we previously defined and we can pass in the item object now here we don't get to use the getter or the setter because they don't exist so we have to refer to those properties and we refer to the item object underscore id and item object dot underscore item and then we call that todo list object that we created at the top so it already exists and then we call the method from it add item to list and we add the new to do item we just created of course we do this for each item on the list okay let's clear out our list let's add some more items let's say we need to get eggs milk bread and chips can't live without chips maybe tacos too okay we've got eggs milk bread chips and tacos let's check our storage we go to the application tab and now we might have to pull this over a little further but we do have some local storage here on my todo list and down here we can see each item actually and here is the id one two three four five and we've got eggs milk bread chips and tacos let's check some more of our app let's delete bread there's the nice check box for one second before it's gone and now you can see we've got items one two four and five so our persistent data updated right away and that's exactly what we wanted and maybe i'll go ahead and delete one more let's get rid of the chips okay great now let's add something here let's say we want to add noodles you can see we created the next item id based on the last one even though three and four were missing we didn't create an item with an id of three we grabbed the last item and added one and it creates the next item id as it should i believe we are finished creating our app so let's review everything i'll scroll this back over give us a little more room and let's even close this out and see how it looks on a bigger screen so we could really add a longer item go to the store and buy milk uh if i could spell milk eggs and cheese and it's there but we can add more and more and more and more and more and even one more and now let's scroll and our sticky item entry works also it stops at the top that's great so now we can click click click can we click to it once yes just have to be quick or it disappears and comes back so if we went click and then hesitated it would maybe not work as well but we can try to debug it and even refine this there's a lot of room for improvement in this app this is a very basic todo list application and i'm sure you can add more features that would even make it better and of course in the long run you might want to create an app that will handle more than one list and you could select which list you're working with all right let's test out our to do web app and the first thing we want to do is uh activate the chromevox screen reader and see how it responds we've already used the functionality we know we can add items and remove items with a mouse so we're really going to test out the accessibility features so go to the three dots in chrome and then choose more tools and choose extensions from extensions you'll want to activate the chromevox classic edition if you don't have that extension go to chrome.google.com and let's see what the rest of that address is it looks like i think you could just search for the chrome web store but it's chrome.google.com webstore slash category extensions and that would probably get you there but go there and search for chrome vox vox and i can expand the browser a little i believe so we can see that and choose the chromevox classic extension that's what you want see if i can bring this back where we had it there we go right about there so we'll choose this and it's going to start talking to us i'll choose the todo list todo list tab and it's ready to go edit text so that's our text box we can tab through add new item to list enter a new to do item with hint add item edit text add new item to list section remove all items from the list i don't think i like that so well i think we need to change our section and maybe add a tab indexed to our h1 so to do list remove all items from the list section there we go every time i click it's reading something off let's go ahead and try adding a text so i'll say eat tea and i'm typing a little fast if i type slower e a t i'll press enter eat deleted oh i don't like that either i don't like how it says eat deleted we want it to say eat and then added or item added something like that let's try another one sleep and address and search bar okay we tabbed 127.0.0.1 colon 55 edit text add new item to list enter a new to do item with hint add item edit text that's interesting after i pressed the enter button or pressed enter when i had the focus on the button it just went back and read the uh item entry field again because uh we switched the focus back to that so i'll go ahead and enter code c code deleted definitely don't like that let's tab down and see what happens when we remove something add new item to list section remove check box not checked sleep check box not checked checked enter a new to do item with hint add item edit text section so it really didn't say it removed the item and i pressed the space bar not enter to actually check the check box which is the actual behavior that i was expecting so there's a couple of things here we want to change let's get to work on just a few things we can fix in this web app okay i want to start with just a little bit of code clean up and that's always good to do as you're wrapping up a project the very first thing is we get to the colors and i'm remembering that i really didn't use the button dash hover color and we can verify that by selecting the sas folder and then right clicking and choosing let's see find in folder and i'm just going to paste the name in there so this will search all of the files inside the sas folder and yes we've only got this one occurrence which is right here so we can just get rid of this definition it's part of our cleanup save that file and what else are we looking for oh yeah i used mp really wasn't thinking about it and i meant to use mq and i used it throughout so we can also search for this within the sas folder and see how many occurrences of mp or actually mp and the beginning parenthesis might be a little easier to find exactly what we're looking for so if we do that and choose find in folder we have four results in three files and we can go to each one of those results so here's the very first one and what i want to do is change that to a queue for media query if i had even been thinking about it that only makes sense okay now we have three results and three files because it automatically updates so now i'll go here and we need to change the rest of these to match our definition and that's the two results inside of the base now we've got one in the list container and we've got one in the new item entry with that fix in place i want to go back to the html and add that tab index to the header and that way when we tab using the screen reader into this section it's going to read the todo list and not the remove all items because that's not what this section is about it's really about the todo list okay the last thing we need to do is going to take just a little bit more work in our javascript and we'll go ahead and get rid of the file tree so we have some more room and this was when we added the item the screen reader was saying deleted because immediately following pressing enter and the item being added to our list we were clearing out this text field and so it said deleted likewise when we checked a box instead of saying removed and say code removed or eat removed it simply said check box checked and then went back here and we could make this much more informational so we're mostly going to do this in javascript there is one thing we want to change actually in the html so i will go to the html first hide that file tree so we're in our list container section and then we're in the list items section right underneath the list items section but still inside the list container section i'm going to just put a paragraph element and i'm going to give this an id of confirmation because we just want an audible confirmation i need to put a little more than that i'm also going to put a class equal to confirmation and i'm going to set an aria dash live attribute and this will be set to assertive because that means it's going to read whatever happens in this element immediately even if it interrupts what it's saying it's going to be assertive about it you can also set this to polite and it will wait but we want it to say right away what it is doing and this will be say eggs added or added to the list or we could say eggs removed or eggs removed from the list something like that so whatever content we put in here and that's all we need to do in the html is add this paragraph block element and put the id class and the aria live attribute and set it to assertive we'll save that and let's make sure i need to drag this over just a little bit more we're not watching the sas let's go ahead and do that so it updates the css and compiles it as we go continue watching even though i closed that window and now inside the not the new item entry inside the list container is where we have added this and inside that list container we're going to go to the very bottom underneath the label and underneath the item area here there we are you can see that because this is not an item it's actually in the list container section which we're still within and we can just say dot confirmation which is the class we applied to our paragraph element and i'm going to do the same thing you saw me do with the label for our text entry we're going to have an absolute position and then we're going to set it minus 10 000 pixels to the left so this is going to be off screen it's nothing we need to see on screen we can use the app as intended already that way when we look at it but if someone needs a screen reader they need this audible update so we're going to actually put the update information in this paragraph in the confirmation and since it has that aria live attribute it will read that confirmation with the screen reader so now all we need to do is get to the javascript and go ahead and create the functions that will enable this to happen okay i'm going to scroll down in the javascript we're going to scroll way down here towards the end and we've got our process submission and then we add the item to the list and we update the persistent data this would be a good time to give that screen reader confirmation that we want to do so let's create a function called update screen reader confirmation and let's give this function two parameters one we want to put the new entry text in because that is the item that we're adding to the list so that's the new entry text as a parameter the other one let's call it action verb and this is whatever we want to kind of say after we add it so we could just say added or added to list something like that i'll just call it action verb as a parameter so let's take this function name and go to the bottom of the file here underneath the create new item and we'll create a function called update screen reader confirmation and it's going to accept the new entry text and it's going to accept an action verb and since we're calling that up here now we've talked about that really we don't want to say action verb here we want to say what we're doing so let's say added that is our action verb for now now in the function we're going to get that element document get element by id and we gave it an id of confirmation and from there we can access the text content and we can set that text content equal to a template literal so we can put these parameters right inside and we can say new entry text imagine we added tacos to our list so we'll say new entry text and then space and action verb which is added so we could say tacos added when we're finished i'll go ahead and put a period there just to make it a sentence even if it's a brief one and we'll save that let me go ahead and wrap that code so we can see it all at once something the reason this is white i am not sure why this is white right now something seems off i know what it is been staring at code for too long i forgot to make it an arrow function there we go so there's our full function update screen reader confirmation and this will accept say tacos and added and then it will set that text content to that confirmation paragraph that we have for the screen reader and since it has the aria live attribute the screen reader will read it immediately as it's updated and so that is why we have it in our process submission we update the persistent data the very first thing we do is add the new to do item to the list then we update the persistent data and then we give that confirmation and it will read it right as it refreshes the page and shows the new item so that is what we need there now there's one other area and that is when we remove an item and that is just a little more complex so let's scroll up to that click listener we have for the check boxes where we actually remove the item and you can see we access the todo list and we remove an item from the list and once again we update the persistent data and right after that or even before the persistent data either way it would be a great place to put that update screen reader confirmation so i'll just put it after because that's what we did before can say update screen reader confirmation and this is going to accept some remove text and we haven't defined that yet and then we'll say deleted or we could say removed from list let's do that i don't think we need the period there though because we already put that in our template literal okay so we need to define this remove text now what could we do to do that we have to think about this where is the text it's not in the check box it's in the label so we need to write a function a helper function that is going to grab that label text based on the check box id so let's do it right after our removed item from list where we worked with the check box id and we could say const remove text because that's what we're passing in is the remove text let's call this function git label text and we're going to pass in the check box dot id so we'll pass in the id of the check box now let's define that function just right underneath it's called get label text it's going to accept a check box id parameter and now we're going to return what we find here and so we'll get element by id and let's just go ahead and select the check box with the id and then we can say next element sibling so that is the element right beside it that's what we're doing the very next element and that is the label that we need and then we can grab that text content from the label we'll save that and now that should work to grab the label text and save it in remove text and you know what i want to put the update persistent data above that just so we have these two lines together that we created and now when we remove an item by checking the box it should once again update that paragraph in that paragraph with the screen reader we'll say removed from list so we could say tacos removed from list or tacos added and those are the action verbs that we have got to pass quick fix here i discovered one error i put a colon instead of a semicolon after this line we've got to fix that and now we're ready to try out our additions to our web app okay let's try out the new additions to the web app especially for the screen reader todo list tab and let's add taco t c o s tacos added yes that's what we wanted now let's add salsa a salsa added excellent add new item to list section todo list we wanted to we wanted to announce the todo list instead of going straight to the clear button remove all items from the list button check box not checked code check box not checked tacos check box not checked salsa check box not checked salsa room edit text section well it almost got removed out that's added new item section check box not checked checked eat remove from list enter a new to do item with hint add item and there you have it our todo list web app project with html5 css3 that is compiled from sas and javascript and we made it mobile first and responsive for all sizes of viewports we made it accessible and therefore we can use the app just with a keyboard or we can even use it with the screen reader if necessary and then we used persistent data so we could close out of the app and come back to it whenever we want to and still have our todo list items of course this app still has a lot of room for improvement and i'm sure you can make your own please leave comments and let me know what you're going to do to improve the app thanks for watching