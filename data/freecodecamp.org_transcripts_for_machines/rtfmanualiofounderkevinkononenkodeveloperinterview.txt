we are live welcome Kevin thanks a lot Quincy how's it going it's going great so Kevin is an amazing communicator and teacher he is the founder of RTF manual do where he creates amazing analogies for programming concepts he also has really awesome interactive tutorials that you should check out I've linked to all those below but let's talk a little bit about you man so Kevin you started out as an environmental science and entrepreneurship major at U Michigan and you you joined to startup and you had to basically learn how to do software development right off the bat tell us a little bit about that yeah sure so I was a liberal arts guy in school he said when I was school out at Michigan and actually right out of university I founded a company called diverging with a technical partner and what ended up happening was you know we were two 22 year old guys he was fortunately a computer science major and what ended up happening was you know we'd over it into it and we quickly realized that the backlog was stacking up and my partner's Key's skill set was backend and we kind of looked at each other and said you know we can wait for a while to get the frontend right or we can find some other way to get around this and I said you know if this is the one thing that matters most and that's gonna help move us forward then I'll learn some code so I jumped in I started with resources like code Academy code school I don't think there was free code camp at that point or if there was I didn't know about it and you know just started teaching myself being a CEO during the day and trying to move the business forward and then learning at night and what would happen was I would you know try to do as much as I could between the hours of 7 p.m. and 1 a.m. let's say I would come back you know having learned a few things but struggling with a bunch more you know put some stuff in front of my partner and he would help me out and then eventually I got there but it was a very much like a trial and error experience and a lot of you know this is the same struggles that everyone goes through when they learned to code but I'd say for me you know one of the big things was knowing that the next day I was gonna go and look my partner in the face and have to tell them about you know what progress I made and like you know how I'm gonna solve the problems for the business so that's a pretty big motivator well you know it's just two people in a room basically Wow so to recap you you basically put yourself in a situation where you're forced to rise to the challenge jump right in and the wellbeing of your venture is largely contingent on your own ability they to grok a lot of these concepts and apply them yeah yeah yeah and just the cycle of you know learn a few frontend skills improve the user interface do a user test and realize how far I still have to go and then you know pick up the next few things so it was it was you know learning it in real time for sharing so you're now at an another company um but on nights and weekends you put on your back cape and you run our TF manual die oh yeah this is an amazing collection of analogies many of your analogy articles which we published on free cooking at medium convocation and they've been extremely popular how did you decide to go out and teach coding yeah so I started at this new company June last years I've been here about eight months and I was kind of thinking about you know the challenges I had learning to code obviously on nights and weekends in the first place and I said there's an internet full of content out there and there's sites like free code camp and code Academy and all that but still a huge struggle you know what are all these sites what are they not covering why is this still so challenging and I just thought about what I you know I have a marketing background and I thought about what I could personally offer and I just try to take it from a different approach you know I was and maybe you experienced this as well Quincy a lot of resources on the internet try to explain technical terms with other technical terms and it just you end up reading the article like four times over before you may or may not get it and I said you know for a beginner I just have to to set that frame of reference like what are people even looking at and I wanted to avoid you know they can always learn the technical terms later I wanted to find a way to make it really clear and I thought you know just a couple creative ways to do that I didn't want to be just another guy writing content on the Internet and I said you know a lot of times analogies help people so what if I just strictly focused on analogies and put a lot of effort into building great analogies and making that the core focus and so you know like any entrepreneur what I did to test it was I just the first article I made was called JavaScript callbacks explained using minions and so it's for people that you know after you're an experienced developer callbacks make a lot of sense but for any newbie it can take you a while to get it and it's obvious after a while and I said alright let's just put this out there and see what happens and I got considering that was my first piece of content that I had ever really posted it got a pretty strong response got a bunch of people sharing on you know Twitter I said I might be onto something here and then you know after that I was able to reach out to yourself you know who was really nice and letting me post in the free code camp publication and a couple other people in at places like site point and whatnot and they all loved the concept and I was like I guess I'm onto something here so it was really nice to have that validation from people like yourself but it was started with just you know I think this might be interesting but I'll you know try to write one of them and see what happens yeah and since then you've written a wide variety of analogies just off the top of my head I can think of a lot of them you explain CSS using an ice cream sundae yeah yes yeah popular you arrived a model view controller using yeah drinks at a bar yep and and some of these people just write to me and say like finally I get it like I wonder what the heck the relationship behind betwee these things was and now yeah I'm I'm working with it I envisioned myself manipulating a Sunday that's what I'm looking for I guess the way I thought about it it's kind of like exactly what you said like people understand these relationships between existing things like an ice cream sundae or an ordering a drink at the bar and I didn't want to try to teach coding as an entirely new system and say oh yeah there's these highly technical things and here's what they do because that's when it gets exhausting right I wanted to say hey it just fits into this system that you know and all you have to do is learn the syntax and stuff like that and go from there and a lot of technical writers I can say this because I I read maybe a hundred articles holy medium publication and a lot of people like will use they'll use a lot of jargon and the point to other articles and at some point my question for them is why should people read your article instead of just going and reading Wikipedia entry because that's what Wikipedia is it's basically exactly whole bunch of it early jar yeah but it's not particularly accessible to a newcomer exactly yeah yeah that's right and you've also created some interactive tutorials where you can actually go in and basically step by step you can interact with the analogies this is really cool and you did all the design of your stuff which is really impressive like all the assets you see when you go to RTF manual do those assets were created right here by Kevin yeah exactly and the way I figured out if you know that might be worth my time was people would either send me an email or they would comment on the medium post and say wow this is an interesting article but I love it if there's a way that I could participate in it and you know make it interactive I said oh wow you know that's a good next step because that's a more active learning method it would probably be a little more fun for people to do it going along so I just said you know all right that's a good idea I'll find a way to do it and so what you're describing is essentially like Lean Startup methodology right Leah the people who are using your product and making product design decisions based on that feedback yeah exactly and especially with something that seems this crazy right you know at the beginning I was like am I just insane or is this actually gonna help people and the easiest way for me to that quickly validate that was you know just putting out one block and then what I found was you know from reaching out to people like yourself and a couple features at like General Assembly and first step coding they all said oh we try to integrate analogies into our lessons and this is just like brings that to a whole new level so that you know the experts were already doing it and it fits in exactly with what they do so how do you come up with the analogies like you just sit in the bathtub and rock back and forth how does it happen there's like there's the different phases in it it goes through my head as well because I'll you know think of a concept like CSS positioning that I want to explain and sometimes it can take a couple days and I like creep into the selfdoubt phase though there's no good way to do this and then inevitably I find something and honestly it you like from the creative process you just have to like get yourself in different situations and pull your brain different ways and I'm trying to think if there's one way that I do it I you know I play soccer so I like play soccer and then think about it on the train ride home pace around my apartment but it takes a while like there there's definitely a creative process and I'd say the biggest thing you know you know like if I decide if something's good enough an allergy or not is I really feel like people have to understand the different pieces they have to understand the relationships between different pieces and these aren't onedimensional analogy is where it's just like I'll give an example out of people say like variables are like a bucket where you just plop a value in bucket and all that that's true that doesn't tell you anything about like the relationship between the entire system so the one biggest you know parameter I use is can people understand the relationships between the elements in the system like an ice cream sundae people know the the scoops the cherry these people understand how those things relate to each other right and that's the key to a good analogy as opposed to analogy that just kind of falls flat like what I would call like a low effort analysis even the bucket level is more helpful than trying to like explain an a variable in a very technical way right even a bucket is better than then trying to make it a big technical system but I'm trying to agreed so I mean I applaud their effort but they need to go the next level and hopefully people won't have to reinvent these wheels hopefully they'll just use some of your amazing analogies love this yeah incorporate it into you know courses exactly University classes and stuff yeah so let's talk about your motivations and aspirations behind creating this projects you already have a full time job going home nights and weekends and you're thinking of these crazy analogies and you're questioning your sanity while you're thinking about stuff like that talking company a little bit about how how you decided to do this and what gets you up and going every day yeah I the way here's the way I think about it and you know how I think it might be able to help people most directly is what would happen when I was starting my previous company was I would come home after you know doing business stuff and that like 700 p.m. start trying to learn code and then by 100 a.m. I need to go to bed it would always be very unclear if I got anywhere on any given night and sometimes we run into a roadblock and you just say oh wow now I'm gonna have to wait till tomorrow to get my partner to explain this to me because I have no idea and a lot of people don't have a technical partner you know they can sit down with and get an explanation from and so what I wanted to do was bring in some sort of predictive quality of just saying you know what if I if I'm working from 700 p.m. to 100 a.m. I better get something out of it you know I better learn something and so I was thinking of if I can set this expectation in someone's head like callbacks if they just have an idea where the callbacks thing is going they're much more likely to like feel they're progressing along their coding journey as opposed to Jess oh man I'm running into a roadblock I don't know you know what the next step is or if I'm even thinking about this correctly but they can say you know what if I put in the hours here I'm gonna get somewhere so that was kind of the motivation for me and and you know at a greater level it's creating a different a different way to learn I'm not sure how to put it well I talked about the neuroscience behind it now yeah because like the the human brain is essentially like a relational engine and that's how we yeah it is through relationships literally neurons connecting with one another yeah and this is something that I learned midway through the process that encouraged me to keep on doing the weird little analogies is what's a call it's called is associative memory and so your brain it makes a lot easier to recall information if it's stored in a system and what I thought was like when you know you traditionally teach a new coding topic let's say CSS positioning you teach it one by one people would say hey this is what positionabsolute is missus what relative is and just like go at it one by one and what I wanted to do is quickly get all those relationships into people's brains at once and so it's much easier for them to recall later and what I realized was that the analogies that's why people like them so much is because it already taught them those those relationships they didn't have to form them themselves and like magically discover it they could just say oh yeah now I understand you know how these two things relate do you have any any specific advice for people who are learning to code maybe little tricks to leverage the neuroscience to to learn a little bit faster in terms of little tricks begin using my tutorials is the best I have right now I'm trying to you know like a better expert on this meat than me might be Tim Ferriss or something like that but the biggest thing for me it's kind of like the difference between memorization and understanding is you can like pack together and user interface let's say and like you know build it once but if you want to like feel like you have a grasp for some you're gonna have to understand it eventually and so I just think that you know it just depends where you want to cross that that bridge you know you're gonna have to fill that understanding and I think it might be better to do it upfront and really try to understand the whole system when you can but otherwise you might say yourself out for a long like facing one challenge at a time right and I think that it's extrinsic pressure putting putting yourself in a situation where people are depending on you to learn effectively it was a technique to kind of coerce yourself and still hurting faster I would say the one biggest thing is just like have a project that you're motivated to move towards and that you want to see happen and that's for me you know it was obviously in my business is that I guess I could wait for a long time for my technical partner to get to that part or I could just say you know this is the one thing that's holding our business back I need to learn and so for me you know just just putting it right into a project and and something that I that meant a lot to me that was everything because otherwise you know those those 7 p.m. to 1 a.m. nights become really exhausting and that's the one thing that really pushed me forward was focusing on you know that that goal that me and my partner were building and based on your experience teaching yourself were there any strategies you found in addition to applying these analogies that just really helped you understand and and learn yeah I I really like the active active learning methods you know just like doing something like free code camp or code Academy or any of those but something that's going to get you immediately involved and I think I like what free code camp does with you know the community of being able to show it to someone and say hey we're a community of people that are even if we're accomplishing small projects where we're moving along so I would say that's a big thing like do not put yourself in a and say I'm not opening at this door until I know code because Yahoo that will be a challenge but I think you know just finding different reinforcements or things you can feel good about you know just just finding successes along the way that's that's everything because in my case you know the success might have been getting a user interface or a wireframe ready to be tested with users and of course it would get thrown right back in my face right the users would be like this isn't good but I was just proud that I had something that they could use and I could get feedback on and move my project forward and that's that's huge you know the after that I can take that constructive criticism until the next thing so you know having that kind of intermediate goal that's really important right on so just to recapitulate what you said just having basically having kind of psychological checkpoints you cross and getting feedback and not putting yourself in the peroneal room so there was a great question on Quora somebody asked how can I learn to code in one day and the answer was hilarious it's like go directly to the North Pole and prop up your chair in your satellite internet connection you have three months of day find a place for a three month day yeah so it's important I mean I'll just I'll just totally echo what Kevin said it's absolutely important that you get involved and you get feedback from people and that you don't you know the Chinese have a very important expression that I always like to cite quad mutton haiku our zeta Plumbing's ITER which means to close the doors and to build the chariot indoors of course you never know if your charity is actually good and so you take it out and you drive it but yeah this one guy from Chinese Lord just spent months and months building this chariot and of course the second he took it out to drive it it just fell apart yeah you know if you're not constantly getting feedback and asking people for input and things like that you're you're kind of building the chariot behind closed doors yeah what's on the what's on the agenda Woori what are your top priorities with our TF manual right now yeah so I definitely want to cover more topics of you know the basics whether it's from JavaScript CSS I've got a sequel article coming up I've got to get one like a git very basics coming up but I think the greater thing is to just turn those into interactive tutorials and something that someone can participate in like I just remember all the time struggling when I was learning of not understanding the system and I would do something silly like mix JavaScript and jQuery and my partner would go those are written differently you can't just throw those together just because it's all in one javascript file you know those are slightly different and you know just helping people along with interactive tutorials I think is the next big thing and and what I'm looking for is if that can actually help people learn faster so rather than you know searching for articles or you know trying to do whatever you can to find stuff on the Internet just saying you know here's a simple system that'll the tone for you and then after that it'll be a lot easier to learn like all the little technical nittygritty but just to have a level of expectation so I feel like the big idea here is it's starting with content but moving towards an interactive tutorial system that people can participate in and then feel good about the progress that they're making and understand that if they do put in the hours they'll get there it isn't just a series of running into walls right on well everybody be sure to check out some of Kevin's articles below I strongly recommend the CSS positioning with an ice cream sundae one of my favorites that's a great place to start and then just dive through as many as you're interested in doing you'll learn a lot of cool concepts in a lot of very memorable ways that'll any through familiar with the concept it might help further solidify it also below I've got a Twitter account for Kevin I strongly recommend you follow him I follow him and he also has a mailing list which I signed up for and you should sign up for two if you enjoy his work and check out his interactive tutorials he's got one on JavaScript that involves minions like minions from Despicable Me in the movie which were eager to show my daughter once he when she is old enough to keep the fun enough so thank you so much for joining us Kevin it's been a pleasure talking to you and learning more about everything you're doing and thank you for all the great work you're doing Internet helping people learn yeah and Quincy I really just appreciate your support from an early stage when a few people knew about what I did and you jumped on board early I really appreciate that absolutely I'm thrilled to help help signal boost and help people discover the great work you're doing so have a beautiful day thank you for joining us thank you everybody for tuning in yeah thanks so much guys