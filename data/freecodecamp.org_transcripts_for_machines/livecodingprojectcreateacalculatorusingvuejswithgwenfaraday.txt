all right all right hi everyone um so today there was actually a miss a mix up where we kind of mixed up the stream keys and so i have actually been building a calculator for the last hour and it wasn't live so yeah sorry about that it's an hour late but i'm still gonna build the calculator if you don't know me my name is gwen i run a channel called faraday academy here on youtube and today free code camp has nicely let me continue my series of streaming all of the free code camp projects but built in vue.js and you can find the link to the repo for all the projects it's right in the description below specifically today i'm building the calculator project and so let me just give you the breakdown real quick so the calculator is of course one of the front end projects on the free code camp site and i'm going to be building it with view this library called math js which basically helps with well mathematical operations in javascript it can give you a safer evaluation function so you don't have to use eval in javascript and i check the source code it doesn't use eval under the hood which is good and it also helps you with rounding errors using different types of numbers like big num stuff like that um bootstrap view same thing i used last week when i was building the drum machine just for a little bit of styling it's a lightweight styling library and then here is not really a mockup but this is actually a screenshot of the calculator that i built for the free code camp curriculum five years ago and so i'm pretty much following the same pattern except i'm making the buttons look more digital and modern but you know it's almost the same thing so by the way here's my code pen and this is the calculator i built back in 2015. so let me just see real quick make sure i can see the chat yeah so this is a calculator i built way back then and i was checking you know for so long i didn't want to look at this code i just didn't want to see it i was like oh no what did i write back then um but basically i'm using jquery and where is it where is it i am using yeah i'm using javascript's eval function which if you read mdn or any of the other documentation sites for javascript you know they'll all say don't use don't ever use eval because it's not safe so i'm not going to be using that today i was just trying to i guess look at what i did back then but yeah i mean only so many ways to do a calculator now since the stream accidentally started an hour ago i'm kind of starting in the middle but not really because basically the only thing that i've done so far or the only things that i've done are i started the view app so view create started a new view app i installed bootstrap view which i set up here where is it in my main.js i have to of course import the library use dot use to set up the plugin so i can use all of the components with vue and then import the styling so i imported bootstrap and bootstrap view so that was what i did for setup in my app file i added a container in a row and a column just to center the calculator on the page and then in the actual calculator it's kind of weird to start in the middle but i'm gonna i'm redoing all of the javascript here so i'm gonna start from scratch in the actual calculator javascript so but yeah so the buttons are actually inside of a card a bootstrap card and i have the output screen and these button this container with all these rows that contains the buttons and so last week with the drum machine that i built in view i used divs to kind of make the buttons look like this as square but someone pointed out to me that actually for accessibility reasons i should be using you know actual html buttons and not just divs so i changed that today and for the calculator i'm using actual buttons so i guess for screen readers and stuff it will be easier much much better for navigation all right so that's pretty much it and then for styling i just have some styles pretty basic setting like height and width of the width of the card height and width of the buttons so they all look nice and square bootstrap kind of made that easy and then i'm also using bootstrap's colors they're very warning colors for these orange buttons if you don't know i mean i'm sure so many calculator examples are built like this but let me open the mac calculator oh it popped up on the screen so the mac calculator looks kind of like this and it's pretty much the same so orange operations um and then they have you know dark darker colors here so kind of mimicking that a little bit um i'll probably update the styling a little bit later but for right now i'm just going to start adding in the viewjs javascript so yeah hopefully that's not too confusing to start with it's not really starting in the middle because it's mostly just styling that's been done and now for the javascript i'm gonna have to add um basically i'm going to have separate operators oh let me pull up the calculator one more time uh so i think this calculator does it so let me do just yeah and so you can see the first operand right the 54 i typed in and then i hit the operator which stays highlighted and then i start typing in a second operand which comes up on the screen and then i can hit equals and it will evaluate the operation the expression so um i can yeah so i'm going to use the same basic method here and i'm going to do store these variables in data so let's see hi quincy thank you um yeah uh let's see i have operand so i have operand or i'll call this first first operand and second operand unless someone has a better idea and this is going to be a string because it's easy to append numbers onto a string i think that will be the easiest way to do this and then i need to store the second operand separately as a string and then i also need to store the operator which will also be a string and then basically yeah basically i'm going to be displaying the first operand unless the second operand value is not null then i'll be displaying that one and then when i run the evaluation or when i hit equals that will evaluate the expression into the first operand value and then that will be displaying again on the screen and it will wipe out the second operand value if that makes sense so let me try that so i shouldn't need a separate display value um so let's see methods and actually i don't actually think i'll need like different methods for add subtract and that sort of thing because this math.js library has kind of a cheat a cheat method so yeah if you can see this math dot evaluate where i can just pass in an expression so i'm going to make my own multiple operators i don't think so because so when i use um this calculator i mean not this whole left hand side but when i use the basic calculator 7 times 9 and then it if i hit another one it evaluates already so i don't actually need multiple operators because now if i if i hit minus it just ran the evaluation and now i can subtract and then if i hit another operator it runs the evaluation and so on so yeah so i don't think i do oh the order of operations um yeah so maybe maybe that's version two then if i want to have order of operations capabilities so you can type in multiple things or a whole expression or something maybe maybe that'll come later so let me start off this way then and plus if i have all of these stored separately i guess i guess if i wanted um if i wanted to do that that way i could make an expression string and then just append everything into one string and then evaluate the whole thing yeah let's see how this works uh let me do eval make my own eval function and um so what do i want to do oh yeah let me import the math js library oh no first okay so i have eval let me set up all the methods first so i have eval i also need an append number which isn't just number because it can also be a dot so i can make floats and stuff so um a pen character i guess should i call it that and this is actually the first method i want to set up and what this will do will take the operand right now i'm just going to work on the first operand and then i'll set up the logic to handle the second one too so um this will take this dot first operand plus equals uh whatever character i pass in and then for a pen character here i can call that method via an on click so let's see um yeah i highlighted all the right things so okay and now escape insert and now i can just add at click to all of these buttons and it will be append operand no no no what did i call it a pen character pen character and then i have to pass in the character which is different for each one of these um so i won't even put a placeholder there all right and here i'm gonna pass in one oops and here's two here is three so used to the shortcuts on a mechanical keyboard and i use this default just a plain keyboard for uh live streaming so it's a little bit different okay so seven eight nine oh wait i do want a pen character on these other ones too okay i'll fix that in a second so here um is zero dot actually for the for the operators i don't want a pen character so i'm gonna change that oh it doesn't like that i'm passing in a dot without that has to be in a string okay all right so oh yeah and then i need to display it in the screen here so like i said right now i'm just working with the first operand so that's all i'm gonna display for right now so first operand cool um all right so let me take a little pause and fix the styling inside of here so let me re i guess realign this with flexbox let me look for bootstrap's flexbox characters okay so flexbox options let's see um visibility i don't think i'm in the right thing let me look again oh bootstrap utility classes here they are so oh yeah because these come from the regular bootstrap library which i also had to import so border utilities flex utilities so it's taking me to the actual bootstrap documentation and flex display flex okay and i think um let's see oh this isn't a row so this doesn't have display flex by default so let me do display flex here and oh yeah because i have to put stuff in there and then i want to do a line item center and then give it some padding so let me do padding first so padding of just on all sides of two which i think is something like eight pixels okay so that'll bring it out from the left side and now i want to center it vertically which should be align items so align items so i'll do a line items center so after flex align items center okay cool that looks better i could make the font a little bit bigger but i think that's okay yeah i will have to show more than the first operand but i'm just setting up the first operand so i could get a pending working okay um but now okay so with the dot i need to handle that special so if someone's trying to pass in a dot they should only be able to do that one time so let me also it's kind of annoying not having a clear button i might just add that and then figure out how to fit that in the calculator after let me put that after the card oh no um oh let me just add another row then with just a clear button for now and then i'll rearrange the buttons later so let me add this row at the top and because this will be an easy method to just do so clear and all this be ac or just c yeah all right so because as i'm working it's going to be just convenient to have a clear option so clear and uh for right now just for the first operand so i'm just going to set that to an empty string okay so if i have this here all right so that clears the value and it does look kind of weird being like on the lonely space up top i could make this display block so the button goes all the way across um oh yeah but it uh it gives it a width of 100 but the width is already set so let me inspect this rules yeah because i set the width in a scoped style so i could overwrite that so btn block um so since this is scss i'll just nest a style in here so and dot btn block and i'll do width 100 percent okay so now the clear button and let me also make that orange real quick so let me do a variant variant which will be warning all right okay that doesn't look too bad let me get rid of that okay so now i have a clear and oh yeah for the periods i need to have some logic around when and how you can use a period um you can only use one um decimal point in a number so i have to search for that um so let's see in append character i need to check so if uh this dot char is a period then i have to do basically um let me just nest an if statement uh so if um this dot first operand dot contains so if it already contains a period then i'm going to do this dot i'm basically going to do the same thing as here so i'll append it only if it oh if it doesn't contain it so i need to negate this actually so if this.first operand contains a period if it doesn't contain a period already then append the period otherwise do nothing um i don't want to give them a warning or anything so let's see if that works so three point eight point oh it's still doing it um so let's see okay so there's no problems let's see first operand if it doesn't contain a period so i can maybe i'll do a debugger sometimes when i'm live streaming my my debugger doesn't work too well but let's see um so if this dot shot oh this dot charm man okay so yeah it's the ch because i want to check against the char that i'm passing in so let's see if this works now okay well now it doesn't let you ever put a period in so if this dot char equals period um so let's just see if it hits the log statement here let's do let me go to console and make this smaller oh wait it does have oh this dot first operand dot contains it's not a function okay so i think that's my issue and i thought there was let's see javascript contains okay so there's oh is it includes i think it's includes maybe i'm thinking of something else so includes i think that's what that's the method that i want all right let's see point so that's not working well it's getting here anyway so i need to find out what this is so let me send a debugger here too many too many what too many period yeah i know i should only have one in there so let me do one period now it should pull up that method okay so it's that first operand includes so i should be able to see wait the first operand is one and then i should be able to see let me step over step over yeah char is that so this expression i guess it shouldn't be evaluating to true if not let me see let me get rid of this statement and just log it out so console.log and i think maybe my logic is backwards here it adds a period if there is already any period at all it's skipped you need to put the outer oh yeah that's right that's right so i need to wrap this in else all right thanks all right so now it's still doing it why is it adding two did i add it in else if so if the character is a period i'm wondering if this method is getting called twice because now i'm so i'm doing okay so inside of a pen character i call a pen character if the character is a period then it should just run this if statement i don't i don't think it's a misplaced else though because it should only be running this if statement if the character is a period and then inside of that i run another if statement if it already includes that then don't run it basically so this l should be working that's weird um if else that's the right javascript syntax so if char is period then why is it running the second one too hmm okay so yeah i'm not sure why i don't have any other place where i'm appending so let me just log out i guess this one i'd have to do um just a string to differentiate it and then here no i don't think so though because this is only checking if it already includes a period so i don't want to append it because then i would be doing the same thing in the if and the else statement in here which i don't want to do oh let me see okay so let me clear that clear this okay so it's logging out that and now if i do period yeah now it works okay i think i just needed to refresh it somehow yeah okay that was weird uh all right so that's fine all right so now i have the just the first operand appending so now if i hit an operation an operator i need to store these operators in some kind of operator or i need yeah i need to store them in operator so now i need to make um here let's see yeah so the i think that's it no that's good okay so i'll do at click and when i click i want to just straight update the operator variable so operator will equal whatever operators inside of this button so for the first one it's going to be a plus sign let me put these on more lines okay so the first time for the plus sign i set the operator equal to plus for this i set the operator equal to minus and then which one is this oh for times i can set the operator equal to that star symbol and for divide i'll set it equal to divide okay i think that's right and then equals is going to have its own i'll just go ahead and change equals to eval even though i haven't set up that function yet okay so i think all of the functions are correct now let me look in the view dev tools okay so in view dev tools um i'll look at oh yeah i want to look at my calculator component so inside app calculator and then when i click on these it's not doing anything okay do i have an error let me refresh okay so when i click oh that was weird when i started clicking on the operands it updated the operator too huh i wonder why it's doing that because i'm clicking on these buttons but when i click on the minus sign the operator still says plus until i hit another button here and now it says minus i think that's just a matter of refreshing in the view dev tools so let me hit times and then refresh yeah so that's just a refreshing problem in the vw tools okay so let me see if they let me zoom in yet no they don't okay view dev tools still doesn't let me zoom in oh well okay so the operator is getting saved um so now if the operator exists yeah i know sorry tom um i can't zoom in unless maybe i zoomed in via this does that i don't know i'm waiting for the screen to update i think i probably have like a 10 second leg i think right now so waiting waiting lady i don't know that zoom doesn't work oh well um all right so let's see maybe light mode no i think just in firefox in general it doesn't work right now uh i because i switched i didn't i switched to dark mode not that long ago i think it was on one of my live streams where someone suggested me to use dark mode yeah chrome dev tools i should set up a chrome my chrome doesn't have any extensions right now i just use it for ui testing that's it so i could set that up and you know just use chrome maybe i'll have that for next time okay so uh what is it okay so i have the first operand i have the operator and now if the operator exists um actually i want to make a function for the operator because if there's no first operand i don't want to set the operator yet but i'll worry about that in a minute that'll just be a known bug um so the second operand if the if the operator exists i want to start working on the second operand so what i'm gonna have to do in here is set the current operator so const current operator equals let's say this dot i need to check so if this dot operator exists then the current upper operand o current operand operand if this operator exists meaning if they've already hit like plus or minus or something then i want the current operand to be the second one otherwise i want it to be the first one okay and i'm gonna put this on two lines so it's easier to see and i thought maybe that's just in python i thought i could alright so i can still put on two lines but i'll just do it here instead so i'll do the parentheses here yeah that works alright so if the operator has already been typed in then the current operand will be the second one otherwise the first one and so now i need to and i think i can just mutate state from here and actually let me do let here not const so i think now because this should be point oh no it's a string value so um so first operand so i wonder if this is going to be if it's not a pointer so i wonder what is the best way to update this then and to set you know if the operator exists it should oper it should be the second one otherwise the first one and i kind of don't want an if statement inside each one of these so yeah i'm not sure um definitely in the output screen though i definitely want if the second one exists if the second one exists i want to display it otherwise the first one so if second one's false it'll display the first one so that was now let me think about the logic here so i want to do i need to pick the the current one set current operand to string and then yeah that will work that will work actually that's a good idea okay so i'll set it to a string so let me do yeah just a string and then yeah and then here i'll do this so i'll do this current operand thanks that's that's a good idea and then i want the same logic in the else statement so there okay and that will be the same as like this dot second operand or this stop first operand um are these spelled correctly yeah current operand just checking spelling here okay so that should work so let me see if that works actually so let me do 25 plus sweet that's good uh let me see if they're saving in the right places just to double check in calculator yeah i have them all saving in the right places so then technically in eval i could just um do let's see i could do well let me import the function that i want the math function so i want to import evaluate from math so yeah math.js so up here at the top of the script tag i can do import evaluate from math.js and now in eval i can just use eval evaluate and then i need to pass in a string so i'll just add these strings together concatenate them so first going to be first operand oh it has to be this so this actually because i'm using this three times let me pull them off of this so um const first operand uh second operand and operator equals this and then i'm gonna concatenate them with just make one big string so first operator first operand plus operator plus seconds operand yeah um okay so evaluate now i have to store this somewhere so this is the logic so i'm gonna have to do this dot um first operand equals the result of the evaluation and then i'm going to set the second one to be an empty string again and oops and then the operator uh oh wait the operator to also be an empty string so i'm going to reset those two and set the uh result to first operand um yeah let's see let me do that all right so 12 plus 3 equals 15. and now if i do it again i should be able to oh no oh no no 18 21 no it's adding every time it's not resetting the operator why not um hmm let's see the operator is blank here so that's weird i need some water all right so the operator is blank in the dev tools um we need to give a hard refresh and see if it's just buggy plus six okay and now if i try it okay yeah now i can append and now minus six no um yeah so there's some things going on here and now clear doesn't work maybe i have a error no errors anywhere hmm let's see 23 plus 3 equals 26 okay that's good let's do plus five that's good equals thirtyone that's all good let's do minus three equals 28 okay everything's good so far um now let me add an appended number no what happened in my devtools refresh 31 34. okay the operator is blank it's an empty string i keep refreshing it's an empty string the second operator is blank first operator is 41 so it should append but instead it's adding three um oh oh i think i know why okay so this is evaluating and becomes a number value so i think uh javascript okay so i think because the result of evaluate is a number and not a string so then in javascript's mind i'm i'm so i have 44 the number and then i'm adding 3 the string so it thinks i want to add 3 the number so it parses it as a number and adds it of course if i add a period okay yeah and now i don't have the includes function because now first operand's a number so i need to change this to string basically yeah so um parse int oh yeah so it would be two string i think at the end so two string and i think that's what i have to do i don't think i have an str function like in python so let's see if this works yeah that's that's one thing about types in javascript let's see so 12 plus 3 equals 15. now if i do yep okay minus 5 equals ah okay cool so that all works as intended that wasn't uh didn't take as long as i thought it would um yeah and then divide by 9 equals oh yeah so now the rounding in javascript because i think if i do let me do 10 10 divided by 4 which should be 2.5 it is 2.5 okay so uh no problem there i think there are some numbers where it doesn't it doesn't round or there are some numbers where it doesn't round quite right maybe the math library is taking care of that for me so yeah so is there anything else i should do i should probably do some cleanup like when i um do plus like when i hit one of these symbols and it's current i need to set the class also i don't like that it gets rid of the border when i hover so let me fix some of that some of the styling stuff um so on the button let me do and hover because i'm using sass and so when i hover over the button class i want there to be no change in the border so border one pixel solid i think oh yeah and then i have to set i do need to set the color because for the dark colors it defaults to white and bootstrap so i'll have to set black cool that looks better and now let me see what class it's adding to make the color darker because then i could set active that as the active um operator i guess so let's see hover so let me set the hover state on plus and what styles does it get offering me oh yeah it just it's just basically darkening the color and i think it's doing it in sas so i don't know exactly the percentage that it's actually making it darker um let's see yeah i'm just gonna come up with a percentage because sas gives me those colored classes so i can do um and hover so when i hover over a button i'm going to set my own um background color is but then i should set a variable here i guess so let's see what's the regular color oh the regular color without being hovered over is orange so let me set these variables in sas and i don't know if i can do these inside components i guess i can because i'm just writing regular sas so let me set a variable called orange and orange is that color and then oh did it not like that oh because i didn't set the background color okay so now i can do dollar sign orange yeah and i'm oh wait i'm hovering over all these that's not what i want um okay so button okay let me do the other variables so let me inspect this and get that gray color so here's the gray background for the other buttons and i'm going to put that in a variable too so i'm going to call this dark gray and there we go and now so the button now i'm gonna have to set the background color of the buttons to be default of dark gray and then if it's a btn warning class then i want to set it set the background color as orange okay so now it should be overriding those colors and this will let me oops um and this will let me do hover hover classes now so now i can do darken use the sass method darken and what was the other what do i oh yeah i pass in the color first so dark gray and i think there's a way to access the relative color here but i can't remember how to do it so let's do darken it by ten percent and if it's a warning one then we can um oh yeah so basically be doing the same thing get rid of the border and then i'll do orange here it might be a little bit more than it was okay and now so this is on hover and now i want that same um well i probably don't need 10 let me just change this to 8 it's a little bit extreme um and now i want that same thing basically if the button is active so if i clicked on one of these ones one of these four then i want it to stay active i guess so let's see um let me do so i need some kind of special operator class here a class on the operator buttons because clear you know has warning but i don't want it to stay active so i need like some kind of i don't know i'll do a class of operator here and okay so let me paste that and paste that and then okay so all the operators have a class of operator now maybe i didn't arrange this sas the best way because this darken color i also want if if so yeah this is more code i guess than it should be um i might look up a sas shortcut for this so anyway if it has the class operator as well as button then i want to also change the background color to be darker background color and i want it to darken so oh wait oh yeah i only need this operator class and button warning because i don't actually want it in the other one so yeah that will work because i only ever want it for dark orange of course i could save dark orange in a variable too oh wait only if it's active though um active okay so maybe i'll have the class called active operator and then in my class i'll make this a dynamic class and basically only set that class equal to so let me make an array here or let's see an object yeah i'll make an object and i'll give it the class active dash operator oh wait this will have to be in quotes because it's hyphenated only if um i'll give it the class active operator only if the operator variable and this is where prettier is is nice because i have it set up correctly on save it just formats all my code for me i don't have to do any of this okay so if the operator is um the forward slash then i want this button to be set as active operator so let's see yay now it's active cool so i have to set this up for all of them now basically so and is this that different no i just have to update this so i'm just going to copy this whole thing actually paste paste paste and okay let me get rid of that oh yeah get rid of this button and okay so now i have all of those and now i just need to update this because i pasted it in so this is multiply and this one is minus and this one is add okay well hmm oh it's the same thing in these i forgot about that oh well so that one's add this one active operator is oh wait why do i have b call around that one and none of the other ones i should get rid of that i will in one second let me finish doing this i was wondering why it was a different number of tabs inward okay so do that and now let me get rid of this column here so so v oops wrong button uh there okay so 32 plus yep and now it's active so it's a little bit darker plus 6 equals yeah and now it goes away after that so now if i do minus it stays highlighted minus 52 equals negative 14. okay there are other things i could do like you know instead of having this clear the whole way across let's see it's after 12 already instead of having this clear the whole way across um i could put other buttons like that uh sign button is that even on the math calculator yeah changes the sign so if i have an eight i can change the sign to negative eight positive eight i can change it into a percentage um let's see cool yeah i think it turned out pretty well um there are some known bugs like you can hit an operator before anything is in there so i i should make an operator class really equals oh so okay so it would be zero so oh yeah that's what i should do actually i shouldn't change the operator at all what i should do is if there's no second operator no first operator then can i do this yeah i can stack it should be zero yeah so it's zero now cool so it would be zero minus six equals negative six yeah that makes sense actually change the colors on click instead of hover i do need some kind of hover like hover state but now if i click on it it stays in that state so i know that it's active basically okay until i hit the equal sign now when i so when i have like let's say i have plus um six and then i do minus i should it should evaluate if i try to hit a second operator it should evaluate if you click a number after an equal sign it starts calculating a new math problem if you click a number after the equal sign i'm not sure so after the equal sign so if i hit equals and then another number mean it kind of i guess you start calculating you mean you can somehow make a math expression here this calculator isn't isn't up there yet so you calculate one problem and instantly start a new problem i isn't it doing that though maybe i'm confused at what you're saying but like right now now that hit equals i start a new problem equals and then the new problem because it's reset to the state it was at the beginning except the first operand equals this number windows calculator so let me actually so when i hit a second operator right now it doesn't work as intended so when i hit if i do plus three now if i hit a second operator it needs to run the eval function before and then store the second operator so how am i going to do that i think this is the last thing i'm gonna do in this stream because i was streaming for a whole hour before it went live so i talked about a lot of stuff thinking that just i was like man the chat's really quiet all right so let's say oh yeah so this operator operator equals i need to make a method so i need to make some kind of method here called like update operator and okay um update operator and then oh yeah i'll have to pass it in here so operator which doesn't overwrite i mean this is kind of confusing maybe i'll call it oops i'll call it op here because there is a this dot operator which is on my component state here oh num plus num yeah i don't i'm not gonna have it i don't have time in this stream to do like a whole expression i'm just going to keep it the way it is for right now but if you want to make a pr to the repo and fix the code you are more than welcome to so pass in the operator and i will set this dot operator equal to the operator that i pass in so now let me copy this method and now i'm going to change it here so update operator the method and then do the same thing for all of these really so all right update operator yeah for minus update operator that'll give me more control over what i do when i update it uh update operator all right so now i have update operator let me just make sure that's working wait yeah i did that right okay um i forgot what i did for a second so now that i have update operator so now inside of update operator i can check and say if this dot operator so if there's already an operator set then i can run this dot eval um yeah call this.eval evaluate the expression and inside of this.eval it's going to clear the second operand and the operator so then after eval because they've already typed in a second operator i want to go ahead and save that after but if there is no current operator anyways i want to save the operator so i think this will work yeah i haven't pushed the code yet i will in just a second um let me do 23 plus five and now instead of hitting equals i'm going to hit minus cool so it ran the operation and now it stored the second operator so now i can have another second operand so 5 times 6 plus 3 and you get the idea okay um okay so it's running evaluations as i'm going i think that's pretty good um there can be some improvements but i think overall it turned out pretty well what do you think yeah i'm gonna do a commit so is there any more cleanup i need to do any useless you know i can do small cleanup like that and i think i'm not using border box that style one style box sizing yeah um let me see if it still works yeah so i think that's the last thing to clean up maybe we'll find more stuff later but overall i think it's pretty good all right so let me stop the dev server then thanks does anyone have any questions comments statements you want to make about this calculator or view or anything let me go up a directory because the git repo contains all of these folders so my get free code camp projects view i'm going to do git status and i added the calculator app um i already have a get ignore file that's good so i'm going to do git add just add everything get commit dash m code from live stream thanks thanks kumar uh code from livestream on i can't believe it took me an hour to realize that my app said i was live but it wasn't actually going to the free code camp stream so sorry about that git commit dash m code from livestream on july 10th july 10th for me anyway git push now let me see if it updated oops if it updated yeah i think overall this yeah so now i have the calculator app code inside of here i think overall this one turned out much much better than my old one if you want to see my old code i'll post it in the chat here you can take a look at what i was doing back in 2015 um just eval all the things basically in jquery so yeah definitely come a long way in development i think i was trying to do some object thing but i couldn't get it to work or something happened i don't remember now but yeah there's my old calculator and the new calculator much better cleaner not not great the styling's not great but uh bootstrap helped a lot so yeah thanks for joining the stream today uh oh what is the theme oh real quick uh let me go to the theme this is a plugin that someone suggested to me during a stream actually so where is it where is it it's pale pale night theme it's this theme and i thought it was kind of weird like a lot of purple at first but it's it's growing on me i think i'm going to keep it for a while so yeah it's a great theme was used vs code to highlight that code block when you wanted to change indentation oh i use vim so envious code i um use vim whereas vim key bindings basically so if i'm in like if i'm on this line i can press shift v and it highlights the whole line if i want to highlight part of a line then i do v and then i can w over or b for back highlight different things v and then i can go up or down with j and k i can go down many lines at a time yeah vim is great i recommend it and it makes it even better when you're using it in vs code because you get all of the vs code shortcuts and then you get the vim shortcuts too and if you use vim enough you know copy pasting in vim can be a real pain going from file to file but envious code i think it makes it a nice development experience to use vim inside vs code so yeah i have enjoyed it a lot especially using a mechanical keyboard where i can kind of set set up my keys how i want and then set some macros like multiple keystrokes saved into one key where i just press one key and it does a bunch of things which is fun so yeah thanks so much for the stream you should check it out if you have any questions or something leave them in the comments below and feel free to reach out to me i also have uh my youtube channel faraday academy you should check it out i do lots of view and python content over on there and i hope you all have a great day take care