all right ladies and gentlemen welcome to introduction to es6 and you know we might want to actually call this es6 plus because i'm going to throw in some es7 and 8 features that i think are that are good and exciting and that you should know as a javascript developer if you're a little unfamiliar with how javascript gets new additions to its programming language the ecmascript foundation who runs javascript at the end of the day every year they do an update and they release new content es6 was 2015 es7 2016 es8 2017 and so we're going to be talking about some of the latest additions to the language over 17 lessons and four challenges i will be your host if you will for this course my name is dylan israel i am a content creator on youtube i also have udemy courses scrimba courses i'm also a fulltime frontend engineer and if you click this icon you can go find some of my videos and check it out but let's go ahead and dive into all the fun strings historically in javascript have been sort of a secondclass citizen and have haven't got as much love as other programming languages might have in the past so what we're going to be talking about right now is template literals and what that's going to allow us to do is going to first i guess first let's go ahead and showcase how what the issue might have been with strings in the past let's say we had a word one and we set this equal to dylan and we had word let uh word two equal to my last name of israel so if we wanted to concatenate this in the past in some sort of constant if we want it doesn't really matter and we'll say full name if i concatenate this in the past we would have to do something like word one plus and then because we want it to look nice empty character plus word two and then we could of course console.log out word uh full name excuse me and you'll see here that we get this you know it's nice this isn't the prettiest way and it gets very um it gets very long very ugly very quickly right this is a pretty basic example so template literals uh allow us to using backticks let's go ahead and delete this using backpicks which if you're not if you can't find backpicks on the keyboard i didn't know where they existed they're to the left of the one key on on a keyboard we can use this dollar sign open curly brace closing curly brace pass in our value here put a space go ahead and pass in our value 2 here and you'll see when we save now we're able to print it out and we can do this much easier easier rather than having to repeat ourselves with pluses and spaces but that's not it there's a lot more that we can do with template literals as well template literals also give us an easy way of having variables say we wanted to have you know let num1 equal to two and let num2 equal to three and we didn't know what they were going to be we can actually just have because this at the end then it's just javascript we have num1 plus num2 and we can do this this sort of concatenation of our variable similar to how we would normally do within our template literals now last but not least say we wanted to actually have a multiline string and have that print out let's go ahead and comment this part out here and we'll create this variable called example in the past how we would have to do a multiline string we'll do uh hello world hello and then we want world to be on next we'd have to escape the with the slash and then we can go ahead and add world like so and then um because of the way that console log works with uh it's not going to actually showcase it here as you'll see it's going to print it out on one line so what we'll have to do is we'll jump into our index html i'll create a little paragraph tag and what we're going to do is we're just going to give it an id equal to example and then in our index.js instead of console login we're going to go ahead and just target that so that we can actually see it being on multiple lines on the page so we're gonna say document get element by id and then we're gonna say example which is the id on the page or set this equal to our example variable let's go ahead and save it excuse me dot inner text because we need to we're trying to set the text value of that and then you'll see hello world on two lines although this slash n is really sort of obnoxious so how can we go about i'm fixing that well let's go and use our variables here with some string str uh with our some template literal so we use the backticks and notice on the first line here i'm going to put my name which would be word one and then on the second line i'm just going to go ahead and put word two on here and us formatting our string like this we'll also get dylan israel on multiple lines and if we obviously didn't want that we could do it on one line as well but it allows us a very easy way a very clean way to have multiline strings one of my favorite additions to the javascript programming language has been destructuring objects so see here we have this personal information object with first name last name city state zip code a bunch of stuff now what we want to do is or what these structuring objects gives us the ability to is it gives us the ability to essentially write shorthand code as well as reassign values uh what what i mean by that let's go ahead and create a const here where you'll see we have this opening and cr and closing curly brace and what we want to do is we just want to put first name we want to access first name because personal information.first name every time we want to use it that's kind of a pain it's kind of a long name we're going to access last name and anything and we could access every property on here if we want and on this side we're going to go ahead and just set it equal to the personal information constant see what that's going to give us the ability to do here is and let's go ahead and use um some template literals or um string string exfoliation here and it's going to give us the ability to just do something like this where you can do first name and then last name and it's going to print it out like so and we don't have to do personal information.first name every single time we want to use it but we can actually do one step farther one step further than that is say we wanted to actually reassign the value here we just put colon and put fn for first name and colon ln for last name and we could replace this and put fn and ln to hit those values as well you'll see we have first name and last name now i i would say that if you are going to rename something you know make sure that the when it comes to naming convention it makes sense or if you're gonna do very short names like this in this instance make sure that you follow good naming not only good naming convention but also make sure that the scope of it is very short but this allows us uh in general to destructure our objects so that we can have access to these things and we'll talk a little bit about how we can destructure arrays in the next video destructuring arrays is another great feature that's been added to javascript in recent years it's very similar to how we destructured the objects earlier so we have this name array and what we want is to essentially create a pointer element to de destructure our array so that we can get the first name the middle name the last name in this instance how might we do that well we can go ahead and wrap it remember how we wrapped it with the object we wrap it and we'll get first name like so and we console.log first name you'll see we'll save we'll get dylan right and then uh we can do multiple values right it's and we do we'll say middle name and we can pass the middle name we'll just do a little plus here and throw in middle name and it's going to not look very nice but you'll see we get dylan coding god we're dealing codeine without any space and we can do last name as well but that's not that's not it as uh let's just go ahead and print this out piece by piece so we can see it's all working now you'll notice that it's going index by index we don't have to have all of them but we can and in our instance we can actually reset the value here so first name is actually storing a reference to that zero index so if we wanted to overwrite the value in in in this case we could let's say i got a uh let's go last name i got let's say my girlfriend uh took i took on her last name or something like that and we're just gonna sit hey and i'll now become a clements it's not gonna happen but we'll pretend right and now you'll see that last name becomes clement so this is one way that you can destructure an array if you haven't noticed by now es6 has put an emphasis on writing less code while still being readable and maintainable and object literals are no different so what are object literals well a little bit of the setup you see we have this function here called address maker it takes in two properties city and state let's define a new variable and we'll just call this new address right now we're going to set it to an empty object and all we want to do at the end here is we're in console.log new address if we had let's say we'll have a property called new city and we'll set the value here to city and then we'll have a new state and we'll set the value to state and then you'll notice that we prince print out you know new city austin new state texas as we would expect nothing new here however object literals give us the ability to if these keys are the same as the value that they're passing in we don't actually have to set it it's going to make the assumption so in this case let's say instead of new city the key was city instead of new state the key was state what's going to happen here is it's going to assign the value of city to city and of state to state and we don't actually have to write city is equal to city and state is equal to state as you might have done in the past and you'll you'll see it'll work the same but object literals give us the ability to do that now one caveat to that is if you are going to use object literals just make sure it makes sense don't try to change your object or change your properties so much so that it doesn't make sense but object literals is an excellent way for us not to have to write duplicate code that doesn't help in explaining it but allows us to write less code while still being very descriptive all right in this challenge we're going to try and combine the template literal the object literal and the object destructure and how might we do this with the setup that we have here you'll see we have this address maker function taking in a city and state key in the object we then have this new address where we're applying the values that we're passing in and on the end goal all we wanted to do is console log the new city the new state and the country with it and we're going to use struct destructuring we're going to use template literals and we're going to use object literals all right i hope you took a second to try and figure this out on your own if not that's okay and if you struggled that's fine we're going to go through it right now so what we're going to do here is we're going to create a constant and we're going to destructure our object we're going to pass in the city we're going to pass in a state and we're going to set the reference to the address object that we're passing in this is going to give us the ability to no longer need to say address dot city we could in theory say city city but that wouldn't use the object literal and so what we're going to do is we're going to get rid of the city we're going to do the same thing with state as well or the assignment of city because this is going to know to say hey for the city key assign this city value then we're going to leave country alone and last but not least we're just going to console.log our new address using interpolation or template literals and we're going to say new address city space or comma and then we'll say new address from state and then finally a little one more comma and i'll do a last one here of new address country save it and we're good go so you'll see austin texas united states before of loop is a great addition to the javascript language and let me showcase a little bit of what it does say we wanted to iterate over all these values in the array and perhaps add it to this total value and at the end here all we wanted to do was cancel out console log the total of the incomes we could use the for of loop and it's going to start off as a simple for loop and then we can define const and we're going to say income of incomes in our case we're not going to reset the value of anything in our in our logic nested in the for loop so that's why we're using columns but if you're going to reset income nested in there and use it for some calculation or something like that you would use let so we're going to say cons and we're going to say total gives me total plus equals to the income we're passing and we'll get something like 204 000. now let's check how we're you know if we wanted a console.log out income you could see we're going to get each individual income okay get rid of that so we get sixty two thousand sixty seven thousand sixty five thousand so this income here is saying each element in incomes are iterable in this case it's an array we're able to do something with it and so that's really what the for for of loop does is it allows us to iterate through an entire entire interval so you may have been wondering why is dylan keep saying iterable and not array well because we can actually use the for of loop with various iterables what is another example of a popular interval let's start off by get rid of our previous logic here because they're no longer going to use total and we're going to change it comes to um we'll say full name and we're going to set this equal to a string so you can actually iterate over each character of the string like so and instead of it comes we'll pass in full name instead of income here we want to make sense we'll just call it char and passing char and we'll save it and you'll see here that as we print out our logic we get d y l a n and then so on and so forth and we can actually iterate over strings as well so anything that is an iterable we have the ability to go through so that's map sets typed arrays and we're not going to dive into this in this course perhaps later on we may do an advanced course where we break out all the craziness that you can do in javascript and some of the newer newer types but here you can see that anything that's an interval we can go through with the four of loop in this challenge we're going to pose a question of what do you think would happen if we gave each one of these incomes a bump of five thousand dollars and change this cons to a let and added five thousand dollars to the income would it change it would it not why might that be all right so hopefully you took a second to figure out what this might be and just sort of think about it and let's see what happens when we say look let excuse me let take income and set it you know equal to itself and add five thousand dollars they all got a bonus what are we going to get from incomes you'll notice none of our values change well recently the reason for this is it's not designed to do that you can if you for some reason we're going to add a value to this you don't want to create a new variable you could do that and then store it elsewhere but in this instance when we're using the led and we're trying to reset the value of the four rev loop that's not what it's designed for it's just designed to iterate over iterables not actually used to set up new values or update the values of iterable objects so what is the spread operator this is another great addition to javascript and one i use almost on a daily basis at work so the spread operator you'll see here in our in our setup is we have an array of values and then we're just printing out the values nothing special here let's go ahead and create this example two and this is gonna be an array and then we're gonna say dot dot dot example one what is that doing it's essentially unwrapping the values of example one into example two and you'll see here when we console log it out all the new values are being added to example two and it's also not passing it by reference so he's instantiating a new array in this instance and so if we were to take example two dot push a push and we'll just push a boolean doesn't have to be a number and then we want to check hey did this actually pass this to example one if it was by value no it didn't so because we don't have that on example one there now the spread operator can be used with objects as well unfortunately we're not going to be able to at this time showcase i can show that an example of it but we won't be able to actually see it in practice the spread operator when it comes to objects is a very new feature and something that the babble setting says running on scrimba don't currently compile because they're probably a little bit more strict as they should be but an example of what might happen here is let's say we have example one this is equal to an object of first name set it to dylan and then we said let example two equal to an object and then within here we might do dot dot dot example one and what would happen here if we were to and we're going to calm this out because this isn't going to run what would happen here is that we would have our example 2 essentially it would unwrap the keys and the values that are in example one and we get this object with first name and uh with first name of dylan now there's a bunch of different reasons that you might do this i do it in my constructors when it comes to typescript where sometimes i'll have a default value for first name in case first name doesn't come from the backend so i might have something like first name is going to be equal to not applicable and that way when i'm writing my code is if something's not passed from the back end but i need to have a value another great example is an empty array because that will break our code if we're iterating over something i'll assign an empty array unless something comes fulfilling that in the back end so that's just one way of how you might use the spread operator when it comes to objects once it's a little bit more widely supported the rest operator although not as widely used as the spread operator is somewhat similar and just as valuable so what is the rest operator it gives us the ability to get the arguments out of our function and it's used in a case in which we don't know how many inputs are going to be used so in our example here we have a function add with a parameter called nums and all we want to really do at the end of the day is console.log nums let's go ahead and just add a function call real quick and so we'll take add we'll pass in five or four and cool it prints out four what if we wanted this to take in as many numbers as possible what's going to happen right now is our code is not going to do what we wanted to do we wanted it to print out all of nums and in the past what we might have to do to get those arguments is there's an arguments object for variables and you can see here it's actually going to say look this is on the zero index of our add function if you wanna think of it that way zero zero input then the one input and then we can get the values that way and we do something with that now it's not an array it's not iterable and typically that's what you're going to want to use so in theory arguments have sort of been deprecated unofficially with the rest operator and what this is going to allow us to do is in our input here on the nums you'll see we have the three dots that's why i kind of say it's related to the spread operator and now when we access nums you'll see that we're going to get an array of the input values here so when you're going to write a function and you don't know how many values are going to be inputted you just know it's going to be some sort of value and you don't necessarily want to just pass an array for for various reasons you may want to consider using the rest operator it's extremely powerful i use it whenever i need to i don't use it as much as the spread operator but i find it much more intuitive than having to convert the arguments to an array and get the values that way so the rest operator is a great addition to es6 we're going to recycle a little bit of our code from the rest operator section so just a reminder here we have our function add that's taking in a numerous amount of values and using the rest operator we're going to get an array of these values arrow functions are a great way to eliminate some of the really unnecessary boilerplate of callback functions and that it comes with a lot of functionality as well as just some gotchas that if you don't know exist but let's start off by creating this total and we're going to we're going to essentially call the reduce array method using arrow functions to return these values and then just below it we're going to console.log out total now this is a reminder nums here is an array so we can't we have access to all the things that would come in it so we'll have reduce we'll just do x and y and you'll notice here that i've already by pure instinct uh typed this out i wanted to show an instance of what we might do in the past uh without arrow functions so you'll see function and then we'll define this with the brackets and then we'll say return x plus y and then semicolon semicolon go ahead and save and you'll see we end up with 36 as it adds all the numbers together so this callback function we can replace using arrow functions and the only downside to that is that it doesn't have its own instance of this which is may or may not hurt may or may hurt you in your code so if you come across that really just be aware that that is part of the tradeoff for what we're doing here so let's go eliminate this function and so we can eliminate this code and you're saying well uh why are we in this error well when we eliminate function we have to assign this arrow function hence the name you'll see it still works but we can actually eliminate even more code at this point where if we're doing a simple oneline return in our arrow functions such as just adding these values together we can eliminate this curly brace here and we can also eliminate this return statement and we can eliminate this semicolon that we get is a very clean arrow function that will return the values that we're looking for and we have we've eliminated maybe 20 characters of code and a lot of spacing for something that we really didn't need to get going so arrow functions are very powerful and they're also just very condensing condensed and eliminate a lot of the the useless boilerplate when it comes to callback functions default parameters for javascript is a another new concept but it's been around in other programming languages for quite some time and it provides us a lot of value that's going to stop a lot of forced error checking and force air prevention and let's take a look at our code here where we have an add function takes in an array presumably it's called num array and you'll see here in our ad we're not calling it which right now we're not using num array but let's say we were we wanted to for each iteration of number a we're going to for each on it take an element you'll notice we're going to be go ahead and use the arrow functions and we want to say total plus equals to that element what's going to happen here in our current iteration is we're going to error right uh type error for each of undefined we never pass in num array and that's going to give us an issue because we don't have a we don't have an array to iterate over now what we can do instead is we can use optional parameters to help prevent this from airing our code out because sometimes maybe someone calls it sometimes maybe it doesn't matter sometimes it's just going to be an empty array or whatever the case may be but now what happens is when number a isn't passed in we are providing a empty array saying hey if it doesn't exist set it to an empty array therefore our array methods don't break and then in our case we just get a total that returns zero because there's nothing to iterate over and thus nothing gets added to the total so um and plus equals there we go um and thus we have a solution in place to prevent those undefined errors that it will be so rampant especially when you get incorrect data maybe from apis or the back end or even just your own logic or user input javascript's always been kind of a strange language in the fact that we don't always have a method that does what you would expect a language to have and so in the past when we wanted to check if an array had a value we would use index of so in our case we have console.log and we say nomare dot index of and index of of course returns the index of value is in there and if it's an index value like zero it's going to return negative one because it doesn't exist that's kind of wonky and so we got introduced to a new method called includes and includes will return a boolean value of true or false so you'll see here when we throw in zero it's going to return false and when we include two here it's going to return true because it's contained within the array one thing to keep that in mind for this if you are trying to support internet explorer for some unknown reason you may run into issues this is not supported by internet explorer but it is supported by all major web browsers besides ie we're going to talk a little bit about letting cons but in order to understand why let exists and cons for that matter exists you have to sort of understand variable hoisting in javascript let's take a look at our example code right here you'll see that we have if false var example is equal to five console.log example now what may surprise you is that we're going to get a null value and not a like this is completely an error why would you log this value and that's because what's called variable hoisting when you when it comes to javascript var is it hoist the variables and so what javascript actually sees when this renders is what's in our commented out code here where var example uh and it hoists it to the to the root to the essentially to the function scope level and then it looks like oh example is equal to five and then console log z so it hoists your variable and this is solved by using let and const moving forward so let's dive in a little bit about let and const so let essentially is a stricter version of var and which it uses block scope so in our case right now we're getting null we're not getting an error though when we try a log out example however if we go ahead and define let in our instance here you're going to see that we're going to get a undefined error because the example variable doesn't exist unless it's within this nested block scope as you might imagine because the way that it's actually interpreting it is exactly how it is printed which makes a lot of sense so although funk of var is using hoisting let does not and neither does cons and moving forward you for the most part should be always using let when you're gonna have values that are reassignable now let's dive in a little bit about constant how that differs from let cons as you might have guessed stands for constant but it may not work in the exact same way that you would expect so let's go ahead and clean up our code a little bit here const is denoted by the const word and we'll just say example and we're going to set this equal to a primitive data type which would be a number a a string or a boolean so we're excluding objects and arrays now what you may see console.log as as you would expect in our example we're going to get the value however we can't actually reset the value example when we're dealing with the primitive types will give us an error so we'll set this to 10. doesn't matter if it's the same type example when dealing with the primitive types are readonly properties these are things that have been set and you don't plan on changing however where this may get a little bit confusing is this it's not necessarily the case when we're dealing with arrays so in our case we have an empty array we can actually still in our const example push to it and set it you know push a value to five that's fine however if we wanted to change the value from an array to i don't know uh three we're gonna get a syntax error so that's not um that's not okay and that goes the same for objects if we have an empty object here and see empty object we can actually assign properties to it as well and this will work similar to how array works so although const is sort of a constant uh theory it's not exactly you can modify objects and arrays but you cannot override the data types with those moving forward any and when it comes to primitive values the numbers the the strings and the booleans you can't change those at all import and export have been a great addition to javascript it allows us to follow the solid principles and do dependency injection and and more objectoriented programming and essentially allow our code to be more modular in nature which it lends it to be more easily organized which is a great thing how do they work what do they do well let's take our example.js file that we have here and define in this case we're going to define just a variable a const variable and the reason that you might do something like that is you may have a data set that you're going to use by multiple parts of your application and or it may just be long it's cleaner and you just want it in one spot it really just doesn't matter but in our case here we're going to find a const and this is just we're just going to call it data we're going to set it equal to an array and we'll go ahead and throw in maybe a 1 a 2 and a 3. really matter in this case so this export allows us to in this case export a data export data which we can then import in another application you can do classes you can do a enums if you're working in typescript and things like that um let's go ahead and show how we can import it so we'll have this import and then these two curly braces now remember how we had data here that is what we're going to be importing within these curly braces and in our example here we don't have multiple things being exported but if we did like a data 2 you just throw a comma and then you'd have access to it we're going to import data and typically you want to space it out like so and then you have to say from where in our case it's just from the example dot bas file and now if we wanted to console.log data we could you'll see here we actually get our one two three we'd even create a reference to it let data equal uh let's uh updated data equal data really could push to it if we wanted to as well and just treat it like any other item that we wanted updated there we go oops updated data and there we go we get one two three and five so this allows us to make our code more module as well as be able to organize in such a way it's very helpful and something i use on a daily basis javascript gives some more love for strings with the pad start and pad and methods what this does is it gives us a way to add values to the starter string and add values to the end of the string depending on how long the string is so let's take the example here which is my name which is five letters long what we're going to take in what we're going to call on this is the pad start method and this is going to allow us to put in an integer in this case 10 and then we're going to follow up let's just throw in the letter a and you'll see here when console log it out we get 5 a's and dylan however let's say we spaced this out like so when we put dylan israel we're just going down israel there's no there's no room left to add values on to our string and and the vice versa if we wanted to do with and start it's going to work in a similar fashion so i'm just going to add it on to the end and excuse me pad end i don't know why i said pat start pad and you'll see okay there's no values here and if we remove israel we'll have five values left and then we'll add dylan a to the end of the string a little bit of fun i haven't found a use case where i would use pad starter pad in but it's definitely worth mentioning probably help you on some of those algorithm sites where you're practicing a little bit as well so one thing you may not have noticed is that are known because i didn't mention it yet is that you can actually pass in just a number here the second parameter that we've been passing in with the string is optional so let's take a look at my shameless plug right here youtube.com slash code tutorial360 string which is very long string and a very great youtube channel but besides that you'll see that we have a pad start to 100 and a pad end to one what do you think is going to happen to our string when we do that did you come up with some guesses if so and you guessed that it had an empty string it would have been right for our 100 one right here and you'll see now it's going to print it out we get that empty string but it's actually going to print out if we call dot length on it you'll see the length of it's 100 there's like 80 empty characters on here just the the editor here is too smart to know not to print all 80 of those what about pad end well in our case it's just going to ignore it right because our string is clearly longer than one empty character and thus it prints out appropriately classes are a great addition to take javascript to be in a more objectoriented way and what we're going to do here is we're going to find a class and showcase some of the things that you can do with classes how they work it's going to be one of the long longer sections of this course but stick with it it's a really important concept so let's start by go jumping into our animal.js file and define a class you do that with this class keyboard in our example we're going to use an animal because i have three cats and i love animals so we've defined a class here it doesn't do anything yet but we need to build a instance of this and to do that we have to set up something called a constructor so our constructor here essentially set some values when we when we create it in our case maybe an animal has a type and we'll also say it has you know we'll say legs every animal should have legs and we'll go from there and we're going to use the this keyword say look this dot type a site meaning that this animal class has a type is equal to the type that we're passing in and vice versa this dot legs is equal to the value that we're passing in when we create our object so the constructor here is really just assigning those values to our animal class now i think this will make more sense if we use it in a example so let's go ahead and we take what we learned with the export remember export class animal so all we have to do is throw export on here and now we'll jump into here we'll go ahead and import animal from dot slash animal dot js and to create an instance of a class we go ahead and just create a variable here and we'll say let cat equal new animal now when we go ahead and we're gonna get air we go ahead and console.log cat you'll see that it's telling us i'm surprised it even printed that but essentially what the issue is here is that we need to now go and add some values so maybe we have um a type we'll say cat and legs we'll say four and we have access to the channel so if we say cat dot type who are we gonna get we're gonna get cat right if we say cat dot legs we're gonna we're gonna get legs and so we have access to those properties and they're being set via the constructor here the constructor is setting these values that we're passing in for our animal class so we've already shown you that we can get values but we can also change values relatively easily without having to change anything all we have to do is say cat dot and you'll notice how it's it's bringing it up right legs or or uh type the legs and let's say heaven forbid our cat lost a leg now they have three we can then reset the value of that just as we would with any other object we can also define functions in our classes and you'll see that we aren't going to use the function keyword for this so let's say we define a meow or a make noise function because this is a generic animal class it's not necessarily for a cat and we'll take in a property we'll just call it sound and then we'll go ahead and console.log sound and while we're at it why don't we go and practice a little bit of the default params because we covered that earlier and we'll say meow we'll just make the assumption uh actually just say loud loud noise there we go uh and that should work just fine so now when we go to index.ps and we can say cat dot make noise it's going to come to log loud noise out from the function that we passed in and of course we can we made it that optional parameter so if we do pass meow in we'll now get meow from our function that we've defined in our animal class static may be a new concept for those of you who are not familiar with classes and object oriented programming and what static allows us to do is essentially create a function in our class in our animal class in this instance where we don't actually have to create an instance of animal to use it this is often what happens when you're creating a large library or you're importing someone's stuff and you don't have to create a instance of that class so uh let's create a static and um let's say we just want to say return we all we want to do is return 10. it uh it really could do whatever you want it to do and we'll say um 10 and that's a function and in here all we want to do is return 10. not not the most impressive function but if we were to comment all this out now and all we wanted to do was console.log animal and then say return 10 you'll notice that it's going to work just fine excuse me it's a function call so we have to use that you'll see we actually get the number 10 and we never had to instantiate the the class to use it so these are really functions that you need that you want to write that you don't need an instance or anything too too unique about it and that it's just going to take in some properties perhaps and return some data or runs another great option when it comes to classes is the ability the ability to create a get method so what is a get method a get method is really a property you want to create that only to return some value so let's go ahead and cancel out our static or get rid of our static method here and comment this back in and we'll go ahead and just delete this no need to do that we all know that works at this point and we're going to jump into our animal.js file and we're going to create a get and you'll see you'll notice the get keyword in front of our function call and in here all we're going to basically do is return a string that says the type and the legs you know so maybe we'll we'll just call this metadata and we're going to return with the backticks say this uh this dot type and let's let's make this look a little a little nice type call in space and then we'll say um you know maybe comma uh legs this dot legs and so this kit this getter here will allow us to treat this as a property on our object so when we jump back into index.js instead of printing out legs here if we create it as git we can now get the metadata on it and you'll notice that it'll print out so that's another thing that you can do it also gives us the ability to maybe say call functions in there hide a little bit of our class from the from the user if we want to but uh this is a another great option when it comes to working with classes now as you continue to dive into classes and the objectoriented programming approach what will happen is you'll sometimes have classes that will share properties or be very similar right so in our instance here we created this animal class to replicate a cat but let's say we had a dog and we had a cat and we had a mouse and all these sort of things there there may be a cat class or maybe a dog class or maybe a you know a mouse class and but we wanted to inherit some of this animal class and not have to rewrite all of our logic well we could do that by defining a new class and we're gonna do it in the same file here but typically you'd probably have a different folder and then just import this animal class so we want to do is we want to export a class in this case it's going to be cat that extends the animal class that's going to allow us to inherit some properties from that as well as overwrite the ones that we want right and the one that uh you know so we're going to inherit this constructor we're not going to have our own constructor but if we did we would we could do that but we'd have to put some keywords i'm going to show you this but we're not going to use it right now so let's say we wanted to have a constructor in our cat class here like so and we're going to have it also take in the same parameters which was type and legs but we also wanted to have a parameter tail here and we'll maybe just make it a boolean perhaps a cat got its tail ran over no longer has a tail so it's a true or false but when we use this constructor when it's being extended out from a parent class in this case animal we're going to need to use the super keyword let it know that hey pass in pass in the values that were that we have here which in this case is type and legs and then we would also go about it the same way here where we'd say this dot tail is equal to tail and we're not going to do that in this instance but i want to bring that up that you may run into some issues as well as you can use super to call some functions from the parent class uh but i just wanted to mention this let's go ahead and keep moving forward and see how we can override a method in this case we're going gonna override this make noise method and we're just gonna make noise and we'll just still have it sound and we'll set default equal to meow is this cat right we want it to you know and all it's going to do is console.log the sound and so what's going to happen here is these are both named the same and they have the same amount of arguments and because cat extends animal we can overwrite this function in our cat class to make it more unique and more specific to what we're doing while still have access to these other methods so let's jump back into the index.js and import our cat class and instead of cat we're an animal excuse me we're going to import cat the first thing we're going to do here is we're just going to say hey cat dot make noise we'll see that it will do the meow and it's not going to do the loud sound as before because we've overwritten that class over in the parent class in our child's class cat one last thing i want to note is we didn't really showcase it but we now even though we're using our cat class we've actually inherited the properties and the types and the methods from our parent animal class so we can get that metadata for instance and you'll see here we're gonna get the type is cat legs is four so uh as you're starting using this object oriented approach i would suggest using that lightly a lot of times people create very tightly coupled parent and child classes and sometimes they should just be separate classes um but in certain instances it does make sense to extend your parent class out and here is a good example of how we might do that a debatable nice feature i'm not too big a fan of this but a new feature added in es6 is trailing commas so in the past if you had an uh a comma that didn't follow anything you would get an error however now if we were to do something like define a function we'll just call it add and we were to have you know param1 and then we had this comma it would be fine uh there wouldn't be any sort of logic error that would work just fine and same goes for objects right so let's say pram one we'll say we'll just print out a const variable and we have name and we'll set it to dylan and then we went and said this trailing comma here that would work uh as well excuse me let's example equal to dylan and then at the end here all we did was just that we could see it console.log param1 and uh excuse me example console.log example but trailing comments are now something we're not doing anything with variables just call it though that we don't have issues with anymore so you're allowed to have trailing columns i'm not a super big fan of this i think this is something i got put into javascript maybe someone can convince me but just to solve little tiny errors but it is something that's there be aware of it so this is going to be a little bit of a longer section we're going to be talking about promises async and await and how they are all sort of related when working with them in the front end in javascript let's start by talking about what we have on our page here you'll see i have this constant that is a url that's going to link us to a top 100 of the alltime active users on freecodecamp.com which is a open source javascript site it's an excellent place if you're uh i believe they're actually going to be partnering up with scrimba on some future stuff so it's uh check them out if you're interested in that what we're going to do here is we're going to do an asynchronous call we're going to go and do an ajax call and and we're going to be using fetch which returns a promise and we're going to showcase how to handle that and then later on we're going to showcase a little bit of async and await and how we might use that alongside promises so let's let's get going here you'll see we have our function get top 100 campers this is not like call of duty campers these are the campers of free code cam we use the fetch method here which what this is going to do we're it's going to take in the url this is really going to go and get the data that we're looking for but there's a little bit more we have to do for that we have to call this dot then on it and you'll see here when it say then is it's returning a promise of type response that's what that means and uh so fetch is returning a promise then we're going to handle that response object which we then said hey when the promise actually gets delivered you can kind of think of like hey we promise to send you some data with fetch and then says okay when when you actually send me the data i'll do something with it in the meantime just keep running your code that's sort of how asynchronous uh items work and how promises work in this case and then says hey i'm gonna give you a response um let's say r for a response and what we're going to need to do is first we're going to need to turn that into json otherwise uh we're not going to know what to do with it our computer isn't going our our javascript doesn't know what to do with it and so we have to convert that promise into something that we can use once we do that we can then take that that promise which is another promise and we can which at this point we can say json and we can do something with that data what do we want to do with it well let's just say we want to console.log the first value of that json this is going to return an array of a lot of values and put a little semicolon here and we'll just see that our asynchronous call got set up you can see here we get this object from our ajax call now while we're at it let's go ahead and showcase how we might catch this ajax call and in case an air is thrown and that's i might have already given it away is by catching it and so you'll see here catch takes in a air result in our case we're not going to use it because it's going to look identical to the errors we would get in our application so if for any reason our server side fails on the fetch or converting it to json we can get that error so let's say that we wanted to just console.log failed so that we know that it's firing off and we're going to go ahead and change this put like an empty space here and an a and save it you'll see here we're going to get this failed message and none of this is actually going to run because it failed immediately at the fetch standpoint let's go back and fix that and you'll notice now it's going to go ahead and print out our code let's move on so now that we've done our ajax car asynchronous call and we've resolved the promises and everything's working let's show how we might do this with less code using asynchronous and a weight for an ajax call now just keep in mind you don't have to use async and await or promises just for something when it's hitting a server that's the most common instance but let's say you had a timer and it was timing out for three four seconds and you wanted to have something to delay it you might use promises or async await for that i just wanted to show you the most common one which is server calls and get calls specifically so let's go and fetch that data except instead of doing it with the promises we're gonna do with the async and away we're gonna define a function same name as before and uh get top 100 campers now the way that you tell it that it's an asynchronous function so i'm going to do so this async in front of it now it now the javascript knows like hey there may be some asynchronous items going on in our function and it will give us access to the await keyword how we're going to get that data we're going to just define a const here and we don't have to store it but i think it's a little bit easier it explains the logic a little bit more and we're going to say this is going to be equal to and we're going to do our first asynchronous call here which is follow follow the logic is fetching the data so we're going to fetch on that api url now that we've done that and what that await is saying is please wait until this fetch completes whether it's successful whether it's not please just wait until it completes the next thing that we want to do we go ahead and define a conch here and call this json this would be our second json which is a another asynchronous call and we're going to set this equal to a weight where we're saying please await our response being turned into json response.json excuse me now that we have that we have access to it and it's saying this line will run and it's not going to this line will not run until this resolves that's what this async and await is doing and finally at the end here we can console.log our json and again we're just going to hit that zero spot because uh the data is very large so when we save look at this nice asynchronous call now if this wasn't asynchronous uh then we didn't have or it wasn't an async in a way what would happen here is our console log wouldn't know what json zero index is because all the code would run synchronously just one after another and would not be resolved before we'd actually get this data so this challenge is going to be a little bit instructional as well as really probably just by far the most challenging one of the course so you'll see here that we have a function called resolve after three seconds and we showcase how to use promises in or having a promise being returned but we actually showcase how to create one you'll see here that we're create we are returning in this function a new promise with the resolve eventually being the data that we're going to pass that back in our instance here we're going to set a timeout for three seconds so promises are typically used with asynchronous calls or things that take time and in our case that's what we're returning so how might we solve this resolving that promise to get that resolved set and how might we solve this using async and a weight really take a second to see if you can solve this this is an important concept all right hopefully you're able to solve that if not don't sweat it this is a fairly new concept for most people javascript has been synchronous for some time and now we're learning to work with it asynchronously so how might we solve this using the promise then mechanism pretty straightforward if you remember our last example we are going to call our function resolve after three seconds and then we're gonna call the promise method dot then which takes in our return data it's successful and then we want to in our case just console.log that data which will fire off after three seconds right 3 000 milliseconds is one second so any day now there we have resolved the other way that we can go ahead and solve this is we can define a asynchronous function that uses async and away so let's go and define a function remember when we're defining async functions we use the async keyword and we'll say get async data and then at the end of course we're going to want to call this to call this function to go get that data now in here all we have to do is await await our output await our data using the await keyword so we we can store this in a result that'd probably be the most proper way of doing it cost result and then a weight the resolve after three seconds and then console.log that result which will happen in exactly three seconds so our data here it's all going to flow properly it's all going to work properly and now we're handling getting data from asynchronous places or when from asynchronous endpoints or in our case using promises with timeouts and it's another way that we can use this and uh important concept moving forward when you're trying to deal with with databases and getting data receiving data so i hope you found this helpful so this have been a great addition to javascript what they allow us to do is create a unique list now how might we go about creating a set we can start by just creating a variable and go ahead and say cons we'll just say example set is equal to a new set and then uh inside here we're going to throw in an array and let's throw in some duplicate values the reason for this is the to showcase the idea also um the way that babble's set up in scrimba right now it doesn't fully work in terms of um the way that it compiles to the console log so instead of actually printing out the example set to c it's just going to say set um no way around that right now at this time but the idea you'll see right here we have two unique values in here and that's all the set cares about the other values they don't even exist so when we want to see the size of it we can do it with the dot size you can see there's only two now let's say that we wanted to add to our set that we have created here we can do that with the add the add method and we could throw in a new value here five and this is going to add three and add works the same way where if the set already has a value it's not going to add it it's just going to basically ignore it and we can chain these as well if we wanted to let me go ahead and throw 17 in there and you'll see our set size continues to increase you can also remove values from set using delete one thing to keep in mind is a cool function of sets and in my opinion anyhow is that when you delete it it actually returns a boolean of true or false whether it was successful so let's say we delete five and we're gonna console.log this out what we're gonna get is true because the 5 exists in there and you'll see right here so then it of course removes it from our elements that's another side effect of the delete method we can also check if a value even exists in our set using the has properties so we still have five in this point and we want to say hey does this set have five and let's see it does it's true right and our size is four and then last but not least one more thing to mention is that we can actually clear out our entire set and reset it with clear and then you'll see our count here is going to be zero the last thing i want to mention is that a set is iterable so you can use things like for each on it and four of and all the great ways that you would normally iterate through a a interval let's just take a second to pat ourselves on the back for finishing this course because it is a hard thing to do so many people start courses out and they never get to the end they start it they forget about it they move on they go back to playing halo or doing whatever they're doing it is a hard thing to intellectually stimulate yourself as well as follow through with that so congratulations for you for finishing the course and as a favor for going through and making the content would you do me a favor and share the course for scrimba's sake as well as my own this was a great introduction course i really enjoyed making it and i hope that you enjoyed it as well and if you did sharing it goes miles and uh so what's next for you well given what we've equipped you with with now the introduction javascript and now the introduction to es6 plus you're ready to pretty much write anything so you can start practicing there's a bunch of wonderful tutorials on scrimba to practice in algorithms they uh build some projects or start your own project you have the skills and have been you know introduced to a ton of the core concepts that you should be ready to start building something in javascript so get out there start playing around and enjoy yourself