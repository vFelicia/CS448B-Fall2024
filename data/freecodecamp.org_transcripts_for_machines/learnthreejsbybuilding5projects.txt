3js can help you create amazing 3D effects and animations on your websites in this course Bobby row will teach you how to use 3js through building five different projects what's up coders today we're diving into the exciting world of 3js learn how to create insane 3D effects right in your web browser we'll cover Primitives materials textures camera paths postprocessing physics and a lot more let's get started with some serious 3D action Bobby row here I'm a season code artist and software engineer with mad industry chops for 3js techniques effects codeart and more visit my YouTube channel robot Bobby today's tutorial is laid out as five Standalone projects so you can skip around if you want basic JavaScript knowledge is recommended now let's break it down getting started we'll explore primitive shapes lighting and animation very nice next create the Earth with 3js craft a beautiful multilayered Earth using shaders textures and lighting epic then fly through a wireframe wormhole animate along a camera path insane create a transition effect a spectacular postprocessing effect that's totally achievable awesome add physics with Rapier is the final project use this super fast stable physics engine works great with 3js ultra real since each project is standalone feel free to jump to what interests you let's go have you ever wondered how the hell you could make 3D graphics on the web 3js is a powerful library that transforms code into awesome visual experiences whether you're a seasoned coder or simply curious we'll start creating our own 3D scenes today since 2011 I've been creating interactive scenes and experimenting with 3js so are you ready to get to create some 3D Graphics let's go today we're going to get comfortable with the basics of 3js um first thing we're going to do is get Visual Studio code if you don't already have it this is the editor we'll be using today the next thing we're going to do is to download the starter template come over here uh the link is in the description of this video uh and make sure you're on the main branch down Lo the code I'm going to download the zip file and put it on my desktop there it is right there I'm going to unzip that and I'm just going to create a directory called threejs sketches so that um I have them all in one place great I'm going to Dr drag this into Visual Studio code yes I trust thank you and now here are my files inside um running locally um next thing I want to do is to be sure I have the live server Plugin or extension inside of vs code this is going to allow us to very quickly see the changes to the code we make it creates this tight feedback loop where we CH make a change and we see the change instantly and we can code really fast and it's fun and great get this um got it great fire it up by clicking this little go live at the bottom of your screen and here we go here's my scene not much happening at the moment let's go over to the code and take a look starting with the index.html not really covering HTML in this session main thing I want to point out is this import map which makes it's a very convenient way to define your uh JavaScript import paths I've defined 2 three and JSM and then here I'm importing the Javascript file this is where we'll focus today here and uh first thing I want to do is get rid of this console.log and instead write import stars3 from three great now I want to set up the scene there's three things that 3js needs for scene a renderer a camera and a scene object let's create the renderer first const renderer equals a new 3. webgl renderer and we can pass in um some properties I'm going to suggest you pass in one property antialias is true just going to make it look a little bit better great we want to set the size of the renderer to do that I want to grab the width and the height of the window W equals window do inner width and const H equals window. inner height now I can set the renderer width and height see renderer do set whoops yeah set size no with height great also want to um append to the Dom the Dom being the HTML page uh document.body.appendchild renderer DOD element which is the canvas element another way to do this is to create create a canvas element inside your HTML and then use that when you set up your renderer but I prefer to do it this way just let the let the 3js handle the G element great that's the renderer next thing we'll set up is the camera con camera New 3. Perspective camera we we need to pass four things into the perspective camera a field of view an aspect a near and a far okay let's define those const field of view is equal to 75 75 degrees if I made this 5 degrees the field of view would be very narrow 90 degrees it would be very broad const aspect in this case will be the width divided by the height const near is equal to 0.1 0.1 units is when it starts rendering anything closer to the camera than 0.1 units will be invisible const far is 10 great now uh I want to scooch the camera back a little bit we haven't added anything to the scene yet but I want to scooch it back right now camera. position. Z equals 2 just a little bit further away so so I can see what's at the center of the scene last thing we're going to set up U const scene equals a new3 do scene great there's our that's the core of this tutorial right now setting that up allows you to render something renderer do render renderer render I got some crazy type in there and then we'll pass in the scene and the camera boom how isn't that just beautiful let me close up this console and save it again it's not beautiful there's absolutely nothing there let's add something really quick 3js has built into it some geograph some simple geometries Primitives they're called and we can just grab one of those and throw it in our s let's do that right now const goo equals new 3. iosa hedrin geometry it wants to have a size and a detail um we want to put a material on that geometry const mat equals new 3. mesh basic material and this wants some properties the only one I'm worried about right now is is the color property let's say 0x CC FF that's kind of a light blue color and const mesh equals new 3. mesh we're going to pass in the Geo and we're going to pass in the mat and then we have to scene. add mesh Tada what the heck did we just do grabbed one of those predefined Primitives from 3j's library grab one of the predefined materials from 3j's library the basic material which doesn't calculate any lights at all just has a color so it's kind of not even a object it's just a circle right um and a mesh which is a a container for both of the geometry and the material and has a bunch of properties that you can use to move it around or rotate it or animate it someone say animate let's wrap our render call in a a function that we can call again and again and again and then as we update the scene we'll see some animation function animate and the way that works is through this API request animation frame oh that didn't work there it is you pass in the name of the function and you're good to go don't forget to call it the first time though animate like so now it's being called every second um if I were to change the scale of the object mesh. scale. set scaler and we'll say um math. cosine um t time 0.001 plus 1.0 that's really complicated but let's just add T here tal Z to start with and what the heck is happening the animate this when I do when I call request animation frame I'm getting a time uh a time difference passed in each time um we could see this more clearly if we were to console. log T and then pull up the console here for free when it called request animation frame I get this value I'm just using that to change the scale of my object but enough of that um and enough of that too let's make our geometry look a little more interesting and then animate it and then we'll be done for today to make it more interesting I want to change the material type the basic doesn't interact with lights so if I use the standard whoops the standard material that's going to interact with lights but uh there are no lights in the scene const Hemi light equals new 3. hemisphere light and I want it to be white on the top and black on the bottom scene. add hemil light cool I mean sort of cool I want to change the color of my object to White and also flat shading is true look what that does it allows you to see all the facets and if I reduce the detail you could see those or increase it I think two is looking pretty good um to really highlight those different facets let's add another geometry and see see how that looks it's going to be a wireframe geometry kind of like this const let's define the material first wire mat equals a new 3. mesh basic material again and the color will be white color is 0x 1 2 3 4 5 6 and it's a wireframe material good and we need a wire mesh const wire mesh equals new 3. mesh and we can reuse the go the same go and we'll use the wire mat and I don't see it because I need to scene. add wire mesh and by default it just puts it right in the middle of the scene right on top of the other mesh there's a problem if I were to come in here and say mesh I mean it's not really a problem but I want to animate the mesh rotation. Y is equal to T * 0.00 01 so uh a 10th of a second or sorry every 10 seconds only the gray sphere is moving and the wire is not moving to solve that we can mh. add so I've just added the wireframe mesh as a child to the the other mesh instead of a child to the whole scene and now it'll automatically pick up the Transformations you make like rotations or scales or uh position changes to make it look a little less flickery I'm going to suggest fire mesh. scale. set scaler 1.01 just slightly bigger not three o two o see how it's a little less flickery now that's just I just scaled it up slightly great I think we're doing well let's make it a little bit more visually interesting let's make it uh kind of an uh uh blue color on top 99 FF and a orange color on the bottom uh kind of a darker orange color isn't that nice it would be nice to be able to kind of um move around in the scene a little bit the last thing I want to cover today is to use uh one of the addons to the 3js library called an orbit camera import sorry orbit controls orbit controls and we get that from jsmc controls SL orbit controls. JS good we need to con Define it const controls equals new orbit controls and we're going to pass in the camera and the Dom element render or render DOD element now automatically we kind of get this interaction Isn't that cool we can kind of click and drag in the scene and use the scroll wheel or the or what am I using my magic mouse but it gets better you can tweak it a little bit controls. enable damping enable damping is true and then set the damping Factor um uh damping factor and some small number and now you still won't see that until you add this line to your animate method controls. update so every frame it's going to update the controls like so isn't that nice that's it for now um experiment with this uh test your knowledge by trying out some different primitive shapes you can use cubes or Taurus knots which are really cool find the teapot that's inside of of uh 3js as well there's a link in the description to read more about Primitives try out different lights try directional light which is like sunlight or a point light or spotlights also Link in the description play with animating things animate the position animate the rotation the uh scale you could change the color of the mesh or the color of the light when you've done all these uh this experimentation or at any time go create a JS fiddle and share what you've created with others um love to see I would love to see what you come up with today let's discuss making a 3D Earth a globe using 3js and JavaScript let's get started I've got my basic template here which is just the threejs boiler plate setting up the scene and uh instantiating a cube geometry real quick to get started I like to add the the orbit controls I could have added these before we started but why not just do it now instead um new orbit controls now hang on let's see what I did wrong uh orbit controls. JS it's not what I did wrong it's what um GitHub copilot did wrong I'm going to slow down the rotation so now it moves real slow and I can pick up the slack there I like to add antialias is true here cuz I just think that Cube will look a little bit nicer why don't we replace that Cube we're going to make this an um let's call it a earth mesh instead of a cube and we'll replace it with a iosa hedrin geometry out of the box see a cedrin looks like that it's got a radius of one unit and a um detail of one as well uh if we wanted to we could drop that detail down oh sorry I lied it's detail zero we could boost that up to 16 and now it's indistinguishable from a sphere um I like doing flat shading is true so you can see that detail we're missing one here I guess it falls below the threshold of edges I think for our sphere 8 would be sufficient maybe slightly higher 12 um I'm not seeing a lot of chunky edges so I'm happy with that and then just comment that out for a nice smooth sphere cool um we've got a sphere let's put a a texture on that sphere so that it looks like a planet like planet Earth out on the internet there is a website called planetary pixel Emporium here and on it you can check out Earth and download these texture maps for the color for the bump or like the the mountains and stuff like that a specular map so to make the water shiny and the land masses less shiny City Lights map U which is really cool at nighttime oh I didn't mean to download that but oh well cloud map Etc as well as a bunch of other Maps like the moon like Jupiter like the sun Etc all right I've already downloaded those Maps so let's try one of them out we can get rid of this color statement and just say map is equal to new loader um but I want this to be instantiated instead let's call this loader and instantiate here const loader is equal to a texture loader and I have these Maps already downloaded on my machine but you'll need to either download the project files that'll be linked to in the description of this video or just go get those from that website there I've got them in this directory called textures and so I'll just use that textures and the name is Earth Map 4k. jpg uh and that did not work let's see what the console said it said hey I don't know where that is that's because it's not called Earth Map it's called 0000 uncore Earth Map hey there we go now we have a sphere with this texture mapped on it all we had to do was tell 3js that this attribute map would have this value which is this um texture loader and it loads a JPEG we could swap that out for something else um for example let's get a new window here I happen to have some of those other textures downloaded like moon Jupiter let's try Jupiter so Jupiter looks like this and now we've got Jupiter instead and this is a 4K image uh 4096 X 496 or something like that uh 4,000 by 2,000 so it's nice and detailed I think it looks great let's go back to Earth and we can enjoy the detail of this too great so we could just end there there you go there's your 3 3D Earth but let's make this look better um we could add clouds we could add a bump texture to give some relief or make the mountains look like they're coming up a little bit we could also improve the lighting right now it's just kind of this ambient lighting we can add this beautiful glow if you ever Google and image uh um Earth from space I guess and then look at the images there's this beautiful blue aura kind of all around the earth and we can get that too why don't we leave this open as reference um so let's get started with that uh let's get the rotation going like that um the Earth is kind of tilted on its access isn't it I'm not sure that this photo reflects that really well or I'm not even sure this is a a photo of the Earth but there's a tilt so to emulate that I'm going to create a new let's call this Earth group it's a new group and now instead of adding the Earth to the scene I'm going to add it to the Earth group and I'm going to give this rotation so Earth group. rotation. Z is equal to 23.4 time math. Pi / 180 I think uh what is the Earth's axis angle or tilt and does it say here axial tilt that defines axial tilt but what's that the Earth's look at this 23.4 okay so I want to temporarily kill the rotation come back here and is that does that look right to you kind of like that kind of I'm going to say yeah it looks right because cuz I don't know um and now I want to turn on the rotation Y and now it's spinning along that tilt great um should we add the Stars next or should we beef up the Earth next I think adding Stars would be good um I've prebuilt my stars the the way my method for adding Stars uh there's a couple of different ways I like to just create um a dome of points and to do that I've written up let's hide this this thing here let's import uh get Starfield from from my get Starfield and I think that'll work without breaking anything and now I I'll go over this code in a second all I have to do is Con stars is equal to get Starfield and then scene. stars or scene group I just sc. add Stars that's all I have to do and now if I pan out and pan around I've got these stars all around and if I want to I could say num stars is equal to 2,000 and it'll give me a lot more stars um how about 20,000 Stars way more stars um why don't we look at that code real quick I think 20,000 is probably too many I like 2,000 it I can't remember what it defaults to but some small number like maybe 200 here's that get Starfield file it's a JavaScript module I'm exporting this function which is just to get the Starfield there's the default number of stars is 500 um I'm going to go over this later um for now let's just leave it at that cuz I want to build this Earth first so now we've got our Earth on tilted on its axis let's fix the light real quick comment this out and now every well not everything just the Earth is black and let's create a new directional light except I want it to be called sunlight cuz that makes sense to me and scene. add sunlight now it's just from overhead instead I want to move it over to some theoretical center of our solar system sunlight. position. that's moving on the Z axis I want to move it on the x axis too that's pretty good um negative 0.5 slightly lower I like that better um do I even need to move it on the zaxis at all I kind of do actually I kind of do all right I've moved move the the sunlight just the way I like it and now the Earth is kind of orbiting around I think it should be positive 0.5 that makes more sense to me great now the dark side of the earth is truly dark as it would be in space why don't we add lights to do that I'm going to create a new mesh um I'm I'm going to call this um lights mesh and this is going to be um this is okay thank you GitHub copilot I don't like this nested material here so I'm going to pull it out I'm going to call that lights mat okay I'm reusing that same icosahedron geometry so const lights mat is equal to and paste this material it's already digging into my textures directory and pulling out this lights mat material um let's turn that off for now and in fact just to kind of show the simplest implementation of this color is equal to Green okay and let's add that to our Earth group Earth group. add light smesh okay now oh my God goodness look at that what is going on how cool is that I love these happy accidents so let's let's make this transparent and let's make the opacity 0.6 so now it's the same thing it's just a little bit more transparent what's going on here is that green sphere I just created is sitting on top of the earth sphere and the earth sphere is rotating and you're getting the interplay of those vertices if I drop the the um detail here detail I'm going to break that out into its own const detail and I'm going to drop this down to four you can really see those interacting better or two I like that look a lot this is a complete aside let's go back to 12 and I'm going to want that to rotate as well let's say light smesh is equal that too so now they're both moving together and we get rid of all that Z fighting um now let's get rid of the color and I don't really care that it's transparent anymore and let's drop the map on there and see how it looks oh so now this is that uh texture that I downloaded from that plenary pixel Emporium that looks like this here's that texture and that's mapped to this icosahedron but I want to be able to see the Earth underneath it so I'm going to change the blend mode to additive blending now wherever that previous texture is bright we see it and wherever it's dark we see the lights how cool is that well we're going to see the lights on the bright Parts too but I'm okay with that for for this example great um in the time remaining I want to add a couple more things a cloud mesh let's just add that real quick const cloud Matt is a mesh standard material and it's loading my highres clouds I'm going to disable all this stuff let's say um Earth group. add um my new mesh which I didn't defin yet whoops clouds mesh yeah that's what it is same situation Let's Get That clouds mesh moving around thank you oh isn't that nice this is the clouds smesh let's use that additive blending Technique we used just a moment ago to get it to sit on top anywhere the image is light and also you know what else I want to do is to elevate it a little bit off of the the mesh so const oh no I don't need need Conant I need Cloud mesh do scale. set scaler and I just want it to be slightly larger oh that's not good it's clouds mesh kind of like that nope that's still no good why oh cuz I I uh I had it written out as could smashh I think that looks good but um obviously it doesn't Cloud smesh could not be defined oh I see it's in my animation Loop that's what you get when you code rough and fast I've just picked it up off the earth a little bit you know what would be fun to play with is to go in and have this cast Shadows um um I'm not going to mess with that right now instead I'm going to keep it moving let's get rid of this hemisphere light we don't need that um I could make this semitransparent that's up to you I don't see a big difference I'm not making the light semitransparent we're almost done the last thing and my favorite part is to add a a glowy atmospheric look around our our model and to do that we're going to use what's called a frenel Shader which is spelled frenzel I think it is hang on uh fresnel so I'm going to I'm going to import this how am I doing that I see I'm doing it differently for this one I have to import that fernel material and I'm going to create a new mesh on top of the Cloud's mesh whoops I'll do it here this is a fernel mat and then I'm going to create a Fel mesh or a glow mesh if you will I will glow mesh and now Earth group add glow mesh and I need to manually rotate it because that's how I'm doing this it's kind of laborious uh I don't see it at all do you I don't see it and I think that's because I need to scale it up a little bit I'm going to scale it up to oh let's do it here 1.01 and let's see oh I still don't see it why not get frel mat let's see if there's any errors there's no errors we got our felat our oh that's why let's let's actually scale up our glow mesh there it is when you zoom in you can kind of see the edges of our Coosa hedrin but isn't that glow nice oh um let's have this move slightly faster the clouds will orbit a little bit faster so you can see them kind of passing over that's a little bit too fast I think tweak to your tastes there you have it the iconic wireframe Wormhole effect armed with nothing but 3js and some free time we're about to embark on an adventure through code let's bend the very fabric of virtual space with our bare coding skills from animating cameras to dance along a predestined path to summoning the unreal glow effect so grab your flamin' hot Cheetos and a cup of decaf coffee and join me on this interdimensional jaunt through the wireframe wormholes of 3js this is what we're building we're going to build it in a few different steps starting with loading the path data and creating a spline from that a spline is a just a representation of a line in 3D space um and this one as you can see kind of snakes and curves around in an interesting way and we'll use that as the basis for tube geometry um we'll then add add an edges geometry to get this look that you see on screen now uh where there are fewer lines in the tube in the wireframe um after we've done that we'll add in some boxes just so there's something in our path that we're flying past and lastly will add a glow effect to give it even more of that retro look that I love let's jump into it starting from here uh just the basic boiler plate uh let's just go over what that is got our Imports at the top I'm importing the orbit controls as well so I can kind of drag and move around we set up our scene with our boiler plate the camera and the renderer and I have a cube here I'm going to pull that cube out no longer need that and save it and now we have an empty scene let's load in our path data uh I'm going to IM import um spline from that from spin.js let's look at what's inside of spline JS here at the top is the curve path just a collection of three um floating points per vertex so I think there's like what do you what do you think like 35 vert there that represent this path that's kind of winding through space I'll load it up and show you um before I do though we take those points and we convert them to three vector 3es and that will be the basis for this catm ROM curve which is really handy it allows us to interpolate smoothly between those points and then we return that so that it's loaded in here um console.log spline this is what the data looks like whoops here it is and it's got these 37 points first thing let's um let's see what that looks like I'm going to ask GitHub copilot to um create a line geometry from the spline it's going to get 100 points then create a new buffer geometry and set the vertices for that from the points create a new line basic material and make it red create a new line from that geometry and material and add it to the scene I thought it was red it was really green and here is what that line looks like kind of like a crazy roller coaster or something just floating in space cool let's comment out that line and now let's create a tube geometry in the same way um so we'll create the geometry passing in the spline defining the number of Divisions along the length the radius is this value here um there's the number of Divisions along the along that radius the radial divisions and then finally is it closed or not that's true um a tube material we we'll use a mesh standard material to start with the color will be how about we'll make it uh an off blue color kind of like a baby blue color make it doublesided because we're in the inside of this tube eventually um and and make it wireframe oh and then add it to the scene oh actually create a mesh and then add it to the scene so the tube is going to be a new mesh with the tube geometry and Tube mat and we'll add that tube to the scene great there is our tube geometry and let's see I just want to see if if it isn't doublesided can I if I go inside can I still I can still see it because it's wireframe this will be important to have it doublesided if it weren't wireframe right cuz I'll go inside and there's just nothing in there let's make it doublesided again now uh there's this interior of the tube that's kind of what I want um kind of doesn't matter though I'm just going to leave it wireframe here's here's why I'm going to create an edges geometry too actually let's fly through through first and then create the edges geometry to do the fly through I want to create a function update camera this is going to it's going to progress along that curve that we created a moment ago um and there it is thanks GitHub copilot now instead of using time though or date. now I'm going to use T that I pass in here update camera and pass in T I don't know if this is more efficient or less it's just a um convention I'm used to doing um what just happened here every time I call this request animation frame uh it's going to pass in a timestamp I'm for the first time I call it though I'm giving it a default value of zero then I'll pass that time stamp into the update camera method I'll reduce it by this what is this like a 1,000 or or 1 20,000th or something I don't know I'm going to grab a point along that spline the the the point needs to be between zero and one this modulo operator is going to give us the remainder of dividing by this number here so let's say time is 10 and we divide by 20 we get 0.5 it's only going to give me the remainder using this operator and then I divide that by the loop time hang on I tell the camera to move to that position and look at this position which is slightly ahead like so and now we're not animating because it's too slow let's move it a little bit faster and a little bit faster and if I chop this down it should go twice as fast so that's the core of this tutorial is creating a tube and then attaching a camera to a path inside of that tube and moving moving along it's still moving kind of slowly isn't it that's a little bit better is that less clear I think it should be that let's move it a little bit faster so I want to modify the look of this wireframe right now we're seeing every single triangle and instead I only want to see some triangles like remove those diagonals if possible and to do that I also want to change that right now I'm getting this this shaded effect let's change the lighting first hang on a second before I do the edges I'm going to take off that uh hemisphere light and everything disappears cuz there's no light in the scene now and this material I'll make a mesh basic material boom now everything's back and there's no shading at all and let's add some fog to the scene um this fog X2 is the way to go um the color of the fog and this I don't know what what is this can you give me a hint here of what that is um it's the density okay but here here's how it looks I just love this effect um edges geometry this is what that looks like um create edges geometry we'll create an edge of geometry what is this value here 0.2 I think this is like a a threshold anyway we'll come back to that um con to Lines line there's the line material I'll use for the edges geometry let's make it white the same 1 2 3 4 5 6 and then create the line two from line segments why is that line two oh because I'm already using a line up here um uh how about two blinds and then lastly let's scene. add Tu blinds that's not what I expected edges geometry I'm using the edges in the mat let's hide our wireframe for a second yeah that's not at all what I expected oh I bet it's because of this threshold it's not shoot I'm going to have to look at the previous example cuz this is weird and I don't understand what's happening edes geometry let's let's have a look so here where's my edges I don't know oh here it is I'm using a point to see a line material line segments and then adding that line oh interesting it looks identical doesn't it edges geometry um that's the difference there is this tube tube geometry it's not different though it's the same line material line basic material line segments huh I wonder why it looks so crappy why does it look so crappy um 0.1 1.0 oh that's really odd I don't understand hang on a second what if I just pull back oh and let's turn off the fog for a moment see what's happening yeah I don't I didn't expect that to happen H that's just weird that's just weird geometry oh oh my God all right so here's what I did wrong I passed in the line as the basis for the edges geometry instead of passing the tube duh let's do that instead uh tube Geo I think this will look better yeah and then update the camera again yeah that's what I was expecting to see let's turn back on the fog now we are our wireframe Wormhole has a different look and feel um I I really like it let's add a bunch of boxes what we're going to do is using that path will Traverse the path move along the path and create boxes in it and put them on the path but offset a little bit um so they're not right in the middle but kind of on the side well let's see here I'll do it below all the tubes and edges right above update camera let's define uh the number of boxes which will be 45 or 55 slightly more and we'll do a four Loop actually I like that size as well uh now box geometry thank you um that's the Box material I'm not going to use that because the Box is going to be a box helper so for let I equal Z while I is less than num boxes I plus equal 1 where we want a box helper um are you giving me a box helper here no you're not you're giving me a box mat and a box oh I guess I need that for the Box helper here's the material in the Box no mystery there um I'm defining the Box geometry outside of the for Loop because I don't think I need to redefine it each time this might look familiar um we're grabbing a point along or I divided by num boxes so all along the point evenly spaced but then offsetting it slightly uh again using this U modulo one to get a number between 0 and one now we are going to grab the a position along that point and then set the offset a little bit of Randomness and then set the Box position there also a little bit of random rotation and then add the Box we're using a basic material so we should see it just fine there are those boxes const box or just helper helper equals new 3. boox Helper and we'll make it yellow and scene. add helper so oh yeah isn't that interesting it's not rotated can I rotate the Box helper uh helper do rotation do set I can't I can't see I can't see thank you does that work ah it doesn't work I guess you can't rotate those box help of course that's too bad I could use that just geometry Sucka uh let's do that we'll need a material and line segments and then it's just a lot more lines of code than the helper you know what I'm saying um I could Define this line mat outside but I kind of want the color to change each time and instead of tube lines this is box lines hang on box lines format that oh I it blew up uh why did it blow up U because I'm using this tube geometry I need to use the Box geometry and that should do it it didn't do it did I Define color can I just make it yellow for now okay I'm not seeing my box lines I need to set the position right and the rotation box lines so there's the position and then the rotation oh isn't that interesting box lines there and now get rid of the box and now we just have the lines and we have this nice rotation too cool last step to add the glow I do love the glow I'm going to just copy and paste the unreal glow effect from my previous example here and along with it I need to copy and paste the effects composer and this render pass as well I wonder if I really need that wend render pass or wender pass let's have a look here before I Define the geometry of my scene I'll just paste in this postprocessing or I'll create the render scene which is the equivalent of what you're seeing now just the render and this Bloom pass that's where the magic happens um it's the width and the height screen I actually don't know what all these pams are these two are the ones I play with the most and create a new effects composer and add it and that composer will replace our renderer here and then we get that glowy effect maybe we want to change the color of the lines on our tube on our edges right now they're white we could make them red oh that didn't work because I'm not showing the tube anymore um I don't think I need this tube or the tube mat are you using the tube mat for anything I'm just using the geometry now and this is the color that I want to change how's that look pretty cool I like this effect where each box has a different color let's do it like this where I define the color whoops const color is equal to a new color and I'm looping here um p is the position along the spline so it's going to give you value between 0 and one for the Hue based on P starting at red and progressing all the way past purple back to red again as you Traverse and this is what that looks like I could make it go backwards 1.0 M oh that's really weird 1.0 minus so it'll start red and go to purple and cycle through blue and green before it gets back and should we really crank up the speed let's double the speed cool I encourage you to use what we've created here as the basis for your own Explorations and your own variations um use different geometries inside of the tube instead of just boxes load in some models or use other Primitives or uh animate things uh you load an animated model and move it along the bline as well uh also experiment with different looks and feels for the tube geometry you could use a different type of a Shader so that it had flat shading it's all faceted and you could use lights inside of there for a cool effect you could even color the vertex uh of the the vertices of the geomet R uh that might look really cool as well but yeah thanks for tuning in today I want to talk about a transition effect inside of 3js let's jump right into it this is borrowed heavily from an example on the 3js website uh created by Fernando Serrano I hope I'm saying his name right uh and it features two different scenes which are smoothly transitioned between uh using this really cool effect so I'm going to return it back to the state that looks more like the example kind of like this I modified the scenes so that it has the same geometry in the same orientation so that when you do the transition it appears that the the material just like grows on the object and then it decays and disappears from the object so there's like a coherence between the objects that's not necessary it's just a kind of a a cool look I was interested in I changed the lighting as well um I added this hemisphere light let's make it a little brighter and uh let's make these objects a little bit smaller let's talk quickly about the setup the example on the 3js website is all a single HTML file with embedded JavaScript and shaders and I found it kind of difficult to understand I pulled it down remove the stats and the guey uh and and just tried to break it up by function and let's just walk through what I came up with here's the basic scene where we just kind of set things up um there's going to be a single renderer shared by all three of the scenes that are set up okay uh we got a couple of materials which the entire scene will use and this transition so that's it uh this animate Loop okay let's look at the FX scene that's the first kind of scene that we're using um all it's doing is creating an instance mesh okay and then uh in this case it's icosahedron I could change that to uh box geometry and change that to size size and now we've got boxes instead of icosahedrons also cool what if I made it a uh Tetra hedrin geometry I'm actually not sure what that takes oh it takes uh whoops I'm making a mess oh I see why it's confused so tetraedron geometry uh takes a radius which will be size and then a and then a detail uh let's make it zero great bunch of tetraedron also cool what if we jack that up to 5,000 wow made them slightly smaller and the effect comes on I don't get tired of that I could just watch that effect all day um let's go back to the icosahedron and the size is uh 0.5 and we have 5,000 of them whoops there we go I kind of lost track where I was this is the FX scene where we just take a material put it on an uh instanced geometry and then we set up our scene we're using the shared renderer the render function is a little bit different because there's this Frame buffer object uh the render Target Target I don't really know what I just said I just know um this is like a I I think this is act as like a a a container for the render and then you can you can tell the renderer to use that container or another container use that render or another render I hope that makes sense that's my very loose understanding of it um this transition handles that effect it creates a plane it textures that plane uh with those scenes uh or the blending of those two scenes it uses um a texture here's a here's one of the textures here's another sorry to see isn't and here's another that texture through some alchemy in this Shader is transitioned to and from the two scenes again apologize for the loose definition I just know it works um if you swap in a different texture you get a different effect that's all I got the rest is just kind of messing around with those FX scenes to to try different different things and and see what looks cool um I added this color transition effect um you could change this to be set hsl and give it uh math. random for the Hue and comma 1.0 for the saturation 0.5 for the value and now we've got uh a bunch of random colors I use this needs animated color property when I set it up here I only wanted the the uh the the the scene the head the material that's solid the non wireframe to have the random colors cuz uh otherwise I'd have random colored wire frames and I didn't think that looked interesting it's actually not bad but that's not what I wanted I wanted a single color wireframe uh and maybe that wireframe is white like so also really nice this example has code um to set the background color as well I think it's called clear color yeah and we'll make the clear color uh an offwhite so that now when go go to the wireframe scene it oh it doesn't work shoot I messed that up not sure how exactly I messed that up let's see here transition it's in the FX scene clear color clear color huh I thought I did that correctly and the index oh it belongs in the scene that's that's why I messed it up here we go offwhite now when we transition to the wireframe kind of inverts the whole thing um yeah check this check this code out um on the 3js website as well as on on my GitHub play around with it uh I'm going to try some other things with this too and see what I come up with but uh I just love this effect I could watch it all day we're mixing the Rapier physics engine fast stable web assembly module with 3js with a few lines of JavaScript we'll bring Dynamic collisions and forces to your 3js scene from laying down our foundational setup to linking Collision bodies with our 3D objects this lesson will be dynamic literally strap in sharpen your minds and let's get the physics party started okay we're going to start simple a 3js scene with a single object in it and some background Sprites from here we're going to add a bunch of geometry in this case an iosa hedrin then we'll wire up Mouse controls and we'll have a little light ball moving around once that's all in place we'll add rapure physics engine so that the objects are lighting with each other and with the mouse and lastly add some postprocessing some unreal Bloom for a really cool glowy effect let's get started here's our basic boiler plate where I set up the renderer and the scene and the camera I'm creating a a container for the mouse position and now I'm just creating a bunch of bodies so let's up that to 10 let's make these a little bit smaller I'm adding this mouse ball as well before we move on let's just look at what get body and get Mouse ball give to us cuz there's a lot going on here I'm going to pick a random position in space between range and half range so in this case between negative 1 and one uh I'm going to make some geometry and then add a wireframe geometry to that and then return that so that's all that's doing the get Mouse ball is the same thing only um does this have an update method too no only I'm adding this update method wherein it's just moving or where the mouse moves let's add that update method here and let's call this what's it called Mouse ball do update and pass in Mouse pause so now nothing happens why not I'm not sure why not oh because of this already that's really cool right just moving this light around I'm not sure if I made it clear but when I created this mouse ball I'm creating a little Point light and attaching that to the ball so as it moves around you get this cool lighting effect great now um the next thing to do we've got a bunch of geometry we wired up some mouse controls for interaction let's add the physics first thing we'll do is import the Rapier physics engine from this CDN up here next I'm going to initialize the Rapier physics engine define gravity and create a world I don't know why it's lad should be const right and create a world passing in that gravity lastly down here in our animate method we'll call World dot step so that's hooked up not much has changed because none of these objects in my scene have any physics associated with them let's change that I've already created the methods to link the Rapier physics engines rigid bodies to the 3js geometry so let's use that instead I'm going to pass in Rapier and World same here Rapier world and it doesn't look much different let's take a look at that setup and then fix that as well so first let's get the the mouse ball it's the same code as before where I simply create some geometry and a material and a mesh and add it to the and add a light as well but this time I'm also setting up a rigid body the way to do that with Rapier is to pick a rigid body description type um there are four types I'm only familiar with two of them because I'm only using two this K kinematic position based is useful for interactive objects like objects that are going to track the mouse move for example I create a rigid body using that description and I create a collider as well in this case it's a ball collider set to the size of the ball oh times three CU I wanted it to have more of an impact so I I scaled it up lastly I have this update method which is just going to set the mouse rigid body to the mouse position and then update the mesh to that's it real quick looking at the get body same as before only now we're adding a rigid body description this one's Dynamic so it's not controlled by anything but the simulation creating a rigid body with that description and a collider another ball collider and I'm setting the density in this case um the density uh uh we'll play with that in a bit to see what it looks like and then creating a collider there's the geometry setup and lastly I've got this update method I am resetting all the forces and I'm I want to I I I've defined a point at the middle of the scene that everything will be attracted to I'm calculating the position from the current ball to the center of the scene I'm that's the sub I'm like subtracting the position from the center position and then I'm adding Force to that the result of that subtraction and scaling it down a little bit can't remember what true means exactly and then I'm setting the position of the 3j object 3js object as well let's call that update method inside our animate here let's say bodies do 4 each body. update and just like that all the balls are being pulled toward the center of the scene and then they're colliding with this light isn't that just really cool I just think it's so good now it's time to add the postprocessing the thing to note here is this unreal Bloom pass okay here's the bloom pass I'm going to set its threshold and strength and radius I don't know what these are just play with the values until it looks good the last thing to do is with this effects composer that's going to replace our renderer in this method here oh my God it's really really glowy let's turn down the Sprites in the background let's tone those down and then let's dim down the hemisphere light as well Hemi light. intensity is equal to 0.2 instead of one woo how cool is that it's really glowy is it too glowy let's look at this value here maybe it's not glowy enough we could drop the could drop the brightness of the point light if we want set to a two let's set it to a one still looks really good I kind of want to play with the threshold to see if we can make the the glow look more like more glowy this should be a lot more glowy huh it's actually okay it's not that bad I'm going to make this 10 times more glowy that's pretty cool but it's not really what I wanted um something to play with change the color of the wireframe on the on the balls right now they're black let's make them white and that changes things significantly doesn't it um too much that looks kind of cool too there's something too chattery about the the white though what if I dim it down to like I don't know four five six that's pretty cool I think I like the black better what does red look like no it's way too much and that's just interesting but not quite right oh that's pretty cool so some things you can try uh you can tweak the settings all day and and see what else cool you come up with also try adding other shapes like cubes or text geometry or other simple models um try creating a simple game or come up with another interactive physics simulation as always thanks for coming by and please leave a comment below with your thoughts or any suggestions you might have or questions um thanks so much see you next time