what is up guys fire here from awesome toots dotcom and before we proceed to create our game let us take a short preview what is the game that you are going to create so if I hit the play button here we have a simple main menu with some animations and a play button nothing too fancy but hey you know me I need to add some menus in the game and show how you can navigate from one menu to another man you because well people are always confused about that so here we can only click on the play button it will take us right away in the gameplay when we jump we hear some sounds so I am gonna turn on or turn off my volume a little bit you see some obstacles that we have here and we need to avoid those obstacles such as the ninja or the squirrel that you just saw we can kill all of these enemies while we are in the air so while we are in the air we are able to kill all the enemies but if we are standing like this right here they can kill us as you just saw when we die we preview here the high score or the height that we reached we can click again to print play our game again or we can well click on the main menu to go back to the main menu so nothing too fancy but hey we will see a lot of cool features such as this right here for example the camera is not moving at all if I select the main camera you will see that the position of the main camera is at y equals 0 so we're not moving the main camera at all we are moving the actual backgrounds and what not and moving the enemies and all of those cool stuff we are gonna see so uh let's get into it and create this cool game I'm gonna go in another unity editor that I have created and we are gonna import the assets this is by the way a to the project so when you create a new project you're gonna select that 2d checkbox or radio button not the 3d one name your project and store it wherever you want so first things first here are the assets by the way these assets you can download them link is in the description below see see something like wanna use the assets for this tutorial and the complete project you can get it on the link below so click on the link and it will take you where you can download these assets so simply select all of these folders so we have buttons and/or backgrounds and buttons enemies and obstacles player and the sounds so I'm gonna select all of these folders and simply drag and drop and right here in my unity editor and it is gonna start importing all of those assets besides from importing the assets we are gonna create a main menu or the main menu you just saw in the preview in this video also so I'm gonna right click here and create a new folder so again it's rightclicking here in the project tab so right click create a new folder this is gonna be our scenes so not seen but since it's plural not singular and I'm gonna save this scene by holding command and pressing s and it's gonna open it here to save it of course or you can go under file save scenes and bam here you are I'm gonna select the scenes folder and this is gonna be our main menu so main menu and I'm gonna hit enter now what do we need for our main menu well of course we need a canvas and we need the background image so I'm gonna right click in the hierarchy tab right here and by the way if you want to rearrange how your unity editor looks like you can simply drag and drop all of these tabs you can put him here you can I don't know put him right here you can make them float like this if you like it like that I don't know which techniques you are using to you well create your games but this is how you can do it and you can save the layout for well later reuse by going on the top right corner right here you have the layout dropdown list and then you can click on the save layout and then simply name it here and click Save and voila you're good to go and I have saved mine as my layout and if I click it again BAM this is what I have let me just go here click on the resolution and by the way I'm glad that this has because I see a lot of people have troubles with this so I'm gonna use the resolution 480 by 800 for this tutorial now if you don't have it here if I assume and you need to go under game tab so game tab is right here if you don't have it it's under window and then you can click on game right here and any tab that you see here animation animator console here are key inspector they are all under window and here they are so scene tab game tab inspector here are key project animation blah blah blah so this is where you open these tabs now regarding to the game tab right below it you have a drop down list where you can select resolutions mine is as I already said 480 by 800 if you don't have it you see this little plus circle right here at the bottom you can click on that plus circle and it's gonna open this popup window the label here is the actual name for your resolution so it can be full HD for example here you have fixed resolution or aspect ratio aspect ratios like sixteen by nine sixteen by ten but the fixed resolution is where you can write 480 by 800 and when you click OK BAM here it is full HD 480 800 these in parentheses is the actual resolution and the first thing here is the name I named this on 480 by 800 as you can see here in parenthesis that's the resolution I'm gonna click it back again to my 480 by 800 and I'm gonna delete this full HD by right clicking on it and clicking delete and BAM this is how we do so this is how we create these resolutions in game tab moving forward in the hierarchy I'm gonna rightclick go under UI and create an image now before I proceed to do anything I'm gonna select the canvas rename it to you I canvassed for the render mode we have screen space overlay screen space camera and world space I'm gonna select screen screen space camera and attach the main camera which is going to take this canvas obey the cameras you can see this whole thing right here this big thing this big rectangle is the canvas but notice now when I drag the main camera here for the render camera BAM the canvas is right here where the camera is if you want to know a little bit more about these and what they are the Unity Technologies has an official tutorial explaining what is the render mode for screen space overlay screen space Cameron rulesbased simply type unity canvas render mode or canvas tutorial or something like that and you will find that video and I also talked about this in my courses you can check those courses out below is the link to all of my courses so I'm gonna select screen screen space camera as I already said for that UI scale mode I'm not gonna select scale bit pixel size or constant pixel size I'm gonna select scale with screen size and I'm gonna set the resolution to be 480 by 800 the one that we are using and here screen match mode it's gonna be 0.5 so that the canvas and his UI children will match the width and the height equally now taking this image I'm gonna put it in the middle of the screen this is what we see here and if we go back into the project and the backgrounds and buttons right here we have the background so if I select the UI image and I'm gonna drag and drop the background right here and Bend here it is this is our background now of course here I'm gonna see background image I'm gonna click on native size so set native size this is when we select the image and in the inspector panel in the camera or here in the image we have a property and we have a button called set native size if I click on it BAM here it is this is the native size of our background so you can see here the background now is covering the whole screen we are also gonna duplicate this background and it's gonna be the title so here I'm gonna name it title image subtitle I am gr image and I'm gonna search here in backgrounds and images for title here it is this is title and I'm gonna put it right here where the source image is and been here it is this is our image now again in regards to dragging and dropping these images you can simply drag and drop it like well like I did or you can click on the little circle here where it says source image and then you can search for the image right here and simply type for example title here it is and bam here you are and title is spelt UT what did I do here let me just go here and it's title like this is pelo t yeah I don't care I'm gonna spell it like that and in regards to the width and the height of the title image is gonna be 430 so 430 for the width and for the height 390 and position Y I'm gonna say it 5 this is where we want it so this is what we currently have for that image now when you select it here you have a rect transform and you have position x position Y position Z width and the height this is where I set the width for 30 and the height 390 let me just fix the scale to 1 if for some reason it's at point 9 9 so I just fix it for well to be at 1 what we also need is a button background which is also gonna be well an image I'm gonna duplicate this title image and there's gonna be BT and BG so I'm gonna name it and it's this blue shield so simply select the button BG drag and drop the blue shield right here it says source image and BAM here it is now the width of this is going to be at 372 the height is gonna be 206 and the position Y for it is gonna be at 31 why like that well now because we have a button and in order to create a button we simply need to right click you eye and we have a button and bam here it is this is our button now we are not gonna use this default one we are gonna edit it so this is gonna be our play BT and this I'm gonna name if you click on the drop down list for the button you will see it has a text by default you see this button that is written that's because of the text if I deactivated you see we don't have the text anymore so I'm gonna delete it we don't need it and select the play button and select the play texture drag and drop it here under source image UI sprite and bam here we are the width of this is going to be 181 and the height is gonna be 75 and position x4 it's gonna be zero position Y is gonna be 23 so this is our main menu now you saw in the preview that this circle was well circling around it had an animation this jungle was also stretching and going back stretching and going back so these are the animations that we are gonna create but we're gonna start with that in the next video and now that we have finished our main menu let us animate the title and this circle which is well the background for our button just as we saw in the preview video before we do that I'm gonna right click here in the project tab and create a new folder where we are gonna store our animation so here I'm gonna well name the folder animations inside of it we're gonna create another folder it is gonna be our title animation and another folder so right click create folder this is gonna be our circles of circle animation or however you want to name it but this circle is the circle background for the button this is really important with this I mean organization don't you throw things away in your project like put the animations anywhere I mean you can do that but it will get your project really messy so it's a good idea to create folders such as these so animations and here are gonna store that animations and title animation this is where we are gonna create an animation for our title so in order to create that animation you need to select the title image here it is and go in the animation tab which is this one right here I've talked about these tabs in the previous video if you don't have a tab right here called animation you can go under window and here it is BAM now let me demonstrate that so if I close the tab I don't have it anymore I need it so I'm gonna go under window click animation and bam here it is in most cases is gonna be floating like this sometimes it is docked like this for example but if it's floating and you wanna put it somewhere else simply take it like this and drag and drop it wherever you want it this is my set up by the way for unity editor you don't need to do it like this you can have your own set up experiment with it and then simply save it here under well any layout name that you want so now that we have the title image selected which is really important so select that title image that is really important when you select it go into animation tab and now you can click on create animation so let me just select the title image again to begin animating title image create an animator and animation clip so we're gonna click on create which is gonna create this popup window or open it and here in the title animation folder so you see here I'm in assets animations title animation this is where I'm gonna save these animations I'm gonna call this one title animation and I'm gonna hit enter and bam here we are so now we can start animating our title image if we go here into the project and title animation folder you see here we have title animation this is the animation clip itself title image this is the controller so if I select title image you will see now the animator component is attached on it this title image as you can see here is the controller so animator controller for this animator now what we need to do we need to go into the animation select the title image again you see this little red button right here or I'm pointing with my mouse so here it is under the animation tab you have these play rewind go to previous keyframe go to next keyframe and here you have this red image enable/disable keyframe recording mode if you played with any video editing software you know this or this red key icon is from familiar to you so when we press on it it will start recording everything so what we need to do here well first things first we are gonna change the width and the height of our title so I'm gonna go under frame 15 and by the way you see these samples here at 60 that means we have 60 frames in this animation but here you see this tab where it says 0 here I can type 15 which means it will take me to frame 15 you see now this line here indicating where we are in that animation this white line is now on frame 15 what happens on frame 15 well I'm gonna change the width to 230 and I'm gonna change the height to 350 for the title that's 250 but 350 now after that I'm gonna go on frame 30 so here I'm gonna instead of 15 type 30 hit enter which is gonna take me to frame 30 and on frame 30 I'm gonna set the width to 190 and the height is gonna be at 350 I'm not gonna touch it now I'm gonna go back to frame 45 or not go back but actually go to frame 45 hit enter here I'm gonna set the width to be 290 the height is gonna be 360 and lastly we're gonna go on frame 60 so here instead of 45 type 60 hit enter here I'm gonna say the width is gonna be 440 and the height is gonna be 400 so now I can click again on the recording button it will stop recording everything and well voila we are good with the animation so we can well preview the animation in or did you preview it I can go back here click on display button you see the is the jungle run animation we can also run the game so if we hit the play button now this is the jungle run animation now you see I don't want it to be this fast how can we change this well in order to change that we can go in the animator tab you see here now we have the animator tab again if you don't see it under window you have animation and you'll also have animator tab the animator tab displays these animation clips so you see title animation is right here we can double click on this and you see here it has the loop time check which means it will loop the animation itself if this is not checked it would not loop that animation now what we need to do here is click on the title animation and you see here the speed of the animation is 1 which means 100 normal speed of animation I am gonna click point 5 which is gonna play that animation two times slower then its own actual speed so if I hit the play button now you see the Jungle Run animation plays a little bit slower so actually please have the speed it did before so in order to do that again you need to go in to the animator tab select the title animation if you select something else sometimes if you select something else it will not display anything here but make sure that you select the game object you want to edit and you will see all of its animations right here so I'm gonna click on title animation and in the inspector panel right here you have the speed property setting it at point five will make it go half the speed of its original speed so half of its original speed so again if I hit the Run button BAM this is what we have right here let us now animate the circle and in order to do that select the button BG again click here create and we're not gonna see that in the title animation we're gonna save it in the circle animation right here so I'm gonna name it circle animation like this and hit say and bam here we are now we are going to do a similar thing and that is we're gonna click on the recording button go on frame 30 and we're gonna edit here the Z rotation so the rotation here we're gonna set it at negative 360 and we're gonna go on frame 60 now so frame 60 and we're gonna set this at negative 720 so if I stop recording now and hit the play button you see our well circle is rotating and if I hit the play button again BAM you see the circle is rotating jungle run is also stretching and going wire is stretching and going wider and whatnot now in regards to the circle you see it's rotating then stopping the rotating and stopping this is because of the animation now we can fix this with some lines of code I didn't like this but you can create a script attach it and animate it or actually simply make it rotate with code I'm not going to show you how to do that you can search that on the internet but I'm just pointing out that air that there are multiple ways to solve a certain problem in well programming and that's why when people ask me why did you do it like this what did you do this like this why did you do that that was my own preference I thought that that was the best way to solve that in that particular moment which does not mean it's the best code to solve something you can always always always optimize your code you can always add some new things to make things work better son and so forth so if you see me do something that is my own logic I use animations here too well create these effects I did not use code even though all of this right here did you see the stretching of the title rotating of the circle all of this is doable through code but this is the more simpler way and that's why I am showing you how to do it like that so now let's go into our game play scene so what we need to do is first click on file and then you scene shortcut for that is command and on Mac ctrl + n on Windows so if I click new scenes gonna take me right here and I'm gonna hold command press s to save it so assets scenes this one is gonna be named game play the first thing that I wanna do is set up our game play scene yes again we're gonna set up things still we're not gonna code so I deal with it I don't care anyways I'm gonna right click here in the hierarchy panel go under UI and create an image this is gonna be our background it comes with a canvas rightofway so I'm gonna rename it to UI canvas change it from screen space overlay to screen space camera and attach the main camera right here take the image and I'm gonna set it at 0 0 0 but before or after I do that we are gonna set the UI scale mode to scale with screen size 480 by 800 and we are gonna match width and height equally now what we need to do is we need to add a background to our image and that is gonna be under backgrounds and buttons the sky image so let me take it right here rename it to background instead of image drag and drop the sky image right here where the sprite is and click on set native size now you see the image is not how we wanted it to be because of that I'm simply gonna set it at 480 by 800 for the width and the height and voila here is our image I'm also gonna change the color now we have this purple white color I don't want that so for the color in the image property we have the color hex color right here is gonna be at 7 6 F 9 so 7 6 F 9 f FF this is the color that we want so let me just go here in the game yeah this is exactly the color that we want to have now what we are gonna do is create another image by duplicating the background image is simply duplicated and these are going to be our back trees like this and for that we need to search well for our tree one image so I'm simply gonna put it right here instead of the sky now this is not how we want them to be so I'm gonna change the way to 560 and the height to 450 and the position I'm gonna say here for the Y negative 212 and voila these are our back ground background trees of course since we have duplicated this background we have changed the color so I'm gonna put the color back to white or the normal color so now they are green as any normal trees while our we are also gonna take other trees which are our front trees so and you just take them right here and place them well something like this now these are gonna be our front trees because they are in front of these trees and this one let me just name them front tree one I'm gonna set it here so let me say point five for the X point six for the Y that is the scale of it and notice please notice this is not a UI element so this is a simple game object I have simply dragged and dropped these trees right here in the scene folder or actually in the scene view so I did not create a UI element for them as you can see we have the background then we have the trees if I turn of the canvas we are left with the front trees so don't be confused they are not a UI element they are a simple game object now here I'm gonna set it at negative three point let's say three and for the Y I'm gonna say negative three point five so this is what I'm gonna place this tree and for our other trees I'm simply gonna duplicate these and this is gonna be our front tree let me duplicate it again so this is gonna be our front tree now this one is gonna be position it at three so negative three or actually positive three and for the Y I'm gonna say three point nine so these are the trees that are gonna be in our game gives that depth effect for our game now the next thing that we need to do is we need to add our bounce and for that we have the bounce right here so they are and we just find them right here at shield side boundaries here they are so these are the bounds that we want to add in our game now we are gonna have we're gonna duplicate these but before we do that I'm gonna change their scale to be 0.76 on the X I'm not gonna touch anything on the Y and I'm gonna set 0 0 0 4 well the X and the y position so this is our level this right here that you see is our level what we need to do now is we need to add two box colliders to them why well because I don't want to I'm not gonna slice these if I open these as you can see these are two separate boundaries so one is here and another is here I'm not gonna use the slice machine or the slice sprite editor right here to slice it like this so one is here and another is here I don't want to do that instead I'm gonna use them as they are but I need to add two box colliders on them because we don't want or we want to prevent collision from our player going outside of these so if I take the side boundaries we are gonna add one box Collider and we are gonna add another box Collider really really really important to know when you are working in a 2d projects you're working with a 2d game when you filter for a box Collider so you have a box Collider here and you have a box Collider 2d box Collider is for 3d game objects so be very very careful about that box Collider 2d is for 2d so you need to be careful about it because if you add a box Collider this one the 3d one your code will not work because we are working with 2d so what we're gonna do with the first box Collider well offset is gonna be at 4 actually here offset it's gonna be four point twenty nine we're not gonna touch offset Y size X is gonna be one point six one and the size Y is gonna be 1024 and if I take all of these game objects and deactivate and we will see what I'm talking about so I'm gonna take the other box Collider which is this one right here and for this one we are gonna say well the offset is gonna be at negative so this one's gonna be negative four point twenty nine offset Y we're not gonna touch it size is gonna be one point six one so one point six one we're not gonna touch well the other size for the Y as you can see here we have two Box colliders let me just take this right here and position it here so he can see it one box Collider is here and if I move it let me just move on of these okay I'm moving this one on the left side you see I'm moving it let me just remember or memorize the value so I'm moving it this is one of the Box cool as you see it the green thing right here this is for the left one and this one right here the other one this right here is for the well right one so we have two of these that are gonna represent boundaries on our to let's say call these pipes I'm gonna call them pipes and I don't care if they are if they are not actually pipes I'm gonna call them pipes don't you come with me okay technically there are not pipes there are this I don't care okay so we need three more of these so on and this one is gonna be positioned at 10 for the y2 this was gonna be positioned at 24 do I and 3 and this one is gonna be positioned at 34 well on the Y so this is what we have these are the boundaries and since I am a control freak or organization freak I'm gonna right click here create an empty game object and I'm gonna name this one play your bounds like this position this at 0 0 0 now when I say position this empty game object at 0 0 0 that does not mean anything I just like them to be positioned like that I don't want this to be at 200 here and 351 no I want them at 0 0 0 select all four of our bounds so we have side boundaries 1 2 & 3 drag and drop them under the player bombs which is our parent game object and voila this is what we have this is our official level and we are done with editing it the next thing that we need to do is actually make these bounds move you see we need to make them move like this in order to simulate an infinite background effect and we will start doing that from the next video so let's get into some coding inside of the project tab I'm gonna right click and create a new folder which I'm gonna call well you can assume scripts I mean duh and here I'm gonna rightclick and create a new folder and this is gonna be our BG scripts because here we're gonna store the background scripts or actually the ones that are gonna move these pipes or these obstacles or bounds or however you want to call them so here I'm gonna rightclick create here BG mover so BG mover like this and we need to attach it on all of our side boundaries so I'm gonna select all of them by well selecting one holding shift then selecting well all of these and right here under add component I am gonna filter for the BG mover and hit enter and this is well the way to add this script to all four of our bounce now I'm gonna double click the script and open it here in mono behavior actually monodevelop I'm gonna tag the class here at the bottom hold enter just to give a little bit of space as always which we are used for me to do so we need a couple of variables as always when we start a script the first one is gonna be a public float which is gonna be the move speed I'm gonna set it at 3 by default let's say 5 by default this is the default value I set it to be public which means it will be visible here in the inspector panel bad here it is so we have the BG mover script we have the move speed value right here default 1 is 5 as we just saw we also need to get a reference to private game object and there's gonna be an array and are gonna be our side bounce not sounds but side bounce what is this well we're gonna get all four of these boundaries from the scene because while we need to calculate where we need to reposition each bound so we will see that in a second we also need a private float so float there's gonna be our camera Y this is the Y position of the camera we also need a private float and this is gonna be our bound height this is the height of our bounce and this is all what we need for now inside of the awake function so I'm gonna change start to awake and I always always always get this question why did you change a week or start to wake why are you using a way you can not start you can use either awake or start but I talked about this all the time and all the time I get questions about this so we have awake we have void start like this and we have void on enable all three of these all three of these functions are used for initialization now the difference is in the order of execution the first function is gonna be called when you start the game is awake function the next one will be on enable and the third one will be start now usually you are gonna use awake and start and awake is called before start that's why I like to use awake it's my own preference you can use start as well and it will work the same way so inside of the awake we need to get the reference to all of these bounds but we need to get them using their tack and in order to do that we need to go back here in the scene editor or unity editor when you select any of these game objects you will see here in the inspector panel below the name of the game object you have these tags it's a dropdown list so you can click on the dropdown list and you can go here add tag so click on that and then here you can create your own custom tag by clicking on this plus button right so if I click on the custom plus button I can create my own tag which I'm gonna call side bounce like this or side bound however you want it and I'm gonna click Save so it's side bound they are put together this is one word no space between side and bound this is important because now we need to tag so select all of these side boundaries and from the tag now you can select that side bound that we have created as our own custom tag so here it is when you select it notice now every single one of eisah our side boundaries will have that side bound tag so at all four of them now why did I say this is important so it's important because now we can go here in our awake and we can say side bounds is equal to game object find game objects so here we have plural not singular so s it's object with s we can remove that and we can only find one game object with the tag but since we need an array meaning all game objects in the scene which carry the tag that we specify right here so the tag is side bound now what is important here this side bound this tag name right here needs to be exactly as the name a right here so we see its side bound no space between side and bound if we do something like this here type space between them we will not find those game objects and we will have a problem so it's me it needs to be the same same signature same capitalization everything needs to be the same we also are going to get the camera why so camera why is going to be equal to camera that main that transformer actually die game object that transform that position that Y so this is gonna give us the Y position of the camera and what we also need to calculate is the bound height which we calculate by using the box Collider so we need to get the box now notice both box colliders have the same size on the yaxis so it does not matter which box Collider we get so simply here we need to type get component box Collider 2d and we need to say bounce that size that why this is gonna give us the height so how high how large when I say how high don't think about smoking weed or something like that it's the height so how high is the bound game object this is important because well we need to recalculate its position before we do that so before we recalculate the position we are gonna move it so we're gonna see here void move this is a function that we have just created which you're gonna call in the update right here to move our game objects our bounce and we're gonna do it simply by using vector three temporary variable is equal to transform that position so the current position of the game object temp that Y is gonna be minus equal to move speed multiplied by time dot delta time and below we simply to say transform position is equal to u temp what are we doing here because some students do not understand this if I take my highlight tool we have created a temporary variable so this is a variable temp to temporary store the value so to store the current value of our own positions of POS so our current position is stored in the temporary variable so now we are using the vy y value of the temporary variable subtracting from it the move speed so move speed speed like this multiplied with the time delta time now timed out delta time is a very small number between each frame so if we have 60 frames in a second that is a very very small number and it's used in calculations like this and simply then we use our current position so POS and we assign it new position which is our temp that's the new position so simply reassigning it back so currently here here we are storing it so this is our current position we have edited our current position and we reassignment back so that we have a new value of the position so think of it like this I have ten dollars and I give you that ten dollars so I give it to you and I tell you okay these are my ten dollars stored them for me so temporary hold them for me but also go and buy me some gums and that gum cost one dollar for example so one dollar is the gum so now from ten you have nine so that means you have nine now you bought me the gun and I tell you okay give me back my money so now you give me back the current value or the edited value which is now nine and not 10 anymore so it's not ten now it's nine so we are done with the movement so here we have well calculated a new position we are calling that in the update function we can go back here and we can well simply hit that play button to see that they are actually moving down you see they are moving down and eventually they will ran out and bam this is the trouble that we have or the problem well that we have now it's not that bad idea since we have these box colliders on these game objects we can select all of these we can add a rigidbody 2d because if I just move it up let me just move the component up and why did I add a rigidbody to all of these game objects well the reason for it is because we have box colliders on them and when you want to move game objects with colliders it is a good idea to add a rigidbody on them but before I proceed I will show you one problem that we have so our game objects are simply gonna fall down you see they just fell down now you might think this is okay because we have the script but if I deactivate the script that is moving them even if I remove it they're gonna fall down you see they're falling down the reason for it is because the rigidbody is applying gravity to our game objects so what we need to do is we need to go here and set them to be kinematic so here from the dropdown list body type is not dynamic anymore its kinematic so I'm gonna put them here as kinematic and if I hit the play button so now they are going down but because of the script if I deactivate the scripts of BG mover is deactivated they are not moving down as you can see they are not affected by gravity anymore so they are not affected by gravity if I change that dynamic BAM they are falling down and this is what I mean so let me turn it back the script on again and put the body to kinematic all four of these bodies so it's a good idea when you have a Collider on a game object and you're moving it that you that you actually put a rigidbody on it if you don't want gravity then simply put it to be kinematic but leave the rigidbody on that game object so what is the problem that we have now well the problem is that we are moving these backgrounds and eventually they are gonna well go away and we are not gonna have them anymore so BAM as you can see right here now also one thing that we are gonna do in regards to our side bounds is that we are gonna take these trees and let me just take them position negative two because I want these trees to be in front of our well obstacles here or side bounce you see the trees are now in front if I put them back at Z so Z position isn't negative two if I put it back at zero you see in the front line we see I'm not sure if you're actually seeing this I'm gonna zoom it back so here notice all of the trees are behind these bounds if I put the front trees at negative two for the Z they're now in front of the boundaries because I wanna create that depth effect so now I'm moving back to our script what we need to do is we need to reposition them so here I'm gonna say void reposition and we need to call this function right below the move function so right below it here call reposition in a side of the reposition we are going to test if our bounds are below the cameras Y position so here we're gonna test if the transform position which is the current position of our bounce that Y is actually less than the camera Y and for the camera Y we also are gonna do the following here so we got the camera Y I'm also gonna subtract 15 so I'm gonna see here minus 15 just so that I can give a little bit of space before we actually reposition the background so if our current position Y is less than the cameras Y position of course we have subtracted 15 from it right here so if our position is less we need to reposition our background how we're gonna do that what we need to calculate the highest Y of the backgrounds Y the highest well notice here in the scene you see the first bounce this one that are here you see I'm deactivating and these first are at position zero for the Y the next one are at 10 the third one are at 20 and the fourth one are at 30 so what we need to do when this side bound right here so when it goes like this and goes below the camera somewhere around here we need to reposition it back in front right here so that it can again go down like this and then be positioned back and again and again so this effect is what we are gonna achieve so let me position this at 0 0 for X and the y to put it back where it was and in order to do that we're gonna say here float highest bounce Y so this is the highest bounce y is gonna be equal to side bounce element that's it index 0 that transform that position that Y how can I be sure that the first element in this array is the one that has the highest Y position well I'm not because when we use this game objects or game object find game objects with it's gonna get all of these game objects that have this tag and put it in this array now the order by which this function gets these game objects is always different it does not get them like this so side bounds will be element 0 side boundaries one will be element one side boundaries two will be element two you know it can be that side boundaries two is element zero or at element zero index zero that is side boundaries three can be an element or index one side boundaries can be at index two and side by boundaries one can be at index 3 now my point is that it will not get them in this order so that the last or first element will always be the one with the highest Y position instead we need to compare the value so here are gonna say if or actually we are gonna say for INT i which is equal to 1 y1 well because here we used 0 0 index we don't need to test element that's an index 0 instead we are going to test other elements so for y or int i that's equal to 1 I is less than side bounds that length I plus plus so we're gonna filter through the array and we're gonna test if the highest bounce Y which we assigned to be equal to Y well this right here if it's less than side bounce element that's an index Y dot transform that position that Y that means that this element here at index I in the array has the higher value for the y axis which means that we're gonna say our highest bounds Y is equal to this right here like this so what we are doing here let me just go here and well demonstrate this with a highlight tool let's imagine that element at index 0 has a value of let's say 5 for Y so here's Y is equal to 5 we assign that to the highest bounce now that does not guarantee the this right here the element that said index zero actually has the highest value for his yaxis that's the reason why we are testing so we are looping through the array here and testing if the current value of our highest bounds Y is less than Y axis or Y value from the element that's it index Y if that is true so let's say this I currently has value one that's element at index one and that element and index one has a yvalue of seven so the Y value here is seven which means this value here the first one is actually less than seven so we're testing if it's less and that is true that means we need to reassign this seven to this value because it is the higher value so this is what we are doing here so now that we have the highest Y value for our bounds what we need to do is simply we need to say here vector three temporary position is equal to the transform that position and we need to say the Y value of our current bound is going to be equal to highest bounce so highest bounce y plus the bound height and that is that and here we simply need to say transform that position is equal to temp Y the bound height well if I go here let's say the highest value is 30 and we want to reposition this one so we want to reposition this one here now if I say that the highest Y value is 30 and I want to position it above the one and if I put it here at 30 notice it's at the same spot so it's exactly here you see we have this one it's right below it let me just go here come on reposition back so it's at 30 so it's at the same you see they are at the same position here we don't want it we want this one to be above that one right here and we know that all four of the bounds have the same height so we can use that so we can say okay I want this to be at position 30 but also I want to add to it its height and its height is equal to 10 so that means plus 10 that mean is 40 which means BAM it will position you see it will position it above the down ones of the previous one actually it will reposition it back so we have it right here so we have calculated we're calling this let me just save the script it's really important what did I do here okay so I just duplicated this code so sorry for that anyways it's really important that you save your scripts every time you type some coming out command s or ctrl s on Windows to save the changes in your script so we are calling these functions here and let's see that magic happens so if I go here hit the play button in the scene notice now when this one you see its repositioning about did you see that it is repositioning back these backgrounds and notice here how we have that in our game so this is how we have it in our game you see that little gap that we had yeah we have this gap right here so we can fix that gap by doing something like this so we can say bound height let's say minus one just to well subtract one from our bound height so that we can actually fill out that gap so if I go back here let's see if we have that gap again between these no so yeah this is the effect that we want we don't have the gap between our bounds that we had well a moment ago just by subtracting one to fill out that gap and notice they are repositioning this whole time it's calculating where is the highest yvalue all the time and it is putting these back up and up and up and up so we have this infinite background effect and if you take a look at here you have an assumption so you have a feeling like the camera is moving but actually no the bounds are moving down and you think the camera is moving upwards so this is some new features that we have learned so far because most of the time in infinite runner games that did or tutorials that I did for infinite runner effect games I move the camera but now I'm moving the game objects themselves so you see what I was talking about you see this one it's gonna be repositioned on the top BAM it's on the top and again and again they are stacking upon one another so this is what we are doing here calculating the highest Y and repositioning it back using the highest Y plus the bound height minus 1 to fill out that gap and now that we have our obstacles moving let us add our player in the game now before we do that inside of this assets folder we have the player enemies and obstacles and backgrounds and boxes we can create a new folder here so I'm gonna name this one two sprites and select player enemies and obstacles backgrounds and buttons and put all of this inside of that sprites folder just so that we group our sprites right here in one place so if we go here inside of our player folder first sprites then player we have these player animations here so we have the run animation jumping animation and fall down which is his dead animation what we need to do is create a new animation for the player before that in the animations folder I'm gonna right click and create a new folder this is gonna be player animations and here is where we are gonna put the player animations so sprites player select the run animation this one right here and well drag and drop all four of these so one two three four and drag and drop them right here in the scene view and now when we do that BAM this popup window pops up asking us to create an animation because we added four or selected four images and we're gonna select animations folder player animation and here I'm gonna call this one run all right and hit enter to save this gonna be our run write animation for the player why run right well we'll see that in a second first I'm gonna rename this game object to player he is too big for our game as we see right here so we need to well resize him select the player scale on the axis point you on the Y point you on the Z point to here I'm gonna say 2 for the x axis and negative 1 on the y axis this is where we are gonna put our players so this right here and let me also take the player and change his Z position let's say Z is gonna be a negative 4 just so that our player is visible on top of the obstacle if I hit the run but now notice what we have our player is running on the obstacle before we proceed with the animations because we need to well prepare these animations for our player we are gonna click here under add component filter for box Collider 2d and voila here is our player so we have the Box Collider here and I'm gonna resize it because as you can see you see this right here this is not how we want it so I'm gonna set the size on the X at two point ninety eight size on the Y let's say five point nine and off set it on the x axis by one point thirtyfour so this is what we have for our box Collider voila let me just put the player back here and to you for the X and we need to add a rigidbody as I already said for our player because we will be moving him and he has a box Collider and filter for rigidbody 2d we need to make it to be kinematic because if we leave it like this now BAM you see the player fell down which is not what we want so select the body type here drop down list and click on kinematic and we are done or good to go going back into the assets folder in the project rightclick create a new folder for prefabs and inside of the prefabs folder go right here right click create folder player prefabs not play fraps prefabs like this and voila here we are drag and drop the player here because it's a good idea to create prefabs out of game objects that you because a prefab is a reusable game object if I drag and drop the player right here here we have another player and all of the features or all of the settings that we had for this player now this prefab also has and when we change something on our player this one right here we can hit apply at the top right corner so that that change also will apply to the prefab before we proceed with some scripting we need to go here in animation select the player himself and create a new animation we know that when we want to create a new animation if I select the tree we have this create button and I click create and then we can select where we want to save that animation blah blah blah but when we select the player now we don't have that the reason for it is because the player has his animations he has his controller an animator component attached on him so in order to create a new animation right below the red recording button we have this dropdown list and we can click on it and we can click here create new clip this is gonna be our jump animation now since we are on the right side right here we are gonna jump from right to left so here I'm gonna create a new clip and I'm gonna call this one jump left animation and save it as sets animations player animations and click Save what we need to do is put this animator tab right here go into the sprites player folder and we have these jump cycles so we have four of them drag and drop them and put him right here and here they are let me just zoom in a little bit zoom in a little bit more and voila here they are now I don't want them to be right here right next to each other because like that notice here this is the animation now that we have this is our jump left you see the player is like crazy and we do not want that so we are gonna take these keyframes so take these three keyframes and move them like this and let's go on key on frame 15 so let me just move these keyframes a little bit more frame 15 this one right here drag these two or the first two keyframes so these two drag them on frame 15 we're also gonna go on frame 30 and you see where this is going so here we have frame 30 this one right here let me just take two keyframes and put this on frame 30 and frame well 45 put these two keyframes actually we can move these a little bit something like this so that I can put this on key frame or these key frames something like this so first two key frames you see they're gonna be on frame 15 next you on Kate on frame 30 then frame 45 so these do you need to be on frame 45 and these two are on frame 60 because our animation looks a little bit better now you see here our animation looks a little bit better don't worry about the animation being slow we will speed it up in the animator panel so we will speed it up so don't worry about that but the important thing is that we have created that animation now as you can see our animation is not that good you see the player is very small when we stop the animation this is the players normal size and whatnot so in order for us to begin the scripting we need to fix these animations because we are not gonna use some code that's gonna put our player from this position to this position instead we're gonna use all animations so we will animate the player running on the right side then animate the player running on the left side and animating the player jumping from left to right and vice versa from right to left so what we also need to do is go in the run animation run right I called it run right for a reason because we need to hit the preview or actually the recording key we need to hit it change the X like this change it to any value so X position change it to any value and now put it on to you and go on the last frame this one right here and again put it on you are actually changing just so the tween record when I say change we need to record so that we record this keyframe so we need to have these keyframes as you can see now we have our player sprite position but put it again at why because this is the players running a right animation as you can see right here so we have him running on the right side because we are also gonna have him running on the left side and in order to have him running on the left side we need to select the player go in the animator select the run right and duplicate it not jump left duplicate the run right animation so here it is and now take the run right enemy should rename it from run right zero to run left and hit enter and bam save this select the player again going to the animation tab and now we have so we should actually have another animation no we don't so we need to improvise and go back here delete this one and create a new animation I thought this is gonna work so create a new animation clip and this is gonna be our run right because or actually run left so run left and again we need to drag and drop our animation so go here we have running animations these here and let me just go here and see where they are let me compare them with the running right so yeah they go from well zero up to three frames so this is okay and this one right here run left does the same exact thing so does the same the same exact thing but what we need to do is the following hit the recording button so hit the recording because now we need to well run on the left side which means that our player needs to be on negative you see right here and also negative zero points you on his scale and we need to go here on the last frame and just change the position just so notice here notice we don't have keyframes right here but if I change the position BAM you see we have keyframes right away so put it at negative two and also change the scale just a little bit just so that we get the keyframes and we are gonna set it at point two why is that well now we have the animation running the player from well on the right side and also we have the player running on the left side if I hear the play button you see this is what we have a right here now don't worry about the animation being that fast we can always always well turn it down a little bit so if I go here inside of that animation this one has 60 if I set it to 12 and if I hit the play button so yeah simply change the frames you have here samples you see samples are set on 60 between 60 frames in a second and the player is running like crazy see like a Rotorua but we don't want that set the samples on 12 because for the run right samples are also on 12 so the player runs like this let me just go back to run left it's the same exact thing now in regards to the jump left animation what we need to do so we need to animate our player jumping well from right to left before we actually animate our player jumping from right to left let us select the first three keyframes and put it back like this so the first one will be at zero the second two will be at 15 and the second three or the third two keyframes will be at frame 30 the last key frames can be on frame while 60 or the last frame right here because this will make that animation look a little bit better now what we need to do is go on frame 30 and when our player jumps we are gonna hit here the record button set the position Y at 0 and set the position X at 0 so that our player gets here and go on the last frame set the Y position at negative 1 and the exposition at negative 2 because now you see this is that animation of our player jumping now our player is very small you see here when he jumps he gets very small we don't want that so going here on frame 0 hit the recording button set the skill at point 35 for the X and point 35 for the Y so Y and X are gonna be 0.35 do the same thing here for our well for the last frame let me just put it like this and like this so now I'm gonna set it 3535 so simply change number at the last frame so that you get the keyframes and put them back so the skill is 0.35 skills EADS not important only x and y so notice now when we jump this is what we have here so player is jumping don't worry about the animation being a little bit slow we will fix that later on in our code we can go here in the animator and we have well jump left let me just see where my animations are so we have run right a run left here it is let me just resize the window so that we can see more clearly run right and run left and we have jump left and we will have jump right so if I take it here and put it a 2.5 speed it will run two times two and a half times faster you see as its original speed but we can see that in our game now this right here is a set up for our player animation because this way it is much easier we can simply use the jump left animation the player jumped from right to left and then from here we can continue to play run left animation which is this one right here and when the player jumps from right to left we can continue to play the run right animation which is this one right here this is much more easy or easier than if we had to do all of this from our code now to get this or to paint a clear picture to see how easy this is actually we need to start coding but we are gonna do that from the next video and fire from awesome toots dotcom if you missed something in regards to these animations you can rewind the video to see how I animated everything or download the complete project link is in the description below to see how I set things to be animated and now that we have our player animations let us program the player while players movement and jumping so if we go here in the scripts folder right click create a new folder layer scripts inside of this folder right click and create a new C sharp script let's call it player play a planar and attach it on the player right here hit apply so that this change applies to the prefab what we need for our player what we need to animate the player we also need to be able to click on the screen and make the player jump so before we continue to program we need to add a UI button right here in the middle so if we take our canvas right click and go under UI and create a button BAM here it is this is our button now we need to resize it so resize the button to be right here to fit the whole middle or one half of the screen so this button needs to be on one half of the screen so that when we run our game we have a button right here that we can click on now this is very ugly we don't want it to look like this so first things first remove the text from the button we're also gonna rename this one to jump BTN so Jumby T and this is the name of the button and inside of the inspector panel of the button here we have the color we're gonna click on it which is gonna open this popup window and we are gonna set the Alpha to zero you see which is gonna make the button transparent it is still clickable but it's not visible so now we need to go here before we start typing anything we need to type using Unity engine UI because the button is under this UI if we don't type it out we will not be able to get the button and we need to get it in order for us to program it for it to do something so what we need is a private animator which I'm gonna call an M we also need a private boolean on left on right and a private boolean a private bull jumped jumped like this inside of the awake function we are gonna well initialize these variables so in the awake here we are gonna say an M is equal to get component to get the animator component that is attached on the player and we also need to get a reference to our button but before that I'm gonna see here on write is equal to true on left is equal to false this is to initialize on left and on right these on left and on right are gonna determine the side on which we are so it's going to determine if we are currently on the right side or on the left side and this is for the jump animation so we will deal with this in a moment don't worry about that what we need to do is create here a function so public void jump and this is the function that's gonna allow us to jump and we need to add it to the button by typing here game object find the game object with the name jump BT and like this so if I go here in our unity editor we see that we named our jump button jump BTN so that's the same thing we need to type right here now pay close attention this name right here that you put so jump BT and this run right here needs to match up with this right here if you make a mistake this will not work but we need the button and we are gonna get it as a component so get component button like this dot on click dock add listener and this listener takes a function name so the function name is jump which means that now we added jump to the button which is the function and it'll be executed when we click on the button just so that I can well confirm my claims I'm gonna see here printed something like this it's not important but important is that we see that when we click on the button this jump function right here will be called in the console we're gonna see all of that let me just go here and clear it if I hit the play button if I click somewhere here Bam Bam Bam Bam Bam you see here printed is being printed in the console which means that actually this worked so now our public voice jump is the function that's gonna be executed when we well hit the button so what you're gonna do in this jump function well first we are gonna see here if on right so if we are on the right side when we press the jump button we're gonna call our atom to play the jump left animation like this else if we are not on the right side which means we are on the left side we're gonna call our atom to play jump right and below here we're gonna inform that we have jumped so jumped is now equal to true while we're doing all of that well the reason for it is because in the update function right here you're gonna test if we did not jump so if we currently did not jump that means we are moving either on the left side or on the right side so we're gonna test are we moving on the right see if on right meaning we are moving on the right side we're gonna call our atom to play run a write animation else our atom is gonna play the run left animation like this so as simple as that but we are still not done because we need to go here in our unity select the player here so select the player and go here we have jump left we need to duplicate it and now we need to rename it to jump right so now we need to rename it as I said to jump right but what we also need to do is we need to set here the speed be y well because when we use jump left it will jump from the right to the left side but now we have duplicated that same animation which means that if we call jump right it will again make the player jump from the right to the left but we need need him to you well jump from left to right that's why we are going to use the negative we will see this in a second now before we continue actually do anything we do need to well we do need to we need to add one more feature to our animations so in the animation panel right here we have our player and here we have his jump left and jump right animation let me just go here inside of our assets then inside of our animations right here player animations here it is we have jump left run left and run right I'm need to duplicate this jump left and call it jump right because we need to be able to see this animation right here so we need to be able to see this animation right here we currently don't see it because we have here jump left which uses jump left motion which is the animation so it's the animation itself jump right uses that same motion we need to select jump right and select here jump right you see this one right here the one that we have just duplicated it's the same animation but we will play it backwards now as I said the reason why we need to do this is because we need to be able to see this animation you see we need to be able to see it right here because we have the player jump left which is this one right here and let me just go here we have jump right actually yeah here it is sprite just take a look at it so this is jump right actually it needs to be duplicated yeah it will be when we well go into code so don't worry about that what we need to do here is take the jump left and go here on the last frame click on this keyframe you see this right here this is while a motion or an event function event that we are adding at the last frame and that is gonna be a function that we need you will create inside of our script so right here below our public void jump you're gonna have void on left and we're gonna have void on right so I left and on right in on left we're gonna see on left is equal to true on right is equal to false and jumped is equal to u true or actually false again copy all of this here in on right we're gonna do well the opposite on left is false on right is true and jumped will be equal to false so if we go back in unity and here select that event so that you can see it like this as I see it in the inspector panel so now you have a function to select so I'm gonna select here this is jump left animation so we have the jump left here we are gonna call on left as you can see here we need to call on the left and for the right animation so for the right one we need to call on right so if I go here we have run actually this is not run jump right here it is jump right we need to add that event here at the beginning why at the beginning well because we're gonna play this animation and backwards we will see this in a second so if I hit here add the keyframe click on it so you need to click the keyframe and select the function on the right so now we are good to go to test all of this out and then I will explain it again line by line and what is going on so if I hit the play button you see here I hit the play button if I click here to jump we will go to this animations we just saw go here as you can see now we have a problem that problem is the following because this jump right needs to well have this loop time on check actually this one right here too so let me just run right run left let me just see what is the problem here so we have on right on left is false on right is true and jumped well be equal to false this is what we did and I think this is okay so let me just go back here in the animation jump right here is our animation on right it's calling on right this should work so I'm gonna just go here hit the play button okay yeah now it's working I don't know why I did not work a moment ago but the important thing is well let me just take the jump left did I turn off loop time so turn off the loop time from jump left and also turn off loop time from jump right and let me just test it out again yeah the problem was the loop time now what is loop time and how do you actually deactivate it well doubleclick on the animation you will have these options here to deactivate the loop time loop time it will make that animation loop over and over and over again so we do not want that let me now explain what is going on let me hit the play button you see our game is running the player is running on the right side which means that our run right animation is being played when we run the game the awake function will be called now here we are getting the jump button adding the listener which means the function that will be executed when we press the button and we are getting the component animator but we are also setting on the right side to be true on left is false because initially when we run the game our player is on the right side in the update function if we did not jump the default value of a boolean is false if we don't type here if we don't type here like this we don't type is equal to true the default value will be false so if we did not jump before so if we did not jump this is false that means we are running so if we are on the right side we will play the run right animation if we are on the left side we will play a run left when we jump if we are on the right side we will jump to the left side otherwise if we are not on the right meaning we are on the Left will jump to the right side so what is going on yeah jump to the right confusable right left up and downs on and so forth we also created events so animation events here inside of the animation itself you see here we have created these which means these events will be called when the animation hits that frame you see when the animation hits that frame it will call that event which is actually this function so when we get to the last frame in this case we are playing the animation backwards and when I say backwards if I set this to be negative or actually 22.5 notice what's gonna happen so we are gonna jump really see you see what is happening you see which problem do we have here because we are not playing that animation backwards we are not playing that animation back where is this jump right and in order to play it backwards we simply need to set the negative to the speed because we are using the jump left animation you see the motion is from the jump left we just duplicated renamed it to jump right which means that is the same animation if you want to play backwards set the speed to negative it will start playing it from the back so it will not start from the front or the beginning of the animation it will start from the back which means from here it will start from here and go to here which means that the first frame will actually be the last frame because we're playing from backwards when I say from backwards if we have here 60 frames that means backwards we will play from frame 60 to frame zero so frame zero is the last frame and here is where we are putting the on right this one right here function to be called which means we are not on the left side anymore we are on the right side and we did not jump so when the animation ends it calls this event and these get executed jump is false and when the jump is false notice exclamation mark will make what's after after in the opposite so jumped here is false but the exclamation mark here is making it true because it's making the opposite what's opposite of false it's true so if we did not jump and we are on the right side play the run right animation if we did not jump and we are on the right side meaning we're on the left side play the run left animation when we jump if we are on the right side that means jump to the left side when we jump and we are not on the right side that means we are on the left side then play jump right so jump to the right side and as you can see here jumped is true because while we are in the air we don't want to play run right or run a left animation as you can see with a couple of lines of code these are not that many lines of code these are 20 or so lines of code we managed to make our player jump from the left to the right but if we did all of this in our code we will need to calculate where the player is when he lands how we are gonna animate him so it's gonna or that would be complicated but like this it's very very simple you see the players jumping from left to right and right to left with just a couple of lines of code as you see right here so it's really easy to do this with animations and we don't have to do anything complicated now we can also use space and just take this right here so all of this right here and inside of our update right below where we are testing if we did if we did not jump we can test if so if input get key down key code space so space if we press the space key on our keyboard we're gonna do the same thing right here so that same thing is actually jump and we can test it out so if I go back here hit the play button I'm hitting space now and I'm jumping you see hitting space and jumping hitting space and jumping heating space and jumping then you get my point and you can watch these animations being played right here notice when we run the game you see Ronna right is being played when I job you see jump from the left or jump from the right to the left animation played and it is indicated with this bar right here you see the blue thing that is filling this is the bar indicating which animation is the plate so now we are on the left side because we triggered we have triggered on left on left is true on right is false and when on right is false as you can see here we're gonna play run left which animation is playing around left when we jump you see we jump from left to right and the jump right animation was being played because when we jump we're testing if we are not on the right side that means we are on the left jump to the right side let us add our first obstacle in the game so we need to go into sprites and then enemies and obstacles the first one is gonna be our flag so simply drag and drop the flag right here and for this flag what we need to do is set the scale on the xaxis at 1.23 now this flag is not gonna be on its own we are also gonna have the squirrel or the squirrel and we're gonna add it as a child of the flag so before we create the animation of the squirrel as you can see we have four animations or one two three four yes four animations from the squirrel we are going to take the flag and we're gonna add a box Collider 2d on it now you can see that the box Collider is all around this flag we don't want it to be like this instead we are gonna resize that box Collider so the size on the x axis can be 1024 the size on the Y is gonna be point 52 and I'm gonna set the offset Y to be at point zero six so this is this green thing do you see this green rectangle thing this is our Collider that is on the flag itself so now we can select our squirrel and we can create it now before we actually create the squirrel squirrel we will create a folder inside of the animation so assets animations rightclick create a new folder just is going to be our squirrel animation so it's sq I RR e Skua and we are gonna create the animation for our squirrel so sprites enemies select all four of these drag and drop the squirrel here BAM here it is and I'm gonna save it into animations and then squirrel and here it is squirrel like this animation and hit enter as you can see the squirrel is too big if I put it right here and go into the game tab it is bigger than the player itself so we do not want that what we want to do is we want to resize the squirrel so we are gonna see points 4 on the x + 4 point 4 on the y 4 x + y scale we're also gonna add a box Collider 2d on the squirrel and resize it because currently it is all over the squirrel so the size on the X is gonna be 1 point terney 9 and the size on the Y is gonna be 0.88 and we're also gonna offset it so offset on X is going to be negative point 28 and offset on the y is gonna be 0.7 teen now we also need to add a rigidbody on the squirrel so here I'm gonna go add component a rigid body 2d on the scroll I'm gonna attach it I'm not gonna set it to be kinematic I'm gonna leave it a dynamic and also what we want to do is we want to add that squirrel to be the child of our flag because the flag and the squirrel go well one with each one with another let me just rename the squirrel here in the hierarchy as squirrel and I'm gonna well put it to be under the flag let me just set it at zero for the xaxis and for the yaxis I'm gonna reposition it something like this but since gravity is being applied on the squirrel it will be well it will fall down on the flag itself now in regards to the flag when we set it to be at position zero for the x axis this is how it looks like we are also going to take the flag set it at negative three we for the Z does this work actually it needs to be at three not negative three so set it to be at three so that it is like this you see it's behind our obstacles now one thing that we want to do is you see when we run the game notice what's happening here so you see we have the flag and it's going or not going down we will cover that in a moment but we also want the squirrel squirrel to move left and right and in order for the squirrel to move left and right we need to create well a script for our squirrel so if we go inside of our assets scripts right click create new folder enemy scripts this is where we are gonna put our enemy script well the folder and here I'm gonna right click and create a new folder and I'm gonna see here squirrel so sq I are evil or are ya P Elia that it is sometimes I don't know how to spell so forgive me rightclick create a csharp script squirrel and attach it on the squirrel itself so something like this attach it on the squirrel doubleclick it and open it in monodevelop let me just hold enter actually for a stagette class hold enter just to give a little bit of space and if we go here on top we are gonna add some variables the first one is going to be a private float move speed which by default is gonna be equal to 3 and we need update we don't need the start function so we're not gonna initialize anything but we need to create a function that's actually gonna move the squirrel so here I'm gonna say void move and we're gonna use the same technique as we did with our backgrounds so what we want to do here is create a vector3 temporary position which is equal to transform position and here we're gonna say temp that x plus equals speed multiplied with time dot delta time and simply take the transform position is now equal to you temp if we put this function right here in the update it will start moving the squirrel but we will have one problem so if we go back here and run it you see the problem the squirrel is trying to go away here and trying to touch things and whatnot but it is not working so that's not working and why isn't working well because we're just moving the squirrel to the right side plus equals to you is the same thing as if we say temp dot X is equal to temp dot X plus moves be multiplied time that so it's time that delta x we just type it out correctly here time dot time.deltatime finally thank you very much so this right here is the same thing as writing this here but this is a shortcut plus equals two we don't need to type well like this as you just see here now what we need to do we need to detect when we touch our bounds and since both of our bounds so if we go here and if I select the side boundaries you see the box collider actually the box Collider that is attached on them is not set to be a trigger if we select the squirrel the box Collider attached on the squirrel is not set to be a trigger so we cannot use on trigger enter instead we need to use here void on collision enter 2d which takes a collision 2d as an argument and I'm gonna going to call it target so this on collision enter will be called when two colliders touch each other so when the squirrel touches this side of the bound on collision enter will be called or if it touches the left side on collision enter will be called what we want to test here is if the squirrel has touched the side bounce so we are gonna see here if targets so target which is this parameter right here so this is the target parameter collision 2d that's passed inside of this function which enables us to get information about collisions such as the game object we have collided with so if the target dot game object and it's tag is equal to side bound so if equal to side bounce we have touched our bounds now we need to go in our unity editor go inside of our tags so go on top here it is we have side bound so here if we select all of these they are tagged as side bound so not side bounce but its side bounce so don't add s or otherwise it will not work I was just going over to my unity energy to make sure which tag we have applied and if I left it its bounce with s plural not singular then BAM we have a problem so this name right here in the tag this name right here needs to match up with the name right here or otherwise it will not work so if we have collided with our side bounce what we want to do we'll simply we want to change direction so we're gonna say here move speed will be multiplied by negative 1 so multiply 2 by negative 1 which will change the value of the speed what does that mean well that means that if the speed was positive now it will be negative if the speed was negative now it will be positive so every time we touch one side it will make the speed either positive or negative and it will make our squirrel go into the left or the right side let me demonstrate that and we will have one problem that we will see and fix so notice now the squirrel is going back what you see the squirrel is going left and right going left and right let me just zooming how can I do this never mind you can see what I mean so you see the squirrel is going left and right left and right you see left right left right now the problem here is that the scroll is not changing the direction where it is facing so what we need to do here is create a vector3 temporary variable which is equal to you transform that a local scale and temporary variable X which is while the scale or the direction on the x axis we are going to multiply that so multiplied equal to by negative 1 and the reason for it is the same thing we are gonna change the direction if the scale is now positive it will be negative so notice what I mean so if I go here in the scene and zoom in you see what the scroll hits this side it's gonna go ink so when it hits the right side is gonna start to go to the left side and it needs to face the left side so that means that the squirrel and let me just type here point four that means that the squirrel will now be facing the left side which is the negative you see like this the negative this is the positive negative positive or negative it will simply change the direction where it is facing by multiplying this with negative one so now transform local scale is equal to temp and we can now go back in our unity editor and test to see if the squirrel will change directions of BAM it is changing the direction BAM changing direction BAM it is in fact now changing the direction what it hits the bounce now one more thing that we need to do is for the flag itself so here in the enemy scripts I'm gonna create a new csharp script which I'm going to call enemy move and this one we're gonna attach it on the flag itself so you see the flag itself it needs to move down same way as our bounds are moving down so if we go here in the enemy move function let me just are actually script excuse me so here I'm going to tag it with the class tag hold ENTER to give a little bit of space here on top we need to have a public float move speed which is going to be equal to one F we also need a private float which is going to be camera Y and inside of our start function we're gonna say camera Y is equal to camera so camera that main dot transform that position that Y and let's say 10 F just so that we well know from where we need to turn off our game object now notice this or what we need to do now is that we need to type void move which is a function that's gonna move our game object and we're gonna call move in the update we're gonna do the same thing as we did with our BG mover so vector3 tempest transform.position our temp dot Y is minus equals to move speed multiplied with time dot delta time and transform position is now equal to10 reassigning it back so this is nothing new it will simply move the game object down we did this already but in our void deactivate so deactivate we are simply going to test if transform that position that Y is less than cameras Y then what we want to do is we want to say game object set active Falls to deactivate the game object from our game we're gonna call it right below the update so we are gonna test if our own Y position so the Y position of the enemy move which is attached on the flag itself if it's less than the cameras Y that we have calculated here then we will deactivate our game object deactivating the game object releases memory in our game because we are getting rid of game objects that we don't need we don't need them in terms of when this flag goes down so if the flag goes down like this we don't need it anymore because it's out of sight we don't eat it the player does not see it it's not important to us and because of that well we need to get rid of it the simplest way is to use set active false which means the game object will be deactivated that means notice if I select the flag and notice here in the inspector we have this cube icon right next to it we have a check box and then we have the name of the game object if I uncheck this check box BAM you see the game object is no more it's not visible in the scene view and it's not visible in the game view which means it is deactivated it is still in the hierarchy here we could potentially activate it again if we have a reference to it but when it's not active all scripts that are attached on this game object will not work all scripts that are collisions physics that is applied to this game object will not be calculated when the game object is not active now we do need to set the move speed to five because it needs to be the same speed as our side boundaries so that they move in the same harmony so to say so if I hit the play but now notice it is moving down you see BAM it is moving down and we well touched our squirrel with the player let me just take the player here and actually the player can be set to be a trigger and I'm gonna hit apply because anyways we set him to be kinematic so he can set to be a trigger so that we don't roll over game objects as we just did with our squirrel so if I hit the play button again notice bam the game object is going down and notice now when it goes actually got deactivated so let me try this again in the scene notice when it goes down here BAM it is deactivated and we don't need it in the game any more so this was our first obstacle we will have more obstacles but before we proceed to create more obstacles we are gonna create functionality in our side script or speedy mover script to spawn these obstacles on random so we will see that starting from the next video but before we finish this one here in the prefabs folder create a new folder for enemy prefabs like this and drag and drop the flag right here now the flag has this scroll as a child game objects which will be dragged along with it but create a free prefab out of it because we're gonna use the prefab to spawn that game object in RC so now what we want to do is create the functionality inside of our BG mover script so this one right here so that it spawns obstacles when it repositions the balance but before that what I'm gonna do is select the side boundaries and create an empty game object which is going to be the child offside boundaries and I am simply gonna set its position at 3.5 and this is gonna be the right spawners so this is gonna be the right spawner or this is where we are gonna spawn our obstacles on the right side I'm just quickly gonna tag it here with this tag so it is available right here when you click on this icon so let me just select none and you see this cube icon right here you can click on it and select one of these icons so I'm gonna tag it like this duplicate it and this is gonna be the left spawner so this one instead of right it's gonna be left and I'm gonna set it at X negative 3.5 and tag it with the orange one I'm also going to select both of these and set their z axis at negative two so now I'm gonna duplicate them and simply put them right here to be below our side boundaries 1 now their xaxis is going to be the same Y axis will be set to zero so select both of these set the y axis to 0 so that it moves them right here above or where our next boundaries are so I'm going to duplicate these now and put them below side boundaries too and I am gonna rename it just right and left spawner and I am gonna select them set the y axis at 0 so that they go right here and again duplicate these two and put them right below side boundaries 3 let me just rename them side spawner like this below this one side spawner and I am gonna put them at Y to be equal to 0 X is gonna be the same so for the right spawner it will be 3.5 for the left spawner negative 3.5 and their yaxis will be the same which will make them at the exact same position under every parent game object so now we can go inside of our script which is BG mover and right here on the top we can create a public so public game object array of enemies and a public game object array of spawn positions this is where we are gonna dry can drop our enemies and where we are gonna drag and drop our well spawn positions so before we continue we need to do just that select side boundaries and here for spawn positions set the size to to drag and drop the left and the right spawner now in element 0 first you're gonna put the right spawner so element 0 will be right spawner than the left spawner now for side boundaries 1 2 & 3 we're also gonna set the sides or spawn position size 2 now don't put these so you see this right spawner here don't put it to be right here for the side boundaries 1 so don't put them right there you need to put their appropriate children so right spawner that is under side boundaries 1 will go here and left spawner will be here and for the side boundaries it's right spawner will be here pay attention which ones I'm dragging so that you don't make a mistake and this one I'm gonna put right here side boundaries and here I'm gonna put the right spawner and here I'm gonna put his left spawner so they're appropriate children this is really important don't mix it up don't put this right spawner to be right here for the side boundaries 3 put the appropriate spawners for the appropriate parents now I'm also gonna select site boundaries all 4 of them so 1 2 & 3 and side boundaries and here for the enemies we're gonna set the size to 1 because currently we only have the flag enemy so I'm gonna click on this little circle here and well select the flag enemy which is our current obstacle that we have or the only obstacle that we currently have so what are we gonna do now we're gonna go here inside of the BG mover and right here below our reposition script we are gonna say void spawn enemies now the spawn enemies will be called right here so right below when we reposition so when we reposition our ops are actually the boundaries when we reposition them up we will spawn enemies and we're gonna call here spawn enemies like this now we're gonna use a random value to determine if we are gonna spawn these enemies so we're gonna say if random that range from 0 up to 10 if it's greater than 0 now first of all this right here is gonna be frequency of spawning enemies and it's not spelled like this so it's frequency of spawning enemies now notice here I said if it's greater than zero every time this will be greater than zero all that is 1 by 10 chance that it will not be greater than zero so it means that every time it will spawn enemies but if you want you will set less chance for enemies to be spawned right away you can save 5 so that's 50/50 chance for enemies to be spawned 3 that is 70 by 30 chance for Lana needs to be spawned 7 that is 30 by 70 chance that the enemies will be spawned but for testing purposes I'm gonna say here zero because we need to test right away if this is actually working so what we're gonna do here well first you're gonna say int random enemy he's gonna be equal to a random that range from 0 up to enemies that linked this will give us a random index from 0 up to our arrays length because we're gonna use our enemies array this one right here to spawn our enemies and on random we will spawn while these enemies now since our flag enemy so the flag one with the squirrel that we created in the previous video is the only obstacle that needs to be spawn in the middle and we set that obstacle to be at element well 0 so it's at index 0 for all 4 of our boundaries the flag is at element 0 which means that here we can test if our random enemy which is the index and here we can say random enemy index just so that we don't get confused so random enemy index is equal to zero then we know that this is the flag enemy flag enemy and the flag enemy here I'm gonna say needs to be spawned in the middle so what you're gonna do here is you're simply gonna call instantiate and we're gonna instantiate the enemies the enemy that's at the random enemy index and we are gonna instantiate it by using new vector3 so new vector3 like this 0 for the x because it needs to be spawned in the middle trance from that position that y for the y and 3 f for the z axis and for our rotation we're gonna say quaternion identity like this and just hit enter so that it goes right here on this line else here if it's not so if the random index is not equal to 0 that means that it's not our flag so others or other game objects will be spawned on the left spawner and the right spawner but we will call code that later on now we're gonna test our flag if it's actually working so if we go back here hit the play button and if I go here on the scene you see when we respawn our obstacle you see BAM here we have an Bam and bam and bam every time we will have these obstacles which are the flags that are being spawned right here and when they go down you see when they go down here that will be deactivated so every time they go down they will be deactivated and as you see since I set here if this random range is greater than 0 every time we see that enemy is being spawned and the reason for it because from 0 up to 10 that is 1 by 9 chance that we will get something greater than 0 but if you want to spawn enemies less frequently you can say for example 4 that is 60 by 40 chance that the enemies will be spawned five that is 5050 chance so and and so for you get my point and here as I already explained because our flag is set on index 0 and we want the flag to be spawn the middle that's the only obstacle that will be spawned in the middle and because of that as I already said we are doing it like this so in the else statement right here we will spawn all our other obstacles and we will either spawn them here on the right spawner side or on the left spawner side but before we can actually do that we need to create these obstacles and program those obstacles with product we need to go into sprites and then enemies and obstacles the first one will be our tree that you are gonna add but it's too big as you can see here it's trees illa so you can kill our our ninja just by adding it to the scene so what we need to do is we need to change its scale so for the scale X I'm gonna say point 4 point 4 for device so this is well how we are gonna use it I'm satisfied with this height or how large our tree is we're gonna attach a box Collider 2d on it now we are not gonna leave it like this as you see we are gonna rescale it so the size on the X is gonna be 4 point 43 and the size on the Y is gonna be 3.44 of course we are gonna well offset it so the offset X is gonna be point 51 and the offset y is gonna be negative 1.3 or actually we can leave it at negative 1 so negative 1 can be the offset for our tree we are gonna create attack for the tree so we're gonna click on add tag click on the plus button here and we're gonna see here enemy tree and hit enter select the tree here in the hierarchy and we are gonna see here or select the enemy tree tag so this is our enemy tree we are also gonna have our enemy ninja which is this dude right here who is also a ninja Zilla so yeah we're gonna resize him of course so for the ninja enemy we're gonna say point 25 for the X point 25 for the Y and we are gonna add a box Collider 2d component on him of course you're gonna resize and not leave it like this so the size on the X is right here and we're gonna save 1.99 or actually we're gonna save point actually not to point you so for the size on the x size on the y is gonna be lets say 5.38 and offset x is gonna be one point any one offset y is gonna be point 62 and voila here is our and a meat ninja and we are gonna set him to be a trigger so you're gonna make him to be a trigger and we're also gonna tag him so here we're gonna add a tag which I'm simply gonna call enemy and I'm gonna click Save select the ninja enemy and I am gonna well tag him with the enemy tag the last enemy that we have is our B but our B as you can see here well we have how many eight of these B's so how can we add them because if you drag and drop the be like this this is not what we want to have in our game so select the be right here in sprites enemies and obstacles and you see here in the inspector panel we have the sprite mode this is a dropdown list so we have single multiple and polygons currently it is set to single which means unity is treating this image or this asset as a single image but we need to have these bees separated in order to have them separated we are gonna select multiple instead of single let me hit apply here at the bottom so that this change applies to this image and now we're gonna click on a sprite editor which is going to open this thing that you see right here this is the sprite editor where we can slice each individual bee by itself because this or these bees are a sequence of animations unity can slice this well on its own but you can drag or you can simply draw you see here I just drew this rectangle with well left clicking and drawing it and while out there it is in order to delete it hold command press D on windows control and delete actually I said D but it's backwards or that delete so control the lead on Mac command and button above enter but unity can slice is pretty good on its own by simply clicking here slice you see we have the sprite editor and if you click on the slice here it's gonna say automatic so we want to allow unity to you sliced or detect automatically where it needs to slice things pivot will be the center and I'm gonna click slice and bam here it is so you see unity can slice this pretty good on its own but sometimes it needs a little bit of help so as you can see here we can resize these because we're not gonna leave it like this here we're gonna resize it a little bit something like this and select this one also resize it right here and on well down let me just like this one this one is okay the third one let me see where it is just a little bit here you can simply well read rag these as you can see to resize them just so that it fits the B and it does not go outside of the B so something like this well do select this one okay we need to move this back now as I said unity is pretty good at slicing things but sometimes it needs help from us as you can see right here and this one also is the last one like this and we are good to go and I'm gonna hit apply so when everything here is done you see you can hit apply which is right here and these changes will be applied to this image so now when we click on the dropdown list of this image we can select these bees now by accident unity has added somewhere another slice which is well this empty image so ignore the first part I'm not gonna go back so you will need to go back here and search where that slice is well actually it's here what will font we've found it right away so select it and delete it if you don't find it it's well not a problem and I can hit apply now and bam here we are as I said this is not a problem even if it's there just ignore it don't take the first image but select all other images as you can see here B from 1 up to 9 drag and drop the B right here in our well scene view and go into animations to save that animation you folder B animation I'm gonna hit and and Here I am gonna say be animation it's not like you need to be the animation but this is the B animation so B let me just rename it here to be in our hierarchy panel and I am gonna rescale it so the scale is gonna be 0.4 0.4 4 X and the y we are gonna add a component on it so it's gonna be a box Collider 2d and of course we are not gonna resize it this time I said of course but actually yeah we're not gonna resize it this time I'm pretty satisfied with the result right here maybe we can resize it a little bit to be smaller but that we can test that later on to see if there is a need to do so and here we're also gonna attach a rigidbody 2d and we are gonna make in kinematic so here we're gonna say kinematic and we're gonna tag the B as the enemy so tag the B as the enemy and voila we are done we need to go here into the prefabs enemy prefabs so drag and drop the tree drag and drop the enemy drag and drop the B and select our spawners or side boundaries so select all four of these and now for the enemy size we are gonna set well we have four enemies so we're gonna set size to four so now I'm gonna drag and drop the B drag and drop the ninja enemy and drag and drop the tree we don't have to do anything else except attach a script to move our enemies but we will see that in a second we can now safely delete him here from the scene if I hit the play button now as you can see here if I hit the play button actually yeah I was why I was tripping that we actually coded we need to code the spawning of our other enemies so yeah I was tripping that we have already coded that so sorry for that we have attached our enemies now else if our random enemy index is not equal to one if it's equal to 1 we will spawn the flag in the middle else if it's not equal to 1 or 0 excuse me we are gonna create a new game object which I'm gonna call enemy obj which is gonna be equal to instantiate enemies inside of it we are gonna see random enemy index like this we are also gonna see here vector 3 which is gonna be our enemies scale which is going to be equal to enemy obj dot a local scale so actually enemy obj dot transform that local scale and now we are gonna determine are we gonna spawn that enemy on the left or on the right so we're gonna see here if our random dot range from zero to two if it's greater than zero so it's a 5050 chance to spawn this game object or position it either on the left or on the right so here we're gonna spawn it right so we're gonna see here enemy obj that transform that position is going to be equal to u spawn positions and the position that's add the zero index so here I gonna say transform position because the position that is at the zero index we set it to be the right spotter if you remember so this you need to double check to make sure but the right spawner should be at element zero so right spawner and also here right spawner and also here right spawner so the right spawner is on index zero so here we are using index zero we are also gonna take the enemy obj so enemy obj dot scale or actually here enemy scale that X is gonna be equal to negative of Matt AB absolute value of enemy enemy scale that X why is it like this what we need to make sure that our enemies are also facing the correct side we don't want our enemy to be for example here so we don't want our enemy like if I take the player and pretend that he is the enemy I don't want the enemy to be here like this instead I want him to be here like this so I want him to face the correct side and if well in order to do that we need to change the scale and we already explained that we are changing the scale to make the game object face the correct side else if the rank rage is not greater than zero this one right here we are gonna spawn it to the left to the left so spawn left so here we're gonna say enemy obj but let me just copy and paste this right here so enemy obj transform position is going to be equal to spawn positions and the index that's add or element that's an index one which is the left spawner and here we are not gonna use the negative but we're gonna use the positive of the scale X to make the game object face the correct side and the last thing that we need to do is take the enemy obj that transform that a local scale to be equal to enemy skill because while this is gonna face the enemy in the correct direction let me go back here in unity and what we need to do here let me just clear the console we are gonna test it out now so if I hit the play button we are gonna see our enemies being spawned but we're also gonna see one problem you see the B it is spawned the ninja is also spawn but what is happening well they're not moving down so we need to go here select the B ninja enemy and the tree and attach enemy move script set the move speed to five and if I hit the play button now we will see that they are being spawned and going down you see we have our flag now over there is the tree so if I go back here BAM here is the tree we just pass it here is the B here is the tree again let's hope to see the ninja here is the ninja and you see that depending on where he is spawn beat that left or right you see the B now is facing the correct side here on the Left B's facing the correct side let's see the ninja do we have the ninja so we have here C ninja clone but let's hope he's on the right side well he is not but anyways yeah this one is you see he is facing the correct side which is the effect that we achieved by using this right here and this right here and then assigning it to the scale of our enemy obj that we have spawned right here now one thing that we are gonna do is the following our tree is gonna have the enemy move script but the B and the ninja enemy are gonna have different scripts they're gonna move them down but they're also gonna make the B attack our player and the ninja also it will make them attack the player so we need to code that with a separate script I just put these enemy move scripts on them so that we can demonstrate that this actually works and that we have enemies spawned in our game so if we go inside of our scripts folder we have enemy scripts here we are gonna add our B scripts so I'm gonna create a folder B scripts because we have one for the squirrel as you can see here squirrel well I'm just cool whisper wha and Here I am gonna name this one B script so right click create a new script named it B script before I open it I'm gonna go and attach it on the B itself so remove the enemy move script we don't need it we are gonna attach the B script on the B itself simply by clicking add component and while filtering here for the B script and if you want to remove a component that is attached on a game object you have this gear icon on it where you can click on remove component double click on the B script and voila here it is so I'm gonna see here class and I am gonna tag the class at the bottom and hold ENTER to give a little bit of space let me just see here what did I click it's not pouring anyways moving forward as always we need a couple of variables so we need a public float move speed which might be fault I'm gonna say 3.5 F now what is the behavior that we actually want from our B well if I go here in the B prefabs enemy prefabs B here it is what I want from the B is the following I want the B to go here until it's Y position is 0 so until Y position is 0 it will stop here and it will try to attack the player something like this or like this or like this it's not important but it will try to attack the player so for that we need a couple of variables we need a private boolean so private ball attack start it we also need pry bull move and attack we also need a private bull private bull attack right this is gonna determine if we are attacking from the right side or the left side so are we attacking to the right or are we attacking to the left side we also need a private float which is going to be our attack speed by default I'm gonna set it to be equal to six now in the start function when we first spawn the B we want to determine do we attack to the right or do we attack to the left and we're going to determine that by using transform position X if it's greater than zero that means we are on the left side or actually we are on the right side and we will attack to the left because notice here I'm gonna take the player as an example so I have the player if I set his X to be zero he's in the middle if the X is at two he is to the right side because in unity x axis goes positive so it's something like this so I'm gonna see here highlight tool we have the coordinate system and this is X and this is y for those of you who don't know so x axis going in this direction it's the positive direction going in this direction it's the negative direction for the y axis going up that's the positive side and going down that's the negative side and here right here at the axis that is zero so I'm testing here if the transform position X is greater than zero what does this tell you so if it's zero it's right in the middle if it's greater than zero that means we are on the right side so we are in the positive side so when the B attacks is going to attack to the left side and not in the right side if the transform position X is not greater than zero that means we need to attack to the right side so here we are gonna say attack so attack right is equal to false because we're attacking to the left side else if the transform position X is greater then or actually lower than zero then attack right is going to be equal to true because I already explained if it's lower than zero that means we're in the left side which is the negative side so now below the update function we're gonna create void be a tag function so be attack and we're gonna call this one inside of the update function this is where the magic happens this is where we are gonna attack so what we're gonna do here we're gonna move the beat downwards until its position is greater than zero so we're gonna say as long as or if our transform position Y is greater than 0 which means the B is still not in the middle of the screen and again I'm going to take the highlight tool and demonstrate that so again we have the X and the y so here we have Y and here we have X I said upwards on the Y is the positive size so plus here right here where the X is this is zero so if the B is here that means the transform position Y is greater than zero because you see zero is here and our position is here that means we are greater so position Y is greater than zero and as long as the transform position Y from the B is greater than zero we are gonna move the B downward so when the B hits zero position or below zero somewhere around here as long as the Y position is not greater than zero anymore we will not move the B so what we're going to do here we are gonna say vector3 temp is equal to transform that position temp dot y minus equals move speed multiplied with time.deltatime and transform position is equal to temp again and we can test it out if we go back here since we have a tag script on the B if I simply run the game let us wait for the B to be spawned so here we have the player flag has been spawned next one is ninja enemy ninja enemy again come on please spawned the B spawn the B we have the freak loan come on here it is so the B has been spawned and notice now the B is gonna go down until it reaches here is the B BAM it reached zero you see it reached zero for the Y and it's not moving anymore because its position now is not greater than zero so this is as long as the trésor position Y is greater than zero else if it's not greater than zero anymore which means we reach the center of the screen like this as you can see what we want to do now well this is where the magic happens here we're gonna check if the attack is not started so attack started notice the exclamation mark and I have talked about this numerius of times in my tutorials the exclamation mark makes what's after it opposite so essentially when you see an exclamation mark you will think of it like this you're testing if something did not happened because if you test it like this you are testing if attack started then do something but with an exclamation mark you're testing if the attack did not start think of it like that why well because here we have just declared attack started by default if I don't write is equal to true the default value of a boolean is false so if you just declare a boolean like this this attack right here has false for its value so you don't need to type here is equal to false you can do it but you don't need to because the default value is false now because of that if the attack is not started this exclamation mark if this is false exclamation mark will make it the opposite what's opposite of false true and viceversa so if the attack did not start we're gonna see here attack started not attack speed attack started is now equal to true so that this if statement does not get executed again so attack now is started and I went to the bottom of the script so now attack is started so attacks is true because now when we get to this if statement exclamation mark will make it the opposite if the value is true what's opposite of true/false you got that right my brother so here since the attack is started we're gonna call start Karrueche because we're gonna create a KO routine that is going to be called attack player this is the name of the core routine which we still did not create so it's giving us a red warning and what we want to do here well we want to create an AI enumerator like this and we're gonna name it attack player so what we want to do inside of this attack player function well we want to yield return new waitforseconds so we want to wait 4 seconds and we're gonna wait 1.5 of a second when the b gets to the middle of the screen so you know that graph that I have well drawn for some reason I don't have my highlight tool here so when the middle of the screen is here let's say our B is here when that happens we will trigger this right here and we will wait 1.5 seconds and then we will start charging at the player and in order to start charging at the player what we need to do we need to say here transform that rotation because we just want to rotate our be a little bit we're gonna make it equal to you quaternion ealer and here we're gonna say new vector3 and we're gonna say 0 for the x 0 for the y and for the Z we're gonna say random range from 0 F to negative 45 F in degrees and we need to close one more parenthesis and bam we are done so this is just gonna rotate our be a little bit and let me show you what I mean so for example if I take the player here and if I rotate him on the z axis you see he's gonna be rotated something like this well we want to rotate the B for example like this and make it charge and the player just so that it looks like you know when Falcons go down to chase the bird or whatever that effect we want to achieve so here we're also gonna say move and attack is equal to true and we want to invoke a function that is called deactivate and we are gonna invoke it in 5 seconds is this the activate function well this is a functions if you're gonna create here void deactivate which is simply gonna call the game object set activity false so first we're gonna attack we're gonna allow the bee to attack after 1.5 seconds and when the bee attacks is gonna go outside of the screen we're not gonna see it anymore it's not gonna be visible it's not gonna go downwards we need to deactivate it somehow because you know what I said about those game objects when we don't need them we can simply deactivate them or otherwise they will take up memory in our game but we don't have a use for them because while we are not using them and then we will invoke and invoke if I hover over let me see if there is explanation yes here it is invokes the method method name in time seconds this is the method name in a string so you see quotes this is a string and this is the method name which is this one right here so this one right here method or function this is that this right here it will invoke it in five seconds so this is like a timer before deactivate is called now what about this move and attack well this one is gonna be called right here inside of the else statement right outside of this if statement so or actually excuse me not here but we are gonna call it outside of the ifelse statement so let me just close this here outside of the ifelse statement because well we don't need it to be inside of the out statement right here we're gonna say if move and attack so if we can move and we can attack what we want to do if so if we are not attacking right which means we are attacking left we're gonna call transform position and we're gonna say minus equals to vector three dot right and we're gonna multiply that with the attack speed and multiply that with time dot delta time Y vector three right well because if you hover over it that is writing shorthand for as you can see here vector three one zero zero this denotes the right side as I said positive side on the x axis is to the right negative is to the so if we are attacking you see here we are not attacking right actually so that means that we need to subtract from our while position using here right else you see here else we're gonna say transform that position plus equals to vector three right multiplied with the attack speed not attack right attack speed multiply the time that Delta time as you can see right here so if we are not attacking to the right that means we are attacking to the left side so we are subtracting from our position why subtracting let me go here again dropping this this is the positive this is the well this right here is the negative this right here is the positive and this is the xaxis if we are not attacking to the right that means we are attacking to the left which means we're going to the negative this right here is negative this is the negative which means we need to subtract from our position to go to the negative side else if we are attacking right which is well this one right here else we need to go to the positive so here is positive like this so we are going to deposit it which means we need to add to our button this is or actually to our position at your button because as I already explained the positive side is the right side so let's test it out and see if it actually works because we have everything attached onto me if I hit the play button let's wait for the B to be spawned when we spawn the B and right away we see the B now please pay attention pay attention now when the B comes down here it is notice now the B is here notice now it's gonna start attacking BAM you see the B wants to attack the player let me see again if we have another B come on where you are BBB BBB BBB nope we are spawning ninjas and flags and again we are spawning flags and ninja come on man spawn the B so that don't need to go and put all B's here it is one more B notice now please take a look at pay attention when the B comes out here it is notice it's gonna stop here and bam it's gonna start attacking you see did you see the B went to attack the player because it reached the middle of the screen so the else statement gets invoked if we did not attack we're gonna say attack started start the coroutine which will wait 1.5 of a second it will rotate the beam and it will allow it to move and attack what happens when we are allowed to move an attack we will test on which side we are attacking if it's the left side we will go to the left side I'm gonna go here inside of our enemy prefabs here is our ninja enemy we will need to remove and I mean move script ik as well we don't need it on the ninja anymore we're gonna create his own script and going inside of our scripts folder enemy scripts I'm gonna rightclick and create a new folder which I'm gonna call ninja scripts inside of the ninja scripts rightclick create a csharp script and call it ninja script yes I know how creative I am really creative so moving back here prefabs enemy prefab ninja enemy here he is attach that ninja script on him doubleclick it and open it right here in monodevelop let me just find it here it is as always I don't even have to tell you anymore that I'm tagging the class with the class tag giving a little bit of space and we need a couple of variables so what do we need well we need a public float move speed which by default is 5 we also need a private float camera Y which is the Y of the camera and a private bull attacked player like this now also what we need is a public game object so public game object which I'm going to call shuriken so what is this shuriken well it's the thing that we are gonna throw at our player so we need to create it which is or that is located right here in our sprites enemies and obstacles and here it is this is our shuriken we need to set the sprite mode here to multiple instead of single hit apply here at the bottom open sprite editor and click slice automatic slice unity will slice it for us and bam we are good to go so we have a slice here here here here here and we have one more right here and one more here so we have the animation for our shuriken I'm gonna hit apply and bam we are done so we need to now drag all of these animations so from 0 up to 7 select all of these and drag and drop them right here in our scene view we need to go into the animations folder new folder and I'm gonna call this shuriken animations inside of this one simply call this animation shuriken so shariq an animation and I'm gonna hit save and bam here we are of course it's too large as you see here we're not gonna throw this mega shuriken Zillah on our ninja instead we are gonna well resize it first i'm gonna rename it here inside of our hierarchy panel to shuriken set the scale point to point to 4 X and the y and we are gonna apply a circle Collider so not a box Collider but a circle Collider 2d which you see this one right here and we are gonna apply a rigidbody 2d which is gonna be kinematic so here we're gonna set it to be kinematic and we are gonna tack our shuriken as the enemy so here I'm gonna tag him as the enemy tack now we do need to go here inside of prefabs enemy prefabs and drag and drop our shuriken because hey we need it as a prefab so we can select the ninja enemy now and here for the shuriken game object drag and drop the shuriken itself so here it is here is our shuriken and we have everything what we need to start coding our ninja so what do we need in the start function well in the start we need to calculate camera Y which is going to be equal to camera main transform.position dot Y minus 10 because while we are gonna use this to calculate when we are gonna deactivate our ninja below the update function we're gonna create a void move function so void move and here we are going to simply say vector3 temp is transform.position temp dot y not equals but y minus equals to the move speed multiply that with time Delta time and transform position is now equal back to temp this will move them ninja down as we already did before and we're going to call this function inside of the update now this is nothing new we did this already now below this one we're gonna create void deactivate which is also going to be called in the update function so avoid the activate like this open closed curly brackets call it in the update function like this and here we're simply going to test if the transform position Y which is the current Y position of the ninja enemy is less than the cameras Y position we are simply going to call our game object set activity false and bam we are done now inside of this one this move function we are going to detect if our so if transform dot position so that's position that Y is less than 0 so if it's less than 0 why am i testing if it's less than 0 well we have already explained our ninja is gonna be spawned somewhere around here on top and the middle of the screen is 0 so the middle of the screen is 0 so as soon as our ninja reaches the middle of the screen when the ninja so when the ninja reaches middle of the screen what we want to do is the following we want to tell if we did not attack the player so if we are on the middle of the screen and we did not attack the player if we are in the middle of the screen and and we did not attack the player what we want to do we want to attack the player so here we're gonna say attack player is true so that this if statement right here does not get executed again this right here again will calculate or we will know that we have reached the middle of the screen when we are less than zero or equal to zero we have reached the middle of the screen with our ninja and if we did not attack the player then we are gonna attack the player so attack is true and we're simply gonna call here instantiate our shuriken game object at our current position using quaternion identity so this is simply gonna instantiate the shuriken game object now we can test it out right now but we will have a funny effect will instantiate the shuriken but it will stay there as you will see now just in a moment let me wait for the ninja so the B has been spawn flagged now come on spawn the ninja everytime when you need something to be spawned it is not so here it is we have the ninja enemy notice now Babb UC ninja was spawned but hey he fired the shuriken this one also fired the shuriken but the shuriken stays at one place and by the way if I go here in assets prefabs enemy prefabs I'm gonna select the shuriken go in to the animator and here is the shuriken animation I'm gonna set it to be twice the speed so twice its own speed so that while the animation goes faster what we need to do now we need to go inside of our scripts enemy scripts and then ninja scripts we need to create a script for the shuriken itself so here I'm simply gonna say not JavaScript who uses JavaScript anymore I mean just kidding but anyways here we're gonna say shuriken script this one is gonna be attached on the shuriken itself so if I go back here so yeah get some errors here that are not wanted I'm just see if I can run yeah I will need to read restart my unity so just a second if I go here in prefabs enemy prefabs sure it can let me just add component sure you can script did I detach the shuriken scripts let me just see what this is new behavior okay come on let me go here in scripts and any scripts ninja scripts okay do we have this script not right now yeah you see this weird error for reason I left the video like this I don't know what just happened and why did I gut this error but anyways let me just go here too sure you can game object here he is so we have the shuriken add component sure you can script and we are good to go so if I run the game now let me just see if we can run it yes we can you saw that I have created that C sharp or JavaScript file and I have deleted it and afterwards we got that errors so yeah unities full of bugs as any other thing that you will find on the Internet so this is how you fix that particular team that's the reason why I did not cut that out from the video anyways moving forward here we have our shuriken script so what we want to do with our shuriken scripting well first we are gonna have here private bull attack right this is gonna determine how we are attacking from the left side or from the right side same thing as we did with our be exact same thing right here we need to know from which side is the shuriken fired because the ninja can be on the left or on the right so we need to know which side are we and where we need to go right below here we need a private float private float attack speed which is going to be equal to 6 f so this is the speed of the attack in the awake function action I'm gonna do that in the start I am gonna use transform rotation is gonna be equal to quaternion ealer and here I'm gonna pass vector 3 0 for the X 0 for the Y and for disease it's gonna be random so random that range from let's say 45 or negative 45 45 or we can test it out so you can either choose negative 45 or 45 or 45 then negative 45 this is just you rotate the shuriken itself same thing as we did with the B so this is exactly the same thing that we're doing with the B right here just rotating it a little bit so that it is it's like towards the player so it's looking towards the player where we are actually attacking we are also below gonna calculate are we gonna attack from the right or from the left so we're gonna see here if our transform position X is greater than 0 which means that we are on the right side then we are attacking to the left so here we're gonna say attack right is gonna be equal to false else here our attack right is gonna be equal to true now what is this here we have already explained if the position X is greater than 0 that means we are on the right side because 0 is in the middle the positive side is on the right the negative side is on the left for the x axis for the Y positive is up and negative is down so if we are greater than 0 that means we are on the positive side which is the right side so we need to attack towards the left side which is logic because if I go here just so that someone but someone is confused so this is 0 right here this is the positive side on the X and if we are here so this is our ninja right here he throws the shuriken from here so this is the shuriken which means that this right here we are greater than our X is greater than 0 we are in the positive side so we need to go towards the left side right here which means attack right is false in this case otherwise if we are on the left so if our ninja is here you see if the ninja is here and he throws the shuriken from here like this we are going to this side which is the positive side so attack right will be equal to true because while we are going to the right side and also what we need to do is invoke a function called deactivate which we still did not create but we will and we're gonna invoke it in five seconds after we attack so what we are gonna do below here we are simply gonna create boy deactivate because if we don't have the function with that name BAM we will get an error and here is simply gonna call game object set active to false and bam we are done for deactivating the game object of course in the update we need to move our shuriken in the right direction so if we don't attack to the right so if we are attacking to the left side so if not notice that Commission mark which will make what's after in the opposite if attack right is false this will make it true which means if we are not attacking to the right meaning we are attacking to the left so left we are gonna say transform position minus equals vector three right multiplied with the attack speed multiplied with time dot Delta time and here in the else statement we are gonna do the opposite so here we need to go to the right side so here we're gonna say right and here we are gonna say plus equals because plus or positive is going to the right side minus or negative is going to the left side so I have explained that again I don't care if you are like okay you explained it two thousand times I'm gonna explain it to a thousand times anymore what did I just say anyways I'm just kidding but we are done with this we can go here and we can now test it out so if I hit the Run button let us just hope that the ninja will be spawned very soon so we have the B clone flag come on waiting for that ninja we have the tree we have the tree again tree again here is our enemy ninja finally notice now when the ninja comes here is you see he threw that shuriken on us he threw that shrieking come on one more please one more one more one more where is the ninja man when you need so here we have one more ninja wait for it wait for it BAM you see he threw chicken why don't we get BAM he threw the shuriken and also notice these shuriken x' they are being deactivated so they are here you see shuriken one is here let me see the top one so the top one is here you see where he is he has been deactivated knows this one is right here if I can run the game cmp deactivate yeah here he is he just got deactivated same as the BCB when they get at the same position because I'm leaving the same number of time for them you see here is the shuriken here it is here it is here it is and bam he is deactivated take the animation panel and put him right here and we're gonna select the player but before that let me just go in sprites and then play here and here we have the falldown animations which are gonna be the player dead animation so select the player in the hierarchy and here create a new clip and I'm gonna go in animations and then player animation here here it is and I'm gonna call this one player died right so player has died from the right side so we're gonna play that animation and I am gonna put this right here falling down this one right here and this one I'm gonna put it right here something like this let me just go here inside of our animation or actually move the animation panel and select the player so now you see this is what we want to achieve now in regards to the position of the player I am gonna go on frame 16 so something like this frame 60 and I'm gonna hit the recording button set the player at Y or actually not y equal to 0 Y will be 1 but X will be equal to 0 something like this and I'm gonna say Y well down like this something like this and let me see this animation uh so when we play the animation okay this is what we want so this is what do you want simply player falling down it's like when he gets hit he will simply fall down and we'll play the sound and so on and so forth so this is what we want exactly if I go and put this animation panel right here I will need to create player diets from the left side so create a new clip is going to be player died left and I'm gonna hit enter attached the same animation so fall down fall down 0 1 and fall down 0 2 and let me just take the clip so something like this go back here now what is the catch with this animation while the catch is that we are gonna set the player to be at this side and this is his scale right here we're gonna go on frame 60 now and we are gonna send the player well to fall down and let me just move him down something like this and voila we're good to go this is for his left animation because when he dies from the left side he needs to fall from the left side we don't want him to fall well he dies from this side so when he is on the left so he's here and we played the player died right so player starts falling down from the right side that's why we have created these two animations so something like this so what we need to do now well we have the player when we select him right here you see in the animator he has player died right and player died left as you can see here died right died left here he is and now we can go into some scripting so right here on the top inside of our player script which is this one right here below our private ball jump we need a couple of more variables so we need a serialized field which is going to be our audio source which is going to be audio kill to play the kill animation and audio jump and we also need a serialize field this is gonna be private audio clip which I'm gonna call dead sound and we also need a private bull is alive which by default is equal to true this is a lie will determine if the player is alive or not before we start attaching these components in regards to is alive you're gonna take all of the code in the update function and we're gonna test if is alive so if the player is actually alive then we are gonna well call all of the code right here and also in the jump function right here if the player is alive so is alive come on is alive so if the player is alive then we will be able to jump in here if not is so excuse me for this one if the player is alive then we'll be able to jump if the player has died then no jumpy jumpy for the player and let us attach these components now so we have these audio sources and the audio clip if we go here select our player we will need to attach few audio sources so audio source one and let me just move the script down yes break the prefab I don't care because we will reconnect it again add another audio source and move the component down so uncheck play on awake for both of these and we will for the first one so here we have audio source we are gonna attach this sward slash and for the second audio we're gonna attach jump new and we will drag and drop them so the sward slash is gonna go right here audio kill this is the smart slash and jump is gonna be under jump so come on why is it not giving me come on why aren't you scrolling down okay so audio jump is gonna be here and for the dead sound you're gonna play hurt too so attach these like this and then hit apply so that these changes apply to the pray prayer player player player ok player player testing I can now say player to the player prefab so again the Swart slash audio source will go under audio kill and jump new audio source will go under audio jump and for the death sound we are gonna play hurt too we will also go here and when we jump so after we say jump is equal to true we're gonna call audio jump and we're gonna say play since we play the jump sound we're gonna do the same exact thing right here in the jump function and that will be that in regards to you well what we did so far what we need to do now is that we need to create your void ontriggerenter 2d to detect collision between the player and other game objects and collision 2d takes or ontriggerenter takes a collider which I'm gonna call target not try it but target like this and now we are gonna test some things right here if we collide with some game objects if we have jumped so if we have jumped we are in the air we are untouchable we can kill the player we can actually kill the ninja enemy ninja we can kill his shuriken we can kill the bee we can kill everything that we touch while we jump but if we don't jump if we are not jumped like this then we will die but if we have jumped and if the target dot tag is equal to the enemy but we have jumped we are in the air we can kill our enemies so we can say target that game object that said active is false and we are gonna play audio kill so how do you kill that play to play the audio kill sound this is if we have jumped because when we are in the air ninja is you know doing that backflip or the flip rotating and then he throws his knife and kills everybody so yeah that's the point of the game so when the ninja is in the air while he has jumped we can kill any enemy but else if we did not jump and our target attack is equal to the enemy so if we are not we did not jump and the enemy touches us we're gonna call a function called player died which we still did not create so we're gonna create it right here so void player died like this just so that we have the function for the reference and right here below if our target dot tag is going to be equal to the enemy we are also dead and we are gonna call player died function so that we will die of course and we will never come back and you can come back from the dead to haunt me anyways this is the point of the game in the player died function we're gonna call here audio kills audio kill that clip is gonna be equal to our death sound and we're gonna call play this will change to the dead sound of the players so clip is the actual clip this one right here that we have attached let me just go here come on sometimes it does not allow me to scroll so you see that audio clip that is attached in the audio source we have sword slash for this one and for this one we have jump new now we also have this hurt or our dead sound so when the player dies we will play that dead sound and in order for us to play that that's I mean we need to change the clip to our dead sound and then we are gonna play it is alive is now false which means that we're not be able to jump so we'll be false this right here will not be executed and this right here will also not be executed because well we have died and well yeah we cannot jump when we are dead if the transform that position that X is greater than 0 we have died from the right side so we need to fall from the right side so we're gonna see here nm play the player died right animation like this else we have died from the left side so here we're gonna say player died left and voila we are good to go here we're gonna call our game play controller so game play controller to call his instance to say the game is over to share the game over tab but we are still not done with that and we will simply say time that time skill is 0 to stop our game so what did we do well created those two animations in this video which we already saw so created those two animations player dead or player died from the right and player died from the left side and here in our ontriggerenter if we have jumped which we will determine you see when jump so here jump we will see jump is true while that is true and we touch one of the enemies we will kill the enemy because we have jumped we will kill the enemy else you see here if else else if we did not jump and we touch the enemy then we will die also when we touch the tree no matter if we have jumped or not we will die so let's test that out and if I go here console clear let me just lower the volume a little bit because you're gonna hear some sounds notice not when we jump we hear the sound and notice now when any enemy comes here we can kill for example this squirrel can we kill the squirrel no we cannot because we did not tag the squirrel so in prefabs and any prefabs flag squirrel is not tagged with the enemy tagged yeah it's a good idea to tag them so bee is tagged with enemy flag don't tag the flag flag is not important squirrel will be tagged with the enemy ninja enemy is the enemy shuriken is also and tree will be tagged as the enemy tree so now we can test it out so notice now when we jump and we touch the squirrel or the ninja only the tree can kill us if we jump so the tree we're not gonna touch we need to avoid the tree you see I have jumped and killed the ninja so I have jumped and killed the ninja we heard the sound you see now when the bee comes close to me notice now damn I have killed it I have to kill the squirrel also so let's die and see if it's actually working so yeah we have died now what is the problem here as you can see you see the animation well the problem is that we need to select the player since we set here timescale tb0 when the time scale is zero physics calculation will not work animations will not work as you just saw but we can fix the thing with the animation and in order to do so select the player and in his animator component you see the animator right here you see the update mode is set to normal so we have the update mode to dropdownlist set it to on scaled time this means it will not be affected by timescale even if the time scale is zero the animation will still play till the end and let's test it out actually and see if actually works I'm saying actually too many times but let's hope that this squirrel will kill me so the squirrel did not give me yeah but you see the tree have has killed me but you see the problem you see what's the problem well the problem is that our animation is looping so go in to the animator panel select the player died right doubleclick it uncheck the loop time player died left also doubleclick it uncheck the loop time so for both of these animations simply doubleclick them loop time will be checked you need to uncheck it click them loop time will be checked on check the loop time let's test them one more time and hoping that everything is ok so now we have the player here we have the ninja enemies so let's hope that the ninja enemy again and Jeremy's here and I've just avoided these obstacles and bam you see I have died and I have fallen down and the game has stopped the animation is not playing anymore so on and so forth but we see that everything is working for death we're gonna right click on the canvas and we're gonna create a UI panel so we're gonna create a panel that we are gonna name score panel or score background which is gonna have source image score background so here it is this is the score background image let me just select here in the image property the color and I'm gonna set the Alpha to full so 255 because I want it to be visible and not transparent let me change here so if I go here and set it in the middle so this is for the anchor set it at the middle and I'm gonna change the width to 225 change the height to let's say 144 this is gonna be our score panel right here that you see I'm also gonna rightclick and create a UI text below it and for the text this is where we are actually gonna display our score text and we're gonna call it score text and I'm gonna set the width of the score text you well 225 hike is gonna be 144 and I'm gonna set the alignment at the middle center I'm gonna change the color of the text to white you see all of these properties are in the inspector panel when you select the text itself set the font size to 48 actually could be 50 so 50 for the font size and the beginning score will be 1 let me just take a look at it somewhere around here I will need to put it a little bit down so if I select this corner I just zoom in here I need to put it something like this yeah so that it will be in the middle so where is my score here it is I cannot see it because of the camera so I'll move it upwards here it is something like this for our scores so this is what we want let me just move the score a little bit further down let's say negative 30 on the Y and then we are done now what we want to do is animate the score background coming in so for that we are gonna set the score back or on X 650 initial height you see here initial height or where it is and inside of our animations I'm gonna create a new folder for the score background animation capitalize a animation like this so I will need to go into the animator select the score background hit create and save it in score background animation so here score BG Adam hit enter go on frame 60 right here hit the recording button and I'm gonna put it down at 310 for the yaxis so this is his animation this right here so when we start our game we will see it animating and we will see it animating again and again and again because it loops so we need to go in to the animator himself here he is double click it uncheck the loop time and let me check it again and I'm gonna see the speed the initial speed is gonna be 0.5 so notice here when we run our game the score is slowly gonna start to calm down as we just saw the problem is that the score is not moving at all we have died by the way so the score is not moving at all or actually changing so how can we change the score well for that always there is a script to the rescue so new folder' game manager scripts here inside of our game manager folder I am gonna create a new C sharp scripts I'm gonna call game play controller who is gonna control our gameplay I will create an empty game object here let me put it 0 0 0 for x y&z this does not matter at all I just like it like that so game play controller and attach it on the game play controller game object so now we can start to code our final well lines of code and here tag the class as always hold enter to give a little bit of space so what do we need well we need a public static game play controller instance which we are gonna call here to create that instance so here we're gonna say void make instance and here we're gonna test if our instance is equal to null that means that we need to set the instance to be equal to this so here I'm gonna say instance is equal to this and this is gonna be called in the awake function so make instance I've talked about this numerius of times what is this doing how can we control sing or create Singleton's so on and so forth so you can watch other videos for that I'm not gonna react splain myself here we need a public text but in order to use it he is located under unity engine that you I as you can see here so we need to type above here using unity engine dot you I which now allows us to type private text and I'm gonna call it score text so score text like this we also need a private integer for score this is well the integer that's gonna count our score and voila that is that so what do we need to do now is that we need to well calculate the score and we are gonna do that in a function that is called count score which is going to be ienumerator so ienumerator which is a KO routine count score so count score like this we are gonna do the following yield return new waitforseconds and we're gonna wait 0.1 seconds so one tenth or yeah one tenth of a second and then we're gonna call score plus plus to increment the score incrementing the score and now we're gonna call score text dot X is gonna be equal to you score to string because we need to convert this integer score to string because while our text only accepts strings and we need to call here start coroutine count scores it we start counting our score and don't forget the parentheses here now we need to when we start our game so here in our void start function we need to get a reference to the score text itself so we need to see here score text is gonna be equal to game object find the game object with the name score text now this right here the score text need to make needs to match up with this name right here so here it is make sure that these names are the same so find the game object with the name score text and get the component text from it and voila simple as that and afterwards simply start the kill routine to count our score so this is the KO routine that we'll start counting our score and well when we run our game the KO routine will start to count the score which we can test right now if we go here in unity hit the play button just wait for unity to load notice now it is counting the score but why what what what let me just go here set it that's right now so if I hit the play button yeah now everything is okay just set the score text well position Y at 0 so 0 for the X 0 for the Y and you see now it is counting the score but when we die you see here when we die what we want to do we want to call here as you already saw we're on a call here our gameplay controller instance that the game is over but before the game is over we need to create the game over panel which is gonna well be the game over panel so here I am gonna go back in unity editor I'm gonna create a new panel so you i panel here he is set the background as the score background again set the Alpha at 255 set the anchor in the middle so the width of this one is gonna be 385 the height is gonna be 297 and this is gonna be our end and also and panel and for our end panel we also need to add UI text now this text is gonna display the final score so I'm gonna name it final score and the width of our final score is gonna be 270 the height is gonna be 99 I'm gonna set his Y position at 50 I am gonna change his font size to 40 not 50 but 40 I'm gonna see here 1 which is not important and I'm also gonna set the alignment at the middle so going from the left side so left middle and I'm also gonna change the color so here I'm gonna change the color and voila we are good to go let me just take it take this dude so here middle I think everything is okay yeah everything should be okay yeah this is it so here I'm gonna say height which is our final score let's say 1000 and below these two we are gonna attach our buttons so I'm gonna go here create a UI button so one button we have here which I'm gonna remove the text from this is gonna be our again button which will prompt us to play the game again so play the game again 145 for the width and the height I'm gonna say 64 and I am gonna position this one at negative 75 for the X and the y is gonna be negative 32 and here let me just go inside of my sprites backgrounds and buttons here it is our again button let me just select it and drag and drop it right here and bam this is our again button I'm gonna duplicate this one so this again is duplicated I'm gonna call the new one menu and let me just find our menu it's somewhere around here so here it is now the menu I will need to go into our sprite editor and slice it slightly do I need to slice it here actually revert let me just go here and set it to be multiple apply sprite editor and I'm gonna slice it like this just so because the image is distorted a little bit you see the image is not that good but if the image is good you don't need to do this anyways for our menu here I am gonna attach the menu what am I doing here so yeah here it is menu let me attach it right here and back here we have our menu now the menu is again gonna be at negative or actually positive 75 am I gonna leave it like this actually yes I will leave it like this I don't care I just don't care anyways I'm just kidding but this is what we want now I am also gonna creative animation for our panel so our end panel is going to be at 704 the height initially so 704 the height initially go here into the animation create a new animation in animations I'm gonna create a new folder and panel animation hit create and here I'm gonna see and panel animation and voila here we are now where am I gonna put this end panel so let's go on frame 6 first frame 60 hit the recording button yposition 77 and this is it so this is for our panel you see Babb and it is going here now if we are smart which we are we're gonna learn from our mistakes so we forgot to uncheck the loop for the score background we are not gonna forget that for the end panels so uncheck the loop time I'm also gonna rightclick and create an empty state here and I'm gonna call this one idle and I'm gonna set so rightclick on the idle and click this set as default layer' state because we don't want to play the ant panel animation until we need to do so and this end panel I'm gonna call it here ant panel so this is how I'm gonna call the enemy should make sure that you don't forget this because we will need to call the animator of the end panel so ant panel here it is to play that animation we don't want to play it right away because well it makes no sense to play the animation right away so right click create an empty state which is this one name in idle right click on the state and click set as layer default state if I go back in my script here I need a couple of more game objects so I need a public game object which I'm gonna call score panel and I need a public text which is gonna be our end score and a public animator and panel Adam I need all of this and we need to drag and drop them so go back in our unity select the game play controller for the score panel select the score background for the final or end score select the final score right here and for the end panel and I'm select the end panel right here so what we need to do now well we simply need to create a public function so public void game over what do we want to do here well simply we're gonna call our score panel set act if T Falls to deactivate our score panel which is well this the one that is counting the score this one when we run the game so this panel right here we want to deactivate it we don't want it to be there when the player dies and then we're gonna call our end score and we're going to say dot text is going to be equal to height like this plus our score to display the final score and finally end panel Adam dot play not playback time but play the animation with the name and panel and we are calling this right here as you can see so we're calling this right here and simply uncomment this line of code now out let's test it out and see if it actually works so when I hit the play button let us just wait for us to die so here we have our panel here we have our B we have the ninja enemy let's hope that somebody will kill us from it okay then we have died let's wait for the end score panel it's not appearing because we are or I am you are not you're smart I'm stupid because I forgot to select the end panel set the update mode to unskilled time because we are setting time that scale or time scale you see here to 0 so we need unskilled time for the animator let's try this again so let's wait for us to die here we have the flag we have the B come on let's sum let us somebody kill us where is the tree here it is and then we have died you see height is here now we have our problem here we have the animations playing too fast so I'm gonna say here 0.5 so point 5 for the animation we see that the animation is there I set point 5 which will make the animation go slower now before we proceed to test that out again we have two buttons and I'm gonna create functions that we're gonna add to those buttons so we are gonna have public void again to restart the game but before we restart the game it's a good time to set it's a good time it's a good idea to test to set the time scale back to 1 and we're gonna call the scene manager so right here on the top type using Unity engine scene management which is going to allow us to use our scenes and move from one scene to another this is how we actually load levels so here we're gonna call the scene manager that load scene and I'm gonna call here again scene manager that get active scene that name which is gonna reload the same scene and here we're gonna have a public avoid menu which is gonna bring us back to the main menu and simply here we're gonna see the same thing time that time skill is one and scene manager that not seen but scene manager that load scene we are gonna load the main menu scene so before we proceed to test it out again we will need to go here and select again and the menu button so again in menu button click the plus button right here on them drag and drop the gameplay controller here and for the again I'm gonna select again for the menu I am gonna select the menu not not game over but man you come on here where is the menu I've talked about this to marys of times this is how we can attach a game object to a button and make it execute a function from one of the scripts attached on that game object in our case we have again and we have the menu so as you can see here on the again we drag and drop our gameplay controller here then from the dropdown list we select the functions that are attached on that game object so we have the game play controller and we have here a list of functions we have our function called again we select it which means when we press the again button BAM this again right here function will be executed now we will have one problem that we will solve in a moment but let us wait for our player to die let's hope so we have the B we have the ninja enemy command come on where is some of these ok BAM we have died you see here is our height if we press again BAM we reload the same well we reload the same scene if we go back here or actually let me just wait for it to die if I try to load the main menu yeah may I cannot load it and we see we have a problem what is the problem here well the problem is that we did not add it to the build what is the build well let me go here singh's main menu and go under file build settings and here we need to click Add open scenes this will add the current scene to the build where you are so we have the main menu now go into the gameplay and also click Add open seams and now we will be able to load one scene and go from one scene to another so if you don't do this we will not be able to go as you just saw we clicked on the manual it did not bring us there because we did not add that scene to you the manual I've talked about this also in my previous tutorials and I talked about this in my courses now for the main menu here we also need to attach a script so that we can click this play button so in the scripts I'm simply gonna right click here csharp script main menu script and we can create an empty game object so here I can create an empty main menu controller like this attach the main manuscript on the main menu controller come on man attach it doubleclick it we don't need to give a little bit of space because here we're only gonna have a public void and here I'm gonna say play game and we do need to type using Unity engine scene management because we are gonna call here scene manager dot C manager load scene game play like this so we need to go back in unity select our play button so play BT and click the plus button here attach the main menu controller and then go here and select the play game which will allow us to play our game from the start so if we hit the play button we have a nice main menu everything is animating we click on play we go here and start playing our game let me just lower the volume a bit jumpy jumpy jumpy jumpy ninja I will name this game probably jumping in just so we have here kill the squirrel kill the ninja and his sure it can't kill the squirrel again kill the squirrel again and died and bam we have reached the height of 50 or 152