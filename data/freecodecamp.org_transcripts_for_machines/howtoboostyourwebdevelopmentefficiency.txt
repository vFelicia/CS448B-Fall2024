so welcome everyone to my talk about how to boost your web development efficiency um some of the stuff was already set by martin before because we have some overlapping topic called lean staged but as i'm sure you will still have some value out of this presentation what i did is i tried to compile all the most important tools that i use in my web development and i also have like my settings my configuration objects directly in the presentation and everything is linked to online so you can check out the slides after the talk and you can do the configurations yourself so the first topic is already lean staged so lean stage is basically a wrapper around git hook so it makes it more easily usable for you and like a git hook you could imagine it like being an angular life cycle hook so like engine in it ng on changes whatever and it's especially useful for doing a precommit hook so let's say you you and some colleagues of you fight over the code style and there's always like he leaves some white spaces in there and you remove them again and it's like a constant back and forth so with like a precommit hook where you say okay we use this tool to format our code you can always be sure that you only have really clean code and only changes that are relevant another possibility would be to use a prepush hook so let's say you want to push something online and you want to push it to your cli and you always fear that your pipeline gonna fail your pipeline gonna fail this would be one way of maybe avoiding it so you would let your unit test and your endtoend test run before you push it yeah so this would actually be a package like i you can also make like a lean staged rc config file to have it encapsulated but i implemented here in the package json first settings i used here is concurrent for subtest concurrency one this is used because i had the problems that because these linters run at the same time that sometimes the formatter went over it and changed files but it didn't add them to the to the actual commit so the commit went through and then there were some leftover changes in the in the actual um branch so this uh with using only subtest concurrency one it avoided that problem yeah for html files i use the autoformat html script you can see it down here it's using tslint with the fixed flag so the fixed flag already tries to fix as many issues as possible that it can do by itself and then also it takes the project wired configuration that is config json and tslin jason for the tslint rules for css and js i just use prettier because that was seemed like the obvious and easy choice to make and for the typescript i use something that is called clang format so this might not be the obvious choice like we heard before you can use prettier but for me it seemed that prettier like it prettier also wants to be like easy and it doesn't give you many customization options on purpose but i was like okay with the typescript with a typescript project i want to be able to change everything to my own needs yeah and then it goes through and uses the lean script and yeah i already explained this and what's also there is like the ignore so for minified files of course you don't want it to be reformatted into an unminified version so yeah about auto formatting typescript like prettier typescript formatter clank format these are three could be three possible options i looked at them and for me it was obvious to use clang format it's actually used for c plus plus and c sharp formatting but it works perfectly fine for typescript what i did here is at first i started using google style and that was the the base to work with but then step by step i started being not happy with it and i basically rewrote everything here so this is definitely oh i have this one huh this is definitely not necessary here um so i could at some point i would probably clean this up a little bit to have only the necessary rules what i also like about clang format is that it sorts your imports by specific criteria what i mean with criteria here is let's go into vs code here in my main browser ts you can see it easily so what clang format then does it like when you have the full module import it puts them at the top of your file then it leaves a blank space then it imports your dependencies out of the package json and then like down below here it would use your relative imports you are so you can always be sure where your imports are or you can see it usually uh with a single look and yeah i wrote here showcase time so i prepared um already staged changes so i actually made my file is this readable for you or sure yeah yeah sure um which one do you this one oh yeah much better okay so yeah you can see i it up pretty good i it up here i i um i can't look at it yeah the constructor stuff is unindented and here for example forces on the next line the the closing brace of the if is on the same light of the co line of the code stuff like that so it's quite horrible and what i would do now is like use the actual um is the actual script so i would say autoformat ts goes through the tree and the i flag is for interactive replacing it back in the editor you would see here i have now my changes here and if we're lucky it should be yeah it should be back in its place so nice and clean everything again and like stuff like this here for example to get it really wrap aligned underneath each other was a pain in the ass so it was a work it was quite a work to go through this clang format and look at all the options that there are yeah same of course we can do for the like here we have a details page and html page and you see that the h3 here is wrong and this one is just in the same line and also really horrible so therefore we have the html formatting yeah it outputs also unchanged files but it should have fixed this one yeah you see now the h3 is aligned on yeah do you mind templates sorry does it work with inline oh i didn't try that out i'm not using any inline templates but that would be interesting [Laughter] but i guess it probably won't work because you're looking for the wildcard ts so probably not but here you see it's back to normal and should be fine and then also have here my shame css file and it also is you know what a shame css file is okay yeah so you have a lot of stuff here also have been wrong wrongly indented and stuff oh sorry so i would go back here again and do it with node modules being prettier write single quotes true print with hundred and then the path to the actual file and it should be yeah everything is also again back in its place where it should be nice and clean and oh sorry so what we can do now is um just gonna check out the changes here you see we still have these three modified files and now if i say git commit let's just call it test commit it starts running lean staged with husky and here you see other format blah blah and it's also pretty fast except for the linting for of the ts files but other than that it should be um result in a really nice clean commit here you see still it's the changes are still there because it's not yet added again to the stage changes let's see if it's through yet no okay now it's through so yeah everything is nice and clean now and we can verify this again um to this page so yeah everything is nice and clean committed and that's what we want that's what we expect um yeah so for the html i use js beautify it's called so i was like what the why is this library called js beautifier when it does stuff with html but that's something that vs code is actually using on their own like when you format something in vs code it's using js beautifier so i thought why not stick to that and yeah the most important feature that i like here is that is this force aligned here that leads to stuff being really clean um being really clean like the properties and the eight attributes are always like aligned like this so especially when you have a lot of stuff like that it's nice and easily readable still so that's what i like about this yeah and since we're talking about html there's also emmet probably most of you know if you don't know about it it's already implemented by by vs code as a standard and the way you would use it is let's say i want to write a container like bootstrap stuff a container with a row with three calls and then with the text hello angular meetup i would do it like this the dot is a class then i call the class container i would make another class called row and then i would say call 4 times 3 because we want to have like we're always thinking in 12 12 steps and then in there i would have a h2 with the content hello angular meetup and when i expand this now you see it nicely creates your html tags that you wanted and this is also really really nice when you let's say you want to have a lot of allies so you have a shitton of allies now um so this is definitely something to keep in mind and to also work with it and use its power um yeah the next topic is already auto prefixer in working together with browsers list so here on the right side sorry on the right side we have an example of how it would look if you would need to respect all the vendor prefixes that there are and then sometimes you also don't know okay what the what the hell actually what browser do i support and and since when is this flag required or since when is the vendor prefix required and since when not so what other prefix does i used it here for the only for the production model because in the development bundle you should not care what because you work in chrome or something useful elsewise so here it's like loading the sass files then it's using autoprefixer on this and then it's converting everything to css and what this results with is is depending on what you have here in your browsers list array so this is not what we use here but it could be something like that so you say please add all the vendor prefixes for the last one major major version of all browsers worldwide or here you could say okay only browsers please that that have a usage of one percent or more and here you could also even specify it for every browser individually and what we have at work is something like last two major versions to make sure in case someone has updated and with the rolling release browsers it should be no problem and then also add support for the last four internet explorer explorer versions but that's not something to be proud of yeah next topic is um cleaning out unused css out of your production bundle i think every one of you knows okay you use some kind of library like foundation or bootstrap or something else and you get this big boilerplate code and you probably only need some of it so you will never really use all the capacities of the or the already predefined css styles and the way you do it is um you would have your main content hash bundle css so this is already basically your finished bundle and then you would let purify css run over all your html files look for classes or ids if it finds it it keeps the classes in in the actual bundle and if it doesn't find it it would clean it out and you can already think okay this is probably a problem when you have dynamic dynamically created content so here in the purify options whitelist you could um specify which classes to always ignore and in this case you see i have some bootstrap stuff here and so actually you have to go through your whole web application and see what breaks and what doesn't but with this with this couple classes i was already able to make everything runnable and be fine and here you can see that i commented it out it's a verbose true flag and this would actually tell you how much percent percentage of your bundle got cleaned out and in our case this was about 30 to 40 percent so this is definitely something that you want to do and what's also very handy is that purify css also is able to minify your css bundle are there any questions so far okay so about the terminal workflow i see a lot of people just using the plain old bash and it always pains me it always pains me when i see that you have to go through the history and you don't know maybe you find this command or maybe you will never find it because you typed it on some other laptop or something so i'm a big fan of the set shell some of you maybe know it it's quite popular it has like 68 000 stars and i put like the installation guide for you on there and also installing the omac framework what the framework actually does is it gives you the options to have different themes very easily and gives you the options to use a lot of custom plugins and for example you can see here what i use is the marant theme and what i like is when like for example i'm i really like to see the whole path of where i am actually right now and what i like of course is that it shows me the git branch and it shows me if i have changes in my git branch and i'm just really i'm really quite happy with this and what i also did here is same with your bash rc you have here a set shell rc and again here my theme is it says here my theme and the link also goes to all themes that are out there and there's a on of them so you can definitely find something that you will enjoy is there a white one a light one oh i think there's light ones oh because of the light yeah no i think there's no light one actually but this depends of where this step this well well it's theming the functionality of it so i guess you would still like me i set it to background ubuntu style so that's it and also here i have like some examples of the plugins that i use and again it's linking to all the plugins that are out there there's also stuff for docker and git aliases crazy stuff and what i especially like is this called vd it's called warp directory and the way i use this would be i type vd and then i tab and i get all the possible war points that i saved myself so this would bring me to the desktop and let's say i want to go back into the project i would type via frontend video via frontend and i'm back again on this on this one or like vr as the back end so in this case i would go back to via and the other thing that's very convenient is called less working directory so when i make a new tab i'm always back into what is open in my other terminal window so these two things i really appreciate a lot and what i also have here it says set shell auto suggestions and syntax highlighting and the way you can see it here let's say i write git status it's fine it works but if i write get status it already highlights me in red and tells me you don't have a global library installed that's called get and then of course it throws the command not found and what i also like is let's say you have this really long commands like this one so you already see in the like the history autocompletion is in line basically so when i put the right arrow key down then you you have it expanded and you can use it so this enables me to really easily and fast fastly see what i have what i have written so far like you see here i can go basically to all my things easily and don't have to type in the history and look for it or whatever yeah and i set my like suggestion style to yellow but this can already or this can depend on what kind of background color you have that is nicely for you yeah and because i don't like typing docker compose up and build i wrote like dcu and dcb into the chrc so this is also something you could do like work a lot with aliases and make some commands easier that you use frequently yeah you probably saw by now i'm using visuals to decode and i'm a big fan and i don't know why there's webstorm licenses today what i like about vs code is that it's really nice and transparent like you can can find anything you want on the github repository and they release monthly iterations of um updates to their vs code and here for example we could look into the one for april and it and you can see here what they have planned like all the check boxes here what they plan on adapting and improving and they always take a lot of feedback from the community and like for example if you notice um when you do changes in in atom you always get it when you save it you have it highlighted in yellow or when you add some stuff to git ignore you have it uh in gray like grayed out and this was not there in vs code up until probably half a year and they said that the community said okay we want this definitely and they made it work so they really listen to what the people actually want and you can of course also look into the iteration plan always and see if there's something coming up that you're really interested in and in case you definitely don't want to wait there's the insiders version and basically you could always build a new version as soon as they push a new commit into the master branch of theirs so you could install the vs code insiders version and always be up to date but this could also lead to breaking breaking things so this i would only recommend if you want to file bug reports for them if you want to contribute to the vs code repo something like that yeah so these are my settings so far in visual studio code so if you want to install it blank and you want to have something up and running already i would give this to you so i will suggest to you something that i like or that i think is necessary by default visual studio code also gives you angular 1 suggestions in the html so i disabled this and also here again it's the force um aligned else is there yeah for example it's also i think this is not very long into envious code yet but you can actually use your vs code capabilities to type check javascript so that's really convenient so it would tell you you have a string but you should use a number stuff like that it's also really nice when you work on a backend project and you discover what errors they have in there and what i also like is for example let's say you're working that you have your development branch open or your master branch and then in the meantime they have there were a lot of changes so this one like get out of fetch it always gives you the newest version of it yeah and one thing to keep in mind of i wrote like a hint here these files exclude on the top here um so for me it was annoying to have some files duplicate or you you only want to if you want to if you search for index.html you don't want to have the one in your compiled bundle stuff like that so you only want to have the the actual files that you want to work on but what this also does is it hides it in the file tree of vs code so what the problem i had is there was a package lock that always got committed and i was like where is this package log because i had it excluded here and so that is something to keep in mind not to do yeah here also listed for you all the plugins that i have the extensions and yeah this is a of course opinionated so maybe you don't need postgresql or you don't need apache something like that and the way you could install it is just write code install extension flag and then the offer name and the extension or you can just do it with the offer name or the extension in vs code itself yeah and one thing i like especially much is this settings sync it's called so when you have a github account you can upload your local settings and this as let's say you work on your laptop here and then you go back at home and then you can easily download all the settings again so it has all your extensions it has all your settings or your key bindings and you have it nice and clean through a gist on github yeah some other resources that i have here for you is angular starter boilerplate so yeah i'm not we're not using the angular cli what angular start the boilerplate is it's like the most most supported i would say like ten thousand like there's a lot of angular rappers that stopped um putting out new content and and updating them because of the angular cli but this one is still quite popular i would say yeah 11 days ago so that's fine and now they're right now working on upgrading it to angular 6 and webpack 4 this of course is like a big change again so if you want to depend on an external boilerplate template this would be a good one and yeah the franz app i saw actually at the door that the guy from france is working in the first uh in the upper floor so i'm a big fan of what it opened i'm actually a big fan of the franz app what this gives you is not really related to web development but you could definitely improve your workflow with all your social with the services you use so let's say you have a slack channel let's say you have a trello board or your work email something like that you could have it easily in one electron window and switch tabs on the on the left side here and always be up to date with something happen then you don't will not miss your emails or stuff like that because i always had to open my gmail in a chrome window and then in your home window in the chrome window you actually want to develop stuff and it always gets tangled up so this is a nice clean way of working or having it separately yeah that was my talk thank you for your attention