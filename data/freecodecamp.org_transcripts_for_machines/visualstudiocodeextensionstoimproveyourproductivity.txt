in this course you will learn about popular visual studio code extensions that can help improve your productivity hey everyone my name is roman and i'm a full stack developer and today i'm going to talk about 10 vs code extensions that are going to make your life easier as a developer and also have just made me more productive below this video is a list of all 10 of those extensions along with the places you can go to download them so let's get started so the first extension we're going to talk about is git lens git lens is a vs code extension that allows you to visualize git context around files but also lines of code you can go ahead and search for git lens in the vs code extension marketplace and it will probably be the first search result that pops up now it's published by get kraken and if you see that go ahead and install and after you're done installing you're going to want to reload your window for the extension to take effect right away for mac you can press command shift p for windows ctrl shift p and it's going to open up the command palette and just type in reload window and go ahead and reload it now what you're immediately going to notice is wherever your cursor is there's going to be this unobtrusive annotation basically it's going to say the git commit author the git commit date and the git commit message and now if you hover that line you're going to get a better visualization of all that information on the bottom left you're going to notice a git commit number if you click that you're going to get a bunch of options you're going to be able to reveal the commit in a sidebar you can revert the commit you can reset the commit and so on and so forth in our particular case we're going to reveal this commit in a sidebar and what you're going to see is this tree that shows every commit and it's already expanded the commit we're interested in you can go ahead and interact with this tree i'm just going to click the calendar.view file because it says it was added and i can see all the additions that were made in this file in this particular case the whole file was added and now if you're interested in looking at other commits you can unexpend this and you you can expand other commits at will and if you go up one level you can see all the things that get lens allows you to do it allows you to use source control it allows you to use this commits view a file history view you can look at all your local branches i only have one that being the main branch you can look at your remote branches again i only have one which is the remote main branch you can look at git stashes tags and there's this search and compare feature where you can search for commits by message author file etc now if you go back to this hover menu what you're going to notice is a globe icon what this globe icon allows you to do is look at your commit in github before you do this you're going to want to sync with github in my particular case i've already done this it's going to be an icon right here and what it will do is pull in the picture of the author from github and also allow you to click this icon so i'm going to go ahead and click this icon and it's going to show me all the changes in this commit through github now we're going to go back and the final thing i want to show you is this team option this allows us to open a live share session with the author of this commit in this particular case we haven't quite installed live share yet i'll show you how to start sessions and interact with live share later in this video but this is just a handy feature to know about now at the bottom you're gonna see this bar blame option and basically this shows us the last author on this file along with the last commit date and then at the top what we're gonna see is all the authors on this file in this case it's just me so it's only showing me as a singular author but if there's multiple authors it will show the name of all the authors along with how many there are i often find this really helpful when i need to tag people on pr's often the best people to tag on a pr are the ones have either authored the file or worked with it before now that's all the things i'm going to touch on about git lens in this video if you're interested in learning more about different features be sure to look at the documentation and i hope you find this useful when you're looking for the right people to tag on pr's or you're just trying to visualize get better during this time when remote work has become so normalized i've often found it really hard to collaborate with my peers vs code liveshare is an extension that has made collaboration and pair programming incredibly easier liveshare is a way for me to host sessions with up to 30 people where i can debug files with others pair program and even teach when i'm using live share i can also share various resources like a server my terminal or my file straight through my session using read and or write permissions right now i'm going to hop on a call with my buddy liam who's going to help me debug an issue with my calendar app using vs code liveshare to kick things off i'm going to click down here on my name this is going to open some options it's going to say start a collaboration session start readonly collaboration session or join a collaboration session in my case i want to start one and then what i'm going to do is open this again and i'm going to copy my link so i can invite my friend liam to help me with this bug i've been struggling on now my friend liam has joined the call and i'm going to start an audio call with him so i'm going to go ahead and click on that bar down there and start or join audio call this is going to start up a call with liam and he'll be joining shortly what you're also going to notice in the meantime is there's this live share chat the live share chat has also said liam has joined uh you could opt to chat with others through this but in my case i find it a lot easier to pair program over a call hey roman can you hear me hey liam how's it going it's going well it's going well i heard you were having calendar problems yeah so there's this problem with this calendar app i made basically i just i create an event and after i create the event it goes on my calendar but then when i go to delete the event um it doesn't delete on the first time around but it deletes on the second time i try take me to your calendar delete function uh yeah i think that's called delete event okay yeah it's on line 156 okay i think you're gonna want to async await this calendar service delete event okay try saving that and give it a shot all right i'll try saving that i'm going to try this out real quick just to make sure that works oh cool wow that worked hey i'm happy to help awesome thanks yup see ya talk later bye see you and i'm going to go ahead and stop that collaboration session which is also going to end the call with liam and that's the power of vs code liveshare you can immediately share your session and your screen with someone else but also set up an audio call and a chat straight in your vs code editor pieces is an ai assisted code snippet manager that auto classifies languages helps save and reuse code snippets and allows you to convert screenshots of code to actual text among many other things using their vs code extension and other integrations so to get started with pieces you can go straight to code.pieces.op and on the top right you can see this get pieces button when you see that go ahead and click it and it's going to take you to an installation page for pieces os which is basically the engine that powers all integrations in pieces including the vs code extension depending on your machine you're going to want to download for mac or windows in my case i want to install for mac so after the initial installation i'm going to get both pieces os and pieces for developers pieces for developers looks like this and it's just a gui for my code snippets which i'll touch on a little bit more later to make the most of my setup but before we touch on pieces for developers let's hop into vs code and install the pieces for vs code extension so when you go into vs code and type in pieces the first result is probably going to be pieces for vs code if you see this you're going to go ahead and install and you're going to immediately see this new pieces icon upon installation on the left so right now i don't have any code snippets so it's empty what i'm going to want to do is add a code snippet in practice the kind of code snippet i want to add is something i might reuse a lot or something i might reference or maybe just something i found especially difficult to write or create that i want to keep for safekeeping so let's just say this update range function fits one of those criteria so i'm going to go ahead and save that to pieces with a right click and then save to pieces what we're immediately going to see is there's a new top level directory called javascript from pieces auto classification of the snippet and then if you expand that directory you can click on the javascript snippet and you're going to see the update range function you can also hover the snippet and it's going to show you a preview of that function what i'm going to do now is delete the update range function in my calendar.view file and let's just say you know i'm working on a project i want to pull in that update range function all i have to do is go to my snippet and press insert snippet and it saved the way i formatted this function and also pulled that piece of code directly into the place i wanted the snippet to be put in now the last thing i'm going to want to do is rename the snippet to something more appropriate i'm just going to pick the function name which is update range and now it's saved as update range awesome just to recap what pieces allows me to do is store my code easily straight in my ide and also gives me the ability to pull that code out so now where pieces starts to become really powerful is when you start using the other integrations along with vs code so what i'm going to do now is go to stack overflow and i'm looking at this cohort analysis sql snippet now i find this cohort analysis sql snippet really helpful and it's also kind of hard to write so i want to go ahead and save that to pieces since i have the google chrome extension what i'm going to see on the top right is this pieces icon and this allows me to click the icon and directly save this code snippet to pieces without leaving stack overflow so i'm going to go ahead and click that and then what i'm going to do instead of looking in vs code is open up pieces for developers what i'm going to see in pieces for developers is an auto classification of the sql snippet which is the cohort analysis i just showed you and then if i click on this little information view it's going to give me more metadata about this particular snippet it pulls in the title from stack overflow as a description it pulls in the link of the stack overflow question and opposing the origin which is a pieces chrome extension and depending on what extension or what integration you save with using pieces it will have a different origin now for search i can add tags so i'm going to add cohort as a tag i'm also going to add sql as a tag i'm going to write cohort and sql as a tag and this is just generally going to help me search better using pieces for developers and now if we go back to vs code we can open our pieces explorer and refresh a tree and if you expand the sql section you'll see the sql snippet we just created which is the cohort analysis cool now the second practical use case i found for pieces integration especially pieces for developers is converting screenshots of code to actual code i can use so oftentimes when i'm watching tutorial videos i don't want to pause the video or leave the video because i'm really trying to understand the subject i'm learning but i do want to take a piece of code or copy the piece of code for safe keeping or i just want to run it locally to test it out while i'm watching the video pieces can be really useful for this so this particular video is a video on free code camp that just came out for building a live stream using flutter i'm going to copy these three lines of code which is dart and i'm going to convert that to code using pieces for developers so immediately when i drag the screenshot over to pieces for developers it identifies it as an image with dart there's this option to view as code on the right hand side i'm going to go ahead and click that what i get is copyable code from pieces for developers straight from the screenshot and just to show you i'm going to open up my ide i'm going to copy it and you can see i copied that code straight from pieces for developers better comments is a vs code extension that improves your comments by helping you annotate and document code more efficiently using a custom tagging system after you're done installing better comment you're going to want to open up your command palette and type in open settings and you're going to get this json option let's go ahead and click that so after we click that we're going to type better comments and intellisense is going to kick in and show this bettercomments.tag go ahead and pick that and this is going to show all the default settings for better comments so there's a couple tags that come out of the box for better comments there's the alert tag using an exclamation mark there's a question there's a commenting tag there's a todo tag and there's a catchall tag and within a tag there's a color property there's a strikethrough an underline a background color a bold and italic property and each of these can be manipulated differently in order to make a unique tag that anyone can identify in your code system or can be made for you to read easier so before we go ahead and dive into code let's add an additional tag here and we're going to create a bug tag and then i'm going to change the color so we can identify this to some random color here go ahead and save this file and i'm also going to reload my window again just so this kicks in cool so that bug tag should show up in our code what we're going to do is suppose we just want to add a comment on line 15 so i want to add a comment saying this is a bug and it has a race condition so bug fix race condition here and now better comments is taking the tag from the settings.json file and applying the properties we set over there immediately what i'll be able to tell with the use of better comments is that any pink comment is probably documentation for a bug and suppose this race condition is just you know it's a very big deal and we want to make sure people know about this we can switch it to an alert and it changes to that orangish color that was set by better comments we can also look at different tags like a question mark which is blue and you could change each of these the way you want to in our settings.json file say you know we had a bug comment and now we've decided this bug is fixed but we want to leave the comment in the code base we can use the better comments strikethrough feature and it will just strike it through without getting rid of the comment so essentially what better comments has done is it's made it easier to visualize any comments in your code base and if you're using similar settings or if everyone on your team is using it now they're going to be able to associate different color comments to different tags and different problems let's just admit it we all end up console.logging a bunch when we're trying to find an error or a bug and i'd love to say i use a debugger every time but that's just not the case and that's where turbo console log comes into play turbo console log is basically a vs code extension that makes logging a lot easier you can easily add detailed console.log messages delete these messages all at once and even comment them out altogether so i'm going to dive in real quick basically suppose that there is a bug i'm trying to find on this calendar.view file and i want to console.log a few things that might help me track down this bug i'm going to go ahead and highlight a couple variables and i'm going to use turbo console log to help me create logging messages for them so for this event variable i'm going to press control option l and that will create a logging message for me on mac for windows users you're going to do control alt l and then i'll pick a couple more variables i'll do this event here control option l i'll do this type here control option l and now we have a couple console.logging statements cool this is what a file ends up looking like and if we look at these console.log statements what we have is each console.log message has the file name the line number associated with the comment the function and then the exact variable name so now suppose we think we've solved the problem we're trying to track down and we want to comment all these lines out to make sure the code works without getting all that extra noise for mac users you want to do option shift c and for windows users you want to do alt shift c so we're going to do option shift c since i'm on mac and now we've commented out all lines the only thing to remember here or the only thing to know is that all these keyboard shortcuts i'm showing you will only work for logging statements created by turbo console log if you're creating your own logging statement and then also creating some by turbo console log these keyboard shortcuts won't work for the ones you created yourself now after we've commented all these console.logging statements we've now realized that we haven't tracked down the error so we want to get these back in action for mac users you would want to do option shift u and for windows users you want to do alt shift u and that will uncomment all those commented console.log statements so the last thing left here is you know you're done debugging you want to get rid of all these console.logs historically the way i usually do this is i just search for them and get rid of them through a search but with turbo console log all you need to do is press option shift d for mac or alt shift d for windows and it will get rid of all console.logging statements at once code runner is a vs code extension that allows you to run code snippets and files easily with just a highlight and a right click so i'm going to go ahead and open this loop.py file and show you how code runner works let's say i have this function in my code it's called create list and basically it just creates an array or list of numbers from 0 through 9. i'm going to show you how this works right now i'm just going to print this list and use code runner highlight all this code and just right click run code cool it showed me that list zero one two three four five six seven eight nine and let's say you know in a practical scenario i'm looking at this code and i'm like wow i can actually refactor this to be a lot better but first i want to make sure it's being refactored correctly so what i'm going to do is make my refactor my refactor is a list comprehension so i'm going to say i for i in range 10 and let's just make sure this is returning the same thing as our final variable over here i'm going to go ahead and highlight this again real quick run code i see the same result for both so now all i'm going to do is take my refactored code put it in the return value and get rid of all this extraneous code and as easy as that i made the refactor and now i know it works and hopefully after this i tested against my tests and that also confirmed it works but i've often just found code runner really helpful when i'm trying to make these quick refactors and get an immediate response on whether this change is working or not as developers we know the importance of fast applications and websites and one of the things that affects performance is the size of your bundles now a slow application or website can lead to lower seo rankings more users bouncing off your websites or applications and just generally a bad user experience so that's where import cost comes into play import cost forces you to look at the size of your thirdparty javascript packages straight in your editor and you can fix any large imports right away so after you've installed import cost go ahead and open a js file in my case i have this main.js file with a couple thirdparty imports what i immediately notice is lowdash is my largest package but i'm only taking this for each function so how can i make this smaller i can make this smaller by maybe just deconstructing no that doesn't exactly work um import cost says it hasn't really made a difference in the size of the package i'm importing well let's use a sub module to just grab this for each function and there we go now it's down to 5.7 kilobytes and in real time import cost tells me that i have made my bundle smaller and this just instills best practices so when you're pushing up a new application or when you're pushing up a new website you're making sure your thirdparty packages are not bloating your bundle now prettier is an opinionated code formatter for various web development languages such as javascript typescript jsx etc my prettier setup in a way where it formats all javascript files upon it being saved which is just a huge convenience because it enforces code styling that i've customized through my own settings now there's two caveats to prettier the first caveat being that if you don't like your code being rewritten which is essentially what prettier does with its automated code formatting you might not like it so much it can be often really difficult to set up with a linter but once you get it set up it could be great in conjunction with eslint which is the next extension we'll talk about to start off we're going to look at prettier settings which will dictate how prettier will format its own files so on mac you're going to do command comma on windows you're going to do control comma and you can type in prettier and it's going to open all the prettier related settings there's a setting for arrow functions there's a setting for bracket spacing and so on and so forth i'm just going to go with the default settings for the sake of this video but if you're inclined to use a customized settings file or you want some sort of customization so your prettier doesn't overwrite some styling that you're used to you can go ahead and customize your prettier what we're going to want to do next is search for format on save up here and you want to make sure this box is checked what it's essentially going to allow you to do is format the file on save using your prettier settings now the last thing i want to touch on before i show you a demo of prettier is that sometimes i've struggled to set up prettier because another extension conflicts with it in my case the extension was beater a view extension and i had to set it up in a way to let that extension know that prettier is going to be the default formatter so i'm going to show you how i did that i'm going to open my settings.json file and essentially what i did is there's some vendor settings that sets a default formatter for all the files that i want prettier to format i just specify that prettier is the default formatted for that file not veda so what you want to go ahead and do is if you find that your printer is not working you should check if any of the other extensions you have are conflicting with it so the last thing i'm going to do over here is pop open this calendar.view file and i have a bunch of poorly formatted code i want to format this properly according to the settings i have my prettier configurations i'm going to go ahead and save this file and printer automatically enforces all of its styling as you can see it's pretty seamless and is often used in conjunction with the linter eslint which is going to be the next extension we're going to talk about the eslint package is a linter and formatter that statically analyzes javascript code to find problems these problems can be both stylistic and coding ones some of the coding ones are stuff like a missing variable name or using a let where a const makes more sense now in this video we'll be talking about the eslint extension mostly which works with the eslint package to help you visualize linting errors along with suggestions on how to fix them and the vs code extension for eslint gives you quick fixes directly in the editor which are super helpful in picking up mistakes or poorly written code in real time so to get started we'll have to make sure our project has eslint first and we also have to make sure that the eslint package is installed globally to do so you can go ahead and run this command over here which is npm install dash g eslint to install it globally and then in my case i already have it installed globally so i'm going to go to the next step which is bootstrapping my project with eslint so after it's installed globally go ahead and type in eslint dash init and you're going to be prompted with how to set up eslint for your project in my case i want the full capabilities of eslint so i want to check it for syntax find problems and enforce code styles and then my modules are javascript modules the framework i'm using for the calendar app is vue.js my project does not have typescript it's running in the browser and i want to go ahead and use a popular style guide if you want to answer questions about your style you can go ahead and do that it'll allow you to customize eslint more than otherwise but i'm going to go ahead and pick the airbnb style guide and the final thing i'm going to pick here is i want my config file to be json and i want to go ahead and also make sure i have all pure dependencies installed so once that's done running what we're going to see on our left hand side in the file tree is a new file called eslintrc.json and this has all the configurations that we just talked about it's the exact setup i had through all those prompts and now what i'm going to want to do is speaking from experience is add in eslint ignore file so i'm going to touch dot eslint ignore and eslint is automatically going to lend some files i don't want linted and the dot eslint ignore file is going to make sure eslint ignores those particular files that i specify so i'm going to go ahead and add node modules as a directory i don't want linted src slash assets and then the public directory save that and the final thing we want to do is make sure eslint the extension is installed in my case i already have it installed and after all that is done you can go ahead and reload your window and you're going to see eslint tick effect so what you immediately see here is that there are a bunch of errors that eslint has picked up on and i'm going to go through and fix a couple just to show how eastlint works i'm going to go ahead and hover over this first one which is on the snapshot variable it shows a brief visualization of what the problem is you can also click view problem and it'll give an expanded message it also shows the eslint rule that is making this show up you can click on this rule and it'll open the browser to show you a specification of what this rule exactly is in eslint documentation so now we see snapshot is never reassigned use constant set okay that makes sense so i want to fix this real quick what's the way to do this well you just hover over again there's this quick fix option you get a bunch of options here you could fix all prefer const problems at once which would take care of a lot of the problems in this file you could fix this one in particular you can disable it so eslint just ignores this error for once you could show documentation for the file and finally you could fix all autofixable problems which would take care of a lot of this file so in this case i'm just going to fix this one const problem and immediately what we're going to see is eslint changes this let to a const and now that error is gone now we'll go to the next one hover over quick fix this and we'll just fix all auto fixable problems and you can see that most the errors are gone i know this seems a little messy right now and that's just because i bootstrapped the whole project at once but often linters are set up in the beginning of the project so in practice you would probably do a lot of this during project setup and in real time you would get these errors and you would just fix them so generally the vs code extension has allowed me to pick and choose where to fix my problems but also enforces best coding practices like the ones i just showed you the last extension i want to talk about is docker docker is a containerization platform that developers use to deliver applications uniformly across multiple environments now if you don't know much about docker outside of this tutorial i highly encourage you to learn more about it before looking at the extension because it just won't make a ton of sense if you have docker downloaded locally already you can go ahead and install this extension as well and it's published by microsoft and that's how you're going to know you're installing the right one if you don't have docker installed locally and you know how to use docker be sure to download it from docker.com and you'll be able to install by getting started once the extension is installed one of the first things you'll notice is a new icon on the left hand side it's going to be one of the docker whale and that's going to signify that you have the installation at docker and you're going to see this new left pane on the side that shows you various commands you can run in docker before we get to this left pane we're going to take a look at the command palette because this is a place where you can run a lot of docker command that the extension powers so i'm going to go ahead and load the command palette up and i'm going to type in docker and what you're going to see is many many docker commands you're going to see a command to prune a container a command to add docker files to your workspace a command to print the system and so on and so forth so what i want to do is generate a docker file for this repo that i'm working on because i want to containerize my application so all i'm going to do is type in docker and then files and i'm going to have two options one to add docker files to my workspace or one to add docker compose files in this case i'm not working with multiple containers i just want to containerize this one repo and this one application so i just want a single docker file so i want to add docker files to my workspace the first option i'm going to click that now my application is probably going to work on a node.js application platform so that's what i'm going to pick for my base image here i have a package.json file in my repo so i'm going to pick that i'm going to agree to port 3000 i do not want to include an optional docker compose file because i don't need it and what we're going to see on the left side when we open our tree is there's going to be a newly generated docker file here we see the docker ignore that gets populated in and now we can click the docker file and we have a brand new docker file here that should help us containerize this application we'll also notice if we interact with this docker file that there's some builtin intellisense using vs code's native intellisense basically if you go in this docker file and you type in something like run which is a docker command vs code's builtin intellisense will pick up that this is a docker command and it's going to show you some documentation for that specific command which is really cool and really handy all the time now if we go back to the docker will we're going to look at this pane on the left hand side and the first thing we're going to notice is that there's a container running for me and that's just the getting started container that comes with the docker desktop app what i'm going to do is stop this container directly in my vs code editor and when i'm hovering over it to do this i get a better visualization of information regarding this particular container including the name of the container the image the ports it's running on and so on and so forth i'm going to go ahead and stop this by right clicking and then pressing stop and it's going to stop the container and now what i can do is i can also decide i want to prune this container i don't even want to stop it i just want to make sure it's completely gone to clean up my setup so i'm gonna go ahead and prune this container in the command palette it's gonna ask are you sure you want to remove all stopped containers i'm gonna say yes and i've removed that getting started container now if you keep on looking at the left pane you're going to see there's an images options in my particular case i only have the getting started image and if you expand the images you're gonna get each image tag i only have the latest tag and that's why it's only showing a singular image you could also set your extension up to be synced with a registry i'm synced with an azure registry many people use aws and docker hub you can go ahead and do that and basically what they'll allow you to do is push docker images straight to your registries from vs code and there's many more advanced features that you can pull off here in vs code using the docker vs code extension like volumes and networks and so on and so forth so it's really incredible how much power vs code and the extension particularly gives you with docker once you have the docker extension installed in your vs code editor you get builtin intellisense with docker you get the ability to stop and start containers straight in the editor you get the ability to set up multiple containers using docker compose envious code and you can also interact with your registry without ever leaving vs code so that's going to be it for this video if you like this video please give it a like and also be sure to subscribe to free code camp there's always a variety of content coming out and i've personally learned a ton from it and thanks for watching