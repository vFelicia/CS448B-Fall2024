what is up guys fah here here from awesometoots.com let us now import the assets for our new game that we are going to create as you can see i have a brand new project this is a 3d project so when you create a new project check the check box or the radio button for 3d name your project save it in any location where you want to save it and create it here i only have the scenes folder with my gameplay scene which is this scene right here which is completely empty i did not import anything i was waiting for you to watch this video so now we are gonna go in our assets folder that you can download in the link below and select all of these assets so we have fonts materials models prefabs sounds and textures so drag and drop them right here inside of the project tab and of course we will need to wait for unity to take mercy upon us and import all of these assets so let us wait one moment more no no no no no no and finally they are here so in this video i'm going to set up our main or gameplay scene and we're going to do that by going inside of the prefabs folder and here we have our level and here it is i'm simply going to drag and drop it here in the hierarchy panel and voila this is our level i'm just gonna go here with my mouse and see it and this is our level now of course it looks like it's a little bit dark but now it's a little bit white again so i'm gonna go quickly inside of this lightning tab and i'm gonna uncheck this out to generate and the lightning tab is under window and then here you will see lightning and then you're gonna click on settings which will open this tab right here it will probably be floating for you let me try if i can make it float no apparently not here yeah finally so it will finally it will probably not finally be floating for you like this i dock it usually right next here to the inspector panel on my right side and when you select the lightning tab you're gonna go right here inside or the bottom of this lightning tab and you're gonna uncheck this auto generate now this auto generate notice here when i hover over it says automatically generates lighting data in the scene when any changes are made to the lighting system this means if we take this directional light and if i even change it a little bit so if i change the rotation from 50 to 71 it will rebake lightning it will try to simulate lightning and that takes time that's the reason why i have turned this off it will try to rebuild the lightning settings which will take a lot a lot of time for us and we will need to wait your computer will get hot so on and so forth that's why i am going to turn it off now we are going to duplicate this directional light but first of all for this light i'm going to set the rotation to 10 like this and it already looks pretty nice and the intensity i'm gonna set it at one we can set it 1.5 for example but one will do and i'm going to duplicate it so i'm going to quickly duplicate it here and this is directional light one and also for this one i'm gonna set the rotation for the yaxis at zero so the position x is zero position y is three z rotation is zero rotation x is ten y is zero and z is zero this is for our directional light one for our direction light two so this one right here i'm going to set the y rotation at 43 and do we want to set here point three for the intensity or something like this because now we're casting shadows here on the side and of course this all depends on the intensity it depends on the lighting i can also pump up the intensity which will be something like this which is something you use to kill vampires in your game anyways i'm not gonna go too much into lightning because it is a separate topic on its own i talk about this in the ultimate game development academy in a whole section with a brand project or brand new project so a separate project for talking about lighting demonstrating how lighting works so it's a separate topic for itself but here i've just used this directional light i can actually remove this one so we can leave it at one you can play with intensity if you want to but i will leave it at 1 and the rotation is perfect i have turned off the duplicate by the way and it looks nice it looks pretty nice if i go in the game this is how it looks like and by the way for the main camera here it is the zaxis is going to be zero the yaxis is going to be one something like this and also the far for clipping planes i'm going to set it at 10 something like this this what i did for the clipping planes it will simply if i pump it up pay attention to these parts right here let me just demonstrate which parts do i mean come on highlight tool where it is here it is you see this from camera this right here and this right here like what the camera is seeing so pay attention to that if i take my clipping place and place it far it means it will see as long as the camera is stretching you see as long as the camera is stretching we don't need that much we only need 10 to stretch the camera right here where our plane is or our game field is and this looks pretty nice this looks pretty nice i'm pretty satisfied with this so we're not gonna touch this anymore but we are going to go and create our snake and i am going to right click here and create an empty game object like this zero zero zero and this game object is going to be our snake so i'm going to name it snake now for our snake we need to filter for our mesh which is our eyeball mesh and here it is eyeball i know i'm using an eyeball for our snake but hey nobody's perfect so don't judge me and i am simply going to take this eyeball and put it here inside of our game and we already see it is casting shadows let me just clear this console and here it is this is our eyeball i'm going to take this one the the child one i'm going to remove this one which is the parent one and i'm going to put it as a child under our snake and let me just position so zero zero zero for our rotation i'm going to see here or set it negative nineteen so negative 90 0 for the y 180 for the z for our skill one one and one and by the way our snake here we need to set the z axis let me just 5.8 something like this for 5.8 so now it is visible and for our eyeball which is going to be the head of the snake so here i'm going to say head i'm going to set it to point 12.12 and i'm saying i'm going to set it to 0.12 but i'm setting the scale i did not set what i'm going to set i'm going to set the scale so select it and the scale is going to be 1.12 1.12 1.12 now this is for the head of our snake we are also going to duplicate the head and i'm going to put it here and this one is going to be our node one i'm going to name node and let me just move it right here and this node i'm going to say it's 0.1.1.1 it needs to be smaller than our head and let me just duplicate it one more time and i'm going to put one note as a child of our snake parent game object and this note i'm going to put it somewhere here something like this now the another the other node you can move it here let me just move it below so let me just put this one a little bit closer to our snake yeah this works pretty nice and the last one is going to be our tail so this is why i have removed this one or this one is going to be our tail and for the tail i'm quickly going to add a sphere collider and i'm going to attach a rigid body on it so attach a sphere collider on this game object this one that we named tail and attach a rigid body on it now uncheck this use gravity because we don't want to use gravity and duplicate it one more time i'm going to rename it to simply tail and put one of these as a child of our snake now let me just zoom in and for our tail here i'm going to set it at 0 0 and position it here something like this so we are going to position it to be as a tail of our snake and for this one we're going to save it in prefab so i'm going to go here and create a folder that i'm going to call snake and inside of the snake folder i'm going to drag and drop this tail and now we can safely remove it so tail can be removed and now this is our snake if i go in the gameplay scene you see this is our snake so the tail is here it has a sphere collider and a rigid body the node can also have or it needs to have a sphere collider but we can uncheck it for this node so for the second one the one after the head we don't need the sphere collider to be checked and the rigid body we are also going to add it and uncheck use gravity by the way for the tail also make sure that you check this is trigger and do the same thing for this tail right here check it to be a trigger the tail right here i meant the one that we dragged and dropped into the snake prefabs folder and for the snake's head which is this dude right here now for this one we are also going to attach a sphere collider so sphere collider make sure it is a trigger and i am also going to attach a rigid body and for this rigid body i'm going to uncheck use gravity because we do not need to use gravity for the rigid body which we will see later on we will demonstrate that when we start moving because we are going to move from our code and if we let gravity do the thing it will pull us down which is something that we don't want now for this sphere collider for the head we can actually also uncheck it so you can uncheck it because the top game object the top pair and this one the snake it will have a sphere collider and this sphere collider's radius is going to be 0.1 or actually it is going to be one and the center is going to be let's see where it is just quickly let me see where my sphere collider is so here it is yeah it is large actually i need to resize a little bit more going here moving our sphere collider yeah something like this i need to resize it more let's say 0.1 12 just so that i can see where it is you see this green line this is where our sphere collider is if i set it at zero i think this is perfect yeah point one or point one one is where we want the sphere collector to be i also i am going to make it a trigger i think this is okay let me just try to resize it a little bit soak it so that i can see where it is radius yeah 0.11 is for our radius of the sphere collider i'm also going to click on add component and attach a rigid body on this dude right here and i'm also going to uncheck this use gravity because we do not need it we don't need it and this is it this is preparation for our game we have the snake we have the level i'm gonna drag and drop the snake in the snake prefab folder so for the snake we have an empty parent top game object we also have the head which is this one right here or this one right here the top one or the largest part of the snake we have the no this one i just named node because it's the second body part of the snake and we have the tail so every next game object that we add because you know when we eat our fruit the game object or the snake will grow larger it's the same as on old nokia phones when you use that snake and you ate more and more the snake go grows larger and larger so all of those other objects that we're going to add so larger and larger objects are our tails so the tail needs to be named like this so that we can differentiate it we have the head we attach sphere colliders on all of them so the tail and the sphere collider for the tail needs to be checked it needs to work because we can collide with the tail you know the snake can kill itself if it touches itself so this is for the tail for the note it does not matter because we are not going to do that for the note which is the next part after the head head here it's also going to have a rigid body all of these game objects have a rigid body except for the head and the node the sphere collider must be turned off or we can also remove it and for the snake we have the sphere collider rigid body which is the top most game object and this is preparation for our snake moving forward with our game we have prepared our level we added our snake we added two directional lights we turned one off now you can turn it back on or turn it off this all depends on you however you want to do it you can also turn the first one or the second one off and probably pump up the intensity on the first one however you want to do it it's up to you so i'm not gonna touch that i will turn the second one on so both of them are turned on this is our snake in the middle of our screen and we need to start moving the snake in order to do that we need to go in our project tab and right click and create a new folder and this one is going to be our scripts folder and inside of this one right click and i'm going to create here folder for helper scripts now for our helper script the first script that we need to create is our script that's going to hold our tag so i'm going to name it tags and first of all right click create a c sharp script you are going to double click it and open it in visual studio mana develop whichever one you are using now since in our tags class as you already know or assume we will add tags and default variables that we are going to use throughout our game so i took the liberty to copy them simply here and now you can pause the video and simply paste them but before you do that i am going to explain what they are now here it's playerdirection.direction without n anyways the tags here will represent the tags so we have the walls so when we collide with them we will check if the collision happened with a game object that has a tag wall when we pick up a fruit we will check that with the tag as well so these are the tags for our game object and here we can say tail with small t or a i l i wrote it all caps and for our metrics so these are the metrics that we are going to use to position and move our nodes inside of our game or to move the snake we will see that do not worry about that and this is a public enumeration to determine if we are moving left up right down and this is the count eg or it will show us how many movements do we have so one two three and four so we have four movements now as you can see in our public enum we can say left is equal to zero up is equal to one right is equal to two so we can do that as well this is something that we did not do before so i am showing you that we can do it and why are we doing it like this because later on we will use these values so 0 1 2 and 3 to access indexes in our array so don't worry about that you can pause the video now and copy all of these tags metrics and player direction and now i i'm i am assuming that you have copied all of those and i'm gonna move forward and go in unity and in scripts i'm going to write click and create a new c sharp or actual new folder and this one is going to be our player scripts and inside of this folder i'm going to right click and create a c sharp script now this one is going to be our player controller this is the dude who needs to be attached on our snake so select the snake drag and drop our player controller just like this i'm going to double click it and open it here in visual studio let me just do my thing as always and this is going to be the script that's going to move the player we are going to create another separate script for getting input that means we will move the snake or the player left right up and down and for that we will use a separate script this script is the one that is going to move the player and of course we need here a couple of variables the first one is going to be our public player direction which i'm going to simply call direction and since it's public it will be visible in the inspector panel i am going to hide it in the inspector we don't need it to be visible in the inspector panel but we need it to be public next we also need here and hiding inspector public float step length which is going to be equal to 0.2 f now this is the movement interval so we are going to move our game objects or the snake by this movement in terrible so 0.2 now we don't want to move our snakes every frame that is 60 frames in a second so we don't want to move it every frame so we need a movement frequency so here i'm going to say public float movement frequency like this which is going to be equal to 0.1 and i'm also going to hide this bad boy in the inspector now you see we're going to move our snake every 0.1 of a second instead of moving it every single time or 60 times in a second that's why we need this movement frequency now we also need a private game object which is going to be our node prefab or actually our tail prefab so you can name it tail you can name it node however you want it it is private it will be only accessible here but we need to make it serializable or serializable or serialize field because we want to drag and drop our tail if we go back here in unity and notice here in the inspector we will see an empty field to drag and drop this game object for in it is located in the prefabs and snake select here the snake and drag and drop the tail right here i'm also going to hit apply to make changes to this prefab now this is why we need to make it a serialized field because we want it to be private but still we need to drag and drop that game object inside now we also need to store the next position displacement based on player direction and for that we are going to use a private list of vector 3's which we are going to call delta position this is where we are going to store the previous movement of our player don't worry we will see everything in action we also need a private list of rigid bodies which i'm going to call notes and this is going to be every single separate node inside of the snake's body that is snake's head and snake's tails so on and so forth we also need a private vector three and for this one fruit note actually we don't need this one so we are not going to use this one but we are going to use a private rigid body for main body a private rigid body for the head body and a private transform tr for our own transform store tr not transform we also need a private float counter and a private bull move now this counter we will use it with the movement frequency to allow the player to move and we can put these two right here so that they are put with the appropriate or right below the appropriate variable that will accompany them later on and the last variable that we need is a private bool create node at tail this will tell us do we need to create a node at our tail that is when we eat a fruit do we need to create a note or not now instead of me explaining all of these variables one by one what they are i will demonstrate that so in the awake so i'm going to change start to awake in the awake the first thing that we are going to do is we are going to say our tr is equal to our transform tr is this one right here so we're going to get it with our or our transform is equal to tr next thing our main body is going to be equal to get component and get the rigid body component from our player and that is the top head or the top main body of the snake so the top parent which is the empty game object so this one right here that we currently have selected in the hierarchy we have that one selected that is the or the one that we are getting its rigid body by using get component the next thing that we need to do is we need to call here init snake nodes now this is a function that we still did not create and right below that function we are also going to call init player and this is also a function that we still did not create now let us go and create that right below the update we're going to create void init snake nodes now in this one we are going to initialize the nodes that means every single separate part of the snake as you can see if i go inside of the scene view you see we need to get all of these notes so we need to get the head of the snake so this one we also need to get this node the middle one and the tail one so we need to get all three of these so here in our init snake nodes we're going to say nodes which is our array of rigid bodies or a list you see here of rigid bodies and we are going to make it a new list of rigid bodies and below here we're going to say nodes.add to add to that list and we're going to say tr which is our transform get child and we're going to get the child that's at the zero index dot get component so it's get component rigid body component just like this close parentheses and we're good to go copy paste copy paste and we're going to say child one and child two and what is going on here now before i explain the last thing that we need to do is our head body is equal to nodes and the element that's at index number zero what is going on here you see here we are using tr which is our transform you see here our tr is the transform get child and we are getting the child what does this mean you see our transform the topmost transform from our snake it has children so we have the node or the head the node in the tail and we know that or the transform knows that we have children assigned to it so we can use or access those children's by using indexes so you can say get child 0 which means it will get the first child or the child that's at element 0 which is in our case head get child one in our case it's the node get child two in our case it is the tail and here notice the head body it is the rigid body of the head snake so the rigid body of the head snake and we know the head is set at index number zero which i explained a moment ago now in order to initialize our player so right here below we are going to create init player simply here we are going to make sure where our player is moving left right or up or down so switch so we're going to use switch and we're going to use direction and we are going to use cases in our switching case so we're going to have case player direction right and here we're going to use break i'm going to copy this and paste it so we are going to have direction left up and down and here i'm going to simply say down so based on the direction we are going to position all of our nodes or shift them to that position so if we need to or if our starting position is the right position we're going to do this so we're going to say nodes and the element that's at index 1 that position is going to be equal to nodes and the element that's at index 0 minus nu vector 3 and here for our x we are going to say metrics dot node and 0f0f and for our for our nodes number two or the element that's a number two and by the way here we need to say node zero that position so the position of our node zero and by the way inside of our nodes we are adding rigid bodies so when we say position we are getting the position of the rigid body you see here when i hover over it says the position of the rigid body so we're getting the position of the rigid body and here we're going to say nodes and the element that's at index 2 now we're going to say that position is equal to and we're going to use nodes an element that's at 0 that position minus nu vector 3 and for our metrics so we are going to say metrics dot node and we're going to multiply that by two and zero f zero f what is going on well when we start our game to the right we need to shift the positions of our game objects to the right side and in order to do that we need to get the node 0 which is the head what we need to do essentially if we are starting to the right side that means when we start our game that means when we start our game we will start moving to this side what we need to do we need to shift the position of this node over here and this node over here because then we are going to move to the right or actually to the left side excuse me i'm moving to the left but assume that i said left so if we are moving to the left side we shift their positions to the right side by using plus now let me demonstrate that so i'm going to move them back here and notice here if we are going to move to the left side i'm simply going to copy these lines of code and paste them here instead of typing here minus we're going to say plus you see here we are doing the same thing except here we are doing that with the plus sign so let me go back here and demonstrate that with the left position if we need to start moving to the left position with our snake that means we are going to this side and we know that the head so this bad boy over here he needs to be at the top so he needs to be the leading node in our snake in order to do that we need to shift this node over here and we need to shift this node over here and this is exactly what we are doing right here so if we need to move to the left side use the node that's at element one and use the element zero node which is the head and add to its position the metrics node which is the displacement that we saw here this is the displacement of our nodes so this is how far away they are from each other and do the same thing for our second node essentially this code right here is going to position these nodes relative to the node 0 meaning and let me just go back here meaning our head is the relative position so our node here this code right here is going to move this node over here and this code right here is going to move this tail node over here this is what we are doing essentially now we are going to do or everything that we explained here for the left side applies to the right side except well the right side is opposite to the left for our up side we are going to do the same thing except for the y axis so for the y side we are going to say minus but our metrics node is going to be on the y so zero for the zero f for x and we are going to move that one on the y and same thing here so we're just going to take this and zero f for the x and for the y matrix node multiplied by 2 y multiplied by 2 because our node at second position is our tail node so we need to multiply that by 2 because our head is here our node is here we need to multiply this by two so one head is one node is two and multiply that by two moving that right over here this is why we are multiplying with two for our down position simply copy this code from the up position paste it here and for the down we're going to say plus like this and voila we are good to go now of course we need to create one more function so right here above our init player we're going to create void set direction random and here we're going to say in direction random or die d i r random is going to be equal to random dot range from zero up to and we need to say here int and we're going to say player direction dot count to convert the count to an integer because if we use it like this without casting it to an integer and we go back in unity we will see here best of overloaded method match for random rage float float we need to put this into a float or an integer so i'm going to use it like this because our count if you remember has a value of 4 but this is an enumeration and we can cast this enumeration to an integer i've talked this already once in one of my tutorials can't remember which one but anyways we can cast it into an integer because as i said the value is four so the direction random will be based on random range and notice here we are casting this value to an integer and simply here we're going to say direction is going to be equal to d i r random now same way as we can cast these enums to an integer we can use enumerations to cast integers to enums so we can see here player direction now based here on the random value let's say random value is equal to one so this d i r int or d i r random value will have a value of one when we convert that into our into our enumeration player direction and we go back here the value one is up it will be the same if the value is two so value two is right if the value is let's say three then the direction will be down now we do need to call this right here so set direction random we need to call it right above our switch in case statement so we need to call it right there and we need to go back here and we can unposit or uncomment almost said on position we can uncomment these functions now now pay attention if we go back here i am going to clear the console and we go here in our game pay attention how the snake is positioned snake has been positioned with right direction in mind so it looks like it's going to start moving this direction notice now when we run the game so i'm going to hit the play button you see now it is positioned like it is going to go downwards you see and if i remove or stop the game and play it again you see now it is positioned again to the right side stop and rerun the game it will be positioned now you see like it is going upwards so this is how we are moving these nodes relative to the head node this is how are we positioning these nodes by using these lines of code right here now we are still still not done here with the awake function we need to create our delta position or which to go or position in which where we are going so our delta position is going to be equal to new list of vector threes like this open close these curly brackets and here i'm going to pass a new vector three and here i'm going to say comma now for the x i'm going to say negative step length comma zero f for the y i'm going to copy this and paste it below and here i'm going to say zero f first so zero f and here i am going to say step length comma here paste this one right here now here we are going to have positive step length and i'm going to copy this and paste it here now another comma here remove this comma and here we're going to have the negative length now right here i am going to add comments and here we need to end this statement with our semicolon so i'm going to add comments here like this so this one is going to be our negative dx or going to the left side here i'm going to put it like this this one is going to be our d y or going to the up direction right here i am going to say this one is going to be dx or going to the right side and this one and let me just move all of these by one and this one is going to be our negative d y or this means going to the down direction so you see here this step length this one right here is actually the value or we are going to move by that value so this is the time interval that value when we move we will move by 0.2 units this is what i'm trying to say so when we have this right here this means negative d y we're going to the left side or negative x so to say here we have the positive y meaning up here we have the positive x meaning right and here we have the negative y going down and you see here negative y positive x positive y negative x so this position right here means we're going to the left up right and this one is going down now in order for us to actually move we need to create a function that is going to move us but before that we also need to create a function here we need to create a function that is avoid check movement frequency and for this function we are going to say here our counter so counter plus equals time dot delta time we know the time that delta time is the difference between every frame so it's the time it takes from one frame to go to another frame and we're going to say here if our counter is greater or equal to movement frequency what we are going to do we are going to say our counter is equal to zero to start counting from zero again and here we are going to say move is equal to true to allow our game object to move now in order to make it move we are going to say here void move or create a function that is going to allow us to move and not on animator move no simply void move and inside of this function we are going to create here a vector3 d position this is the delta position we're going to use here delta position so it's actually delta position and we are going to use that by using here an int and we are going to pass here the direction so the delta position or deposition is our delta position we are casting the integer or direction to an integer to get it as an index so depending on the index if we are going to the left side for example if we're going to the left side index will be zero meaning we will access element that's at index zero in the dental in the delta position and if we go here in the delta position element that's at index zero is left as you can see right here so now that we have our delta position what is the next thing to do first of all we are going to create here a vector 3 parent pos of parent position head body dot position and right below here we're going to create a vector 3 prev position or the previous position and below here we are going to say main body that position is equal to main body position plus d position right below we're going to say head body that position is equal to head body dot position plus the position again now we are also going to move all the snake nodes so we're going to say for int i which is equal to one as long as one or i is less than nodes dot count our i is going to be plus plus and we are simply going to see here previous position is equal to nodes element that's an index i that position storing the previous position nodes and element that's at index i that position is equal to parent position and parent position is now equal to previous position now don't worry if i'm not explaining everything in detail right now because we will test it out soon do not worry after we do all of this we need to check if we need to not trigger its check if we need to create a new node because we ate a fruit we will do that later on and for that we're simply going to say if create node at tail then we are going to write the code to do that for us now practically we are done for now and we can test it out by going here in the update function we are going to call check movement frequency which is this one right here come on go down this is check movement frequency in the update we're going to calculate our counter by adding to it delta time and if the counter is greater or equal to movement frequency then we will allow the movement and in the fixed update right below here so void fixed update and let me just remove this private because i like it to be void simply and in our fixed update we're going to check if move so if we can move then move is equal to false and we're going to call the function move not fog mode move like this thank you like this so in the update function we are checking for the frequency so counter plus equals time that delta time if the counter is greater or equal to the movement frequency then we are going to say counter is zero so that we can count from the beginning from zero and move is equal to true in the fixed update if move is equal to true move will be false and move the snake by one increment and in the move here this is where we are going to move the snake now in order to test that and see it in action i am going to go back here in unity and run the game and we are going to see the movement of the snake and then we will go and break it down line by line so when i hit the play button pay attention to the snake you see snake is moving by one increment it is gone we cannot control the snake notice now if i hit the play button now snake is going downwards just a moment ago first time when we tested out snake was moving upwards i'm going to hit the play button again hopefully it will move left or right and now again it is moving down or up come on try to move left or right just for once okay now it is moving to the left side and you can test it out as long as you don't see it moving left right up and down but this definitely works we see it now let me try one more time hopefully it will go to the right side no anyways let's go break it down line by line so these here are now getting a clear picture or we are understanding for what we are using this direction is going to determine in which direction our snake is going to go step length is the frequency or the units measurement unit by how much units we are going to move every node that is 0.2 units movement frequency is the how many times we can move in a second so every point one of a second we can move counter is used to test that out so we are adding to our counter the delta time we know that is the it's a very small number so the difference or the time it takes from one frame to go to another frame so that's a very small number and when that counter value is greater or equal to the movement frequency which is this value right here then we will allow our snake to move so counter is reset back to zero and move is equal to true and moving forward this is our tail prefab which we'll use later on when we eat a fruit or when the snake eats the fruit we will add to the snake so it's get it gets larger and larger this is the delta position and you see here delta position is the direction where we are going is it left is it up right or down and we're using that by well using the step length and these values right here you see here the negative step length is negative x meaning we're going to the left side positive y that means up and positive step linked that means going to the right side the negative y means we're going down now here are the nodes that we are going to get when we initialize the snake basically these are the rigid bodies of every part of the snake so the head the node in every part of the tail so we can have 20 tails when we eat 20 fruits every single one of those tails is going to be added to this node array you see here we're using the transform to get the childs so we are getting the child at index zero one and two child at zero index or at zero index is our head so we are doing or assigning that right here and moving back here we have the main body head and the transform so the main body is our main body or the top parent or the parent of all game objects so this one right here the snake that's the main body our tr is the transform and here we are initializing the snake notes by getting the rigid bodies from every child next we are initializing the player that means we are setting the direction the initial direction of the movement of the snake we're doing that with this function which is this one right here so you're using a random range from zero and direction dot count so player direction count we are casting that to an integer because the value here of the count is equal to four as you can see here count is equal to four so when we cast it to an integer it will display that value so it will display four which means a random range from zero or between zero and four and when we get that random range let's say that number is three we will cast it back to player direction so if the value is three three is down if the value is for example 2 then 2 is right and you get the picture so we are assigning that to the direction now when we do that in this function based on which direction we have is it right left up or down we will displace these nodes and we saw that we have previewed that so let's say for example if the initial position is moving to the left side if i hit here pause and i'm going to zoom in on our snake i'm going to hit the play button you see here the initial direction was left side which means both of these nodes this one here and this one here shifted to the right side by using these lines of code so using the head position of our snake as orientation and we're adding to that position this value here now metrics node is this one right here this is the increment or the stepped length this is the same as step length and for our second node we need to multiply that by two because we need to also place it after our middle node because we have three nodes same applies for right up and down now moving forward here we have our check movement frequency we have explained this so we are adding to the counter delta time when the counter is greater or equal to the movement frequency reset counter move is equal to true this happens in the update function in the move function we are getting the delta position meaning the direction where we are moving so we are moving by using delta position which is our array that we create right here and we are casting to an integer the direction if the direction is for example or the value of the direction is 2 that means we are moving to the right side next we are getting the parent position which is our head body position and we are storing the previous position now first we need to start moving the main body which is the main body of our snake the top parent holding all nodes and we're going to move it by using or setting its position to be equal to its current position plus the delta position or the direction where we are going so the direction position we're doing the same thing with the head body so head body's position is equal to head body's current position plus the direction where we are going now depending on if we are going to the left we are going to plus and the value for the left let me just see here the value for the left is the negative step length and 0 for the y so it will move it to that direction now we have to move all of our nodes we moved our head already that's why in i is equal to 1 because here if you paid attention the element or the first node is the node at element 0 which is our head node and we already set the head body or the head node we moved it so now what we need to do is move all other nodes that's why i starts at one and not at zero and we're going to move how many nodes we have if we have 100 nodes then we're going to use count which will be 100 so we will move 100 nodes now the previous position and we are getting that by using the node at the current i index in its current position this is the previous position the new position for that node is the parent position so the parent position that we had here for our head and now the parent position is equal to the previous position because the next node will be repositioned by using that same position and the outcome for that is if we go in our unity and if we hit the play button you will see how our snake is moving come on unity please have mercy upon us so if i hit the play button again you will see that the snake will move in the increment or using incremented values or if we go here the step length that is this is how many units it will use to two moves moving forward with our game we have the snake moving and it is moving in a certain direction the problem is that we cannot control that we cannot control the movement of the snake when the game starts so when we press any button we will not change the direction of the snake so in order to fix that inside of our player scripts folder we need to right click and create a new c sharp script which we are going to call player player input and this script we need to attach on our snake right here so drag and drop our player input hit apply so that this change applies to the prefab and double click it and open it in visual studio man i miss saying open it in mono develop but hey people change so now i'm using visual studio i have changed anyways moving forward what do we need for our player input the first thing is our player controller so we need a private player controller that we are going to call player controller of course this is because we need to inform the player controller that we change the direction where the snake needs to move now we are also going to create a private int horizontal which by default is equal to zero and vertical which by default is equal to zero as well we also need to create a public enumerations of public enum that i'm going to call axes and you can assume which axes do we have so we have horizontal and we have vertical because well we have two axes now inside of our start function we can get our player controller so player controller is equal to get component get component player controller component like this and this can be done in the awake function as well so you can choose to put this in the awake if you want to we can leave it at awake because we are only getting here our player controller because i like to initialize my variables in the awake function more than i like to initialize them in the start function now inside of the update the first thing that we need to do is that we need to get our player input but before that we need to say horizontal is equal to zero and vertical is equal to zero to reset their values and now in order to get that input we need to call a function that we did not create and i'm going to call it get keyboard input like this and right below here we're going to create it by typing void in the name of the function which is get keyboard input and now inside of our keyboard input we're simply going to say horizontal is equal to and we need to say input dot get axis raw and here we are going to say horizontal and for our vertical we are going to say vertical is equal to input dot get axis or raw and it is going to be vertical but we have an error what is this error if i hover over it says cannot implicitly convert type float to an integer the problem is that this returns a float you see this right here this input get axis raw returns a float so we need to cast it to an integer by typing in parentheses in in front of it and the same thing we need to do it right here so we are casting or converting this float into an integer so we have here our horizontal and vertical we do need to test if our horizontal is not equal to null then we need to say our vertical so vertical is going to be equal to zero like this and why do we why did we type this here well if we move horizontal we need to set vertical at zero and this is to prevent double movement so just to prevent double movement this is why we are doing it like this now in order to test this out we need to create a function that we well still did not create and this function let me just type this out here i remove this curly bracket now right below our get keyboard input we need to create void set movement and inside of our set movement we are going to move our game object but we are going to do it or call it right here right below our get keyboard input now inside of our set movement here we are going to say if our vertical is not equal to zero then we are going to call our player controller to change the movement but in order to change that movement we need to go here in our player controller right below our check movement frequency we need to create a public void set input direction which takes a player direction dir as a parameter now first of all in this function we need to prevent movement in the opposite direction what does that mean it means that if we are moving up we cannot start moving down we cannot start moving down or if we are moving left we cannot start to move to the right side and vice versa so we need to say here if our dir is equal to player direction up and our direction is equal to player direction down or if our dir is equal to player direction dot down and our direction is equal to player direction up you you see my point because we cannot move in the opposite side because if the let me quickly go here in unity and if i take my snake in the scene let's assume snake is moving in the right side like this we cannot press left and it will start moving left now we cannot do that we need to start moving up and then move left or down and then move left this is my point that's why we are testing this and we need to say here as well if d i r is equal to player direction dot right and direction is equal to player direction dot left or if d i r is equal to player direction dot left and direction is equal to player direction right so if this is true if some of these is true then we're going to hit return not a rect transformer whatever that was if one of these is true and notice we are using or so only one of these needs to be true so if direction is equal to or d i r is equal to up and d i r is the parameter so if d i r is equal to up and direction is equal to down then that is true we cannot move to the opposite side same thing goes for down and up right and left left and right but if this right here is not true then we are simply going to say direction is equal to d i r now direction is our own variable that we are using here let me just find it here it is our direction we talked about it in the previous video so direction is equal to the parameter that we put here now we also need to force move so we need to see here force move our game object or our snake now our force move we're going to create it so force move and simply in our force move we are going to say counter is equal to zero move is equal to false and move call our function to move the snake immediately without waiting for the next movement frequency threshold why well because when we press the button we want to move the snake right away we don't want to wait for the movement frequency threshold to kick in so that we can actually start moving the snake so right away when we press the button and this is what we are doing here so we are resetting the counter move is equal to false and we will call move to right to move the snake right away now going back to our set movement now if our vertical is not equal to zero we are going to say player controller dot set input direction and here we are going to test if our vertical is equal to one question mark then we are going to say player direction dot up colon player direction dot down what are we doing here what is going on well you see here we are testing if vertical is equal to null this essentially this code right here and let me just take this code so this code right here that we did and let me just put it right here so that we can actually see it this is what we are doing pay attention here so if our vertical is equal to one and we are using or questioning that or asking that with a question mark so if it's equal to one and that is true then the value will be up otherwise the value will be down this is essentially if as if we are doing this let me just put like this and this is essentially the same as if we typed if vertical is equal to 1 then our player direction is equal to player direction up so player direction up else if vertical is not equal to one then player direction dot down this is what we are asking with this right here so if the vertical's value is equal to one then we will set direction up which is logical because vertical that means that we will go upwards on the yaxis if and just go back what why is it taking me over there anyways otherwise if our vertical is not equal to one this is for this we are using this column so if it's not equal to one and let me just go back here so if it's not equal to one that means that we will use direction down for the value meaning we will go down now here we are going to say else if so else if our horizontal is not equal to zero we're going to do the same thing so we're going to say player controller playercontroller.set input direction and here we're going to say horizontal is it equal to one question mark and right here we're going to say playerdirection.right colon playerdirection.left it's the same thing except for our horizontal so it's exactly the same thing now we can test this out but we will have one problem and we will see what that problem is so if i go back here i am going to clear the console and i'm going to hit the play button and notice now we can change the direction see we can change the direction but you see the snake is moving like crazy as long as if we are holding our mouse or actually our keyboard i'm pressing w key asd or left arrow right arrow up you see the snake is moving like crazy like some crazy parasite that came from out of earth you know alien parasite and it's trying to get into you now we don't want this we don't want this kind of movement we have this movement because we are using input get axis raw now this is not something that we want so i'm going to comment this out we need to create another function that will get us the movement of the snake now here we're going to create a function that will return an integer and we're going to call it get access raw which takes an axis and i'm going to call it axis as a parameter and it takes this axis that we created this enumeration right here now right at the bottom of this function we are going to return zero if nothing happens because we need to return an integer but what we are going to do here is that we are going to test if our axis is equal to dot horizontal so we need to check for the horizontal axis then we're going to say bull left is equal to input dot get key down did we press a key down and that is going to be key code key code dot left arrow and ball right is going to be input dot get key down and this is going to be key code dot right arrow like this so we are going to get here the boolean for the left and the right now you can do the same thing for our w asd i'm using here arrows so pay attention because we will use arrows left arrow right up and down arrow on your keyboard to move our snake now you can do the same thing for w key asd and to move that that snake with those keys so here i'm going to say if left meaning if we pressed the left arrow key then here we are going to say return return negative one because we are moving to the left side if right then we press the right arrow key we are going to say return one like this otherwise we are going to say return no like this else if so else if our axes is equal to x is that vertical so we need to check for the vertical axis then we're going to say ball up is equal to input dot get key down and we are testing for key code so get key down and it's key code dot up arrow our ball down is equal to input dot get key down and key code.down arrow and same thing so we need to test it like this so we need to say here if up so if up we pressed the up arrow key we are going to return one if down then we are going to return negative one so return minus one otherwise return zero or return null i'm saying null for zero but actually it's return zero so this is what we are doing and let's go inside of our keyboard input and right here our horizontal is going to be equal to get access raw passing here access dot horizontal our vertical is going to be equal to get access raw passing our access dot vertical so it's vertical like this voila so if we go back now in our unity and if i press the play button and notice now if i try to move you see the snake i'm holding the up button so i'm holding these buttons that i'm pressing for the snake to move but the snake is not moving like crazy like you did a moment ago and notice here pay attention now you see the snake is moving and let me just go and demonstrate this so in our player controller if i uncomment or actually comment these lines of code out you will see how this helps us preventing the snake's movement so pay attention now if the snake is moving you see now we cannot move it like this you see it's moving to the left and now we're changing it to move it to the right or now down and now it's moving up you see we cannot move it like this we cannot move the snake like this because the snake then will hit itself and it will die because remember if the snake or in the snake game on old nokia phones or any snake game when the snake hits its own tail it is that gone kaput bam wow however you want to call it anyways it is dead the game is over so that's why we are preventing the movement in the opposite direction because now if i am moving for example to the left side i cannot press right to move so i'm moving to the right and i'm pressing left it's not working i'm moving to the left pressing right we're moving up pressing down it is not working we need to turn left or right and then move to that side where we want to move and also let's go and briefly break down all of these codes now this right here it's pretty clear this is clear what it is this right here as well here we are resetting horizontal and vertical every time after the input and here we're getting that input now pay attention here we are using horizontal and our function get axis raw and here get axis raw here horizontal here vertical this is clear as well so here when it's horizontal we are checking for get key down if we press our key code down for the left arrow or the right arrow we will store that in these booleans if we press the left or if we pressed right we will return negative one or one depending on which one of these we have pressed otherwise we will simply return zero same thing for the vertical axis if we press key code up or down this will trigger or it will set the appropriate boolean out of these two to be true if we press up we'll return one if we press down we will return negative one because down on the yaxis is negative up is positive on the left side for the horizontal left is negative right is positive we did this probably thousands of times in my tutorials on youtube channel in the ultimate game development academy and i talked about this thousands of times and this is basic math if you go to the left side on axis it is the negative side right side is the positive up is positive down is negative so moving back inside of our get keyboard input we are storing that value in the horizontal so it will be either one or negative one or zero and here we are checking if our value is not equal to zero so we need to check if it's not equal to zero because if it's equal to zero we are not moving so we are not moving if it's equal to zero so if it's not equal to zero it's either one or negative one if vertical is equal to one then we will set it up which means positive if it's not equal to one meaning it's negative one then it's down same thing for the horizontal and in our player controller we created set input direction we are preventing here movement to the opposite side and we tested this out a moment ago and when that happens we're setting the direction to our own or dir this parameter to our own movement direction and then force move the snake just so that it moves right away instead of waiting for the threshold of the movement frequency moving forward with our snake we can move it and we can control it so let us now detect collision on the walls and also add our collectibles now first of all we're going to start with our walls and if we go here in the level we have these walls right here so all of these walls and let me select all of them so we have top walls we have bottom walls left and right walls select all of these walls except don't select their parents so bottom walls this one right here left walls and right walls we don't need to select these so select all of the walls except for their parents as you can see i did not select top walls game object bottom walls left walls and right walls because we are using that as a parent to store all of these children so now when we have all of these we are simply going to click on add component and we are going to add a mesh collider so mesh collider component on all of these so that we can detect collision on them and i am going to tag them so click here on add tag and i'm going to create a wall tag i'm also going to create a fruit tag and a bomb tag so select again all of these walls except for their parents so select them except the parents and tag them with the wall tag and voila we're good to go and also for these obstacles here which are these as you can see so these right here if i turn them off so these also set their tag to be wall and i'm going to select the 11 level and hit apply so that this change applies to the prefab and if we go inside of our player controller and right here inside of our void on trigger enter in our ontrigger enter we can test if we collided with the wall except here for other i'm going to say target because i like to name this parameter target and i'm going to say if our target dot tag is equal to tags dot wall we are simply going to print here so print touched wall like this so we touch the wall and that is that this is just for testing purposes we will fix this later on do not worry about that so if i go back here in unity and if i try to collide with some of these wall obstacles pay attention in the console so now when i hit one of these bam we should see inside of our console that we have collided with the wall now of course we collided with the top walls but we are not colliding with the obstacle walls that is because we need to select them as well and attach a mesh collider on them we forgot to do that so if i hit the play button again and if i go through these walls that are obstacle walls bam you see touched wall touched wall touched wall when we go through all of these so this is working we are detecting collision between our walls and now moving back in our project we are going to import the bomb and the fruit now here i'm going to filter for the eyeball in our project and drag and drop the eyeball right here and i'm going to filter for the bomb and i'm going to drag and drop the bomb also in our hierarchy panel and inside of our prefabs i'm going to right click and create a folder and this is going to be our pickups so pickups where we are going to store the eyeball and the bomb and here actually i'm going to name the eyeball to fruit and bomb balls simply to bomb i'm going to tag the fruit with the fruit tag and bomb with the bomb tag i am also going to remove the animation from the bomb and for the fruit remove the animation as well i am going to change the scale of the fruit to 0.1.1 0.1 the zaxis is going to be 5.8 and we are going to attach a sphere collider on it and actually let me just take this fruit so eyeball this fruit right here and i'm going to name this game object here as fruit and this one i'm going to say 0.1.1.1 rotation i'm going to say 0 this rotation negative 90. and on this one i'm going to attach a sphere collider make it a trigger and let me just see where it is here it is this is our eyeball or our fruit that we are going to use as a fruit that is and i'm going to tag it here with the fruit tag come on select it where it is fruit not bomb what is wrong with me so tag it with the fruit tag and for the bomb i'm also going to change that so i'm going to say 0.2.2.2 the z position 5.8 for the bomb and here is our bomb we are also going to attach a sphere collider on the bomb and voila this is it so if we go inside of our prefabs and pickups i'm going to drag and drop the fruit and i'm going to drag and drop the bomb prefab if we go back in unity here if we touch the wall i'm also going to see or if our target tag is equal to tags so tags come on tags dot bomb we are also going to print now touched bomb because we are going to check if we touch the bomb now for our fruit we are going to do the same thing so we are going to say if our target dot tag is equal to tags dot fruit tag and here we are simply going to deactivate it so we are going to say target dot game object set active is false and we need to say create node at the tail is now equal to true because remember here we are going to create a tail because we picked up a fruit so we need to create a tail now first of all we are going to test if this actually works and then we will see how can we create that tail so first of all we are going to pick up the bomb and see if we are printing in the console that we are picking or picked up the bomb so bam we touch the bomb that is good we will end the game when we touch the bomb now we are going to pick up the fruit and when we pick it up bam it is gone but we need to create a node at tail or make the snake larger because we are we picked up a fruit so if i go back here in visual studio this now is true create note a tail is now true so when we go back here this is where we need to create that so first of all when this is true we are going to say create node a tail is now equal to false because we only want to create node at tail once we don't want to create it multiple times and if we continue what is the next thing to do is that we need to create a game object so we need to say game object and we need to say new node is equal to instantiate and we are going to instantiate the node prefab or tail prefab and we can say here new tail or new tail or new node actually new node tail prefab and we are going to instantiate it where where we are going to instantiate it using nodes and we are going to say nodes.count minus 1 dot position so position dot quaternion identity like this and let me just move quaternion identity here what are we doing here we know that in our instant sheet we need to pass a game object that we want to instantiate or create a copy out of that game object we need to pass a position and we need to pass a rotation rotation is not important quaternion identity zero zero zero what's important is the position notice here i'm using nodes and nodes count minus one dot position this is the last node in the nodes array that we are storing here and remember in the beginning we stored three nodes our head our middle node and our tail and i said every new tail node will be stored inside of this nodes array because we need to keep track how many do we have and if i go back here what is the next thing to do we need to say new node dot transform.setparent and we need to set our own transform and here we're going to say true you see here world position if world position stays true the parent relative position scale and rotation are modified such that the object keeps the same world space position rotation and scale as before so when we say here true it will simply make this node keep the same position same skill and everything relative to its parent and here we are simply going to say nodes add and we are going to append to it new node dot get component and we're going to append the rigidbody component like this because i said we are going to add every new node inside of this array now we can see this the best way to see this is if i copy and paste a little bit or multiple of these fruits so we can have one fruit here i'm going to duplicate it one fruit here one fruit here for example one fruit here and one fruit here just so that we can see that our snake is growing larger so now we have three of our snakes so three parts of our snakes now we should have four you see now we have four and five you see the snake is bigger and notice now again picking up these you see the snake gets bigger and bigger again picking one one more one more the snake is bigger and the bigger we picked up all of these you see we picked up all of these notes and you can see that every single one of those notes or actually those fruits are being appended at the end of the snake because we are using nodes and nodes count we are getting the element that's at the count minus one which is the last element inside of that array so the last element inside of that array we are getting that and we are positioning we are positioning that node at that position so if the last node let's say if i highlight or use my highlight tool so this is the head of the snake this is the node this is the tail and this is another tail so let's say we eat a new node or new fruit here so we eat it and now we want to append it to the snake so the snakes position or the snake grows larger so this node needs to go here that's why we are using this right here nodes count so this right here position which is the last position count minus one it's the last element in the array which is this one and its position so we are using its position to set it so append that right here so append it right after that position this is what we are doing and basically that is that what we can also add here is that now we can say if so here we can say or if our target dot tag is equal to tags dot tail tag so if we touch our tail so you're also going to say print snake touched tail and if i go back here we need to make sure that our snakes last part has a tail you see here it needs to have a tail tag so add tag and here we are going to say tail tag so select it and this one will have a tail tag hit apply and if we go back here for our snake if i select it and the tail that we add here this tail also needs to have the tail tag because the snake will die if it hits itself and notice if i pick up some of these fruits and when we pick it up the snake will get larger and larger so then we can touch our own tail notice now we touch our own tail you see here snake touch and i spell touch with touch so snake touched tail you see we touched tail and bam we should die when we touch our tail but we will do that later on don't worry about that the point is that this all is working we can remove all of these fruits so let me select all of these fruits we can remove them we are only left to create our gameplay controller who is going to spawn all of these fruits in our level so on and so forth and also create audio effects but before we end this video i'm also going to create our ui quickly because our ui is not going to be that large so if i go here in our game our canvas is going to be set on screens play screen space overlay i'm going to scale it with screen size 180 by 720 and i'm going to match the width and height equally i'm going to take the image this is going to be our icon so snake icon and i'm going to set the anchor at the top middle i am going to set here for the source image this snake portrait or however we are going to call it the width and height is 8080 for this snake the position x is negative 99 and the position y is negative 5 8 like this and the next thing we are going to add our separators so i'm going to take here i'm going to actually rename this one as well ui canvas i'm going to hit here right click and ui text now this text is not going to be a child of our snake icon it is going to be a regular text i'm going to call it separator separator and i'm going to simply add this line to separate and we will see what we will separate i'm going to set the font at ariel and let me just resize it i'm going to set the anchor at the top middle the width is 29 and the height will be 135 the position x will be negative 32 and the position y is negative 49. the scale or the font size is 103 and i am going to set the color to white and voila this is it and actually we can move it just a little bit down something like this yeah this can do so negative 62 negative 62 can do and voila this is our separator now i named it separate torn it's separator and we're also going to create a score so here instead of separator i'm going to call it score now for the score top anchor the width is going to be 303 the height is going to be 83 the position x is going to be 1 5 1 and the position y is going to be negative 60. and here i'm simply going to say score like this 0 and let me just find it where it is so where is my score where did i put it yeah here it is here is my score and let me just resize the font something like this so the font can be 50 here in this case i'm going to set the font at 50 and maybe just move the score a little bit down negative 72. so negative 72 for our score now the font for our score is going to be our open sun's regular open sun's regular here it is and voila that is practically that this is going to be our score or maybe just move a little bit up so negative 6 9 this works perfectly so this is our ui here is where we are going to keep track of the score this is our snake image this is the separator between the snake image and the score not that fancy because the point is not to create fancy ui the point is to create our snake game also make sure that you attached or dragged and dropped the bomb inside of our pickup so drag and drop the bomb and the fruit to make them prefabs let us wrap things up starting with our gameplay controller so in the scripts folder and helper scripts i am going to right click and create our gameplay controller like this and i am going to right click here in the hierarchy and create an empty game object which i'm going to name gameplay so it's gameplay controller so gameplay controller and i'm going to attach the script on the gameplay controller what do we need well as always we need a couple of variables to start with and let me do my thing so let me tag the class give a little bit of space the first thing we are going to make our gameplay controller an instance so public static gameplay controller instance like this and for our instance right here instead of our update i'm going to click create create make instance and inside of this one i'm simply going to say if instance is equal to null meaning it's not pointing anywhere i'm going to say instance is equal to this and voila we are good to go i'm also going to call this function in the awake function as always so this is nothing new we did this probably thousands of times so far before moving forward i am also going to type here using unityengine.ui because we need to get ourselves a reference to the text displaying the score to our user and we are going to display the score every time our snake eats a fruit so here we also need a public game object for our fruit pick up no this is not a pickup truck it's simply a fruit and we also have a bomb pick up like this now also we are going to have a private float this is going to be our minimum underscore x which is equal to negative 4.25 f we are also going to have maximum x which is equal to 4.25 f now the minimum is negative and the positive or the maximum is positive minimum y which is equal to negative 2.26 f and positive or maximum y which is equal to 2.26 f and also our private float z underscore p o s which is equal to 5.8 f what is all of this here what did i just type am i going crazy or not well first of all we need to make sure that we are going to spawn our fruits and the bomb between our game objects here let me just find the level here it is so between when i said between our game objects i meant between here and here so as you can see this point let me just take it again so this point here is four point oh let me just find it it's negative 4.25 so negative 4.25 which is somewhere around here and this one is positive 4.25 which is somewhere around here how did i find these values well i just did as you just saw i took this fruit or this eye and i positioned it here and saw which position that was then positioned it here and saw which position that was did the same thing for y axis and voila this is how i got them now our fruit and bomb in the scene we can remove them because we are going to drag and drop if i select the gameplay controller we will go in prefabs and pickups and we will drag and drop these from our prefab so fruit pickup will go here and bomb pick up will go right here so moving forward or going back here and z position is same as for all of our game objects you can see snake has z position 5.8 so does every other game object that we want it to be visible so moving forward we also need a private text which is going to be our score text and we need a private int which is our score count now inside of the start function we are going to say so void start and here we are going to say our score text is equal to game object find the game object with the name score get the component text from that game object like this and we are good to go now you need to make sure that the name of that game object is indeed score so in our ui here so ui canvas here it is score so make sure the names match up or otherwise this will not work now we are going to create functions that are going to start spawning our pickups be that a bomb or our fruit so first of all we are going to create an i enumerator a co routine as you might assumed and we're going to call it spawn pick ops like this so start spawning pickups and here we're going to say yield return new wait for seconds and we are going to wait from random dot range between 1f and 1.5 f so between one second and 1.5 of a second we're going to wait and then we will spawn either a fruit or a bomb and we're going to do that using a random value so if random range from 0 to 10 is greater or equal to 2 then we are going to instantiate a fruit so here we're going to say instantiate and we're going to pass here our fruit pickup at the position new vector 3 like this and for our x we're going to say random.range from minimum x to maximum x this is for the x position for the y position random dot range from maximum or minimum y to maximum y and our z position so zpos comma quaternion identity and we are good to go so let me just put quaternion identity right below here and voila we are good to go this is for spawning r and actually i'm also going to put new vector 3 right here and put this right here so it works perfectly like a charm so instantiate the fruit pickup on the random range between minimum x and the maximum x minimum y and the maximum y and i've explained this it will instantiate our game objects so i'm going to take it like this and zoom in on our level just a little bit something like this and i'm going to take the highlight tool just so that i can demonstrate that this is the minimum x and this is the maximum x value minimum or maximum y and this is the minimum y so between random range between minimum and maximum that's this range so between here so between these two values here it will spawn it on the xaxis and on the yaxis it will spawn them between these values as i explained a moment ago how are we in stenching or how did i get those random values so this is if random range is greater or equal to two because there is only twenty percent chance that we will spawn a bomb if that happens then here we are going to copy this line of code and here in the else statement instead of fruit pickup we are simply going to say bomb pickup and voila that is that but we need two more functions because here above we are going to create void start spawning like this so start spawning and here we're simply going to say start co routine and we are going to start our spawn pick up school routine which will start well this co routine but here inside of this co routine we are also going to call invoke and we are going to invoke this function like this so you see here we are invoking this function this one right here that will call our co routine and again over and over and over and over until we create here a public void spawning and in our cancel spawning we are simply going to cancel so cancel invoke passing here the start spawning invoke co routine that well we are going to cancel and when we start our game right here in the start function we are going to spawn it after 0.5 seconds so 0.5 of a second and we will start spawning and spawning and spawning now before we test this out and see if this actually works and it will work we are going to go here and we're going to create a public void increase so increase score and here simply we're going to say score count plus plus and our score text dot text is equal to score column plus score count and this right here will be called inside of our snake so when we go in our player controller when we pick up a fruit you see here we are going to call our gameplay controller so gameplay controller that instance that increase score just like that so simply call it to increase the score and by the way notice here if i go and run our game i'm going to hit the play button so now after 0.5 of a second you see here we have a bomb we have a fruit so here i'm going to pick up a fruit another bomb fruit right here let me try to pick it up so fruit here now one thing that you are probably noticing is that these game objects are staying in the scene they are not being deactivated until we pick them up or until we touch the bomb and eventually we will run out of places where we can walk or move because of the bomb now because of that we need to go in our scripts and here i'm going to create a new folder for our pick up scripts and simply here i'm going to create the activate pickup so csharp script deactivate pick up inside of this script we are simply going to create two functions or actually one function called void the activate which is going to do what game object set active so that set not gameplay controller game object and this is what i hate so visual studio crashed on me for some reason so we need to wait for it to reload again when this happens i simply close visual studio this happens also with mono develop i hate it when this happens it simply freezes it will not take into consideration mono behavior monodevelop whatever but now it works because now you see i can call our game object set active is false and in the start i am going to invoke our deactivate after random range so random dot range between three seconds and six seconds so between three seconds and six seconds we are going to deactivate our game objects now as we did or did we go here in our gameplay controller and we called here increase score actually i did not even tested that out i didn't did not see we were looking at our fruits but pay attention now so pay attention to the score when you start picking out fruity c score is now one and let us try to pick this up and now score is two and again our fruits and our bombs are not being deactivated because silly me select them right here in the prefabs and attach the deactivate pick up script so if i hit the play button now and pay attention to the score again so when we start picking up roots we will start also counting the score so now score is one score is two and you see the fruits are disappearing i almost cut that one on did i cut this one i think i did okay this one i missed four okay this one i missed five and you see it is working so we are counting the score everything is going perfectly well what we need to do now is actually stop the game when we hit one of these so either wall bomb or tail so when we hit one of these we simply what are what we are going to do is we are going to say time not tone but time that time skill is zero we are going to stop our game then you can restart the game by using your code or either press the button and restart it because i'm not gonna go we did this already in mary's of times restarting the game we created menus i do this extensively in the ultimate game development academy so you have all of the resources you need to create your own mechanism for restarting the game so on and so forth because what i'm going to do now is go in unity and i'm going to hit here or double click and create an audio manager script and going back in our scripts folder and helper scripts right click i am going to create a c sharp script which i'm going to call audio manager and attach it on the audio manager game object so simply drag and drop it on the audio manager and what do we have in our audio manager well first of all let me just tag the class give a little bit of space we are also going to make him an instance so we are going to say here public static audio manager instance instance like this and here we are simply going to create void make instance so if instance is equal to null we're simply going to say instance is equal to this in our awake function we are going to call make instance and that is that this is for our instance and we are also going to have our public audio clip for our pick up sound and for our dead sound and for these two we are simply going to have a public void play why are you correcting me so public void play underscore pick up sound like this and we are going to call here audio source play clip it point the clip is pick up sound at point transform that position and i'm going to duplicate it paste it here this is going to be play dead sound and simply here instead of the pickup sound we are going to paste our dead sound and it's simple like that and for our sounds go in the audio manager and for our pickup so pick up sound is going to be our eat fruit sound and for our dead sound we are going to have game over sound too so game over sound number two this is what we have for our sounds moving back in our script for the player controller here when we increase the score we are also going to call our audio manager dot instance to play the pickup sound and here we are going to call our audiomanager.instance to play the dead sound practically we are done with our game if i go back here and i'm going to pump up the volume so that we can hear the sounds so now when we pick up our fruit pay attention let me just try to pick one of these up it's like an eating eating sound you see i had to stop there because i was about to pick up a fruit and again and again and again and we can pick them up and notice when i hit the wall the game is stopped we don't spawn anything anymore you can we did create here a function in our gameplay controller so we created this to cancel our spawning we did not call it because we're using here time scale in our gameplay controller when the time scale is set to zero instantiate will not work but if you want to implement something else you can call cancel invoke you can stop the game with the boolean whatever you choose and that is that basically so in our gameplay controller we did nothing new we just created here our instance we attached our pickup prefabs i've explained how i got these values this is the text for the score and the score count here we simply have a co routine that based on the random value will either spawn a fruit or spawn a bomb invoke spawning which will call this function again to start the same co routine increasing the score here for our audio manager simply playing the pickup sounds and the dead sound by using play clip at point we created also a script to deactivate our pickups after three or six or between three and six seconds here for our player controller simply we called those functions to play the sounds and to display the score and we explained everything else in the previous videos so again i'm going to hit the play button so that we can see this in action one more time so here is one of our pickups i'm going to try to die this time by eating or touching my own tail so i've ate this come on come on come on this and this and this this also oh i missed that one yeah i died now you see here you see how he died we should have passed this here the reason for this is because my collider for my eyeball or this one the dude the first the snake's head is too large you can resize it so the radius is set at one or actually for this snake this dude right here excuse me so the radius is set at 0.11 you can resize it let me just go in the scene and search for the snake you can resize it to something like 0.09 which is smaller so if i hit the play button so now our collider is smaller we can still pick things up so we can eat here the fruit as you just saw so we can eat the fruit but when we try to pass our own tail then it will work because let me just try to make the snake a little bit bigger to demonstrate that so we ate this we ate this and let me just ate this or eat this as well and let me try it okay now it works you see now we are not dead by going right near our tail but we will be dead if i do this and bam we have died again this is our small 3d snake game this is how simple it is if you had this idea when the nokia phone came out probably we will be millionaires but hey we did not came with that idea first so just learned something from this tutorial in this game that we have created fi here here from awesomedudes.com i will see you guys in the next video