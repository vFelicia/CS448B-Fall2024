clean code functions part two cing code is readable reusable and refactor software in JavaScript this is part two of how to write clean functions in JavaScript special thanks to Ryan dermont for a lot of the code on this video check the description for his original article on the topic you should always avoid side effects a function produces a side effect if it does anything other than take a value in and return another value side of X could be many things including writing to a file or modifying some Global variable here's an example so we have let name equals boars function split name into first and last name name equals name.it if we run the function and if we console.log the name we're going to see um the the split name up here but look it's changing the the global variable name to split up so now we cannot access the initial variable anymore so a better way to do it would be like this and now if we run that you can see it's consoling that log boars and then it's consoling log the split barms here because we still have the original name and now we have the new name because this function did not change a global variable it just gave back one one value okay the next thing is that you don't want to write to GL Global functions uh polluting globals is a bad practice in JavaScript because you could class with another Library so an example of this is if you're trying to extend one of javascript's native array methods so for instance it's not really good to add to this Global function AR raise the global function so we we don't want to to just add diff to the array prototype a better way would to just use classes and extend the array Global so I'm going to make this into a class and there we go we just extended the array Global next thing is that you should favor functional programming over imperative programming now JavaScript is not a completely functional programming language like some languages but functional languages are cleaner and easier to test so let me give you an example of just how you can um change something from imperative to functional so this is an imperative programming section so we have this constant where we are going to have the the name and the lines of code for each for each person and then we have let total output equals zero and then we're going to have a for Loop here for let I equals 0 I is less than programmer output. length i++ total output plus equals programmer output um index i. Lin of code so it's it's adding up all the the outputs of lines of code so a way we can change this so it's more functional is we're not going to have a for Loop here we're going to we're going to change this to an initial value and we're going to take out this for Loop okay instead of the for Loop we have just this one line con total output equals programmer output we're going to map this to the lines of code and then we're going to reduce all those lines of Code by putting all together the X Plus lines of code we're going to start at zero so using map and reduce helps make your code more functional next thing is encapsulate condition so here's the bad way to do it where we're just going to have this it's going to say if and there's going to be a conditional here so a better way to do this would be to um take this out and I'm going to make this into a function called should so now the conditional is is a function fun so that makes it easier to read next up avoid negative conditionals here's the bad way to do it we're see is Dom node not present node and then we're going to say is not this means not is D node not present so it makes more sense is just to take out the knot and then you don't have a negative conditional the next one sounds pretty crazy at first but it's just avoid conditionals Al together the way you can do things without an if statement or conditional is to use polymorphism to achieve the same thing and the reason why you want to do that is because functions should really only do one thing so if you have an if statement then you're doing a lot of things with your function so for instance if I have this class airplane uh get cruising altitude we're going to have a switch conditional switch if so if the type is 777 we're going to return um this but if it's Air Force One we're going to return this but if it's the Cessna we're going to return this however there is a way we could do that with polymorphism so I'm just going to leave the the old way of doing it and then put this new way right below it so we're going to have the class airplane but then we're going to extend it class Bo 77 extends airplane class um Air Force One extends airplane class Cessna extends airplane and then we have a different get cruising altitude function for each um each class of airplane so instead of using the switch statement we can use polymorphism and then we don't have to have the switch statement so that's just an example of how you can avoid conditionals to make your code more readable and the last one I'm going to talk about is to remove dead code this is pretty straightforward if there's code that you're not using anymore just remove it so just this example um we're only using this new request module we're not using the old request module so we can just take it out you're always going to have um you're always going to have it in your version history if you still need it so there's no reason just to leave it in there just in case thanks for watching my name is Bo KS don't forget to subscribe and remember use your code for good