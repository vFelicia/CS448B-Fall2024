in this course you will learn how to create a full stack instagram clone using flutter and firebase ravon is a great instructor and will teach you step by step how to create this full stack app let me show you the demo of the app first so as you can see we have our instagram feed over here we can either light the image let me show you the like process and this is the animation we are going to build with flutter and we can dislike it and you can see on all the three screens that if we like the uh image it shows up on all the three screens real time this is powered by stream builder and flutter and firebase firestore now i can even comment on any post so let me show you the comment i'll go in the comments as well to show you that it's real time so i'll comment nice pick and i'll post it and you can see over here that nice pick shows up now you can even go back over here in the search and you can see our images showing up we can even search for a user i'll show you the user the name of a user is naman ranavat so i'll just type numan and it shows up this is powered by firebase's search query now if i go where i can either follow this user or i can unfollow you see the like and this you can see the counter going up and down i'll keep it followed now if i go back over there you can see that this is maintained and the user is showed as uh followed i can even go to the another user and if i go to my own profile you can see that i get the option of sign out then i can even upload an image so i'll take a photo i'll choose it from gallery if i do it on my real android device which i'll do in a while you can see that we can take a photo from our own gallery i'll take this picture i'll write a caption of the scenery is awesome and i'll post it you can see this indicator showing up as long as it is getting posted to our firebase database and you can see that our image shows up at the right time in the real time and if we go over here we can see this now keep a track on this if i click over here you can see a little of animation happening over here we're going to build that as well and the next thing i want to show you is the profile screen and this is the number of posts the following and everything so what i'm going to do is sign out from here and you can see that we get signed out immediately and only from one device and not all the devices and we can again you make use of the authentication now i'm going to login and put in the password and you can see there is no user with this email we have proper validations with firebase as well so this is what we are going to build in this app the prerequisites for this tutorial is to have a basic knowledge of flutter and dart no knowledge of firebase is required not even knowing what firebase is actually we're going to go step by step and learn everything about firebase and we'll also uh you make use of a provider if you have a bit of knowledge with provider it will be a good thing if you don't that's no problem you're going to have a look at that and i'll explain it to you as well and we're going to have a cross platform app so you can see over here this is a completely responsive build now let me increase the width of this app this website over here and you can see it has a different layout altogether because instagram on web looks completely different it has the different background color it has a same app color and it is easily accessible as well it's similar to our app right so we're going to build completely responsive ui as well let's get started with the code alright so the first thing we need to do is open our terminal and over here migrate to our desktop and after that we run the flutter create and after that we need to mention the name of the folder we need to give so we can name it instagram flutter and make sure to use underscore over here and not uh you know a hyphen or something because it will give you an error and after that is done just click enter after this process is completed you can just migrate to your instagram flutter folder and you can open it in vs code by doing code and after that putting a full stop and clicking enter this will open in vs code and uh what i want to do now is run this boilerplate code on our ios simulator so that we know it's working pretty well like the boilerplate plate code is working so i'm just going to run open dash a and pass until simulator so this will open uh like create a simulator for us and this is working now you can run the command flutter run to see if it's working but what i like to do is in this main.dart file go over your run and run without debugging because this gives us the option to hot reload and whenever we save a file it will start hot reloading which is a pretty cool feature in my opinion now in the meantime what i'm going to do is i'm going to remove all the boilerplate code but i'm not going to save the file so that we see the changes that are happening and i'm going to remove this theme data from here as well and i'm going to name the title as what the title of our app is going to be i'm going to name it instagram clone and over here i'm going to pass in debug show checked mode banner to false the banner that shows up in the top right corner will not show up if we do this and let our app finished by that time see you when this app loads up all right now our app is loaded and if you see if we click over here our counter app is working pretty well so now i'm going to remove this text over here i'm going to replace this class that we have removed and going to replace it with the text let's say let's build instagram so this is going to look very ugly but let's see and it's giving us the right output so uh the next thing we want to do is add theme to our app what we can do is pass the theme over here and what i want our app to how i want our app to look is you know have a dark theme but i just want to copy everything that flutter provides us so there is one theme data and if we put in dot dark it will give us all the features you know the flutter has built in in this dark so it will use all the colors of dark and we can just save it and if we wrap this home with the scaffold so that we see a good output and not a container type output we should see something cool happening and we can see that our app has turned a fully dark mode but i don't want my app to you know look like this i want its colors to look a bit different like the background color over here so what you can do is go to this url over here github.com on our instagram flutter clone and i'll mention this link in the description below you can just copy all of this these are just colors for our app i don't want to waste time writing all of these colors and we're going to create a lip folder a utils folder over here so that it contains all our you know utilities and i'm going to name it colors dot dot file and i'm going to paste all of these colors now you can see we have mobile background web background mobile search blue color primary color secondary color so what i want to do is keep all the methods like whatever dark has whatever color dark has i want to keep them and i want to so i can do copy with and i just want to change the background color over here so what i can do is scaffold background color and i'll turn background color to mobile background color now if we go over here we can see that we're getting a good output a changed background color that's what we wanted now the next thing we want to do is create a responsive layout whenever our screen size of the browser extends a certain width it should display you know a web screen layout so to say and uh if not then it should display a mobile screen layout so what i'm going to do is create another folder over here called responsive and in that i'm going to create responsive layout screen dot dart and over here i'm going to import material package for now it's going to be a stateless widget later on it will become a stateful widget because of the init state we are going to use in future so uh over here i want to return a widget named as layout builder this helps in creating responsive layout basically it will give us a builder function which will return to us a context and constraints this constraints is a very useful thing for us it will give us various methods like if i do give constraints dot it will give us max with max height minimum height minimum width so it will give us the constraints of our app basically and for now uh since we are going to use it over here which is basically a parent uh we'll have the maximum width of our app so we can do mac constraints dot maximum width and if it's greater than a certain height so what i'm going to do is create a variable i create a file over here dimensions dot dot and over here first of all let me import material package because of the several stuff that's going to come in later and over here i'm going to give a web screen size of 600 beyond this size our app will start looking like a web screen layout so if the constraints.max width starts to extend this a 600 uh variable that we have given over here it it should display a web screen layout right so we'll just pass in web screen and if not we need to pass in a mobile screen layout now this value over here can be changed easily so that's why i've created it in an external file you can just pass it over here but uh we are going to use this web screen size a lot in the future to make further responsive layouts so just keep it over here or else you'll have to keep taking 600 and move it everywhere which is not really a good coding practice so i want to return a web screen so what i'm going to do is call a widget i'm going to accept a widget from our constructor over here and i'm going to call it web screen layout and another widget which is going to be the same thing and i'm going to name it mobile screen layout and i'm going to require this via the constructor web screen layout and required sorry required this dot mobile screen yeah so i've accepted this from our constructor now i just want to return this so i can do return web screen layout else what we can do is return a mobile screen layout cool now we can just take this widget from here and replace our home with this and we need to import responsive layout screen dot dart and we'll have to pass in a mobile screen layout and a web screen layout so that is what we are going to make over here a mobile screen layout and a web screen layout cool now we for now it we are going to uh you know create a stateless widget in both of them so i can just pass in mobile screen layout and i'm going to copy this from here and paste it over here call this web screen layout and we can paste it over here as well i'm going to return a scaffold which will have a body of text this is web and let me just center it as well so that we can see and i'm going to format this document over here i'm going to do the same thing i should have copied it earlier i forgot to do so and i'm going to pass in this is mobile i'm going to take this widget and pass it over here mobile screen layout and over here a web screen layout now all of this is going to be a constant widget since we are not going to have dynamic values passed into the constructor so yeah we can just refresh our app and see we are getting this is mobile over here which is the correct output now to run our app on chrome we can just do flutter run dash d chrome flatter run to run and dash d for debug and then we want to debug chrome version so we can just do this right now let's wait for our chrome to load up as you can see over here we are getting this is mobile over here which is the correct output actually now if i increase the width we should start seeing this as web and this is exactly what we are getting so that means our responsive layout widget is working pretty well cool now that we have a responsive layout the next thing we want to do is make a connection to our firebase but before doing that we need to install some packages and these are the packages we'll need firebase core cloud firestore firebase auth and firebase storage let me install all of them and i'll tell you the users of all of these packages in our app so uh what i like to use and uh not to put all of this manually in pubspec.yaml file i instead what uh what i prefer instead is you know using an extension whose name is pubspec assist so you can see over here if we just do command shift p you can see pub spec assist popping up and you can click over there and put in the name of the package you want to add i want to add firebase code i'll click enter and this will automatically add a file in my pubspec.yaml file with the latest version of the same dependency you can see over here now uh like this we are going to add multiple packages like cloud firestore make sure to add cloud firestore and not firebase firestore which is a deprecated dependency we need to add firebase auth next then we need to add firebase storage and these are the four packages that we need to install and uh while this is happening the next thing we want to do is go to console.firebase.google.com i'll mention the link in the description this is where uh you need to create a project i hope you have your gmail account already then we'll click on add project and our project name will be instagram tutorial for me you can just write instagram clone since i already have a project named instagram clone now we're going to disable the analytics for this project since we don't need them and i'm going to create the project this will create a project for us now since we added some dependencies in our pubspec.yaml file we need to stop all of this uh our app running basically and we'll not run it again because we need to make some configurations before you know having them we'll have to make some more configurations in the ios folder and everything for our ios so we won't run our app now the next thing i want to do is go to the authentication tab i want to click on the get started button and over here i want to go to this email or password provider and i'm going to enable the email and password now if you know how to add any other you know sign in method like google signin or phone authentication you can just click over here again add new provider and do google facebook phone anonymous sign up as well github there's a lot to do with this the next thing we want to do is go to the firestore database over here we need to create a database and i'll start it in test mode and click next i'm going to select a location that is near to me you can select us europe anything i'm going to select south east asia over here and click enable our firestore has loaded up now we'll go to the rules over here and we're going to make some changes over here i'm going to remove all of this rules that we have created and i'm going to publish these rules so that anyone uh can read and write in this database we're not going to look at the rules in this tutorial if you want i'll mention the resource from where you can look it up and make a rules on your own then we're going to go in the storage part we're not going to use realtime database in this tutorial we're going to use firestore database and over here in the rules you can see that of storage has been set up now i'll go in the project overview again and i'm going to click on ios app first that's what i'm going to set up now i need the app bundle id for this project so you can go over here you can right click on the ios folder and click on open in xcode this will open your ios part of the you know ios build of your app and open it in xcode now you can just click over here in the runner and you'll find bundle identifier over here i'm just going to copy this go over here and paste it i'm going to call this ios app and we're going to register this app now we need to download this google service in 4. list file and move it to our application so let this install for me i'll go in the downloads over here and you can see what i'm going to do is drag this to our runner runner folder and make sure to tick this add to targets runner and finish and this should be in the runner and run a folder of your ios folder now you can just go back next we don't need to follow this step we can click on next again this step is not needed we can click on next and we can continue to the console now after having that we need to close this i'll close this as well now i'm going to migrate to my ios folder over here and i'm going to run pod install and i'm going to wait for this to happen and as you can see that our request of pod install has not worked over here this is because we need to go to the pod file over here we need to on uncomment this line and we have to change this 9.0 to 10.0 and save it and then we need to run pod install and this should work for you and in case if it doesn't work for you i'll mention a stack overflow link in the description below generally this command for if you're on a macbook air m1 should work arc dash x86 underscore 64 pod installed repo update and this should work for you cool now that we have that we need to run this over here and see if it's working we're going to run that dart and flutter as you can see our app is loaded up and ready now we need to add in a firebase and initialize firebase in our app so what i'm going to do is add async tag over here and i need to avail firebase and you can see that we can import this by firebase core and we can put in firebase dot initialize app and with this our app widget will get initialized i'm going to close this and run it up again after this is done we need to make configurations for our android app now in the meantime i'll tell you about you know why we chose to use firebase in this tutorial this is because firebase has a lot of products used as you can see authentication firestore realtime database storage hosting functions machine learning kit and we can even make predictions of a user alpha beta testing cloud messaging inapp messaging there's a lot to do with a firebase and this is why we've chosen this and also one of the reasons is that firebase and flutter both work really well and in sync with each other also the reason is because you know flutter has been provided by google along with firebase which is by google itself so uh they work pretty well now you can see that we are getting uh an handle exception null check operator used on a null value this is because uh our firebase have has been initialized even before we made sure that the flutter widgets have come in so what we need to do is call in widgets flutter binding dot ensure initialized this will in make sure that the flutter widgets have been initialized now we can stop this process and start it again now let me explain you the uh now let me explain you now let me explain you the now let me explain you why we have chosen to use these uh dependencies firebase core firebase or firebase storage cloud firestore what their users are basically cloud firestore allows us to save our data data in our database in the firestore database over here where we are going to store user information posts you know all sorts of stuff then we have a firebase auth which is basically for authentication as we can see sign in method and allows for various signin methods then we have firebase core this is for the connection with our flutter app and uh lastly we have firebase storage this is to store images in our app as you can see now we can see that our app is loaded and we're not getting any error the next thing we want to do is you know i'll stop the process for ios now we're going to run the process for android now we can go back to the project overview over here add app we're going to add an android app now to get the android package name what you can do is close this ios first go to the android folder in the app folder and you can go to the build.gradle file and you can see in the default config application id and you can copy this and paste it over here i'm going to name this android app now we don't need to pass in a debug signing certificate because this is usually needed when we need to do phone authentication or google signin authentication so i'm not going to pass in that and then we're going to register our app then we need to download the google services.json file pretty similar to the google services dot in google services info.list file that we had in our you know uh ios we can take this go to our app over here now make sure to put this in the app folder and not the src folder take this and drag it to your app folder over here cool now we have the google services info this basically contains all the information in our app like the url of our repository all the config stuff basically then we can click on next now as you can see we need to add this in our project build.gradle file so we can go over here and instead of you know manually just finding a file what you can do is click command p and type the name of the file you can see android app build.gradle but we need the project file for now we can just click over here and we need to add this in the dependencies so i'm just going to add this over here cool now we have this setup for the build.gradle file now we need to go to the app level build.gradle file so we can go in our app build gradle file and you can find this in the app folder if you want to do it folder wise now we can copy this line from here apply plugin com google this line over here and we need to paste it down over here cool now i'm going to take all of this from here cancel it and i'm going to the main.dart file and you're going to click on next and continue to the console i'll take this opportunity now to tell you that uh i'll go to the android manifest.xml file over here now make sure that this package over here is not com.example.instagram flutter if you need to upload it to your play store because com.example files are not allowed you need to replace example with anything since i'm not uploading to play store i've given it the name of example but you need to change it i'll mention a link in the description uh from where you can follow and change the name of this package in your app successfully cool this is a setup now let me run our app now you can see that we've gotten an error over here the reason is over here that flutter has given the minimum sdk version as flutter dot minimum sdk version we need to replace this with minimum sdk version 19 and this still won't run since we need to make another configuration which is we need to enable multidecks and we can do this by multitext enabled true and we can save this and we need to rerun our app again welcome back our app has loaded up and it's not giving us any error and if we see over here it shows this is mobile which is a pretty good thing our android setup is done as well the next setup we need to do now is for the web what i'm going to do is run like run this on our web as well and we can just run it using flutter run dash d chrome we have looked at it before our web has loaded up but the we are getting some errors over here now if we inspect the errors over here it's saying firebase options cannot be null when creating the default app basically we have initialized this with this we have initialized for our android and ios apps but not for our web app our web apps usually require an options tag over here and which which is of the type firebase options we have not done that so if we put in options over here and put in firebase options you'll think that this would work but that's not the case because then our mobile apps would fail running so instead what we need to do is we need to run this when it's in the mobile stage and other thing when it's on the web stage so what we can do is put an if condition over here if and to check which platform we are on we can just do if k is web and if it's web we need to do other part of the you know initializing of our app and if it's mobile we need to do this so i'm going to paste this in both the places and we need to pass an options parameter over here now our options is going to be of the type firebase options and you need to pass in some stuff over here but before doing that we need to add an app over here which is our web app we are going to name it web app we are not going to set up firebase hosting for this project we are going to host it on a different server a different hosting platform not firebase but you can surely check it out and click on learn more if you want if you are interested now we can register our app over here now we need to add this firebase sdk we don't need all of this stuff over here so i can just you know copy all of this stuff i'll copy this api key don't try to you know copy all of this because i'm going to delete this project as soon as this app gets over then we need to pass in the app id this is our app id then we need to pass in messenger messaging sender id and we need to pass in a project id and i want to format this document after doing so i'll again put a comma so that i can format this okay now we have this but we need to pass in an extra parameter firebase options has a lot of parameters but we need to pass in only one more parameter which is storage bucket since we're going to use firebase storage uh else it will give you error in the future then we need to pass in this storage bucket url over here and we can paste it over here and we need to pass in const for firebase options and we can pass in now we will try to run our app i'm going to pass it put in control c and if you're in windows command c and exit this process i'm going to clear of this so that we can see it well and again run the command you can just click the up arrow command two times and you can see our command showing up we can just press enter after this now it shows that our web version has loaded we go over here and we can see that our web version is loaded right now this is the setup for firebase now the next thing we need to do is create the login screen ui and the sign up scene ui let's do that so to do that first let me create a screens folder where our login screens and all the other screens are going to rest so i'm going to create login screen dot dot this is the naming convention i typically follow uh the name of the first thing then an underscore then screen you can follow anything you want like then we'll just import material package then we'll make it a stateful widget right now only because you know we know uh this is going to have text editing controller we're going to call and set state etc etc so yeah we'll just create a login screen state right now now we'll return a scaffold over here and we'll return a body of let's say text and we'll return for now from login screen right now i'll save it and we'll go in the main.dart file we'll comment this out temporarily and i'm going to uh return a login screen so that you know we can actually see what's going on now we should be able to see from login screen now i'll remove this text from here for now and i want to show you how our app is going to be structured and how it should look so first of all our app should not you know start from uh here it should start from here and then we need to you know uh center all our elements because we need them in the centered position over here we are going to have a logo right then we going to have our text input field over here which will be email then we'll have a password field over here and then a button right this is our layout this is what our layout is going to look like so what how can we make this type of layout so first of all we don't need to start from here so we'll call a safe area over here so that we can avoid this then we are going to have a column right now in the column we are going to have uh an image an svg image actually then we are going to have two you know text field input and after that we are going to have a text button seems very uh easy right let's do that so we are back in our login screen again now i'm going to take this body and i'm going to return a safe area as we discussed previously and our safe area is going to have a child and a child is going to have a container buy a container because we need to add some padding and we need to set the width of our app so what is the padding going to be the padding is going to be from this side and this side both right so that our text field inputs can be in this range and not take the full width of the app so we're going to have a padding of edge inserts dot symmetric actually because we want it from horizontal side so we can do symmetric and we're going to pass in a horizontal value of 32 you can try and test values on your own and see which suits your preference then after that we're going to have a width and the width is going to be the full width of this device so we are going to take in double dot infinity after that we need a child and the child is going to have column as we discussed now this column has the last children and the children will be a text field input for email text field input for password and above that we are going to first have an svg image and over here lastly we are going to have a button for login and the last thing i forgot to add was you know transitioning to sign up like you know having something like do you remember your password or something like that right now we also said that we want all of our contents to be centered so what we can do over here is we can do cross access alignment not mean access because we don't want it to be centered like this we want it to be centered like this in a row format right so we can do cross axis alignment cross axis alignment dot center after that we need to return an svg image but uh we can't directly return an svg image and before that we need to get the svg image right i'm going to create an assets folder over here and we're not going to have any images as such so i'm just going to keep it assets for now if you had like fonts sorry we don't have we don't have fonts for now so i'm just going to create an assets folder but if you had fonts we're going to create an images folder and a fonts folder and then you know segregate both of them which is a good way now you can go on this link it will be mentioned in the description and you can download this you know this image from your you can just right click and you can download the image going there you can go in your finder downloads you will get this ic underscore instagram.svg you can drag it to your assets folder you have that now we need to display an svg image for to display an svg image we are going to use a package flutter package named as flutter underscore svg i'll mention the readme of this package in the description below make sure to check it out and after that is done we can do svg picture dot asset and make sure to import flutter svg over here and not svg.dart over here right now our asset is going to be assets slash ic underscore instagram dot svg and our color is going to be a white color which we have defined in colors.dart as primary color and a height of 64. cool now we'll get an error if we just save this much because we haven't told flutter that this assets folder stays here so we can go in your spec dot yaml file scroll down and you can find assets tag over here you can uncomment all of this and paste this over here and save it you should get that now you can save this stop all your app processes and rebuild it we should get a good looking instagram svg file over here right in the meantime we should you know have a text field input but before that i need to do some spacing so that it doesn't directly stick with our app you know so what i'm going to do is create a sized box with a height of 64. there's no need to use media query over here then actually you can but i don't feel any use of using it then the next thing you want to do is create a text for your field input for password and an email right i'll move this comment down so since we are going to be using text field input here here and in our sign up screens what we can do is create a widgets folder over here and we are going to create a text underscore field underscore input dot dart with this we can reuse the for this widget everywhere in our app so we will import material package we are going to use a stateless widget over here and we're going to call it text field input and we're going to return a text field right now our text field is going to have some properties and it would need a controller which we look after in a while but we need a decoration as well and our decoration is going to be of the type input decoration and we're going to add a hint text which we these values we are going to accept from the constructor so that user can put in while using text field input class over here right for now it's going to be empty then we need to pass in a border and a border is going to be of the type outline input border and it will have a border side so we're going to do divider dot create border side and we'll pass in the context we need to pass in focus border side over here and it's going to be the same as this border over here so what i'm going to do is take this from here i'm going to create a final input border and going to paste it over here so that you know we can easily put all of them over here and we don't need to change each and every time we need to change the settings basically then we also need an enabled border and it will be of input border right now we are going to set filled to true and a content padding of edge insets dot all and 8 now the keyboard is going to have some type and an obscure text which is you know a dot dot dot format when basically whatever text that shows up when you use passwords in your app right now we'll accept all of these uh missing values from the constructor so what we have is final text editing controller text editing controller a final boolean value which is s pass this is to check if uh the value that you're going to pass is password or not so that we can hide this obscure text on then we are going to have a hint text and then we are going to have a text input type you know text input type because well do we need to show the user text input type because we need to show uh the keyboard type as you know is it going to be username or you know is it showing going to show email addresses or something like that right now we're going to pass in the controllers but before that let me accept all of these values real quick right i have imported all of these over here right i've imported all of right i have expected right i have accepted all of these values in the constructor now i'm going to pass in the controller text editing controller a hint text a keyboard type of text input type and obscure text of is password and usually our obscure text is going to be uh for false and only one time it's going to be true when our text editing controller is going to be a password so what i'm going to do is over here let me first format this document and over here i'm going to set a preset value of false so that if we don't uh and we're going to remove this now even if the user doesn't enter his password we will be able to you know take this default value of false now we can go over here and first of all let's see our app and you can see instagram is showing up real good now you can see it's still at the top so to do that uh to fix that what we can do is we're going to create a i'm going to take the flexible widget i'm going to have the child as a container which is basically nothing and you know i just want to create some spacing from the top so i can just mark flex as one and format this document and see it has gone down i can do flex too right now this will change you know as and when our stuff keeps on coming like the text field input password you know all of that stuff so let's add that and in the final if you are not satisfied we can always change the value okay now we can just have text field input make sure to type in input or else it will accept text field which flutter provides us then we are going to add a hint text of enter your email we are going to add a text input type of text input type dot email address and a text editing controller now we can create one so we can go on the top final text editing controller and we'll name it email controller is equal to text editing controller and i'm going to copy this and paste it and name it as password controller and we have to create an image uh sorry not an instance so we have to create a dispose over here and we need to clear off these controllers as soon as the widgets gets disposed right so we can do email controller dot dispose and password controller dot dispos don't forget to do that it's very important cool now we can just pass an email controller and we can restart our app and see our email is showing up right now after this we need to create something similar for password enter your password over here i forgot to put a comma that's why the error we can format the document and over here our text input type is going to be of the text and we need to add in one more property which is password but i want to show you how this looks without its password right now if i type something you can see something popping up and we have the same values because our email uh our text editing controllers are both email we'll change that and you can see the value over here is shown up but we want it in a dot format right this is what obscure text does so what we can do is take is pass and change it to true over here we can pass in password controller now we have that and if we do that we can see our format coming in now these both are stuck together i don't want that as well so what i'm going to do is create a sized box of height let's say 24. you can always play around with values as i mentioned before and you can see we're getting good space i will take this value and paste it over here as well cool now we need to create a button basically but we are not going to create a button we are going to create a container you can always use a material button or elevated button text button anything but i prefer this way for now because it will be easier for me to create like this now our child is going to be of constant text and it will have the time login and after that we need to pass in something to our container so the width of our container is going to be the maximum possible value then it's going to be aligned in the center so we'll do alignment dot center then we need to add some padding and where do we need to add the padding you know our button should be uh should have a little spacing from the text right so we can do padding of const edge inserts i'm going to do symmetric and we can do vertical 12 after that we're going to add some decoration and we want our button to not look like this we want it to look slightly rounded from the edges so we're going to add in a const shape decoration and the shape is going to be a rounded rectangle border and a border is going to be of the type border radius border radius dot all radius dot circular 4. and i'm going to format this document over here now let's see how our app looks doesn't look that good but now let me just add a color and you'll see the difference not over here we need to pass in a color over here and the color is going to be a blue color which is in our colors dot dot file now if we save this we can see the blue color showing up critical right now i'll again have a sized box over here of half the size of normal so we can do 5 12. after that we'll again have our flexible over here because i need to leave some space so i can take this and paste it down cool after that we need a row buy a row because we need to display side by side right let me grab my marker so suppose this is the bottom of our widget so we need to display a text do you have an account and then we need to pass in another text which is login so we need both of them in the same alignment but we want them to have different textiles that's why we're creating a row and two different texts so let's go back and over here we're going to have a row and ro is going to have a children and again it's going to be in the center so we're going to have main access alignment dot center and our children uh is going to be a container of child text don't you don't have an account after that we're going to add some padding and what is our padding going to be well it's going to be from vertical 8 format the document right now our text is going to be a constant as well now we can again grab this text from here and we can paste it and we're going to say sign up now our text styles are going to be different as i said mentioned as i mentioned before so we are going to have a text style and we're going to have a font weight and the font weight is going to be bold now let's try to run our app and see it fills up pretty well these pieces are because of the container flexible we are going we are using this thing over here looks pretty cool now the problem is that uh first of all this is not clickable over here this is not clickable and this is not clickable so what we can do is wrap with a widget called inkwell gesture detector what we are going to use for this container over here gesture detector and this will have on tap again cool now we have a login sign a login uil now let's create a signup ui quickly so we can do sign up screen dot dot right now we can import material package from here and i'm basically going to copy this whole thing from here and paste it over here we're going to import svg flutter package primary color a text field input and this is pretty much it now we even need to create some more controllers and some more text fields so we can just paste them over here and what is their name going to be well it's bio controller which will help us to add a bio and a username controller we can take this controller and dispose them and take the username controller and dispose them cool now we can go to the bottom over here and we are going to add some more text fields so we can take this from your entire sorry i'll take this enter your email because it doesn't have you know the text input you know is pass over here sorry then we're going to actually have this above this which will be a text field input for username and we're going to paste it it's going to be of the type text and it will take in username controller and where we will ask enter your username after that you're going to again have a const sized box and it will be of the size 24 then you can again copy this and go down below the password and paste it over here enter your bio and we are going to have a bio controller cool now let's save it and to see the output we'll replace login screen over here with okay wait let me first rename log sign up screen from here because we had copied it from the login screen so we can do sign of screen and rename all of this stuff over here cool now we can go over here and import sign up screen and paste it now we have all of this stuff but you know sign up in sign up we also need a circle avatar you know a widget that is circular and we can accept our file from our gallery so what we can do is go on the top over here somewhere and over here we are going to create a field input not a field input so we are going to have a circular widget to accept and show our selected file so what we can create is something known as stack so that we can place a button and a circle avatar on top of each other something like this sorry for my pathetic drawing right so to do that we can use stack and we'll understand we'll have children because well and we're going to have a circle avatar and a circle avatar is going to have a radius of 64 and a background image we need to add some background image for now so we can just grab some random network image so we can just go over here and type unsplash.com take some random image copy the image address and paste it over here this is just for now because we're going to view something else while accepting it from the user and you can see it's showing pretty good now we need to even add a sized box over here first now let's see we have some spacing which is pretty good now we need to add an icon button where do we want to add it somewhere over here so that user can select it so to do that we are going to use make use of the positioned widget and the position widget will have a child of icon button and it will have on pressed and for now let's keep it null and empty bracket not null and we are going to have an icon of const icon icons dot add a photo right now we can just format this document we're getting this error because we're missing a parenthesis cool now we can keep this circle avatar constant for some time so that doesn't give warning we'll have to change it later on we can refresh our app and we'll see our position our widget is showing up over here but we don't want it there right so we can just make use of the bottom tag over here in the position we're going to give it minus 10 and from left we're going to give it a tag of 80. all of these values are tried and tested you know trial and error that's why i've got it right so you can just you know have this over here you can even change the color of the icon if you want over here but i'm not going to do that i'm satisfied with white now we have created signup ui now let's enter the authentication part so the next thing we want to do is whenever the user clicks on the sign up button we need to make sure that the user is created in our firebase authentication tab over here and the user data gets stored in the firebase database as well so how can we do that to do that let's let's just you know create a folder called resources so that our logic is separated from our ui right over here we can create one file named as auth underscore methods dot dart we can close all the remaining files and over here let's just import material dot over here and we'll create a class over here a simple class which will have multiple functions and we are going to have final firebase auth this class is provided by firebase auth dot dart the package that we had over here firebase or so uh we need to create an instance of this firebase auth basically so to do that we need we can just do firebase auth dot instance with this we get an instance of the firebase auth class so we can use this and call multiple functions on it we will see it in some time so the first function we want to create is to sign up the user right so let's just create a function sign up user so over here we are going to receive multiple arguments from wherever we call the signup user method and what do we need from the user we will require a string email we'll require a password we'll required we will require a username uh bio and lastly we would require a file over here now the file type will be a uint8 list if you have known about this it's this a list file that we'll have this type of file we'll see in future why we're using this and not a file file over here right which might be the usual way of carrying out things but we'll see why we need to use you in place uh later on in the course right now over here the return type of this is going to be of the type future string bias is going to be future because all the calls that we make to the firebase are going to be asynchronous so we want our function to be asynchronous so that means that the whole function functions return type changes to future and uh it will be of type string so that we tell the user of uh you know whether our uh signup has been successful to our firebase auth or it has some error right now to do that what we're going to do is we're going to create a variable called res which is a result basically and we're going to save it with a option of say some error occurred now we're going to put a try catch block and whenever we get any error what we're going to do is we are going to put res equal to error dot to string we will have to take this error whatever error we get right and finally we will have to return this res now over here also we need to update the value of rest but we'll do that in a while first of all we need to do something over here we first need to make some validations right if we need to check that all of these are not null or empty you know if the user has entered a blank field and then submitted sign up we don't want to do anything we don't want to register that user right so we'll check that if email dot is not empty or or and i'm going to do the same for everything so i'll just copy this from here and paste it so we'll do password username bio and for file it's not going to be is not empty it's we have to check if the file is not equal to null now it will never be equal to null because well we have marked this as required but it's a kind of good to make this practice over here now we need to register the user how can we do that with firebase right to do that uh we can just use this auth instance that we have over here and if we put full stop over here we can see multiple methods that auth allows us you know confirm password reset create user with email and password is what we want but you can just check out multiple stuff that can be done sign in with credential sign on with custom token sign in with email and password is what we're going to use for login sign in with email link you know all sorts of stuff can be done over here create user with email and password now if you go over here you can see that it will return a future user credential so naturally we need to await this so that we get a user credential and we can just save this user credential over here right now we have cred over here now cred will give us a lot of details of our a user like you know cred dot it will give us the user and user will have multiple things like uid email you know but we are only interested in the uid of the person display name will most likely be null if you're not using you know uh google authentication because you're not setting display name to anything over here right with this we can create a user uh in our firebase authentication but now that's not enough right we need to even store it in a firebase database because we need to store all the excess stuff like username bio file email and password gets stored in the authentication tab and we can only see email by the way the password is not seen to us as well so uh email and password can be uh we can just use them to do authentication but what about the rest of the stuff that we want to save we do that in the firestore database and we're going to do that now with this we're going to add user to our database again we can here we call final firebase firestore now firebase firestore is given to us by cloud firestore this is the package that we have installed in our prospect.aml file and over here we are going to do firestore and we can just call firebase firestore dot instance not inspect instance now we have the firestore instance so we can just use firestore and it has multiple collections so let me show you the structure of firestore so you can have a collection so my collections is suppose users so with this users i can create a collection suppose uh it's a list of users that i want so it will be a list of users now every user will have an auto generated id or a custom id whatever we want to set in our case we are going to set it to the uid of the user that i showed it to you right if we do print cred dot user dot uid we'll get the user id so we are going to not generate a document auto id but we're going to set the user id to this document id over here and then we will have multiple fields like username to something you know like rivan then we'll have bio to flutter developer let's say then we'll have email to save and the email will be xyz at the gmail.com and a uid that we'll generate over here whatever uid we set over here that will be generated over here and we can just pass in over here as well now let me save it to you and show the structure of this so we have our users we have a document id over here note that the document id for different users will be different else it will override the same collection over here and it will cause a problem to us and then we have a data over here like bio uid which i misspelled then email then username you can even have a sub collection in a collection like you know again you can just type let's say pets and next and now you can type pet one name can be dog and you can save over here and you can see we have another collection in our users collection pet one and we can save it over here the this is the layout of our firebase app and we'll see how we can store this in our database so let me delete this collec collection first i'll delete this cool now we can just do firestore dot collection this path over here that we had and we want to save it to users then we'll have a doc and as i mentioned we can just do cred dot user dot uid make sure to put an exclamation mark over here because user can be returned as null you can see over here user can be returned as null so we need to pass an exclamation mark so that we can access the uid over here and then we can just put set so we nee so what we're telling to firebase firestore is we need to create a collection users if it doesn't already exist then we need to make this document if it's not already there and then set this data suppose this collection exists and this uid also exists so it will basically overwrite the existing data and will show it to us so what do we want over here well username and we can pass an username over here uid i'll have to do this and iuid will be this only then an email and that email is going to be email a bio bio a followers and the followers is going to be a list let me just put in all of this in a string and followers is going to be a list of uids of different people we'll see that logic in future and we'll have following which is also going to be a list cool now uh again this set has a written type of future void so we need to avoid this and well after this is done we can just turn res to success and well we are returning res over here cool now as this should work i want to show you another way of doing this so uh if you don't want suppose you don't want this uid anywhere in your app like you don't want to access it anywhere so you what you can do is you can just put await firestore dot collection users and you can directly call add method over here the set method is only on the document over here and there is add method on this collection over here so if you do add it and pass in all of these details we'll see both of them in action and i'll show you the difference right now let me save the app over here we're not saving the file yet i will save that in a second over here but let me show you the demo first so we can go where and in the sign up on the on tap we are not doing any uh validation like screen change or anything right now let me just show this to you so uh we'll have multiple stuff let me uncomment this file over here and i'll remove this for now so we have to pass in multiple stuff over here we'll have we'll have to import auth methods the class that we had created over here then sign up the user and pass in the email so our email is going to be the email controller text editor that we had dot text the same for password password controller dot text the same for user name usernamecontroller.txt and the bio which will be biocontroller.txt i am converting this arrow function to a normal function because we need to use async over here so we can do async and we can store the result and string it as equals await and well we can just put this over here remove one bracket and format the document now we can also print the rest variable over here so that we see what's coming up and we have printed the user id over here so that we see what the user id will be and if we create the user with email and password so let me restart this and well let's try to enter a username let me name it rivan enter in email rivan gmail.com make sure to add this at the gmail.com because firebase is the one that will be performing all the validations of email checking and make sure your password is more than six characters because your firebase checks that as well and you can have bio as flutter devs well now if we click on sign up you're not seeing anything now we can see this is because it was a future it took some time to do it store it in our database we don't see anything here but if we go in the authentication tab right now you can see rivagna gmail.com the provider was email created signed in and the user id check this user id over here now again we go to firebase database and you can see over here our users collection has been made and our uid over here and the uid over here are same this is because we had run the dot cred user dot id and the uid is same over here both of them is same but what if i comment this and uncomment this i have not set any document over here i've just set the uid which is this part over here and let's see what firebase does for us so i can refresh the app i'll enter the username rrr i'll have to use another email because firebase will check that this email is already there or not then i can again you know have another bio i'll sign up it will take some time and now you can see this is our uid and we've got a success message and you can see we have got another user over here but see the document id over here this is different and this is different because this is because uh firebase has generated a random uh id on its own and don't worry this id is going to be very random and all of the users if you use this method all of the users are going to have different uids so don't worry about that but you can see that the uid over here and this is different and if we go over here in the authentication you can see our user being created over here so this was the difference i wanted to show you between collection and add and set over here but i won't use this uh over here because i want my uids to come in over us because i'll be accessing my users based on this uid so that we get the information pretty quickly and don't take much time to get it you'll see it in future and realize why this method would be better in this scenario now uh let's again add some of our functionality like having a u in it list file and checking that our file is not equal to null what do we do want to do next we have to store this file somewhere right and we need to pass in a file here as well so we need to pick an image from the user gallery so that we can upload it to our firebase storage as i had mentioned previously that we'll use this to store any of our images so we need to first accept this from the user to do that let me just remove again this i'm so sorry but i'll have to remove this again so that i can show you it in demo i'll mark i'll comment this and i'll save this as well now we need to pick an image from the user so to pick the image from the user what we need to do is we'll have to install this uh dependency image underscore picker which will help us allow to you know take image from user gallery or from user camera so i'm going to use the pub spec assist over here and paste it over here this will add image picker in our app uh dependencies i can stop this app because it won't work properly if i don't stop all the processes and restart but before restarting let me just complete complete this over here so whenever this add photo button is clicked i want the to you know start the select image process so i'm going to create a function select image and i'll take this up and i'll call void select image over here now what will this select image do we need to pick the image so what i'm going to do is actually create a file over here named utils dot dot and in the utils.dart file i'm going to import material package and we are going to create a function called pick image we are not specifying any type of this function as you will see in the in a bit why we are doing this and we are going to have an image source this is provided by image picker itself and in the image source we need to initialize first image picker and it will be image quicker which will be much bigger we have instantiated and got the instance of the image picker class now what we want to do is we want this image picker to pick an image for us you can find all of this information on the image picker website i'll mention this disc in the description below the link now if we see pic image will give us a future of x file which can be null so what i'm going to do is i'm going to create x file and we are going to await this now to get the await we need to mark this function as async let me remove one space first we'll check if the file that we've received from the user input is not equal to null that means the user clicked on this button went into the gallery then without came back without accepting any image that means he press the back button or something so we want to check if the file is not null if it's not null then we want to return file dot read as bytes now you can see the return type of read as bytes is future and it will return you int 8 list so we can just do this and we can await this and if the file is null what we want to do well we can just type no image selected we don't want to do something special uh we just don't want to do anything so we'll just print it for you know just for our sake so that we can see that we've not selected anything and uh we are doing this file dot read as bytes and not we are not doing this file uh which will be from dot io and from file dot path we are not applying this method over here and over here we don't even need a weight we're not doing this method because this method is not very accessible on internet anything that includes dart i o package is not accessible on flutter web as of now so we can't follow this method and get it working on uh the web version that's why we are following the uint 8 list method over here now we need to await first we'll have to create this async now we'll have to avoid pick image right why do we have to avoid pick image because we used async over here which made the whole uh function over here a future and well we need to do this and we need to provide a source and i'm not going to do something special you can add some options and extra stuff but i'm directly going to mention gallery and this will return to us a dynamic value over here because we have not mentioned any type over here so uh we can just consider it to be a u in 8 list because that's what we are going to return and we know that's not an error we are going to receive so we can just do u uint8 list image which is equal to this and we can use you and 8 list your because our dynamic can be uh you and 8 list but uintah list cannot be a dynamic now we need to set the state and we need to state state to a global image variable so that we can display this uh image over your in the network image we'll have to remove this network image that's not accessible we'll see it in a while but we'll have to remove this from here and we have to show the image file over here so what we're going to do we're going on the top over here u and 8 list which can be nullable which will be null in the start and we're going to take this image from here we're going to go down over here set state to image to m so we're taking this global variable we are setting image to this i am over here pretty easy right now we need to go down in the circle avatar and we need to make a ternary operator over here so we need to check if the image here is not equal to null if the image is not equal to null then what do we want to do i'll just copy this circle avatar from here paste it over here i'll have to remove this network image from here because that's not what we're getting we're getting a uint8 list image so that can be accessible from memory image and we'll pass an image and the image has to be not null so that memory image can take it now if we format this document we should see something like this and over here instead of this background image we need to show a default profile screen so we can just type over here default profile picture we can grab any of this doesn't matter we can copy the image address go back and paste it over here and make sure to add this and add the code format the document again and we can save this over here now let's try to rerun our app and see where we've got it now as you can see our app is loaded over here and we are getting a network image when our image is null now if we click over here our app should crash and this is exactly what happens this is because well we haven't read the docs pretty well as you can see over here for the installation of ios uh we need to do some config for android it's not needed and even for web it's not needed but for uh ios we need to add some permissions in our inflow info.list file over here so let's do that go to our we'll have to go to our info.list file over here down here i'm going to copy this and paste it then the key is going to be ns photo library usage description and we are going to have a string over here if you don't know about this it's fine just copy as it is and over here we can just type photo library usage you can just take this key and print it two more times because we need two more permissions and this camera usage description and we can just type camera usage and a microphone usage now we will not need this but in case you want to integrate mic uh uh like videos in your apps after this tutorial make sure to add this as well uh we can just type my q search and after this is done we can close this file no more config is needed we can run without debugging now our app is loaded if we click over here you can see that it's asking us to access our photos we can just write allow access to all platforms and it opens our gallery so we can create this over here and you can see that we still when we select an image it shows up the image over here now if we go over here and as i said if we cancel this we should get over here no image selected so this is pretty cool now the next thing we want to do is in our auth methods over here we'll on uncommon this and we need to pass in this file over here correct now where can we go over here in a file we can just pass in the image which is not null cool now with that in place we can save this file we can save this file as well and well the next thing we want to do is store this image file that we have over here that we've selected over here in our firebase storage now if we store it store it directly over here that will be a problem because it will get overridden quickly and that will not be a good way of storing because suppose i want to add posts in the future that will also come up here and it will not be a good thing right we want to segregate it into various folders so as you can see we can create a folder over here and this is just you know we can create this by clicking on wire and typing in you know profile pics and we can click on add folder and this will create a folder where we can store our files but that's not what we want to do right now we can just click on delete and delete our folder over here we are going to do that programmatically so this is uh so to do this we are going to create another file named storage methods dot dot we're going to import the material package we are again going to create this class storage methods and over here we are going to have firebase storage this is given by firebase storage and we are going to have storage equal to 5b storage dot instance this is the good thing about firebase air flutter sdk you know everything is pretty similar as you can see to create an instance we can just do this they have pretty similar functions as you can see so we're going to create a function to add image to firebase storage so again our return type is going to be a string and we're going to upload image to storage now this function can be used in you know both uh to uh store our profile pictures and to store our posts so we are going to have a string of child name over here which i'll explain in a short while uh we'll have our file over here uint 8 list file and boolean is post so we want to check if it's post or not and if it's supposed we need to make some extra functionality as well now we can do is we have storage now we have a ref method on it what is this ref method so this ref method is a pointer to the file in our storage so this can be a reference to a file that already exists or does not exist but we don't have any ref because we don't have a file so what we want to do is create a child over here now this child can be a folder right now uh it can be a folder that exists or a folder that does not exist firebase doesn't care about that if it exists then it will go in that folder or it will create a new folder for us so nothing for us to be concerned about then what is our child goal to be our child is going to have a child name that we are going to accept from the function that wherever we are going to call it and another child we are going to have is the user id because we want our structure to be like this suppose i have profile picture our i want my file to have you know another folder over here which is of some uid random uid and it will have another folder and in this folder we are going to upload some file cool so i can delete this again and we can go up over here now over here our child is going to be the user id to get the user id what we can do is again create firebase auth that we had seen earlier we can just do this auth dot instance right this is what we are done now we will take this instance over here auth and we have the current user we can put an exclamation mark over here and dot u id with this we get the uid and we saw that previously over here in the auth methods so we have this collection with us now you can check the type over here the type over here is reference so what we can do is create a reference over here which will be called ref and we are going to save this now uh we want to upload the task so we what we want to do is take this ref so wherever this folder structure that we have created we want to take that and we have to put a file in that location so to do that we can just do ref dot put and over here we get multiple stuff put block put data put file put string what do we want to do we have to put file we have to put a file if we were not doing web right we could have directly taken this file and it would be of a type file as you can see and i've shown it to you previously that a file would be something like this right but that is not what we are doing over here we are trying to put a uint 8 list to put a unit 8 list we're going to do put data you can see over here it accepts a data of you and date list so you can just take this and pass in a file cool now if you put this data you can get upload task now what is this upload task that we have well this upload task is similar to you know a future but it is not a future you can make it like a future like on error dot when complete you can see over here and well you can see over here it can you can make it a future but we are not going to do that we have this upload task over here so with this upload task we have the ability to control how our file is being uploaded to the you know the firebase storage so uh another thing we want to do is this upload task we need to avoid this upload task over here now to await it first we need to make this function async and we need to upload this await this upload task now you can see if we do await upload task it will give us a task snapshot and we'll take this snap and put it equal to this i want uh from this snapshot over here what i can get is snap dot you can see ref over here we can take this ref and over here we'll get get download url basically this will fetch us the download url to the file that is being uploaded over here so with all of this we are successfully able to upload our file in the correct location that we mentioned over here and with this snap dot ref.get download url we'll be able to get a url which we'll save in this firestore database over here so that we can you know access it with the network image and display it or to all of our users so with this we'll get a download url and definitely a download url has to be of the type string so we can just do string download url equal to this since this is a future we need to avoid this and now since we are returning a string we can just return a download url now we are not wrapping this in a try catch block because well we are going to take this upload image from here and put it over here so this is ultimately in a try catch block so it wouldn't matter right now uh the function of this is post will be seen whenever we create a post and you'll get to know that time for now it has no use for us so we can go over here and we have added this now before adding a user to our database we need to make sure that this method over here runs so what we can do is call the storage methods and we need to upload image to storage now what is our child name going to be as i mentioned before profile pics and the file and this post is false basically we're not uploading a post right now right we are uploading a profile picture and we know that this upload image to storage is going to return a string so we can just do string photo url equal to await this we can format this document over here and now we can pass in a photo url which is a photo url cool now we will refresh our app and see all of this in action so let's go back to our app and over here let's try to take this image we are getting this output correctly rr norman test123 flutter there now you can see that i have formatted my email um in uh i haven't formatted my email correctly over here and if i sign up we should see an error over here firebase auth invalid email the um email address is badly formatted this is taken care of by firebase so i'm going to format this one to either gmail.com not noman at the gmail.com because i've used it previously and i'll sign up and if we go to our storage over here you can see a success popping game and we have a profile pics folder over here and our file over here with the name of our uid and you can see that this is there now i can't see this but if i want i can just click over here and it will download this for me if i go over here you can see the image showing up pretty beautifully right now this has gone there that means this part is working the storage part is working we can go to our firestore database we can see the new user and the new user has this photo url as well if we take this and go over here with this we should be able to download our url of our image and as you can see it's downloaded pretty cool right with just a few lines of code we are able to sign up our user and store the image and we are able to do lots of things but our task is not finished yet we are still left with uh some validation stuff in our ui part but before that i wanted to show you this so suppose you are in this try catch block and well we've got this the email is badly formatted or we get another thing right so what we want to do is you can just do if you're familiar with try catch you know this that you can do on and you can have firebase auth exception and we can catch any error related to firebase auth exception error and we can cache that exception and with that we need to check if the e dot code this is the sorry error dot code so if the error dot code that we get is equal equal to this what are we getting invalid email right if that is equal to this we need to pass in something new so what i can do is rest equal to the email is badly formatted right now this is exactly what firebase has given to us you can have multiple error codes like you know uh wrong password or user with that email is not found when you're logging in please have a look at that in the login section as well but for now you can see that the email invalid email is there and if you go over here and try to sign up with three letters of password you can see weak password over here so you can catch the weak password as well over here error dot code equal equal to weak password your password so basically all of this stuff we can just copy and paste but firebase gives a pretty good and explainable uh output so we don't do this but you can definitely do if you want to add some more you know detailed description cool now that we have that we can save this we can close the storage method file we can go over here and i'm going to clear all of this let me copy this first i'm going to clear all of this from here and i'm going to type in sign up user now this sign up user is going to be not returning anything so what we can do is void sign up user and i think i copied this um i'll have to write the whole code again i'll see you when i write the whole code again welcome back i've typed all of this code again now uh we got this res variable over here so what we want to check if the res is equal equal to whenever we have a success we are setting our rest to success right so we can just do res equals to success then what we want to do is well nothing so whenever a res is not equal to success over here what we want to do is well you know show a snack bar and we're going to use uh snack bars a lot in this so what i'm going to do is go to the utils i'm going to create a function named show snack bar it will accept a build context over here and a string content and over here what we are going to have is scaffold messenger dot of context dot show snack bar snack bar and the content will be of text content this is all the stuff required to show a snack bar so basically we are going to use show snack bar this all of this lines a lot in our application so i've created a function over here so that i don't have to call it again and again and type all of this code again and again correct now we can just do show snack bar and context we're going to pass in the context and dress i think we have reversed it so what we want to do is pass in address and context now we can format this document so if res is not equal to success we need to show the snag bar when there is an else condition we don't want to do anything so now if i restart my app we shouldn't see any problems so we can accept a file rrr another gmail.com test123 flutter dev and if i sign up this will sign up but i don't even get to know that you know i've signed up that will be known when we transition to another screen but this takes a lot of time right you saw that this uid popped in a lot later so to do that we are going to create a loading variable and this loading variable will pop up as long as it's signing up correct so we're going to have bool is loading and i'm going to set it to false i'm also going to mark this as private i'm going to take this is loading and over here we are going to set the state is loading to we are going to set the loading to true then we are going to take this and we are going to set loading to false i want to do it before we show the snack bar it won't be much delay but yeah still i want to show it before it we need to show this is loading on our screen right now to do that what we're going to do is go to our container over here where we have a button and in that child over here we are going to check if it's loading so if the loading process is still on we are going to center with a child of circular progress indicator and it's going to be a constant no dynamic values used and we can refresh now we should see the changes happening in our app so if i take this file over here we're going to pass in the username as rivan naman rivan other gmail.com test123 bio flutter dev and i'm going to sign up and you can see our button size increased by a bit but it's not very well so this is because we need to change the color of our circular progress indicator we'll change it to our primary color now we should be able to see and you can see this is happening now you can see this email is already in use we can just do the one one two and you can see this loading and this has been done so our sign up process has been done we can go in our authentication tab and see all of the stuff happening all our emails are here that means we have done it successfully now let's head on to login screen having done this let's get to the login login part so we can go to the login screen actually in the main.dart file over here and we'll replace the signup screen with the login screen so that we see our login screen on the main screen and what do we need to do to you know get our user logged in so to do that we'll again migrate to our auth methods class over here and we can create a function for logging in user similar to uh signing up the user so we will again have a return type of user string we're going to follow the same pattern we did over here create a res variable and pretty similar to this so we'll create a function login user and what do we require from the parameters over here we required email password username bio and a file but over here we just need an email and a password so we can do that we'll uh do required string email and a required string password having that we'll again create a res variable over here we'll pass in an initial value of some error occurred it's highly unlikely that this output will come up because it's either going to be a success or a error we are doing this over here but just in case you know uh something happens we can print this out so now we'll again wrap this in a try catch block and we'll have to mark this function as async because the like the similar to this create user with email and password since this is a future login user is also going to be a future so uh first uh we have to check if our email is not empty you can actually do that in the ui part of the app over here as well before calling the auth methods part but i prefer doing it over here because my logic is separated from the ui now we also check that password is not empty then we need to log in the user to log in the user will again grab the auth instance that we have and we have a function called sign in with credential is there even this works but we're going to follow sign in with email and password and we're going to first stop it now as i told this is going to be a future you can see it over here and it returns user credentials again so we what we can do is just await this we are not in need of the credentials over here naturally because we don't have to do any other process since you're logging in the user we don't have to store any of our data in the firestore database so only this much is fine we don't need to store the user credential unless you want user id and want to carry out some other task after this cool and now this is done we can just mark rest to success and over your wheel turn rest to error dot to string and if the email is not empty we need to show that the user needs to enter all the fields please enter all the feeds right now we have this we can just return res right now we can take this login user similar to what we did in sign of screen we can go over here in the login screen and you can replace this on tab with login user and now we need to create this function login user so we'll do that it's not going to return anything so it's going to be void then we need to create a variable string res and we need to await this from the auth methods this is basically what we did in the sign up screen as well nothing new and since every it is over here we'll also use async now odd methods dot login user and we have to pass an email so it will be email controller dot text and over your a password controller dot text now i'll format this document we'll get a rest value over here now we need to check where if res is equal to success what do we need to do else what do we need to do so if there is over here is success we basically want to do nothing for now but over here we'll have to show a snack bar right and for the snack bar if you remember we had created a function over here show snack bar we can just use this show snack bar function over here so snack bar will pass in the content over here what is our content going to be well it's just going to be res and we'll pass in the context and we need to import show snack bar which we can do with the utils package we use folder that we created over here right now let's see if we are getting logged in uh so to see the user uh so to see this output first we will move to the authentication tab and over here we have our various emails you can see that we have a created tab over here created uh section just tells us when the user was created and the signed in when the user last logged in so you can see all the values being 20th december which was yesterday for me and today's date is 21st december so i can uh enter this email over here naman ravana there is gmail.com and i remember my password being test one two three and we log in i think that was a success we'll refresh our authentication tab and you can come over here and you'll see that our value of created stills remains the same but are signed in changes to 21st december that means we have logged in successfully now let's just show some output on our screen so to do that first you know we'll have to login the we'll have to show some loading bars so that we even get to know that we've completed the process we can create an is loading variable over here similar to what we did in the sign of screen now after this login user we can set the state to and we can set the loading to true we'll copy these values and after this we can paste it we can set is loading to false and in case you want to show the loading indicator uh before the snag bar what you can do is you can take this put this over here and we also have to mark it over here as well because you know this is for the if condition and this is for the else condition but i'm not going to do that i'm going to paste it over here because it would be a difference of milliseconds that wouldn't matter at all so now let's get the loading indicator showing up on the screen we want it to be replaced with this login text so we can go to the container over here and we can replace this text with a ternary condition so if the loading is on we need to show a constant a centered circular progress indicator and we can format this document and we can save it now if we try to see it you can see the size of this being big and we can't see the indicator revolving that is because we need to change the color over here the color will be a primary color which is white now if we try to do this you can see this happening successfully but now the only problem is if we're getting logged in we are not shifting to another screen that is what we are going to work on now but before jumping into that i wanted to show you something in the auth methods class like we saw for sign up user that we called over here and uh on function over here where we can explicitly mention the exception we are looking for we can do the same thing over here so what we can do is on firebase auth exception and we can catch the specific exception we are waiting for and then over here we can just check with the code so if e dot code this is similar to what we did uh in the sign up screen so over here we can just check for multiple things like you know when we log in what are the multiple errors that a user can get and what is the code for the firebase exception that we can receive so first can be user not found that means the user has not been registered so well we cannot log in so we can like other stuff you know output uh our own custom message whatever we want the other code i want to show you is wrong password you again uh want to show a different error for the wrong password so you can just put in this or you know what we saw for uh the minimum password size you can put that as well all of it is accepted but firebase just gives a pretty good uh user readable output and i'm going to go forward with that so basically i'll be the one using the app and i don't mind getting a bit different you know notification like a snack bar over here i'm fine with it but if you want to customize this is how you can do it now let's jump into handling the screen change in our application so what i'm going to do is show you two approaches which we could have followed and you know shift it to another screen i'm going to create a sample screen over here to show you the demo we're calling it home screen dot dot you need not make this if you're following this tutorial step by step so you can create a an import material package i'm going to call it as a stateless widget because it's just for demo and over here i'm going to display a centered text of home screen and i'm also going to wrap it with a scaffold so that we see a good output all right we have this and for now let's just put cons to avoid all the warnings that we're getting the first approach we could have taken is if we got the success in the login screen we could have just used navigator dot of context dot push replacement material page route with the context and we could have passed in home screen right to avoid the warning vlog input const i always forget this now i'll refresh my app and see so whenever we have the success variable coming in we can change to the next screen so i'm going to log in with my email and password and i'm going to click on login and as you can see we went to the home screen so what's the issue why is this approach not appropriate with firebase and any other stuff now let me refresh our app if i refresh my app you see we again go to the login screen this is because in our main.dart file we have told that a home of our application is going to be login screen and we are not making any additional checks that you know if the user is logged in we need to go to the we need to display the home screen anything like that so the user state has not persisted well we can obviously display the user id and everything over here but we not be able to see another screen right and this is why this approach is not appropriate so instead what we're going to do is you know go to the main.dart file over here we're going to implement the concept of a persisting user state the user state uh can be persisted in firebase a very easy method so we are going to implement the concept of use uh persisting user authentication state so a fire with firebase doing this is pretty easy and other database and if you worked with node.js and everything so what we need to do is store the store the uid or some unique identifier in the app's memory then get that from the app's memory and well you know uh check if the user with that uid is authenticated or not we'll have to do a lot of juggling but instead firebase just provides us with multiple methods we can make use of and we'll get our work done so what i'm going to do over here is use a stream builder because firebase returns that i'm going to show you another approach for user authentication state as well so don't worry over here we'll have a stream obviously because it's a stream builder and a builder over here we are going to get a context and we are going to get a snapshot and over here in the stream what we are going to pass in as i said firebase provides us with multiple methods that we can run to check if the authentication state is there or not the three methods that uh there are three methods that firebase provides us one uh the first one is the id token changes uh so how you can do this is firebase auth dot instance what we did in the auth methods you can just create a variable over here and input it over here you import it over here sorry then over here we can just click id token changes now you can see the return type is stream of an available user it can be a null right now id token changes and this is what it takes to you know get the abuser uh signed uh to listen to any changes in the user but uh when will this uh method be called right this will be called right after the uh listener has been registered and when the user is signed in or whenever the user signs out or there is a token change in the user so every user has a unique identifier token which firebase gives and whenever this id id token changes this method this method can get run so this is not the method we are going to use right now as i said firebase provides us with three methods this is the first method and this is we are not using this because this will uh run whenever the id token changes so suppose the user uh restores this app on a new device well this will run and we'll get our authentication state back but we don't want to do that instead uh we are going to use some other function but before that let me show you a second function which is user changes so this runs whenever uh the user has been uh signed in signed out everything that uh this uh the other function id token changes does but what extra functionalities this provides us is whenever we want to update our password update our email whenever uh we want to update that firebase does provide some methods for that as well and whenever those functions get called this gets called as well but uh we don't want to make the this function call when all of those changes take place because those changes are never going to take place uh uh we are going to use the third method which is auth state changes now this runs only when the user has signed in or signed out that's it so this is what we are going to use because our purpose is very minimal we don't want extra stuff to be happening but if you want you can just use id token changes or user changes anything you want but i prefer this one then what we need to do over here so if this is a stream builder you might be familiar that we need to first check if our connection has been made with a stream so we can just check if snapshot.connectionstate equals to the connection state and it is active or not and if it is active we need to check active means that the connection has been made with our stream over here and if it is active we need to check if the snapshot that we have over here has any data or not right we don't want it to be null and if it has data what we want to do is well i'll uncomment this i'll take this responsive layout and i'll remove it from here and i'm going to return this so and we are going to put a semicolon over here so whenever the connection is active and our snapshot starts to have any data we are going to response uh we are going to return a responsive layout now let's move on to the else conditions now else if you know there is no data that means the snapshot has error that means the connection state has been made but the snapshot has does not have data it has an error what do we need to do we can just return a centered widget with a text displaying the error now since i don't want it to be very complicated i'm just going to pass in snapshot dot error and i'm going to use interpolation and i'm going to use string interpolation over here but if you want you can just type you know some internal error occurred something like that but i want to show this error cool now having that we need to check if the connection has not been made so if the snapshot connection state is equal to connection state dot waiting that means the connection is still happening what do we need to show we need to show a circular progress indicator we're going to do that child and a center sorry a circular progress indicator and we will have to change the color of this circular progress indicator which will be primary and we will set this to a constant widget and i'll put a semicolon as well now we have implemented all of this so that means the connection state has been active and connection if it's not active then it's waiting that means we need to show a circular progress indicator but the key point over here is snapshot dot has data now if snapshot has data it means that the user has been authenticated that's why we are showing the responsive layout over here but what if the snapshot doesn't have any data we have not checked any condition for it so after checking all of these conditions and if all of these conditions are not fulfilled we are going to return a login screen because the snapshot does not have any data ultimately and if it does not have any data it means that the user has not been authenticated now if i refresh my app over here we should see this is mobile because the user has been authenticated pretty simple right now we can just remove this and delete this now even uh no i'll even have to remove this from here now even if i stop my app processes i'll restart it i should see this is mobile screen on the in the center text let's wait for it and we'll see that all right our app has been loaded and you can see no difference this is mobile is showing up over here because our user has been authenticated now let's try the same thing on our web version so what we're going to do is flutter and dash the chrome and make sure to add dash dash web renderer html because the default one is canvas and canvas law causes a lot of issues in flutter web so make sure to have the web renderer as html don't worry if you release this uh if we create the build of the release version uh it will be in the html format only and we'll get a good output and it will be similar to this we won't get any external factors affecting our app so don't worry alright our web version has been loaded and you can see over here we're getting the login screen because the snapshot over here does not have any data even though we logged in over here before i think we did so now we will try to log in and i'll enter my email naman rivaan actually what i'm going to do is sign up and i just realized that we haven't configured anything for you know clicking this button over here the sign up button so what we can do is go to the login screen over here and go to the bottom and in the sign up we can create a function called navigate to sign up i'll copy this go on the top create a function again void login navigate to sign up and we basically you're going to use navigator navigator dot of context this context don't worry this is like uh the state over here provides us with the context in that app so yeah we can use that and we are going to push to the material page route and we are going to pass in the we are going to receive a context and we are going to pass in the sign of screen this is going to work we know it for sure so i'm not even going to test it i'm going to format this document i'm going to copy this function from here and go to the sign up screen paste this function over here and say navigate to login and i'm going to pass in the login screen i'm going to copy this function go down i'm going to replace this sign up with login this is the issue we had before didn't notice it and we'll save it so our web has been loaded up and now if i click on the sign up button over here it should work now i'm going to select an image and this should work we haven't tested this on the web version and this works because you know uh the image picker dependency that we added to pick images is configured for the web i'm going to add in a user name over here let's call it trivan i'll call the email naman rivan 1234567 at the gmail.com then we can add a password test one two three and over here i'm going to write content creator and we can click on sign up and the output should not be the home screen that we get this is because well we haven't told what to do when the res variable is success so when our variable is success what do we want to do we need to basically show this responsive layout that we have so i'm just going to copy this and paste it over here oh sorry first we need to navigate so i'm going to copy this function from here paste it over here then copy this from here and then replace this with sign of screen we don't need to add a return because this is an arrow function now we're going to employ import some of the widgets having that in place now we should format the document and we're going to do the same process for login screen as well so i'm going to copy this from here go to the login screen and we had created ifres equal to success and this is why we had created we need to navigate to the other screen we're going to import all of this also we don't want push over here we want push replacement push will uh well if we just click on the back button we can go back to the login screen but that's not what we want we want to replace the current screen with another screen so we'll do the same over here as well and i'm going to refresh over here and over here but we need to restart our app entirely because well this was mobile will show up because our authentication state has been persisted so if we run our flutter chrome version again we should see a login screen because that's how flutter web works it creates a new chrome instance every time unlike the ios simulator over here so let's wait for our chrome to run up as you can see we get our login screen back again i want to sign i want to sign up actually again to show you that it works if it works so here then it will work on the login screen as well i'm going to create another user ivan naman one two three at the right gmail.com i'm going to enter a password test one two three and a bio off again content creator and i'm going to add extra over here so that you can see extra stuff and not the same stuff on every user now i'm going to create a user and you can see we shifted to the mobile screen and our state has been persisted as well if i do restart you can see that this is the state of our app and this works as we had before but this is not the cleanest way of writing the code because if we go in the auth methods file you can see that all of this data we are adding over here and suppose our app grows bigger so and we need to add all of this data again then we'll need to probably you know uh add all of this we'll add all of this and then probably we'll forget which is not a good way and will cause bugs in our app so what we can do to avoid these type of issues is create a model and we are going to create multiple models one for user one for post in the future for now let's create a user model and since it's a dot file we don't need to you know create import material dart where we'll have a user class and over here in the user class we're going to add in a lot of you know properties of this user class what all properties do we want so our properties are going to be this so we can type them out okay so we have typed all the fields that are required which are basically this so i've copied them over here now we need to require them from our constructor which we'll create and i'm going to use named constructors because there are a lot of things to add let's add them so we have our constructor here as well now let's add some functions we can use on user so that you know it's very accessible for us while using firebase so we are going to create a two json method over here basically this method will be used to convert uh whatever user object we require from here to an object so we can do that by two json method and we're going to return an object and our object is going to have username a uid then an email a photo url bio followers and following so whenever we call this two json method on our user class it will convert uh everything that we receive from the arguments to a to an object file so that we don't have to write this same code wherever we use it all right now this is done we have to create another function for the user class but we'll create it as and when we need it we need to json function right now in our you know auth methods class which we'll look at in some time so let's go in the auth methods class where what we can do is create a user model so we can call user now make sure to import uh there are two types of user uh we have seen this before but we want to import the user that is this one but since uh the user from firebase auth the the user firebase auth provides us and the user we have will clash we can do this we can import this as model so that we know that this is a model user that we want and where we can do model dot user and we can create a user and to create a new user we can just do model user now we have to pass some past some arguments in the constructor so i've copied all the values that were present over here over here and now what we can do is take this set and we can remove all of this and now we want to set this user object over here so we can just do this user now this has to accept a map right and we have made the map function basically over here to json file so we what we can do is call dot to json and this to json basically returns a map for us for us as i said an object so yeah we can just do that and we can format this document this should work as it worked before now you can see the state of this app is still the same because even if we reinstall or uninstall the app nothing affects the persistence of state in our ios simulator so we can just run the chrome version using the command we saw earlier and let's wait for it now let's sign up and our file we are going to select this file i'm going to enter my username as rivan ranavat my email is going to be rewind rana 1.3 other gmail.com password will be test123 and i can type your abc and we're going to click on sign up and we have gone to the next screen that means our authentication has been successful if we go in the firestore database over here we should see our data coming off and well there are a lot of users that we have created and you can see our email driven.123.gmail.com and a user has been stored so this modeling of data helps us a lot in our apps as you can see you know whenever we want to create a user model we can just uh you know create this and we are prompted of the fields that we have to enter so that we don't miss anything and we'll also see this benefit when we use a state management with provider okay so now i'm in my mobile screen layout and what i want to do is display my username that i had entered in the sign up screen on my mobile screen layout so what i want is if i'm this user i want the uid of this i want to display the name of rivan ranavat right now so how can i do that well let's try to do that first we'll have to convert our stateless widget to stateful widget because we are changing the state in our app right now then we'll have to create a global variable suppose i create the variable string username which is equal to empty now we also called in its state because well it should run in the start of the application so that i get my username and since init state cannot be turned to async and we're going to make calls to firebase it will become a future so what i can do is create a method over here get username suppose then i can create a function get username after that i'm going to turn my function asynchronous i can make my function over here asynchronous but over here i can't make my function asynchronous i can make like this but it will give errors you can try it on your own then we'll have to make calls to firebase firestore dot instance dot collection users so uh so this is the method we use to get the data from the firestore basically we have made uh give me a reference to our collection over here which is users the next thing i want to do is get this part so i want to get through this part and when the uids are known what we can do is put dot doc and in the dock we can put our user id if we know it so what is our user id firebase auth dot instance dot current user dot uid we know about this so whatever uh so we'll go in the user's collection then we'll find our uid with matching to this uid in the documents these are the documents and what we want to do is get this information from here so what i can do is dot get now you can see where get is a type of future document snapshot this document snapshot is given by firebase firestore itself what is a document reference a document snapshot well you can see that we have gone to the till the dock and we are getting a onetime view of it so we can read uh from this only one time so it is called a document and a snapshot like just like a camera you take a picture which is called a snapshot the similar to that so we can just do document snapshot snap which is equal to this and we can await it then we can format the document now we have access to snap and what we are going to do is print snap dot data this is a function uh basically firebase provides us with to get the data of the app there are a lot of more functions like snap dot you know a get request on another snap then snap dot id then we can check if the snap exists or not in this case you're pretty sure that the snap will exist that's why the user is on the mobile screen layout so we are not doing uh making the condition of a snap exists or not for now and if we print snap like this we will get in our console something like instance of document snapshot but we won't get any value so what we can do is console.log snap.data and we can run our app and our app is run and you can see we are getting the data from the firebase firestore so we've got our uid following bio followers email username now i want this username so what i can do is i have my obvious variable over here i can set the state to user name equal to snap dot data and to access snap dot data what we have to do is well you know just type username and we'll have to put a semicolon as soon as we put an exclamation mark over here we get an error saying that this bracket type is not supported for this kind of uh for this data so what we can do to fix it is if we go over over here we can see that it is object and well we can just uh explicitly mentioned that this is map of string and dynamic and we can put this in over here in parenthesis and we don't even need to do this so basically we are since this is an object we and map is a subtype of object so we can just dynamically say that you know our object over here is a map and then we can access this uh username property on this cool now if i run my app and first of all i'll need to print my username over here which i will do dollar username and i'll print i'll refresh my app and you can see rrr printing over here so this is how we can do one time read and get our data but in case our username changes somehow so suppose i go over here and find rrr username and over here i'm going to change my username to rivan ranavat right now i can come over here and see no changes being made in my app the if i refresh it will change to rewind run but this is because uh get user name will only run in the init state function and this uh with the get function we can only get the uh get a onetime view of the data that is present in the reference we have made over here the username doesn't change but what if we want to keep the track of the username that is coming and you know changing every time it changes i want to display the change we look at it in some time but now i want to focus on another issue over here so suppose i have another screen like web screen and i want to do the same thing print my name over here should i just copy all of this function and put it there again like this i'll have to copy this function then go over here then convert this to stateful widget again then paste it over here does this seem you know a good way to do things it doesn't to me so uh i'm going to follow a shorter way of doing it basically we are going to use state management where we are going to get a get data from the database one time so it will reduce our calls to the database and then we are going to use the values that we have gotten every time we are uh using our app we are going together suppose i want the username i can get the username one time cool so let's do that i am going to change this to this is mobile again so for the state management what we're going to use is called a provider package i'll mention this link in the description below so what you can do is copy this you can read this it is a pretty good documentation and uh but if you want to know like the basics of it what we're going to cover in this tutorial i'll be explaining it but if you want to know in detail you can just go through their docs now i'm going to add this in the popspec assist and i'm going to click enter we'll have to stop our app processes and we're going to create another folder called providers i'm going to create a file user underscore provider dot dot now where i'm going to create a class of user provider and we have to extend this class with something known as change notifier so this change notifier provides us with some functionality in our app so basically uh we are inheriting from this chain notifier some of our functions so now if we uh create a global variable user let me import that from my own models user i told to you that you're going to make use of a user right now we can just do user which is nullable and we're going to call it user make sure to make this user a private field because we don't want to because it will cause bugs in our app if we don't use this and in future we'll be able to access user provider suppose we have this class user provider then we'll able we'll be able to access this user on it which we don't want to it will cost strange bugs in our app so we can just put a private field over here so i told you how uh we have to make this private field so how will we access the user field right suppose i want to get this data of the user provider what can i do i can just create a user i can create a get method basically and we'll name it get user and you're going to return this user and to return it we're going to call it that it's not going to be null cool now having that we are going to create a function which is future void and we are going to refresh the user every time so basically this function is there so that we can update the values of our user so what can we do so we want to go to the auth methods class over here and we are going to find the user uh so where we are going to create a function which will help us you know uh get the user details whatever we did in the mobile mobile screen layout first we are going to implement that in uh this uh class over here let's do that we'll have to create a future and we'll have to pass in the model dot user type so we're going to get the user details and our uh and how do we get that information well first of all we'll get our current user so we can just do user current user which is equal to auth we have initialized this over here dot current user and we're going to put an exclamation mark over here and make sure to replace this model user with just user that is provided by the firebase this will not give an error because current user just gives this user and this is provided by firebase auth then we need to create a document snapshot as we saw so we'll get a snap we are going to avoid this try this on your own and see if you remember this firestore dot collection users dot document and what document do i want current user dot uid dot get then we need to return this user so we're going to return model dot user and we're going to pass this snapshot basically but we can't do that right because well it doesn't accept a snapshot so we need to pass in something like this well you know uh we are going to pass in followers for followers we are going to do snap dot data as map string dynamic and we are going to pack this with a parent thesis then we can do and we can call this over here then use follow us is that what we're going to do for every a property i think it's a lot of time wasted so instead what we're going to do is create a function in our user model not this user but you know this user model and over here we're going to create a function uh which will be named of which will basically convert our document snaps which will basically take in a document snapshot and return a user model right that will make our lives much easier and it will be a onetime job for us so we can just do static user from snap it will take in a document snapshot then we are going to first get the snapshot so as we did over here we basically need to you know take the snapshot dot data and we are going to mark it as map string dynamic we'll try using this as snap and we can do snap dot data right because you have called snapshot over here which basically we are referencing while we are initializing it doesn't make sense then we are going to return the user as we did over here now we didn't do that over here and instead we are doing this over here because well it will be a much more uh useful thing to do does uh we'll be separating you know all this stuff that is you know related to user model we won't do that in the auth methods we'll be using that in the user user model seems like a clean way to do stuff then we can call the snap short over here and we can pass in username and we are going to do that for all the properties that we have yeah this is pretty much it now uh with this function we are taking in a document snapshot and returning a user model so that's exactly what we need over here so what we can do is return user which is the model user one dot from snap and we're going to pass in the snap and this is how easy our job uh gets done we did this in the uh user model because well we'll have to use it differently in different places so this will be a good way and we don't have to pass in snapshot username everywhere we use it cool now in our user provider what we can do is and uh we are going to get a user and we are going to await auth methods so let's create a refer let's initialize our odd methods class which is equal to auth methods then we can take this auth methods we are going to call that dot get user details the function that we created right now and we returned a user model from it cool now we can just do user which is our global variable aware we're going to set user to this user and what we're going to call now is notify listeners basically it will notify all the listeners to this user provider that the data of our global variable user has changed so you need to update your value now uh to add some listeners what we can do is go in the main.dart file and uh there are multiple ways you can do the same thing like using a consumer or provider so what i'm going to do is wrap this material app which is our most parent widget to so to say and we are going to wrap this material app with multi provider which is provided by flutter and over here it will take in a list of providers and i've chosen this method because as our app gets bigger and bigger we'll have to use a lot of providers so we can just wrap it with multiprovider and it will be a onetime setup for us as else we'll have to use consumer and provider everywhere and then we're going to use something known as change notifier provider over here we use change notifier but where we are going to use change notifier provider which is provided by the provider package and you're going to pass in create and this will take in a user provider class that we create cool i'm going to format this document now having that in place we are going to save our file now we shouldn't expect our app to you know directly have a state management system because well if we go in our user provider class again we need to call refresh user somewhere this function has to be called somewhere so that this user variable gets updated or else if we print the value right now of user provider uh well we'll get a null value and we don't want that so we have to call this refresh user somewhere where can we do that after our login is done we don't want to call this refresh user on login but so i want to call it somewhere in the responsive layout because it consists of web screen layout and mobile screen layout both else you could have done it in web screen and mobile screen both but since this is the parent element and consists of both of them i'm going to do it here we can convert this responsive layout widget to a stateful widget and we'll have to call init state aware now the init state will have add data over here then we'll have to create add data because it's an asynchronous function then we need to call in something known as user provider underscore user provider which is equal to provider so this is provided by the provider class dot of context this context will be from the state so don't worry about it and we need to just do this much but if we do this much it will constantly listen to the values given by the user provider we don't want that we just need to call refresh user once on it so what we're going to do is turn listen to false basically with this we can get a one time view or one time we can do stuff one time with the user provider class we have then we can await this user provider dot refresh user this is all it takes to store value in our user provider basically the user class that we have in the user provider this class we have stored value in it now and now what we can do is go to our mobile screen layout and we can just do provider again we'll call actually what i'm going to do is create a user class itself then we're going to do user user which is equal to provider dot of context dot now we don't get any functions to do over here because we haven't mentioned the type of the provider we can do that over here and what value are we expecting a user provider dot get user so this isn't a function it will get the user from here and we have the same issue like before we have our firebase auth and our user model so what we need to do is first of all import the user model and we have to import it as model now we can do model dot the user cool now our error is gone so we are going to call the get function over here and it will get us the user so we can just do this we can take this user variable print this over here user dot username all right our app is ready and you can see my username printing over here you'll get this error but don't worry about it this is just a sample what we're doing uh so when we do the final version we won't be seeing any error like this now we have a state management uh with us where we can call anything like i want to call user dot i want to get my email so i can just do this refresh my app and i'll see namandrawan at the gmail.com showing up pretty cool right now let's work on the ui of our app so in the mobile screen layout what we want to do is create a tab bar basically and this tab bar should be present somewhere over here and we should have uh some icons like a home icon then a search icon then an add post icon then uh notifications page icon and then the profile screen icon and based on the user interaction on these buttons we have to show the pages uh that follow so how are we going to do that let's dive into it so we are in the mobile screen layout let's remove our provider stuff from here we don't need that in this case it's just for demo i'll remove all the imports as well now in our body uh let's just keep this is mobile which is going to change in the future we'll have to wrap it with some parent widgets so that we can show the user interaction based you know uh screen now let's add a bottom navigation bar the stuff that is present over here and to do that we'll use a cooper t no tab bar because i want it uh in a style which is ios based you can even use bottom navigation bar widget now in this we need to mention the items and our items are going to be of the type bottom navigation bar item it is going to have an icon and our icon is going to be icons dot home cool and we need to pass in some stuff where like label else it will give you an error and a background color what is the background color going to be well it's just going to be primary color the white color basically cool we are not uh we are not making this a constant because we'll have to change it in the future like the value over here is going to be dynamic the colors and uh so we are not making it uh constant we can just copy this bottom navigation bar items and paste it five times i guess so the second is going to be a search one then the third is going to be to add a post so it will be add circle then a notifications page we can just use you know favorite and we need to paste one more time and this is going to be icons dot person to show the profile screen now if we save this and rerun our app we should see something like this the only problem i have with this is the color so we can change the color by going over here and changing background color to mobile background color which is this color as well now if we save this we should see it coming in sync now i don't want the colors over here to be you know blue i want the selected tab bar to be the color of white or gray so we can make use of conditional rendering and first we have a global variable end page which is equal to zero i'm marking it private then uh we can take this page variable from here and we can go down and uh change the color of the icon based on these so if color so the color over here is going to be based on the page so if the page is equal to 0 then we need to show a primary color or a secondary color our primary color is the white color uh and the second color is gray color basically what we telling is the page when it is zero will change to primary and secondary we'll handle the updating value of this page uh in the future in some time so yeah let's see if we are getting white and we are getting white now let's add this logic for each and every icon i'm going to copy this and paste it over here over here the page is equal to one else this will also also show primary color over here we'll set it to two here it will be three you're a four and your uh five then we can format the document and all our warnings are gone because this is based on the conditional rendering it is not a constant value now if we see we are getting it as we wanted now this home icon we don't want so we can take this home icon and remove it from here and we'll have to change these values again i'll do that now we can refresh and see our app coming so now the next thing you want to do is based on the so whenever the user clicks on one of these icons we need to make sure that the page value has updated and based on this page value we are also going to show the screens now we need to conditionally render the icon color so we uh so cupertino tabber provides us with an ontap function so whenever any uh bottom navigation bar item is clicked over here we can change the value so we can create a function called navigation tab we can take this function and paste it over here void navigation tab and page and we are going to make some use of something known as a page controller so let's create a page controller we'll do late page controller and we're going to name it page controller itself we're going to create an init state and in the united states we are going to set page controller equal to the page controller and we are also going to create a dispose method and right now itself we'll call the page controller.dispose method else we'll forget that cool having that in the navigation tab uh what we want to do is we want the page controller to jump to that page so we can just do jump to page and we can pass in the end of page so basically we are telling the page controller that we have over here to jump to that page we won't see any difference as such because we haven't given passed in the page controller anywhere basically this will act as a link between uh the tab bar and the widget that we are going to add in the body and that widget is a page view and this page view will accept a parameter of children then after that it's going to accept a parameter of controller which is which we're going to pass in as page controller and then an on page changed function where we'll pass in on page change function we'll create that in a while but basically this children is a list of widgets that we need and in the list of widgets it will uh conditionally render based on the bottom navigation bar item so uh suppose our bottom our page index is zero right now and we click on the search icon over here we click we need to show a search screen so if we put text as feed over here and i'll copy this to show you the demo we'll have search over here and order add post screen then notif and profile and we save this and we have to create this on page change function but we'll do that in a while so whenever this gets tapped over here we see the search coming up then an add post then the notification and then profile that's how we wanted we also want to change the color of this which will be done uh with this on page changed function over here we can uncomment this and we can create a nonpage changed function which will be of the type void so void on page change it will receive a page page argument then we can set the state to from page to this page cool now we can refresh our app and now you can see this color changing and our screen over here changing as well uh the next thing we want to do is basically if we do this we are able to change the screen right we don't want that because the real instagram doesn't have that feature we are able to uh change the screen based from navigation items only and not from here so what we can do is add something known as physics over here and the physics will take in scroll physics we want the physics of never scrollable physics which will allow us to not you know have this cool effect i'll put it as a constant and now if i try to change you can see we are not able to change it cool now we have a working tab bar so the next thing we want to do is create the add post screen ui basically whenever we click this button we should see the add post screen ui so first let's decide how our ad post screen is going to look like so i have my marker over here basically we want a center button over here which will basically tell us to upload a file from our image right or from our camera we're going to add that options over here and whenever we click that button and we select a file this button should erase off we don't want to see this button and we need to see other ui like we want to show a profile over here profile image of the user and app bar which says post to then an image that we have selected and an option to well display our description like whatever bio we want to put right so let's try to make that kind of stuff so over here in our application we're going to create a screen named as add post screen dot dot and we are going to import the material package as usual then we are going to create a stateful widget over here because we are going to make use of description controller and everything so we need the nh state and dispose method then we are going to create the add post screen class over here i am going to return a container because a centered button is what i want so actually i'll just replace this container with center widget then we are going to return a child of icon button as we mentioned previously then in the icon button we are going to add an icon of ikins dot upload and this is obviously going to have an on pressed function because it is an icon button so let's try to see this on a screen uh we'll have to take this ad post screen and we'll have to uh replace this with this over here but actually what i like to do is i'm going to rename this dimensions to a file named as global variables so where we can add most of the global variables that can change over time so that we are not in use of it right so we can add this uh what we are going to call it we are going to call it constant home screen items let's say and this is going to be a list of widgets so we can copy this from here we'll replace this as and when you know we get another widget we create another widget for now we have the add post screen we can add that cool now let me format the document now we can replace this children with home screen items having that in place let's rerun our app and see if we're getting the output and we are getting a centered widget of uploading now let's try to create the description or you know the ad post ui we had this we have discussed so what i'm going to do is for now i'm going to uh comment this and we're going to return a scaffold because this widget will be only visible when our file is not selected from the gallery we haven't added anything with related to functionalities yet so i'm just going to comment this and we are going to work on the plain ui of our app so we are in our app bar we are going to have an app bar uh we're going to have a background color of mobile background color else it will give us another background color then we need a an icon over here which basically tells us to go back so that you know we can clear off the image if we have any so we're going to create an icon button for that and we're going to have an icon our icon is going to be icons dot arrow back then we are going to have an on pressed and our onpress is going to be null for now i mean an empty bracket for now not null then we are going to have a title our title is going to say well it will be a text and it will say post 2 then if we keep it like this our title will be center aligned let's see it in action if we go where we can see post 2 it is in center but i don't want that so what i'm going to do is put center title to false then we need we can save this and we can see the title going there so over here i want to create a post button from which we can you know click and we can get post so we're going to add an actions and actions is going to be a text button on pressed is going to be nothing for now and our child is going to be a constant text which says post now we will have some styling over here because we wanted blue so we can just do text style then our color can be colors dot blue accent you can just use the blue color that is mentioned in the colors dot dot file we can then have a font weight of font weight dot bold and a font size of 16. let me format the document i'll even put a comma ir so that we get the formatting correct now let's see our app and it looks pretty cool now uh we need to work on the next section which is the body section so we can get out of the app bar widget and have a body and a body now we need to work on the post form kind of thing so we want a description controller then our circle avatar with the profile photo and the image we have selected so the we'll add column and then in the column we're going to have children we have added a column because uh below the app bar we need to show you know a linear indicator while this is being posted for now we are not going to add the linear indicator we will add when the loading process has to be shown but we can have a column right now then we'll have a row and then the row will have main access alignment to main access alignment dot space around and cross access alignment to start from the start then it will have children and the children will have circle avatar we will have to provide a background image and it will be a network image and we'll have to find a good uh background image for our file so we can just go on unsplash.com and find a good profile picture for now copy we can just open the image in new tab and copy this from here that should work so we can pass this over here now uh our circle avatar should show up and you can see it's showing up in the center now but we'll add some stuff using which it will go in the left side so the next thing you want to add is a size box and within the size box we can have a text field so the width is going to be medium we want it responsive so we are going to make use of media query and it's going to be the total width of the screen size and we're going to multiply it with the 0 0.3 constant value you can play around with these values and find whatever is suitable for you then we're going to add a text field note that you know we are only adding a width so we are using size box over here if you wanted to add extra features you know like padding and everything you can just use a container instead then over here we need to passion pass in a decoration and it will be an input decoration then we need to pass in a hint text which will be right write a caption not a comma first then we need to pass in a border of input border dot none and we are going to mag we are going to have a max lines property using with the length of the controller can increase and will have a max length lines capacity so we are going to pass in as 8 the default is 1 i guess then having that in place we need to create a rectangle image on the side let's see if we're getting that write a caption we're getting that now we can create another sized box and we're going to have a height of 45 and a width of 45 then we're going to have a child of aspect ratio basically this helps to keep your the children and the child in the aspect ratio consistent uh with the width and the height so we're going to add a value of 487 by 451. all of these values are just you know trial and error i just formulated this like them only then a child will pass in a container and we have passed in a container because we want to add decorations like an image so we'll have box decoration and we're going to have image property and image will take in a decoration image and decoration will image will have a image of whatever we pass in and it will be a uintate list but you know uh we can just take this uh image that we had copy image address and we can paste that only we'll change as and when we want we want it to be of type of box fit dot fill alignment in the top right top center so we'll do fractional offset dot top center we're going to save this we're getting these warnings because uh for now the network image and all are you know a constant but this will change over time so i'm not making any changes now if we save and go to our right we can see that it's looking pretty cool but this description controller looks a bit off so what i'm going to do is increase the width and change it to 0.4 now we should see all of them coming in place looks pretty cool still we can give it some width you know 0.45 let's try with that and yeah looks pretty cool and after that we after this size box what we can do is add a divider so that you know separation is seen it will be a line you know like a grayish line now this is done now let's work on the functionality of selecting a file first so what do we need to do so whenever we get the centered icon of icons upload we need to click on that then we'll get a set of dialogues let me draw it out so we'll get a set of dialogues like this and it will have three options you know select from it will be select from gallery select from a camera and cancel option so we want that to show up and whenever cancel is click we need to pop up this if gallery then we need to pick image from gallery or from camera and then after the image is selected we need to show the screen over here let's work on that so what i'm going to do is create a function which will be select called select image and basically what this function will do is return a simple dialog box and over there we can just have a set of options that we discussed so it will be select of image now over here we are going to take in a build context i'm going to call it context then it will be asynchronous and we need to return a show dialog box this is how you can you know create the show dialog box then the builder and the builder will take in a context then over here we need to return a simple dialog box there are various type of dialog boxes like you know alert dialog simple dialog you can check it out i'm going to add simple dialog then we're going to have a text that says create a post then we need have children and the children will consist of simple dialogue option and where we're going to add some padding so we're going to add an edge and says dot all 20 if we don't then all of the options will get squeezed and it won't look good then we need to have a child of constant text which says take a photo then we'll have an on pressed function which will be asynchronous and uh whenever we take a photo what do we want well first of all what we want is when the dialog box shows up we need to uh dismiss that dialog box first and then uh go to the gallery and then uh to take up the camera so what we'll do is navigator dot of context dot pop you know just to remove the widget from our screen the simple dialog box then we will have a uint 8 list file that will be coming up uh when we use the function that we created called pic image you can see it in our utils file the pick image file that we had created we accepted a source then we used the image picker dependency then we picked the image from the source we mentioned and we returned the file if it's not null that's what we're going to do and since this is a take a photo option we're going to mention the image source as camera now what we're going to do is we need to make these changes in our you know the ui part as well so we need to call the set state so for that we even need a global variable so we can do uint8 list and we're going to call it file this can be nullable because in the start it is going to be null and we are going to set the state to you know file equal to file not doing that we should be able to see the camera but this won't be visible you know in the ios simulator because there is no camera in the is simulator i'll show the same to you in the android version after all of our options have been created so let's work on the gallery function which will work in the ios simulator we can copy this and paste it down and over here we can type choose from gallery and we're going to mention the image source as image source dot gallery then we can just save this as well now let's try to work over here so if we go over here we have we are getting the screen because this is the screen we are trying to render we have commented this now uh let's uncomment this widget that we are returning and let's add some conditions over here so when is our image not selected whenever the uh file over here is null in the start it is null right so what we can do is put a condition that if the file that we have is equal equal to null then we need to return this so that the user can select the image or we need to return the scaffold now we can format this document and we should see a centered widget cool now if we if i click over here i should get the show dialog option box so i need to take the select image from here and put this in the icons upload place so we can do select a match and we need to pass in an argument over here which accepts a build context so we can pass in the context now let's try to run our app and see if it works so i click over here and i get the option of take a photo or choose from gallery i'm going to choose from the gallery and our gallery shows up now if i click over here i even get redirected to the other page because my file has not been null now it has some value so now uh let's uh display whatever you know the image that we have and the user uh profile so first let's uh display the user profile that should be fairly easy because we have we have a state management ready so we can do that we'll have a final user user and we're going to have provider and order of context it will have a type and that type will be user provider and the user provider has a function as a get method basically which is get user we have seen all of this i'm not repeating all of this stuff again now what we can do is instead of having this background image over here we can remove this stuff from here and instead put user dot photo url and we can format this document and let's see if we're getting that i'll go over here i'll select an image choose from gallery and over here we can see our profile picture that we had selected coming over here now let's try to display the image that we had selected over here so our image is in the form of you and 8 list and it is in the global variable file so we can go down and we had seen earlier that to display a uint8 list we don't use a network image that is for the uh you know the web stuff the url that we have and to display a uintah list we use something known as memory image we have seen that so we are going to pass in file but we are going to pass in file with an exclamation mark because we don't want it to be null and it will never be null because we are adding the conditions over here in the top right now if we try to upload an image we can choose from gallery and we're going to select the waterfall we can see the waterfall showing up and we have all of this it works pretty well now let's try to you know have this description that we can have the value of so we need to have a text editing controller so let's go at the top create a text editing controller which is named as a description controller which is going to be a text editing controller we can take this description controller from here and pass it in the text field controller cool we have that now uh the next thing you want to do is well whenever we click over here and choose from gallery oh we also have to add a simple dialog option of cancel first let's do that and jump on to other stuff so we can go on the top we can copy this from here and paste it again and this is going to have the option of cancel and we don't want any of this stuff happening we just want don't want to see the simple dialog box option to show up again so we're going to remove the async as well from the con over here now let's try to run our app and see you're getting the cancel option if i click over here the simple dialog option gets removed now let's try to choose from gallery and if i select this image i'm seeing that over here now whenever we click on the post button first of all we should see a loading indicator linear loading indicator over here that shows up like this and then we need to post it to our firestore which is over here in the post section over here which is another collection that we can make and uh it will get stored in the storage we have had a look at both of them and how we can do both of them let's revise them if you want you can pause the video right now and try to do it on your own you can structure it uh however you want it's uh there's no need to follow the same thing that i do but you should get the output and the same you know stuff happening over here so what do we want to do whenever we click on the post button we should be able to you know save all of this stuff so we can create a function over here on press and we can call it post image we're going to create that function so let's do it at the top over here void post image and it will require a set of arguments that we need but even before that i just realized that we've used the description controller but we have not set a dispose method to it let's do that i can go down at the bottom and we'll have a dispose over here and our dispose is going to be description controller dot dispose now in the post image we will accept a set of you know arguments one is uid then a username and a profile image we are accepting all of the arguments from here because we have a provider over here and uh it's in the build con build for build method so we can just pass a pass post image uh over here and we can pass in the from the function here as well so now what we can do is put a try catch block because you're going to make some asynchronous calls here and it's going to be asynchronous then uh we're going to create an upload post function but we're not going to do that over here as we have seen multiple times that we have done for auth methods and storage methods we're going to create another file which will be called firestore methods dot dot and in the firestore methods we are going to create a class like we did before firebase not firebase fire store methods and we're going to create an instance of the firebase firestore class which will be this we are going to have firebase firestore dot instance then we need to create a function called upload post which will help us in uploading the post so what we can do is future of type string because we will create a rest variable as we have done before then we'll upload the post and to upload a post what all stuff do we need well first we will have an asynchronous function we will have a try catch block aware all of this stuff you have done multiple times and i think you should be doing it by your own then uh what do we need to do first first we can create a res variable which is some error occurred then over here we first need to uh upload our image to our firebase storage and then we need to uh get the download url of whatever we store in the storage and store it in our firestore database so let's try to do that so what we can do is well we will receive a photo url whenever we do storage methods dot upload image to storage if you don't remember what upload image to storage was it was this function where we are basically asking for the child name and we are going to create a folder at that child name and we are going to upload our image basically and get the download url of this image cool now we can go there and we can have a child name what is our child name going to be posts this was profile pics now we want posts then our file is going to be a file we're going to access this from the user so what you can do is string description then a uint 8 list file and a string of uid and our is post is going to be true and we need to await this because it will return a future string cool now having that in place let's uh create a post and as we did for you know user like in the auth methods we created a class of user we're going to do the same for the post so we can go over here and create post dot dart file then we can basically copy all of this and paste it in the post dot dot file and it will have a set of different properties like description you know the uid of the user then the username of the user then the post id each post will have their own unique identifier then the date published a post url a profile image and we also need a likes property we are not adding the comments property because that is going to be a sub collection cool now let's require all of this so i've added all of these values i've required all of them uh all of these construct from the constructor then i'm uh making the two json function and then from snap function i've replaced all of these values it should be fairly easy for you to do so then the next thing you want to do is well create a post so to do that we need to create a post so let's do post and we need to require the post well we haven't renamed this so i'll rename that we'll call it post we'll have to remove all of this now let's try to use post we have our model class ready and do post and the post is going to be post and we are going to have a set of you know again uh construct arguments so we can pass in the description so let's pass in the description we have from the argument that we have here from the parameter then a uintatelist file so we can call it after description we need to add uid we'll add uid then username we have to get that from the user so we'll do string username then username the next thing you want to add is a post id for the post id we won't be able to add any uh you know the user id because uh there will be uh a two to three post by uh the same user so that will get overridden and we will see one type of files for all the posts that a user makes so we'll have to generate different post ids which we'll have a look at in a while then we'll have a date published then the date published will be the date that is right now so we can do it by datetime.now then we'll have post url and the post url is going to be the photo url that we're getting over here then we need to have a profile image and a profile image we have to accept it from the user so we can do that string profile image and we can pass in profile image now let's see what error we are getting now it's written that the post is written that the post url has to be a list so we didn't edit it this well so let me edit it out so our profile url is going to be a string and a profile image is going to be a string and we should not be getting this error and the date published is going to be final date published cool now what we want to do is work on the post id how can we get the post id to get the post id we need unique identifier every time firebase used to take care of that but you know now we need to do something else so we're going to do we're going to make use of a package called uuid and this will help us generate a unique identifiers how it will uh give us if you read through the docs it will tell you that it provides you with two functions uh when we initialize it which is something called v1 and a v4 v1 uh creates a unique identifier based on the time so it will give us a unique id every time so we need not worry about having the same id so what we can do is create a post id we'll do string post id and we can do u u id and we'll call dot v one and now with this post id we can pass in this post id over here and let's see what error we are getting over here we have not passed in likes and our likes for now is going to be an empty container cool now we can take this post and upload it to firebase because over here we have uploaded to our storage now upload it to our firebase so what you can do is firestore dot collection post dot doc and our document i will have post id because well it will be a collection of posts then like we had for user a different you know a different id uid of the user it will have a post id for every user as you can see then uh we'll have dot set again and we saw earlier that we need to pass in this post and we can't pass in this post directly we need to convert it into a map so we can do dot to json and we can you know format the document after this is done we can turn res to success don't forget to do that and we're going to have res equal to error dot to string and we can return res now you this will work you can try it on your own but before doing that what i want to show you is if you go to the upload image dot to store upload image to storage function you can see we are asking for a boolean that is a post or not so why are we asking that so suppose uh we have this we are creating a reference and we are creating a child of let's say you know a profile pic suppose so this works for the user when the user is adding image so we can save it with the file name of their uid because we know that the user is going to have only one profile pic but in the post section we know that the user can have multiple uh files that have been stored because the user can post multiple times so we don't want this reference over here we want to create another reference so what we can do is we will check over here if is post so that means if we are uploading image to storage and if you are uploading a post to the storage what we can do is create a unique id that we did like before uuid we can then have dot v1 and we can then have the existing reference which is this one to ref dot child and then an id so what we're basically doing is we will have a child of posts then we'll have a child of uh then a folder of you know uh the uid of the user and then over here we if it is a post we can just uh generate a unique id for the post and then the name of the post is going to be that unique id i hope that's clear to you if not we'll see that in action in some time like whenever we store it and we will see the folder structure that's happening and then you can relate so now over here let's try to avoid the error that we're getting so what we can do is string res which is equal to away and we need to call in the firestore methods and we can upload the post and the post will have a description controller dot text we have to pass in a file so it is going to be underscore file and it is not going to be null so we have to add an exclamation mark and rest everything is the same name and we can format this document then uh the next thing you want to do is if the rest is equal equal to success we want to let user know that the image has been posted so we can just show a snack bar which is provided over here that we are using again in the utils uh dot dot file and the content is going to be posted that's it and we can put a semicolon then what we can do is put an else condition and we can show a snack bar and over here we are going to pass and dress whatever error we are getting over here as well we can just do show snack bar and the content is going to be a error that we get dot to string and we're going to format this document whatever are we getting if we go down you can see the post image we have to pass in some constructors over here uh some arguments over here so we can do post image and we have to first pass in user id so we can do user dot uid then user dot username and then user dot photo url we can format this document and we can restart our app and let's see if our setup is working correctly or not so if we click over here on the files we can select from gallery i'm going to select this image this is showing up pretty good now let's say hello world and we can click on post we have to configure the loading bar first of all we will do that after we see that it has been posted and yeah it has been posted so we can go in our firebase storage we can reload this to see if we are getting the correct output and you can see in the post that we are getting this uid over here this is because we have made an error in our application we have done ref dot child id and we have not saved ref to ref so we have to do ref is equal to ref dot child id so that when we put the data we have ref as the child name then the child the the user id and then the unique post identifier we forgot to do that now let's try to run our app again but before that i'm going to delete this posts that we have from over here and let's delete it and let's try to see it in action again so we can refresh our app and let's try again we're going to choose from gallery i'm going to select this image hello second time and let's post it says posted now let's refresh and see in the posts we are getting the user id and if we go in the user id we should get a randomly generated user you know a randomly generated post id and this is how we wanted it and this is very different from profile pics because over here we are just having the user id as a file name but we don't want to do that over here we want the user id to have post differently so that one user can have different posts cool now if we go to the firestore database we should see two posts uh because one was the failed one and then the other was a success one and you can see hello second time and the same goes for hello first time hello fold cool now let's try to you know remove this one because this one was the one causing an error now let's try to add a linear indicator so what we can do is go to the add post screen and we're going to create a global variable called boolean is loading and we can set it to false initially let me put it as a camel case then we can take this is loading and we can go so whenever the user clicks on the post image let me select one image to show you the demonstration so whenever the user clicks over here we need to show the progress indicator as long as the process is happening so what we can do in the post image before the try block we can put set state and set is loading to true and then we can grab the search state from here and if it's success before showing the snag bar i want to show that the loading has i want the loading to stop and over here as well we're going to set it to false and i'm going to format the document and now let's try to display the linear indicator on the screen so the reason we had used a column over here in the body was because we wanted to show uh our linear indicator before uh just below the app bar so we can do that so if it is loading we can just show a linear progress indicator and if it's not loading we basically need to show nothing so we can add a container over here and we can format the document and let's try to see it in action so we can choose from the gallery now let's try typing some other description for the example rivan i'll just type this i don't know why then we can post and you can see the linear progress indicator showing but it's overlapping somewhere so i'm going to make some small changes and also after this is posted we don't want to show this screen so we need to go to the backspace so what we can do now is well first of all remove this container from here we'll add some padding which will be nothing padding but it will have an effect so what you can do is edge and sets dot only from the top zero and after that we can format this document add a const over here and after that we also need to show a divider so we can add divider we can format the document and the other change we needed was whenever we click the post we should not see this uh screen the reason we are seeing this screen is because we have used the condition that file is equal to null so what we can do is set the file to null so what i'm going to do is create a function over here which will say void clear image and we're going to set the state of file to null having that in place what i can do is you know after the success which is over here we can call the clear image part i'll do that after the snack bar has been seen cool and uh yeah let's try to do that let's refresh our app and let's select an image from gallery yo and we can post and you can see this is showing a pretty good and that's how we wanted it and after it has posted our image is not showing up because we have set the state to of the file variable to null and the last thing we would like to do over here is you know whenever we click over here we should be able to see the back screen again what i can do over here is wherever we are having this in the arrow back what i can do is have a clear image passed in and now if i select an image and if i click over here we are going back to the screen that's pretty cool so now let's try to display the post that we have stored in our database over here in the post section on the feed to work on the feed screen we need to create the feed screen layout uh so we'll create a feed screen screen in the screens folder let's create that i'll give this small and we'll import material dot first like we have done previously then we need to create a stateless widget we will call it feed screen for now and we need to return a scaffold we can take this feed screen from here and put it in our global variables home screen items list we can replace text feed with feed screen cool now we should be skiing nothing on the screen and that is exactly what we see now the first thing we want is an app bar so let me draw the layout of the feed screen that we are going to have so first things we are going to have is over here we are going to have a app bar over here we are going to have our you know our logo and over here we are going to have our chat icon then we are going to have our posts coming down and our posts layout is going to be something like having a circle avatar over here having the username then the three dots over here if the user is you know if we are the user then we should see the three dots so that we can delete the post then uh we should be able to see our image and then we should see a heart icon over here then a comment icon then a share icon then uh save icon sorry for my terrible drawing but this is the basic layout of our app and then we are going to have multiple posts so now first things first let's work on our app bar so over here in our scaffold we can have an app bar and our app bar will have a background color of mobile background color we don't want to center the title whatever title we'll have and the title we're going to have is well as i mentioned previously over here we are going to have the image and what is our image going to be we have all added it already i see underscore instagram.svg and since it's an svg file we are going to use the svg uh picture uh the flutter svg package that we have and we are going to call asset make sure to import flutter svg.dart and the asset is going to be assets slash ic underscore instagram dot svg then we need to give it a color of white and then we'll give it a height of 32. cool now let me format the document i'll put a comma here again so that it's coming pretty good now the next thing we need is over here we need to add a icon button where we can you know click over here and be redirected to the messages screen so we're going to create actions and in the actions we're going to add an icon button and there is not going to be any function that's happening so we'll give it an empty function and we're going to pass in icons dot messenger outline you can use icon packages to get it get the icon similar to the instagram package but i don't think we're doing that so now let me remove this and see if we've gotten what we wanted and it looks exactly like what we wanted so now let's uh work on the postcard uh post that we want over here so we're going to get out of the app bar widget and we're going to have a body and for now let's work on the ui not on the functionality of you know getting it from the firestore database and everything for now we'll just work on the ui so what i'm going to do is create a widget over here which will be called post underscore card dot dot and i'm going to be importing material dot package from here then then we are going to make it a stateless widget and call it post card then we are going to return a container with a color of mobile background color first let's put this as a body then we are going to return this it will be a constant and then let's see if we have yeah we should save this now the next thing you want to do is add a padding so we'll add a padding or from both the like the horizontal sides so that it doesn't stick over here so we'll do edge inserts dot symmetric and in the vertical direction from 10 so that it leaves spacing from here and the next postcard that appears from here then the container will have a child of column because we can see in our diagram we want a widget draw a widget over here then up uh then our image then a row of widgets over here as well so in our column we'll have children and in the children first of all we'll have the header function we can create another widget for that but i'm going to do it in the same uh postcard widget then we want this to happen so the first thing we want to do is make a container for this let's do that container and in the container we'll have padding and it will be edge inserts dot symmetric in the vertical direction from 4 and horizontal direction 16 then we need to copy this padding that we have because you want to add an extra padding from the right so we do copy with and we'll put write 0 then we'll have child of row as you can see we want a circle avatar our username and then the three dots so what we can do is put a children then we can have circle avatar and we'll have a radius of 16 a background image and the background image is going to be a network image and let's get the background image basically so i'm going to go on unsplash.com and find a random image copy image address and paste it over here then this is it for the circle avatar we should see something popping up all right now i'll remove this then the next thing we want is an expanded let me refresh our app and let's see this we are getting our circle avatar at the top over here let's see if it's comparable to our you know the layout we wanted beside it we want a username so we can create a username we'll again ignore the warnings that we're getting because it will be a dynamic value then the next thing we need is an expanded widget because i wanted to take all the space remaining space and over here we are going to cover we will have padding and the padding will be const edge and sets dot only and only from the left side do i want a padding of 8 because i don't want to stick it with the profile image so i'm going to give a padding of 8 then i'm going to have a child which will be column and i'm going to have a main access size of main access size dot minimum and a cross axis alignment which starts from the from the start then we have children and in the children we are going to have a text and the text should say our username so i'll just type username for you for now and we want some styling which is basically i just want my username to be bolded so i can type font weight as font weight dot bold and for another document now we are facing missing a parent thesis and format the document having that let's see and we are getting our username typed out over here pretty cool that's how we wanted it now the next thing we want to do is work on the icon button so we can get out of the expanded widget and create an icon button over here we are not focusing on the functionalities once again so we are just going to have this and we have an icon of icons dot more underscore vertical and we're going to put a const over here format the document and now let's see we are getting that actually what we're going to do now is when we click over here we should get a dialogue simple dialog box of you know uh deleting the post but will not work on the delete functionality now we'll just work on you know clicking over here and getting the dialog box to show over here let's do that so to do that in our on pressed what we're going to do is show dialog and it will be a context and the builder is going to have receive a context then it is going to return a dialog and the dialog will have a child of list view let me get out of here so that i can just use the autocomplete and the list to you will have a padding of edge in sets dot symmetric and we are going to have it from vertical 16 then we want the shrink wrap to be true we want our children to have just delete you can add more functionalities like report you know all that sorts of stuff we're just going to have delete for now and then we're going to map all of these uh children like whatever list is there we're going to map them we're going to receive e and we're going to wrap them with an ink well and the ink will have a child container and it will have a padding of const edge inserts dot symmetric from vertical 12 horizontal 16. and it will have a child of text e and since this is an ink well we need to add an ontap feature over here which will be empty for now and at the end of the inkwell what we want to do is first format the document and at the end of the inkwell over here we are going to have dot 2 list so basically what we did over here is gave it a children pro list of children then we had a delete over here we mapped through all the children for now it was just delete and then uh we returned an inquil widget with a container and padding so that we can click on it and whenever there is on tap we will do something about it so yeah this is pretty much it now let's see if it works if i go over here and click over here you can see the delete option coming up pretty cool now the next thing i want to do is you know show the uh the next thing i want to do is show the image over here so i can get out of this row i'll name this image section and on the top i can name it header section and where we're going to have a sized box of height let's say media query dot of context dot size dot height into zero point 0.35 not 0.035 then a width of maximum available width then we'll have a child and here we'll pass an image dot network and the image dot network will have some image which we'll grab from here let's grab one image let's grab this one we'll copy the image address and paste it over here then uh in the image.network itself we are going to have fit in there and the fit is going to be box fit dot cover after this is done let's see why we're getting this error so we need to take this size box from here and put it after the container not inside the container that was my mistake and we need to format this document now we should see our image showing up pretty cool now we need to show the you know the heart emoji the heart button the comments button and all of that stuff so we can go down over here and we can just say like comment section and where we are going to have a row as we know because we have to be you have to put all of this in a horizontal direction then we are going to have an icon button which is not going to have an on press and it will have const icon of icons dot favorite so it is either going to be icons favorite which will be color colors dot red you know when it's light and when it's not liked it is going to have a border of only white and this will be favorite border but for now let's just keep it this way then we'll have another icon button we can just copy this and paste it down and our icon is going to be comment underscore outlined and the color we don't want anything so that it's the default comment icon that we get and we'll have another icon button which we can paste and this is going to be icons dot send so that we get the share button now let's see what we're getting and yeah this is exactly what we wanted now the next thing we want is at the end we want to have a bookmark icon so that people can save it and with your knowledge you'll be able to complete that task i'm not going to complete that task so we'll have an expanded icon and we'll have child which will be aligned and the alignment will be at the bottom right corner so we can do alignment bottom alignment dot bottom right then we're going to have a child and our child is going to be an icon button it will have an icon which will be const i can icons dot bookmark underscore border and it will also have an on press function which will return nothing and we can format this document and let's see if you're getting that and yep this is exactly what we wanted so the ui of our this is done this part is done the next thing we want to add is a bit of description over here and then the number of comments that we have received let's work on that so over here after this row where we can type description and number of comments and we'll have a container we'll have some padding all the usual stuff don't get scared about you know the padding stuff it's just trial and error you'll have to try some values if this doesn't fit you'll have to change it by some pixels and then try it again it's it's not that big of stuff then we after this padding has been done we want a column and it will have a main axis size of main access size dot minimum across access alignment of cross access alignment dot start we'll have children over here and the first child over here is going to be a text and the text will say suppose 1231 likes and it will have a style of theme dot of context dot text theme dot body text two so this is the usual uh you know theme that we have in the you know the dark over here in the main dot dart file if we go you can see it in the theme data dot dot all of this so we're just copying that text theme that is provided to us by the dark function and you can see we are getting the number of likes we also need to add a bit of you know font weight so what i'm going to do is i'm going to wrap this with a widget called default sorry default text style and the default text style will have a style of theme dot of context dot text theme dot subtitle to dot copy with and we are going to add some font weight let's say we'll add a font weight of 800 and we can format this document and go over here we'll see it is a bit bolded now the next thing we want to add is a bit of spacing and then we need to add you know the username of the user and then a bit of description so what we can do is after this default text time we can have a container and the container with b of the width double dot infinity will have a padding of const edge inserts dot only top it it will have a child of rich text rich text basically allows us to have multiple texts in it expands if i have to be more precise and then we can arrange them in a row wise order so that we don't have to create a row and then do some configurations this is like a one in uh this is like a row widget for text there are multiple moon features that rich text provides us like having a text style for each and every text you can see it over here basically we can set the text to text pan and the text pane will have a style of const text style color and the color is going to be white then we'll have children and in that children we're going to have more text bands so the first expand is going to show the username so we can write text plan and the text will be user name and the style will be text style of font weight dot bold now what we can do is put a const in the text style after this expand what we can do is copy this text ban and put it up again and the description is going to be let's say hey this is some description to be replaced then we can remove this textile and format the document let's see we are getting this which is a pretty cool output that and is similar to what we wanted we can even leave some space over here so that there is some spacing pretty cool so after this container over here we want to show the number of comments so we are going to add a container which says child which has a child you know which says text view all let's say 200 comments and we'll have a style of text style we'll have font size of 16 and a secondary color then we'll have a bit of padding as well so we can do it at the top padding edge inserts dot symmetric and from vertical 4 so that we leave a bit of space from the description and down so we can format this document and let's see our output view all 200 comments looks pretty good now i can format this and i'm going to replace i'm going to wrap this with an inkwell widget so that i get the ontap feature and if i click on it i'll be redirected to the comment i'll save this all right now the last thing we want to show is the date over here so what i can show is after this inkwell we can probably just you know copy this container from here and paste it down then our date is going to be let's say 22 12 20 21 and we are going to have a padding of yeah this is what our padding will be let's try to run our app and see how it looks looks like the way we wanted it yep now uh we'll try to uh get the values from firestore cool now we have the ui of our post and the feed so the next thing we want to do is get the data from our firebase firestore and display all of these posts on our feed over here so to display uh the user post from the firebase firestore on our uh screen is what we have not looked at before we have looked at you know calling the get method on the document so we have a collection and we have a document and over there we've got the get function but over here we don't have a specific uh you know uh you are a document on which we have to call we have to call it on all the documents that are present in the posts collection so we are going to do that and also we want all of them in real time as we saw before get on the get on collection on the document was a onetime read we don't want that over here whenever we click over here on the hard button the like counter should increase in the database and should reflect over here whenever we comment it should reflect over here and this is what we want and all of this whenever a new post gets posted it should show up directly on the screen and we don't need to refresh so that's what we are going to work on everything is going to be real time so let's work on it so in the body we are going to replace this post card right now with something called a stream builder because to real uh to listen to the real time uh stuff we need to use streams so uh we'll pass in a stream over here and what is our stream going to be well we're going to call in the firebase firestore and its instance dot collection and which collection do we want users collection a post collection sorry so we'll get posts and over here we can't get we won't do get because it will return to other future and this is not a future builder this is a stream builder and we want to do a real time listening so what we can call is snapshots you can call snapshots on a document id as well if you want but uh we want to do it for all the post ids that are present over here we want to display all of them so we're going to use snapshot and we'll get a builder now the builder will get two functions a context and a snapshot and make sure to explicitly mention the type of the snapshot which will be a sync snapshot which will be of the type query snapshot and this query snapshot will be of the type map and this map will be string comma dynamic and if you don't want to write so much of code for the snapshot type what you can do is follow a cheap trick which i'll show you in a while using which you won't get any error so if we do if snapshot dot connection state is equal to connection state dot waiting this is similar to you know uh our main.dart file we use stream builder over here and we check the connection state and everything similar to that we are going to do so if our connection state is waiting what we are going to return is a center centered circular progress indicator so we can do child circular progress indicator and after this we can return a list view builder because we want a list of posts so we can do list view builder and in the item builder we can have a context and an index and over here we'll get a container and in the container we'll have a child of post card put a semicolon and actually we can even remove the container there's no need of the container as of now and we can remove this semicolon and this is not going to be a constant as of now because we're going to pass in some arguments to the postcard so that we can display stuff over here cool now we have to mention the item counter where and our item count is going to be the snapshot that we have where snapshot dot data whatever data this snapshot has because it's not going to be null and uh we're going to have dot docs dot length it can be null so it can be considered the item count as length as zero but over here what we're doing is snapshot.data so we're getting the data and uh we're calling the docs method on which which which will give us a list of the document ids that we have where basically the all of these and then we can call the link function on this list and it will get the length of the postcards so now if we run this we should get three postcards with the static data and that is exactly what we get because we have three documents over here now let's try to render the data that is present in the postcard over here so to do that first we need to pass in an argument to postcard that these are the data of our posts so we can do snapshot dot data dot docs as i mentioned it covers all of these uh three dogs that we have and we're going to grab one dock from here at a time because we are calling list view builder on it it will uh run three times the and the first time the index will be zero then one then two so we'll call the docs and we'll grab the first uh document from here so that will be index and then we'll call dot data on it now if we go in the postcard we can accept a value of snap over here and we always want the snap so we can do it as required this dot snap we can format this document now we've got the power of snapshot over here so we just need to display the snapshot so how can we do that well first of all we want to display a network image our so this network image is basically our profile picture not our profile picture whatever the whoever user posted this so his profile picture so what we can do is snap at and we want to grab the profile image so we can do prof image prof image and if we save it we should see the profile image showing up all of these you all of the three users are the same users so we are not getting any difference over here but it will get the profile image over here basically then we need to show the username so we can do snap and we can pass in username if that's what the field over here is yep we can see this and we should get our username as well you can see all of them rivan ranavat now i want to show a different image so what i can do over here go down i'll replace this image.network with snap and it will be post url we can format the document and let's see the different images that we have and this is a confirmation that we are getting three different different images but it's posted by the same user as well now let's get the likes thing so if we go down the like should be replaced with snap likes but as you notice over here the likes over here is an array so we need to do snap dot lie snap at likes dot link and we'll do string interpolation over here dollar and we'll pass in like somewhere so that we see 0 likes right now pretty cool after that we again need to display our username so we can do snap username then snap and we'll we'll pass in description so that will be description aware and lastly we'll have comments over here which we'll uh fetch using future builder because our comment over here is going to be you know uh in a sub collection so it won't keep track of the sub collection it only keeps track of the current collection and its documents not the sub collection for the sub collection you can either again use stream builder or you can uh do use future builder and we're going to use futures for this so we can just keep this stationary and for the date published this one is the key over here so if you want if you want to get the date we can't do snap date published because if we go where the date published is not a string it's of a type time stamp so uh we can't do that so instead what we're going to do is use a package named as will go on pub.dev you can grab the intel package it will be mentioned in the description below you can grab this package you can add it to your dependency you have to stop all the app processes that are running in the background so over here we are going to use date format dot y mmd basically your month month and date and then we are going to format this with snap date published but over here format takes in a date time so what we're going to do is pass this and convert it to date and we're going to format the document we're going to save it now let's rerun our app and wait for it to show up so our app is loaded up and let's see the thing that is coming and we can see that the date is coming up properly december 22 2021 you can read the intel uh documentation to know more about it like if you want to show in some other format there are lots of varieties from which you can check and will format your apple uh from at your date and you can even see that we are seeing the description but the username and the description are you know attached together i want to do some spacing so what i can do is over here in the snap description i'll do snap string interpolation i'm going to cover this and i'm going to leave one space so with this i'm able to leave some space after the username so the next thing we need to do is whenever we double tap this image or we click over here we should see some animation and then the data should get uh updated in our firebase firestore let's do that so for the like animation we need to create another widget and we'll call it like animation let's create that and over here we are going to import material dart and we are going to create a stateful widget and we'll call it like animation now to create this animation we are going to use something known as uh twin animations let's do that so to access you know the between animations and some controllers we will have to inherit from a single take provider state mix in so yeah then we need to create an animation controller animation controller now we have to call in in its state and in the init state we'll have to set controller to animation controller and the vsync will be this and we'll start a duration and the duration will be in milliseconds and the duration we can give is what we can accept from the constructor over here so we're going to have multiple uh constructor arguments the first one will be a child what we need to you know display what li what should the like animation like what should be the child of this like animation parent widget then we'll have a boolean which is is it animating or not then a duration which will be how long the duration of our this should be like animation should be then a final void callback which can be null which will be on end and then a boolean value which will be small like we know the purpose of all of this while we are doing this now let's require all of this seven so i've required all of these fields you can check that this your duration has a duration or if no duration is mentioned it can be of duration of 150 milliseconds and then if the small like is not mentioned it will be false that is it's the original value then over here we can we have created an init state and the milliseconds can be widget dot duration dot in milliseconds and then we're going to use this syntax over here which basically uh divides it divides some duration in milliseconds by two and then converts it into end then the next thing we want to do is we need to create a scale so let's create a scale late animation double scale and the scale will be scale which is equal to between double and the animation should begin from 1 and end at 1.2 and we need to animate this and to animate this we need to pass in the controller using which we need to animate so we can pass in the controller enemy now the next thing we want is did update widget over here so this uh which it will be called whenever our current widget is replaced by another widget and so if we if the current widget is replaced by another widget what we want to do is we want to check if the widget dot is animating is not equal to the old widget that we get from the parameter layer is animating what we need to do is start animation now this will be a function which we are going to create now so the start animation will be an asynchronous process and we'll check if the widget that we have is animating or if the widget is small like so if the widget is still animating what we need to do is take the controller forward then we need to reverse the controller then we need to add some delay so that the heart animation i can you know stays there for a bit of while then we can do const duration of milliseconds 200 and then we need to check if the widget dot on end is not equal to null then we just need to end the widget so we'll call the call voidcallback function that we have received from the argument and we'll call the exclamation mark since it can be null and we also need to dispose our method from here like the controller from here so we can dispose it controller dot dispose now in our widget build function we need to return something known as scale transition and this scale transition requires a scale which will pass in a scale which we created and a child which will be widget dot child now a like animation widget is completed so uh basically this duration tells us that how long the like animation should continue the child is basically to have the to make like animation the parent widget then we have a on end which will be called to end the you know the like animation then a small like to check if this like button was clicked or not because there will be a bit of you know a bit different animation for it so small like is for this so that if this is clicked we can still animate and uh yeah this is all of the parameters that we have and this is the way we have animated them so we can go in the postcard and over here we can check our favorite so where in the i can button we can wrap our icon button with a widget which will be like animation our custom widget and we'll pass in is animating over here now how do we know that the like animation is animating or not so to do that we need to basically check if so we need to basically check if the snap we have and the likes over there basically the array of snap likes contains the user id or not so we can check that if it contains the user id to get the user id what we can use is provider so we can call this final user let's import the user user is equal to provider dot of context and it will be of the type user provider dot get user and then with that user we can go down where our like animation was and we'll check if it contains user dot uid then we'll make sure that the small like over here is true because this is a small like button and we won't see any difference over here because well uh the use snap likes uh won't update because we haven't set the update method over here but we'll do that and after that we'll see the animation as well but uh we can go on the picture so whenever we double click we should see a heart icon coming up we can do that so we have to move to our network image so we have our uh sized box over here so we are going to wrap the size box with a stack so we have wrapped the size walk with the stack this is because we need to show a heart icon on the top of the image whenever the user double clicks so yeah we have done this now uh we'll have a size work and after that we're going to use like animation widget that we have and it will receive a child of const icon icons dot favorite and we need to show up icon of color colors dot white and the size of this is going to be a big so let's just say it will be 100 now we can format the document and where we have to pass in the is animating value and is animating value will be something known as we'll have to create is like animating value and we also have to pass in the duration the duration will be const duration and i want to show it for some time more so it can be 400 second milliseconds then we also provide the on end callback and in the on end callback we'll basically have to set the state of is like animating boolean value that we'll have to false so let's create is like animating uh over there so let's go on the top and create a value first of all we'll have to convert this postcard to a stateful widget and we'll have to use boolean is like animating and we'll have to set it to false and then we'll have to take this value go to the bottom of the screen basically wherever we add the stack and over here end we'll have to set the state and we'll change is like animating to true and also we'll have to cover this stack with the gesture detector because we need to detect if the user double clicked on this image or not so we'll have to cover this with a stack itself so we'll do on tab and on tab not on tap actually it will be on double tap and this is a difference between inkwell and gesture detector gesture detector provides us with a ton of various uh you know uh functions uh and inkwell provides us with basic features and on double tap what we can do is set the state of is like animating to true now let's save our app and run it now let's see how it looks now you can see this is showing up and it is in the send it's not in the center so i'll change the alignment of the stack to alignment dot center now let's run our app and you can see that it's showing up in the center i want to maybe increase the size of this you can increase it by going over here and increasing the size to let's say 120 and yeah looks good now we'll have to cover this like animation with something known as opacity and this is because we don't want the like button to show up all the time we only needed to show when r is like animating boolean is true so we can just do this and actually the opacity it doesn't provide us with any animation i want the animations to show up when you know it's fading and when it's showing up so i can cover this with animated opacity a widget provided by flutter and we'll pass in a duration of const duration milliseconds will be 200 and opacity will be based on the is like animating so if the it is animating we need to completely show it right and if it's not then we don't have to show it so we can turn it to zero the opacity has to be a builtin a value of one and zero now we can run our app and see if it's working or not so if we do that you can see this showing up but it doesn't fade away because in our on end function we have set it to true we have to set it to false and now let's try it try to see so if i do this it shows up and disappears it shows up and it disappears and this is the like animation we wanted to see the animation over here we'll have to configure uh and update our values in the firebase file store because this value is linked over there so to do that we'll go to our firestore methods class over here and we'll create a function named as like post we're going to have a return type of void over here because we're not suspecting any you know error that can happen and if that happens we don't want to show it to the user we won't show any output only so that's what i'm going to do if you want to show the error to the user if some error occurs you can uh you know display it in the rest of the variable that we created with res and that format but where i'm just going to do this so basically i'm taking in from the parameters post id uid of the user and the likes list and we're going to create an async function we are taking list of likes from a parameter only because we don't want to make another call to our database to read the number of likes when we get the number of likes in our feed screen itself using the stream builder so what we can do over here is have a try catch block and whenever any exception comes in what we're going to do is print the exception in string format and in the tribe block what we're going to do is whenever we like the post if i suppose like the post i want to make sure that if the list of likes already contains my uid that is uh the list over here will contain uids of the user so i want to check if the likes over here contains the uid then we need to dislike the post right suppose this post is already liked i'll click over here so i want to dislike the post so to dislike it i have to remove from the likes ira miuid and if the likes contains does not contain my uid then i need to make sure that i add my uid in the array so what can we do we can first check if the likes contains uid that means uh we have already liked the post in the past so what we're going to do is take the firestore collection posts and we'll go to the post id document so suppose this is our post so we'll take the posts then go to our post id and then we are going to uh call update aware not set not you know add or anything for any other function that we saw update because you need to change only one value if you do set over here then you need to pass in all the values and well uh this will be a lot harder and uh we just have to do update aware so that we can update only one uh data over here which is the likes array so in the likes array what do we need to update so well we just need to add our uid over here so if there is an already existing like over here we need to add our uid as well so to do that what we're going to do is take field value dot add a union array remove sorry and then we're going to add our uid so with this basically we've told uh firebase to uh go to the likes field and then we need to take in all the uh take in all the array members and remove only the current uid of our user which is this uid that we are receiving from the parameter so we need to remove our uid from here and else what we can do is take this file store again and where we'll call array union and as you might have expected if the likes does not contain our uid then we need to uh take in the all the already existing array members and add our uid in it cool after that is done we can first of all await all of this function and save then in our feed screen uh in our post card actually in our postcard file uh we'll have to go to our uh two like options first we'll go to the double tap animation heart icon one and over here uh in our own double tap what we're going to do is set firestore methods dot like post and in the like post let's see it's a future void so we can avoid this and call async over here and we can do like post and in the like post what we need to add is post id we can get that using now we have to do widget dot snap because it has become a stateful widget and we'll have to do widget dot snap and the name will be post id then the next thing we want is uid so we can do user dot uid and the last thing we need is likes to get the likes we can again do widget dot snap likes and now if i save and try to do it again we should see that on double tap we should get our likes in the post id so suppose i do this so as you can see we are getting some error over here we are getting some requested document not found and over here the error we have made is we have spelt misspelled posts so do that and after that we should again rerun our app and let's see it in action so i'm over here on the first post i'll do this and you can see the like counter incremented because we are done post at likes and you can see that our likes uh id now consists of our uid and now if i again do this it turns 0 that means it removed the uid from the ira and you can see this updated as well so now uh we also need to do that for other type so if we click over here we should be able to like the post so what we can do is just copy this from here and in the like animation over here what you can do is convert this to an arrow function actually we want this function because it's an async process so we can do async and then put our like post over here then we'll format the document and let's try to run our app so if i click over here you can see a little bit of animation that i have previously mentioned and we're getting one like now this is all always showing red we need to change that what we can do is over here in the favorite icon itself we need to make card we need to do conditional rendering so we need to check if the widget dot snap dot likes contains user id basically this line that we wrote if the snap contains the user id what we need to show is well the heart icon basically this means that the user has liked the post so we need to show a filled favorite icon and if it's not then what we need to show is a const icon icons dot favorite border and we'll put a comma wire let's format a document and see if it's showing up you can see this happening i'll reload my app and we have already liked the post so it's showing up a heart now if i remove this post it will be zero likes and if i again restart my app we shouldn't see our heart over here now i can like it again i can remove the light you can see the slight animation that's taking place this is because of the like animation uh widget that we created over here and now if we go over here we can see this showing up all of this is possible with streams that we used in our app the snapshot and everything now let's work on the comment screen so to create the comments uh first we'll have to display it on a new screen and in the bottom we'll and after we do that we have we will decide how our layout of the comment screen should look like so let's create our comment screen and where we're going to import the material package and we will have to create a state full widget comments screen then we'll have to return a scaffold because it's a new page that we're drawing then we need an app bar and the app bar will say basically it will have a background color that is mobile background color and then the title will be const text comments and we'll have to turn center title to false so that it comes in the left align position and after doing that let's try to see our app so in the feed screen whenever the in the post card screen sorry whenever the user clicks on the comment outlined uh icon what we need to do is transition the user to another page so we can use navigator can do navigator dot of context dot push and we'll have material page route we'll have context and then we're going to pass in the comments screen you're not making it a constant because after some time we'll have to pass in you know a list of uh some pop some parameter so let it be this way then if we click over here we can see the comments that are happening now let's decide how our app is going to look basically there will be a lots of comments so we'll have a comment over here a comment over here and in the bottom we're going to have a text field and this text field will be for commenting so we can write c over here and then uh in the comment section what we want to do is show the profile picture of the user then we want the usernames username of the user then whatever text the user wrote and over here we're also going to have a like button but you're not going to implement the features of the like button i'll leave it up to you and you have enough knowledge to create the like feature on the comment screen cool and over here we are going to have some more features like comment as and the username of the user then the profile picture of the user so small functionalities but yeah we're going to make use of our state management and output all of them so this is how the app is going to look like first let's work on the text input field in our comment screen class we will have a bottom bar navigation bar and in the bottom navigation bar it accepts a widget so we can safely type in any widget we want and i want to have a safe area widget which will be apparent and in that we want a child of container which has a height of k tool bar height this is basically you know the toolbar height of the app bar and then we'll have margin and the margin will be agencies dot only from the bottom we leave dot of context dot view inserts this is something new that you're seeing dot bottom and the padding will be from the left and right agent says dot only from the left 16 and from the right eight after that this will have a row and the row will have lots of children we have a row over here because we want to show the text input field and beside that a comment or post button over here that's why and also a circle avatar as you can see over here so in our row we first need to have a circle avatar you know first we'll have to pass in children and the children will have circle avatar and there is going to be a background image and we can use network image again we can go to our friend unsplash.com can grab the first image address and paste it over here then we'll have a radius then we'll have a property of radius and the radius i want to be 18. now we can format the document save it and we should be able to see some output over here and you can see we are seeing a profile picture this profile picture is going to be our profile picture by the way cool now the next thing you need to do is have a text input field over here so what we can do is create a text field and we'll add a controller first and for now let's not pass in the controller so we want to have a decoration and the decoration will be input decoration then the hint text can be comment as username whatever username we get like whatever our username is and we'll have a border of input border dot none let's save it and we are getting some errors over here this is because the text field and the size issues that we have so what we can do is wrap this and expand it so that it takes the maximum possible space available and we can save it now if we run our app we should be able to see the comment screen and we can see it over here but i want to leave some padding over here because it's kind of looking gross so we can wrap text field with the padding and the padding has to be only and from the left it will be 16 and from the right it will be eight having that in place we'll save and you can see it's looking much better the last thing we want to add is an ink well widget over here which will be used to click on over here and then we can post it so we'll have inkwell and it will receive an ontap function which will be not empty for now and we'll have a child which will be a container we'll again add some padding from the vertical we'll have eight and from the horizontal we'll have eight then we need to have a child of constant text which just says post and the style can be text style of color colors dot blue accent and we can format the document and if we see we are getting the post over here pretty cool and if we change it to blue color that we have from the colors or dot file let's see how it looks i don't see much major difference yeah we can just keep this blue color over here now the ui of the username part is done we can go to the top and build a comment card basically so every comment will have a comment card just like the post so we had a post cards over here we want to do the same for the comments so we can go over here and create create comment cards so in our body what we can do is show a comment card so in our widgets we'll create comment underscore card dot dot where we'll again import the material package then we'll have a state full widget of comment card and obviously we'll have to get a snapshot from the user but will not take that now we are just building the ui of our app then the container will return a padding of const edge inserts dot symmetric and from the vertical we'll have 18 padding and horizontal 16 then we'll have a child of row by row because we need to show the username the user profile the username the text that the user has entered and the like uh feature that we have so in nro we'll again have a circle avatar again we need to pass in children then circle avatar background image and the background image can be network image we can copy another image from here let's say this run and after that we'll have a radius of 18 we can form at the document and after this circle avatar the next thing you want to show is you know first of all let's import this comment card so that we see some of the stuff showing up so yeah this circle avatar shows up and the next thing you want to do is show the text of username and the description and the text that the user enters as a comment so what you can do is create a padding padding will be from the left only 16. in our child we'll have a column and the column will be cross axis alignment cross access alignment dot start which means it will start from the start then the main access alignment will be main access alignment dot center then it will have a bunch of children and in the children we need to have something known as rich text that we have looked at earlier and the text will be a text span and the text fan can have children and in the children it will be text then the text band will have a text of let's say username over here which will be bolded and after that we can again copy this text span from here paste it over here and we can write some description to insert what we need to do is remove this bracket from here and go up here we don't want any styling for our description now let's try to see it and you can see it's showing up in the center very cool after this rich text we need to show padding after this rich text we actually need to show you know the date of the user so after this we need to have a padding again which will show and this padding will be for the date so we can do edge and sets dot only top four then it will have a child and the child will be text and it will show the current date so what is our date let's say 23 12 21 and we'll have a style of text style and it will be pretty small so we'll just set 12 and a font weight will be a font weight dot w 400 not very bolded and not very uh you know not very thin as well so we can save this and let's see we are getting 23 12. cool the last thing we need to add is outside this column and outside of this padding in our row we need to add a container and you might have guessed it why we need this container for the like button so you can do const edge and search dot all eight and it will have a child of icon icons dot favorite and the size will be 16 we can set it to const over here for the document now let's see if you're getting that icon where but as you can see it's looking pretty shabby over here it's all coming together which i don't like so what i'm going to do is wrap this padding with an expanded widget so that it takes all the available space and we can save it and see all of this comes into place so the next thing you want to do now is you know display and you know store all the data that we comment in our firestore database it will be fairly easy to do so i'll just give you one hint what we need to do so in our posts over here we have a post id and over here all the data but we don't want a comment as one of the fields aware we want comment as a sub collection so that you know we can have a look at what sub collections are and how can we get some data from there so yeah you have to do that pause the video and try it on your own if you fail you can always see it and learn from it so the first thing we need to do is change all of this the user profile image the username so over here what we can do is again use our provider i'm going to copy paste it i'm going to import this user provider then the user class and then the provider package you can just press command and full stop to get all of this no you know correction suggestions and with this user we can go over here replace the network image with user dot photo url and over here comment as this will become user dot username and we can save it now let's see we are getting our username rawandanath and our profile picture which is pretty cool so now the next thing we want to work is whenever we click on the post icon we should save our data in the database so let's do that in our firestore methods we will create a function which will be future string of post comment and it will generally take in a post id so that you know we can go to the post id and in that collection we can create one collection and it will have a text that will require whatever we type in over here the uid of the user to store it the name of the user and the profile of the user the reason you're storing the user id over your along with you know profile pic and username is because uh when i'm not adding this functionality but for you all if you click on this username over here you can wrap the username text with an inquil widget and when you click over here it will show you the profile screen that we'll create in some while and yeah this is why we are storing the uid and name and profile pic so here we'll have a try catch block so you can do try catch in case of any exception we can just print it e dot to string we can format this document then uh the then we need to check that if the text is not empty whatever the user has entered is not empty then what we can do so if the text is not empty what we can do is first of all get the firestore dot collection and our collection is going to be posts collection and then we'll go to the document of post id and over here make sure to add another collection because we need a sub collection in that so we'll add collection of comments and we are going to pass in another document id so we have our comments collection over here then we'll add a post a comment id that will generate using uuid package and it will have you know the comment will have some other things like profile pic name of the user uid of the user the text that we have all of those stuff so we can just do that so in the comments dot collection and we'll create a comment id so what we can do over here is string comment id and we'll do constant uuid dot version one and we can take this and pass it in the dock comment id and dot set it and after this uh we need to pass in the profile pic and everything for this we are not going to model our data because comment isn't necessary right now because we won't be using comments anywhere like post and user but if you want you can surely make a model that will be a better choice i'm not going to do that and we can have profile pic as profile pic then the name of the user as the name of the user then uuid and then we'll have lastly we'll have date published and the date published will be date time dot now and yeah this is pretty much it we'll await this because this will be an asynchronous function and this is pretty much it if the text is not empty then we don't want to do anything so we can just type for us that you know text is empty or you can follow the rest format that we have and where our post comment will be future void you can always follow the rest format i'm not going to do that and we can see this post com we'll grab the post comment from here go to our comment screen and beside the on tap we're going to have this and this will be an async because we need to await it so we can do firestore methods dot post comment and the post id will be well we'll have the snap that we get so it will be final snap and we will require this so required this dot snap basically the snap will be the snapshot we will be using stream builder again and you're familiar with stream builder so we'll get the snap again similar to the post screen that we did and we can get the snap and over here we have widget dot snap and we'll have a post id then a widget dot snap text give the uid will do user dot uid then the name will be user dot username and lastly the profile pic will be user dot photo url we can format the document first of all let's and over here we are going to await this post comment the future we have and then we can save it last thing over here is in the comment screen we can't directly you know show this to give the snap required what we'll have to do is pass in the post id and the post id will be widget dot snap until we post id dot to string let's see why we are getting this error we have to pass in the snap argument so we can do snap this yeah and we can format the document let's save and rerun our app so if we click on the comment screen we should see this and now i'm going to comment over here we can see that we have no sub collections on any of this so i can type over our first comment and we can hit on post and where we can see that we are getting an error type string is not a type sub type of type of index where the error we had is we are passing widget dot snap post id we want to send the widget dot snap only and not the post id and again if we go over here we should post something like hello world and we can post we are again getting this error and over here we are getting this error because we made a very silly mistake uh first of all we need to add a controller over here so what we can do is final text editing controller and we'll call it let's say comment controller which will be equal to text editing controller then we need to set the state so we can have oh sorry we'll have to call the dispose method over here and in the dispose method we are going to dispose of the comment controller right now itself and after this uh we have to take this controller go to the error part that we're getting and we'll have to do comment controller dot text and we also need to add a controller to our text field comment controller so we were getting this error because we were calling widget dot snap text which didn't even exist because the post doesn't have a field called text it only has a post id which we are passing in and the comment controller dot text that we have now pretty stupid error that we had we forgot to do that so now if i go over your commentat hello world and we're not getting any error that means we should get a sub collection somewhere we'll have to refresh our database and if we go we get a sub collection comments over here and if you go in the comments we see another id of the comment and we it has a comment id that is similar to this date published name profile pic text and uid that means we can store our comments successfully in our database now let's try to output the comments on our screen to show the screens what we can do is use a make use of the stream builder again so that we can listen to it real time and what we can do is in the comment screen instead of having the body as comment card we can have stream builder and in this stream uh we'll have to pass in this sub collection of comments so what we can do is go to the firebase firestore dot instance dot collection of posts then the post id and we can get the post id by snap dot snap add no sorry widget dot snap and we'll pass in the post id and after that we can have again another collection of comments where we are going to listen then snapshots and if we format the document we should be able to see this error going away the next thing you want is builder and our builder is going to have a context and a snapshot and as i mentioned previously you will have to tie um you'll have to explicitly tell the type of the snapshot but we have a cheap trick that we can follow you want to check first like if snapshot dot connection state is equal to the connection state dot waiting that means we need to show a circular progress indicator so we can do return constant center with a child circular progress indicator we are going to return that then after that we need to return a list of comments so we'll use return list view dot builder and we'll have item builder again we'll have context and index over here then we'll be able to return after uh this list is done we need to return comment card and the comment card has to give in something which we'll fill in in some while so yeah and we also need to pass in the item count now this is where the problem comes in if we don't explicitly mention the type of the snapshot so if we do snapshot dot data and we mark it as nonnullable then we can't call doc's property over here you see we want to do this snapshot.data.docs but docs is not provided to us because this doesn't know that we'll have uh you know uh us async snapshot which will be a query snapshot and then a map inside of it you know it doesn't know this so we can either again type uh the async snapshot query snapshot map string dynamic that we did earlier or we can just bracket this out and say as dynamic so this means that the snapshot.data can be dynamic so we can call docs over here but the only downside of using this is we won't get the autocomplete so if you're wrong over here you won't even get to know so this is a cheap trick if you want to follow you can go with this or you need to explicitly mention the async snapshot thing over here cool i'll keep this for now and now let's try to you know see this so if i go you can see the username over here and everything which shows up only one comment because we have only one comment then we can type another comment hey second comment and we can post over here and you can see our second comment showing up but the text is a bit different because we need to pass in some text also over here uh we need to make some spacing and after this is done we need to remove the comment uh text from here so in our post what we can do is after this post comment is done we can set the state of text editing no sorry we had comment controller comment controller dot text dot which is equal to this we'll set it to empty and if we try to send in another one let's say we'll have to refresh our app because the state of this app changed and you can see they're showing up now if we type hey third and post it over here you can see this comment disappearing after this has been posted and all of this is real time showing up because we have used stream builder now let's go to the comment card and edit some of this function now let's see what error we're getting and this was the keyboard error that we've gotten that's not much of a big deal you'll not get this on a real device ios simulator sometimes causes these issues then uh the next thing you want to do is in the comment card that we pass over here we also need to pass in the snapshot of this uh stream builder so what we can do is snap short dot data dot docs dot length and again we'll have to do snapshot dot data as dynamic that's why i would recommend following the other method of async snapshot because every time you'll have to do this and even no autocomplete that's a frustrating thing and now in the comment card what we can do is have a final snap over here then we need to require this snap so we can do required this dot snap at no cost this can be null and the network image can be let's say remove all of this and we can have snap dot sorry widget dot snap and the we'll have to pass in widget dot snap dot data actually over here uh we don't have to pass in snapshot.docs.linked actually we have to pass in the snapshot.docs at that index so in our comments uh suppose we have this post and comment over here so what we need to do is snapshot.data so we'll get that and the docs these three documents and we have to grab them by their indexes so zero one two so we'll get the first zero one then the second then the third and over here we'll also call dot data so that you know uh we don't have to do that again and again over there so we can remove widget.snap.data from here and instead just write widget dot snap and then we can pass in profile pic i think that's what we named this profile pic correct now i'll copy this and we just have to change this part from here but let's see if we are getting the change description changed and our username has changed which is pretty good now we can go to the username have a username as username and remove the single inverted comma from the side save this and you're not seeing any username so what you can do is refresh and go to where and we are not seeing any username because we saved it as name over here let's fix that and we can see right run it now i want to do string interpolation over here again because we need to leave some space from here so what we can do is leave some space and we can do widget as copied widget dot snap and we'll pass in the text over here hey hello world hello hey second comment hey third and the final thing we need to do is this date formatting so what we can do is date format which is from the intel package dot and we have to follow ymmd format and we need to pass in the date over here so what we can do is widget dot snap and we have named it date published over here and we know that this accepts a date so we can do dot to date and pass anywhere after this dot ymd we also need to call the format and we also need to pass in this as a function so we are calling date format.ymmd and we need to format in this document widget dot snap date published and we're converting the date publish to date because it is a time stamp that we're receiving from the firebase file store we can also put const over here so that we don't get the error anymore and we should see december 23 showing up which is pretty good and this is all that we need to make change of and if you want you can have a heart icon over here which basically helps you to like and i think you have enough knowledge to go ahead and do this because basically this is another comment class that we have you can create a like list over here so you can have a likes list over here addy basically and then it will be empty for the first one and whenever the user likes we can use rf value uh field value dot array union or array remove similar to what we did for this like option over here and you can even add the you know the animation part you just have to cover it with the like animation widget and pass in the duration and everything i think you'll be able to do it so now if i type again over here let's say hello how are y'all and post it over here we should see hello how are you all showing up over here the only problem now i have over here is this is coming up in a random format so what i want to do is not have this in a random format but have this in the sorted manner like the according to the date published so what we can do is in the comment screen in the snapshot what we can do is after this collection we can make use of dot order by and with this we can sort the comments that we have by some particular field which in our case will be date published and uh by default it's descending to false and we need to make sure that the descending is true yes let's try descending to true and you can see hello how are you all hey third a second so whatever the newest comments are that will be on the top and if you want to do the opposite or you can do descending false and if we do that you can see the old ones coming up at the top and the new ones coming at the bottom but we don't want to do that so i'll keep this and you can see the newest comments coming at the top so this is the order by property which uh firebase provides us you can even use some other field like you know profile pack uh sorry the likes that we created right now and if you want to add that but we are not going to add that so uh you can add based on the likes and you can descending it with the number of likes one user has and according to the text according to the uid if you want like anything basically but you would anyways prefer date published because that's how most of the apps are so we have our working comment screen as well the last thing we want to do for the post is uh over your view all 200 comments we need to make sure that we have zero comments over here or three comments right now over here so what you can do to do this is go to the post screen post card actually and over here we are going to call the init state from where we are going to get the data of our app so in init state and we are going to have a future over here which will get us the comments so we can type get comments we can create this function void get comments it will be an asynchronous function so it will basically be a future and it will get us the comment length so we can type end comment length equal to zero and the comment length will be this so what we want to do is get the data so we can do the get function we can use so what we are going to do is await this and call firebase firestore dot instance dot collection in our posts then we can go to the dock and we can pass in the post id which we will get from the snap that we have gotten from the constructor we can do post id and after that we are again going to go in the collection of comments and then get from there and if you do hover over here you can see query snapshot we have seen document snapshot this query snapshot is similar to document snapshot only that the document snapshot is received when we call a get on this dot doc and query snapshot is received after we get the uh after we put get after the collection so you can give it a type of query snapshot and snap and await this so the difference between query snapshot will be that we will get a list of comments if we do get so what we can do is comment length which will be equal to snap dot docs as we saw it will get us the list of all the documents and then we can do dot length and we can say this and after that we can even wrap this and try catch so that you know if we get an error we can see it in our log or we can display it to the user so we'll have our catch and in this cache we will have show snack bar and the content will be whatever error we get e dot to string and we'll pass in a context then after that we are going to set the state of our app so that we can see the comment link and we're going to format this document and c after this we can take the comment link that we have and go down to the bottom where we say view all 200 comments and instead of that we can say view all comment length comments and if we say that we should be able to see view all four comments and we have four comments pretty cool right now this since this is a future if we type a comment over here like hi and post it will not see any update only after we go over here and come back we will see that this has changed to be all one comments so that's why i would recommend you to start using stream instead but i wanted to show you query collection over here basically the query snapshot and that's why i've used a few uh the future over here as i would have gone with the stream option now having that the last thing is we have to delete this post now let's see how we can delete a document from our app so the next thing we need to work on is whenever we click over this delete function delete uh dialog we need to delete this post so to do that we'll go to the firestore methods we have and where we can create a comment of deleting the post and it will have a type of future void and we can delete the post it will accept one string of post id and it will be as asynchronous process and again we have to wrap it with a try catch block i think you are familiar with the drill now so you can just follow this same thing again and again again you can just follow the rest format if you want you can refer to my github repository below it has the rest format if you're not very familiar with it still but try to do it on your own you'll learn it and after this the next thing you want to do is take the fire store you have to go to the collection which will be the post collection then we need to document it we go to the document of post id and then we call the delete function on it this is how easy it gets to delete a document from a collection and if you call delete on this collection over here you won't be able to delete the collection to in order to delete the collection you need to delete all the documents that it has if you delete all the documents and the collection is empty it will automatically get removed from our database and now if we await this we should see that we have our delete post happening so we can take this delete post from here go to our postcard and over here find delete and in the on tab what we can do is mark this as an asynchronous process and call firestore methods dot delete post and the post id we have to pass in which will be widget dot snap and it will be post id and after this ontap is done and we click over here it will delete the post for us but we also want to remove this dialog box that shows up after that so we can do navigator dot of context dot pop so after this is done let's try to delete one post of us so let's go over here delete and you can see one of our posts got deleted if i want to delete this post let's try to delete that and you can see only one post is remaining and we can click away or see the like animation which is pretty cool right our delete post has been working so the next thing we need to work on is the search screen over here let's do that so the next thing we need to work on is the search screen so whenever we go on the search screen we should see two things first is a list of uh you know uh an app bar where we can get a form field and here we can search for a user and uh if the user types something and presses enter we need to show the list of users that are there right we need to do that else if nothing is typed we need to show a search bar and a list view that looks something like this we have a big image over here then we have a small image over here a small image over here then a small image over here something like this so first let's not complicate ourselves and work on the search screen so to do that uh we'll go to our uh our app over here and create a screen called search underscore screen dot dot after that we are going to import the material package and we are going to create a stateful widget called search screen then we can take the search screen from here and go to our global variables where we had saved this and we're going to replace this with search screen now having that we are going to have a scaffold as well and we can save this to see an empty screen then if we go on the search screen we see nothing that is exactly what we wanted now at the top we need an app bar so we can do app bar and the app bar will have a background color of mobile background color then in the title we are going to have a text form field and the text form field will have decoration of input decoration where we will just have to give a hint to the user so actually instead of hint let's give a label and the label text will say search for a user we'll have to put it in a string after that we'll have to pass in a controller we'll create a controller now itself we'll call it final text editing controller search controller which is equal to text editing controller now having that we can dispose of this as well so we can take this and put search controller dot dispose then the next thing you want to do is whenever the field is submitted because you're not going to give an option of you know a post or you know search or anything like that uh we are just going to uh check if the field is submitted or not so on field submitted we'll get a string value which we don't care about and uh what we're going to do is basically let's just print this value to see what we're getting if it's a value or not but since we have our controller over here which we haven't put in let's put that uh both of these values are going to be the same thing at the end so yeah now we can just print this and if we go over here and search for a user with name rivan you can see i'm getting ribbon over here and if i print let's say search controller dot text and if i come over here i should see riven on both the ends i would if i search for one and press enter i should get driven twice show the users so in the body we are going to have a future builder because well we need to get the data so over here in the users you are going to get all the data of the users so we are going to call future builder because well it's future and then uh you can use firebase firestore dot instance dot collection and what do we need a collection of users dot get now if we do this much we'll get uh so whenever we type something we will get the collection of the users and uh we'll get all the data of the users right but that's not what we want we want uh information related the user that we're searching for so uh firebase provides us with an extra you know a method which is called where and with this where we can pass in a field that we want to check for example username you can even check for you know a bio email uid or if you had a display name you can add that as well so over here i'm going to check for the username so wherever username is you can have multiple methods over here is equal to which will return to us you know a username is greater than it will check the ascii value of the username that it passes through every time and we'll check if the if the any name is greater than the username that we'll provide over here and basically it will check ascii values for each and every uh function so what we want is called is greater than or equal to if we put is equal to it will exactly check for the username that we give it but we don't want that we want it to be either equal to or you know less or somewhere equal to that name so we're going to put this name and what does it have to be equal to our search controller dot text and we format the document so with this we are getting the username which is similar to this text over here cool now if we have a builder over here we can have context and a snapshot and we can again check if the snapshot has any data or not if the snapshot has no data it will return a constant center child circular progress indicator and if there is data what we need to show is a list view builder so we can return a list view builder and this list view builder will have item count and the item count is going to have snapshot dot data and as we have discussed before we need to pass in the value for the snapshot but i haven't done that so i'm just going to type this as dynamic and then we are going to call dot docs dot link and in the item builder we are going to have a context and an index and we are going to return our list style now this list style will basically this list style will uh how will it look it will have a circle avatar then the username and that's it that's all we want so we can create that stuff with the list style pretty easy right so we will have a leading element as a circle avatar and the circle avatar will have a background image of network image and the network image will be this snapshot we have to remove this two string from here it will have snapshot dot data dot docs and we'll grab that docs by index so what we're doing is we got a selected user so in the firebase console if you go you click over here you can filter it by this and you can have a preview of what's happening so we have uh filtered by a field name username then we are adding a condition where it's greater than or equal to and let's say we are going to type rr and now if we apply you can see there are two rrr user names over here and we can grab them now it will go over the indexes so this is the zeroth element then the second elem of first element it will grab this then it will uh get the data of this element over here and then we need to access the photo url property on it cool now after this we need to have a title element and the title will be having text which will be snapshot.data as dynamic dot docs at index username and if we format this document put a semicolon over here so we need to do some conditional rendering so we'll create a boolean value of do we need to show user or not so we are going to call it is show users and if the issue user the show users is going to be true only when the field is submitted so we can do set state is show users is equal to true and where we can conditionally render if show users is true then we need to show this else we can show a text that says posts which we'll work on in some time all right now that we run our app we should see the search screen so we're getting the posts written over here that is a good thing because our is our show users is false currently and only when we submit the form should we see the thing happening so if i type rrr over here i should see my user and its image there were two rrr users i had to delete one because uh one was the one rrr user was the one where we hadn't put the profile image we were just checking if our user is generated and stored in the firebase or not so i had to delete that one this is showing a pretty good so the next thing you want to do is when there is no user searching happening uh we need to show the posts and we'll do that so now to display it over here what we need to do is first think of the layout we need to create so what layout i have in mind is we need to have one post like this over here then another post that shows up like this another post that shows up like this and all of these posts will be uh from the database like the post collection of our firestore database then again we'll have a small picture over here then a small picture over here then a big picture over here something like this so let's try to create that this kind of layout to make this kind of layout we're going to use a flutter package called flutter staggered grid view it's a pretty uh great dependency in my opinion you should check it out i'll mention the link of this in the description below and now since we have added a new package we'll have to stop our app processes and when do we need to show this when posts is showing so basically we'll have to replace our text over here with this so first of all we'll have a future builder because we need to get data of the because we need to get the post collection from here so we'll create a future builder over here and in the future builder we'll have a context and a snapshot and then we'll over here check if snapshot dot has data all the stuff that we did before basically and only our future will change over here our future will become firebase firestore dot instance dot collection of posts dot get there are no sub collections in this we just want the collections uh stuff over here we just want to output the images over here that's why we are doing dot get on the collection now if snapshot dot has data actually if the snapshot doesn't have any data what do we need to show we just need to show a constant circular progress indicator or you can even put if snapshot dot connection state is equal to connection state dot waiting even that works then after this is done we also need to wrap it with a center widget because we need to show it in the center and we can put it over here and it will be a constant widget let's format the document remove that so if snapshot has data what do we need to show we need to show something known as staggered grid view dot builder and it's not builder it's we are going to use staggered view dot count builder it has a lot of uh methods like this you can check it out but we are going to use the staggered grid view dot count builder and it will take in a across access count first which will be three then it will have an item count which we'll pass in as snapshot dot data as dynamic dot dot docs dot length and after this is done we'll have a grid we'll have to remove this and we'll have an item builder and our item builder is basically going to return an image so we can have context over here index and it is going to return image dot network and the image dot network is going to have snapshot dot data as dynamic and it will have dot docs at index and we'll get the property of post url i hope this line is clear to you we have used this multiple times so i think you should be clear with it then we will have staggered tile builder which will give us an index and with this index we are going to return a widget called staggered tile dot count and over here the cross axis cell count is going to be if the index is completely divisible by seven then we will show uh two is to one count else what we are going to show and in the main access count we are going to do the same thing right and now we're going to return this and we can format the document so basically if the index that we have over here like the image index that we'll receive is completely divisible by 7 we want a count of 2 or else we want a count of 1 and same for the main access alignment as well so like the main access count now if we save this and run our app we should be seeing that so as you can see our app is loaded and if we go to the search we are seeing one post over here because we have only one post right now but it's showing up like this exactly the way we wanted we can add another post let's choose from gallery and add another post over here and we can write hey all the other posts were deleted and we can post and now if you go to the search bar we should see another post that pops up and it pops up over here but you know this doesn't like look as cool as it should because there's no spacing all of these elements both of these elements are stuck together so we'll create some spacing so in the main axis spacing we're going to add a spacing of 8 and we'll do the same for cross axis spacing and we'll put 8 as well now let's try to see our app and we see this is showing up very cool and you can see that there is a bit of you know spacing over here which looks much cooler now the next thing we need to do is whenever we search for a user suppose i search for a user with rrr and go where we need this to be clickable and show the user profile where we can you know follow the user see the users following see the description and everything so let's do that so to do that the first thing we need to do is create a new screen called profile screen and this is going to be a reusable profile screen so that we can show this over here in our profile tab as well and whenever we click on drivan suppose i search for a user by the way i've cleared my database because you know i wanted to make it some sort of clean so i've just added these and whenever we click over here so whenever we click over here we need to show the profile screen that shows up and it will be the same thing for the search users and the profile screen over here so let's do that the first thing we will need is importing the material dot and after that we'll need a stateful widget because this is a profile screen because we need to have an init state function and everything we'll see that and the first thing we need to do is create the ui of our profile screen so let's create a scaffold and what i'm going to do is take this profile screen go in our global variables and replace this with screen so that we can see our output over here and now if we save this we should see an empty screen cool now how is our uh profile screen going to look like so over here the first thing we would need is an app bar and in the app bar we'll have our username over here then we'll need a profile picture over here and then we will need number of follower a number of posts number of followers number of following and their subtitles then we will need our description or bio over here then we'll over here we'll need a button that will say follow unfollow or edit profile since it's going to be reusable we'll configure to work all the three ways and then we need to show the posts of the user whatever user has posted we need to show those posts over here right so now let's work on it so we have a scaffold in the start and the next thing we need is an app bar so we can have an app bar and our app bar is going to be of the color background color mobile background color and the title is going to be of text and we'll have to pass in some username for now let's keep it username and we won't add any other styling we'll set the center title to false then we need to we need to add a body but before adding a body let's see how our app bar is looking now i if i come over here so that you know we can see it and rerun our app and over here we can see our username showing up pretty cool now we need to have our body and the body we are going to wrap it with a list view because it's going to be multiple things that are coming up so it will accept the children and the first thing we need to work on is having a profile picture over here and beside that we want the stats that show up like the followers following and everything so let's create that so we'll first of all have a column because we need so why do we need a column over here is basically below this profile picture we are going to have a description and beside this profile picture we are going to have our you know followers following and stats basically so we need a column and what i'm going to do is wrap this with the padding because i feel we need some padding we can add padding and padding can be const edge inserts dot all 16 then we can go to our column and we'll have children now in the children we'll have a row as we discussed we need the profile picture and the stats like this so we'll have a circle avatar first of all we'll have to pass in children and the first thing we need is a circle avatar and it will have a background color of colors dot gray so whenever the you know the picture is loading we'll see a gray color and we need a background image and we'll again go to our good friend unsplash grab one photo from here and paste it over here actually we need to pass in a network image and in the network image we need to pass in this url we will format this document cool now we have that and if we save this we should see our profile screen showing up now this image is very small so i can increase the radius of this image which will be 40. now if we save and go back you can see this image is quite big now cool now after this circle avatar we need to build a stats uh star kind of thing so uh we are going to have the number of like the number of posts in digits then the posts aware number of followers then the followers number of following and then the following text written below it so to do that we are going to have another row and in that row we are going to have a main axis size of main axis size dot minimum then we are going to have a main access alignment of main access alignment dot space evenly because we need them to space out properly and then we'll have children and with the children we're going to have the post and you know this column that we have over here basically this kind of column so since you're going to have three columns like this i'm going to build a separate widget for it so to do that i'm going to create a function and i'll call it over here we are going to create that over here and we're going to call it column which is the return type of this widget build stat column and it will take in a hint of number and a string of label and then it will return a column and the column will have main access size of main access size dot minimum main access alignment of main access alignment dot center we'll have children in it and the children will be text which will be the first thing so this part over here so it has to be a number so it will be text number dot to string then a style and the style is going to be a text style of font size 22 font weight of font weight dot bold and we're going to mark it as a constant after that we can save this then uh we'll have a another text so we're going to copy this and paste it over here we're going to make some changes first of all the text is going to be label then the text style will have a font size of 15 and this is not going to be bold this is going to have a weight of 400 and the color is going to be colors dot gray now having that let's see it in output so we can go over here and in the children we can have we can have build start column and we'll pass in first thing as posts no the second thing has to be post the first thing will be a number for now let's just type in 20 and we can pass in multiple things so our next is going to be followers and a followers are let's say 150 and our following is 10. and we save this and let's try to see the output on our screen so if we do go over here we can see this is showing up and this is not the best output we could have gotten so let's try to improve it so the first thing i want to do is i want this to take the maximum possible width over here so i can just wrap this row with a widget known as expanded we have to use this and we'll pro provide it with the property of flex one now let's see the improvement and you can see this is spaced out pretty well now the next thing we want is where are we going to leave some spacing between the posts that we have and this over here so what we can do is wrap this text with a container we're going to get a margin and the margin is going to be edge in sets dot only and from the top we're going to leave four if we save this we should get a different output and you can see we have left some space now we can change the font size over here to let's say 18 and we'll save it can again go back and you can see it's looking much decent and i'm going to continue with that this looks pretty good you can change it according to your preferences again having that in place we will scroll up again and so after this row what we're going to do is create the buttons that we need over here this buttons the follow edit profile and unfollow buttons so we'll create another row and we'll call them main access alignment and we'll call it main access alignment dot space evenly then we need children in that so we get we are getting this error because we have put in the row inside the expanded we need to put this outside of the expanded cool now in the children what we're going to do is create a widget called as follow button and this follow button will require you know text and background color and the text color if all sorts of stuff so let's create that widget over here in our widgets folder we'll call it follow underscore button dot dot so that you know we don't have to reuse our code again so that we can reuse our code again and again and we don't have to make changes uh again and again basically so now we can import material dot and we are going to have a stateless widget which will be a follow button and i can change the constructor over here again now we're going to require multiple things and we'll require them as and when we need them so first of all we need a container and we'll have some padding and we'll have it from the top so we can just do only top 28 so that will leave some spacing from here this part over here then we need to have a child and a child is going to be a text button and the text button will have an on pressed so we require a function of ir so we can call final function which can be null and we're going to call it function we require that then we can do on function actually just function then we have to make this final then it requires a child and a child is going to be a container and the container has properties like box decoration and in the box decoration we are going to add the background color and what is the the background color of the follow button is going to keep on changing so when the background color so if it's a follow button we need to show a blue background and if it's a unfollow button we have to make the background white so that kind of stuff so we are going to import a background color as well so let's get the color final color background color then we need to pass in a border and the border will also keep on changing as per our colors so we will need that from the constructor as well so we can just call this final color border color after this we need to put a border radius and a border radius is going to remain constant so it will be border radius dot circular 5 and after that we need our button to be aligned in the center so we'll do alignment dot center and it will have a child finally and the child is going to be a text and we required this text so we're going to do final string text so you're going to have this text and we're going to have a style and our style is going to be of the type text style color text color it will be because you know if our background changes our text color will also change so we need to import the text color as well after that is done we need to have a font weight and the font weight over here is going to be bold after that we can format this document and we need to give it a fixed width and a fixed height so what we can do is you know after this container we'll specify a width of let's say 250 and a height of 2 27 you can use media query over here but what i want to do is when my screen which gets bigger and bigger i want this follow button to remain of the same size you can change according to your preference again then we need to require all of this i'll require so we have taken in from the constructor make sure to uh put this dot function are not required because our function can be a nullable value now we can go on the top and create and import the follow button and with the follow button let's add some stuff now let's add an edit profile button then our background color is going to be mobile background color we want the background to be you know black and the border to have something of a gray color so since our background color is black we wanted this to be a primary color which is white and over here we want a border color to be colors.gray then we need to pass in a function and for now let's let our function be you know uh an empty screen an empty function and we're not going to have an edit profile over here we're going to have a sign out which will change later so now if we see our output we are getting this output the reason over here is because we've forgotten to add you know a parent widget of column after the row and so we are overlapping the text over here with our prof edit profile button so if we do that and if we wrap this with a column and put this row inside of the column we will see that our error disappears and our edit profile comes below all of this so let me save my file and you can see this over here that we have got this and the next thing you want to do is take make the main access size max and yeah we have got a good looking output so now if we see our app and we can see that this is working pretty well now we need to remove this gap and probably this is because in the follow button we give a lot of margin we can make 28 to 2 and let's see the output and we are getting a decent output that's what we require now the next thing we want to do is display a username over here and the description that we are the user provided so what we can do is close this follow button and and after this uh row we need to pass in you know a container which will be aligned to the left so alignment dot center left then a padding of const edge insets dot only and from the top we leave a gap of 15 and we'll have a child of text which says username and we need to add some styling to this so we'll add a style and what is our style going to be well we want the font to be bolded because it's the username and we're going to have the we are going to ignore the warnings for now because all of these values are going to change to dynamic and having that let's see the output we get over here we're getting the username as we want now we can take this container and post it down and we're going to change the padding to from the top we just need a padding of one and we're going to add some bios so some description and we can see this and we can remove the style over here because we don't want the description to be bolded now if you go you can see some description showing up which is pretty cool now we need some divider over here and then we need to display a list of posts so what we can do is after this container and after this padding as well we are going to add a divider so after this is done we need to display the user posts and that is what we are going to work with so this was basically the ui of our app and now let's uh replace all of these values with the dynamic value so to get in the dynamic values what we need to do is first of all accept the uid from the profile screen since this is going to be a reusable widget we need to make sure that we require this uid from the constructor and not use the state management uid else it will only serve this screen over here but not the screen when we search for the user correct now let's go over here so the first thing we need to do is create a new state function where we can get a when where we can put a get basically a get request to our firebase firestore to get the data of the user that we have over here so what you can do is type your get data and for now let's just keep our get data in our class over here we are going to call it an asynchronous function then we are going to wrap it with a try catch block and we are going to show a snag bar in case of any error so we can just type e dot tostring and after that in the get data what we can do is we can get the user data from the users i've deleted all my users as well only kept three of them over here and in the firebase authentication now we are in uh we are going to do await firebase firestore dot instance dot collection and collection is going to be of users dot dot and what is the document going to be the widget dot uid that we have and we're going to get it now you it's your task to job what type of value that we will get after this get if you've guessed document snapshot you're entirely correct so you can just do document snapshot which is equal to snap and after that we need to create a global variable uh we'll call this you know user data user data and we'll call it an empty object and user so what we're going to do is get the snap and uh we're going to set our user data equal to user we're going to set a user to user data to snap dot data and it's not going to be null and we have to change this to wire over here and not document snapshot else you know we can't explicitly set our map over here to the snap dot data then we basically need to set the state so we can set the state and over here we can use the user data so what we can do is user data and we're going to take user data and we're going to use a property username and we can format a document and now global variable now we need to pass in a uid and this is going to be our home screen item so this over here where we need to show our current uid uh so our current profile so what we can do is firebase auth dot instance dot current user dot uid and after that is done let's format a document and see if we are getting the output let's refresh our app and over here we are getting riwanna which is our username cool now let's try to output some more values over here we're going to set user data and we're going to go down and we're going to replace this network image with user data add the date and we are going to use the property of photo url and now we have saved it now let's refresh our app and see if we are getting that so if we go over here then we can see that this is my profile picture and that's exactly what we've got so the next thing we want to work on is the username over here so we can take the user data and put in the user name and over your user data and pass in the description let's save our app and see if we are getting that output you can see we are getting a null type over here that is probably because we don't have a description we have a bio so we'll have to put in bio now let's go over here and see we are getting on earth and now you can see we are getting some errors over here for slighter moment this is because our uh our data over here is still null and we are calling some value and properties on it so we are going to create is loading variable and set a circular progress indicator as long as these values are not being fetched but we need to fetch more values for example this post number of posts the followers we have the following we have all of that stuff so let's go to the top again and get some more data where we can rename this to user snap and not just snap because we have more snapshots coming in the next we want to get is the post linked so i can call it over here only getting the post link get post link and the last post we have we will have now post snap which will be equal to await firebase firestore.instance.collection and we are going to pass in posts now what post do we want the post that is of the user with this uid so we have seen dot where property we will call that and we are going to use the uid property like the view id field and we're going to check if it's equal to not less than or greater than because we know user i you user id is going to be different for every user so we're going to use is equal to and now we're going to check if that is equal to if that is equal to firebase auth dot instance let's import that instance dot current user dot uid cool let's format the document now uh our we are going to create a global variable called its int post link and our post length is going to be 0 for the initial value then we are going to set post length equal to post snap dot we actually haven't called the get function over here let's call that and after that we're going to use post snap dot docs dot length and we're going to put a semicolon over here and we've called set state aware so we don't need to worry about the widget build rebuild function over here like the rebuilding of this build function and we need to take this post link go down and replace this post link with post link now since it accepts integer we can just pass in post link and refresh our app go over here and we should see zero posts right now this user doesn't have any post it's made by naman ranavat and rivan ranavat so we'll see that for them now uh we need the followers and the following now how are our followers going to come the followers are just going to be a list over here you can see followers and following so we're going to do that for them just like we did for likes and post we're going to do for followers we're going to store the uids over here so we can go at the top and we can create and follow us variable which will be follow us equal to 0 then we can take followers sorry we can take followers equal to user snap dot data and we'll access and we're going to take in followers which is this property over here the followers property and and since this is a list we are going to have dot link property on it and this following over here you can see that's just you know my testing over here so i've just added this for some reason now you can we have to take this followers and put it down over here follow us and we can go over here and see zero followers right now then we need to do the same for following so we can do and following equal to zero and we can take the following and our following will be equal to this whole thing over here and we're going to replace this uh of property of followers to following now let's see now we can take this following and put it down over here we should be getting 0 everywhere and that's what we get so after that we need to check if you know uh if we are following the user so if the if this is our profile this it should show edit profile but if it's some other profile we're going to have follow button over here unfollow button over here so for that we need to check if we are following this user so we can create a boolean value of is following over here and we set it to false we can take this as following and put it over here and we'll check if it is following if user snap user snap at followers will have to do user snap dot data at followers and we'll have to pass in this exclamation mark over here at follow us contains our uid over here since this is going to be a list return we can put contains over here and we are going to check if it contains firebase or dot instance dot current user and our uid over here so you can save this and if this is following we can make conditional rendering in our application down below with the follow button widget that we had created over here so what we can do is create a first check over here if our user so if firebase auth dot instance dot current user dot uid is equal equal to widget.uid that means uh that means that whatever uid we are enter we are entering from the parameter is from the constructor is equal to the firebase auth current user id then we know that this is our account and thus we need to show the edit profile and if it's not then we need to check if we are following that person so if we are following that person we need to give the person a an unfollow button so we can copy this follow button from here paste it and make this unfollow and also we want this to be out of the text color colors dot black and since this is black this the background color will change to colors dot white and we will have a border color be let's say colors.gray only and yeah this is it now we need to add another uh else condition basically which is the last one and we'll again have a follow button which will actually say a follow and the follow will have a background color of colors dot blue which is our primary color sorry yeah which is our blue color in our colors.file our color text color is going to be colors dot white and our border color is also going to be blue now let's save and see what we're getting we should be seeing edit profile the way it was and we have that to see a bit different output what we can do is take this profile screen from here and go to our search screen and in the search screen where we have a list style we can wrap this with an ink well widget and the inkwell will have ontap function and with the on tab we are going to navigate to the profile screen page so we can do navigator dot of context dot push material page route builder context and we can pass in the profile screen now this profile screen requires a uid of the user so what we can do is copy this from here and we're going to paste it and our the property we are going to pass in is uid and we can format this now let's say try to see the output if we refresh if we go to rivagna ranavat we should again see edit profile this because this is our account and for rivan ranath as well we will get a follow button this means that our work is happening pretty good so what do we need to do next first of all we'll add loading indicators so in our profile screen we can do bool is loading and we can set it to false then we can take this is loading value from here and set the state to is loading equal to true then we can take this value over here and after all of this stuff is done we can set is loading to false again and over here we are going to return if is loading is true then we need to show a constant center circular progress indicator and we're going to have a scaffold we'll have to format the document and let's see we are getting a loading bar and all of our errors disappear from here you can go where and you can see none of the errors we get which is pretty cool now let's try to show our posts and then we'll work on the followers and following functionality so to do the post function we can go to the bottom after this divider we need to use a future builder to display the posts we're not using stream builders because we don't need to keep track of every you know uh every part of the app like we are not liking anything we're not commenting anything so we don't need to use stream builder we just need to display a list of images and that's not a and even if it's not real time nobody would care so we can have that future builder now we'll have a future and in the future we'll have firebase firestore dot instance dot collection and we want the post and whose post do we want our own are like the user id mentioned over here so we can do where the uid is equal to the widget dot uid that is passed in and we can dot get then we can do dot get after that we will get a builder and the builder will have context and a snapshot now we'll check if the snapshot dot connection state is equal equal to connection state dot weighting and that's happening we need to return a constant center circular progress indicator you have to go there and we'll format the document now if that's not the case what do we want to show well we want to show a kind of a grid thing over here right we want three posts to show up like this all right and we want it like this now to make such kind of layout flutter already provides us with a widget which is known as grid view builder we can use that so we can do return grid view dot builder and it will take in a grid delicate and an item builder so what we can do is put them on separate lines and we'll return the grid view builder now uh over here first we'll set shrink wrap to true then we'll have an item count and our item count is going to be snapshot dot data and we'll treat it as dynamic our old cheap trick that we used to follow then this docs dot length cool now the grid delegate will have a constant of sliver grid delegate with fixed cross access count and the cross axis count is going to be three then we are going to have a cross axis spacing of 5 then a main axis spacing of 1.5 and a child aspect ratio of 1. all of these values are again tried and tested i just took values and kept on changing them except the cross axis count which means that i want this to be 3 and then the spacing part you need to figure it out on your own like with the trial and testing part then with the item builder we need to pass in a context and an index and over here we're going to have a document snapshot and it will be again snapshot.data as dynamic dot docs and we're going to have an index and we're going to do document snapshot snap now we are going to return a container and this container will have a child of image and the image will have image property and will pass in the network image now the network image is going to be our snap and we'll also put in snap dot data and we'll do it as dynamic and we have to cover this with parent thesis and we can use post url property that is mentioned in the posts class post over your post url cool now to have some more fit what we can do is have a property of fit and you can experiment with these values but i'm going to use boxfit.cover and the names are pretty uh are suggesting what this app will do so if we go over here and let's remove all of this stuff and we've made an error over here we have already called snapshot.data.docs index over here so we just need to call snap post url over here so we can refresh our app now let's see over here and we're not getting any post because we haven't made any post so let's try to make a post let's post it choose from gallery the text editing controller in your case would look a bit different over here i've decreased the size and you can you have 0.45 the media query with into 0.45 i have taken 0.3 and i'm going to have high aware just for testing and we're going to post and we have posted so if we come over here we see one post so a post counter is working and we can see our image coming over here which is pretty cool if you go in the search we will see our image coming here as well which is very cool so that means our profile screen is working and is ready so if we go over here search tab and call naman over here so basically we can see the post coming up which is pretty cool so in our search over here if i type private we will get driven rana which is our profile and if i do revamped on earth i can see my post over here which is very cool so that works now we need to work on the follow functionality which we'll do now so to do that we'll go in a firestore methods class and over here we're going to create a function future void and we're going to create it name it follow user it is going to be an asynchronous process and we need to get two things from here the user id our current user id and the person whom we are following that person's uid so we do string follow id and over here we are going to have a try catch block in case of exception we are going to print that exception and in that type block what we are going to do is await underscore firestore dot collection of users and over there we are going to go in our document uid and get the data first let me type in document snapshot so what we're doing over here is basically going to our collection of users and in our document id so in this part suppose this is my user id i'm going over here and getting all of the data from here and why are we doing that so that we can check if we are already following that user or not so what we can do is list of following so if we do list if we do snap dot data as dynamic and we need to pass in this and we'll have to put an exclamation mark over here and we'll get the following from here so we'll get a list of following and in this list of following we'll check if the list of following contains the user id i mean the follow id so i'll explain this to you so we got the follow following list of the user over here and we are checking if the following list contains the follow id that is the second person's id over here then we know that the person is following that so it means that we are following that person so we need to remove the follow so what we can do is await underscore firestore dot collection and our users dot document follow id and we'll update the value of followers in the follow id basically we'll go in the users and whichever person that we want to follow we'll go in their document and update the followers value over there because we are well removing because we are removing followers from their uh profile so we can do that and we can do field value dot array union id remove and we'll pass in the uid cool that means we have removed the follower from the users uh from the follower id now we need to remove the follow id that we have over here from our user id so we can pass in doc uid over here we can have following over here and we'll have a remove here as well now if the following does not contain the follow id we need to well have the same thing but over here we'll have array union and over here we will have array union and if this isn't clear to you don't worry i'm going to explain it again when we uh see this uh in the action like in our app then in our profile screen uh wherever we have you know this follow unfollow we can just call this so we can use asynchronous and over here we can have await firestore methods dot follow user and we have to pass in the user id so what we can do is firebase auth dot instance dot current user dot uid and we need to pass in the follow id as well which will be user data at uid that means whatever user profile we are on right now we can format this document and now we can take this and paste the same over here and we can have asynchronous over here cool now if we save this and go over here if you go in the search and search for a user ivan and we have vivandranavat over here we can click on rundown and as you can see we are getting over here now if i click on follow we don't see any changes over here but if we go in our fire store you can see a followers got added and the user id and the user name was rivan ranavat now if i go over here in my user id you can see a following coming over here so what we basically did was we checked if the list already contains the follower if it already contains a follower then we're going to remove a follower and if it doesn't then we are going to add a follower and in this case if the following already contains it we are going to remove this following and if it doesn't then we are going to add it this will make much more sense uh when you know we update these values over here now why are these values not getting updated over here because this is a future and not a stream builder right uh in stream we constantly keep track of our values and you know keep changing it as and when they change in the database but over here it's a onetime read as i've mentioned previously so now we can put a set state over here to update the value so to update the value what we need to do is increase the follower count by 1 and set is following to true and we are in the follow button so we can do that set state and we are going to pass in this over here and we don't need to do this over here we need to do it outside of the follow user we have set state and we are going to set is following to true and we are going to increase the followers count so we can do followers plus plus and we can take this value from here and paste it over here as well in our unfollow button and where we'll set is following to false and we are going to do followers minus minus so if i type in driven over here we can see riwanda not showing up now if i go over here we can see that we had followed him earlier so we got an unfollow button right now but if we click unfollow right now you can see the followers change it change to zero and we get a follow button again and over here we are not uh we are not able to remove these followers because in the firestore methods we created a bug over here we need to array uh when we are having followers over here we need to remove the array of uid and over here we need to remove follow id makes sense right because we are following that follow id and uh the same we are going to do over here we're going to remove the follow id from here now i went fast uh in this section because you know we are already familiar with all the values that we're using it's just a logic and it's very simple logic i've cleared off my database now i like our following list now and if i search the one we should get zero followers and if i click on follow we get one follower and if we go to our database you can see we are getting one follower but if we unfollow you can see zero followers and our followers from here was removed which means that our function is working properly now so yeah this was it for the follower now if i go over here on our screen we should see one following and that's what we see now the next thing we need to work on is you know instead of showing edit profile we need to show sign out so that we can sign out so in our profile screen instead of edit profile what we can do is sign out and in our auth methods we are going to create a sign out function so what we can do is future void and we'll call it sine out we don't require any arguments as such we just need to make this process a function asynchronous and what we can do is we can take the auth instantiation and we can do auth dot sign out and that's all it takes and since this is going to be a future we need to await it and that's all it takes to well sign out from the uh our app so what we can do over here is call async over here and call await auth methods dot sign out and we're going to call navigator dot of context dot push replacement material page route a builder context and we are going to pass in the builder as the responsive uh sorry the login screen and we need to put a semicolon lastly and we can do const over here so now if we refresh our app and see we'll get sign out aware and if we sign out we go to the screen over here now if i refresh my app we should still be on the login screen and that's where we are so we have completed this app over here of that is for the mobile app now let's work a bit on the responsive design so i've run the app on our chrome version as well and we are i've run with the command flutter run dash d chrome and i've put in the web renderer as html as i've told you that canvas causes viewed issues and if it looks good over here but if we resize it you can see that this extends till the end of over here because we have used media query and uh how can we fix this uh over here so what do w what kind of layout layout i want for the web is i want the text input to be this long from here till you're somewhere here i don't want it to extend beyond this region over here right so to do that uh let's go and make some conditional rendering so in our login screen we can go and in the login screen we have a container over here where the padding is given as you know uh 32 so what we can do is over here check if the media query dot of context dot size dot width is greater than the web screen size the global variable that we had created over here if it's this then we need to show the another padding because that's the web screen layout that's showing up else i want to show this layout over here so over here the edge inserts is going to be constant edge in sets dot symmetric and we're going to have third of this size over here and we have to remove this constant from here since we are using media query now if i save my app we should see a different output let's run our app over here and you can see that this size has increased and that's exactly how i wanted it and if i increase the size you can see it's showing up pretty cool and that's the way i wanted it now let's go to the let's enter our email over here let's type in another gmail.com test123 and login so we have signed in and we can see that we are getting a web year layout of ir so we need to change that so uh what do we want to show well uh the layout of our app is going to be something like an app bar over here at the top and with the app bar over here we need to have an instagram logo over here then at the end some icons where in the app we had at the bottom so uh instead of bottom we want to have these icons you know at the top right corner that's how it is on instagram web then uh we need to render the screen basically right let's do that so in our web screen layout we're going to have an app bar first and our app bar is going to be app bar and what i'm going to do is basically go to the feed screen and i'm going to copy the app bar we have over here let's copy that and paste it over here and where we can you know make some changes according to our preference first we'll have to import the background color then the svg picture asset right now we want our actions button to be a bit different so our icon button is over here we want the messenger to show up last we want other icons to be shown so we'll have the home icon first then the search icon then the add file icon and the notification icon then a profile icon yeah and well we can neglect the chart icon for now because it's not having any usage in our app so where the first icon we had was icons dot home and well we are going to show the home icon for now then the next thing we want is search icon then we need add a photo icon then a favorite icon which is for the notifications and lastly a person icon which will tell us the well the you know the profile and if we save we should see in the top right corner all of these icons coming up and that's exactly where they come now the next thing we want to do is well whenever we click over here we should see the output coming on the screen so to do that what you're going to do is we're going to go in the feed screen again and from we're going to go in the mobile screen layout and we're going to copy all of these functions from here because we need to well basically have a page view and we're going to paste it over here right having that in place what we need to do is we need to check so if the page over here is equal to 0 so over here we'll have a primary color so instead of the color what we're going to have if page is equal equal to 1 then we need to show a primary color or else a secondary color not one our numbering will start from zero so we can do zero and why are we getting this error over here because we don't want it as a constant anymore so we'll remove the constraint and then we'll have the condition once again over here so we can paste it if page is equal to one we have done all of this you know in our uh mobile screen layout it's just that we are copying stuff from here and pasting it over here because we needed the app bar in the top right corner and that's why we need to to create responsive layout and plus with this uh kind of format you can add more stuff which we'll talk about at the end of the video so we have one two now we need to put in a third we'll remove the const we'll again remove the const and we'll paste it over here and we'll have fourth now let's remove some extra comma that we've got now let's format the document and tap r to see the changes coming place but uh when we click over here their color doesn't get changed because we haven't called the navigate so what we want to do is take this search state from here and paste it over here as well and we're going to take this navigation tab function and we're going to call this over here so we're going to go navigation tab and we're going to call in the we get we are going to given a page so this is going to be the 0th page we can copy this and paste it again over here this is going to be 4 3 2 1 and yeah this is it now in our body what we're going to have is well a page view that we had exactly like we had in the mobile screen so we can have page view and we're going to have children of home screen items that is in the global variable then we're going to pass in the controller and the controller is going to be a page controller and on page change we need to call on page changed so we can copy this from here and paste it over here now let's tap r and see if we go where we should be seeing another page and yeah this looks pretty cool now if we go over here we can see the search screen also showing up and this is scrollable over here because we haven't set the physics we can do so by scaling physics and never scrollable physics and it will be a const now if we do r again let's go over here and we can see we are not able to well change the app again so yeah now let's try to make the screen responsive and get this app bar out of here because we don't want it in the web screen so to do that what we're going to do is go to the feed screen over here and we have our width over here now in the app bar what we can do is we can check if width is greater than web screen size then we don't need to show the app bar so we can pass in null or else we'll show the app bar we can perform a hot restart and see that we are getting no app bar cool now if we rerun our app you can see that bar is not showing also the background color in the instagram web is a bit different so what we can do is go to the background scaffold and over here we have passed in mobile background color here we can check if the web is the width is greater than the web screen size then we are going to have a web background color which is present in the colors dot dot file now if we save this we won't be seeing any difference as of now but we'll see that in a while now we want to go in our postcard because that is where these things are so we can go in our postcard dot dot and we are getting these borders over here because i had added a border just to check if it's working and all so you can copy this line from here so if width is greater than the web screen size we need to put in a secondary color which is uh you know this background border color which is gray and else we will have a mobile background color so if you do like this you know shrink the size you can see no background uh you can see no border but this is because well the border is of the background color so it merges where you can see that our background is showing up now we also need to reduce the size of this postcard over here so what we can do is in the feed screen we have our postcard over here we can we have it trapped with a container now we can add a margin to our container and in the margin we can add edge insets dot symmetric in the horizontal direction it will be if width is greater than the web screen size then our width will be then the horizontal margin will be the total size of the device into 0.3 and if it's not web screen size we don't want it we don't want any margin so we can just put zero and and for the vertical what we can do is paste it we can pass in vertical we'll pass in the same conditions if width is greater than the web screen size then we are going to have a value of 15 in the vertical direction and nothing in the horizontal direction like and nothing when in the mobile screen layout so we can format this let's rerun our app and see that our value over here has decreased which is pretty cool now if i you know save our and we now we try to you know change the size of our application you can see that the change is happening and if we go over here our app returns to the normal app state that it was in so this is the process for the responsive ui you can do the same for the sign up ui that we had followed earlier for the login and in the search i'm going to show you how we can make changes over here because well we are not familiar with staggered grid view so we can go in the search screen and in the search screen we will have our staggered grid view builder over here we can have a check if with we don't have a width ready so we can do media query dot of context dot size dot width is greater than the web screen size then uh we need to show something else and because this is the configuration we made for the mobile for the web we need to show three of them side by side and nothing like this so what we can do is uh over here we can have one is to one and one or one so with basically this making the values change over here and here we will be able to get a three by three layout over here if we go over here you can see we are getting a three by three layout and that's what we wanted and uh the rest of the responsive ui is up to you you know you can make changes i love it this way so i've uh kept it this way only uh then yeah this is pretty much it so here we complete our course for the beginners tutorial for firebase i hope you could follow along and build this application and uh i just want to say that you know it is very easy to create an application with firebase you might have seen that most of the functions that we used be it in the auth methods or firestore methods all of our functions were basically getting reused and reused again and again and it had the same layout firebase is pretty easy to use and it's very beginner friendly so you can check it out and regarding the application i just want to say that there might be some bugs that i'm unable to notice and there might be some features you want to add and make it a full stack instagram clone i didn't make that because well this was a firebase teaching course and not a instagram clone build well we try i just tried to teach you how we can use firebase by building instagram so you can definitely add more features the github link will be mentioned in the description below you can check it out and let me know in the comment section below if you are able to add more features and send the github link in the comments as well but if you have any doubts you can obviously message me on instagram or you can message me or you can comment down below thank you so much for watching the video see you in the next video