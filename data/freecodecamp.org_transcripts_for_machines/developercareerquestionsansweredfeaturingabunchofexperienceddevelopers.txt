What's the best way to learn programming? What programming language should you learn? First? Is AI going to replace developers? In this video, you will hear answers to 10 of the most common questions that people new to software development tab. This collaboration video features answers from a bunch of experienced software developers and tutorial creators. Will AI ever replace developers? Wow. Oh, really? I was question. I answered this question a lot. I don't think so. No, I don't think so. No, I don't think so. Well, I don't think so. Hard. No, the answer is no, I'm not seeing this like our problem? Not really. And the short answer is no, I do not think that AI will replace developers anytime soon. I do however, think that it will get rid of all the boring repetitive tasks that we don't want to do and allow us to focus on the problem solving and creating aspects that software development count brain. Actually, AI is our friend as developers, because it's creating lots of helpful tools that reduce the amount of work we have to do and the amount of typing we have to do to create new things and write code as developers, I think it will enhance us as developers, it will save us from doing this repetitive tasks, something like an engine on the boat that helps it to go faster. In my opinion, I think AI is a great addition of the set of tools that we already have. And it will allow us to be more efficient, faster, and really speed up the development lifecycle. With Auto completions that we've seen with some of the tools that already are out there. AI is only as good as the data that we put into it. If you dig a little bit deeper into what AI exactly is, it's just a dataset that is used for predictions. Now, in the case of GitHub co pilot, for example, the predictions are really, really good. It seems to know what I want to type. So that is perfect, but I don't think it will ever actually replace developers because you know, we can still have a lot of creativity that systems don't have and consider this, there are still developers needed to create the AI. What I think or what I see happening is AI coming into the tech things help eight developers productivity, or help automate some of the tasks that developers have to do for your day to day, I believe that AI will not be an independent power tool that will just magically do everything that developers do now. But rather, it will be just one of the tools for developers themselves to actually make their own work more efficient and delegate some of their tasks AI will help optimize developers work, but certainly not replace them. I use Google copilot all the time, and I'm not really worried about it. But if I were the kind of person that would occasionally get things very spookily, right, and then sometimes crazy stuff that says wildly out of nowhere, I might be replaced by co pilot. All the traditional jobs we know and love today will eventually be replaced by AI. I'm a big believer in the singularity, and that eventually artificial intelligence where it will surpass human intelligence, that's always going to need us to develop simple applications, complex applications, hell even develop the AI that helps developers, such as co pilot work the way it does, AI will not replace developers because there will always be jobs for programmers to work on small scale, medium or large projects, AI will not be able to do that all on its own, he can certainly be useful and can assist in development processes, but it will not do the whole thing on its own. Unless, of course AI becomes self aware at which point we'll have bigger things to worry about than our job. I think that someone will always need to maintain something, right? There's infrastructure to be maintained. There's always going to be some code to write someone needs to write code to make the AI work. In general, I think that AI even if we were to replace the typical jobs that we do today, it just means that engineers will have to adapt to something different, but I don't think it's going to replace them completely. What is the best way to learn programming, through courses or by yourself? When you're just beginning you need some kind of a guideline or roadmap because you don't know what you need to learn in which order you need to learn or generally you have no idea where to start. So on a beginner level, I recommend starting with courses and then go ahead and practice with actual real life projects. I think you will spend as the developer most time of your life learning programming, so the learning does not really stop. So if you find courses beneficial than going for courses But I'll tell you now, the ability to study on your own is the one of the most valued abilities of the developer. Honestly, I'm a big fan of courses because they provide structure. And I think having structure is very important when you're learning something and you don't know where to go. If you're simply learning a new language, you're already proficient in several languages, that I think the best way is to go by yourself, and just read the docs and build projects. But if you're starting from scratch, I think coding courses and then also simultaneously working on projects is the best way to go. In my opinion courses will allow you to at least get the foundational understanding, then you need to go by yourself and start creating products, applications, websites, etc. Using the skills that you've just learned. I think taking a course is still technically by yourself, but more structured. When you go through a course you're going to learn new things. But then it's up to you to take that knowledge and apply it to your needs. Go build something on your own after the course. Well, I would say is a mixture of things, I would advise all my students always watch the tutorial first. However, not just rely on the tutorial too much, I would recommend completely getting rid of what you've just built the tutorial and just starting from scratch, really seeing if you can do it all by yourself, and really seeing if you can make the project your own. Your best way to learn programming is really what works for you. Do you learn best by digging in a book going through a course or even a combination of the two. But ultimately, one thing that will help everyone is to practice by creating projects, I had a math professor that wants math is not a spectator sport. And the same goes with programming you need to get to practice and to get better. In my opinion, I think through courses because you can find someone that you fully understand and you feel comfortable, like listening through the examples, because some concepts can be really, really difficult to grasp. If you just for example, reading books or through blogs, whereas if someone is teaching you and an explaining along the way through, for example, videos, which I think is one of the best ways of learning programming, I think that will take you a long way as you start off, then once you are comfortable and understand, for example, the programming language or the framework, this is when I feel like by yourself is better, because you can challenge yourself through wherever project that you think will basically allow you to learn all the skills that you've learned from someone else, it's more like you if you're just getting started, you need to go ahead and take some fundamental courses about programming, maybe you learn web development, JavaScript, you get the first steps, you learn the basics, then afterwards, you can jump on your own project and you start learning by yourself. And this way, you will be able to like explore and read more documentation like how to solve problems by yourself, like explore more libraries by your own portfolio. And much, much more personally, I would say both because being a self taught developer myself, I relied a lot on online resources, like courses, to help me learn some of the technologies that I was learning. So you can do it yourself. But to be honest, you still need to rely or look out for resources online to help. The answer to this really varies by two factors, by your individual preference, and also by the situation that you're in. For some people, it's better to go the self learning route than some people need the motivation, and the personal involvement and structure that something like a coding school or a boot camp brings. There's no one path to get into coding. What if everyone became a programmer? Well, realistically, I don't think that will happen. But I definitely do think that it will help if everyone has some basic understanding of how code works, how computer works, because that will help for security, we will get a more diverse set of people in programming. So that will definitely help as well to break some paradigms and get some creative new things out there, which will be really great. So I do definitely think that everyone should have some basic knowledge of programming. But Will everyone become a programmer? I hope not. First off, not everyone is going to want to be a programmer. People have different interests, and there's room for everybody's interests and passions in the world. That being said, I do think that at least in school, everyone should learn the basics of programming. I agree with Steve Jobs here when he says everyone should learn how to code because it teaches you how to think I think that logic, like stepping through problems. And all those related skills that kind of fit under the umbrella of learning to code are really valuable, regardless of what career you go into. Also, coding skills can be very helpful even in non coding jobs. I've heard a lot of people who have used a little bit of Python or a little bit of Visual Basic to automate some of their tasks at work and really help them out with other things. Or maybe someone will learn to code and then just use it for side projects, or building things that they really want to exist for themselves or for the rest of the world. And coding creates an opportunity for people to be able to do that. That's the beauty of learning to code. You can take it anywhere and do so many things with it outside of just working as a developer. I don't think that is possible, mainly because coding and programming is not for everybody, some may like it, some may not like it. That being said, though, if for whatever reason, everybody decided to become a programmer, that simply means that the demand on the job market is very high for programmers, which is good for everybody. This is really not worth worrying about. I think if the concern is, what if there's too many people in the job pool, and everyone's trying to get into the same jobs? I think that's already happening today. But if you take a look at the software engineer salaries, they're still very high. And that's because even with all the supply, it's still very hard to find talent. So as long as I think if you strive to be a good engineer, it really is not a problem for you to think about. Well, I think it's more of a self feeding cycle. The more programmers we have, the more awesome technologies and generally technological progress we have. Which means we again, need more developers for those new technologies. However, I do think that the simple coding and programming skills will not be enough for a professional software developer. So while some years ago, just average JavaScript knowledge was a superpower. Now, as a developer, you actually need to bring much more skills to compete with other developers, because again, the programming field is rapidly growing and becoming more and more competitive. Man, that's never gonna happen. I'm not really worried about it, though. But it would mean a worldwide shortage on Hot Pockets. That would be cool. But it's not going to happen. Don't worry about there being too many programmers, the demand for talented programmers goes up every year, as technologies advance. There are tons of open roles everywhere. I'm 3040, or 50. Is it too old to learn how to program? No, no, definitely not. It's never too late to start. It doesn't matter the age? Absolutely not. I don't think it is ever too late to learn anything. Absolutely, yes. Turns out that a switch flips in your brain when you're 30 years old, and you're unable to process new information, which is why I don't know how Game of Thrones ended. But I'm sure it ended well, well, I don't think so. I think programming can be learned at any stage in your life. Programming is a skill, it doesn't really matter how old you are, like, literally, you just have to be consistent. You can literally learn to code at any point in your life. You can learn programming at any age, I know people that, you know, from the 30s 40s, they decided that had enough from what they were doing. And they just became a programmer. So it's completely up to you whether you have the right mindset, literally anyone, it doesn't matter the age, anyone can learn how to code, age doesn't mean anything at all. I don't think it is ever too late to learn anything, basically, as long as you kind of enjoy it, you know, maybe a job can be harder at a certain age because of all kinds of prejudice that is out there by companies, which is, you know, not great. But it's unfortunately the reality. But I feel if you want to learn anything, the time is now, a lot of things you need to get started with learning how to code honestly is out there for free internet. And there's a an abundance of information that you can just grab whenever. So I truly believe whatever limitation it is that you think you have, it's probably not your age, it really is just your own self belief of can you do it? Or can you not do it? My recommendation would be to just get started learn a little bit each day and just see where that goes. I'm currently teaching my mum to do some HTML, CSS and JavaScript. So I never think Never Say Never always is a good time to start learning anything really not just software development. If it's either for a career switch into a developer job, or just as a hobby programming can be for anyone of any age. Absolutely not. I think age, even though obviously it is a real thing. It's also a social construct all of these expectations around what time You should be doing things at what age should you be doing any particular tasks, those are all just social constructs. So I don't think you should believe anybody that tells you you can't do something, no matter what age you are, yes, it will be harder to learn. Because when you're younger, your brain is like a sponge, and it retains information better. But regardless of your age, you can 100% learn to code and you should, if that's something you're passionate about, I actually personally know a lot of people over 40 that started learning to code and now are getting careers out of it, like complete career switches. So now I don't think you can ever be too old. These a diploma in computer science worth it worth it, probably, but required, probably not. But then again, this kind of depends on what field of programming you're going after. Some may require formal education, some may not. It also depends on the location where you leave, and so on. So I would say if you're able to afford a formal education, go for it, then it will be worth it. But if you can't, please don't take out any loans, because it's not going to be worth it in that case, that really depends on your situation, if you have the money and time to invest in a computer science degree, and it's also the best option for you personally, and mentally, then I would say yes, a computer science degree would be great. It gives you lots of access to professors who are knowledgeable about the foundations of computer science, you're going to get really great foundational knowledge of software engineering, you'll also have access to lots of resources, you'll be able to network with people in the industry, maybe get internships, that's a really good leg up into a career as a software developer, many jobs will even say they require a degree in computer science, or that equivalent amount of experience on the job. Web development in general can definitely be done without a degree, especially with all the free ways of learning that are out there. Now, it's actually quite easy to get started with programming without going for a degree. Well, in my opinion, the answer has been no, I have a diploma that I got after I already learned to code, and I've never used it. But if you can afford to go to college, and have that experience, I think it's good that people get that diploma, so that they can have that experience of learning how to learn in a real college scenario. Do I think it makes you a better developer? No. I have mixed feelings about this, because it really depends on what career you want to pursue. Personally, I don't think my computer science degree was worth it. Because I could have learned, actually, I did learn most of my knowledge from YouTube, from online courses from free resources from Google and Stack Overflow. That's where I gained most of my knowledge. But what university was very useful for is building a network of people, providing you with opportunities, and having a structured approach to learning. So it's useful for those three things, but it is definitely not necessary. So if that's what's holding you back from entering the tech world that don't get one, just learn by yourself, maybe take a bootcamp but you can 100% learn on your own and don't mind a computer science degree or feeling like you need one hold you back. I don't have one. But I think it's fine. I think if you do get into this, and you go through a boot camp, and they don't teach you data structures and algorithms, it is probably something that you want to follow up on. And if you want to get into something like machine learning, then some extra math would also do well. But yeah, I don't think it's necessary for a practical working job at this point. Well, I personally don't have a computer science degree, software development, or computer science wasn't really something on my radar, I actually studied architecture. So I did the math. I did the physics and it just wasn't really a thing and wrong my friendship group. So if I didn't do it, you don't have to, of course it does help. But is there a really hard prerequisite? Absolutely. If you have time and money to go to the university, go for it, because apart from the knowledge, most importantly, you're going to meet the right people. I don't think it's worth it at all. But if you of course if you have a diploma, it's a great add on you can add it to your CV and it's just like a great add on for you. But for just been getting a developer urine needed deployment you can learn all by yourself. My short answer to that is no. The longer answer is it filled specifically has a big advantage that whatever there is to learn, you can actually learn yourself from online courses, YouTube videos, self practice, etc. You can even create a portfolio of your projects, host them into a git repository and show it to your potential employers as an evidence of your knowledge. Plus, I would argue that most of the latest technologies or latest versions of the established technologies aren't always taught at universities, simply because they can update their curriculum so fast to keep up with these changes. I would say it is, I think that if you have one, it might be a little bit easier to break into the industry, although it does take a lot of time and money. So those are your main considerations. If you don't have a lot of either of those, then perhaps a boot camp might also work for you. So was it worth it? I think it was for me, is it required though? Now, there's different avenues nowadays to break into the industry, you don't need a diploma to get started. I would say, if you have the money, then absolutely yes, it is worth it. Because computer science will teach you things that will help you to become a better programmer in the long run. However, if you don't have the money, then I think that he should maybe just try a bootcamp or for example, here in the UK, the government is giving free 12 week program for people to get into coding, which is amazing programming influences your health, it's a very sedentary job, you're sitting in front of a computer for many hours every single day. And from a physical perspective that can really take a toll on you. I have implemented quite a few systems to help keep me active throughout the day, I set reminders on my watch. So my watch will vibrate every hour, so and let me know that I need to stand up and walk around for at least one minute, it's very easy to get caught up in a problem or writing code. And all of a sudden eight hours goes by and you haven't eaten. You haven't had any water or gotten up to do some exercise. So be sure to take routine breaks. And I really love my standing desk, it keeps me from sitting all day. I do think that with any sort of job, when you sit too long at computer, it is important to get up stretch your legs, get away from the computer every 20 minutes or so even though that does seem quite hard. Now, when I think about it, I definitely don't do that enough. But I would say that taking short breaks, letting your eyes rest is key when doing what we do. It's very addictive. So I remember when I started, as a junior developer, I just wanted to you know, fix a bug from Friday, I would spend Saturday and Sunday working on it. And then Monday, and then carry on for, you know, weeks and weeks just focusing on programming without no break. And obviously, that can have a big impact in your life. So burnout is a common thing within programmers. Yes, programming can have an effect in your health. But I would say it's like everything, right? So you know, just don't have too much of it. And it won't be a problem. Well, it definitely makes your brain more active and possibly saves you from Alzheimer's. But because you sit down a lot, you need to plan in a lot of physical activity in order to stay slim, not great. It is a lot of sitting down. And that's not particularly awesome for your health. But I have noticed that I do apply a kind of engineering rigor to my workouts. And when I actually work out, that actually helps a lot. So there is that? It's kind of a funny question. But I think there's some truth to it. Because if you really get caught up in a problem with programming, then it's easy to maybe drink too much coffee, do not get up enough from your chair, maybe eat some unhealthy food, because it's just easy, and you want to focus on the problem. So make sure to get up exercise, eat healthy, do all kinds of things, but also for your mental state, right? It's very much a profession where you have to think a lot. So make sure to disconnect at times, do something completely different to relax and not get too caught up in complex problems that won't let you go. Well, for me, it's quite an advantage because I am remote and I get to work my own hours. I get to go to the gym five times a week, if not seven, and I get to Power Lift every single day. So for me, I get to enjoy what I love at the gym, and also get to program mentally. I use the gym to give me clarity, as well as taking away any stress I might have from the job that I do. So a lot of times as developers we are literally on our desk sitting for hours upon hours. And in the long run this could cause back aches or you can start having eye problems. So in this scenario, what I would advise is, as well puzzle should take care of yourself If you notice that you're having back ache, you should definitely get yourself an ergonomic chair that would help you balance properly, or standing desks where you can switch between sitting and standing. And also, if you are having eye problems, because you're always looking at the screen, definitely get yourself a blue light blocking glass. This really helps improve your eyesight as you work everyday. Do you need to know math to become a developer? Seriously? No, absolutely not. I don't know where this comes from. I actually teach programming in elementary schools to fourth graders, and they have this idea that takes a lot of math. So it's got to be like an episode of Sesame Street or something, please don't watch that episode. Now dubbing maths, well, it's very helpful is not again, a hard prerequisite for learning how to code. There are many avenues that don't require any maths at all. For example, when I was working as a software developer, in my old company, the amount of maths I did was very negligible. When creating games, for my tutorials, it is a bit higher, but it just depends what kind of area you go into. This depends again, on what you want to do. As a programmer, for instance, if you want to be a game developer, you may need to know some math, especially if you're working on game engine that will evolve a lot of game physics. But in general, No, you wouldn't really need any math to become developer. know myself, I wasn't that good with Maths. But still, I'm a software engineer, obviously, depending whether you want to, you know, go into a role where it's, you know, heavily maths focused, such as a quant developer, then yes, you need to know maps, but there are many areas in software engineering that you don't need to know maths at. All. Right. So also, it depends on on the industry that you you're planning to go into. But in general, you don't need maths? Well, it depends on the type of developer. If you're going to be doing machine learning, or data analytics or quantum computing, then yeah, but in general, you just need to know basic math. Math is obviously a related field, right? In programming, you're likely going to be working with some form of numbers, you know, you might be writing some algorithms. But does that mean that you need to be a math expert? Not necessarily. I think, you know, if you do a typical CS degree, you'll have your learn a little bit of math, but it doesn't necessarily turn you into a mathematician or anything like that. Right? So do you need to know some math? Yeah, I think so. But do you need to be like an expert mathematician? No, not really, huh? Well, I don't think so. Like, literally, you can be a developer without maths. Because at the end of the day, depending on the kind of developer you are, you don't have to deal with mathematics. So for for example, if you're a front end developer, you might need it at some point. For example, if you're doing like CSS Calc, you need to know like a bit of calculation table. To be honest, it's not a deal breaker for you to become a developer. So Max, is a good knowledge to have what not require? Absolutely not. You don't need math skills to become a developer, I would argue that if you know fourth grade math, that will be more than enough to start learning programming. What you need, though, is a decent amount of logical thinking skill, which you can easily develop with practice, because programming is about being creative and making logical connections and finding solutions. So programming doesn't follow any predefined mathematical formulas. So if the fact that you're not good at math is what's holding you back, then you have nothing to fear about because that's not going to be a roadblock for you. How long does it take to become a junior Dev. Now the natural progression of a developer is very different depending on where you are mine was to do a boot camp, then a graduate scheme, and then become a junior developer. And all in all, I think that process, including the boot camp took a bout a year. So that is just something that I went through, but again, is different for everyone. Well, as computer science evolves, you will probably need to know a lot more today than you would have required to know in like, say 90, it's but think six months is a safe period, considering that you will be say practicing at least once a day, a guess for somebody who's going to learn on a daily basis, it would be from like four to six months to be a decent Junior Dev. But for others who are just like learning from time to time, I guess most of them is going to be like 10 to 12 months to be a good Junior Dev. There is no set amount of time that anyone can promise you where you will be a junior developer in so many months. Now I think it's really helpful to get inspiration from people's stories where they say, Oh, I became a developer in three months or six months, and this is how I did it. But that doesn't mean that it will be the same for you. It could take you two years. And that's okay. That's your own path. Also, everyone comes into software development, with a different background. I started coding HTML, probably when I was 11, or 12 years old. Some people have almost never used a computer or can barely use email. And some people have already built lots of things in programming languages. So you can never compare yourself to other people. It depends on how much effort you put into learning, depending on your current circumstances, you may or may not be able to invest the same amount of time as others. In general, I'd say six to 12 months, but don't compare yourself to others. Go at your own pace, and don't rush, you're going to be a better developer, if you take the time to really learn the fundamentals, I could tell you that it would take you three months to become a junior Dev, but I might be wrong. Or I might be right. It's really individual, because everybody learns at a different pace. And everybody learns different ways. So while it could take you three months, it could take somebody else nine months or even more. So don't be discouraged. If it takes you a little bit longer to become a junior dev than somebody else. Don't compare yourself to somebody else. He took a and there is nothing wrong with taking a little bit longer. Take your time and just do what you're doing. It will take you exactly as long as it's needed for you personally to become a junior though. I think it really depends. Online, you do you see a lot of the best case scenarios. So you know, you see people that learn to code. And in six months, without a computer science degree or anything, they get a job at Google, or you do see a lot of people that learn to code and then get a six figure salary three months later. I think those are best case scenarios. And even though that can happen, and absolutely yes, it does happen. It's not the norm. And it's not what you should expect. And I think it, it discourages a lot of people because they have those high expectations. But I think a realistic expectation for learning to code. From day one to becoming a junior Dev and landing your first job would be a year or even more. I think building those foundational skills would take at least six months, I wouldn't trust anyone that tells you that it can take less, I think we should set a little bit more realistic timelines, which programming language to choose first. Now this is of course, a great question. And again, it depends on where you are geographically or what you're interested in. For me, I did HTML, CSS, JavaScript, and then we've done to react and started looking at some Python and some back end development as well. But again, that is not a hard, you must do this, it will be different for everyone up? Well, I don't think there is one right answer to this, I think that is the language that you enjoy most the one that sticks with you. So try out a couple of different languages and see whichever one works for you. I also feel that if you've mastered the wonderful art of programming, that it doesn't really matter what language you use, if you fully understand one language, you can apply those concepts to any language out there, I would go with JavaScript just because you know, you can use it for front end, you can use it for back end, you know, basically, you can do it for full stack, you can use it for mobile development. So you really, you can go all over the place with JavaScript, and it's a multi paradigm language. So there's a lot that you can learn about programming with just that one language. So I think if you're not sure, in my opinion, nowadays, JavaScript is an absolutely great way to get started 100% What I would recommend is Python. Python was my first programming language and what we learned at university and that is because it reads like English, it has a very simple syntax, it's easy to learn, it's easy to understand, as a beginner, and it can help teach you the foundations. If you do want to do front end, then I recommend JavaScript and obviously learning HTML CSS, in my opinion, I think you should pick a language that will teach you the fundamentals of programming well enough, and as many concepts such as object oriented programming, interfaces, types, for example, right? Now, if you go into language that doesn't teach you all of these concepts, then you can find a little bit difficult to move forward. So the benefit of learning for example, language, such as C++, Java, C sharp, C, is that whatever other language follows, you will see so many similarities that you'll see that language is just a tool for you to solve a problem. Now, I'm a C sharp developer, I love the language and I do think as a Great one to get started with. But ultimately, I would probably choose Python, mostly for there being so much learning material for it. And it could be easy to get started with C sharp is a very close second, then, if I were starting out, I would go to the local job market and see what's on demand and go from there. Another way is to simply try out multiple different languages and see which one you would like, which is easier. Maybe you like the syntax of one language better than the other, and so on. People fall into a few different categories when they're learning to program. Some people already have a goal in mind of what they want to do, for example, you want to become a mobile app developer. While then you will learn Java and or Swift to work in that ecosystem. Now, if you don't know what you want to do, there are two recommendations that I have from working with students over the years. And the first is that if you really have no background, in programming, or much technology at all, or if you are an artist, or very design oriented, I recommend learning HTML, CSS, and JavaScript first, one great thing about that stack is it starts you off with the most basic languages like HTML, CSS, and gives you instant feedback in the browser, for everything that you're building and the changes you're making. The nice thing about that stack is a browser is something almost everyone is already used to using. So it gives you kind of that comfortable place to start coding. If you are a little bit more tech savvy, and or you are not very good with design, my recommendation is to learn Python first. It is such a great general purpose programming language, has a wonderful community, and is used in pretty much every different type of programming, from scripting to web development, Blockchain, AI, all different sorts of things. This is kind of a complex question. And I'm going to preface it with it doesn't really matter. But if you're a front end Dev, or you want to be a front end, Dev, choose HTML, CSS and JavaScript, get the basics down and move on. If you're a back end Dev, choose a back end technology that excites you, such as Java, Go Python, for example. Other than that, it's just about picking something and getting started. I mostly recommend to start with JavaScript, because it's easy. It's flexible, and is the most popular programming language for developing web applications. Because programming is generally pretty abstract. So starting with web applications, where you can see the results visually in the browser helps a lot to understand what you're actually programming, because you have some actual visual feedback. Plus JavaScript can be used for both front end and back end development. So with one language, you actually learn the basis of the full stack web development. For me, I started with C and C++. But I guess for nowadays, it would be better to start with something like JavaScript, or maybe Python, but I see Java code is a better choice to go for, since it runs literally everywhere. Give us some tips on motivating yourself to study, I would say start with a project, it will be something fun to work on, instead of doing random exercises, or going straight through a book or a course. And with a project, you're more likely to go, oh, I need to do this for to do what I wanted to do. And you'll go and see how to do it. And you'll learn how to do it at the same time. I can share two themes here. The first step is for you to create a study timetable. By having a study timetable you've already set aside time for when you would like to study this really helps you because then there is no way you would say that, for example, you don't have the time or something else is blocking your time because now you have a schedule. The other thing I'll say is for you to find a study group, study group really helps motivate you because do you have a group of other people that you can look out to that would help motivate you to go ahead and study so having the study group is great. And also setting a study thank you is also a great way to be motivated. I guess the best way would be to find what interests you the most and try to learn it. Also I find a good way is actually to follow video tutorials. And try to like follow them and create whatever projects because this is going to give you a lot of more motivation and a push forward to learn by yourself and create your own projects. Start sharing your progress with the developer community. You could be on Social media like on Twitter, for example, or discord or somewhere else, just make sure that you're sharing your progress, it will give you the needed motivation. There are many different kinds of motivation that work for different people. But one of the best things for me personally, is to follow inspirational people on social media, I love getting inspired by different accounts. Also, to force myself to study, I typically use the two minute rule, which is just telling yourself that you're going to do something for two minutes. And after two minutes, you can stop. But usually, because you gain momentum, you don't stop after two minutes. So you kind of trick yourself into spending the time to do that certain activity. Obviously, that's not only for programming, it's for everything. But I find the two minute rule always helps me. And you know, time blocking every single night, I'm trying to learn to code from this time to this time. And sticking to that is super important. I would say, being part of a community. It's really, really important, because you'll find like minded people like yourself, and you'll feel like you're not alone in this journey. If you are part of a community, get engaged, ask questions, have study groups with people meet people. And that way it will drive you forward every single day, that days that you will feel like oh, this is so difficult. And if you are alone, it's much easier for you to give up. Now, if you are within a community, and you've got people supporting you, then you kind of feel you know, someone uplifting you all the way if you are stuck, you ask questions. And yeah, just be part of the community. I think it's one of the best things that you should do to motivate yourself. Well, motivation is a short term boost, you need to have a clear understanding why you're doing this. This is how you'll make sure that you'll go through all the rainy days. And all the days where you don't really want to study at all. And generally try to switch between activities. Let's say you're coding than switching to something like running or lifting weights. This is how you can split your day and not to get bored with what you do. This is kind of a difficult question for me, because I'm a self motivated learner who wants to learn about everything, regardless if it's tech, cars, nature, woodworking, whatever I'm super interested in learning all the time. So I motivate myself by finding something I'm interested in. And then I start reading about it and decide whether or not it can hold my interest for a long time. Once I have that I can study all day, every day about a topic. I think the most fun way to learn anything is with actual real projects that are interesting for you. So once you learn the basics of a programming language from a course, for example, you can start practicing yourself. For example, if you want to learn JavaScript, think about a web application, you would want to develop for yourself, maybe you love sports. So you want to develop a web application that shows all the fun sports events and activities near you. Whatever it is, this will make it much more fun to learn coding than just going through a book or a course with boring generic examples. Sure, there will always be cases where you have to force yourself to do a little bit. But I think if you can find something that you enjoy most something that feels like a hobby, then the motivation will be no problem, you will enjoy it so much that you will continue working on it, you will find any spare time that you have to put into it. And the motivation will be no problem at all. So make sure to find something that makes you happy. Don't study, build stuff, and study what you need as you're building stuff to build this stuff. It's called constructivist learning. And it's a way of teaching yourself new things. By doing those things. You don't learn how to make cabinets. By just thinking about making cabinets, yo make cabinets by building cabinets, same sort of thing with software, you learn how to build software by building software. It was so helpful to me when I was starting out to really consider why I was getting into software development. I was at a complete dead end in my life. I'd wanted to do this for a long time. And I finally pushed myself to become a professional developer back in 2015. One of the ways that I did that was writing down my reasons, all of my why's for getting into software development, where I could see them and remember them. And I found that very motivating for me. Another thing that I have realized that can really help you push through challenges and when you get stuck is something I call building early and often. You really need to have have successes along your journey while you're learning to code. One of the best ways of measuring success is by building projects. When you can look back and see the history of things you have built, and see how they started from simple little projects and got slowly more advanced over time, you can really feel how much you have been growing and learning. So even when you're stuck on something, and you feel like I can't do this, or why can't I just get it, and you start to say all of these negative things to yourself, you can look back and say, Wait, I have come so far and learned so much. This is just a small bump in the road. And whether I figured this out right now, or later on, it doesn't matter, I'm still going to make it to my destination. Always think of it this way study as if your job depended on it, which it does. You know how much you study is going to determine how well you'll be able to break into the field, the industry. And if you're already in the industry, how much you study, or how much you learn in general is going to determine, you know how fast you go from a junior to a senior. So as an engineer, you're going to be constantly studying and learning. Try to do a little bit each day if you're struggling, you know, use Pomodoro or something like that. Join studying communities, there's a lot of them online, go to coffee shops, go to libraries, wherever it is that it motivates you to study go there. But in general, just try to do a little bit each day and you know, make a routine out of it. And that's really all you need is just build a system that keeps pushing you forward. In programming, there is never an end to learning. There's always something new to learn about. So don't get overwhelmed. Take breaks from studying or just reading about something by building something with the technology that you're studying about. You're going to learn so much faster, and it's going to make it more interesting. Also study things that motivate you. If you're not interested in something, then it's going to make it so much harder to learn about it. Now, I think the most important thing when you're studying is to find something you are genuinely interested in. So for example, if you are currently learning JavaScript and you're just not into making to do lists, there are plenty of other things to build out there. If you want to build a game then definitely find that or if you want to build a website that is cool too.