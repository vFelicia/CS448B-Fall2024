what's up everybody uh we are back for another live stream today we are going to be finishing up our shopping list looking at generators classes iterators and uh maybe even a little puzzle that that's one of my favorite little puzzles to do so all right thanks for joining us today if you are new i am sam i am from python basics and beau and quincy are hey jan how are you um allowing me this wonderful opportunity to share my joy and love for python so all right like i said i think we're on our uh eight i don't know jan wait this eighth or ninth jan helps me stay on task he's a he's a champ for me all right so let's let's one get into what i i completely forgot so we need to start looking at this so this is how you solve the problem if you have a file that has spaces and you're calling from dos it's a double quote i forgot and i was using a single quote code camp dot py close that out and boom you get you get your file so let's look at a couple of problems right here so we've solved we've solved a lot and i want to add this i can't remember if i talked about tell or not what tell does it is this it is very handy so if you lose track of where you are and oh and forgive me for the coughing uh i've been trying to treat my throat uh ben actually didn't talk most of yesterday my kids made fun of me they started whispering but uh no i'm gonna try to hang in there as much as i can i think we can get through everything and i have a pile of cough drops in front of me uh dude did some tea and some uh honey and even tried uh letting dark chocolate melt sorry if i cough a lot i greatly apologize but all right tell it actually tells you where you are in the stream of the file so we're gonna i have this here and if you get if you're getting an error especially then input output can't read or write yes it tells you the position where you are in the file stream so that's actually kind of where i theorize where the term stream came from it's a stream of data so when i have an open file it's uh in the documentation it called it it called this uh did it open this is where you are return a stream so there we go so what tell does is it tells you the position so if you're at the top of the file you're zero and then um like if we're gonna run this let's get into it let's just stay right here and then i have it as an easter egg as please tell please tell so i'm at 71. so one thing that we need to go over is what is happening right down here so we are we grabbing our list our our file we're turning it into a list that we enumerate let's bring this back up here uh shoot i got okay you guys should be able to see that yeah perfect so then i'm wrapping this in an enumerator then i'm turning it into a list so that i can count it then i'm unpacking it then printing it to the screen now what happens is once i choose which one to delete if i pick a nonzero then i go back to my list sorry something just fell behind the computer hang on one second sorry guys i thought something was back there probably something's about to fall hopefully it's nothing plugged in here all right sorry about that guys would be about right okay so then i go back to my list and and i have to i'm going to then delete something out of the list and i'm enumerating so that's why i'm subtracting one so i know because we have to adjust from the user to the file the user is not going to tolerate this this being zero through whatever number they're going to want to see one through however many so that's why we're adjusting this to minus one then we're literally just taking that list and rewriting it to the file so that's why we go w here so we don't have to go and get fancy we're just gonna literally reopen the file with w completely recreate it right over it and write our new list now i want to show you this right here the user will not want to they're going to sit there and if they're in this part of their list they're going to want to maybe delete more than one thing at a time so we need to figure out how to get that list to come back up so we're already here writing so what did i tell you guys how you can do both at the same time anybody remember all right so what we're going to do is we're going to add a plus sign so we can do write and read so when we write we are at the end so basically it's going to be because as we're writing down we're putting in we're inputting we're at the end of the string a we're at the end of the file so we just wrote we went to the file now we've changed this so we can read it as well so now we need to do is come here and after this let me make sure this is going to be in the right spot yep so now we need to go file file dot seek because we're jumping we want to jump to the top and then literally it's just this all again so it's items equals list all right so since it's the exact same i'm going to copy it i know i know i know it's probably going to break but i don't want you guys to be have to be tolerant of so all right what did i do there i did not do tabs i did control close bracket and how i need new to do control close bracket is indent indent region control close bracket so then i save this again then i exit then i run so then i list okay then i want to delete shoes so then i want to delete jelly so boom i get the list back every single time after i write it and then i come back up here and i'm back to the top so there all right so that wraps that up so 0 to continue and then exit all right so now onward onward to new things we have wrapped that up so i hope everybody has had a good week um but yeah i just always want to appreciate uh bo and quincy for affording me this awesome opportunity but yeah uh if you're new here um i've been studying python for about seven seven years and teaching for about five and have had my youtube channel for three and a half oh my goodness almost almost exactly three and a half years so any of these videos actually all of this content has already been done once before in micro videos and i'm not smart enough to come up with that name micro video one of my subscribers did so all right let's comment this out and if you're new here no but i you look down thank you i got you all right so if you are completely new highlighter region alt shift comments out everything and then alt s saves here's actually here's one thing if you are super super new awesome glad you're here but here is a fantastic way to know if you have not let me see how bright big that is if you do not know if you have saved the file so it's going to have this asterisk up here and also you run f5 and it's gonna jump because this is gonna tell you hey you did something even if you even if i even if i do one return it's gonna jump up here and it's gonna ask me to save again so there we go all right classes and generators all right we're going to go super slow because this can get out of hand really really really quickly all everything in python is an object a type of variable a variable is a class and so all right x is an object it's a variable that 5 is assigned to x and that type of variable is an int all right that's our starting point that's how we're going to move forward okay now let me see sorry i don't know what's happened i'm falling apart i'm 43 and everything's everything either hurts something always hurts or something sore like nothing's always working all the time so all right we're gonna build we're gonna create an object that's a rectangle and um and also let's look at list because this is this is a great one so so we have der on y so this is this is what we're going to be doing has anybody ever heard the term double underscore you won't ever hear me say dunder have you ever heard of dunder i'm not just asking i will never use dunder but this is double underscore and let's see in it there's iter so we're going to get into iter we're going to get into uh len we're gonna get into uh repper and now there we go and where's string okay these are the things that are happening in the background and here are methods that we can use these happen and python uses all right i'll say that again this is what we use these are what python uses so we're going to create an object we're going to create our own class rectangle and we're just going to go from there okay and of course we're going to use the keyword class and we need to look at in it do i have this position right all right so in it i thought it was literally in it this is in it the first time i saw it but it's initiate and it uses new so as you can see where did we go let's close it let's string that down uh new boom all right there's in it okay so new and in it all go together but what this does is how do we create what do we do to create how does this object come into existence so we're going to set the rules of how this object comes into existence so literally you're creating a brand think about it as you're creating a integer or we already know how to use integers and lists and tuples but now we're gonna you're creating a new something new that you're gonna need to use that is gonna react on its own you're creating a new object like a list you have a list things can come into it can come out of it and you can do things to the list so here and when you're creating an object a class just these are methods right and i said that they act like functions we know how to create a function so it's the same structure you just utilize them with the dot notation method so the very first thing you have to do is initiate it now this next word can get really weird really really fast self the best way that i have found to explain this is like this that y is a list but it is its own self right so this is each time you're going to create an object it is this type but it is itself all right does that make sense to everybody you'd only if you need to jan if you need to um if it's super complicated possibly but you wouldn't want to get into any import air probably you'd already want that in the file that you'd want to be using like a pie game file you already have that in with your loop you wouldn't want to have any issues with bringing it in unless it is ace even a overly complicated or an excessive object it wouldn't be so big that you wouldn't be able to fit it in the file and i would uh this is reference re shuffle you only want to have your own files because then when you get to having uh then we're talking about packages uh not only would you have modules but then uh then packages i mean you could but oh actually that might be a good lesson for us to get into um the double underscore main maybe we can do that next time oh uh one important admin note i haven't gotten to tell bo and uh quincy yet uh we're not gonna have a live stream next week uh i've got i've gotten a little behind a little bit so i need to take a a week off i'm not gonna even have any videos on my channel so we need to do that you you can't you can jan but i i don't recommend it unless it is a super super complicated item and then we can go from there so all right a rectangle basically we have uh the rules of a rectangle two sides two sides so length length width all right so same rules same rules apply now here's where this gets weird so since this this is its own self in this instance so you have to think of these as their own instance so we do self dot length equals length all right so you're bringing this in you're taking in input you're then going to assign this to this i know it feels so weird right now but am i spelling everything right yeah okay so then self.width equals width okay now we're going to do something let's see any questions no not yet all right so let's put this into memory what do we call this didn't mean to do that sorry guys so much to talk about about our shopping list still but who who said it was making them hungry the shopping list yeah i was glad i was able to get up and uh but uh oh tech what's up tech okay so all right we have our our new x we just dumped memory aha so it knows to have it's going to when you need to pass in our length and our width so we're just going to go three by three okay so then i call oops so then i call my object so right now we've created it we've initiated it but we've done absolutely nothing with it now this is where this is where the programming and the fun starts let's just add a little bit here and because i'm going to show you the wrong way and i'm going to show you the better way just just to show that we've done something sorry um oops i really would have bet any amount of money that i that i muted that all right any questions so far you're is links by width and then close that out save this boom so i now have something go out to the screen that the that our programming user goes okay i know something happened you put something out to the screen awesome thank you for doing that okay well we have a we have a rectangle we usually want to know stuff about it right so now we are going to look at a way so that python uses this now why don't we make a method that we can use all right not a big speller as i'm sure you guys have noticed so this is going to be short for perimeter if i start typing perimeter it's not going to go good all right let's see so again i'm using myself so we're using this we're regarding the object that we just created are our x which is a rectangle all right and let's see where we are uh oh okay so perimeter it is our length times width times two so so let's do that two times self width times self length all right let's run this boom so now now i want to challenge you guys with something that is a method what attributes do we know right now about x anybody got any thoughts and it's fine if you don't because this was one of the things that threw me off for a very very long time about a natural difference between an attribute and the method and things like this so the attributes that i have right now are length and width and it's just information that is associated and this is where my self comes into place the self length and self width take in from here and assign it back to itself that's why this comes up i guess i should have done 3 and 4 so we can see to make sure that we did did this right and now my perimeter so 3 times 3 times 2 is 18. so i did the math correctly here so now let's do what's the other one area why don't we look at area def area self then print uh so what that's just uh side by side self width times self length one glue good there we go i'm sorry if sorry about the cough drop hopefully it's not driving anybody nuts okay put this back in memory hopefully that's not too loud either sorry uh yeah let's change this up a little bit make sure should we show that we're doing all right your rectangle is three by four so then we call perimeter 24 let's check that make sure nothing changed right 4 times 2 24 okay so now x dot area 12. so the area is 12 square whatever centimeters square feet uh don't know i guess we did not uh maybe that's something else and then our x uh let's check this length boom width boom perfect so everything's going pretty good right now so now now let's get into a little bit more stuff so right now i have my double underscore in it and that's that's a cleaner nicer way to say double underscore and the reason why it's called double underscore let's look really really close if i can get you the right one there it is so one two one two never found in the pep why it was two um but that's why it's double double underscore because you literally are depressing and putting in place two underscores all right so now in our init we have this we're getting something out of the screen to share to the programming user that you have created something and this is it right here but that's not best practice i'm going to show you what the best practice is something that's called wrapper the official rep string representation of an object and guess what it has a double underscore method and then we're going to go into double underscore string so right and it's called by the wrapper function so if anybody has not noticed this when you create a double underscore method it is associated with a method a builtin python method so you're telling python hey when this method gets used come here and use it come in here and do this all right so now let's fix this right now uh okay so we commented that out so we need to get our double underscore wrapper and did anybody notice what i did i left out a double or i left out an underscore all right and so we stick with self sorry my light seems brighter today so you can see my cheery face all right so this is the official documentation excuse me this is the official string representation of the object so basically what this is saying is when you call this object back is what did we do here what is that do we have any idea what that is i don't and i don't think you do all this is saying is we got we got this yeah we're going to be doing double underscore main soon that's a cool um run through so it's that it's in this it's in that file that you just ran the main file it's this object and it's livid in this memory other than that i i got i got no idea i got nothing for you here's here's here's the best that i can do for you but when we use wrapper double underscore wrapper we're going to tell python what to put out on the screen and i want print your rectangle so when we used this up here it created and came out to the screen and did this but let's do it here is that where i have it no that's not the one i want that as our yes i want that as our string this is wrapper double underscore string so all right so what i'm doing here is we're going to just spit out this let's just show it and then we'll go through it so before when i would press when i would call our object a rectangle object i would get this so now when i call it i get boom this right here so i'm kicking out and i'm making this nice neat and pretty and you can use it now now let's look and see our double underscore str now that this is where it gets all right str called by string object with builtin functions format so it is the informal or printable string representation of objects so if by chance you did not have a double underscore wrapper it would come down here and pull the string so let's do this because this is where this should go double underscore st str double underscore self and then does this return yeah this is return oh we got to put in memory so when we call so let's go over this real slow so whatever when these are called as you go through and you all of the and we and we'll see this in a second when we get to iterators and generators all right so the builtin functions that python has done all this tremendous work for us when you want to interact when you have an object when you want to when you want to interact with those functions this is how you do it all right i haven't clicked over and looked at chat in a while yes that is the memory ram address that is exactly it yes uh actually that would be something that we can do because i do want to get into um is and uh because copy because you can get very lost into copy very quickly so yes but that is the memory address location um how to deal with those but yes you're correct you're absolutely correct jan jan's got always got good questions that is the ram address on your system all right uh i digress i can get i can get sucked in to this so quickly but you guys you guys are absolutely awesome and absolutely awesome ask awesome questions all right but this is how you interact with python this is where you begin to control and have the program user get what they need out of it so when they are using functions this is how you control what comes out to the screen all right so we're 35 in oh we have got to touch on inheritance because that gets very cool very quickly as well so alright so right here we just created a really simple object let me get this hopefully i didn't drop this that bad so we created a little object takes in two arguments and then we know how to use well create it then we know how to use and interact with the wrapper and the string built in functions for python you creating and using our double underscore methods wrapper and double underscore string and then created two new methods or two methods for our object so where where python gets very very powerful very quickly it's called inheritance and what that is is especially when you're wanting to borrow i'll give you a perfect example of something and hopefully we're still working together and we can touch on it but you don't want to create a new object you just want to bring one in and either shrink it or expand upon it typically you'd expand upon it i don't know why i said shrink it but you go okay i like i like everything about this but there's a couple more things i'd like to do with it so you bring in this object then you just add some so we're going to sorry i think i have a delivery so hopefully my dogs aren't going to go to nuts for you all right so we're going to deal with a species dog and then jump into breed so we go class dog species let's see if i spell this right k9 so i'm gonna then we need to talk about what i'm there we go what i'm doing right now voice and they bark all right so now what i'm doing here is i'm hardwiring so right now i haven't brought i don't have anybody interacting with any part of this i'm just creating these attributes and i'm hardwiring them in so now when i call when i do let's say uh buster and he's a dog boom buster so there's my there's my object and buster is did i spell that right i didn't even know yeah sometimes okay so he's a canine and then buster's voice he barks now this is where it gets cool alright so so now if i bring in and i'm gonna i want to do so what a breed of a dog poodle so i bring in dog i'm going to inherit and i don't know if we talked about pass before keyword pass basically it's telling python hey uh i know i got some stuff here i have some indention just go ahead and ignore it for now and i promise i'll fill it in later sometime you don't have to but it'd be odd if you had it there and didn't fill it in okay so um so now um we have uh rusty he's a poodle oop did i not put that nope here check this out so how did i make that mistake right here came up here so of course poodle's not in memory right because i didn't save it rusty now i didn't pass anything into all i did was come up here and say go and grab everything throw it into poodle rusty then his voice he barks and then rusty dot you already see where this is going species he's a canine so all right these are the building blocks and i want to let this sit and go from there but and i'll just give you a little tease so when you're building so it took me a while to understand what how how something can happen so think about think about a character in a video game or even a block that's just sitting there and yeah how do we keep this sorry a bird just flew into my window glad i didn't yell um so instead of doing functions so th this is the beginnings of object oriented uh programming oop you and i have we've been interacting with functionality functional programming lots of lots of uh lots of functions doing things this is the building block where you set rules and when an input happens to this object or an event you have all of these scenarios and conditions and then so like if you have let's just go with the block so if it gets hit with another object you have rules for that and methods that then go from there and things happen then if you get when you get more complicated you have a character in a game you press the up button they do something they'll move forward and now with game sophisticated you're going to need to then have the shoulders move maybe the head the torso and all of these things but instead of going through and having to think of all these scenarios you create an object then then that's the player then you create a player off that object just like we do strings so just like if i so i could do let's bring this back this is a perfect time to do this so i have my x let's keep this here then i have my y and it's you're getting the idea that's exactly but it wouldn't be quite as each each input each input would have its own and then you don't have to think about it so as you're looping through like here's a perfect example with um with pygame update so as you run the update you have an update method for that object so each time through if something's happening if this condition is met do this so then i have y and this is going to be 2 by 6. so i have y and x 2 separate rectangle objects that are acting independently from each other it's all right all right my voice is already fading so let's try to get through we got i want to get through our puzzle i want to get through iterators and generators so all right i know this can get very complicated very very quickly let me get a cough drop i hope i haven't been hacking too much for you guys i know i love i love this stuff it's i mean it's it's crazy to me that it's still going down to a processor either having power run through it or it's closed still still blows my mind how sophisticated we've come from a light lighting up or not okay there we go i could talk about this forever okay so we need to we need to talk about iterables and iterators does anybody have any idea the difference between the two so you iterate through iterable objects so iterators and iterables are like your hand all right all all iterables no i haven't said this in a while so i'm going to mess this up so you can iterate through iterables and iterators but not all iterables are iterators let's look at it so here is a perfect example of me turning and iterable and we're going to build upon it and we're going to look at it so name sam put this into memory then we call dir on name which i want you to look so we got our in it enter oh okay get an iterator from an object callable iterable so i can go through this because they act the same but they are not the same and the main difference is the next function so i like to lead iterator into generator all right so an iterator uses the next and double underscore all right so right now i do not have a double underscore next so watch so now for i am whoa that's how many times i type that then print i boom i get sam i don't know why the birds are so active today all right so now now let's wrap this up it's an inner object so now let's run dur on name so we're going to get into it we're going to get sophisticated really really quickly after this and one of the things that i love to do and i want to i just don't want to jump into the time module i like to let this stuff sit and percolate and then we go from there so the basically the the main difference oh wrong way it's okay because you can iterate over an aider and an iterable all right because it has next works so now now we need to look at next this is how you go through return the next item from an iterator so where these become very powerful is let's say when you have a command and you want to go through a iterable but you don't want it to happen all at one time you just want to go through it so let me put so now this is exhausted so i need to turn this off so i have i call name name so there is my iterator object then i call next on name next on name next on name and i call next on name one more time and it is exhausted so all right so now that is our that is our 4a this is our warm up to a generator so generator does and the reason why generators are so very powerful is they don't use up memory so again when we do our time and i'm going to show you and they're fast they're ridiculously fast so they're just sitting and waiting to be used it's almost like they have a set of instructions but they haven't created anything that's the best that i've uh come up to explain it they are a set of instructions and they just go and do it when they need it they haven't created anything they just know what to do they go and touch it come back and just wait for the next one kind of pun was intended i thought i'd get well you guys just have to sit there but i have a very captive audience i have a very awesome audience you guys are um absolutely awesome so yeah i think we can get to at least 75 minutes because we're going to do generator then i'm going to show you a little puzzle that i love to really get people to think about especially newer programmers of how to set a rule set up a rule of instructions because you saw that with our with our list here where we were bouncing around and you had flow all right i digress sorry guys okay so a generator what in the world is a generator so basically a generator is something that has a set of instructions that is sitting out there and waiting to be done it's all right uh seeing a jump up here so if you guys are new here thanks for joining us today i am sam from python basics this is our uh eighth ninth stream um and we are going through the absolute basics of python from the beginning heading towards intermediate and the sky's sky's the limit so um all of these videos are uh one are the pre all the previous live streams are in a playlist uh on free code camp and every single topic that i have done here are in micro videos on my channel in the description down below all right that's a little um admin right there because i did see that it went from about 200 to 250. so i know i know sometimes i can get all wound up and fly through some stuff generators and very soon we will we will show a awesome example i want wanna i wanna we haven't really messed with modules that much but uh time can be very tricky one and so i just wanna introduce you guys to generators and then we'll go from there so let's look at this and the difference in the keyword so we know that return is with a function and literally how you go from a function object to a generator is is it where was it yeah iterator object and this is how you then are going to turn these into a generator so n equals 0 then while in less than num yield now how did i know i spelled that wrong you guys could look at it and see my word because it didn't go orange then n plus equals one boom then five equals series i'm going to do this the short way we'll just do three so i'm creating a well i could i should at least do that since i'm calling it five i realized that i complained about this when i did it so five okay generator object series at this memory location well jan you know what i really appreciate that note jan is absolutely correct everything i'm a huge believer in trying to be very thorough and also building upon the next because look i want you guys i all right a little side note i remember somebody told me well just you just need to be more confident go go get some confidence what does that mean how do you just go get some confidence all right i want you to do these little skills these little building blocks i want you to know how to do it i want you to have success success and confidence are they're the same so i want you to be able to build these things these little little things have success building these things get confident building these things and then become more confident one of the coolest things that i get to do is read the comments of of these huge programs these lines of code that people write because of the things that i showed them that's probably the coolest thing that's part of all this so jan that is a great shout out if you're seeing this for the first time if you're seeing me for the first time thanks for being here do not be intimidated just a side note to remind everybody i started learning to program when i was 36 years old i'm dyslexic can't type can't spell um i have add if i can do it anybody can do it okay that's just type code follow along go back rewatch them do it again all right awesome shout out jan thank you so much okay so now let's run dur on five boom so then i do next on five i get zero i go next on five i go one that's done five two next time five three so where should this exhaust boom one two three four five now we could have started it one and gone through but i have i have five objects in and we're gonna we're gonna expand upon this and we're gonna go from we're gonna go from here but this is our introduction to objects generators iterables so now all right so we're at 56 we're gonna do a cool little puzzle to get us to think of patterns i love i love going back to this so if you guys haven't seen this oh is that i got to draw my little sad little stick figure i think so so a guy a robot whatever standing here he's got a bobble head so he's got to walk and go through here so how can he touch all nine circles with a repeatable pattern and this was one of the first ones that i saw and that i don't that i liked in my kids class of how that they had to solve this everything else was open for interpretation but i thought it was great for loops so here's a set of instructions to touch all of these and then you can put that one set of instructions into a loop of three so go forward go all the way down turn 180 degrees come all the way up turn to the right boom completely repeatable so step forward turn to the right go forward two turn 180 degrees go forward two turn to the right you're literally in this position right here so that loop you can repeat then two more times so literally those set of instructions you would do three times and i want you to think about it we did that with our loop right here we're coming through we're setting down and then we've solved this problem down here where we loop back through and turn that into a plus so here is the puzzle that we're going to do right now and it's i i think it's a great example and especially to get us to think of how to solve this and be very concise and we're going to we're going to be exposed to a new a new keyword so the puzzle is round to the nearest 5 if so it's a grading scale it's a it's a math puzzle for programming and the teacher wants to have wants to round up two so if if a kid gets the student gets a 78 it'll round up to a 80. they get a 77 it stays a 77. so if it is within so if it's if it is within 2 of the next 10 so if it is a then a 90 so would that be a 93 93 it rounds up to a 95. now we could do this longhand and have every single one of these scenarios but that's not pythonic that's not programming that's not concise that's cheating so this is a great mental exercise and recognition of a pattern that's what this is this is a recognition of a recognition of a pattern forward turn right turn 180 degrees one way or the other go forward two more turn to the right again repeatable consistent concise one set of four five sets of instructions repeated three times so here's here's our dilemma so this is what i want you guys to think about so if it was a 72 it would stay a 72 because it is not within it is not within 2 of the next 95 now if it was a 74 which these would be these would be my grades when i was in school 74 would be rounded up to a 75. all right so let's get into it so first we're going to take in so we need to figure out how we're going to do this and we're just going to take the function so let's just let's just take in a function or we're going to call it fives now we need to we need to think of it think about this how can we then get what information do we care about we care how close where it is what it is how close to the to the five right so we need to start examining let's bring this down all right i think that's good am i still within frame all right okay good let's bring that up a little bit yeah okay pass so we're going to start so if i want to so if i'm if i only care about a number if it's close to five well wait a second if it's close to five i'm going by units of five so what tool do i have to keep up with counting by fives this is a perfect example how do we how do we find out if something was an even or an odd number jan do you remember how we did that with even or odd because basically we're counting by twos so now we're going to be counting by fives no i never tested to see how delayed the module the uh oops i almost said it modulos bingo so 74 divided uh modulo 4. excuse me modulo 5 get a remainder of 4. so let's do this a little longhand i'm a huge fan of longhand until we begin to see what a pattern is so 74 would be rounded up to 75. 72 modulo 5 would oops whoa 72 modulo 5 is a remainder of 2. so that wouldn't get rounded up but 73 modulo 5 would get rounded up so let's look on the other side so let's do so 80 88 would be rounded up to 100 right 90 98 or excuse me 98.99 would both be rounded up to 100. so wouldn't get rounded up would get rounded up would get rounded up would get rounded up would not get rounded up anybody anybody noticing the pattern yet so when when would anybody see it yet so basically if my remainders are three and four i will round up to the next five so we're going to do this a very long way and then i'm going to show you a very cool concise so we got if x modulo 5 equals x plus equals 1. so that is that is absolutely very very true uh you can just you can just put your head down and whatever the assignment whatever the workload is so all right so if it's five we know we're gonna have a remainder if the remainder is four we know we're going to need to add one because what we're rounding to the next five so let's look at this really close and then l if x modulo 5 3 x plus equals 2. so how did i come up with two two and three equals five rounding up to the next five so if i come here and i test so if i have a list grades uh what 72 98 94 83 71 73 and uh 100. let's see if i did this right for grade in grades 5's grade so 72 actually let's get fancy i haven't done that in a while does that work you have to forgive me i haven't tested any of that there we go there we go so shouldn't have rounded rounded rounded rounded shouldn't have rounded rounded and shouldn't around it so there we go now bingo they add up to five so let's get let's get fancier let's get a little bit more let's get a little bit more logic based so we're still kind of manually manipulating this because we're still going through and doing math but what is what is a more concise realization of this pattern and we're going to learn who's used or keyword or i'm just thinking about that we need to do one for and and it's eluding me right now okay i know i mean i know i have one but uh who's seen the or keyword anybody jan okay all right this is where it gets really really concise very very quickly so i can put this all on three line i put all this on three lines but it's just thinking through the problem thinking through the pattern 5 equals 3 or so this being true or this being true so we're going to look at this um 1 equals 1 or 1 equals 2. true so 1 equals 2 or 1 equals 3. false so right it only has to have one true and has to have both or all oh yeah we need to do all we need to do and any and all i need to make a note of that hang on let me do that now for two weeks from now uh and all any and time we'll do time all right so dude where are we where are we all right we're boiling we're boiling this down uh or x modulo 5 equals right so it's this scenario or this scenario now here's where the math gets really fun and this is this is the math that i love i love to do all right no no no look you guys are doing phenomenal i forget who was saying that they had already done a bot i don't care about jargon i don't care if you use the right jargon or or not i mean if you have the underlying concept uh yeah that's that's exactly it having the jargon and typing exactly right that's practice understanding how to lay these out that's the important part you can go and google wow what where where to use it but if you don't know what to use it's pointless that you don't have to remember any of this there have been so many times i've gone back that's why you never delete anything don't ever delete anything just comment it out or make or shove it over and and com yeah comment that out do a new one just go back and it's for a variety of reasons one it's a resource that you have that you've already done and a problem you've already solved that you can go back and look at two it's to then also see the development that you've done sorry let's do this and start wrapping it up because my voice is my voice is uh fading fast i like that yes reed have the if you guys don't know the zen of python make sure you make sure you look at it let's do this jan you remember how to bring it in boom zen of python it's literally that import this yep bam bingo all right so now let's clean this up make this very concise just like our picture well not my picture but the concept forward turn right go forward two more 180 right or left forward two turn right boom you're done repeat those instructions three times all right uh let's see bring this down so now what pattern have we noticed with this so check this out x plus equals 5 minus x modulo 5. so if it's off by 4 we add one if it's off by three we add two so as long we just want these to equal five right so that's why this modulo if it equals three we subtract that 3 from 5. we get 2 we add 2 to x if this is equal to 4 5 minus this would be one we only add one print x it's a boom and helps if you use the correct boom same same output exact same output not move should move should move should move not move should move not move so boom so there we go this is probably one of my favorite one of my favorite puzzles uh well i got a i got a couple i love the chicken nugget one from um uh the mit puzzle have we done that yet jan have we done the finding finding chicken nugget combinations yet i know we did nth prime number and then we did what was our decorator we did a nested function for uh i can't remember what it was but this is one of my favorites the um chicken nugget count is one if we haven't done that i'll go back and look at the notes i guess well i guess i'd look right here uh chicken no we haven't and then also second conversion so we're gonna do all these so i'll sprinkle in these puzzles in between uh in between the concept for um for our for our python so i appreciate everybody and to remind everybody uh we will be off next week we will rejoin in two weeks um be a great time to go back and catch up watch the previous live streams beau has done an awesome job they are sitting in their own little playlist you can go back and watch uh all of them any of them and any concept that you can't remember where what stream it was in you can jump back over and i really like to i gotcha um uh oh any of these concepts that uh or items in here i have a i have a single specific video for every single topic that we've ever done here so if you can't remember what live stream it was jump over to my channel do a search for it it'll jump right up but i just want to tell you guys thank you i greatly appreciate all your attention all your questions and all your awesome support and i will see you guys in two weeks and always thanks again guys and we'll see you guys next time bye