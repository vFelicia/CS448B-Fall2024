Hey Guys and we'll go back to Lesson on Coding my name Is ryan Lesson So in Today's Video I will be Showing you how to build A very Highly Scalable Project Set up With Angular 4 And Web pack so I'll be Showing you Just some extra Tips and Tricks I use Personally in my Project Setups To Make it very Highly Configurable and Available in Depth in Many Different environments so without any further ado, Let's get Started Okay, Guys So to get Started With our Project Setup I'm gonna be Starting This Thing pretty much from Scratch so first Things first We're Going to need to get all of our Dependencies We need For our Project so I was loaded all of Them I'm Gonna be Creating A? Package.json File I'm Gonna Quickly Copy and Paste over all of our Dependencies so In Our dependencies We'll be Stalling things Necessary for anger to run and our dev Dependencies We'll be using Different things for um Web pack and we're using the fittings for Testing and again This will come Full Circle Throughout The Entirety of This Video so We have all Those Things in There and Without Any Further Ado let's? Install Them all so I'm Gonna bring the terminal Up here and I'm Gonna run npm Install Okay so now While that's? Installing This is a great Time for us to talk about typescript so if you don't know what typescript. Is it's a superset of Javascript and It's built by microsoft and the anglin Team Decided that they want Angular to be built with typescript and Gives A whole bunch of Functionality to it and you can get type Safety and One Thing We Gotta Realize Is that, Web Pack being A modular Bundle only Recognize J's Files so to use it Throughout our Application We need to convert These Files from typescript down to Javascript So to do that we're Gonna Be Creating A config file that most ts Owners Understand and will use Okay, so i'm gonna Come in Here Now I'll be Creating a ts config File Oop it's actually Ts config dot Json sorry about that Okay and That's Gonna Quickly Copy and Paste over some Boilerplate I'm Configuration settings So real quick, we're Gonna be Converting our? Ts co Because we're Targeting Job Should be A 63 Mckernon Converting it down to Es6 and we're Gonna do A couple other Things I'm using Common J's and all our Modules and Node Modular Resolution is a common way to do that have These lives here awesome okay so next Up if You May have Guessed it Is that we, also need A config file for Web pack to you So i want to come in Here When you create A wet pack Configure A js file I'm so quickly Copy/paste this is gonna do it's just Gonna Require A file That we'll be Creating Later? And our config Folder called, Web Pack dev Jazz awesome so when, We run a webpage Web pack we'll go to config File and run that File awesome so next Thing, We will be Thinking About Testing if We actually go to our pack is a json file you will see that, We have the Jasmine? Assertion Library and We also have Karma To run our Tests so again Karma Needs a configuration file so let's Create a Karma Configuration file Okay, i'm just Gonna Copy and Paste over some other Things it's Gonna Just Basically Do what we did in Our Web hack config file Just Gonna Require file that will create Later okay, awesome So next thing up is let's Talk about, Web pack and How it Works So, Web pack Builds a Dependency Graph Through it entry Point For our whole Application it does This by looking at Import Statements So it does This and it Puts all of our Application Code Into one Big Bundle okay so this Bundle If We want to Add cool stuff To it like for example what I love to Use in my Application Just hot Module Reloading If You don't know what how Module Load. Is what it Basically Does is Basically Insert script Tags Into your Application and Then Basically it Updates your Code in Real Time so you don't need to refresh the Browser So it Makes Developing A Whole Lot More fun so the problem with that is We don't want to Keep reloading the Code Every Time We don't want to Keep refreshing it and things that are static, We don't want to Keep Refreshing them because again Web packet Take a while to refresh things that are big so for all of our Static assets, we're Going to put them Into our? separate Bundle So i'm gonna Be Creating a quick vendor dot Ts file in our vendo Ts file and abi Copying and Pasting over all of our static stuff so here's Just A Bunch of Sack Stuff you know Things like Angular like the Angular Compiler and Stuff Like that that won't change Throughout our Application Awesome okay so have all that so next we're Gonna Create one More Bundle Polyfills and Again This Is to set up environments and Compiler Code to be Cross Browser and Cross Platform Compatible okay There, we go awesome and so, we also Had This Thing for Processed and Ve Nv which we'll Be using for our node E and V to set the Environment for our Project which will be Giving to later and This Stuff Here Just Sets of Long Air Stack Traces when, we're Running in development Mode? ok, awesome okay, Guys so before We go inDepth on our Webpack Configuration let's Quickly Scaffold out in Angular for Application So first things first, we're Going to Bootstrap Angular by Building, or by creating a, main dot Ts File I'm Just Gonna Copy Later over some Boilerplate Bootstrap Configurations so here We go and One Thing to note here, is we're Actually enabling the hot Module Replacement That I alluded to Earlier right Here Okay so got that in There awesome so next Thing up Is we're Gonna Actually Create A folder here I'm Gonna Call it App okay so in our App Folder We'll be Creating an App Component? Dot es file and we'll, also be Creating at Module dot es file okay so our Module Basically Hold our Dependencies or our App Component File has Access to so let's Come in Here I'm Just Gonna Quickly um Scaffold out the Module, oh There it is okay so got that in There and then Just to add A couple things to it We will be Adding? In our Imports, We will be, also adding the Browser Module Which is essential for Angular to run Into Browsers There We go And also it's going to need Access to where our Main Component is so in A components Quickly Scaffold out a Component Awesome Let's Change Some Names here Let's Change this to App Let's Change This to F as, well and we're not using s css. We're Going to be using css The Words Can Change it from Name to App Awesome so let's Come Here and Create Those two files that, we're Missing That HtMl and Then Css. Okay, let's Come in Here Let's Just put in an H1 Tag and be like Hello From The Starter Okay, Gotcha so got that in There so go back to abdominal Let's Declare it Oops Excuse me Let's Declare In our Declarations and Let's also Bootstrap it so we're Gonna add Bootstrap Right Here Oop if I could Spell it Correctly And we're Gonna put it in our App Component so it knows our Main Component to do it to when We quickly Changed this from Feature to App Module? Okay There, We go now we Quickly Scaffold out our Angular for Application So now We're Going to dive More in Depth on our Web Pad Configuration so A web Pet Configuration file will have Three Different environments A Development Environment Production Environment and A testing Environment Okay so with all These Three, environments There is Definitely A lot of Common things Associated Between all Three so, we're Gonna first start Off by Building, A, Web pack Common Configuration file So when I come in Here When I come to our config and we're Going to be Creating A, web pack That Common J's file and so i'm Just Gonna Quickly Copy, over Some of These will be using Webpack our HtMl Web pack Plugin which this will Actually Insert Dynamically insert A script Tag to our Bundle so we don't need to do that for Us in our index.html file I'm gonna extract Text Plugin Which Basically Takes all our cSS and Listen To a Different Bundle so when We load our? Application We Could Load our Javascript and cSS in Parallel So things are a Lot a Lot Faster and our Helpers file Here Which Is just Gives us Access to a root Function we'll be using to set up pass Within our Web pack config File So Coming back to the, Web Pack Column let's Come here and Let's do Module Export Okay, the first things first we need to create the entry Where our Web Pack will be Creating our Dependency Graph I look at Those Import Statements so we're Gonna have Three Entries We're Gonna be entering from Polyfills Vendor And we're Gonna Be Entering Through our Angular Application? And that's gonna Be source slash Main Okay so now that, We have all that in There we've Set up our Three Bundles so next Thing up? We're Going to create a resolve Okay, and we're Gonna Resolve on Extensions? Okay, so Whenever Web Pack? Looks at A files in The First Try Resolve it as either a type your file Or A Javascript file so that's why, I didn't have to include it up here Okay so next up, we're Gonna Be Going Into Modules so in the Module, We will be Having Rules and Rules Is how We set up loaders so remember how I said Earlier that We need to compile our? Typescript Files Into J's files This is where I'll be Setting up the logic do that right here so first Things first We're Gonna be Testing for Where's Backslash There it is dot Ts So, we're Gonna be Testing for everything with A, dot ts extension and if We find it we're Going to be so Webpack Wheezy's Loaders and D and a ascending order so it reads it from Bottom to Top so again this is gonna be the last lor that's Gonna Run is going to be the Babel Loader Okay and After that, We will be Running The awesome Typescript Loader so this Loader will Actually convert our Type script Into our Es6 Target that, We put on our Ts config File and then in Options we're Just Going to tell it to The config file Name will Be when Use our Helpers Function? Okay, so there we go and then last but not least we'll be Having One More Loader attached to this so, We will also have our Angular2 Template Loader so the Angular 2 Template Loader to Talk About all Three and What's going On here The Inglot template Loader will Inline all of our templates and Styles That are on our Components Just To give you the visual example right here All These will be Inlined and We need this for Building A ot build which I'll get Into Later So first it does That and then next the awesome type script Loader Takes it from Type script Looks at our Ts Config file Which We tell where to find it and it Loads it Into VS6 Code then We'll have a babel loader do it next and I'll get, Into a second why We have our Babel loader so it's from bot on the Top Is how the loaders Work? okay, so After We have all Those loaders run the last Thing? We're Going to do Is exclude some files There's Just some files that, We don't Care about Running Through our Ts Loader and That's Gonna be our node Modules Okay, awesome so we did that so let's come Down Here and Let's add some More Loaders so I'm Just Gonna Copy and paste These right now to save some Time so we're Going to The Adding A Javascript Loader so When, We have Javascript, we're Gonna run Through our Babel Loader and We have our Presets to? ES2015 so now This is something very Cool, that I specifically used for my Applications so Talking About Browser Compatibility There's A bunch of Different Things a bunch of Different Polyfills to, worry about you know why Worry About Any of that why not Just Have something that Already has Standards Set do it for you that's Exactly what Babel odor With The Presets Es2015 Does So first things first we're Gonna Have to come over Here and create A Babel config file Which Is called da'ville Rc. O Rx Rc Okay and then in our Babel. RC. File Gonna put the Copy over some Boilerplate Configurations okay so what's gonna be doing is gonna be Looking at Different Pi Files That are Already Associated With This type of Setup and it's going to use a latch to Version of Every Browser and Greater Than Or equal to Safari of Version 7 and We're Not gonna Use load Modules again Use again our Ts. Config Files are re Loading Modules for This Through Commonjs So, we do that then, We don't need to, worry about? Compatibility for Browsers So that's Pretty cool saved Us a lot of Time and A Lot of Headache of trying to find the right Polyfills Ourselves So, we're Gonna do that awesome So the next loader We'll be doing Is an Html loader and This will Basically Just Take our HTMl and Throw it Through an Html loader Which We're Gonna Clone Into strings then Basically have it Use as Javascript that our Web head will be able to Recognize so After, We do that I'm gonna set Up a loader real Quick for our images and Different Types of Files So our file Loader will Basically Take Create Pass Well Take all of our Images and Load it Make it compatible With our Bundle and Give us Access to them Through relative Pass Throughout our Application that, We set up through, Web pack awesome and then Another loader we'll be doing Is cSs We will be Having two loaders here? so Not There Right here okay so first of all we're gonna do Is put css to raw loader Which is loads of the strings and Then We're Gonna Be using the extract Text Plugin Which I talked about Briefly Earlier Which Takes all our csS of our App Bundle and Puts it in A separate Bundles for your loader in Parallel With our Application Okay, awesome so that about does it for all of our Loaders I think We pretty much Covered everything here again you can do Stuff for like A csS for a Pug? Whatever You want to Use but again This is Boilerplate Stuff Typical Things i I See and not Use so we're Gonna leave it here okay so the next thing, we're getting to Is Plugins So a plugins are Basically Just extra Functionality, we're Gonna add So that Web Packet Add to our Application so first things first I'm Gonna Had a context Replacement Plugin It's just Gonna Help Alleviate some warnings that Might Arise Okay and then After that I will be so Even Though We gave Three Entry Points for our Application Wet Peck isn't smart enough to see Those and Be like oh I need to split the Zonda Three Different Bundles doesn't know so we need to Actually have a plug in Give Webpack the Ability to Recognize Oh hey I need to separate This Into Three Different Bundles So, we're Gonna do that With Not that one, oh, Web pack A, web pack optimized We're Gonna Copy and Paste it my typing Is Subpar Today Alright so we're Gonna Come here Paste the Common Chunks Plugin so this Basically Lets Web Heck Identify okay, we need Three Bundles to build, okay next and We're Gonna Just do the html, Web Pack Plugin Which again I talked about Earlier and This will Just Dynamically Insert The script Tag Referencing our Bundle Into Index Id Into index.html and if You Remember, We Didn't Create an Index at html so let's created real Quickly, okay? And then Let's Just Copy and Paste Some things, Over I'm Just Gonna Copy Paste some Boilerplate Things over okay awesome So got that in There and got Reference to my App Which if You remember it was our App dot Components Selectors you Can See right There Awesome okay so there We go, we have our Web Pack Common Buildout? Okay, Guys Let's Go and create our Web Pack def Config file but before We do that let's Fix A couple little Mistakes I made In the Web pack Common File I'm a couple of Typos um this Is not Polyfills that's Probably fill Which is Where I named the file I? Changed out to Probably fill and then let's Come up here and I put it as rules it's Actually Plaus It as Rule Let's put it as Plural as rules, okay? Awesome so now Let's Come in Here and then let's create our Web Page Is file Okay, and I'm Just Gonna Copy over some Stuff that's Gonna Look very similar to our Web pack Common Configuration but you'll Notice that, We have A, web pack merge and A Path To our Exported Comma Configuration so Let's Start Building it Okay, so i'm Gonna Use the, Web pack merge on our Common Configuration? and We're Gonna Add Talking get Some dev Tools in There so when use the Cheap Module Eval Source and so Basically what this is doing Is this is making it Easier for us to Debug The big Bundle That Webpack Creates for us then We're Gonna Create our L Path Configuration so at the very least for A Web pack to Work you need an Entry File and you need an Output Configuration so let's set the Path for it right Now and we're Gonna set it as Helpers Root Disk and so this is where the bundles will be? You Know Export it to will be Exported to the Disk Folder when, We set a public Path for all our Assets as? Just slash We're Going to do some file Naming Bundle Jas and we're Going to serve some Chunk FileNaming Okay so now, We have all that and We have the Bare Minimum to run A, web pack Application so let's go Ahead and let's run it So i'm going to Bring my terminal Up here and if You haven't I have it to gain Access to Webex Cli or you could run it Through The bin Folder and your know Modules or you could run it Through A script in your Pekka's out Json But if You want to run Through a Cli Just run npm install With A Peg G. Draw, Globally I Already did This so I'm not Gonna do it again and So Once You've Installed it Just run the command Web pack, oh I must have Spelled it Wrong sorry about that Guys Common config okay and then, Let's Grab it back out Here Okay, so here We go? It's Bundling and There We go so as you can See We have a three bundles here the Pile Is that Bottle ijs the App on Logis and oh? We have two Poli We have a polyfills and a polyfill bundles ijs? Probably Because if We have to change something in The Kama Configuration let's go Fix that now? It's going to the Common Configuration like Phil Phil, oh, We got to Change this to Polyfill There, We go okay and Let's run it One more Time Okay There, we go so there, We go, we have our Three bundles right Here? okay and as you Can See We attracted our vendor Bundle and Again I was Talking About Stack Assets and Look that's Three megabytes so you don't need A? Recompile Every Time, We Make Changes to our Code? Okay, awesome so there you go you can See it Bundled and then if We look Into our Folder Structure you will Also See that A Disc file has Been Created and Within our Disk file Is All the Assets that We exported There and Then Within our App Bottle digest you will See kind of what it looks like Sort of Look This is what on the Module bundles Look Like this how this Jumbled Up you know Mess and Then it connects to all these Different things here, okay so Now Let's go back To our Deck Configuration Let's Confits A finished Configure eight Configuring it so after the Output Here The next Thing We're Gonna do Is and give it A dev Server so out of the Box what pack Provides us with the Web Pack dev Server They Became used to run our Application So, we're Gonna Quickly Configure it right Here And we're Going to set the History? to True and This Lets Us use Html5 Pushstate Instead of the Hashed Location Strategy and We're Gonna Set the stats as minimal? Now, okay so I got that There so then next up is Plugins so These Are Plugins that are Specific to the dev Environment so it's Gonna Copy over a couple of things Okay and then Just Copy over one More Thing, okay? okay, so The Name Modulus Plugin Is what we're Gonna Be using to help With our hot Module Replacement On the Web pack Define Plugin defines Global Variables for us Throughout our Application in This case if We were using an Api on localhost 5,000 this is how you Would Quickly set up The way to use this Throughout your Hob Acacia Make it really Easy to Switch Where your Api calls are hitting when you're Changing Environments and The extract Text Plugin Again Just Basically is giving it the Name of the css then it's abstracting from our App Daibo Notch Is Awesome okay so there's our Web Pack dev Configuration finished so now let's Move on to our Web pack Production Configuration So i'm gonna Come in Here and I'm going to create a new another file Called Webex Projects okay so in the Prodigious We're Gonna Have again A very similar Configuration But we're Gonna Now Start Setting up environments so before We even Get too far Into This? Let's start Setting up the Environments That We're Going to need for this Application So, we're Gonna do that in The Package that Json so the type of that Json, We have Access to these scripts Here And Through These scripts, We Could Set Different Environments Through Node okay? So let's Set A couple right Now? So first one I'm Gonna Set Is going to be I'm just going to add some Configuration actually to the list right here so It's Already Configured Correctly Just These are Configuration These and hot Enables Hot Module Replacement for our Deaf Server okay, so first Thing I do Is create A wet Peg Dev And it's gonna run Cross e and V which is a way to set the note Environment Variable on Windows and Other Cross Platforms Node E and V Equals development and then, We run Wet Pack okay and then, we're Gonna Basically have A wet pack Prod Which Is just Gonna run across V and V node E and V Eagles Production and then We're Also gonna run One Pack After that as, well okay so there we go? We set up our Environments here awesome so now we're Gonna Come Back Into our Webp A config File? Really A config, file hold on I gotta Readjust This There it is okay so when We come Back Into our Web Pack and Fig File and we're Gonna Change out how this Is ron so now that We have set? Environment Variables We're Coming here and we're Gonna go by room So when you set the no D&V in the package.json this is Where it's stored I'm gonna See, was equal to the development and? Trimly Or the white Space okay so if So if Environment Equals development, we're Going to Use the dev Environment and If not, we're Going to be using the Production environment okay Awesome okay so now that We have the environment Set up let's go back Into our Web Pack Production Okay and then, we're Going to Quickly Set up the Configuration With What Pack Merge and Basically The Same Thing, We did and what pack dev With the comic Is big So in dev Tools we're Just Gonna Use source map Instead of the Cheap avail source map and For Output, we're Going to be Changing A lot about the Outputs We're Going to still be Not Actually not Changing Anything about the Output, sorry that Misleads you folks, we're Going to use the same Output Configuration That We use for dev and then Plugins will, be a little bit different so Plugins That will be Specific to a Production environment things, We want to do is We Would want to do like? I'm gonna Pick that no amit We want to know millionaires plug in for the Production Code so don't want that Crashing? We would also want to Uglify our Code? And Compress it Down to Make our Module Bundle even Smaller so, we're Gonna do that by using the uglify js Plugin Which will Basically Minify and Compress no Just yeah, well of the fire our Code sorry about that and Then After, We do that We will be using The Extract Text Plugin Which again will Load our cSS in Parallel to Make it even Faster and Then We will Also Just to show you Guys We will also have a workaround right Here? Okay so there We go there's our Production Environment Setup awesome and so now I'm Just Gonna Quickly um Just to Make Sure everything's Working I'm gonna put in Here Fraud okay so now Let's run, Web Practice Duction Through our Terminal We're On npm run, Web pack pry We were Gonna Just About that Wrong? Oh man i butchered that one All Right There, We go come Back in Here and Let's run it So you See now, we're Running in the prod Folder It Takes a second to compile Because again, we are, also uggla Fiying it during the build Process okay and There we go as you can See our our Bundle Sizes are Significantly Smaller than they were Previously and This Is very Helpful for Building very High Speed Applications Okay, so We have that done and That completes our Production Setup? Okay, Guys Now that, We have built Both our Production and our development? Wet Pad Configuration Files I think it's Time to just run the App and Take a look at. What it looks like So before We Move on to our Test Environment let's do that we're Going to? Come Into our Package dot Json as you can see, we Already have the? Web pack Start Configuration I have a bunch of config These on Arrow With how about you reload Have the Progress Open in The default Browser on Port 8080 Awesome Alright so then let's open Up our terminal And then Let's Quickly Navigate To it and then Let's run, Npm run start As you can See it Opens Up right Here Floating, oh We got an Error? Evany, did not Match Any Element, oh? okay so Unfortunately the Joys of live Coding does have some Pitfalls it looks Like I Did miss some Naming up so if We go to our index.html I Named it my App Which I believe in our App dot Component it's Actually App Name so let's go back to index.html Change it to App Name Okay There, We go, awesome so now Let's Navigate Back to our terminal Close It and Rerun it As you can See it's loaded again, We Wait for it to finish Let's put This over here if We get Split Screen view Let's Open This Up and as you can See boom, We have the hello from the Angular Starter Alright and as you Can, also see in our console here, We can see we're in development Mode and we? Also have hot Module Replacement enabled so I know I talked About hot Module Replacement before but Let me Really Show you what it does So if I come Here and I just Add in Let's Say hot Module Replacement Rules and i click Right When I click Outside of Focus it Reloads? When i click and lose Focus and the Application Saves in my Visual Studio code, Ide Automatically Updates Without Any Refresh so this Makes Senior Output Extremely fast and Just like Makes development so much of more Enjoyable Alright so now it's time to move on to the test Environment let's get Started Okay, Guys Now that We Have Created our Webpack Production Environment We need to create? A Web pack Testing environment so let's get Started so Because I kind of Talked about Earlier We Had to Create that Karma config File and We were Gonna Build on that later so we're? Gonna Start Right now so on the config, on the Create Another Karma config File Okay, and in Here I'm Just Gonna Quickly Pay Some Boilerplate Code and Go Over it Real Quickly so Basically what this is gonna do Is it's Gonna Import our Web Pack Test file Which We're Gonna Create in Just a second I Think you'd Be using Jasmine Here's the Files and the Panics Gonna be Looking for PreProcessors Right Here is gonna be a Karma Test shim which, we're Gonna Create real Quickly and this Is Just to give it Browser Compatibility Shim yes oh Excuse Me Karma M J @o desu wow I'm all over the place here howard test Shim dot j S Okay and then in Here I'm Just Gonna Paste A whole bunch of Stuff that we'll be using as Shims Oop not that Okay and Just a whole bunch of things, We will be using okay so then back in Here I'm in Our Web Peg Middleware? Stance There's Only With x server, no Info okay then in A reporter's When We using Progress to Report our Test and if We've Already got Poor? 9 8 7 6 so now, We have our Configuration files set up let's go Ahead and Let's Actually Add A test so we're Just Gonna Add one Test and The Test is just gonna be Testing to See if The Tests are Actually Working so We're Gonna Come in Here We're Going to create an App Component Dots back dot es file Then in Here I'm Gonna Basically Copy and Paste What our Tests are Gonna Be doing and it's Basically Just Going to be Creating The Configuration for The Test Environment For our Angular Application and We just be Testing if it's working okay so that We have all that There Let's run our Test? If We remember in our Package that Json We had an Npm run Test? of Command Run that, oh I'Ve got something Wrong up did I forget the Name of something let's Take a look real Quickly Sorry, About that Guys oh I forgot to, Add the Webpack test so let's Add it Real Quickly so webpack die Test Digest is getting Ahead of Myself There sorry about that so in the whip Egg that I'm Just Gonna Copy and Paste it So i'm Specially Gonna Look A lot like other two files not much of a Difference Here I'm just Basically to set the Test environment of how to Basically compile our you know our Tiger Code and Everything Else Okay so now, We have that Let's run our Test One More Time? Yeah, okay, so while we're Waiting? Should Open Up a Browser Any Second Now Once it compiles There, We go, we got it in the Test Pass so There We go, we have set up our Testing Environment that Can Easily be Expanded for Anything Throughout our whole Application? awesome Okay, Guys for the final Part of our Project Setup We'll Be Sending our Angular Application to use the ahead of Time Compiler Now as of right now it's using the JustInTime Compiler Which Compiles the Code for Every Instance of the Application Running Which Could slow Down the Performance of our Application and We don't want that We want our App Running at Blazing fast Speed? so there's A couple little tweaks for you to do this Stuff The Angler our Angular Application Wrong With Ahead of Time Compiler so let's dive Right in So first things first I want to show you this List of Engler Don'ts While Building the Building With The äôt. Compiler so as you can see right here, We have a couple of them? Most importantly the ones That We will need is We don't use Require Status for your Temperature Styles We have the used Style Urls and Temple Urls and? That's Where The Angular 2 Template Load of Plugin that, we? Already Loaded in Our Pegs Adjacent will Help Us out with A couple of things With Forms don't Use default Exports Use public for Any Annotations and Yeah, ok, so Now let's get started, Let's Start Building it so first things first Hangar äôt uses a Different type of Typescript Compiler for This so, We will need to be giving it a Different types or a compiler Configuration so When I come in Here and install a ts config that's A ot that Json File and So I'm Just gonna Come here I'm Gonna Copy and Paste the Code, we're Gonna be using for this and go over it so Again We'll Be targeting Es6 not too, much Just Changed Here These are Juicy Difference, We don't have this anger compile Options Thing here which will be running Through The General Directive äôt, Folder Which is going to be generated when, We run the Angular Typescript äôt Compiler and We're Gonna Step here's the entry Module we'll be using So as you can see the file We'll be Looking for is May not A ot that Ts This is Because the made a ott S is Bootstrapping at module Factory Instead of May Not See s Which is Bootstrapping at Module so let's create our Main dot A Ts file so we're Gonna Come here We do Main dot io tTs There We go then I was Gonna Quickly Copy over this stuff We Gotta Use for that? Okay so there we go and so just again the big Changes, we're using at module Factory Instead of At Module Another Thing you can See is online Safes for enabling proud, Mode so now if We're Running the Maintenance We know that we're using running the Application Through Production Mode and When Angular Runs in development runs? Development Ro Excuse Me Well words all Jumbled Up when Angular Runs in development Mode it runs Actually Two checks on it to See if Any? Expression Change After it was Checked Errors Occur and These are? Take a little bit more Time to run Through the compiled Through the change Detection Through Angular So running enable prom Mode Actually Speeds up your Application a whole Bunch Because it eliminates That Second Check So it'll be enabling Prime Mode Right There Okay, awesome so now, We have to come Into our Web Pack Common Config and We need to change A few Things for our environment So, we're Come in here so in our App so first things first I'm going to define Something right Here We're Gonna define A Variable And We use we're Going to do it is prod Variable so you look at. Process that e&V know. D and V And it's going to Check if it Equals to Production so it's gonna See if its Production or not So i want to come Down here I'm gonna be like, We Use a ternary Operator so it is prod We're Gonna run Okay so if it is proud. We're Going to be Running the Manor That Ts file if it's not Probably going to be Running the Main file okay, who, Made that Ts. Sorry okay What so now, we're Going to come Down Here? And we're Also Gonna have to? Know I think That's Pretty much all we need is to just Change your Bootstrapping the Files from So but Now, we, also need to come Into our Package that Json and so have some scripts to run The äôt, typescript Compiler and Configure The Build so let's add them real Quickly So first things first we're Gonna have to have a build for it so I'm gonna Call build a ot and Build A ot is gonna run the Ng C. Compiler Which is the Head of Time Compiler in Production and We're Gonna run it with ts. Config a ot json Okay and then, we're also gonna have a build A? Ot prod Which will run npm run build a ot and It will also run npm run, Web pack prod, okay Oop and Let's Fix This right Here Okay There we go? So, we got all that in There so now that We have that in There Let's run our Iot Build? So let's pull up the terminal And let's clear it out real, Quickly now it's from npm Build you know, what I call build a ot Price run that I spelled Build wrong some of the Guys Fraud There you go, okay so now, We See wearing the ng C compiler and as you can See now an ao t file has Just Appeared and That's Gonna Contain all of our A ot folders in Here Awesome and Then Now We could See that we're also running on the Web Pack Production config File? So it's Basically going to take that put that Into the Disk Folder So, we're Gonna weigh on that to compile okay and There we go and this Is our Ahead of Time compile or build so now Everything will Be Available Within our Disk for so then all you have to do is Point Whatever server you're using To run the comments When This Disk Folder then, you'll be Running Ahead of Time Compiled Angular for Application All right so Thank You Guys so much for Watching I've Been Wanting to this Video for a while Learning How to do This Myself I mean took you know like A Like a little bit over a year I want to learn it just kind of doing on my Own Looking for Information I'm Happy to Help and I really Just Don't want to see People Suffering From The Same Pitfalls I Had Trying to learn you know Kind of What everything does and how to do this so um Thanks Again for Watching and Yeah Take Care