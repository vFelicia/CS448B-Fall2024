hi everyone i hope all of you are doing good thank you very much for signing up to this d3.js course so what is d3 d3 is an open source javascript library this library may be used to create visual representations of your data this means that you can create dom elements using your data these dom elements may be simple html elements like headings paragraphs buttons or they may include sophisticated charts and graphs as well d3 makes use of html css and svg to create those representations as you know that these are the technologies of web so whatever you create using d3 you can view on any modern browser like chrome firefox safari or internet explorer this course consists of 10 screencasts and i've tried to keep each screencast short and simple i'll be explaining fundamental concepts of d3 with the help of simple and interesting examples to learn more about d3 there are many good resources available online the official documentation of d3.js is also very helpful in this regard there are also lots of blogs available about d3 on different platforms like medium here i've included the links of couple of blogs first blog was written by me and the other one was written by per herald who is also the cocreator of this tool scrimba so who am i i am saheb nihal i'm a fullstack javascript developer i love traveling reading and making new friends you can connect me via twitter my handle is given below i hope you would enjoy this course thank you again for joining in let's get started hi there in this lesson we'll be learning some basic techniques to do dom selection and manipulation using d3.js in our html file as you can see that we have an h1 tag and a couple of script tags the first script tag is loading d3.js library from its official link the other script tag is loading the javascript file in which we'll be writing all of our d3.js code using d3 we can select dom elements using their css selectors or the name of element itself d3 provides us two methods to select dom elements they are b3 dot select and d3 dot select all both of these methods accept a css selector or the name of dom element as a parameter and return selection of the element d3.select method returns the first selection of dom element matching the criteria while d3 dot select all returns all the elements matching the criteria for example if we want to select our heading tag we can call d3 dot select h1 which will look into the dom and written as the first h1 tag it finds if there is no h1 tag inside the dom it will return an empty selection using d3 we can manipulate a dom elements as well which means we can update their style values or bind data with them for example we can apply some style to our h1 tag using dot style method we can give it a color with a save and see that the color of our heading has been updated in d3 we can chain methods with each other as well so that it helps keeping the code clean and easy to read using dot attr method we can apply different attributes to our selected element for example adding a class or id to it we can also update the text of our selected element using a dot text method if you want to append the dom elements we can use dot append method for example we can select our body element here and append a paragraph tag we give it a text of first paragraph we give it a save and see that the paragraph has been appended to our dom let's add couple of more paragraphs give it a save and see that now we have three paragraphs inside a dom let's select all of these paragraphs using d3 dot select all and give it a style of color blue we give it a save and see that the color of our paragraph tags have been updated to blue in the next lesson we will be learning some techniques about data loading and binding using d3.js thank you for watching hi there in the previous lesson we learned about dom selection and manipulation using d3.js it is time to introduce some data into the scene using d3 we can map data into our dom elements meaning we can append update or display dom elements using our data set in our example we have an array of some numbers what we are trying to do here is to create paragraph tags for each data item in the array we first of all select our body element using select method and afterwards we select all the paragraph tags inside it since we do not have any paragraph tags yet it will return an empty selection now we call dot data method and pass it our data set as an argument this method will put data into the waiting state for further processing we then call dot enter method this method will take data items one by one and perform further operations on them for each data item we are appending a paragraph tag and binding some dummy text inside it let's give it a save and see what appears on the dom as you can see that five paragraph tags have been appended into our dom each paragraph tag represents the data item in our data set we can also update the text of our paragraphs to show the value of data item by passing it a function inside the dot text method this function will be getting the value of data item in its parameter which we can return from it now you see that our paragraphs are displaying the value of data item inside it in the next lesson we'll be learning how to create a bar chart using d3.js thank you for watching hello everyone in this lesson we'll be learning how to create a simple bar chart in our html file we have an svg tag in our javascript file we have our data set which we will be using to create the bar chart we have variables defined for the width and height of svg container and the padding between the bars we calculate the width of each bar by dividing the total width of svg container with the total number of elements in our data set below that we select our svg container and give it the attribute of width and height next we will create our bar chart to create a bar chart we can make use of the fact that bars are nothing but rectangles so first of all we select all the rectangles by using select all method since we do not have any rectangles in our svg so far this will return an empty selection afterwards we call the data method and provide it our data set this method would take our data set into the waiting state afterwards we call and enter method this enter method will take our data set from the waiting state and perform further operations this enter method takes the data from the waiting state and perform next operations on each data item so for example it will call all these methods for 80 1556 and rest of the data items for each data item we are appending a rectangle inside our svg container we provide the attribute of y height width and transform to each of the rectangle to give the y attribute we call the attribute method this takes a function which gets the data in its parameter we calculate the y attribute by subtracting the data item with the svg height the next attribute we set is height we return the data value from the callback function afterwards we provide width to our bar chart for this we subtract bar padding from the bar width we calculated in the beginning in the end we apply the transformation of translate to our bar chart so d3 provides us with a lot of options to transform any object here we are using the translation kind of transform for our rectangles so we do not want our bars to start from the same position therefore we would want to translate them one after another and this is what we are doing over here in this function in this step we calculate the value of translation for our bars so as you can see that there are two values in this translate array one is the amount of translation on xaxis and another one on yaxis since we are translating each rectangle one after another therefore we calculate the value by multiplying the index with the bar width in the end we return the translate string with the value of translation which we calculated above when we give it a save we can see that our bar chart has been appended inside our dom thank you very much for watching hi there in the previous lesson we learned how to create a bar chart using d3.js we use the array of numbers as our data set to create a bar chart in this lesson we will be applying labels to our bar chart since labels are text therefore we'll be appending a text element for each data item on top of each bar like we added rectangles for our bar chart in the previous example we'll be adding text element for each data item for this let's first of all select all the text element inside our svg since we have no text element so far this will return an empty selection afterwards we introduce a data set using data method and get in enter mode using dot enter method this will bring in data items one by one for further processing we want to append the text for each data item and want to keep its value to be the number itself using text method we can get the value of our data item text method either takes a string or a function as a parameter the function gets the data value in its parameter which we can return from inside it afterwards we give the y attribute like we did with our rectangles above the only difference is that we want our text to be slightly higher than our bar and that is why we are subtracting two more pixels from it we give the x attribute to be the starting point of each rectangle and we get it by using the values of bar with an index of the data element in the end we give text element some color by using the fill attribute we give it a save and see that labels have been appended on top of each bar in the next lesson we will learn how to create scales into our charts thank you for watching hi everyone in this lesson we'll be using the same examples as we used in our previous two lessons about creating bar chart and adding labels to them we now would be introducing a rather advanced topic which is about using scales for our data so what are scales scales are functions which will transform your data by either increasing or decreasing their values for better visualizations so far our bar chart looks like this what if you update the data set and introduce much smaller values so our bars are hardly visible now this is because the values which we are using are much smaller in the scenarios like these we can make use of the scales here we have created a variable by the name of y scale and we are calling the function of d3 dot scale linear we will then change the method of dot domain which will take an array as an argument this array contains two elements first one is zero and another one is the maximum number in our data set we can calculate this number by using d3.max function then we also change the method of dot range which will keep the scaled values inside the range of our svg container it also takes an array of which the first element is 0 and the second element is the height of our svg container now we finally parse the values of our ycoordinate and the height of the rectangle using yscale method and we give it a save our bars now have been properly scaled for the visual representations in the next lesson we'll learn how to create accesses insider charts thank you for watching hi guys welcome back to another tutorial in this lesson we'll be learning about the concept of accesses in d3.js as you know that accesses are an integral part of any chart or a graph accesses are made of lines ticks and text you can imagine how complicated it would be to create all three of them separately but thankfully d3 provides us a very simple api to create accesses for our charts d3 provides us four significant methods to create accesses they are d3 dot access top x is right x is bottom and x is left let's learn from a simple example how to create x and y axes for our chart after selecting our svg element and providing it with the attributes of width and height we move towards creating scales for our accesses we'll be using linear functions to create our scales we have created skills exactly like this in our previous lessons as well so let's move forward moving forward and now we actually create our accesses as i mentioned earlier d3 provides us a very simple api to create accesses for xaxis we'll be calling d3.axis bottom this will return a function which we are going to chain with another function of a scale and provide it our x scale similarly to create a y axis we call d3 dot x is left and then chain it with a scale function and provide it the y scale afterwards we append a group element inside our svg element and provide it the attribute of translate transformation and then we call yaxis on this group element afterwards we append another group element inside our svg container and provide it the translate transformation attribute in the end we call xaxis on this group element let's give it a save and we can see that our accesses have been appended inside our dom we can see that our accesses have lines ticks and text as well and it was all created just using the access methods provided by d3 thank you very much for watching hi there welcome to another lesson of our d3.js course in this lesson we'll be learning how to create different svg elements using d3 as always in our html file we have an svg tag and a script tags to load d3.js library and a javascript file where we write all of our code svg or scalable vector graphics is a powerful tool to define vector graphics for the web using svg we can create different shapes and apply different styles to them since it's a vector graphic we can scale them as much as we want without getting them distorted in our javascript file we first of all select our svg element using d3.select and give it the attribute of width and height we also give it the attribute of class of svg container which we have defined in our css file to create a line using svg we need coordinates of a starting and ending point of a line starting coordinates would be x1 y1 while ending coordinates would be x2 y2 these should be the coordinates inside our svg element we also give it the attribute of a stroke and the stroke will take the name of any color we give it a save and see that the line has been rendered inside our svg container if we want to make our line slightly thicker we can give it the attribute of a stroke width it takes a number and we see that a line has become a little bit thicker now let's create a rectangle to create a rectangle we need to provide x and y coordinates which will be the beginning point of our rectangle we also need to provide it the attribute of width and height if we save and refresh we can see that rectangle has also been rendered inside our svg container it appears purple because we have given it the attribute of fill with the hash of a color to create a circle using d3.js we need to provide the coordinates of center of the circle these coordinates would be cx and cy also we need to provide the radius of our circle radius is a distance from center of a circle to any point on the boundary of a circle like rectangle we can also give it the attribute of fill if we want to apply any color inside it now we can see that all of our svg elements circle rectangle and line have been appended inside our svg container thank you for watching hi everyone in this lesson we'll be creating a pie chart using d3.js we'll be displaying the market share of top three operating systems in our pi chart in our javascript file we have our data set which is a collection of objects in which each object contains the name of the platform and its percentage share we first of all select our svg element and give it the attribute of width and height then we move on to creating a group element inside our svg container this group element will hold our pie chart after appending the group element we transform it by translating it to the center of our svg container then we select the range of colors provided by the builtin method of d3 we will be using this function to provide colors to the pies of our chart to prepare our data to be compatible with drawing pie chart we pass it through d3 dot py method since we want to use the attribute of percentage from a data set to create pies we pass a callback function to d3 dot pi and return the percentage attribute now we call a d3 dot arc method which will create path elements using the arc data we change outer radius and inner radius method which will define the boundaries of those arcs hello everyone in this last lesson of our d3.js course we'll be learning how to create a line chart we'll be using a realtime data of bitcoin price index of past four months we'll be fetching the data from an external api and at the end of this lesson we'll be able to create a line chart like this so let's get started in our javascript file we have an api which will be fetching the data of bitcoin price index of past four months below that we have an event listener which gets fired once the dom has been loaded in this event listener we are fetching the data using the api we declared at the beginning once we have this data we pass it to another function which converts this data into the form which is suitable to create line chart this function makes an array of objects in which each object contains date and the price of bitcoin on that particular date once the data has been parsed we call another function we name this function drawchart and pass it our data this function would be responsible to create the line chart in this drawchart function we are getting a data set in this parameters afterwards we have defined some variables to calculate the width and height of the chart in the next step we select our svg element like always and provided the attributes of width and height then we append a group tag inside our svg element we use attribute method to apply transformation as an attribute to this group element even though transform can accept multiple types of options here we are keeping it to translation transform which actually pushes the group over and down by the amount we are providing over here then we create scales for our line chart since we'll be displaying the price index of bitcoin over the period of past few months it makes sense to display the time duration on the xaxis d3 provides us a function of a scale time to create such kind of a scales for a yaxis though it makes sense to keep the scale linear since we are just showing the price of bitcoin on that axis in the next step we'll create the line chart we'll use the function of d3 dot line this function returns another function which creates the line next we will change this method to another function which will set its x attribute dot x method takes an anonymous function which gets passed the data we'll be returning the attribute of date for our x attribute please notice that we are passing the value of date through our scale method which we have defined above similarly we will change the dot y function to set the y attribute we'll be returning the attribute of value of bitcoin from this method after passing it through the yscale function the domain function here is designed to let d3 know about the scope of the data when it is passed to scale function if we look at x dot domain here we are using extend method to let d3 know about the scope of the data extend method takes an anonymous function which returns data value and in the end it returns minimum and maximum value of the dates similar things happen with y dot domain method in which it returns the minimum and maximum value this value would be used to create the scales properly we then append a group element inside our parent group and apply some transformations to it then we pass d3.exe bottom function to call method when we are using the call function over here we are actually calling d3 dot x's bottom on our newly created group element we then select any classes of domain and remove it moving forward we append another group element inside our parent group and we call the method of d3 dot xs and left y on it afterwards we append some text and pass them the attributes of fill transform and some of the coordinates as well this block of code would basically generate the y axis in the end we append a path inside our parent group element this path would be the line which we see in the line chart to create this path we call the method of datum and we pass a data set we apply some more attributes like fill stroke stroke width and provide them the appropriate values and then in the end we apply the attribute of d and we pass our line function over here this line function would basically be creating the line for that d attribute in the end we give it a save and here you can see that our line chart has been appended inside our dom congratulations you have now completed the course and have the basic understanding of d3.js if you have any questions feel free to reach out to me via twitter or in the q a section also if you enjoyed this course i would appreciate if you would share it here is the link so feel free to for example email it to someone you know or share it on facebook or twitter thank you very much again for watching and good luck with the coding