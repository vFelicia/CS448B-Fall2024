learn how to create a fiber clone with nextjs react convex typescript Tailwind CSS and Shad Cen this is a great project for improving your skills as a full stack developer V created this course he is an experienced full stack developer in this video we will create this Fiverr clone platform that lets users post gigs and lets other users buy gigs so here is a four G example gigs but there can be as many as you want so if I go ahead and click on this gig it will load the gig page here we have images H then we have uh all about the user and the gig we can leave reviews there is also uh basic standard and premium offers for example short here medium and long here if I'm the owner of the gig I'm going to have edit button but if I go ahead and change my account I go uh with Google on this other account I will be able to uh order order now or send message so if I click order now it will send me to the stripe checkout page and I can purchase here so if I want to start selling from this account then I'm going to click connect stripe and this will connect a platform's stripe to my stripe so I can start selling and the platform will take a 10% cut or 5% cut whatever you want to take I can also send message to this user if I have a question about his gig so this is the list of conversations that I have with all of the users and I can say hey tell me more about your gig and from this other account I can go to the Inbox and if I click this then we can see all of the messages I can respond with hey with this other account I can go back to homepage by clicking here so I can also uh search so if I search for haircut if I press search it will only show the haircut I can also favorite the gigs so if I go back I'm going to favorite this one I'm going to favorite this one as well and now I can only show favorited gigs so it's going to be these two but I can unfavorite them so it's going to disappear or I'm going to toggle off favorites I can also toggle by category so if I click switch to selling then it's going to display all of the gigs I'm selling and if I click to create I can create a new gig for example I can say I will develop your website and I can choose a category and subcategory ategory front development and if I click save it's going to be saved successfully and it's going to redirect me to this uh gig and now I can choose a choose a file to upload so I can upload this image uh click upload image and then I can give it like title so small website price $100 for example and whatever the description I can adjust all of this I need to save this I can save standard premium versions and then I can add a description as well and then I can publish before we start with the tutorial I invite you to join my school.com uh group where we teach web development so you have all of these courses and there is a community where you can answer questions I will be here for one or two hours every day and answering all questions and there will be live sessions and everything so um you can read more on in this description let's start by making a repository name and then MIT license and create it I want to go to code https and copy this go to folder where you want to download this and then run CMD git clone and then just paste that link we can exit this and go to next1 for fivr here in nextjs documentation I will copy this npx create next app next app at latest and you must have no JS 18.7 or late so here in this folder let's run a new CMD inside of it and just uh copy this and then add dot so we install this in the current folder the nextjs while this is installing let's go to clerk.com Let's also go to convex this will be our database and clerk will be our authentication so let's go to dashboard I will create a new application I will name it Fiverr clone Lo and enable Google and email create application so this is the documentation but we will go here to JWT token because we need to conve connect this to convex our back end so let's create a new template convex and just save changes now in convex let's log in if you want to learn more about this setup just go here uh look at this setup and de development guide it's 1 hour long everything is explained in deta I will just do this quickly now I will also go here and say clerk convex setup and I will click here convex clerk from convex docs this is the documation so we already created clerk created JWT token so this is what we will do next but after we install the proper package let's continue with nextjs installation so press okay to proceed it's going to install this package would you like typescript yes sink yes Tailwind CSS this yes no to Source directory yes to app router import we don't want to change this so if you want more explanation go to the video that I explained so all of the files are added right here we wait for this to install after nextjs installed let's look for Google setup so go here nextjs quick start not Google but conve setup and then uh let's this actually changed but let's skip this we're going to do this manual so npx create next app this is we already did this we created next app and then npm install convex so let's go here and install this after this we need to say npx convex Dev to activate convex so convex is our database so let's go and run that if this is your first time uh using convex then it will prompt you to log in in but okay so this is my page and I have four projects and I can have up to five projects so I'm going to create a new project the name I'm going to keep this recommended name and just let it run and we are going to just let this run because this will let us have realtime updates so whenever we change something in the code it's going to automatically reflect update in our database so right here with this we see that we got this new database and there are tables files everything is here so we will leave this running and we will start a new CMD for something else now let's look for shot CN xjs and the these are uh components to build a component Library so we're going to start from here npx shoty and UI latest in it so let's copy that these are like buttons and everything we need so let me paste this and you can go here and check like for example here button this is what it looks like and this code for this button will be copy pasted into your code so you have full full control this is not like material UI where you call apis and then but this is just this is copy paste and you have full control you can edit everything so which Styles would you like to use for shaty and default and then slate or neutral whatever color you want I'm going to choose slate uh this is yes and just wait for a moment let me start a new terminal and then say code dot to open this uh path into vs code code editor now let's go here to convex clerk setup so we were here already and then we're going to uh create a new folder out config DS in convex folder so go here to convex folder and create a new file out config TS and save and go back and copy this I'm going to copy this and then here we will just paste and save and now we need this issuer URL from our clerk so let's go back to clerk dashboard and here where we created this convex JWT token let's copy this ISS copy and this must name must be same convex as this here convex so let's paste this issuer URL I think you should keep this trailing slash and save now let's add all of the components we we will use from shoten so here in the button I'm going to go here and copy this um choose npm in my case but we will add some more these are all of the all of the ones that we need so it's going to be a core Dion alert dialogue what was it uh aspect ratio Avatar you can go and check what each of these does if you want right now or we we will also do it later car carel carosell and then we got dialogue drop checkbox dialog drop down menu so checkbox dialogue dropdownmenu I don't want to bore you so these are all of them just write them or you can write them from here and then I'm going to copy all of this and go here into Shard CN wherever and just paste it and run this is just a normal terminal it's not sh and just terminal at this directory so now you can check in your app folder this is all of your code and in components UI is where these components are getting added from Shaden right now let's return to convex clerk setup so we need to npm install clerk clerk react but it's actually we don't need to install that let's go and search for uh clerk nextjs setup and then this quick start so it's going to be different so it's going to be this cleric nextjs so so let's copy this and go to a terminal and just install that and then we're going to copy paste this API keys but not this ones because I think this ones the document documentation are wrong so let's go back to Clerk and here in API keys and I will just copy these two and let's go back to and look for env. local file and Below just paste it like that that's it so now let's run npm run Dev so that's going to run our application Local Host 3000 when it says ready you need to go and refresh because you must pull data for the first time you need to refresh so now it's compiling this route so this is our current APP uh let's first wrap this actually we need to add middleware so in the clerk nextjs setup uh scroll down and we're going to make this file middleware TS make it outside of everything so click on the outside file and paste it and then copy this and do that so this is the middleware that will not let us uh like so we can Define for example if I go here and I'm not logged in it should not let me uh visit this page so here it's prompting me to log in so let me say continue with Google and now that I'm logged in now it works but also we need to provide our database to this application we need to wrap our database uh in the application with the database so we're going to go on the outside and we're going to create a new folder call it uh providers and inside we're going to create a new file convex D clientprovider TSX so we will wrap our database with this not the database but our page with this database so first we will go ahead and say use client because this is going to execute on client so nextjs has server components that execute on server and client that execute in the browser so when you are using hooks you need to use clients so I will show you then all of these Imports you don't need to import them right now whenever I have these Imports you can import them as we program so it's going to recommend you Imports but you will not have this this is what we are going to make so you don't have this one okay next interface convex lion provider props uh and then children is going to be react. node so we are going to wrap I'm I will show you let's go to the app let me save this let me go to app um layout and here scroll down so you have this children we're going to wrap this with convex client provider and then close it like that but we cannot import this because we are not exporting this from anywhere yet so it's it's an error for now so this children this is like the page everything like the page the whole page is here so that's going to be passed into our interface so let's now say con convex URL we need to initialize the convex database the back end process and convex public uh next public convex URL and this you make this to make sure that this exists so if I delete this I think it's going to throw an error because it's not sure if this event exists but if I say exclamation mark then I'm telling it this 100% exists in myn dolal f file so if I go to n. loal here next public conx URL okay then const convex new convex react client this is one that I imported here and passing convex URL to initialize the new convex react client then export const convex client provider so this is what we will Import in the other file we need to export it here and then let's give it this interface react. FC and then convex client provider props the interface that we defined it and then let's extract this children so make an arrow function and then extract children from this type so now we have these children this is the page that's getting ped and we're going to display this children so let's make a return okay we wrap everything with clerk provider this is our authentication provider then convex provider with clerk we imported that as well then we need to pass use out as use out so use out is from clerk nextjs then client convex uh this is the convex that we initialized okay so if the user is not authenticated show children authenticated show children and out loading so if if it's checking while if it's authenticated then just show the loading component if we don't have it's like a loading screen spinning bar so that's it so this is this is what we want to do okay so this uh component out loading doesn't exist so let's copy out loading close this and let's first go back to our layout TSX and we need to import this so I press control space to import to get these recommendations and like this and also provider I'm missing an O here so now we gave um database we wrapped our application with the database so let's go to components and create this out loading so let's just go click components new file paste it out/ loading. TS xx and this uh when you say out/ loading it will create a folder out when you put slash in the loading component first import image from next image then we will export cons loading Arrow function return give it a div with class name and then say height full WID full Flex so this is Tailwind CSS justify Center item Center and then image and Source will be/ logos SVG so let's copy this uh logo SVG and we need to go to um public folder here and make a new file logo SVG so now let's get this go to logo ipsum docomo for development you cannot use them in production but maybe you can contact them if you want so I'm going to scroll down and let's just select this logo let's just click to copy and just paste here the SVG so uh when you say slash logo SVG this will look in your public folder for logo SVG file then alternative loading then width 120 height 120 and then uh class name to be animate pools duration 700 so this will just be pulsing like animation that should be it if I go ahead and I so we have a problem here yeah okay so this is the posing animation you see let me show you again that's how it works but I want the logo to be on the center so to to fix that let's press contrl P to search and look for globals global. CSS it's right here in the app folder Global CSS and let's make some space and say column root HTML body to be height 100% and save it so this will need to recompile a little bit and also uh you should always get add git clone so git add dot to add everything all of the changes git uh commit message will be out and database and git push dasu origin main so now everything is in our uh our GitHub folder and now let's see if our logo updated so if I refresh logo is in the center this is important because all of your stuff will not be centered if you don't have this nothing will be centered not just logo loading screen let's start coding our website so now in the app folder make a new folder seller and inside make a new folder in square brackets username like that so when you have um so this is going to be SL seller this route will be SL seller when you have seller folder and then uh when you have username in square brackets this can be anything so when you have square bracket so it can be slash slash seller and then slash any username and inside add a new folder manage sl gigs and add a new folder inside create and add a new file page. TSX so the route here is going to be SL seller slash anything SL manage gigs SLC create and then when we go to this route SLC create this page DSX will be displayed it must be page DSX the same exact letter same exact capitalization so if I go here slash uh seller and I have all of this manage G SL create so this is where we are going to create gigs so uh and when we click switch to seller then we're going to switch to selling then we're going to go to this SL seller SL username Etc but when we say switch to buying then we're going to go to the not this route but homepage route so let's uh create some page DSX so you don't need to import this now you can import SB code create interface create gig props parameters that's going to be username so we want to actually receive uh this parameter username from the URL so when you have square brackets not only can this be anything in the URL but it also can be uh can you can take it as a par parameter you can get it as a parameter by doing this interface uh defining this interface and then saying params and then username so it must be the same string as this username and then let's export default create gig so let's create con gig and then let's extract these parameters from create gig props let's just extract it like this so we can use it then return div class name Flex justify Center and create form so this is a component that we will create we don't have this component yet and then um passing username as parameters par. username because we defined here that params has attribute username so params do username okay let's copy this component soore components slre form and here click to this page and next to it create a new file underscore components create new form. DSX so this will create a component folder a component this components folder and when you have underscore in the component that means this will not be a route and this will everything inside will not be R so if I make new more folders they will not be they will be ignored by URL this cannot be accessed through URL if it has this underscore now let's start coding this create form TSX so we're going to use client now don't import any of this right now we will import them later but we will first need to install this Zod and react hook form so let me go here and say npm install react hook form and Zod and um I'm also not sure why this form was not installed from uh shaten and this input so let's go to another terminal so type npx Shad cn UI at latest ad input form so now uh we will also need to create this by the way but not now okay let's continue uh let's create interface create form props and it's going to be username string so as you remember we are passing in the username const create uh form schema z. object object so we need to Define like type the schema for the form so we can check if it's correct it has name of the gig and category when we are creating a gig so we need to select those title Z do string minimum 20 characters and then message title must be at least 20 characters so if this is not 20 then this will be the message that we will display uh and then Max 100 title must not be longer than 100 characters categories then Z string so this is going to be a category it's going to be string required error please select a category sub category ID Z string please select a subcategory so I think I accidentally named this I so this should just be like either sub so have consistent naming like either both ID or no have I don't neither have ID type create form values z. infer type of create form schema so we will uh this will be we will create a type for the form values infert from this schema so it will be like this kind of object with this field this field this field Etc default values partial create form values this is a type and then title is empty that's going to be our default value export con create form we're going to extract username from this interface that we are getting so create for props con categories use Query API categories get so we're going to have a list of categories and we will retrieve all of them then const subcategories set sub categories use State and then doc uh I will explain what this is Doc subcategories and give it array and give it execute it and set it to empty array so we're going to create a schema for our database this will be a table in our database subcategories so if we want to get it will have Fields like subcategory Name ID Etc so if we want to get that if you want to get that table and convert it to a type so for example this is going to have the type of the same type as this table so each field this is how we get those types and if you don't understand it will be more clear when we create this okay then we're going to say const and extract mutate and pending from use API mutation and then pass in API gig create so we did not create this yet so we will make it so it's this one that we don't have okay I will explain more and then con router is use router and then use form so we need to create a form create form values uh Zod resolver default value so we are initializing the Zod form and mode on change so why are we using for why are we not not just submitting data through an API like through axios or whatever because we need to check the validity of data so we want to check if this has 20 to 100 characters if this is this is required Etc that's why we are using this like Zod form okay function handle category change and then we're going to get category name if categories is undefined return so if there is no categories in the database here and then uh selected category will be categories do find category where category name is equal to this category name so category will be like a big object with many attributes so that's how we're going to select this category if selected category set um sub categories sub select a category. subcategory so each category is going to have all of its subcategories so once we select a category for example uh computers we're going to have all of the subcategories we need to set the subcategory so user can choose from those subcategories okay function on submit data create form values so mutate this is the mutate that we are going to create so this mutate will create the gig this is the mutation gig create and then we pass in title the data. title for the gig description for the gig subcategory ID and that's it then when this mutates when this creates then we want to uh get this gig ID as parameter we will get it returned from this mutation and then toast info gig created successfully so toast is just alert notification you don't need this and then router push we want to go to that new created gig so we want to go to seller username manage gigs edit and then gig ID catch if there is an error in this mutation we want to toast error fail to create gig return okay now let's return the form so this is what's going to be displayed in the page so we want to spread out this form which is this so we're going to spread all of the attributes and then for form so this is how we Define form with Shi and it's a bit weird you need two of these okay so on submit you're going to say form. handlesubmit on and then pass it on submit so form. handle submit it's this form it has handle submit which is not shown here but it has this so use form has handle submit attribute and this is our onsubmit that we are passing in so we're passing in on submit okay form field control um form. control control name title render so this is how the form will be field will be displayed so we're going to extract field object it will be Arrow function form item for message so this is uh the message like this error message please select a category so this is the error message uh form label title form control input placeholder I will do something amazing and then spread this field so this has some attributes like title category subcategory so this will basically be I think yeah we're just spreading the attributes okay form description craft a keyword reach gig title to attract potential users below that another form field form. control category render form item uh error message category is the name the label select now we're going to use select from shot CN and we're going to select between all of the categories so on value change we're going to call say category name String and we're going to say field on change category name handle category name category change so this will call our function that we defined here handle category change if you select the category and load subcategories okay next default value will be field. value so we already I think defined default values or not somewhere here default values here but there is nothing so I think this will be just empty then okay form control select trigger select value placeholder select a category I will explain this select trigger so when you click this you will open the select body so or select content that is so if categories exist and then we want to show select content categories do map we want to map each category we will get category select item so we need to pass in key whatever just so react can distinguish between these all of the categories all of the components value will be category. name this will be a select dropdown menu and then uh you will just display category name as like text so user clicks it when user clicks it the value will be the category name and then SE close select content uh form description and also yeah so that's it I think this is this should be understandable so when you when you click this select trigger when you click inside this component select a category then this will open select content but but it will only open if categories is not it exists is not null and then when you click it the category will be set okay go below and say button submit type submit disabled pending so when gig is being created here on the top we have mutate and pending mutate is creating the gig so while this is being created we're going to have pending and I want to disable the button when this is pending gig is be created then we have for field uh this is for subcategories Name subcategory ID so must be the same name as this subcategory ID in our Zod render field form item for error message subcategory on value change field.on change default value field value form control select trigger uh select a subcategory and then select content and then we want to say subcategories map subcategory index we want to show all of them so select item will be key index value subcategory ID and then subcategory name yeah we need to name this subcategory ID because we are using ID in this case not the name I think that's how our database how we made our database okay and then form description subcategory we will have buyers pinpoint your service more narrowly so that's it this is the whole uh this is the whole thing we just need to like make some of these uh uh some of these dependencies let's first create this database uh like tables so let's go here in the convex folder create a new file schema TS okay first we will make some imports but you can import them as we go let's export default Define schema this will be our database table schema then uh Define table users so it's going to be defined table and pass in object full name is v string username is v string title this is just like like title of the user whatever like uh software engineer about uh portfolio URLs I'm actually not using this in the app but if you want you can add this but for now they don't do anything uh profile image URL favorite seller IDs so which seller has user favorit and saved token identifier this is the token identifier of the clerk so clerk authentication has this token identifier for each user that we will save in user's database for each user and this is how we will search the user with this in the database I will show you custom tag uh for user and then stripe account ID and stripe setup complete so what you can do is uh in your platform you can have all of the sellers and then you can give them a stripe account so stripe allows you to make sub accounts for each of your you sellers so you can pay them to their stripe account to their like sub account and then from their sub account they can transfer money from to their real account or to their bank account so you can create stripe sub accounts for each of that's what stripe allows you to do uh so we are going to we want to search by token identifier so if we have a token identifier we want to search all of the users to find this particular user that's with this token identifier and we're going to use that for the currently logged in users so the currently logged in user with clerk we're going to get uh that user from database as well so we make an index by token this is the name and the field that we will search users by is token identifier index buy username username um we can search by username as well okay let's make a new table reviews author ID that's going to be ID of users seller ID of the review gig ID so reviews will be attached to gigs comment just the text communication level is going to be number from uh 0 to five recommend to a friend number service as described all number 0 to five we want to search by seller ID so we want to get all reviews for a particular seller seller and displayed on his uh on this seller's profile and then by gig ID all reviews for this particular gig and displayed on gig page let's define table skills so that's going to be so this is user skills so for example PHP JavaScript whatever so v string and user ID this is one to many so if you have one to many relation it's best to where there is many you make skills skill and then you uh go back to the user so the many in many table you reference back to the one to the user because one user can have many skills okay so we want to search by user ID let's define languages for that user speaks so language is v string user ID again one user can speak multiple languages so we in the language we reference back to user ID search by user ID user Flags user ID uh marking type why did I call I forgot why I call this marking type and then description so user Flags I think that's like similar to tags like user tags I will see what what I use this for okay countries country name user ID so one this is one to one relation because one user can have one country index by user ID okay gigs title of the gig description of the gig seller ID so one user can have multiple gigs one seller okay subcategory ID and published is going to be Boolean true or false clicks just the number of clicks of views to the gig and then search index by seller ID by subcategory ID so we want to display all gigs from a certain subcategory by publish we want to find all publish gigs for example and then search Index this is this is like text search so title so if we want to search for all gigs that contain like I will give you a haircut in the title this is just text search offers okay so offers uh so each gig has three offers basic standard and premium so gig ID for this particular offer title of the offer like uh haircut for long hair that's going to be like a standard or premium haircut description of the offer and then tier so tier can be V Union of V literal basic standard and premium literal means this will be like the value the value of this will be basic so we so this tier can be either basic standard or premium price so the difference between tier and title title is just like um you you understand I think so price of the for this offer delivery days for example two days revisions so for example I offer two revisions stripe price ID so we will connect each offer to a stripe price ID we will create a price in stripe okay search by gig ID so we want to get all offers three offers for this gig by tier I think I'm not using this why why am I searching for tier I don't know by gig ID and tier uh maybe yeah maybe if I if user clicks on a particular then I need to search for get that from database uh we'll see orders so when you once you click offer you make an order it's going to go here so offer ID for this order gig ID buyer ID that's going to be users fulfillment status that can be fulfilled waiting pending whatever fulfillment time so um in how much time do you expect this to be fulfilled uh index by buyer ID and by gig ID so if you want to find all offers for a gig and display this gig has 20 offer 20 orders gig media is just a table because each gig can have multiple images videos whatever so I have a storage ID so so when you upload image it will be stored in our convex back end and the ID of that storage point where that image is stored the ID is we're going to save that ID here so then we will use that ID to get a to convert it to get a downloadable link so we can download the image from that link but for now we just store storage ID format is mp3 mp4 jpeg whatever gig ID okay so gig media gig ID uh index by gig ID search by gig ID and by storage ID okay categories name of the category and that's it subcategories category ID so one to many relation so when you where you have many you point back to the one so for each category you just subcategory you point back to the category and the name of the subcategory index search by category so get all for example get all subcategories of programming okay by name also search uh FAQ frequently ask questions question answer gig ID messages user ID uh text image URL if you want to send image it's optional optional scene I think I'm not using this but you can make it if you want conversation ID uh yeah so each message will be connected back to the conversation and user ID this should be called like sender ID or author ID of the message index search by conversation ID so we want to get all messages from this conversation for example and then list all of them and then conversations participant one participant 2 this is the easiest the fastest way to do this although you can do it in a different way but this is one that works for me the best it gets very complex if you don't do it like this okay and then we can search by participant one ID or search all the conversations of participant 2 ID participant 2 so we want to display all conversations of a certain person to the like to the sidebar okay then user favorites this is uh all of everything that user favorite let's see what I'm not sure I forgot so user ID gig ID yeah so all of the gigs that that user favorited and that's uh we must search by gig ID and by user gig so we want to check if for example user has favored this specific gig then we would use this by user gig and then by user as well this is our schema. PR now make sure you have uh your npx convex Dev running so npx convex Dev so once this starts running it will update all of this will um generate these tables but we have a problem and the problem is in our create form uh create form from create page we don't have this api. categories we don't have API gig create we don't have any of these database functions so let's create that first let's go to our convex folder next to schema TS and say gig. TS so first we're going to do some imports that you can import later not now so this is if you want to read more about internal mutations but you can also learn from me okay export con create there's going to be a mutation mutation is a database transaction so what it does it is uh updates database adds new rows or adds new rows to table removes a row whatever Etc okay ARS arguments that we pass to this mutation are going to be title which will be v string description v string and subcategory V uh v string as well subcategory ID and then we need to pass in Handler function so what's going to happen in this mutation asnc context arguments first we need to check if somebody's logged in into our app we need to have a logged in user so identity is equal to await context out get user identity so this is this context get user identity this is going to be um a the clerk ident a token identifier okay so this identity is from clerk I'm pretty sure so if there is no identity throw new error unauthorized okay so we're going to return ID once we create the gig but first we need to get the user with this identity from our database so this is the logged in user from clerk but we need to Now find this user in the database and get that user object yet that user row okay so then we're going to contact database query users table users and then with index so as you remember we defined index by token so that's going to let us query users by token ID token identifier so first is the name second is this Q Arrow function and then Q do equals token identifier the field token identifier of the user in the database is going to be equal to identity. token identifier so we are looking for the user in the database who has this token identifier of the currently logged in user and do unique will execute this um query and it if there is more than one user with token and identifier then this will throw an error because there shouldn't be more than one so that's why do unique okay now con gig ID we're going to create a gig ID with this user as author as Creator and when we create something in the in this like mutation in the database we are going to get gig id id of that create thing back so await context database do insert so when you use insert you get ID of the insert the thing back insert into the table database uh into table gigs and then pass in object these are parameters title is arguments. title so arguments are here that we pass description arguments description subcategory ID is argument subcategory ID but the okay I'm going show you the problem here is string is not assignable to ID subcategories so this is going to be a string because here it's string so one way we can deal with this is we can convert this or cast this as ID subcategories seller ID it's going to be user question mark ID exclamation mark so this is checking if user exists maybe user is null I think it's better to check it here but okay so if user exists it's going to be ID and exclamation mark means every user has ID so you don't need to worry about if maybe user doesn't have this ID field published false by default clicks or views zero let's save this and that should work I think instead of casting this from string to this you can just um remove this and keep it like this but now this should be here and then import was the problem okay so well I think we cannot do this so let's just go back and cast this into this ID subcategories and that's our create method we also in the create form we need to get this categories. getet so let's go and create in the convex folder next to Gig say categories categories. TS in the categories we will do some imports okay so export con get query so query is different from mutation because query is not changing the database data he just retrieving but one advantage with query is that once the data changes if for example I'm displaying something from database and that data changes the database some other user on the other part of the world changes it it will automatically update on my web browser so query will pull automatically in changes and update my web browser client Handler so uh we should have passed arguments here actually but okay let's for now just uh have a Handler function there is no arguments const categories await context databasequery categories collect all so we just want to collect all of the categories in the database categories with subcategories relations so why is it why is it relations you'll see you say categories dot map you want to sorry you want to map categories and for each category you want to run context databasequery subcategories so you want to for each category query subcategories with index by category and pass q q equals category ID is category ID so you want to query subcategories get all subcategories that point that are subcategories of this category and do that for each category and collect all of them so this will this is same as unique this will execute this uh and collect all of them then subcategories so when you get all the CATE subcategories you will return an object spread category and say subcategory subcategories and so right now if we take a look at this object all of this what all of this returns it's a promise and then object array of objects and it has subcategories array of subcategories and then ID of the category creation time and name category so this is what you do when you spread this you spread it into uh these three and then when you add subcategories then besides these three you also add array of subcategories okay but why is this relations because this is a bunch of promises you need to resolve these promises so go here and say categories with subcategories it's going to be await promise. all and inside pass this these relations and now this is not going to be promises this will just be resol promises like this actual array of objects and just return categories with subcategories so this is to get all of the categories now we made this we made the other one as well so let's go back and run npx run Dev again and the looks like it successfully added all of these tables indexes everything is working we only have uh one more issue but in our convex uh Dev we can check all of the tables that got created so for example users table everything is empty for now and in functions we can check our function that we just made so categories get and gig create this is the categories get is the SIM code and gig create and lastly we need to create these hooks use API mutation so let's go to outside file create a new file hooks API mutation. TSX first we will use client then we will import uh these Imports and then we will say export con use API mutation and we will get in mutation function it can be any I don't know how to do this without any so if you know please tell me const p pending set pending use State false so while the mutation is executing the database is being updated we will set pending to true so API mutation it will be this mutation function so use mutation from convex react mutation function so if you I don't know if you if we did this but if you have a mutation so let's say creating a gig you need to First initialize that mutation with this used mutation hook and then it's going to be this API mutation variable so whenever you call this like API mutation here for example like that it's going to call this mutation function whatever we passed so for example in this other case here we are passing uh API uh gig create into use API mutation so that's going to be this mutation function create and then you're going to pass it here here so this will initialize this mutation and then we can call it here so let's go next we're going to return mutate and pending we didn't Define this mutate yet so mutate let's define this mutate payload that's going to be arguments set pending to true and the in the beginning of the mutation then return API mutation is this one with payload and then finally when it when the IM mutation executes we will set pending to false uh and then uh after so finally is happening after then after then and after catch so finally is at the end but when the after the mutation executes we're going to have this then return result and we're also going to catch error throw error so this may be a little bit confusing so um the way the reason doing this here is so I have this pending State here's how it works let me just show you once again so we have this uh create mutation API gig create this is going to create a new gig so we need to pass this mutation function into our use API mutation that we did so this is the mutation function then we need to initialize uh mutation with this mutation function so we pass in mutation function into use mutation to initialize this mutation and now that mutation will be saved into this API mutation and now whenever we call this API mutation with these brackets it's going to like update the database it's going to execute this mutation and the payload so um the payload comes from calling this mutate so as soon as we call this mutate we will then execute this API mutation and this mutate we call that with payload we export it here so the way we call mutate is here if I go ahead and find it somewhere here we are calling the mutate we're passing in title description sub subcategory ID so we call this mutate with payload we set pending to true and then we use this API mutation with this payload that we passed in into mutate and then so I I'm going to set this finally like here so it makes more sense and remove this okay so after the mutation is executed you return result so that's going to be returned where you called mutate so here so if I say a variable const result equals mutate it would be saved there but I need to await I think also if there is an error throw error and at the end just set pending to false so if we go ahead to SL seller and then whatever the username it doesn't matter here at all manage gigs and then create we can see this now title let me just say whatever it's not important for now category we don't have any categories we don't have any subcategories if I click save these are obligatory so let's create these categories and subcategories into the database this is what it's going to look like once we add categories in the database let's first there are multiple ways to do this but let's create SE categories. TS in convex folder and then add some imports these are the categories that we will have so it's an array it must be name web development so you can copy this from my GitHub or you can generate it with jpt or write it yourself and then export con create mutation Handler identity check for user identity we already did this and then we will just return nothing and for each category so for each of these categories we're going to map and get category await context database insert into categories name will be category. name and that's it that's it so this is going to so as soon as we call this create it will insert all of these 10 categories into the database so we can call this anywhere so let me just call this whenever I refresh this create page so let's go here to the the create page that we made and let me start with some imports uh import use effect from react and use client and then con insert categories is use mutation API seat categories. create so this is the mutation function that we're going to initialize and then if we call this so we're going to create use effect so as soon as the page loads we will call this insert categories and pass empty object as arguments because the the there isn't there aren't any so if I go ahead and delete all of the documents as soon as I go here and refresh this page it will automatically use use effect and it will add okay there is 20 I mean one uh way we can fix this is just delete the last 10 so from web development until web development just delete all of these or you could have inserted this manually or whatever but I I wanted to show you through a script so you could have just went here a document and then um like say name this so this is a way oh my God we could have just copied we don't need to write all of this even but I want to show you how to do it through this so we could have just copied all of this and like that and then save and it's going to insert all of them now to add subcategories let's create seed seed subcategories dots in convex folder start with some imports so you need to copy this from here or generate it from cat GPT what's important is the number of subcategories per category so for me it's seven so my code works with seven you can you can change this code okay um let's let's export con create mutation Handler return nothing check logged in user categories so we're going to query all categories collect all categories and then we want to check if we want to also collect all subcategories and if there are subcategories you want to return so we don't want this to add two three times same subcategory so this is just for checking if there are already subcategories after that we will say await promise. all categories. flat map the difference between flat map and map flat map will flatten arrays I think so if it's mul it's multidimensional it will flatten it into onedimensional okay uh and then const create subcategory uh category subcategories so for each category we want to map const category subcategories so we want to look at these subcategories and take First Seven and then second seven and then seven again so this is what code does it say subcategories do slice index time 7 from this to index + 1 * 7 so for example if index is two it's going to go from here to here from index 7 to this okay I think that's it and then we will return uh category subcategories that map category name we want to insert into subcategories we want to say category ID is category ID and name subcategory name I'm not actually sure why why uh Chad jpt used flat map here I think you can just use map so it doesn't matter because this is not getting returned anywhere it's just getting resol resolved so for each sub for each category we will we will add all subcategories so we don't need to like any any mapping arrays and with anything so now let's call this function so in our create page or wherever whichever page um I'm going to con uh change this to insert subcategories and then use mutation API seed subcategories create and then I'm just going to call this mutation in use effect so let me save this and as soon as I refresh this page it should uh 70 subcategory should appear and now we can go ahead and remove this and this all of this so we don't need this anymore that's just for like create inserting categories and sub categories and it will not change again so now if I select a category artificial intelligence it's going to offer cognitive Computing whatever so I can select it I will do something so I will teach you AI just like that and save and this should uh in the yeah when when I press save nothing happens and when I go here to logs from convex I can see that seller ID is not Prov provided so that's not going to work so go here into gig. DS and we need to remove this question mark So seller ID must be obligatory so I'm going to say I just added this if user is now return So currently user will be null because we don't have we don't have anywhere where we adding the user to database so let's go up here in the app I will make a new file and I'm going to say uh I'm going to say normal brackets dashboard and then slash page. TSX so when you have a route in these normal brackets that means that this page. DSX will be displayed in this app as as if it's in this app folder so at the route so this uh folder this route is ignored it's just for organization okay first we're going to use client some imports interface dashboard props search parameters search uh optional string favorites optional string and filter optional string so if we go back to the uh root route what these things are is it's going to be here like uh I forgot exactly the syntax but something like search equals uh whatever the search name uh haircut whatever but there will be like some I think question mark or something here so this is uh to have just these parameters so we can use this to search to display favorites or to filter or to filter somehow let's export default dashboard and then let's say cons dashboard is equal uh passing search parameters and give it the type dashboard props this type and then this will be Arrow function return gig list and passing query search parameters so for now I think we just want to uh comment this because we don't have this yet and we want to comment this maybe and let me just return like a normal div just High whatever and for this to work we need to delete because this page is now inside of the app but there is another page TSX inside of app so we need to delete this because they are parallel they are at the same route and now this is what we get uh displayed now what I want to do is I want to get use effect I want to save the user if he's not Sav in the database let's go in the convex folder and gig. T s I'm going to say user users. TS so we want to start with export con store so we want to store the user it will be mutation arguments Handler argument is empty check the identity we did this okay we want so uh if the user might be renaming also so we want to maybe have this functionality to rename change name a wait context database query users with index buy token actually this is not rename rename this is just looking for the user with index by token and then token identifier will be identity to token identifier and then get your Nique and this is for renaming if user is not null if user username is different from Identity nickname then we will await context database patch we will update so ID is user. ID that we want to patch and then I want to say passing object and say username is identity do name but why did I put name and not nickname I'm not sure I think I'm Not Who I'm not sure but we will fix this let me just continue so we will return user ID I will return to this so here we will also return user ID to be uh consistent so if user is null then we will add the user to the database so we will store user ID when you store something to the database it will return the ID of the new newly store stored entry await context database insert users pass in object full name identity. name token identifier identity token identifier title about username identity. nickname profile image URL is identity profile image URL so let's change this identity. name to identity. nickname like that and also we need to make sure these are uh actually like these exist because we are telling that they they exist but we need to enforce this in clerk so let's go to clerk.com and make these things obligatory so here in your Fiverr clone email phone username we will set username to required so it says required and we will also set name and then click here to make it required continue and save changes sorry guys I think my video was not 720p but now it is so let's go uh here into dashboard use effect and then make this Arrow function uh let's say just like store and that's it but above that we need to say const con um store it's going to be use mutation API user store and then we need to execute this in the use effect so let's just see if store changes this will also store again and then const store user is a sync function that has this body await store and pass in empty object so this is the mutation store and store user is the function so let's just call this function here because this is how we need to call ass sync functions in use effect just make sure to also import this mutation in the users. DS and now it should work if I go ahead and refresh this the logged in user should appear here but the problem is we don't have setup username when we logged in and when we created account so we need to delete this account and like register again so I want to go to users and just delete user delete user and now I want to refresh this continue with Google and now it will ask me for username let me just choose this continue and now it should yeah it should add me added me properly and now I exist in the database and now if I go to the whatever so this is sellers like just to this and then slash create I should be able to create a new gig let's check here so if I fill the data and press save we have a new gig let's go and it uh sent us to this gig page but it doesn't exist yet but this works next uh let's go inside of manage gigs and add a new file it should be edit slash gig ID in these square brackets and Page TSX this is for editing the gig okay so first thing we will use client there is a bunch of imports do not import them right now import them as Rec code but just I would suggest you import this used router from Nex SL navigation right now so you so you don't import it from Nex SL router accidentally later it must be from next SL navigation then interface edit page props parameters gig ID string so this will uh be in I will show you so this is link it's going to be this link manage gigs edit and then some gig ID so you need to get this from URL that's going to be the gig ID that you need then you want to make const edit and Export default edit so you need to export default when it's a page it's not a component but a page extract parameters and give it edit page props okay then we need to get gig by gig ID from database so use Query this is use Query um here from convex react and we need to send in uh the function that we will call it's going to be API G get which we don't have yet and then the parameters for this query are ID parameters. gig ID as gig ID as ID gigs because this is string so this gig ID this parameter that we are getting is a string and need to we need to cast it as uh this ID okay so this is our query that we will run we will make this soon to get the gig based on gig ID from database published use Query and then API gig is published and pass in the ID of the gig again so we want to check if this gig that we are editing is published const okay so we want to use our use API mutation that we defined that we made this file just earlier you can go back and rewatch what this file does so we get mutate and pending and we will rename mutate to remove and pending to remove pending because we will have multiple API mutations so we need to remove these uh rename these and then pass in the mutation is going to be API gig remove so we will create this as well we don't have this okay then another API mutation uh mutate will be published and pending will be publish pending and you're going to pass in API gig publish so this is another mutation that we will make and then another mutation mutate is unpublished and unpublished pending and API gig unpublished is the mutation that we will pass okay so router use router make sure it's from next SL navigation identity is use out this is from uh clerk nextjs generate upload URL a use mutation so when you want to upload an image and store it into uh here files you need to generate first an upload URL that's going to let you upload post image to that URL when uploading it to convex so generate upload URL will be a mutation we're gonna say API gig media generate upload URL that's going to return our upload URL after that we want to say image input is going to be use ref HTML input element null so I'm not sure why I use this but some I'm referencing this input image input element for some reason I forgot why we will see later okay uh so and then uh selected image and set selected image use State file array of files and set it to empty array as initial value so when we select images to upload there will be this will there will be an array of files before we upload them we just select them through the window you know the upload image selection window I will show you send images use mutation API gig media Send image I think this is upload image we'll see I think this is upload for uploading the image okay and then if there is no identity throw error unauthorized uh you must have these mutations before if because you cannot have these mutations these are hooks after if so they cannot render conditionally they must be before always the hooks must be before conditions undefined means it's still retrieving so if gig is undefined or publish is undefined then return null so we don't want to or you can return loading state or return loading whatever you want to show something if gig is null uh gig not found so we will just so if the gig ID here in the URL is wrong ID that there is no gig with this ID in this URL then we just want to say not found on the page okay handle Send image so this is like handle upload image it should be called okay asking function okay and the event form event so I think this is going to be a form submission so we're going to use this okay so prevent default we will prevent the page from reloading when we submit this form we will make the form later okay but now if gig is undefined return so if gig is still loading I think it will not be undefined though I think you don't need this at all all because this will return so it will not come to this if it's undefined uh non nullable gig let me see what this is gig as doc gigs okay so gig might be null but it's not going to be null I think I added this after I added this so that's why but so gig is not going to be now so gig will so I think you don't need any of these step one get a short lived upload Ur okay so post URL is await generate upload URL so generate upload URL where do we have this here um I said that when you call this say use mutation and pass in mutation this will this will be the generated URL but no it will not actually this will be a function a mutation uh that when you call it will generate upload URL so this is how you define so you say use mutation and pass in the database function and that's how you define this mutation and now when you call it it will now return the URL wherever you want to call it okay then await promise also we want to uh resolve all promises but we haven't defined those promises yet so we're going to go through all of the selected images and then for each image we're going to do some asynchronous function so we're going to say uh result is going to be equal to await fetch okay so post URL is our up upad URL that we upload that we send the image to and then we need to say method post headers content type image. type so that's going to be I think like PNG or JPEG and then body image so this is going to be a file type okay so we're going to send image this image to this URL upload URL and then cons Json is await res. Json so we just convert result we uh parse it into Json if result is not okay so not result okay throw error upload failed and then we just show the response wi failed and stuff okay um if it is okay then it will skip this if and it will we can extract from this Json we can extract storage ID you can read more about in about this in convex documentation about file uploading save the newly allocated storage ID to the database so when you upload a file to convex it will return storage ID of that file and you can save that into the database so you know so wa it's Send image so yeah so the reason I call this Send image is if I call this upload image that would be problematic because this is not uploading image this is just saving uh uploaded image storage ID into database so I need to pass in storage ID so storage ID is equal to storage ID this has the same uh name so I can like say like this storage ID but because this is the same name I you don't need to do this um format image gig ID is nonnullable gig. idid okay let me go next okay if there is an error in this uh Send image console log error and toast error minimum five files maximum five files reached so each gig can have only five files and we will Define how uh it's going to check number of files inside of this Send image mutation that we that we are going we didn't make this yet so inside of that mutation uh SE set selected images to empty array so we uploaded all images now selected images are going to be empty array image input current value is empty string okay so this is the image input we are referencing this input field this is where we are referencing the image input field and once we upload images we're going to set this variable like this and we're going to say uh current exists the value is empty string I think you can do this in a different way as well but you can I think you can maybe use this controlled input you don't need to reference it but okay uh okay so let's say on publish so when we click publish the gig this was images but now let's say publishing console log published or this going to be true or false if not published if so if this is false then this will be not false true then we want to publish and we want to send IDs parameters. gig ID as ID gigs I think it would also be possible to maybe in the interface say like this and then you don't need to cast it anywhere but let's just keep it like this for now okay so publish we send the gig ID of the ID we want to publish catch error console log error toast error so toast is your toaster is like notifications so let's actually um I forgot to add this toaster let me save this for a moment and let's go to app uh layout and here I think just above everything just add toaster from Sun like that I think this should work so now all this is uh going to show notifications if it doesn't maybe we need to add the other one from not from soner but from UI toter or something I'm not sure so uh we'll see okay so fail to publish please make sure there is at least one image three offers and a description else so if it so if this is not published we will publish but if it is published then we will unpublish ID of the gig we want to unpublish and that's it on delete when we want to delete this gig remove we call remove mutation and pass in Gig ID this is string so we need to cast it as this and then router back so just go to the previous as if you click the back button on the your browser okay now let's make some return statement uh we want to have these like fragments they don't add a new div element they just but you must return must everything must be uh inside of one element so that's why you need to have this outside element whatever it is um okay so space so we're creating a div uh this is a responsive responsive mobile responsive so on extra large extra large medium devices it will have these different paddings okay and then we want to flex justifi to the end padding right and space X2 let me see what this is so we have a button this is button from UI components at UI components okay so this button will be disabled if publish pending or un publish pending so I think this button is for publishing okay then variant is default on click on publish and so this button is going to show either uh unpublish or publish text so if it's published it's going to show unpublish otherwise it's going to show publish and so when I click this button it's going to say unpublish okay I think let's continue I think you understand and once you public okay so below this button or next to it because this is flex so next to this button there will be this link and you will be able to preview so if you click this link this button uh you will be pushed to this so this link so it's going to be slash gig seller username gig ID so this is just um it's going to push you to the page of this gig and then disabled if it's like remove pending you cannot be previewing yeah okay so varant secondary uh if you want to see see these variants you can search for but Buton TSX so here we have all of the variants and this this is um like just the Tailwind CSS styling so secondary is going to have these you can add your own variant below here like whatever let's go back and continue then we have another button and this will be delete button so disabled is when remove pending very secondary on click on delete I think it's clear uh title editor so we want to make it so that user can just click the title and change it it's going to be like an input field we need to pass in Gig ID and title so we will make this component soon okay below that we have withd 800 pixels images so we want to show images for the gig so uh images will be gig. images this is also a component we will make Title Gig gig title allow delete true so in this case we will true because we want to allow delete if we are on editing page so allow delete true but if we are on the gig preview page the gig page then it's going to be false below images uh let's say handle Send image so this is the form for uploading the images so this will only be on this edit page so on submit handle Send image let me go here so this is our form submission we defined it here okay let's see and then we want to have label so this label is from UI components everything is from UI components that we install from shat CN font normal add up to five images div Flex space X2 input from sh from UI components at UI components okay so ID image I don't think you need ID type file accept image and then all kinds of images so jpeg PNG whatever reference is this image input that we that I explained here ref okay on change we have this event and we're going to say set selected images array do from event. target. files or empty array so if there are selected files you set this set selected images to array of those files or you send to empty array and you you are allow this input to select multiple files so I will show all you all of this uh so this so when you click the input it will pop up a search window and you will be able to select multiple files and then some class names so cursor pointer W fit with fit background Etc disabled if selected images. length is different from zero so if the user has selected images then we will offer the user to upload the images and not to select again then we have upload image button so we will um type submit disabled select selected images so if selected images is zero then upload images button is disable because we need to have some selected images below that Flex rounded border rounded medium border zinc so we have this kind of uh text so it's going to say Creator and then uh this should be seller ID I I hardcoded my name here but I think it should be seller ID so I'm going to change this uh so this should be like I think seller. ID or something but it's hardcoded right now but we don't get seller anywhere so I think we need to get like seller or gig let let me see here okay I'm going to continue but you can use Query this is your task if you want to learn more you can you can either remove this if you don't want to do it or you can uh use Query to get seller ID somehow I will see how Okay offers offers editors so offers will be like premium standard basic and then just gig ID and then about this gig it will be H2 title and then description I want to set description outside of this div and initial content gig. description editable true class name and gig ID will be gig. ID okay so that's it this is the whole file the there was nothing here there was just some empty text like but this is a whole file that we need to now create all of these components so first of all it looks like we don't need a bunch of these edits so we're not using this offers we're not using this convex image we're not using this CN we're also not using this file upload it seems and we are not using this image let's start by making this database mutation so let's go to gig. TS down below at the bottom let's make a new export con get it's going to be a query and we're going to pass in this object so it's going to have arguments it's going to be ID uh v. ID gigs and Handler function first we're going to get the gig so await context database G get arguments. ID if gig is now gig not found although we are not checking for user identity which we maybe should but okay then we want to so we don't want to just return gig we want to also return like offer seller what a lot of other things besides this gig so we want to get seller await context database get seller a gig. seller ID as ID users then if there is no seller throw new error seller not found country await contacts query countries by user ID and then pass in the seller ID to carry the countries must be unique okay um if there is no country country not found languages of the user so because uh this G gig page it will show not only the gig but the user languages countries user offer source there's everything reviews I think also uh we want to query Languages by user ID so all of the languages of this user collect all of them seller with country and languages so we need to now put everything into an object so we spread the seller it's going to spread all of these fields country country language languages so if we take a look at this it's going to be country object languages object array of languages and then uh the seller will be spread okay gig with seller spread the gig seller seller with country and languages so now when we say gig with seller do seller. country but besides seller everything else will be the gig will be spread so we add the new attribute seller to the this gig that we spread get last fulfillment so last fulfillment are so query orders with index by gig ID so get orders from this gig uh order descending this is by I think by date created and then the first so this will be the last order the yeah the last order now I think I'm calling this fulfillment and order those are not the same thing so I think we should call this like the last order gig with seller and last fulfillment we want to spread gig with seller and we want to add attribute last fulfillment so I don't know if you know what spreading means but it just means it's taking all of these attributes of the gig and just copy them and pasting them here okay um images it's going to be query gig media so we need to get gig images with index by gig ID so get all images by this gig ID and collect images with URLs a wait promise so we need to resolve all promises because for each image we're going to map images so for each image we're going to uh we need to retrieve each image from Storage so right now these images are just storage IDs they are not actual like images and URLs so for each of those storage ID we need to generate image URL for that image so await context storage get URL and pass in storage ID so that's going to return image URL if there is no image URL image not found and then spread the image all of this and then at the bottom below format where we're going to add URL is equal to image URL so if I go here it will be as you can see all of the image is spread and then also URL is string gig with seller and last fulfillment and images spread gig with seller and last fulfillment and say images will be images with URL so images and then last fulfillment and then everything else and then return gig with seller and last fulfillment and images so so this is the whole object we have everything here so if I save this now we have API gig get now let's make API gig is published to check if it's actually a lot short shorter I think so below get let's say export cons is published query and we're going to get get arguments ID for this gig and Handler function con gig is await context database get arguments. ID so we want to get this gig and then gig so check if it's null uh dop published or false so if this is null or undefined or if it's not published then we're going to get false so not published below below that let's say make publish so this is the next one that we need to make publish and then publish this is short also so publish we'll have we receive ID of the gig Handler gig we're going to get this gig again there is no gig throw error uh media we need to get all of the gig media uh by this gig ID so we need to check if there is so we want to collect all of the media um with by gig ID and check if okay let's also collect all offers so that's going to be premium basic and a standard I think as so offers by gig ID collect I think you understand what this I mean explained it so if you don't understand just tell me below if media length zero or gig description is empty string or offers length is different from three throw new error gig needs at least one image to be published or and the three offers and the description so you can add that here okay I wa okay so if this is true then we can publish so patch arguments. ID so the gig ID and then published true and return Gig if you want but I I don't think we need to return gig below that export constant publish this is shorter I think so we get gig ID Handler get the gig if there is no gig throw error and then just patch published false and return gig there is just three more and those are shorter so gig remove gig media generate upload URL and gig media Send image or save image to database export cons remove so this is inside of gig TS that's going to be mutation we gig ID of the gig we want to remove Handler we check identity so if somebody is logged in or not we should have checked it probably here as well everywhere at every mute every function okay so user ID is identity do subject I don't know if this is wait this might be a mistake let's see uh existing favorite yeah so if we favorited the gig it's going to be saved into a different uh table so we need to also delete the favorites query user favorites with index by user gig and Q user ID is user ID gig ID is uh gig arguments gig unique I think this is I I don't write this I think this is a mistake so we will fix it let's see okay so if there is the favorite exists with this user and this gig ID then we need to delete that favorite so context database delete existing favorite. ID and then we can await context database delete arguments. ID so we want to delete this gig after deleting the favorites or favorite so I'm not sure if this identity I think this is not the same ID this is not the same ID that we have in our database so I'm going to do this so user is await context database s users with this token identifier and then get unique and then user ID I'm just going to comment this and I'm going to say user ID will be user. ID like that but I need to also check if user if user is null return and now we don't need this question mark so I'll see if this works if it doesn't we will fix it I think this will work if we go back we need to create this gig media. TS and generate upload URL and send image so let's go here to convex folder again next to Gig TS I'm going to say gig media. TS so let's start by few Imports export cons generate upload URL mutation and then ass in context so this is another way you can do this mutation without Handler functions so return await context storage generate upload URL okay and then we want to say Send image it will be a mutation arguments storage ID VI idore storage format v string and gig ID will be v. ID gigs Handler check how many images are already uploaded const gig media await context database query gig media with index by gig ID collect if gig media length more than five throw new error you can upload up to five files please delete a media before uploading a new one and then await database insert gig media storage ID argument storage ID format arguments format gig ID uh arguments gig ID and that's it this is how you up send this is how you save uploaded image to the database and there is no more errors from our database we just need to make a few of these components now so add components description add component images let's make those two first so let's go here to and under app we're going to say just in components desk rtion DSX and images. DSX so in images we want to say use client now I'm not sure if we are using all of these import so you don't even need to import them now but later um interface image props so images image with URL type this type we will Define so this is image uh that also has like URL so image type I I will show you will show you so title allow delete and class name optional okay below that we're going to say export con images extract all of these uh Fields image title allow delete class name from image props const is hovered set is hovered to use State false and then return okay so this is Carousel from UI Carousel class name select none on Mouse enter we're going to say set is hovered to true on Mouse leave it's going to be set is hovered to false so we have this set is hovered the state that we track then we sa Carousel content and we're going to pass in the class name these are like Tailwind CSS classes or empty string if this doesn't exist if it's undefined images. map so for each image we're going to return something Carousel item key because you are mapping so you need to use key prop here aspect ratio 169 this is from a UI components allow if allow delete then we will say actions so this is like a it's not a drop down menu it's a button so side bottom side offset 10 storage ID image storage ID so these are actions from this but we will make it and then um trash two so this is icon from just icon trash two okay below that let's show the image source is going to be image URL or I think this is just a placeholder image and then fill because this image tag that's from next Rea next um I'm not sure where it is is from next image it must have either width and height or fi and then class name so below this Carousel content we want to say Carousel previous so these are previous and next buttons for if you have multiple images class name this is just position of that button and the looks Carousel next class name the same so this is our image viewing like component that's going to get in a list of images and then we can view them so let's now go ahead and create this actions so we're going to copy this underscore components underscore actions and then we'll go to this file path so that's our edit file that we made in our app so here seller edit um we have gig ID and then inside of that we have components actions so let's make like this uh actions. TSX so underscore component actions TSX but before all of that let me um let let's go and see what this page looks like so here in the edit gig ID page manage ID I want to comment this I want to comment this and then I W to comment title editor because we don't have this made I just want to see what all of this looks like so I'm going to comment this and offer editor and now H there should be no errors we just need to now load the proper gig so this is not the proper gig ID so let me go here to data uh gigs and copy this gig ID and now we need to paste it here so it's a proper ID the first problem we have is country not found so let's go here to countries and let's actually go to users and copy this user ID and to countries and I want to add a document manually user ID uh country Hungary save okay if I go ahead and refresh this again this is what our page looks like and now I can say select choose files and show all files for example and let me go ahead and select I can select multiple files and then I can upload image let's see what happens element type is invalid okay we didn't finish this but I think you see how this works and I think it works well but now we're not really able to see this so let's go here to image with the so first of all I want to comment out this actions in this is images TSX and then I want to comment this actions out actually I want to comment all of this we don't need it and let's just quickly make this types so in in the outermost file click say types slash index. DSX or DS here let's say export Type image with URL type it's going to be Doc gig media and so we need to extend this type of gig media with an object URL string and now let me import this so save this now this is resolved another thing is if you want to uh display images from a URL in next SL image tag we need to add that to next we need to add that URL to next config JS so let's go to next config J MJS in my case inside of next config we want to make some space and say images and object domains and then array and then copy paste this domain that it tells you if you want to display images from other domains then you need to add them so these are some domains that I'm adding I think you whenever you are displaying image from these domains then you should be you should add them so this is for example for for my placeholder image it's from this domain now we need to refresh it's going to recompile everything and just wait a bit and the images are are shown yeah the images are shown and we can cycle through them these are bad images I uploaded but now you can see uh what how this looks like so if we go to our convex files you can see the three images that I uploaded I can delete them but make sure you also delete the gig media like storage IDs here if you delete an image yes this looks ugly a little bit but we will add Navar this will not be on the top so it will look better now let's go back to actions in our edit gig ID components actions and let's continue with this this will be this will let us delete and do other actions so use client a bunch of imports that you don't actually need to import now but later um interface so this will let us either rename uh and then we have a confirm model everything so interface action props children react node side uh drop down menu content props side so this will be top left right the side of the drop down menu side offset it's going to be value in fixed pixels and this is from radx UI okay and then storage ID is going to be string export con actions extract all of these and then that's going to give it action props type uh so const on open username model so we're going to create this we don't have this yet but we will extract on open mutate pending from use API mutation and we're going to say API gig media remove so this is to for removing this media when we click delete button on delete mutate storage ID so we will delete the with storage ID and then we will say uh toast success board or it should be gig deleted or no this should be image deleted or I think this is image deleted because it's storage ID um catch so fail to delete board fail to delete image return give it some div and then confirm model so we want to be able to confirm if we want to delete the image header delete image question mark this will delete the image and all of its contents just this will delete the image okay disable pending so while this is being deleted it's going to be disabled on confirm is UND delete so this confirm model we will also make it we don't have it yet okay so inside we say button this will be passed as children to the model and then varant destructive these are class names trash two icon and delete text so first let's go ahead and inside of gig media let's make this remove so let's go to uh contrl p and look for Gig media and Below we're going to say export const remove mutation and then argument storage ID and Handler okay now we need to say const media is a weit context database query so get query the gig media with index by storage ID and then execute it get unique if there is no media media not found and then we want to delete based on this media ID and then we want to delete this okay so there are two things you want to delete as I said we have a file that we want to delete and we want to then delete it from the gig media storage so in Gig media oh sorry here uh we want to delete it from this storage as well so first we will look for it in the storage then we will delete from delete from the database and delete from storage and sorry this is not looking in the storage this is looking in the table so uh let's now go to so we are actually not using rename on this on rename model um I'm not sure I I think I I will just just comment this out and this because we are not using the rename model I maybe show you later uh how to use it but let's now just say components and confirm model so let's go here let's go to components and then make a new file confirm model. TSX here we want to use client and then import all of this stuff but not now later interface confirm model props children so that's going to be the pattern button that we passed and everything when we encapsulate this component so let me show you so here this confirm model uh we have this confirm model and these are all the props but also this is inside of it is p as children so let me go to confirm model and continue here on confirm is going to be a function that returns void disabled buan header string description string okay export con confirm model children conf so extract all of this give it type confirm model props and make an arrow function uh handle confirm unconfirm so we just call this function whatever it was so return alert dialogue alert dialogue is a like a popup alert so alert dialogue trigger as child children so you need to say as child because this is a button and this children is also going to be a button because we are wrapping we are passing Button as children so you cannot have button inside of a button but you can if you say as child uh so when you click this the button then it this will open the content alert dialogue header alert dialogue title is header alert dialogue description alert dialogue footer cancel and confirm and confirm we'll have disabled disabled and onclick handle confirm so now let's go to images. TSX and here where I say allow delete actions I let's uncomment all of this again and then let's uncomment this import so if I save all of this now we have this delete button and I have it for each image and if I press delete here this is our confirmed dialogue confirm and now that image should be deleted so there is only one image and in files there is only two images here so I can cycle through two of them but there is no more than two and I can delete this one as well and now there is only one so now let's do the description so in the page TSX of gig ID edit we want to uh un comment this that was commented and we want to scroll down and uncomment this description so now let's go to our uh description so description TSX and here we want to start by saying use client also we want to go to blocknote j.org and click here docs quick start and copy this and npm installed this these two libraries then in the description uh these are all of the Imports that you can import as you go but you need to import this manually and this manually and for me this is like showing uh that cannot cannot find this module but I think this is a mistake like a bug because this module does exist then let's say interface description props ID is gig ID uh initial content string so maybe there is already some description that we will display editable Boolean and then class name so editable so depends on if we are on the edit page we will want the user to be able to edit the description but if not then we will just show the description class name is like tail wi CSS so export cons description ID initial everything extract that from this type con update use mutation API gig update description editor we will make this uh gig you don't have it it will be red underlined but we will make it so editor will be use uh create block note initial content it will be this initial content that we passed question mark So if it exists we will Json pars so if initial content exists then we will Json par and this initial cont content or it's going to be undefined so either this or undefined depending on if it exists handle change if editor document exists con um content length is Json stringify editor document. length if content length is more than 20,000 characters but also keep in mind this is not 20,000 characters of pure description this is also like the whole Json file with all the data metadata for the description so there is like maybe 5,000 characters of like just those Json other characters okay update so we want to update the description the API mutation here gig ID and description so description will be Json stringify editor document. n.2 I forgot what this does with N2 you can you can maybe ask GPT but so this is the description uh the description is going to be here in the description field you see this is this whole what it's going to look like so this is for example that the text is going to be I have it I don't have it here I think it's empty so we'll see okay next else so if content like is more than 20,000 content is too long not saved duration 200 so this is toast error like notification duration two seconds icon alert uh octagon and then we want to return so we want to display uh we want to display block note view so we want to display that editor is editor editable editable theme light or dark onchange handle change class name is class name and that's it so now let's scroll up and let's make this mutation so y so API gig and then update description so let's go here to Gig DS so in the gig we're going to say export con update description mutation arguments ID gig ID and description Handler const identity is a weight context Al generate user identity check if identity does not exist unauthorized cons description ARX description trim if no description throw new error description is required description length is more than 20,000 description is to Long await context database patch so we want to patch the gig this is the ID of the gig and say description arguments of description and return gig so that should work ignore this error so if I go here to description you should see this and I should be able to add description and if I just click anywhere else it should automatically be updated here uh and if I go into description this is the text I should be able to add description and if I hard refresh this page the description is still there and it's editable because we are on this like edit URL but I'm going to make this not editable when it's going to be in the like the gig page let's continue with title editor so uncomment title editor in the gig edit page and let's go below and uncomment this as well oh I commented it twice oh my God what's happening okay let me uncomment it manually so I'm not really sure what this import path is but let me actually uh say slash component /title editor and then let me copy this and I want to go to component and create title editor. TSX so first use client and some import that you can import later uh just I think we need to I don't know if we have this installed react text area Auto size maybe you need to install this or you have this installed I don't know okay title editor props ID is gig ID title and title is string title editor ID title extract that give it this type Arrow function const input ref is use ref element ref text area and then set default value to null so we need to reference the text area that's going to be like our title input it's not going to be input field okay then const is editing set is editing use State false value set value of the title use State title so it's going to be M or whatever the string is then update use mutation API gig update we need to create this enable input so depending on if it'sit editing or not then input will be enabled set is editing true set timeout zero so uh I think this is we are so we want to set value to title I will explain why this way set value title and set input uh element is input uh ref current and then we want to focus the current the input when we enable editing and then we want to set selection range so the reason I'm using set timeout is to make sure this execute after the current execution callback as explained here and so uh this will let browser update the UI and then it will execute this and what this part does after the focus is it's going to set your cursor at the end of the title so when you focus the input field the text area actually not the input it will set the cursor at the end so you can continue typing at the end of title so let's go after uh disable editing set editing is false on input value string set value value this is value of the title of the input text area field that is update ID title so we want to update on input we want to set the value and we also want to save it in the database if it's if there is no value then it's Untitled on key down um event so we want to if you press enter we want to do something so react keyboard event a html text area element Arrow function if key is enter prevent default so I think this will what is going to do disable editing okay so I think this will not make a new row like go to new row with enter but it will just disable editing so save return div is editing return something if it's editing so if we are editing return text area Auto size reference is input so you want to reference this text area on blur means like uh when you defocus when you click somewhere else disable anything on key down is on key down so check if enter is pressed value value on change on input and then pass in E Target value so this is the text the new text the whole text of this uh text area field and some custom CSS max length 60 and then we want to so if it's not editing it will show this div uh on click enable input so as soon as you click this we want to set enable editing class name title we just want to show title so if I save this we also need to make this update real quick so let's go to geek DS but even now you see the title is displayed it will just throw an error if I try to edit it yeah there is an error because gig update doesn't exist but you see how when I click it it turns into a text text area but right now it's a div so let's make this updating uh let's go to GTS and say const update mutation arguments is gig ID and title Handler check the identity now I identity unauthorized title is arguments title trim so you want to remove trailing whes space trailing new line everything if title doesn't exist title is required if title length more than 60 which it cannot be because we already have another check in input field max length then title cannot not be longer than 60 characters and then AWA context database patch so ID of the gig and then what we're going to patch is title and return gig although we don't need to return anything so that's it now if I go ahead wait for a moment I think we just need to wait for this to no for this to like finish okay now it's finished so if I say this if I refresh I think you see the title has this one two three in the database and it's saved here so if I do this it's going to if I as soon as I def Focus it's going to actually it's going to immediately as soon as I change it's going to update database so whatever I do it's going to update and now let's go back to the whole gig page and let's make offers editors so three offers so I save this it's in components offers editor let's copy this offers editor and let's go here and say like that so so we're going to put this next to this page so in this components not in general components but in these components because this will only be applied like used here offers editor. TSX let's delete this offers editor TSX it will not be a file like that it will be a folder offers editor/ index. PSX so now it's going to the import is going to look the same so if you have index DSX you can just you import as if it was just offers editor. TSX here so you can import a file index like that and this is my bed so it should be not a folder index TSX but file index TSX so if I go here and click file index. TSX index. TSX yeah here this is these are a bunch of imports interface offers editor props gig ID export con offers editor so we're going to extract this gig ID offers editor props con offers is use Query API offers get so we're going to create this so we want to get all of the offers for this uh gig by passing in the gig ID offers are basic standard premium offers and then D has title description everything if offers is undefined return loading offers okay so con so if if something is undefined like query is undefined it's still being loaded and if there is no offers this will be null not undefined so undefined means being loaded basic offer is offers. find offer and so for each offer you're going to check if offer. tier is basic and then it will be only one standard offer you do the same you find offer where offer tier is standard and same for premium then we want to return something so tabs default value basic so we will have three tabs and you can switch between those three tabs default value basic class name at 400 pixels wide tab list tabs list tabs trigger value basic you say basic so on the top on the header there will be basic standard premium so this one is basic has value basic standard value standard premium okay and then tabs content so value the first one is basic content editor so content editor this is a offer content editor so we will make this component gig ID is gig ID offer is basic offer tier is basic tabs content is so this one is standard same thing this is just going to show and edit standard uh tier and then premium same so we need to make this content editor and we need to make this offers so let's start with offers so uh let's go to a convex folder next to Gig TS say offers. TS so here export con get query we want to query all offers arguments gig ID we get gig ID uh and then Handler function offers a weight context so we want to query offers with index by gig ID and we pass in this gig ID and collect all of them and return offers let me import I press control space let me import this and let me import V so that's it now we need to go up and next to index DSX is in offers editor we need to say content. editor. TSX in content editor some imports that you can import later um content editor props offer question mark doc offers gig ID tier basic standard or premium okay let's just export all of it so let's say content editor export and then extract these props okay title use State string so offer question mark title or uh empty string because offer is not obligatory we can Al if it doesn't exist we can create it here description of the offer is offer description or empty string price offer price or $5 revisions offer revisions or one is default delivery days so two is default add offer use action so this will not be mutation or query this will be action so API offers add we will make this soon handle save so this is saving the offer when we edit it try await add offer okay so this is I think just this is for both saving and adding a new so try await offer so add offer and passing gig ID title description tier price delivery days revisions I had to because this is not the same name so I had to do it like this delivery days toast offer s saved successfully error let me keep this here so people can see like where what we got to console log error toast fail to save return so this is going to be some div uh so another div label title and then input field for title uh ID title placeholder title value title on change set title and then another div uh this is price ID price placeholder type number value price on change set price but we need to par Sy from this because this is going to be still string even though this is number type div label description input description placeholder value description on change div uh number of days uh for delivery input uh and then placeholder delivery days type number value delivery days on change set delivery days Pars in par the value div label HTML for revisions number of revisions input ID revisions placeholder revisions type number value on change everything is the same and then button save onclick handle save okay this is not necessary so on click handle save it will just uh say add offer uh let me see what this I think this add offer is like not just add but also like update if it already exists so we're going to send the gig ID and everything so I think let let's make this let's see what this looks like so in offers DS let's say const Ad is going to be action arguments gig ID title description tier Union so it's going to be between basic standard and premium price delivery days revisions Handler uh check identity offer we want to run query it's a bit different so internal offers get offer and pass in Gig ID and tier so we're going to make this internal uh query after uh okay so if there is no offer so we want to get this offer by gig ID and tier so each gig will have three offers and each offer will be either standard premium or basic if there is no offer uh stripe price is return action intern okay wait wait I think we need to now if there is no offer create a new offer so we we're going to um add the run this adrenal action that's going to create price and we're going to pass in price tier title okay then run mutation internal offers insert so we want to insert this offer if it doesn't exist gig ID title description tier price delivery days revisions stripe price ID so we need for each offer we will create an ID price ID in stripe return success else so if the offer does exist we want to update it so internal offers update gig ID title description price delivery days revisions offer ID run Su return success okay now let's make this insert internal mutation so this is internal mutation um the difference between internal mutation and mutation is this uh can this must be called by internal not not API offers update but internal offers update and uh this internal can only be run inside of that convex folder and not in your app so we're going to say arguments Pig ID title description tier uh that can be basic standard premium price delivery days revisions stripe ID and then Handler offer ID insert offers gig ID title and then description tier price deliver days revisions stripe price ID return offer ID okay and then update internal mutation args gig ID so this is for updating the offer title description price delivery days revisions offer ID patch so we want to so we're going to update the offer by patching it ID title description price delivery days revision get offer internal query arguments uh so this is for getting the offer so it's going to get gig ID and tier that can be any of these three and then Handler offer will be query offers with index by gig and tier so gig tier so it must be unique obviously and then return offer so that's it now let me go ahead and import this internal but I think it's this is wrong so it must be generated server no just a second so internal mutation from generated server and let me import internal query from generated server and then um internal this is weird let me import action from generated server and then this internal this internal must be imported internal from generated API UND generated API so I had some error and in this uh edit gig ID page DSX where I'm importing this offers editor it said like you couldn't find so I just deleted this this import and then went here and imported it again and now it works so let me go here uh this is our offers editor here we have basic standard premium and if I say title uh but this is going to throw an error so this should work we just don't have the stripe ID creation so here internal stripe ad Price so let's quickly make that so next to offers DS let's say stripe the s here we will say import all of this and import Stripe from stripe and we need to go ahead and npm install stripe okay then we will um export con add price internal action arguments tier will be Union between these three L literals price is number title is string Handler okay so stripe is new stripe so process and next stripe secret key we need to make this we don't have it yet API version is this one uh price await stripe prices create currency USD unit amount arc. price times 100 because this is to convert it to Dollars uh to convert it to cents because this must be in cents unit amount must be in cents so product data name and and then we make these square brackets arguments tier so it's going to be standard premium whatever Plus arguments title and then return price and save it now we need this uh next stripe secret key go to strive.com and go make sure its test mode is enabled go to developers API keys so copy this publishable key and in your n. local you need to have this next next strip public key that's going to be this one next strip secret key that's going to be reveal test key and copy it and web hooks secret so go to web hooks actually uh let's leave it empty for now so let's copy these two we need to save this and go to convex so we need to also paste this into settings and environment variables and add paste these two so our functions will be executed on convex so it must have these variables and now if I go to my website I say title basic shaving price uh I don't know let's say 10 description basic I just want to distinguish it number of days one and save uh offer saved successfully so if I go to my here data offers here there is one offer price revisions everything so if I go here and I hard refresh this page it should pull all of this data so yeah it should stay the same so it stay the same and now standard and premium I can also do this if I want so I think let's just and okay so let's if we go to stripe here to more and product catalog we're going to see that we have this new product that's $10 price basic shaving that I just created so this is the price ID it's right here price ID we're going to use this later now that we have all of this let's go to homepage and display all of the gigs that we created first we will go to a app dashboard and create a new file layout. TSX this is a reserved name first we will import navbar from underscore components navbar then interface dashboard layout props children uh because uh this page and everything inside of this route will be passed in as children to this layout as if you are wrapping uh the this page with this layout component same as context providers that we did in the beginning so children dashboard layout extract children from this type export default dashboard layout return main height full padding X zero but on two Xcel screens padding x 56 Navar and below that children so we want to have navbar on the top and below that the page so let's create this components navbar next to layout I'm going to add a new file say compon Anders or components navb bar. TSX so in the navbar we're going to say use client uh all of these Imports you can import later not now there is a bunch of them but later okay uh const navbar export default navbar categories use Query API categories get current user use Query API users get current user search parameters is use search parameters that must be imported from next SL navigation very important and use router from next navigation not next SL router so this search parameters is when you have a question mark search what so we have some parameters so for example if I if I'm filtering I'm going to have these parameters but we'll see later what what this is thej parameters in the URL so favorites search parameters get favorites so if it exists or not in the URL filter search parameters get filter and then use router from next / navigation categories is UN if categories is undefined return loading as I said undefined in use convex means it's still loading and these hooks cannot be after if okay on click inbox so there will be inbox so user will be pushed to SL inbox clear filters uh router push to so remove everything from the like whatever you have in the string in the URL then return a fragment two separators from UI components don't import them from radx UI import them from the UI components always these things never import anything from radic UI except there was only like one thing that I showed you okay Flex items so this is a one div second div search input so this is for search we're going to we're going to be able to search gigs then dialogue dialog trigger so this is filter uh toti provider text filter so when we click this dialog trigger it's going to open the dialogue content that I will show you later so filter icon from Lucid react and this is the dialog content so once we click this inside of this trigger it's going to open this content we're going to calculate the height maximum height to be full screen minus 200 pixels I think um well I'm I forgot why okay below that we're just going to Mark scroll area but let's return here up Scroll area oh yeah this is just a comment so ignore this so dialog close we're going to have uh this because it must be one one like HTML element and then button so when I click this button it's going to uh it's going to clear filters have waran ghost class name text red 500 disabled not filter clear filters okay categories. map category index so for each category we want to uh select I think this filter is going to let us select a category so uh I'm putting it into dialog close because as soon as we select a category it should close this like dialogue and it should push us to the URL to display this category so categor map for each we're going to pass in key when you have mapping some class names title is category name and then another div category do subcategories map and then mapping all of them and then list item key title is subcategory name subcategory subcategory so we're going to make this list item so whenever we click this we will go to that like we will enable that filter for that subcategory below that below dialogue we're going to say if current user exists make a fragment tool tip provider favorites so this is to enable favorites so button the button is from UI components not from radic UI as child variant if favorites variant secondary or ghost if fait is enabled size large class name so link so is path name this is the path name but also query is favorites so if favorites is enabled then query is nothing but or favorite is true so if favorite is enabled we click favorites we want to disable favorites so we'll see how this goes into URL with favorites true and then class name heart icon and then let's say inbox so tool tip provider will just let us hover over this whatever is inside and it will show this like tool tip okay so button message Circle um yeah so on click it's on click inbox it's going to push us to SL inbox to inbox okay so this button has on click uh to manage gigs so it's going to be seller current user username manage gigs switch to selling and then user button so this is going to be our whole nav bar but below that we also have if there is no current user we're going to save button varant default as child sign up button so if user is not signed up mode model after sign up I think we don't need this we're going to remove we're going to remove this and then also sign in button and that's it but I let me remove this and this because I used this to add user to the database but we are adding the user in a different way so that's it we just need a few of these so we're going to need um users get current users so let's go to users TS at the bottom we're going to say get current user Handler const identity is get user identity if there is no identity return null we're going to return user and so we're going to uh you don't you you don't need to write this so const user is AWA context database query users which with index by token and then unique so that's it let me just import query and that's it so first let's create this search input so here in the files I'm going to create a new file search input. DSX use client and then bunch of imports but we're going to have to install this like this okay then let's continue search input con router is used router const value set value use State uh to be empty string handle change react change event HTML input element set value to e Target value um so this is when we type in into search and then handle submit URL is Qs so Qs is our query string do stringify url url is going to be this slash and then query will be search value so whatever we write will be this query and then skip empty string true and Skip null true so it won't put query if this value is uh null or empty string as I understand and then router push to URL so we will just push to this so we will uh have this search query in the so for example question mark search equals uh hair whatever I think something like that okay so this is if you want to use the bounce value but uh you don't need to use it at all it doesn't matter what it is if you don't know uh div okay so this is icon input uh class in class name placeholder gigs unchange unchange value and then button um unchange handle submit variant secondary class name search button okay that's it we also need to install this though so let me go here and npm install this but now I see that we are not using this because this is using the bounce value so we don't need this we don't need this okay search input is created uh let me I mean I want to comment both of these maybe actually no I need to I need to have toty provider so let's create tooltip provider and then we're going to see what this looks like so next to navbar just tool TI provider TSX we want to import tool tip and all of this but but toty provider as base toty provider because this will component will have the same name toty provider props children string text so as you can see here in where we use toti provider we pass in like some children so that's going to be children uh export cons toty provider children text toty provider props Return base toty provider tool tip tool tip trigger Flex item Center as child children um so this is going to be like when we hover over this then we're going to display this tool tip content so it's going to be this text so text can be for example let me see what I put here so I say like text filter and then this is children when you hover over children we will have this toty provider so I think we can now see that if I comment this and I comment let me comment like the whole this list items and let me just make it a div and give it a key because it must have a key so I had an error because I didn't save my layout TSX here in the app naar and stuff so now we can see how what it looks like and I can go ahead and put some search and if I say search it's going to say search equals to this whatever I set to this is how we can put it into uh link but there is just a little bug in my web browser doesn't show but it should work for you if I click filter it's going to let me select a category uh and favorites we'll put favorit to true and this will push me to the in inbox now let's continue with this list item so let me uh delete this and uncomment this go here next to the na bar I'm going to say list item hsx let's start with some imports then interface list item props title and subcategory okay export con list item and then extract these props give it type list item props cons router is used router from next / navigation handle click so the these list items this is for selecting a subcategory so filtering by subcat category and the category URL query string string ify url url is slash query is going to be filter subcategory name and that's it just close it everything and then say skipped empty string true and Skip null true and then router push URL so you it will be um it will be like this this question mark filter equals and then whatever the It Whatever the category subcategories okay so return button so each of these are going to is going to be a button give it on click and then let's say um div show title and then close the div and that's it so let's save this but we don't have this low Dash so I need to copy that actually no this we are not using this so we can delete this we can delete CN we don't need navigation menu link and that's it now let's go back to this list item in your Navar and then import it like that and save now if I go here and I say filter I have all of these options so computer vision I say computer vision and then in my URL you're going to say filter equals computer vision and it's just that Opera browser is not showing the URL until you click but it should be fine and then clear filters that should clear filters so I can select any filter now we want to display a gigs on the homepage so let's go to components make a new file uh gig dcard SL index. TSX let's also add footer. TSX and overlay. TSX inside of index DSX let's say use client okay so a bunch of imports so we're going to need this date FNS so let's copy that and let's npm install date FNS okay uh I think I I'm not sure why this is wrong import I will fix this later and then this does doesn't exist and this doesn't exist so we will make all of that you don't need to worry about it now okay interface G hard props ID seller ID uh title description create that is favorite so we need all of this information to display the gig storage ID this is image storage ID it's optional okay offers offer yeah one offer uh real what is it reviews yeah we want to show R number of reviews this gig has so it's going to be a gig card that shows image title everything export con gig card extract all of this stuff all of these props give it this type and arrow function okay so you need to extract user ID from use out use out is from clerk nextjs seller is use Query API gig get seller ID is going to be seller ID as ID users we will make this function okay so you don't need this I forgot I forgot to delete it okay create a that label format distance to now create a that so it's going to be like two hours ago 3 hours ago two days ago add suix true I forgot what this suffix does we'll see const okay so we need mutation for favoriting and unfavor thing below so let's rename so we're going to extract mutate and pending from use API mutation we already did this a few times we need to pass in API gig favorite as mutation function and we need to rename mutate to favorite and pending to unfavorite for this mutation function and then do the same for unfavor thing so just pass in unfavorite and rename mutate to unfavorite and pending to unfavorite pending okay so then toggle favorite so when we click favorite or unfavorite okay so if is favorite we will unfavorite but if it's not favorite then we will favorite so unfavorite and pass in ID so ID is this ID of the gig so we're going to call this mutation if you don't understand how this works go back where we installed when we made this in the descriptions below use API mutation in the you have a time stamp okay and then else favorite and passing gig ID okay so if seller is undefined return gig car. skeleton so this will just be like a like a box skeleton box that we will create soon while this is being loaded uh okay so let's return link so this link when we click on this gig it's going to push us to the gig page so that's why it's link okay so is going to be SL seller question mark username so seller might be null that's the problem uh and then SL id id of the gig so username and then ID the gig okay so you don't need this I just forgot to delete it uh okay so the then div with all of these like this must be group border group is so when we hover something inside whatever has group we can attach like we can uh make attach some effect to to it and then another div overlay we're going to make this component convex image uh so this is going to show the image of the gig storage ID storage ID of the image and title below the image actions actually I think this title will just be like alt if the image is not shown okay so actions id id uh title title I think actions will be like delete or something I'm not sure we'll see okay so inside of actions you wrap uh button with actions and so this will be passed as children more horizontal is icon from Lucid react okay and then this is just class names below that footer So Below this div is favorite is his favorite title title owner label I hardcoded my name but um I think you can say seller. name or something like that create created at label created that label okay so yeah we want to display in the footer like create a two days ago created two days ago on click toggle favorite because this favorite will be inside of this footer the heart icon and then it's going to be either filled or not fill depending if the if this is favorite disabled favorite P pending or unfavorite bending so we're going to use this to disable the but the favorite button offer is offer reviews reviews seller seller okay and then let's define this gig card. skeleton is going to be a function it should be gig card skeleton return okay aspect ratio and then skeleton is from uh at UI components not from radx UI so that's it this is our gig card now let's uh go to Gig and create favorite and unfavorite functionality so let's go to gig. DS so first we will say favorite is equal to mutation pass in arguments that's going to be gigs Handler uh then check for the identity let me close this actually okay and then identity if not an authorized okay so get the gig by gig ID if there is no gig gig not found not board not found user ID is gig. seller ID existing favorite we need to check if this G is already favored by this user uh user favorites Square user favorites uh with index by user okay so we're going to have to change this but just let's finish this function first so uh buy gig you buy user gig and then say find a favorite so gig favorites is another function is another table and it has uh guy who favorited the gig and the gig ID so that's why we need to search that table and check if this user with this ID exists in that table so that means it's favorite okay and then unique it must be unique if existing favorite um gig already favored I saw this from uh this I saw this part from uh code with Antonio that's why when in his miror clone that's why I forgot to change a board so uh context database insert user okay so if it's favorited throw error but if it's not favorited then we insert a favorite so user ID and gig ID is gig. ID and return gig okay now let's do un favorite before we fix this because this is checking if the seller has faved but not if the currently logged in user is faved so that's my mistake we will fix it okay so let's do I'm fav is the same so I'm just going to go quickly because it's almost the same check identity uh get the gig check if the gig is not found and then user ID it's going to be different existing favorite query favorite so we need to find this existing favorite and then if there is no existing favorite favorite at gig not found or we can just say return you don't need to throw an error okay and then we just want to delete this entry into the of the the table where you have this user ID gig ID so if that entry is deleted then there is no favor and return gig so I think we can just say return we don't need to throw errors here or maybe you should just for debugging so I'm going to leave it here okay so let's go to the favorite function instead of this user ID seller ID let me delete this and let me paste all of this so user we need to check we need to get the currently logged in user from the database not the seller user so this is how we do it we did it a bunch of times and if user is now returned and we don't need this okay so user ID is user uh ID so let's so the currently logged in user is we're checking if this person has favorited the gig so let's go here delete this in un favorites and just get the current logged in user and check that's user ID if I save this we go back then you're not going to get the errors here and here anymore so I think we need to now go ahead and create this gig do get seller so in the gig. TS we're going to export con uh get seller and then we need ID of the seller so we're going to call this with the uh gig. seller ID and then we need to say Handler con seller is context database get arguments. ID so we're going to get the whole ID the whole user and then return the user so that's it this is get seller now let's go ahead and create this footer and overlay so footer is here so let's just before we start with footer let me actually go ahead and comment all of the other few because I want you to see what footer looks like so I'm going to go here comment convex image overlay and actions all of this and that's it so let's go to footer and let's start first some imports okay interface footer props is favorite Boolean title o owner label so the name of the owner created that label so 3 days ago on click uh we'll see what on click is I forgot disabled uh this is disabling favorite button offer reviews seller export con footer is favorite so just get all of these and then give it the this type and make Arrow function average review we need to calculate it type number so reviews length more than zero question mark So if it is more than zero then we're going to do this following reviews reduce I will show you what this does if you don't know so we need accumul accumulated value and review so every time we add up reviews numbers it's going to be saved into this so This is Gonna this is everything from the previous accumulation I will show you so we're going to say a a previous result plus review communication level so it's going it can be from 0 to five plus uh recommend to a friend plus Service as described or zero now sorry I think this is setting the initial value at zero so start from zero okay then divide all of this with review length times three or zero so if reviews length is more than zero do this if it's not if it's if there is no reviews then average review is going to be zero okay so what is this this is a uh reducer so you start from so you first add all of the reviews you add all of the numbers so you go ahead and first review you add communication level plus recommended to friend plus Service as described and then you go to the next review and you also to that result you also add the next review numbers and then you calculate you add everything and then you divide everything by reviews length times three because each review has three grades one two three grades so you need to divide to get an average review and you use reducer because it can uh have like this accumulated value from previous uh iterations then if average review percentage one is different from zero average review is parse float so basically if it's not a whole number then we need to parse float and give it like one decimal point okay so uh con handle click it's going to be event and we're doing this because we don't want to have like 15 decimal points I'm not sure how many decimal points this number if it's float is going to have okay so handle click uh react mouse event HTML button element mouse event and then stop propagation so because it's going to be a button inside of a button or inside of a link I think so we don't want to when we click favorite we don't want this to propagate to the outside link so it goes the link as well prevent default is going to prevent page reload I think or whatever the default behavior for that button is and then on click so we we got on click from this here so I think on click toggle favorite that's our on click function toggle favorite and then in the footer we can continue with return a new div and then uh we're going to show seller full name at the top and then we're going to calculate the width and show title below the seller name another div star this is for reviews and then show reviews length so this is the number of reviews and then average review so we're going to put it into brackets so if I save this I think it should work let me just see the error seller so I think uh we we will be able to see this I think just the problem is this can be null so let's go here and copy this if seller is undefined let's just say seller seller is null return um seller not found or something so let's let's say div seller not found and this must be in the same row so there should be no more errors and we should be able to see the gig here but first we need to we are not using this gig card anywhere so we need to go to dashboard and then page DSX and then remove this high and then comment this gig list uh uncomment this gig list and we don't have a gig list so let's return to finish our footer and then we will continue with the we will make a gig list list so next uh you don't need this I just forgot to delete it okay so then make this p and this is offer. price and this is going to be the lowest price the lowest offer so the basic offer from this amount of dollars and then another div or another p uh owner label created that label that's it okay button disable disabled so this is going to be favored button favoriting button on click handle click uh class name CN and import C n from Li utils and then give it this these classes so CN is going to let you dynamically show classes if a condition is satisfied so if disabled is true then you want to say cursor not allowed opacity 75 so these classes will always be on this button and but if disabled is true then also these classes will be added heart icon from Lucid react class name CN again uh withd height and is favorite and fill blue text blue so if is favorite if this is true then we also fill with blue and stuff so that's going to be our footer I think we need to just go back now and fix this uh this components gig list so let's copy this go to components make a new file gig list. DSX so in Gig list let's say use client some imports uh gig list props query it's going to be search favorit filter so this query I think we we will get this from URL I'm not sure I will see okay so gig list uh export this sare or extract query from this type and arrow function const gigs full gig type we will Define this we don't have this yet or undefined use Query API gigs get we don't have this file at all and then pass in some arguments search query search favorites query favorites and filter query filter so we will get gigs depending on these parameters from our URL so if we are searching for something then we will have this or if we are filtering for favorites or we are filtering for the uh what is it subcategories gigs with favorite gigs with set gigs with favorite use State full gig type array or undefined and set to undefined okay so uh filter for favorites if query favorites is true okay so use effect if query favorites is true so if we have if we are toggling favorites we have that in url const favorite gigs is gigs question mark filter okay so just for each gig get only gigs that are favorit because we are trying to show only only favorite gigs set gigs with favorite gigs with favorite gigs so we're just going to set the gigs so this is just I think this is just like whatever we need to set this based on filters and stuff so this is what we will display uh this is not just for favorite gigs but for like all gigs so I think I should have just say like gigs or something like that uh set gigs with favorite gigs yeah so if query favorite is true you only show favorite gigs but if it's not true then you show all gigs and so this should be like called U gigs to display or something okay so use effect we need we need to execute this every time query favorites changes or gigs changes if gigs is undefined is being loaded so return loading gigs okay so not gigs. length so if end query search this is a bit confusing so gigs. length so if gigs is not an empty array so if geks is oh wait wait wait wait wait so if gigs is empty this will be false but then this will be true because you invert so if geks is empty and qu query search return empty search so if there is nothing to show gigs is empty and favorites return empty favorites we will make these and here return at the by default you're going to return all of this and we have small screen medium screen large screen So based so on small screen we want to show just two columns of gigs on large screen four columns Etc gigs with favorit so this is this is display gigs not gigs with favorite so this is like whatever gigs we are displaying like whatever filter uh map we want to go gig card and then pass in all of everything we need in gig card so key ID seller ID title description all of this stuff and that's it this is it I think um let's just Define full gig type so we want to go to add types index okay so here we want to say export type full gig type that's going to be Doc gigs and so we want to extend with storage ID it's going to be optional ID storage or undefined favorited Boolean offer doc offers reviews review array and seller ID let me import this as well so it's like this now we can go back to the gig list so we need to make empty favorite okay so let's for now comment this out I want to show you what this looks like so let's instead of this let's return now whatever it's okay oh sorry no no no no no no I think like this and comment this and just return null and one last quick thing we need to do is this gigs gets so let's create in the convex folder let's go and find it real quick and make gigs. TS first we're going to do some imports then Con G query so here we need to get this G gig but also all of other like offer reviews and then attach it to that gig so so to get that full gig type that I described so arguments are going to be search optional so uh if we are searching for a particular gig then we're going to just get gigs that have that en title favorites so only then we're only only going to get gigs that user favorited or filter like subcategory so we're going to get just gigs in that subcategory but all of these are optional let's make a Handler function get identity title is argument search as string okay let gigs be empty array if title uh if there is a title so title is like we are just converting search so title is just search so we if there is a title there is a search then we're going to say gigs await context database query gigs with search index search title where title is equal to this where Field title uh it has this like title but this can this doesn't have to be full title it can be just a few letters and it's going to match all the gigs that have this in their title and then collect all of those gigs so this is searching searching by text okay else if there is no like searching then we want to get all gigs by uh and then with index by published H yeah we want to get all published gigs because we only want to display published gigs uh to the like buyer all of the publish gigs and then order the sending so I think this will put latest first and then collect all of them check if there is a filter so if there is a subcategory so somebody user selected subcategory then if filter is not undefined then filter is just arguments. filter so I'm not sure why I'm what am I even doing here yeah we are checking if it's if it's but we don't need to do this I think we can just use arguments. filter um cons subcategory we need to query subcategories by name so we need to find this subcategory that must be unique because each subcategory has a unique name filter gigs so gigs. filter and for each gig you're going to say gig do subcategory ID is equal to this subcategory ID so this will filter all gigs and only save gigs that have this subcategory ID so that are part of this subcategory and then gigs is equal filter gigs so you set gigs to be equal filter gigs so here we are checking if user used subcategory or user is searching by title and they can be both true at the same time okay gigs with favorite relation is equal to gigs we'll see what this is so if identity is different from null if somebody is logged in geks with favorite relation is equal to await promise all we want to resolve all promises that are going to happen inside of this body and those promises are going to be the following we want to map all gigs and then we want to for each gig we want to do something return something so we want to query user favorites with index so we want to check if there is if there is um entry in this table that has this user ID and this gig so that means that this user favorite this gig and then it must be unique and then we get this favorite so what is this favorite I'm not sure so it looks like you get this object when you call do then on unique or on this database so let's see what this does I'm just going to display favorite ah yeah yeah so when you when you have unique it's going to find this unique entry and then you can call then so this is that unique entry from database that object it has this so if you see the this uh object type gig user ID that's from schema okay and then in the favorite we want to return object so we want to spread gig so this will just spread the fields and then we're going to add some other fields favorit is equal to uh so so basically what this means is if this exists then this will be true because it's going to negate on to false so if this exists then so sorry if this exists then when you say question then you say this it's going to be false turn to false so then this will be false but if you say once more then this will be turned to true so if this exists this will be true if this doesn't exist you turn to true you turn to false so this will be false so if this is n this will be false okay below that uh we don't need this I just forgot to delete it so and all that promis is that we are resolving this I think returns a promise so that's why we are resolving a wait promise Sol I don't know if I should have put here a wait no yeah it's not a sync so we need to okay I think yeah this works uh gigs with images now we need to get images for each gig so a wait resolve all promises again and then gigs with favorites favorite relation although this should be gigs with favorite not gigs with favorite relation because this doesn't uh this returns promises and then promises get result so if promises get resolved then it's not a relation relation is just here where you return a bunch of promises so this should be better named gigs with favorites gigs with favorite okay so we want to map each gig con image we want to query gig media with this gig ID so we want to get all media with this gig ID and then get the first I think we want to only show the first image for Bridge gig when we are displaying it in on the homepage but when we enter the gig page then we want to collect all gig media seller we want to query user so we want to get the seller object as well so filter we want to filter we want to get I think I should have I could have done with index so with index where ID is ID is seller ID or I'm not sure if that's oh wait okay let's do it this way but I will show you a better way so you can just say uh get and then seller ID whatever it was the ID I'm I forgot how to like just gig. seller ID so you can say get gig. seller ID I think but there is an extra Clos bracket so you can do it this way or you can get all and then filter which is a slower way but let's do it I'm going to do it like this for now just to show you but this is a slower way and it must be unique okay there is no seller seller not found now get reviews so query reviews buy gig ID and collect all of them easy then find the offer because we need the price so query offers by gig ID and the first one the first one will be the basic the lowest one I think well you need to test this I I I forgot to test this but I think I think the first one will be the basic one okay now we need to return like all of this we need to put into a into an object so return the following we're going to spread the gig so all of the attributes will be spread then storage ID is image question mark storage ID so if image is exists so it's I think this will be uh storage ID or undefined and then seller reviews offer and return gigs with images so you see this what this object looks like if it has all of this like storage seller but the clicks this is a direct attribute of gig so these are gek attributes spread and then besides those spread gig attributes then you have other things that we added here so let me go ahead to my this link this page and just refresh and let me remove filter as well so now this should uh display the gig that we have so there ain't nothing displayed so I don't know why let's go ahead and check why we have some problem here gig list I think this must remain an error because I think I could I wasn't able to fix this but it worked so let's see this gig is not published that's why so we need to publish this gig so let's go manually to username create or man manage gigs and then we need to go to I think this gig ID so let's copy this gig ID oh no edit and then this gig ID so let me click on this publish button publish fail please make sure there are one image and three offers in the description so I think we have a description we have one two maybe we don't have enough offers so if I go here to offers only one exists so let's just whatever I don't even care right now just description it doesn't matter save so we should have two and then third premium just premium whatever price 25 description whatever save and now we have three offers and now if I click publish O Okay so this is offer save successfully yeah so published it's published so I think now if I go back to Local Host and there we go guys this exists the only problem is you don't see the image so we're going to fix that but this gig is listed the reason we don't see the image is we didn't even make it so we we just commented it out we need to make it now so you're going to have this error here in Gig list this is going to be underlined I'm not sure how to fix this but it the thing worked for me so if you know how to fix this tell me below but it's going to work with with this error as well so now let's go to gig card index DSX and let's uh uncomment this convex image and this doesn't exist so let's copy this and create it but first let's uncomment it from here as well so I'm going to just move this down here and let me copy this again so let's go to outside of the app to components and say convex image. TSX so in convex image TSX let's start with some a few Imports then props storage ID question mark so it's optional and title string export const convex image storage ID title convex image props const com image URL is used query API gig media get image get media URL so we're going to make this and we need to pass in storage ID so storage ID is ID storage so this is going to convert storage ID and take storage ID and return URL of the image return div aspect video relative so this is 19 uh 69 and then image source so image URL or this image now you can go to my GitHub and copy this link or you can put whatever link or you don't need this maybe then alt will be title fill so uh this either has to have width or height if you are importing from next SL image or fill so it fills the outer container and object cover that that's important that must if remove this and see what happens now let's go to G media gig media and get media URL so let's go to Gig media export con get media URL that's going to be a query argument storage ID it's going to be V optional V ID storage Handler if there is no storage ID return null return await context storage get URL and then pass in storage ID and that's it so if I go and refresh as you can see we have this working now which showing the image that we have let's go so next in the gig card index Okay g card index DSX we we're going to uncommon this overlay and let me find it down below here I want to move this below overlay and I want to just go here into overlay we already have it and start coding this is the absolute shortest component so export con overlay return div one div itself closing class name opacity group hover opacity so let me save this and see what happens so if we hover group we're going to change some opacities and stuff so if I hover this actually nothing seems to happen so uh here where I have the overlay outside component has this group so when we hover this outside component onent because it has group then this will activate inside of overlay so group hover opacity 30 but that's how it's supposed to but I don't think so I don't I'm not sure why colors are not changing but I want to leave it like this so if you want to uh you know how this works now if you if you want to try test changing something you can try but I like it right as it is right now so let's continue with actions so let me go ahead here and I'm going to uncomment actions actions will let us copy the link rename or delete the gig so let me go ahead and import actions and we already have one actions but we're going to make this is different so this one goes to components actions so uh outside of app components actions. TSX in actions we're going to say use client a bunch of imports that you can import later dat res you program action props children side so let's me go back uh when we where we have this actions you see that we are passing in some children these are children because they are wrapped then we have ID title side whatever so side is going to be drop down menu content props side uh side offset ID title this is optional and this is optional so here we don't have side offset I think we just have side okay export const actions children side side offsite ID title give it the type and then narrow function okay const on open use rename model we don't have this yet we will name it but it will export this on open so this is the model for renaming it's like a dialogue that asks you are you sure you want to rename and stuff so we're going to use our API mutation and pass in a API gig remove I'm pretty sure we already have this if we if I didn't show this in video just go to my GitHub page and copy it but we I'm sure we did this already and then export mutate and pending and then use API mutation so this is for removing on copy link so we we will have an option to copy the link of the gig so Navigator clipboard clipboard I think this is the global object so you just have it or did I import it from somewhere I'm not sure I think not clipboard write text so we want to write the following text do so btics dollar sign window location origin SL gig SL ID so that's going to be the link to this gig oh sorry so I think this will be like Local Host like the full link we'll test it okay and then just to success link copy is a notification or if there is an error fail to copy link on delete mutate ID so mutate is our as you remember remove uh mutation ID is ID gig of the ID gig gig ID and then toast gig deleted this is from uh mirror clone from callit Antonio I saw this this file I learned this from him so fail to delete gig return drop down menu so we're going to Now display all of this in the drop down menu uh drop down menu trigger as child we're going to pass in children so here actions we have this button passing as children so more horizontal is um this is um icon from Lucid react so we pass in this children so when we click those children that button then we're going to open the drop down menu drop down menu content on click event any this should be like HTML button event something like that but I I didn't make I didn't figure it out for some reason but you should figure it out what was the event copy to CH GPT maybe okay so we want to stop propagation because we're going to have I think multiple like buttons inside of buttons so with when we click this content we don't want to like this to also activate the outer wrapping buttons side side side offset class name uh drop down menu item on click on copy link and then class name link icon from Lucid react copy board link or this should be copy copy copy giglink drop down menu item onclick onop and then class name pencil rename so this is for renaming so this onopen is to open rename model that we will create confirm model uh what is this delete ah okay yeah so this is for deleting so I think we don't have this okay so are you sure you want to delete disabled pending so while while deleting this will be disabl on confirm on delete and pass in the button the button will have variant ghost some class names and trash to icon from Lucid react and delete so this is for deleting now I think this is it let's see we don't have this store username model so let's copy both of this and do we have confirm model we do have it so I'm pretty sure we already made this but if we didn't just go to my GitHub but we did make it so now let's go uh outside of app like let's click somewhere on the outside and make a new file use uh rename model. PSX so it's going to be in store username model here we will see say import create from zo stand but we need to install this so npm install zo this is a like a memory internal memory management Global State Management okay con default values ID is empty title is empty interface I rename model so it just can be rename model props is open buan initial values type of default values so this is the type default values it's ID and ID string title strings so initial values will have the same type on open it's going to be a function ID string title string it's what it what it gets and returns void on close returns void we'll check this once more so in app let's go to dashboard components gig list no sorry to components and actions TSX so here uh username model we are using it here so on open we are extracting on open and then we are passing in ID and title so here we have on open and pass in ID and title so let's define this export const username model create so this is create from zand and we need to give it this interface and then we want to set and pass in this and then object is open false on open ID title set so when we call this we're going to pass in ID and title as I showed you what that we are passing this and then we want to set is open to True initial values ID en title on close we don't pass anything we set is open to false initial values default values so default values are empty strings and then we want to set initial values to default values so uh not not then there is no then so just set initial values to default values but on open uh we want to set initial values to ID and title that we pass in so this is a classic Zoo stand uh create object this is how you define like Global state that you can access from anywhere so if I now go back so if I hover and I don't I there should be an icon on the uh top right but if I click on the top right it's going to open this so copy board link if I copy it copied link I can paste it here it's the whole link okay and then I can go ahead and rename so nothing happens when I click rename it seems so we'll fix this and I don't want to delete this one but it's going to we're going to check it later but also favoriting works so if I click favorite it's favorite that I can click un favorite and if I toggle favorites nothing is shown but if I click favorite and toggle favorites this is shown and if I unfavorite it it won't be shown let me see if my search works so haircut but if I start searching for something else search nothing but haircut search it works so the problem here is there is this button but we don't see this icon more horizontal and that's because text we have text white if I say text black we have white on white background it's going to be black but also I think I want to make this not opacity zero but opacity 25 so I can see a little bit of this when it's not hovered maybe do as you please now let's make empty filters and the empty search so for example if I search something and there is nothing I want to display like some better UI here so go to Gig list inside of uh components dashboard and down below let's remove this null and say empty search and let's uncommon this and remove remove this null empty favorites save that and uncomment empty search and empty favorites so uh this is going to be so inside of components folder make empty favorites. TSX and empty search. TSX and then let's start with empty favorites so import image from next image and then empty favorites export con empty favorites and return uh make a leave image source slmt favorites SVG this is image that we will create so let's copy this and let's go to public now God knows where public is and then create empty image empty favorites SVG so that's it we can close this for now let's continue with height 340 340 and then title below low H2 no favorite favorite gigs and then uh paragraph try favoriting a gig so import image from next image export con empty search and this is a just a div and then image it's going to be the same we need empty search SVG let's copy that alt empty with height title no results found paragraph try searching for something else so that's it now let's just create these two files so in public folder let's create empty search SG and now let's go to my GitHub in the description below you're going to say you're going to click here public and you're going to click to empty empty favorites and you can just I think go somewhere here how do I copy SVG I think we need to show like edit this file okay let's just click download this and then empty inbox and then I'm going to download empty inbox and I'm going to also download empty search download all of them and just put them into favorites so I will go here I'm going to drag this into favorites replace then I'm going to go to the next one into into public and the next one I'm going to also replace so that should be it so if I refresh this we need to refresh the image is shown let's go so now I'm going to go here and delete this search from the URL and I'm going to go ahead and enable favorites and there is no favorites and one little mistake we made so if I turn on uh favorites and there is nothing favorite nothing is shown not our our empty stream screen is not shown that's because we are not checking for gigs. length because gigs do exist uh it's it's going to be like that one gig it's going to remain there but we are going to check for gigs with favorite so here we are checking if query favorite is true then we update like uh gigs with favorite so we need to check if gigs with favorite uh length exists so if this length exists and then or if it doesn't exist and then favorites is true then we want to display empty State now if you want you can also make an empty state for uh these like subcategories I didn't have time to do it but if you want you can do it yourself now when I click this gig I want to make it uh I want to make this page gig page so this page is username gig ID so let's go to our code and in the app I'm going to say username in square brackets slash gig ID but it also must be in square brackets gig ID like that and/ page. DSX let's start with use client a bunch of imports that you can import later uh page props parameters username string KY ID so these are URL parameters so if you go to the page this is going to be the first parameter this is the second and you will just get this you don't need to pass this anywhere you can you can just extract it here and you will get this from because it's in the URL okay so let's make uh export default gig page const gig use query API gig get and pass in the gig ID so this is going to be string I think we could have just done this but I think okay let's do it this way so we need to cast it so this one I forgot to delete so you don't need this uh category and subcategory okay let's get that API G get category and subcategory did we make ah we didn't make this okay and then passing gig ID just cast it as this type offers so API offers get gig ID reviews get reviews get by gig and gig ID and then reviews full I think this is full reviews type let's see what this is get full by gig so and passing gig ID so I think we will we'll see what this is when we make it okay so if gig is undefined or reviews is undefined or any of these reviews full category anything is undefined that means it's still being loaded so you're going to return loading you can maybe return even prettier screen but for now let's just type loading if any of this is now so gig doesn't exist categories doesn't exist offers don't exist not found if gig published is false this gig is not published const edit URL so so the owner of the gig uh it will have a button to edit the gig if the owner is viewing their own gig and when they click this button we're going to push them to/ seller username manage gigs edit gig ID okay return div just uh some div for displaying the page okay so first thing this is we're going to show something inside of this gig that's going to be headed so we're going to spread category and subcategory in header and edit URL and owner ID gig seller. ID so I forgot oh yeah I think this is just like this is just going to show like category subcategory we'll see what this header shows okay then title of the gig then we want to make a seller box so we want to show like who the seller is so we're going to pass in seller reviews so we want to make a short small box like this guy is from this country speaks these languages about seller box small box then show images of the gig so we want to say images is gig images title and allow delete so allow delete is false in this case because this is not edit page we will only allow delete but I think we made these images I think we made it yeah okay this don't need this if you want about this gig if you want to say this but I decided not to go with it so this is the description we already have it editable initial content and gig ID I think we have description yeah we made it okay so below that we're going to make some divs and that's going to be info so what is info I forgot oh this is uh info is a icon from Lucid react and delivery preferences is the title and then please please communicate any preferences so this is just a box that shows this information then we're going to say seller details so this is similar to seller but this is uh on the top less details this is more details seller gig seller reviews we're going to pass last fulfillment time languages reviews reviews show reviews okay so add review gig ID seller ID then we want to show offers offers seller ID edit URL so this will be on the side so I think this has Flex Flex call so this will be on the side besides all of this now let's go to Gig and get category and subcategory so let's go to Gig TS export con get category and subcategory arguments gig ID uh let's say Handler so we're going to get the gig by gig ID if there is no gig gig not found subcategory will be await context database get gig subcategory ID so get the subcategory there is no subcategory subcategory not found category get the category by this ID from subcategory if category not found say not found return category category name subcategory subcategory name so that should be it just save it and go back to to the page TSX that we were so let's now make this reviews so let's go to convex folder and let's make reviews. TS so in reviews we're going to import these export cons get by gig arguments Handler okay cons reviews we're going to query reviews Within by gig ID and collect all of them return reviews okay so this is getting reviews by gig ID now let's get full by gig so I think those are going to be full reviews type we'll see argument gig ID Handler first get reviews query reviews by gig ID we already did the same reviews full type await promise all so we need to resolve all promises so then we will say reviews map a sync so for each review we're going to do the following let's make some space gig is going to be query gigs by gig ID although I'm not sure why I'm doing it like this I you can delete all of this and just say do get and gigid like this it's going to get the same but I'm filtering for some reason this is slower and worse okay so if there is no G gig not found image so query gig media by gig ID and first image if there is no image image not found so we want to display image of the gig at each review image URL is contact storage get URL and pass in storage ID then image Ur if your image URL not found next let's get offers so query offers by gig ID collect all if offer is not found image with URL so we're going to spread image and URL so this is image with URL let me see the type so you have all of the uh image attributes spread and then URL get author country so query users by ID unique so again just do this get this if author not found country is query countries by user ID unique country note found return review spread review gig image image with URL offers author author spread author country so basically what this does is you have it basically makes it same as author but just with another country field and we need to return uh reviews full time Ty so in the username gig page TSX we don't need these things that we are not using so let me delete this delete portfolio and now I'm going to make U another folder underscore components components like this and so I'm going to have to make header so header. TSX what else are we going to need offers and sellers so let's make seller first next to header seller. TSX but header is going to be a bit offers will be a bit different so we're going to make a folder offers and inside index TSX so let's say offers slash index. DSX so this will have the same import path as if this was just file offers. DSX but we want to be able to add some more files here inside of offers to organize it better so so what we need inside the offers folder is content. TSX and in the components we also need seller D details. DSX now let's start with header for example I'm going to start with a few Imports so interface header props category string subcategory string edit URL string owner ID string and then let's extract all of those give it the type Uh current user is use uh use Query API users get current user so we want to just get the current user currently logged in user uh and then router use router this is from next SL navigation very important not from next router handle subcategory click you so you want to then uh push wait let's see what we want to do so when we click subcategory we want to query string stringify URL to be slash query filter subcategory so we want to add this filter to the URL and we want to skip empty uh string true skip null true and router push URL so when we this is going to be so uh this this is gig page gig page will have category and subcategory of that gig on the top just to show it for information but if the user clicks that subcategory we want to load all G gigs you want to push them to the page that loads all gigs of that subcategory let's see what we return div with a bunch of class names link SL so this is for homepage then we want to put a slash then category name then another slash and then subcategory name but on click we're going to handle subcategory click and then subcategory name so handle subcategory click okay below that I don't know why this is R okay so if current user exists or actually if current user ID is equal to owner ID of this gig then you want to show the button to edit this gig so button link edit URL and just say edit gig so let me save this now let's go back uh I'm going to actually just comment out all of this so we can see what this looks like so we don't need seller we don't need um any of this stuff and we don't need offers so let's see now now this is what our gig page currently looks like it's a complete monstrosity for some reason I think we don't have layout the X so but here we can see that we can click homepage we can click or we if we click like this graphic design is going to load all gigs that have graphic design filter and then edit gig it will push us to and then we have title and everything so this is editing page now let's fix this layout so it not it's not like this so let's go here in username folder let's make uh a new file layout. TSX let me close this and we are going to import navbar from do do dashboard components navbar interface user gig layout props children react node so and then export default dashboard layout oh it should be well you can call it dashboard layout or user gig layout whatever okay so we're going to extract children from this these props return div navbar at the top and then Main and then padding zero small screens padding six medium large screens big padding and then just show children if I save this I go ahead and refresh as you can see the layout is a lot better now this image is ugly as hell but we can fix all of that this is a description that we are showing delivery preference es so it's starting to get shape there is also nav bar at the top now let's go to page TSX of uh gig page gig ID so let's do this seller now so let's uncomment that and let's uncomment seller so let's go here in components seller TSX so let's do some imports interface seller props seller reviews array okay and then export con seller seller reviews seller props const average review reviews reduce so we are calculating the average review the same way let me just uh reveal the full code and then I will explain so we're going to use reduce reduce allows us to go for each review not only do we add communication level score all these three scores but we can also add it to all previous scores so we can calculate like add up every score of every review of everything and then this so it starts from zero and then every time you get so you just add everything up and divide by reviews length now this is a bit suspicious because I think it should be reviews length by three because each review has three so we'll we'll see we'll see if it's get if it gets like a uh weird number then it's it's divide by reviews length times three okay so let's say some div this is link okay so when we click this is going to show user Avatar user profile image when we click it we want to go to seller user username this Avatar is from uh add components UI like UI components not the radx UI uh that's important so avatar from comp you components UI Avatar so I'm going to display profile image URL or this link GitHub com/ Shad CN PNG if this doesn't exist Avatar foldback uh seller username character at zero so the first character of the seller username if this image is not like able to display okay then let's make another div with 300 F pixels and then another div link seller username so we want to link when the user clicks here we want to link the same link seller username and that's going to be seller full name so when we click on full name we also want to link and then seller custom tag now custom tag is like top rated seller for example or new seller or something like that those are going to be custom tags okay below that let's uh do class name so to divs Star uh this is to show reviews so we're going to say reviews length so this is the number of reviews and then average review or zero so we're going to put that in Brackets so that's it it now it should but I think if we get a weird number like this average review should be divided maybe like this times three and then put it in Brackets because each review has three of these but let's let's do it like this for now okay so this is it guys let me close okay so basically if I close this um we see the user image this is the placeholder image because I don't have the profile URL image and then there is zero reviews so this is that part now if we go back and scroll down we will come across seller details so let me just now show seller details and we want to uncomment seller details here so this is going to be more details it's going to be similar but more details so let's go to seller details so let's continue some imports that you can import later so then we are going to const format oh my God why am I doing it like this you should just import format from dat FNS okay but this also works I think uh okay uh interface seller props seller user with count country type I think we're going to make this uh like type reviews docs doc reviews last fulfillment time number or undefined language doc languages this is we Define this in our schema export con seller details export extract all of these give it seller props const router is used router from next SL navigation okay and then average review the same way we calculated every time I so add all of the reviews of each review this is a reducer and the divide I don't want to explain this third time so I don't need to waste your time join date format new date seller creation okay so we need to find the date at which the user joined and we're going to display it as month month month so Feb 23 for example that's how we do it time ago undefined last if last fulfillment time is different from undefined then we will format distance to now and new date last time and so we're just going to this is going to be like 3 days ago two hours ago Okay add suix true I'm not sure what the suix is you can try deleting it uh languages string languages. map languages language. language so this is like language name so language. language name if you want to name this language name but this is correspond this corresponds to this okay join join languages with like comma join the whole array handle contact click uh and then you want to push to inbox and that seller username so you want to start a conversation with this seller okay and then uh we want to make a div div link seller username show Avatar so image of the user this is the same thing we just uh send to seller username okay below that link to seller full name it also links to the user profile then we want to say seller title okay it's like a PHP developer or something like that and then let's make some gigs star icon from Lucid react font semi bold uh reviews so length of reviews so for example three reviews and then we want to open brackets underline and you want to show average reviews or zero if this number is weird as it might be then you want to if it's incorrectly uh calculated I think you need to do this so divise divide all of this with three but let me remove this because we don't need it let's add this div and then below that let's say seller custom tag so for example this can be like new seller and then we want to add a button uh the variant outline on click handle contact click and contact me so this will push to uh inbox below that add a few divs so three divs one in each other form seller country oh from from the country okay another div below joined join date time ago if is different from undefined and then display display whatever we have here so we're going to have last delivery time ago and then languages length is if it's more than zero then display div languages languages string and then separator and then we want to display seller doab so that's going to be our seller page we are only missing this type so let's quickly go to types now let's finish this file because we don't want to return here every so often so messages message with user type this is the first type we will Define it's doc messages and user doc users then gig with image type doc gigs and image doc gig media array then user with country type doc users and Country doc countries and then review full type so Doc review reviews and author user with country Type image image with URL type so we are using these types and then offers doc offers array and then gig and that's it and then export categories full type so doc type got doc categories and then end subcategories so that's it those are all the types and now that we defined all of that we are able to see this from Hungary join 20 March uh 24th if I go ahead and say contact me it's going to push me to inbox but I don't have this I don't have this yet so let's now continue with this gig page let's do offers so go to username gig page TSX and uncomment this offers so let's go down down and do this and now we are going to go here uh offers index TSX that's the next one so we want to do some imports interface offers props offers uh seller ID edit URL and then off extract all of those return whatever this is some div offer if offers if offers exist then we want to show tabs default value is first offers so we want to just select the first like basic offer and show it as default class name with 400 on small devices uh sticky means as we scroll down this will stay on this position on the of the screen it won't be like scrolled over so it will stay on the top four you will see T list offers map so for each offer we're going to return tab tabs trigger so tab trigger will be the button for the offer so we need to pass in key because we are mapping value will be offer ID offer tier so basic standard premium and tabs trigger so what we have three buttons basic standard premium and when we click one of them it's going to show the content for that offer so below that let's map offers again and return tabs content passing key value offer ID so for each offer we are making tabs content close tabs content okay and then content this we need to make this we didn't make this yet we will just pass in offer seller ID edit URL and that's it now before we can show these offers we need to go ahead and edit this content file let's start with import offer props seller and edit URL extract all of those props okay so we have order now this is a button so we're going to say API stripe pay router from a use router from next / navigation current user is going to be um get current user seller will be API users get by ID so seller ID if any of these is undefined it means it's still loading then seller if a seller is null return not found um a handle order now so you're going to try const URL is await order now so this is a mutation that's going to take price side D offer strip price ID and title of the offer and seller ID and it's going to return URL so we're going to make this if there is no URL stripe session error and then router push URL catch error any I don't think we should put any but I I don't know how to do it without I haven't spent too much time so tell me in the comments if you know uh toast error error message handle send message router push inbox okay so this is just like a contact user send message whatever the button just push to inbox chat revision text offer revisions is equal to one so one revision or 0 to three uh revisions return div uh offer description and then below that offer title and offer price and dollar sign below description we're going to make clock icon from Lucid react and then days delivery so offer. days delivery days delivery three days delivary okay then div uh refresh CCV I think this is icon as well and then um offer revisions revision text so three revisions for example okay if current user ID is equal to seller ID then you want to have a button on click handle order now okay so ahuh so if the current user ID is different from seller ID then you want to be able to order order now and button send message so if it's not the seller reviewing their own gig so if it is seller reviewing their own gig then you want to show a button that says edit and points to this link edit URL and let's save this now because I want to show you what is look what this looks like let me comment this let me comment this now let's see what else we need to comment actually no I think it will be too much struggle so let's just create this so users get so let me go to users so here export con get query arguments ID VI ID users Handler uh user is going to be await context database get ARX ID and then user so just get the user by ID and let's just uh create this stripe pay so let's go ahead in the convex folder create create stripe. TS I think it already exists yeah so go here and we're going to make pay so here we're going to say pay action import this action from generated server args price ID title seller ID Handler const stripe is new stripe process and uh next stripe secret key we already have this so we're going to pass in API version so just to create this stripe client domain it's going to be process and uh next public hosting URL I'm not sure if we have this so let's go here next public hosting we don't have it so we're going to save this and that's going to be like that and let me copy my domain but it's just going to be here and we're also going to have to copy this into convex um variables in convex we will go to settings and envir environment variables are the new one like that save so we're going to change this you're going to change this when you deploy it then we're going to say price is a weit strip price PR is retrieve arguments price ID so we're going to retrieve this price price do unit amount is now if it's now ret stripe price doesn't have unit amount okay uh stripe account ID so this price is we def we when we create an offer we create this price if you remember in our stripe so we need to uh retrieve it okay so stripe account ID will be string or now await context run query internal users C stripe account ID from that user so we're going to use this uh using connected accounts so please go ahead and uh just look for stripe connect or stripe connected accounts and read this documentation because and read this because if you this will allow you to have your stripe account and then to create a Sub sub account for each of your sellers in on your platform but you should read this and know understand how it works especially if you want to change something maybe you going to have some other idea so please read this but looks like our stuff already works here so we have standard premium you see what it means for this to be sticky so as I scroll it's going to stick on top and this works so let's continue stripe account ID of that there is sub account ID of the connected account you're going to run this query to get account and pass in this these attributes props and then stripe account ID if it's null throw error con session stripe. response and then stripe checkout session that's the type await stripe check out session create okay and then say mode payment line items it's going to be this price data currency USD uh product data name arguments. title unit amount price. unit amount quantity one so I think we are creating like this this is how you create stripe like order payment in 10 data application fee amount price unit amount times 0.10 so if you want to take 10% which is actually maybe even too high if you want to take 10 or 5% of each purchase of gig in your uh on your page platform then you say it here so if you want to take 5% then it's time 0.05 okay so but for this you need to have like connected accounts working which I will show you how to set up but also like it's you need to understand how it works from documentation success URL after the order is successful you return to the domain for example and cancel URL also return to domain but you can say domain slash cancel and then show some message I don't know okay so after this in the creating we need to also say stripe account stripe account ID so this is is the ID of this connected stripe account and then return session URL so this session URL will be like a URL that we will push User it's going to be like that stripe checkout session like a stripe checkout page so let's go ahead and into users let's first import this internal it's from generated server API so users get stripe account ID so let's go to users users. TS so here we want to um say export con get stripe account internal query because we don't want this to be exposed to our client just inside of this convex folder with other like convex functions arguments is user ID Handler uh we want to say just get user by user ID if user is null user not found return user. stripe account ID so let's import this like that and that's it let's go back and save this as well so right now if I go ahead and Save St say standard but I'm editing so let's go to a different account where I can purchase so let me sign out so now I logged in register with a different account and I'm going to say order now okay I that's an error I think if I try changing this yeah we have some error stripe account not found yeah so in the convex database we don't have stripe account ID here so I logged back again into this account that's owner of this gig and what I have to do is uh I this account should have connected stripe account so we can do payments so I think we should make make it so that even like if this user doesn't have a connected stripe account he cannot publish gigs but let's first make connecting functionality let's go to nav navbar in dashboard underscore components and just add this after switch to selling add this uh connect stripe so then create connect D stripe TSX in the same components folder so we're going to start with use client and some imports in Connect stripe TSX and then connect stripe export default connect stripe router use router from next / navigation user ID set user ID to use state ID users create stripe that's going to be action use action so you want to use action instead of mutations or queries when you need to call it external apis but if you don't need to then don't use actions it's better to use queries and mutations API users create stripe we're going to make this user ID is undefined return null return div in the same row and then button on click it's going to be a syn synchronous const URL is await create stripe so we will call the backend API to create stripe this will return URL for us to register to stripe to connect our account to stripe and then router push URL so this will go to stripe.com SLC create account whatever and then close this button and say connect to connect stripe so let me save this and I'm going to go here and import this and now we need to go ahead and say users create stripe so let's go to users TS so here we're going to say create stripe it's going to be action arguments user ID Handler check identity if there is no identity called create stripe not store user and then con stripe is new stripe process and the next stripe key and API okay account ID is stripe or now so it's going to be string or null and await context run query internal users get stripe account ID we already have it here so we just need to import this at the end passing user ID okay if account ID doesn't exist const account stripe accounts create type standard read about this in the docu connect stripe connect documentation account ID account. ID and then context run mutation internal user set stripe account ID and pass in user ID stripe account ID is account ID account link await stripe account links create account ID refresh URL process and next public hosting URL return URL next public hosting URL SL stripe account setup complete we need to save the stripe account ID of this user that successfully created stripe account and then arguments user ID here type so we need to save this ID in the database okay account on onboarding and return account link URL so we're going to push the user to this URL let me import action let me import Stripe from stripe and let me import internal and next public hosting okay so this must be process and next public hosting URL and we need to create this one okay so below this in the user just say internal mutation set stripe account ID um that's going to be user ID stripe account ID Handler user is await database get so just get the user by user ID and then user not found context database patch arcs user ID stripe account ID is going to be ARS stripe account ID and that's it so let me import this and that should be it everything should work we need to make a few changes in Connect stripe so let's delete this we don't need user ID at all uh API create stripe and then here we will not pass anything as arguments now in users TS uh we need to make arguments empty object so create stripe make arguments empty object and what else I changed is we need to um here get user so run query API users get current user that's how and then copy this user and user ID will be user. ID and so also we want to say if uh not user if user is null just return for now so we don't need this now and and then copy this instead of arguments user ID we say this so that should be it let's say actually here as well okay that should be it and now it's telling me that this URL can be null so I'm going to say if a URL is null we just want to return so make sure in nav bar you have this connect stripe imported and if I go ahead and click connect stripe it's messed up we will fix styling let me see just if it works and I am successfully getting redirected and now you need to like create your account everything so you can log in with your existing stripe account but let me return back so now we need to create this URL stripe account setup complete and then uh ID of something let's copy this stripe account setup complete so inside of app let's make a new file stripe account setup complete slash in square brackets user id/ page. TSX here we are going to say use client and import and then we're going to say props params user ID that's from URL and then then stripe account set up complete extract params give it type uh and then start with update is use action API stripe set stripe account setup complete we're going to make this router use router from next SL navigation use effect uh set stripe I my God so that's going to be async and then Arrow function try a wait update and pass in user ID and then push back to after this is finished push back to homepage catch error and then toast error error saving your stripe payment processing and push back and then call this set stripe account setup complete and then this use effect will update when update changes param user ID or router return div stripe account setup complete this page will redirect shortly and loading so that's it we are going to just uh we're going to have to make this I'm just not sure what this even is so let me comment this out I think this is useless so let's go to stripe. DS so set stripe account setup complete it's going to be action arguments user ID Handler const stripe create a new stripe a object client API version const user await context R query API users get and then pass in user ID get the user so if there is no user user not found user stripe account ID so there is doesn't exist stripe account not found uh account is going to be equal to await stripe accounts retrieve user stripe account ID and then account uh charges enabled we're going to run mutation internal users update stripe setup and pass in user ID and stripe account setup complete so update stripe setup I have no no idea if we got this let's see now we don't have okay so we're going to make it and then else throw error so let's go ahead and import this API and then we need to go to users and update stripe setup in users DS we're going to say update stripe setup internal mutation and then stripe account setup complete bullan and ID those are arguments Handler function context database patch arguments ID stripe account setup complete argument stripe account setup complete now let's go here connect stripe let me go ahead and fill all of this information so I went through everything and now well let's see what happens so let me go here and looks like I have stripe account ID right here so that's it stripe account setup true so this should work now if I go and log in into the other account I should be able to purchase I just logged in into the different account and let me go ahead and order now and we are getting stripe checkout and I'm going to fill it with this test data so this is data if you are in test mode this is stripe test data so 424242 424 so whatever and then pay and that's it I paid the user now one important thing is I didn't really have time to do anything else with this so the way this works now is you it's based on trust between user and the seller so seller G gives something and then user pays them or orders in advance so right now I'm not tracking uh like the payments in my database because I don't have I didn't have time to do it but you can just go to my YouTube and set up and development video that I will show in the description below it will show you half of it is about stripe so it will show you how to set up like how to track payments with stripe web hooks so you need to make maybe some web hooks on stripe so track payments and then some apis in your website but also this works as well so you don't need to make it like until later because the website will work now let's fix this messed up styling so go to connect stripe button and just remove all of these uh classes and say button variant to be open this and secondary connect stripe we don't want to show this if the stripe is connected so here uh in navbar we want to say if not current user do stripe account setup complete and display this and then close it so if it's false this is so if it's setup this will not be displayed but on this account it's not set up so let me go to the other account where I set it up so here here there is no that button because my stripe is set up so now if I go to my gig and I click user we go to user profile but it's not found so let's go to our code and here where we have Dash no username and let's just click and say page. TSX so here we're going to start with some imports that you can import later interface seller page props parameters username gig ID now this is a bit weird because we don't have gig ID so what I was doing here I have no idea uh okay so params uh and then seller page props I I will fix this I think this is like not not necessary okay Arrow function export the page seller use Query get user by username and then pass in username skills query API skills get by user pass in the usern name gigs squarey API gigs get by seller name pass in seller name I just forgot to delete this so don't you don't need this and then we want to get reviews get by seller name and and then uh pass in seller username seller so if any of these is undefined we just want to return loading if any of these is null then not found although if you review is null it can the seller can still be found so um we'll fix this okay uh skills string so we want to get all the user skills and just map so we want to map each skill so this is skill name skill object and skill name we want to join them in all into string all the names so if seller is undefined or reviews is undefined then return loading if seller or reviews is null return not found this is weird Okay um we want to go make some divs this is uh for all screen sizes another div profile card seller pass in reviews and then div about me and then seller about div skills and then skills string my geks list seller username just passing seller username my so sellers gigs review stats so this is like a it's is shown like as stats like with bars and stuff so just passing reviews and then actual reviews so we want to display reviews as well besides reviews stats so passing reviews and that's it so I think what we should do is completely remove this reviews is equal to null and seller we we already checking if it's null so we don't need it here seller is undefined and reviews undefined we are checking this as well already here and then uh if reviews is null you should still exist I think if skills is now like there shouldn't be any problems okay and then so we want to check if skills exists or empty string like this so I think that's it now this is any type so we are going to solve this so if skill exist then show skills otherwi otherwise just display nothing and make sure you spell it as skills so let's create these things that we are importing so let's go to API users get user by user name in users TS export con get users by username query arguments username optional string Handler if arc's username is undefined return null if not arc's username return null uh so this is yeah if this is null but it can be only undefined so I think this is unnecessary also okay so user wait context database query users with index by username and then unique and then return user that's it now go to gigs. DS and then export con get seller get by seller name so get gig by seller name query so we need seller name Handler so get the user so query users by username then if user is uh not or null return null and then gigs is a weight context database query gig gigs by seller ID and you say user ID seller ID field is user ID and collect all gigs of this user and then return gigs okay let's go create this skills and say get by user so let's copy this skills and in the convex folder say skills. TS here do some imports uh get by user it's going to be query arguments is username Handler function identity and if not identity unauthorized user await context database so query users uh we want to query by username and get the first user although get skills by users so I think this should be unique not first but anyways uh just if there is no user user not found but unique and first both work it's just that unique will throw an error if there is more than one okay uh skills we're going to query for skills by user ID and then collect so this is the user ID and collect all of them and return skills that's it so in reviews TS uh export get by seller name and then we want to go ahead and say uh args seller name Handler we want to get seller by like query users by username so by user name username ARS seller name unique seller seller not found reviews now we want to get reviews so query reviews with index by seller ID and collect so you don't need this I just forgot to delete it reviews full type promise all so we want to resolve all promises now for each review you're we're going to map it and say gig is await context database query gigs we want to filter all of the uh so we want to filter all of the gigs by review. gig ID so I think we want to get all of the gigs that have oh this is confusing so ah it must be unique yeah so we're going to get a review that this user left on this gig so I'm not sure why I'm doing it like this so this is bad so I can just say review gig ID and I say get like this but I made this project two months ago when I was just learning this so that's why okay so I'm going to leave it this way for now but you can whatever you want so gig not found okay now we need to query images with by gig ID and then get the first image because we only need one image to show in the review and then if there is no image image not found yeah be yeah a wait so get U okay so get URL image storage ID so this image object it has format storage ID but doesn't have URL so we need to convert this storage ID into URL and then image not found um context database query offers now we need to collect offers by gig ID and collect so that's going to be premium standard basic whatever if there is no off off offer is not found image with URL that's going to be so we spread the image we spread all of these fields and then we add below the last field we add URL image URL get author country so query users author ID this is bad no you copy this and you say do get and then uh in Brackets do getet in Brackets review Author ID okay but you can do it this way as well to get this author by ID author not found if it doesn't exist country by user ID unique again you say so we're going to query countries ah with index okay okay that's it that's this is good this is good okay so no country country not found return spread review object then add gig image image with URL offers author author is going to be spreading author and Country and then return reviews full type so you see what reviews full type has it has all of this so the database functions are finished we just need to make a few components here so let's first copy this underscore components profile card go to the same level and then click that page and just say. DSX so profile card we're going to do some imports profile card props seller is Doc users reviews doc reviews export con profile card we're going to extract these props and then Arrow function languages so we want to get users get languages by username and username will be seller username I use Query it's going to be get country by username so we want to pass in the username languages undefined country undefined we return loading languages string so we want to just convert this uh array to a string so for each language we want to get language object dot this is name of the language and we want to convert like join all names into string average review we do this the same way we did it like four times already so I'm just not sure if I need to multiply this by three because so if this review is weird if it's higher than five or something then because I think I explained so let's not waste your time return div Avatar uh Avatar and everything is from components UI it's never from radx UI okay so show seller profile image and fullback is like first name of the seller we did this and then um div another div another div okay so we want to show seller username and seller at seller username oh seller full name and at seller username okay some div star this is uh for I think reviews reviews. length so number of reviews and then average review but the average review will get messed up because I think I need to multiply by three maybe okay so seller custom tag that's going to be um top rated seller or new seller or Rising seller whatever the custom tag in your database is seller title some div another div message Circle languages strings so what languages is seller speaking okay then do this map pin country country name and that's it that's it that's the whole page now in users let's say export con get Language by username arguments username Handler okay so now let's get user by username by username unique there is no user and then languages let's query Languages by user ID and collect all of them and return languages then get country by username so user this is the same so just get the user by username check if it if the user exists okay query countries by user ID and this must be unique and then if there is no countries country not found uh return country that's it so profile card is Now does not have any errors so let me actually comment all of these and now I'm going to comment all of these I want to just show you what profile card it looks like this is what it looks like I don't have no skills I don't have no country I don't have no languages there is no here as well the user tag but we'll we'll work on this now let's display all gigs of this user so in com Pro next to profile card my gs list. DSX let's start with use client and some imports my gigs list props user seller username is going to be string my gigs list seller username just extract this okay okay so gigs use Query get gigs with images and then pass in seller username if gig is undefined return loading return okay we need Carousel from um components youi Carousel so options align start Loop true Carousel of images will be Loop will Loop drag free false I'm not sure about these but this is like maybe you want to be able to drag or not drag by like images and then class name W full uh close the tag so we have next in previous image or is this now this is gig list so this is not image and then Carousel content gigs map so for each gig we're going to say Carousel item um 13 so I think this is display play ah I don't know okay so link when we click each uh gig it's going to go to that gigs link to that gig's page so CF uh seller username and gig ID images okay so yeah each gig is also display all of its images so you can scroll through images so we need to say images gig images Title Gig title allow delete fals that's it now we need to just make this in the database so go to gigs so in gigs DS we're going to say export cons const get gigs with images and then argument seller username Handler okay so get seller by username we already did this I'm going to skip through this quickly okay so now we're going to query gigs by seller ID this is oh yeah okay this is good by seller ID get all gigs from this seller then check if there is no gigs gigs with images we want to promise resolve all promises so for each gig we're going to map all gigs okay so image we query gig media by gig ID collect all of the images for this gig ID images with URLs so we want to resolve all promises again so for each image we want to convert this image storage ID into URL image URL because imagees object that is that has storage ID but not the URL so you need to convert this to URL and then image not found and spread the image and add URL so here if I go here we have we have spread image and then URL gigs with images now spread the gig and images image images with urls that's it return gigs with images so now gigs with images gigs with images although this should be gig with images not gigs with images okay and then here return gigs with images so my gig list is now like it works so let me go to um where here page TSX and uncomment this my gig list and let's go down and uncomment my gig so I'm GNA move this comment down like that so if I go here now I should see all of the gigs it's right here and I think I can scroll through images although I think this gig does not have any more images I clicked it and it went to the gig page so this is going to be a carel so one gig here one here one here and there is this Arrow so all of the gigs will be shown here and now let's go and show reviews so uh in the components we want to make a new file reviews SL reviews. DSX we also want to have review box. DSX add review. DSX and reviews D stats. TSX so in the reviews TSX make some uh do some imports uh reviews props full review review full type and then extract the props calculate average score for all reviews so array five feels zero initialize array for Star Distribution uh five levels we'll see what this is so we want to calculate the average review score that we did 10,000 times okay uh ah this is wait wait wait wait wait wait wait wait wait wait wait const rounded average math round average start distribution I think this requires more work let's see let's see I need to first see like what is what this even is okay so we are getting average score that's reduce so we have total and then for each review we calculate the average for that review and then we round that average and then we say uh start distribution what is this even uh it's an array filled with zeros and then we count the number of reviews for each Star level return total plus average and then review divide by reviews length so this is to show the progress bar for so for example we will have recommend to a friend and then progress bar for only those like for all of the reviews we just take recommend to a friend and then make uh calculate average of all recommend to friend and then so that's why we are doing this but I forgot exactly like okay well we'll see calculate the maximum number of reviews for any Star level to set relative progress bar maximum Max reviews Star Distribution math Max Star Distribution okay rating breakdown uh seller communication level calculate average review Map review review calcul communication level okay so just calculate average for all of these so um so here in calculate average we are sending we are mapping reviews such that we only get reviews. recommend to a friend so here we are only sending a recommend to a array of recommend to a friend numbers and that's it so only a ray of numbers so recommend to a friend from each review okay now let's define this calculate average it's going to take array of numbers it's going to return a number if values length zero return zero some values reduce total value total plus value start from zero return sum divided by values. length this will calculate leverage so here for example average so here recommend to a friend as I said we send all of the recommend to friend values from each review in Array only recommend to friend values and then get the average of recommend to friend review return div reviews map return and then this uh fragment review box and key and review and separator at the bottom so that's it now let's just make this review box that's going to show our reviews so review box let's go here review box that we already made let's start with Imports uh props and then extract props the standard okay average score we did this already soeg so average score for this review and then distance to now so when the review was posted for format distance from now and review creation time add suffix true I forgot what this suffix is turn div Avatar so Avatar Source oh my God I just hardcoded it what graat I I don't wait maybe this should be like user do image or I don't I don't know what this even is okay so there is no fullback div uh review Author full name review Author country country name review comment and then div distance to now so 5 hours ago uh and then div display five stars so we're going to make a new or is it no what is this this is making a new array I think and then map and then display Stars size color star is icon this is icon okay and below that average score to fixed one let's see what this even does separator and then div ordered div another div aspect ratio 169 image review image URL fill so you you're going to fill this must be fill and then review uh gig title and this and aspect ratio close and then below div outside of this div and then review gig title now let's go back to page TSX and uh we're going to uncomment this and we are going to uncomment reviews but I'm going to do that by moving this here so I think our gig has absolutely zero reviews so that's why it's not showing anything so we need to make a functionality to add reviews as well so let's do that now let's do this ad review so use client Imports ad review props gig ID seller ID form schema this this is going to be a form we're going to say Z object comment Z string minimum five characters message comment must be larger than five characters Service as described number minimum one Services typ must be at least one maximum five message recommend to a friend number the same thing uh minimum one maximum five and then communication level minimum one maximum five okay that's the form schema object okay export con review extract these con mutate pending from use API mutation API reviews add okay so form use form Z so type is z. infer from type of form schema so the type of form we're going to infer from this object uh resolver will be Zod resolver form schema default values will be comment nothing empty string five uh communication level default values okay then onsubmit values Z infer so the type is z infer type of form schema and then we can console log values so this is uh values is like on submit when we submit the form mutate gig ID seller ID so this is creating adding review comment service has described all of this stuff form reset at the end uh then and catch so if you want to do something when this mutate finishes return add review is title form we're going to spread this form I don't know where I defined it here form we need to make this because this is from shaten UI this is how the syntax goes form handle submit on submit and then space y eight okay so field comment comment field form field control form control we you just need to pass this name comment render so how the field will be rendered it's going to be form item label comment form control that's going to be input enter your comment and then spread the field form message this is the error message and form the description leave uh review comment then we're going to go ahead and say the same thing for so for control name Service as described field for item Service as described and then form control input number minimum one maximum five rate one to five placeholder and then spread the field and form description and I'm just going to go quickly because it's the exact you can just copy paste for service say describe communication level and everything okay and then button submit submit now let's go ahead and in reviews make this add function in reviews TS let's say export const ad mutation so all of the arguments gig ID seller ID comment service this this this numbers Handler check identity current user is going to be query users uh with index by token so we're going to get the current user by token identifier and then it must be unique check the user if it exists and then review we will just insert into reviews and object will be gig ID it's going to be gig ID seller ID will be seller ID author current user author I think we don't need this question mark and then comment service has described all of these and return review so I think we can delete question mark because we are checking here if it exists and that should be it so since I'm not exactly 100% sure where this is shown like this ad gig so I think it may be in uh reviews like like review start so let's uncomment this let's uncomment this but I'm not going to save it for now because I don't want my page to break so let me go here into a review stats so review stat is actually similar to reviews let's do some imports review startat props and then extract the props do the usual so this is the same we want to get average for each of the categories from all reviews so we want to get uh average score so we want to reduce total review average review communication level plus all of this stuff divided by three so this is average for the this review rounded average math round average start the script the distribution start distribution so we want to just go through this array and then do something with it okay so return total plus average and divide by review length so this should be um what is this it's a number that's average score for I think the whole reviews everything all of the reviews together and then we want to calculate the maximum number of reviews for any Star level to set relative progress okay so I think start distribution well this is calculating maximum of something I just forgot I'm sorry calculate rating breakdown values dynamically rating breakdown seller communication level calculate average we want to send all of the communication levels so we want to calculate average of all of the communication level from each interview same here same here and then calculate average defined function this is a array of numbers it's going to return a number if every if value length zero values length zero return zero some vales reduce so we want to get we want to add up all for example all of the array numbers starting from zero and then divide sum by values length that's going to calculate average return div div P font bold average review score average score to fixed two decimals Stars so three Stars I think or no 3.5 stars for example uh star distribution. map I don't know what the Star Distribution is let me see so we want to map it so for count and index we want to say start level five minus index so start level 5 4 3 2 1 percentage Yeah we want to get the percentage so count maximum review so we want to get the percentage so for example if your review is 2.5 and the reviews are from 1 to 5 then percentage is 50% at 2.5 we want to show this in percentage so times 100 so calculate percentage for Progress bar we're going to have progress bar for each category so communication is going to be a progress bar from 0o to 100% return div key Star level class name button variant ghost star level Stars button okay so progress value percentage so this is a progress bar from UI uh component from shat and UI like components UI and then go down and say rating breakdown object entries rating breakdown map so map each of these rating break breakdown this is just an object okay uh label value and then index so this has so this has label and value I think so we're going to do uh key index and then class name label we want to show label and value to fixed one so I think this will just like this this will be next to the progress bar to show like the numerical value of this like average so that's it let's go to this page TSX and save it and now we finished it it's all saved the only problem we have cannot find progress primitive from radic UI react progress this is is in UI progress TSX this error is a little bit weird so I'm just going to go here to shat CN and progress and I'm going to click manual installation and just install uh copy this npm and install it and maybe this will resolve the issue and it's fixed now you can see what we made and rating breakdown so this will make more sense when you go and study you what the hell we made honestly my guys I have no idea where this ad review is in my code so let's just continue we're going to be able to add reviews okay guys I found it so go to app username gig ID and PSX and that's where we are going to uncomment first of all uh this add review so let me go ahead and uncomment this show so this should work okay so we need to fix the import so I'm just going to say here and import again like that and then this import oh yeah I am commented the wrong thing oh my God that's crazy okay let me save and now so if we go to the gig page now we see this ad review form so comment amazing gig bro uh I'm going to Service as described for communication doesn't really speak English to submit oh expected number received string that's crazy let me see again oh my God that's not good so in my research I found that in the ad reviews I have this I already commented set default values as numeric so it doesn't give weird expected number go string error but I already did it so why is it behaving like this so what I did is I just refresh the page and if I go ahead and just add whatever the comment and I press submit the review is saved yes so that works if I say three expected number received string that's crazy what if I do this and then comment is to okay I found the fix we're going to have to go into a so for field for service as described field and here after placeholder and field we're going to paste the following we're going to say on change curly brackets e and then field. unchange so we're going to trigger the same onchange function but par int e Target value so we're just going to trigger the same onchange function but we will convert text to int and we need to do this for each of the other fields so here after the field and here after the field and save it and let's go here and refresh this page let me scroll down and now if I go ahead and change whatever I need to add some comments so as you can see I'm not getting any issues I submit and we have an issue so it's Pars in I just misspelled so let's go back this is pars int so let me fix that okay and then we want to try again three oh my God guys just make sure I'm goingon to like do this again so let me delete this and I'm going to make sure to paste the correct version again so onchange e so this is the correct version okay let me try again so four three 4 two and then nice bro submit okay now it works so see how we have four reviews and the average review is 11 which is not possible because review can be from 1 to five so let's go to seller. TSX and here where we have um reviews length so we need to divide by reviews length time three and now it's going to be this but we also don't want to have so many decimal places so let's go here scroll down of the seller TSX where you have average review and say two fixed five oh no no no two two decimal places and then let's copy this and let's also go to um seller details this one and then average review average review let me get here and then to fix two and also uh we want to say reviews length and times three because each review has three one two three of these so now this will also be fixed and let me show you a bit of surprise if I go to my profile we see all of this all this is the list of gigs and we see how my progress bar works and I'm not sure if it works as it should be working and then uh so for each review and what the hell is this ah this is the hardcoded image that I program but you can just say like put uh you author image so for I showed which gig I did the review for and then I just showed the review the average review time and everything so I didn't have time to like completely fix this so if I have time I will show you but if I don't have time then sorry I cannot I I didn't have time to fix this app seller username so we are going to uh so in username we're going to say page TSX and uh layout so we are making something so the thing we are making is I don't know yet but let's see now I think we don't need this page TSX so let's actually remove it sorry so move to recycle bin so in layout TSX that I just made let's say import seller navbar from component seller Navar uh dashboard lay layout props we want to extract all of that return main seller navbar uh show the seller Nar and children and that's it this is the layout now let's copy this underscore component seller navbar and next to this layout let's make a new file just copy paste all of that and DSX so there will be a whole nav bar that we are going to be creating use class and then um all of the Imports and then const components it's going to have type title string C string description string and that's going to be array and then that's going to be array of objects and then these are the objects so title orders C now this um nav bar I'm showing to you how to do this but this will be incomplete so you are you don't need to like write these things because they won't lead to anywhere but I'm showing you how to make this Navar for your application just if you want to it's a more complex Navar but if you don't want to make this you can skip this so this is just for you to learn how to make a more complex navbar but for a more complex comp application so we have this description of the N of the this navbar element then we have title gigs and then C to where this leads this can be like the homepage like this without like this okay description and we want to make this whole object profile everything okay so then export const seller Navar API users get current user router from next SL navigation onclick inbox push to inbox uh return something so return this div div button on click we're going to say on click inbox so this is Inbox and message Circle so this will show inbox if current user so if the user is logged in variant ghost we want to say router okay so we have switched to buying so this was switch to selling now switch to buying and then user button then below that we want to say navigation menu this is from UI components so go to shat and read about this if you want navigation menu list navigation menu item link to SL dos we don't have this SL dos but I'm just showing you how to make this if you need so you can like just not write this if you don't want this Legacy I don't know what this is because uh I just copy pasted a lot of this from sh CN so they have everything in documentation but I'm just showing you how to make this navigation menu link class name navigation menu trigger style I don't know what this is dashboard so you'll see what this is when we finish this I will show you what it looks like Okay navigation menu item navigation menu trigger my business and then content that's going to be unordered list uh list item navigation menu link and then you have a a um you don't need this image but I'm going to make a div orders and then whatever the hell this is keep track of your orders so this is this is a bit more complex navbar that shows you like not only this with good styling but also descriptions and stuff so list item another one this is for managing gigs so let's just say title gigs and this we have so this is actually link that we have in the that we're going to have manage create or edit your gigs here and let me now speed up so list item this is seller current user profile I think we don't have this one because seller is just I think for us it's just like this this is the profile but okay let's leave it like this manage and edit your profile present yourself to the world navigation menu item below let me advertise it okay so there is a bunch of more like um what is this components this is components yeah so this is yeah these these components here so orders gigs profile uh components map so for each component we want to list items so key title component description let's let me just there's no point let me just quickly like go through all of this is the same and then I'm I want to show you what it looks like so list item yeah so this list item we are going to Define it here so what is it it's going to be react forward ref react element a so it's going to be a link and then we're going to say react component uh props without ref display name and we're going to pass in uh class name title children props so this is children title I think we also have a ref I'm honestly not sure like too well like what I'm doing here because I just copy pasted this from Shad CN so we're going to show some links H title and children okay well if I save this let let's see what all of it looks like so if I go to switch to selling guys it looks like I cannot even show you the navbar right now because uh we don't have this page so we need to make this manage gigs but this is one of the last if not the last thing we are doing in this tutorial so let's go so in manage gigs so username manage gigs we're going to next to layout we're going to say page. DSX so page. DS X use client we import link so we import all of the Imports manage gigs this is a managing page so this page is going to display all of the gigs we have and let us manage them current user get current user uh okay so get gig get gig with order amount and revenue okay if gig is undefined current user undefined it's loaded if gig is null or this is null not found and then um gig data so this this type what is this type even oh this is uh we'll see what this is okay so we are mapping each gig ID is gig ID so we are creating this object data and we are saying title is gig title and then image is image URL or this random image that I don't know even what is this it's a placeholder image so this data is what we will show in our like table about gigs clicks gigs clicks orders Revenue username okay then return make some divs div age1 gigs uh P manage creator edit your gigs and offers button variant blue which we don't have but I will make it uh let's actually go and create this variant so let's go to button DSX and here where we have variants now we're going to add a new variant blue and give it these names we're going to say blue secondary give it these class names and white and these class names so let me um continue with this so this button will have will go to the manage gigs create so this is for creating a gig okay then we're going to have a separator just and then data table this is table we will show all of our data so let's now create this uh get gigs with order amount and revenue so in gigs. TS let's create that it's going to be a query let's speedrun through this it's easy check identity okay get user by by token identifier get currently logged in user check user is authenticated and then gigs query gigs by user ID so all of the gigs of this seller order the sending by creation time collect all of them because we want to display in the manage gigs tab uh G with order amount so we want to promise resolve all promises gig map so for each gig we're going to get orders by gig ID collect all of them order amount is orders length return spread the gig and add order amount and that's it okay gigs with order amount and revenue resolve all promises gigs with order amount so map all of these gigs const offers a wa so we want a query offers um so this is revenue so we want a query offers by gig ID and then total revenue is offers need to reduce so accumulate accumulation Plus offer price return gig total revenue guys I'm going be honest with you I think I made a mistake here so I'm calculating the prices of all offers but there are but I shouldn't I should be calculating prices of orders because offers are like just basic premium standard so but I don't have time to fix this that's the problem so I think um you need to like okay so you you can copy this orders and then like here and then say um orders and then order but then you you're going to have to like so for each order you need to get like um you have offer ID and then you can like res um get the offer and then calculate the price or you need to get the number of offers I'm not sure I'm not sure you need to get the offer price of this offer and then just add those so that's how you get Revenue but for now because I don't have time I have to leave it like this okay so um gigs with order amount and revenue map so we're going to make a sync function this is selfexecuting function just to do it in this in this way as well to show you how to do it uh so we're going to query gig media by gig ID first we want to get the first image and then uh if image we want to get so we want to convert this storage ID into URL and then return gig G spread gig and then image URL return gig image URL is null what ah so if image exists then you return image URL but if image doesn't exist then you return image URL as null okay back at our page TSX seller username we actually seller username page TSX first of all this page TS X should be inside of manage gigs so let me cut all of this and Mage make page. TSX inside of manage gigs and then paste it here because this this where it this is where it should be and then I can delete this page TSX because it's useless so inside of manage gigs we need to create a folder undor components so let's make inside another file gig dcard do um/ index. TSX this is quick and easy import doc uh G card props gig so and then extract props return div gig title that's it now we need um in components besides gig card inside of components g list. DSX this one is also short so use client and imports G card uh then just extract so gigs is used query API gigs get that's going to get all gigs from currently logged in user and then return map gigs gig card key and gig gig that's it now next to Gig list we're going to add datatable dots oh. TSX at the end use client and imports uh we're going to install this I think npm install this okay then interface data table props T data and T value columns columns column def uh I think we are going to import this from somewhere yeah from this and then T data and T value so you can read more about this in Shad CN tables so just Google Shad CN tables and read more documentation I'm not really sure I just copy pasted a bunch of this this code for this table so we got data and data type and columns and columns type export function data table uh give it the types columns data data table props all of this good stuff table is use react table that's crazy I don't know where this comes from it's it's from this okay and then data so you need to pass in props data columns get core R I'm not sure what this is bro let's let's just do it div table so this file I just copy pasted I think and then table table header and then so this is going to show table header I guess header group table row key I don't know let's just go through this bro uh table head is header is a place I don't I have no idea what this is so you can come here to shat CN data table not table but data table and then just read about it if you are interested um I I think yeah I need to install this which I I'm already installing I think and then you can read how it works but I just made it work and now I don't remember how it works so that's that's the thing now let's go back and uh continue with this I'm just going to like you can copy paste and read all about this oh yeah yeah so this is the data table file it's just going to show uh this type of table at the top this type of table now we need to make columns TSX so let's go here uh in components columns. TSX so columns is actually like our data I think so let's do Imports uh you can read about this also in data table shot in because this is also from there and then uh gig data so you can use Zod schema okay we just Define type gig data that we exported and imported and then this is gig data type this is what we will show in our table all of this okay and then say columns uh we we're going to Define accessor key gig header gig cell row and then link it's going to go to sellers sellers image with height row original image uh what is this this is I think this will just like point to the gig okay we'll see and then we have clicks row we have orders we have or those are columns not rows columns revenue and then this will say Revenue in the head header and this will show the pars flow so we're going to say row get value Revenue amount and then for formatted we're going to format this into like this currency style and then format amount we're going to display formatted below that we have actions so that's like just like drop down menu so we're going to have delete and stuff here gig action cell I think we are creating this yeah so we're going to make this cell we're going to pass in Gig ID and we're going to pass in username row original username so row original is how you access data I'm not sure from where but the data that you are displaying so that's it now let's create this actions so just next to columns I'm going to say actions. TSX so in actions we go with Imports uh props Define those props okay the standard con mutate remove REM so this is for removing the gig handle delete remove so yeah that's it you understand this I think I explained this so this will when we click a button we will handle delete which will trigger this remove mutation drop down menu and then as child because this will be have a button inside so if you have a button inside of a button because this is also a button you need to say as child or there will be an error um open menu this is the button yeah more horizontal yeah this is a what is this I don't know okay let's let's go drop down menu content align end drop down menu item link so that's going to be edit so if you click this it's going to push you to the editing then the other item is going to be uh copy text copy link that's going to be what preview okay so I think we don't need this at all okay and then the last one is going to be delete and I think we can safely remove this and that's it now actions should work and here this is what it looks like so we have gigs manage create and edit gigs and offers and this is the gig although I had an error that said like could not find file datat table. TS so I just went here into page TSX um like manage gigs page TSX and I deleted this import of data table and I imported it again and then everything worked so we have click zero order zero Revenue 40 so I think yeah so this uh project I'm sorry for uh a few things being unfinished so here you can see our nowbar as well this is the advanced nowbar that I was talking about you see how it has all of these animations uh I did I was not able to implement orders this is a huge project I did not know that it would take so much time but you see orders are free and there is no way for me to like track orders so when user purchases order you can track them here but this still works because well we can work on trust between user and seller so that they will pay and then when you have orders that's how you calculate Revenue right now we just adds revenue from all three offers that's not Revenue that's just like this not revenue and this is a edit preview delete so if I say preview it's going to push me to the link so this page and maybe you want to disable reviews for people who have not purchased it but I just didn't have time and then we have delete edit so this is the edit page I can easily I already showed this now just we need to make manage gigs layout a bit better so let's go here in manage gigs create a new file layout. TSX so I think we're not using this import anywhere just do this interface and then uh export default function uh manage gig layout the standard layout return and then give it block space y six padding and stuff and then children and that's it if I go back refresh maybe but I misspelled layout layout like that and now it has some better padding so create will push us to create this is the create page and let's quickly speedrun the inbox so so in the um app we're going to create inbox. page. DSX and next to that layout. TSX and then we're going to saycore components slidebar SL index. DSX we will have in the sidebar conver no con conversation d list. X conversation dbox DSX so in sidebar index we want to use client and do the Imports uh we want to use Font popins this is weight and stuff interface children and then we want to say sidebar return and aside and then give it like this so it's going to be fixed sidebar as we scroll it will stay sticky on the screen to be fixed uh with 300 pixels hidden on mobile and large screen it's shown okay so first we're going to have a link that's going to link be our logo that will link to homepage so div image logo SVG height WID span class name font semi Boldt and then font class name so I think it's like to use this font that's why we are doing this so use that so we use that font and then close the span and say Gian so I this is like the name of my application okay and then below link we're going to say children so we're going to display children for this sidebar so this will be the sidebar now let's list all of the conversations so we're going to import all of this and use client so all conversations will be listed in the sidebar uh conversation list and then con conversation list conversation use Query API conversations get by user and then API users get current user if conversations is undefined it's loading same for current user Uh current user null it's not found and then user conversations conversations filter conversations that have conversation uh part participant ID is current user ID or participant 2 ID so participant one ID or participant 2 ID is current user ID so we check all conversations where either participant one or participant two is the current user so then we get those conversations then we return uh all conversation just text and then um user conversations map so we want to map the conversations and put in conversation in show box or or conversation box key because we are mapping conversation conversation so that's a prop current user current user and that's it conversation box so we're going to use client so this is going to show each conversation in the sidebar so for each user when we click this conversation box it will go to the conversation with that user so conversation will be uh doc conversations current user then we're going to say conversation box conversation current user conversation box router use router from next navigation uh other user ID will be conversation participant why one ID is going to be current user ID or a conversation participant 2 ID so we want want to check if other user ID is equal to no no no we want to check if participant wi ID is equal to current user ID then it's participant to one ID that's other user ID or participant to ID is the other user or if this is not equal then participant one is the other user okay uh other user use Query and then API users get ID other user so we want to get the other user of the conversation parameters is use parameters I think we need to read this read URL and then other user check so I'll show you what this is for API users get user by username and then username is going to be params other user name other username as string so we will have this um we will have this like in the link so we are getting parameters so conversations will be will have will be on slash index uh Slash inbox slash other username so we need to check the other username of our partner we are messaging handle click use call back this will be deprecated soon okay but I I I think it forced me to use callback okay um router push inbox other user username yeah so when we click on this conversation box you want to push the router we want to load this conversation so because this is in sidebar all of the conversations in the sidebar so this is going to change when router changes other user username changes okay so div handle click we want to pass in this and then other user check and other user check ID is other user ID okay so if the currently log currently loaded um conversation is so so in the sidebar we're going to have Mark clar whatever V whatever we have like three conversations if they currently logged in user currently uh shown conversation is of this one of Clark then we want to make this a bit more like Gray in the sidebar so in the sidebar it's going to show which conversation is currently logged in currently loaded we're going to check that by getting parameters from the URL and checking the name of the like the other user so if the name of the other user the ID is same as like the one if we just going to find okay you understand maybe watch again if you didn't I think I explained okay I don't want to waste too much time so uh we're going to display Avatar of the other user and other user full name oh that's it okay so that's it let me just go to API so let's create these conversations so let's go ahead and go to convex folder now we want to be able to create a conversation so we want to go to convex conversations. TS so let's uh go ahead and do some imports and then get by user is a query Handler check identity get current user if current user doesn't exist couldn't authenticate user conversations we want a query conversations filter so we have q. or so we're going to have two conditions so Q equivalent Q field participant 1 iD is current user ID or participant 2 ID is current user ID if we go to our schema. TS we see that conversations basically it will just have participant one ID and participant 2 ID so we need to find all conversations of the currently logged in user it can be either this or this collect all of them return conversations okay now let's do page TSX and layout TX TSX of inbox so Imports and use client inbox page um user ID is use store user effect if user ID is null is storing user we I don't know about this one I think we're going to delete this okay return um so this is like storing the user if user is not in database but I don't think we we're going to use this okay so div image empty inbox so we're going to display empty inbox here with height um title welcome to inbox and paragraph select a conversation or start a new one I'm going to comment this first of all and I'm going to comment this and I'm going to comment this because we don't need any of that let's go to layout TSX so um use client and imports so we're going to say export default function conversation layout so children and then you define type children children react node so you can like this is a different way to do this without defining interface you can also like do it like this extract children from like this type but you need to Define type return fragment uh div fixed okay so that's going to be a nav bar we're going to make it fixed on the screen and then padding top 88 pixels because we're going to show Navar and then sidebar and then inside of sidebar we're going to say div height full I think this is useless we don't maybe you don't need this conversation list that we just made and close div and close sidebar so this is going to be passed as props as children to sidebar okay then go here and just display children so this is sidebar and this is like the rest of the page so if I go head and refresh so this is what it looks like welcome to inbox start a new conversation all conversations now let's uh finish this functionality so in order to start a conversation we need to uh make page for conversation so here in inbox you're going to say other user name slash page DSX okay so here we're going to say use client and imports U form props so this is the conversation page that we are making uh parameters that's going to be string that's going to be URL parameters okay conversation so we're going to use State any oh my God why am I using any I don't know okay I think this should be Doc conversation but we'll fix it get us mutation API conversations get or create conversation and then conversation is use Query API conversations get conversation and by usern name so this is get or create and what is the difference between this and this I don't know we'll see when we are making I forgot I made this two months ago okay user use effect a call mutation that's going to be try result a wait so get conversation pass in username set conversation result catch console log mutation failed error call mutation and when get changes parameters other username changes okay so if any of this is null return loading which should not be loading oh it should be loading because this is null and these are on the find conis now this this should be undefined here I'm going to change it when I finish okay so log conversation um div div body so we want to show messages in the body form is like submit message send message so user ID conversation current user ID conversation ID will be conversation ID and that's it so I think first of all this this should be Doc and then uh con and then like this and then converations and this going to be an array or conversation yeah okay and then here I think if this is undefined okay now let's make these two but this can be null so conversations so this is or now okay now let's go here and create these two so in conversations in conversations TS let's go ahead and say export con get conversation that's going to be a query arguments username Handler check identity get current user the same as always check current user and then other user get the user as well by ID and check if yeah that's it other user and then get conversation filter so filter all conversations okay so we have two options we have that first user is current user ID and participant two is other user ID or participant two participant one is other user ID and participant two is current user ID this depends on who clicked on who which profile to create a conversation so that's or so this is end and okay unique must be unique get messages from this conversation that's crazy why am I doing it like this this should be do get and then conversation ID but no there will be a lot of messages this should be not filter by with index with index but okay you can do it with Filter as well with index is better by conversation IDE index okay because this is going to return all messages and then process but if you do with index then it's going to just return those messages it's not going to return all messages with users relation so the reason this is relation is because this is going to be a bunch of promises that we need to resolve um messages map so for each message you want to get the user who send that message why am I doing it like this I made this when I was still learning forgive me so I need to I should be doing it like this so just get and then the ID but okay uh let's see return message spread message and user message with users promise all yeah we're going to so this is a bunch of promises now we're going to resolve all of those promises return current user other user conversation message with users okay so that's it now let's create the other one so this one is get or create conversation so this is very similar so let me just speedrun identity it's the same get current user same same everything same you can copy paste other user get other same get conversation so this is exactly the same okay so if there is no conversation we need to insert a conversation so participant one is current user participant two is other user and then uh our conversation you need to get the conversation after we insert it we want to get the full conversation object okay so now we want to get messages this is same don't filter use with index so use r index instead of filter okay um the relation so we want to get oh my God this is this is Doc messages not any okay um so we want to filter find all find a user who sent this message and then return it we want to resolve all promises and we want to return current user other user conversation message messages with users because me this will have message field and user field oh okay so that's it now we have get or create conversation let's see what we don't have we don't have this components body and components form so let's go here in other username let's just have a new file uncore components SL body. TSX but I misspelled it's TSX and then form. TSX and then a message dbox DSX so this is the conversation body this will show all messages the body TSX so we're going to do import interface export the body page this should not be export default this should be export cons but this will also work okay um then we're going to say bottom ref so we want to make a div at the bottom of this body so every time a new message comes we want to scroll down to the bottom maybe I'm talking too fast so let maybe talk a bit slower uh use effect so if bottom ref current so if this div exists we're going to scroll down to this div when when messages change so when there is a new message we want to make a div so for each message we want to map message and index and in message box we want to say is last although I don't think we are using this so you can ignore this maybe keep key and message and that's it and then this div that's for scrolling and save it now let's do message box Imports and stuff interface it's going to be message and is last Boolean that's optional um extract and then export default current user current user is undefined return loading okay so is own message. user ID is current user ID so if message is own then we will show them to the right if the user the message is not own then we will show the messages to the left and there will be some other styling differences so container of the message we're going to say this and if it's own we're going to justify at the end so we're going to show to the right Avatar is own order two what is order two I don't know okay Body Flex Flex scull Gap two is so body we're going to put items at the end if its own message message style so if it's own it's going to be a bit different colors and text yeah text white color different and then so this has false question mark R okay so this will never so this will never show this will always show because I was doing something I just left it here so you can it's okay you can change if you know how to if you don't know you don't need to change it uh div so we are now show this is container Avatar it has avatar from uh at C atui components image message user profile URL okay so call back this could be also be the first name user for full name character at zero okay so this class is body and we want to say class message style and we will display message text here and below that we want to say uh when the message is sent so format new date and then we want to say is last is own and message scene and then we want to display like scene status but I think I I just I didn't have time to implement this so this doesn't do anything let me see here current user is possibly null so I'm going to say if current user is null return null okay that's it form TSX so we're going to use client and imports form props user ID so this this form is for sending the message we need user ID and conversation ID to send a message who sent and conversation in which it's sent uh okay so const form and then export default although this should be export const but then you need to change the import as well so you can do it like this as well text set text of the message and mutate and pending from API messages send then handle submit if text is empty return we're not going to send empty message mutate text user oh you don't need to you can leave it like this because it's the same name as this prop so user scene fals conversation ID then set text of the message so of the input field to empty and console log any errors and then we want to display so we want to display input field so div again div again input placeholder enter message class name value text unchange is set text on key down if key is enter we want to prevent default so we don't want to I think go to new line or something I'm not sure but just handle submit so you can also send message if you press enter and Below or not below this is going to be next because this is a flex Flex box so we have type submit class name on click handle submit disabled pending we're going to close the button and we're going to say hi paper airplane this is a icon from Lucid react size 18 class name and stuff so that's it we just need to go ahead and make like sending messages so let's this is I think the the absolute last thing we are doing maybe uh maybe so let's go here in conve and say messages. TS so here we're going to say all of this stuff send mutation arguments text V optional v string send ID image URL option okay so these are all of the arguments so image URL scene that we are sending everything ID conversations Handler and then we need to extract all of these from arguments if you want to you can also say arguments. text you don't need to extract them okay let's insert a new message into database and pass in everything and that's it that's it for inserting the sending the message then we go get the message return AWA context database query messages collect so this will return all messages why would I need this I don't even know if I'm using this honestly this is completely unfiltered okay get last I don't think I'm using this what do you mean get last okay I I if I'm using this we're going to we're going to return maybe here so in order to start a conversation I need to log out into the different account and go to this guy's gig and start a conversation from there so I logged in into different account and I'm going to go to this user's profile and I'm going to say send message wherever that's supposed to be no on the gig so go back to the gig and say send message here so this is a conversation that's created and if I say hi if I send it that's crazy it works