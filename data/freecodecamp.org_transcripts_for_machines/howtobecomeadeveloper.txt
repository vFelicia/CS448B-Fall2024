all right thanks everyone for coming out i know there's probably a lot of other things you want to do on your weekends a lot of sports ball to be watched but you also want to be a developer and i mean you're here and that's that's a really great first step there's a lot of people who are not here and not doing anything and you're actively doing it so that's that's awesome uh the title of this talk is how to become a developer it's a collection of a lot of the experiences that i've had some of the things i think i did right and almost everything i did wrong as well as the experiences of some people that i've helped mentor through this process just recently there was a guy who had no programming experience at all just got his first job two months ago and so this is really fresh on my mind and i know the great things that tech has done for my life and so i'm really really happy to share with you guys um maybe help you learn some things that um the easy way so i'm john i'm a developer and a consultant and i like doing things outside of computers sometimes and this talk is based on a series that i wrote on my blog also called how to become a developer siri no why are you doing that and the goal here is to become fully employed as a software developer like that's where we want to go and so the structure for this talk is we're going to talk about why you might want to become a developer what skills you might need what kind of developer what type of development talk about like okay how do you actually do that and also talk about how to get your first job with a little bonus of how to be an outstanding junior developer so i imagine you have some reasons why you wouldn't become a developer otherwise you wouldn't be here and to me there's really two groups and i think there are practical reasons i think there are personal reasons i mean the biggest practical one just right up front like it pays pretty good i mean if you look up the median developer salary in your area it's pretty good and the rate at which you can increase that is probably higher than about any other field out there secondly i think there's huge market potential still to be had for development i mean everything has programming in it you can tweet from your fridge if that's a thing that you would want to do and so programming has given us such incredible scale and efficiency in business like it's here to stay and while there may be some type of super ai that can program itself and take over the world i mean somebody's got to make that muzzle b why not is anybody here who has an app idea or a business idea that involves technology if you do learning to program is a great way to bootstrap those ideas i've talked to a lot of people who have business ideas and they are almost helplessly lost trying to find programmers figure out what they need like project manage it's incredibly tough and so getting this skill set is incredibly beneficial if you actually want to make something with it yourself and then lastly here i think it's important to know that this is a known path okay we're not finding cures for cancer we're solving mathematical theorems that have been unsolved for 500 years like there's a way to do this and i don't want to underestimate the amount of hard work that it takes because it does take a lot of hard work but it's not hard and i think that's a really important distinction it is not hard it is very doable but it does take a lot of hard work so moving on to some personal reasons i think some people are surprised when they start programming because they do it for all those practical things and then they find that they really just love it for what it is and one of those reasons i think is that programming to me is pure creation and if you have a creative itch it will scratch that itch a lot of people think about oh you know creativity is art or music or dance or something like that but to me creativity is anything where you have made something that was no longer there or that was not there before you started there's this tweet going around recently by a conference that said what five words best describe programming and i really like ryan's answer here making invisible robots from words like when you program things you're commanding bits of matter to do stuff based on secret keywords that you type on your computer like that's kind of crazy if you think about like what actually happens when you program something to me i also like programming because it's a domainless tool programming is a very good tool and it's great at what it does but you can like programming and at the same time not do it for programming like if you like cats or you like music you can apply programming to those things so real quick let's talk about some reasons why you may not want to become a developer and to me there you don't like computers notice i didn't say you were not good at computers i said you do not like them you don't like desk jobs sitting at a desk sucks i mean it's awful for your health and it can start to be kind of painful over time and also if you don't like learning new things programming is not for you the world of programming adapts so quickly and changes so fast if you're not learning you're going to get left behind now there's a notable exclusion there i think some of you might be thinking oh i'm not good at math or i'm not smart and these are just silly things we tell ourselves based on a teacher we had in high school or an experience we had this is just not true like you don't have to be smart you are smart enough you don't have to be good at math there's really not that much math in programming okay so moving on to what skills do we need you might be surprised that i only put one thing in this list and to me that is pure and utter determination like you have to know that you're going to beat this little piece of metal and it may kick you down a couple times but in the end you're going to triumph and learn this and you can do it that's all you need so when i started programming it was the first day my freshman year in college the computer science program and i had done no programming had absolutely no idea and it kicked my butt continually and it was awful and i had no idea what i was doing every tuesday we got a project every tuesday i got depressed and i felt like i couldn't find the help i couldn't figure it out but i kept going and sophomore year picked up a couple more things junior year picked up a couple more things again felt like okay i've got some fundamentals you know i can make some programs and so i finally graduated the program i know some things and i got my first job as a web developer and computer science and web development are very different and so i felt like the ground was ripped under out from underneath me again and i was hopelessly lost because they're just totally different concepts but after my first job i got my second one and i noticed that i learned some things and um third job i learned some more things you know i'm not getting stuck as often i'm not getting stuck for as long when i do get stuck and so over time you build up these skills you build up this knowledge and you can get there the path is no so skills you don't need tech savviness good at math and science a computer science degree i'm sure there are a lot of people to see that if you have questions about that we can talk about after the talk but you don't need a computer science degree i had a friend of mine who gave me an analogy that i really liked and he talked about being a welder versus a material scientist and to me programming is like being a welder you have tools it's a skill and a craft that you learn how to do now if you want a computer science degree i i relate that more to material science you're discovering new materials you're worried about the theory of how things work now would a material science degree help you as a welder probably but it's not required and so if that's something that interests you go for that degree but it's not something it's not a prerequisite again it's not hard but takes a lot of hard work there's this blog that i found that said this is why learning rails is hard and they had this mind map of skills you have to pick up and that's kind of daunting and i don't show you that to freak you out but there's a lot of things there but the thing is you don't start you know eating the whole elephant you do it one bite at a time and so you pick up the first node maybe on each of those things and maybe you get the second one in the third and over time you build up this really impressive knowledge of skills because the web is continually evolving and it's is much there's much more to learn than there was five ten years ago so let's talk about what kind of developer we want to be development is kind of like music in that music has genres and instruments you might if you want to be a musician you say i want to be an electric guitarist in a rock band or i want to play bass in a jazz trio and development has very similar things just like music has genres programming has types of applications and before somebody gets really angry in the chat there's a simplified view there's probably like more things are left out but just for our sake of conversation i put them in these four groups the first one i'm calling websites this term might confuse you but to me this is what a website is you can actually go to this link it's still up it's just like you would have a filing cabinet with physical drawers a website is just virtual documents with links to flip the pages now we kind of colloquially use this term for things like this which i'm calling web apps so facebook gmail slack and web apps are things that are interactive so you have an account you're submitting data the data you get back is contextualized to use specifically next we have native apps you know what these are this is your slack client for your desktop these are the things on your phone and the fourth one i'm just calling generic internet of things this is more the like device sensory kind of communication stuff so out of all of these you want to make web apps and the reason you want to do this is because web apps are really at the core of all these other things the skills you pick up making a web app will either directly or indirectly transfer to whatever you're doing if you want to make a mobile app that data is coming from somewhere it's coming from an api it's coming from a web app you do internet of things that's like all apis like things talking to each other so web apps is an amazing place to start don't make websites websites are dead and you don't want to you don't want to do that okay so what kind of development do we want to do in this i've broken it kind of into two categories first one is the front end this is the thing that you interact with this is the presentation layer it's the thing that takes the data and then makes it in a human readable workable way and so a frontend developer is concerned with things like how does it look how does it feel how do you interact with it you probably use technologies like html css js react angular ember in the contrast to that we have the back end and for this slide i googled back in cloud architecture and this was the first image i got which is perfect but i love it especially on the side how it says the back end goes to the front end through internet connection just take that in okay but seriously the back end powers the front end this is stuff like servers network requests databases you're dealing with things like how do you store and retrieve data properly how do you authenticate users you use something maybe like ruby python rails node and so do you want to be frontend or backend that's a good question the answer is yes you want to be what we call full stack by learning this incredible breadth of skills you'll have everything you need to specialize in whatever you end up wanting to do if you saw ryan's talk a couple weeks ago in interviewing you talked about tshaped people you want to build the top of your tee you want to have exposure to this wide variety of things and over time you'll be like you know i really like building reactive frontends or i really like doing database stuff and so you'll build the oops you'll build the stem of your tea and really start to specialize down in one particular area okay that's enough theory you guys want to know like how like how do i actually do this so let's talk about that first thing you need to do is choose your tool now this can be kind of daunting there are a lot of programming languages out there it's a lot of information but there really is not a bad choice unless you didn't pick bulbasaur in which case you chose poorly the thing is is any experience is good experience when you start there's kind of this weird phenomena with weightlifting where somebody came to you and said i want to raise my bench press if you told them to go run every day a mile for four weeks it would raise their bench press which makes no sense but when you're in such an unadapted state any experience moves you towards where you want to go so especially in the beginning don't worry about it just pick something do something it will become clear how to move and pivot as you go along the way okay but seriously well english just tell me a language please before i do that i have to give you a disclaimer so asking a programmer what language you should use is incredibly biased like people have chosen languages and based their entire career around these things okay this is like asking try not to offend people somebody in a multilevel marketing scheme like which should i use your competitor the other one like you're getting a pitch you're getting a really strong pitch you're signing up right there okay so if you talk to somebody and they don't give you this disclaimer you should not listen to this person like they're obviously so biased they cannot see it so with all that being said you guys are all doing html javascript css keep it up those are great you need those for a backend language i recommend ruby and there's a big asterisk here that i'll talk about later but you want to pick a language that is stable if you're trying to learn it and the components of the language are changing out from under you between versions you're not gonna have a good time cough angular one to two you want to be beginner friendly c and c plus plus are amazing powerful languages but they're not beginner friendly like don't give yourself more pain than you have to at the beginning you want something that has a large community okay you want something where when you go to google the first 10 hits are for that language you don't want to start learning something and then you go to get that job and they're like i've never heard of that like you picked randomnound.js like five people use that in the world you want something that has a web framework because you want to make web apps and you want something that has been around for a while but it's still being maintained and it's kind of a balance that you have to to work but it's important that it's continually being improved but it's not changing so fast that it's going to blow you out of the water so all that being said i think all these are good languages to choose from someone is angry in the chat saying.net note or not a language we can't hear you so stop yelling just don't pick php just please pick one on the left if you pick php that's fine like you you'll learn eventually sometimes bad experience points you towards good experience pick something you can make web things with that's like the general point okay so how you picked a language how do we do this step one is to learn the language itself if i said okay we're going to write a passionate political essay in german but you don't know any german you're going to have a bad time so you want to learn the grammar you want to learn the words themselves how to put them together then we'll talk about sentences then we'll talk about ideas and themes you've got to learn the language yourself or you're going to be tripping over yourself trying to do stuff so work through the language and then make crud apps this is both a description of the quality of your apps and the type of app itself if you didn't know crud stands for create read update destroy okay this is like a facebook feed you make posts you edit posts you get your posts back and you can delete them after you do that you're learning the language you're learning the tools around the language third there's some concepts outside of crud that you need to become familiar with these are things like apis database css and js frameworks bootstrap foundation react all that kind of stuff um i made this dock for somebody who is trying to go through this process um and it's it's not complete for sure but there's some extra stuff in there if you're interested you want to go look at it and i don't think you have to do these things these three things like in order like do them at the same time learn some language stuff make some crud apps investigate something you don't know and repeat and just keep building and building on your knowledge okay let's talk about getting your first job now i'm going to quote myself being quoted by ryan who was quoting me originally when i say this is probably the hardest part in the whole process because there are a lot of things outside of your control with company logistics the person that's interviewing you where you're at in the world and where you're applying like there's a lot of things out of your control here but there are a lot of things that you can do so here's some todo's get a developer social media presence okay this is twitter you are following major people in your framework you're following the framework itself if the framework has a new release bam smashing that retweet button if i go to the internet and i put in your name i want to see oh this person is in the developer world like not that they're good or they're bad but like they're at least in the same world that i am if you don't have a blog or personal site this is a great first thing to make as a crud app attend meetups like a fiend you're already doing that so congrats find the language that you're doing if you're doing python ruby js go to that meet up every single time and talk to people okay networking is like this big scary word like find a nice person and go be nice to them and talk about development stuff that's all you have to do if you can contribute to open source uh this is it can be a little intimidating and tough to get into but people you think like oh how am i going to work on rails like the framework that sounds insane but go read their documentation and fix typos people love this if you're like hey fix some typos this is grammatically wrong they love that kind of stuff and it looks good on your github if someone's looking at your github they're not gonna go look at what you did there's like oh he forked rails that's amazing like he's working in rails next step have a github these are the big three github twitter blog or personal site answer questions on stack overflow now i don't know a lot of people who are looking at stack overflow rep as like a metric but it's hard enough to solve your own problems reading someone else's description and solving their problem is even harder so if you get good at that when you jump into a random code base at your new job you'll be right at home and then lastly and probably the most important make as many stupid apps as possible like as many like dozens hundreds if you can and just absolutely dumb stuff like when trump tweets it emails your grandma just like literally anything you can think of make an app out of it okay so getting back to the first job we've done all that stuff we're prepping what do we do step one talk to recruiters i got my first job through recruiter i don't even know how they found my email she could help me up one day and i got my first job through her so that's great the recruiters that come to a lot of these meetups like go talk to them see you know who's hiring what stack are they hiring for what kind of roles are you seeing in this city do all the normal job stuff i mean you're making resumes and cover letters and sending out cold emails applying on job boards just do all those extra things you you know as the conventional job wisdom watch ryan's talk on interviewing interviewing is an important part of the process tap your network i hate this race but go talk to the people that you talk to at the meetups that's really as easy as it is like ryan also mentioned some of my best well all my best jobs have come from a friend of mine telling me about it like i had no idea it even existed and like hey john would be good for this and it works this is how you're gonna get your best job okay now coming back to the asterisk in all transparency ruby is not big in the oklahoma scene right now company wise if your goal is to get a job in oklahoma city you're probably better off as much as it pains me to say doing.net or java something js based just because that's who's here in the city and if you want to get your first job it's probably you know you should be learning the things that are here i will say that i think the quality of jobs is higher in tools like ruby like if you want to be sitting at a coffee shop downtown with your macbook you're not going to do that at like bigcorporation.js that's just not going to be how it is but getting your first job is really important it's really easy to pivot after that and remember any experience is good experience okay let's talk about how to be an outstanding junior developer so you got your first job you're really excited step one communicate really really really really well communication covers a multitude of sins you're probably going to be working with some senior developer or a boss who's trying to coach you along the way communicate really well with them does anybody remember this we're gonna do a little good idea bad idea for communication it errored the page won't load i'm stuck all these things require the person to ask you a question again to get more information when you're communicating try to give them all the information you have so they can immediately start on your problem it'll save time and also help from frustrating both you so i made a little mad lib for us it goes like this i'm working on blank but when i try blank blank happens instead i've tried blank blank and blank and looked at blank and blank example this i'm working on the user password password reset bug when i try to generate a password reset link the user's token is already empty i've looked at where the token is set and i can see the token in the database but the token is missing on line x if you send me this i know what you're doing i know what you've tried i know where you're at and like telling me hey it's on this line we can jump right there and start working on the problem the next thing is to hone your google foo you think you can google but you cannot you will learn googling well is a skill as much as being able to write ruby okay sometimes you just want to paste that whole bad boy in there just copy paste bam first hit that works well now you want to remove project specific info google does not know what undefined function who's that pokemon its pikachu is except that i already googled it to make the slide so it does so you want to remove that kind of stuff undefined function ruby much better results next use a try timer i've worked places where this is specifically said in other places where it's kind of up in the air but this is the amount of time you work on something before you ask for help this could be 15 minutes 30 minutes an hour whatever it is and you basically you want to give it your best shot and try and figure it out before you ask for help now the important thing is let's say you hit a problem hit a problem hit a problem you get help you're frustrated but you move on and then bam a new error what the tendency is is to go ask for help immediately again but reset the timer try it again remember to relax take breaks if you need to because the important part is you learning how to solve your problems not finishing the task at hand like when you finish task a they'll give you task b after task b is task c like that happens forever so for you to really grow as a developer you want to learn how to fix your own problems couple miscellaneous tips ask the duck has anyone heard of rubber duck debugging this is common in the programming world i don't remember the exact origin but there's a boss or professor who put a literal rubber duck on his desk and before people could ask him questions they had to walk up and audibly ask the duck the question and what they found is that when they asked the duck the question they figured out the answer and there's something about saying your question out loud organizing it in a cohesive way where you have to explain to someone else that trains it uses your brain in a different way you usually figure it out so before you ask for help ask the duck like if you need to literally do that that would be great if i was a developer trying to mentor you and i saw you had a duck like i would love that next take notes if you figure something out just keep a little file open when at my first job i literally had stickies that i stuck to my monitor if you figure out oh how do i add a new database column in a migration you know drop some notes down you're going to be referring to these things a lot and it it's impressive to see that when i see somebody that has taken notes and is really trying to learn and remember versus someone who's just like hey how do i do this and it's like we've done this six times like you know gotta keep progressing lastly fight impostor syndrome if you don't know what this is this is this feeling that you'll experience at various points in your career where it seems like everyone else has it figured out but you're faking it and you don't have it and you could be feeling that right now like i'm not a developer like how do i do this and this is absolute garbage i love this picture because it shows that we all have different experiences and skills and we overlap but nobody just like completely bulldozes over you like you have valuable experience especially coming outside of the programming world you can bring to whatever you're doing so lastly i want to talk about closing the junior senior gap and a lot of people when they think about you know these loose terms of junior and senior developer they think oh the senior has all this knowledge they have all this experience where they just know the answer like they see something as boom they know it and that is true to an extent like you will gain knowledge but the thing that really separates someone who's a i think a great developer and a good one is that great developers have a problemsolving system they have honed and polished this system to where yes they may get stuck but they are so fast at figuring out because they go straight to the problem they research they implement it and it works and so i'm going to give you five debugging tips you can use this from day one all the way throughout your career number one when you run into a problem don't thrash your code most people when they run to a problem they just go crazy changing stuff and you introduce like five new problems on top of the problem you already have so don't thrash your code use your system number two read the error message okay no but actually read it i've seen a lot of people it's like oh that's garbage like computer barf not going to read it like that is computer barf and part of that is just like nonsense but part of this is vitally helpful tells you what the error is and the exact file in line that it happens so instead of just going crazy in your code go straight to that line it will save you so much time next don't waste time on the impossible or at least the improbable there is a chance although it is extremely low that you will run into a core framework or language bug or a browser bug or an os level bug but the chances are you did something wrong so i see a lot of people who they're like well i set this thing to true but it's still false but i set it to true and their mind is just like blown like how could it not be true and so instead of saying how could this not be true say how could this not be true thinking emoji like engage your brain and start to work through the system of like okay it's not true accepted how do i make it true this next tip if you took anything away you take one thing this would be it when in doubt print more out i do this every single day print stuff in your code this shows you line by line what's happening what's the data coming in what's the data going out countless times somebody will be like just doesn't work doesn't work doesn't work i'm like okay print the print the first line of your function they're like oh it's not being called it's like you spend so much time and it's like your function is not even being called so like see exactly where you are what's the data going in what's the data going out this will drastically speed up what you're doing okay lastly take it one step at a time even to this day if i'm going to implement say a new feature in a web app i will set up the route and the template and print the word hi to myself and i will see that i can see the word high on the screen before i do anything else there's this tendency to like just going crazy in the code i did this in school all the time i'd get a project and three hours just going hard but all right time to run fails it's like what did i expect i typed for three hours and didn't check anything take it one step at a time and print it out trust me print it out so to wrap up i know i've thrown a lot of things at you but i hope there's some direction and some belief you can get that you can do this lots of people have done it i did it and struggled terribly hopefully you can learn from my mistakes but in the end you just gotta believe you can do it and just get after it every day a couple references for you if you want to try ruby that's a great link the rails tutorial that i mentioned like every rails developer in the world has gone through that book and it's amazing even if you don't end up with choosing rails like that's probably still a good book to go through that's the link to my extras doc and then to ryan's interview if you didn't see that talk i'm at john mosesman about everywhere on the web if you want to talk i'd be happy to talk with you help you in any way i can and with that let's have some questions yes that is it's a good question so you're saying you've learned ruby but there's not a great scene here for that yet how like what should you do next i would say i think picking another language is probably good i think you'll find that a lot of the things you didn't read people directly transfer like the syntax is a little different but the concepts are there like i said in the talk i don't think it really matters which one you pick i would talk to recruiters and see you know who's hiring whether that's dot net or something javascript based or whatever in the meantime so let me ask what was what do you think the problem was in finding a ruby job were you not able to find enough things to apply to or you weren't able to get far enough um oklahoma is or at least oklahoma city is very.net centric so i don't think that is a bad career move like you're not going to regret learning.net to work here um i think you can also depending upon your level of experience like you could keep making things like maybe there's a job out there that you could get if you had a little more exposure a little more experience but picking up something like javascript whether that's angular angular or react or something like that like that's going to directly translate into any other job you do so i don't think there's a bad option i think you have to kind of pick something but definitely go talk to the recruiters and see just what's out there anyone else yes ready for the first job or um i don't think you ever hit a point where you're like yeah now i'm ready i think it's just about continually growing and over time like things will line up because the job thing is tough because it like i said there's so many things outside of your control um i think you just have to it's kind of like when people say as i quote go the hardworking people are always lucky or something like that it's like you know like oh they got such a big break that's like really they were just you know on their grind for like two years and they were just getting after it and so it's like oh they got this amazing thing um i think there's definitely kind of a checklist of like can i make crud apps do i know what apis are have i made them you know can i do some sql stuff have i used all the major javascript css frameworks there's some checkboxes like that but i really think it's just about continuing to grow until something lines up or on the other kind of flip side is and it sounds bad but like the stronger your network is the more people you know like if i know you really well and i'm working in a place where it's like hey we could really you know we could take on another developer right now like those people are going to be at the top of my list to pull in the question is have have it's a good question have i ever uh based on my computer science background basically have i ever like directly used that in a job i got so close to using it i'm dead serious one time i got so close i was like yes i got this i don't remember what it was and then i was like actually there's a better way to do this and i scrapped it so like the answer is basically no you want to go work for amazon google facebook where they're solving like crazy problems yeah you probably need computer science but the average programming gig no honestly you don't well yeah so like the us specifically have you ever used recursion and it's like i mean like you said recursion and loops can generally be kind of interchanged um but so here's another great thing i should mention there's this there's so many resources online now i think stanford has an online class where they basically they put their cs class online and so if you need to learn about see don't you learn about those things but if you're like oh i don't really understand recursion there's tons of stuff online to go see and there's also a book it costs it costs money but it's called the imposter handbook it's by a guy named rob connery who basically breaks down all the important cs concepts you know how do you make state machines and how do compilers work and all this kind of stuff which is really not like i said very applicable but if that is interesting to you like go get that book and work through it there's a lot of i think the big overall point is there's a lot of resources out there that weren't there five years ago definitely weren't there 10 years ago it's where like just the time and money it takes to go through that degree it's not the fastest path to get where you want to go if you want to do development i guess is the overall point good question anybody else all right thank you