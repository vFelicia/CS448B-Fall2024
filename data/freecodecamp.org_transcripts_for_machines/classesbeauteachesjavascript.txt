classes classes are new in es6 at least for javascript a class is a blueprint from which individual objects are created classes provide a much simpler and clearer syntax to create objects and deal with inheritance one way to define a class is using a class declaration to declare a class you use the class keyword with the name of the class you can see here this is the class declaration the important part about this is it just starts with the word class a class expression is another way to define a class class expressions can be named or unnamed the name given to a named class expression is local to the class's body so you can see that a a class expression starts with the the variable name and for the unnamed and then the name also starts with the variable named but then this one has the class name here the named one the unnamed does not have the class name but let's go back up here a little bit i'm actually going to paste some code in here the first thing i want to talk about is the constructor function the construction function starts with the word constructor and i'll have the variables that you're going to pass in when you're creating the class and you can see that i just assigned those variables that i pass in or the data that i pass in to be properties of the function when you say this.name equals name now the class is going to have a property called name and a property called yearborn i also have another function that i put in called get age when a function starts with get that means you're going to call this age as a property and not a function when you call a function you put the parentheses after it uh when you call it property there's no no parentheses i'll give you an example in just a minute and you can see that this getter function actually calls this dot calc age which is down here so it can actually do a calculation and send the calculation back as a property so let me show you an example down here if we create a new instance of this class i'm going to put var me equals new person i'm going to pass in a name and a year so you can see i put the name of my new instance of this class and you have always when you're creating a new instance you always use the new keyword and the word person that just comes from the name of the class up here and then seeing the constructor we have you passing a name and you're born so that's what i passed in into the new person now now that i've created it i can actually use this information let me show you an example console.log and if i run this here you can see in the console beau was born in 1983. so you can see you can actually just add these variable names with with strings and when i call this me dot name that's going to take out the the name bow that we passed in when we created the function or when we created the the instance of the class and we do meet a year born it's going to call out the year that we passed in when we created that that instance here we called properties of the instance of the class meet.name but we can also call functions if you look up here we have another function what and it's going to actually log right in the function it says console.log.this.name is a person so if i type in me dot what now this time i'm going to have to put the um two parentheses after that because i'm calling a function and not just a property so let's run that and you can see right in the console it says the first thing bo was born in 1983 and it shows bo is a person there's another type of function we can put in here and that is a static function so i'm going to create a new function i'm going to type in static now when you put a function in a class and use the word static that defines a static method for a class static methods are called without instantiating their class and are also not callable when the class is instantiated and static methods are often used to create utility functions for an application so here to call the meetup name mee.what we had to instantiate it by doing var me equals new person but to call the arms function we don't need to make an an instance of it so let me give you an example console.log so as you can see instead of calling me the arms i actually called person.arms so to call a static function you you put in the name of the class and then call the function instead of the name of the instance of the class which would be me so let's run that and see what it does yeah see it says um bo has two arms you can also put in a space there okay another thing i want to tell you about is the extends keyword the extends keyword is used in class declarations or class expressions to create a class as a child of another class when you create a child it can use all the properties and the functions of the original class but then you can add some more let me give you an example so as you can see i have defined another class called juggler that extends a person so usually when you're going to use the word extends it should be in is a relationship for instance a juggler is a person so that's how i juggler extends person juggler is a person now you can see in the person class we have what if you call what it's going to console.log this.name is a person however in the juggler class we've redefined the what function and it's going to say console.log this.name is a juggler so let me show you an example of how this works first we're going to create a new a new instance of this juggler class so so i've created a new instance of the juggler class i called the juggler jay born in 1980. then i called me dot what that was the original instance of the person class and now i called u dot what that's the instance of the juggler class so let's see what happens i'm going to hit run now you can see the last two lines of the console bo is a person and jay is a juggler so you can see that for you that called the the j and the only thing in the juggler class is the what says console.log this.name but juggler doesn't have a this dot name that's because it's it's bringing in the this dot the dot name from the person class so this dot name is a juggler so it changes the what function depending on if it's the person or the juggler and the only other thing i wanted to talk about during this lesson is the super key word so if you add a the word super you can call functions on an object's parent so the parent of the juggler class is the person class so if i type in super dot what and then i'm going to clear the console again and now i'm going to run this so if you look at the last two lines now it says j is a person and then j is a juggler that's where this super dot what when it says super dot what here it's calling this command up here console.log this.name is a person which is calling j is a person because we're in the j uh instance and then we're gonna console.log this.name is a juggler so using the super command allows you to call the the function from the previous from the parent of the class well thanks for watching my name is beau carnes don't forget to subscribe and remember use your code for good