hi in these videos we are going to be talking about time complexity and Big O notation specifically in this video we're going to be talking about why you should care and what it is Big O notation and time complexity are ways of discussing how long an algorithm is going to take so that you can streamline your software or your web app why do you should care about this is pretty straightforward do you see yourself sitting on a web page that's loading and loading and loading how long will you stay there before you go to another site some people might wait longer than others but at the end of the day if you're waiting on something to load or waiting for it to do what you expect it to do it's not going to be a good product for the user for now let's talk specifically about time complexity as it relates to an algorithm you've worked with algorithms and the bonfires an algorithm could be one function or a set of functions that solves a problem instead of saying well that algorithm will take exactly 4.5 seconds it's a little bit more complicated than that it kind of depends on what that algorithm is doing and Big O notation is a way of discussing that without going into too much detail about what the algorithm is specifically doing another thing you should know about Big O notation is it's the worst case scenario everything in Big O notation is calculated for the most possible data or the most possible users so that you can kind of see ok this might not be a problem if they have one or two users on my site but if I start to have thousands of users at a time this is not going to scale well meaning it's not gonna work well for a larger amounts of data you might be thinking well what about Moore's law can't we just build a faster computer that'll solve these algorithms faster in a couple years and we won't really have to worry about it short answer is no we're talking exponentially here and no matter how much faster the computer is the problem is going to get a lot more complicated faster than the computer is going to get faster Big O notation it comes in handy if you're building a tool of our site and you want it to be scalable for large amounts of traffic Big O notation will start to point out some places in your code where that is going to young users once we get more users in the system another reason that you want to know about big onotation is it is a common interview topic even if your code runs great being able to explain why your code runs great and why it is efficient can be really really useful at the end of the day what I want you to take away from this is speed of your algorithms matters in a way that we can measure that is Big O notation