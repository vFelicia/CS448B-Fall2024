hey coders i'm cody and welcome to learning the basics of regex in javascript so start off what is regex right regex is a way to match certain patterns inside of a string so for instance if you have a string all your base are belong to us and you want to test does base exist in the string you can do that with regex so just to show you that i'll say all your bass are belong to us and if i want to test if bass belongs in the string i can just do the regex expression slash bass slash end and notice here we're using regex 101.com which i highly recommend it's like the best online uh regex tester to kind of learn to get your hands wet with regex so again we type the rejects expression base and our test string and you see that it highlights in blue so we know that our regex passes so how do you do this in javascript well first of all you want to declare a string called all your base are belong to us secondly you declare some type of regex expressions so you start that with a slash a forward slash type in your regex expression base and then end it with the following slash and then lastly if you wanted to test to see if base belongs in our stream we can say is existing and we can say regex dot test against our string and go ahead and print out is existing i'll save that file and i'll go ahead and run regex.js and we see that it prints out true so again very similar to the app on the right if the blue shows up in this string it's a true and if it doesn't show up it's going to be false right so just to demonstrate that i'll go ahead and get rid of bass i'm going to rerun regex on js and see that it prints out it falls down here so again that's the real basics just how do you test see if a certain substring exists in a larger string so we show that in regex101.com and we're also showing it in javascript over here so now that we learned the basics of testing a string let's go ahead and learn more complicated regex expressions so the first thing i'm going to cover is the carrot sign and the money signs the carrot is used to specify the start of the string has to match the register expression followed by our string base and the money sign is used for designating the inverse string so what does that mean basically it means that our string has to be base and that's it right so all your base are belong to us won't match but if i change this to base it passes again to demonstrate how you break that i'll add an extra character called a and notice that the money sign expression makes it fail if i were to remove the money sign it passes again and then again to demonstrate the carrot sign this thing it has to start with a base right so if i were to change this to z this fails and if i get rid of the current it passes again and again i'm not going to show this show how to do this in javascript because it's going to be the same you are pretty much just going to copy and paste it in and that's how you do it so a lot of these examples i'm going to stick to regex 101 okay so we learned simple original expressions for testing we learned the carrot sign which means certain position of the startup string and we learn the money sign which means a certain position at the end of the string so some other cool things we can do is let's say we have a string my name is cody and my age is 26 or 26 right okay so let's say we wanted to make sure that the string has name is something in it so again in your regex you can say name is and then what we want to do now is test that there's a array of characters or length of characters which are all a through z so in this case we can use something called character classes and those are designated with square brackets square brackets or square braces so i can say anything through a through z lowercase and notice that this will only match the first c so with character classes you need to add some additional options so it can be one or more which is the plus sign it can be the star which means zero or more there's a couple others like zero is optional you don't need to have the c and then we can also do let's say we're checking for a length so we want one to four characters i can kind of go over those later on so let's just uh stick with the basics so again we're looking for name is you know some blank fill in the blank with whatever name you want so we're gonna go go ahead and do a plus sign and that'll match any name so we change this to bob or lisa or whatever it's gonna match that and again we can do the same thing with ages so if i were to change this to age and then change the character class to zero through nine one or more again any character that we add which is a digit should match this regex expression in the moment we change this to an a or b or c it's going to fail so again as a recap we just covered character classes which again is designated by these open brackets and inside here we can add ranges of characters we can also add like let's say we only want to be one two or three for the age so notice here if i do 99 that'll fail 22 will pass 1 2 3 passes zero two will fail and you can just mess around with this to kind of make sure you understand what's going on and then the same thing with name if we were to go back and say we want a through z and then also allow capitalized letters this will match with capital kodi or lowercase cody it doesn't really matter because we're matching any character which has lowercase a through z or uppercase a through z one or more so you can do even more you know crazy stuff with this so if you wanted to add you know alphanumerics into there we can do so that'll pass let me go crazy with this read some more documentation on this but we're again we're just going to cover the very the basics of regex and using in javascript we're going to dive deep into how to define more complicated character classes so again we covered testing a string for a substring um the charat the money sign character classes we covered what the plus means what the star means which is zero or more so again this will pass if we have nothing we could just add and so zero or more characters this is a pass this will pass this will pass in fact just to demonstrate this let's get rid of the additional checks so this this will fail because you know there's no character a through z here we can also use the question mark which allows us an optional y so for instance if we said the y is optional in my name this will pass if i have cody or if i just have cod because the y or the question mark represents an optional character and then lastly i'm not sure if i just covered this but if i wanted age to be three characters and only three characters i could say again the character classes through nine but in this case i want it to be one to three characters so one will pass 12 will pass one two three will pass but one two three four will fail and technically it doesn't fail because you're still getting that red x string but will only match it against these first characters so if you wanted to explicitly end the string so if i wanted like you know in the character or end of the string we can just end it with the money sign and the last thing if we just wanted to check that it has one character or one digit in it we could just add one right so age is one so now that we've covered character classes let's cover a couple of special characters that we can use in register expressions which allow us to instead of having to write like you know the character class zero through nine we can instead just do slash d so slash d plus means match one or more arbitrary strings of digits slash d it stands for digits um if i do name is i can do dash slash w which kind of matches um just like a name slash w is any word character equal to a through z capital a through z zero through nine are underscore so that's more useful like variables or whatnot we can test for spaces so if i wanted to say verify there's a space in here i can do slash s so if i don't add the space it fails i can test for a new line character so this will fail unless there's a new line here you can do t for tabs there's a bunch of other ones but i'm not going to cover all those all right so that's really cool we can test if a string matches a certain pattern but sometimes or most of the times you actually want to extract that string that you found and use it in your program so for instance let's say we have a string that says my name is cody but we want to actually use the name and store it in the variable inside of our code so in that case we can use something called grouping so i'll go ahead and surround this character class with a through z one or more with parentheses around it and what grouping allows you to do is in the code we can say give me match index 1 and we can set that into a variable print that out or do whatever we want so in javascript how do we actually do that again we can change string to this my name is cody the regex will be the exact same as what we saw here and now what we can do instead of using the method test so instead of regex.test we do register.exec for execute on this string and then that will give us a match so in this case we can say if match else console.log no match and then if there's a match let's say we just want to print out the name that the person provided we can say console.log name we say const name is equal to match of index one so if i were to run this we see that it prints out cody right because that is the group of index one which again in regex101.com we see it's group one this is the whole blue string is group zero and then let's say for instance you know we change name to something else so here we say zach and then we print this out or run this file again it's going to print out zach now there is no name let's just say we have a bunch of characters or digits there for whatever reason this should print out no match because match is going to be undefined at this point because regex.exec failed so that's the basics of grouping so if we want to do something a little bit more complicated so for instance we have a string of separated file names so we can say file a dot mp3 we have file01.mp3 we have file02.mp3 we have test.csv and we have other.txt if we wanted to take apart the string and find everything which matches on mp3 and just grab the grouping of the file name we could do so like this so again we're testing for dot mp3 so slash d mp3 and then we want global so in this case we're going to have to add a global flag here to match anything in this string because without the global flag it just matches the first instance and that's it and then let's say the file name is any word like so and we need to extract that so let's go ahead and add a grouping on it so again this regex gives us any file which matches our mp3 at the end and it also gives us the group of the name so to use this in javascript let's go ahead and change string up here to our list of file names let's update our regex here to be any slash word one or more followed by mp3 and set that to a global then we execute that regex on our string like we did before and now in this case what we can do is instead of just saying if match we say while there's a match match is equal to regex excc string and i can say const file name is equal to match one i'll go ahead and run that something it's because i had that as a const and i need to be able to redefine it so i'll go ahead and run that again so notice here it prints out file a file zero one and file 0 2. so looking at the code let's you know walk through this and figure out what's going on okay so this we're going to test the regex against the string and for every time we find anything it's going to set match equal to the next file that it finds so that's why we can kind of loop through it and keep calling mash equals regex.exec multiple times so the first step is online seven we grab the first grouping we print out the file name and then we do it again which is going to keep on traversing anything that matches that mp3 multiple times so again another recap we learned how to test regex against a string to see if it something exists in it and then we also test how to use groupings to extract certain data from the regex so again i can go on and on with all the different you know special cases of regex but i think what the best thing you should do is just keep on trying new things like think in your head of different string examples or real life scenarios in which you need to extract certain things from a string save them to a variable print them out or store them in something and then just try different objects expressions make sure you understand what's going on mess around with all the different regex flags you can use such as ins let's see insensitive means case ignore i don't even know what some of these mean um but honestly i think the most important ones would be global or case sensitive and then know that regex kind of applies to any programming language so as long as you have a good understanding of how to write your objects expressions you can translate the javascript python ruby bash whatever you want you can translate regex to and it really helps you out down the road if you need to do some type of string manipulation or string matching i think that kind of wraps up you know how to use the basic basics of regex in javascript and again find other resources if you wanted more deep detailed information about regex but i think that's a general overview of how to use regex in javascript to get most of the things you're trying to do accomplished at least for beginners alright remember to subscribe and like if you thought this tutorial was pretty good be sure to leave feedback and ask any questions in the comments section of the video and again thank you so much for watching