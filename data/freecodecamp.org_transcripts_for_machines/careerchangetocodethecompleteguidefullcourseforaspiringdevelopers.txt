if you are considering transitioning careers to become a software developer watch this course this course is designed to prevent the common mistakes and missteps that discourage many beginners it offers Clarity tools and strategies to efficiently achieve your coding goals whether that's securing a highpaying job launching a tech startup or just exploring the world of software development zuen prab was a lawyer and transitioned to becoming a Google engineer now he helps others with their career transitions hi guys welcome my name is Zubin prap I'm a software engineer and a devell engineerr currently chain link Labs before this I was Google as an engineer and before that I was a corporate lawyer for over 15 years and I went into executive management for a while had my own startup for a while that's kind of how I learned to code and this little mini course that I'm releasing for you guys through free Cod camp now is an updated version of the original course that I released 3 years ago um maybe four years ago actually now where I when I finally succeeded in my career transition from lawy I was 38 or 39 at the the time and I'd become a software engineer and I you know got the offers that I'd applied for I was you know top of the world and I'd promised to Quincy the founder of free code camp in a podcast with him right after I completed my career transition that I was going to make this course that documented everything that I'd wish I'd known like three or four years before cuz I had really struggled for three or 4 years trying this thing trying that thing you know I was in my 30s there was a lot of sacrifice and risk involved a lot of fear and so I tried all sorts of things to to to make the transition and I kept failing I learned all sorts tried to learn all sorts of tools and languages and I I didn't realize that there's a big difference between learning how to code and actually becoming a professional software engineer massive difference and I didn't appreciate that back then so it cost me hundreds of thousands of dollars in you know in Lost income and and all kinds of things and four plus years of real struggle and selfdoubt and you know Destro damaging my confidence and having to rebuild it so I promised Quincy back then um during the podcast that you know I'm going to do this course and so I did release it and now this is the updated vers version this is the history of the course so this course is really I call it you know everything you need to know before you learn to code because it's not about the actual coding itself it's about all the things you need to know to build the right plan to set the right expectations and to know how to put yourself through the process of transitioning from being a nontechnical person to a professional level software engineer right so it's how do you build a plan how do you become the sort of person you need to be what habits and practices and expectations do you need to have so that's really so I call this the you know before you learn to code everything you need to know course now couple of things just to be very clear this is not really probably well suited for people who are just students who've never actually had a career before and the reason I'm saying that is I finished Law School in 2003 right so that's 20 years ago I I've lost touch with what it's like to be University student these these days and and approach the job market from that perspective this is very much a course for people who are in busy careers already even if they're in it but non technical noncoding sort of careers or any other career like i' I've coach people around the world now you know lawyers therapists you know theater personalities all sorts of people security cyber security folks I've coached them all you know on this process of career change and becoming a professional coder so this is for people who have existing careers who are looking to switch careers who want to acquire Advanced like you know professional level coding skills and become professional coders whether it's data science data analysis software engineering they're not you know you could argue whether or not they're coding but I'm trying to include anything that involves scripting or software engineering in this right so this is for that kind of person uh I am not an expert for for students I'm sorry but I'm not anymore I'd be lying if I said I was it's been too long uh I've lost that perspective right but I am very much I consider myself to be an expert in career change because I've done it myself three careers in four countries and most recently to software engineering in my late late 30s you know even ending up at places like chain link where I I'm now and software engineering um you know at at at Google before that right so this is really important for you guys to understand before you go now I had no way of knowing how long the this entire Journey was going to take me when I was trying to transition and you know because I I tried and failed like I said four times before all the way through my mid30s I tried every year I tried a different thing for several months and quit and fail and so that's what I'm I'm trying to achieve here is to save you four years if I can or more right and and help you understand what the process is going to look like so that's a bit of an introduction about me this is going to help you understand what to expect from this course it's not going to be about HandsOn coding it's meant for those of you who haven't started learning to code yet or maybe you've been trying for 3 or four 5 months finding it frustrating not sure what to expect what's this cost it's not that long and see just all the tools and techniques that I had to develop over those four years this course really represents my diary entries for all those four years all the things I did wrong I'm sort of re repurposing that into actionable items that you can use so that's a bit of introduction and I hope you get a lot of value out of this course and if there's anywhere I can help you reach out on LinkedIn or Twitter or whatever I'll see you in another video welcome to this course on before you learn to code all the important things you need to know to avoid failure and discouragement on your journey to code if you're here it means that you're either interested in starting to learn to code or you've just started and are a code newbie either way it's super exciting and I'm glad you're here I can't wait to share some of the learnings that I've had with you and so let's just get into it now you can get a sense of this SC from the website matchfit mastery.com but I'm also going to take you through a high level introduction of the course right now so what is this course I have designed this course for people like you people who have either just started or are seriously thinking of learning to code and this course teaches you all the skills that you need to learn to code but it does not teach you to actually code that's a separate topic alog together now most people just Dive Right into coding right into trying to teach themselves coding without first adequately preparing themselves it's like running a marathon but with zero training it it just doesn't work because then when you fail or you feel overwhelmed by the situation you just assume that you can't learn to code and I know this from personal experience because that is exactly what I did not once but twice twice I tried to teach myself to code by just throwing myself into it without a proper plan and both times I failed so what did I do right the third time around well that's exactly what this whole course is going to be about so the first time you go through this though I do recommend you do it end to end even though I've designed it as a Hop On Hop Off experience where you can dip in and dip out I really recommend that the first time you go through the entire thing even if you do it at 1.5 speed just go through the whole thing because that'll give you a sense of what to expect not just from the course but also from coding generally so who is this course for then well it's for anyone who wants to know what it means to learn to code and how to build an effective learning plan around that and what to expect along the way it doesn't matter whether you've got any coding experience it doesn't even matter whether you've seen a line of code not necessary all that matters is that you're thinking about it or you've just started or have tried before and have failed if you want to ensure that you save time and effort and money on your journey then this is really the the course for you that's why I made it because when you buy it you get lifelong access which is fantastic because I will keep updating it from time to time with new tips and techniques that will save you even more time money and energy now I know I talk about these three things these three very important resources being money time and energy but in my view the most valuable of these three resources is your time because money and energy sort of comes back you can go up and down but time you just just can't recover it lost time is lost time and so a lot of the focus on in this course is really on saving you time and through that of course you're going to end up saving effort and very likely money as well I personally wasted more than eight months of my life and over $1,100 teaching myself to code in very ineffective ways but 90% of my learning ended up coming in less than six months and for less than $200 it's that kind of learning and optimization that I want to share with you in this course but it begs the question who am I and why should you bother listening to what I'm saying well a little bit of background in me I am a lifelong learner I qualified as a lawyer many many years ago and I practiced corporate law for over a decade in three countries I then changed careers did an MBA went to the management track along the way I taught myself product management skills I taught myself how to play play the guitar I taught myself how to code and so I've evolved over that period certain habits and techniques to learning and optimizing the learning that anyone has to go through when they acquire a new skill and I realized that my entire process was so inefficient and so slow and most people still do the same things it's it's not an efficient process but this course will give you some efficient techniques or rather techniques that'll make it a lot more efficient for you so so what I did in a year you could legitimately expect to do in much much less time and probably much less wasted effort as you progress through this short course I hope you're going to want to ask a lot of questions and clarify some things I think that's a fantastic way to learn and consolidate your learning I encourage you to do that and I encourage you to use the Q&A for if available because that way other people can learn from you and participate in your Learning Journey if that is unavailable for whatever reason or you feel you need to reach out to me in another format I'm always available on Twitter as well and sometimes on LinkedIn though I'm a little less responsive on LinkedIn for a number of reasons but Twitter is great feel free to reach out anytime and I will do my best to help you so now that we've covered how to reach me who I am what this course is about and who is for I'm getting really excited I'm um I'm really excited for you and I can't wait to jump into this journey with you so let's just Dive Right In in the next section we going to talk through the goals that I have for you and for myself in this course so I'll see you there okay welcome back to this section in this section I'm going to take you through the main course goals that I have I have two categories of goals that I wanted to achieve um my personal goals in making this course and my goals for you within the category of my personal goals for this course number one I want you to feel and know at the end of it that you've made a good investment in getting this course number two I want to save you a lot of time money and effort and three I want to give you the selfconfidence to pursue your learning objectives now let's talk about my goals for you this course is really about you I haven't lost sight of that and it's about giving you the best knowledge and tools to achieve your learning objectives so it's about making sure that at the end of the course you have the these things one you are equipped to save a lot of time money and effort two you are crystal clear on the following your coding goals your coding plan or path to achieve these goals the steps routines habits and timelines required to achieve your goals pay careful attention to those specific choice of words because they're all very deliberate the fourth goal I have for you is that I want to ensure that you can recognize myths or mismatched expectations that stand in the way of your learning to program fifth goal I want you to be able to use effective tools and strategies that make your coding Journey enjoyable positive and as discouragement free as possible because believe me there's a lot of discouragement that you will encounter I want to minimize that goal six for you is that I want you to be able to recognize the pitfalls and diversions that you will inevitably encounter so that you can make decisions that help you achieve your goals rather than delay you or derail you the seventh goal is that you can proceed with confidence resilience and Clarity and be a highly effective lifelong learner and that's something I'd like to emphasize here that the skills and the abilities um that I'll be talking about over the course of this um program really to equip you to be a lifelong learner while it's wrapped around a concept of learning to program computers almost everything you learn in this program is about lifelong learning and the ability to keep learning as you proceed through life now I am convinced that you can do all of these and more everybody can it is not easy but it's not impossible in fact it's totally achievable for everybody so if you've come this far I'm absolutely 100% convinced that you've got the willpower you've got the hunger you've got the drive to do it so don't stop don't ever stop okay now that we've established our course goals let's talk about how you can get the most out of this course the suggestions that I'm going to put forward here are based on largely my personal experience but also the experience of all the super Learners around me that I've read about or met personally this is something I've studied and researched extensively and and it really does boil down to two things preparation and mindset or you could call it mentality or something else but preparation and mindset are the two basic keys to your learning objectives so now sharing these with you is really the first step in helping you achieve your goals and I know it might sound a little bit like I'm preaching or something um and I apologize for that but this is just so fundamental that your success uccess in all the sections from here onwards starts with you getting good at this preparation and mindset so to get the most out of this course I recommend you practice the following mindsets note now that I'm always using the word practice in this course it is a common mistake to think that you need to have these skills right off the bat that they come out fully formed or that they natural and inherent in people that is a complete complete myth the difficult skills in life do require us to overcome our natural inclinations which is laziness and inertia anyway I recommend that you practice these mindsets over and over until they become a natural part of your thinking one inertia is natural normal and you must expect it look there going to be days when you just don't feel like it and that's okay sometimes you do need a break especially when you're learning difficult skills and there's a bit of mental overload what's known as cognitive overload but off days or days that you take off and not do anything are the exception they cannot be the norm so you must make sure that your off days are only the exception that's the bit that takes effort two you should see your frustration as a signal that something needs a bit more work now I will talk about this a little bit more as we go through the course but some things are signals and some things aren't and frustration is a signal that whatever you're tackling at that point in time needs a little bit more work it's it's not that it's too difficult for you or that you're not smart enough that's the wrong message to take out of frustration now both may feel true in that moment you may really feel that you're not smart enough or it's too hard for you it's insurmountable for you but with effort both will be proved to be false or in other words you put in the effort with the right mindset and you will show to yourself that you are smart enough and it wasn't that hard over time it will yield to you so frustration is just a signal that something needs a little bit more work and effort on your part or that you must just keep going three try and have a growth mindset and not a fixed mindset so this means that you should try to view your skills as a dynamic thing something that evolves and grows and develops and improves over time don't see yourself as fixed or you will feel stuck and then it will become true for you that you can't actually grow the mindset is critical here in fact these ideas have come from a phenomenal book by a psychologist called Carol Dre um the book's called mindset and it's it's an optional reading I'll include the um the links in in the in the notes to this class um or for a short synopsis you may want to check out her popular Ted Talk it's in fact a very highly regarded Ted Talk on exactly this side subject the growth mindset vers versus the fixed mindset number four remind yourself that time and energy will combine together to help you make progress now another way to think of this energy is to think of it as effort the point is that without putting in both time and effort SL energy you are not likely to get to your goal you can invert this concept if it helps and think of it as the only thing separating you from your your goal is time and effort that's it number five expect and accept that your assessment of time and energy will almost always be wrong now this is unfortunate but true in fact it's a wellknown phenomenon documented and called the planning fallacy again I'll include some um notes and URLs if you want to look at it it's not essential but it's just good to know as part of your preparation that these things are normal and common and well documented now this planning fallacy where things take longer or more time and energy um than you anticipated it is just part of the learning and as time goes on you will get better at at sensing that that's what's going on but it doesn't mean you have to like it I totally get it but do try and accept it it's possibly a fact of life that we just need to live with now the more time you put in the better you get at assessing how much time things will take so initially you'll get it wildly wrong and over time you'll get much better at estimating you probably don't remember just how hard it was for you to write to learn to write the alphabet for example um but if you watch a Kindergarten kid you can see how slowly he or she forms the A and the B and the C and the D it's really really hard for them sometimes um they feel it's too hard um when they can't remember the shape of a given letter now it's the same principle for coding or for anything else that you're acquiring a new skill that you're requiring at first it's going to be really slow and frustrating it'll be cognitively or mentally very hard for you and that means it will take you longer than you're secretly hoping so just be mindful of that develop the mindset that that's normal it's part of the growing process don't be discouraged or too frustrated by that okay you ready good let's keep going to the next section okay welcome back in the last video we talked about the essential mindsets and mentalities and attitudes that you need to have in order to get the most out of this course um as you probably know learning to code is like any other project it requires a framework a lot of planning um monitoring your own performance your direction your pace and the outcomes you're achieving when you get off track you need to revisit the goals and bring yourself back on track but for that you need to actually have welllaid out goals now there are tons of Frameworks that say the same things but with different kind of words a common framework that can be used for these kinds of planned activities especially personal development projects um which I favor is called the five W's and one H the five W's are Y what where who when and the 1 H is the how but you know to be honest I think the how is covered by the what where who and when it's implicit and encapsulated in all of them to me all of that adds up to the how so in the rest of this section of the course not this video just the section of this course we are going to apply this 5w framework to you specifically this framework will help you achieve one of your goals total Clarity that's the goal that's what this framework is going to help you get clarity on your expectations from yourself from the process of learning and your definition of success we need Clarity on all three so at this stage I think it's probably a good time for you to pause a bit and to think very carefully and I mean this just pause here and write out your expectations what do you expect from yourself over the next 12 months in terms of your coding Journey what behaviors and commitments are you prepared to make to what do you expect from this process of learning so this could include a slow but steady rate of improvement or you would expect frustration or a sense of accomplishment Pride progress next have a think about what success looks like to you it's very hard to know we've succeeded if we're not clear on what it looks like now visualizing or identifying what a successful outcome looks like is is a hard one and most people don't spend enough time in being specific but by defining realistic but big goals and being very clear on how you would know when you have achieved them you can keep yourself very inspired and motivated so definitely take a moment and think about those three things but you know don't worry too much as this is not a onetime exercise you will need to keep ref returning to this and refining it all along your journey as you get more information as you learn more about code as you learn about yourself and your learning style keep coming back so this is going to be a dynamic and constant exercise but for now it's a great idea to do some initial thinking and expectation setting right away so stop now and do it okay done that good now that you've done that hold on to it sit on it for a bit um over the next few sections and videos we're going to spend time on each of those five W's and this will help you think deeper on each of your answers uh refine them and improve them so that you have total Clarity in your mind about what it is that you're seeking to achieve and that Clarity is going to be your compass through your entire coding Journey this is really important guys all right I'll see you in the next video okay welcome back in the last video we talked about the five ws and how each of them is really important and integral um they essential steps in you putting together your plan to achieve your learning goals now in the next few videos we're going to talk about each of those five W's and we're going to tackle each of them one at a time and go into some amount of detail and let me tell you this is going to be one of the most important exercises in selfreflection you're going to do these five ws are going to be the things that you come back to over and over and over again every time you get discouraged or sidetracked or you know derail as part of your Learning Journey um there's going to be a lot of information that's confusing and that you're going to feel very conflicted about and this is the stuff um the five ws in particular that's going to really really help you decide what to do next reorient yourself towards your goals and just pursue them so a very very useful framework and going to be an ongoing part of your journey so let's get started okay well the first thing I suggest we start with is why you want to learn to code so why are you learning to code have a good think about this I've got to admit when I first asked myself this question it seemed totally obvious and I took my first response the most superficial response as the obvious right answer that was a mistake the reason it's a mistake is because sometimes we take the first answer as the real reason but it's not the first answer is in fact rarely the root reason as to why you want to do something the way to get to the root reason is to keep asking yourself why so literally ask yourself why you come up with an answer ask yourself why that answer now this is a little more clear with an example so I'll share with you my personal example and this is a snapshot from about one year into my first attempt to learn to code when I first started I really hadn't thought about why or what or made any plan and that was a huge mistake in hindsight it cost me a lot of time and money and energy I just decided instead that I wanted to write code so here's my why from back then why to write cool apps now that seems like an obvious and very reasonable answer and I dare say a lot of people have that that thought in their head but it's insufficient it's not the whole story and the problem with this answer is that it does not give you enough Direction Why because anything that could help you write a cool app then becomes part of your learning plan and that is the wrong way to go about it it's dangerously general what sort of apps mobile desktop web apps hybrid scripts now I learned this the hard way a year after getting sidetracked and overwhelmed and doing too much irrelevant stuff instead it should have been like this why to write cool apps why I want to launch my own product why to pursue my entrepreneurial dreams why because I believe that this is what I would most enjoy in my life now at some point if you ask yourself why enough times you will get to something you believe very very strongly in this is something that is fundamental to your reason to code this is very very important because it helps to answer the next question which is what do you want to learn to code there are so many options here so it is very important to work backwards from your goal and here is a very important test the answer to your what must correlate significantly to your why here's an example for me what do I want to build a cool app okay what kind one that I can monetize into a product okay what kind of product some sort of web app or software as a service so what do I need to learn then web development front end backend security and penetration texting maybe not so much of that Which languages help me do most of this actually does the choice of language even matter now this may seem obvious and easy but I can promise you that if if you're doing it properly this will not be an instant exercise in fact it's going to take effort you may need to spend an hour or more really thinking really thinking hard and once you have your top level learning objective that is your primary learning goal then you need to break that down into smaller chunks for example webd what does that mean front end back end or is it safe to ignore tutorials about authentication and security and database design Etc let's start with web development Basics then for the front end perhaps well that's just HTML CSS and JavaScript now your goals may be different maybe you want to get a job as a mobile developer or a job as a backend developer in python or something like that but you need to be crystal clear about your objective so that every hour of study and research that you invest is in a subject that takes you closer to your goal directly and by that I mean the shortest possible route between you and your goal some subjects may appear to be related or appealing or relevant um but are they critical to your goal and you can see here that when you pursue the goals that are not quite critical or the learning objectives that are maybe indirect um and merely represent nice to haves rather than the absolute Essentials your path to success is extremely convoluted and twisted and messy that's why it's important to focus only in the musthave skills the minimum skills required to attain your goals and not be distracted by the nice to have skills when learning a new skill focus is the absolute key and the less topics you do means the more progress you're going to make so be very focused on the minimum requirements to achieve your goal and separate your learning tasks into the musthaves and the nice to haves there is no one right answer so this takes practice and refinement over time and like I said discipline now it's your turn take a moment step away from the computer or your phone and write down your wise followed by your wats and make sure that they correlate then come back and put it down in the exercise that follows this video and share it with others welcome back in the last video we covered the first of the two W's which is why you want to learn to code and what you want to code now in this section we're going to talk about the third W The Who specifically who are you going to get support from on your Learning Journey as with any Journey you need a good map and if you're a hia you know that different Maps can cause confusion and frustration the same principle applies to learning a new skill like coding finding a person to model is critical because that is the best map or Compass to have to choose the best people you need to have done the exercises around identifying what you want to achieve in the previous videos now just a quick side note and I apologize but I'm probably going to repeat this several times but it's really really important anytime you adjust one of the W's in your 5w plan please please make sure that you examine all the other W's and update them as necessary all right getting back to choosing the best people my suggestion and my experience has been it's best to choose one or two people who have done what you would like to do if they've achieved your goals that is they've done what you intend to do then they are the people to model that's it now very quick update for 2024 because of the rise of the way social media has started to influence people and just the amount of content out there that's being produced by people I think it's now even more important than ever before to distinguish between opinions especially since there's no shortage of that on the internet and actual advice and the definition I adopt which I found to help me a lot uh which I hope will help you is opinions are what most people have as a point of view and usually they may or may not actually have directly done or U Been uh experienced in what you're trying to do however advice by definition to me can only come from someone who's done exactly what I'm trying to do who have direct lived experience of that everything else is just an opinion and I've learned especially as more and more stuff comes out in the internet to just tune out that it's not so much who I follow or who I listen to anymore most of my work is spent tuning things out right and just finding one or two you don't need more than that people who actually done what I'm trying to do um and who are able to share their experience and it ideally somebody really close somebody who I can meet in person if not somebody I can speak to on the phone or online and if not interact with you know via um link or whatever it is right so those are the layers so I'd encourage you to really be strict about the kind of people you take uh information from because to be honest N9 times out of 10 especially these days a lot of information is sent out by people who've never actually done stuff they may have read a book or you know um followed some other influence and they're trying to sort of build expertise in that area to be honest without having lived the experience if you haven't actually gone on to to Rome you can't really describe what Rome um is like to someone no matter how many YouTube videos you watched right so that's the kind of analogy I'd use there so think about that very carefully and try and protect your focus and your mind space as much as you can by tuning out excluding rather than let letting too many points of view come in because that'll just confuse you a lot that's the most important and probably the only really meaningful helpful rule think of them as mentors or models I mean pick pick a label that makes you happy the name doesn't really matter the important thing is how do you find these people well in some cases you may actually know them and you'd be surprised at how many very very eligible mentors and models are actually around you just don't overlook someone only because they've not yet made it big or found a job you know there may be 3 months or six months ahead of you on the journey but that's very valuable too and then there's always social media I've found great success with looking up people on Twitter or you YouTube and Linkedin and just reaching out and often online communities are great places to find people um you can get inspiration from or get guidance from personally I found fantastic models from online communities like the free code Camp Community some on RIT some slack channels and so on now it's tempting to go a bit crazy and spend all your time on these social media sites and you know accumulate a bunch of people that you can go to I suggest you don't do that that'll actually waste you more time then it'll save you in my experience the optimum range is you need one to three solid reliable trustworthy people and while many people may not be as available as you would like they are usually more available and approachable than you think even if you reach out C on on Twitter or even YouTube so just reach out there's only benefits to be had you may just find yourself a fantastic model who's happy to help you you should set your expectations what you want from these models just practical advice not inspirational advice inspiration is good but at the end of the day it can run out whereas practical advice will make you move forward so I don't generally think that having models like billionaire startup Founders is very helpful it can actually be counterproductive especially since it's hard to separate fiction from fact when it comes to learning from them and their experience unless you happen to know them personally and then they can have an honest conversation with you about their experience so let's now talk about in what moments or what times along your journey that you're going to need a mentor or a model the answer is really anytime you're confused about what the right next step is for you do you want to learn this Frame framework should you build the skill should you learn um this particular text stack should you apply for that kind of job these are the questions you can take to a good Mentor a great time to consult your Mentor or one of your models is when you're receiving a lot of conflicting and confusing information because they can help you when you're stuck conflicting information is a big problem and we'll talk about it later this happens quite often especially initially and so Saving Time by turning to someone close by to help explain things to you or give you a valuable perspective is worth hours if not weeks and days of your time now the internet is full of opinions so getting conflicting information happens all the time and some of these opinions I should warn you would probably suggest the opposite of what you want or where you're headed that's okay you just need to know when to listen and when to ignore these opinions and that's often easier said than done that's where mentors can help also having a clear line of sight with your goals and your five ws will help you decide which opinions to listen to and which not to now rather than getting stuck in circles in your head it's often just better to talk to one of your mentors a model who's been through that sort of confusion before ultimately folks the role of the mentor is to make sure that the next step you take is the one that takes you closer to your goal that's what you end up using your Mentor fall now they'll not always have the right answers they may not even agree with you and that's okay you need their perspectives to test your assumptions and your needs against your decisions that you plan to make they will help you make a better decision and that could even be something as small as avoiding a misstep or avoiding wasted time or barking up the wrong tree something that could derail you if they can help avoid that they've done their job as a mentor or a model ultimately they're there to help you make the best choice The Best Next Step which is much easier when someone else has walked down the path before they can also give you a perspective on what they went through and how they approach similar problems or conundrums that's really really valuable sometimes and I've had this a few times they'll give you advice that they wish they really had and and in my opinion if someone tells you what they wish they had had and actually gives you what they wish they'd had that's worth your weight and gold because they're saving you the time and effort and money that they may have lost and preventing you from losing that a trusted advisor who did what you want is really worth a thousand times more than someone on opinion who has never wanted what you want or maybe wanted but never actually tried so limit the amount of time you take these opinions another tip Twitter advice is just as valuable as a coffee Meetup if it gives you the answer you're looking for so don't be specific in the format of the mentor interaction the idea of a mentor interaction is to get you the information you need to take the next step all right enough of this section I'll see you in the next video goals like work they they follow Parkinson's law the work just expands to fill the time available for its completion that's just how it is so that's why I guess people talk about smart goal setting smt which is an acronym and it stands for specific me measurable achievable realistic and time bound which is really what this this video is about it's about the T or the when by the time bound aspect but to do that well you need to ensure that you've correctly broken down your goals so it's a little bit more complicated than just setting a time or when by date one very common mistake in setting timelines for goals is that the goals are just too large and they're nonspecific and they're not broken down into specific pieces so for example you could say I'm going to learn to code by December 2019 but you won't know when you've completed that because learning to code is just not specific enough and arguably the timeline is too far away setting a far away timeline for a large goal is kind of meaningless but it's done very often instead you'd be much better off breaking down the large goal into smaller measurable goals or sub goals that are easy to cover with metrics and ideally there'd be a metric that you can track and measure daily or very frequently maybe twice a week or even weekly some examples could be I'm going to finish this 3hour course by Sunday evening then I'm going to do 2 hours of HTML every single night so I have the basic concepts of HTML down by the end of the week after that I'm going to understand the basics of CSS with that 4Hour Long YouTube video and I will finish that by Wednesday night so the trick is to break down into smaller chunks that are very obvious when you've achieved them or completed the Milestone so a tutorial is either complete or not a video is complete or not a section in this course is complete when the video in that section ends these things are clear they're clear lines in the sand you know when you've achieved them there's no question about whether the goal has not been achieved or has been achieved it's pretty binary these kind of goals will also give you an idea of the size of the task um which means you can assess the time better another thing to watch out for is it's best not to go too far into the future as you will Lo lose motivation it's actually really important as a learning strategy to give yourself lots of quick wins constantly as that will give you the clear sense of progress it'll keep you motivated and energized because you can see progress the sooner you achieve a goal the more likely it is you'll develop the habit of succeeding at achieving goals because you're constantly getting the reinforcement feedback loop that you're achieving your goals and one last thing for you to keep in mind before we close out on this video you know sometimes life does get in the way and it slows you down and that's okay life happens just make sure you're not the one slowing yourself down a couple of videos ago we did talk about you know off days are all right as long as that's not the norm so similarly if life gets in the way that's understandable don't beat yourself up set very hard to achieve timelines that's important because it'll make you more confident and focused but at the same time if life gets in the way just readjust those timelines a little bit but keep the smart principles in mind all right on to the next video okay so in the last video we covered the fourth W which is whenby and now in this video we are going to talk about the fifth and final W which is where in the context of your learning plan where means where you're going to learn from that is what resources and learning formats work best for you to achieve your learning goals I will start by sharing with you how I worked out my best learning format over the years and how that changed so back when I first tried to learn to code it was about 2014 and muks that's massively open online courses which is starting to become mainstream you can see from this chart how it was still early days back in 2013 but back then I discovered two things about myself one is I was used to learning in classes and Via books two I hadn't really considered video as a way to teach myself and that took some getting used to I mean I finished University in 2003 and the world was a very different place then Google wasn't even listed as a public company back then bit by bit I did start to get into videos but I discovered that a lot of the content was by technical people for technical people and presumed a certain level of prior knowledge which wasn't that big and a friendly for someone like me me so I found it was much easier to just use books even though some were slightly outdated bit by bit though it became very intimidating for me to see these massive and thick books sitting on my desk each covering a lot of content but you know at the end of it they sort of tell you that you've only just started to scratch the surface so it was visually and intellectually quite overwhelming to have all that content and feel like progress was incredibly slow over time I then discovered other resources that started to pop up really valuable resources like free code camp and code academy and code Avengers um that all offered a multimedia experience while making you actually write some code to get a real feel for it over time I return back to muks especially in places like udemy and coera where the content had started to mature quite a bit now by this time keep in mind it was 2018 and I'd already quit twice before that but between 2014 and 2017 while I kept dabbling and trying it occasionally a lot had changed online the quality of the content the design of courses and also the shared number of coders who were sharing their knowledge openly online for free YouTube had become a huge resource for me following that I started to turn more and more to tutorial sites online places like tutorials point I even found a few us coding boot camps that had um sites that helped you prepare for their entrance tests that were incredibly useful in getting me to practice fundamental concepts but you know all this over those three years took a lot of trial and error and cost me an enormous amount of time and energy and frustration I really think that had I had the benefit of something like this this course that you're doing now I would have got the same results with onethird the wastage of time so I'm going to give you some of my learnings from that period in my life steps that help me choose the best learning formats and I really believe that these steps are going to optimize your path to your goal number one you take your first learning goal or objective and then you learn that and Achieve that goal from different sources so let's say for example you want to try to learn the different types of data and a programming language and how to assign and recall a piece of data in a program let's say you've even started with Java and we'll get into choosing the right language later on in this course but let's say you start with Java so what you should then do is first try an online blog or tutorial or some form of text learn the principles from there then you move on to a classic textbook and see if that works for you then you go and listen to a podcast then maybe watch a couple of YouTube videos and then do it on code academy or free code camp or you know both or what you choose the places you want to do it from number two when you do the same thing from so many different resources you will find that you get a lot of practice and reinforcement of the principles like these fundamentals actually get quite firmly and trenched in your brain which is exactly what you want but more interestingly you're going to also have a sense of which format was really effective for your learning maybe you had a urea moment while listening to a podcast or watching a YouTube video or you know in my case for example I found that videos took me less time to absorb critical information than reading a tutorial did and I was able to comprehend and assimilate and recall much better when I watch videos so you got to assess the format that works for you not everyone is going to love videos the way I ended up loving them towards the end the third step number three eliminate a few of those learning formats by choosing only the top two maximum three formats that actually worked well for you once you've got your top three two or three formats you repeat this process all over again with your next learning goal you try again again but you confine yourself to those top two or three formats keep tweaking and measuring your results and seeing which ones work really well for you and you'll find the different topics um are better covered by different resources and you'll discover that with time and practice what is really important here though is for you to monitor your learning Effectiveness over time as what works for you today is not going to work for you that well in 2 years if you've evoled you'll find that you can actually use other learning resources that today are too hard for you but are actually really appropriate for you in 2 years time okay so let's quickly recap what we learned about in this video we've talked about different learning formats we've talked about how some work better for you and some may not work that well for you how you've got to start an iterative process of experimenting and finding out which ones work really well for you by choosing the same learning goal and learning what you need to learn from different resources hey guys just a quick interlude here to update for 2023 2024 figuring out out where to actually learn from is now much harder than it was even four years ago or 5 years ago and the reason is you every year we double the amount of data produced by Humanity through digital content right so literally every hour there are more YouTube videos being produced that most people can consume in a lifetime and so what's happening is there's a lot of noise in the system now which means it's really hard to figure out what content is going to be relevant for you right so I fully recognize this is a problem some of the previous comments I've I've provided in the training oh it Mak come up in later parts of this course over and over again is figuring out what's the difference between opinion and advice so look out for that that section as well but in general it's also important to know that a lot of coding tutorials and material are written by coders for existing coders looking to adopt new technologies for those of you who've never coded before that's not what you need to look at you will absolutely overwhelm yourself instead you need to be looking at coding resources for absolute newbies who've never coded before that's that's a little bit harder to find and they're also you know harder to sort of make much progress with because they literally cover just the beginning but you need to layer and layer just like a cake you need to add layers to your learning right so look for stuff that is not for example here's an example I once got caught in this thing about you know python for programmers this course right but what I didn't realize and realize is that the title actually kind of hints at it it says python for programmers which means it presumes that you're already a program and you're trying to pick up a new language being python right and I was a complete beginner then I knew nothing about programming so you know watch out for little gotas like that and keep in mind that the content that we seeing out there these days is a lot of it is opensource content which means people without much experience or depth or who are learning like you are writing a lot of blogs as part of their learning process and so that gets surfaced by search engines or social media whatever it is and it's not often great to learn from to be honest right because you're learning from people people who's s slightly ahead of you it's it's great that they're able to do that that they're teaching that they're learning by teaching which is something I recommend doing but I don't recommend adding to the content of the internet generally like that like if you're going to do it do it you know oneonone or tell another friend or somebody else in a small group so that you're not kind of uh filling up the internet with stuff that's going to come up in search engines that may not be right having said that keep in mind that a lot of people producing content out there also just learning and the content may not be great it may not be written well well it may not follow the pedagogical Styles required to actually help you accumulate the knowledge and so on you know and so you will end up having a lot of stuff that doesn't help you so it's really important when you pick these resources that you keep this in mind look for the correct level that is yours and if in the first three or four paragraphs it doesn't feel like the right level abandon it don't feel bad it just means that it was pitched for a different audience now I teach a lot as part of my current role and this is an actual this is actually a big problem from the teacher point of view as well what level of of person are we targeting at and if you're not explicit about about it it can be very confusing for other people so it's actually a really hard problem to solve so just recognize that you have to be kind to yourself and to the people prod producing content out there it's not possible to work for everybody there is no one siiz fits all so there's a little bit of trial and error that's unavoidable but it's much harder these days to figure out the resources um that are not curated because there's just so much stuff there right just remember level yourself are you an absolute beginner or are you fairly you know competent in the basics and accordingly look for resources at that level and if you're using things like chat GPT chat GPT is quite often wrong in fact if you sometimes challenge chat GPT even if it's right and you say that's actually not right it'll immediately apologize to you so it's obviously not that confident of in the first place so you know keep that in mind now we've actually come to the end of section one at this stage and section one was only designed to help you formulate a well structured plan that is specific to your goals and I think by the end of the section you would have done that from here on we're going to start picking apart the major reasons why many people give up on their plans and we want to absolutely make sure that that does not happen to you okay so let's keep going all right welcome back in the last bunch of videos we covered some really essential parts of putting together your plan to achieve your learning goals um in in particular we covered things like the why the what the where the whom and the when by that you're going to try and put together into your plan and all these aspects are so essential for you to be able to achieve your learning objectives now I'm fairly confident in saying that by this point of time just having that plan puts you ahead of about 95% of your competition because you have a solid plan you have a solid map that helps you navigate to your learning outcomes so let's keep moving and now we're going to talk about the big myths that stand in the way now the plan that we've put together for you will evolve and I encourage you to keep revisiting it for two reasons one to check that you are following it and that things that are going to plan that you're tracking well to the plan and two this is the fun bit to check whether you've gained any new knowledge that requires you to adjust and revise your plan just a little bit from time to time in the next few videos I'm going to cover some of the top myths that surround the process of learning to code now let me be clear here I am not addressing the myths of what it's like to be a professional coder or what a developer job is like I'm very specifically identifying the common myths and misconceptions that people have about learning to code think of it as the expectations specifically the false expectations that people have when they start to learn to code so why is that important and it is really important well it's important for three reasons here they are one having a picture that is false or unrealistic in your mind can can be a major source of frustration doubt and setbacks two mths can make you overestimate the learning task or underestimate it and both are bad learning to recognize and identify these myths will help you ask the right questions and get the answers that are most helpful to you remember my goal is to save you time money and effort and make sure that you do not fail in your quest to become a Coda reason three false expectations make things harder than they need to be and doing things the hard way is a form of waste and what do I keep saying eliminating waste is a very important part of succeeding at our goals and that includes the goals of this course now that we understand why this section on myths is important let's talk quickly about why I'm covering this material at this stage and not later I've spent days is designing the structure of this course so that each section each bunch of videos prepares you for the sections that follow the sequence is meant to make it exponentially easier for you to make decisions and analyze your objectives every step of the way so you may want to rush ahead into other sections so that you can start learning immediately and I and I understand that but I would caution you against that and I would advise you to invest a couple of hours now in following the structure of the course so that you can save yourself a few weeks of time later on I promise I will cover some of your burning questions for example in the next section the next bunch of videos we will talk about the fundamental decisions that you need to make including for example what language you want to start with you will make a much better decision if you've finished this section though at the very very least you will have confidence in your choice and not be distracted by niggling doubts and second guessing yourself about whether your decision was arbitrary or well informed or the right one for you so following the sequence is important because it then gives you the confidence in your decision making every step of the way okay so we've agreed let's stick to the courses PA and you're going to be just fine great see you in the next video for myth number one welcome back in this video we're going to talk about the first myth the first of several myths that stand in the way of you attaining your goals just to be clear I'm not covering off these myths in this section in any particular order of importance they're just common myths it's also very possible that you don't believe in one or all of them but in my experience these are some extremely common myths that hold people back from achieving their learning objectives and I believe these are the most important ones that will help you continue down on your journey the first myth that we are going to talk about is whether or not computer science is the same as coding they're not many people do believe that you need to have a computer science background to be a good coder or perhaps an effective coder let me tell you this is absolutely and categorically not true most of the world's coders are not computer science graduates statistically and the reason for this goes to the heart of the difference between knowing how to code and knowing the principles of computer science here is a great summary of it computer science is theore iCal it takes a scientific and mathematical approach to information and its computation computer programming is practical it is the process of Designing writing testing debugging and maintaining the source code of computer programs they are different but related fields so computer science is the science of computing and includes all stuff about the hardware the software and theoretical capabilities and limitations of computers whereas writing software is simply literally writing out the instructions to a computer so that it can execute it that is part of the reason why it's hard to know where the line is that you must cross to become a coder there is no line Beyond which you can suddenly say hey I'm a coder now there are computer scientists who are fantastic at algorithms and conceptual designs and the theoretical side of it but who just aren't very practiced or experienced coders and so they're not great coders mainly because they've only really looked at the theoretical side of the art in fact you can see some fairly controversial posts on this subject on Reddit and other forums and I've added a couple of links in the lecture resources if you're interested but my advice is you know don't spend too much time asking why that difference exists or what the meaning of it is the only question to ask yourself that's relevant is why does this matter to you so it is critical to know your what and your why to determine if you need to have a computer science background that's a really good thing then that we've done that thinking right if you want to build a blog site for example you don't need to know much CS if you want to build a mobile app chances are you won't nowadays let's face it if you want to learn data science analytics or even intermediate level AI you probably don't need a solid Computer Science Background but if you're doing Cutting Edge computing R&D work or working for a team a startup let's say that's optimizing scalable technology um that's going to change the world in some way it may help you SE it may help separate you from the competition if you do know a little computer science or CS now there is one practical case which will immediately help you if you're looking for jobs then it's best to do some research into which jobs require a CS degree here are for example two completely random examples taken off the internet one from the Google's career site and the other from stack overflows jobs listings the first one the Google role has minimum qualifications that require a computer science degree or equivalent practical experience and the preferred qualifications include a PhD now I would guess that if you want a job like this you're better off doing a computer science degree it will certainly improve your odds of getting an interview but for the other role the one on stack overflow jobs if you look at it it's a full stack job and you can see that they seem to care more about your ability with certain languages and Frameworks and Technologies they don't really seem to care too much about your formal qualifications they seem to be more interested in your technical ability to execute and stuff so to be clear having a knowledge of computer science topics is probably helpful and probably even makes you a better coder but it is by no means essential certainly not essential to learn how to code most programmers don't have CS degrees it's just not necessary for what they do daytoday with experience and time you'll start to pick up some CS principles but that comes later and at this stage of your learning it's sort of thing that can derail you unless you absolutely need it so like I've said before give yourself quick wins with smaller chunks and smaller goals provided each such chunk or goal is actually necessary to your larger learning goal okay enough on that let's recap quickly in this video we covered the fundamental differences between computer science and programming and we've established they're not the same thing you can be an expert in one without knowing much about the other and that swings both ways choosing your learning objectives must always be done by referring to your goals so before you work out whether or not you need a CS degree take a quick look at your what and your why which are the underpinnings of your goals and you'll know what it is that you need to do to get there but always always start with small chunks that give you quick wins okay let's move on to the next video where we're going to cover myth number two okay welcome back in the last video we talked about myth number one which is whether or not computer science and programming are the same skill specifically we discussed whether you need to be a computer scientist in order to be a good programmer in this video we're going to talk about myth number two which is quite similar to myth one in the look and feel and the myth is that you need to be great at math to Be an Effective programmer because I'm calling this a myth I think you know what the answer is going to be and you can be very relieved that the answer to that is no you do not need to be fantastic at math to Be an Effective programmer unless of course your goal is to work in a deeply theoretical and highly technical field where the R&D or the research and development you need to do gets immediately applied to real world applications and the R&D itself is quite math heavy but that's quite a niche area so in general to Be an Effective coder no you don't need math math does help to get you closer to the computer science side of things so if you are going to be doing computer science then math skill definitely gives you an advantage but my personal belief is everything is learnable and that includes math the reality of today's development World though is that 99% of s programmers do things that are based off existing libraries where a lot of the hard ma math is already done and that includes really complex math heavy subjects like data science and machine learning artificial intelligence and so on maybe a better question then is to ask why math helps so it's not that you need to have good math skills to be a good programmer but having math skills could really help so why is that well one of the reasons why it could really help is is because math teaches you to break down problems and solve complex problems in a structured systematic piece by piece way and it requires you to hold a lot of pieces of information sometimes competing pieces of information in your head while you think through it in a structured logical way so what does that tell us maybe it's not the knowledge of math specifically but the ability to think logically in a structured way that math requires that is actually valuable as a programmer in other words you don't need to be good at math you need to be good at thinking logically and in a structured way now these skills are very very valuable as a programmer not essential but valuable but you will acquire them bit by bit with more code and practice now initially it is entirely likely that you would be uncomfortable and feel intimidated because you compare yourself with people who started years before you did now I I I made that mistake several times I look at accomplished programmers and you know theyve six to 10 years out ahead of where I am and Marvel at their ability the reality is when I was a fairly senior lawyer new lawyers would look at me and think that I had special extraordinary skills and I didn't well compared to them I did but that was only because of experience and practice now I can assure you that what you're going through in terms of comparing yourself with other people who are way ahead of you in the path is natural and normal maybe not the most helpful thing because every skill is 100% learnable I've said this before and I'll keep saying it time and effort are the only only thing that separate you from a goal we do live in a culture that tells us that genius is some innate thing I don't believe it in fact it's scientifically invalid from Einstein to Edison people have been careful to point out that genius is the result of hard work and not the cause of any success and accomplishment if you want to know more take a look at books like Malcolm gladwell's outliers or Eric Anderson's book called Peak which talks about how people acquire Excellence but that's a little bit of a diversion or a little bit of a tangent to where we are are now for now all am I saying is don't be intimidated by math it is useful but not essential so don't continue to intimidate yourself with this myth you can develop that skill if it's really important to what you want but it may not be so again knowing your what and your why is critical before you can assess whether you need a certain kind of skill all right enough on that myth two let's move to myth three okay welcome back in the last video we talked about myth number two which is whether or not you need to be a math WIS to be a good programmer in this video we're going to talk about myth number three which is extremely common and one of my favorite myths to try and get rid of it is that a lot of people think coding oh that's not something I could do that's just too hard for me let me tell you that is absolutely an categorically not true in fact empirically if you look around there there are just so many programmers in the world some as young as 4 years old so it's obviously not too hard for you that is just statistically not possible so there are three important things to note about this myth one it is partly true and that's what makes it so believable two the part that is true is that coding is hard and three the part that is false is that you can not do it let's break this down properly coding is hard but then you know so is learning to walk and and maybe you don't remember that so let's try something that happened a little later in life like learning to write well maybe you don't remember that either hm okay how about learning to ride a bicycle or learning to swim learning a second language or a third language or learning to drive how about learning to use Microsoft Excel at work learning anything new is hard and the difference is that some things we just learn along the way so we don't pay attention to the effort it takes and how hard it is because we just pick it up along the way but unless you happen to be living with a disability generally learning to walk write or read or drive are things that we simply assume we take it for granted we will all do this one day our kids will do this one day Etc there's nothing unusual about these fairly complex skills and in 20 years I am 100% sure they're going to say the same thing for coding kids in 20 years will just code like it's the most normal thing in the world which means coding is not hard for you it's hard for everyone but everyone can do it so the key here is to catch yourself when you're thinking that it's hard specifically for you nope it's hard for everyone remind yourself that learning to drive a walk is also really hard but we take for granted we can do it and we never doubt our ability sure some people take a little longer they may need a little more practice but no one really doubts that they can do it and that exact same attitude applies to coding because it's a fact so let's recap coding is hard but not just for you and it's no harder than any other skill that we take for granted in our modern culture and certainly no harder than at least two or three other skills that you probably already have okay enough said on that let's move on to myth number four okay welcome back in the last video we talked about the myth that it's too hard for some of us to learn to code in this video we're going to talk about an unspoken assumption that many people share or it's a misconception that a lot of people don't even know that they've fallen into which is that coding is something that can be done very very quickly like they show it in the movies this is especially common for people who want to code to build something that they want to see in their lives or for a startup idea they've got something that they want to prototype quickly you know this myth is a huge factor for the frustration and disappointment that cause people to give up popular media will make us believe that you can become a hacker quickly almost instantly with prodigious ability and put together a world changing protot type from your DM room or garage in the weekend it's false and if you don't believe me listen to this guy movies and pop culture just get this all wrong the idea of a single Eureka moment is a dangerous lie it makes us feel inadequate because we feel like we haven't had ours yet and it prevents people with seeds of good ideas from ever getting started in the first place oh and you know what else movies get wrong about innovation no one writes math formulas on glass okay all right that's not a thing okay guys even Mark Zuckerberg is telling you that it's very dangerous to fall into the myth of thinking that these things happen very quickly that you can learn or build something very very quickly it's so dangerous that it causes people to either not start or to give up too early even he's saying it and I 100% agree especially with skills like coding it can take so much longer than you expect that if your expectations are too false you run the real risk of giving up I cannot emphasize this enough and I do not want you guys to give up because of mismatched expectations and that's why this myth is so important do not think that it's going to be quick instant and glorious it is really not but it is totally possible with time and effort okay so apart from pop culture and the myth of the weekend entrepreneur you also have significant marketing effort being put into telling you that you can learn to code in a weekend or 4 hours or 10 hours or whatever it is some will say that you will be job ready in 3 months and technically they're right but it is slightly misleading most coders learn by doing and if you don't do that thing that you're learning again for a little while you will forget it in other words you need to keep repeating and keep doing more of it in order for it to get entrenched in your memory so you can absolutely learn the basics in a month maybe two or three depending on how much time you're putting into it and how much focused energy you're putting into it the key message here though is to be prepared that whatever the timelines you're being sold on what they're not telling you is how much time you've got to put in per day to achieve that timeline and that's what you need to factor in coding takes a lot of time now you never actually stop learning to code but that's partly because coding takes so much more time than you expect and because it takes so much more time you learn for much longer periods of time as you wait through it so if you do happen to think that you're going to Learn Python in two weeks and build a an email or Twitter bot in the week after you absolutely could by copying it from a tutorial and working your way through that but it's not really meaningfully learning the actual skill of what you're putting together you're just copying it from a tutorial and lots of people confuse the ability to build an application with actually learning to program they they're slightly different things it's very easy to follow a tutorial and build a program and you will learn a little bit from doing that but the real real learning comes from getting royally St stuck and getting unstuck can take a lot of time but believe me that's where you do most of the learning where you have the Eureka moments that really make the penny drop and the lesson drive home so coding is not something you can learn very quickly you can absolutely learn the basics fairly quickly but you need to practice it to become good and the best learning unfortunately happens when you get stuck and when you get stuck it takes a lot of time to get unstuck therefore the best learning which happens out of getting stuck takes a lot of time because getting unstuck takes time and I hope you see that logic there so let's recap quickly you can absolutely learn to code well and learn to program a computer very well over time you get faster at picking up new things the more you learn and as more time goes on but inherently it's not a quick process so do not set yourself up for failure with unreasonable expectations that you can read a textbook and build your startup this weekend okay I'll see you in the next and final myth okay welcome back in this video we're going to cover the last myth for now myth number five is the last myth at the moment but I want you to know that I will be looking very closely at the information I keep getting especially from information from people like you as to other myths that should be added to this section because this section will have all the content I can find on the myths that need to be dispelled so if you know of other myths that you think affects a lot of people please do let me know this section will keep growing to accommodate those mths because my goal continues to be and will always be to try and remove as many obstacles as I can from your path to learning how to code and myths are a huge obstacle they really do set a lot of people back so if you have ideas please do let me know um but keep coming back to the section to see if anything more has been added because I hope to add a lot more to this all right let's keep going to the rest of myth five okay so the last myth that that we're going to cover for now is that coding is boring and geeky a lot of Pop Culture will have you believe that coding is for just the Nerds and the Geeks and the socially inept but we I think now we can all accept that that's not true anymore as Steve Jobs said everyone should know how to program a computer because it teaches you how to think so if thinking is boring and geeky then we do have bigger problems as a society I guess but if you think that think is important then learning to code just makes you better at something that you already know is important on a more practical note however coding is extremely creative in that sense it is an art that lets you create in software what doesn't happen easily in the physical world from gaming to music to Art to entertainment shows to helping people with disability using software to improve and shape the world around you is very powerful ful and very very creative software is absolutely just a tool it's just like an artist's paintbrush or a sculptor's chisel you use it to shape the world around you and to give form to the ideas and Imagination in your head today your imagination can be converted to reality through code something that for the M for the vast history of mankind we couldn't do what makes coding really special is that it's not just an art it is extremely extremely practical and it requires you to constantly solve problems some problems are hard some problems are just really unusual and interesting but the science does show unequivocally that solving problems gives the brain a chemical rush and lights up all the reward centers in your brain so quite literally solving good problems makes people happier and more fulfilled and coding is all about solving problems now imagine doing something that makes you happier the more you do it that doesn't sound like work at all right so if the popular narrative is that coding is for geeks well try it out for yourself lots of cool people code the world has never loved coders more and to top it all off it's highly creative deeply satisfying and good for you mentally and emotionally and it puts you in a flow state so if you want a code be proud of it go for it it's fantastic just keep going and don't hold yourself back because of these kind of myths and falsehood okay welcome back um we're now at the last video of this section for now I know we've had a big section going through all the myths and the misconceptions that often can bring us down and derail us in our approach to coding I know some of you may not want to hear this right now and I know you may not even really be ready for this but I would strongly encourage you to pause for about 15 to 20 minutes now and revisit the goals and plan that you had put together at the end of section one if you remember section one was all about the five ws and how that influences your goal setting and on the back of which you can build a proper plan now is a good time to go back and revisit that revisit that plan because now that you've understood the mths and false expectations that often subconsciously influence our decision making you may see maybe you won't but you may see that your plan and goals reflect those false assumptions those false expect expectations and those myths if they do now is a great time to revise your plan and goals taking into account what you've learned in this section about mths and removing those mths from your plan the benefit of that is it makes your plan much more strong and much more achievable for you and I know I've hopped on this several times so far in this course but it's really important that your goals are robust so that that reduces the ODS that you're going to fail or give up that is very very important remember it's one of our shared goals goals on this program so go back and do that now for about 10 or 15 minutes if you need to adjust your plan to reflect what you've learned in the section go ahead and do it and take the time to do it right very importantly if you found some myths or expectations had crept into your plan and goal setting I would really love for you to share that in the Q&A with your peers help your peers to see what you saw after coming this far in the course and maybe that'll help them revisit their plan that will also help them learn what you have learned likewise you can learn from others who've shared on the forums so this makes it a much richer experience for all of us and I personally would absolutely love to see things through your eyes and read about your experience revisiting your plan in the forums because I think that will help me make this an even better course for you to return to all right well I'll see you in the next section cuz it's going to be fun so in this section what I'd like to talk to you guys about is some of the big gotchas right these are things that are really high risk factors and this wasn't actually this section wasn't there in the original course and the reason I added it is in the last you know 3 or four years I've coached several hundred students on career change to code and I've noticed a few patterns and these patterns are what I call the risk factors okay so I want to cover them all with you because you're going to get the benefit of all the work I've done over the last four years with hundreds of students and you're going to see the main reasons why people fail especially in either learning to code or career change which you know are two different things so in identifying these risk factors they're like potholes on the road or big you know barricades in the middle of the road and so by knowing them in advance your forearmed is for1 right or is it the other way around for wand is forearmed that's what the correct way of the of saying it is so now that you have the knowledge in advance you're able to actually avoid the problem so the let's start here the the the biggest RIS factors there are a number of of them and I'm going to classify them by different types the first type is avoidant behaviors right and even within this there are broadly two categories the first is you actually know what you need to do you know it you don't like it you don't you may not want to do it but you know what you have to do and yet you don't do it and very often these can be things like actually putting in the time required or very commonly not jumping around from one resource to the other not abandoning things in the middle right sticking with it till the end even if you're really not having fun with it but as long as it's moving you closer to your goal now often the excuse will come up hey I don't actually know this is moving me closer to your my goal and you need to have the selfawareness to distinguish between an excuse and a reason often we use excuses and make them look like reasons and all we're trying to do is avoid the situation so avoiding behaviors category one is knowing what you should do but still not doing it anywhere the second type of avoidant behavior is sticking within your comfort zone which when you start to think about it is kind of evidence in the first one as well how did this show up it means that you don't want to learn something new because you're struggling with it or you don't want to ask questions on stack Overflow because you're worried about rejection or you don't want to ask another coding friend that your friend who codes because you're afraid of what their judgment will be with you or you don't want to announce to the world that hey this is my intention this is what I'm going to do uh you guys can laugh at me or think I'm crazy or encourage me whatever you do I know that this is what I want to do and I'm going to do it but that takes obviously a certain amount of coverage and a certain amount of willingness to be outside your comfort zone so if you stick within your comfort zone what ends up happening is you only take the actions that you're already comfortable doing but we know has not already produced the results you want and if you keep repeating the things you already have done before but expect a completely different outcome you're going to be disappointed right so part of sticking or not sticking in your comfort zone is to take actions that you've never done before even if they're deeply uncomfortable and using that as a learning experience and one way to think about that is as an old saying I I don't fail I lie I either succeed or I learn now you may argue the semantics of that but there's a very powerful message in there which is your attitude to the outcome is what will determine the value of that outcome to you you can either view to view you can choose to view it as successful or a failure or you can choose to view it as successful and a learning experience or you can choose to experience it or view something as just failure in which case you're very likely to put yourself in a negative emotional state and discourage yourself from trying again now the other typ types of R risk factors are what I call the five un estimation and there are five big ones the first one is underestimating yourself typically things like I'm not good at math I'm not good at this I'm not good at that the fixed mindset kind of stuff which is an underestimation of yourself I firmly believe that we're all human beings we're all fundamentally the same and we all have practically for all practical purposes unlimited intellectual potential if we put in the time and the effort right that's not true for everybody I agree but usually if you're kind of above average intelligence or even if you're above if you're just at average intelligence you're still capable capable of as much as somebody who you would consider super high IQ right I see no correlation between that and a lot of successful people are a pretty average intelligence in fact I dare dare say that if you're a little bit honest with yourself and I've thought about this a lot in my life people who are less smart either at school or college or you know whatever subject or less talented than you have possibly overtaken you careerwise or financially or emotionally whatever you know metric you use and that just goes to show that just having the RO Talent the ability is not enough you need to uh correctly um align yourself with your goal and then just go for it and believe in yourself so underestimating yourself is a major major risk factor the second is underestimating the path that you're going to be on like look I I remember I once went for a hike here in Australia and I did not read the weather fast carefully and it was actually snowing on top of the mountain and I was in shorts now as you can imagine I was terribly underprepared for that right I had all the information I needed I just didn't bother to look at it properly I was Reckless I was actually careless and so when I was there I really suffered quite acutely and so underestimating the path will cause a lot of problems a lot of failure and worst in in things like it's one thing to climb a mountain it's another thing to to en Endeavor on a thing like career change or learning a complex new skill that moves very fast this coding moves really fast is if you underestimate the path and you encounter problems that are expected but you think they're not you're going to blame yourself you're going to think you're not smart enough you're not you're not work you're not cut out for it you're never going to be able to compete you're going to blame yourself even though what you're going through is actually quite normal right now the third thing is underestimating the time it takes to get it Mastery most people make the mistake of thinking I'll learn a bit of HTML and CSS and some JavaScript and I will then be employable that's not true because the reality is that's like saying I know a little bit of English so now I can go and be a judge right these are just the tools the language whether it's HTML CSS Java JavaScript Scala whatever you want to call it python whatever these are just tools right and I've often said this on LinkedIn that your job is is not learn how to play a musical instrument like using a musical metaphor your job is to know how to create music that people want nobody cares what instrument you use really at the end of the day and so if you want to get Mastery level at a given instrument it's going to take a lot of time and to be employable you need to have Mastery level you don't need to be the world's foremost expert not at all but you need to have a professional standard of skill without a professional standard of skill why would anyone employ you to do this professionally right you're not an amateur you need to be a professional level of skill now the next thing is underestimating the competitive landscape which kind of links in a bit with the previous point which is you're competing with professionals you may be at an amateur level you can't compete with a professional when you're at an amateur level right so set the goal correctly don't underestimate the kind of time it's and effort it's going to take to get to professional levels of skill and then optimize to get there as fast as you can and do not underestimate the competitive landscape as a career changer in my late 30s I realized that most of my competitors were probably 10 to 15 young years younger than me my bosses were all going to be younger than me which turned out to be true and still is and so you need to understand that these are people who've been there 105 years ahead of you you've been coding for 10 15 20 years some of them have been coding since they were you know 13 or 14 and they're 5 years younger than you or they were in my case and there's no way I could actually expect to beat them in an interview all I could do is be a better cand it which is you know a completely different skill so you have to correctly estimate the competitive landscape and realize that every day hundreds of people with no background still get their opportunities whether it's in coding or some other job or architecture or Law whatever it is you know people without experience get opportunities every day so why not you the question is not is it possible of course it is because it happens hundreds of times every day the question is how is it how do you make it possible for yourself right and you start by not making any of these five underestimations now the sixth underestimation is the process of just drisking yourself and this is because and I I banged on about this quite a lot on LinkedIn is as as candidates our entire worldview is us us us us it's a very me Centric worldview I'm a candidate I'm looking for a job I want to be a coda I'm trying to change my my career and the market doesn't really care right because the market views you as one of many Alternatives that it has to choose from and there's a transaction you give me your services and skill and I'll pay you you know x amount of dollars every year to do that right so that's what the market thinks about you on the other hand are thinking hey I need a job hey I've got to put food on the table hey I've taken all this risk hey I've got a family hey I've got you know all this time that that I could be spending in my other care you're going through all that so you have to understand that in the eyes of the market a career changer is much more risky than someone who's not a career changer someone with no no experience is way more risky than someone with a bit of experience and so when you are presenting yourself to the market to try and change career and get a job as a coda or in fact any other career you have to understand how you're viewed as a risk and then systematically drisk yourself in the eyes of the hiring manager right and if you underestimate what that takes no matter learning code algorithms and data structure is going to help you because you're still going to appear risky to the to the person and keep in mind learning a lot of code doesn't help if you don't have a single interview right it's like being all dressed up with no no date right to go with so you want to make sure that you're not just learning to code but you're also presenting yourself in the market in a way that makes you attractive to employeers and that's how you drisk yourself in the market now some of the other risk factors we talked about this a little earlier is the wrong expectations right look without setting the right expectations you are going to experience what could be a normal friction or a normal setback or a normal failure as a very serious permanent sort of failure okay so in in one of the previous videos I talked about you know how to set goals achieve the goals chunk them down right so if you look at the video on on on how to do a when by learning go objective or learning goals you know when by is better than you know do by dates and stuff like that in that video I talked about chunking things down so that's a good example of how of an opportunity to to set the right expectations when you chunk things down you have to understand and set expectations with yourself about you know how long is this going to take how much effort is it going to take every day how's it going to feel when I'm struggling and I don't have any support and I'm I can't understand something and is that normal is that part of the process it's like if you go you know to the gym for the first time in your life and no one tells you that your muscles are going to hurt the next day you're going to think you've done damage to yourself right and actually no that's a normal and healthy proof of the fact that you're on the right path is cuz you achy muscles the next day but if you had no idea that was going to be the case you would very legitimately expect that hey maybe I've injured myself permanently and you'll be afraid of the gym right so you have to have the right expectations and one of them is also definitely not expecting recruiters to bang down your door just because you know some HTML or css or you know JavaScript or Java whatever like they're not going to be banging down in the door recruiters are looking for the best most experienced candidate they can get for the least price okay that's the nature of the marketplace that's exactly what you would do if you went you know looking for a a lawyer or an accountant or a teacher or a coach You' look for the best value you can get for the cheapest price and that's exactly what hiring managers and and recruiters are doing so don't expect them to bang down your door instead communicate your value right so having right expectations on what each step of your journey feels like even when you chunk it down is absolutely critical now a lot of people say oh you know I know coding is meant to be hard it's not easy and they say it like an abstract concept yeah of course it's not easy I don't expect this to be easy okay do you expect it to be hard yes I expect it to be hard but what does that mean what does hard mean in practice what is the actual daytoday experience of doing something hard feel like and typically it is I don't know what to do next I have no I don't understand what I'm studying right now my code doesn't work this algorithm of data structure makes zero sense to me I'm not able to communicate the solution I cannot build an application I don't even know where to start I don't know if I'm in the right direction if only I had a plan all of these things that you're going through are normal because that's Frank L what happens when you do hard things all these doubts happen right and especially selfd am I good going to be good enough I'm not good enough in math am I going to be able to smart enough be smart enough to convince the hiring manager all of that doubt that emotional battle the fear that you have to battle that's kind of part of what hard things are that is exactly what hard things are meant to feel like that is what hard means is that emotionally intellectually physically certainty wise it's a very hard problem to solve that's what hard means right so having the right expectation when you say yeah I know this is going to be hard understand that that's really what it means for a long period of time and you don't know when that's going to end you honestly don't right you just had to keep going until you get closer and and you know having the right expectations on time is also critical right we talked about in this in the in the previous risk factor if you have the wrong expectations about how long some things are going to take you're going to switch first thing you're going to do is you're going to say this resource is not right for me this person is not right for me uh this language is not right for me uh this career is not right for me Etc things are going to to take time the the challenge is this is why it gets hard is you don't know how much time is actually reasonable right and so that's why taking having no wrong expectations about the time my general rule is not just about coding guys about everything in life is you have a secret hope that it's going to take you x amount of time triple it and if you're not willing to do three to four times more time than how what you secretly hope it's going to be don't even start because you're just going to give up right but if you're willing to say okay I hope this is going to happen in let's say you know 2 months but if it doesn't happen in in 6 months or if it doesn't happen in 12 months then I know there's a problem but if it doesn't happen in 2 months okay maybe I just underestimated you know so don't have these arbitrary deadlines make sure that you have the right expectations in terms of how long it's going to take right the next one really important these days in 2023 onwards do not go by social media and chat gbd okay neither of them are going to help you change career nor are they going to help you learn to code these are tools now of course this is going to be controversial can you learn how to do something using chat GPD and some influence on social media sure you can learn how to do something from anybody right because you can always learn something that's not the yard stick the art stick is is this actually going to take you significantly closer to your goal such that investing your time in it is a Justified investment right now chat GPD is just a big AI tool it's just going to you know do statistical averages and spit out responses and I can tell you I I've been using AI in my coding job for over a year now well before CHD became a really big thing and I can tell you it is often wrong enough that I need to spend some time figuring out what to do with it or it's more right when I ask it a better question which by the way is exactly what Google was like right it's just that it's basic chat basically I would say is a very advanced Google Search right now now in the future it could do things um that you know we currently can't do and in the future AI will replace fairly repetitive things maybe I don't know you know maybe like CSS or HTML or some you know data analysis I don't know it could replace any number of things I actually think it's going to replace things in the medical profession and the legal profession like it's going to replace some things in a lot of professions but that doesn't mean jobs are going to go all it means is jobs are going to require slightly different skills so jobs won't go down jobs which AI takes over may not exist anymore but that's always been how it was right there was a time when you'd have char charers around in the street all the time and then you had showers and now you just drive yourself right like that's just how things are it's not that the jobs go away or the need goes away it's that the nature of the skill will change and that's where you can absolutely get an advantage is by being ahead of the curve in terms of what skills are going to be need it right so Social Media Chat gbd don't go by the expectation set by them here's my general rule if somebody gives you a point of view and they haven't done what you're trying to do it's an opinion at best okay and advice can only come from someone who's actually done what you're trying to do everything else is an opinion so use that sort of mental model to figure out who to listen to online and chat whatever it is that you're using all right now uh the other wrong expectation is that your recruit is are going to be interested in you just because you know how to code no cuz frankly there are hundreds and hundreds and hundreds of people in every city that know how to code and who are also competing for the same job as you so the way to get recruited interest is not simply to show that hey I've learned a little bit of you know HTML JavaScript CSS python whatever no you got to get recruiter interest by showing that you're highly employable with the skills you have because you can solve real problems that the recruiter's clients or the company needs to solve which means you got to know a lot more about the company and this is for career changes specifically it's a different thing if you're coming out of uh college and you have recruitment on campus or you know you've got some internships lined up and that's how you're going to get the job that's different right cuz they already know you the hardest thing is getting the first interview not passing the interview is also hard but what's the point of preparing to crack the coding interview if you don't have a single interview right so how to get interviews how to get recruiter interest in a competitive Marketplace is something that you should not have the wrong expectations about it's hard you're competing with people that look way better than you on paper so the question is how do you show value how do you show you can do the job without doing the same thing that everybody's doing right you got to not just stand out you got to stand apart like one of my recruited friends Dave he he mentioned this stand apart not just stand out right and there are ways to do that you just got to figure out what works for you and get the right help in terms of the right guidance if that's what you need now a common question I get is and it's sort of linked to the expectation stuff is how do I know this is going to work right how do I know this is going to work well you don't the short answer is you don't you have it's exactly like a business you don't you have a good hunch of the products going to be great you're going to be able to you know sell it well in the market but you don't know and typical like any other startup it's iterative you try something works doesn't work you get some feedback you improve it the next time and you keep you know cycling through that now there's a guy called Alex harosi who you know who's an entrepreneur that I followed for a few years and you know I find him quite interesting the way he thinks and like I said most of the lessons I learned that helped me change code actually came from my startup and Entrepreneurship years right it wasn't from theod in fact I got some of the worst advice I ever got from computer science folks or from people who' only ever been in one career which is coding like the serious I did you know coding in in college I've been a professional quter for the last 10 years some of those folks they didn't mean badly but they just gave me some of the worst advice that I actually ended up receiving because they didn't know what career change is all about now this guy is an entrepreneur I was an entrepreneur in in a past life so I understand where this is coming from and this is true of business this is true of career change also right generally if a thing is not working there are three reasons okay and you have to know you have to know which bucket it falls into one is you're pursuing the wrong opportunity right a bad opportunity whether it's business or the career like let's apply this to coding well coding is not a bad opportunity we know that of all the jobs out there in the world today it's probably going to be just like every other job slightly affected by AI but probably not that affected because every business needs take that's not going to go away right every business is going to run on software that's not going to go where right and so we know it's a great opportunity we know there's plenty of potential certainly more than most other careers out there there's plenty of potential okay in my view so we know it's not a bad opportunity okay what are what are the other reasons it could be failing well you've got a bad plan or you're executing it really badly right so right opportunity with a bad plan and terrible execution it's just like the right business idea is not going to work and the last thing is impatience which goes down to having the wrong expectations if you're being impatient not giving it the time it's going to take and it normally organically will take you're going to think this is not working when all it means is it's not working yet because it hasn't taken the time now the analogy that a lot of people you know would would understand here is no matter how much you fertilize and water of seed it's going to take a certain amount of time to germinate become a plant grown under a tree right no matter how much you water it or fertilize it it's not you can't rush that process Beyond a point you can't skip the steps it's kind of the same with career change it's going to take the time it takes same thing with learning how to Cod to a Mastery level or professional level it's going to take the time it takes you cannot skip the steps being impatient is going to make you think you're failing right so these are the three reasons we know it's not we know that coding is not a bad profession we know that coding careers aren't really going anywhere we know that with the right expect uh execution and plan people like me and others have been able to make the change and we know that impatience is another Factor that's going to trip you up so try and avoid each of these three factors Factor one is not a real thing for you guys in in in in coding but you know the the next to bad execution bad plan and impatience are very real things right now let me talk and I know I've been sort of running through this quite fast but the next thing I'd like to mention is that that there are three currencies that we need to think about right because there are really three currencies any of us have we're all born with this in varying degrees okay all all three all of them we're all born with some am of it but they're varying degrees right and so there are three investable resources or three currencies one is money the other is time and the third is energy right we all have these three think of them as three knobs on a music system if you like that you're dialing like bass treble and volume or whatever you want right and so these are three things that we have all of us in varying degrees and we have to invest invest them we cannot avoid it every single day of our life we spending or investing these three things in varying degrees okay now there's a big difference between a cost or an expenditure and an investment an investment is something that has a reasonable likelihood of giving you some gain back okay this is why a car is never an investment right it's always an expenditure because you're always going to lose money on a car once you buy it and then it's always going to go down in value however it has a lot of value to you because it'll help you transport but it's not an investment now you can take education as a classic example of a really great investment there the JW is out there about whether traditional college education still is or not but you know I think most of us agree that having gone to some kind of college is probably better than not having gone to a college it may not have given us everything we wanted but that could have also been wrong expectations or a wrong plan but it's better that we educated than we not it's better to have some college degree or some high school education than to not right so those are also kinds of Investments now the three unavoidable ones right money time energy you have to invest these three guys you have to invest these three and my suggestion is um we always value the thing we have least right which is why you know people with plenty of money who are very successful businessmen or entrepreneurs or CEOs or whatever they have lots of money and they don't have enough time so they will spend a lot of money to save time right they will spend a lot of money to save time and you know when people don't have money they spend a lot of time to to avoid having to spend money right so that's just the way it is so that's why some people can fly and some people will take the train right it's one person has more money than time the other person has more time than money that's generally how it is so there's a little bit of a dilemma again from the business world that comes in here in general and this is called the business tremma it's also true in software engineering project delivery it's also true in most things in life and definitely in career change education skill development and so on you kind of have to choose between three things okay two out of three things because you have those three resources money energy and time now you have a dilemma you can choose two out of the three things on the screen right you can it can either be good and fast good and cheap or fast and cheap it cannot be all three and so this means you have to choose how to invest your resources right if you want it good and fast it's probably not going to be cheap and and you know you can go through all the other combinations in this trilemma right so think about the resources you have in your hands now just because someone else went to Computer Science school doesn't mean you have to just because someone else taught themselves for free and took four years doing it doesn't mean you have to use the resources you have everybody has some resources that they have in some combination of these three okay time money and energ use the resources you have don't be afraid to invest all three if you need to to get ahead and save you know save the time or save the money whatever it is that you're saving okay if you're working fulltime then energy is also at a premium right would you save spend a little bit of money to save a bit of energy maybe right that's what exactly what you do anytime you take public transport instead of ride instead of walking is you're spending money to save time and energy right so use your three resources as best you can you don't I'm not saying go crazy and you know spend all your time doing something and spend all your money I'm just saying don't be afraid to spend the resources you have CU everybody has these three resources in different points right and you need to accept that there's a tradeoff there's a very very real tradeoff now for example I'm a big fan of free code Camp I you know learned a little bit of the basics when I started out free code Camp you know I I really have written a lot for free Cod Camp because I really believe it's an incredibly valuable resource and all that and it's free right it's very very good in my opinion it's not necessarily the fastest way you can do how do I know this because well people choose to go to boot camps in 3 months they could do it probably faster if they were you know working part part time or fulltime now I have other views on boot camps and stuff cuz it may not work for everybody but the point is just because something is free doesn't necessarily mean it's the right thing for you or inversely just because something is fast doesn't mean it's going to get you the result in a quality way or just because something is expensive doesn't mean it's going to be good you have to figure out what's the right combination for you okay right ch two out of three like I said now there's one say that this guy Ben Franklin once said which really really affected me in fact it drove a lot of my investments in my mid30s in myself and education and getting better and selfdevelopment and stuff and he said if you think education is expensive try ignorance right and it's really true it's really really true we're so aware of the fact that you know things will cost us time money or energy or things aren't easy but think about this not doing it is probably going to be much worse right so if you think something's expensive whether it's time money or energy expensive in any other way emotionally whatever it is then try not think about what not having it is going to cost you as well right that's the main lesson from this thing now let me quick quickly recap the major risk factors we've talked about we talked about the fact that hard things are really hard and we need to accept what hard actually means every day in granular detail on a daytoday basis right understand what that actually feels like in person we've talked about the fact that if you know what to do well then maybe do it if you're not doing it cuz often That's a classic risk factor you you know what action to take but you don't take the action right and the other thing is you need to be living on the edge of your comfort zone if not slightly outside it not too far outside but certainly slightly outsid it because that's where the growth is going to happen and that's where you're going to learn what you need to learn to expand your own Horizons inside your comfor Zone you're not going to expand your horizons all right next is we talked about the three different types of currencies the investable resources that everybody has which is time energy money and everybody has them in different varying degrees so invest what you've got heavily right and don't hold yourself back from investing other things just because you think it's going to be hard inconvenient costly you don't like to lose whatever it is really think about your investable resources and think like a CEO or an investor or Finance person and say I've got these finite resources I want to double my resources how do I do it right that's why people spend money to save a lot of time that's why people go to college because they could do it themselves but it's probably going to take them five years instead of three years and that two years is you know worth $200,000 to them or $300,000 to them so think about the cost of not doing something not just the cost of doing something in terms of time energy and money your three big investable resources and the third is accept that no matter what choice you make they're going to be tradeoffs right be very clear on the tradeoffs very very clear on the trade offs so that you're emotionally comfortable with them when you make them right if you're going to spend money for something accept that you're going to spend money and there's a risk that you may not get all that you hoped out of it the question is are you going to lose the money not really you're going to learn something it may not be everything that you hope for right or you're going to spend you're going to save the money but you going to put the dream at big risk because it could take 5 years and you could give up along the way that's what I see happening most often or you could you know try and take a shortcut and say I'm going to do you know this thing because somebody said I could do this in 90 days and I'm going to do that and I'm going to spend money on doing it in 90 days and then you've but you don't aren't actually willing to put in the time and the energy you're willing to put in the money and you're willing to you know Let it go as fast as it'll go but you're not willing to invest the time and the energy into it and you're trying to take a shortcut that won't work either so accept the tradeoffs for everything you do right so you know learn to sell the difference between EX expending a resource and investing it and finally remember that even though coding is a great career for many you know it's not that there's something wrong with the coding career if you're not making progress so it's not that there's something wrong with you it could be that you have the wrong expectations it could be that your plan's not right it could be that you're not executing the plan correctly or it could just be that you're being too impatient right I'm not saying it's easy to know I'm just saying really think hard about which one this is because it's more likely to be that than the fact that you're not smart enough or that coding is not the right thing for you those are very rare actually to be hon Hest it's much more often the combination of wrong expectations impatience and bad plan okay so that's it for the big risk factors I'll see you in another video okay welcome back in this section we're going to talk about some of the fundamental decisions that you have to make as you start your journey to code now these decisions are quite important but I do want you to understand that there are no perfectly right universally accepted right decisions to be made but there are wrong decisions and when I say wrong what I mean is that they're costly to you some decisions can cost you a lot of wasted effort time and money and we want to avoid these things because they're sources of discouragement and demotivation keep in mind that this course is meant for people who have started their journey and also for those who've never even come close to coding before so in this section in the next bunch of videos we will cover some fundamentals as viewed from the perspective of someone who has never touched code before while I say these decisions are fundamental the reason I say that is because they're just starting points and very important critical starting points on your journey to code but don't be fooled into thinking that that makes them difficult these are not intrinsically hard decisions but they can be confusing and that's why a lot of people get tripped up and frustrated by this process and an enormous amount of energy and time is wasted on some of these fundamental decisions which later Pro to be Irrelevant in the larger scheme of things for example we're going to cover fundamental things like choosing a programming language that's right for you what is an IDE and which one should you try and use does it even matter or identifying skills that match your objectives so that you can be focused on what really matters which is achieving your goal unfortunately though I cannot make these decisions for you but I can give you the tools and insight that you need to make really smart decisions okay great let's get started the stack Overflow insights page which has the summary of the developer survey results from 2018 more than 100,000 developers told us what they enjoy Etc so let's go down to technology and it tells us here we go most popular Technologies well javascript's right up there this is all respondents let's take a look at professional developers Ah that's also JavaScript so you can see that web development seems to be especially frontend when web development seems to here too the majority for uh professional and coders generally a lot of them seem to like these Technologies and they're the most popular now that's probably just a Sher count just the share numerical value of how many people want to do these languages let's see what's at the bottom of the list Pearl not a very popular language you know Swift Ruby type script Les somewhere in the middle C++ appears to be more popular Python's quite High Java is very high SQL you know database now you may not you don't need to know all of these languages that's really important to know but what I'm trying to say here is you can reasonably infer that a really popular language is likely to have a lot of support around it for example a lot of easily accessible material now let's also look at it from the point of view of which language is popular from the industry's point of view you know from an industry demand point of view so we can take a look at well top paying is one way to do it let's quick take a quick look at most loved Reddit and wanted cuz I find that quite funny so we see the most loved language is rust um most dreaded language is Visual Basic and these are interesting things to know not necessarily directly relevant for your decision to choose a language I'd go with the most popular Technologies and then look at the top paying and see if that matches to your goals if it doesn't you need to have some real hard thinking about what matches to your goal so in terms of the indry demand which language is there a lot of demand for one way to look at it as well which ones pay the top dollar for so this could just be because there's a lot of demand for these but not enough Supply but it may not be a general purpose sort of language it could be quite specific and Niche and therefore may not be suited to your learning goals but it's interesting to see here that the top pain Technologies are languages like FSH and O camel closure groovy and pearl which was you know not what not a favorite language but quite in demand and if you scroll down to the bottom you'll see JavaScript HTML and CSS are you know not associated with the highest salaries in fact they're probably the lowest salaries and the reason is there's probably a ton of Supply at that area nothing wrong with that it also means that there's probably a lot of jobs there just may not be high paying jobs so that looks at it from the demand point of view now let's have a think about how do we find beginner friendly language as well there's not a great deal here that talks about that opinion so I'll just go to Google and say um beginner friendly oh there you go programming language and we'll just start with this entry which is just an except that Google gives me which talks about well JavaScript python Ruby what what else do they have at this coded Dojo site I'm just clicking on the first one that came up so this JavaScript python Ruby Java not sure what block lay is um but these are really apparently they consider them to be uh the top five programming languages it's a bit dated but I don't think too much has changed it's fair to say JavaScript Python and Ruby and Java are still very very popular beginner languages uh I think that's fair to say so that's one way you could go about identifying well what's popular what's not what do you want to do try and map it to your goals but have a really good think about making sure it aligns with your goals because it's not it's not important to go by what these stats say if it's not what you want as you can see see the numbers that we just went through look quite a bit different and I bring this up to prove a very important point just because a language is in huge demand in the industry if it's one of the harder languages then you're more likely to encounter frustration and give up there is no point picking up a language that is in high demand if you're never going to complete it so it is better to turn to that language once you have a robust confidence in your understanding of the fundamentals of programming in all language languages now unlike human languages the second language in Computing is always much much easier than your first let me share with you my personal story so that you understand why I've come to this conclusion when I started I didn't analyze it this way CU I did not had the benefit of this course I decided I wanted to build an Android app for myself and not a toy app a serious app eventually I gave up and had some developers overseas build it for me and even today it's still on the Android play store but I spent a little over four months trying to build an Android app with zero programming background except for a little HTML now maybe all of you are smarter than I was um that's entirely likely but this was enormously frustrating and a bad bad set of decisions so I gave up it just felt impossible and it kind of was it was impossible given my level of knowledge I knew nothing about the fundamentals of programming forget about the Android framework or Java I just knew nothing about the fundamentals and though I decided at that point in time that I better get to know Java a little bit I found it extremely hard because I wanted to build an Android App instead of understanding programming through the language of java you see I wanted to skip ahead skip the steps to the end goal rather than going through the steps and so it took me months and months and months and months of getting lost and discouraged and confused now today I'm good at JavaScript and not bad at Python and Java but notice that they're all fairly big enough friendly solid robust languages but I went about it the hard way the long and roundabout way a few weeks ago I happened to be asked to build a very basic react native prototype and I'd never done any react native work before but because I've invested so much in the fundamentals I was actually able to understand the basics of react native and knock together a prototype in two days because my fundamentals are strong that was not possible for me a year and a half ago it's taken a few years to get there so what does this mean for you as a total newa programming what should you do well what would I do today I would recommend that you pick a beginner friendly language get very confident with its core programming Concepts it may happen that this beginner friendly language takes you all the way to your goal languages like JavaScript and python are very popular for that reason because sometimes they're all that you need to know for what you want to achieve both of these languages can now be used on the front end and back end for example that's full Stacks so most people can accomplish 90% of their coding goals if not the entire 100% of their goals with just one language a second piece of advice from my personal experience would be to stay away from Frameworks and that includes things like react and angular and Android and the iOS Frameworks until you feel your fundamentals are solid it's better to be slow and get there than to rush yourself and burn out and never get there Frameworks are not the same as languages they they require to have a a fairly solid grasp of the underlying fundamentals before you apply the framework in my example using Android before I understood Java was a huge mistake React 2 needs a solid understanding of JavaScript before you can understand how to work with it same thing with Jango and flask they require an understanding of python these are just examples of what Frameworks are and the underlying languages first learn the underlying Concepts via the language before you move to Frameworks once you understand a language then a framework that's built in that language is enormously easier and definitely less frustrating to work with Okay but the question that then arises is well Zubin how do I know my fundamentals are solid here's how I knew this is the best answer I can give you and I think it's a good one once you're able to read documentation and tutorials fairly fluently with enough speed that you're automatically familiar with the concepts you're reading without having to really rack your brains to figure out what's going on then you know you've got decent fundamentals if you can read code in other languages and have a decent idea of what's going on then you're starting to get the hang of the go Concepts and it's probably a good indicator that you're ready to keep moving to the next level at that point as we always must come back to your learning objectives and goals at that point look at your goals and ask yourself what is the next learning objective and now you just keep doing that keep repeating that process until you achieve your end goal each step will take you forward but start small and start with things that will give you that quick win that I keep talking about keeps your confidence up make sure it's measurable and frequently measurable you know daily or weekly mini goals and metrics and keep moving onwards and upwards now if your goal in the longer term is to find work as a developer then be very specific about the kind of work and also the kind of employer that you're looking to join because it's important to keep scanning their job boods to identify the skills that they keep recruiting for and then that's your road map just develop those skills later on in this section in the next bunch of videos we will talk about what it actually means to be a front end Dev and a backend Dev and a full stack Dev at various levels of depth but for now just know that you can't be an effective developer without understanding common okay welcome back in the last video we talked about a very fundamental question around which type of language you should try and start with and how maybe that's the wrong question in this video we're going to start diving deeper into some of the other fundamental questions and some of the more practical aspects of starting your journey to code in this video we specifically going to talk about the tools you need to learn to code now I'm being very deliberate in my choice of words I'm saying the tools you need to learn to code that's not the same as the tools you need to be an effective Ive and efficient programmer to learn the fundamentals of programming you need to use only those tools that contribute directly to making learning easier and quicker most tools in the development world will improve your efficiency or your convenience around coding but not that many are actually necessary to learn to code and that's a distinction I'm making in this video so to learn to code let's start at the first position which is what sort of IDE should you use and IDE is the short form for the integrated development environment those are just fancy words for a code editor you see technically even the notepad or word software on your laptop is a code editor because all code is just text you can edit code and you can write code in anything that edits text coding is just writing text but most people prefer to use software specifically designed for programming activity and there's a good reason for that now these specifically chosen programming environments or software programs are more generally referred to as idees you also know that Microsoft Word for example is better for texts and paragraphs whereas Excel is better for numbers though you can do either with word or excel idees in the same vein are better suited for programming than just regular text editors they can be configured and they are designed to give you output and feedback within the application they may also often have useful features like debuggers Etc all of which you will start to use down the track once you've grown a bit as a developer there are many many popular IDs and you can really pick any one you can pick atom or sublime or Visual Studio code which are some of the more popular free ones out there and then there are paid ones like the ones that you can get as a professional from a company like say jet brains to learn with though I would suggest you just go with any one of the free or Community Edition ones doesn't matter the important thing is to just pick one of the good popular ones and learn to use it well which means you've got to pick it and stick with it keyboard shortcuts customizations configurations all these little helpers come along only when you stick to one application over a period of time so sticking to one application actually helps you get very good at exploiting its features and getting really familiar with them that's usually why people are loyal to one over another it's not because one is necessarily hugely better than the other it's just that switching to an unfamiliar one is a huge loss of productivity when you haven't got it set up properly and setting up an IDE and configuring it to your working style and preferences can take a little bit of time again that's not something you need to do right up front you do that organically naturally over a period of time as you learn to code some idees are specifically needed for the kind of work you intend to do for example if you want to build an Android app you're probably best off trying to use Android studio and if you want to build um iOS or Mac apps you're best to use xcode now again we're jumping a bit ahead of ourselves but this is just to give you context as to the different kind of ID environments available if you're interested in data science that's another example then there are IDs like spider which are designed specifically for that um but you wouldn't want to use atomus Sublime for that necessarily you can but a lot of people would prefer not to because spider is more fit for purpose also and this is something that's relatively recent as a development and fast becoming my favorite goto um environment is online idees because they're often integrated into your training platform or you can just get them free through a browser now if you've ever been to free code camp for example online which is a free coding school um you would see that they actually have an inbuilt IDE in the browser for you to practice the same thing goes for code academy and a bunch of others another fantastic in browser ID for quickly prototyping or practicing or solving a simple functional problem um which I personally use and love is called people.it that's repl.it now I should say I'm not promoting it or you know I don't get anything for this it's just that I found it very very useful um along with others like codepen which are also extremely extremely useful many web developers do use codepen and repl.it and jsfiddle to do little Snippets in practice these are typically referred to as online playgrounds and they're very good for prototyping small pieces and sometimes even showcasing your work you can actually build fairly sophisticated applications with them but it's generally not the way you'd end up going because you have less control over how your code's visible to the world now if I didn't want to download an ID and I'm just learning fundamentals I would probably save myself a lot of the initial setup friction and just use something like a repel. it or code pin or something for the first few weeks anywhere and after that once I get comfortable with that I may take out a day or so to install a proper ID in my laptop and set it up but that's just my personal preference the important thing like I said before is for you to pick something that you find it easy to work with and rewarding because it gives you quick feedback and stick to it as you will get more and more familiar and Adept with it over time okay so let's move on from IDs for just a moment because a lot of people also get caught up with things like Version Control which is often popularly referred to as git um and the other area people can sometimes get stuck on is knowing how to use terminal or Windows commands and things like bash and terminal scripts and shell Etc now all of these skills and I'm not going to go into too much detail because these skills are very useful and valuable for a programmer but they are not necessary for a beginner to learn in fact I would think that they can be a little bit Arcane and sometimes tough to comprehend and it's the kind of thing that'll just overwhelm you for a beginner don't worry about things like version control for the first several months don't worry about things like you know writing things in the terminal in these strange looking um boxes with lots of text that make no sense forget about all that don't let that distract you just learn the fundamentals of programming if you finding that you're doing stuff in the terminal for example and that you're lost all that means is that you've jumped a few steps ahead so you're using a resource that's probably not designed for where you're at at your level a well return return wellwritten tutorial will always guide you through using all the aspects that they're talking about but often they presume certain prior knowledge and if you don't have that prior knowledge you're going to feel overwhelmed okay so in this section we've answered the question what minimum tools do you need to learn to code and I've tried to draw the distinction between what you need to learn and What You Need to Be an Effective programmer to encourage you to take it step by step and only focus on those minimum tools you need to get started with learning the fundamentals programming computers great I look forward to seeing you in the next video okay welcome back in the last video we talked about the sort of tools that you need to start learning the fundamentals of programming rather than tools you just need as a programmer in this video let's talk about something a little bit harder to grasp and perhaps a lot more subtle but very practically important to what you want to do and that is how to identify and choose which skills you need to acquire I want to emphasize here I'm not talking about what you want to have not what skills you want to have but which skills you need to have and that's only possible by reference to the goals and plans exercises which I'm sure you've done a couple of times now th that exercise should have helped you identify what skills you need to develop to meet your specific learning objectives now we need to break those broad goals down or those learning objectives down into smaller discrete subg goals Each of which have a clear completion point that is a point when you know you've achieved that subg goal let's use examples of some popular goals to help you understand what I mean by choosing the right skills at a subgoal level so a lot of people for example want to be frontend developers or backend Developers or full stack Engineers front end means that they handle the stuff that the end user sees and interacts with back end means that they handle the stuff that the user doesn't directly interact with but which is necessary for the front end to deliver a certain user experience let's take an example so you understand this let's take an example like a blog site the front end is where people can read blogs and scroll through them and click on them and write and edit them but when they read write or edit things they're actually consuming creating and modifying data right I mean a Blog is basically just data that data needs to be saved somewhere it then needs to be retrieved from that storage place and if it's being edited it needs to be edited and saved and record skied and so on so the storage and retrieval is on the back end of the application because that is not what the user sees or interacts with but what they see in the browser is the front end if a full stack developer is able to handle the coding for the front end as well as the back end now if you want to be a front end dev then don't start learning about backend stuff choose skills you need for front end mainly skills like HTML CSS and JavaScript as the programming language for backend maybe you want to do it in Java or python or even JavaScript for full stack you'd need that and more like learning about database design Technologies even if you want to be a full stack developer just start with small goals start with the front end no bit bit about that learn a bit of HTML and CSS and then some JavaScript then you can move on to things like node.js for the back end and some other backend language like PHP or python what my point is here is that it's important to learn to separate the advanced skills from the beginner skills and that's often hard to do because there are a million different opinions people just tell you oh this is what you want to do this is what you need to know but you need to separate them out into stages of skill so a good way to do this constructively is to speak to your Mentor or others who've done what you're planning to do people who walked down this path before can give you a better map a useful approach for yourself in your Al time is to ask yourself is this particular subgoal necessary for me to learn next or is it just desirable this is the want to versus need to question is there something else that I need to know more than this in other words prioritize your skill acquisition in accordance with what you need to do next and there is always one thing not two or more things that you need to do next always boil it down to the one right next thing your top priority can only be one thing otherwise it's not your top priority if it's shared with other things that's the only way to be effective when you're learning an unhelpful question is should I know this or will this make me a better coder chances are the answer to both is yes in order to achieve your longterm objective but that's not going to help answer the question of what's immediately next as a subgoal so that's what causes the confusion and the decision making is so hard it's because you ask a slightly different question which gives you a discard in answer when you focus on the question of what comes next make sure it's literally what comes next do I need to know this next can I get to where I want to be without knowing this is another way of eliminating what doesn't come next so sorry to hop on about this but it's really really really important to avoid the temptation to jump too far ahead don't be stupid like me and and try to go from zero to Android developer in a week or a month you you know you just cannot not get to the 10th floor of a building without going up the stairs or walking up the elevator whatever it is unless of course you're Chuck Norris step by step is my advice and there is always one step that comes next now you may be able to see three or four steps don't try to do them all don't leap them all just do the one steps it does take a little work to figure out what the next step is and you know You' probably get it wrong the first few times that's okay you're still building your intuition around this so that's also why I've designed these lessons for you to keep coming back to because the more you come back to them for quick refresher the better you'll be at making judgment calls like what's next the whole point of this this class and this course is to guide you through these inevitable moments that come up time and time again okay let's keep moving because there are more videos to be done welcome back in the last section we went through a number of videos um where we helped to work through the fundamental decisions that anyone who's new to programming needs to go through in order to be effective in their Learning Journey in this section we're going to start looking at some of the strategies what I call open Secrets um that make people effective Learners now I've been using dozens of learning strategies to become what I would consider to be a super learner over the last 15 plus years and I've taught myself a number of things and also learned professionally through a number of of sources and I know that you can actually boil down a lot of the learning strategies for coding specifically just a handful of them and that's what I've done in this section I've taken all the learning strategies I know of experimented with a whole bunch of them and reduce them to a few so that you can use them in order to identify which ones really work for you as you learn to code um many of these strategies aren't specific to coding but I've tried to make them about coding so that it's easier for you to contextualize them and the reason I call them open Secrets is because actually everyone knows them is just that either that they don't know they know them or they're just not willing to apply them but that's the secret that you've got to apply so in this section we're going to talk about some ways to learn new skills very fast as fast as possible really while growing your coomet so it's not just about learning things very quickly and then not being competent in them it's really important that you retain competence um in terms of the sources for a lot of these strategies I've picked them up from the education Sciences from my study of psychology and meta learning um and even the experience of other super Learners like Tim Ferris Etc been really useful to validate some of the strategies look I'm really excited about this section so let's not waste any more time and let's Jump Right In I'll see you in the next video now very quick update for me in 2023 at the end of 2023 um this used to be true that I'd learn most on videos but it's actually no longer true on the job for me anymore because as I get more senen and experienced um a lot of the prerequisite knowledge is already in my possession in in circumstances where I'm working with things I'm somewhat familiar and have the right intuition and so it's actually much easier for me to Now understand what the doc documents mean what written resources are trying to tell me I'm able to pass through that information much quicker simply because I'm a bit more experienced compared to you know four or five years ago however there are still some topics um especially brand new topics are just topics that I'm trying to learn entirely for fun of my own growth where I typically still will start with videos because personally I find videos the most efficient way it's there's a lot of words that you don't have to deal with when you can just watch somebody do it right visual media much more Rich so I still use it but on the job I find more often than not I'll do a very quick Google search a stack Overflow search a chat GPD search whatever it is find the text reason about it go to the documents find my way through the documents and it's actually much faster than trying to find which video is the right one for me because sometimes videos can be hours long right so it's actually much more efficient this way so you will notice too as you get better and more ad dep and more familiar with things um your the your chosen medium for finding the solution that you need in that moment will change depending on what how much time you have what your goals are what your objectives are and what your favorite method of learning is okay in the last video we covered the first Open Secret which we call the minimum effective dose in this video we're going to talk about a big and very important secret secret number two now you do remember from the introduction to this section that I did caveat that these secrets aren't really Secrets at all I mean they're open Secrets so I want you to remember that um and I'm calling these a secret because everyone wants to know what the special source is in the recipe for success but they already know what it is and yet they think it's something else in fact you probably already guessed what secret number two is because everyone knows actually what it is and sadly it's not glamorous the secret secret number two is is practice that's it hey I did warn you that it wasn't going to blow your mind but you know practice is so completely underrated and maybe it would blow all our minds if we just saw how much practice goes into excellence and what what incredible things you can achieve by just following this secret I don't know that's just what I believe but I'll tell you what let's dig into it hey did you guys know that Benjamin Franklin used to study his favorite authors this was back when Ben Franklin was training himself to be an author he would study his favorite authors and I don't mean just study his authors he would actually pour over their books and writings then put them away and for days on end try and reproduce those writings himself by trying to imitate imitate the bits of them he really liked that's an enormous amount of work I mean Benjamin Franklin effectively practiced being the authors that he admired that is an enormous amount of commitment the reason why I think this is still a secret this practice concept is because all of us have a natural tendency to want to avoid the one thing that works which is practice the secret is that it is actually guaranteed to work practice will 100% get you to the level you want it may take you more or less time than someone else that's almost irrelevant to be honest and maybe it'll take you more effort or a little bit less effort really depends on what your inherent skills are but you can't avoid the fact that practice is the only thing guaranteed to get you the results okay enough preaching about the big secret the real question for you to make this practical is what are the effective forms of practice when it comes to learning to code because that's what this course is all about so I will share with you through my extended period of experimentation and trial and error the principles I've learned about effective practice ice when it comes to programming number one programming requires different skills to come together and it's important to keep in mind that each of those skills need practice so two is about getting more specific you're learning fundamental programming Concepts we talked about this in the fundamental decision section you're learning how to program a computer for this you need to practice things like syntax of your chosen language and the way in which you structure a small code statement how you declare a variable how you may need to keep in mind what sort of data is represented by that variable and all these little things all these little things matter and they get better they become more natural for you with practice you know what the famous joke about coding is how a semic semicolon can crash a code it's true so even putting in semicolons in the right place where the language requires it does matter the more you do the more fluid you become it becomes like a second language the more fluent you become in writing those basic statements but initially it takes time so you you need to practice with patience the third principle I can share with you is that as you practice more and more complex chunks of code say for example you're asking a user for a little input maybe their age and then you want to add 10 to that age and tell them that in in 10 years they're going to be X years old right a plus 10 now that requires practicing slightly more complex levels than just the initial stages it's basic conditional logic it's okay if you're this many years now in 10 years you will be doing you will be this many years which means you're X plus 10 years which is a mathematical operation but there's also an if statement there so to do these patterns of code which are absolutely the building blocks of a program you have to learn the Habit it's it it'll feel strange at first and it takes time so these patterns and routines take practice so you start off with the basics then you move into these small little code patterns and chunks and that'll then take practice even though the easier bits now start to feel like second nature all right the next principle is as you're building up in complexity you'll need to really start to practice how to Google the right questions to get the right answers now people may not appreciate this but about 90% of the time you spend writing code is actually spend researching the best way to do it um that could be the most efficient way to do it or the correct answer for something you're not really sure how to do so make Google your friend it's one of the best friends a developer can have and Googling the right thing is very important so that you get the answer as soon as you can initially I didn't even know what was going wrong so my Google searches did take me to the answer now I have developed a really good intuition I can see what's going on I can see the error and I can in my head calculate okay it looks like this is what's going wrong I just don't know how to fix it quite yet and so I can go in and Google it's a huge part of a coder's workflow make no mistake Googling is a massive part of what you do as a coder So reading through resources like stack Overflow or Wikipedia or the documentation takes practice too and that gets better the more you understand how the language is working or the framework is working the more you understand what you're doing then when you read the advice you get it all just makes sense almost effortlessly over time so you may ask for sauce but if you know specifically you want Tobasco that helps a lot right that's that's an example I can give you of how Googling specifically will give you a much better response than just asking for sauce okay so that covers some of the big principles and you can see there's a chronology to it each Builds on the complexity that went before it now let me show show you these skills take time and practice and I'm I've hopped on on this also in the course that it's not something you can do in a month or two or three well maybe you can but I wouldn't expect that initially when you try to read documentation it's going to overwhelm you and probably throw up many more questions than than the answers um that's okay that's actually a signal that you may have jumped ahead so step back a bit go back a few steps to the level that feels right for you and slowly work up from there an example I can give you of this principle is when I was younger I taught myself how to play the guitar today I'm pretty good at it but when I first started first I to learn how to press the strings right to the guitar and then if the guitar Was Out Of Tune I had to actually learn how to tune the guitar so that playing it actually made sense so it was so painful it hurt my fingers and you know I think oh I'm going to try and learn this tune today but it would take me one week to learn it and not just a few hours because there was so much that I had to learn to even get to a point where I could play a tune it's the same principle with coding it it just seems to take forever at first but that flywheel just keeps turning faster and faster the more you practice it so practice practice practice be patient practice practice practice I know I've said practice a lot of times this video because I want to drive the point home I would recap this section but I think I've made the point abundantly clear you'll never know whether there's enough practice but you will know whether you're being fluid and if you're not fluid then you could use a little more practice that's the rule of thumb I go by all right so don't skip the step but let's move ahead to see secret number three okay welcome back in the last video I revealed to you the Earth shattering jawdropping lifechanging Cosmos quaking secret of practice in this video I'm going to share with you something maybe a little bit more down to earth we're going to call it secret number three and the secret really is that you don't need to learn only from experts or from people online you can learn from your peers and others who are at a similar stage or maybe even who are slightly behind you and so I call this secret to is greater than one because really what it's saying is you don't have to do it alone and doing it with somebody else can take many forms which we'll talk about shortly but doing it with other people is a very good way to embed the knowledge in your head but it's not something you want to do too early in your journey so my personal suggestion is maybe don't do it in your first 4 to 8 weeks just concentrate on yourself and building your first layer of fundamentals and then after that initial phase start to involve one or two other people in your journey to code now when I say involve others there are three ways that I would recommend you do this you don't have to do all of them or you can do all of them or choose the ones that work and are convenient for you okay so the three ways I would recommend you do this are number one read the code of others from tutorials or even just give GitHub it's great but try and read the code of others especially on GitHub um over time you learn a lot maybe not initially it'll feel like a real struggle but as your knowledge grows your ability to read other people's code and know what's going on will improve and so that will teach you not just how to do things but also how not to do things you'll learn either they've done something better or they've done something that doesn't work as well as something you worked at all great learning some of the needest tricks I learn learn was from Reading other people's code thanks to the open source movement right so get involved with the open source movement if you like if if you feel comfortable and you don't have to intimidate Yourself by thinking you need to build an entire app on your own that's not what open source necessarily means you can start really small by just offering to write their documentation a little better which is often an overlooked part people are so busy focusing on the code that they don't write great documentation or the documentation is not beginner friendly as a beginner you know how to make it beginner friendly so that's how you can get started by contributing reading other people's code is actually really valuable when you need to use libraries and chunks of other people's code or in a professional environment where you probably get a job in a place where you're not writing something from scratch right you'll have to work with other people's code so getting the hang of reading code is really important in a professional environment okay number two another way to make it a little more collaborative or social um and involve others is to teach what you're learning a lot of people have done an incredible job writing little tutorials or blog posts telling others how to do something but the reason they're writing it is because they've just leared or they're in the process of learning how to do that even I did that um I maintained a small and and not periodically updated it was fairly infrequently updated blog um but summarizing the key principles that I had learned part of it was to document for myself so that I could always come back and have a quick reference guide to building something or a piece of you know or a functionality but also as a way to force myself to bring these Concepts into words that are comprehensible to other people which then builds your ability to communicate technical things that's a really really important skill right the ability to communicate your technical Concepts to translate them from your idea in your head to something another coder can understand is a vital skill especially at the workplace if you want to be a professional dip if someone asks you a really great question and you don't suddenly know the answer to that that's a really good sign that hey you know your learning could could get even better in that subject so you you just tend to learn by teaching the opportunities to teach others are actually more common than you think you can teach people at work you can teach people at Community programs you know you can write like I said essays blogs and contributing to open source there's actually a lot of ways in which you can teach others and help share the knowledge technique or method number three is pair programming which is quite common in the development World especially in the educational scene but also as part of training given at work um where you know developer teams are encouraged to PIR program and this is because it really really does work the concept is you and someone else will take turns at programming one person is the driver which basically means that they're going to be actually typing out the code and you know writing it out into the IDE and the other person's the Navigator who's the person who's doing the thinking and trying to articulate their thinking in language that that the driver can understand and type into the IDE so the effect of this is that it teaches you to communicate technical Concepts while collaborating with others and developing the empathy to know know how to express an idea that's in your head in a clear concise way that somebody else sitting next to you can immediately implement it now you do switch quite often so you know you may do 15 minutes 20 minutes as the driver and then take over as the Navigator and you switch back and forth um and if you can do this it's a really valuable skill at the workplace sometimes maybe your Mentor or your model if you happen to know them or have access to them um Can can do this with you and train you up so if you do it with someone who's a lot better than you there's a great deal of learning but even if you do it with someone your level or slightly behind you that's fine too you don't need to do it in physical proximity with each other so in this modern day and age we can do this online you can use Hangouts or Skype or whatever it is and a screen share and write code in real time with each other and collaborate that way all of these three techniques are really really really helpful at bedding down the knowledge that you've developed um as some of you may know repeating what you've learned with a bit of spacing in between is a highly effective technique of making sure you remember longer and one great way of repeating it is by having to teach someone else okay so that's secret number three which is two is greater than one and I will now see you in the next video okay welcome back in the last video we talked about secret number three which is how two is greater than one in this video I'd like to talk to you about the reality of coding which really is quite intellectually demanding and along with being intellectually demanding it's also quite emotionally demanding and can be quite draining and the reason for that is you spend a lot of your time especially in the initial part of your journey you're going to spend a lot of your time being confused and frustrated uh dealing with a lot of setbacks um and that can be quite hard so secret number four which we're going to talk about in this video is going to be quick it's sounds trivial but it's really really important because it does set you up for Success the only thing is it's kind of hard to remember to do it when you're in the thick of coding so secret number four is called pace yourself and it's really important when I say pace yourself I really mean two things one I recommend you follow a process where you learn something in a finite amount of time that's not too long and then you take a short break for something else then return I do not recommend that you do marathon sessions even though that's what it looks like is normal in shows like Silicon Valley and stuff I personally follow the pomodora technique which is a proven way to keep your learning resilience and redention up I can add more links for you in the in the in the notes to this lesson second thing I'd recommend you do do when it comes to pacing yourself is to learn when to walk away now this sounds really quite silly but it's actually really important getting stuck when you're coding is a very normal and sadly very common and inevitable part of coding coding is just one of those things that can consume your focus completely but the problem with that is that our Focus gets narrower over time and so does our ability to think laterally and creatively solve problems over a single session that extends for too long you will find your cognitive capacities is declining so when we don't solve our problems we'll get frustrated we then feel angry and we want to give up and we want to avoid a situation that discourages us that much right so rather than exhausting ourselves over long sessions I recommend getting up quite frequently doing a little exercise walking the dog meditating listening to some music that improves your State uh you know do things that switch your emotional and mental state and these are all proven techniques to re resetting yourself mentally now I should warn you that when you're in the thck of coding or you feel you're on the verge of a breakthrough or you're really stuck and it's really annoying you that you're stuck it'll really feel like you cannot possibly step away from that problem at that moment you're you're going to feel like that's the worst time to walk away it's so hard to do when you're deep in code I I accept that I recognize that I struggle with this pretty much every day really but I have found out almost universally that when you walk away from the problem especially when you're coding somehow it gets solved subconsciously and when you return back to the problem you tend to solve it much faster or you attack it from a new angle that only could have occurred to you when you release the problem for a while I've made the opposite mistake on several occasions right I made the mistake of breaking my own rules and coding for 4 hours straight or something and then getting massively stuck in the second hour and then I lost the other other two hours because I just stubbornly refused to step back and give it some breathing room and then I come back later on and the solution actually took me 10 minutes so I recognize the concentration very hard to break but concentrating for a long time with great discipline on the wrong thing doesn't mean you're going to find the right solution so take a break have a kit kat do something completely different and come back just as a completely interesting side note and this is not so much of educational value here but there is a phenomenon that you should watch out for when you code very intensely what happens is you you can tend to start dreaming of code and it can actually impact your sleep now I personally have gone through this several times I still go through it when I code too late into the night and then go straight to bed and after a few days of this I'm pretty useless it's just that your brain hasn't shut down properly if you're curious about this this phenomenon is sometimes called the tetris effect and I've added some links in the notes to this lesson as well so just keep in mind to recap that mental tiredness is a very normal part of really getting into code coding is very addictive and Incredibly absorb loing and that's what's fun about it that's what's so rewarding about it but that's also what's so exhausting about it and so it makes it doubly important that to sustain yourself you need to pace yourself and that's what the secret number four is pace yourself so you can be resilient and bounce back keeping these things in mind will make you much more effective in managing yourself on your journey and we know that better selfmanagement means you'll achieve more goals which means you'll be more successful all right that's it I will see you in the conclusion to the section now all right guys congratulations you've reached the end of yet another section and you are making such great progress you're going at such a great Pace that you're going to be done very very soon in the last section we talked about the open Secrets as I call them that um help you learn to code very effectively and so now I think you're ready to actually go into the next section which is going to cover some of the setbacks that many people do encounter I hope you don't but it's very possible that you will and I hope to take you through some techniques that I found incredibly effective at dealing with those with those setbacks constructively and effectively so you should be really proud with with the progress you're making with every passing video you're getting so much closer to your goals um and I hope you're feeling good about that so take a short break and I'll see you in the next video Welcome Back to the next section now all the videos in this section are designed to help you prepare mentally we going to make sure that you have a really really solid unbeatable mindset why is mindset so important it's because the quality of your thinking when confronted with certain problems is what's going to help you see your way through those problems of your hard times and by definition hard times are really hard because setbacks and failures and doubt are really difficult things to deal with the coding journey is filled with these setbacks and it's filled with these negative experiences so it's very very easy to quit it's hard to persist and very easy to quit but how you think about it your mindset is going to be the difference between persisting and quitting and that is the difference between achieving your goals and failing because failure only really happens when you stop trying or when you quit and as you know now my goal and the goal for you in this in this entire course is to do everything we can can to make sure that you don't get discouraged or let the failures cause you to quit we need to make sure that you don't give up so that you achieve your goal of becoming a coda if you were an athlete for example mental conditioning would just be as important as the physical conditioning you would be trained to handle your emotions when you're playing what seems to be a game without any hope if you look at Champions in the sporting world they're usually someone who overcomes the ODS and fights the battle when it seems hard to win winning easy games is is not the mark of a champion fighting back the setbacks with a great attitude is what makes the champion we see this all the time in the sporting world so why shouldn't it be the same for coding I firmly believe that if we train for our learning objectives like we would train for a sport we would get fantastic results instead of a physical Marathon just think of this as training for an intellectual one there no real difference this intellectual marathon is also filled with setback and confusion and doubt and failure and there are certain common themes that have emerged from my experience and my research into how people experience their Journeys to learn to code this section takes those most common themes and trains you to recognize them to see them for what they are to deal with them and not be tripped up by them so you've made it this far which means you've got what it takes to be a Champion for this intellectual Marathon so let's keep going and I'll see you in the next lecture all right one of the first setbacks I think anyone who's learning to code is going to encounter is that sense of complete and utter confusion things just don't seem to make sense initially right there are all sorts of competing words and inconsistent terminology Concepts that you're reading about even at at a beginner level that just do not make Mak sense you cannot understand them you don't know exactly what they're trying to say and your brain really feels overloaded by the information because you're not just reading trying to read and understand each word in that has a specific meaning and so your brain is really working hard to fully absorb the meaning of every word or every sentence while at the same time trying to stick to the overall concept that's being communicated you are definitely not alone the problem is not many people talk about this which is why I'm doing this video so the sense of total and utter confusion is normal and possibly even inevitable often and this is where I want you to really think about it often it's also a signal it could be a signal for example that maybe you've skipped a step somewhere and maybe it's not always the wrong thing skipping a step is only the wrong thing if it wastes your time energy and money or or if it frustrates you so much that you feel like quitting or are discouraged from continuing so if you're feeling confused the first thing to ask yourself is why am I in this position why am I doing something that is confusing me so much what's the reason for this confusion could it be that the resource is not right for me could it be that I've have jumped too far ahead the second reason is much more likely if you're feeling discouraged and frustrated it's usually reason number two because reason number one just makes you go find a better resource once you are confident and have strong fundamentals reason one stops being a reason it actually stops causing frustration or fear or at least happens much less often with experience you learn to recognize reason one so well that you immediately correct your course of action but initially reason number two which is that you've jumped too far ahead can cause all sorts of doubts and emotional reactions and that's why it's such a dangerous setback for many people so the best way to tackle this is to assume that you've driven into some sort of dead end some dead end alley so reverse your car back up and go back to the last resource that you were really comfortable with that is the last learning that you felt you had mastered it should be the learning objective immediately before this dead end that you've gone down then once you get there ask yourself what is a smaller Next Step than the one that I previously took that got me all confused if you look carefully you will see a smaller step that'll get you there typically the confusion happens when you try and jump over three steps at a time rather than just the one next best step and really that's all you need to do now it may sound frustrating that you have to do that and you may think it's going to take you more time but I promise you taking a smaller step and not getting stuck is much faster than trying to LEAP prematurely to a bigger step and falling down a hole it's important to build up slowly into the lesson that got you confused so much now I totally respect and understand that we're all impatient but if you're in a hurry to get someplace the quickest route is always the one you know you can navigate rather than the random experimental route that looks shorter but you have no idea what it's all about for now let's recap quickly being confused and lost is common and it's simply a signal that you've jumped a little bit too far ahead assume that you could have gotten to this point by taking slightly smaller steps so go back and give yourself smaller quicker wins it may take you a little more time but in the long run it takes a lot less time when you don't get stuck and confused okay I'll see you in the next section okay welcome back in the last video we talked about one of the most common setbacks which is the feeling of absolute and utter confusion in this video we're going to talk about something related and just as common but very very different at the same time it's the sense of being completely overwhelmed now it's important to distinguish the two types of feeling overwhelmed one is when you're overwhelmed because there's just too much information it's like drinking from a fire hose this you're just taking on too much information that's one type the second type happens quite often when you start to learn something you start to learn to code for example and you realize as you go along just how much you don't know and how much there is to know and suddenly you realize that to achieve your learning goals and objectives it's going to take a lot more learning than you had originally planned and that can feel very very overwhelming so that's the second type of overwhelm and I refer to that as an estimation error you've not estimated correctly how much you're going to have to learn to achieve the goal and the plan you've set out for yourself so two types for these two types typically there are three reasons a total of three reasons that could explain one or both of these types of overwhelm so we're going to talk about the types and the reasons for feeling those types of of overwhelm in this video so feeling overwhelmed comes from three reasons as I've mentioned one is you've skipped steps and jumped ahead two you've not quite had a specific enough Focus resulting in you doing far too much and three you've underestimated the size of the goals specifically how much you're going to have to learn in order to achieve your goal now we've covered the first one that is skipping ahead and having jumped too far ahead in the previous video and confusion and the solution and my recommendations are the same so I'm not going to cover that again here just return to that video anytime you need to remind yourself let's look at reason number two what happens when you're feeling overwhelmed from having to absorb way too much information what could the reason for that be well that feeling is a signal that you're absorbing way more information than you can process which typically Happ happens because you're trying to do too much so the solution is to ask yourself why do I feel like this and then write down all the pieces that you're simultaneously attacking all the things that you're simultaneously doing that's making you feel this way and really ask yourself honestly why they need to be done simultaneously why do I need to do all these things at the same time do they really need to be done at the same time so instead of having them as a giant big list of things to do just rewrite them as a sequence of steps and make sure and I cannot emphasize this enough but make sure that each step in that sequence is the minimum effective dose for the next step and that all these steps taken together are each 100% necessary not nice to have but 100% necessary to achieve your learning objectives in some senses each step that you're looking at here is the learning objective of the previous step and it telescopes upwards that way so follow this recipe and break it down now I've said this before and I'm going to say it again yes this approach may make you feel like you're extending your time to completion it's going to take you longer to get there and that really can feel disappointing and stressful and frustrating I completely empathize but also let me promise you that that is just an appearance it's going to feel that way but it's not actually going to be that way it is going to perhaps take you longer in the short term over the next few days but it's saves you a lot of time in the long term because you're not going to get stuck that often and you're certainly not going to be so discouraged that you just throw your hands up in the air and say I'm not doing this and then you lose a few months so please please trust me on this until you see it working for yourself follow these suggestions do less which is doing more and be absolutely clear that each step needs to feed into the very next step after it so the mindset that you need to have as you go through this process in this training is that feeling overwhelmed is really quite natural and a very normal part of the learning process especially when you're extending outside your comfort zone which is always a good good thing so the mindset and the feeling of overwhelm how you relate the two is by recognizing that that feeling of overwhelm is a valuable signal not something to be afraid of but a good piece of information and it's teaching you to manage yourself and to plan better if you feel like quitting that's normal too just remember that this new mindset you have is meant to prevent you from quitting so instead of giving up in your goal just change your approach to one that's better suited to achieving your goal which is what this entire video is all about now let's talk very briefly about question number three or rather reason number three if you're feeling overwhelmed because you've suddenly realized that you underestimated how much work you're going to have to do how much there is to learn then the main question you need to ask yourself is do you still want to achieve this goal so you end up really having to revisit your goals and plans and say do I really still want this am I still committed to achieving this look hard at your plans and goals from section one and if the answer is yes then adjust your learning goals from section one to reflect the additional steps it's going to take you've got enough learning and training now to know how to redesign your plan and do it in a way that's sustainable however if you decide you don't really want to continue to learn to code then that is your choice but if you're thinking this I would encourage you to not take that decision to not proceed because you're feeling intimidated if you decide not to proceed don't let it be because you're giving up but because you have other better priorities for your time okay so let's recap the typical reasons why why coding is overwhelming falls into two types or categories one is just the share information overload and the second is the realization that you've underestimated how much learning is required for your specific goals both are solvable problems because both are just signals and they're common they're normal and they can be dealt with very effectively using the tips and techniques I've suggested in this video okay let's move to the next video okay welcome back in the last video we learned to accept that feeling over welmed is a normal and natural signal and can be a useful signal that actually helps us improve our plan so that we can achieve our learning objectives in a better way in this video we are going to talk about something that affects every single person on Earth doubt specifically selfdoubt we all doubt ourselves and no matter what we see the truth is everyone is out there doubting themselves fairly constantly we are all much better at looking confident than feeling confident and that's also true of coders there is a term for this among super high Achievers many of them report experiencing what is known as imposter syndrome which is the feeling that they don't really deserve their success and they may be caught out anytime now for being frauds so why am I telling you all this if big Achievers in all walk of Life feel doubt and even feel like they may be frauds then feeling doubt when you're learning a new and difficult skill is totally okay that's a normal healthy time it's fine you're okay it may feel like you're not fast enough or not talented enough to learn to code but you're wrong it just feels that way this is a great time to ask your Mentor or model on whether they felt it and how they dealt with with it I guarantee they felt it and have struggled with it I did too and all my mentors did too a lot I've included the first blog I ever wrote about this as a resource to this video If you read some other resources in this course you would have seen this is a recurring theme this theme of Doubt there is no great trick to beating self doubt it boils down to two fairly mechanical things one except this is normal Universal and perfectly okay it's an important mindset to have then choose deliberately to ignore it your doubts and fears are only the voices in your head they are not actual facts the fact is that you cannot do this task in front of you yet remember one of the resources I referred to earlier Carol Dre's book called mindset in that book she talks about how people sometimes think that they cannot do something whereas the better way of thinking of it the more productive and accurate way of thinking of it is that you cannot do this right now thinking that you can never do it is an opinion thinking that you can't do it right now is a fact and it implies you can do it soon having that mindset is a growth mindset and it helps to remind yourself that everything is learnable it just takes time and effort the second mechanical step that will be part of your mindset going forward is to Simply keep at it that's it there's no magic just keep at it we've talked about practice revisit that section maybe read a little bit more Let it take a little bit more time it takes the time it takes but setbacks to your time plans are something I cover in the next video so we'll wait for that for now just remember that if you can't do it that is just one snapshot in time for this moment you cannot do it you will eventually be able to do it just like at first you probably sucked at Dy driving or at writing and now you can hold a heated debate with someone while driving and you can answer phone calls while writing it will come to you don't worry just keep moving forward heck it's not even my advice it's advice from nobody is going to hit as hard as life but it ain't about how hard you hit it's about how hard you can get hit and keep moving forward how much you can take and keep moving forward that's how wi it is done so when you're feeling doubt don't assume that this is a signal that you're not good enough doubt is not really a signal it's a human condition thing it is our inner dialogue and it's usually an opinion not a fact just focus on the facts you're going to learn to code that's a fact okay enough motivational speaking I will see you in the next video Welcome Back in the last video we talked about selfdoubt and some of the mindsets you need to have to effectively tackle it how common it is how Universal it is and how it's not really that much of a problem to deal with if you know how similarly in this video we're going to talk about the frustration that comes from coding taking the kind of time it does unfortunately it does take more time than you expect and that's almost universally the case in one of the previous videos on myths we talked about one of the myths being that this is something that you can do really quickly for example you may be tempted to believe that you can knock together your next startup in your garage or your dor room in a weekend the popular myth around this is unfortunately not true so the question then is what is the mindset that you need to deal with the inevitable time it's going to take and let me say this again progress is going to be slower than you hoped that is almost always the way it is it's just a fact so knowing that what sort of mindset do you need to make sure that you're not going to give up that's what we're going to answer in this video so knowing that it's a fact that it's going to take more time than you expect or plan doesn't really make it much easier to accept does it but it is worth remembering that what we're now dealing with is not really learning anymore what we need to do is develop a mindset about patience specifically the patience to work until we achieve our goal now this may sound like the most common sense stuff to you like why are you telling me this Zubin I know all this yes you do everybody does and yet almost everybody experiences the frustration it's because there is a gap between what we know and what we believe about ourselves in a situation so what's really important is to cultivate in yourself the mindset of patience and discipline and it's not just about coding the reason we know this Open Secret and the reason we all are aware of this mindset in theory is because it works in every area of life and in fact I'd argue it's particularly relevant in coding for someone who's new to the journey of learning how to code I would actually encourage you to view it as a form of training see programming as a craft because that's really what it is you have to have a Craftsman's mindset you need to Apprentice yourself and all crafts take time to master it's a slow deliberate and steady process and through it you will also learn to appreciate that estimating coding tasks is actually hard you'll learn to do it much much better with practice no doubt but it'll give you a newfound empathy for the idea that you can knock together something very quickly in a few hours the reason why this mindset of patience and discipline is critical is because there is a real danger that you will run out of patience and give up and we don't want that right sometimes in some circumstances it is okay to decide not to do it for example where you're in an entrepreneur and you run out a Runway and you only needed to code for the sake of building a certain product so maybe you ran out of Runway maybe you found a technical cofounder maybe you found a prototyping tool online that's a more efficient path to achieving your goal in that case it sort of makes sense to not code if the coding was only a means to that end but if you intend to learn to code because you want to be a coder then losing patience is dangerous because it will cause you to take shortcuts and waste more time and effort or it'll cause you to give up in which case you'll never become a coder so here are some ways for you to overcome the discouragement of slow progress one go back to the section on goals and plans and the five ws and refresh yourself on why you want to code why did you want to learn to code in the first place and is that reason something that still resonates do you still really really want it when you really want something and the reason why you want something is still very fresh in your mind you will not give up that's just how the human mind works number two remind yourself of the simple but inconvenient math of learning something new success is equal to time plus effort there's no getting around it but it also means that taking longer means more success because it's linked to time you know I personally struggled with this situation and this mindset so many times I mean progress for me was so slow I ran out of Runway I ran out of patience and then I ran out of confidence at one time I had more money than I had time at another time I had more time than I had money and each time I adjusted my plan to suit my specific circumstances that's actually how I discovered the concept of the minimum effective dose to get the outcome I considered adequate given my limited resources and then I guess my life changed a little bit when I read a certain letter that Tim Ferris included in his book tools of Titans I've provided a link in the resources section to this video this letter summarized the whole issue of slow progress brilliantly It's a letter from a coach to Tim Ferris and I've included an except of this letter in the course resources but you know what I recommend getting the book it's worth it even just for that one letter definitely read it in fact the first word of that letter sums up the mindset you need I'm not going to tell you what it is cuz you've got to go and find it yourself okay that's enough for now I'll see you in the next video hey welcome back in the last video we talked about how slow progress can be we saw that slow progress is an inevitable part of learning complex skills initially it takes ages we seem completely incompetent in fact there is a wellknown framework for understanding the stages that every human being has has to go through as they travel from being a newb to being a master here it is and unfortunately I don't have a source for the drawing other than the Reddit link I found it at it's a fantastic drawing and it sums it up beautifully I've added the Reddit Link in the resources section to this video as you can see moving from step two to step three is the hardest it's really hard and it's that truff of Despair that overcomes a lot of people so in this video we're going to talk about getting stuck why because that happens a lot in coding and you need the right strategies and mentality around it let me assure you this happens to senior experience programmers too I've added another resource to this video which is a quora post on getting stuck in programming just for example sake it's normal and common it happens at all levels you just get get better at dealing with it mainly through better strategies that come from your experience personally the first few months I got stuck a lot I mean let's be honest console errors look like a mess they are absolutely bizarre looking and are definitely not beginner friendly it's just this crazy jumble of text and weird words and numbers it makes no sense and debugging really does feel frustrating and mysterious so I got stuck and stuck and stuck and stuck it made me so angry because often I was following somebody else's tutorials and then things a change in some library or package or the the operating system or something and so the tutorial is no longer up to date and people are writing new tutorials but I'm stuck in the old one don't know about the new one and so my projects pretty much wasted or at least it feels like that to me so my suggestion is this when when an error happens the first thing to tell yourself is okay this is now going to take me some time accept it I don't know how much time so best not to be in a hurry I guess maybe better not to expect to resolve it today it would be great if I could but it's very possible this may take a few days next ask yourself can I make any sense of this error message look for any clue that you can Google about and then you Google the errors and keep searching till you find someone that has handled something similar so sometimes it could be a small error or bug in your code and you need to step away and then you'll see it the point is you step away and then you slowly build up the skill of troubleshooting your errors and Google and stack Overflow are your friends but it does take a lot of patience and effort to read through all the results carefully and to understand where this error is coming from that also takes experience sometimes people use terms and words interchangeably and that can cause a lot of confusion for you so just just keep patient this is part of the learning process and remember pace yourself we've talked about this pace yourself so you can be sustainable unfortunately as we talked about in the last video it's going to take the time it takes and as you experience these sort of frustrations and getting stuck more often you do get faster at diagnosing and resolving the issues but if you rush too much on a new era then you run the risk of making mistakes that'll cost you even more time but I find and I'm sure this is a consolation to you that the first time I try anything I rarely get it right I make mistakes and come up against obstacles I hadn't planned on the second time well that's a different story the second time is usually a lot faster it takes me typically about onethird the time of the previous Tri and that's true of diagnosing and solving errors too so the mindset to have here is not to blame yourself but recognize this getting stuck issue as a necessary and unavoidable part part of coding and an important part of your learning experience also remember that the first few times are the worst like anything else the first few times are the worst it's going to be slow and frustrating needs a lot of patience and focus on not rushing yourself things are going to break things are going to make no sense sometime you're going to get stuck in a hole and you're not going to know how to get out of it for a few hours that's just how it is and it's okay sometimes you've chased the wrong angle and you need to rewrite an entire chunk of code I've had to do that several times even recently I thought I'd research the library pretty well and used it in a small project 5 days later I found out that the library does not actually do something the exact way I needed it to I had designed my app the wrong way it was my fault and I could either rewrite my code to fit this library or start researching again to find another library or write my own code from scratch instead of using that Library all these options were going to take me time and I found that out after being stuck for a few days so i' already lost time I had made the mistake of rushing another 2 hours of reading on the library would have given me the information I needed to design my app right from the start and saved me potentially over 8 days so getting stuck is normal it's part of the experience don't rush yourself don't let despair overcome your desire to be creative through code this is one of the less fun parts of being a developer there is no doubt so just focus on the fun parts to keep your motivation up and to conclude let me show you something else from one Kora user reading it definitely made me feel better so don't worry about getting stuck just keep moving forward and now let's move forward to the next video Welcome Back in the last video we talked about getting stuck a lot and how that's fairly normal but also there are very good mindsets and techniques to deal with that problem in this video we're going to talk about another very common source of setbacks for coders which is making unfavorable comparisons as humans we tend to compare ourselves with others that's normal but it's almost always unfavorable and unhelpful because it has a particularly negative effect when it impacts your confidence as well I know quite a few people who think that coding is what they show in the movies or on TV nope it's not not equally don't assume that you can build the same sort of application that Google can after all they have thousands of developers working on every small line of code when you feel this way and find that you're making these sort of demoralizing comparisons speak to an experienced Mentor or model or someone who's done what you're trying to do they will give you a perspective that is closer to reality and look if you're going to compare yourself then do it in these two ways is one if they can do it I can two two if they could do it in 1976 or in 1996 when the world didn't even have the kind of resources we now have and there was no Google and no stack Overflow then it's much easier for me to do it now or rather it was much harder for them and I've got it easy compared to them so even if you secretly think you're not as smart as they are fine I don't agree but fine you don't need to be you can do what they can do cuz you've actually got it easier just remember that Bill Gates and Steve wnc and Mark Zuckerberg and Jack dorsy are a bunch of selftaught folks who taught themselves in a world where resources were significantly harder to access than they are today so if they can do it with those constraints you can absolutely do it with all the material freely available on on your fingertips today the mindset to have here is that it's never been easier to become a coder and it's easier for me to do it than it was for them okay let's move to the next video okay welcome back everybody in this video we now conclude the section on the setbacks and the corresponding mindsets that'll help you overcome those setbacks this section is one of the most important in the entire course because this is the section that I think you will keep coming back to over the months and years that you try to teach yourself to code because it's the one that's going to help you overcome a lot of those obstacles and you're going to remember a lot of the things I say here when you encounter those obstacles it's not hard to learn to code but it is a difficult task to persist in learning to code so this section is so important so fundamental to your success in learning to code that I'm going to spend this conclusion video just wrapping up and recapping all the key messages from each of the videos in the section so that you also have it in the one place let's keep going so the key ideas in this section are the following one learning to code is very confusing everything you read is going to feel confusing at first the mindset you need to have is it's okay it's normal it's just a signal that maybe you've skipped ahead too far and you need to wind back just a little bit reverse out of the situation back out slowly and then break your next step up into smaller pieces into smaller next steps go for the quick wins so your confidence stays up and you have a strong sense of your own progress idea two you're feeling overwhelmed yep that's fairly common and normal too and it's usually two types of being overwhelmed one is from too much information and the other is from finding out that you may have underestimated how much you need to do both apply very commonly to learning complex skills that's always a hard thing to do but you know it's very rewarding when you persist feeling overwhelmed is a useful signal as well it tells you that maybe you're biting off more than you can chew mentally so again break it down smaller pieces make it easier to digest often we're just trying to pile our priorities one on top of the other instead stop step back separate your priorities so that there steps along a path and not one big jumbled pile test each step to make sure it's 100% necessary to achieve your goals make sure that without taking that step you cannot achieve your goal number three you're feeling a lot of self doubt this is totally normal and Universal it's a human thing it just proves you're human that's good right remind yourself that it is not that you cannot do something it's that you cannot do something as yet this is the sign of a growth mindset next remind yourself that the only way to do it is by doing it over and over again just keep going it will click into place in time guaranteed and if you need extra inspiration remember Rocky it ain't about how hard you hit it's about how hard you can get hit and keep moving forward number four progress is so slow yes it is progress is always slow for new skills progress demands that you have patience and persistence for extra help go back to your five ws and remind yourself of your why why are you doing this the danger is not that you can't do it it's that you will lose patience and quit if your why is important enough you won't quit it's that simple it's not easy but it's simple and think of it as math success is always equal to effort plus time and since time is half the equation the more time you spend the more progress you're going to make for super inspiration read that letter from coach s to Tim Ferris included in the book tools of Titans number five getting stuck a lot yep that's normal it's part of the experience of programming at all levels of experience you deal with it first by reminding yourself that maybe this is going to take a little more time than you had planned that's okay got to accept it then slowly start investigating the problem and unravel it piece by piece it is not possible to learn to code without having to start over on some things that is just a normal part of coding so don't fight it and it will be easier to deal with but the first few times are always always very hard and always takes you a lot more time but every time you do it you get faster and you get better number six comparing yourself to others for example I'm not like Zuck if you do compare yourself then do it in a way that favors you for example if Zach can do it you absolutely can and if Steve Jobs and wnc and Bill Gates could do it without any of the resources you have today conveniently at your fingertips then recognize it was much harder for them which means you can absolutely do it okay I think you've got some formidable tools and mindsets and weapons Here In Your Arsenal to pursue your dream to code let's wrap this up so that we can get you started on your journey as soon as possible I'll see you in the next video congratulations guys you've made it to the end I am so incredibly excited for you and proud of you and what we've done together this is fantastic look you've got your training shoes on you are so ready you are so ready for the marathon of learning to code and I would argue you're actually ready to learn pretty much any new skill that you want this just happens to be about coding for this course right I hope you enjoyed yourself as much as I did um sharing with you all the the stuff that I've learned over the years and if you still here till this very end point um that means you've got the ability to persist and you know what I say the only thing that stands between you and your goal is time and effort and lots of practice but if you've made it this far then that means you're willing to put in the work which is fantastic hopefully through the help of this course you've now got tools and Frameworks that will help you reduce the amount amount of time and effort required to achieve your learning objectives but there's no getting around the fact that time and effort is what it's going to take so I have no doubt that you're going to get there and I'm really excited that you've come to the end couple of things just um sort of housekeeping towards the end one if you could keep contributing to the Q&A as you go through your Learning Journey that would be most valuable to all of us selfishly I would love to hear how this course has helped and how you've personally experienced some of the things I've talked about in this course but also I think the rest of this student Community would get a lot from knowing that other students their peers could be like models and mentors to them in showing them their personal application of some of the lessons from this uh course so if you do have some stuff like that to share please please please share it on on the Q&A and also reach out to me on Twitter and and share it on Twitter because that's another great way to show the world that you've made such good progress that you've got the initiative and the drive to do what you're doing so definitely share it on the Q&A and on Twitter finally I think it's safe to say that now is a really good time for you to pause and save the moment like celebrate because you've taken an enormous Leap Forward in your demonstration of your willingness to do what it takes do whatever it takes to win and to achieve your learning objective like I said no doubt that you're going to make it you're going to nail it keep going don't stop and if there's anything you need I'm right here all right good luck