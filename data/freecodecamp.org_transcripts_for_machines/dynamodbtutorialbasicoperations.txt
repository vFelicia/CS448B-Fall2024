hello world in today's video i will show you how to perform basic operations on dynamodb tables meaning saving getting updating and deleting items on the table we are going to perform basic operations in dynamodb tables from lambda using the aws sdk so i will not get into how is dynamo works on what is dynamo but i will just go straight into the code and show you how you can get this done as always building everything as infrastructure as code from the serverless framework so let's go to the code so let's get started as always making a new directory and getting into the directory we are calling this serverless dynamo basic operations and we get into the directory then we just initialize the npm package npn init yes and then we initialize the serverless project so let's create minus t aws that's node.js dash n and then we put the name of the project so that we don't need to change it in the serverless yammer it's changed for us now we open atom and we are going to do some modifications and then we are going to create our dynamo table so the first modification we already have the name in place i'm going to remove a lot of comments start distracting then i add in my profile because i have many and i will just use my default profile and i will pick the region that is ireland but you can pick any region you like my default is north virginia then we are going down in the serverless yml and we are just going to define the database using cloudformation i have done this many times and basically we are defining a table and we are using environmental variables if you want to know more about environmental variables leave me a comment below and i can make a video out of it but for now we're just using environmental variables and i'm creating them in the serverless ml so we can access them from the code and from the serverless yml so i create a custom variable and then i added i had my environments property in the provider i referred to these custom settings that we just created then the next step is to define permissions for this table and we are going to define the permissions where the i am role comment is and we are replacing it and we are defining for get to put update and delete items in this table so the lambda can do that after that we are going to create some new functions so i'm going to create one function for each of the things we want to do you can have everything in one one function or you can have separate functions if you want to know more about this you can go and check my video on patterns but for now i will make it easy and i will make one function pair operation one function for save one function for get one function for delete and one function for update i leave you card for the pattern video after we have the four functions i'm just going to save this file and go into the huddler and then here i'm going just to clean up a bit we are going to create a function that will be generating our response because we are just returning always a status code and a body so why to repeat that everywhere and then i'm going to create a new file that will be the database manager will i will be performing all the operations using the aws sdk i create that file i go into and i will start defining all the functions and here is the beef of this video first thing we want to do is to require the aws sdk and the module document client then i will define the table name the constant in this module and that's referring to the variable we have defined in the serverless yml again environmental variables if you want to know more just leave a comment below i can make a video about this and then i create the save function the get function the delete function and the update function and you will see that in each of these there is more or less the same structure there is a parameters variable where we will define different things in all the cases we have the table name because we need to know in which table we are applying in the case of say we have the item that is the one that we just want to save the whole item and the table name in the case of get and delete we have the table name and also we have the item id that is the reference to this item we want either to get or to delete and in the case of update the parameters will be more complex this parameters will be sent to the aws sdk to the dynamo module either we have dynamo dot boot dynamo dot get dynamod dot delete dynamo dot update and they will all take the parameters i'm always permissifying these calls so this is a promise so i'm doing that promise after all of these calls for the update let's stop for a moment and analyze the whole thing because i think it's the most complex of all of them so the update it takes three parameters the item id aparament parameters name parameters value and then it returns the new modify item so the parameters that we need to construct this variable called parameters the table name as in our cases the key that is the item id and then it will take a set of other things first it will take a condition expression this is not necessary but i like to add it in the case so if the attribute exists with this item id we can continue if not it will throw an error the update expression and here we define what is the parameters that we want to change what is the attribute in the table we want to change in this case it's a flexible one it's dynamic so we pass that in the method and i will put set params name that will be whatever we decide to pass in this method and it will be setting it to some value the value is also dynamic and you can find it in the expression attribute values that we define the dynamic value and then we have the return values that we want to return all the new you can change this for for other options either the old and all new and old as well you can check the documentation for the aws sdk i will link it in the in the comment box below for you to check and then after we have these four operations so we can go back to our handler and do the calls that we want to do from these operations so we are going to create our four methods that are going to handle these functions first we want to generate the item id so for that we need to use this library called id so we just install it in our dependencies and then we can use it i will use that in the save so we have a dynamic item id whenever we save because in dynamo items needs to be identified with a unique id so we should not uh have duplicates so now i have the save item and i will just fetch the item body that will be passed in the api gateway body in the request body and then i'm attaching to that item that we get from the body the item id that we are generating with this library and then i'm passing that item to database manager that save item and i'm returning in the callback the response with this item id we just created and the 200 for the gate item is similar we are getting the item id for the path parameters and then we are passing that item id to database manager to the get item and this item that we get i'm returning it in the response to the api gateway so the client can see it for delete we have a similar one we are getting the item id from the path parameters but we are just returning the item was deleted because the response in this case will be empty if everything goes fine here we are not handling errors so in the case that the item is not fine we are just not doing a catch so that's something you need to handle in your case for example if you get an item that doesn't exist it will return you an empty response because we are not handling the errors so remember that these are only for the happy path but this is an example for you to see and for the update it's a little bit more complex we are getting the item id from the path parameters and then the program name and the param value from the body because this will be a put so we will have a body and then we are passing those three things to our update item that will return the new item updated and we will pass that back to our response and that's all the code we need now we can go and deploy and after is deploy we can test it in postman so i will speed this up for you so we go to testing so when this is deployed we get our four endpoints that are more or less the same they just have different methods and then we can take them to postman and start playing with them so we put our first one that is the post and we create a body that is very flexible because we have not defined anything so we just pass whatever we want i just pass a name for example and then we can pass some attribute one attribute two and things like that this is an example so it's not important what is in the in the item just imagine that you have something that makes sense for you and then after we have this body we can just send it and we will get an id back this id we can use in the get so we can now run the get that is the same url but it has just a path parameter at the end that is this id that we just got so i modify the call and i send it and then we get the item back with the id and all the attributes we can update this item and we are going to change some attribute for example attribute one we are going to change and we are passing a new value for that attribute and then we send it and then we will see that the response now has this attribute one to be attribute one underscore new so that change if we do a get again of this we'll get exactly the same because this was saved in the database now we can do delete if we just delete then the item was deleted and then if we do a get we are going to get an empty response because this is returning from the database an error and we are not handling errors so the code as always is available in github for you to take a look that was the video for today i hope you like it if you did give a big thumbs up if you have any questions comments requests you can always leave it in the comment box below