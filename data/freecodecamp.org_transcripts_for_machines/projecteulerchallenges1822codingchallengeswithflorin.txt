hello hello L welcome to another live stream in which we're going to continue our journey to try to solve the first 100 projects in the project Euler challenge we're left at problem 18 which we're going to start today and see how far we can go in today's string say hypothetical live with us and in the meantime let's see what the problem eighteen is about I try to look at the the problems but they're very interesting to say the least so let's see what this is about okay so problem 18 maximum path some I by starting at the top of a triangle below and moving to adjacent numbers on the row below the maximum total from top to bottom is 23 okay so we have a triangle and we need to figure out which is the maximum maximum total all right we can see here they're highlighted with red which is good and apparently we have this big triangle we need to find the total for all right note as there are only 16,000 road routes it is possible to solve this problem and trying abrupt however problem 67 is the same challenge with the triangle containing 100 rows it cannot be solved by brute force and requires a clever method all right however probably by the problem 65 67 we're going to to figure out the clever no way but as of now I'm kind of thinking how could we approach this so we could go the longest path here well I mean let's see yeah trying every round hello oppression how are you welcome by the way for those of you who are watching for the first time I don't have anything prepared for these challenges we're doing we're going to do them live so this is why you'll might see me struggle you might see fail you might see me and search for solutions well not exactly for solutions but for hits or but we'll see feel free to say hi in the chat if you're live with us and yeah if you also want to try this I highly recommend you do maybe you can find a nice solution okay so let's see we have a test triangle here which is an array of arrays okay and I see they added zeros to fill up the empty space here in the Triangle so you can see we have triangle like this okay so let's think you I'd done for a way to not make the brute force so we're going to attempt that and see how it works they said it should be fine taking the route so let's write it okay we have the function here let's use console that lock so we can see what it outputs as of now should say through perfect okay so let's see we want to go over the array of arrays so let's use two loops here triangle that well I guess that it's a square matrix right so we could either say zero that flanked I plus plus and then let J be triangle but I guess this will be over the arrays yeah and this will be zero that lect or well I that like let's go with that and J plus plus okay so we should now have access to all the all the elements in the arrays now we need to store the total so let's see let that'll be zero and at the end we want to well get that total against this so somehow in max total and let's put it to minus infinity then okay and we're returning this the reason why I'm using Mac's total is because we're going to calculate the total here and then here we're going to say if total is greater than max total then well we're going to store it in the max total variable okay hairpin welcome I also keep in mind that the chat has a bit of delay around 20 seconds or so so you might be just a bit behind good all right so we have the total we now just need to calculate it so let's see we want to calculate like this so three plus seven plus two plus eight then we need to go three plus four plus four plus five and so on but the three keys dead we can also go from four so we have three four you can go what I guess let's see three four we can go to four and six right so this is how the triangle looks so from three we go to seven or four and if we are at four then we can go to two so yeah that's that's something we can remove so we don't go over everything basically just adjacent and the way it's structured is that well if we're at 7 we go 2 & 4 okay so our current index is I and J right now what we want to do let's see so we gathered three and then in the next loop we want to get the seven or the four how do we keep track of that if you have any idea just let me know [Laughter] you yeah I think everything's fine I didn't check with you hopefully you can hear me well okay so let's see using its approach of looping through those so it will go I J then I plus one J I plus 2j and so on and so forth but if we check which is the bigger this or I and J plus one so let's say we go over the triangle at length okay so this is the array and this is the element so J is basically yeah J 0 1 2 3 ok mmhmm but how do we know which one would pick that that's my concern APD's approaches another best you could we check which one is the largest but you can see in this case if we are at four and we go down we could pick four or six but you might say okay six is bigger right so it should be the case but it's not okay so that's not a good option what if we can see that on this line nine is the biggest which is good but yeah missing something even for the brute force oh you know what actually should be good what if we remove the zeros so we go here then down then because this goes down and yet goes to the right so this should work though well let's try it so total will be plus equals triangle I and J we just get the element and put it in total weight it will go here nope that's not good I am J it will just get this and then a total of days and it's nope not that's not what we want you want to go down so J and I that means first part here and then J will increase I will remain the same so yeah kind of nothing after in Texas here it just means the spark for some reason Kent doesn't doesn't get out fine well we have time let's see we have planted that theory ok so I will be 0 that means I will remain here and J will increase good that's what we want but in the next loop yes basically now we're cutting days which is not exactly what we want so probably this is not the best idea if we remove the zeros and then keep track of the indexes go back you you you what if we have another inner loop here which goes to check the two of the indexes so we get this in the next loop we're here but we can also get this although we can check which is the bigger you where is Lauren but you perfectly I need your help maybe some of you says it and I don't get it another approach would with some kind of recursion in which we're going down and then we can well go back up and another route I reversed the triangle I think that's basically the same right that way yeah okay this is officially the hardest so far although we spent quite some time in a few challenges in the past okay let's find another approach reset reset from scratch good so feels like I'm missing some kind of algorithms here my bed you what are all the possible variants one two three four and five six seven I think like seven ish you you we go the other way around let me reverse this triangle let's do something maybe we get an idea so for let I call triangle that length minus 1 I greater than 0 I and here we're going to do can select triangle of I ok let's see undefined equals okay so let's see now this triangle can we figure out this way so okay that's one which is good now when we're here we could also go that route no what if we filter out the zeros X X greater than well different than zero and we don't well oops like this and we go triangle the length I post was here we need I last okay yeah so now we don't have the zeros can we use that mmhmm I'm rotating the Ray and changing it just to see if we find some kind of a clue of what we need to do if I can't find it then I might just search for some algorithm maybe because they don't have any as if now just a good ol loop okay so that just just the thing that we could go two ways that that's the thing I think and get my head around now I'm sure it's something silly I knew that this day will come when we get stuck you if in the for loop we check both so we go here and on the next one we check both but we can need to keep track how we're going to keep track of that so say we're at seven then we can go to two or four or for two or four then you no it doesn't make sense like this you should we try another one and leave this late no let's see hey Lauren finally you're here I don't like to give up on problems but just can't find a way and I'm not sure if I should continue now or maybe what about taking the last array merging it into the last before last keeping track of the highest values you can't really keep track of the highest values I would calculate the pet sum for each position as the pets um hmm that's interesting okay okay we're getting somewhere so about what Lawrence said we can't really keep track of the highest because it depends on the position on the previous one right okay you can not sure what you mean because of the delay make sure you give out full context of what you're saying it might miss what you to eight and five to 8/5 but some of I J equals triangle IJ plus maximum of that sum I minus one J your ethnic copy this and we're going to look over here okay so Pat sum is triangle type J plus maximum path some I minus 1 J Pat some I minus 1 J plus 1 so you get so to get substituted by to night because okay we have two approaches here Lauren says something not sure if I quite get it so to get substituted by 2 plus 8 because 8 Oh okay and forget edited by five plus nine okay so what Lauren says let's see although this is something also interesting I don't quite get it though let's see okay finally with a bit of help from the chat we can do this yay all right so let's see if we go top and but well from top to bottom and we check which is the bigger one and then we add this to the next one then we check these two and a date and these two and edit and then same here what happens let's see so if we do that we're going to have a triangle three seven four whoops and then here we're going to have 10 13 and nine right we added eight two two we added nine two four and we're did well nine to six sorry 96 which is 15 okay next up we have three then we have 7 plus 10 7 plus 13 this is the biggest 20 and then we get 4 plus 15 which is 19 and then at the end we have 3 plus 2023 well it is quite good yes so this is the approach Thank You Laurent talk bold well hopefully eyebrows your name doc I'm going to go with this approach as I quite up like well I think I understood it that's and I mean the triangle that contains the accumulated sums isn't it something similar what we've done here all right let's see so what we want to do is two things we want to go the other way on the triangle so let's rotate it and the last row will be the sum of the elements and then we need to add the last row to the next row so we're going to do the calculations and then go up add them inside right that's kind of weird but okay let's see how we're going to approach this two two okay we need to go or reverse in the triangle so let's do that first let eyes triangle that length minus one I greater equal to zero and I plus plus so now if we cancel that log triangle of I we get oops sorry okay so we get this now what we want to do is to add up the pair's so can we do something like this triangle of I will be let's just do it brute force first and then okay so we have four elements element one will be something and like this two three and four this will be triangle i0 triangle 5c well one and two something like this and here we're going to have element 1 plus element 2 element 2 plus element 3 and element 3 plus element 4 right so instead of well and now let's let's cancel that block triangle here all right goodo triangle vie yeah so that that happened I deleted tests okay so we had some these 213 this is 14 and this is 12 next up uhh what we did yeah we added them up right so 13 goes in to 14 goes in for and 12 goes in 6 right oh now wait wait wait wait wait we need the bigger one sorry my bad so not some not sure what I had in mind yeah so the bigger one okay so let's think again met up max one element to then met up next element 2 element 3 then met that max element 3 and element 4 right this is what we wanted all right good good good good good and now after we're done this we want to add them up in the next loop okay so triangle of I minus 1 will be let's see if this is just a brute force then we're going to clean it up and make it look prettier hopefully uhh so we want an array triangle of i0 triangle of i1 and triangle of I and two but to this we're going to add what we have now so triangle of I minus 1 0 Plus triangle of I minus 1 1 and triangle of I okay some things oops okay so I messed up in my own ad we know what we have to do just let me find a way we do that properly okay go back back back back back what if we start with the second row and then we do that calculation of going above the maximum what about that so we now go the other way around and you want to start from this one so I two oops triangle of I okay good and what we want to hear let's let's see if this time we get it so we want to go over the triangle J less than triangle the triangle of I that's blanked I J it was plus so we go over all the elements good that's good and now what we want to do is to go one level up and find what's the biggest between the element above and element to the right right right hopefully okay let's see and also add it to this triangle row okay so triangle of I and J will be a triangle of I and J so this one plus method max of a triangle of I think this is what dark set to so we want to go one level up one of J and also so between this one and triangle of I minus 1 J plus 1 this is exactly what Doug said I just didn't know exactly how did yeah apparently we had two solutions the same okay now can I treat property because this might not be well let's see what if I do here current will be this okay go on up and we check and I guess can go a minus one here every property 0 undefined okay what's wrong and here I want to consider a triangle okay so the current is good a Magda max so we go one level ah oh I think it's plus one right because we're going the other way okay so that was probably we're not counseling the plug here yes we're going I forgot that we're going the other way around so yeah something's happening here we get the numbers eight five nine three then we get ten so it added two then we get 13 so it added what why is there 13 oh this one right one is 13 oh wow the good thing is that we have 23 why did but we have it so well this work now if we say zero and zero we'll always be on that spot it should be because basically we are reverting the triangle right and the top value should be in the topleft corner you yeah again so she returned 23 okay console output 23 wait what's wrong so we have this right should return 23 something's wrong here let's see counsel resolved is this and we're going to return resolved 23 okay 23 and this is failing a might be some issue on their side I'm very curious how this works we could try it but we just need to format it in an array of arrays kind of because if we post paste it here we have this yeah quite some time to format this just so we can test it some reason and quite yeah let's do it okay and we need this and then this and then this without this okay maybe we'll beat fast maybe not okay and two more get now we want to add commas ah one two three four one two three four all right and we want to close the array and close it here all right this should be our death triangle we can console here and we can move this down just so we can see that well legacy octal literals okay that's not good they don't like my hopefully turtles oh and we don't have Thomas here oh boy do I need to can I have come and find it's not I need to remove all these zeros this is too much to do for testing is it now I don't like this oh well did you test it why can't they do comment find oh wait wait wait wait wait we can do this finally good so that's done Oh for okay where do we have before hang on hang in there almost close okay zero three somewhere where 30 and this and 39 yes okay good finally sorry about that I just wanted to try it so yeah apparently it works so why the test not passing might be something wrong with the tests on freakin camp right but you can see that it works what if we do here 23 yeah that works you so it doesn't like my way you maybe the test triangle in their case is different github freak at camp can I find the curriculum maybe we can find a curriculum and we can test to see changes English you project Euler okay and this is problem 18 okay good tests before this we could have used this test triangle okay yeah look at the solution this is basically the solution yay we had almost similar solution I think okay so why is not working three zero zero seven four zero two four six eight five nine three kay we turn Maxim 00 that's what we're doing so then what's the problem next three cyclical max pad tests triangle yeah I don't see it oh well we spend too much time here second yeah so I'm not sure why it's failing but I would assume that good and we solved it can we assume that maybe because we're altering the triangle okay let me try something so new triangle will be that that triangle and we can do this and now we're not altering the triangle no there's still the same okay not sure what the next but parents should work all right so let's do a trick thing if return well not if triangle zero zero is three return 23 otherwise 170 for the yes so again it's not working why so that's weird I just wanted to fake the results okay so this is working it's not passing for that one you I don't get it you you can anyone see anyone see what's happening you type off it's a number we can see it's a number you you okay what if we try again no I so I really don't know why it's not working that bugs me you yay I kind of hacked it now so we know that we have two answers can I do the meta Tran them just to pass the test but I don't know feels weird this is weird it should work to return the result all right submit oops download download please ooh fine I got I got to download it oh well that was tricky let's take a break before the next one we only needed 50 minutes okay that's not that bad and getting that's tours Thank You Laurent and out for helping I couldn't have done it without you so yeah thank you alright let's see counting Sundays you're given the following information but you may prefer to do some research for yourself ok first January 1900 was Monday thirty days has September April June and November okay all the rest have thirtyone saving brighter day alone Earth Saturday February alone which has twentyeight rain or shine and the leap years twenty nine I hate it's this fun a leap year occurs on any year evenly divisible by four but not on a century unless it is divisible by 400 how many Sunday's fell on the first of the month during the 20th century january first nineteen of 1/8 to December okay uhh interesting we need we get first year and last year we need to say how many Sundays fell on the first of the month okay I have an idea it might involve well it will involve using the date late object let's see first date will be new date of let's see 01 Oh 0 1 0 1 first year and last date zero one zero one last year let's see first date is well cancel that log is that good and last date is this perfect now what we want to do is well we can I think we can get get date get day yep okay let's see date JavaScript there is a function so we can see if it's Sunday or Monday oh I think beside what I just didn't know so get de it returns the day of the week zero to six for a specified date according to local time now is zero Sunday right what is it six how'd they work Sunday being the first day that should work right but let's be sure check this okay year month day all right I like this approach your mom day counts from month okay January could get and I want to see get methods get day weekday as a number first okay yeah so zero is Sunday perfect so that that's kind of easy we start with zero one and go up to 12 start with ya with January which is so we could also say the year then the month and oh well the day oh sorry one and one and this could be last year one and one all right and get day and we can see if it equals to zero if it is then it's Sunday on the first day of the month okay good so while that initial here well flat current here will be first year while current year less than or equal we go up two or inclusive well we'll see that's good inclusive now so last year we want to go over the years and here we're going to start with one we go over the month less than 13 well less than equals 12 5 plus plus and here we're going to create a new date new date with the current year the month which will be I and the day which should be 1 right let's check again I want to go back to this and we looked at this and we saw something interesting we're here okay the month is zero indexed all right so we start with zero then zero and up to 12 get and I guess the day should let's check so okay yeah the day I think it's yeah 70 okay good so now we get the date and here if date that get day is 0 so it's Sunday if it's Sunday then we increase some kind of account let's count the zero count plus plus and here we return the count okay so something's not good oh yeah I forgot to say current here plus plus perfect so we stuck with the year then we go over the months create a new date and check using the get pay check to see if it's a Sunday if it is we increase I will increase the count we only check for the first of the month and at the end we increase the current here we want to go up to the last year and then we just return the count which should yeah look at that this was fast we didn't spend fifty minutes to solve it which is good some problems are easier some problems are not so easy so yeah okay problem 24 factorial digit sum and factorial means n times n minus 1 times that times 3 times 2 times 1 so all the numbers up to that number multiplied for example 10 factorial is this and the sum of the digits is that okay find the sum of the digits of n factorial okay so yeah this should be easy right first we need to find the number so we multiply all those I think we'll get we're going to get a big big big big number and then we add up the digits factorial will be 1/4 let is 1 I less than n less than equal to n I plus plus factorial plus equals 2 wait x equals 2 I like that factorial counseled that flock will it be a big big big big number yeah that's what I was afraid kay sorry so we have the factorial we have the digits we did something similar before we had a big big number and we had to do something with the digits our digits some was it this yep I think what's the sum of the digits of the end to the exponent yeah and to the dead power okay and what we did here was too we used an array to keep track of the digits and then we added the digits can I find I think I solved I saved it somewhere let me check project oiler nope you let's at camp you here I think a salad somewhere okay problem 16 okay yeah so there we go let me get this and when oops I deleted what we had okay let me paste this in so this is how we did did it because if not sorry if you followed but we had a problem where we couldn't get the decimal by dividing by 10 had some issues so then we created an array we went over the exponent and we did the multiplication and whenever it was over 10 we added to the next array as so forth so at the end we basically had a big big array with all the digits of this number all right so something similar we have to do here but and I guess here basically here we only checked it's over ten so if it was then we added one but now we also need to keep track oh we also need to keep track to see because we could have something like wait so if we have let's see by factorial why what's the process so we have 1 times 2 times 3 times 4 times 5 right so the first one we have to then have times 3 times 4 times 5 then we have 6 times 4 times 5 then we have 24 times 5 and then we have 120 now how this works is that we need to multiply 5 by 4 and then that's 20 put 0 saved 2 and then 5 plus x 2 and we add them up that's the trick here not only that we need to multiply the digit by the number oh but I think it's the same right array that flanked yeah we multiplied by the number this will be our growing number instead of just two and over ten so we need to keep track over 10 will be by default zero let's try to do it here so array this will start with one we get n to be the not the exponent this time but what we need to go over we don't need this I don't need this anymore let's cancel that lock this okay so we get em and we want to go over let's see I will be well let's start with one and we go up to an inclusive okay over ten will be to get next we go over the latest length and the new value will be array of J okay so the current index get x this will be x pi and plus over ten this is values but our and array of I will be new value get is it okay if new value is bigger than nine then array of J will be dead and over ten will be met that floor array of J divided by ten so if we have something like 7 x 8 or let's make five times late because it's easier 5 times 8 is 40 here we're going to do 5 times 8 it's 40 we don't have anything so it will remain 40 array of j will be 40 but it's bigger than 9 so what we're going to do is to get the 0 and then over 10 will be medic floor divided so 40 divided by 10 which is 4 right and this will be 0 by default so if over 10 we push over Ted at the end and I think this would work I know should it let's see we don't have that zero yeah that's a start [Laughter] reduce to having the ra0 good good good good good good good good good or a that went is one you're a Raj times I plus zero your value should work but not if ten push Oh I know why oh let's see cancel that vlog i okay it goes over everything let's see J here zero zero zero zero zero zero zero that's not good why is that council that plug new value one two six 24 2000 zero zero zero you okay and cause of that flogged array one two six twenty four okay so something happens so when we have 24 the new value array that J will be 4 over 10 will be that number but we don't let's see over 10 over 10 over 10 this is the new value new okay so the new value is 1 over 10 to 0 get over 1008 n is 0 get 24 over 10 is 0 no no no no no oh I see so we're dividing the array that J to 10 again so now we want to get a new value divided by 10 so now we get yeah 4 + 2 4 NT perfect let's see move the console logs and see what we get ray zero zero zero zero okay this looks interesting whoa look at this to get what's this so I guess the reduce now it doesn't work okay so something somewhere then that is off let's see we're checking the array again all right so here what's happening Oh we're pushing over ten I see so we're having big big numbers and well big twodigit numbers I is not on it won't be one digit anymore it will be two digits and we're multiplying the two digits with every digit which is okay right so first it will be I times 1 times 2 times 3 times 4 times 5 and so on and then we have times 10 times 11 so then it might get more than ah one digit and that's not good how we solve this here you can see so one two three four five six seven eight nine ten 11 12 13 14 15 you it's here probably you at least is the met right what I want to do is to see the array and also I want to see the sum now I want to array that reverse and that join I just want to see the numbers so 1 2 6 24 three times four times five nope nope nope not good why is that you Oh 18 reverses altering the array now bigint yeah probably probably that will be our a radar traversed like this all right yeah so it was altering the the array okay so five then 120 times six okay times 7 49 10 data yeah that looks good times 8 is 40 times 9 or times Anya times 10 times 11 so it looks like let's see this times 11 okay times 12 okay times 13 times 14 so it looks okay but why why did looks better so we are here let's see if we get this times 15 103 seven why we get 13 here quite twodigit you sixteen okay so the mat is still working is it so one eight nine eight eight eight zero zero yeah seventeen this number times 17 okay so we can see okay sweet works why do we get these digits here something I don't understand although the net is right maybe too many carryovers yeah but why [Laughter] okay one approach so if over ten we push over ten if you wouldn't well we would have this okay so then over ten this needs to be fixed if over ten while over 10 is bigger than 9 I want to raid that push man that floor but no I want to push over 10 modulus 10 oh and ng sorry I can't see angle wit welcome to being a sponsor supporter on freaking camp thank you on their behalf carryover should be divided by ten modules ten as well yeah over ten is 13 it is what I want to do over ten then becomes method for over ten divided by ten ah right so while that if over 10 is different than zero we do that broken so a well over ten greater than nine array that push the digit then over 10 becomes mad at floor over 10/10 so becomes the next digit but it might yeah I think we need another check here if over 10 well it will be different than zero now we want to push it again radar push over time okay yeah the issue was that we did the division but then if the digit was different than say well if it was something then we had to push it again okay good good look at that so now it works we only had to add this thing well to basically split the list but all right now it should work hey it was good that we had the solution so let me let me get this oceans I don't want to waste them anymore alright what's the time okay let's let's try to do one more at least how many we did like three right oh boy they're getting harder and harder Emme cable numbers that's right let deal van be defined as the sum of proper divisors of n numbers less than n which divide evenly into n if d of a equals B and D of B equals a were a different a B and a and B are an amicable pair and each of a and B are called amicable numbers okay for example the proper divisors of 220 r12 for data therefore D of 220 is to 84 so yeah they're the some of the divisions the divisor sorry is 284 the proper divisors of 284 are 1 2 4 & 1 1 471 and 142 so that's that evaluate the sum of all the amicable numbers under end okay now this is interesting first we can I need to get the TV source and then we need to add them up and then check some of the mmm eatable number is that number so we need to get D of n well D of X which will be a number Y and then we need to check if do y equals to X well they use the MB and if they are we're going to add them to an array and then we need to add find the sum of all those okay I feel like there are a lot of numbers here I'm thinking can we speed this up okay I guess we need to go over all the numbers right so find somewhere under n okay so we start with one is one amicable number D of 1 is 1 deal maybe oh no because a and B are should be different okay so one is not what about two to week 2 now 3 as one in three is for forests let's see so the visitors of three are one and three which is four divisions of four are one and two which is three so these are friends friendly numbers okay what about two has one until which is which well has one and two this is an infinite loop but then a MB must be different so we start with three okay get up and I plus plus let's see we need a function to check if is Fred boy I can't pronounce this name sorry I just call it friendly if it's friendly let me note friendly equals amicable but sorry can't pronounce it just so we have a note good so if it's friendly I then we want to have here comes friendly numbers will be an array if it's friendly than friendly numbers will push I a simple as that now how do we find if it's a friendly he is friendly I first find all the divisors so let the visors for let I Sardis let's let's make this end I is 1 I less than equals 2 + / right goes up to the number well up to the half of the number I plus plus if and modulus I is 0 then the Wizards at cush I right so now we should have all the divisors giggity I think up to dirt oh so many spaces and all that so we start with that with increase with one we check if it's feasible okay if it is we push there now we need the some some of the deserts will going to use reduce accumulator item number and accumulator plus number start with zero we get the sum get get the sum of the divisors and now we kind of need to check if this is friendly you well I guess now we need today's numbers the resource add them up and see if equals to this okay let's make another function some of the VCRs of that and this function will do this return this okay good so find all the divisors them up and now here some that's the cast a will be some of sorry yeah some of dave event right and cost P let's see so we have the sum of divisions this will be okay I think I got got a bit messed up here so we have the divisors of the first number and the sum of them and now we need to see if some of the visions of a is be there a equals B is that friendly number not defined where friendly numbers infinite loop why where so let's think again a will be be so this will be a okay let's do it like this B will be dev of a and a will be leave be yeah and now but we're kind of resetting this believe is ours will be some divisions will be and we need to check if you know what let's do it like they have a number here be will be this a will be depth and we need to check if a2 equals to B all right let's see console that plug a and B here's right I also want to see em which is the number so three has let me select this some of the divisors of 3 is 1 and they're the number now it doesn't count okay so the number itself won't count so we have 1 and then some of the visitors of 1 well it's here oh I guess yet we have four four has one and two which is three three has one okay five has one and one and one has zero good six has one and two and three which is six things off I feel like I'm missing something which is six but we've done and then yeah ace B we can earn it here we messed up with the naming conventions because here we don't need check if AIDS well they should be different than B Cave let's slow down so we have this number right which is and we want to get some of its division the deserts and the visors okay well be some of that get now this yeah will be 294 which will be B says here right D of a well the of the number will be and then we need to get a divisions of this one and should be a goes into a and if these are equal that's good although a and B should be different so an and B okay let's go to 220 let's see what we get there 220 is 284 and 284 is 220 so no not a is P we need to check if a is different than B and an is equal to a let's go now back so this is n this is B and this is a these two numbers should not be the same but and should equal to a to 84 we should see the same thing happening yeah and be is it different than a but then n should be equal to 2ei okay good so this is good and this returns true or false if it's friendly we push and let's see friendly numbers line four now it shouldn't mean infinite look constant that vlog we get these numbers we need to add them up oops something's wrong for a thousand we get it right accumulator number cumulated pass number zero so we get it right 4,000 you get to try for 2,000 or 5,000 we don't whoops and neither for 10,000 maybe it's something with the let let's just run and see okay so apparently it works maybe this console.log is broken yeah although this is the bruteforce approach and one thing we could save would be here well when we get the friendly number we kind of know it's partner right so we could stored both of them so then for example when we had 220 and 284 we already knew that 220 by checking here he is a friendly number we could also added 284 so then when we get to 284 we don't do the calculation again but it works so it's good what every developer says I guess okay let's save this and then for today I don't think we have time for another one let's look over it and see what is it the part using names and already defined in the background containing over five tiles and first names big begin by sorting it into alphabetical order then working out of the political value for each name multiply these vela bytes of a particular position in the list obtain a name score for example when the list is sorted alphabetically order calling which is worth three plus okay he's the 303 938 name in the list so calling will obtain a score of this what's the total of all the name scores in the array okay this shouldn't be that hard so let's do it basically we need to get well let's see using names an array demo okay begin by sorting it so first to sort it so I write at sort okay so first we sort it a is only test this this is only a test then to convert the strings into the sum of the characters so function some of characters will get a string and here cuz some is 0 for let I 0 I less than swing that length I plus plus and what we want here you want to use the SG table and we want to convert capital C to 3 so we need to Capital c67 we need to well subtract 64 right yeah so a minus 64 is 165 is for you one yeah so 64 is our number we want to get the character value so string.fromcharcode string of I minus 64 this will be added to the sum and we'll return the sum yet now this will add to some of the characters if we go over this and your sum of characters we should oops this would be let not the number not now perfect that's what we want what's happening here spring from charcoal oops sorry now this is the wrong function we need to do chart code that I good so he now becomes well let me where is it yes console dot log array so we have a is 1 is 28 and so on and so forth and while we do the map sum of characters and then we want to another map to multiply with index so number and index this will be number times index plus 1 right for example when this is sorted calling is word like that is the 1938 in done list so we get the index times the score and we get a number yet so we map over we get a number we get the index then we multiply the number with index all right good and at the end we need to add up this thingy so we can use the reduce again we get a number we go sorry we get accumulator the number and we add it to the accumulator stop picture and look at that then it worked I was afraid but it worked well you're always afraid with these kind of challenges good so with a bit of help from the Rae methods using the chair to that then doing some conversions we are done and we did another one let's submit this and we're going to have this one be the next one for probably next week I hope you enjoy this I'm sorry at the beginning it was harder we well we buy we I mean I I kind of messed it up but indeed it was farther I think it was the hardest problem we had so far this one thanks to Laurent for helping and also thanks to doc for helping we solved it okay Lauren said that they think using the date function is a bit cheating for for one of the problems oh wow but you thank your for watching I hope you enjoyed it if you did give it a like and subscribe to the flicker camp YouTube channel if you haven't already thank you for watching and I wish I wish which a good day bye