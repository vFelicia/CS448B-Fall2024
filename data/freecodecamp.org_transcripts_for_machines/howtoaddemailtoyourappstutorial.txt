If you want to add email functionality to your application, this is the course. Craig Dennis has created some of our most popular courses and he's back to teach this course. He's going to start all the way back at the invention of email and by the end you will know how to make your app send emails using multiple programming languages and libraries. (bright music) Hey there. I'm Craig and I'm a developer. I'm assuming that you're here because you want to add or you've been asked to add email functionality to an application that you're working on. This is one of those things where you're like, of course, adding email functionality makes a ton of sense. Oh wait, how do I do that? Maybe you got asked to send a confirmation email when someone buys something on your site. This is called transactional email, or maybe you're trying to personalize your marketing emails with actual user data from the database. Email provides the ability to track how receivers interact with your message, which opens up a very powerful analytics solution that you can use to help guide your business. Now, any way you look at it, email is an important part of the applications that we build, so understanding how it works as well as what its limitations are will greatly help you throughout your career. Everyone uses email. Email's one of those things that we developers often take for granted and as you're about to see, there is a lot that goes into making it work properly. In fact, a popular saying is this, sending email successfully is more art than science. In this course, we're gonna take a deep dive into email. We'll take a look at both the art and the science. Now I'm gonna do my best to make this course fun and interesting. Now, I'll start off by showing a little bit of its history. I think the only way to truly understand its current state is to take a quick stroll through its evolution as a technology. There's also quite a bit of drama in the past, so if you're into that sort of thing, it's gonna get a little juicy. The email world comes with a smattering of acronyms. Now, you and I both know that those letters can make you feel overwhelmed AF, my kids use that. I think it stands for absolutely frustrating and well, I don't like feeling overwhelmed and y'all don't either, right? Where'd everybody go? I guess that return to office email ended up in the spam folder. This course isn't going to be very code heavy. I'll show you some code examples and I'll point you where to learn more about what you find particularly interesting. We'll also take a look at some suggested approaches and peruse our way through some email APIs. I'll also explain what that means if that's new to you. Throughout this course, I'm going to refer to the notes, they're attached to this video and I will point you in that direction when there's more to learn. I'd love for you to get in the habit of checking things out there. I'll document in there anything that's different from my right now to your right now. Basically, it's gonna be a pretty great resource for you during and after this course. Sound good? Okay, so to kick things off, I'd like for you to try and imagine a time before email even existed, Like all great inventions. It's hard to imagine a time before that invention was created, like how did we even survive without it? Email is definitely one of those, right? I mean, how did we communicate before that? Did we just call each other? Well, it turns out, yeah, we did do that quite a bit. There were lots and lots of phone calls. In the office world, there was this concept called interoffice mail and you would send physical documents in large envelopes to specific coworkers in the office. There was a whole mail room and a delivery system and they would manually deliver these documents to employees inboxes, which were actually physical boxes that you put mail in, inbox. Oftentimes, your job as an employee was to sign off on the document that you received and then forward it on along to the next person. Some documents even required signatures and if you needed to keep a copy, there was a technology called carbon copy where you would write through the page and it would appear on the attached page. Of course, that carbon copy initials are CC, pretty cool, right? So you can imagine that's what happened. Someone took this already working interoffice mail system and digitized it or made it more electronic. Electronic mail, if you will, email for short, there is actually a patent filed for the concept of email as we know it, and it was created by, are you ready for this? A 14yearold boy at MIT, his name was Shiva Ayyadurai and it's super impressive at how many concepts his project introduced that are still with us today. He wanted to create a system that anyone could use and I'd say he succeeded. I mean, my grandfather had an email address. Now, one of the reasons that you might not have heard of this 14yearold before is because of some drama. There's so conflicting opinion on what an email actually means. Let's go back a little bit before 1978 when this program was conceived, remember this was before the home computer was readily available. So many programmers spent their time using a mainframe. Think of it kind of like the cloud, a shared computer that somewhere else would execute your code. It became necessary to communicate with other users of the system, so there was a bit of a super early instant messaging going on. They send a message, Hey there dude, I need to get some cycles on the the mainframe, you dig. And the other programmer would respond with, go for it. I just wrapped up check you on the flip side. I'm not sure how they spoke, but I'd imagine it was something like this without emojis or anything. Those messages worked great, but they only functioned while both parties were online, so a way to capture messages into a place that the party could pick up later when they logged in was created. Arpanet is known as the predecessor to the internet that we all know and love. It consisted of a series of machines that were connected together through a network. A software developer named Ray Tomlinson created a way to send a message to other connected computers. He called it SNDMSG or send message if you put the missing letters back in. The way he did this was by using the at sign to separate the user from the computer. Tomlinson is often noted as the grandfather of the email because of this cross computer messaging system and very specifically for making use of that at sign, what was that symbol even used for before? Who knows? Here's where the drama comes in. Now, oftentimes Tomlinson is credited as the creator even though as we heard the 14yearold Shiva created and patented the concept and as we can see added more of the familiar interoffice parallels to our email world as we know it now, Shiva and Ray have had a lifelong beef and I'll put more in the notes for those of you who are into that sort of thing. I can think of one fantastic way of saying this. I think that my new husband, Dr. Shiva Ayyadora the inventor of email. That was television's own Fran Drescher. She was married to Shiva for a little bit and she definitely convinced me the popularity and rapid adoption of the email esque application on Arpanet is argued to have laid the path for the creation of the internet. What it definitely did was start another beef one that is so big it has its own Wikipedia page called. [Announcer] The Protocol Wars. And while fascinating as well. I'll leave that to you to dig into on your own time. Let's take a look at the winners of that war here in just a bit. As we know that at sign was super important, it's almost like a rite of passage to using the internet and I'm sure we can all remember our first email address. Mine was very ominous sounding, Craig2000@aol.com. What was yours? Let me know in the comments. Let's take a quick break and let all that history seep in, but when we come back, let's take a look at how that important at sign works today in the modern internet. (bright music) An email address contains two parts. On the left side of that infamous at symbol is the username and on the right side is the domain name. Now, the way the email finds its way to you is by making use of that domain name portion. The way it's able to do that is with DNS or domain name system. Servers that are on the internet have an IP address. IP stands for internet protocol. Now, we'll dive into protocols here in a bit. An IP address traditionally is four numbers between one and 255 separated by periods. The web browser uses DNS to find the web server that hosts the webpage that you're attempting to view. That URL contains the domain name of the place that you're looking at. A common analogy that's used to explain this is a little dated for years we've been teaching. It's like, you know, it's like the phone book. You know you look up the name and then you get the phone number, but when was the last time you ever even used the phone book? Let's try this one on for size. You can search for a restaurant in your maps application and it returns the latitude and longitude for you as well as turn by turn directions. It translates the name of the place that you're looking for into map coordinates. DNS does a similar sort of thing. It uses the domain name to look up the IP address of the server you're requesting. The way this works is that the owners of a domain must create DNS records that associate their domain name with the server's IP addresses, and I say servers here because there can be multiple and we've been talking about web servers, but there's also email servers, so what happens is that the domain owners add what is known as an MX record, a mail exchange record or records. Actually, you can have multiple MX records and you can prioritize them so that they get checked for the user in order. Now, a thing to remember is that these early days, websites were not fullblown applications like we have these days. These sites were just kind of like informational billboards. They were definitely a far way away from the concept of a webbased email program like Gmail. Now, what these early email adopters were using were called email clients. They were actual applications that ran on your computer and they're still around today. What you, the user of the email client would do was to configure your domain and then you could use it to send and receive messages. In early cases, messages were downloaded to your computer and stored there locally, which of course, caused problems later when you got a new computer, but we weren't there yet. We were here. You've got mail. AOL would send an actual CD ROM in the mail and you'd install it and it included a mail client and we were so, so excited about being able to communicate with each other. These clients would use the domain name to find the mail exchanger, but then what? Great question, and I'm glad you asked, it's time that we dive a little bit into the winners of the Protocol Wars. A protocol is a set of agreed upon rules and they aren't just limited to technology. We have them in real life too. For instance, if we are meeting each other for the first time and I stick out my hand, the protocol that us humans have established is that you would put your hand in mine and we would make a tight squeeze and we would move it up and down, right? A handshake. It's kind of weird when you think about it, but a protocol nonetheless. Now, it'd be really strange if I put my hand out for you to shake it and then you did the chicken dance. I mean, I'd probably appreciate you doing that, but you'll for sure be breaking, breaking the protocol that we have unspoken set up. Here, let's do another one. How about the way that we send actual mail like through the post office? Now, the protocol as I understand it is this. I put the contents in an envelope and on that envelope I write your name and address and I also put my return contact info in the corner. I put a stamp, I drop this in the mailbox and some post office hero comes and picks it up. It finds its way to you. You get it and you're like, oh, hey, this is for me and oh look, it's from Craig. I wonder what it is. We just successfully ran a real life mail protocol, snail mail, though it's not what we're here to talk about. What we're here to talk about is the electronic version of that. How did we possibly enable everyone to be able to start sending emails? Any guesses? If you guessed a welldefined protocol, you got it. As the internet that we know and love was being conceived, it became clear that in order to make it open and extensible, it was going to need some standards and the way that these standards came into being was by some pretty clever group brainstorming, a memorandum called an RFC or a request for comment was created and that had a proposal and it was discussed by a group of people interested in building a stable and secure internet. This group that I'm talking about specifically here is the IETF, the Internet Engineering Task Force, which I think sounds like a group of superheroes and I guess in reality, they truly are. I know I owe my career and most of my knowledge to their early enablement of these ideas. There are multiple of these superhero groups, the internet cinematic universe, if you will, that weigh in on these RFCs and after they're approved, they become known as internet standards. Now, this RFC process brought us some of the greatest hits, we're hanging out in one right now. Check out your browser's address bar. The address starts with HTTP. That's hypertext transfer protocol and it was introduced as an RFC and it became an internet standard, and these are pretty detailed and I find them quite fascinating. I love learning this history, but I know that's not why you're here. Check the notes if I just nerd sniped you, so the internet standard that I'd love to dive into here is an early hit, number 10, the one that enabled us to send email. SMTP or Simple Mail Transfer Protocol. You might not agree that it is exactly simple, but it is the defacto way to get your mail transferred. Now, conceptually, you have a sender and a receiver. They introduce themselves and do a handshake, oh hey, just like us. It's a plain text protocol, which means you can kind of read it with a little more information that there's a set of SMTP commands and status codes that could come back in response. They help you build the envelope and explain what it is that you're trying to send and to whom. If you're feeling brave, you can actually make use of this through a tool like Telnet, which will allow you to communicate with a remote server. SMTP is the internet standard used on the sending side, but there are also protocols that allow mail clients to retrieve the email from their mail server, POP, or post office protocol often now called POP 3, which is the current version, helps you as a reader of the email receive a copy of it from your server side mailbox. These days, it's hard to imagine, but there was actually a time when we weren't always able to be online. Now, this protocol enables you to download messages from your mail server to your local mailbox. You wanted this so that you could deal with them when you were offline. Now, original attempts here actually remove the message from the mail server after it was downloaded to the user's client site application. Nowadays, this can cause some issues because we access our email from multiple devices and things can get outta sync, which leads us to IMAP or the internet message access protocol. This allows for better synchronization and internal messaging, and while you probably aren't here to learn about the receiving side of things, you will see both POP and IMAP quite a bit in this space. Now, I don't want you to feel like you need to be able to explain how these work without looking 'em up, but I do want you to recognize them when you see them. You'll encounter these in documentation and now you should have a basic understanding of what they are. Remember, if you ever want a refresher, check the notes for more info. So now we have all these wonderful programs. Anyone who implements the SMTP protocol can send a message. You can actually even do this dance from the command line on your computer or directly from code, and then of course the reason we can't have nice things, the bad actors showed up. You guessed it. It's time to talk about spamming and spoofing. Earlier when I asked you to drop your first email address into the comments, I bet you had a weird feeling about doing that. Something along the lines of, if I put this in here, I'm pretty sure I'm gonna get so many emails that I don't want. Now, as you know, we call those emails the ones that you don't want, spam. Why would we do this? Who wouldn't want this delicious stuff, right? Even though this feels like some sort of advanced prop dad joke, the term that we use for emails that we don't want is actually rooted in this meat in a can. Well, sort of. The British comedy troupe Monty Python had a bunch of famous sketches and one of their most absurd involves a person attempting to order a meal and they noticed that everything on the menu had spam in it, and that person asks. Have got anything without spam in it? Well, a spam egg, sausage and spam, it's not got much spam in it. And asks. Why can't you have egg, bacon and spam and sausage? That's got spam in it. It's not as much as spam egg sausage and spam. Look, could I have egg, bacon, spam and sausage without the spam? Because everything has spam, spam and more spam. Eventually, Vikings show up and chaos ensues. And chaos did ensue on the email front too. Spam was everywhere. Those welldefined protocols worked really, really well at connecting people and bad actors as we call them now, saw this as an opportunity to communicate what they were selling and our inboxes were just bombarded with offers for quite literally everything. There were email lists that were for sale and oh boy, if you got on one of those lists, you got so much spam. Those lists are still for sale by the way, don't buy them. It might sound like a good idea, but it is a very, very bad idea, but in the beginning, it's important to remember that there were no real standards or even etiquette at the time, so everyone was probably a little guilty of over sending messages that receivers didn't really want. There were all sorts of lawsuits, people actually got arrested. Check the notes for more. There's so much drama, right? Finally in 2003, the FTC got involved and get this, the act is called Controlling the Assault of NonSolicited Pornography and Marketing or CAN SPAM for short. I see what you did there FTC. Now this act applies to all commercial email messages, not just bulk ones. The noncompliant penalties can be pretty hefty, up to $50,000. These introduced some rules that are pretty straightforward and really made a difference in the amount of spam that we were fighting. Let's talk through them really quick. Don't use false or misleading header information. Now all of the information on your email envelope must be accurate and identify the person or business as the sender. Don't use deceptive subject lines. Be careful with the click bait. You have to make sure that your messages is about what the subject claims. Identify the message as an ad. You need to let people know that you're sending an ad. There are best practices here and there's more in the notes. Tell recipients where you're located. You have to provide a valid street address. Tell recipients how to opt out a receiving future marketing email from you. You have to let your users tell you that they don't want any more messages like the one that you just sent. You need to do this, again, best practices are in the notes. Remember that subscribers and members can opt out of marketing emails too. If you have an app that makes use of subscriptions and memberships, you have to also make sure that they can opt out. Now, this one can be a little tricky, but don't forget to let them not receive the emails. And honor optout request promptly. This can get a little tricky too. If you offer optout, it has to work for at least 30 days and you have to honor it within a minimum of 10 days. Monitor what others are doing on your behalf. The law makes clear that even if you hire another company to handle your email marketing, you can't contract away your legal responsibility to comply with the law. The CAN SPAM Act made a huge dent in the emails being sent, but spam still maintained a very impressive sometimes upwards of 70% of all email traffic. Now, luckily for those of us with email addresses, the spam percentage is constantly dropping. Our email providers are making it harder and harder for the bad actors to get those bad emails to land in your inbox. Can you do me a favor? I want you to go and look at your spam folder. Just take a quick look in there. Go ahead and pause me and then take a peek and then come back to me. Pretty gross right? Now however, did you see in there there's probably some messages that were incorrectly marked spam. Providers have done the best that they can, but sometimes wanted messages actually end up in there. As someone who is considering getting email running for your application, you don't want this to happen to you. Well talk through some best practices through the rest of this course of how to get your message into the inbox and out of the spam folder. This is called deliverability and it is truly an art form. Now, one of the first points in the CAN SPAM Act talks about not faking the sender. Unfortunately, SMTP doesn't provide authentication, so it's relatively easy to pretend to be someone else. If we flip back to our snail mail example, I can swap out my return address to whatever I want and maybe that'd make you wanna open it. Well, I could do the same thing with my email envelope. Pretending to be someone you are not is called spoofing and it's a bummer. The good news is there are ways of handling this and employing suggested methods will greatly help you with your deliverability journey. Let's take a quick break and when we come back, let's take a look at some of these authentication mechanisms. Mm. Mm. Mm. (peaceful music) (water whooshing) As you can imagine, it's important to the receivers of your emails that they can identify that the emails actually from you. As more and more spoofing happened, technology was added to give you a little more power in making this dream happen. For many years, these techniques were known as a best practice. These days, however, they're basically slowly becoming required. Changes are happening in 2024 that will make all senders start sending properly authenticated emails to be considered trustworthy. The way this works is with surprise, a group of more acronyms. I apologize. I know that there's a lot in this space. Now, I want you to approach these the same way. I don't want you to feel like you have to understand them completely, but it will certainly benefit you to be able to recognize them. You'll find these acronyms and blogs and dropdown menus and function parameters often without any explanation whatsoever, and yes, I realize that the more pedantically focused learners may say that these are actually initialisms and non acronyms, but I say any initialism can be an acronym. If you try hard enough. SPF or SPF stands for Sender Policy Framework. It can be set up by adding an additional DNS record for your mail server. This specifies who can send messages down to a specific IP address. This makes it way more challenging for spoofers to try and manipulate your envelope. DKIM or Domain Keys Identified Mail is similar to SPF. You publish your public key as a DNS record, but DKIM adds an additional layer. You sign each and every message. The receiver can use the signature to validate that the message has not been tampered with. Most mail clients provide a way for you to see the original message as it was sent. For instance, in Gmail, I can open up the additional menu and choose show original. Here you can see if the SPF check passed and also what happened with the DKIM and if you want to dig, you can peep at all the headers that came across. DMARC or domain based message authentication reporting and conformance came on the scene in 2015 and it moves to further take on spoofing issues. It extends both SPF and DKIM to allow the receiving email server to authenticate the incoming message. A DNS DMARC record is added and in it it defines how you would like to handle any message that didn't meet the specification. It can also specify how strict things need to be. Email domain owners can get a daily report of what messages failed to pass. More in the notes on DMARC, again coming very soon, everyone will need to adhere to these to be able to send to Gmail and Yahoo. Now, the advice is that every other provider is going to follow their lead, so make sure that you check the notes for how to embrace these email authentication protocols. You are now armed with the foundational knowledge that you need to start sending emails. There is a lot that goes into making your email adventure successful, and I'm so glad that you've dipped your toes in its history, the terminology and the challenges. You have a pretty firm handle now on the what and the why. In the remainder of this course, we are gonna focus on the how. Now, remember this how includes both science and art. We are gonna focus a little bit heavier now on the science portion, but keep at the top of your mind as we talk through things. I want you to have excellent email deliverability. I want you hanging out in the inbox and avoiding the spam folder. Otherwise, what's it all for? There's a best practice surrounding email deliverability that I love. Always ask yourself this, am I sending the right message to the right person at the right time with the right frequency? Now, this question applies both to the transactional emails that you send as well as the marketing messages that you might be considering. You are essentially building a reputation and you wanna make sure that you make a great first and long lasting impression with your users and the email providers. All right, let's check out some code. I've got great news for you. You are not alone. As is the case in most things that you'll find along your coding journey. Someone has been here before and if you're lucky, they've already written most of the code for you. Email is pretty awesome for this actually, there's so much email code written for you already that it's almost hard to choose. These packaged up code bundles are typically called libraries. Someone has already taken the time to follow those email protocols that we talked about and it's been all abstracted away for you. Python embraces a batteries included approach, which means there's a module included for email. You'll see here that you can create an email message and then send it using the SMTP live module. Good thing you've heard about the simple mail transfer protocol, right? One thing to point out here is that you can also use an SMTP command to encrypt your emails. It's called start TLS or startles if you're feeling cute, I've dropped the information in the notes about how to use TLS. If you don't have access to an SMTP server, check out the notes for some ideas on how to get your hands on some. Thanks to those welldefined internet standards, you can pretty much guarantee that every programming language is going to have something similar. Check the notes for some guidance on how to find examples in your language. It'll probably help you to imagine how you might end up using this in your daytoday coding journey, most applications that have users authenticate have some pretty common workflows. For example, there's almost always a flow to handle when a user forgets their password. Typically, what you do here is ask the user for their email. You check that it exists in your system, and if it does, you send an email with a password reset link. You can imagine how you might do that right? In your controller, you check the submitted email address to verify and then you'd craft an email message and send it using your library. It's pretty critical that this specific email makes it to your user quickly. You don't want this email to end up in the spam folder. They'll be expecting it, and if they don't get it, they're probably going to quickly give up on whatever it was that they were trying to accomplish in your application, and we don't even really need to imagine the overarching business not having users being able to log into your system is well, bad for business. While this inline solution will work, it's probably a good idea to get involved with how your marketing messages are being sent out. The IP address that you send messages from has its own reputation. A best practice worth exploring is to keep the senders that you use for transactional messaging separate from your marketing senders. It's also not a great idea to just start sending a bunch of emails all at once as that could introduce some suspicion. It's best to take some time and build up your reputation before sending bulk messages. This is called IP warmup. Remember that the email providers are doing their best to stop spam before it reaches their customers. You need to make sure that they trust you. There is a lot that goes into this email deliverability and there are entire companies who make it their business to make this happen for you. Let's take a quick break and then let's take a look at some email API services. (peaceful music) Application programming interfaces or APIs provide the applications that you build with new functionality. They abstract away complexity and give you a straightforward way to achieve the impossible. Now, if APIs are new to you, check the notes. I have a whole course on them specifically for beginners. Sometimes a challenge is so big that an entire company forms around the problem and it provides an API to help us developers solve those problems. Email is one of those challenging problems. Not only is the landscape complex, but it's ever evolving. You definitely will benefit from having an entire team of people focus on your solution. There are multiple email APIs and each one of them have their own strengths and weaknesses. One of my favorite ways to find new products is to use GitHub Awesome lists. There are tons of lists of solutions out there and folks maintain those lists. So here's the one for emails. Now, traditionally, when presented with these options, I've always chosen syngrid when my current employer Twilio and Syngrid merged, it was a pleasant surprise and I'm so stoked that we have an email channel for all of our applications. My appreciation for the work they do has only gotten stronger, but everyone's needs are different, so please don't just take my word for it, peruse around and see what resonates well with you. There's something for everyone. It might turn out that you don't even want to choose an email API, and you wanna roll your own code like we just saw. I do recommend taking the time to familiarize yourself with the offerings that are available to you. They can inspire you with ideas that you might not have come up with before. And remember, API companies always get better. There are teams of people making sure that you get the most uptodate security, and they assist you in following the everchanging best practices, all those acronyms and new protocols that might crop up, they've got their eyes on them. There will be reporting and monitoring. You can pretty much guarantee that due to the beauty of competition, the service is going to try and be the best, so you're always going to be getting new features. Now, most likely, they'll guide you through how to do the more detailed DNS things. I don't know about you, but DNS record manipulation for some of the bigger companies that I've worked for is not something that I've been allowed to touch. They don't want me in there and I totally get it. No offense. Some of these email APIs prepare the requests that you need to make and email them to your system administrator. I can't tell you how much I appreciate this feature. Good email APIs will provide ways for you to separate your transactional and marketing messages and guide you there as a best practice. While you now know that's why that's important, it might not have been clear to those just getting started. Some companies even have deliverability experts that will work with you if you're having trouble deciding on which to choose. Check out their blogs. Are they publishing the information that will help you in the art portion of emails? Do they have the science in place to meet your needs? A feature that you'll want to take a close look at is templating. We haven't really chatted about this yet, but you can use HTML in your email messages. This really helps with design, but producing an email that looks good and works on all those clients, it's really tricky. The HTML that you can use is limited and it has a lot of gotchas, especially in those client side applications. Now, a good email API will offer you a way to edit and create beautiful emails. Most of these providers allow for some sort of way to maintain a list of your contacts. Remember, the more engaged your contacts get, the better. Keeping wellmaintained contact lists really helps to ensure this. Also, you'll probably want to have some help dealing with unsubscribes. Remember those rules of the CAN SPAM. A good email API will help you adhere to those rules and help you stop from making mistakes. It's in the company's best interest and yours to keep your reputation healthy. They want you to be able to scale to send millions of emails. Let them help you. One of my favorite analogies about using an API is to think of it about like a package delivery system like FedEx or UPS. You could of course get in your car with your package and drive over to deliver it in person, and if the person doesn't answer the doorbell, you probably don't wanna just leave it there. Maybe you'll come back later or give them a call. Maybe they want you to deliver it to their office actually. Now, eventually you're gonna get the package there, but probably not something you wanna do all the time. I mean, especially if you have lots of packages, you probably wanna use something more like a package delivery service like a UPS or a FedEx. You know that they're the experts and they have ways of getting your package there no matter what. They have worked through the workflows and are reliable. In fact, they'll even send status updates as your package is en route to that destination. Oh, if you don't mind me popping outta that analogy, let's talk about how rich the events that happen are when you send an email. When an email gets sent, there is information that is most likely made available to you via your email API of choice. Now, a common approach to this is to use webhooks. Webhooks are like a reverse API. Instead of you calling the API. The API calls you when the event occurs. Now you write code that handles it. Email has so many great events that you can use to improve your deliverability and your engagement. You'll see here these delivery events like process, dropped, delivered, deferred and bounced. They're super handy in building reporting tools. You also have super powerful engagement events like open and click. This information here shows who they are and even what they clicked. Now, this can be super helpful if you're trying to attract a certain audience. There's all sorts of excellent information that you can process and if your service provides it, you can actually see when people report your email as spam or if they choose to unsubscribe. Now, most likely, your service provides a way to manage this, but these can be additionally helpful. I love seeing what people build with these events. It really helps you to build healthy and reputable email campaigns. Now, take a moment and think about how this might benefit you in whatever brought you to this course in the first place. Would it be helpful to track your transactional message delivery? What about if you're thinking about sending marketing emails? Wouldn't it be awesome to be able to track which message is landing the best? You could test out all sorts of things. You could probably use this data to answer the question, am I sending the right message to the right person at the right time with the right frequency? Now, while I got your brain activated, let's take things one step further. So not only can you write code to handle the events that happen when you send a message, some of these email APIs actually let you process incoming messages. I've seen some super cool stuff built with this idea. One of my favorite implementations that I can think of of all time is Expensify. I can email a photo of a receipt into Expensify. It receives my message, processes the photo using OCR or Optical Character Resolution, and because it knows who I am from my email address, it can create an expense report in a draft state filled out with my expense item. They send me back a message with a link to the report. It's beautiful. I think with the approachability of AI these days, we are going to see more and more of these inbound emailbased applications. Now, I know it's outta the scope of this course, but I just wanted to share my enthusiasm for it. Check the notes for more information on this concept. You did it. You made it to the end of the course. I hope you had a fun time and learned a lot about the art and science necessary to make email work for you. This is a journey and I can tell you already you're off to a great start. Please keep me posted on your progress. I take your feedback very seriously and I'd love to hear from you. Please check the notes for how to get in touch with me. Thanks so much for hanging out, and we'll see you real soon. (upbeat music begins) (upbeat music continues) (upbeat music ends)