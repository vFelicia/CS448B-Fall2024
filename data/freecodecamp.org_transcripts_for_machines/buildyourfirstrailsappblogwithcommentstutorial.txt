what's up guys i figured i'd share the i guess the journey of getting started in ruby on rails and becoming kind of a novice uh developer front end developer designer a lot of businesses and companies already are using it a lot started with it twitter for instance or github was on ruby on rails for a long time uh the same is true for shopify stuff like that is all written in ruby and ruby is a really approachable language for a beginner developer so i really enjoy the cleanliness of it i guess compared to something like php or javascript it's definitely almost magic how things work but they work really well so this is just an introduction to that and i wanted to kind of invite you on board follow along the next part of this will be kind of getting familiar with what you need to run ruby on rails on your system depending on if it's a mac or pc i'll kind of walk through at least the mac portion that's what i primarily develop on the biggest and probably the most hardest step to getting started with ruby on rails is actually installing it if you're on a mac chances are you have ruby already installed on your system but to get started on installing rails it's a good practice to kind of follow a guide um there's one that i i would say is probably the most uptodate called install rails on installrails.com it's brought to you by the people from one month to start let's go ahead and just dive in assuming you're on a mac you can follow along with me if you're on a pc there are alternative steps to take and it will actually tell you which way to go here so on a mac you'll want to actually make sure your versions at least up to these current versions 10.6 is pretty old i'm using the latest macbook pro i do have xcode installed you don't necessarily need the whole xcode app if you want to install just the command line tools you can do that too i think i have xcode what was it i can't remember the actual key command right now but i have installed the easiest way to do it just go to the app store install xcode you need their command line tools to do a lot of things that will need to utilize in the coming steps going forward here it's talking about the command line and you can use the builtin one i like to use one called hyper it's add hyper dot is i think hyper yes yeah and it's based on js html and css i used to use item too but this one just kind of has been on my radar so you can use whichever you want and going back to this guide you can open your terminal and it's just kind of giving you a quick run through of hey this is what a terminal can do a big big thing i like to utilize is homebrew i actually have it installed if you want to install it you can head to homebrews page or there's a just a script you can run here if we run brew v i should get homebrew 1.3.4 is my current one there's a key command run called brew doctor might as well run it just kind of checks everything out make sure it's up to spec we'll run that real quick cool so by the way i'm working in a directory just on my desktop called sites um i just created that right before the screencast so nothing nothing special there get is obviously important it's a version control software basically you can create snapshots of your code and later reference them if you need to and or create branches that are different features so branches are saying hey clone this app and i want to do this to it but keep that other other screenshot the way it was so i think i have get installed but i want to i might as well check first so we'll do get i do it all right so 2.14.1 i think is my latest if you're new to git and you're just just installing it for the first time you do need to create global user parameters and git is not same as github so don't don't mis consume those it's actually something that stays local but you can add github as a remote thing that you can push your local stuff up to i'm already set up so i won't go through all that installing ruby you can do globally just like anything else but it's very very um i guess advised to use a ruby version manager and that's what actually rvm is in this case i tend to use one called r b and v i'm just saying that for short it's the same thing it's just kind of done differently so we can install the latest see what versions we got 2.4.2 so let's go ahead and do that so if i do rb and v it's hard to remember install 2.4.2 cool so we're at this moment downloading ruby 2.4.2 um this takes a bit so i'll probably speed this part of the video up but just make sure you do this step because you don't want to use the systembased ruby version it's too outdated for rails 5.1.7 or whatever it is now i said 5.1.4 so while that downloads i'll speed this video up uh this finally installed 2.2 tour versions on our rb nv directory inside my actual user directory so we if we do rb i'm probably saying this wrong but that's just how i say it defeated perversions it should show 2 now and what we want to do is set that 2.42 at this point so what you'll type is rbnv global 2.4.2 and then we'll do one more time i'm hitting the up key to bring back the history there rb inversions and it's set so we're all square on the ruby front cool all right next to get rails to work we need to actually install it so you can install it with the actual gem and ruby gems are similar to something like npm if you have ever used node um it's it's basically the same thing i would say node copied off of the gem um library if you google rubygems it should i think i have that url wrong ruby gyms there's a whole site dedicated to these and they're basically like these awesome plugins there's plenty of potential out there to go ahead and build an app of your wildest dreams so with that rails is actually one of them so you can you can google rails and you'll see it here it's 5.1.4 it's the latest if you just want to add this to your product you can do it like this it goes into this file called a gem file which we'll get into uh just just install it verbatim you can do it like this the guide here is actually kind of cool it's it's basically installing rails without some stuff we really don't need like documentation and stuff like that so i'm gonna go ahead and do the same on our installation just paste that into the terminal and hit enter all right as you can see 37 gems had installed for rails to kind of work we can check if rails is indeed working if we go to rails version so i have rails 5.1.4 installed at this time if you run into issues definitely look at look into this stuff if you're following along and using the same in ruby manager as me there's a lot of documentation here definitely recommend homebrew if you're not using it it will make your life easier if you do uh on a mac for sure at this point we've got rails going we've got ruby installed and then the next step let's see just install code editor and we can create our first app this is going to be me walking you through how to create a simple blog like structure using ruby on rails as the i guess the cms and the actual creation edit and deletion of posts of a typical blog i'm using such things as like bulma which is a css framework you see all these styles are kind of adapted from it but this is the basic app we'll be building and as you can create posts read posts and actually comment on posts too so here's what a post could look like and this is all without any kind of user accounts so in future lessons or videos i'll be actually creating a user admin kind of side of this so where if you were an admin user you'd have say these controls but if you weren't you wouldn't see that at all so we'll be going deeper into that and future stuff so stay tuned for that but this is just kind of to get you started with rails and ruby and to get your um palette adjusted to how things work with with it it's a little i guess hard at first to understand if you're new to ruby and rails but it's essentially we're working with a mvc pattern on this web app framework known as ruby on rails of course this i have running this is what you'll be building it's the demo app which is on github and i'll share that in the link or the description etc so when we get to that point this will be what we make i'm going to probably do some copy and pasting in the sense of styling and maybe some html markup just because it's going to save you save you some time and the point of this series is to just learn ruby on rails so without further ado i'll go ahead and get started i have this server running our demo app already and it kind of looks like this in my terminal i'm going to control c out of that and it's called on github demo blog rails and i did kind of a a one pager of what we're actually doing here so it's a like i said it's a blog to demonstrate ruby on rails with posts and comments uh so the main features will be obviously posts and comments uh for the comments we'll actually do that it's gonna be create read update destroy or crud pattern for posts and then comments it'll be create read and destroy so if you alter a comment you can see it obviously but a user can also delete it but they can't edit it there are these things known as gems in ruby on rails and these act as kind of like a node package manager kind of scenario very very similar uh but we'll make be making use of these as i go through and these are basically out of preference for myself but also just stuff that is a time saver later on there's this thing known as guard that helps with tons of tasks behind the scenes if you're used to like grunt or gulp or something like that it kind of works like that but we'll use live reload for sas and any changes to our js or erb files otherwise known as html files in this case and then there's a better error errors gym and one called simple form which makes authoring forms and rails pretty darn easy so this will all be accompanied with a blog post so definitely you know look to that for these code snippets uh but also this is on github so i'm gonna back out of this project the demo app and actually create a new one we'll just call it demo blog so i'm gonna do rails well let me make sure there's not one in there yeah i'm gonna do rails new demo log and that should generate everything we need there and run bundle which will install our gems so with that ins installed we can go ahead and cd into that demo blog directory ls there so those are all the files and folders in our directory um by default git is initialized so that's pretty cool if you want to go ahead and version this definitely start now um everything that is ignored should be ignored but you can also ignore more files if you want to uh that's that's just how it comes out of the box i probably will just go ahead and do that just to make things i'll just run getting it and get add so get commit will commit cool all right and i'm clearing that using command k if you're new to the command line you can also type clear and hit enter and it'll do the same okay so first what we need to do is verify our apps running so we can just use rails server and this is a good practice just in case your environment's not set up correctly or something's off this is to go away and turn into this which is the screen you should see if you installed rails correctly all right so with rails installed we need to to get our our you know mindset around this app and how it works there are things we need to configure that make the routing work right um and to get to get things kicked off i'm going to actually generate what is known as a controller so i'm going to keep the server running and i'm actually going to create a new tab in my terminal command t and hyper i think it's the same in item and probably your default terminal app uh if you're on a mac of course so um i'm gonna i have an alias set up for that sites directory which is just my desktop sites cool you need to cd into our actual app again so demo blog and here i'm going to actually i'm gonna install the gems we want first i think that's a good starting point so let me open this and sublime here we go and i have the actual blog that i showed you first behind it so i'm going to minimize that because we might reference it later just for some quick html stuff that we used which you can basically just grab from the bulma website which i'll get into so by default it seems huge if you can see it uh these are the gems that install with rails most of them i mean you make use of sas rails of course puma is required sqlite is definitely required for your database you can make that any other type of database if you want we'll get into that in future videos and of course rails again i talked about this in a video a while back so definitely check that out but what we want to install are these uh gems that basically make our life easier when working with rails i'm gonna reference a file real quick one for sure is called better errors and we'll actually do that i mean it could be in the development group i guess but i'm going to put it here just for now so uh we'll do gem better heirs and i'm referencing a file uh what you should do isn't this and just type it in because it's pain but i'll show you what i end up doing most of the time here t424 okay so we have better errors okay cool so that's obviously you can come in here and just say make errors better looking because by default in rails if you get an error it's this big ugly mess of red stuff red fonts red fills and stuff like that better errors this looks better it gives you a little more data of what's going on and i s that should be gem okay so you may wondering okay i'm never going to remember you know this why i'm never going to you know figure out where that's going to be so there's a site called rubygems which conveniently enough our gem file actually references if you look at the very top let me go to it here its source is from rubygems.org so definitely a good site to you know keep in your back pocket so we'll go to that site and as you work with rails you start to find gems that you kind of you're just your go to so don't think you can you're supposed to know these offhand but as you see in other apps they could just kind of come throughout when working with it so here is the best place to find the most updated region or version sorry uh definitely recommend doing it the gem file method and not install on your system because then you're stuck with it on your system and this is more of a gem file per project approach so your projects will vary based on what you're building so definitely keep that in mind so i'm just going to go ahead and paste that in just for safety sake uh the next one i want to use is called bulma so i'm going to do a search for bulma and i always look to kind of see which one has the most downloads usually that's the best candidate so i'm gonna copy that go back to our gym file edit we'll call it bulma css and bulma's like a lean down modern bootstrap kind of css framework i like it you don't have to use it you can use bootstrap you can use foundation whatever you want simple form is our next one so i'm going to go to and in most cases you're probably going to install these not all at once and have your mind made up already but for the sake of this tutorial i'm going to go ahead and install them all it's probably best to install each as you work forward instead of just all at once so the next ones are going to be guard and guard live reload there's some quite some configuration with this one uh it's kind of hard to understand at first but they do have repos that you can reference for the how to's and on rubygems if you go to the home page or the source code typically it's you know the best place to go the github repos tend to be the most up to date so i definitely refer to those and this is guards for example so uh we'll actually put that this one's kind of special we only need it in our development environment so rails has a specific group that classifies that as the environment here and we'll actually put that in there and you don't need to add these comments at all but uh typically uh just for my own you know sake i'll i'll copy kind of the oneliner that they give at rubygems.org and throw it in there and then the main reason we need guard is this guard live reload extension that's what i primarily use it for guard is capable of so much more so don't let me you know sway you in thinking that it's just for this uh guard live reload search for that there it is so i'm going to install that and i'll do the same thing with the description all right so we've got our i think all the necessary gems that i need for this particular project installed uh gems are kind of going to be your savior in a lot of cases as you'll come to find things like user user accounts user roles there are so many out there that are great for handling that stuff for you i definitely google that stuff just kind of get familiar with the process and we'll we'll definitely touch on those more in future videos so stay tuned of course uh next since we have those gems installed we need to run this thing called bundle which actually goes out and fetches that data for each so we're going to install everything we just added and you'll start to see those names now over here like simple form um let's see guard should be there yeah so you'll see them now it's part of a dependency in the project now so that's great when i do that i tend to kind of restart my server so if you do control c on a mac you can just kill your server and then run rail server again okay so for our some of our gems there is some setup required i'm gonna go to the simple form one and do that one real quick and i i'll never remember how this should be but if you refer to the repo like i said that's the best place to figure out how to do this setup it gives you kind of the idea here but like i said this gem isn't up to date i mean it would fetch the latest version but in your project you might need a specific version so that's why rubygyms.org is a thing so definitely use it instead of these reposts so we need to run this generator for this to work for this specific gem this is the simple form gym and i'm going to actually go to my other tab on my terminal i'm in that actually let's do it get add and jim's simple as that okay so i need to next run that generator which is rails generate simple form install and that's i just literally copied and pasted from that repo if you are using bootstrap or foundation it comes out of the box with support for those so up to you if you want to i'll i'm going to show you how to use this css framework called bulma and it is essentially more or less a modern take on bootstrap or stuff like that it's got really cool style look and feel to it so i just figured i'd give it a shot it's actually my first or more or less my first time using it so there's there might be some googling and stuff that i'll have to do to figure some stuff out in terms of class names but definitely check it out it's based on flexbox which is nice with that installed we can go and bypass these flags to install bootstrap and foundation we don't need those we'll run the generator to simpliform install and it should do its thing cool and it just gives you a kind of a feedback saying hey you can rerun this if you want to use bootstrap or foundation it's the same same thing i just told you so we we should be all set um there's no migrations to run or anything here so that's great next we want to configure guard and i've actually got the writeup of how to do it if you go to that ruby gym site and then go to guard live reload you can link to this it'll show you what to do we actually need to just notice i need to add this require false on that gem file right there and i'm going to actually turn on word wrap i actually need to run bundle one more time you're gonna find yourself doing this a lot okay and for safety we can we can do this again if you just hit the up arrow rails s again great running you can verify it in the browser we're good okay one thing to get guard live reload initialized is to create what is known as a guard file and that's part of using guard and i should reface all this and say you don't need to use this stuff it's just useful if you want your browser to refresh automatically when you do style changes or something like that you can configure it to do more uh based on whatever file types you use like haml slim js yml etc so it's pretty useful in that regard so one thing we need to run after that gem is installed and configured as shown here is guard init live reload and it might throw some warnings at you it's okay basically all it did is create a guard file with some specs in it so we'll go back to our project and you'll see this new file called guard file so it should be actually set up out of the box so that's great this stuff i know it looks confusing but it's basically just it's finding directories in your project and watching them as they change so there's some kind of what's it called i forget now but specific keys and file names and structure and stuff like that to watch and update your project as you save basically so with that all set up one more thing we need to do is make sure you have the actual browser extension installed if you go to livereload.com extensions it'll give you links to each i'm using chrome so actually install this in the web store i think all right so i already have live reload installed so no need to do it on my end if you don't go ahead and install this extension i believe it's available for almost all browsers so it will make your life awesome when you actually install and use it in ruby on rails so switch over to our terminal and with everything essentially okay we should be able to run bundle exact card and that specific command is there because we need our dependencies if you don't run it with bundle exact in front it won't notice that you're using certain dependencies so it's kind of a long thing to remember but guard is essentially the command line uh key key term that fires things off when you're using guard uh but in our case we need to run it as is and it'll just kind of do its thing so once you run it once it just sits there and waits for stuff to change so at this point we can you know make a new terminal window again and go back into our sites directory and then go back to our demo and you know go to town so at this point we should have everything installed and we can verify that by first creating our very first controller so i'm going to go ahead and do that let me get this out of the way since we're using a blog i'm going to do a posts controller so to do that we need to generate g or you can type generate here too um controller and if you're very very new to this and want to figure out what this stuff actually does you can do the flag help when you do generate controller and rails will spit out kind of what you can do what you can configure on the fly there are options to skip things if you don't want them to be generated like javascript or the assets at all you can use a certain template engine and not use the default erb so that's kind of useful um but yeah so read into that if you just type the flag help after a lot of things it will give you a lot of insight that it wasn't so you know i guess understandable by me at first but until i read that stuff it made more sense so let's just do this rails generate controller if i can spell controller and we'll actually call this i'm going to do capital i'm going to call it posts and it should be plural for the controller so for your models which we'll get into keep those singular just remember that uh so by default you can you can have what actions could be on this like index show edit create etc i'm going to go ahead and just leave them off for now because we'll actually type those in so i can show you exactly how this stuff works so we'll just do it the basic generation of posts and as you can see in the controllers it will generate this file called pulse post controller rb and various the view posts folder the test stuff helper stuff assets like i said you can flag this stuff to not generate i tend to just you know run with a flow and and just generate it and delete it later that's just me being lazy of course so all right so let's again open this and sublime so in our app directory we're going to find our new post controller and this is all generated by default so to show proof of concept i'm going to create one action called index and one more thing to get this to work is to create a view called index so you go into your views folder your posts folder and then create index.html.erb but for now i'll do just h1 i think they use class title and then we could just put index log index so finally if if you were to visit the site okay it's still working and you can go to posts and then you'll see that but we actually need a route first so that's why we're getting errors and i know this bundle or my better airs gym isn't working so that's interesting all right guys i can't get for some reason this better errors gym isn't working for me but it should look like this on their repo and i it's kind of mindboggling but um what i did though try i'd mistakenly added it to um the basic gem repo but we needed it in our development enviro environment so i put it down here for now so if it were to work go ahead and put it there make sure you do because you don't want that in production so anyway it's okay if we don't have it but that should be working it might work for you and it just isn't for me at this moment so okay so we're still getting this error that when we access the posts controller we made there's nothing there and that's because there is no routes set up so we actually need to set that up in our routes config file so go to the config folder routes and then we'll just do this thing called resources and then posts and that should be it um but to make things a little easier so we have to navigate to slash posts in the url i'm going to go ahead and put a root parameter and change that to index or posts index okay now that should do it um when you do update your routes file you you probably want to restart your server yet again so we'll go do rails s and go back to that refresh and there we go we got our blog index uh and that should be all set all right guys it took some time and got this stuff working so never fear on your end it should work um if everything's set up correctly of course but i got the better errors thing to working and to just prove it i went to a post that didn't exist so it's working there and then i noticed when i went to my post index i was like wondering why my css wasn't loading and that's because i was getting ahead of myself and the bulma gym requires you to import the bulma styles style sheet in your application css so i'm going to go to ruby gyms and go to that home page real quick just to show you by example so bulma and bulma rails and go to the homepage should take you to a github page and the main thing i forgot is when you import it you need to actually import it into the main style sheet of the project so i'm going to go do that and we're going to use sas by default it's going to be a css file in your style sheets go ahead and rename that to scss and you should be able to use sas right out of the box so there we go and i'm going to just import that bulma css there i think we have guard running uh we need to so bundle exact garden okay so if i save that again which it's not really i set this as syntax let's do css i guess i don't have sas support for some reason that's great uh okay so back to our blog watch the type hopefully update here give it a second there it goes okay great so we know basically verifying that our css is loading okay so now that we have our initial index action created and our view index created we know that things are working we've got our route set up in our config file if you go to config routes.rb and you should have these things in here so great we're ready to get rolling uh so what we want to do is kind of configure the actual way this is going to work so there are other actions we'll need to include on our controller but the main one i want to start with is the create action we need a form to create a blog post right so let's go ahead and do that and first to do create we actually need this action called new and then create okay and we actually need some data to work with here so this is where models come in and i'm going to actually generate one right now called post so let's go back and make a new uh tab and go to my sites again cd demo blog great and i'll actually do rails generate model and call it post capitalized and i'm going to give it these basically what i call them data types and it's just basically the things that get entered into the database and you can name them but you also have to tell the database what kind of data type it is so in this case for a blog post i want a title and it's going to be a string type of data and we also we're probably going to have you know content within that blog post so i'm going to do text so text is like a long form text so think of it like that so you can add as many as you want to a model like this but you can also pin things later with these things known as migrations which we'll get into let me bump up the size if you're having trouble there and when running this it generates our model so let's go and do that okay so you'll see it created a migration in itself as part of the model process so in this if you want to see what a migration looks like you can go to your project and there is this file call or this folder called db inside of it's a migration folder and inside of that is the migration we just created uh rails is pretty smart by default it does the time stamping so you don't have to worry about dates and stuff like that or like you know created at kind of stuff that's already included by default on pretty much any model or migration and here's those things we entered as tables in this sense at that point we can run what is known as rake db migrate or railsdb migrate and that will set that up in the database for good and you can roll this back hopefully don't have to do that in this video but we'll get into that later on if you need to so for good sake i'm going to end oops message add post model okay so at this point we can we should be able to interact with that model itself we need to basically add it to our controller in such a way that we interact with the model so you'll see in our app directory we have the model post created we shouldn't have to do anything at this point we will later when we add comments to this thing so don't worry that worry about that for now but we will interact there but then our main source of work right now comes to this controller the post controller so let's go ahead and we can reference this post by doing that and essentially we're calling that post model now and we can say hey we want a new one the create method utilizes the new route so if you are confused about routing since we added that resources parameter to our config file or routes file should say if you run rake routes it'll spit back all the basic crud actions for the post controller so we have post index which is like the index page of the blog create which would be where you would go to create the action that takes place when you create a blog post new is the actual path you take to go create edit of course is to edit show is to just view the individual blog post update is to edit it um it does kind of that you can do different types of updation updation is that a word updating uh and then of course you can delete it so that's kind of explaining that at any time if you run rake routes rails will spit back all of your routes in your routes file and kind of the uri pattern and the action involved so it's super super helpful so going back to our project that kind of gives you the sense of what these actions are and where you're going to be going when you create a new post or something of that nature when we create a new post we actually need to do post and do a similar fashion post.new but we need to pass in the parameters that we use to create the post and you could pass those in right in line like this but you're gonna find that you're gonna be reusing this in other actions so there's this private method you can add to your controller file that allows you to create this thing posts params and if this isn't making sense that's okay i was lost when i first started this but the more you do it the more it makes sense so here we're requiring for our model uh these specific records or tables whatever we generated in that migration and this is kind of a security feature of rails that only permits these things from being actually input to the form we do when we create this record if they aren't initialized here you can't actually submit data to the server so that's kind of a security thing so what we're really doing in this case is passing this function into this new creation method here and then we can check to see if that post saved and then if it did we'll want to redirect to the post itself else render the new template again okay so at basic form we're ready to create a new post in this sense so if we go to rails new we're going to get an error so because i don't have the template yet so it needs a template in our views folder so so if we go back to our views go to posts new file new.html and we could just for now just do a class title so that should at least load the page now great to create the form we need we are actually going to i'm going to copy i'm referencing another screen right now but i'm going to add some markup that we need for uh bulma plus our form so let me do this real quick might speed this up so you guys aren't bored before i do though this is where we're getting that simple form jim going and essentially rails has a builtin form builder it's just almost just like this but simple form kind of obviously simplifies the process so it's it's one that i i find pretty useful and makes more sense for stuff i do you're welcome to use the rails way they theirs does tons of stuff too so it's it's just a matter of preference i would say so i had to experiment with bulma to get this to work and i had to do a little extra code outside of simple form uh the whole intent of simple form is to eliminate i think the amount of markup you have to provide i'll walk you through this stuff in a second wrapper false label html class label so that's one input field and that's going to be for our title and the way this works is you reference the actual record here of the input and that rails is smart enough and simple form are smart enough to know what that means here we're classifying actual class on the input field itself and we need input in this case for bulma we don't want the wrapper by default simple form puts its own wrapper around the input field and this was causing errors with bulma because it had a similar class so there was clashing of styles and i didn't want that so in a simple form you can put a wrapper false declaration and that will help and then our label html we needed a class of labels so i went ahead and added that too so this is one field in the sense for a form i'm going to create a copy of that and paste it down and this one's going to be for content and we actually want this to have a class of text area according to bulma and label html we should be set there then the last thing we need is our button to submit the form of course so f dot button and then submit and this is built into simple form see that's nothing we created i'll just put create new post oops class button is primary that's part of bulma as well so if all works we should have our styles set up yeah there we go so that took some trial and error but i got it to make to basically work for us so that was pretty nifty at the time yeah and we'll we'll get into cleaning this up in a second in terms of making this look like our first app i showed you at the beginning but let's verify this works test post content i should get an error i think yeah so there's no show method right now or action in our controller and we actually need to have that so let's set that up so i'll go back to my post controller and we need to create an actual show action def show and new line and on the show we actually we need to find the post that was created so if you do post dot to find params id so we're finding by the id and we'll be reusing this line about three more times so at the end they'll show you a way to kind of make use of a before filter or action that allows you just to kind of have that set in stone you only need to write the code once just kind of a really dry approach but for now just to show you how things work this is what we need so in that sense if we head back we should find that we need now of show template so let's go to our post folder again create a new file called show.html show.html.erb and we can just i don't know what did i have in my markup here quite a bit of stuff so if i just do section i don't know if i have i do okay great container for now i'll just put the title and the content and rails if you're new to it this is kind of the general way it looks so you can do ruby inside these brackets and percent signs if you want to echo it out put the equal sign if you don't and you want to just perform some operation or set of error variable you can do that there you don't want to do too much magic inside those it's more more so for just displaying the data so keep that in mind so here we have reference to that post symbol and we can just target the title that we created so i'll just create a class i think bulma has one called content and i can do the same with the content type so the controller's sending this data through to the view if you can think of that so that's how we have access to this post property or symbol as they call them and that is shown here so fall goes right we should be able to see that data there it is so that gives itself an id if we go back to our posts index we'll see the index let's um let's clean this up a little bit so our index we can do this section as well let's see section section then i have container and that sets basically a max width and boundary for our project um i created for bulma i created these it looks like a cards on the front end so i'll go ahead go through this with you for our index we actually do need to set a new variable or symbol on our project where it gets all the posts so i actually want this to be plural instead of post in this case so we'll go post all uh and then order here you can just establish how it's displayed in the back um when you do loop through all the posts so order descending and notice in ruby you don't need ugly semicolons and all that stuff that's why i really like it it's really clean so going back here now we have access to that posts uh symbol so we'll go ahead and reference it and notice i'm not outputting this loop i'm actually creating what is a rails loop at this point but we'll do dot each do post i said rails it's a ruby loop excuse me and then we can loop through each post so the bulma way goes like this at least the style i chose so bear with me here okay so with the markup in place that should do it for us we need to add support for the post title and to do that go back and do post dot title and notice here since we're looping through we don't need this to write the symbol with the at sign in front of it we're using this as the variable throughout so something to keep in mind when you do loop through things so it's just post our content post a title and comments we will add later for now they'll be see if i can just comment that out comment the comment very much at each oh i did that wrong it should be posts boom all right so there's our first post great uh going one step further obviously i can't click that post right now and i want to click it to go to the actual individual post so to do that uh instead of just the title here we'll make use of that but we want to do a link to in rails which is a handy basically href generator with a ton of properties and then we'll actually link to the post itself and again this is one of those rake routes situations if you're not sure where to link to this is you know where i got that from so here now it's a link we can link to the post great all right so uh i think next i'm going to add general links to you know kind of navigate this blog a little easier so i'm going to actually pull up my other project and get the layout file open and the layout file is kind of the the global source of truth for your styles uh this is where all your content gets fed through this yield sign is everything we've been creating so far all the stuff gets fed into that and spit out so i want to actually add this content to our layout and i'll talk you through it and this is just kind of a time saver so don't think you need to learn every bit that i'm teaching you here but let's see so most of this is bulma and here i've created a section class called hero if you go to the bulma library there's a whole section on that let's see hero and there's different snippets you can use i use one that's basically let me find it i think it was this one here but i eliminated this bottom row of links because we only need really one or so in this project so let me go back and show you how that worked we have our hero section the hero head the navbar itself in it i didn't create a logo or anything it's just text that says demo blog and we're using a link to a function we just use in rails and linking to our root path you notice the path extension doesn't come when you rake routes but that's just kind of an understood path that you can pull from each route so we can get posts path or new post path or edit post path that's something that you just kind of learn as you go it's not so obvious sadly so let me go back to the project and we're giving it a class navbar item for the sake of foma and then we added a link on the end of the nav on the right side which would link to a new post path as again adding that path at the end and that will allow us to go to that new url path and then here i'm doing something nifty where you can actually for each of your views you can specify something in your layout file using this thing called content4 and i'll show you how that works right now so essentially you can set the variable here but define it in your views so when you hit that view in your url path that updates based on whatever you set so to make that make more sense i'll do this one right so it'd be it's called content4 and then i set it as page title in our layout file and this one i just want to call index so if we head to our index page you should see that new layout form and then our index thing is set or index title and going back to the layout once more it's called page title so on each of our views we'll actually need to add something of this nature so i'm going to go ahead and do that for all of you so far new create a new post if you don't add this it will air out so it will pre be pretty obvious what views you don't have it on okay so with this setup when you know create new posts and that we just set and then we'll actually need to do it on the show view as well but this in this case we need to actually have a variable set for it so let me copy that back and you don't have to use a string you can do dot title and it will render the same way so let's go back to our route go to this and the first post title should display there too we have it displaying twice i'll probably get rid of the one down below okay great now that we have that set up why don't we tackle how to say edit a post so let's go back to our post controller and to edit we need to actually have two actions one's called update and one is called edit edit is the view will actually render and update is the actual method that will actually take place so i'll go ahead and create def update and f edit so update we need to find our post again to know what to update so we'll do the same thing as we did for show params id you should do a server serverside check to say hey if the post has been updated let's redirect the user to the post itself so we'll do again post params we're pulling that in uh from the bottom here so we're doing that double verification check uh if the form has since updated and then we want to redirect the user to the post itself so in this case write that else render edit great and then for edit we actually just need to find the post again so post see how i'm repeating this i'll show you how later on to make this not so repetitive great uh one thing we will need to do which we'll get an error for is to actually let me add to the view first so we can i can show you by example so let me pull up my other view on the show page and kind of walk you through what i did there so this one we have the page title we have our section or container and there's this thing from bulma called level level oops can't spell so on the left side i'll do pretty much just follow what i have on like repo left side div class level left p class level item and then this it's just kind of a placeholder because otherwise the actions weren't floating to the right like i wanted so a little behind the scenes fibbing there right side are where the actions really will be so these are going to be like the edit and delete buttons so we'll do p class level item again and inside this we'll have a link to our actual edit action link to edit we'll just call it edit and then this will go edit post path notice it's all dynamic based on the actual model and invention we do need to pass the post through to it though so that's something that's new and then we can give it a class button okay and then i'll come back to the delete one but for now we'll add that so another link to in fact i'm going to leave this uh i'll just put delete for now it's not going to do anything though so i'm going to just hard code this but it's a to do for sure so button is danger because deletes a little little complicated on how it works because there's some um data interactivity needing to take place within the browser so we'll get to it nav and then i had just a horizontal rule and then we have our content class again i could have left that from before but we'll just do that so we need our at post.content render that okay and later we'll add a section for comments for now i'm going to leave that as is okay so if all goes right we should be able to edit this post now and we're missing the template so we actually need to create that so it'll be edit.html.erb and in our case i'm i'm gonna make this a little more dry and one thing we absolutely need for sure is content for and we'll pass in page title again from the layout and we'll just put edit post uh but i also want to since edit and create kind of use the same form we might as well make use of the same form instead of reauthoring that tire form again so i'm going to actually render what is known as a partial and this is how you do it in rails and i don't have it created yet but i can so in posts again in the folder views folder i'm going to create one make sure it is underscore at the beginning that's how rails knows what it is i'm just going to title it form erb html.erb and if i go back to my new file i'm going to copy and paste this in actually cut it from new paste it into form save it and for edit i have render form already i'm actually going to copy and paste this and put it in the new file as well so we have essentially our partial and the title for the page in these views okay so if i all goes right we should see our form and the content within it on this page rails is smart enough to kind of know that that's an edit and update kind of scenario so the data gets fed through so that's pretty nifty we can probably tweak that button to say let's probably get rid of this text actually this will probably be wrong in the repo but that button text needs to change dynamically so this needs to say update post yeah so that's rails being smart again so i'll just hit update and it redirects back to the post so great we have our editing functionality in place and to test it i could do test post content with and update update there it is and if we go back to our homepage there it is cool so the last thing to think about is okay this delete button we need to make sure that's even possible probably don't want to always have um posts on your site that you know you can't delete so let's get back into our post controller and we'll need one more action called delete or destroy in this case and we actually we need to find the post once more so we'll do find params id and then we can just put post.destroy and that's essentially how it gets deleted but we actually want to redirect the user to to the post path so in that case it would be the index page we could put root root path there too but i'm going to do post path okay so in our view here's where it gets a little complicated uh we'll go back to the show page and that to do i entered comes into full force now so i actually need to do another link too and make sure you get the equal sign okay and then we need to pass in the post path itself so there's no actual delete or destroy post path that's not part of our routes that wouldn't make sense so we're just getting the post path with the post id and then our method on it will be delete and it's typed like this and then you can you know tap into the browser functionality and access the confirmation window which is typed like so and then i want the bulma classes on this as well so we'll do button and then is danger okay so our method is the delete method on this posts we're getting its id and then we're confirming with the user because you don't want to just delete it outright without that kind of gateway in between so let's verify that that works now so here's our are you sure and then delete and now we're at our index page with no posts so let's create another one just to make sure everything's working second post create and it goes to the post cool third post great and there they are in line this is our root path this is our create path or new path and we go back to the show path which is getting the id of the post and we can edit the post and update the post and delete it so great that's essentially the functioning part of the blog so we've gotten that far most blogs have comment forms though so we want to actually add that to our view next and to do that we need to generate both a controller and a model for comments so let's go ahead and go back to rails on our i'll actually do git and finish um posts um i don't know posts this is the hardest part i swear okay cool so we need to create one more controller called common controller um i'm going to actually do rails generate controller and let's just call this comments and we'll just leave it at that okay and i'll just do the model too so rails let me clean this up rails generate model let me verify one second what i'd created so yeah we need a model called comment and its title or its name of the person commenting would be a string and the comment would be text i ran into the weird naming issue that like the comment thing it kind of gets confusing later on but i'm going to keep it as is just so it's consistent with what you guys will see but you might change that name to something different there you'll see what i mean so let's run that and you can verify that that migration is in place in our db folder again let's create comment there it is so we still need to run migration so rails db migrate after you run that you should create those tables there they go okay great now we can interact with that the first thing i'm going to do is go to our models and this is where relations comes into play a post is going to have many comments rails has tons of documentation on this if you want to read up on it it's really important to understand but it's very basic how it works so that's why i really like it so if we could do as many comments but a comment is going to belong to a post so we'll do belongs to post notice this one's singular and this one has many so that relationship is basically established just like that so we do have a comments controller now we should only really need our create and destroy methods on this one since it's going to be showing on the show page of our posts so let's do a create oops and destroy and it gets a little confusing because we need to have that you know relationship between these two models now so we need to first find our post we need to find it by the post id and that's something we haven't talked about yet is migrations and one thing that isn't quite established between these two models is an id usually there's a relationship based on id between them so we need to run what's known as a migration at this point and then we will do rails generate migration let's see add post id to comments so if we run this hopefully rails is smart enough to know what we're after but we're taking the id of the posts and putting a new table on the comments model uh so those ids when they're basically you know related to can have something of relation so that the idea is how that works it's kind of confusing but we'll see what happens in our migration here so we go to migrate and our latest one so it didn't actually sometimes it automatically does this stuff for you but unfortunately it didn't so you might need to add this yourself and the way it automatically does it is how you type it but we won't get into that i guess now so we need to add a column in this case to comments and then it's going to be post id and of the type integer so we'll close that and we need to run one more migration so rails db migrate it should add that record to our column so now we have yeah that column comments on comments which is post id and it's an integer so if all goes right we should be able to access this as i've typed and we also need comment to find the comment on the specific post comments create params comment and then we can permit instead of doing that um private function we can just type it in place like this for the strong params that rails needs and we need to close that and then once that's good we can redirect to post path post okay so here we're finding the posts based off of this variable or symbol we created once we have that we can get the comments on it and go through that comments model and then create the new comment on that post it's kind of kind of tricky kind of hard to understand but that's essentially what's happening so let's first verify that that works i'm going to go to my show file and i'm going to make that form so when we have an actual comment form here we should be able to see the name and the field to type the comment in so let's go to views layouts post show okay so here's i have that div from before or that section i should say i'm gonna go ahead and do a container i'm going to call this section 2. that's part of a spacing thing in bulma subtitle i just applied various classes here to kind of design this without actually doing custom styles and here we need to um add post comments account so here we're getting the posts comments count obviously and we can just type comments here before i go on though since this record the records that we have don't have this stuff associated with it it's going to error out if you don't um have some of this stuff like the post id so i'm going to go ahead and delete these and then we'll add fresh ones and i can talk about how you can do this without the interface because sometimes rails will throw up an error screen and you can't access the ui so i'll show you how to do that it's called rails console and you can essentially just interact with your database through the command line so next we want to render comments and post our comments let me make some more room there we go and that will essentially be our comment feed next is the comment form and i just added a horizontal rule h3 with the class subtitle and is three just the sizing class you can put leave a reply and then we rendered an actual form which we still need to create great so it's going to air out obviously because we don't have the form we actually need to create a new post though so let's do uh i don't know i think i'm on my fourth post fourth post comment and boom missing comments form so we need to create that uh in our comments folder let's do a partial that's a form that html erb and then in this file it will be using simple form again and then it gets kind of tricky here but i'm going to grab make sure we close it so to make this a little easier i'm going to grab the content from within this form and we'll just change the parameters oops and this will be named and this will be comment okay so save inside the simple form 4 we need to pass in both the post and the post comments let's do post and at post comments and then this thing called build and this confused me too but build i have a definition here it says it returns one or more new objects of the collection type that have been instantiated with attributes and linked to this object through a foreign key so it's kind of how we have the post id on the comments uh we're getting that post reference from it and then you can update that form and get that data from that that thing it says it also only works if it's associated object already exists so it can't be nil so that's why i deleted those records because this stuff would error out otherwise i think that's it for the form let's verify that it'll pull through uh and then we have post path what am i missing here all right guys after quite some time trying to figure this out i realized immediately when i thought about it finally a big gotcha is that to do what we're doing we need to actually edit our routes file so comments needs to be within it and i totally forgot about that so let's uh let's go back to that and actually fast forward it and try to do some more code here for the destroy method to see if i just had something wrong i'm gonna delete that for now and then we'll we'll get it um in the next part after i get this crap working so let's fix that and then i'm gonna go into my rounds file in config let me close these the comments are nested within the scope of posts we actually need to create a block with ruby here and do end and then inside here we'll do resources for comments this is only for nested kind of things most cases you'll if you're having completely new routes you'll do just similar like we did the resources posts but in this case we're doing it this way so since we edited our routes file i'm going to go ahead and restart my server um let me clear out here and we have it running i'll do control c and then up arrow hit rails s again so now if we do uh actually i'll stay on that view and go over to this here and i'm going to do rake routes just to show you what i mean so since they're nested you'll notice how it works it goes posts and then the id and then comments and there's no just immediate comment route so when they're nested like that that's how that works pretty simple okay so let's go back to our code editor and actually have the demo app that i had built previously up just trying to troubleshoot and let's go back to our comment file on our app views and actually the post show file is what i'm after i have the render comments form showing so we should be able to at this point see that form up here so yes it took me too long to figure that out and i feel bad for it but anyway uh with our controller setup and our data models you know related we can now leave a reply um i'm gonna just put any reference this is my first comment leave it and we're missing a partial that is what the comment would spit out as so it's kind of like the show view of our comment that will render once that happens right here to get that we actually need to create a new file called comment but i'm going to make it a partial so underscore comments comments.html.erb and i'll reference another file i created from before and this one i'm going to use a box class from bulma and inside that will be an article and it's gonna have a class of media and we'll have a class of media content if you don't have emit installed that's how i'm doing this dot notation uh really recommend it on whatever code editor you use kind of a life saver uh so you could just do p and strong inside that we'll have the comment name and i'm gonna actually put colon and then the comment itself and here's where i mentioned naming convention before and this is why it's a bad one because i'm referencing the comment model with the comment data type so it's confusing as as hell right there so definitely maybe use like something different than me if you're following along but for learning purposes it's not a huge deal but just no naming conventions are huge uh and if we want to delete this uh it's very similar to the one we did on the post so i'm gonna go ahead and type this one out do a link to delete the only difference here is we're referencing that post again so we need this bracket notation and then also the comment id to make sure we're referencing the right record so we'll do a method of delete and then a class again button is danger oops danger and then we actually need this data confirmment window again this is just essentially hacking our browser and there are ways to work around this so you want to use a different modal to ask this are you sure kind of question you can do that that's something i won't be touching on in this video series but it's it's a workaround you need some javascript to kind of tie into the the whole structure but you can essentially like say use a bootstrap modal or even bulma's in this case to do this all right so with our comment parcel posted we should be able to render this comment now post that comments missing comment builder hmm why is that oh it's i think i named it comments yeah it should be comment sorry guys so make that uh singular save and kaboom all right so there's the comment we have a delete button um it doesn't do anything yet it does this data thing but it actually won't go back to the server and say hey actually delete this so we need to actually create that next but essentially hey comments are working so that's cool uh to do that delete method we'll need to go back to our controller our comments controller and we have that destroy method i mean and here again we need to access the post find it i should say so we do post find params and we need it by the post id since we're in the commons controller so through the comment we are finding the post associated with it if that makes sense and then we need to also find the comment to destroy so post.comments dot find and then the params of the specific comment so it's just basically the id of it and then we'll actually destroy it and we'll redirect the user to the post paths and this actually needs to feed that post symbol in so we know which one to go to and that should be it for the destroy so let's make sure that works refresh this delete this are you sure yeah great so we're still back on this post and it's all working uh you'll notice that the url has eight i've added and deleted records just trying to troubleshoot along the way so you might notice that that happens to you uh to do that realistically you sometimes your interface goes to the error screen so if you wanted to say do that from the command line which is probably the way you should you can do this thing called rails console and this there's a ton of documentation on it but you're essentially running a ruby command line that's embedded within the terminal uh in rails so we can access our post model if we want so say i'm just creating a variable here post equals post it'll actually ask you to do this weird connection thing so just do that and forget about what it does because it's crazy easy but clear that and then you have post and then just say post.all and you can see all the posts on your current model and here's our the one that was showing it's posted with an id of eight it shows me the title and the content so if you want to actually manage this stuff you can do post i don't know equals post dot find 8 since that's the id there and it'll come back with that same one if we wanted to say post dot since we assigned it to that post we now just have that post handy as the variable here it keeps outputting i want to update that title so let's say post dot title and then we'll do an eagle sign this is a post updated from rails console then it spits it back you still need to save it so remember to do that so post dot save there you go and then if we navigate back if you want to just exit this you can go exit so if we navigate back to this post it updated so that's essentially a way to interact with your database without having to like do any uh crazy ui stuff um i think it's the pattern that most developers go with simply because it's straightforward and you can actually sit without any errors so you'll notice right now there's no user accounts or anything like that any user can access this blog and delete it and edit it that's not very secure in a future video i'll probably talk more about user accounts how to implement those and make sure certain users can only have readonly access and other users can have writing access and deleting editing all that stuff one more thing for i forget on the controller i mentioned how we repeated a lot of stuff and this line in particular we repeat here on show we repeated on update on edit and destroy we can create another private definition here so we'll call it actually find post for instance and essentially just keep that line in there so i'll just copy and paste it oops great so it's there now and we have access to it basically for all of these methods and actions so rails has this handy thing called before action that you can initialize before anything happens on your app so we can just define it as before action and grab that method and then on it we can only cue it in for an array of these actions so for instance i only need it on show update oops update edit and destroy so what that does is essentially means i don't need it now for let's see edit and show show can just be empty update oops update can get rid of that line edit i can leave it empty and destroy so that really cleans up our code it almost makes it look like it shouldn't even work but it does and that's awesome so we have that available to us you can do before actions for other things like authentication um you can even do things such as making sure your app is secure like when you do enter certain criteria on your model you can actually tell it that it should validate in some way based on the server response i'll get into more of that as we go on but that's essentially without any security right now we have a working blog with comments hope you guys enjoyed this if you're just getting into ruby on rails i am as well so don't consider me a pro but i've certainly studied up on it i've been building a side project on the side using it and i figured i'd share the wealth and try to teach others so i can better learn myself so more is to come i hope you enjoy this again and thanks for watching