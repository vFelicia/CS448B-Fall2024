jenkins is an open source automation server which makes it easier to build test and deploy software in this course you'll learn how to build a full devops pipeline using jenkins lenode servers and other tools gwen faraday is your teacher for this course gwen is an experienced software developer and she has created a bunch of popular courses on both her own channel and the free codecamp channel jenkins can help developers automate their software development process and improve their productivity it can also help users obtain a fresh build of their software project more easily jenkins is an important tool for creating a devops pipeline a devops pipeline is a set of processes and tools that enable the continuous delivery of software applications the term devops is a combination of the words development and operations devops pipelines are used to automate the build test and deploy phases of the software development lifecycle the goal of a devops pipeline is to make the software development process more efficient and effective devops pipelines help to automate the tedious and manual tasks that are often involved in software development this automation can help to speed up the software development process and make it more reliable jenkins is a flexible tool that can be used to create custom devops pipelines and that's what you're going to learn about in this course so at the end consider leaving a comment with something you learn in this course hi everyone my name is gwen and in this course on free code camp i'm going to be building a full devops pipeline using tools like jenkins lenode servers for hosting our application as well as our jenkins server we'll be using github as our code repository docker and docker hub and some related tools now to follow along with this tutorial you can see the app that i will be using for deployments on my faraday academy github organization it's called the curriculum app if you followed my youtube channel you might have seen that i actually built this application in maybe 50 or so live streams a few years ago there is also a readme here on github where i have each step in the process listed out as well as links and relevant resources and this architecture diagram of how everything fits together in the process jenkins is a tool used for automation with continuous integration and continuous deployment pipelines the project started in 2004 so it's been around for almost 20 years and it's completely open source right now it claims that it's the most commonly used automation server in software development so why would you want to use jenkins as an app developer it allows you to automatically watch for certain events in your repository and react to those events you can do things like build your code run scripts perform testing and then deploy your app if everything passes or reject the deployment if the test fails either way you will be able to see logs of every step throughout the jenkins pipeline and the results of the deployment jenkins can ensure that all of your tests are run in the same environment or as many environments as you want for consistency another benefit is that jenkins has a very large community that is amassed over almost the last 20 years so there are lots of tutorials and community questions and answers that you can find another feature of jenkins is its plugin architecture to use jenkins effectively you will want to install the plugins that make sense for your project these plugins can include options for compiling or testing they have a docker plugin which we will be using as well as a git plugin that allows us to watch our github repository and react to changes jenkins is selfhosted by default you don't need to pay for an enterprise tier this gives you a lot of options for configuration it's also a tool that has been proven to scale since it's used by so many large companies around the world it's not just large companies that use jenkins however many small or midsized companies use this tool as well why do companies use it many of them say that it improves their software delivery cycles by making them faster and more performant what are some of the benefits of using jenkins versus other alternatives there are plenty of new tools in the cicd pipeline space you could choose travis ci or circleci there's also github actions there's get lab ci and many more some of the differences are that jenkins is open source many of the other options are not a big one is that you can selfhost without paying for an enterprise plan and you have total control over configuration one thing that might be helpful if you're considering jenkins as an option and comparing it to other alternatives is their jenkins youtube channel they have a lot of information about jenkins and they also have this playlist of real users of jenkins real companies talking about why they chose jenkins and what benefits they see from using it we talked about some of the benefits now let's talk about some of the cons or potential drawbacks of using jenkins so plugins i listed in the pros column because there are hundreds of plugins covering all different kinds of use cases and you can usually find a plugin for what you need in jenkins you also have the option to create one yourself that can also be a drawback though since you are relying on community supported plugins that might not be updated or documented well there can also be some confusing overlap between plugins since anyone can create their own jenkins plugin a common complaint of jenkins is the outdated ui more modern tools have interfaces that are a little bit easier to use than the standard jenkins interface now jenkins does have a newer interface that you can install as a plugin and use for a lot of things but not everything and that is the blue ocean plugin we're going to demo that in this tutorial as well another potential drawback is that since it's been around for so long and it's community supported sometimes the documentation or answers that you find can be out of date this is not an uncommon problem for software tools in general overall i think jenkins has pretty good documentation but it is something to be aware of checking and making sure that the documentation you are reading is up to date with the version of jenkins that you are using another huge consideration to keep in mind when choosing jenkins is that it's completely selfhosted and maintained unless you are using a thirdparty solution to manage your jenkins server you will be the one installing jenkins keeping it up to date managing the controller and agents and all the different aspects of the jenkins pipeline and also ensuring security which can be tricky sometimes using a tool like jenkins where you need to install so many different plugins to use it before we really dive in here i want to make sure we're all on the same page by defining some terms that i'll be using in this tutorial and common terms that you will see when you are using jenkins as well let's go over some of the terms that we will be using in this tutorial just to make sure everyone is on the same page first we use the terms continuous integration and continuous delivery commonly abbreviated as cicd favorite definition for continuous integration actually comes from atlassian it says continuous integration is the practice of automating the integration of coding changes from multiple contributors into a single software project developers can frequently merge code changes into a central repository where it builds and then the tests run continuous integration is a precursor for continuous delivery continuous delivery is responsible for packaging the app and getting it ready to deploy using automated build tools this whole process is known as a pipeline a pipeline is basically a welldefined set of steps that build test and deploy applications automatically it basically takes you through the continuous integration and continuous delivery processes you will see that we also have a build step in our pipeline that we are going to be using if you are new to development or have only used something like javascript maybe you aren't familiar with a build step but generally the build step will spin up an environment compile code and create an executable if that's necessary when we talk about testing code that is a step of the pipeline that will run any unit endtoend integration or whatever other tests that are needed for the application to make sure that it's ready to deploy into production if the tests pass there are two other terms that are jenkins specific here the first is controller and that's our main instance of jenkins that is running the jenkins controller is responsible for configuration key management plugins and it's a centralized hub to manage all of the agents connecting to it agents are usually containerized environments that will run your pipeline steps these steps are also called a job which means some work that needs to be done the jenkins controller is responsible for assigning it to an agent and then the agent will either spin up and run all the steps of that job through to failure or deployment you can also set the agent to just stay running all the time instead of spinning up for each job that you want to run this is a simple diagram of the architecture for this tutorial so you can visualize what we're going to be doing to the left we have the app development side this is a full stack javascript application used for the demo and code is committed directly to a mono repo in github on the other side we have a lenode account and two servers running in lenode these are called lynodes in that interface one of them is running jenkins also known as the jenkins controller and the other server is using docker to run our application the jenkins controller will be configured to watch the github repo and when it pulls and sees changes it will initiate the cicd process in one of the agents the agents will run all of the steps in the pipeline to check out the code from the branch we designate in github run tests and deploy if everything was successful if the pipeline fails for any reason it will immediately stop and of course not deploy the application and either way we can see the build results and the logs in the main jenkins controller the first step is to sign up for a lenode account if you are a firsttime user of lenode when you sign up for an account they will give you a 50 credit that is good for the first 60 days for you to try out that will be more than enough to follow along with everything that we are doing in this tutorial you can sign up for your account with whatever service provider you want or using your email i already have an account so i'm going to skip to the dashboard view you can see i have some servers already running here that i used for testing in this lefthand menu you can see the services that lenode has to offer from lenodes which are servers that you can spin up volumes for storage other things like firewalls if you want to connect your domains they also have an object storage solution for things like images or static resources similar to using aws s3 and a marketplace that gives you oneclick installs for a lot of popular solutions we are going to be using a couple apps from this marketplace in the tutorial today you can see i clicked marketplace and it went ahead and took me through to create a new node select a marketplace and shows me all of the options here the first server that i am going to create is one that's already set up with jenkins if you were installing jenkins yourself you would have a couple options to install directly or use their official docker container the lenode marketplace option here just installs it directly on the server that we're going to spin up i'm going to scroll down to more options it gives me the option for the linux distro now depending on what option you choose here in the marketplace which one of these you choose you're going to see different options available down here for the jenkins container these are the ones i have to select i'm going to see what's available right now it's only debian 10 that's available for this jenkins server and now i need to select a region i'm just going to select the region closest to me in new jersey usa and then i need to select what kind of server by default it'll show you all of the options with dedicated cpus how many cpus how much ram and these are a little bit more expensive for this tutorial i'm just going to use the cheapest one the nano one gigabyte which if you look at the jenkins documentation is more than enough to run jenkins so i'm going to choose this scroll down this is the name this lenode label is the name that you saw in that first table view so i'm going to give it the name free code camp jenkins you can optionally add tags here about the type of servers the technologies or something else you want to differentiate between the nodes that you spin up i'm just going to leave it blank and now i can choose a root password this password that i enter here is something i can use when i ssh into the server i can also add an ssh key and ssh with the key i'm just going to generate a root password here so i'm going to use my password manager which is bit warden i'm going to come down to generator it generated this unique password it's 30 characters i'll be deleting this server after the tutorial so don't need anything crazy let me do 10 characters copy and paste i'm not going to add an ssh key for this i'll just use the password i do want to be sure i saved the password though so what i like to do is come in here i'm gonna add this username and password let me paste in the password and then i called the lenode free codecamp jenkins so i'll just put that in the username save it and then i have the password stored so i can copy it later when i go to ssh i don't need any of these options i can go ahead and hit create it will take a minute it says provisioning while that's going i'm going to create a second linode now for the second one i could just create a custom one but i'm going to go ahead and use their marketplace again and create one with docker already installed and set up so i'm going to use their docker lenode from the marketplace i clicked on that and scroll down for the options so now you can see i have special options for the docker server for this i'm going to leave these options blank instead of using an ssh key again i'm just going to use a password and i'll select the latest debian 11 region again i'll do newark new jersey shared cpu nano and this is the server where i'm going to host and run my application so i'm going to say free code camp application for the root password i'm gonna do the same thing generate a password copy enter and then i'll go ahead and add that password create that's provisioning if i go back to my list my free codecamp jenkins is up and running and this one should be done in a minute now let's check out our running instance of jenkins you can go into the jenkins server i just spun up and i can actually access the running instance of jenkins at this ip address i'm going to go ahead and do that it should be at port 8080 and usually when you would pull this up you would see a login screen but because this is our first time it's prompting us to enter a password now this password we will have to get from this file when we ssh into our server i'm going to go ahead and do that copy this ssh now i can ssh into the node and it's asking for my password since i didn't set up a key for this instance so i'm going to go ahead and use password authentication and i did save it in my password manager so i'll go ahead and copy the password i'll enter in here and now i'm inside the server so let me go back to jenkins and it said to copy the password from this file let me take a look at that i'm going to cat that file and that prints out the contents so now i can copy this password now if i go back to the browser and i can just paste that password here click continue and since i'm just setting it up for the first time it's asking what plugins i want to start with you can either do this manually or if you're just getting started with jenkins it's probably best to install the suggested plugins you can always add or remove plugins later but as you're using jenkins you'll realize that a lot of plugins depend on other plugins and these suggested plugins just give you a good base to start with so i'm going to click on that it's installing this takes a few minutes now i can create the first admin user i'm going to call this jenkins fcc and now i need a password i'll go ahead and generate this password just a short simple password copy it i'm going to just use a dummy email address here jenkins fcc at this is just a public email address provider and before i go i'm actually going to save this user the username there we go so i'm going to click save and continue i don't have a domain or another configuration so i'll leave this how it is right now i can always access it via this ip at port 8080 so i'm going to save and finish and now jenkins is ready to start using next let's do a quick tour of the jenkins interface to start you can see they have this top navigation and then also this sidebar to the left i'm going to start off with the top since it's a lot simpler so first i have this jenkins fcc that's my username so this is just a quick link to my user profile and go back and i also can see any notifications or warnings or error messages linked here because i clicked on it it took me to my settings page i'm going to go back for now and come back here in a minute go back to dashboard and starting from the top if i click on new item you can see this is a quick link to create a freestyle project or a pipeline so if i want to create jobs i can come here and do that i'll come back here to do that in a minute notice whenever i go into one of these navigation items you can see i get breadcrumbs here where i can navigate back up this people navigation item just lets me manage any users that have access to this jenkins right now i just have the one admin user but really you might have devops and developers and other people with different levels of access to this interface and you can actually give quite finegrained permissions on what they can or cannot do build history will display information and feedback of the jobs that we run we'll be coming back to that later as well i'm going to skip down to views now you can see there's nothing in this views page yet this is basically a dashboard view of all of your jobs and you can also use this new view link to create kind of custom dashboards for viewing different kinds of jobs or maybe for different users to see different information so i'm going to go back to dashboard now i save manage jenkins for last because this is where all of the configuration and plugins key management this is the page we will be spending most of our time on initially to set everything up so that we can create pipelines and run jobs first at the top you can see that it will let you know when there is a new version of jenkins available actually this is a little bit out of date or the version that i have in this lenode is out of date anyway so it's letting me know and you can see if i scroll down at the bottom here it says the current version that i have which i believe is like maybe 25 minor versions out of date so i do need to go into my server and update that if i want to see information about my current version of jenkins there is an about jenkins section in this manage jenkins dashboard which will take me to a page that also shows my version and information about the version of jenkins that i'm using i'm going to go back now some of the main settings here are your settings to globally configure different things about jenkins and also paths this configuration page will let you manage a lot of the core settings and features of jenkins as well as give you setting options for some of the plugins that you install i'm not going to touch any of these things right now i'm just going to leave them as the default go back to manage jenkins manage plugins this is where we can search for install or update plugins or even remove plugins that we don't need we can do all that from here i'll come back here in a minute because we will be installing a few more plugins i'll go back managing nodes see we have the default node which is the controller now to start i will be running some jobs on this default builtin node which is good for trying things out and getting started but it is recommended that you create nodes just for running jobs and then use this default builtin as the controller without running jobs on this node itself we'll come back to that the other important area that i'm going to point out is this manage credentials when you create other nodes that are going to be able to run jobs you will need to add credentials here to give those nodes permission to access whatever resources they need to and for the controller to communicate with the nodes this is a very simple overview of the jenkins interface next i'm going to add a few plugins and then there's going to be another part of the interface called blue ocean to demonstrate i want to point out here that jenkins has kind of a dated look and feel but it is completely customizable you can use a theme plugin use a theme built by somebody else or create your own css and javascript to make this look and feel however you want i'm not going to be installing a theme but i will be installing kind of a new ui section of this jenkins interface to manage pipelines which is called like i mentioned blue ocean now i'm in the plugin manager and you can see the tabs here updates are for the plugins that i already have and have available updates so i could come and select plugins i want to update and click download now and it will install the update after i restart jenkins which as i'm downloading it does give me the option if i want to go ahead and restart jenkins i'm going to deselect these available is just a list of plugins that i can check off and install as well i'm going to come back to this i can see the plugins that i already have in this installed tab and advanced is some options that i'm not going to look at right now so let me go back to available actually i'm going to go ahead and filter here and first i'm going to look for blue ocean you can see there are several plugins here i'm going to go ahead and install the main blue ocean plugin i'm going to say download now and install after restart it is in the process of downloading and installing you can see and i'm going to check this box at the bottom if you can see it says restart jenkins when installation is complete so now it says jenkins is going to shut down it will just take a minute for jenkins to restart now you can see that this restarting jenkins is running now that it's finished i can log back in so i'm going to go back to the plugin section and manage jenkins manage plugins and i'm going to go to available and this time i'll filter by docker so this first option is the main docker plugin and there is a second one for docker compose i'm going to do the same thing and download now and install after restart you can see that some of the plugins have dependencies of other plugins like i just the only ones i selected were actually this docker one and the docker compose one but because they have dependencies of docker api and docker commons jenkins is also installing those plugins so it will install the plugin you select as well as any dependent plugins if they aren't installed already this is going to take a few minutes to install these now that we installed those plugins you will see some additional options in some of the settings pages in jenkins and you can also see this new sidebar item saying open blue ocean let me click on that you can see this is a completely different interface because it's a modern ui for pipeline management in jenkins it's still linked to the old interface so if you click on some links here like administration you can see it takes you back to the old interface because blue ocean doesn't have a managed jenkins section let me go back to blue ocean you can also click this kind of exit icon and that takes you back to the regular jenkins dashboard normally you would see a list of the pipelines you create here but since there are no pipelines it gives us this box prompting us to create a new pipeline so that's what we're going to do next let me start by creating a new pipeline it's asking where my repository is hosted which is github and in order to connect to my repository and be able to run jobs i need to use my github access token so i need to create one this warning in red here is just because i had previously created an access token you probably will not see this i'm going to come here to create an access token it will take me to my github account and i can go straight to the page where i can create an access token if you want to get here on your own you can access this page through settings and developer settings and then personal access tokens you can see that by clicking on the link the necessary permissions that i'm going to need for jenkins are already prepopulated and selected here so i don't need to change anything i just need to give a name to my personal access token and then i can also change the expiration if i want this is just a name so when i look through my tokens in github i can know what the token is for i won't be using this name anywhere in jenkins i'll just be using the token itself so everything else is set already and i'm going to go ahead and generate the token the token does disappear if i leave this page so i'm going to go ahead and copy it and now that it's created i can go back over to jenkins and enter it here and click connect so that worked and now that i'm connected to the github account with my access token it shows me the list of all the organizations that i belong to and i'm going to select the faraday academy organization because that's where the rebuild i want to use is located and in that organization it shows me all 14 repos and i'm going to be using the curriculum app for this tutorial and then i just hit create pipeline now it takes me to this interactive pipeline creator screen and you can see a message just popped up that said no jenkins file located so let me just go to the project in github so you can see what it's talking about and in this repo in github you can see there is no file called jenkins file so by default jenkins will look for a file called jenkins file in the root directory of a repository now what a jenkins file is is a file that contains instructions for a pipeline written as code so you can read the file and see each step defined in the pipeline going from top to bottom divided into stages and steps which we'll talk about in a minute now because this is a file it's checked into git and versioned and can be managed or rolled back just like any other file in git now since the file doesn't already exist in our repository when we create the pipeline in blue ocean and save for the first time it will automatically create a new jenkins file for us and commit it to the repository so let's go through that process now back in jenkins you can see the message down at the bottom here saying a stage is required basically the pipeline is broken down into stages which are like sections every stage has to have at least one step and the steps are what contain the scripts calls to jenkins plugins or other actionable tasks to be carried out in the pipeline both stages and steps can be run in parallel or one after the other you will see this as we go along in the pipeline creator i'm going to name this stage something like checkout code and now i need to add steps so i'm going to add a step here and find the get plugin that i installed earlier and it's asking for the url of my git repo so let me grab that paste it and i need to denote which branch i'm using for the repo i use dev as the default branch so i'm going to use that and now i can click save it says that saving this pipeline will commit a jenkins file to the repository which is exactly what i want and since there is no jenkins file of course it will create a new one for us i'm going to leave the description blank so it will just give me a default commit message and it's pointing to dev so it's going to commit directly to the dev branch so let me save and run that and it failed the first time it was trying to run sometimes it passes on the second try so let me retry and it failed again so let me look at the logs and it says that the recommended get tool is none it gives me some information here on what's going wrong and why it's failing it's saying that git does not exist basically i spun up this server using jenkins from the lenode marketplace but that server does not have git preinstalled on it so i will need to install that directly on my instance and since i don't have any kind of automated setup for the instance i'm just going to ssh directly into it so in lenode i'm going to go to my server and instead of using my own terminal this time i'm going to use the builtin one that they provide in the node it's called lish so i can click launch lish console and it prompts me to log in here so ignore the previous incorrect logins i'm going to log in as root and then grab the password that i saved in my password manager and i successfully sshed in let me make sure that git is not installed i can do that with the get dash version command and it's telling me that git is not found so before i install it i'm going to do an apt update to make sure i have the latest versions of the packages it's telling me that i can upgrade some of the packages i already have installed or they have new versions but i'm not going to do that right now for now i'm just going to do apt install git it's asking me if i want to continue installing 38.3 megabytes and now i should have get installed so let me check again and yes i have git version 2.20 and now that i have git installed i'm going to try to rerun my pipeline over here while it's running notice that the colors change so you have the color blue while it's running and then you can see things turn green as they pass and then when everything passes this whole thing turns green as you've seen before red means failure and there's also a yellow state for certain cases like test failure then it can turn yellow so everything is very visual here and you can see that now it passes since i have the correct dependencies installed on the server so this is the most basic version of a pipeline to create in jenkins so let me add a few more steps now now when jenkins created this pipeline as i mentioned before it also created a jenkins file so when i refresh my github here it added the jenkins file and you can see where it says added jenkins here that is the default commit message because we didn't type in a custom one and you can see if we go into the jenkins file this is the stage that we created and the step to check out code with the github plugin jenkins files are usually pretty easy to read because you can see wellnamed options like which agent you are running the pipeline on a list of stages and then the steps inside of each stage and for the github plugin here i'm using the api that they provide and passing in the github url for the repo and which branch i want to check out so let's explore the interface a little bit and then try to update our pipeline from the top left you can see which pipeline is running i only have one right now if i click on it i can see the history of the jobs that have run and the ending state if they passed failed or are still running and if i go into one of them i can see that it has all the information i don't have any changes yet and i don't have testing that really runs and you can see the fourth tab is for any artifacts that are produced so if i click on this file this is just automatically created by jenkins is not something i explicitly have to create but if we did create some kind of output it would be here with the artifacts on this page the next icon here that looks like refresh will rerun any jobs with the pencil i can edit the pipeline if i click on the gear icon it takes me to settings in the old jenkins ui it takes me directly to the settings for this pipeline and also here if i go to branches and hover over any of the branches in the list here then i get a couple icons here and one of them is edit so i'm going to go ahead and click on that edit icon now there's different ways to arrange a pipeline i can add more stages i can go back to the previous stage and add more steps or i can add stages that run in parallel depending on what i want to do now there are a lot of options for different types of things that i can do in a step some of these like docker and git are from plugins that i've installed i'm just going to use the regular shell script here and for right now i'm just going to list contents of the directory and this will show up in the jenkins logs it's going to create another commit to update the jenkins file so i'm going to add a commit message this time and i'll save and run that and if i go over to my app i can see that next to the jenkins file it shows the new commit message and go into the jenkins file and the new stage and step is updated i guess i forgot to name my stage i thought it was required you can see in jenkins here that when i make updates it's running twice that's because i am committing with the jenkins file directly to the dev branch so that runs but there is also an open pr in my repository this pr 90 and i'm making the pr into dev every time i'm updating the jenkins file it's rerunning all of the pr's so let me go into here and it's passing it defaulted to the name error here but anyway i can see that it printed everything out let me change that name error so let me rename the stage to log and save that of course now it's going to run again even though i'm just updating the wording in the jenkins file one thing to note here is that services like github do have restrictions on api usage so if you start to see failing jobs here it might not be because of anything you've done wrong in jenkins but you might have hit the limit with the github api and then you'll either have to upgrade your account or wait until it resets i think it resets every hour so sometimes jobs fail because of a cap on api usage but here it looks like everything went fine so now i want to add another script to the pipeline i'm going to come to branches and click edit again and i have this simple log script but let me just run one in parallel so you can see how the jenkins file works i'm going to call this front end unit test add a step here another shell script and i'm going to paste in the command i'm going into the curriculum front directory where my front end is and then run an npm install to install the dependencies and then run npm run test unit so run the unit test and i'll click save there so this is going to run and i'll follow it here i think it is going to fail because i don't actually have node or npm installed on my lenode server so it failed let me look at the logs and indeed it says npm not found so let me go back to lenode and launch the lish console again and i'm still logged in from last time so instead of app install this time i'm going to install node via the recommended command with curl this is for version 16. you don't only have to use version 16 but this is just the version that i tested it with it's a stable version it's giving me more instructions here to aptget install node so i'm going to enter that command and now i'm going to check the node version it says version 16 and let me check the npm version because npm comes with node and i have version 8 of npm so that should be all i need here let me try to rerun this now all the other steps passed this one's still going it hasn't failed yet so that's a good sign while it's running i'm going to switch over to github and go to the jenkins file and you can see that now it adds this parallel command and denotes that these two stages are running in parallel and gives it the title of the first stage for both and then each stage in parallel has its own title and steps of course you could just put this in one stage and have two steps as well but i just wanted to show how it works to run things in parallel in jenkins this is taking a little while so i'm going to fast forward so i actually reran this because i closed that other screen you can see that everything passed this time including the new one for tests that i added now that we have a couple basic scripts working let's add some stages so that we can finally deploy the app to docker hub now i'm going to add a build step to our pipeline i'm just going to create a new stage called build and then i can add a regular shell script i'm going to use the shell script to run docker commands so i'll use the regular docker build command to build a docker image from this docker file that i'm pointing to because the docker file isn't in the root directory here it's in a subdirectory so i need to point to that with this dash f flag and i also have to let docker know what is my current context which in this case is the directory i'm already in so i'm just using the period here and now i'm going to commit this now it's building and i'm waiting for it to build i rerecorded this a few times so you can see the numbers skip around a little bit but i'm still going through each step in the process now that the build passed i need two more steps to be able to deploy this to docker home first i need to log in with my docker hub credentials to make sure i'm authorized to push images to my docker hub account to do that i need to use the docker login command and the default place that it points to is dockerhub so i don't have to do anything special here but i do need to use my credentials like my username and password but of course i don't want to store my username and password for docker hub in the jenkins file so i am going to use variables in jenkins so i'm going to add environment variables to my pipeline and then i will just point to those variables from my jenkins file so you can see i can add the docker hub user and the docker hub password i'm going to just add those values in blue ocean if you aren't using blue ocean or you want to use the standard jenkins interface there is also a key manager in the settings over there i think it's a bit easier to do directly in blue ocean here of course i'm not going to show these variables on screen you'll have to enter in your own credentials here and now i'm building and testing just to make sure that my login worked and indeed it passed the only thing left to do is to add a new stage here to actually push my updated image to docker hub so i'm going to add another shell script and this time i'll use the docker push command i just need to add the name of the container and optionally the tag but the only tag i have right now is the default latest tag so i'm just going to leave that and it failed because it says that an image does not exist so with my username and the name of that image now since i already built and deployed this app a few years ago i already have this in my docker hub however now that i want to push a new image from jenkins i need to tag it during the build step here so i'm going to add a tag to my build script and i can just use the dash t option and i'm going to tag it with the same name that i'm using so my username and then curriculum front and i'll just add latest now let me save and run that and see if it passes and it passed and pushed correctly to dockerhub let me check over in my docker hub interface it's at hub.docker.com and i'm already logged in so i can see that my curriculum app was updated less than a minute ago or rather my curriculum front app which is just the front end congratulations on making it to the end of this video tutorial i hope you were able to learn a lot about jenkins and devops and lenode as always if you have questions or comments please leave them in the comments section below i hope you are also able to check out the follow along readme that is linked in the description it has all of the instructions for of course following along with every step in this video as well as some notes that i took along the way about things that i learned in the process of creating this tutorial i want to thank lenode once again for their grant to free code camp and making educational content like this video possible i hope all of you have a great rest of your week and we'll see you in the next video