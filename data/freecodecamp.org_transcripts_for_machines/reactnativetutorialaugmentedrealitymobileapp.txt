hello everyone we're going to make a react native augmented reality application with the help of expo and the google poly 3d object library what our app will do is it will display a camera to the user and when they click the plus button they will be able to add a 3d object in the world and they can also search for new objects using the google poly library so right here i'll search for duck and we'll grab something that looks cool and we can swap this out for a penguin or we can look around and maybe put the dog in there all right so the first thing we need to do is open the expo xde and click create new project now i usually choose tab navigation project even if i'm not making a tab based application because it gives you a lot of default files and folders that i find convenient i'm going to name our project which i'll call polysnap and i've already got a folder picked out on my desktop where i want to place my application so i'll click create and this usually takes a couple of minutes so i'll pause the video and return when this is finished loading alright the project has finished creating and one thing i think is a good idea to always do as soon as it started is to run your project on a device or simulator just to make sure that everything got created correctly so i'm going to open the simulator right now and while that's loading i'm going to open up my code in a code editor so just give one second for all this to load all right so i've got my code over here and the simulator is still launching while that's running another thing i want to do is open a terminal window in the project directory so i'll click that and that should give us a terminal window okay and as you can see over here on the right hand side the simulator has launched the application there were no errors everything worked out correctly so the first thing we want to do in this terminal window is install a few packages that we're going to need eventually throughout the app the first set of packages we're going to install have to do with 3js which is a javascript library for rendering graphics so we'll do npm install dash capital s for save and we will give it the three package and expo dash three i'll press enter to install those and while this is installing we'll do a little bit of cleanup of the code over here like i said we did a tab navigation project and it gives you a lot of default stuff but there's a lot of stuff that we won't need and so we can just delete it out so first let's come into the main tab navigator file and we're going to delete all the references to the links and the settings screens so that would be the file references oops here are the actual tabs themselves and down here is where it figures out what icon to use for the different tabs and i'll clean this up just a little bit save that then we can delete the files themselves as they're not being referenced anymore and finally we'll come into the home screen and just delete all this text out because we aren't going to need it so right here i'm going to delete the styles here i'm deleting some functions that this screen is using that we don't need and i'm going to delete everything except for the outermost view and we did delete the container style so instead of that why don't we just give some padding and here we'll put some text that says home screen just to make sure everything's working and we can also delete a few of these components here that we won't be using let's clean that up just a little bit okay and i'll save it the apple refresh i'm going to check on the installation packages looks like it installed correctly and we want to install one more package which is expo graphics so we'll type npm install dash capital s for save and expo graphics and this will give us a component in expo that we can use to render graphics so while that installs i'll minimize that and as you can see on the simulator we've got the home screen shown showing up here so a few more cleanup things i want to do i always delete the layout file out of constants because i never use it and in the components directory i always create i usually delete this styled text file and i always create a folder we got an error over here because we deleted the styled text and it's being referenced right here so i'll just delete that i also don't need the web browser so delete all that and save and we can reload it should work and i always create a new folder called app components and inside of that create a file called index.js which is where we'll reference all of our components that we create throughout the app one last thing we can do since we're not actually going to be making a tab application is come into our main tab navigator and switch this from a tab navigator to a stack navigator so let's import the stack navigator also from react to navigation and just change this to ba stack navigator and here are the options that i was giving to the tab navigator since we have now a stack navigator we won't need those options but we may add some other options as we build the app we'll have to wait and find out and i'll save this and as you can see the tab went away so i think we're ready to start actually building the application okay now we're ready to add the camera to our application so i've got my home screen open and over on the right side i've got my actual iphone streaming the reason for that is because you can't use the camera and a simulator so you need to use an actual device in the home screen we're going to import a few components first let's import expo from expo and then we will import expo three and three from expo three and we will also export import expo graphics from expo graphics and you should recognize these as the packages that we installed when we first created the application now down here instead of rendering the text home screen we're going to return an expo graphics.view which is what the component that allows us to use the device's camera and gives us some augmented reality capabilities so let's give it a style of flex 1 and we need to set a few properties on this to get it working the first one is on context create and this is just a function that gets called as soon as the graphics context is created so let's assign that to this dot on context create which is a function that we haven't defined yet but we'll do in just a second we also need to set the on render function which is a function that gets called every time the graphics scene is rendered so we'll say this dot on render and finally to enable it for augmented reality we need to set ar enabled equal to true i'll come up here and add our functions on context create we're going to make that an async function and it takes quite a few arguments one of them is gl which is a reference to the graphics it takes scale width height and the ar session information onrender takes a single argument called delta which is the time difference since the last time the render method was called so let's save that and make sure we don't get any errors and it's reloading over here on my phone while that's loading you need to do a few things to get the uh the 3js scene set up you need to basically have a renderer a scene and a camera and so we'll do that in the on context create so first let's put a little comment that says initialize render and we're going to create a variable called this dot renderer and we're going to set it equal to an expo 3 dot create render and what that does is it takes a gl context and gives you a renderer back we also need to set the pixel ratio to the scale and that just helps us with some sizing constraints and you also need to set the size itself with the given width and height if you don't call these last two things it'll look a little bit weird okay next we should initialize the scene so we'll put a comment there that that's what we're doing and we're going to create this dot scene and that's going to be equal to a new three dot scene and we want to set the background of the scene to the actual augmented reality session which is the camera with whatever types of graphics we put inside of it so we'll say this equals expo three dot create ar background texture and we give it the ar session as well as the renderer that we just created and finally we need to initialize our camera so we'll say this initialize camera and we'll create a variable called this dot camera and that equals expo three dot create ar camera and that also takes the ar session and some of these scaling arguments you can just copy this i don't actually fully understand what it does but there's some documentation on three js's website that explains what these numbers all mean and finally in our render method all we want to do now is say this.render.render and we give it the scene and the camera if we save that and run it we should have an ar session running in our application we'll test it in just a second all right so i'll hold this up you can see uh there's my desk and this is looking through the camera of my phone so we have the camera and everything working we've also got a whole bunch of errors down here in this these yellow boxes and they're a little obnoxious so i'm going to show you how to get rid of them temporarily sometimes you do want those boxes on there because they can give you some useful information but in this case there's not much we can do about a lot of these so if we just set console dot disable yellow box equal to true then those boxes will no longer appear and let's just run and double check and it's nice to have them not on there because we'll be looking into the camera a lot and they just obscure the view all right so holding it up again and as you can see there's no more yellow boxes now we're going to investigate the google poly api which is an api we'll be using to get 3d object information for our app this is an api provided by google and you can find the documentation on developers.google.com poly first thing you need to do is click this button right here to get an api key so go ahead and click that and get your api key and then jump back over to your code and let's go into the constants directory and we will create a new file called api keys dot js and inside of this we will put all of our api keys so we'll export default and create your object here and let's create a property called google poly and put whatever api key you created in this string right here all right i've just added my api key and remember to keep your api keys a secret so that other people can't use them since we're not going to be using the app for a little while while we do this i'm going to go ahead and close my preview of the app right here and let's jump back over to the google poly documentation so it gives us access to 3d objects it'll give us all the 3d object files that we need to render them in our augmented reality app it also give us some screenshots and a few a little bit other information that we might find useful if we come down here to guides we can click poly api and get some more information about it the api as it says here allows you to list assets list your assets or get a specific asset what we want to do is use the list assets api because we're going to allow users to search for different assets and then we'll display whatever they've chosen so just a quick overview of this here's the request that you use for the api and here are some parameters you can provide you can give it keywords which is probably what we'll be using for the search you can specify certain categories like animals or technology you can specify a format if you want only a specific type of 3d object format page size controls how many results you get back from each search and then page token is a way to have different pages of data so if we say that our page size is 10 and there's a total of 100 results of that search we would need to use the page token to get page 2 and page 3 and so on down here it gives you an example of what the response will look like we'll look at this a little bit more deeply in just a second but the documentation here is pretty good and it would be wise of you to take a look at it another thing you can do is use the google apis explorer right here and if you look up the poly api you can actually test out api calls so we're using the list api so i'll click that and here we can just type in any kind of search parameters that we want so for keywords we could look up duck and click let's set our page size to be five and we'll click execute and it'll actually run this api call and down here gives you an example of what the results would look like it also shows you what the request itself would look like we would just call a git on this url except replace this with our api key and as you can see down here we get an array of assets and each asset has a display name an author a description some information about what is created and then this formats array actually has the 3d object file so there's a dot obj a material file here's some additional files and different formats all right so let's go back over to our code i'll make this a little bit larger so we have some more room and what i want to do is go into the api folder and create a file called google poly js and here we're going to build out a little sample a little class for working with the google poly api so let's do export default class google poly and let's create a constructor and the constructor is going to take the api key so whenever we create a new instance of this class we'll give it the api key and then we'll store it in a property called this dot api key and that allows you to use it if you have a secondary api key or you want to use it in a separate project with a different api key next thing i want to do is create a function called git query url and what that's going to do is take an api key and a few other parameters that we decide we want to use and it will return us the url to perform the query and the url would be something like this so why don't we actually just copy this and paste it into our code and we can look at it as a reference while we're building this out i also want to make this a static function since we're passing in the api key and it doesn't need any access to any member variables at least i don't think it will all right so let's create a variable here called base url that's going to be this this portion of the url that never changes no matter what the parameters are so we'll set that and then we're going to build out a url based on the different parameters that we want to give it so as a review here are all the parameters that are possible and for our application we're going to let users search using a free text search box and whatever they type in we'll just put into the keywords parameter and show them those results so let's make a new variable called url and that's going to be equal to the base url plus key equals and i'm getting this from here it doesn't matter what order you put the parameters and i always start with the api key so i don't forget it so we'll put key equals that plus the api key that we were given in the function and it'll say url plus equal which adds on to the url and parameters should be separated with an ampersand you can also use query parameter building libraries if you want but this one will be simple enough that i don't really mind doing it myself so let's take a look at our parameter options i think for this app we want to set a page size so that we don't load too many all at one time so let's just hard code our page size to 10. and back over here it's got this max complexity parameter which is an enum and it takes medium or simple or complex let's let's hard code it to medium so that we don't get too complicated graphics and and overload our application so we'll set ampersand max complexity equals medium the other thing i want to hard code is the format of the results that we get i only i want to limit these results to obj files the other formats could potentially work but i'm only familiar with objs and so i only want to give users options that have an obj file format so we'll set ampersand format equals obj and let's see we also want to add the keywords so let's pass in keywords into our function we'll say ampersand keywords equals and since the keywords will come from user input you need to make sure that you clean that input and don't allow any sort of unsafe characters to get in so the way you can do that is by calling encode uri component and giving it the passed in parameter and since we're going to support multiple pages we also want to pass in a next page token but this one will be optional since the first very first page won't have a next page token so we'll say if next page token is passed in then we're going to add that to our url and i believe the parameters is called page token so we'll say ampersand page token equals and next page token and finally we will return the url so this function should give us a query url with a given api key keywords and an optional next page token and another thing i just thought of just to be safe if the keywords for some reason were blank we probably don't want to say keywords equals blank so why don't we put this around a an if statement as well so we'll say if keywords are passed in then we will add the keywords to that parameter all right now i want to make another function that actually gets the results so why don't we call it get search results and this will take a keywords parameter and a next page token this one's not i don't want to make this one static so in that case we'll have access to this dot api key but we'll still need keywords and next page token so we can build our query url what this function is going to do is it's going to build the query url and then call the api and return the results so let's first get the url so we'll call the static function via google poly dot get query url and the first argument is api key which we have right here as this dot api key the next two are keywords and next page token so now we have the query url that we need to use and since it's just a basic get request which you can tell from the api explorer right here we can just use fetch to get the results so we'll call fetch we'll say return fetch give it the url and you need to usually do these kind of thing where you convert it to json so we'll say then dot then function response will return response.json and then another dot then which has the data itself and what we want to do with the data is take a look at the data that we're given and it gives gives us an array called assets let's see if it gives us anything else if we scroll all the way down to the bottom it's also got a next page token and a total size which i think is the total number of results so i think for this function all we want to do is return the array of assets and later on we'll come back and grab the next page token and figure out how to handle our pagination so we don't want to return the whole data we only want to return data.assets and since we're handling this with promises the way we should do that is return promise dot resolve data dot assets so now when we call this we can use the normal promise syntax and we'll be given the data.assets so that should be enough for us to test it out so let's go back to our home screen and we want to import google poly from uh it was an api google poly and remember we need to go up one level because we're currently in the screens folder now let's create a constructor here and remember you always need to call super props and let's create an instance of the google poly api class that we just made so say this google poly equals new google poly and we need to pass in the api key which we have in our constant slash api keys file which we also need to import so right here we will import api keys from dot dot slash constants slash api keys now back down here we'll call api keys dot google poly and we'll save that and let's check the expo window right here when we do console.log some messages will appear down here that we can take a look at so i'll make this a little bit smaller again now that we've initialized our google poly object we can call this dot google poly dot get search results which is the function we just created and remember it takes a keywords and an optional next page token parameter so for our keywords we will give it duck and next page token since we don't have one because it's the first page we'll pass in a blank and then we can say dot then function and remember it's giving us the assets and inside of here we should have our assets let's just double check by doing a console.log assets and if we refresh and i think i may need to run it on my phone so just one second yeah it closed out so i'm going to scan it on my phone and all it's going to do is load the app which should go straight to the home screen which we'll call our home home screen constructor it'll generate the google poly object call get search results and give us the assets and i've just realized that i made a typo if i come back over here it's saying that i spelled keywords wrong some oh here it is okay i accidentally misspelled keywords right here so i need to fix that and rerun it okay so the simulator has launched and as you can see over here it's it tells me that it can't run opengl in the simulator that's what we expected but all we really care about is the console and as you can see right here it has printed out a bunch of json data which is the data from the api call and if you don't believe me just as a double check i'll pull this over here and i'll reload the application by using the command plus r button it's going to relaunch and here we go here's all of our asset data okay so one thing that we're going to do that i think would be convenient is let's take a single asset and copy that data into a file so we can use that as a reference as we're building the app and we don't have to constantly be calling the api so there's a few ways we can do that the way that i want to do it is just grab an asset here we'll just say assets zero and we'll call we'll create a variable called json and we'll say json.stringify and we'll give it the first asset and what that's going to do is take this asset and convert it to a json string and then we're just going to display that string in the console and we'll just from the console copy and paste it somewhere so i'll save this i'm going to clear my console here and as you can see we've got that json data in a big string so we'll just copy this and why don't we put this in our assets folder so we'll come into assets we've got fonts and images let's create a new file called i mean oh shoot a new folder called objects and since we were searching for ducks i'll assume that the first asset was a duck so let's create a new file called duck object dot json and inside of here we'll paste that string and i'm sure there's a way to format it automatically for you in this code editor but i don't know how to do it so i'm just going to put a few break line breaks in here not for the whole string but just so we can look at a few things in here there's another property called thumbnail somewhere in here there it is that now we can kind of read this and i think the data that we really need is thumbnail formats and probably the display name and the author name and it says turkey day happy turkey day turkey so this object may actually be a turkey so why don't we just rename it to turkey object dot json all right so just as a way of checking that our object is working properly and that we got all the data we wanted let's try to display the thumbnail as an image in our app so if we come over here we can see that the turkey has a property called thumbnail let me just pull this over here and the thumbnail object actually has a few properties one's called relative path one is called url and one is called content type format some of the stuff too so i think all we need to do is grab the url out of the thumbnail property and that should be in a format that we can display in an image let's come back over to our home screen and let's import turkey object from assets slash objects slash turkey object.json that should give us access to the turkey object data save that and save that and down here in our render method temporarily we will comment out the expo graphics.view and instead we'll return a normal view with a flex one and inside of here we will put an image and let's double check that we have image and our imports we don't so we need to import image from react native so we can use it and image takes a source property with a uri property and the uri in our case will be turkey object dot thumbnail dot url and keep in mind that came from here's the object we want to get the thumbnail.url property and we also need to set a width and height so let's give it a style we'll say width of 150 and height of 150 and let's save that and hopefully we won't have any errors and there you go there's our thumbnail this is what the 3d object should look like it's not the 3d object itself it's just a thumbnail or screenshot but this is what we can expect once we've loaded the 3d model so let's comment this out in case we want to use it later and uncomment this section so we can go back to having our camera all right what we're going to do now is allow users to search for any kind of 3d object they'd like rather than having the turkey hardcoded in as you can see i'm running the simulator over here on the right because we won't be needing the camera for a while so in the home screen i'm going to come down to the render function and just temporarily we're going to add a view where we can do some experimenting with our ui and once we're happy with the ui we will integrate that into the entire app so i'm just going to return a blank view we'll give it a style with some padding on top and save that and make sure we don't get any errors since we're using us we're going to have a search component we're going to need a text input to allow users to type in the search that they'd like to do so up in our imports we will import text input from react native and back down here in our render method let's add a text input and let's also add a button that allows them to perform the search so the title of the button will be search and on press will be this dot on search press and that the text input will give a value equal to this dot state dot search query and on change text we will say this dot on search change text and we'll need to implement these functions now so let's add them right here on search change text we'll take a text as an input and we'll just call this dot set state and we'll set search query equal to the text that we're given and the on search press function will look like this but we'll implement this in just a second we also want to go ahead and add search query to our state so let's scroll up to the constructor here and we don't have a state yet so we'll say this.state equals and we'll give it a property called search query which starts off as a blank while we're here we can go ahead and delete this code as we don't need it anymore and save and reload all right the text input is a little bit difficult to see so let's give it some style and we'll add a little border around it so let's add a new line here say style equals border width of one and also add a placeholder that says search let's also add set the height to 40. okay so we've got a search box here and a search button it doesn't look great but we'll make it look a little nicer later on now what we want to do is let's create a component for displaying our results so if you remember down here we had this image of the turkey object let's put that in here and take a look at it again and it looks pretty nice but i think we also want to add the author name and the display name of the object and whenever the user searches for something we'll show a table filled with these objects which shows the image and the author's name it's important to add the author's name because the objects are licensed under creative commons and you need to give attribution to the author and the display name is good just so people might have a better idea of what the actual object is all right so let's come over to our components folder and open up app components and let's create a new file we'll call this google poly asset dot js and we're going to create a new component so let's import react from react i'm going to import view text and image we might need a few a few more later but we know we need an image to display the thumbnail and some text to display the author name and the display name and a view to hold everything so let me spell import correctly and from react native and then we will export default class google poly asset which extends a react dot component it's going to need a render method which will just return a view for now fill that in later but first let's come into index.js and let's import google poly asset from google poly asset and then export google poly asset all right now we can access google poly asset and other files save that and in our home screen we will import google poly asset come down here import google poly asset from components slash app components save that reload now our google poly asset will take as a property the asset object so let's make a default props object and we'll say asset which we will initialize to a blank object and that's kind of a reminder that this needs to take an asset as a property in our render method now we will return a view and inside of this view we'll put all the thumbnail and text stuff that we need for the asset let's flip back to the home screen and scroll down to our image right here and just copy and paste this so we don't need to retype it and we'll put this in our view and instead of source being the turkey object.thumbnail.url it's not going to be the property asset that we pass in so we'll say this.props.asset.thumbnail.url if we wanted we could move these styles into a style sheet so why don't we go ahead and do that now we will import style sheet from react native and down here we'll say cons styles equals stylesheet.com and we'll say thumbnail has a width of 150 and a height of 150. and we'll delete these styles out and instead say styles.thumbnail save that now why don't we try using the google poly asset instead of this image right here to make sure that it's working so we'll add a google poly asset and the asset will be turkey object so if we did everything correctly we should see the same thing on the screen once we delete this but it will now be inside of our google poly asset component rather than the image and we have an error here so let's double check i think the error is that we didn't put this in brackets when we imported it so you should import it correctly and there you go there's our thumbnail of our turkey now one thing i wanted to do with this is i wanted to round off the corners just a little bit i think it would look a little nicer and the way you can do that is by setting a border radius let's give it a border radius of 10 and see how that looks okay looks pretty good and we can add some padding on the side later if we want to let's go ahead and add the display name and the author name down here so we'll just add some text components that one will put the display name and here we'll put the author name let's give them each a style called styles.displayname and styles.author name come down here and display name and author name and i think what i would like is for the display name to be bold and the author name to be normal so we'll put font weight is bold and we don't need to put anything in author name because by default it will be normal so let's go back to our turkey object.json reference and figure out what the property names are and they're just called display name and author name so we should be able to just add in this dot oops this.props.asset.displayname make sure to put it in brackets and this.props.asset.authorname and if we save it we should now see our text below the image great let's also put a style on our view called styles.container and let's also align our text using the text align property to be in the center and maybe that's not how we do it maybe we need to put a line items here center okay so everything's centered there we can delete that if all right so now we've got a component we can use to display our search results it'll look like this and actually we want to do one last thing i think what i'd like to do is have users be able to click on the asset so let's add a touchable opacity import from react native and let's surround the whole thing instead of a view we'll surround it with a touchable opacity and touchable opacities need an onpress property so for onpress we'll say this.props.onpress and in our default props we will initialize onpress to be a function that doesn't do anything and this serves as both a reminder that you should pass in an on press property and it helps to prevent crashes in case somebody forgets the on press property when it tries to call this it'll just call a function that doesn't do anything rather than crashing so save it and try clicking on it as you can see the opacity changes so it gives the user an indication that it was clicked on so that should be all we need to display our search results all right let's return to our google poly class we were working on earlier and make a few adjustments to it that can make the searching process a little bit more convenient for us i'll switch over here this was the function get three model that we were working on to get the 3d model which will collapse now because we'll be working with that and as a quick summary we have two functions in our class one called git query url which just gives us the url that we can use to pat to call the api and get search results which takes keywords and a next page token and returns us the results of the api in the form of promise when users click search they're going to be given the first page of data which for us will be 10 results because we've hard coded our page size to be 10. i also want a button down at the bottom called load more which when they press will load the next 10 results using our next page token and what i'm going to do for my application is just concatenate all the results into one big array and show them all as many times as they click load more that may not be ideal for your application you may only want to show 10 results at a time or 20 or however many and implement some sort of pagination scheme so feel free to make modifications as you need for your application since i'm going to have all the results in one big array it makes sense to keep track of that array in our class so i'm going to add a new property called this dot current results which i'm going to initialize to a blank array i'm also going to track the next page token as a member variable and i'm also going to track the keywords as a member variable so instead of get search results taking in keywords in a next page token we're actually going to pull it from the member variables here so we'll say this dot keywords and this dot next page token and down here when we receive the results instead of returning them as a promise we're going to append them to our current results array so the way that we can do that is setting this dot current results equal to this dot current results dot concat data.assets and that will concatenate the results of the api to our current array let's also set our next page token to the next page token that we're given which is data dot next page token and we can actually keep our promise here to return the results of this specific call if we want and so users will be able to get the next 10 results from this promise or they can get all the results by just calling their instance of google poly dot current results now we need a way to set the keywords so that when git search results is called it actually has some keywords so let's make a new function right here called set search params and it will take one input of keywords and what this function will when it will be called as whenever the user clicks search so if the user types in turkey and click search what we wanted to do is clear out all the existing results all of the existing next page token stuff and start over with a brand new search of turkey so we're going to do is set this dot current results equal to a blank array so any results that are already in there are wiped out this dot next page token is going to be set to blank and this dot keywords is set to the input keywords so how the ui is going to work is the user will type in their search result here their search query here they'll click search which we'll call set search params and reset all of our member variables then it will call get search results which is going to search based on the keywords that are given and the next page token which for the first page will be blank that's going to call the api grab our results and append them to our current results array which is currently blank it's going to set our next page token and it will return a promise with the assets for just that query then if the user was unsatisfied with the first 10 results they can click the load more button which we haven't added yet and we'll call git search results again which will run the query append the next 10 results to our current results array set the next page token and return the results 11 through 20. so let's save that and give it a shot all right so let's flip over to our home screen and try to implement the new changes to the api in our ui so we talked about having a load more button so why don't we go ahead and add that let's come down here to where we've got our search button let's add another button called load more and when it's pressed it will call this dot on load more press which we need to implement so we'll say on load more press and we've now got two buttons that we need to implement so as we said when search press when search is pressed we're going to grab the text out of the search box and call set search params so let's get the text which is equal to this.state.search query instead of calling it text one we call it keywords and we'll say this dot google poly which is our instance of the google poly class dot set search params and we'll give it keywords so now we have set our search params we've wiped out any results that may have already been there and set our keywords now we want to actually call git search results so we'll say this dot google poly dot get search results it takes no inputs now but it returns a promise so say then function with assets and we can do whatever we want with our assets here but i think what we're going to do is instead of get using these assets we're going to use this dot google poly dot current results which is going to have all the results of every query that we run so let's come up to our constructor and let's add a new state parameter called current results which is initialized to a blank array and whenever the query returns we're going to set state.currentresults to poly the current results and setting the state will trigger a rerender with the new results so up here we're going to say this dot set state current results is going to be equal to this dot google poly dot current results and since we're referencing this inside of a function we need to bind the this context so we'll add that bind this right here okay and load more press should do almost the exact same thing except it won't reset our keywords or our search parameters because we want to keep those the same but it will call get search results to get the next page worth of data so let's just copy and paste that down here you could factor this out into a separate function if you'd like i don't think it's necessary in this particular case let's add a console.log here with our assets just to make sure that we're actually getting data and before we test it out we do need to make one slight change back in our google poly class again since we're referencing this inside of a function here we need to bind the this context by calling dot bind with this otherwise we wouldn't be able to access this dot current results or this dot next page token so let's save and try out our new search open up the expo xde and we'll type in turkey do a search and as you can see there are some results and if we click load more i believe we got some more results so that's just a quick check to make sure that there weren't any huge errors let's now actually display the results on the screen all right so back in our home screen to display the results we're just going to display a google poly asset for every asset in our this dot state dot current results so one way we can do that is by using a loop or we can also use the map function so let's make a function right here called render current results and what this is going to do is we'll use the map function to map all of our current results to a google poly asset component so we'll say return this.state.currentresults.map now take a function with an asset and an index and we will return a google poly asset whose asset property is equal to the asset that we're currently mapping and since we're going to have multiple of these we need to set a key otherwise you'll get a yellow box error and we'll just set the key equal to the index and instead of displaying our turkey object we're going to call this dot render current results and when we make a small modification here which is we'll we'll check the length of this dot state that current results and we'll say if this dot state that current results dot length equals zero then we're just going to return text that says no results that way we know that we don't have any results and if there are results in there we'll call our map function so let's save that and i just realized that we didn't call the function here so add the parentheses there and call it save it again okay so we've got no results let's search for turkey click search and there you have it we have our results and i'm unable to scroll so we need to change this to a scroll view to allow scrolling save it again and try it one more time click search and there you go we have a list of 10 results related to turkeys if you take a look at the last one it's this bird with a red head let's load more and make sure that we got 10 more okay so that was our previous last one and here 10 more turkeys actually it's only three so that must have been the end of the results for turkey let's try changing the results again to dog and click search and well the first two results are foxes and that's one thing i've noticed is this the keywords query gives you some sometimes unexpected results as you can see there's a lot of animals on here that aren't actually dogs i'm not really sure what's going on with that but the api is working correctly it's just kind of giving you strange results all right so let's try to make our search results look a little bit nicer we'll probably come back to this later on and clean it up a bit but we can do a couple of things right now for one i think we can actually fit two results per row and i also would like to move the load more button down to the bottom so when you've scrolled down here you can click load more right there rather than having to scroll back up and we may make a couple of modifications to the text input so let's start off with adding two results per row and to make things a little bit easier for us since we may be refreshing and researching over and over again let's initialize our search query to be turkey so that every time we reload we don't have to type in a search query and click search we've got turkey right there we can go ahead and click search and get our results all right so to get two per row we're going to update our render current results function we still want the no results text if we have no results but let's try to put that in the center instead so let's add a view here and we'll say styles flex 1 align items center and end of the view so now the text will look a little bit nicer when there are no results and down here instead of using the map function let's create an array called results we'll put all of our google poly assets and let's do a loop for var i equals zero i less than this dot state that current results dot length and i plus plus what this is going to do is it's going to grab two results at a time put them into a view with a flex direction of row and and show all those results so first thing we should do is we should check if we're on the very last result and we don't have an extra one then we don't want to try to add two so let's check if r equal if i equals this dot state dot current results dot length minus one then we're just going to return a google poly asset whose asset is now equal to this dot state that current results i and whose key is now i and we'll break from the function but if we're not on the last one which means we do have at least one more we can i'm sorry this should not be returned this should be results dot push because we're adding to the results array and then down here after the loop we're going to return our results like that we'll just delete the map function right there okay so now in this section of code we know that we've got at least one more result so we'll say results.push and in this case we're going to push a view which has a style of flex direction row inside of that view we're going to have two google poly assets one for the current result one for the next result so we'll say i here and i plus one plus one and since we're looking at two results at a time we want to change our loop to be i plus equals two so instead of going up by one each iteration will go up by two each iteration and that should be all let's save and take a look at what our results look like now one thing i do want to do is turn off the disable yellow box feature so that if we do get any errors we'll see them let's refresh and we'll click search to get our search results and we're still getting this key error but we are getting two results per page it looks like so let's figure out what's wrong with this error first i believe it's because the view doesn't have a key so we'll set the key here equal to let's say row plus i okay we've eliminated the error we've got two results per row but we want to center these a little bit and maybe add some padding in between them so to center them let's put our results into a view so we'll say return view with the style flex 1 and align items center and inside of that view we'll put our results get rid of that and to add some padding in between these will go into the google poly asset component and in our container style let's just add some padding of about 10. so save that save our home screen may have to refresh again and click search and there you go we've got some padding in between rows two results per row everything's looking good there so we'll collapse this because it looks good right now and we said we're going to put the load more button towards the bottom that's easy to do we'll just cut this and paste it right below the results and if we click search we've got our results with a load more button down here and for some reason it's getting cut off at the end so why don't we just add a view here with some padding on the top just to give us some extra space so we can see everything click search load more great now something i just noticed is we're getting a load more button even if we don't have any results and i actually would like to hide that button until we have some initial results so an easy way to do that is with the ternary operator let's take our load more button and put it into brackets and give us some space here and what we'll do is we'll say if this dot state dot current results dot length equals zero we're just going to show a blank view but if it's not zero we're going to show the load more button so we'll save and refresh that now we're not getting the load more button once we have our initial results we've got a load more button there and we have some padding down below now for one last ui change let's let's update our text input a little bit and make it look a little nicer so i'll come to the text input here we've already got some properties i want to set the auto capitalize equal to false actually i think it takes a string so let's set it to none and for the style i want to add some padding of some margin on the horizontal of 10. let's refresh and see how that looks okay so it added a little bit of spacing here and let's also give it a border radius of 10 to round off the edges and i don't like how close the text is to the end of the box so we'll also add some padding horizontal of 10 as well great now we're ready to display the object that the user actually selects on the screen rather than the turkey as you can see i'm now streaming my actual device because we're going to need the camera and i've once again disabled yellow boxes by uncommenting this line because they were getting in the way of the button so just as a quick test i'm going to try adding a turkey again to make sure everything was working properly and there you have it i clicked add turkey and we got a turkey added right there so in order to keep track of the user selection we're going to add a new state variable and we'll call this one current asset that's going to be the 3d asset that the user has currently selected and rather than defaulting this to an empty object why don't we default it to the turkey object so that way before the user has even done a search they'll have an object that they can add to their screen i'm also going to delete these two state properties because we recently extracted them into the searchable google poly asset list i'll save that and we need to set our current asset whenever it is chosen from the search menu so if we come down here this is where our searchable google poly asset list is and we need some way for this component to tell us when an asset has been chosen and if you recall on our when we created the google poly asset component we gave it an on press function so we can utilize that to determine when an asset has been pressed so let's come into our searchable google poly asset list component and let's make a new property and this one will be called on asset press and we'll initialize that to a function that doesn't do anything let's scroll down to our render current results function and call the on asset press function anytime an asset is pressed so we'll open this up and here's where we're adding our google poly assets let's format the text just a little bit add some line breaks in there to make it a little bit easier to see when these properties start getting pretty long oops and we want to implement the on press function for the google poly asset and we want to call this dot props dot on asset press but we run into a problem which is this is running in a loop and we need to know exactly which asset was pressed so why don't we come up here and why don't we add an asset here to indicate that this function will take an asset and we'll come back into our google poly asset function and the on press will also provide us with an asset and when the on press is pressed here what it's actually going to do is call this.props.onpress and it's going to give it this dot props dot asset so whenever a google poly asset is pressed it's going to call its on press function and give this asset object right here as an input so we'll save that and come back into our searchable google poly asset list now we need to implement the on press for the other google poly assets that we've added let's add a few line breaks here to make it a little easier to read and we'll put on press here and on press here let's save that all right as you recall we're currently adding the object in the on add turkey press button and we're assigning the object to a variable called this dot turkey since it won't always be a turkey i think we should rename our function and our object so why don't we name the variable to this dot three model equals object and let's check where that's being used i think it's being used in onrender this is where we're rotating it so instead of this.turkey we'll say this.3 model and instead of on add turkey press why don't we say on add object press and come down here and instead of saying add turkey we'll say add object and call on add object press and in the google poly dot get three model function call instead of passing in turkey object what we're actually going to do is pass in the current asset so we'll say this dot state dot current asset and since we initialize it to the turkey object we can be sure that it will always have some sort of object in it i'm going to delete this console.log that says adding turkey because we're no longer adding a turkey and let's review when we click add object it will call this and it will load the asset that we currently have and actually one thing that we need to do is whenever this is pressed we need to remove the current object so one way of doing that is by saying this.scene.remove and we want to remove this.3 model so you can only have one three model on the scene at a time and we'll check if this actually exists so if this.3 model then we will remove it so that way if they click add object and it adds a turkey and then they go and search for something else and click add object again it'll first remove that turkey and then add the new object that they want to add let's also close the modal anytime an asset is chosen from the search so we'll come down to our on asset press function in the home screen and after setting the asset we're also going to set state search modal visible equal to false so let's save this and test it out alright so i'll hold my phone up and press add object which should give us the turkey by default if we look around a little bit there's the turkey now let's do a search and how about we search for duck and there's the turkey we don't use that how about we take this penguin and if we click add object you can see the turkey goes away and the penguin gets loaded in now that the main portions of the app are just about complete we're going to do a little bit of cleanup to make it look a little nicer and the cleanup will be done in no particular order so let's begin let's move over to the home screen and the first thing i want to do is make these buttons down here at the bottom look a little bit nicer so i'm going to use icons instead of buttons and we can use the icon library that comes with expo or you can install the library it's called react native vector icon so we will import material community icons as icon from react native vector icons and we'll come down to our render method and instead of these buttons we're going to place an absolutely positioned view on the bottom so we'll add a view here and give it a style so this view is going to be position absolute and it will have a bottom of zero so that it appears on the bottom also going to add flex one flex direction of row and that should be it for this one let's also add a sub view this one will also say is flex 1 flex direction row and we'll set the justify content to space between so that we'll have all of our buttons spaced out now for the buttons we're going to use icons the icon library comes with the component also called icon.button and you give it the name of an icon and an on press event so we'll have this button be our add object button so we'll say on press equals this dot on add object press and we'll look up the name later we'll add another one call for our search button so this will call this dot on search modal press and i actually want to add one more button that we haven't implemented yet which will be called remove object and that's just going to remove the current object if you don't have one on there so say icon.button name is blank for now and then on press equals this dot on remove object press let's go ahead and implement the on remove object press let's scroll up and here's our on add object press we'll put it right below that on remove object press and we've actually already done the logic for that here so why don't we copy that paste it and instead of doing this we'll just say this dot on remove object press all right we'll save that and refresh and uh as you can see we've got three placeholders for icon buttons but we don't have any actual icons because we left the names blank they've also got blue backgrounds which we don't want so let's go ahead and add a background color of transparent for each of these i'll copy that and paste it here and to figure out the icon names we can go over to the material community icons website and for add object i think we'll use a plus sign so let's search for plus and see if we can find one there's one and the name is just called plus we'll put plus here or we could use the plus box outline potentially let's look up minus for the remove and so we'll add minus for this one maybe we'll just use the plain ones and then for the search let's look for a magnifying glass and if we type search uh there's a magnifying glass and the name of it is magnify so we'll type that in and save it and see how it looks and you can barely see them because they're white but they should be a little more visible once we've removed these buttons and we might make them a bit bigger as well so we can go ahead and delete these buttons now since we've implemented them as icon buttons let's save again and there we have it we can test these out i'm going to click the magnifying glass button and as you can see our search box comes up okay so let's just go ahead and make these icons a slightly bit larger so we'll set the size equal to and say let's try 30 and see how that looks and i'll make it about 40 i think would be good so i'll set all these to 40. all right and that looks pretty good nice big buttons should be easy to press try it out okay if i click add for add an object we get our turkey perfect next i'm just going to scan through some of the files we made and i'm going to delete any debugging code that we may have added i'm also going to add comments since i've been dictating the code i didn't really add any comments as i was going but it's a good idea to add comments preferably while you're writing the code but if you have to you can go back and add them at the end as i'm doing now i usually like to put comments on top of each function explaining what it does sometimes it's pretty obvious so maybe i'll leave them out for this video so i'm scanning through here i want to find any time where we do a console.log and we don't actually want to log something so in this case we're just logging the current asset states i'll put a comment here remove the current object and then this one will be add the current object take out some of these white spaces this is for rotate the object render that all looks good okay so this file looks pretty good let me just collapse everything okay and remember we can take this out one other thing we can go ahead and delete this because we're no longer using that we're just only using the searchable google poly asset list i'll save that and i'll jump into the google poly class that we created just some blank lines here that we can remove this one i will say returns a 3.js object this one returns the results of the current query sets current search parameters and resets number variables this one returns a query url based on the given data okay that one looks good let's go to google polyacid.js look through this don't really see any problems with this one so we'll keep that same and then our searchable google poly asset list look through this real quick okay everything looks pretty good to me and this one so we'll keep that the same as well all right so now let's work on the search page component a little bit and make this look a little bit nicer i think one thing i want to do is put the cancel button up here to the right of the text input and maybe let's put a magnifying glass icon next to the search placeholder text so to get the icon we need to also import the icon library so let's import material community icons as icon from react native vector icons and we'll scroll down to where we're rendering the search input instead of just returning a text input let's return a view that will contain the text input so why don't we go ahead and just call this styles.search container and come down to our style sheet and create search container and what we want that to do is have a flex of one a flex direction of row and set align items to center so the magnifying glass will line up and i'm going to collapse these so i can find where we're working at easier okay so inside of this view we're going to add our icon with the name of magnify let's give it a color of some kind of gray so let's say dvdd and the size we'll say is 20. and right next to that we're going to take our text input and put it right there and since these styles are a little long we'll cut these and instead put styles dot search text inputs come down to our style sheet and search text input okay so we'll save that and see how it looks while that's loading i'm going to reformat these okay so as we can see the text input is not stretching all the way to the end like we want it to so we can fix that by adding flex of one and also i want the border to be around both the magnifying glass and the text input so i'm going to take the border width and put that up here and i'm going to take the border radius and put that up here as well and we want to add a little bit of horizontal spacing between the edge of the screen so on the container i'll add a margin horizontal of 10 and i'm going to remove the margin horizontal from here so that the search won't be so far away from the magnifying glass i'll save that and see how that looks okay it's looking much better i think we should change the color of the border maybe so on the container we'll set border color also to have that gray that we've been using and let's go ahead and move the cancel button up to the right side of the text input as well so let me collapse more of this stuff and we're going to grab the cancel button which i believe is right here take this out and we're going to put it well we don't want it to be inside of the border so we need to put it below the view which has the border and then we'll have to wrap all of this inside of another view and this view should also have a flex of one and a flex direction of row save that and see how it looks okay perfect and we'll set this to align items center just to be safe and i think for this one we'll want to put the margin horizontal to 10 and take it away from this one okay so it's looking pretty good i can test the cancel button so when i click that the search page goes away all right now let's adjust some of the spacing of the magnifying glass and the search so i'll come down here and i think instead of having a padding horizontal on the text input we'll add the horizontal padding to the icon itself so that way it spaces out a little bit away from the edge there and we'll have the same spacing there so on our icon i think we can give it a style and we'll say padding horizontal 10. okay it's looking better although i still think there's too much space here so let's change this padding horizontal to be padding left of 10 and we'll have a padding right of let's just try three and see how that looks while that's loading another thing i wanted to change was the no results text if we don't have any results i want to make that a little bit bigger and make it italicized so that's in render current results and here's the style for our text let me call this styles dot no results text and we'll come down here make a new style called no results text and we're going to make it a little bit bigger so we'll say font size of 18 font style italic and why don't we put some padding on the top of about 50 so it has some more space away from the search button save that oops i spelled italic wrong so okay it's looking pretty good in my opinion um i think one final thing we'll do is we'll make it so that when you press enter on your keyboard it will automatically perform the search and i can't remember the name of the property but i can come over to the documentation and if we scan through some of these properties we'll probably find it i believe it's on submit editing so this is says it's a callback that's called when the text input submit button is pressed so in our text input up here we're going to say on submit editing and we're going to give it the function that happens when search is pressed which is this dot on search press say this dot on search press and let's test that out if we wanted we could also change our keyboard type to be maybe web search although that's ios only or we'll just keep the default okay so if i open this up and i search for dog and i'm going to press return on the keyboard and there we have it it's showing the results now one thing i've noticed just now is that this text isn't centered and i think earlier we tried to make it centered so let's figure out what's going on there i'll open up google poly asset and look at our styles we may just need to add a text align of center to each of these let's save it and see if that's the problem well that worked for the first one oh i see i i accidentally put this in the thumbnail class should have been in the author name class okay one last time i'll search for dog and it looks like all the text is centered i'm trying to click that okay perfect all right and there's a bug i want to fix which is when we search for something such as dog we get the results and if we cancel the search and then bring it back up the results are no longer there but we have the load more button and i believe the problem for this is that we're not correctly initializing our current results array which is in our state which will find the constructor so instead of initializing it to a blank array i think we should set it to this dot props dot google poly dot current results i'll save that and test it out so i'll do a search for dog and i've got my results cancel and bring this back up and the results are there if i load let's try loading more looks like we have some layout issues for longer strings of text okay i'll cancel that bring it back up and there are the full results and let's try changing our result to duck there we go and another layout issue with long text to fix that layout issue in our google poly assets we'll come over to the google poly asset component and we'll set a width constraint on our text components we'll set the width to be the same width as the thumbnail so here in our display name we'll set a width of 150 and for author name also with the 150 and refresh the app and we'll do that same search for duck if we scroll down as you can see now the text is on multiple lines rather than pushing things over