hi and welcome to my javascript tutorial in which i will teach you how to code in javascript by building your very own basic game of tetris i always find that learning is easy by doing so if you're the same this tutorial is definitely for you and hey you'll have a pretty neat javascript game by the end of it this tutorial is for super beginners and we will be going through the fundamentals of javascript as well as some inbuilt functions that are going to help us build our tetris game if you have never touched code before this is a pretty good place to start we will be going through some css and html as well but just the basics as you know this is a javascript tutorial if you do have some prior knowledge of html and css please do not skip the first few lessons we need them in order to set up our game feel free to watch them on double speed if you prefer tetris is a simple gridbased game in which you as a user have to navigate five shapes or tetraminos down to the bottom of your bridge the aim of the game is to get the highest score by filling up rows on your grid in order for them to disappear and for you to gain points you as the user can rotate your shapes and you also have insider knowledge by knowing which shape is coming up next thanks to a grid to the side of your grid in this game we are not going to have levels we are simply going to do a basic version of the game basic functionality and basic styling this is so you can take it and make it fully your own i would love to see all your finished projects how you have made them your own in terms of styling or leveling up so please do share them with me please do get in touch if you get stuck at any point in this tutorial i am always more than happy to help again please do use my social links below so yeah let's get going in this walkthrough i'm going to show you my preferred code editor as well as the bonus of how to set it up so that it works for you like a sort of spell checker if you will it will check your code for mistakes and prompt you to change things in order for it to work i am also going to show you what a command tool is and how to use it to access files and folders on your computer as well as speak to them and download things from it okay so let's get going first off start by downloading a code editor i'm going to use atom if you go to atom.io and download the program that will be the tool you use to write code in your project now copy it into your applications folder and add it to your doc once that has been downloaded you will use the command line system to create a folder to store your project if you have a mac simply search for terminal in your launchpad if you're on a pc you need to search for your command prompt tool now open up your terminal and using ls you can list all the directories now using cd to enter a directory we navigate to the desktop it is on the desktop that we're going to create our project called basic tetris so using a command called mukdart we're going to make a directory called basic tetris okay great we now have a folder to store all our code files in it to go into this folder again we use cd let's use the command cd to go into this project if you ever want to get out of this project we use cd with two dots like this but we don't so let's go back into it once in this folder we need to create files to go in it we do so using a command called touch touch will create files we need to create an html file css file for our styling and a javascript file to hold our javascript i'm going to choose to call them index.html style css and app.js okay perfect now using atom dot as we are using the atom code editor we will prompt the project to open in our atom code editor and there we go we are now set up to start writing some code now i'm going to show you some useful settings on atom that will make your life a whole lot simpler atom allows us to add packages there are literally loads and loads of packages out there that you can pick and choose so i'm simply going to go through ones that i find useful for my projects open atom and click on the atom menu then install shell commands now click on the drop down and preferences in preferences in the editor panel make the following changes show indent guide check show invisibles check and tab type soft now let's go over to our terminal and type the following code what we are essentially doing here is downloading packages for atom to use via the command line tool once these have all downloaded let's quit atom now let's reopen it to see the packages that we installed and go through them all a little bit more one by one in the navigation find packages and click on the drop down you will see here all the packages we installed using the command line and apm command we have auto indent autoident will auto indent your code correctly in your files this is good for code readability and considered best practice atom tanjs is a package that adds support for es5 es6 es7 es8 node.js and more this means that it will let us use features of all of them in your code editor for example an arrow function which you will definitely come across is something that is a feature of javascript es6 and above we are also going to have something that will spell check our code and check our javascript code in a way that will notify us if something isn't working correctly for this we will use linte.js standard okay great you are now all set up to start writing javascript projects let's carry on hi and welcome back in this project we're going to be using an html file and a javascript file in order to make our project html is a hyper text markup language used as the basis of a web page html consists of tags surrounded in angular brackets like this the html tag can be used to define headings titles images links buttons there's a whole load of tags available to your disposal in this lesson we're going to be focusing on the html file and how to link it to our other files such as our javascript file and css style sheet the first thing we're going to do is make sure to check our files are named accordingly the most important thing is the ending or file extension we need to make sure that we use js to let our code editor know that we are going to be writing javascript code in this file and to treat it like a javascript file we also need to do this for the stylesheet or css file css stands for cascading stylesheet we will cover that in the next lesson now we need to link the javascript file to the html file we will do so by putting a script tag in between the head tag then using a dom event listener in our javascript to make sure this tag is read after all the code in this html file has been read an alternative way to do this is by putting the script tag at the end of the document in the footer but this is the way we're doing it for the sake of the tutorial it is important to note that in this script tag the source or src as you can see here the text in between the quotation marks needs to be the relative path of where the javascript file is as the file is in the root of our folder we simply write app.js if your app.js file happens to be in a folder you will need to change this relative path in the script tag so to recap if the file is in the same location as your html file we write this and if it's in a subfolder to your index.html file we write this replacing the green folder with whatever you have named your folder please do remember to keep your index html file at the root of your folder if you do not our browser will not be able to read this project well not without loads of configuration anyway i am actually going to flip over to our javascript file and add the dom event listener now to we must make sure all our javascript in the future is written in between these two parentheses we need to make sure this is done so that it's picked up by the script tag we wrote earlier in our html file okay so let's go ahead and add that event listener to our javascript file like so again the dom content loaded event fires when the initial html document has been completely loaded and passed this is without waiting for the style sheets images and subframes to finish loading the target of our event is the document referring to the html document okay now back to our html file so now we're going to link our style sheet in a very similar way but using a link tag instead add the following tag in between your head tag again make sure the relative path of the file is correct we do not need to add anything into our css file for this to be picked up now that we have licked our two other files in our html file let's start by adding some code to our body now we first need to plan exactly what we want our tetris game to look like in terms of shape as we're going to be making a gridbased game i would suggest drawing this out first or using something like google sheets like me to get an idea of what we have to get on with and tackle i'm gonna flip over to google sheets now i have actually predrawn this to give you an idea of what to be aiming for you can make your own grid as big or as little as you want it's up to you um so you can see here i want to make my grid 20 squares tall and 10 squares in height so how would we make these 200 squares we need to make them in our html file and then add styling to them with our stylesheet or css file so let's do it let's code out 200 divs in our html file there are other ways of doing this from the javascript file that involve creating an element 200 times using a for loop but as we are just starting out i think it's important to focus on a more visual way of learning so we can see what's happening now let's put these 200 divs and a div of its own that we are going to give a class name of grid to we are doing this so we can contain the 200 divs in a div of its own that we are going to start in our css later now we are gonna want to display the score let's do that in an h3 tag like this with a span inside of it like this h1 h2 h3 tags are all header tags h1 being your main one and going down in size all the way to you hit h8 okay moving on let's give this span an id of score so we know exactly which span tag to display the future score in just in case we used another span tag in our project as opposed to class names ids are unique and can only be used once i am also going to hard code a zero here for now finally i'm gonna add a button using the button tag as i want this button to start the game i'm gonna give a very clear id of start button okay let's save these files we are going to right click just here so we can open this file in our browser amazing though you won't see the 200 divs as they have no styling applied yet you can see them if you inspect the page if you do not know how to inspect the page you can simply do so by pressing down the control button on your keyboard and left clicking the browser like this check out this nifty animation i did here it is also where you view the console log we will be using the console log later it's a tool that allows us to see what's going on under the hood when writing javascript and is super useful okay great thanks for this lesson let's move on after just a few questions in this lesson we're going to be covering css or cascading style sheets css is a simple mechanism that allows you to add styles so fonts add colors to your web documents becoming a pro at this takes a lot of practice we are simply going to be doing the basics in order for us to carry on learning javascript as this is a javascript tutorial this will include styling to make our grid look like a grid add colors to our tetraminos and touching a little bit on flexbox once you have finished this tutorial please do go back and add as much styling as you want feel free to share it with me i would love to see your finished games okay let's start off by giving some styling to our grid the first thing we're going to do is navigate to our style css file now let's pick out the div with a class name of grid we tell our style sheet we are looking for a class by using this dot before the class name so as a recap we are picking up the div with a class name of grid that has 200 divs inside of it let's say we want our squares to be 20 by 20 pixels at a 10 by 20 grid that would mean we need to make the width of our grid 200 pixels and the height 400 pixels i'm going to make it yellow so we can see it in our browser now we are also going to style the divs in the grid we do so like this we put the div element after the element with a class name of grid by doing this we are saying that we want to start only the divs in that element like this so essentially all other divs we use in the future in our project will be unaffected by this styling okay so inside the parenthesis we're going to assign the height and the width let's also make them red just so we can see them in our browser okay let's save that file and refresh our browser you will see the red squares show up as a stack over each other this is the case by default divs do this they stack of each other unlike h3 tags which appear in line this is where flexbox comes in we need to use flexbox to make sure the red squares appear stacked in a line and then stack over each other as soon as they don't fit in the grid div with parameter let's add display flex and save and refresh the browser and there we have it we now have a grid we can work with and start adding some javascript code and game functionality too let's move on just after a few questions in this video i want to take a break just to explain what variables are and how we use them in javascript so in javascript you can store values in something called variables they are legal identifiers quite simply it is this so the variable x here equals one it is important to note that when you declare a variable its name must be unique you can assign numeric value to your variable like the number 1 or a string value such as 1 in quick marks an array such as 1 and 2 in an array a boolean such as true or false or you can just leave it undefined for later use like this now by definition variables mean anything that can vary so let's see this in action let's get x and assign it to the value 23 note we do not use var again as we have defined x above let's go ahead and console log that and you will see x has now changed value now let's talk about scope when defining variables it is important to know that they have scope variables have two types of scope global scope or function scope meaning they can only be accessed inside our function let's have a look at this in action here is a function i have written to alert me with a name let's put the var name here outside the function okay that works this is because it's a globally scoped variable now i'm going to move it here inside the function this also worked as the variable is declared inside the function however what happens if i now want to show the alert outside of this function it will not work as the variable is not being picked up as it's inside this function's scope essentially it's out of our reach now okay got it now let's talk a little bit more about const and let and how they differ from bar so when es6 came in it introduced two new ways to create variables let and const so what's the difference let's talk a little bit about the difference between let and var fast let allows you to declare variables that are limited to a scope of a block statement unlike var what does this mean well let's have a look at an example okay so i'm going to declare variable x here as one now i'm gonna write a function here called find x inside i'm gonna declare variable x again as two now if i want an alert telling me what 2 is inside this function i will get 2. however what will i get if i want to move the alert outside of this function i will get 2 as variable is global and we declared it after the first declaration now let's do the same but using let so all i'm doing is writing the same thing but replacing bar with let you will now see that we are getting a one as the other let inside the find x function is out of our scope now finally const const works in the same way let does in that you cannot access it if it is inside a function however it is also constant as const would allude to once you have defined it you cannot change it later on this is pretty useful when working with big projects and declaring what you do not want to be changed let's have a look at this in our code editor okay so there we have it let's recap bar a function scoped or globally scoped variable let a block scoped variable and const a block scoped variable that cannot be reassigned okay now we have a grasp on variables let's go back to our game of tetris in this lesson we're going to start adding functionality to our project by adding some javascript code we will especially be focusing on javascript arrays and how we will be using them in order to make our game an array is a special variable which can hold more than one value at one time if you have a list of items so a list of tetramino names for example storing the tetraminos as single constants would look like this however what if you want to loop through these tetraminos and find a specific one and what if you had not 5 but 200 of them the solution is an array an array can hold many values under a single name and you can access the value by referring to an index number we will be using the index number a lot in this course javascript arrays are zero indexed meaning that the first element of the array is at index 0 and the last element is at the index equal to the value of the array's length property minus one this is important for our game but also for javascript array knowledge in general the first thing we're going to do is tell our javascript the width of our grid in squares using const so let's flip over to our javascript file now as the value will not change we are going to use a const so as a reminder the const keyword denotes a nonmutable view of mutable data next we are going to use something called a query selector to look through our html document and find the element with a class name of grid document query selector is an inbuilt javascript method you will see here we are using dot again as we are looking for a class name once we find it sign it to the constant we have decided to call grid now our javascript knows that every time we type grid and do something to grid we want it to affect the element with a class name of grid in our html file now we also want our javascript to talk to all the squares in our grid using the query selector again but this time using document query selector all as we want to collect all the divs inside the element with the class name of grid we do this now what we are going to do involves an inbuilt javascript method called array from we are going to use it to in layman terms collect all the divs in our grid or 200 of them and turn them into an array we can work with now each div will have a specific index number let's pass these collected divs through array from to make them an array and assign it to let squares let's get our console up here so we can see what our console log tells us now hit refresh on your browser okay great you will now see that these squares is an array of 200 divs with index numbers from 0 to 199 the reason it says 0 to 199 instead of 1 to 200 is that the index count always starts at 0. what does this mean for us and our game well we just need to learn how to count a little differently let's have a look at our grid and the squares inside numbered by their indexes this is something i made in google sheets earlier to make it easier for us to understand you will see that if we want to be in the fifth square so this would be the fifth square here we would need to tell our javascript we want to be in the index four of our square's array why is this an array again because we collected all the divs and passed them through array from okay let's move on the last thing i'm going to do for this section is get a few more things from our html document we are using a hash here to indicate we are looking for an id so if we look at our html page as a reminder we gave the span tag an idea of score and this button an id of start button let's go ahead and pick them out again with our query selector there is also a get element by id feel free to use that as well i'm going to use this query selector okay great that's it for this lesson let's recap with just a few questions in this video we're going to take a quick break to go over exactly what a function is and why we use them functions are one of the main building blocks of javascript and in fact most languages in javascript a function allows you to write a block of code define it with a name and execute it as many times as you like it's all about recycling code with functions in this video i will be showing you how to write a super basic function that we will later be adapting to use in our own game of tetris okay so let's flip over to our code editor so that i can show you a super basic example of a function first so the simplest example i'm going to show you is a function that sets off an alert the first thing we're going to do is write function like this followed by a word i've chosen to call my function this word should really convey what is happening in my function we do this to make our code more readable for colleagues or simply if we're forgetful i'm going to choose to call my function show alert i am using camelcase for this camelcase is the practice of writing more than one word joined as one but visually separated by making each word after the first start with a capital letter it has no spaces or punctuation i consider this the best practice for writing functions okay so after naming our function we write these two brackets these two brackets are for passing down parameters into our function as we don't have any just yet i will leave this blank now we have to put our block of code that defines a function in parenthesis i'm going to make my function show an alert like this you will see i'm writing the inbuilt method of alert and passing through a string a string is defined as a word in these quick marks okay great now let's test out what we have written we can invoke a function like this amazing so that's the basics now let's pass a parameter or two into our function so the thing about parameters is that if you choose to pass one it needs to be one and this needs to be reflected in the code we write if you try pass any more than one the rest of these parameters will be ignored let's have a look at it now so say i want to pass down a first name into my function and somewhere else in my code i have recycled this function and written this okay let's uncomment that but as soon as i pass down my last name that part will be ignored it is the same for if i ask for the last name in the function but i do not pass it through i will get undefined we can also use argument objects and functions if we declare them outside of the function we do not need to pass them through to use them for example i'm going to write an array called name now using my function i'm going to access the first item in my array so index is zero like this okay great we are now ready to carry on with our tetris walkthrough in this video we're going to talk a little bit about arrow functions and how we're going to use them in order to draw our tetraminos onto our grid in this lesson we're going to be doing more array work and be introducing something called the narrow function as well as an inbuilt javascript method called for each arrow functions were introduced in es6 and allow us to write shorter function syntax here is the original way we would write what was and the evolution to what we now know as the arrow function if you have parameters you can pass them through the brackets like this this is what we're going to be doing and involving the for each method the for each method calls a provided callback function once for each element in an array in ascending order the callback is invoked with three arguments the value of the element the index of the element and the array object being traversed or in layman terms we're going to get an array with a bunch of values and apply logic to each one here we can see an example of for each working on an array i've called item array using this code i'm also going to pick out each item of that array so i can apply logic to it you can see here i've chosen to call it item i can call it anything i want really javascript will know what i mean it will know it's an item in my array now using an arrow function i do this and add two to each item in my array so that's the syntax let's see an action the simplest example i can show you of this happening is when we choose to add something to each item in our array let's make an array of names so an array with strings as indicated by these two quick marks here and separated by covers and put them in square brackets now it's super important to remember what is inbuilt and what isn't here names names are array that we made above for each is the inbuilt method that comes with some magic that will make our javascript do things without us writing any logic for it name here is something that we have chosen to call the items in our array i could call this whatever i want chair dog my javascript will know i mean an item in my name's array this arrow is the arrow function we referred to in our last video so what we are saying here is that for each item or name in our names array we want to print out individually that name and add the string is the best to it okay let's check that out okay and that has worked great now this is a super simple example of how to use four each with an array there are literally so many different ways to use this inbuilt method i always think it's better to learn with a working example so let's get going and use the for each method and arrow function to draw our five tetramino shapes onto the grid let's do this in the next lesson okay and welcome back this is a continuation from the last lesson where we learned about four each and how we're going to use it in order to draw the tetraminos onto our grid game the first thing we're going to do is get out our google sheets again and draw out every single rotation of each shape note the o touch amino will stay the same during each rotation and the ztetramino and eltotrimino will only have two versions of itself once we are happy with each of the shapes for rotations it's time to draw them using our width constant remember we set that as 10 in our javascript file let's get going and start with our el tetramino we will set it as const as the shape and its full rotations will not change we will make the ltetramino an array with four arrays inside it each of the four arrays is one of its rotations if you see here what i'm doing is using my drawing to draw the shape onto the grid as if i was only allowed to use the grid indexes so drawing in the index for number one on our grid shape and index with the number 10 plus one on our grid shape 10 being the width and index number 21 and the index number two it will give us this shape right here okay now let's draw the other three rotations we can do them all starting from like zero no need to draw them in their locations or my drawing let's do that now once we have done that we need to do the other four shapes in the same way now because i have done this before i'm simply going to copy this into my project from my github account you are welcome to go and grab the tetramina arrays as well but i would stress that i do advise against it and only suggest it if you are stuck and getting some strange shapes or error messages by trying to make all the shapes yourself you will get a better understanding of what we are doing here and what we are trying to achieve it would also defeat the purpose of the tutorial if you're trying to understand javascript a little bit better i mean this is the perfect erase exercise okay once we have our four shapes let's put them in an array of their own let's put this as a const and call it the tetraminos okay great we now have our tetraminos but we can't see them that's because we need to add some styling to them to see them first let's decide that we're going to make them all one color for now just to make it easier we can change this later so let's flip over to our style sheet and add the following okay now let's decide where we want to start drawing our tetraminos on the squares grid let's say the first square of our chosen tetramino's first rotation array is going to start at the square with index four so let current position equal four now let's pick a touch amino and its first rotation so let's go to our the tetramino's array of arrays by putting a zero in square brackets like this we are saying we want to access the first item on our array let's look at this slowly okay so first let's console log the tetraminos our array of arrays you can see that here we have an array of five things or as indexed zero to four these are our five tetramino shapes if you click on the first one so index zero you will see inside it has its own four things in it these are the first tetramino shape rotations we wrote earlier let's click on the first one so again index zero this should look familiar it is the first rotation in our l touch amino let's go ahead and now console log the tetraminos zero and again in brackets zero and amazing it's the same we now assign this variable to current just so we are all clear i have picked the el tetramino's first rotation this is now my current shape okay now let's draw this using for each to see if that's true let's write a function called draw and in that function let's get our current array or what we have assigned as current above now for each item in that array we want to add a class of tetramino which would color that item which is technically a div inside the element with the class name of grid so this is how for each works it applies logic to each item of an array we use the arrow function here as we saw above to add the code inside the parenthesis to each index of the current array just like we pass the zero into the array above to access the first item we are passing on a number to the squares array to color it blue we access this css style sheet by using classless add to add the style of tetraminos to the squares in the tetraminos it is in in this occasion we are passing through a four this is because we set the current position as four plus each index of the currently chosen tetramina array okay so now let's invoke this draw function like this now save your file and quickly go back to your css file to get rid of the red background we gave all our divs at the beginning we no longer need this hit save again and let's refresh our browser and great there we go you can now see a blue tetramino shape it is the ltch amino in its first rotation okay now let's go back to our javascript and select one of the tetraminos randomly for this we're going to be using three more input javascript methods math random which will give us a random number from our array length length which is an inbuilt method that will tell us exactly how long our array is and math floor which will round down to the nearest integer so let's add a variable that we're going to call random to randomly select a centrum you know from our tetrominus array we use an inbuilt javascript method called math random and multiply it by the length of our tetrameter's array length being invo as well we then pass this through another input method called math floor this will round down the number to its nearest full integer okay so let's see if that has worked we should get a new number each time we refresh the page refresh again and great now we have that let's go back to our current variable and replace the first zero with random now what's happening here is that instead of passing through a zero and accessing the first item of our h time we are passing through a number from zero to four randomly this will give back the first second third fourth or fifth tetramino in other tetramino's array once we have one of these five shapes we want to access again but always picking is first rotation let's set this as let current rotation equal zero now if we pass this through we will always start at the first rotation of any random tetramino chosen i'm just going to change this here to more accurately reflect what is happening now just to be as transparent as possible let's uninvoke the draw function here too by getting rid of this code okay now the last thing we want to do is write a function to undraw the randomly chosen tetramino and its current rotation we do the same as we did to draw it so once again we name the function undraw we use a four each so for each item or index in our current shapes array we look at each of their current positions add the index of the shape and pass it through our squares array now the only difference here is apart from adding the class we are removing the class of touch amino from its current location in the grid so it will visibly disappear from our grid okay great we now officially have all our touch aminos i can draw each one on our grid please do if you're not quite sure pause here and just have a go at messing around some of the numbers replace the current position so on just to see exactly what's happening refresh the browser lows to see if you're getting a random tetramino if not go over this lesson again i will provide the code below as well so don't worry if you feel stuck in the next lesson we're going to be focusing on moving the tetraminos around our grid hey and welcome back in this lesson we're going to learn a little bit about timer ids and an inbuilt method called set interval set interval allows us to invoke a function that we pass through it after x amount of time in this example the time is 1000 milliseconds or in other words one second we are going to be using set interval for this project because we want our tetrameter shape to auto move down the grid every second just like in the real game as mentioned in the example we do this by passing through a function that we will call move down into the set interval as well as the milliseconds we want to invoke this function at we are going to assign this to timer id this is so we can stop the set interval in the future now let's write the move down function using the functions of undraw and draw we wrote in our previous lessons so we want to undraw the shape from its current position and add a whole width to the current position and draw again in its new position let's check if that has worked okay great we can see that the shape is now also moving down our screen sadly it's not stopping and going through the bottom of our grid this is something that we need to solve we are going to do this simply by flicking back to our html and adding 10 more divs to the bottom of our 200 divs this time with a class name of taken as these do not have a style in our style sheet they will not show up visibly we just know that they have that class if i inspect the page you will see them there next we need to write a freeze function in this function we want to write an if statement an if statement looks like this we pass through a condition in brackets before an if whatever the condition between these brackets is has to give us a boolean response so a true or a false if the condition is true we carry out the next steps of whatever is in between these two parentheses so here we have an example if the temperature is above 20 degrees so this statement is true we return it is hot now we can also write an if else statement an if else statement is the same as an if statement however if the condition is now false we can also return a response so in this example here if the temperature is not over 20 degrees we return it is cold now we can also keep adding and adding with this else if and go on forever just like in this example here so here if the temperature is not above 20 degrees so false we bypass this if statement and check the else f if the temperature is deeply equal to indicated by these three equal signs that is deeply equal deeply equal to 18 then we return it is warm and of course if it is not then this statement is also false and we return a it is called so let's go back to what we want to happen in our if statement if some sum another inbuilt javascript method similar to how four each works however instead of applying logic to each item in an array like for each with sum we are checking that the logic we write in the brackets is true for some of the items in our array so basically if we ever get one true back we are good to go so if some of the squares that make up the current tetramino if they're indexed plus a whole width so essentially we are checking the next space down from each square contains a square with the class name of taken so if this statement is true for at least one item in our current doctrinal array we turn each of the tetramena squares into a square that contains the class of taken got it we then also immediately select a new tetramino to be our current tetramino this will be familiar let's get a random tetramino number we then passes through our tetramino's array and its first rotation we then set this as our current tetramino then we put it at the current position so four and finally we draw this new randomly selected trimino okay that is it that is our freeze function let's add this freeze function into our move down function so that it gets invoked to check every second oops i missed the capital m of math here that is really important please don't forget to add this here okay great now let's flip over to our browser and see if that has worked amazing let's move on to the next lesson okay so we now have an array of squares great and we have wrapped these squares over each other to appear like a grid amazing however in reality how does our computer know when we are at the very left hand side of our grid what stops our tetramino from going from this position to this position when moving right technically we are in an array so this would be the next logical step we need to write a set of rules to let our javascript know when any of our squares that make up our tetramino are in a certain indexed square we're going to do this using good oldfashioned maths as we can see here our grid has a width of 10 made up of an array of squares with indexes 0 to 199 i want to make sure that if the tetramino is in the square with index 10 i don't want it to move left anymore i want to stop it as otherwise it will appear in the square with index number 11. so i need to write a rule that will stop our squares if they are in the square with index 10 20 30 and so on let's get started by defining what is a move left function what we're going to be doing is visually moving the tetramino left by drawing it and undrawing it in the squares we start off by removing any trace of the shape in its current location before we start so that we have a clean slate next we define what is the left edge and if the shape is in it this is where our mouth comes in for this we use the inbuilt method called sum again as a recap sum is a method that looks at each item in the array and checks if the statement is true for at least one of the items if it is the whole statement is therefore true so once again let's use current as a reminder current is our current randomly selected detrimental and its current rotation we are checking that sum of the current tetramino's item indexes if divided by the width leave exactly no remainder so again if one of the tetramino squares is in a square let's say that has an index of 10 we also know that 10 divided by the width so 10 gives us exactly zero as a remainder this means our statement is true and the shape is at the left hand side of our grid this is also true for index 20 30 40 and so on let's use this information and only allow our shape to move left or 1 from its current position in the array if the shape is not at the left edge indicated by this exclamation or bang here we also want our tetramina to stop if there is another tetramina already there that has been frozen for this we are going to have to have a taken class we are not going to style this class we just want to assign it to the spaces that have been taken and we can't go into we will use an if statement for this what we want to write is if some of the squares in our central amino shape suddenly go into a space that contains a class of taken while traveling left you want to push it back one space so it appears not to have moved we want to do this for every index in our tetramino shape so use an arrow function to do that like this and pass through the current position and add every index as it gets passed through then we add one to the current position so that moves back to its original space in the array and finally we draw the tetramino okay so that was a lot to take in so before we start writing the move right move down and move up function let's wire this all up to see if it works first before we move on key codes are pretty cool every single key on your keyboard has an assigned code to it that we can access through our javascript we are going to use this to make our tetramino move left if you press key code 37 right if you press key code 39 and make some javascript magic happen if you press the button down and so on you can technically make your touch and move left if you press just about any key on your keyboard that you choose there is actually a pretty cool site called keycode.info that will give you the keycode as soon as you press it when you're on the site we will also be looking at passing through events into functions so that we can use them so let's get started by assigning key codes to functions let's write a function called control and add a document event listener to listen for any time we press a key on our keyboard anytime you press a key on our keyboard we're going to listen out for which one was clicked and invoke the control function we are also going to pass through an e here for event now with if statement we're going to decide what happens when you press a key if we press the key that deeply equals key code 37 we want our tetramino to invoke this function move left let's see if this works as we wrote the function in the previous lesson now i'll give you the coolest part about javascript is making stuff happen in your browser well you'll be glad to know this is exactly what the event listener does the event target method at event listener sets up a function that will be called whenever the specified event is delivered to the target common targets are elements document and window in layman's terms if you attach an event listener to something like a div and click it in your browser cool stuff will happen you just have to attach it to the element you have chosen like this you can see here that we are passing through two things the type of event so in this case key up and a function in this case is the function control we have just written you can also do remove event listener to deactivate any listening happening there are literally so many events you can use here are just a few of the top of my head so once again the event listener here listens out to any time you press a key on our keyboard using the key up event if a key is pressed we invoke the control function we have just written we attach this event listener to our whole html document okay let's refresh our browser and great it works the tetramino is even stopping when we hit the left hand side which is great now let's figure out what we're going to do for the rest of the key codes i have commented out the other functions for now as we have not written them yet but just so you know what we need to do so if i press up i want the shape to rotate if i press key code 39 i want the shape to go right and if i press down i want the shape to go down but faster this is something we already have so we can pass it through here again let's do the move right function based on the same logic as the move left and leave the rotate function for the next lesson so once again we undraw the squares that make up our detrimental from their current indexes we define what it means when some of the squares that make up our current detriment are in certain indexes and call this a constant of is that right edge what you can see is happening here is that if an index is divisible by the width and its remainder deeply equals the width minus 1 so in this case 9 or 18 or 27 and so on this statement is true and we are at the right edge so if we are not at the right edge indicated by the bank here we can freely move each square in the touch amino plus one down the array then if some of the squares that make up artichomino are suddenly in a square that contains the claws taken we have to push them back a space in our array visually making them appear like they haven't moved at all and finally we redraw the tetramino in its new position let's try this out okay great we can now move left to right without going off the grid and to the bottom without our touch aminos going past the squares with the class of taken let's move on to our next lesson in this lesson we're going to be doing more array work and also looking a little bit into the increment operator the increment operator is going to help us access the next item in our tetramino's array we are going to be doing this as we need to access all four of each of our tetramino rotations on the click of a key code we are going to be doing this using the double plus so plus plus which works in a way that simply means we are adding plus one to the defined value before it it is called an increment operator in this example you can see how it works if y is 5 and we use the increment operator on it the y will now have a value of 6 and you guessed it there is also a decrement operator using the double minus will make the value of our y change from 5 to 4. now let's use this in our code we are going to write a function to rotate the tetramino this is actually us just skipping to the next rotation in the current rotation array as always let's start by undoing the shape next we use the increment operator to move down to the next item in our array so the layout of our next rotation we drew out for the current search amino using an if statement we say that if the current rotation index is equal to the amount of rotations in our current tetramino shape so 4 we want to go back to the first item in our array so in other words the first rotation layout again if the statement is false we simply want to pass through that new current rotation number into our current tetramina like this and then we draw it okay now let's not forget to uncomment this out here we need to do this so that when we press the up key the shape will rotate now let's refresh our page and see how that works okay great we are now ready to move on in this lesson we're going to be covering everything we've learned before to essentially build a mini grid to the right of our grid right now we will be doing this so that we can display the upcoming shapes for our user this is a great lesson as it can also be considered a mini recap of all the work we have done so far we will be going over how to create a grid pick out elements to style in our style sheet pick out elements add functionality to and how to work with arrays in order to pick our next shape okay so let's get started the first thing we're going to do is go over to our hml and do the following we are going to add a 4x4 grid to our game so how do we do this the same way as we did it before we add 16 divs here and put them in a div we will choose to call our mini grid now let's flip over to our style sheet and similarly to the other grid make our mini grid 80 by 80 pixels i'm going to use flexbox again and then wrap them over themselves like this okay great and there we have our mini grid now i want it to display to the right of my main grid however to do this i'm simply going to put two grids uh and the two greens only into a div of its own that i'm going to choose the cool container now back in our style sheet i'm going to use flexbox again to make these two items display in line i am also going to do one thing to make it look a little better and that is at a margin left of 50 pixels okay great now we can see that there are two separate grids next to one another now let's move on to our javascript code so the first thing i want to do is pick out each div in our mini grid and call it display squares instead of squares once again we do this using query selector all as we want all the divs inside the div with the class name mini grid note we are not using away from this time just to show you a slightly different approach the next thing we need to do is tell our javascript how big the width of our mini grid is let's use display width instead of width for naming this constant we are also going to need to set our index at zero let's call this our display index so our javascript knows we want to talk to the mini grid only now we need another array we need an array of our five tetraminos as their first rotations for our mini grid to show we do not need all the rotations as we just need to display our tetramino here as you can see i am simply rewriting the l tetramina's first rotation here same for the zed tea touch amino and so on okay now let's get to writing a function that will display our shape using the display squares i have collected so all the divs in our mini grid i am using for each to get each item or as i'm going to call it square and remove any trace of a tetra amino class from it so that's for the whole mini grid i'm removing the cluster to sharina from the whole mini grid next i'm going into the nexus tetramina's array and using next random so let's define next random as a value i'm going to start with the value of zero so next round be zero let's actually move this up to the very top of our file we are doing this as we also need to use it in the freeze function so right before we choose a random detriment for our main grid we are adding one more step what is happening here the value next random is being passed on to the random value so we choose a next randomly selected tetramino assign this value to next random this means we now have a value okay let's get back to writing our display shape function for each square that makes up our now randomly selected up next centromino we want to add a class of tetramino to it we then want to pass it through on display squares hopefully this approach is now familiar to you let's see if that has now worked save your file flip over to the browser hit refresh and great that has now worked now what would be really great is if we can get this shape to display as soon as our game starts for this we're going to start to hook up the start and pause button this was quite a tough section so i would recommend going slowly on the section and trying to console log each step as you code just to make sure you understand what is happening under the hood feel free to go over the section once more if you need to this lesson is going to be all about setting intervals and clearing intervals this is an extension of what we touched on previously when we told our javascript that we want the move down function to invoke every thousand milliseconds we are now essentially going to move that function into an event listener that is attached to our button that we have an id of start button for this means that every time we press the start button we are going to invoke the function move down with its set interval we are also going to go a step further to see how timer ids work by adding a pause functionality the first thing we're going to do is grab our button we get an id of start button 2 that we called start button above and attach it to an event listener ah it's saying not to find let's see why not uh okay i used a capital here i'm going to change this i'm also going to change this for the score display okay let's carry on as you can see everything's really case sensitive and spelling is really important when coding i'm also going to let our timer id be null by leaving it blank like this okay so if the button is clicked and we have a timely d value so the value is not null we want to pause the game we do this by passing timer id through clear interval like this and setting the value of our timer id to null else when the start button is pressed we draw the tetramino in what is the default current position so four put the time ray d on a set interval of invoking the move down function every thousand milliseconds select the next random shape we want to display in our mini grid and invoke the display shape function we wrote that will display the randomly selected testimonial we just determined okay great we now need to uninvoke the move down function that is on a timer that we wrote previously from our code so get rid of it unless it's in the start button event listener so what is happening here is that because we have this line of code the set interval that starts at amino moving down and invoked on the load of the browser we want it to be invoked only if we press the start button so let's comment this out here and let's refresh our browser and perfect let's carry on in this video we're going to take a break to look into what exactly splice is and does using a splice on an array can totally change its content we can remove items from the array or remove them and replace them with totally new ones it is important to note that it will change the original array once this particular javascript method is used in other words we are mutating the array so to recap splice can remove an item or items from any position in an array splice can also remove an item or items from any position in an array and replace them with new ones let's have a look at how this works by flipping over to our code okay let's get an array we can work with i'm going to call it planets so we now have an array of four planets now what if i want to remove pluto from my ray as i'm not sure if it's a planet now any days i would use splice to do this typing my planets array i would attach splice to it like this next i would pass through the index of the item in my array i want to remove as i only want to remove that one item i'm going to pass in a one so two one okay great let's console log planet splice two one in brackets you will see that we should get pluto if you console log planets you will see that our original planets array now only contains three planets without pluto okay now what if i have changed my mind i want to readd pluto but also add uranus we can use splice to do this let's say i want to put in the first index of my row but not remove anything just put pluto back as well as add uranus i would do so like this we pass through a one for the first index and a zero as we don't want to remove anything and then the two strings we want to add at index one let's have a look at what this gives us and perfect as you can probably tell by now the first two parameters are the start index and the delete count respectively leaving the delete count 0 will not remove anything from the array you might also notice that we get a return of the removed items or item every time we use splice i have just one more example to show you before we move on to implementing this in our tetris project so say i want to remove every single item from my array after mars that's right and i believe that mars is the only planet we can do this by simply passing through the index number into splice passing this through returns all of our planets and if we console log planets we will now see it only consists of mars okay great now that we have covered splice let's move on to implementing it into tetris in this section we're going to be focusing on what happens when the user manages to fill a whole row with tetramino squares we need to do a few things here we need to remove the row from our grid or array add an increased score to our score tally display the score on our browser and add a new fresh row to our grid or array so the grid doesn't appear to shrink in size for this we're going to be focusing on splice concat and append child as we now know the splice method adds and removes items to and from arrays and returns removed items let's move on to concat concat allows us to merge two arrays together let's use the same tetramine as a row now let's say we want to add another array to it we do so using concat here is my second array and i'm going to call it shapes by using the syntax and passing through the shapes area like this we get the two arrays joined together and finally append child append child is an inbuilt javascript method that allows us to append elements to an existing element for example our grid let's have a look at how this works in an example first let's recreate a grid so make a div with a class of grids now we're going to be appending divs into this div with a class of grid so let's add some styling so we can actually see them now let's get the div with the class of grid using our query selector and call it grid for our javascript now using create element so that's another inbuilt method let's create a div in our javascript now let's put this created div into our grid using a pen chart like this and tada we have now put a little red square into our div with a class of grid now let's use these three inbuilt methods in our project let's get the lesson started by creating our add score function where we want all the steps outlined to happen the first thing we're going to do is write a for loop this loop will loop over entire grid and all that squares every 10 squares so width by width the for loop syntax in javascript looks a little bit like this in this example what we are doing here is three things setting a variable before the loop starts so var equals zero defining the condition for the loop to run so i must be less than five and incrementing the value by one using the increment operator we move on to the next item in our array to loop over so what will this look like let's have a look with an example an array that i have called shapes now if we use the for loop to loop over the length of the array and loop over each item one by one what will we get if we console log shapes you will get a list of the shapes printed out in our console log okay now let's use this in our project we next define what we want our row to be this will be the i plus every square that makes up a row now we use an inbuilt method called every to check if every square in our defined row contains a div with a class up taken if it does and the statement is true we do a few things we add 10 to the score we display this to our user using the score display and an input method called inner html and for each item in the row we remove the class of taken and we take out this row using splice like this i have assigned this taken out row to a const called squares removed let's console log this to see what is happening okay great you can see here what our row is and what it's made up of now let's readd these squares to our squares array so that the grid doesn't appear smaller so what we're going to do is we're going to append these new squares to our grid let's go back to our browser hit refresh and great you will see here that our row has cut itself out and appended itself to the beginning of our array okay let's remove the closed touch amino so the blue so that it looks like it should amazing we are now down to the final stage of our game which is defining what a game over is we are now nearly at the end of our tetris course by now you would have covered all the following inbuilt javascript methods and use them in our project this is pretty impressive we only have one more thing left to do and that is define what is our game over now as you know tetris finishes when you stack up all your touch aminos so that they don't fit in the grid anymore this makes our writing of the game over definition super simple all we have to do is tell our javascript that if there is a taken shape present in the original default position or index 4 we call it a game over okay let's write our game over function we're going to write a game of a function in it we are going to have an if statement that says if some of our current tetramino shape that is in play if some of its items or indexes at the current tetramino's current position contain the class of taken we call it a game over we then display this in our score display we then also clear the game's timer ids so that the auto move down function stops and there we have it a fully functioning game of tetris now i would love for you to take this game make it your own share it with me on youtube my channel is anukubo or on twitter at any underscore kubo i would love to see what you've made and how you've taken this and made your own and taking it to the next level the options for you to do this are adding levels adding a line count maybe adding some music to the game or just styling your game to the max i do have one final lesson for you that i think might be quite interesting that is to do with styling of the tetramino colours if you want to learn how to do this and also want to learn how to tidy up your code for best practice please do watch my final video for this series hi and welcome to the last video in my javascript games tutorial if you want to learn how to assign colors to each texture amino and also want to learn how to tidy up your code for best practice definitely watch this last video in the series once again i hope you have enjoyed this series and if you do have any questions please do not hesitate to contact me on my socials below okay so the last thing we want to do is assign colors to each of our tetraminos we will do this in our javascript file first we want to make a const called colors in it i'm going to put the colors i want my tetraminos to be in in the same order as they appear in my tetramino's array this means my ltetramina will now be orange my zed tatumino will now be red and so on now that we have that we need to find each time we add and remove the classlist of tetromino in our code so we can add this color on top of it so after that line of code has been written the first instance i can see this in is in the draw function let's use style and background color to add styling in our javascript file we also pass through whatever value is currently random into our colors array this means that if the random tetramino is currently the l tetramino the color we will get back will be orange each time as we are passing through zero to remove the color as we need to do for undraw we just leave an empty string like this we also need to do this for the mini grid where it displays the next shape let's do the same passing through next random instead of random finally the only place to remove the color is here in the add score function let's see if that has worked and great now just a quick clean up you can see here getting rid of any additional lines commented out codes and changing this as it should be a cons not a let and there we have it thank you so much for watching my video