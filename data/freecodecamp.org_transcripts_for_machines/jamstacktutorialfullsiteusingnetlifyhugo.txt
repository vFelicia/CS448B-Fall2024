hey there i am brian douglas and i am here in my garage to talk to you about the jam stack and how to make jam sac websites so before we jump right in and i tell you how to build a jam sec app i want to actually show you what we're actually building so what we're looking at here is just a simple restaurant website that has the basics of what you would see in a restaurant um one being in a menu so we've got a basic menu here you can see different types of menu we got a lunch we've got a dinner section we've got prices on the right very fancy that's why we don't see any dollar symbols that's how you know how upscale this restaurant is in addition that we've got a drinks menu which you can see here as well as a simple about page so all this simple routing so if you're very familiar with like modern web technologies and frameworks uh routing's always built in so we'll talk about how to do that in the jam and then in addition to that we've got a simple gallery where we can show off some different images and then finally we'll have a form where you can actually submit reservations now we're going to move over to showing you how to clone this site as well as talking more about what jam stack is so i'm going to give you a onetime gif and that's pretty much all of the code and for this repository now if you look in the description of this video there's a link and if you click that you'll be able to clone a version of this tasty tutorial you can also visit bit.ly slash taste the tutorial either those two links will actually take you to this page which is going to be a wizard on netlife.com granting access to your github account will allow you to create a new repository based on the template that i provided here you can change the name or you can leave it as the same since i already have a version of this already saved i'm going to go ahead and change the name and once you click save and deploy it will then bring you to a screen where it starts to build your site for you so once your site's built you'll see a screen just like this which is a notify dashboard and here you can see one thing i want to point out which is the url of where your repository was created now it's going to be your github account that you connected to netlify and i'm just going to go ahead and tell you to go ahead and click that link and it should open a github repo with that code this is a repository that includes all the code you need but also includes a readme with more instructions on how to get this started so if you get stuck at any time you can actually check out my repository at github.com hego restaurant tutorial here you'll see the same code that you see in the repo that you cloned except that now we'll have some branches where you can actually see the solutions to each step so if you do get stuck all the code is going to be available here for you to look at so feel free to leverage this if you if you aren't able to follow along or if there's an error that you cannot get past so now you have your own version you just want to go ahead and clone this repo and go ahead and take that repo url and clone it on the command line now once that's done you can go into your repository and as outlined in the readme you want to do two things npm install and then finally npm and start running npm start will just go ahead and compile everything into a bundle and load your very own version of tasty licks for easy view this tutorial is actually going to be based on the static site generator hugo and based on statistics from staticgen.com hugo is the second most popular stacks identity and it actually has a pretty strong engineering culture and community around it supporting it now this tutorial also will be based on hugo but it's going to be based on a hugo boilerplate that also adds an asset pipelines so if you're familiar with either the rails asset pipeline or you're comfortable with npm in node packages you will find yourself right at home with the sex identity which is victor hugo which adds npm post css and a bit of webpack to your pipeline to be able to manage dependencies now once you have cloned the restaurant template that we'll be focused on you will need this install hego and if you are on a mac you can do that by brew install huigo and if you're not on a mac you can visit the hugo installing guide to find out how to install hugo either on linux or windows systems as well now if you get stuck installing geo please feel free to check out the the forums for higo which will be discourse.gohigo.io here is a pretty thriving community that will actually be more than happy to help and assist on getting your environment set up as well you can also reach out to me directly or check out the comments of this video so i mentioned earlier in this video that i was going to explain what the jam stack is and i'm going to go ahead and default to what jamstack already says uh jam sac is just a a way to describe modern web development architectures where it's based on clientside javascript and then reusable apis and all that information can be found more about the jam stack from jamsat.org where we actually have different examples as well as some resources to if you're in interested in finding out more about use cases and how other people are contributing to the jam architecture but i do want to take a chance to explain a little more in depth of how we got here and so basically what we're looking at here is just the this normal website architecture so we have a client and then you have a server and that server usually is not as simple as what what we see uh more the server normally looks like more of like a monolithic application structure so not only do you have your what you see on the browser which is the client but underneath under the hood you have like a web server an app server or api server as well as like a database and because of that all that content actually walks around with you whenever you go to host or deploy your site to the web so people can actually view it and i always like to use this this uh analogy of monolithic architectures like this so back in the day when i was a kid uh which actually still sell this in the actual stores but they have the idea of putting peanut butter and jelly in the same jar uh this was actually pretty cool when i was a kid but it at the end of the day it didn't work out very well because sometimes you only want jelly and sometimes you only want peanut butter but in this instance you have to take both of them and one big scoop so when you go to deploy a monolithic architectured site you have to deploy everything all together so then you have all these oneclick solutions that have done really well but we found out really quickly those have become really expensive so pushing the analogy even further i'm separating the two ideas of apis are backends to separate that from your front end which is your client so in essence this is what the jm is all about separating your client from your api or your front end from your back end and what's really made this real easy for modern sites that are built on javascript or even other languages is that we've had a insurgent of all these javascript build tools so we had grunt gulp browserify npm now it's kind of taken over as far as the scripting build tool of choice and then also webpack as well all these build tools are making it easy for us to bundle our javascript node apps into something that can actually be hosted easily through static which brings me to the static site generator so now we're getting more of surges and statistic generators uh back in the day we only had a handful now we have tons um as we saw earlier in staticgin.com um hugo is number two but number one is jekyll and then gatsby and middleman are both um very very popular in the space as well as a whole slew of other ones and what they do is they take what we're very used to having the command line interfaces and the interactions and build sites really quickly but we could also take that that complicated setup and then bundle that into a static output so we have an index of html that can be hosted easily on a cdn on multiple servers on the web without the heavy weight of a a database or a backend following it around instead we we would talk to an api directly to gather our data all that to be said is that the site that we're building is going to have a prebuilt structure so we are going to do complicated things we are going to talk to microservices and third parties solutions to do some of these uh nice features that we want in our restaurant app but we're gonna have the idea of a prebuilt structure so every time we push to get we get the idea of having continuous delivery and it goes straight to our cdn which for this example it's going to be netwy so we can continue to push on a regular basis and update and see those updates happen live without the need of keeping our database in sync or keeping our app server in sync at all the whole purpose of this video series is actually to show you how you can build modern websites and web apps on a structure where there's not actually a strong tie to backends and databases so i hope you enjoy and i hope you got a better understanding of what the jamstack architecture is hugo and other static sitegenders for the most part use markdown as the basics for rendering dynamic content on the page with this project nothing's really different we have a menu that lists a bunch of food items and we want to render that same count on our page the problem at the moment is that our version of site does not have any sort of menu whatsoever so i can't go to slash food and see any food items because we haven't set that up yet so we're going to go ahead and do that now and that'll be the first thing we'll tackle and if you haven't gone to the readme yet you will need to npm install so once you've installed the packages using npm you go ahead and run npm start to actually run a live version of your site to view now we're using a tool called browsersync so it should open up the browser for you and you should see the live site ready to go so open up your text editor and find you could find that the the structure of the code is actually laid out pretty nicely uh the project itself most of what we're going to be doing is actually going to be in the site folder that's going to be our content for food and etc uh the source folder is going to have your css your javascript images and the the main video that you see on the back uh of the homepage that's going to be living here images already be set up here and for the most part the css is already dealt already done for you so you don't need to actually do any css in this tutorial so the config.tamil is a place to tap into the menu system that we want to add to now if you're unfamiliar tamil tamil stands for tom's obvious markup language it was created by the creator of jekyll another static site generator that's uh very useful all you need to know is that our menu is going to be edited here so what i want to do is create a new route so i'm just going to copy exactly what we already have here and i'm gonna go ahead and make sure that this weight is two so that way i'll have the about link but also have a link for our food route since i have this live updating in the background we can now see that we have food working as a route but when i go to this route nothing renders and the problem is we don't have anything in the food content structure so if i go back to our code i'll need to actually go into our site directory and i'll need to go into content and then here we'll need to create one folder and make call it food so i am personally using vim so i can do this straight from my event editor if you're using atom or sublime or something similar like visual studio code just go ahead and create a folder in this directory called food now that i have a food directory i can now create my first food item now each item in the in the the content structure is going to be a markdown file and there's this concept within static site generation which is called front matter and in this front matter we can actually denote details like date different things like categories which i'm going to distinguish just to be lunch and also have different types like roles all this information is going to be available to you in the the actual description of the video so if you do want to copy and paste that feel free if you want to switch things up also feel free to do that but i'm going to go ahead and save our content as is just by filling out this front matter and between the the triple dashes we should be good to go to see our first food item available for us to view so if i now click food i realize i still don't see anything and that's because i'll need to update our static site generator to understand that there's some changes available so i just went ahead and killed our server and i'm going to restart that for us so we can now see our first food item available for us now go ahead and go back through this and see if you can now add a couple more food items so instead of just lunch i would go ahead and add some dinner items as well in addition you could also create some different unique choices and descriptions and pricing so take a crack at that and i'll show you how to make this process of adding new food items much easier using a content management system which is going to be our cms in our next video so adding the ability to update food on the menu dynamically was pretty straightforward but maintaining updates to the menu will probably get pretty tedious as you probably have discovered firsthand so thinking of a head chef or a kitchen manager who needs to make updates on the menu on a daily basis they would need to either clone the repository locally or log into github to make changes and chances of that actually happening on a customer zen is probably pretty slim so with the current state of the project all changes have to grow through a web developer so there's a lot of solutions to handle management of contents and since we're already on the netlife train and deploying our site there i'm going to recommend us use the nullify cms to get the cms connected you'll have to do just a couple things inside your project folder you'll need to go to site and then the static folder and inside here you'll need to add a new folder which we'll call be called admin once you create a new admin folder you want to create two new files and that'll be the config.yaml which is going to be different than our config.toml file for hugo this config.yml is going to be very specific to the cms and then you also want to add an index.html the contents of the config.yaml and the index.html are both available here under the netify documentation under the quick start tab and then under configuration now that we have the index.html i want you to first copy over the contents from the documentation into here so that way it looks like so now back into config.yam i'll break this down line by line so this yaml file actually look very similar to what's in the example on the documentation with some changes but line by line i'm going to break it down like so here is a section that's to tell us what backend we want to use by default nullify cms works with github out of the box we're actively working on other solutions but for now we're going to use github and i'm going to point it to my repository which is going to be my name slash the name of my repo it also wants to know what the base branch is going to be now the cms will work on any branch that you choose here so you would you want to check to see whatever branch you want your live code to go to so this could be any like demo or staging my preference is master i'm going to set this to be master here now the media folder we're going to use for a future video but we're going to set this now just in preparation because the cms requires you set a meter folder for any images that you want to save through the cms and since i already know i'm going to use that i'm going to set it for that and then finally we're going to add collections now each collection is actually separated with this hyphen and so i can have future collections hint we can also have like a drink menu or we can have some sort of dessert menu as well but for now we're just gonna have a general food menu and we're gonna set these labels now these labels are not gonna be um set outside of the cms you won't see the i you won't see the label food item outside the cms but this is for the cms to be able to present it visually and if you also note site content food is where we saved all our previous food items with their detailed front matter and this gives us rights to be able to save and then finally looking here these fields here all mimic exactly what we have in our front matter so these fields are looking directly at that front matter and being able to save and one thing to note as well is that for a supported meals we've got two default options one being lunch the other one being dinner and this is going to be based on a widget so widgets are something you can look up and that will actually get more detailed in a future uh video but just note that widgets are different types so we do have a widget for string list and text so this is the three ones we're going to be using for now so i'm going to show you exactly what the front matter looks like today which here for our oysters we do have date which we're actually ignoring in the cms though it is something that does get saved every time a markdown file gets saved but you can also note that we do have categories for lunch and dinner we do have types which type is here but the label is here and i'll show you what that looks like in a moment but for now go ahead and commit your changes to the cms so go ahead and pause the video make sure you have your config that matches pretty close to what i have here and commit that to your master branch and i'll meet you back in a few seconds at the netify dashboard now back in my network dashboard i can now visit the access tab to add an install provider we can do that from our github profile by going to our profile picture up there clicking settings and down here where it says oauth applications you want to register a new application now i've already done so here which is providing me a client id and a secret a client secret now be careful not to share these secrets but go ahead and take that client id and bring that back to netlify now back at the dashboard i can now install my provider based on my client id and my secret and now back on my live site instead of adding all my content locally within my text editor i can actually now go to slash admin login via github and i can view my cms now having a cms to be able to edit the food menu is great but it's almost pretty limited to only have a food menu now based on everything we've done so far adding the food menu to the cms i want you to go ahead and do the same thing by adding a collection to your config.yaml as well as adding a new link for drinks and i want you to add all this content dynamically through just using the cms now if you get stuck on doing this feel free to look back at your config.yml in your cms but also leverage the netlify cms getter community who are ready and willing to help anybody who's looking for help with the cms once you figure that i'll see you in the next video and we'll look at the code now you should have your cms that looks like this that has food items but also drink items available to look out and edit and if you took some time to add some different drink items you would have them look like this which is very much similar to what we have already in our cms now your config.yml would only need one more collection that copies exactly what we have in our food structure in addition to that you did want to go ahead and go to your site and your config.top tumble to make sure you added drinks to the menu so that way you actually do see it in the menu when you go to your site live that's it hopefully you were able to get through that if you weren't let us know if there's anything edge cases or also continue to hang out in the getter community for any questions and concerns and help with your project so when looking for a restaurant to eat at it's always nice to look at pictures of food as well as what the place actually looks like to get kind of a sense of quality and uh if you can't even like it so having some images somewhere um is actually ideal for a restaurant site and which is what i have here so you can see so as you can see i have a carousel that i can cycle through and see different images of the restaurant and food and then it cycles back to the front and i also want to point out in the layouts folder we've already been using a structure to render our content but i didn't really talk too much about how this works now within hugo we do have a base layout that loads our index page and this is where we see our video but we also have a default layout structure which lists all of our content so in hugo they have the idea of categories and each of these categories are separated by sections as well now consider sections being what we how we outlined our content in the config.yml so each section being food drinks and also one that we haven't talked about yet which is the about page each one of these sections are being separated by a conditional so if we happen to be on that that particular conditional that is the section that we'll be displaying and we're doing this logic by just doing this here this conditional within this block so hugo uses a go template rendering engine is which is what we see within these handlebars or if you may the curly braces now i wanted to point that out because we're doing one more thing for images which we actually i already give you to code here so you don't have to actually add the carousel directly to the page when we add our first image it will actually automatically do this but i don't want this to seem like magic so i just wanted to point this out here's how images are being displayed on the page and above is how food and drinks are being split on the page so if you have any questions about how this works or how hugo renders templates please check out the hugo documentation on taxonomies as well as listing and displaying data with that being said let's go and add some images first thing we want to do is go ahead and add a folder within our content structure called gallery now if you remember we have the config.gamil as well within the cms architecture and here we can actually add another collection called gallery and here we'll have a label called gallery image and it'll make sure to look in the folder site content gallery so everything pretty much as straightforward as we've done before except for one thing if you check out here in our field type we're using a widget called image and this is because we're no longer just gonna have static text to add to upload an image we're actually gonna upload an image in the cms using their cms image widget and since we've added a gallery to our cms you can now see that we have a new item in our sidebar called gallery images and here you can either use the file uploader to upload image or you can drag the image directly onto the image widget and now you have an image and now i can click save and see that live on my c on my site so now when i visit tasty.netblife.com i'm able to visit my gallery and see that my image is already there so there's one more thing we haven't done yet to make this restaurant app fully functional to the way i think it should be and that's actually adding reservations now we created this form or i provided this form rather as part of the template so i should be able to submit my name my email and when i would like to show up at the restaurant for my reservation and because this is slash contact i already know that in slash contact there's going to be a route ready and available for me which is why i'm going to the pages and then contact folder so now i'm in the contact fault the contact markdown file i now notice that i have a regular html form ready for me to update it's also got some of the same markdown that we see on the page as well now you can see the only thing i've added is the netify tag name all i need to do now is save that push that back up to github which will then trigger a new deploy on netlify and i'll be ready to submit forms so now once i go ahead and fill out my information and hit submit so back on my dashboard i'll go back to the site dashboard for form handling now this feature is incredibly useful but it can actually be even more useful if you check out the netlife documentation netlify also has a cool feature which adds notifications to form interactions so every time a form submission happens you can send an email notification as well or you can send a slack notification and if you already have some sort of web hook existing you could also add a web hook to either notify through a database or through some sort of lambda function as well so spend some time seeing how to integrate your form notifications with the form that we've just created truly hope you enjoyed going through this little project of mine creating this restaurant app i encourage you to take this same template and see if you can build another restaurant app build a different css or different styling go to restaurants in the area and see if you can apply the same sort of template to local restaurants and see if they can use a modern site without anita servers and be able to host that for free using a tool like netify