right in this full ui5 course uh you will learn everything you need to know to get started with ui5 um this course is perfect for beginners who have a little bit of javascript experience it's great for app guys who want to learn more about the frontend side of things and it's also great as a general refresher for your ui5 skills the course itself will come will eventually wind up with you having a app that looks similar to this and it follows each individual step of the sap ui5 walkthrough from step one all the way through to step 38 some will go into more details uh some will go through but in a more general way um and we'll leave that for sort of a a separate video on each topic so for example unit testing we go through briefly but not in a huge amount of detail same thing with accessibility because those sections require their own sort of course but for the most part we go through all of the basics um and the walkthrough itself is something i've been through over a dozen times i jump around and and look at various things just to refresh my mind and i find it incredibly helpful which was the reason for the course so obviously going through the video you can jump around pretty much as much as you want and you can always use this as a reference when you're actually building parts of the application each step in the video is handled by a commit in this ui 5 repository on my github so you can come here and if you want to start from any particular step you can browse the files and you can just simply download the code or open it up in github and continue from there so you're more than welcome to jump around as you go using the commits as a guide for whatever step you happen to be on so i'm going to be running all of these well this example from my local machine using visual studio code so your code will eventually look like this and i'm running this on my local machine so alongside this i'll be using the ui5 cli so we'll be doing things like ui5 serve which will help us actually serve the app locally and the reason we're using uh uf the ui5 cli and node is uh because you will eventually run into a cause issue if you try and do this uh sort of com you know on your local machine as it is um and you will eventually run into this issue and unfortunately being a vulnerability it just it'll be quite hard for you to do a workaround you can work in the sap web ide and configure things like destinations for your remote odata services and get around this that's up to you but if you want to follow this course from start to finish we're going to use your ide of choice like eclipse or visual studio code the ui5 cli and obviously node to run the server so again the cause issue will be linked in the description below so have a look for that because it's tripped up many developers including myself and at one at i think it's step 26 or 27 we will create a remote odata service for the first time using northwind this again because of the cause issue um won't work there are workarounds that will be available to you if you want to continue that way but otherwise we will continue from that step using a mock server which is in any case an sap based practice so look out for that as we go that'll be a change there and yeah um i hope it winds up helping you guys um and yeah let's jump let's jump right in so now in the prerequisites section we're going to get our local machine ready to run any code we write using node so we're effectively setting up a node server with the ui5 tooling as well um if you're using sap web ide you could skip the step um but if you're working on your local machine which i'm sure most of you are i'm going to follow along through all the different steps so you know exactly what i did to get going so the first thing oh this is also going to overlap with section one or step one a little bit which is fine because obviously things have changed since they created the walkthrough and we're going to run it in the more sort of modern way i guess so um first step is going to be creating a new folder so we're inside our project folder whatever you've called it and now we're going to create an app folder which by naming convention we're going to call web app we're going to leave this here for now and the next thing is we're going to start with the ui5 cli and make sure that's installed it's already installed for me but i'm going to run through it with you and then we'll go from there so you run npm install globally at ui5 cli let that run brilliant and to verify the installation we can run this command which is a ui5 help and if it is successful you'll see all your different ui5 commands here that you can use so that's obviously successful for us now we need to enable an existing project so we've already got our project folder and we've got a web app folder in here as well so we are going to enable it to work with the um the node server so um the first thing we need to do is create our package.json file and to do that which would be the same in any other node project you type npm in it yes and that'll just create the package file with everything we need um so all the details are set there then we need to generate a uh ur5.yaml file and that is ui5 in it and there we go so now we have a package.json file um and and obviously the ui5.yamf yaml file briefly this package.json file just holds metadata related to the project this file is used to give information to node or npm and allows it to identify the project as well as handle the project's dependencies the ur5.yaml file on the other hand um is the project's ui5 tooling kind of configuration file i guess um so that's that's a sort of in a nutshell what they do and what they're there for so now that we've done that we need to install the dependencies but before we do that so for example if you just went ahead and typed so uh we're going to use the sap ui 5 dependencies because we will work with sp ui5 so we're going to pick up an error now when we try this so ui5 use sap ui5 and depending on the version you can obviously choose that version here we're going to use the latest version just because most of the stuff we develop on our as in an scp or sap cloud platform so that always runs on the latest latest ui5 version when we eventually do deploy so you'll see it says error message failed to read manifest.json file creating the manifest is also a step further on down the process we're going to be doing that a little bit earlier just so that we can set up our cli and our node server to run our project so you will see this come up in one of the sections obviously coming up so for now we're going to go ahead and go into our web app folder and create that manifest.json file there'll be a lot of data in there that won't make sense if you're fairly new to this don't worry we will cover it in a future section but we just need it there for now to get our local project running so we're going to create a new file call it manifest.json and this will be linked down in the description i'm just pulling the data directly from the sap documentation and you can see there's a lot of stuff here that we're going to go through but for now we're just going to pull it all and add it in here then we just need to make a few changes um so we'll just hide the folder structure for now so um if we just scroll through you'll see we have a few issues here and there so the first one is handle validation we're going to leave that as false for now because that's not part of the scope of this section but we will get to it content densities and run everything as false because we just want a standard layout again we'll get to all of this as we move down the line oh and we just need to add a comma there right so we've got no issues here we should be able to save and that looks good so we can close that so now that we have everything all set up we're gonna go ahead and follow on step one where we're just going to create a hello world or hello ui5 html file that we're going to display in the browser here so we're now going to go into the web app folder and we're going to create a new file called index.html and i'm just going to copy across the html code here because the it's pretty straightforward it's very standard html you've got your head section a title your body a div with hello world or we could just say hello ui5 um and all that's going to happen is this text is going to be displayed so if we go ahead and save let's just close all of this now that we've gone ahead and saved that we to now run this or start running and testing things we just simply use the ui5 cli and type ui5 serve and that should run it on this um localhost address here so we can go ahead and follow that link and if we type in slash index.html there you are so the next section we are moving on to is bootstrapping and what that means is when you run a sap ui5 application you need to load and initialize things and when you initialize sap ui5 resources it's called bootstrapping and once the bootstrapping is finished in our app we are going to tell it to load a simple javascript alert so we're going to run a script in the index.html file and we're going to pull that we're just going to copy it directly from the documentation and so you've got your id which is pretty straightforward your source so this is going to pull it um from a content delivery network or cdn network online uh wouldn't recommend doing that um if you're running a production app you should obviously have your resources or your your the source of your um sap ui5 libraries and things set so that it doesn't change which obviously it would change here but for now for demo purposes we can call it from this cdn url here ui5 has different themes which you'll see shortly we're just going to choose the belize theme the libraries this is just the probably one of the more standard ones one of many but it's sap.m so it's one of the libraries the compatibility version must be set to edge or sort of the latest um that's what that means uh we need things to run asynchronously so we set that to true the difference between synchronous and asynchronous you can look up online yourself but effectively asynchronous means we can run our when our resources load they don't wait for each other to load so it doesn't load one then the other than the other they all just sort of load as they would load if that makes sense um so that's what asynchronous means then we have to set our on init module so um if you sort of follow this folder structure this folder structure is determined or is sort of masked here in the resource roots and it's telling it that um just for this sort of demo purpose but more or less to understand how the folder structure actually works it's setting it to this home folder which is here web app now in doing that it's saying sap ui demo walkthrough which is put here so it comes to your web app section look at the index file now we're going to create an index.js file because we shouldn't really be running any javascript in the html file itself so that leads us on to the next point where we're going to go ahead and create in our web app folder and index.js file so let's go ahead and do that now in this index.js file we are going to um put all the application logic we're going to use so um again that's to avoid any uh executable javascript code in the html file so to do that we call sap dot ui dot def oops we call sap dot ui dot define and we open and we open that up like that now once we've got that we need to go ahead and create a function and in that function we're not passing anything yet we open up our function call and we call use strict which we'll explain in a in the sections further on but yeah don't worry about that for now then once we've got our samples you are defined section here we're going to call a function and inside that standard javascript function we're going to call our alert so oops alert and we're going to say ui5 is ready to go and we're going to put our braces there and we're going to go ahead and save so we've got our index.html file with our script ready to go we've got all we've got the um we're telling it where to find the index.js file which is here and this has been mapped like that using resource roots in our index.js file we're calling a function and in that function we're just simply going to call a an alert so this isn't even a ui5 control it's just a standard javascript a vanilla javascript alert so now if we save that we should be able to refresh know what's gone wrong let's try control f5 there we are so um if for whatever reason uh it doesn't load when you refresh it might need a hard refresh so control f5 i think does that are windows i don't know what um i think it's command f5 on a mac but here you go here is your you can refresh it again so the hello ui5 which is here is still here but then in our index.js file we start to build a control or a vanilla javascript alert which is what we've done so if we refresh as it runs in the background and loads you get your reload so now what we're going to do is we're going to replace this text with an actual sap ui5 specific control and we're going to do that over here where we'll actually add the control and pass it in and we're going to remove this and we're going to actually assign the body an id and add the control here to that particular id so what we're going to do first is remove this then we're going to come to our index.html file and we're going to remove that and in our body tag we're going to call a class called sap ui body which will just give us a bit of sap specific formatting um for this particular body section then it the important thing now is to add an id and we'll call this content and so now that we've given this an id we're going to go and save it and we're going to go and first off we need to pull in our our text control and to do that we need to use the sap namespace so it's sap slash m text and now that we have that here we need to pass it into our constructor here for this javascript object so we just add the text part so we just add the input and then once we're in here all we need to do is create a new object so new text and within that object or within the the text control rather we'll have a whole bunch of attributes and so in this case we're just going to call the text attribute and that text will be what is displayed and we'll call it hello ui5 whoops now we've got this this text control here we need to call the place at method to place it at content and that content is going to be in the html file here and so we should see this still appear when we refresh so i'm going to go ahead and save that and just double check this that's all fine so if we press ctrl f5 let it load ah so if this happens you just need to rerun your um your server if if something like this happens so again we just call ui5 serve and there we go we're running again so we can go ahead and refresh and there you go and you can see the formatting has changed slightly the font and things has changed a little bit so we now have that text here but we're pulling it through and sap specific text control from the sap m library and we've created that new control in our index.js file and we've placed it at content which is the id of this body tag so now what we're going to do is we are going to create a separate standalone view to place our text control in and sap supports quite a wide range of views and you can write them in xml html and javascript but they recommend xml because um it produces more readable code and it also force you it also forces you to separate your view declaration from the actual controller logic so what we're going to do is we're going to create a separate view folder a separate view file and then we're going to create the view here and we're going to call it in the index.js file so underneath web app we're going to create a new folder called view then we're going to physically create our xml view and we're just going to call it app.view.xml then we're going to open up our tag here and let's just close it while we're here um so now what we want to do is we need to bring in um the text control and also the m the sap mvc assets as well which is fairly standard and i won't go to too much detail on that but effectively what you would do is you would call xml and we want the sap.m library so we're going to pull that in because that's where our text controllers is from and then we're going to call xmlns again with an alias of mvc and aliases will come into play further on down the line and this is going to be sap.edu is a dot core dot mvc so now that we've got this library available to us we can go ahead and add our text control and declare it so all we have to do is call text and call the attribute that we call before text and that's going to equal hello ui5 again for example and we close that and that's our control declared as simple as that so we can go ahead and save that now we need to move on to the index.js file and we're going to ch it's going to change somewhat because we're not pulling the text control directly in here but rather the view we need to call the sap slash ui core slash mvc slash xml view and then we need to change um the importing parameter here to xml view to pull it into our constructor here now what we're going to do is get rid of this text control and we're going to call xml view dot create and open up our tags here and then we're going to assign it the view that we are dealing with so we call view name and that's going to be sap dot ui dot demo dot walkthrough dot view dot app sorry dot um dot app no almost and you remember before how when we reference this it references the web app folder from the index.html file here remember that so that's why that's how we can call or that's how the folder structure works um then we go into our view folder and then finally we call the app view which is um sitting over here and that's it so once we call that we then come back on our promise javascript promise and we say then once we have that we call a function and we're going to call our or pass in our view so we'll just call it overview oops and then open up our function and you guessed it overview dot place at content to place it at content and it is as easy as that we'll go ahead and save that and now it should do exactly the same thing except it should place our brand new separated or modularized text control inside our separate view over here so just make sure everything's saved and if we go here and press ctrl f5 no something's gone wrong what's happened here ah so um because we're passing it in this needs to be in quotations my apologies that's very important so now if we go ahead and save and ctrl f5 ah there's the issue it's place at it was missing an e there so if we go ahead and save that and refresh or let's try ctrl f5 and there you go hello ui5 again now what we're going to do is we're going to create a button and we're going to create an event um that when that button is clicked we're going to have a popup and we're going to do that in a separate controller so what we're going to do is we're going to pull out just like we did with the view we're going to pull out the controller reference it in the view and create a new folder called controller and have our controller available there so there'll be one view and one controller so let's go ahead and jump into our view first and now that we're in here we need to create a reference to that controller so we're going to call it we're going to call the controller name and that's going to come from sap um ui demo walk through and then dot controller for our controller folder and app because we're going to call it app.controller and now that we've got that we're going to remove our text control and we're going to put in a button now we can just call this because this button is also available in the s in the sap.m library so we can call that straight away just like we did with text so we're going to button and we're going to give it the text property so the button will have text inside of it that says say hi for example then we want to call the press event by calling this press and we want to call the method so we're going to create all the function rather oh sorry the on show hello event and we're obviously going to put something in that event to happen i.e the popup so we're going to call this on show hello has the event and we can go ahead and save that let's format brilliant now what we're going to do is create the controller so under web app we've got our view and we're going to create a new folder called controller then under controller we are going to create an app dot controller dot js because we're going to write our controller in javascript now that we're in here um we can start with our sap dot ui dot define and once we've opened that up we need to bring in our mvc controller assets so we are going to call sap slash ui slash core slash mvc slash controller now that we have that we're going to call our constructor function and we're going to pass in the controller which is from here and this is the again sap naming convention and now that we have our function we're going to call use strict and as i said before the use strict is a literal expression which was introduced with the ecmascript 5 and a sort of line of items and it basically tells the browser to execute the code in a sort of strict mode and it effectively helps detect potential coding issues um at an early state at development time and um i mean for example it will make sure that variables are declared before they're used etc um and so it's just there to stop sort of basic javascript pitfalls um and so that's its function so now once we've got that we are going to return controller dot extend and once we've got that we are going to close it off and let's just move this out the way and that should be fine so everything we've got here uh is sort of the standard or basic uh controller layout um we're pulling in our controller assets here we're pulling it into our constructor function we're telling it to use strict um so we're keeping our javascript uh fairly strict in this case then we want to return the controller and um once we sort of we're going to return the controller and extend it by adding in the functionality in this next section which is where we're going to put our on show hello our on show hello event so um once we've got that we can go ahead and add our um sap dot eui dot demo dot walk through so we're going to call where this controller is actually located as we did with the view and that's our app controller so now that we've got that we're going to call or we're going to rather implement the logic for our event so we're going to go on show hello and that is that event is going to trigger a function where we are going to show a native or vanilla js alert and just like we did before alert hello there and we can save that so um in our view everything we've got is here we've now got a new button with the text that says hi then when you press that button call this event and this event is kept in the controller which is referenced here here's our controller we've pulled in with the sap naming convention the all the controller bits and pieces that we need passing into the constructor function our controller using a strict javascript and we are going to return our extended controller which is located here and in doing that we are going to just simply we've just simply got one function or one event which has a function that alerts as of another javascript alert that says hello there so we're going to go ahead and save that and save our view as well and if we press ctrl f5 and now if we go ahead and press on the button there you go there is your alert and that's all be implemented within the new controller that we've created now we're going to move on to modules and modules are just basically resources in sap so we're going to add a module resource here which will allow us to call the message toast from it from the sap.m library and replace the alert with this message toast so we go ahead and put in a comma and add the new module sap slash m message toast then we need to take this pass it into the constructor like that and we can get rid of this alert and we can call message toast dot show hello there and we can go ahead and save that then we can go and press ctrl f5 and if we click our button here's our message toast to the bottom right now what we're going to do is we're going to add an input field control to our app we're going to bind its value to the model and we're going to bind that same value to the description of the input field and we're going to use that using a json model so just like we worked with the modules before we need to add the json model to that same section so in the appcontroller.js we are going to go and add sap slash ui slash model slash json slash json model now that we have that we need to bring it into our constructor function so we just take that and add it in there now what we're going to do is we're going to call or we're going to access the on init event so this is the initialize event that happens right at the beginning which is where we're going to sit and create our local json model so we call the on init event in the controller we pull our function and we open it up oh whoops i put that in the wrong place just pop that down there and we can just pull this up a bit higher there we go don't forget between your functions to put a comma um now that we're in here we are going to set the data model on the view to do that we are going to first create a variable let's call it odata and we're going to set this in json format so we're going to put in a recipient for example and that recipient is going to have a property called name and we're going to just say let's just say ui5 for example now that we have that we've got this odata json object here now um we need to create the json model and then we need to assign it to our xml view so that the xml you can access it so the first thing is to create a model a variable for the model and we'll call it a model again we're using hungarian notation here and we are going to sit with the new json model that we brought in so new json model and placing that odata object we created up here which is in json format then we call this dot get view to get the view itself and then set model model and that's it let's go ahead and format lovely now we're going to go ahead and in our view we're going to create the input control so underneath our button the input also comes from the sap.m library so we can just go ahead and add that and the properties are going to be the input value so the value you'll see in the input itself and now is where it gets interesting we're going to pull it directly from the odata model so we reference the so now we have the odata model ready and attached to our view we call the recipient and inside the recipient was the name property so here's our recipient slash name property and that's it really um so now we've got the value there um we are going to add the description description that's brilliant equals hello and note we're using we're combining the text and also a call from the json model itself and again slash recipient slash name and we also want the value to update in real time and so we call the value live update property set that to true and finally let's give it uh sorry um i don't need to add the commas here and finally let's give it a width of 60 for example lovely so we've got the value um that's going to be in the value section of the input control it's going to say in the description hello recipient name uh the value live update is true so as we update it you'll see in the front end it'll update automatically which will make sense now and we just set the width to 60 so we can go ahead and save that and it's important to note that for the live update to work we need to make sure we have set which we already have this compatibility version to edge you can also sit another property called um sep ui binding syntax to complex uh you can do either all but this does um a few other things including setting that complex uh binding as well so we don't have to worry about that now if we go ahead and save our server is still running so if we go to browser and press ctrl f5 ah i forgot to close off the input control it's quite important so if we go ahead and ctrl f5 again so now it says hello there still now if we adjust this it should say hello ui5 now it's not doing that so let's have a look at our xml and see where we've gone wrong so hmm ah there was a spelling mistake so um that's very important check your spelling so now if we go ahead and save control f5 so there you go you've got hello ui5 which is in the description and you've got ui5 in the value over here now if i had to type something like john it changes in real time and there you go now what we're going to do is we're going to add the translatable texts and what that means is we're going to move all of the or some of the texts depending um to a to an i18 file so a separate resource file that we're going to point to in a minute and this way you can keep all of your various texts that you would reuse throughout your application and you can have them in one place where you can then translate them into different languages and yeah that is called internationalization and it's done with an i18n file so sap have got a special resource model that they use or that they let you use and to achieve that and let's go ahead and add it so the first thing we need to do is we need to go into our files and under the web app file or with a folder rather we need to add a new folder called i18n and under there we're going to add our i18n dot properties file and there we go now that we have that um we're going to put in our two texts so we'll call the first one show hello button text so that'll be for our button and that'll be save hello we don't have to worry about um apostrophes and and quotes and things like that here and then we're going to call another item hello message and that's just going to be hello whoops and that is how we add a parameter which we'll use in a second so our i18 properties file is set that's all fine now let's go ahead and pop back into our controller and let's get rid of that for now now we need to bring in our module so just like we did before asap slash ui slash model slash resource because it's a resource model and resource model there you go and then we need to bring it into our constructor function just after json model and now we can work with that in here so the first thing we need to do is we need to sit and all we need to create and set the model so the first thing we're going to do is underneath our model here we'll go ahead and create the next one so we're doing this all again in the on init event which is the initialization event that happens at the beginning when the app loads so let's put in our comment set 18 in model on view then let's create our variable i 18n model that's camelcase and that is going to equal new resource model and let's open that up and our properties are going to be bundle name and that's going to be dot ui dot demo dot walk through just like we did before dot i 18 n for the i 18 n folder and the i 18 n file itself then we're going to move on to the supported locales and that is going to be left as an empty object and let's just do that oops square brackets and that's going to be left empty for now we don't really have to worry about that and the fullback locale will also be um kept blank um but i think these are um you need to put these in there they're ex they're uh you just you you have to put them in i can't remember the word but yeah they need to be there um so that's all fine now that we have um our i18n model we need to set it to the view so this dot get view dot set model and it's the i18n model and we're going to give it an alias and we're just going to call it i18n so the second part here is just simply giving it an alias and then that's how we'll refer to it um further down so um we can go ahead and save that now on our on show hello event we are going to read the message and we're going to read the message from our i18n model and we're going to show it so let's put that down and we're just going to put in our comment read message um from i18n model so um let's go ahead and create our bundle resource bundle so our first variable is object bundle and that's going to be this dot get view dot get model and again calling the alias i 18n and get resource bundle get resource bundle which is from our bundle name here which we've specified then we're going to create another variable called s recipient and that's going to be this git view dot get model dot get property and we're going to get our recipient name so recipient name and once we've got that um we can so obviously this recipient name is coming from our original json model up here slash recipient slash name now we're going to create our message so var s m is chip equals o bundle dot get text because we want to get the text from our bundle and we're going to ask it for the hello whoops hello message and i'll show you that now hello message and that comes from and that comes from the hello message here that's what we're referring to and then we're going to add in the s recipient which we have created here as a variable so we can finish that off and now we're just going to show the message and just like before message toast.show and we call our variable s message and we save and so if we go ahead ctrl f5 and then if we click on say hi hello ui5 hello coming from here and then if we had to change that to something like hi refresh again it would say hi there you go so um let's just put that back to hello um now what we're going to do is we're going to change our button text to reference the show hello button text and to say hello where it says say hi at the moment so we need to go back to our view and in our button it says say hi what we do is we reference it like this so now we're in the xml view and we reference it as an i 18n show let's rather copy it so we don't make any mistakes show hello button text and so this should now pull from the resource bundle which the view has access to and if we save refresh ah sorry it's not a slash it's a greater than sign my apologies so the greater than sign sits here and if we go ahead and refresh it changes to say hello and there you are so now what we're going to move on to is the component configuration and what that means is we're going to take all of our ui assets and we're going to encapsulate them in a component file that is independent from our index.js file and so we make it independent and reusable and so from now onwards we're going to be accessing all of our resources relative to this component file so we're going to take pretty much all of this data that's on init in the initialize section and we're going to put it to be loaded in the component file so under web app new file component.js and now that we are in the component we are going to open up our sap dot ur oopsie we're going to open up our sap dot ui dot define and now that we've got that we need to pull in our ui component module so that comes from the sap namespace slash ui core slash ui component then um we need to pull in our json model so just like we did before it's sap slash ui slash model or we can actually just copy paste it i think um just to be on the safe side then we also need to add our resource model for our i18n internationalization file we can just go ahead and pull this as well now that we have that we need to open up our constructor function and we need to pull all of these values in so the first one is our ui component oops then we need our json model and finally our resource model then we can go ahead and open up our function making sure to use strict to run that strict javascript check and then once we have that we need to call return ui component and we need to extend it just like we've done in the controller extend and we're going to extend our component file so sap dot ui dot walkthrough dot component because it's in the the component file is not in any folder it's just in the web app folder so we can call it directly from there then we need to add a few parameters so the first one is our metadata and that metadata object is going to hold our root view so we're going to tell it which view to use as our root view root view and our per our attributes our view name but we need to put these in quotes view name and that's going to be the sap dot ui whoops sap dot ui dot demo dot walk through dot view dot app because it's in our view folder and it's the app.view.xml and the rest of the variables will be type the risk the attributes are will be type and it's an xml view we wanted to run asynchronously so ace a s y n c true oops we don't need quotes for booleans true and we're going to give it an id of app so id app now that we have that we can call our let's just save that first so now that we have that metadata in we can go ahead and call our initialization event reference that which is init and we open up our function and in this function we're going to first of all call the function of the parent parent the parent ui component from sap and that is ui component just like we pulled from here ui component dot prototype dot init dot climb and we give it this arguments then we start setting our data models so set data models now i'm going to be lazy and just copy this directly across so our first one is that and then once we have that um we need to set that onto the view so i can pull this as well now once i've got that i can set the i18 model so set the set i 18n model and again i'm going to go and copy and paste from our controller just to make sure i've done it properly and i'm going to go ahead and save and so far our component is looking good so we can double check everything is fine and what's the problem at the top here um uh we just need to get rid of that perfect now let's go and tidy up our app controller so all we need now is to leave this behind because this controller is going to handle the events that happen specifically with the view so we can take away all of this including the um on init event and let's just format that perfect so now all that's left is our on show hello um event call and our function that runs underneath there and now once we've saved that we need to go back into our index.js file and what we're going to do here is we need to create the component container instead of the view um in our index that in the obviously the index.js file and that's going to instantiate the view for us um according to the component configuration so the configuration we've got in our component so let's go ahead and get rid of that let's go ahead and get rid of everything under here perfect so first things first we need to bring in our module and that's going to come from snap ui core component container component container yep then we need to take the component container and pass it into our function and once we've done that we can create a new component container open that up and our attributes will be name and we're going to call it zap.ui.demo.walkthrough and we're going to add our settings and that's going to be we're just going to give it an id in this case so id equals walkthrough which is fine and then we need to tell it we want it to run asynchronously so a s y and c is true as the boolean and finally according to our index.html we need to place at content all right that's a method call so we need to put the dot there place that and so we've done everything we need to do in our index.js file contour calling our new component container that component container is going to then sit um in it's going to be put in the index.html in the body section with id content we've moved all of that logic from our controller into the centralized component.js file where we do things like in the inner function get all of our models and bits and pieces and assign it to the views including our i18 model as well and our controller is now far more tidy and far what it's now going to do is specifically work with the view and anything that happens in the view rather than what's happening in the app sort of to begin with so it's it's separating the doing the separation of concerns here and only handling what happens in the particular view that uses this controller so let's make sure everything is saved and if we ctrl f5 to refresh uh it looks like i have incorrectly entered the view name it's sap.ui.demo dot walk through my apologies uh now if we press ctrl f5 again ah so the issue is me trying to copy paste things across um which can sometimes lead to issues that specific issue is we shouldn't be getting any view here we should just be setting the model directly do apologize for that copy paste when you can um but try and check your work and try and retype it because it stops you making silly mistakes like this so now if we control f5 we are working again there we are right now um coming in from the prerequisites and the step one um we're going to talk about the descriptor or rather the manifest.json file so all application specific configuration settings will now further be put in a separate descriptive file called the manifest.json file and what this does is it clearly separates the application coding from the configuration settings and it makes things even more flexible so for example with sap fiori all applications within fiori are realized as components and they come with a descriptor file and this is there so that they can be hosted within the fiori launch pad itself so the fury launch pad acts as a sort of container and instantiates the app without having a local html file for all the bootstrapping stuff and so instead the descriptor file is passed and the component is loaded into the current html page whatever that may be and so this allows several apps to be displayed in the same context and each app can define local settings such as language properties supported devices and pretty much anything else you can think of and we can also use the descriptive file to load additional resources and instantiate models like our i18 resource bundle or any model for that matter so we don't have to create one because we've already created it in the beginning and what we're going to do now is just check a few settings so the first one is in the sap.app section the version we've got is 1.1.0 which is fine for now the id is going to be sap.ui.demo dot walkthrough and it's an application um the i18n now has a specific attribute and so that comes from our i 18n folder and it's the i18n dot properties file then we we're just going to give this application version whoops 1.0.20 just fine and now the title of the application is going to come from the i18n file which we're going to edit shortly but this is where this is what it's going to be called app title and we can also put a description in description and let's just put our comment for now whoops and inside there we're going to call it app description and so we've got our version and everything that's fine now we need to go to the sap dot ui section and um you can set things like icons favicons and all sorts of other bits and pieces the important thing for us is device types so if you decide you have a very complex table app you might go i only want it on desktop and i want to say tablet and phone to false but in this case our app is going to be pretty straightforward throughout the whole course so we're going to set these all as true then um we have supported themes which is fine so there are quite a few um attributes here which we're just going to skim past but they obviously do a whole bunch of stuff but it's just out of the scope for this particular course the next section is sap ui5 and this is where we are going to determine things like our models and our root view etc etc so we're going to start off with our root view and this is going to be an object and in that object we have the view oh sorry this is in json format so it's everything has to be in quotes so it's view name and it's sap.eui.demo.walkthrough.view.app and um we're gonna do the type of view which is you guessed it xml then we're going to set it to run asynchronously async true and our id is going to be set as app now you'll remember all of these settings because they come from one of our previous files so let's just run through everything and we'll go and tidy up our component and controller in index.js files shortly so we've got our root view then let's go and find dependencies so dependencies our minimum version for ui5 we're going to set it as 1.6 but again depending on whichever what project you're working on this can be set to pretty much any version then the libraries we want is in this case just sap dot m and we're not going to worry about minimum version for now so we can just close that up and we don't have to worry about a second library at this point yet so it's just one library that we've got and now finally we can deal with our models first one being i18n and the type is a resource model and now we are going to put in our settings and our settings are going to be in this object bundle name and our bundle name is asap dot eui dot model dot resource model whoops and then we need our supported locales and our fallback locales so supported locales and again this is empty but we need to put it in anyway uh whoops and fallback fullback locale is going to be that for now so put a comma there and we go ahead and save now we've got all these settings put in here we need to go ahead and change a few things in our index.html file and now that we're in here we need to first change our on init call and so this is going to be we're going to change to rather module sap dot ui dot core slash call rather slash component support so now we're giving it support for the component running it through like this then in our body section we need to create a new div and we need to assign that div a set of properties to allow it to be used by the ui5 runtime so we're going to add in the first attribute we're going to add in is data sap dot ui dash ui dash component and we're going to call data name and that is going to be our sep dot ui dot demo dot walkthrough and our data id is going to be container and we're going to add in our final attribute data settings and that's going to equal oops what the attribute we're going to use is id and we're going to call it walks through and so we can go ahead and save that now where we referenced our app title and app description and because we're now using i18 properties from the manifest we need to go back here and add them so let's add so this for a comment you use the hash and we'll call this is for our hello panel hello let's put capital panel and here is our app descriptor stuff and so let's copy that directly across title app description and app title is going to just be hello ui5 app and whoops app description we'll just say a simple test app to learn ui5 and you can do whatever you want right if we go ahead and save that now we need to go to our component file and remember all of this stuff within the metadata now we are going to get rid of it and all we're going to do is reference the manifest and so all of that data is now going to sit and be referenced from the manifest itself and if we go ahead and save there should be no change to our app oh and before i forget we need to make sure we go ahead and delete our index.js file because we no longer need it and we also need to make sure that we remove our i18 model call here because that's already now set in the manifest so if we go and press ctrl f5 again oh show hello button text so uh let's see what's gone wrong so let's go and have a look at the manifest and see what's happened so models 18 in type resource model settings bundle ah that's the problem my apologies i probably copy pasted this incorrectly but in our bundle name we need to reference our actual i18n file so that's sap.ui.demo dot walk through dot i 18 and dot i 18 so now if we go ahead and refresh there we are we are back to normal right so now what we're going to do is we're going to add um a page and panel to our view xml file and we're going to put the input inside of it and we're also going to put a few more controls around them so that we aggregated properly and everything looks nice so what we're going to do is we're going to start off with an app control then inside that we're going to have the pages control and you can have we're only going to have one but then you have your page control inside underneath the page control you have your content and inside your content you have your panel with a few properties and then inside of that you have your input so let's start off at the top and we're going to just hit display block to true then once we've done that we're going to add app um and let's just close that off oops then once we've got that we can add our pages and close that off inside here we are going to have page and we're going to give that an attribute of title equals and we're going to add this to our i18n internationalization file and so we reference that with i18n home page title for example that's perfect so we close that off and we close off our page perfect now under page we need to have content and now within the content of the page we're going to open up our panel and it's important to note the spelling here as well these two need to be in capital so just check um your controls as you go along and read the documentation so now within this panel we're going to have header text equals again from the i18n file i 18n hello panel title and once we've got that we now just need to close off our panel oops capital p there panel and then we need to add the content again underneath our panel and again if you read the documentation you'll know exactly what needs to go underneath for example a panel will need to have content etc etc so we add content close it off and we can take our complete input and we can add it straight in there let's do a bit of formatting and there we are so if we go ahead and save and control f5 to refresh there you are so you've got your um oh i see the button is sitting at the top here because it's not in the panel here's our button so let's take our button add it here just before the input watch it's fine then let's refresh again and there you are there's your help hello panel title oh we still need to add um our i18n bits and pieces here so let's go into our i18n properties and if we scroll down we'll add our let's take this one first homepage title and we'll call that uh ui5 walkthrough and let's go ahead and grab the hello panel title pop that in equals and we'll just say hello ui5 save again refresh oops need to watch my spelling save again control f5 and there you go so now what we're going to do is we are going to deal with the shell control and bring it in as a container so we're going to add a new root element for our um xml control here and what that shell is going to do is it's going to take care of the visual adaption of the application um and it's going to do that in relation to the screen size and you'll start to see a sort of litter box shape so you'll see the borders on either side and especially well this is obviously on desktop screens but for the most part you can add a few more um sort of background details here if you want and this is a sort of introduction into how the fiori shell is involved in the application but for now we're just going to go ahead and add the shell the shell here and we're going to go ahead and close that off and let's format the document so now that our stuff is sitting within the shell control if we press ctrl f5 you can't really see it on the screen but if i expand it a little bit there you go now you can see the app itself which would have just been sitting in a single page an app you now have this background sitting here which is kind of where the fiori would sit the fiori shell would sit around so now we're going to deal with margins and paddings and what you'll see here is the panel is sort of glued or stuck to the side here which doesn't necessarily look all that nice so what we're going to do is we're going to use the sap standard classes and we're going to use them to sort of dynamically and sort of you know in a a way that works well with the sap controls themselves and we're going to apply those sort of stylings on top of it so if i switch back to the code we are going to first go and find our panel and we're going to add the class attribute just like we would um anywhere else and we're going to call the sap specific sap ui responsive whoops responsive margin or the sp specific margins and we want the width to be auto perfect now we're going to add some styling to the button itself so if i just get this in line here so now we are going to assign a class uh to the button that again calls the sap ui small margin so again this is just a different type of margin that sp has available so sap ui small margin end and then we are going to go down to under the input if i just get everything down here just so you can see everything a bit more clearly underneath this input we are going to add a text control and in this text control um oh sorry that should be capital t e x t and i'm going to call the text attribute equals and we're just going to say hello uh again um calling from our model just like we did before recipient slash name and we just need to add a slash in front of recipient um so again we're pulling that from our um our model um then we're going to assign this a class as well and we're going to use the sap small margin class so sap u i small margin and we'll just close that off so now if we go ahead and save and refresh hmm what's the issue here let's go back and check the code panel content button on show hello ah here we go apologies that should be at the end they're closing off uh that button um control so let's go back and control f5 there you go so now you can see the text is placed here there's some nice padding there and this button is just off here instead of attached directly to it making the use interface user interface much nicer to look at so now we're going to move on to custom css and theme colors but this particular section is something that must be treated with a fair amount of caution i would recommend using the standard sap theming and css that you have available any sort of custom css i think is probably more important if you need something very very specific on your app that needs to be achieved through css sap will not offer to me have it maintained as it runs through so as new versions come through you will need to recheck your css to see that it actually works so we're going to run through this section just to show you how it actually works but it's very important to remember that this needs to be taken with a pinch of salt and try and keep to the sap standard as much as possible from a layout and css point of view so the first thing we're going to do is we need to go to the manifest.json file and we need to look for our sap ui5 section and we need to effectively turn on the resource for css so um underneath your resources your css will be here if not you need to add it underneath resources and our uri is going to be we haven't created the file yet but it's going to sit under the css folder and we're going to call it style.css which is fairly standard we don't have to worry about an id for it so that's the manifest done now we let's go ahead and create our css folder which will be under the web app folder so css under there we're going to create a file called style.css and this is where we're going to put our code but before we do that we need to just like we do a normal css we need to go and label the different classes in our view so if we go ahead and find our view.xml we're going to add some the stylings in three places so the first one is in the app itself so we're going to call this class my app demo wt for walkthrough then we're going to add some styling to the button where we're going to bring it a little bit closer together and so we're going to replace the standard sap margins and we're going to call this my custom button um and then um we're going to add a we're going to add a control um and we're going to it's a formatted text control so um we're going to remove this well actually we can affect we can effectively just edit this it's fine so formatted text and um this needs to be labeled as html text oops html text and that's just going to call our hello recipient name and our class um is going to um we're going to keep the small the sap small margin there but now we're going to add the color the custom color so first we're going to call this the sap or first we're going to call rather the sap theme highlights as color so um let's just pop this on a weight um i need to open this up rather so now we're just chaining our classes here so we've got our class here now we're going to apply the sap theme highlight um and then the as color and from there we're just going to add the custom one where we'll just call it my custom text and we can go ahead and our parentheses there and save now we need to go and add our style our particular styles here so we're going to reference the first thing we're going to do is reference the left to right part of this so you reference that whoops square brackets dir equals ltr and now that we have the left to right section um we need to add the my app demo wt and we're going to add the dot my custom button dot sap m btn and we're going to open that up and now that we're in here we are going to say margin right and we'll give that a rim of 0.125 perfect and we're going to do the exact same thing but for the right to lift for things like arabic languages for example and that's going to be right to left and save that now we're going to reference the um we're going to add for these particular classes we're going to add let me just add them in here demo walkthrough and my custom text and in here we're going to add display inline block for that formatting and we want uh let's just do font weight set that bold perfect so if we go back to our application and control f5 hmm all right let's go back and take a look at our code so left to right that's all fine right oh sorry this should be margin left um because this is going to be right to left so the margin will be on the other side um but that won't stop it let's check our manifest css ah that comma shouldn't be there so let's go back and save and control f5 there we go so there we've got some bold uh some the font being bold which is perfect that's all fine that's also looking good you can see this has changed a little bit that's got a little bit smaller but it's it's still got a bit of a space there um so yeah that looks good right so in this video we're going to be dealing with nested views and as the app becomes more complicated um we are now going to compartmentalize or move things around a little bit and in this particular case we are going to take the um panel that we created uh which is over here and we're going to put it in a separate view with its own separate controller and then we're going to tidy up the current controller or main controller and we're going to do a reference in this section here so the first thing we're going to do is we are going to create a new view which will be done inside of our view folder and so we are going to call that the hello panel dot view dot xml then we are going to um open up our xml tag here view and we are going to reference the controller that we will create shortly enter the name equals sap dot ui dot demo dot warp rube dot controller for the controller folder and we'll call the controller hello panel as well then the xml ns tag is that and that's going to be referencing our sap.m library and now we just need the xml ns with the mvc alias and we need to bring in the mvc artifacts so that's sap.eui.com.mvc perfect whoops we can close that off mvc lovely so now that we have that we can go back and grab our full panel here and we can just take the lot of it we can cut it and paste it right in here let's format everything and now that we've formatted it that we go ahead and save so before we create the controller we just need to reference it now that we have taken it out of the view of the main view we're going to nest it in here and we're going to call mvc just like we did above xml view and we're going to give it the we're going to add the attributes so the first one is you name um and that's going to come from zap dot ui dot demo dot walkthrough dot view dot hello panel whoops so again referencing our folder structure view folder and the hello panel file we can close that off so that is fine now let's go ahead and create our new controller and this is going to be called hello panel dot controller dot js and now that we're in here we are going to call sep dot uh whoops sap dot ui dot define and we can get rid of these so we need to call the controller module and also the message toast module because those are the two we're dealing with so say p slash ui core mvc slash controller oops and sap slash ui oh sorry that's sap slash m slash message toast then we need to bring in these two into our constructor lovely and now that we've done that we can go back to our standard app controller and we'll tidy this up in a minute but we can then pull this out and that'll stay as is that's perfect brilliant so we just need to wrap this up in our controller logic so return controller dot extend and we need to extend our sap dot ui.demo dot walk through dot controller and referencing the new controller itself oops hello panel controller and i'll just shove that back in here so it'll look exactly the same as the other controller to run our formatting lovely so that looks fine all good this one is going to sit fairly empty for now we don't need the message toast module anymore so we've just got our empty controller this is all fine extended and let's go ahead and save save i don't need the component manifest or css i don't need that so let's check that referencing our view and our brand new view here so we've saved everything now if we go ahead and have a look at our code i mean our app output and we press ctrl f5 so the panel content is now refactored into its separate view and there are no visual changes from the last step but you can now see we've extended things and made the app a bit more clear to understand so in this section we are going to move on to fragments and we're going to run a dialogue fragment specifically so uh dialogues i mean fragments are a fantastic way to create reusable artifacts that you can use without the need for a controller so a good example would be if you've got a form that needs to be opened at a certain point and you need a readonly version or an editable version you can do that very quickly and easily with fragments and you can design each part of the form to be readonly or editable based on each individual fragment so in this case we are going to create a dialogue just a simple dialog and we're going to call it and call it specifically from our view and we're not going to we're obviously not going to have a separate controller for it but we're going to use our current controller to handle the logic so let's go ahead and find our hello panel view and in there we're going to create a button and that button is going to be used to call this new dialog fragment so we'll add some attributes to it and we'll call this the give it an id of hello dialog button then we will let's the text will obviously add to our i18n file so we'll reference that in as the i18n greater than symbol and we'll call it the open dialog button text oops so let's go ahead and add that to our i18n file as we go along and let's uh let's call that um say hello with a well let's just say with the dialogue lovely so that's that uh then uh then we need to call the um the press event so if someone presses on this button this is what needs to happen and it's going to be on the we'll call our event on open dialogue and let's add a standard sap class and just say sap ui small margin end to give us a margin at the end point and we can go ahead and close that off so let's just format this perfect so that's a line brilliant so uh let's now go ahead and actually create the fragment so in the view section we are just simply going to add it like we would any other view you can have a separate fragment folder if you want um but in this case we um we won't so this is going to be called the hello dialogue dot fragment dot xml brilliant now in here we open up our fragment with call fragment definition and we call the xml ns and we bring in our sap.m library and we need the um the sept.ui.co library as well so xml ns sap.ui.cor and we'll give this an alias sorry that needs to be an equal sign and this will be an alias of core and that will equal that brilliant and let's just close that off perfect so now that we have that we're going to call the dialog control from the sap.m library and because it doesn't have an alias we could just call it as is so dialog and we're going to give it an id of hello dialog and we'll give it a title of hello and we'll call the recipient name again from our model so slash recipient slash name and perfect and that's it this is your little reusable fragment defined and obviously you can add a form in here or whatever you want but in this case it's just a dialog so now we need to move on to our controller and we're going to be using our hello panel controller specifically so here we need to add our comma and call our new event which is on open dialogue and we add our function oops function and now we're going to go ahead and call this dia call the fragment but we're going to load it asynchronously so i'll explain as i go first things first is to declare a a view a will to get it um a reference to our view and we just say this dot get view perfect now we're going to create the dialogue lazily um and to do this we're going to say if this dialog exists open it or else create it and open it so if oh sorry so the first part is if the dialog does not exist so if you cannot say the spy id and the dialog id open it's going to go ahead and physically create it if it doesn't exist so if this or not this by id and it's the hello dialog so if um this my id hello dialog does not exist then oops then we're going to load it asynchronously load a synchronous if i spelled that correctly a sync no yes it is right load asynchronous xml fragment and now we're going to call we need to load our module first so now we're calling the fragment module so we need to make sure we add that that comes from the sap slash ui core fragment module and then we need to go ahead and bring it into our constructor function fragment perfect so now we can call the fragment dot load and go ahead and open that up and now we're going to call the i we're going to add the the attributes id and that's going to be the view that will be the id of the view rather dot get id and then name and the name of the dialogue fragment is sap.ui.demo dot walkthrough dot view dot dialog again referencing our home folder the view folder the hello dialog which exists there and then we're going to use a promise so once this has got everything it needs um we then oops call a function and we reference our dialog and add it as an importing parameter to this function so this is referencing the fragment that we just loaded in the promise and we need to do two things we need to connect the dialog to the root view of this component and we do that by calling overview.add dependent and then we go oh dialog open it's as easy as that so just so you can see what we're doing connect dialog to the root view of this component including the models and the life cycle and so we call oh view which is referenced up here so we've now got a reference to our view add dependent dependent sorry and calling the dialog so it's now added as a dependent and then oh dialog dot open and now that we have that um so we've now called the fragment we've then uh so now if the the it doesn't exist this hello dialogue fragment we load the fragment and then after the promise we then add it as a dependent to the view and then we open it if it does exist else so now we're coming back to the top of our if statement else this dot by id hello dialog open so if the dialog does exist just simply open it so it works it works either way so we go ahead and save everything there we save our fragment then let's go ahead and test it ctrl f5 so let's um press f12 and see what went wrong so now that we're in the chrome console if you see an error that looks like this with all of your xml code here it's very likely that there's an issue with your xml somewhere some small mistake so let's go back and check our code so um ah okay that shouldn't be there for starters uh and let's check our fragment as well fragment definition chord dialogue i haven't closed off my dialogue properly let's save that so now let's see if that has had any effect there you go so check your xml um for small mistakes but here's our new say hello with dialog button referenced with the i18n file now if we click it there you go this is our little fragment with hello ui5 working perfectly so now in this section we are going to create a fragment callback and what that means or in this example when you click this button we want to have a little button here that says close this dialog and to do that we need to connect this fragment to the current controller that we've got so it doesn't have his own controller but it can be connected to our current controller and so you can open it and close it as you as you want so let's go ahead and head back to the code and now that we're here let's go to our hello panel controller and where we've loaded our fragment let's connect it to this controller and by doing that we just call controller this and make sure we have our comma there then we need to create the um the function or the event that says when you click on close close the dialog so let's find the end of this and let's create our on close dialog event and that is a going to call a function with no importing parameters and it's as easy as going this by id hello dialog dot close there we are let's do some formatting perfect now let's go back to our new fragment and in the dialog we are going to so within this dialog you have and obviously you just need to read the documentation to see where i found this but um you can effectively add a button in here so the way you do that is you call begin button oh sorry i just need to close off the dialog dialog so now within the actual dialog itself within the initial attributes that we call i'm going to say begin button and in there i'm going to add my button and that button oops that button is going to have the attributes text equals and we're going to reference our i18n file and we'll call this dialog close button text and let's wrap that up so let's go ahead and add that to our i18n file which is over here and we'll just call that okay for now so that's fine then the next attribute is going to be the event when you press so the press event and that's going to be the on dialog event and that'll be reference now that is referenced in our controller now that we've actually connected the controller so that's fine dialog fragment is fine let's check our controller here that's all good so let's go ahead and check it ctrl f5 and if we click on say hello with dialog so let's have a look um let's press f12 and have a look aha it looks like another xml issue so let's close this and go back to the code and let's have a look at our dialogue fragment so we've got our dialogue that's all closed with our attributes begin but ah i haven't closed this off so uh let's go ahead and close it off so first thing we need to close off our button and then we need to close off our begin button begin button now that might this sort of thing might seem like a silly mistake um but when you are writing uh massive views and nesting them and calling fragments these um will pop up from time to time so it's very important to double check everything um and that looks good so let's go back and test ctrl f5 hmm still seems to be the same issue so we press f12 looks like it's still the xml so let's go ahead and check the code again and see dialogue i haven't closed off the top portion of my dialogue again silly mistake there we are so let's go ahead and check for a third time and see if this works refresh click on say hello with dialog so um it looks like we have another issue um so let's take a proper deep dive and see what the problem is um hmm i've made a spelling mistake here this should be close button let's go and change that here as well save and save so dialogue everything begin button button that's closing clock again silly mistake this should be there i'm pretty sure that was the main issue so let's let's go ahead and have a look and refresh it again and see if we click the say hello dialog there you go so again check your xml but here's our dialog fragment and if we click ok it closes it and that's it working great right so now we're going to move on to section 18 icons sap ship with quite a wide variety of icons to choose from and in this section we are going to put them in two separate places so you can see how they work so the first one is in the hello panel we are going to add an icon to the button to one of the buttons rather so in your first button your hello dialog button let's go underneath id and just like any other attribute we're going to add icon equals sap icon and this naming convention is found um in the sap icons sort of web page which will be linked in the description sap icon um forward world and we can go ahead and save that then let's go ahead and add an icon to our fragment and we can also adjust the size so let's go ahead and just before the begin button again referencing the documentation when dealing with dialogues and fragments and all of that we would add in a content section and close that off and then under this content section we would call a core oops core icon and now you can see where the alias has come in so this is coming from um the set.ui.co library and we've referenced it here with xmlns but then we've given it an alias of core so when we reference it in the xml itself we have a prefix of core and then we add our icon so now you can do this with all sorts of different libraries as you bring them in like zap.ui.table etc so how do we have that let's add some attributes so source will be sap icon and this one will be the hello world icon now we can tell it the size and we'll give it a size of eight rim and we'll give it a standard sap class and we'll set the margin to sep ui medium margin and let's go ahead and close that off properly so now that we have that let's go ahead and check so we're going to go ahead and refresh and there's our first icon in the button the little world and if we click there's our second icon so in step 19 with the reuse dialogue section we're going to expand our reuse concept and invoke the dialogue at the component level so what that means is if we take a look at our controller here this section where we load up our fragment we want to take it and we want to add it to the component because if we didn't we would have to rewrite this every single time in each of the different controllers if we wanted to reuse this in different parts of the app so by taking this and putting it directly in the component file here we can reuse it wherever we want and only run the code once so let's go ahead and do that the first thing we're going to do is in our component file we are going to reference our um our hello dialog javascript controller which we'll build in a second but let's go ahead and add it as a module at the top so now what we're doing is we're referencing the root folder and we're calling the controller folder itself and inside there will be the hello hello dialog file which then we will bring through into our constructor function here so let's go ahead under the controller and create our new file called hello dialog sorry um we need to create a hello dialogue dot js oops if i could spell hello dialogue dot js there we go that is everything we need there so we'll come back to that in a second let's go ahead and continue with the component um and that'll make a bit more sense now so now that we're in the component we need to create the or call the dialog rather and also add an exit function and exit event handler as well so let's call set dialogue and then it's this underscore for so whenever you use underscore it's a naming convention for private methods in javascript so hello dialog and that's going to equal new hello dialog and we're going to pass it in the get root control so get root control that is fine so um let's just set that so we've set this in the um in the init function so it's going to be called when it initializes then we need to add an exit function an exit event sorry with a function that says this dot private method hello dialogue dot destroy and delete this dot underscore hello dialog to obviously really clear or clean things up so let's just format that lovely um so now that we've got our exit function let's add our open hello dialogue method sorry my spelling is not fantastic so on open hello dialog function and within this we're going to call this private method this dot private method hello hello dialogue dot open brilliant so we've got everything we need set out in our component now what we're going to do is we're going to take all of that logic that we had in the uh where is it here in the jalapeno controller and we're going to expand it and make it reusable in its own javascript file here so um we start off with sap dot ui dot define dot ui dot define and we open that up and we bring in our modules so we've got um the sap slash ui slash base managed object which will make sense in a minute and this is sap slash ui core slash fragment brilliant then we're going to open up our function here and we're going to pass in the r2 modules and pass in fragment brilliant so now that we have that in there we can open this up and as always use strict then we are going to just like we did with the controller except this is now a managed object it's return managed object dot extend and we're now going to extend our hello js file and that is referenced at sap dot ui dot walk through dot the controller folder and hello dialog for the hellodialog.js file and once we're in there we can open that up and we can start off with our constructor and that is going to be a function that brings in the view which we which we would have passed in uh and i'll show you that in a minute now but that's a parameter coming in and we reference and we we create we allow this private attribute so this overview is going to equal the view we just brought in which is over here then we're going to specify our exit function our exit event sorry and then this is function and this is going to be delete this underscore overview perfect then the next one is going to be open and this is where we're going to add all the logic from the the previous controller so under open we get function not passing thing in and we're going to create our view variable which is view overview and we're going to pull this from our private private attribute overview oops now just like we did before we're going to create the dialogue lazily and if o view dot by id just like we did before hello dialog so if it's not there this buy id hello dialogue that hello dialog is not there open up our if statement and we create our um fragment controller variable controller fragment controller and we open that up and that's on close dialogue and we pass that function and so it all makes sense in a minute and it's quite a lot to take in as we go but just stay with me and dot by id hello dialogue close great so we've got that there that's our fragment brilliant now we're going to load the xml fragment asynchronously asynchronously just like we did before a synchronous xml frame and again fragment dot load and in here we're going to pass in the id um which is from the just from our view variable dot get id the name is sap dot ui dot demo dot walk through dot view dot hello dialog and that is that again is our folder structure so it's referenced in the view folder in the hello dialog fragment and then we give it the controller we give it a controller rather and that comes from the o just like we typed above the o fragment controller which is over here remember that and once we've got once we've fulfilled that promise then function passing in the dialog the dialog above giving just giving it a name in the param in the importing parameter here and we're going to connect the dialog to the root view of this particular or i'm just going to say of the component because there's only one component of the component models and life cycle lovely and so we call overview dot add dependent dialogue and a dialog dot open now that we have that there we can run our else statement if i put that in the wrong place where's that end uh if i put that if um there we go my apologies else overview dot by id hello dialog open dot open and let's go ahead and save that else else else no we don't need that close that and let's just format our document brilliant so we've got everything we need here um now let's go ahead and reuse it so the first place first thing we're going to do is we're going to put it back um in the hello panel controller where we used it before so the functionality will be the same then we're going to add a little button at the top right which will also reuse it and you can see how easy it is and again there's a lot of code here that i'm going through um if it doesn't make sense just keep rereading through it rereading through and follow the chain of where things go and it will make sense um so i really encourage you to take the time to really really understand this because if you can get your reuse components all running through the component file you've got yourself a pretty robust maintainable application so let's go ahead and save that and let's go back to our hello panel controller and we are going to get rid of pretty much everything else and all we do so now on open dialogue when that um event is called all we do is this dot get owner component calling the component get owner component open hello dialogue that is literally it so this open hello dialog sits here and that runs through our whole process that we've just spent all this time putting together so we can go ahead and save that now let's go back to our um our application controller which is the controller assigned to the apple kind of just so you've got your shell and then your app which you'll see at the top line let's go to where is it here so before we add it in the controller let's go to our app view and inside our page we have our content section and now we're going to add header content so header content and close that off edit content and in here we're going to add a button and we're going to give that an icon of sap icon hello world and then we're going to call the press event and tell it to call the on open dialogue event which we'll specify in the app controller shortly on open dialogue so let's go ahead and take that name so make sure it's correct and again don't forget to close off your button or any of your controls go ahead and save that um so then let's go back to our app controller and all we're going to do is on this event let's just place that down on open dialog call our function and in that function just like we did in the other controller this dot get owner component getting the component file uh or getting the instance of the component rather i suppose it'd be more correct hello dialog and there you are so this event um is whichever event you have in whichever of your views or controllers or whatever it is all we've done is we've allowed us from anywhere in the app instead of repeating all of that code to just call this to get our fragment and now that we've done that let's go ahead and test it ctrl f5 to refresh so first things first let's see if our button works all right it's not working so let's press f12 and see what's what cannot read property of open in the component so let's go back and check our component and see so open hello dialogue this dot hello dialogue ah spelling mistake again so let's go ahead and save that that should probably work now refresh right that's working no it's not closing when we click the ok button so let's have a look controller hmm controller so let's see there's probably an issue in our fragment perhaps let's see so let's um see i probably typed in the controller at some strange point so let's quickly control law search that aha there's the problem so um i've spelled incorrectly again so if we go ahead and save that and let's close this and refresh and try one more time brilliant so that works lovely let's try our new little button here reusing it there you go now that we have a good structure for our application um let's go ahead and add some data so now in section 20 we're going to look at aggregation binding and what that's going to do is we're going to add some json data and we're going to reference it in our view and show a list of invoices it's a as simple as that so let's go ahead and create our data and we're going to do that in our web app directly and we're going to create a file called invoices.json and there's quite a lot of data here so i'm just going to copy it across which you can do the same um directly from um either the github repo or you can do it you can pull it straight from the sap uf5 walkthrough whichever suits you so here we've got some data product name quantity extended price etc etc now what we're going to do is we're going to reference this data in our manifest and create a model there so let's just go ahead and save this we don't need it anymore now if we go and find our manifest.json file and if we look under the sap ui5 section models what we're going to do is we're going to create an invoice model and we're going to tell it what type of model it is and it is a sap dot ui dot model.json.json model whoops json model and the uri or the reference to it in our folder structure or the location in our folder structure is straight in our root web app folder so we just reference invoices dot json which is where is it yet which is you see it's just above invoices.json so we can go ahead and save that now what we're going to do is we're going to create an invoice list view and then we're going to reuse or reference it in our app specific view so let's go ahead and go to our view folder let's just close some of this up underneath our view folder we're going to create a new file called in voice list dot view dot xml then in here just like we've done with all of our others we're going to open up our mvc tag view and we're going to reference xml ns and we're going to bring in our sap.m library and our mvc artifacts as well so xml ns again using the alias and just like before sap.eui.com.mvc lovely so let's just close this off mvc view brilliant so now that we have that we are going to open up a list control and that's going to have some attributes starting off with header text and we're going to pull this again directly from our i18n file following following the naming conventions there and let's call this invoice list title and let's go ahead and um as we go along add it to our i18n file and let's give that a let's just make sure we know what we're referencing here invoice list inv oh i i apologize and this is just going to have a title of in voices brilliant so let's close that and now if we go back um to our attributes let's give this a margin class of sap ui responsive margin which i use quite a lot actually responsive margin yes that's correct we will set the width to auto working in tandem with the responsive stuff here now comes the aggregation binding part and all we do is we call items so the items in your list this could be a different attribute depending on what control you're using this particular control uses items so again read your documentation but the items are going to be from our model and we're going to reference our model invoice slash invoices and so what that's doing is our invoice model which is um available here because we put it together in our manifest.json file and we're calling the invoices um which are over here so the invoices are is the is the um the json object effectively and inside of that is all of these aggregated items which we're then going to display so that's how we reference it there now once we're finished with that let's just close off our list here we now want to decide how we want to display those items and to do that again referencing the documentation we have an items control and let's just close that off and inside the items control we have something called an object list item and so um let's just put it in and i'll explain shortly object list item and we're going to give that a title and that's going to be invoice quantity and oops invoice oh sorry i'm uh referencing that so now we're chaining these two together invoice product name so what we're doing is now that we have our items available we want to display them in the item section as an object list item and the title is going to be a combination of the invoice quantity and the invoice product name so go ahead and save that and that'll make much sense when we actually see when we actually see the output so now that we have this let's go ahead and put it in our app dot our app xml view here so here's the first one we called and you guessed it we're going to call the other one in the exact same way mvc xml view and the view name is going to equal sap dot ui dot demo dot walk through dot view dot invoice list in voice list close that off and now let's go ahead and test it refresh all right it looks like we've run into an issue so let's press f12 to get into the console um nothing particularly clear here so let's go back and check what we've got so let's have a look object list item invoice quan there's a spelling mistake excuse me quantity quant it yep that's correct but i don't think i don't think that was the issue let's check our manifest ah needed to add a comma between the section and the section i apologies so that should fix it let's refresh no looks like we have an issue with our xml in our app view so let's take a look there view name aha quotation mark is in the wrong spot let's save that pretty sure this will work now and there you go so um here's your list of invoices all laid out nice and neatly here this is the quantity and the name with a little x there just as we defined in our view so the next section um we're going to move on to is number 21 and that's data types and here what we're going to do is add on um a currency value and pull it directly from our model and so if you had to look in the json format you'll see that the quantity and price is in this sort of very simple standard format what sap allows you to do is to set um these as currency values um based on locales and and that sort of thing so we're going to go ahead and apply those uh that formatting and those data types on top of the json model values we've got here so the first thing we need to do is we need to find our invoice list view and what we're going to do here is we're going to attach this to a controller which we'll create shortly so we're going to specify the controller name and that will equal sap.ui.demo.walk uh walk through dot controller dot in voice list brilliant so we've referenced that so let's go ahead and just create an empty controller for now um dot js lovely so we'll get back to that in a second now in our object list item where we had our title specified we are now going to add or we're going to include one of the attributes which is specific to the object list item the number and once we're there we're going to add the data type and formatting so we're going to start off with the parts attribute and in here we're going to specify the path to the value that we want to deal with so there's two important points here the first one is we're going to grab the the invoice extended price and then once we've got that we're going to add the currency but in order to do that we need to add a currency model to our um view and to our controller itself so we're going to do that shortly in the controller but just so you know where it's coming from it's not coming from the json model itself the invoice json model rather so it's coming from view currency and that all looks fine then we're going to tell it what type so the data type and again you can check the documentation for what types data types you have we're specifically going to use the currency data type from scepter.guide.model and so whoops let's just specify it like this sap.ui.model.type.com currency and we're going to add some formatting options so format options and we're going to show we're going to tell it not to show the measure which is fine false and um that's all good so we have that there that's right and the number unit is going to be the uh currency symbol itself which comes from whoops to reference this correctly view currency all right so now that we've set the formatting for the number and the number unit which are all attributes of the object list item let's go ahead and jump into our newly created invoicelist.js controller just like all the others sap dot ui dot define and we're gonna pass in the two modules the first one is controller and the other one is json the json model so sap dot uh slash ui slash core slash mvc slash controller and the second one is the sap slash ui slash model slash json slash json model brilliant then we open up our function and we add in the controller oops and the json model and once we're inside here we're going to use strict strict javascript checks and we want to return just like all the other controllers return controller dot extend referencing this particular controller sap.ui.demo.walkthrough.controller for the controller folder and invoice list and now that we have that we can go ahead and add the on init event um we want at that event we want to call a function and in this function we want to create a new json model uh with the currency and the euro for example attached to it and then we want to set it to the model so that um we're able to call it at this point that's why we're creating that's effectively why we're creating it so create a variable called ou model that's going to be a new json model and that has one um value called currency euro because why not you can obviously add any value you want and once we've got our model we're going to say this dot get view dot set model and we're going to say overview model and we're going to give it a simple to an easy to read alias that we'll remember just called view so again setting your model and then giving it an alias so you can refer to it using this alias in your view which we've done here is our alias so let's save that save that perfect now let's go ahead and check ctrl a5 all right let's take a look and see what the issue is um failed to load invoice.controller.js from ah it's a naming issue so what i've gone and done is i haven't called this using the correct naming convention it's actually invoicelist dot controller dot js that's very important and while we're here let's just double check our controller is actually um functioning properly so function controller json model return controller dot okay another spelling mistake that's extend except.you ought to demo that walkthrough controller invoice list fine our models there this.getview aha missing the brackets very important so let's go ahead and save that and rerun that should probably fix it let's see if anything else comes up no let's check again what's gone wrong and caught in promise something's gone wrong in the xml so let's check so object list item title aha it's supposed to close off the xml control over there again silly mistakes but they will come up quite often so now let's go ahead and refresh again and there we are it finally works so now we have our 87 10 6.85 and then from the other model we created in the newly created controller which we needed to rename properly with controller init in the name we've added on the euro so there your prices are now we're going to move on to section or step 22 expression binding now expression binding is incredibly useful for adding little components of logic to your various attributes in your xml in your ui5 controls to determine whether or not something needs to happen so in this example we're going to take the um we're going to take the object list item and attach an expression that says if the number is the extended price is greater than 50 give us a number state of error or give us another state of success depending on the outcome and that attribute error or success will determine whether or not the number state is green or red and consequently whether or not the actual number in the output is green or red so um it's quite straightforward and very useful once you get going and again you can apply this to pretty much any attribute you have obviously within reason so um and again check the documentation on expression binding but once you once you understand it it's fairly straightforward so we are going to open up with an equals dollar sign and the dollar sign is going to be used to reference the invoice extended price item or value then we're going to use shorthand in javascript to say if this value here is greater than 50 uh question mark in quotations error so if this evaluates to greater than 50 set this as set the value of number state so if this runs as it is error will basically be the value of number state which is what the attribute would be expecting as one of its possible values or if not if the extended price is less than 50 the value of number state must be success and in doing so it will be green so this is specific to this object list item but obviously you could just change these values depending on the control that you're using so if invoice extended price is greater than 50 um evaluate if true error or put the value put the text error in number stage or if it's false put success in number state so if we save and take a look at our code again i mean take a look at our app again refresh okay we've run to a small issue number state ah there's my spelling again something you will probably come up with quite often so we've spelt that correctly hopefully now if we save it and refresh there you go above 50 evaluate to error and error means it needs to be red that's the number state and green if it's um evaluates to false and is less than 50. there you go now what we're going to do is we're going to add something called a custom formatter and a custom formatter is just a javascript file that handles slightly more complex formatting options so what we're going to do is we're going to add underneath each of underneath the euros symbol here we're going to add the invoice status and we're going to format it accordingly so let's go ahead and create our actual new formatter and so what we're going to do is we're going to create a new folder and a web app called model um and normally you would have a model folder but in this case we don't so we're gonna we're just going we're just going ahead and creating it um once you've got your folder you then add a file called formatter.js and uh just like your controllers um when you want to pull in this particular object you oops you open it up with sap dot ui doctor phone and we're just going to run straight into our function and don't forget to use strict and we are going to return we're just going to simply return our logic here and so um the s we're going to obviously um status text we're going to deal with the status text in this particular part of the formatter so we're going to run our function with s status passing in the status um into the formatter itself then um we need to get the resource but so again we're referencing the resource bundle because um this is the um where we're going to reference the actual invoice status and so we can translate it etc etc so resource bundle and that's equals this dot get view dot get model and we're getting our i18n model dot get resource bundle now that we have that whoops i just need to close that off and get rid of this now that we have that we're going to use a javascript switch status oh sorry a javascript switch statement rather for the status and we're going to pass in the status we brought in and we're going to start off with case hey and we're going to return resource bundle dot get text invoice status hey so we're going to pull that back in then we're going to i'm just going to actually i'm going to rather type it out because we're not wanting to make any more mistakes case b return resource bundle dot get text invoice oops invoice status b and case c return resource bundle dot get text invoice status c and closing that off with default return a status brilliant so let's just format that lovely so case a give us back this from the i18n file case b status b kc status c if it doesn't fit any of these just simply return the status so now that that's done we need to go into our invoice list controller so we can get rid of all of this stuff and here's our invoice list controller now we need to bring in our formatter and to do that we reference the model formatter and we just go ahead and add that in there and above the on init function we just simply pop in our formatter and reference the formatter perfect so we've now got the formatter available making the formatter available through our controller to the view now let's go and find our invoice list view so we don't need component hello dialogue with our view invoice list view good stuff and again we're adding this in the object list item and we're adding a control called first status also from the sap.m library and we can close that off status and we're going to add another control of the control within called object status and that's going to have an attribute of text equals and now this is where we add our logic so i'm closing that off just to make sure now here we're going to specify the path and the path is invoice status so that is the uh where's our invoice list view so here's our status this is what we're referring to with a b and c um so that comes out of there and once we have that we obviously call our formatter and that's the formatter and the formatter obviously has the status text and that is what we are going to reference uh where's my view over here so formatter the formatter object itself and the method here or event and we can close that off save so we've got our first status control here with an object status here the text that it's going to show is going to come from the invoice model and specifically the status field and the format we want to use is located here and that's the method we're going to call inside of it and now that we have that let's go ahead and jump into our i18n file and we are going to just go back to the uh with the formatter we're just going to take these and add b and c equals so invoice status a it's going to equal new invoice status b is going to equal in progress and invoice status c is going to equal done so we should see these in our front end application so let us go and have a look and we go ahead and refresh all right so we've popped another error out let's have a look at the console all right it seems to be an issue in our javascript file so let's go and have a look at that so we've got our first status here that's fine that's all closed or aha so if you look at the object list item it runs all the way through to here but because we're now adding in another separate control we need to close that off like that and we need to wrap it up in a full object list item so instead of the control running all the way to this point because we've now added a separate set of aggregated controls here we have to close it off properly just like we would normally now that should fix things let's have a look control f5 all right it looks like we've got another issue so let's check the console and it looks like a spelling mistake so let's go back to the code and have a look here with our formatter there we are let's just double check resource bundle resource bundle that looks fine so let's go back and check ctrl f5 there we go working now so there's new in progress in progress and done all of our status is loaded here and run through a separate javascript formatter in the next section section 24 or step 24 we are going to look at filtering and we're going to look at an example of filtering uh through a search bar a text search bar and so what we're going to do is we're going to add the search bar inside the um or just above the list of invoices and then we're going to run a event on the search attribute um and in the invoice list controller we're going to add the filter there and apply it so let's go ahead and head back let's just close some of these tabs getting a bit cluttered and let's go ahead and open up our invoice list view and in here we are going to first of all find our list and we need to give it an id and we'll just call it invoice list and now that we have that we are going to add a control called a header toolbar and again from the sap.m library we can just go ahead and add it so it's called header toolbar and let's close that off now that we have our header toolbar we need to add another control underneath it called the toolbar and close that off and within the toolbar we are going to add three controls a title a toolbar spacer and a search field so we'll have our title spacer and the search field on the right hand side so let's go ahead and add our title and give it the text again from the i18n file invoice list title and let's just double check that that is in our i18n file yes there it is there so that is fine we can go ahead and close that off let's add our toolbar spacer perfect just to close that off and now let's add our search field with a width of 50 50 should be fine and now we need to uh in the search attribute so or search event rather we need to call our on filter invoices event and let's head on over to our controller which is where this will be triggered so in our invoice list controller we're going to need to bring in two more modules the first one is the sap slash ui model slash filter and also from sap slash ui slash model filter except we're going to bring in the filter operator as well operate all yes then let's bring it into our constructive function perfect and now that we have that uh let's go ahead so here's our on init event and we're going to run uh this on filter invoices event afterwards on filter invoices and that's going to be a function and now we're passing the event so we're going to pull some data from the actual event that is getting triggered and that'll make sense in a minute so we need to first first build the filter array and and what that means is we need to build um a filter based on whatever query has come out of that search bar so whatever person types in the search bar needs to be put into a filter query and then applied to the model itself so we start off with oops start off with a variable called a filter and that's blank then we need to create our query and now we're referencing our event and we're getting a parameter from the query so we're getting the param the parameter the query parameter itself and then we say if yes query so if there is something in the query a filter dot push so standard vanilla javascript push a method here new filter and in this filter so now this is the the sap part the filter we're going to call product name so we're telling it the product name is what we want to filter then the next thing is to say the filter operator dot contains so now the filter operator contains is saying it must contain the values that we've now that whatever they've typed in the search bar itself and we're passing in the query perfect and now we need to do our filter binding so we create our first variable which is the list and we get reference to this by this by i d in voice list then we need to get a reference to the binding itself so whatever is bound to this list i.e the model and so we'll call this o binding equals o list dot get binding items i remember the when we bound the model to this list it was bound in the items section or attribute and so we get a reference to that binding and what we do then is say o binding filter and we pass in the filter and it's as easy as that so um we create our filter over here and we push the query into the filter itself so now this af this a filter has the filter that says the product name must contain whatever is in the search bar we then get our list we get whatever is bound to the list in this case the invoice model and we tell it binding filter according to this filter and if we go ahead and save both of these and refresh we should now be able to type something like pineapple and it filters based on pine and if we had to remove that let's try milk and otherwise there you go there's your filtering so now following on from the previous step filtering we're now going to look at sorting and grouping and we're going to do that in the invoice list view itself so we're going to sort it and then eventually group it but we'll sort it first and all you do is you find in the items attribute we add a little bit more logic here to allow it to do that so the first thing is we need to specify the path and that's obviously our model here and the invoices inside that then we need to add a sorter and inside the sorter we reference a path to whichever column we want to sort in this case the product name for example but you can sort by any column and let's just open that up and save that and it's as easy as that so we've got the item path we've got the sorter we're telling it what to sort by product name column and if we go ahead and save refresh our page you can see red c m p s all sorted and to group it we are going to go back to the code and let's change this to shipper name comma group attribute and we set it to true it's as straightforward as that so if we go ahead and save and let's pull up the application refresh there you go sorted and grouped by shipper name right so in this section step 26 we're going to look at a configuring a remote odata service um but because we're running on our local machine we are going to configure it and run it to an era called a cause area or crossorigin resource scripting something along those lines and it's just something that comes with local development in ui5 and you wouldn't normally run into this issue in something like sap cloud platform because you would configure your remote edit remote odata service in a destination inside cloud platform and then reference that from your app so if you're working in the web ide that's fine you can go ahead and create your destination and connect it if you know how to do that that's out of the scope of this particular course so um we are just simply i'm just simply going to show you how to do it and run through the steps so you can see how it's done and then we're going to move on to step 27 where we'll configure a mock server which is a bit more complicated but it's the best practice and also it's a great way to help you understand help you to understand your back end service better and prepare your app etc without also without putting any additional resources on top of your current live remote service that you might be using so let's go ahead and jump into the code now inside the manifest there are two things we'll need to do first one is set our data source and the second one is create the model using the data source so we're under sap.app and under data sources we're going to call this invoice remote the uri would be whichever url you have for your remote data service in this case we are going to pull the um the northwind service which is in the i'm just going to copy it across from the sap walkthrough which is where you can find it then you would need to add another attribute called type and it is an o data type then under settings we're just going to go ahead and add the oh data version and the version is 2.0 and now that we have that um we can then take this data source and build a model on top of it under the sap ui5 section under models where we've got our a i18n model and also our local model which we'll replace and then put back so we can delete that and we just call the data source attribute and it's as straightforward as that so if we save and we go back to our application and refresh obviously it's going to fall over and if we go to the console by pressing f12 you can see here is this cause error that i was referring to um so this will come up on your block if you're obviously building this on your local machine so you the um you can on the sap walkthrough step 26 page it gives you ways to overcome this that's out of the scope for this course because at the end of the day we want to run with our mock server and build our app based on that so for now we're going to ignore it please feel free to go ahead and use it if you want otherwise next we're going to move on to creating a mock server right so now what we're going to do is we are going to move on to step 27 where we will configure our mock server and all mock server is is a little bit of javascript and we would run a instead of running our index.html file we would run a mock server.html file with a few minor tweaks and it's just a case of taking for example our invoice json data which we'll actually remove from here in place in a another folder and we'll just reference the same data but in a running actual mock server to to sort of simulate a proper backend service and so obviously this is sap best best practice and it's highly recommended to do it this way so you can run your stuff locally without touching any data or having to rely on a remote service as well which could be an issue at times so let's go ahead and jump straight in and create our indexed html well our mock server html file to do that um we're going to create a we're going to add to our folder structure and doing so we'll clearly separate the testing logic from everything else and this might look quite complicated as we go along don't worry follow along as best you can get it working and then after that go back and check and see how things work and connect and and how they run through the different steps so just bear with me in terms of the complexity at this point it's very much worth it once you once you get going so under the web app folder we're going to create another folder called test and within test we are going to add our mock server dot html and we are going to find our index.html and we are going to literally just copy all the data across for now then once we have that we can start making our changes and distinguishing it from the the actual index.html file we'll add something like uh sap a ui5 walkthrough test page uh then we just need to adjust our folder structure um our root folder structure here and then we just need to change uh the module here to be sap slash ui slash demo slash walk through slash test slash init mock server so this will be our javascript file where we'll um start our process uh which will make sense in a minute so now that that's all done our htr mock server html page is complete now under the same test folder we're going to create another file called you heard it init mock server dot js which is what we're referencing from the html file and in here we are going to call sap ui define and we are going to call um a another module or file from our local servers folder which we're going to create in a second local service mock server and once we're in there we're going to open up our function and we're going to pass this in and now that we're in our function as always we need to use strict for our javascript and now we're going to initialize uh the mox server and we're going to do that by calling mock server up here mock server dot in it and then we are going to in initialize the embedded component on the html page which will make sense in a minute and that we run through just like we did before pulling in our component zap dot ui dot require sap slash ui slash call slash component support so now we want to make sure our component runs properly um then we are going to move on from here now that that is complete underneath web app we're going to create another new folder and create our local service so we create a folder called local service and under there we want to first of all add our mock data which is the json data that we've been using for the invoices so we're going to create another folder called mock data and under here we're going to create a folder i mean a file called invoices dot json and we're going to pull everything from here put it there and that means we can go ahead and delete our invoices.json file there because we're going to be pulling it from here inside of a box server so we can go ahead and save that then underneath local service again we need to create a another file called r metadata dot xml file and this metadata file is it's going to look quite complex and i'm effectively going to just copy it straight across all this is is deciding the skeleton or the shell of your data so um this because we're running a mock server this sort of information is now required to build the um the json model output and so you'll see things like your keys the different property attributes i'm not going to go through too much detail here you can have a look and understand how it works um and it'll eventually make sense but it's effectively just your your skeleton your metadata skeleton so that can sit there and that's all fine now again under local service we're going to create another file called mock server dot js and again this mock server js dot js is what's coming into our initialize javascript section here so now now that we're in our mockserver.js file we can open up our sept.ui.define and we need to bring in uh two modules uh the first one being sap slash ui core slash util slash mock server and the next one is sap slash base slash util slash u r i parameters and then we need to open up our function bring in those two modules here and open up our function and as always use strict perfect and now we want to return and inside our return or what we're going to return rather is our init and we're going to open up our function and now we are going to create our mock server and we're going to create a variable called o mock server and that equals a new mox server and the root uri is going to be the northwind url so this is almost like our pretend url that we're going to call and this is just referencing how we would normally create our service but then obviously we will actually reference our um our mock server data instead so um that's all fine there then we need to create another variable called uri parameters and this is going to be a new uri parameters and we're going to pass in our window dot location href brilliant now we're going to configure the mock server with a slight delay configure mock server with a delay and so we call mock server dot config oops dot config and inside here we call auto respond oops auto respond true and then we call auto respond after autorespond after and we call o uri parameters dot get server delay to actually add our delay in and we put that at 500 i think it's milliseconds whatever the case may be then we are going to simulate things so from here we need to collect we need to grab our path rather so if s path our variable s path equals local service so this is the path to our local service folder and then we call o mock server dot simulate and we pass in the s path plus the path to our metadata.xml and then we also give it the s oops the s path plus the pathway to our mock data mock data and then from there we go ahead and start our mock server omar server dot start and that's it we go ahead and save and now we can go ahead and test uh it seems to not be working ah because we're still calling our original index.html file ah no so uh because it's located within the test folder again this is why it's important to separate your test logic from your um your sort of normal app itself is it's here and it's in here so it's quite hard to get to which means you have to purposely go to it and test it and obviously when you run your app normally it's an index.html file so if we click on that here we go it's working so now our localhost structure changes where we follow the test folder and we call the moxserver.html file and it's clearly separated from our index.html file which is best practice so there we are we are now running a mock server right so now we're going to move on to step 28 or section 28 um and that is unit testing with something called cue unit now so far we've added quite a bit of functionality and we probably should have been testing it or creating tests for each bit of functionality as we've gone along we haven't done that um but um that is something that um is best practice in pretty much every production app out there so um we're going to go through it and in this example we are going to go through a qunit unit test specifically for our statuses so if you look at the statuses here we're just going to run through a quick unit test for them i'm not going to go into too much detail because um there is a whole section dedicated to this and it's a little out of scope for this at this point so i'm literally going to copy and paste the code across and just explain things very briefly but this this is will need its own dedicated section so we're not going to worry about it too much at this point so the first thing we need to do is we need to create a a unit test to physically run through so we're going to create a javascript file so underneath our test folder we're going to create a new folder called unit then under unit we're going to create a new folder called model and in our model folder we're going to create a formatter dot js file which is going to house all of our actual test testing logic as it were so i'm just going to copy this all across and so um there's a few bits and pieces that are quite important but effectively um all that's going to happen is it's going to run the tests based on these parameters and all that it's going to do is return whether these are correct or not as it passes as it receives it back from the resource bundle and where it does that so let's just go ahead and save that where it does that is from a unit test html page which we're going to create now so now that we now we have the logic for our unit test we go back under the unit folder and we create something called a unit tests dot q unit dot html and this html page is going to be the sort of front end of our unit test so we've got a few scripts here that will make sense in a minute but otherwise the html page is fairly standard what is going to make sense now is this so we need to basically create the javascript file for this html and that's going to be also under the unit folder and this is obviously going to be called unittests.quit.js and in here we're actually going to run the call for our full test so um it's going to basically bring in the formatter test here that we've got here and it's it's going to run the key unit test so um again lots of detail here yeah it's it's uh needs to have its own section for running for the test but i'll let you guys read through this in your own time um but for the most part all we would need to do now is go to our app and under test and then we will go under unit and we would run the unit test cue unit html and you'll this is the page that you'll get back so this is the html formatting that you would have seen and here is each of our individual tests returning back um essentially what we were looking for so um again a more detailed section uh will be coming soon but for now this is the sort of basics you have an html page that runs off um that runs this little javascript file which eventually runs the actual unit tests in this file so now we're going to move on to section or step 29 integration testing with opa um so just like we did with the q unit testing sap has something called opa5 which you can use for your integration testing and sort of seeing how things interact in the front end and the example we're going to run through in this section is seeing if our little hello world dialog opens when we click it we know it does but we want the test to run that as well so just like the test before in step 20 28 i'm just going to copy and paste the code and sort of talk you through it purely because these into the integration testing just like unit testing has its own full section to go through um and can get quite detailed so we're not going to get too bogged down with it now because we just want to get our app working once it's working and running and we've been through this we can then go back and work on unit testing and integration testing so we yup so we're going to test the hello world dialogue and to do that we need to go back to our test folder and we need to create a new folder called integration and in the integration folder we need to create something called a navigation journey which will make sense in a minute so navigation journey dot js and i'm just gonna like i said bring the code straight across from the sap walkthrough so all that happens is we have a bunch of boilerplate code up here and we have some actions and these actions are basically going to simulate what happens in this case what happens when we click the dialog button and what should happen so this will make sense now when we call it from the next section so now we need to create a new folder underneath integration called pages and under here we're going to create a new file called app dot js and in this file we are going to copy in the code and all that's happening here is um when we describe our actual actions um it's it's just returning the dialogue effectively returning what happens when you click the dialog button and determining what is a success and there you can see we're asserting again just like we did with the unit tests i mean and then obviously our error messages whether or not the dialogue control was um anything happened in terms of the dialogue control opening or not um so again quite a lot of detail here for a separate section but this is roughly um sort of what it's doing now we need to create our html page and our our backup javascript file so underneath the integration folder again we're going to create an opa tests dot q unit dot html page and again copying across fairly standard html again this is going to bring up a similar page to the unit test before obviously oops obviously designed for the unit test itself and now we need to create one more file underneath integration and that is going to be our opa tests dot q unit.js and in here we're just going to start our unit test which is going to run those other two javascript files and obviously it's going to run that navigation journey which is basically this process and this process is going to run and call stuff from our app.js file here which is going to physically run the actual integration testing and decide what happens when it's what items are returned if it returns or doesn't give us an error message etc so we can go ahead and save all of these oh i've made a spelling mistake my apologies it's opa save that so let's go ahead and run the test so we can hop out of here and instead of a unit test we go under our integration test folder and just like we did before we call our html file and we let it run and the test came back the dialogue opened brilliant test passed so now in section or step 30 we are going to look at the debugging tools that sap have have created for ui5 specifically and they are pretty fantastic because as far as debugging goes um it can be pretty painful um almost like looking for a needle in a haystack so to have good solid tools to back you up can be really helpful so again in this section it's hard to go into detail because um you can have a million bugs and those bugs can look and feel completely different for different people um it also comes down to your experience with whether you find bugs quickly or not so i'm just going to run through a i'm going to break a simple item you can see it's already broken here but i'm going to go ahead and break it with you so we're going to remove this 10 euros here and we're gonna do it like this so we're just going to change that so it's not extended price it's it's a typical spelling mistake so um now if we go and refresh the app just like it did before the price has gone so this is very common and something that could come up so um to bring up the developer tools in in chrome you would need to install them so you can find them from the uh the chrome um addon store um and again all of these will be linked in the walkthrough itself um the sap walkthrough under the the step 30 so that's fine i've already got it installed so it's ctrl alt shift s and you get these tools that pop up and there's a whole bunch of stuff here you get technical information you have your control tree um different debugging parameters here a javascript trace if you want to run that you can run performance testing and all sorts of stuff so there's a lot to do here um but i mean if you wanted to use it in this case to fix this issue for example we can look through our control tree and we can come and look for our ob so obviously we're in our xml view and we've found our object list item and you can see we have um obviously a whole stack of information here in this case we would check our bindings to see what the problem is and we can see here's quantity here's product name and then if you look at extended price you can see the absolute path doesn't match product name and quantity for example so if i just oops if i just expand this you can see the absolute path looks like this same for product name here it's invalid because we haven't spelt it correctly so i mean this is something you could quickly scan through to see if you've if uh you know as a quick debugging process so now if we go back to the code and we found it we change it back and we go ahead and refresh there it's fixed and if we refresh okay we'll need to so you'll need to rerun this again ctrl alt shift s and under the control tree back to object list item binding info and you can see the extended price now has its absolute path so very powerful debugging tool from sap that you can use to hopefully help you in your any future debugging right so in this section section 31 or step 21 we are going to move on to the beginnings of routing and navigation and what we're going to do in this step is we're going to take our example and we're going to add the functionality that says when we click on an item navigate to a new page um and that comes with a um a bit of config here and there um including creating a new view um which is going to reuse our current controller and we're going to extend some of the logic there as well so um we're now getting into the nittygritty of what it means to have a sort of master detail style app but the detail is now sitting in a a new page or a new view so let's go ahead and build it and the first thing we need to do is jump into the code and we need to look for our manifest.json file and in here we need to look for the sap ui5 section and under there we need to find our routing section and if you don't have it you'll need to add it and then here we're going to start with our global config and so we are running with three sections here so i'm just going to lay them out for you so they make sense we've got the global config we've got our roots and then we've got our targets and these will all make sense as we go along so for now let's start off with our global config and the following attributes uh need to be added the first one is we need to call our router class um and that's going to handle all the routing from sap side sap.m.routing.router then we need to tell it that the view type that we're going to be using is xml again sap based practice then we need to specify the view path oops and the view path is going to be sap dot ui dot demo dot walk through dot view that's for our view folder that's what we're specifying there then we need to tell it what control the id of our control um and that's going to be the app so the initial where is it here so this app view and app controller over here is going to be where we're going to control all of the routing but that'll make sense um in a minute and control aggregation and we're going to set that to pages and we want it to run asynchronously so we set that to true perfect now that we've said that we can then move on to defining our roots so within our roots let's just fix this these should be square brackets so within our roots we need to create our to patterns and um what that means is um when we so just add the first pattern here so the pattern is the um this after the slash of your original url um if it's if there's nothing there we wanted to go to our overview page but if there's something there like detail or something like that this is where we're going to specify that so here's obviously blank then we need to give it a name and that's going to be overview and um we need to obviously tell it a target which we'll specify in a minute the target will be the overview page perfect now we're going to go ahead and add the next pattern while we're here and that's going to be pattern detail and the name of that is going to be detail obviously and it's target you guessed it detail and we're going to specify our target below so now under our target section um we're going to add um our overview and inside our overview we're going to give it some attributes and the first one is the view id now we're starting to link it with the views themselves the view id which is overview which we haven't created yet but we will and the view name is of course overview of the view now that we have that we can add the detail target so detail open our object add the view id and it's going to be detailed because we're now dealing with the detail view then we need to add our view name and that's going to be detail just like above brilliant so we've now specified these three sections in our manifest specifying the roots where everything needs to go and each of the targets that these rooting patterns are referring to so now we need to go ahead and create the views based on the urls that we now specify and we need to now initialize the actual router that way that we've got so we can go ahead and save that then again back into our component file and just underneath the set dialog we are going to create the views based on the url or hash and all we're doing is calling this dot get router dot inish initialize with the zed and that'll initialize or create our router that's going to control all this stuff so um now we are going to go into our view folder and we are going to create a new view and it's going to be called you guessed it overview dot view dot xml and in here we're going to open up our mvc view tag we're going to specify the controller and this is where we're going to reuse the app controller itself controller name calls sap.ui.demo.walkthrough.controller.app and we're going to add in our xml ns bringing in our sap.m library and we need to bring in the mvc artifacts directly from sap xmlns giving it an alias again of um mvc and that's sap dot ui dot core dot mvc and we close that off and let's close off the entire view tag him oops mvc perfect now we are going to pull in from the acceptor dm library the page control giving it a title from the i18n file oops from the i 18n file and we'll call that the home page title and let's go and quickly add that to our i18n file and um oh i think we already have it are there we already have it perfect we're not going to worry about that then lovely um so now that we have that we can go ahead and close that off and we're going to add our next control the header content uh we must make sure we close off our page as well and close off our header content perfect whoops now within the head of content we're going to add a button and we're going to give that some attributes the first one is the icon and that's going to be the sap icon hello world whoops hello world and press equals on open dialogue perfect so we can close that off and our header content is done now we are going to add our nested views under the content section oops close that off close that off and so we call our mv c xml view oops watch my spelling xml view and the view name is going to be sap.ui.demo.walk through dot view for the view folder and our hello panel and close that off and next we are going to add the invoice list mvc xml view view name equals sav dot ui demo dot walk through dot view dot invoice list perfect now that we have that we can go ahead and adjust our app view so our app view is effectively going to be um cleaned out so all that's going to be left is just the app class um so it's going to look like this and we can actually just close it off like that right so now that's all nice and tidy just make sure we save that and then now we're going to add our detail view so this is going to be called detail dot view dot xml and in here we're going to open up mvc view with our attributes xml ns sap.m and the mvc stuff xml ns mvc oops ui dot core dot mvc lovely close that off mvc view and now we're going to open up our page control and add a title equals i18n and in the itunes we're going to call the detail page title let's go and add that to our i18n properties so detail page and we'll just call this walk whoops walk through details perfect so let's continue adding our attributes um oh no actually that's fine um within the page so close off our page and now we are going to add a object header and the object header is going to have a title of invoice perfect so all that's going to happen is when we go to our details page we are just going to see um the text invoice that's all that we're going to do in this step um now what we need to do is we need to open up our invoice list and in here we need to add a new attribute to object list item that says when it's clicked do something and we're going to do that underneath the number state attribute and all we're going to do is add the um type type equals navigation ah i just need to add that there and so we're saying it's a the type of the object list item is a navigation type so that you can click on it and then we're specifying the press event to equal onpress which will now add to the controller so now we need to go to our invoice list controller and in here we are going to add a new event so here's our on init event on filter invoices event and now on press event run a function passing in the event so when you click you get a bunch of details and sort of things you need from the event which you most of the most of the time you'll want to pass through into this function and so this is where you'll specify that and we just called it event you can call it whatever you want really and now we're going to create a variable for our router that's going to be sap.ui.core dot eui component dot get router for this which is our app context and all we're going to do now is tell it to nav to oops detail that's it so again it looks fairly complex but all we've done is we've added in simple steps to get us to a point where we just tell it to move um between the different targets and patterns and it's just a case of accessing the router itself which we've initialized before calling the router using this and then asking the router to navigate to our detail page so let's go ahead and test just make sure everything's saved and let's refresh right so uh this seems to be an issue let's take a look at the console um file not found seems to be an issue with our xml let's have a look at the appview.xml i don't know what happened here but let's put back our mvc view and close that off and oh it looks like i forgot to put the id here as well um that's quite important we need to give this an idea of app so it knows um its id effectively of the um this particular app section so let's save and um refresh and see right there we go it's a good start now let's click okay this still seems to be an issue let's check the console uncle type error cannot read property interplay of undefined hmm let's go back to the code um so this looks fine so there's probably an issue in the manifest i'm i'm guessing so we've got our config roots pattern name target another spelling mistake pattern i'm almost certain that's the issue let's refresh there we go again check your spelling every single time even though i'm retyping everything out out it's so easy to make mistakes so double check your stuff and again it's normally the small mistakes that break the worst when you're running through this because you wouldn't have even picked that up in the debugger um that was just pure pure spelling there so now you can see we've navigated to the invoice page and um we can start adding some details from here so now we are going to move on to section 32 routing with parameters and what we're going to do is now that we're in this blank invoice page we want to display some actual information about the particular invoice that we clicked on and so we need to pass the context of that across and display it in something like an object list item or something like that so that is what we're going to do in this step we're now going to add some details to the detail page so let's go back to our code and the first thing we need to do is we need to find the um the roots in our manifest and we need to change the pattern and all we're going to do is we're going to add the invoice path to the pattern itself which will make sense shortly invoice path perfect so now that we have that we need to go ahead and create or add the details to our detail page so underneath our detail view the first thing we need to do is we need to add because now we need to apply some logic from the controller we're now going to add a reference to the detail controller so we reference the controller name and it's going to be sap.ui.demo dot walk through dot controller and detail for our detail controller in our controller folder now that we have that we want to add some more attributes to our object header um so we're not going to use an object list item we're just going to run it through the object header and so all that's going to happen is we are now going to reference um the um shipper name and product name and i'll show you where those come from now so we're just going to add the intro attribute here open up this and we're going to reference the invoice and from this particular invoice we're going to reference the shipper name and again from the invoice that we've clicked on we want to reference the product name perfect so we're going to see these two bits of information from the particular invoice that we clicked on so now that we've saved that we need to go to our controller folder and we need to create an invoice before we do that um before we clear create the detail controller um we need to go ahead and add the logic um or rather the path that needs to be passed across all the details that need to be passed across to the detail controller from the invoice list controller so if we go across here now this o event comes into place so as you press or click on the item it passes in the context with a whole bunch of details that we're going to use to now pass across so we're going to create a variable called o item and that's going to be o event dot get source so now we've got our source our item made up of the source from the event and then we need to now pass it across so we do that in the nav nav2 method here as we nav across to detail we open up over here and we say invoice path and we pull it from window and code uri component and we get that from oh item dot get binding context so we're getting the binding context and that's going to be called invoice or from invoice rather and we get the path and we want the sub string one perfect so we're now riding on the invoice path here and we're passing in binding context and we're getting all of our details from here which we're now going to consume from the other controller if that makes sense so now we can go to the controller folder again and create our detail controller detail.controller.js and now that we're in here sap.ui.define and we need to pull in our controller module and also our ui component so as always sap slash ui slash call slash mvc slash controller and we're going to pass in the ui component as well oops sap slash ui core slash ui component and we open up our function here passing in the controller and the ui component and i forgot the comma there perfect as always use strict and now again we are going to return the controller and that's extending this controller dot demo dot walk through dot controller dot detail whoops do not spell it in correctly detail and now that we're in here we can go ahead and add our controller functions first one being on init so when we initialize function and now that we're in here um we need to create a router variable var router equals sap dot ui dot core dot ui component dot get root term for passing in the application context and then we need to call router dot get whoops get root and we need the root for detail and now we're going to attach pattern matched and we're passing in this dot on object on object matched this perfect so this that'll make sense in a minute but in the meantime let's just add in our private method here and that's function oh event this dot get view dot bind oops bind element and the path is set to base path plus window dot decode uri component so don't worry if this looks complicated it will make sense when we read it back now events dot get parameter arguments dot invoice path and then we set the model as invoice so it looks very complicated and it kind of is um to a certain extent but all we're doing um in this section is we're just receiving the context from the um the previous from the on click event of that particular item and we're setting it over here and all that's happening is we're allowing we're sort of preparing it for our view to be able to um bind we have an aggregate have the aggregated binding attached to it so um it looks complicated but as you read through um it makes sense things like window decode uri component etc these are just parameters that you pass into this method so again it's all documented and all that sort of thing so if you really want to understand the detail you can go ahead and read up on it but for the most part it's it just does what it needs to do so now that we've got that we can go ahead and test so everything is saved let's refresh our app oh let's just go back there let that run right so it doesn't seem to be working um and if we look into the console we don't see anything so let's see how the binding is so let's run into our control tree and let's have a look at the details um right so there's nothing bound so perhaps there's something wrong in the xml let's go back and look at the code this all looks fine this controller was fine let's see if you see control spelling mistake again controller name sept.ui.demo to walkthrough controller detail right let's go back and refresh fingers crossed there we go it works again spelling mistakes but there you go here are your two details on your detail page right now that brings us into um section or step 33 routing back and history so um there's currently no way to or no button that says when you click here go back to the original page we have to use the back arrow in chrome so we're going to go ahead and add a back button and the logic that surrounds that so let's go back to our code and let's close everything here and the first thing we need to do is we need to open up our detail view and we need to add or show rather a nav button so in your page your page control has a attribute called show oops show nav button and we're going to set that to true and nav we need to add the nav button press event and that's going to equal on nav back right now let's go to our detail controller and add the logic to make that back button work so underneath the detail controller uh now that we're here um we can go ahead and create a new method and all new event rather nav back open up our function now we need to grab a few variables the first one is o history and that comes from oh i almost forgot we need to add the modules first apologies so the module we need to add is sap slash ui slash call slash routing slash history and we need to slot that in here and now we can obviously access that so history dot get instance and then we need to get the previous hash so we create another variable called previous hash and from there we reference the o history variable we've got and get previous hash perfect now we add our if statement and what we're saying is if the previous back hash doesn't exist we're going to run and get the history from the window itself otherwise we're going to use the router and navigate back to overview so we're handling both circuit both scenarios so this previous hash is not equal to undefined so if the previous hash is found or exists we just call window dot history dot go minus one so we can just effectively go back one step that's all that's happening then we're calling it from the window here um else if that fails for whatever reason we're going to use our router and that's router equals ui component dot get rooter so we're just getting our router for our context which is why we add this because this references our context and all we do is call heruta.nav 2 overview and set that as true so these are just parameters obviously remember we can pass parameters back and forth like we did with the when we went from the overview to the detail but we don't need to pass anything back because we're just going back to our overview page and that's it let's see if it works so we go back refresh let's follow our canned beans there's our back arrow there we go so now we're going to move on to step 34 custom controls now custom controls are beyond the scope of this course um but because we're going through the walkthrough itself i'm just going to copy the code across and just briefly explain what's happening you can obviously go ahead and create any custom controls you want and explore the functionality there for us we're going to keep that for a separate video so what we're going to do is follow the walkthrough and when you click on an item it's going to have a star rating out of five so we're going to go ahead and just simply add that and get it to work so the first thing we need to do in our controller is create a product rating.js file which is going to handle all of our logic and we're going to throw in all of the custom code there's quite a lot of it um and we're just going to save so obviously there's quite a lot going on here but effectively we're just using the different controls in sap and sort of gluing them together um into sort of a a sort of star rating setup kind of thing and so once we've got this file here you can go through it but we're just going to move on from here we're going to go ahead and save it and now we need to move on to our detail view and we're going to bring in this new control and to do that we call the xmlns and we give it an alias of wt and we call it sap dot ui dot demo dot walk through dot control and we can save that and all we do is we pull in the product rating um control here and we slot it in just at the end of our page and we can just format that correctly so we've got a product rating with its id some class attributes and obviously the change the on rating change event so what happens when you change your rating etc and now we are going to create the controller or rather we're going to edit the controller for the detail page and we're going to edit the following we need to bring in the message toast module over here and we need to include that over here and now that we have this detail we need to push across so what's going to happen is the rating is going to reset in this case so we need to make sure that we reset that rating as we go back and forth so it'll make sense um once we're there but we just need to add it to this so we're calling this by id the rating which is the rating control and we just want to reset it so when we um initialize our app and our controller it's just going to reset the ratings because this is just a test sort of test scenario and then under the on nav back call we're going to add the on rating change get rid of that and so all this is doing is um it's just basically going to show us it's going to show us a message here um and it's just going to run through the logic of the custom control and now we're going to add some bits and pieces to our css and all we're doing is underneath here and this is just some standard css which we'll see in a few seconds and just save that and in the i18n properties we are going to add a few more things so the detail page is just going to get the rating confirmation call here to the i18n file and we're going to add the product rating details underneath perfect so let's have a look and see if it works refresh right so let's go ahead and click on one and it looks like we've run into an issue it's got the path here which is fine so let's check the console fail to load sample you to walk through control r i've put the j the um product rating js in the wrong folder so let's go ahead jump back to the code ah here it is so what i was supposed to do was under web app i was supposed to add a folder called control and this was meant to sit here that was the issue so if i refresh there you go so we can go back click on canned beans and we can rate it fantastic there's a little popup there so again all of this is handled in the product rating js controller i mean the product rating control javascript file here so you'll you can pretty much do anything you want if you find the standard controls are not good enough you can have a look through this and see the logic and see what happens um and you could pretty much build anything you want if you find the standard sap controls are not really enough for what you're trying to do in your project right now in step 35 we're going to look at the responsiveness of our app and so what we're going to do is we're going to use a standard sap m table control to turn or to make the app a little bit more responsive so that it can deal with different screen sizes and we're going to do that in the view so let's go back to our code and we need to go to our invoice list control uh invoice list view sorry so let's just get rid of all this stuff so underneath our invoice list view we are going to um instead of using a list we are going to use a table control which also comes from the sap dot em library and let's just close that off and once we have that we need to go ahead and add two sections to it so we're still going to keep our header toolbar and all of that plus we've got all of our attributes for the table including our aggregation data aggregation binding rather so underneath the header toolbar here we're going to add the columns section and here we're going to specify each individual column that we wanted to appear so let's open up that control there and underneath columns we have a column binding so we're going to have a few of these column bindings and under here we are going to have a few attributes so the first one is horizontal align equals end then we're going to have minimum screen width so we're specifying the absolute minimum screen width that this control can be viewed in and that's going to be small and the demand poppin is going to be set to true so we'll allow that width is going to be set at 4 e m so these are just sort of specifics that we're adding but you can obviously change these to see what happens and we can go ahead and close that off and we just need to close off our column section and now we are going to specify a text control and the text attribute for that is going to be from our i18n file and we're going to set that as column quantity and so we can go ahead and add that in to our file for now so let's actually just get that started so this will actually go under the invoice list here and this will be called quantity brilliant so now that we have this text control in here we can move on to the uh the next one so again specifying column closing that off oops column and um we're not going to worry about any attributes in this column we're just simply going to call our text we're going to simply add our text control again with the text attribute i 18n oops i 18n and this is going to be column name so oops let's just make sure we close that off and we can take that pop it into our i18n name perfect no there we are then we are going to add the column status so again opening up a new column and here we are going to specify the minimum screen width as well and screen width equals small and demand poppin equals true so again this demand poppin is just saying that if the column if it's too small for the column to appear it's going to allow you to basically choose to see it if you want to so that's obviously set to true you can also set that in the table control as well to apply to all columns but we're going to do it in for each specific column and we're just going to close that off oops and we're going to add our text control text attribute and again i 18n and this is going to be column status and we'll copy that that here equals status make sure we save as we go along and just close all our text control there now we're going to move on to the supplier column and again we are going to set the minimum screen width screen width equals and we're going to set this to tablet so the minimum screen with it will show on is up to tablet so on the phone it won't on a mobile device it won't um and the demand popin is going to be set to false so we're going to remove that functionality so we can go ahead and close that up close up our column and we can add our text control with the text attribute calling i 18n and column supplier copying that to i18n properties and setting that to supplier oops and let's go ahead and close that and now we're going to add the final price uh final column rather which is price column and um we're just going to etch a line or horizontal align to the end so it's going to sit on the right oops column and close that off and all we're going to do is add the final text control with the text attribute from our i18n file 18n and column price i just need to change that as well because i haven't spelt it correctly um so that's going to be column supplier and that's going to equal price perfect right so now we have all of our columns set with all their different attributes depending on screen size and whether or not we can actually open the column itself with the popin and everything's referenced in our i18n file now we need to sort out our items and to do that we need to call something that is known as the column list item column list item so we can actually basically get rid of most of this um and then let's just comment it out for now so we can refer back to it if we need to so under the column list item we're just putting in some attributes and the first one is it's going to be navigation so that we can click on it and we're going to do press and obviously that's the on press event just like we've used before and we're going to close that off no close it all far here and uh now that we've got that we should close it off underneath perfect and once we're in here we can then call the um the control called cells we're going to specify what we see within the cells themselves close that off lovely so now we're going to add all of the bits and pieces that we had before so the first thing is we're going to add the an object number uh we've got to open that up properly though and the object number is set with our i18n file and we're going to call the invoice quantity notice we're doing this in the order of the columns so the first one is the quantity and we're setting this as emphasized infer sized as false right now we're going to do the next column but the actual cells and this is going to be an object identify with the title attribute of um apologies this is not the i18n this is now from our model uh please ignore that that previous part this is actually from the model itself and we're calling it like that so from the invoice model pull the quantity field it's very important so now again we're going to call the invoice product name and we can close that off there and now we're going to open up a text control with the text attribute and under here we're going to put a path to our invoice status and we're going to add our formatter just like we did before so path and that comes from the invoice model and status and pulling in the whoops formatter and our formatter is located at at this part or this under this part of the folder structure and we're calling the method status text just like we did before and now that we have that text control we can go ahead and close that off and now we want the ship and name for the next column another text control text attribute and pulling it again from the model invoice model shipper shipper name close that off and now we are going to pull in the extended price so object number and again these are all just different controls which you can read the documentation on that you can use within the table itself object number and we put in the number and now we can specify the parts and in here we're going to reference the path to the uh so now we're bringing in the extended price but we're also bringing in the currency as well so that we can um apply the formatting to that so invoice extended price and now that we have that we can add the path to invoice i'll just close that off invoice and currency uh oh sorry uh so again i'm not pulling the currency from the um the invoice model in our controller for the invoice list we created a model there which is where we got our currency from so that comes from our view the view is the name of the model that we created and we're pulling in the currency brilliant so that's all there and now we're going to type it with our sap data type sap dot ui dot model dot type dot currency and we're going to include our format options so we've done this all before we're just redoing it for this particular table control and show measure is set to false so again we're running it all through this section so just like we did before and now that we have that object number here that's all sitting fine um now once we move past the show measure we can close off the format options and then we can go ahead and jump down to here where we'll add our unit and that will be from our view model that we created in our controller and adding in our currency and the state just like we did before is going to be um an expression bar and it's going to be determined using expression binding so that runs there and we use the dollar symbol to call the extended price from our invoice to be compared extended price and we're saying if it is greater than 50 evaluate if true give it an error or make it red effectively and make it green with the success success perfect and we can close that off so you'll remember all of this complex logic was here an object list item and we no longer need that because we're now handling all of it in our table so table underneath the items we have a column list item in our cells all of our cells are here in the order that we placed our columns simple as that and save the r18n properties so now let's see if it worked refresh hmm so it still looks like we've got an issue let's have a look at the console right it seems to be an xml issue so we put out a lot of xml so there it probably is something wrong ah okay so it looks like this isn't closed off ah we haven't closed off our text control brilliant so let's double check our app again fantastic it's all working here but something's wrong with our supplier why is that not coming through so let's go ahead and check the code again and let's find um the shipper and see text invoice spelling mistake again supposed to be invoice shipper name so let's save that and have a look again there you are fantastic so now you can see everything's in a nice little neat table and if you were to test this on a tablet or mobile device you can see how things would change so if we had to press f12 and click on this toggle device toolbar and refresh you can see how it changes it and it the having it in this table control allows it to still be viewed but we only have certain columns available depending on the screen size so we can go ahead and close that and there you are now in this section step 36 we're going to go through device adaption so we're going to adapt the ui based on the device that you have so in this example we're going to make the panel collapsible and we're also going to hide the button on certain devices the the hello world button so let's go ahead and dive straight in the first thing we need to do in our code is find the hello panel view no that's uh here we are hello panel view and in here we need to find our panel section and let's just tidy this up and what we're going to do is we're going to set two properties first of all we're going to set expand expandable and that we're going to sit based on our device model which we're going to create shortly and that's going to be system phone so the device model is going to house this variable here and of this field here rather and that's going to determine whether or not this is actually expandable and we're going to say expanded expand is going to equal um uh so we uh probably pulling in the expression binding here again and we're just saying that it's not the expanded is going to not equal whatever the value is um from the device model so um we now call dollar and we call device and whoops system slash phone so when we do this model it'll obviously make more sense so we've now set that up and now for the button we want to say only visible on desktop so all we do for that in the button is to add another class sap ui visible oops i've got to put it in quotes visible only only on desktop so we've got that class as well super so let's now dive into our component where we're going to create our device model um component now that we're in component we need to add the device model here and bring in the modules so that is going to come from sap slash ui device and we need to bring in the device model here and let's go ahead and set the device model over here so set device model and we're going to create a variable for the device model a device model and it's going to be equals new json model device which we've now pulled in and the oh device model uh we're going to obviously we need to set the binding it only needs to be one way bound which is fine set default set default binding and that's going to be set as one way and then this dot set model o device model and we'll give it an alias of device perfect so we've just now again set the model uh to our context and now we need to look at the save that first now we need to jump into our detail view so in our detail view here we need to find our object header and within the object header we are going to specify the responsive attribute and set that to true and we want full screen optimized equals true and now we are going to move a few things around and we are going to set the number um like this and we're going to set the paths so similar to how we did this in the overview page we're gonna set the path um and we're going to link that to our invoice model extended extended price and we want to pull in our currency just like we did before so we add in a path and from the same view model we pull in the currency and now that we have that we add the type and it's obviously a um a currency type so sap ui dot model dot type dot currency and adding an alpha oops format options we call show measure and set it to false and now that we have that we want to add the number unit and we set that again to the currency from our view model perfect so now that we have that we've got our number number unit intro and title now we are going to add some attributes so let's just open up our object header here first we'll close it rather object header now here we're going to add a new control called attributes and we're going to close that off and under here we're going to add some object attributes and the first one is object attribute and that's going to have a title of whoops put that in quotes of i 18 in quantity title and whoops quantity title so let's just take that and add it to our i18n properties equals one two oops quant rty and back here we are going to say oh sorry that's the title and then this is the text attribute which is going to be from our invoice model the quantity itself quantity and we can um close that off and we just take this and close it off under here perfect and now we're going to add one more object attribute and give that a title for the date so i18 in i18n date title and let's go put that in our i18n file set that to date save uh then we're going to add the text attribute which is going to be a formatted shipped shipped date and we're going to format it just like we did for our number here so that's going to look like this specify the path and it comes from invoice shift date and then we're going to specify the data type which is going to be date zap dot ui dot model and we're going to add some formatting options format options format options and under here we're going to say style long and the source is going to contain the pattern we want pat term and the pattern is going to be yoyo whoops dash month month dash date time hour hour and seconds perfect so that's fine close that off save so that is our attributes done so we've now added a bit more detail to our detail page now we need to jump into our detail controller and here detail controller and now we need to add the model just like we did for the other controller for the for the view where we add this view model with the euro currency in it so we're going to now add the module first sap slash ui model slash jason slash jason model and we're going to put that there jason model and now on the init function all we're going to do is create the model so var view will create a variable first for the overview model and that's going to equal a new json model and we're going to set an attribute to currency as euro now that we have that we're going to set the model to the view so this dot get view dot set model oh view model with an alias of view so we can pull that in and we can go ahead and save that and we've added in our 18n properties so this will actually be order date so we can save that so let's go and see if it works go ahead and refresh right it seems we've run into an issue which is fine let's see fail to load component for container reason o device model set default binding r this is mean to be set default binding model my apologies so if we go back to the code we need to jump into our component and where it says oh device model that's it default binding needs to be mode it's default binding mode which is one way so let's save refresh right it seems we've run into another issue so let's check the console again it is an xml issue in the hello panel so let's go and take a look at that uh the panel header text expanded there should probably be a space there um icon text press oops press claw ah apologies uh these need to be in the same quotation marks and i think that should fix that let's just save refresh and there we are so uh now that we've got our panel and everything let's take a look um and refresh it so now when you go into your mobile mode or mobile device mode you can see this panel is here and what we've done is we've now controlled or we've decided what the controls look like and can do on different screen sizes so if we had to get out of the console and refresh the panel goes back to normal so now in step 37 we're going to look at content density and we're going to adjust the content density based on the user's device which means you could have a mobile device with touch enabled so you'd want your buttons and things to be a bit bigger for your items and your table to be a bit bigger perhaps you want them to be a bit smaller and more compact on a larger screen like a laptop so you can get more information in so we're going to go ahead and add that functionality in so let's jump into the code and let's get our component open and in here we're going to find our init function and just after it we are going to call get content density class and we're going to run a function of that where we are going to do the following we're going to say if this dot underscore is cont whoops s content density class so if a content density class doesn't exist we need to add it so we're going to say if the device dot oops support touch so if the oops if the device doesn't support touch we need to set the the density class to compact so this dot underscore s constant content density class let's set that there content density class is going to equal sap ui size compact else this dot underscore is content density class is going to equal cosy sap um size cozy and um once we've run through that we are going to go ahead and return this dot underscore um content density class oh sorry return and that is that if that opens there perfect so that's fine so we're just determining whether or not we need to return the compact or cozy density class based on our logic here um so now that we have that let's run to our app controller and in our app controller we're going to add the on init event function and on uh let's just add our comma and within this function we are going to say this dot get view dot add style class and we're going to reference our component this dot get owner component and we're going to get the content density class so get content density class and that's fine so um we're just we're just literally going to add the style class based on the um what's happening in that logic in our component here so we're calling this now let's go ahead and find our hello dialog dot js and in here we are going to add the sync style class module sap slash ui slash call slash sync style class and we're going to bring that in and now when we when basically when we're loading our fragment all we're going to do is we're going to send through the settings so we're going to forward the compact or cozy style into the dialog so we call sync style class and we pass in our overview controller get controller and get owner component component and we are going to get content density class and we are going to set the view and the dialogue oh dialogue and let's just make sure i've opened this up ah there we are it's the problem so sync style class getting the content density class for the view and the dialog we can save that now we need to jump back into our manifest and we're looking for the sap ui5 section and now we want to find the content densities over here and we're now going to turn them on have them available in the manifest so let's go ahead and see if it's now shrunk in desktop mode these items so these should appear a little bit thinner and there you go so it might be hard to see but effectively these because we're now in the state and we're not on our mobile device it's shrunk these a little bit and so the content density has been changed based on the device so now the final section uh or step step 38 is going to be accessibility and all we're going to do is we're going to add some aria attributes to and that's accessible rich internet applications that's what that stands for and all they are are there a set of attributes to make things as readable as possible for people that battle to use computers people who might be visually impaired um we're gonna try and make the app as readable for them as possible so let's go ahead and jump straight in and we're going to first jump into the overview dot xml and once we're in here we're going to add a landmark info control and what we're going to do is underneath the page we need to add land info and we are just going to go ahead and close that off and once we've done that um we're going to add something called a page accessible landmark info control so page access accessible landmark info control oh and uh let's just close that off from here we're going to just add some attributes and so we've got root roll and that's set as region root label it's going to be set as i oops i 18 n hi 18n and it's going to be the overview whoops oh overview root label and let's just go ahead and add that to our i18n file over here so the view page over new page and the root label is going to be overview page um and we're also going to have a overview header label oops and that's going to be header and we're also going to have an over overview content label to label our content and this is just going to be this is going to be header and this is just going to be page content so these are just the labels we're going to have for the different sections which you'll see now when we run the page and we've got a rate whoops rating title for rate the product perfect so we've specified all of those um so we've got um our root label here and we are going to then specify the content role which is going to be on the main and we've got the content label specified from our i18n file as the overview overview content label and the header role is going to be set to a banner which will make sense when we actually whoops refresh the app and the header label will be set as again i 18n overview overview uh header label so we've got all of our different labels here which is perfect root label head label content label brilliant so you save that now we need to jump in to our invoice list view and in here we need to find we're going to add a panel at the top and specify a few bits and pieces so we need to open up a panel here and we've got our accessible roll set to region and we can close that off so let's keep let's close off our panel here and now we need to add in a header toolbar header toolbar and we just want to close that off as we go so we don't forget about it and underneath our header toolbar we want a toolbar also go ahead and close that off lovely and now we are going to add a title control with the text attribute from our eye 18 in file and it's the in invoice list oops it needs to be in quotes that's going to be the invoice list title which we've already got close that off then we're going to add in our toolbar spacer to separate things out toolbar spacer and now we are going to call a search field i mean it's just so we now had a search field with a width of 50 and when we search we're going to run it on filter invoices that's the event on filter invoices lovely and um arya aria labeled by a search field label search field label so now we're adding in these different labels which you'll see appear shortly labeled by oh sorry aria described by search field description description and we're just going to add a placeholder and that's going to come from the i18n search field placeholder and we have that the i18n search field placeholder uh search field placeholder no so where is it let's go ahead and just add it so so that's all good and now we just close this off and everything is fine so now we've got our new panel holding our table and hit a toolbar and now we've got our label and our description here ready to go so now we need to jump into the hello panel view and under here we are going to add oops oh come on we're going to add the accessible roll we're going to add the accessible roll region brilliant so that's going to be included as well and so let's go ahead and see if it works all right it looks like we have a small issue let's f12 into the console and it looks like something's wrong in the uh where is it in the overview view so the xml so let's close this and have a look in our overview and see everything's fine fine fine okay this is white which means i haven't closed this off let's see if that worked so now when we refresh the page um you'll see uh once we so we can press um alt shift l um obviously you need to install um something like the landmarks control extension in the google chrome store where you can find that that will be linked in the walkthrough itself but i have it installed already so if i press something like alt shift l you can see i have all my different sections laid out here and that's pretty much it so you can add these wherever you need them and it helps for people who are for example visually impaired to sort of navigate around and and um yeah better use your app all right so that wraps up this full ui5 course um covering the basics of building a ui5 application um i hope it's helped you at some point and well done if you managed to make it through from step one all the way through to the end as always if you need access to any of the steps or code bits you can find them on the github repository which will be linked down in the description plus again you can always refer back to the sap documentation and the sap walkthrough which will have pretty much everything you need um on top of what i've covered here um if you have any questions please feel free to comment down below and i'll help where i can but otherwise don't forget if you liked the video please hit that like and subscribe button and as always thanks for watching