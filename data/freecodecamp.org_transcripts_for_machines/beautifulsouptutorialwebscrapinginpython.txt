if you enjoy content like this please subscribe to the lucid programming channel for more programming tutorials in this video we're going to be going over a very quick overview of both the beautiful soup module in python as well as the requests module in python as well so if you're not familiar a very brief introduction to both of those requests is going to be a module that's going to allow us to access various resources on the web so allow us to obtain uh information from various websites navigate to those websites and beautiful soup is going to allow us to parse that information so once we navigate to those websites we might want to extract certain types of content from those websites and beautiful soup is going to allow us to do that so this is going to be a very much from the ground up video the only thing i assume that you have installed on your machine is python and pip pip for installing python packages if you have both of those things installed in your machine you should be ready to follow along one to one and it should work out just fine so we're going to go over some of the basics of both the requests and beautiful soup module in the first part of this video and then we're going to bring all of those things that we learned into a very real project or a very simple project i should say this is really meant to be a very minimal introduction to both of these modules and just to see an example of how you can be effective with both of these things so let's just get started by installing both the requests and beautiful soup modules on your machine you probably will already have requests installed but we'll just make sure that you have it installed in any case so go ahead and open up a terminal or if you're on windows command prompt and go ahead and type in the following two lines so pip install requests if you already have this installed on your machine like i do you'll see some requirement already satisfied messages pop up here that's totally fine if you don't it will install on your machine you probably should have this installed already the other one is install beautiful soup 4 so go ahead and say pip install bs4 and i already have this installed on my machine so we're good to go all right so we've got all the things that we need installed i'm just going to go ahead and close that window and we're going to move back to our file here so we've gone ahead and done this part we've installed both of these modules so what we're going to do next is we're going to import them and use them so we're going to import requests and then we're going to import a specific class from the bs4 module that we installed specifically the beautiful soup class so this is going to allow us to in the terms of beautiful soup superfly content that we obtained from a website and again that will make it parsable so we can extract information from that content okay so the first thing that we're going to do is we're going to use the request module and i guess before i should go for before i go any further i want to mention that all of the code along with the comments that is kind of supplementing what i'm saying here all that is going to be provided on my github and the link to that will be accessible in the description so you can go ahead and download that if you want some additional information as to what i'm doing or saying right so back to this we're going to create a variable called results and we're going to say request.get and then we're going to pass in the website that we that we want to access so in this case i'm just accessing the homepage of google so i'm just going to move my browser over here so i'm just going to access this page right there so i'm just going to go ahead and get that and then what we're going to do to make sure that the page was actually accessed is we're going to print out the status code which is just an http status code letting us know whether or not the page was accessible or not so 404 errors are an http code that's letting you know that the content you're looking for is not present a 200 code is letting you know that the content that you're looking for is present and the response is okay so i'm going to go ahead and write this i'm going to run it so i'm going to say python this file is called beautifulsoup and request.pi if i run this it's going to run it let me just clear the terminal because it's kind of messy let me run that again and we see that the the code that we get back from the google.com homepage is 200 which indicates that indeed the page is accessible so another thing that we can do is we can also print out some other information of the webpage that we just accessed like the http headers and again for more information on both the headers and the status codes you can navigate to these links that are in the comments that point to the wikipedia articles on both of those topics so i'm just going to go ahead and write this and we'll see what the headers look like so it's just some extra information on the google.com homepage so for instance we can see here the domain is google.com some other information here as well that might be of use i'm just going to go ahead and close that it's more or less just to verify that not only is the page valid but it's also indeed the page that we wanted to obtain let's keep moving down here so the next thing we're going to do is we're going to extract the content of the page and that is actually the source of the page and we're going to store that in a variable so the the object that we created here this result the result has these builtin methods status code headers that's how we were able to print out both of those types of information that we just printed out there another one that it has is dot content and that is going to return the source of that page and then what we're going to do is store that into a variable called src for source and then we're going to have this variable so let's go ahead and run that and i'm just going to print out the source so you can actually see what it looks like i'm going to run that like this so we see a bunch of output here and this is really just the web source of the google.com homepage so i'm just going to go ahead and delete that that's kind of a lot of stuff all just thrown on the screen that's great that we can actually access it now we turn to beautiful soup because this is going to allow us to actually do something with that content so what we're going to do now that we've obtained that content we've navigated to that webpage we've verified that we're on the actual web page that we want and now what we're going to do is we're going to pass that source variable into this beautiful soup class creating a soup object and this really is just kind of an object that beautiful soup creates from this source and it allows us to extract certain types of information that we might want to extract from this thing so we're going to store the result of that object in this variable called soup so i'm passing in source here and there's an extra parameter here this lxml you can more or less just ignore this extra parameter it doesn't really mean too much if you don't have it in there you'll get a warning essentially to tell you to put it in there so it's there for all intents and purposes but you don't necessarily need to worry so much about why this is here so we have the soup object so for instance one thing that we could do now that we have the soup object is we can do things like give me all of the links on the page so what we can do is we create a variable which i can call links and i can say find all so final is a method provided from this beautiful soup object that we're accessing here and what do i want to find all of on this page i want to find all of the a tags so this a is the argument that's been passed in it tells beautiful soup to say hey find all of the a tags or all of the links on this page and then store them in this variable links and then we're going to go ahead and actually just print those out to the screen and just so we don't get like too much content i'm going to go ahead and comment out the previous print statements here just so we don't have too much output of the screen so we've got our links we'll print them out and then we'll print a new line so write that give it a run and let's see what we get so this is the output that we just ran here and we can see that we have a list so you can see the square bracket here and the n square bracket indicates python list and the contents of this list are all of the a tags on the page so if i move let's just take a look at some of these links so we have images we have one that has the text maps so let me just kind of move this back over here indeed you know if we look let's just look at over here we have this thing called images that is pointing to the link at the top right maps etc so we can look for other links in this list that will correspond to the actual links on the page that we have just have searched for all the links on the page so that's that so i'm going to go ahead and comment that out so we don't have excess output here and let's just keep going down so getting all the list of links is one thing but we might want to actually extract uh certain types of links so maybe the page that we're uh requesting the page that we've just superfined it has links that we're actually after so this example here says okay actually i care about all of the links that have a certain string in the text field so what do i mean by the text field if i bring this back up i essentially want to look for all of the links let's say that have the word about in them so i want to see all the links that have the word about so anything that's an a tag where we between the a and the slash a there's the word about if it has that i want that link so that's one example one use case out of many that you could form in this in this type of workspace so what we're going to do is we're going to loop through all of the links that we've obtained from above then we're going to do is we're going to say if the word about is in the text of the link so again what i'm doing is i'm using the dot text part of that variable so as i'm looping through each of these links in that list every one of those elements in that list is actually a beautiful soup element so that allows me to call this.text function on each of those elements because that is defined from this element that is extracted it's stored in this list so i'm saying look at the text in that link in that list and is the word about in that in that text if so then go ahead and print out that link because i care about that link and actually go ahead and print out the print out the actual thing that it goes to as well so that's what this is doing here so link also has a attribute or i should say a function attrs and i'm looking for a specific attribute of that link so inside the a tag there's an attribute inside of that which is the href tag inside of that and i'm saying give me the content of that href inside of the link tag which is the uh inside of this tag that has the a so there's kind of a lot of russian doll kind of structure going on there so let's go ahead and just print that out i'll write that run it so we have here is we have the link so we found the about google thing right here so that's good and then we also have the href attribute of this link so for instance we see this whole this is the whole a tag so we have everything from the start of the a tag to the end of it including the text including the href and then what we did with the next line is we said hey inside of the a tag there's this attribute called href and we want to access the content of that attribute inside of the a tag and what we did there that's precisely this and that's what we're printing out right here so i hope that makes sense i know that's kind of drilling down quite a bit and you can go pretty complicated with these types of expressions but i think once you understand this level you can arbitrarily apply different levels of complexity to your own situations your own problems your own situations your own scenarios i said that already anyway so we have this structure set up we have kind of a general idea of how to use both requests and beautiful soup let's go ahead and try to apply this on a more elaborate web page and the web page that i had in mind is this webpage right here so this is just a collection of briefings and statements given at the white house so you can see the day of this upload is september 12th and so these are the most recent remarks by briefings and statements that have something to do with the white house so there's a whole list of them and the goal of what we're going to do with beautiful super requests is we're going to navigate to this page we're going to try to find a way to extract all of the links on this page and specifically all of the links that have uh are sort of in this feed here so that's what we're going to do we're going to store them into a list and then you could think about doing whatever you like to that list i mean of course like the possibilities are are quite endless depending on your goals but this just kind of gives you the scaffolding the structure the idea to take this and then you know do whatever you want for your own purposes so let me just minimize this for now let's go back to this code so right so what we're going to do is i'm going to open up a new tab so i'm going to go ahead and say tab new i have another file that i've created and have some initial comments in which i've called whitehouseexample.pi i'm going to go ahead and open that file here so you can see that i've just opened a python file which is called whitehouseexample.pi and it just has some comments which kind of indicate what this is all about so we want to obtain links from this website as we just mentioned we want to well this is just kind of telling you what this is what this website is all about and the goal as i mentioned before is to extract all the links on that page and then just kind of print them out into a list so right so we can pretty much use the majority of what we already have we can just kind of go from there and more or less just copy and paste some things that we have from our previous file so let's start off by just doing the very basic things let's go ahead and import requests let's go ahead and say from vs4 import beautiful soup and then what we're going to do is we're going to let me just go back over to this tab over here because i think it's a little bit easier to just copy and paste some of these things we're going to want to do a very similar thing where we use the request.get method and we're going to paste in not google.com this time but we're going to paste in the website of the of the statements so we're going to go ahead and cut in there i'm going to bring this website up i'm going to copy this link here put this back over there and i'm just going to go ahead and paste this in there so this is now the website that we're accessing these statements for the content that we want to extract okay so we've got that now the next step is we want to let's go back over here so let's see what else do we do so one of the other things that we did is we stored the content once we've navigated to that site is we store the content of that into a variable called src so that's pretty much just a direct copy and paste we can just move that right in there so now we have an src variable that has the content from the result and now what we want to do going back over to the initial file that we have i want to create a soup object so i'm going to copy that move that over there that's also exactly the same so i've got the source for the web page i've created a soup object based on that source that will allow us to parse and then let's go ahead and write some new code so i'm going to create a list which i'll called urls this will just be the list that will populate with the links that we care about and then what i want to do is i want to loop through all the links so let's go back to the page here so we have a couple links these are the links right here on the page let's just go ahead and inspect them so if you're on chrome or firefox if you right click on an element on your page there should be something like this where it says inspect or inspect element if we go ahead and click that we'll be taken to this sort of thing over here which is showing us exactly what in the source of this page this element corresponds to you can see as i move over this content various things are being highlighted to indicate that these things correspond to the code that i'm sort of mousing over here it's a very nice tool so basically one thing that we can kind of observe is that all of these links if i right click on this one as well all of these links are contained in these h2 heading class tags so inside of the h2 tags we have the the a link or the link that we're actually after so you can see that all of the links on this page are in fact formatted in this way so all of these things are in between h2 tags and one thing that we could do we didn't see this exactly but one thing that we could do is we could tell beautiful soup hey find all of the h2 tags on a given page and then we'll loop through those and then extract the link from those and then we'll have our list that we're after minimize that so we've got our empty list so now let's do this let's say 4 h2 tag in soup dot find underscore all and then here remember if we go back to this initial file here we wanted to find all the links and what we did is we said find all the things that had the a tag well in this case we don't want to find all the things with the a tag just yet we want to find all the things with with the h2 tag so we'll go ahead and say find all of the ones in this soup that have the tag h2 and then inside of that if you recall if we go back to that page inside of that h2 tag there's an a tag and that's what we want to extract so we'll go ahead and minimize this and say okay now that we're looping through all the h2 tags let's say a tag is equal to h2tag dot find and what do we want to find we want to find the a tag inside of that so there's find all and there's find so find all is going to be a function that's going to return to us a list it's going to return all of the ones on the page there might be no items of this form on the page there might be one there might be many in any case it's going to return to us a list this a tag is going to just find a single element so it's just going to find a tag the first tag that corresponds to this and then we're going to store that in this variable a tag here now we want to do we have hypothetically are a tag and we're going to add that to our urls list that we have up here so we're going to say urls.append and then we're going to say a a tag and actually i don't want to just add the a tag i actually want to do kind of similar to what we did over here where i said not just the link but i want the attribute of that link that corresponds to href so going back to this state here we've looped through all of the h2 tags on the page inside of the loop we have this thing that says okay inside that h2 tag there should be an a tag and actually furthermore i want the href attribute i want the actual link that is inside of this href attribute so let's go ahead and do something very similar so let's say a tag dot attrs and then we'll do href just like we did before okay so that is pretty much all we need there and then just to make sure that we actually have a list that's populated properly let's go ahead and print out urls let's see what we have so we'll write this clear the terminal and then we'll say python and the file is called the white house example pi if we do that it'll run there it'll grab them we can see that we have this now this list of all of these links that correspond to each one of the elements on this page so we've successfully extracted the links for each of these briefings and statements pretty cool and not very much code either you can see this is quite concise so we're going to be going over how to create certain objects in beautiful soup and we're going to be taking a look at how to make use of those objects to extract content from web resources that you might be interested in extracting the content from so the first thing that we're going to do is we're going to go ahead and just import beautiful soup so again assuming that you have this installed we're just going to say from bs4 import beautiful soup which is the class that we're going to use to simplify the html content that we're going to eventually parse in this video and the html content that we're going to parse in this video is actually just going to be described by this variable here which is a string that really just contains a very very simple html web page so the reason that we're doing it like this is for one to keep things very simple we just want to illustrate very basic concepts about how to kind of parse this type of content the other thing is to keep it reproducible we could see this example on an actual website that's on the internet somewhere however if the source code for that website is changed in any way then the video may become incorrect as a result because the source change and therefore our source might not be doing the correct thing and at the time whenever you happen to be watching this could be giving you a different result than what you actually expect so this string is just going to describe a very simple html web page that we're going to use as our example and just to give you a sense of what this looks like we're going to just going to go ahead and write this content to a file so what i'm doing here is i'm just creating a file called index.html and then i'm writing that content that we defined up above so the html docs string i'm just going to go ahead and write that out to a file and then if we go ahead and run this i'll go ahead and clear the terminal so i'm going to go ahead and run this file which is called beautiful soup objects we don't see any output because there's no output to be seen but if we go to our directory in which the file lives we can see that it did create this index.html web page so we can go ahead and open this up in a browser and if we do so we see this is the html rendering of the string that we saved and wrote to file so you can see there's some very simple content on this page there's some stuff between some bold tags stuff between some paragraph tags links things like that so we're going to see how to make use of beautiful soup objects to extract content like this and my hope is that you can see it applied in this very somewhat contrived and simple setting and optimistically apply it to your own setting in which you want to apply these types of ideas so i'm just going to close this i'm going to minimize this and we're going to go back to our code so let's keep moving on down here so the next thing that we're going to do is we're going to create a soup object based on the html doc string variable that we defined up above and so this is going to allow us to parse the html content so one thing that i do want to mention that i don't believe i did mention in the quick start guide is one thing that's kind of neat is you can use this prettify function which is provided from the beautiful soup class which allows you to output the html code in sort of a nicely formatted way so i'm just going to go ahead and write this and give this a run so if we give this a run we see that the html code is printed out very nicely it's indented properly and it just kind of looks very clean and how you would expect it to be properly formatted let's say if you were writing this code so alternatively if we get rid of this prettify function if we just kind of remove that there write it and then run it again you can see that this output here that we got kind of scrunches everything together so it really depends on what you're looking for what you're trying to go for if you're getting like a big sense of maybe a more complicated web page it might be nice to look at this form here otherwise if you kind of want to see everything scrunched on just this screen here it might be fine to look at it like this so it really depends on what you're going for but it's nice to know that this type of function exists so i'm just going to comment this out so we don't have a whole ton of output as we're moving along here in this file and the next thing that we're going to cover here are tags so what we're going to do is we're going to take a look at this code this html source and the first thing we're going to do is we're going to print out the bold tag so if we do soup dot b this is going to give us the first occurrence of the bold tag in the html that we're parsing or from the soup so if i go ahead and write this and give this a run we see the output here is this content here so it's some the doormost story between these bold tags so i just want to also point out that this content this html content is really just ripped straight from the beautiful soup documentation page with some minor alterations so that bowl tag that we just extracted is this one right here it goes it starts from the top of the file it keeps moving down and finds the first thing that has bold tags and it says okay i'm going to print this out alternatively if we said soup not dot b but dot p this would also do the same thing but with the p tag so here we have class title the door mouse's story indeed if we go up to the top of this html source start from here keep going down it's the same thing here this is the first occurrence of a p tag in the file so that's what's going to be printed out there so i'm just going to comment that out and maybe we don't want to just print out the first occurrence but maybe we also want to do something similar so we're going to kind of build up to a way that we can find all of the tags of a given element so another thing that we can do that's very similar to what we just did instead of soup.b or dot p we could do a similar thing where we use the find function so if we say soup dot find and then give it the tag that we're looking for this will give us again the first occurrence in the html documentation sorry in the html doc that has a bold tag so if we go ahead and write this and i'm just going to clear the terminal so we don't have too much output we see that this is also the first occurrence of the bowl tag that we got from before where we just did soup dot b so just gonna go ahead and go back here comment that out now maybe what we want to do is we want to find all of the occurrences of the bowl tag in the html document that we are parsing so i'm going to go ahead and uncomment this and the function that we're going to be making you stuff here is find underscore all so this is a builtin function that we can use on a soup object that is going to find all of the content in this soup that pertains to this bowl tag so i'm going to go ahead and write this and run it and we'll see that this returns a list where each of the elements in this list are beautiful soup objects that correspond to everything that contains a bold tag so that's also good to know so let's keep moving down in this file so another thing that we can also think about is something called a name so if we did soup.b dot name this is going to give us the name of the tag so for instance let's take a look at the first occurrence of the bold tag like we did before and then we'll tag on a dot name so if we write this and give it a run we see that the name of the tag is b so that's essentially what this is going to give us it's telling us the name of the tag that we've just printed out alternatively we can alter the name and have that reflected in the source so for instance if we wanted to for whatever reason alter the name of this tag we could do so in the following way so we can define a variable tag which is equal to soup.b so this is the first occurrence of a bold item in the html document that we're parsing we can print that out just to see what that is so i'm going to comment this out so we don't get too much output so we've created just a refresh we've created a variable called tag which is equal to soup.b the first bold occurrence in the html document we're going to print that out we're going to see what that corresponds to which is something we've already seen before and then what we're going to do is we're going to say tag.name which is a property just like we did we printed that out here so we're going to say tag.name instead of being equal to bold or b we're going to say actually set that name equal to block quote so it's just some other thing we can set it equal to whatever we want i'm just using block quote as an example and then what we can do is we can print out the resulting tag so what we've done is we've found the tag which is the first bold one printed that out to verify what that was and then we've actually altered this is a mutable object we're actually altering the bold content of this tag into block quote and if we go ahead and print that out we'll see that this is no longer between b but it's between a block quote you can see it starts and finishes with this tag block mode now so i'm just going to comment that out there and let's keep moving on so let's go on to attributes so let's go ahead and say that we want to define a given tag just like kind of how we did before here where we're finding the in this case this the third element of the list that is returned for all of the bold objects that we're looking for in the html document so if we go ahead and go back up to our source remember that one actually let me not even go up that high but if we went back to this function here where we found all of the bold tags remember that returned to us a list of all of the beautiful soup objects that corresponded to a bull tag in our html document so what i'm essentially doing here is i'm saying find all of those elements and just give me the element index 2 of that list and then let's just print that out just see what we got so we'll go ahead and do that so in this case it's a bold tag that has id is equal to one and then in between that is this is this name test one and then it's the end of the bold tag so let's go ahead and work with this and see what we can do so this specific tag as we saw has an attribute so it's a bold tag but it has an attribute inside of it which is called id so we can actually access that attribute by saying tag and then using the array index notation so it's overloaded that if we can access the id field of this by saying tag open square bracket id close square bracket which is the name of the attribute that we want to access if we go ahead and write that we can see that the value of the id field that we just accessed is equal to one that's what's being printed out there so it's kind of cool so we can move right along and see sort of another example of this thing let me just comment these lines out so we don't get too much output i'll go ahead and clear the terminal as well so now let's go ahead and consider another tag for the sake of example so i'm also creating another variable here which i'm calling tag and now i'm just going to print that out to see what we have so this is the index 3 element of the list that is returned from all of the bold tags on our page i'm just going to go ahead and write this and run it so now this time we have another bold tag which has not just one attribute so before we had one that was just one attribute which was id now we have some other attribute which is called another attribute which is also something else so notice that this id is pretty widely used in html you'll see like a lot of different elements will have ids equal to something and this another attribute is not typically used it could be anything else in the whole world what we're going to see here is a way that we can extract not just one attribute but also this attribute as well so if we kind of move right along here we can say print out tag id just like we did before we're printing out the attribute of the tag that we've defined up here that has the field id and we can also do the same thing for another attribute which is the name of the other attribute that we're trying to access so if we write this and then run it you'll notice that it was able to successfully do it for id so the id was equal to variable that's printed out here and then another attribute we printed that out as well and that's equal to one and just like how we had here where this is mutable we were able to alter the name we can also do the same thing for these sorts of tags as well we'll see that a little bit so let me just comment these lines out here let's create another tag variable so i'll just set it equal to the same tag variable that we had before just to verify that let's print that out so this is the same tag so i'm just setting a variable tag equal to that and then i'm just printing that out so if we wanted to see what are all of the other attributes that this tag actually has so we knew because we looked at it it had an attribute id it had another attribute called another attribute but what if we didn't know what those were what if we just wanted to see all the attributes this particular tag had so beautiful suit provides to us something called in this method here attrs which is going to allow us to see all of the attributes of a given tag so if we go ahead write this and print it out we see that it returns a dictionary where the key is the name of the attribute and then the value is the value of the of the attribute so the key here another attribute this is equal to 1 that's the value of this entry in the dictionary and likewise this key here for id the value of this is equal to very bold so it's kind of neat as well so let me just go ahead and comment i i will keep that actually i'll just print get rid of these print statements so as i mentioned before these sorts of things are also mutable so we can change the attributes the values of the attributes to some other value if we wish so just to kind of refresh we have this variable tag which is equal to the element that we saw before so let me just write that and run it so this variable tag is equal to this beautiful soup object here and what we can do is we can say okay let's access the element another attribute and recall that that value was equal to one what we're doing here is we're saying actually set that value equal to something else so in this case i'm just setting it equal to two so let's go ahead and print out the result of that mutable action so we'll notice that the first time before we make any alterations the attribute value is one however once we change another attribute once we change that value equal to two notice that it's reflected here so we're able to actually change the values of those things which is kind of neat so i'm just going to go ahead and now comment this out and i'll comment out these print statements as well so let's keep moving on actually what i'm going to do is i'm going to keep this tag that we had before and illustrate one further point about this tag so another thing that we we can do since these things are mutable is we can also eliminate or delete the fields of an attribute so just like we do for a python list when we're trying to remove an element from a list we can use the del keyword in python to remove that element from the list and this is what we're doing here we're saying okay the tag that had those two attributes id and another attribute actually just go ahead and remove id so let's go ahead and print out let's print out the tag before so just to kind of give a sense of where we're starting from we're starting from this thing here and then what i did is i said del id and notice that after i did that and then printed out the resulting tag there's no longer an id field in this thing so we can also do the same thing for the other field if we so wish and then print out the result of that and notice that we have again what we're starting with this beautiful soup object with both of these fields and we've deleted both another attribute and id from it and we've printed out the result so just kind of showcasing what you can do with this so i'm just going to go ahead and comment all of those out now and let's also comment out this tag as well and let's keep moving on down and see what else we can do so we're going to look at some strings so we're going to define a variable tag which is the same thing that we've been working with for the past couple of examples just to kind of showcase that i'm just going to print that out to the screen so this is the tag variable that we're working with now same thing that we've been working with again for the past couple examples and then what we can do is beautiful soup also provides to us a dot string method and if we print that out let's go ahead and see what we get we print that out we get the content that's between the tags so notice that this is what beautiful soup is considering as the string the elements between the angled brackets between the tags themselves so this is the string content that we're printing out here and that's what this is giving to us so let's just keep moving down here so i think we're pretty much at the end of the file i'm just going to get rid of these two print statements another thing that we can do is just like we saw before the mutability of these things we can also alter the string content in between these tags as well so if i do something like tag.string and then replace with so this is just a function that is going to allow us to replace the content that is that string with something else and i'm replacing the content with this is another string and then if we print out the result of that we'll see we'll see what we get so let me just kind of review what i'm doing here create the variable tag that we've seen before i'm printing out the original tag with no alterations whatsoever then i'm using this dot replace with method to actually alter the text inside of that beautiful soup object and i'm going to print out the resulting tag so what we should see is we should see the original tag with test2 in between and then after we've replaced this content with this is another string we'll see the same tag but with the text altered so let me just go ahead and write that and because we kind of have a lot of output on the screen let me just clear it and then let's go ahead and run this so indeed this is what we see we see the initial attribute or the initial beautiful soup object with test two unaltered and then we've replaced that with the method given to us by beautiful soup and we've replaced it with this text here this is another string so that's just some of the attributes or objects i should say of beautiful soup and some of the things that you might want to do when you're parsing a page you might want to parse a page make these changes and then write these things to a file for various reasons there's a lot of different things that you can do i hope that this kind of showcases the things that you can do and hopefully it's broadly applicable to sites that you may be encountering in your own uh in your own scenarios so if you have any questions or comments don't hesitate to leave them below i'll do my best to answer them so thanks again for watching and i'll catch you in the next video