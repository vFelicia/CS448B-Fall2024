well thanks for coming everybody uh i'm excited to be here i uh recently got excited about something i was doing that was uh uh i got really excited about pwas so i started to look into it and uh put this presentation together on web workers service workers and pwas um who am i uh i'm a full stack developer i'm a freelancer uh i was a digital nomad for a while scuba guy was my office on the caribbean that's cool um that's my email you can find the code for this there's not a whole lot of code for this but there's a little bit code for this on the github there and if you're into it so uh what am i doing i am a poverty abolitionist the uh world used to be flat we used to buy and sell people we used to make kids work in factories uh i believe it's time we should abolish poverty if you're interested in that come talk to me about it it's really my jam um if if you guys are into it um this hacktivism for economic justice get in touch with me through that i'm looking to find people who are interested in helping out projects around this so but tonight's uh i'm really excited to be here with you guys pdx node we're going to talk about web workers service workers and pwas um so i'm sure you all know regular web pages uh they're just regular it's just your html and your css if you do um control escape oh i can't do it in full screen but you do control escape you can see all the processes that are going on in chrome and what's interesting is that the web page and it's really actually really cool about the javascript engine right it runs in the event loop and what that means is the code is actually pretty easy to think about but you also get kind of the simulation of multiple processes and stuff right you can do async stuff but it's you really get limited access to cpu disk and memory and you end up with the event loop just being one process per tab are you guys all familiar with the event loop is that yeah okay yeah okay got it so uh what's the event loop the event loop is like a while loop and it's like while there's stuff to do and then it does stuff and when it gets to certain places in stuff it'll actually go back to the top of the event loop and look for other events so you wind up with kind of this cue of all these events happening and then it processes each event as it comes up to the top of the queue sometimes in the processing of an event it'll get to a place where it can actually put down a pause and go do another one which is why you'll actually see in the code later i wrote myself a bug that took me about an hour to figure out because i wrote wild true wild true is not friendly for the event loop um but that's that's really the gist of it if if you're familiar with um uh computers and you have like multiple processors and you have multiple uh cpus like this computer has eight uh processors or yeah eight processors more or less available um with regular web pages you can really only have your stuff run on one processor and so if you're if you want to do something that like takes if you want to use all eight processors from your web page you can do that now and you can do that with something called webworkers uh if if you're if you've ever seen this like page unresponsive um this is because the event loop got stuck right and and so that's this is kind of the symptom of what we're going to try to solve so we don't have this problem so web workers they have two basic things you can create another process and you can pass messages between the processes so you don't get shared memory or anything like that um i think there are some rules around uh uh local storage uh you get you can get access data that way too so here's an example of a script tag on a regular web page um so you can see here we're going to create this new worker and this worker.js is a file i'm going to show you here in a minute um what we're doing here in this piece of code is we're listening for an event which is a message event when that message event happens we're gonna we're gonna append uh some text to this to this result uh id i'm gonna show you guys this in an example but if you can just imagine there's a an element with the id result we're gonna actually add to its inner html the data from the event which is uh which was passed to us as a message and a new one now here in this this bit here so this is gonna this is gonna be what the web worker sends us right so i'm i'm we are now a web page called index.html so when we create webworker it actually goes uploads to this js file and now we're going to listen for these message events from in this in this process that's happening on index.html right now this one what we're going to do here is we're going to set a timeout and we're going to post a message to the web worker so we can communicate to the web worker through messages and the web worker can communicate to us through messages right and so this is how we can get like useful stuff in and out of the web worker the web worker doesn't really have any like data or context available to it so we really have to send it through through messages is that does that make sense anybody anybody have questions about that yeah what can you pass it as a message does it have to be like some bit simple types like strings maybe an object with those yeah but not like a dom element uh you can't you can't uh you could pass in a copy of a dominant uh you could pass it a copy of dom info but the web worker doesn't have any access to the dom so you can't use like jquery with it yeah in the web worker you can load in other scripts so you can load in low dash and other libraries like that but the data that you've had the data you pass back and forth has to be has to be like basically i think i think you can do um a javascript object all right yeah i mean it gets like stringified yes or the equivalent of that whether exactly does that it just sort of gets a value type out of it exactly yeah you can't you can't pass a reference right okay so here's our worker.js and so we are going to listen for messages from the main page with a string as we wait for these outline messages so when we get into this we we find self right and that's us now we're going to add this event list and this is just like we did on the previous page right and so now we're going to say okay worker got a message this is uh a horrible fibonacci number generator it's it's made it's designed to be uh very poor performance but um it's designed like that to show the really the value of the web worker right and then here uh we are going to so this loop here uh this is this is where that wild uh wild trio did work so here we set an interval and then every 200 milliseconds we calculate fibonacci number and then we send it back to the index web page so right so this is a lot this is a lot of the comments that we actually just talked about questions so yes you can do multiple processes right like we had those two scripts so now we had two event loops running so we could get two cpus going uh we can use this in about 94 of browsers like i said no dom access and in terms of like practical applications one of these is the crypto miner malware like that makes a great web worker right because you can just spin up all these uh cpus that are not being used for any user and then another one my sister pointed this one out to me which is pdfjs which is a library that will process pdfs on the uh on the browser and i think it does it through web workers that's pokemon coverage i thought that was a pretty cool application all right so you guys remember the code we just looked at so here's here's that code uh in action so we're gonna we're gonna go there and now we're gonna look at this and sorry it's so small but you can see that we're running we're getting our fibonacci numbers oh yeah and and now okay so if you go to that github uh you'll see there's a couple i added these like sidebars so we could do import scripts we can also do exit uh html requests so you gotta read the readme and this is this is text from what you mean here you can see where the page actually sends the message and the worker got the message abolished poverty uh okay we ran this twice and then when we got that message we changed from by pretty things to abolish poverty so that's it so this is an example of our web worker i think our web worker is still uh oh it's still going down so um if if you guys can see my cpus you know so we have 104 on cpu so we're still we're using like 100 of a cpu in this page but it's still responsive and if if we didn't have the web worker going we'd probably get that unresponsive page like facebook page right so so that's really the value of um web workers uh do you guys have any questions about that about what happened here yeah yeah yeah let's see there um now this is so i'm a little uh i'm a little improv improv here i think we got it yeah yeah no it's it's jamming it's like i'm the worst fibonacci thing ever i don't know i wonder if that will happen let me try let's try that that sounds fun okay all right right and so it did break point because uh you can see my cpu went down x is 3. nice service workers now service workers are web workers service workers have a k i use of about 74 and that's going to change uh in the next version of edge safari and ios safari so it's going to jump up to be pretty pretty mainstream um service workers give you like all that web worker stuff plus you get a javascript prior proxy to edit responses of your page network request so we're going to talk about that and you get an installation lifecycle so it's almost like an app and you get push notifications and other other applike stuff google is really excited about pwas google's really really excited about this um so how how many of all y'all uh know what a proxy is and they're like we should skip okay okay so what is a proxy a proxy is basically an intermediary for requests from clients seeking resources to other servers so when my laptop wants to go out and talk to slides.com to get this presentation it's on the it's on the wifi so the first proxy that it hits is the wifi right then that wifi access point is going to hit the upstream router and that's another proxy and so it's just proxies all the way up it's like turtles all the way down proxies all the way up um and so this so this like this is almost like uh this is like something that never happens right when is the last time you plug directly into a web server except on your la on your if you're developing on your own computer right if you're using the internet you're getting a proxy in the middle and uh you know they can do all kinds of stuff there's all kinds of stuff going on here um that et cetera et cetera yeah butterflies right it's great christmas hearts um [Laughter] um so we can also get a caching proxy and if you've ever uh like you know if you've ever are you guys familiar with the caching proxy right so like a uh like a cdn like cloud front is a caching proxy right like i've got my my website in a bucket an s3 bucket and i put cloud front in front of it and then when the clients want the the data cloudfront only gets it when it knows it's out of date right so that's a really good that's a caching proxy okay so if you wanted to do an offline web app with a service worker you could make something called a pwa and so then your service worker becomes the proxy right it has a proxy a javascript proxy to edit responses to your page's network request this all happens in the browser and it has if you have a cache it and so then if you don't have access to the internet you can still make network work requests based on the cache data that's my attempt to explain that how to do all right cool all right guess thumbs up i win um service workers also have an installation lifecycle um and so i'm gonna go over this just briefly to make you aware of it because it's kind of weird so it's like a new thing for web pages uh and there's tons of there's tons of documentation on it google is really hot for this basically you can register uh your service worker like this right so you just get the urls options and as promised uh and then the browser will will download your service worker about every 24 hours and these scripts will if they're updated they'll wait to become activated so we'll see this we'll see this might happen a little bit but then the service worker really just listens for events uh and then whenever there's a fetch event so network requests will go through we'll create a vehicle event and we can respond this stuff all right this is i think i already i think i already jabbered on this but yeah it's really kind of like a native app it's kind of cool in fact i think i think chrome and android are going to make api events to put it on your phones like desktop right so you can get an icon with it this service workers has some really good examples on it if you want to see some really cool examples i'll show this basic one and all right let's get into this all right that's not helping all right okay so so this bit here is the demo right and it's it's really just this one we're going to show icon and so really we're just going to look at kind of the code that's going on in this this bit here so um so here's where we here's where we register our service worker right and then this bit of code is basically the ui code for what's going on here now in the service worker we're going to we're going to have these named caches and you can you can update the caches as you go so these are pre cache urls so we can pre cache uh basically resources that we need for our application um you guys remember app cache or was it application cache yeah like i think i think it's most famous blog post was application cat shocks or something like that so so this uh this is kind of like this was somebody was like all right let's do something better so we came up with this so here we can we can basically um precache this index.html and all of our stuff we need for the app so then we listen for the install event and and when install happens we basically uh wait and then we're going to go to our caches and we're going to open this precache cache and then we're going to cache a bunch of stuff and then this skip waiting will activate any service workers that are waiting to be activated do you guys remember that bit all right i hope you do uh that's what it does the service workers if you if you update the service worker it'll wait until it's it's activated before it starts running all right so then this bit of code here is really just cleaning up the old caches if we if we made a new cache it's not that awesome but then here's the really interesting part where we talk about the proxy right so all of this all this stuff is just a regular service worker right we were adding listeners and event and all that kind of stuff then we get down here and we get this fetch event so this fetch event is when we get an uh network request and i think this is a google page so you can see here they're very concerned about google analytics uh and so what we're saying is if if the request starts with our uh our location then we go to our caches and we try to find a match for the request and then we just send the response right sort of cache response and response if not then we uh uh open the runtime cache right you remember the runtime cache and then with that cache we run fetch to get the request and then we add the response we put the response into uh the cache and then we return the response right so i mean that's pretty um that's pretty much the gist of it and and with this between the precache urls and this bit here we have everything we need to make an offline web app right you can cache all your images all your resources all your styling your markup your javascript and then anything you need a runtime you can do here so when we got to this part here when we get to this fetch if if fetch actually returns an error because the network's down we could just return a default image right so we could we could also start to edit our responses right like we could change everything that's in the response right we could make a pirate speak if we wanted our yeah exactly um so there's there's a lot of stuff you can do inside this proxy uh it doesn't have to just do this um so uh it turns out it turns out like pwas are hot and people are into it and uh i i wouldn't actually i mean like i got into it because i wanted to learn it for this talk and also i just want to learn it but um you really don't need to know uh about much about pwas to actually build an offline app like this like if you guys are into vgas here's here's how to get you know here's how to get one and it's you just get your regular app and it's it's got it no no no it's good it's good i was super into this um yeah i'm just like still a poverty abolitionist and uh thank you and that's my jam what were you guys saying thank you you