in this course you will improve your python skills by creating a snake game using the pygame library this course was developed by deval patel from the popular code basics youtube channel we will be building famous snake and april game using python and pi game module in this python project series as a prerequisite all you need to know is basic python anyone can do it i am going to simplify a lot of concepts and this will be multiple video series so we'll go over step by step on different pi game concepts and we'll build a complete game so you're not only learning python pi game but you're also learning how to build a complete endtoend project in python in the end i also have an exercise for you to work on so you can use the knowledge that you learn in these videos and then you can customize the game as part of that exercise and i have the solution as well so this will be not just you are just watching a video it will be interactive learning so it will be very very useful let's first talk about the things that you need to install very first thing is obvious python installation you need to have python installed on your computer then you need to install a pi game module which you can do it by running pep install buy game i already have it installed so that's why it's showing this part you need to run this step and i use pycharm community editor you can just google pycharm community download it if you like using vs code that's okay too i went ahead and created this snake underscore game directory to store my code so you just go ahead create some directory and then open that directory in pycharm by going to file open so when i did this it was showing me this thing now in this directory i have already put some useful things so first you need main dot pi so main dot pi the main file it is empty right now i also have resources folder which will have different resources that we will need for our project for example it has an image of an apple uh some background some block image and all that okay you can download all this code by looking at the code link in the video description below here our first objective is to write the first program which uses pygame and it draws a simple game window okay so at the end of this session all you're getting is a simple pie game window with some background so let's uh let me just close this and go into zen mode so pyjam has this nice feature called enters and mode where you can have a full screen experience okay so here i will say import python i'll make it a little bigger control scroll and then i always use uh if underscore underscore name is equal to underscore underscore main this is the main routine in python okay uh and in this routine what we're going to do is initiate the pygame dot in it so so let's look at the pie game documentation by the way so if you look at pie game documentation here you can go to the pie game website look at all the tutorials and kind of explore it but in this tutorial uh whenever you're using pi game you have to use this dot in method it will kind of initialize that whole uh module okay and once you have that next thing will be creating a surface so what is surface so you will say pi game dot display dot set mode okay so what is set mode so let's look at the documentation so pi game set mode generally i google it okay and when you google it you can directly go to that so here you are saying set mode so set mode is initializing your game window this is the very basic step that you have to do in all pi game program and see the first argument is the size of the window how big is your window size okay so i will say my window size is maybe what 500 by 500 this is like 500 by 500 pixel okay and you can now say that so let's just maybe run this program and see what happens see window came and it disappeared because the program finished so i will just maybe put some timer so that you can actually see you know i will put a timer for five seconds so you at least see what's going on so okay my window unfortunately came in the in a different screen actually yeah see you get this window 500 by 500 if you have 1000 you will get a bigger window see so that's what this is doing now the window background is black i want to change it okay so you'll say surface dot fill so this fill function will fill the background with some color now any color is rgb so red green blue and these colors have values from 0 to 255 so if you want white color you will say like 255 three times see this did not work because whenever you update your surface you have to say uh buy game dot display dot either update or flip so flip is saying that whatever code you have written here you are just you're just updating your screen with it so you say control f5 now your screen is white okay if you're not sure about which color you want to pick up not no rgb values so then you can do rgb color picker so the google google has rgb color picker so you can decide your color okay which color do you want maybe i want this color as a background what is rgb 92 2584 you put that here and see you get this color so getting that color is is not a big deal so i'm just going to use some color you can use a different color up to you okay all right so now your window is set up next thing i want to do is see i i had to use timer which is something i don't like i want to do something where the window stays and when i hit escape or cancel then only window disappears so i'm going to remove this sleep statement so how do you do that so in any ui application you have a thing called event loop event loop is waiting for the user input when you are working on any screen it is waiting for mouse input or keyboard input so you have to run that event loop event loop is fundamental to any ui programming it doesn't matter pie game any ui you take you need to have an event loop an event loop will be something like it's a while loop so you will say okay running is false or maybe running is true actually so running is true and while running do something so now see this is an infinite loop we need to exit it somewhere right but the fundamentals of ui programming is you are running this infinite loop but on certain keystrokes such as if you hit a cancel or escape you want to exit your game so how do you do that well pi game has this thing called event so pygame dot event dot get so for event in pygame.even get do something so what is this well this will give you all the keyboard mouse all kind of events okay and you can read the documentation online but this events will have type so if event dot type is equal to what for that i need to import certain local so i will say import pi game dot locals uh from i will just do this import star so this is going to import certain global variables which will be useful to us such as key down see this key down this one came from this okay so if you want to read more about it you can just say buy game locals and that will tell you all the locals right so event so for event you will have different locals and so see for event these are the event sites so p down is something we use there is another event called quit which will be called when you hit the cancel window so i will say okay if even dot type is key down then do something lf event.type is equal to quit okay then okay so if user clicks on cancel what do you want to do well you just set your running variable to false you might have read about while loop before or if you have followed my python tutorials you know about while loop while loop is like it goes in iteration until this condition is true so running is true all the time except when we have a quit event okay so let's try this so quit event is generated when when you click on cancel see now your program exited otherwise your pro that window will not exit okay also let's say i want to quit when i hit escape key so you can say if event dot key if event dot e is equal to escape then also running is false so when i run it now and see i'm not using mouse i'm hitting escape key and my program exited okay so this understanding of this whole event loop in pi game is very essential and it will be useful when you're doing ui programming with any language any framework all right so far it is looking good now the next step i have some reference content here so that i can do my videos properly so the next thing i want to do is i want to draw a block okay so that block you saw here so i have this block here so this image i want to just draw on my screen somewhere all right so how do you do that well for that you need to load that image uh and the way you load that image is by doing this so pygame has this image module you can just say load and resources block.image and dot convert this is a method of loading the image and once you have the image in this block variable you can see let's look at load documentation see this is the load documentation okay and block you can uh paint on a surface so your background screen is this surface we will say surface you know surface is your background your main window on that if you you want to draw a block so for that there is a function called blit so this blade function is nothing but draw this image and what do you want to draw well block where do you want to draw these are the dimensions so maybe 100 hundred you see 100 is drawing here if you do 0 0 this is x and y so if you do 0 0 it will draw at the very left so this is x and y okay so i will just assign some variable for the dimension so i will say block x is 100 let's say and block y is also 100 okay and then block x block y all right now next thing i want to do is i want to move this block okay so when i move this block using my maybe key like one of the common things in any game is using the up down left right keys okay when i press those keys i want to move the block around so how do i do that well first let me write a function which draws this block so i'm going to write a python function which is drawing the block okay so it's the same code see this code i have just put it in a function so i put one two and three these three lines into a function so when i call that function it will just draw a block so now how do i move that block all right so let's think about that so here we are getting this event site so if event dot key is equal to let's say up see when you press up key what you're doing is your block is at a position x okay so let me just draw it so that you understand so when you are let's say this is your screen okay on this screen you have a block so this is your block and block is at the position x comma y so it's a it's a coordinate system x and y okay so let's say this x is 100 right now so x is 100 and y is also 100 okay so when you move up key the y remains the x remains same but you're changing your y your y is 100 and now you are moving it up so maybe you're changing it by some amount when you move it down again you're changing y but when you move this block see when you have this block and when you move it like this your x remains same because x is this but you are no your y remains same but your x will change so see your y so this y is this axis okay and this x is this particular axis you might have learned about basic coordinate system in your mathematics class so it is this x so when you have left and right movement you are playing with x up and down movement you are playing with y so when your key is up what i want to do is whatever y i have maybe i want to subtract 10 from y this is same as doing this okay they both are same and when you have let's say down you want to increment y by 10 and if you have let's say left when you press on a left key you want to update your x actually and if your event key is this is all probably very easy to understand you're just changing your coordinate now when you're having up key you're not changing your x because x remains the same and when that happens you are just after after changing your coordinate you are calling draw block function because draw block needs to draw it now let's look at draw block function so in draw block function by the way when you are moving drop your block up and down uh let me comment this line i'll tell you why that line is needed let's first do it without that line so you're uploading block x and y and using that you are drawing that block again and you have to call this flip method otherwise it will not show you what you've done right you can also call update method okay so i'm just calling there is some minor difference you can read about that online so if i do ctrl f5 now see when i'm pressing right key it's moving right and when i'm pressing down it's moving down and then moving left but the previous block are still there i don't want those blocks when i move the block block should just move and for that reason you need this line so before drawing the block you are clearing your screen so when you have this line now see you do up left right whatever and block moves smoothly congress you have a very first basic buy game program working for you you did an awesome job when i'm i'm teaching you on video tutorials make sure you have your code editor open and you do coding along with me because that will give you effective learning in the next session we'll continue with this but in this session i have only this much you just build a screen and a block which can move around all right so far our code looks good but the code is not very readable so in this session we are going to make it objectoriented programming so there is a thing called objectoriented programming or oops so we are going to make it such that it follows the oops principle which is basically converting this into classes and objects so let's get started here you see a huge block of code in your main function itself usually when you're working on proper python projects you don't rather write so much code in your main entry point so you would have things like all right what if i have a class called game okay and this is how you define class if you don't know about classes and objects you can follow my python video on classes and objects and you will get an understanding that's like a prerequisite here this is a constructor so we'll write constructor but what if in my main method here i have only two line of code and that code will be you create an object of a game and you just say dot run okay and here of course you will have a run function and we'll implement all these functions but this is my idea i want to have only two line of code in my main method and everything else should be classes and objects all right so let's start moving all of this code into your classes so the pie game in it of course this will go into your game initialization then the next thing you have is a surface so this surface will also go into your game initialization and i will make this surface a class member and when you do self.something you're making that a class member so that later on the surface is available here as well okay so that's the idea all right so we moved that okay we have block which we will look into little later but let's see if there is anything else nope that's it all right so so far game looks good now the block is something we are building to build our snake ultimately so then how about we build a class called snake okay and that class this class will have that block object so let me move all this here so again i will just say self.block and then um self.x is hundreds of dot y is hundred all right so this way i get rid of that that code so see you now kind of get a get a feel of this process where you have written some experimental code and when it works you want to convert it into a object oriented code and this is how you do it all right now when you see this is like drawing the block so i want to draw the block so in my snake method maybe i can add draw function you know so when you say snakesnake.draw it will just draw that snake so right now a snake is just one block okay here i need a parent surface but i don't have that so generally when you're doing class programming you want to pass that surface as an argument into this function or the other option you have is you store it as a class member so i'm just going to call that surface a parent screen and i will store it in a new class member called parent screen okay and when i draw it i will say self dot apparent screen dot blit and this block has to be self dot block and this x and y has to be self.x self.y all right okay so now you know this game see this game is kind of the main object and game is having a snake inside it so you have a game game has a snake so for that for that reason i will create a snake inside my game class so i created a snake inside my game class now snake constructor expects parent screen so what is my parent screen self dot surface okay and once that is done i want to draw the snake all right so this looks good so far so by the way when you draw this you're drawing this so you're kind of replacing this so that draw function is exactly this draw so there were two more things that we wanted to do which is fill and see this this line will come in the middle okay and this will be self dot surface dot fill and this will be pi game dot display so when you have snake and when you say snake dot draw it will draw the snake or a block on the surface so now we remove this function as well okay what is left now okay a main event loop is left so this main event loop i will copy this in a run function okay because that run function is kind of the main function so we are running the event let's look at it okay here i don't have access of block x and draw block etc right so what do we do but we have access of snake object so so snake all right so let's do this so when you click when you do left click you want to move the snake to left so what if we have a function called move left so that i don't have to worry about all this when you say move left it should move left when you press right key it should move right releasing this will be amazing it will make code so much readable so move right i'm just typing these methods they don't exist but i am going to write them this is how you do object oriented programming move down okay so i need to write all these methods in my snake class now so let's write that method to move left okay what do you do when you move left we saw in a previous session moving left means you are just changing a position of x because your y is same so i will just do self dot x 10 you know subtract 10 pixels from your x so that your block moves on the left hand side once it is subtracted you want to draw it and for drawing there is a method so you can see your code is becoming more readable it kind of makes sense in your brain right moving left is subtracting by 10 and then drawing it previously code was little cryptic and similarly you can uh you can maybe implement the rest of the method see move right move up and down okay so it's very very easy very easy to understand now so when you read your code see you're starting your to your python program first you're creating game game says run okay what does run do run is running your event loop in the event loop you are having snake you're moving left and right so code is more readable now and when you right click and run this okay snake object doesn't have an attribute self dot surface yeah it doesn't have selfdrive so it has self the parent screen actually so i'm pressing left and right and the block is moving i did not make any functionality change but in this session we did an amazing thing which is converted a programming to object oriented programming this is needed if you want to become a good programmer a good programmer can program write object oriented programming method and the code is readable maintainable you know when you work for big companies the code bases are very big so when new person joins already there are million lines so if code is readable like see right now code is more readable then it helps so oops or object oriented programming concepts makes you a better programmer that's why that's why i think this session is very very important so i hope you all learned all these lessons till now we are moving this block manually using left and right keys in this session i want to move this block automatically you might have seen games where blocks are falling planes are flying you don't know anything and they keep on moving so i will do the same thing with this block so that if i'm not touching any key and if it's going down it keeps on going down when i touch right key let's say it will just change the direction but it will just keep on moving on its own so for that what i need to do here is introduce a timer seen this while loop this code is handling all key events but outside this block you know like here i need to maybe put a timer so here i will put some timer and on that event so let's say i have some method called for dot uh so if i have a method called self dot snake dot walk so snake i have right so that's hypothetium we don't have this method but just hypothetically think that on this method snake walks on its own without you placing a key now this rule loop is running very fast so if you do this snake will move really really fast so you need to introduce some delay and you can use time module for that so we'll introduce some sleep time so here we'll say time to sleep let's say point two second so every two sec point two second it moves on its own point two second moves point two second moves and in this walk function we need to implement here so let me just implement block function here so walk okay what do we do in walk well of course in walk function now you will be drawing uh the snake and based on the direction based on the current direction at given point of time snake could be moving left right top bottom so based on the direction you need to increase the x and y coordinates okay so we need to have this direction parameter which i'll add here so self dot direction let's say initially you're making a direction up or down it could be anything i'm just randomly selecting and based on that direction so let me do this so if self.direction is up so if it is up what do you do well we saw previously that if it is up you only reduce yc we are reducing y and if the direction is let me just copy paste just to save some time here if it is right of course you are more manipulating only x if it is up y and so on this is something we already went through when we are looking at this function and you draw it so now what will happen is even if you're not press your any key in your while loop based on a direction snake will keep on moving on its own now what happens when you press any key let's say if you press left key you call move left which is fine but on this move left you don't want to change anything you want to change only the direction okay so i will say move left my direction is left if it is move right my direction is right move up direction up move down direction down looks good i think now let me try it so just to go world on while loop when you call this function you are just changing a direction and even if you have not press any key on walk function based on the direction you are moving the snake so say i'm not pressing any key now using my hands and block is moving when i press right key just change the direction up key change the direction left key chain the direction all right looks great it already looks like a game don't you think so in moving blocks games this is what they do so congratulations you just implemented a nice version of a little small stupid game uh in the next video or in the next session we will convert this block into a fullfledged snake in this session we will be building a snake out of a block see right now the there is only one block it is moving on its own uh this is actually a snake with length one if i put let's say five six blocks let's say if i put six blocks then this becomes a snake so we'll introduce a length parameter in our snake class and if let's say length is 5 then it will look like this so instead of one block we have five blocks so the first thing i'm going to do now is enter my zen mode you know i'm doing a meditation the snack and apple meditation so here i will introduce a parameter of length lngth so self dot land is equal to length and now i don't have a one x and y because when you have a snake with size five essentially you have five x and y c one x and y is nothing but a left top coordinate of a block so if your five blocks you should have five x and y and how do you do that well in python this is easy you can do something like length okay so this will initialize an empty array of size length if you want to verify it what i do usually is i go to python console so exit the same mode i go to python console here and if you do something like let's say this file oh this is not working okay i need to given um some value so let's say if i do 67 see if i do five it's creating an array of five if i do three it will create an array of three elements so that's exactly i do this python console is a useful feature you can use it so now i will just initialize it with size 40 so by the way i will just create a variable call size is equal to 40 and this size is nothing but the size of a block actually the actual length of the snake is this length and see if you look at my block dot jpg right this is the image we are using if you look look at the dimension of it it is 40 by 40. so that's why uh i want to put initial position to be let's say 40 40 it could be 80 it could be 120 and then um i want to just implement my move logic now before i implement my move logic i need to change the draw function because draw function is just drawing 1 x and y now we have multiple x and y so instead of this i will have a poor look and i will say you know go till the length and do draw x and y basically okay now initially i initialized my entire array let's say if you have a snake length of two so let's do that so here when you create your snake let's say i have a size little bit two you would ask me why do you have bought the blocks at same position ideally you should have it at different position but my move logic will take care of it it will unwrap my snake you know as i move so how would i change my move logic then well before i do anything let me just run it just for the sake of it oh yeah it's not working because when you walk you are changing this x and this x is an array now okay so we have to implement this walk function okay how does walk work well let's see so when you have a snake like this okay and let's see if i move it in a right direction i put a right key what's happening is let me mark this line see this is my head right this particular block when i move it to right the block will move to right okay so my block move to right perfect the logic for this is what we saw already if you're moving right increase x by some amount moving up increase y by some amount but what do you do with this other blocks well my second block comes at the position of my first block my third block comes at the position of my second block and so on so every block is taking a position of its previous block now writing this logic becomes very easy because here when you are changing a direction of course the logic remains same for the first block which is your head of the snake okay so this remains same but we have more blocks so for those blocks you need to put them at the position of previous block so how do you do that well you have to run a or loop in a reverse direction so you start with the last block so fifth block you put at fourth fourth you put at three and in order to do that you can just do this self.length minus one okay go all the way till uh zero in a range by the way it will not consider zero so actually you are going till one and minus one is a step size so step size means you are going in a reverse so this for loop is nothing but going in a reverse direction you start with 5 4 3 2 and so on and the current x position will be your previous block's position okay and you do the same thing with your y all right let's see see now actually it's a snake with two blocks but see the the distance between the blocks is very minimal it's it's like 10 pixel so i need to make it size which is a 40 so that you know the size of block is 40 so you want to keep them 40 pixel apart so yes i size size size sizes great see i move it up let down my screen now is a little smaller so i want to increase the size here to let's say thousand eight hundred and also that just increasing the timer so that is not moving very fast see so this is how the snake with length 2 looks like if you have let's snake with length 6. this is how it looks like see when i move left up down etc now that my snake is kind of ready i want to now draw apple so for apple so the purpose of the game is snack is eating an apple apple goes at random position and as snake eats apple the length of the snake will increase if you are not sure about this i have all the source code in the video description below so just take the final version of the source code and try to run and play the game so you get an idea so here now i need to create an apple class so see in object oriented programming whatever objects you have you create classes for those objects so we have snake we have apple so we created classes for both of it now apple is also an image so if you look at this image this is also 40 by 40 pixel image so i need to load that image first right and we have already seen how you load the image like the same code i just copy paste it here and people also needs a parent screen here see how you have a parent screen i'm just going to change this we need a parent screen so that apple can be painted on that parent screen okay and what else do we need yeah x and y because apple has a position right and this position will also be in the multiple of 40 so i'm gonna keep it 120 so like 120 by 120 see if i put it 20 then snake and april will not align it has to be multiple of 40. so just to make it generic you can do something like this also and of course you need our draw function to draw the apple and how does it draw work well it will be i can just copy paste this code so there is no for loop of course so here instead of solves that lot i'm just saying self.image and x and y i'm painting here i probably don't need fill here because fill i will do it in a snake draw function okay all right so now i have my apple here now apple i need to initialize in my game class okay how i initialize snake so i will just say this is my apple and the parent screen you need to pass and then you need to say draw now when you are running this event loop see here you are saying self.snake.work so here also you need to draw your apple otherwise what happens is in the walk function you are uh in a draw function you are clearing the screen so it will clear the apple so that's why we need to do this so see ice i see the apple now which is good um okay now one thing i noticed was right now i have two objects if you have like four or five ten objects and you have to keep on doing things as object.draw so just to modularize my code i will write a method called play in my game class and this method play will have those two methods and then it's just working the same but at least code wise when you read it it's like in your full loop okay in your while loop play and play is doing all the drawing okay so far we are moving over snake and there is an apple but there is no actual game logic which is if snake eats the apple it should increase the length and then april should move to a different position so in this video we are going to implement that logic now collision detection is a very common thing in any of any video game so we are going to implement that concept so first we will write a function in our game okay so what do we want to do just think about it when snake's head hits the apple we want to increase the score so how do you detect that so just just think about it so let me open uh paint and kind of go over that a little bit so let's say your this is your application screen and let's say this is your name this is your snake right so it's just uh like a couple of blocks i'm just going to make it bigger and it is just uh list of blocks nothing else right okay so let's say this is my snake and let's say this is my apple now the apple also has a bounding box so apple is actually a circle it's an icon that you're showing so it will be like this and when you hit that apple what's happening is let's say this snake comes here for example this guy here let's say comes into this area let's see this is collision right so here what happened is actually the the y the x of both of these are same the snake is moving up but what has changed is the y so just think about why so this is your y correct y one let's say this is for apple and this is your y two for your head of the snake right so this is the axis that i'm referring to and for y one this is the point that we're referring to now what happens is when they collide see y one plus size is what so y1 plus size will be this much see y1 plus size is basically this much size is the height of the apple so now what happens is y2b y2 is in that boundary it is in y1 plus psi so if you do let's say y1 plus size this y2 now is in that boundary you got it so my y2 is now less than y1 plus size so this is how you can detect the vertical collision same thing with x okay so we are going to implement that method as per that logic which i just explained so in the collision always you're trying to decide if two rectangles are colliding so then you will always have x1 y1 x2 y2 okay and if x1 is less than equal to x1 plus size see the width and height of both apple as well as the snake block is 40 so that's what we have initialized size to be 40. so x1 is less than that and actually x1 is uh so the logic will be x1 is greater than equal to x2 let's think about y first okay so why here your y2 is less than y1 plus size okay so similar logic you can apply for x1 as well so x1 is greater than equal to x2 and x1 is less than equal to x2 plus size and the same logic applies for y1 and i'll go to the diagram and explain you in a bit but if the same logic for y if both of these conditions are true then you return true saying that there is a collision this means there is a collision otherwise there is not according okay so let's let's understand this y1 greater than equal to y2 and y1 less than equal to y2 plus size okay so here so here this is being my y one so let me just uh here in my code at least see i have this as y2 and this as y1 so what's happening is see let's look at this logic here so that logic will go here this is the logic we have right what this means is let me just put it in a bigger window what this means is uh my y1 is less than y2 plus psi so we you already saw this y1 okay is less than of y2 plus size okay and ah your y1 is greater than equal to y2 so y1 is greater than equal to y2 okay so you can just debug the code and kind of figure out what it means here actually hold on y 1 is greater than equal to y 1 is actually less than so i think previously what i was doing is correct which is see it can be either way like so i think this is y1 and this is y2 okay this is white and this is y1 plus size so if you look at this let's say if you think about this as a y axis so y axis starts from zero first right so it will be zero here then it will be whatever like maybe 5 here and 20 and so on so it is increasing in this direction so if you think from that perspective the y1 is greater than equal to y2 right so this condition is met and y1 is less than equal to y 2 plus psi so if you have y 2 here and if you do y 2 plus size which is 4 t so this block so y 2 plus psi so y 2 plus size is this much right so y y1 is less than that that's why this collision logic works so just debug it you figure it out this is a simple logic now when snake hits uh the apple you want to increase the length okay so here in the play section if self dot is collision okay and you you want to check the impact with only snakes head actually because you don't need to check it with the body so snake's head is the position zero and then you will say this apple dot y so checking the coordinate of apple and snake's head which is at element number zero and if you find a collision you will say this print collision occur right now just do let's do this much uh just to make sure things are working okay and uh after that let's see if we have anything pending so you're doing collision okay let's run it so you see that you see this collision occurred message right so that means the collision happened and now we can whenever collision happens what we want to do is we want to move the apple to a different position different random position so let's write the code for that so we'll say apple dot move so this means once snake apple hits the apple we move apple to a random position and for that you can come to this class here apple and write this method called move so here you will move uh this two to a random position okay now how do you do that so there is a model called random which you can import here and i'll show you see if you do idle uh i'll just quickly show you how random works so random has this function called rand end so if you give lesson 1 and 10 it will give you a random number between 1 and 10. see every time you run it gives number between 1 and 10. now our window is thousand thousand by 800 correct and apple's size is 40. so if you do little calculation thousand okay divided by 40 you get like 25 increments and if you do 800 divided by 40 you get 20 so you get like this horizontally 25 increment of 40 and vertically 20 increment of 40. so what i can do is here i can say random dot random okay give me a number between 0 and 25 so horizontally i have 25 increment into size so what will happen here is if you look at idle let's say between you know like 1 and 25 i'll just do one because or 0 is also fine and size is 40. so see every time it gives me a number which is always gonna be less than thousand so we don't go out of our window boundary and the number will be divided by 14. it will be a multiple of 40 and i did the same thing with pi so for y with 800 height you can get 20 increments okay so you after the collision you move it so let's run this see after i'm colliding so my collision detection is happening perfectly okay and the snake is moving okay now on collision you want to increase the size of the snake so that will be a score so in the initial phase i will maybe i'll start with the snake size of 10 2 or maybe one and then i just keep on incrementing the length okay so on collision you want to increment the length so here okay where is my collision yeah here you want to say length you want to increment right but you have to do something else as well which is when you increment your length see you need to add one more block in this x and y because x and y is an array it is holding the position of the new block so for that reason i will just write a new method here called increase length okay where you first of course you first increase the length but then you want to add something into x and y so this is how you add a new element into an array and i'm adding 1 as a value you can always tackle this in your walk function in your work function we'll put a right coordinates of x and y that's why we can just start with some random value here so here i will say increase length and let's run this see now after it hit it it the size of snake is 2 now see it is 2 and if i hit it again it will become 3 you will watch it deny it become 4. pi and so on okay i think i noticed something weird ah see if it moves even near near say i'm not going through apple if i go even above apple this is fine if i'm going even from near apple it is increasing the weight and i think that's because of this less than equal i think this should be probably less than see now it's working as expected so now it increase the length and so on so here also apple moved to a very far position so i want to restrict it so i'll just say 40 this is 90 on 0 0 position is probably okay all right so this is looking pretty good so now next thing i want to do is display the score okay so in my game function i will write a method called displace code and this should just display the score at the maybe top right you know i will choose top right to dis for displaying the score and pi game has this font module so i'm using the system font which is area with the 30 font size you can increase it as well and then uh this font i will store into a variable called score so this is how you do it and here the score is nothing but the snake's length okay so i'm using python format string storing it uh storing the score there and in render function this is uh your color so if you do like 255 to 55 255 it will be white color so you can choose whatever color you like and then you know we always have a surface so whenever you want to show anything on the surface you have to use blit function and then what are the coordinates well let's say 810 so that there will be top right corner and once you do that here i can display the score and after displaying score of course you have to do buy game dot display dot flip so you see the score at the top here okay so now ah c score increase two score is equal to the length of my snakes three zero i'm doing good wonderful my game is coming up so nice guys so in last session we calculated the score by finding out the collision between a snake and an apple in this session we will work on a game over logic which is if the snake is curling around and if it hits its own body then the game is over so for that again we are going to use this is collision function right so here let me just run it and tell you what exactly i'm trying to do so here let's say you have a snake of size seven when you run it ah see if you get into this situation you see like when snake is crossing itself then we want to exit the game so this was a logic of snake colliding with apple now we are writing a logic of snake oh gliding with and for that you know snake has a number of blocks right so you can just do for i in range 0 to self dot length now what type of collision you're trying to find well you want to find out if the head of the snake which is x0 collides with itself or not so if you look at whatever this diagram that we have let me just clean it all so here let's say this is my snake okay and let's say it's moving moving moving and it makes a ton like this and it makes it turn like this and then it again goes here then that's collision so then that's when you should die so this guy is the head so you want to find a collision of head with remaining blocks so you will say if self dot is collision okay position of what self dot snake dot x sub zero set dot snake of y zero because x zero and y zero is ahead with remaining blocks so x of i and y of y now since we are finding a collision with x0 we can start with one okay now let's think about it even we can optimize later later so this head of the snake will never collide with the next part you agree no matter what happens it will never ever collide with this and i think same thing will happen with the third block can it collide with third block no so 0 1 2 so maybe you can start with 3 directly so here we can start with 3 and if there is a college collision for now let's say you want to exit the game you'll say game over and exit it okay okay i don't know what happened it went out of the boundary see when it when it hit itself it it is exiting with that game over message so logic wise is working fine but what i want to do is when that thing happens i want to show a nice message saying that the game is over and um also if they want to replay then we should give some them some option of replaying let's say if game is over if they hit enter then we want to uh give them that option okay so first of all i'll remove this and instead of that i will raise an exception see exception means so exception raising exception means something unusual happen and you want to go out of the game and you're throwing an exception and here you have to catch that acceptance and this is how you do it if you don't know about this again follow my basic python videos and you will get an idea on this exception and here all right what do you want to do here i want to maybe show a game over message okay and that game over message uh let's see what do we want to do so in the game over message here show game over here in this method i want to display a nice text in the middle saying that the game is over uh and for that first you need to clear clear the surface right because uh whatever you have you want to wipe out you just show a message so here for fill which color did we use well we use this i'm going to store this in a variable called background color okay so background color is equal to this and i will see whenever in programming language when you are using something more than multiple time more than one time it's better you create a variable okay and once the screen is wiped out now you can render your text so but that will use the this thing like font your lead we already show the score so we can use the same thing here and okay so i'll say line one spawn dot render something so what is our score so we want to show the score to a user and then we want to exit the game so you see score this one so i'm just copy pasting the same thing and i'm showing it in white color you can change this this color this is rgb and self dot surface dot grid and anytime you want to show anything on a surface this is what you call and i am showing an x and y's is 200 200 300 which is in the middle of the screen i want to also show another message saying that to play the game again you can hit enter maybe and i will just show line two and 350 name okay so show game over let's see what happens okay something is not right so show game ever is here okay so let's turn so i realized this was happening because i did not have flip in the shoe gaming work so whenever you are making any ui changes you have to call pygame.display.flip so ui is ref this is like refreshing your ui so now see so game over message is showing up but then it's again restarting the message i restarting the the the game and why is that happening well that is happening because just think about it you show this message okay after that you wait point two second you're again going into this loop see again processing all those keystrokes so we have to implement a pause mechanism here so we'll say okay pause is false and when the game is over pause becomes true and when the game is paused by the way i don't want to uh process all of this right so game is paused here yeah if the game is paused i don't want to process even left right all these keystrokes or yeah this one if not pause i don't play the game if if it is paused correct so this is something you don't want to do also okay let's let's run just this and see what happens the game is over now now i hit anything and it's not go it's not restarting so we said to play again press enter so if you press enter you want to unpause it so how do you do that well here you can say if event dot key is equal to k enter is basically return and here you will say pause is true okay so pause is false actually so here okay game exited okay i'm pressing keys nothing is happening and when i hit enter say game started again also just to make it safe you don't want to process even left right keys if the game is pauses pause guys you don't want to do anything so don't process all these keystrokes if the game is paused simple enough all right now let's see what's remaining so after the game is paused see my score is right now let's say eight nine score and game exits my score is nine if i hit escape i go out but i want to play this game again so when i hit enter see it is starting with score 9 again so that is bad because you are not resetting the game so here you need to reset the game so you will call selfloath reset method and reset method is something you will implement here so you will say reset okay how do you reset the game well whatever snake and apple you have you just reinitialize those two and i'll initialize it with one okay so when the i have scored seven and when the game is over when i hit enter see i start fresh with score one okay so i think you get an idea and by the way i don't want to start with like score seven in the beginning as well so here also i do want so that way you know you always start with one block then it increases ah my apple moved out see my apple is moving out where is it yeah this is happening because we have we need to reduce this limit maybe yeah because it's probably moving too fast so that's why i'm reducing the limit and i hope it works now yeah so far our project is working fine it is functionally correct but it doesn't look very fancy because it doesn't have any music the background is dull so in this uh session we are going to add background music as well as the background texture or to this game for this what we'll do is whenever snake is eating an apple will play some music like ding or something when the snake collides with itself we'll play another music and then in the background also we'll keep on playing some music so first let's take a snack eating apple scenario so you need a short music clip first of all so for that i did some google found this nice website presounds library which has this ding sound so see if you play this link sound see chin so we'll play that when snake it apple so in the resources directory i downloaded that file so say ding.mp3 and for collision crash so when it collides with this we will play this music okay now when you do google on pi game pi game play sound you will find this class in pi game called mixture which has a sound element to it okay so we'll be using pi game mixture for playing music and in that you first need to do pygame dot mixture dot in it so let's do that it will initialize the mixture model so let me just first go into my meditative zen mode all right so no distraction now you go away buddy all right so here in the init i will say pygame dot mixture dot in it so my sound module is initialized now when i have a collision or let's say yeah when i sneak eat apple i want to play the music so how do you play that so you will just say simply by game dot mixture dot sound okay and in the sound you will use resources i will use ding music and let's store this in a variable called sound and then you can just say pie game dot mixture dot sound dot play so that plays the sound so i'll right click run it see when snake hits apple it will play the music c listen carefully see ding okay and when it collides you'll be playing the crash music so here i'll just say crash so let's taste that as well putting guys working okay see your game is over your score is three so that sound that you just saw now whenever in your big program you find that you are repeating the lines of code it's better to put them in a function here between these two line and these two line the only difference is this name of the sound so what i can do is i can put these two into a function called play sound let's say you know and we can supply the name of the sound as well actually so here see here i can do self dot play sound but i need to tell this function that it needs to play ding so i will just say ding here which i can get that as an input sound and here i can maybe convert it to python format string and here if you have sound variable so whatever you pass here it will try to load that dot mp3 file so here in this case it will be crash okay and now tomorrow if you want to play 10 more sounds you just call that function with the name of the file if you don't want to use name of the file then you can just check here like if sound is equal to ding then that's your file okay all right so you can run it it will work okay now i want to play background music as well while the game is being played you know you want to hear nice music so i have downloaded this background music from youtube audio library so that music i will play in the background so again i will define a function called play background music here in here i will be playing that music so now this time instead of sound i will use music so the difference between the music and sound is that sound is just one time like dingo crash music is like a long music which you use generally as a background music and resources okay and then buy game dot make sure music dot play so that will play the music and you want to call this function when the game starts right there itself you want to start playing the music okay so okay initially there was one or two second pause because the game itself the music itself has a pause okay now once this is done what you want to do is see when the the game pauses for example when you hit like when you hit snake body okay you want to stop the music so let me show you what i mean see music is still playing i want to stop music and when you restart then maybe start the music so when you have game over scenario here game over right here during this time maybe i can call pygame dot mixture dot music dot pause so it has a nice method called pause so it will just pause the background music okay and uh you want to resume it when user hits enter so when this is when you are unpausing it so here you can say pygame dot make sure dot music dot on pause okay and now it will pause and pause easily the music stop now and when you start again it will uh restart the music again now i want to change the background of our game so for that i have downloaded this nice texture so this looks like you know grass field on which snake is moving around so i will set this as a background in our game so for this purpose i will here define a new function called render background you know and you know like like image you can load easily by calling pygame dot image dot load and here you can load this background image and if you want to show this image you know that that you have to use this blit function okay so try game dot actually sell where you specify where you want to draw the image on your surface and x and y so we want to render this background from zero zero corner all the way right now this background size is actually you see 1920 by 1080 and our window size is thousand by 800 so it will work okay now this render background i will do why should i call this function you know what we are doing this background color so wherever we are calling this function you have to replace that with rendered background so here self dot okay now this is weight so this is different class actually so here you're drawing it right so you're drawing snakes so where do i where do i draw snake here here yes here so here i have to say render background because you draw apple and everything so just before that you have to render the background okay where else did we use oh show game over so here also self dot render background so now see nice background you know it looks looks pretty good so you can play with the background the apple image the score fonts and make your game little more fancy the code for this entire project is available here i have python projects directory where i will be uploading more python projects so please keep an eye right now it's just one project snake game and if you go to that project by clicking here by the way my next project is gonna be document text extension using ocr and there'll be different projects that i'll be covering but for this project i have an exercise for you so if you scroll down the exercise is whenever snake hits the left or right or bottom boundary or top boundary you want to exit the game okay so game should remain in the field if it goes out of the field then game is over so you need to add that logic second thing you need to do is increase the game speed you know in the game whenever you go to next level the challenge the difficulty level increases so that's what you're trying to do here once you develop your own solution then you can click on my solution by clicking on this link but please try to work on your own first before you click on this solution now that your game is ready you want to convert python file into exe file exe file is an executable file which you might have used it for different programs so this is something you can give it to your friends and your friend can just use the exe and run the game so this completes the whole game development cycle when i google convert python to exe i found this nice module on pi pi so just do pip install this particular module on your computer to install it so if you do this it will just install that particular module and once it is installed you can run this command on your command prompt and it will open a nice user interface where you specify your file that you want to convert into exa so this is the final file path so i supply that second option is either you want to create the whole directory or just one executable file now you would probably prefer this because it just creates one exe file so you can do that but right now i'm having some python 3.8 incompatibility issue so for me it is not working as of today but you just try it it might work for you so i will just go with one directory in the additional files i want to specify add folder because i want to specify all the resources the resources has background music and everything if you don't do this the it will not work so this is a very important step and then you just click on this command say convert that to exe so internally this tool is taking your python file and generating the binary or the dot exe file for you i selected the directory options so it will create a big directory but if you choose one file option it will create just one file for you once this is done click on open output folder because that's where your exe file is so okay since i created directory it it has created the whole directory here okay see this is what i got and if you click on this exe now see my game is playing this is my game guys now you can right click this and you can say send to desktop and when you do that it will create a shortcut on desktop so let me show you so it created this shortcut and now see whenever i log into computer i want to play the game i double click say it's like just any other program you see so now you can take this folder zip it or there is an option to convert it into installer as well you can convert it to installer and um give it to your friends and you can be now proud about yourself because you build the complete game you can use these learnings that you did in all these videos and maybe make a different game maybe you can make tic tac toe or different type of games so now you are capable of building fullfledged game in python so i hope you like this series if you did please uh share this project with your friends i have complete source code available here along with exercise the solution everything so all you need is a laptop and internet and a little bit willpower to learn this thing these things are super easy these uh this project is perfect for even kids you know if you are in fifth grade fourth grade you learn a little bit python from my videos and then you do this and you will be able to build cool games so i hope you liked all these videos and thank you very much for watching