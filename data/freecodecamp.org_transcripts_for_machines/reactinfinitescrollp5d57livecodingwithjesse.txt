hey everyone welcome to live coding with jesse i'm jesse and today we're going to work on the infinite scrolling for the search page and i am in my office but i'm on my laptop today every stream health seems uh seems pretty good uh so the networks that works good so uh hopefully everything will work out so on it was probably unwise with me but i started a an update on my imac and i i had i thought plenty of time for it to finish but it's still not finished so that's why i am using this laptop right now but everything looks okay and let me get i'm just trying to get everything in in position uh let's see i i have a certain setup for all my screens so i wasn't expecting to do this and i have different monitors hooked up than i normally do to my laptop okay looks good now hey everyone see some of you are in the chat also um i completely forgot to announce that i was doing this stream on twitter and on instagram which i normally do i i don't know i don't know what i was thinking so uh hopefully hopefully that won't be a problem i know a lot of you subscribe to the channel so you're getting the notifications anyway and let's let's get started uh was renato asked if this just started it did it just started we haven't even done any coding yet um let me switch over nope that's not the screen i want okay i'm gonna have to add another screen here and display capture there we are nope that's not what i wanted uh let's add one more scene sorry sorry i messed with this i just um if you're just coming in i'm on a different computer than i normally stream with in my office so that's why these it's it's a little messed up right now actually i think i can just change this one video capture uh display capture there we go let me just change this one i'll have to remember to change it back when i stream from home okay that's the right screen sorry about that i'm gonna make this a bit bigger so everyone can see oh goodness yeah this is definitely different on the uh sizes and stuff there we go okay it's all in there now okay so hopefully that size will be good for you all uh and you'll be able to see i see there's some questions already in the live chat i will get your questions after we do a little bit of coding so i'm going to set this uh pomodoro timer whoops and we're going to do one session of coding and then we'll take a little break and i'll get to the questions so this is our search page we haven't worked on this page for a while and um we we got the basic functionality working but there's one thing that we didn't do that we had talked about doing and that was uh having this infinite scroll feature uh so let's see make sure this is still working yep still working okay so for right now what we get uh when when we search is the category uh i get i should say like the post type so we're pulling in this data from wordpress so we get what is essentially the post type in wordpress and then we get the title of that post type and we also have made that into a link i don't think all the links work though and we're not going to worry about that today what we do want to do is make sure that once we scroll down we'll do another search and get more results so this is going to be a little bit tricky let me go to the code and show you how we're doing what we're doing in case you you didn't see that that stream it was at least a month ago i think and so show you how we're doing what we're doing and then what we need to do to get there we'll try to break it down into small steps and then see how many we can get through so this is something that i've done before on a nonreact project um so this will be interesting to see how how we're gonna do this with react i don't think i have this yep there it is i did have this page open okay let's shut the side drawer to give us some space okay and uh if you want to follow along with the code check out the github repo the link is in the description and i i'll just start from the top and just give a very brief explanation of of what's going on here so we have this utility that we've made so that just basically is a wrapper around the uh the fetch api okay so the fetch api that's that's in the browser uh and we're pulling it in as get json so when you see that basically all it's doing is just using fetch to get data and returning it to us in json format so now let's go down a bit and see you know where what kind of data we're getting so this is what we're using to actually make the call this is our base url to our wordpress installation and we can reach the wordpress api endpoints uh by you know going to wpjson wp slash v2 and then after that we have a plugin running in our wordpress installation called multiple post type which allows us to fetch data from multiple post types uh so that's what this part means now we set the per page to 100 that means we get 100 results per search this is the maximum that you can get with wordpress i don't know i've never come across a way to get more than that so for now we're just going to assume that that is the maximum we can get in one go uh which is not bad i mean it ensures that there's not an overwhelming amount of data coming in uh so i can live with that for now and then we search for a specific term and we also have some filters right over what type of data we want so that would be these right so we can choose to get all the data from from every um post type or we can just search a particular post type okay and then we have some sorting going on which really isn't gonna affect what we're doing right now too much so what we need to do then when we scroll down to a certain point in the page so let let's say we've done a search and in reality there's there are 500 results we're only going to display 100 of those results to the user at first but once we scroll down to a certain point on the page we want to grab the next 100 results and then we scroll down more we want to get the next 100 results and we want that to happen in the background you're preferably in a way to where the user may not even realize that more data is is being fetched so they can just scroll when it's seamless so i mean we'll have to mess around with the timing on that i mean i don't want to unnecessarily fetch more so you know if we set it to just get the data you know let's say we scroll here maybe a little early but you know for sh if we wait too long then the user will have to wait and if they're on maybe they're on a slow connection they they won't even realize maybe they'll scroll back up before the date even comes through they don't realize that there's more so maybe about here is the point where we want to fetch new data obviously if the user scrolling very very quickly they're still going to make it to the bottom before that data you know appears but that's that's the goal so we're going to have to just to kind of break this down what we need to do first is be able to track the position on the page and be able to call a function when a certain position is reached once that happens what we have to do is just modify this fetch fetch search term function to be able to grab the next 100 so i i think would i think we'll just modify this to do that i thought maybe we could just make a whole another function and we'll see it depends i don't want this function to get really huge and hard to to think about so we'll see if it does get like that maybe we'll break it out uh separately so first things first let's track the scroll uh and react so i have not um uh sorry i mean messages i have not uh done this i think i've done this in react yet if i have it's been a while and i don't don't really remember okay so we're using material ui so the first thing i want to do is see if material ui has any solutions for us built in before i go elsewhere and either try to find a package that does it or we just try to make something on our own so let's see scroll now i have these scroll buttons um no i was hoping that scrolls by you know what i remember where we've done this before let's check out one of our previous projects so i'm going to go into github here and running laptops running a bit slow if my main computer turns back on i could switch over to that if this is too slow i mean if it only takes a few minutes then it may be worth it what was it a resource center right yes resource center okay so in uh this project of the resource center let's bring this up right now uh just to give you an idea of what what's happening uh when we actually see that code so let's see i think it'd be in the views um let's see i think it's yep here it is okay so if you can see i know it's a little small let me zoom in so we have this menu on the side here and as we scroll things change uh it's hard to tell when i'm zoomed up it the zoom messes up the the scroll so as we scroll it changes to show us you know where we're at in the site and i messed up the scroll so and if we click somewhere then we can get the different two different places on the page which yeah oh wow i don't know what i did but i think all my zooming messed this up anyway this is we're going to try to adapt what we've done here to track the scroll so let's figure out where that's at resource planning ad that's it so we'll go into here and this is all on github it's public so you can check that out um in the fus marcom github organization you can go to resource center check it out actually why not just copy i'm going to copy this into the live chat now so you can go right there if you click that and you get an error then try copying and pasting that if for some reason in the live chat links sometimes give errors when you try to click on them all right so let's see this might be the component that we created for this so we may have to check out that as well let's let's see great okay so we are tracking scroll with props okay is it this yeah it's not mistake all okay so we're adding an event listener on the component didn't mount okay all right let's copy over a lot of this and then we'll adjust it as needed so first things first and this is i guess let's grab all of this these zoom out will be easier for me to grab it off okay all right wow this is already quite a large component at some point this would be a good candidate for uh refactoring so we have a lot going on in here all right so perhaps let's go to the bottom here okay so here's everything but obviously we're gonna we're gonna change this up because we're we're not using our constructor here so let's put this in our state that we're already using okay so now we have that's weird i don't know why it's giving us we should be able to set that to an empty array that's the state so let's get rid of this um let's see all right so we'll do this in a different way let me check my time here and i want to all right we still have about nine minutes and we have we want to throttle uh how we do scroll so we don't basically whatever we're gonna do uh when we track the scroll we don't want that to happen over and over and over again you know very quickly we won't throttle that and i believe we're already using throttle so uh let me double check you should be bringing okay we're using dbounce all right let's see i think we should be able to bring in ah let's check our package json and see what we're bringing in if we just brought in yeah we just brought in dbombs all right so i guess we can bring in throttle as well so let's do the yarn add low dash i think this would work we'll find out a second yep that's working okay so we're pulling in that package uh lowdash is like a collection of of helpers um so there are certain things that are i don't know basic things that you might want to do you know common things that instead of coming up with your own solution you know you can just pull these things in from low dash very helpful basically both d bounce i'm not going to get into the difference between d bounce and throttle right now but essentially you use them for pretty much the same purpose in that you you want to stop some a function from happening too quickly you know too many times when it's really unnecessary that it would happen that many times so let's change this throttle okay so now we will be able to use that and we i want to see how we're using dbounce and then just follow that same pattern there we are the bounce search okay great so scroll down um there we are okay so we're just gonna say handle scroll and close let's double check that i need even more space there we are okay i thought that looked the same so what's our problem down here i'll be using this somewhere else uh okay that's why okay so let's do let's call this throttle throttle scroll right um yeah so we want to yeah instead of calling handle scroll i guess we'll call throttle scroll all right okay so let's just let's think out loud about this um so what we are doing i gotta double check we already aren't using component did mount somewhere but uh what we are doing is when the component mounts we're adding an event listener so scroll event listener and um on scroll we're calling throttle scroll so every time there's a scroll we are let's see there we are so every time there is a scroll hopefully this little squiggly line will go away um but every time there's a scroll um we're gonna we're gonna throttle right so we're not going to allow this function to go off every single time there's going to be a delay um but every time not every single you know pixel is scrolled but a reasonable amount of scrolling will occur and then this dot handle scroll will be called handle scroll then is going to give us the position the y position right and that's going to save that to state now what we don't need here is this active key right because that was telling us what section we were in for the scroll spy we don't need that so we can remove that this part of it and instead we're gonna write a little to do so we remember and instead what we want to do is say if scroll is close to bottom then search okay so if we're if we're a certain amount of time from the bottom then we're going to search for those next 100 or next however many is is left right if it's less than 100 we're obviously going to get that lesser number okay so i haven't really tested anything yet but logically this is working so could still have syntax errors could potentially even have logic errors but that's going to be for the next pomodoro session so right now for right now my timer went off i'm going to take a short break and i'm going to answer questions let's see hey hey everyone is a lot of people saying hi i see some new names that i haven't seen before so welcome all right abby sheik says i want advice regarding where to start my learning i've completed basic javascript um abby check so are you are you then going through the free code camp curriculum now did you complete complete that basic javascript portion are you just saying like in general you have knowledge of the basics of javascript um i i mean i would if you aren't already doing it i recommend going through the free code camp curriculum at freecodecamp.org udacity also has some free online courses that are are good there are certainly a lot of good videos on youtube so free code camp has great you know tutorial videos uh but there are some other youtube channels that have good videos as well i know um learn code academy was uh a good resource it has been a good resource for me and um if you're in if you like books uh learn what is it called eloquent javascript so eloquent javascript is a good book and uh you can read that for free online and then you don't know js is a book series that you can also read for free online uh on github let's see fox wanted asks are you currently at work i am i yeah i'm in my office at work i work at franciscan university that's a small university in ohio all right divya says hi jesse how are you uh not bad not too bad uh how how are you doing broderick says learning a lot on free code cam awesome glad to hear it let's see all right looks like there's some discussion about uh someone's computer in here um sergio says hello jesse hope you're doing fine yeah not too bad not too bad i hope you are doing all right as well uh michael says gotta go to the doctor but i have been playing with implementing the search with graphql it's hard to it's hard due to the weird url structures but i'm making progress plus you can use fetch more for scrolling oh interesting i like that so anyway michael well thanks for um for stopping by the stream a little bit i hope everything's all right and uh good luck uh good luck at the doctor dmitry says hi it's nice to see you i'm glad to to see you in the chat too as well dimitri um let's see uh yusuf says why not install the whole lowdash library um yusuf basically because i don't i don't need most of what's in lodash i really don't need so i just install the pieces that i need if it got to the point where i was using most of lodash then it would probably be easier just to install everything but right now it's you know i just need two things from there also my stomach is growling so if you hear that i'm sorry that is my stomach growling i guess i need to eat uh pool kid says sir i have done intermediate development and node.js for back end what more could i try out for web apps i mean this there's a lot i mean it's kind of like a difficult question there's so many things that you could try out um if you want to get into more like database stuff sorry about you on you could try like uh sql base or nosql um databases uh maybe try to set up graphql and use that um if if you want to get more into front end then you know maybe check out a framework or a library like reactor view or angular so i guess it kind of really depends on like what direction you want to go in uh but i guess just to name a few things those uh those wouldn't be a bad place to uh to start um kelman asks what are the best books for learning python unfortunately i i am not that familiar with python so i don't really have any book recommendations i've i've never read any uh python books so if someone else watching now has some experience with python in particular with with good books for python please put that in the live chat now or in the comments if you're watching this later on okay so my timer is up as you all can see so let's do another 25minute session pomodoro session and uh then we will hey cool no um no errors i was afraid that i had broken it like to the point where we wouldn't even see anything but i guess i haven't so that's cool um yeah so let's let's kind of try to test out what we've been doing and really we could probably just put a console log in here for now i don't like to to do too much without testing first because uh you know if you code a lot and then test after it's harder to figure out where the problem is so this is actually a bit more than i normally do before i test but since we copied over so much we really didn't have a chance to test it so i'm just going to do a console log and let's let's just say scroll we're just going to have it say scroll and then that way we can see so this stage scroll y is greater than position minus one where's position this thing needs to save okay we may be able to simplify this a bit more yeah let's get rid of this each i don't think we need that so let's take out uh these and then take out this each so i mean this simplifying and getting rid of any code at all in this huge component is is definitely a plus all right so now we'll just say um handle scroll this set state scroll y is going to equal window dot scroll y okay wonderful and then now say if this state scroll y is greater than position minus 1. so we don't really want position minus one instead what we want to get and let's let's change this up let's say um instead of position minus one let's say bottom minus uh i don't know let's say 500 okay so it'd be like 500 pixels not really sure if that's a reasonable amount right now but we're we're just trying it out hey i just see ann is here hey anna how's it going thanks for watching okay so if the scroll y is greater than the bottom of the value of the bottom of the screen minus 500 then we're going to console.log scroll also the set headers we can completely get rid of because we're not worried about the headers anymore and handle next i don't think we're gonna need handle next so let's get rid of that as well this feels so good to get rid of code you're not using uh and let's see scroll scroll throttle scroll okay wonderful we've gotten rid of that red line okay so that's this is going to be called when we scroll and let's change our state a bit clean it up because now there's things in state that we do not need so let's get rid of header positions and also active section but we do need to know let's see we need to know what the the bottom like how tall the screen is so how do we find that out let's see um window height let's just try it out let's go in the dev tools console and just see it's most definitely taking a long time all right come on console so let's see uh window dots height wow oh goodness oh i accidentally clicked on one of those links i suppose so that messed things up all right expected a function my ah this shouldn't it shouldn't be firing all right let's see what our problem is what like what did we even change from the last time i mean all we did was just get rid of things right hmm uh don xavier says try window inner heights okay i'll try that if i can get a page to load here hmm all right so something is messed up here all right let's make sure so it looks like so low dash throttle is expecting a function so you run throttle this handle scroll i mean that's that's a function right let's see how we're doing it up here i mean is it let's see maybe it's the uh maybe it's the order i will i guess i wouldn't have thought it would have mattered but um we are trying to call handle scroll before we get down there i don't think this is the problem but it's worth a shot let's save that and a little refresh uh super asks why are we using throttle and we are using dbounds to add late api calls yes so dbounce hey it worked uh yeah dbalances for the api calls to a delay and then what the heck no long page view is not oh i know yes of course log page view is not defined i i copied over stuff that we don't even have so we will eventually uh put analytics in but we don't have that set up right now so that was our other error uh and then yeah to answer your question to use throttle where we're slowing down the the amount of times that we run things on scroll okay all right cool no errors still errors we're good all right so now what we want to look for let's get rid of all this stuff in the console we want to see a scroll well let's see let's let's get some data here um we never set the value of bottom did we no we never said that all right let's set the value of bottom so what i'd like to do is set the value oh that's why because we were testing it out that's what happened in our heights nice okay so that's our inner height so this is how we can get that so let's go back here and let's make uh i guess we'll you know let's put it in state let's go window height and we'll just set it at zero for now and then after we fetch we reset window height after you fetch a search term you know what i let's get the window height on scroll uh so that way uh if i was gonna get the window height whenever we run the search but if a user happens to change their screen with which most users don't do that right i mean developers do that a lot because we want to see that but potentially like let's say um on a phone they could go from porsche to landscape which would definitely change the height so then that way like every um every time the user scrolls it will get the height again so i don't think that'll be too difficult performance wise if we notice there's some weirdness going on then you know we could always rethink that you know at this point we're just trying to get it to work we can always optimize later if necessary all right where is my handle scroll area okay so this states yeah so let's just grab this let's see i believe can we set this um and then we call this window nope window heights window dot height okay you can do that right can i set two different things in state in the same set state thing i'll find out in a second okay so since we're getting window height uh now we're not gonna say bottom right we're gonna say window this state window height we probably structure some of this we don't have to keep doing this state but that can happen when we refactor okay so let's let me make sure this is all loaded by refreshing okay this looks almost refreshed there we are there we go so let's search we'll do a search first and we should there we are we got a scroll scroll scroll okay maybe 500 isn't the best oh morton says i think you missed the window i did window window height there we are we have the correct right now hmm yeah still not acting the same um i'm gonna have to do a refresh again i hate to keep doing these refreshes because they take forever but um just this laptop is just slow how many says hey jesse how's it going not too bad how you doing thanks for joining us in the live chat all right okay that makes more sense okay yeah so you see we're not getting i don't know uh if if you can see what's in the console over there i know it's getting blocked partially by uh my face so uh we don't actually get the console log of the word scroll until we get closer to the bottom bottom of the page so that is working uh just a few observations here of uh problems that we might have is uh it's it's working but it's calling that like every single time uh we stop scrolling like below that point so that's not what we want because we then we'd be making a ton of api calls to fetch the same data so that's no good i wonder how how did i handle this let me check my time oh five minutes all right i don't have time to do this so what what i think i'm gonna do for that particular issue is uh i'm gonna go back to a project i did over a year ago maybe two years ago where i implemented some of this just using javascript jquery i want to see how i handled that issue and see if it could be easily adapted to our situation because i was using the wordpress api and i need to go back there and look at at what the correct syntax is for getting the next set of data anyway so i i don't have time right now in this pomodoro session i don't really want to do a lot of research during the stream so that's gonna be something that i look up and then maybe we'll finish uh on the next stream or maybe i'll just go over what what i did to make that work on the next screen but for now wow i just keep accidentally clicking things what i hope i didn't make the link stretch like all the way across the page inadvertently oh well i'll check that out later so um if the scroll is close to the bottom then search so what we would want to do is it would be a little bit of a different type of search right because we're we're going to search the same terms that we just had so the search term is actually saved in state so that's good um so we're just going to call fetch search term or act we're going to call debounced search right i guess we don't have to we we could probably call fetch search term directly either way it doesn't matter we're going to call that um and then it's automatically going to be able to get that search term but then what's going to need to happen is there needs to be some sort of check um maybe just a simple if statement or return area something like that that's going to say we'll probably add something else to state here like um should it be um scroll search let's just say for now i'm just kind of thinking of what we'll need let's say like scroll search false would be default but then once it flips to true uh then we know that the the search is going to be we're going to need the next set of values so perhaps maybe result result count would start at zero and then we would keep track of how many results we've already had okay so this this may change when i'm going to go back and check my old code i really don't want to reinvent the wheel i remember spending a lot of time on making this work and i i it still works i mean it was it's kind of spaghetti code jquery but it's been working for uh at least a year i think at this point more than a year so i know it works so i'm gonna grab that but we're definitely gonna need some way to keep track of like where we're at so we know what to search for next um and then we also need to know wait when this runs this function needs to know like okay am i just going to do my my normal search or like what am i going to need and so i mean that it may be as simple as just adding on another value here and if you know we can make that value instead of a true false it could just be the value so it could be an empty string if there's nothing or you know it could actually have something in there uh if we are going to do a scroll search so may be able to simplify that a bit i think my timer is about to be up yeah eight seconds all right so i'm gonna go back to the live chat i'm gonna answer some questions uh so let me scroll up a bit okay so we have a question from poolkit it says i have tried out some libraries and frameworks like react so in general some example of projects i could start out with okay so you'd like uh example project um i if i were you and just wanted some example projects check out freecodecamp.org and go to some of their projects and um try to build those projects in whatever framework you want so if you were testing different frameworks you could take like for instance the weather app project and you could try to build a weather app and view and build it and react and build it in angular it's a simple enough project that you know wouldn't take all your time to to build those three apps uh different ones just to get a feel for them or just practice with whatever framework and you can certainly build it without any framework at all but that's where i checked for projects because the the project ideas are there but then it's also like pretty detailed like these are the user stories that need to be fulfilled um so if if you're kind of just looking for guidance for practice that's that's very helpful uh uh yelukiran sorry if i'm mispronouncing that uh please let me know how to pronounce it but yellow kiran says i'm new to react but i can't understand state and props i'm being confused okay let's go over state and props a little bit then so the this this component does have state so i guess we'll start here it may be a bit complex but state for a component they're just basically variables that we're saving to that component that could change based on i mean pretty much like anything that could happen on a page user interactions or um you know whatever type of event is gonna it can be tracked on a page could potentially be you know part of state state could even have data in it like we're doing here so state changes in response to getting new data now the cool thing about state and react is that any time state changes it rerenders the component so we don't have to worry like for instance if we are using uh vanilla javascript or jquery or something and uh like let's say we make an api call we get back data then we have to insert that data into the page so we have to you know have some way to like okay let's wait for the data and then now let's you know select where we want that data to go and insert it into the page so with react we don't worry about that you know we just say if the data is there then render it out if it's not there don't do anything and every single time something in state change is just going to check and it's going to say okay do we have data no all right cool oh we do have data all right let's put it on the page so that's that's where state comes into play and react as opposed to props props are basically values that you pass down to a component and so let's let's find a good example of props let me i'd like to find somewhere that um would be a little bit more simple maybe in the drawer let's see if we have something draw item okay yeah okay so in this this is a parent component called drawer.js and we're passing down props right so we've created all these props so one of them is toggle drawer so we're actually passing down this value this toggle drawer value and i believe yeah that's actually a function so we're passing down a function as a prop which is really cool so it can be used by this child component we're passing down uh expand item as well we're passing down an id we're in in this case we're just passing down a string just a regular string we're passing down text all right and we're passing down some data right so we're passing down this admissions menu which is just an array of objects and then we're passing down uh the value for is open and this is going to be a boolean true or false so let's go into draw item and see what can change based on these so in drawer item you know we have all these props and let's see what what happens so if you see we can use expand item so for this list item on click it calls expand item which has been passed down so it'll reach up the component chain to the parent component that actually has that function and it will run right and it will change the state of that parent component and then that that state will be passed down uh and eventually change uh change was happening so we'll know whether or not like for instance this collapsible menu it'll change the state it is open right once we click on that from false to true now this collapse uh collapsible um list will be open you can see also that primary text that we saw we passed in as props this is getting passed down to props to another component and that's going to determine the actual text that users see for that component the value of the prop is open whether it's true or false is also going to determine on which of these components actually even gets rendered all right so these are um i guess i could just i could show you so the components that we've been dealing with here are these ones here so this is the state that's happening whether or not this is open or closed and which icon gets rendered all right and we have other examples here so that toggle drawer the toggle drawer function actually toggles whether or not that side drawer is open or closed and let's see i mean that's that's a lot of examples so i don't want to get too confusing with it all of this but um that's basically it so if you want to give a value to a component when you're using that component right that's a prop you pass in a property okay if you want opponent to be able to to rerender based on something based on some value then you use state when you do use state never change it directly always use set state so you can use this set state if you don't use this set state react will not know that state has changed and so you won't get that rerender and there'll be a discrepancy and so you don't want that to happen so always use this set state to change state it's if if you've come from trying to build something with vanilla javascript or jquery and manage state like manually and then come into react you can really appreciate just how nice it is to have things like taken care of like that and very organized so i'm not sure if that was a great introduction to state and props i'm sure i'm missing things so help me out in the in the live chat if i missed something or if i said something wrong but hopefully that can it maybe put you on the right track to understanding state and props a bit more how to meet you says jesse i see you're a little tired yeah actually i had a hard time falling asleep last night so i even took um like melatonin supposed to help you sleep and i still had trouble falling asleep so i didn't get my normal amount of sleep i didn't get to exercise this morning so yeah just a little tired i didn't i didn't get the breakfast so there's like all these things happen that contributed to my probably looking really tired right now and feeling tired uh yeah so hopefully i can get to bed at a decent hour tonight uh supra said is this project open source it sure is yeah so just check out the link in the github repo feel free to use any of the code however you want i also really enjoy it if if you all have uh advice open up an issue or if you want to open a pull request i'd be happy to work with you especially if you're new and really want to get your first pull request and you know let me know i'll i'll help you find something uh to work on you know check out the open issues already and i can help work you through that process i know it's pretty intimidating submitting your first pull request so i'd like to help you through that you know maybe if you submit a pull request or two even if it's small then you can kind of get used to the flow of it gain some confidence and you'll go out and work on you know some open source project that you you would really like to be a part of let's see monkey man says i'm still learning html well good for you keep up with it you'll you'll get through html and you'll you'll get into css and javascript before you know it um he says what are those warnings um when i upgraded to uh a newer version of material ui uh some of um uh some things the way things were named changed and so i'm getting warnings about that so i just need to switch over to the newer way of naming things and then that'll get rid of the warnings so that's why i'm not that worried about it right now i know what they are and i know how to fix it i just haven't gotten around to doing it so that's actually something i believe there's an issue open for that now so that's something that would be helpful if someone wanted to submit a pull request for that otherwise i mean i'll get around to fixing it at some point there's probably a newer version of material ui out that i need to upgrade to anyway it seems like they update very frequently which is great i love that raul says jesse i have a major problem my website's mobile version is redirecting into some other websites whoa uh role says do you know how to make it all right again please help um yeah i mean i i would definitely have to see the website so i don't know if you want to you may not want to send details about it in the live chat here you send me a dm on twitter uh you can find i think my twitter's in the description if not go to my youtube channel the link to that is in the description and i think my twitter's linked from there uh i think it's just jesse rweigle with my twitter handle but um send me a dm or something with the info because i i really have no idea without without seeing more of the details uh let's see john kane says i lost my place um john kane says are you using a sub domain for mobile or just media queries okay so it looks like uh john's trying to help out raul with um uh with the issue carlos says what framework are you using okay yeah so i'm gonna skip through a bit of this you all can check it out in the the chat in the live chat if you want but i'm gonna i'm gonna skip through here find some more questions yeah actually reading through some of this right oh yeah i think somebody got into your site and is yeah oh goodness um yeah i mean i you you have some malicious stuff going on uh with your site so that's that stuff's gonna need to be removed to definitely remove any plugins that you you think are are causing that uh i've dealt with some of this stuff with wordpress uh before uh it can be tricky to find where all of it is is um i've dealt with things where like the the actual anyway it's hard to i i don't want to say too much or the wrong thing because i know more of the details but yeah it's you need to get rid of uh all the infected files or that's not going to stop and uh you may get rid of some of it and it will come back and that means you you haven't really gotten like everything so it can be a bit tricky to find it carlos recommends a sucuri security scanner yeah that is that's a good scanner i've used that before okay john hanson's here hey john how's it going uh john says the new react get derived state from props lifecycle method could help build your component that won't cause any page data reloads when it calls your page scroll function that changes the state oh okay i'll have to check that out all right thanks for that yeah i haven't i haven't looked at that um that life cycle uh function at all at all yet i'll check it out uh jojo says how to prevent from ddos attacks uh so it's a distributed denial of service attacks um i probably the easiest way to help protect that is uh use like something like cloudflare right use a cdn um and they have a lot of builtin protections so it won't like guarantee that you'd be fine no matter what but you know if you if you don't want to you know try to become an expert at doing your own security then i would i would say that's you know use something like that and you know let them handle it so that would be my advice i mean if you wanted to get deeper into it i'm sure there's a lot of other things you could do on your site but um really like i just i wonder how worth it it is unless that's something you really want to learn and get into uh carlos says i don't think ddos attacks can be prevented yeah yeah for sure um that's a good point carlos so the original question was how to prevent ddos attacks yeah you can't you know prevent the ddos attack right somebody can try it if they want to but what you can do is take steps to make sure that if it happens it won't mess up your site too badly right it won't slow everything down uh to the point where your site becomes unusable and that's where something like a cdn would would be helpful hey harsha's here how's it going harshet uh mario says is the repo for this project final or a work in progress oh most definitely a work in progress um dell chewables i have heard services like cloudflare help prevent egos yeah for sure yeah i didn't i sorry i i didn't see that comment first uh but yeah yeah for sure um they can be helpful i mean if you don't have that and you notice you are receiving like a ddos attack you can like manually go in try to check what ip addresses that this is coming from and then block those ip addresses so like worst case scenario and it happens and you have no protections you can do that it depending on how big of an attack it is like it may or may not help uh it won't hurt anything to try but it's i've done it before and um you know it it lessens the severity depending on like how quickly you can keep the problem is like it just depends right if somebody wants to spend the money to be able to do a really big attack it could come from a lot of different ip addresses right but if somebody if it's a small attack it's only coming from a few ip addresses you may successfully be able to block those ip addresses and uh mitigate the the attack so um yeah so i mean like definitely like try to get hooked up with cloudflare or another cdn that offers some protection and then you know if it happens then you can try to manually like see where the traffic is coming and then block ip addresses okay all right well i've gotten to the end of the questions so i am going to uh end the stream now uh we we did we worked through a bit right we didn't get everything finished uh but that's all right we've uh we've come up with a process we have kind of the next steps already thought out uh so this will see we'll do this uh i'm gonna say that well i'll try to get this working if for some reason we get stuck and it's really taking a long time we always have a fallback of just use having a load more button at the bottom which is much easier to implement because we don't have to worry about scrolling we don't have to worry about things going off like multiple times so we could always implement that i think the infinite scroll is a little bit more convenient to the user they don't have to click but we have a fallback so no matter what some sort of way to get more search results will happen it will be implemented so i think we'll be fine i say that because you know we we're going to launch this uh on june 4th so we got to really be conscious of time here and like is this feature how long is it going to take to implement a feature and is it worth it you know could we do something that is good but not great just to get a feature in before launch right so that's kind of um what we have to think about now so i think this falls into that category of the infinite searches would be awesome or the infinite scroll would be awesome but we do have a fallback if it starts to take too long um jojo says thank thank you thanks all thank you very much you're welcome uh hopefully um uh the advice uh helps you out all right so i will see you all i'll probably be streaming from uh from home tomorrow uh so i'm not sure what time exactly but uh subscribe to this channel and you should turn on your notifications and you should get an alert before i stream uh if you also if you want to follow me on twitter and or instagram i do try to put up messages letting you all know when i'm going to stream on there as well so if you prefer to find out through through those social media channels you know feel feel free to follow me there as well so until tomorrow have a wonderful day