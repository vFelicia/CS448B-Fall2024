according to the scrum guide scrum is a framework for developing delivering and sustaining complex products scrum is a collection of roles events artifacts and rules that help teams work together more effectively and harmoniously it's been in wide use for over 20 years in a variety of industries ranging from software development where it is best known to harbor development marketing and even nonprofits because scrum is highly compatible with the agile values and principles practitioners considered to be an agile framework along with lean Kanban XP and many others so let's start with our company's vision our mission this is why we show up to work every day right if you're in a bigger company you might have multiple products each with their own vision either way you've got a sense of where you want your company or product to be over the course of the next one to three years or so personally I think it's useful to write visions from your customers perspective one company vision statement that I really like is Amazon's our vision is to be earth's most customer centric company to build a place where people can come to find and discover anything they might want to buy online compare this to a vision statement like were the biggest online retailer in the world another way of thinking of it is this your vision statement reflects your big impact on the world the value that we wouldn't have if your company didn't exist to use Steve's jobs terminology it's your dent in the universe your vision should be succinctly stated right size and scope and realistic enough given your current and likely future capabilities visions help us understand the strategy while having a roadmap helps us understand or tack and desire timing while a vision helps us understand where we want to be in a few years a world map projects what will we be doing over the next three to four quarters but either way your roadmap is still just a wish list basically information that you have available to you now it will almost certainly change over the course of the next several months if it doesn't this should be a huge red flag that you're not incorporating enough feedback from your users quickly enough one of the biggest ways a technology company creates positive user outcomes is to output reliable working software notice there's a difference between output and outcomes you probably need some working software to get positive outcomes for your users but there's no guarantee that a particular set of outputs will produce the desired outcomes working software is just half the battle if you want to keep building working software quickly in the future and keep your customers happy you're going to need to make sure you've built the software well agile teams use a definition of done to help them determine whether or not their software meets their quality bar it's a documented team agreement that specifies the conditions that must be met such as automated testing and scalability before the team calls a piece of work done isn't done this helps protect the team from building up costly technical debt okay so over what time horizon two teams do work scrum teams complete work in one to four week cycle is known as iterations or sprints the team expects to create a done demonstrable and potentially shippable product increment based on my experience coaching dozens of teams I now suggest one to two weeks Sprint's three to four week Sprint's don't allow teams to iterate quickly enough and allow for nasty anti patterns to creep in what work will they complete in that sprint the team will refer to a sprint backlog prioritize lists of the most valuable work that is ready for the team to work on now the team doesn't strictly guarantee they'll they'll get all of this work done it's just a forecast healthy team should be able to fully complete somewhere between 85 percent and a hundred and fifteen percent of what they planned on let's take a moment for an important discussion why do we say that this is a forecast instead of a commitment it turns out that the official scrum guide used to say commitment but they change it in 2011 because quote reality keeps on showing us that it is difficult if not impossible to always fulfill this selfimposed commitment without making compromises to quality on the other hand the chosen alternative forecast has to do with making assumptions based on reliable information and evidence this is much closer to how an experienced scrum team works that said the team should feel comfortable committing to the Sprint goal which would be written in such a way that it can be accomplished even if not all the items in the sprint backlog are completed where does a team get the work for the Sprint backlog they get it from the product backlog a prioritized list of work that the team intends to work on from now to the medium term future product backlogs contain every piece of work your team plans to work on work that you plan to do in the next sprint or two will be granular and captured with detailed acceptance criteria while work that you don't plan on doing for another several months will be less granular it should have just highlights of what you hope to accomplish by the way the official scrum guide calls us a product backlog but I think team backlog is more accurate this is because a single team may be working on multiple products but should only work from one backlog notice how some of the work on your product backlog will be ready to work on while some isn't how do we prevent items from making it onto the sprint backlog before they're ready we use a definition of ready a document a team agreement that specifies the conditions that must be met such as being the right size and having clearly articulated acceptance criteria the team understands before the team pulls the item into the sprint backlog so who are all the people doing all of this work first we have the product owner they are responsible for maximizing the outcomes and impact from any given set of output that a team might produce what this means is that two development teams may write the same amount of software but the saucier that one team produces could be far more valuable to users that team probably had a more experienced and empowered product owner this individual has an incredibly important role and they need to be fully enabled by their organization to set the product direction in a nutshell the product owner is responsible for what and why what we're building and why we're building it next we have the entire crossfunctional development team some companies think that just software developers blame belong in the development team but I think that's shortsighted I found that teams are far more functional when a wider breadth of skillsets such as user experience Quality Assurance and operations are also on the team just as product owners must be empowered to decide what to work on the development team must be empowered to determine how and when how we will meet the desire to use your outcomes and when it will be potentially releasable you've probably figured out that the product owner has a need for speed while the development team has a real need for quality they're both right who keeps all this in balance that's right the scrum master the scrum master is responsible for coaching both the product owner and the development team on effective scrum they teach and reinforce scrums values principles and practices they are a servant leader for the product owner development team and broader organization so how do we make work ready to work on once or twice a week the whole team gets together product owner scrum master and development team and reviews and refines the product backlog together we call this event backlog refinement though some people might refer to it as backlog grooming although this isn't an official scrum event I see it in most implementations the product owner brings up user stories and begins a clarifying conversation with the team to improve the quality of each user story for instance suppose the product owner says that they would like a cup of hot coffee a member of the development team might ask how hot is hot after a brief conversation they'll decide on a more objective measurement of temperature and update the user story our goal will be had to have one and a half to two Sprint's worth of ready stories by the time we start our next sprint the Sprint itself begins with sprint planning the purpose of sprint planning is to a determine what can be most likely to delivered in the next sprint and be come up with a highlevel plan for how that work will be accomplished only the development team can decide what it can accomplish over the upcoming sprint they will do this by considering the work completed and left incomplete from the prior sprint the team's capacity at this sprint and the team's historical performance teams often overcome it either due to pressure from the product owner or naive optimism the scrum master will discourage this with effective coaching having determined a reasonable sprint backlog the development team decides together how we'll complete the work this sprint most teams decomposed user stories bugs and other product backlog items into more granular tasks generally taking a day or less this is effective because the highlevel design of the software occurs in a high bandwidth facilitated event with all subject matter experts present now the team has kicked off their sprint they will check in with each other every day in an event called the daily scrum or daily standup this is a 15 minute time box event that allows a development team to synchronize their work and plan for the next 24 hours it's how the same time in place every day during the daily scrum each development team member typically answers three questions what did I you yesterday that will help our team meet our sprint goal what will I do today that will help our team meet our sprinkle and do I see any impediments or blockers that will prevent me or the team from meeting our sprinkle many teens will also use this opportunity to review the quantity of remaining work and come up with a mitigation strategy if the team isn't on track to meet their sprint goal at the end of the Sprint the team will demonstrate their work to customers and other stakeholders and an event called Sprint review or the Sprint demo at a minimum the team will demonstrate completed work solicit feedback and answer questions teams will also often discuss the current product backlog recent developments that may justify a plan change and any notable metrics finally this break concludes with a retrospective this is when the whole team inspects his own performance and creates an improvement plan for the next sprint it occurs after the review and before the next Sprint planning event together the team will inspect how the Sprint went in terms of team culture structure processes and tools from there it can identify major opportunities to persist what went well and change what didn't lastly the team will come up with a plan for continued selfimprovement usually through actions experiments or changes in team behavior for the next sprint now there's a few rules that aren't part of official scrum but we can find them in nearly every organization first we have our stakeholders they are in our best proxy for an customers and users it's tempting for a stakeholder to attempt to exert undue influence over the team to prioritize their specific request some companies might even create incentive structures that don't reflect reality such as having several stakeholders whose bonuses all depend on getting a feature shipped this quarter even if the team can deliver only one a good product owner can effectively work through conflicts between stakeholders and create a roadmap in team backlog that maximizes value for the whole company next we have our managers everyone from engineering managers to product directors as teams move to becoming highly autonomous and selforganizing to describe the traditional command and control role of managers must be abandoned in favour of true servant leadership this change can be extremely difficult for many managers in fact it requires a much greater degree of psychosocial maturity and emotional intelligence a skillful agile coach or scrum master if empowered can help managers make this transition which leaves us last with our executives which covers almost everyone with a chief role as well as everyone on the board these individuals are far and away the single greatest factor and whether or not any agile transformation will be successful they define the company's culture through the behavior that they exhibit and promote literally a leader such as an engineering manager cannot create safety and autonomy for their teams if they do not feel safe under their leaders as well if we promote a manager with a habit of barking command to control orders all the feelgood culture events and posters won't foster development of true servant leadership so we talked about the fundamental roles artifacts and events that you'll find in an organization as practicing scrum well what's the end result let's suppose we create the right culture build an effective organizational structure and let teams to find the processes and tools that work best for them after practicing textbook scrum long enough to fully internalize it what do we get we create an environment where everyone feels empowered to creatively solve the problems thanks for listening