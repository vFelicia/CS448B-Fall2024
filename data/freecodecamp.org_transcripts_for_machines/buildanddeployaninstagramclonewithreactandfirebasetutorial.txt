learn how to use react and Firebase to create an Instagram clone barock will teach you how to build a sophisticated social media application from scratch you'll explore the powerful combination of react for frontend development and Firebase for backend Services learning to create an Instagram like platform with features such as user authentication profile customization post creation realtime interactions and more hey everyone and welcome back so in the next couple of hours we're going to be building a full stack Instagram colone with react and Firebase and at the end we're going to deploy it so that you can put that link on your resume I want this tutorial to be as beginner friendly as possible so we are not going to be using any react Frameworks such as njs but instead we're going to be using a tool called vit to initialize a react app which is absolutely fine besides react and Firebase we're going to be using chakra UI for styling Z Library for State Management and a couple of more useful packages that will help us build this application faster in the first 3ish hours we're going to build the UI design and in the remaining part we're going to add all of the full stack features one thing that I want to mention is that recording these tutorials are taking a lot of time and effort and currently I am studying computer science so in theory I don't really have time to record these tutorials but in practice I somehow managed to do it so I don't really want to sound any dramatic but all I want from you is to subscribe to channel and like this video so that it can reach to more people and without any further Ado let's take a look at the demo and then we're going to start coding okay so now I am in the oath page where I can log in or I can sign up so I already have an account and I'll just go ahead and sign in but you can log in or sign up with your Google account as well so let me just go ahead and log in so if I just put the wrong password it is just going to say invalid credentials but if I just put the correct one it is just going to log me in now we are in the homepage where we can see the posts of the users that we follow and currently we are following this user as well as Heisenberg so we could like these posts or unlike that so it's going to update depending on that we can see all of the comments by clicking that and we can even comment from here nice pick guys let's say and if you just post that it's going to have loading State and there we go it is just has been posted and here on the homepage we have the suggested users component where we can follow those users and it's going to immediately update our feed depending on that and we could just like those post as well or we could unfollow these users from here and again it's going to update our feed so we could create a post but more on that later so we could search users so I'll just say Jane do if we search that there we go this is the user that we have we could follow or unfollow from here as well so let's go to a profile page of a user we're going to see their posts followers and following counts as well as all of the posts so if we just click to one of them we're going to get to see this caption uh comments number of likes and when this has been posted we could even comment from here and we could follow or unfollow this user so let's go to our own profile and here we could edit our profile where we have the username bio as well as the full name so I'll just change my profile picture so I will just select an image from my machine and I'll just select this one and if I submit that it is going to have the loading State and there we go profile updated successfully and this is our new profile picture that we can can see and we could go and delete a post so if I collected this since this is my post I can see this delete icon and I could just delete that if I say cancel it is not going to delete but if I say actually delete this post it is going to say that post deleted successfully and it is going to update this number of posts so we could go ahead and try to create a post if you just put a caption but not the image it is not going to allow us because uh an image is required so even if we don't put the caption we going to still get the same error so I'll just select an image maybe I'll just say this is Bob and if I post that it is going to have a loading state for a second and then post created successfully we see that number of posts has been incremented by one and this is the post that we just got so it says posted 9 seconds ago and we could just comment like unlike and it is going to be updated depending on that and lastly this application is completely responsive so if we go to here and let's take a look so this is on the larger screens let's close that and as we shrink the sidebar will shrink as well and the post will be in the vertical direction that we can see and it is going to work up until 300 pixels which is one of the smaller uh smallest devices and we can go into the homepage there we go it is going to still work uh almost in every page so in the homepage o page and the profile page and our models are also working fine so this is the create post model as well as the search user model that we can see from here and basically we could just log out from this account so by clicking that icon so there we can see now everything works fine in the larger screens we have this image but on mobile devices we don't and we're going to be storing everything in our Firebase account there we can see see we have the fire store database storage and authentication system so here in the database we are having the posts as well as the users that we just store and in the storage bucket we are having our posts as well as profile pictures so these are the images that we have in our application as well as the authentication system there we can see these are the users that have signed up to our application and these are the providers so this user signed up with Google account and these others signed up with email and password credentials so that's pretty much it now let's get started so the first thing that we need is to create an empty folder I created it in my desktop and I called it insta clone and then I just open it up in vs code now we're going to go into the view and terminal so here we we are going to just create an empty uh react application so we could say mpm create so that should be create vat at latest and then press enter is going to ask us some questions so the project name is just going to be dot so that it will initialize it uh under this folder so press enter and we're going to choose react with JavaScript and now it says run mpm install and then mpm runev so let's say mpm install to get the note modules folder and once it is done I'll be right back okay so it has been completed now we're just going to say mpm run Dev and press enter it's going to uh start our application in this 51 uh 73 Port it should be in your case but in my case it is 5174 it is because the de demo application is running in this port and if I just say a local host 5174 I should get this empty uh react application so this is the borderer plate that we have now we're just going to clear this a bit so I will open up this shrink the terminal we're going to go into the source and app jsx we could literally just delete everything here um so let's say I here we're going to delete the logo react logo um also app CSS file so we could just uh delete this as well as the import we could remove this use State okay and then we're going to go let's delete this assets as well and then what are we going to have inside the main jsx we are going to only only going to have the index CSS but we can just clear this file as well so I'll just delete everything and save this file um now let's see what do we have so we have this High text in our homepage so in this application we're going to use multiple images and I will provide all of them for you which you can grab from the GitHub so go inside the public F uh public folder and just maybe delete it okay we're going to create another one with empty content and then just copy all of them and paste it into this fold folder so we have the oath PNG which we're going to use in our uh the authentication page we're going to have our Fab icon uh Google icon image 1 2 3 and four for our posts and we're going to have this logo that we're going to use as well as um Microsoft icon Play Store and the profile picture which you can uh replace it with your own so now that we have handled our images we are going to go and install the chakra so let's say chakra d.com so if you never heard of it it is a simple modular and accessible component library that gives you the uh kind of like already components components that you don't need to create so if you want to use a button just simply search for it and it's going to give you different um kinds of button that you can use so the solid outline and so what is this so variant is Ghost and maybe the link so let's say you want to create a model but you don't want to write the code from scratch and there you go they just give you the code you just uh open the model close it and copy copy the code and paste it and it's just going to work fine and in this video we're just going to learn everything about chakra so first let's go into the getting started page so we're going to get started with v so let's see say um is this for V I'm not sure that says index jsx so here let's just scroll to the very bottom we have this V and select it now we're going to copy this installation script and then open up a new terminal so maybe we could just suppl this one and paste it press enter and then while it uh installs let's see so it says provider setup which we are just going to wrap our application with this um chakra provider thing that we can see here and then we're going to just import it so I will just copy this line and then go to main.js okay we are just going to install this okay and then say chakra provider and trap our application with it and what this is going to allow us is that now our application can use any kind of component that is coming from Chakra so the buttons models the avatars so everything and what is an avatar let's see so it is this thing this profile avatars that we can use so let's see if it has been installed um okay it is beenin but we have an error that says chakra UI or maybe we could just refresh this here again okay so now it works fine we can go to the inside app jsx and instead of uh instead of saying hi we'll just say uh maybe button that is coming from Chakra let's import this and not from the disc but it should be just chakra and we'll say hello world if we just save this now let's see and we got this light button and now we want to use a dark mode in our application so what we have here is only dark mode and this is what Instagram uses so let's search for it it will say color mode and now let's see it gives you this extend theme okay we're going to copy this and we're going to go into the main jsx so let's shrink our console or terminal and we're going to paste this extend uh extend theme as import and then we're going to get this config as well as the theme so I'm going to copy this and paste this and this theme is going to be passed to this chakra provider so I'll say theme is going to be go here okay so it's going to be going to here and we want to change this initial color mode from light to dark and yeah so our application is only going to have the dark mode because this is what Instagram has and we're are passing this config into this extend theme and that theme is going to be used uh in our entire application so now our application has the dark mode by default and also we want to change the background color when we are in the dark mode it is because the chakra uses this um this background color for the dark mode and we just want to have this completely black color for this we need to change something and that thing is just going to be inside an object so let's just write it down and then I'll explain so con Styles this is how are we this is how we're going to be um customizing our theme so this going to be an object which takes the global which is also going to be a function that takes the props and here this props oops is going to return an object so here let's open up our parentheses as well as the curly braces and the thing that we would like to change is going to be the body okay background of the body as well as the color so for the background we'll just say um mode function that is coming from Chakra so it doesn't give us so let's just import it manually import mode from Chakra UI and from the theme tools and we'll just say mode and the first thing that it takes the uh back color for the light mode and we can just put anything here but let's just put gray uh 100 and for the dark mode we would like to have completely black black background so we'll just put three zeros and then call this function again with props and this is going to handle the background color for us for the body and then we're going to have the color that says mode and again the light mode uh the light color first and then the dark and dark color so we could just say grade 800 and then for the background we could just say I mean for the dark mode we could just say white Alpha 900 and call it with the props and then we're going to take this Styles extend the theme with it with it and this theme is being passed to our chakra provider which uh provides it to our entire application so if we just save this now we're going to see our background has has been changed to the black color and it didn't because now we are in the light mode if you go to our if you open up our terminal or console we're going to go into the application the local storage here it should be let's see okay local storage if you just delete this and refresh our page it is going to be in the dark mode and as you can see the background is um the black so let's quickly summarize what we did so here we just create a Styles uh object with the global function or the global key and it just changes the body uh field the body selector and we're changing the background as well as the color and in the light mode we're going to use this uh background color and in the dark mode we're going to use this background color and for the light mode we're going to use this color and for the dark mode we're going to use this color and then we're passing this into this extend theme so that it will overwrite the color that chakra provider gives us and then we're just passing it into into our app okay so yeah this is going to be our chakra uh set up so in our application we're going to use different icons as well as we're going to have different pages so for this we need to install a couple of packages or actually just two so let's say mpm install and maybe I should just kill this terminal and open up a new one so that we don't give we don't get any any weird highlighting so I'll just say mpm install react Das icons as well as um react router down so and just press enter this is going to allow us to uh just for the navigation and this will gives us different icons so let's just take a look at the icons that we're going to be using so we could just say react icons and here let's go to this GitHub pages and then so if we just search for any icon here let's say home we can just copy and paste it and it's just going to work so the other thing was react r d and for this we are going to go first into the main jsx okay we already have it open so we're going to wrap our application with something called browser router and then just wrap entire application with it and this is going to allow us to use any component that is coming from um the react router down Library so we're going to save this file here and then inside the app jsx we're going to put our routes so maybe we could just have this empty fragment and just delete this uh we're going to have routes okay that that is wrong so let's just delete and then try again okay this is our fragment and then here we just have routes that is coming from react rou D and we're going to have route component which is going to be just self closing and then let's see import this and if you are in the homepage so let's say path is slash that just indicates the homepage we're going to show an element and this is going to be our homepage component which we're just going to create so now we're getting this uh red underline it's because we don't have this page it is not defined so for this we're going to go and create a Pages folder and another folder called let's say home um that should be homepage and then inside this we're going to have homepage. jsx and we're going to use RFC to get this boiler plate and it is coming from my extension let's see it was react um Snippets I believe so it should be let's say react okay it is this one so es uh 7 plus react Redux react native Snippets if you install this you can now use this so say rafc which gives you this boiler PL and then here um you could save this let's go here import the homepage from the pages folder and then homepage folder and then homepage. jsx so we can delete this button because we're not going to be using this in this component now let's save and if you go to the homepage we see this homepage text that we can see now we're also going to add a page when we go to the oath page for now we don't have this page so let's just created we are going to just duplicate this route it is going to be slash oath and then we'll just show the oath page and now let's create this under the pages folder let's say another folder it's going to be oath page and then oath page. jsx and get the boiler plate that says this is the oath page and let's import this when we go to/ oath now um we cannot see anything refresh again so it is not working let's see from o page um I don't know why but let's delete this H from out page that should be already working I'm not sure delete all these um so let's try this again okay so even if we just say even if it didn't change change here so even if it was like this if we had this import react statements up here up here it should still be working so okay it just it just working now but the reason that I deleted it deleted it is because we're not using this react anywhere we're not using this one so yeah it it wasn't related to that import react statement okay so with this quick explanation now let's move on with the oath page so the first thing that we're going to have let's take a look so everything now is in the center that you can see on the left we have our image and on the right we have this oath form so just to take everything to this Center what we're going to use in Chakra something called container and what it does it just uh to contain any piece of content wrap it in the container component and it takes um okay so we don't have any description for this but I'll just explain it just takes everything into the center of the parent container okay so here our parent container is the body so it just put puts everything into theer Center so now let's go to the oath page and we're just going to code it from scratch okay here we could just delete everything just return maybe a flex and then just coming from Chakra and okay here we're going to have a container so let's say container which is also coming from Chakra react and that shouldn't be this I don't know why it gives us so maybe it it is still working in this we're going to see and this container we can just say Max width is just going to be container. MD and we could say it is not going to have any petting so petting is going to be zero and just to put this container to the center we'll say minimum height of 100 pH and then this Flex is just going to be justify content to be Center as well as align items to be Center and petting X could be four and here let's say this is some content now if we just take a look at this in the O page so okay it shouldn't be coming from this we could just delete this it should be chakra /ui and then I mean chakra ui/ react so here uh okay the our content is literally in the center in the middle of the screen and we're going to put a image on the left and then on the right we're going to put that authentication form so this is going to be let's put our commments left hand side and then we're going to also have the right hand side but for now let's say box which is just a basic div so here we'll say display okay it's going to have some Styles and on the mobile so here let's take a look on the mobile we're not going to show this image we're only going to have this form so that's why we're going to come here and say display in the mobile if you want to make something responsive we put another object into here and we just say on the base which is smaller screens and above it's going to be none but the medium screens and above it is just going to be block so medium screens and above is going to be the tablet Dimensions so here we'll just put a image that is coming from Chakra but not this I'm not sure why it gives us this maybe we should just reload this uh uh reload this vs code I'll say control shift p and then developer uh reload window so maybe that would fix it for us okay so inside the image now we're going to say Source the image is going to be this one oath. PNG inside the public folder and in order to get into the public folder we just say slash now we are inside the public and we'll say oath. PNG and this is going to have height of let's say 650 pixels and then alt could be P image okay we could save this and now we're going to have something on the right as well so let's say okay right hand side and then here on the right hand side we can use something called vertical stack that is coming from Chakra so let's say vertical stack and just import it from Chakra UI react and let's just put this into here again so put a comma Okay so so what is vertical stack it is just like a flex but instead of putting items next to each other it just puts them uh under like on top of each other so here let's take a look now this is inside the vertical stack we can see the logo above and then this input above I mean I mean like in the vertical Direction so we're using vertical stack now we're going to have this o form at the top and then this text as well as this um logos at the bottom so let's go here inside the vertical stack we can use this spacing which is going to give us for spacing and then align um maybe it should be stretch and we're going to see why so here we're going to have our oath form component that we need to just create now so it should be self closing tag and let's go inside the source components we're going to have Oath form but that should be a folder so we could just say oath form slash oath form. jsx so it's going to put put it under this o form uh folder and then we'll just say RFC and save this delete this react and import this and after this o form we're going to have a box that says um get the app and then we could just say say text align should be Center and below this we're going to have one Flex with two images so it is just going to put them side by side that's why we're using Flex we'll say gap of five and then justify content to be Center so to Center them in horizontal uh I mean horizontally and then here we'll just put two images so let's say one image it is going to have this Source called slash we're in the public folder and then play store.png and then we could just say height is going to be 10 as well as the alt is going to be Play Store logo and just duplicate this the second image is going to be the Microsoft so we could just say microsoft. PNG height is going to be 10 and the alt could be Microsoft logo and we're just going to save this now and let's see what are we what are we going to get here okay so we have our image as well as our oath form but they are not in the uh they're not next next to each other so the reason might be this Flex is not working properly I mean not this flex but another one that should be inside the container so here we need to have a flex that that the first child is going to be this box the left hand side and then another child which is going to be this right hand side so if we just cut this and paste it here and we'll just say justify content Center and then align items also should be Center and just to give some Gap we could say Gap is going to be 10 so let's just save and let's take a look okay so the problem was this container had two children but it wasn't grabed within a flx so now we just give a flex and it's going to put the children side by side first we have this left hand side and then we have this right hand side and we just say align items to be Center so that they are vertically aligned and now everything is working fine but the only thing that we need to add is going to be this oath form so I'll just save this file and now inside the oath form we're going to change this content so let's get started with this I will delete this at diff and I'll just create a box that is a simple diff that is coming from Chakra so here this box is just going to have this border one pixel solid gray and then here we'll just have border radius of four and then padding it just going to be five and then we're just going to have vertical stack again and you're going to see y so let's say vertical stack and we're going to import this we're we're using vertical stack it's because we want to put this logo um logo input and this button on top of each other so everything here you see is just on top of each other that's why we're going to be using it so inside this vertical stack we'll just say spacing should be four and then we're going to have one image which is going to be our logo Instagram logo so image let's import this from Chakra it's going to have a source to public folder logo.png and height I use 24 but you can change it and then cursor could be pointer as well as alt say Instagram okay it should just say Instagram and then below this image we're going to have an input for email so let's say input which is coming from Chakra and also if there is anything that you don't understand simply just go to chakra and just search for it so here we have input and you're going to see like different usages so it has this input component it has this placeholder and you can even just change it and it is interactive so you can use uh the font size so which you can see here or the size in general you have this HTML size with in the variant is going to be outline filled flashed unstyled and maybe for left left and right uh okay it is addin I was going to say icons and then it has this element inside an input so just any kind of thing that you can imagine so yeah that would be my recommendation but now let's go to here and thens go so we're going to import this input from Chakra and it's going to have a couple of props so the placeholder let's say it's just going to be email and then it is going to have the on change in value but we're going to add add it uh later in this once we completed the UI okay so we could just say font size should be maybe 14 pixels and that shouldn't be inside a string okay and let's see and below this input we're going to have another one so I'll just copy and paste it so it is going to be for the password and the type of this guy is going to be password so let's say password and maybe for this we could also say the type should be email and phone size is going to be b14 yes that's it and also in the sign up page so let's take a look here in the sign up form we're going to have another one so that says confirm password but if we're in the login we're not going to see that for this we can use something called state in react so const we could just say um what should we say let's say is login so set is login and initially it's just going to be true and here let's take a look I'm just taking look looking at my notes So Below this password we'll say if we are in the if we are not in the login page okay if if it is the sign up then we're just going to render this portion else will just not return anything which can which we can just put null and then here we're going to have another input I'll just copy this paste it that says placeholder confirm password and type is going to be password font size of 14 and that's just it okay so we can save this and we're going to be changing this when we click to that sign up button and below this we're going to have another button let's say button not but but button so it is going to say if you're in the login page it's going to be a login but if we're in the sign up page it's just going to say sign up and maybe that should be like this and this button is going to have the width of full and the color scheme is just going to be blue Also let's say size of small on size of 14 pixels as well as on click function but we're going to add that later and actually let's just add it so let's say on click okay let's just add this later and then below this button what are we going to see let's just first take a look now here we see email password and this login button and then below this we would like to have this or uh field okay and for this we're going to use a flex so that all of them are going to be next to each other we're going to give some spacing here and we'll just say align items to be Center so that they are vertically aligned so let's go here below this button we're just going to use a flex import from the chakra that is just going to have align items to be Center and then let's say justify content to be Center as well margin y of four gap of maybe we could say one and then width is is just going to be full so that it is just going to take the full width of the parent component so we're going to have a box uh we already imported it so it is not going to have any content so that could be a self closing box and we're using box for this thing that you can see here and this box is just going to have flights of two and it's going to say height of maybe one pixels also background um let's say gray 400 maybe and below the this we're going to have our text that says uh or okay we'll say text imported from Chakra that is going to say or um that should be uppercase and then margin X of one as well as color is just going to be white and below this we're going to have another this box I'll just copy and paste it so this is going to be our or text or text or maybe we could just say it like this okay this is what we see in the UI and we have an error okay it's just a warning so let's see now in our original app we see this or text as well and below this we are going to add this login with Google button okay we're going to have again a flex on the left image on the right the text itself so let's go here and then we're going to go into the vs code so build below this Flex we'll just create another Flex let's say um on the left we're going to have our image so that should be a self closing tag it's going to have the source to be public folder google.png and then with we could say it's going to be five and ALT let's say Google logo and on the right hand side we'll just have a text that says log in with Google and then this is just going to have margin X of two let's say and the color should be blue 500 and this Flex is going to have some let's say align items of Center and then justify content of Center as well and maybe you could just say cursor is going to be pointer so that it looks like a button when you hover over this so now let's go here and we see this login uh with Google and what happens if you don't use align items in this here so in this orex I'll just delete this for a second and do you see like it is not vertically aligned so these um these lines should be come to here so that they are vertical aligned or this ortex should go to up so that's why we're using it and then we just say margin Y and just give a gap between this text this box and this box but anyways after this login with Google text so after this box I believe we're going to have another box that is just going to say um do you have an account or don't you have an account in that case just sign up or log in so we're just going to say box and this box again is going to have border one pixel solid and gray and then border so let's say border radius of four as well as the pading of five and let me just scroll a bit so we're going to have one Flex so that um they are next to each other so we say flex and then align items should be Center as always and then justify content should be Center as well and now we're going to have one box on the left and then another box on the right so this box the first one let me just save so that we get this formatting and then then we're going to go here and we'll say is login now if we login we could just show uh don't have an account and if you already have an account that that could just say already have an account and then this box is going to have some Styles let's say margin X of two and then font size is just going to be 14 and below this box okay in this one in this one I mean we're going to go inside it is just going to be if we are in the login we are going to return a text that says sign up otherwise it just going to be a login so when we clict to this we would like to call a on click function I mean yeah Anonymous function so on click to this we're going to call this Anonymous function that just says set is login whatever the value just um negate it so false is login if it was true it's going going to be false if it was false now it's going to be true and after this on click we're just going to say color should be blue 500 and cursor is just going to be let's say pointer okay now we're going to save this and hopefully it should work so let's just zoom out a bit okay now we're in the login page that's why it says don't have an account then just sign up so let's see here it says now we're in the log page it says don't have an account you're in the login page it says sign up okay I'm going to save this and if I click to this the login State now will be false so that we are going to see this confirm password and this button says sign up and if we're in the login page it says login and now if we just shrink our screen we should be we shouldn't be seeing this image on the left and it is because we added this display property up here so on the base which means in the smaller screens we're not going to see that but on the tablets and above we're going to see this image which is in the left hand side so believe it or not this is the entire code for our oath page uh design now we can work with the homepage and even before we get into the homepage let's add this functionality where when we just put our email and password when we click to this login it should take us to the homepage so let's add that functionality so we're going to open up our application and then vs code so it is going to be this button where so let's see it is going to be this one so when we click to this it is going to call handle o function let's create it it's going to be up here con handle o and arrow function and for now it's not going to do anything and let's have our states so let's say con inputs and set inputs we're going to have um like this and we're going to have the email password as well as the confirm password now we need to bind this inputs with these uh input Fields so we're just going to say for the email the value is just going to be inputs. email and for the onchange so let's say onchange it is going to take the event or maybe um okay let's just take the event we'll say set inputs and we're just going to destroy structure all of the inputs and we're only going to change the one which is the email at this point and we can change uh this password as well we'll say value as well as the on change when we type into this password field we're only going to update the password State and also for the confirm password we'll just say value it's going to be confirm password and on change only update this field and we could save this and we we handle and when we call this function let's say console. log the inputs so let's see now I'll just put my email and my password open up the console when I click to this um okay let's just clear this we got the email as well as the password the confirm password is empty because we didn't type anything in so let's just put something here as well if we just click that uh we get we got all these states and what we want to do is just uh take this user to the O I mean the homepage for this we're going to use react router Dom so we'll say const navigate there is something called navigate which handles the navigation it is coming from this use navigate hook and here we could now delete here and we'll say if the inputs that email is empty or if the inputs that password is empty or the confirm password is empty so let's just get this and then if this is the case we'll just alert and we'll say please feel all the fields and then return out of this function and below this if everything is correct I mean every input is filled then we'll just say navigate this user to the homepage which is just slash and now let's test it out and before that this should be if not okay if the input email is empty or the password is empty and we could actually just delete this for now because this is only the design part I don't really want to write any if else checks again and this should be okay so let's test it out I'll say uh something here something for my password if I don't put anything so let's just delete it is going to say please all the fields if I don't put anything here it's going to say again feel all the fields but if I just put something is just going to take me to the homepage now we can get started with the homepage but before that we need to just realize that every single page has the sidebar so we have in the homepage we have uh in the user page we have the sidebar but in the oath page we don't have it right so we're going to design our remaining Pages depending on this so we can create a layout component for this and instead of adding the sidebar to each page we can just only created once and use it inside the page layout so it sounds complicated so let me just show that so inside the source you're just going to have layout um so let's say layouts and then it's going to have a page layout let's say and inside this we're going to have a file called page layout. jsx so we're going to get the boiler plate and now here we're going to uh render the sidebar as well as the content but we're not going to show the sidebar on the out page okay so here I'll just say one flex and import it from Chakra and this Flex is going to have something on the left which is going to be the sidebar on the left and the content on the right let's say the page content on the right so for the sidebar we're we going to create a component and here for the page content we're just going to get the children as props so let's say children if I can type we're just going to copy it and put it inside a box so let's import the box from Chakra and wrap this with curly braces and then this box is going to have couple of uh props but before that um let's create our sidebar it is going to be inside a box again we are just have the sidebar component let's say and now let's get into the components um that should be let's say sidebar and then sidebar. jsx okay now we can import this sidebar and then this box is going to have couple of uh actually only one the width is just going to be uh on the smaller screens it's just going to be 70 pixels and in the medium screens and above so let's say MD it's going to be 240 pixels but we are only going to show this sidebar uh other than the off page so we can check it by so I just cut this now we will just say const give me the path name from this hook that is going to give you the path name so we'll say if the path name is equal to the O actually if it is not equal to the O page then we're going to render the sidebar but else we're not going to so we say null so if we are not in the off page we're going to show the sidebar and so now this box is going to take some props let's say this Flex is just going to be one which means that it is going to take the remaining part and withd we could say uh on the base and above is just going to be cul function with 100% minus 70 pixels and for the medium we'll just say um exactly the same function so I'll just copy and paste it but the pixels is is going to be 240 pixels and now what we can do is to just go into the app jsx and wrap our entire application with this page layout and um okay so let's say page layout now all of our pages is going to be within this page layout component and whatever we pass is going to be this children so if we are in the homepage this children is going to be the homepage content so we're going to put it uh put the homepage content on the on the right and the Side Bar on the left and if we're in the oath page we're just uh ignore this part as if there is only the O page content and here we have some uh warnings let's get rid of this we're going to go inside the ASN uh ASN RC so it is a prop types uh error so before I mean after this uh first rule object okay inside that we're just going to paste it this uh this line it says react prop types off and we added this to uh avoid prop types error okay we're going to save this now we're not going to get any warnings and now if we go to the let's say we are in in the O page we don't okay that's this is not our application so let's save um so let's save it app.jsx so here now in the homepage we can see the sidebar on the left and the homepage on the right if we go to the oath page we're not going to see the sidebar it's because we're checking for the path name so it it should be here if the path name is oath we'll just return null and this path name is going to be what whatever you put after this uh port number if you're in the homepage the path name is just going to be this slash so now we are going to go into the homepage let's say and we're going to just add this sidebar so let's go to the sidebar. jsx we can close this files that we don't use main jsx maybe app jsx um o form off page and then here we are just going to have a box that is coming from Chakra and then inside this is going to have a couple of different props so let's say the height is going to be 100 VH so it should be inside a string and then it is going to have this border right let's say one pixel solid and Border color it's going to have white Alpha 300 and then padding y of eight position is going to be sticky let's say and then the top is going to be zero let's say and the left is going to be zero so it's just going to put it at the very top and it's going to be sticky there and on the let's say padding X for the base it could be two and for the medium screens and above it's just going to be four and this box is going to have one Flex which is going to be holding that um so to say the icons so the first icon that we're going to have is going to be inside the link and it is going to be that that uh Instagram logo so if we just take a look look at it here so it's going to be this logo so we're going to give this uh icon and on the mobile screen that we can see it changes to this mobile icon and we're going to be adding that as well so first let's add this uh desk desktop icon so we're going to go into the link and this Flex is going to have couple of different props so let's say direction to be column so everything is going to be uh vertically uh aligned or gap of 10 width is just going to be say full and then height is also going to be the full and then this link is going to take us to the homepage but this links is coming from uh chakra right actually it's coming from RE R Dam so let's say let's delete this and import it from Chakra but we're going to say import uh link as router link from react router D so we just rename it uh to the router link and we're going to use this link as as if this is a router link that is coming from react I mean react router D we're doing this is because uh this link we can both add styles to it just like a normal chakra um normal chakra component as well as this two functionality that is coming from react router down so ping left is just going to be two and we will say display this uh on base it should be none and for the medium and above it's just going to be block so inside here we are going to say show us the Instagram logo which is something that I will provide to you in the GitHub preo so this is also going to have the cursor so let's say cursor is going to be just pointer and now for this icons we're going to create a assets folder so's see assets and we'll say constants jsx and let me just grab all of them so I just copied all of them and now I'm going to paste it so here let let me just shrink all of them so shrink this one this this so we have couple of icons and all of them are just a basic SVG that we can see here I just copied and pasted these guys from the Instagram website so now we're going to import this Instagram logo that is coming from constants so now I will just copy this link and then paste it again so this is going to be for the desktop and this is going to be for the mobile mobile so it is going to have the almost the same props so to this uh homepage as router link padding let's say just padding is going to be two from uh all directions and then display on the the base it is going to be block but on the medium screens and above it's just going to be none so in the small screens we're going to show this logo and in the larger screens we're going to show this one now this will also get a border radius so let's say border radius is going to be six and then um it's going to have a hover state so let's say so this is how we add hover state in Chakra so underscore hover and it's going to take another object and the properties that you want to change so you want to change the background to be white Alpha 200 and the lastly this is going to have a width let's say width on the base it is just going to be um 10 I mean 10 and medium screens and above it is not going to have anything because it is uh it's displaying on anyways right so let's delete this and let's just give it a 10 okay so we could save and let's take a look now um inside our application we see this icon and when we go to like the medium screens it's just going to be this um logo and now below this logo we're going to add this uh so to say search bar items so we have logo and text on the right when we shrink this we're going to when we hover over this we see this tool tip on the right that says home and it says search notifications create and uh the profile now in order to get this tool tip it is just a component from Chakra let's say tool tip and as we can see here when you like hover over this you're going to see uh this hover over me I mean hover me tool tip and it has a lot of um so to say properties and we're going to be using some of them okay so we're going to use tool tips for this as well as this sidebar items or the icons that we already have in the constants jsx file so here inside the sidebar I'll just paste something here um it's going to be our um so array an array of icons so some of them will have link and some of them will not have so now let's import all of these AI fail home uh that should be coming from Chakra but the I mean this should be coming from react icons but these guys are going to be coming from our assets so let's import all these and the Avatar is going to be something that I will go over as well so let's say import um AI fill from react icons Ai and it is going to be this one so let's say okay it is this one actually AI fail home when you search for the home icon is going to be the first one that you get and now this Avatar is something that chakra gives you so let's say Avatar and it is basically this circle profile picture that we get this uh down below so so for this you just put the source and you can put size to just give different sizes so 2x small medium small maybe X small and so on and so forth so below this logo now we're going to add our side sidebar items so after this link I believe we're going to have another flex and it's going to have this direction to be column as well so let's say Direction going to be column gap of five maybe cursor pointer it should be and then we're just going to get this sidebar items we're going to map it get each item so as well as the index let's say and we're going to just return some jsx here so it's going to be tool tip so this is how we use tool tip you first wrap the content into this tool tip and it's going to have a couple of different props so we want to has this Arrow when we hover over this the label is just going to be item. text so either it should be search notifications create profile or let's say home so this going to be the label and then the placement so let's say placement is just going to be right okay so when you hover over that it's going to be on the right hand side so we need to give a key to get rid of any uh react errors so we'll just say the index and so what should we have so margin left is going to be one and there is something called open delay when you hover over this it just open uh delays so you could put zero 1,000 anything else so we're going to put uh 500 milliseconds so healthc so we'll say also display on base only show it when we are in the smaller screens and medium and above we don't want to see that because we already have the text uh next to it so that was it inside it is going to have a link okay so this is the tool tip that we just WRA it uh with the element that we would like to put inside so let's say it's going to have a link it's going to have a lot of props so let's go one by one so this going to be display flex and then two so it is going to take us to a link if there is any so say two and we're going to put something here but for now let just ignore this we'll say as rer link that we did previously and then align items not the content but align items to be Center so that they are vertically centered and we'll say gap of four and on the hover State let's say underscore hover another object background should be white Alpha let's say 400 and then below this we're going to have border radius of six and then after this border radius it's going to have the petting of two and let's say width should be 10 as well as the justify content should be on the base Center and on the okay that should be string let's say and on the medium and above it's just going to be Flex start and I will just cut this for now and then I'll will add it so that you so that you can see what's going on here so we're going to put the icon here which is going to be item. icon and after this icon next to each other we're just going to put the item text which you can put it into a box because we're going to add this display props so it is going to be on the base we're just not going to show it but on the so to say medium screens and above we'll just say block and into this box we're just going to say item. text and I think I think we can now save this do we have any errors let's see um okay so this two is going to take us to the link so if item has a link it is going to just take us to there but if this is not the case it is just going to be in the mull State um so yeah when you click to this search button it doesn't have any links so it is not going to take you to any page but if you click to this home icon it is going to take you to the home or if you click to this one is going to take you to this uh user page so we could save and let's take a look now and here we get okay in this one it should be so let's say um map we have a typo here it should be map and then okay now it works fine but we cannot see the icon um let's refresh again um let's see what's going on here so we constants it should be right um assets constants okay let's just rename this and we imported that somewhere else I believe um no it wasn't okay it's going to be the constants but it is not going to work again so let's see um um so why is not working let's just put full for the width maybe that should fix okay so we're just going to say then on the base and above it should be 10 but for the medium and above it's just going to take the full width of the parent so here we can see the icons but once we hit the medium break point which is um so you can see it from here 768 pixels it's going to be the medium and the sidebar shinks as well as we see all of these icons with the tool tip when we H over this and here do you see like it is not centered when you hover over this it is because if you just add this uh to here justify content on the base it's going to be Center but on the medium and above it's just going to be flag start so I'm going to save this and that should be working fine now it is Center and the last thing that we need to add into this sidebar is just going to be that uh the log out button at the very bottom that we can see here so it is almost going to be identical to these guys so I'll just go and copy this entire thing for now and and it is going to be after this Flex okay um I'm going to paste it so we don't have any key we can delete that for the label uh we could just say log out let say log out and the placement is going to be right it's going to have this margin left um so open delay and display on the base is going to be block on the medium screens and above it's just going to be none and for the tool link it is just going to take us to the let's say oath page each and for the icon we are just going to show this uh let me just copy and paste it this is another icon that is coming from uh react icons so we could import this from let's go up here react icons bi log out so we're going to go here and it doesn't have really any texts so we could just say log out log out okay so so I think this is going to work fine let's save and um okay so it's here but we just want to have it at the very bottom so if we just say margin Top Auto it is going to take it to the very bottom it's just going to push it so where should we add it um so it is this link or even yeah let's just add it to here let's say margin top is going to be uh Auto and there we go we just see that it the very bottom if you just shrink that and hover over this it is going to show us this tool tip when we click to that it's going to take us to the O page and everything now is working fine also this o page is responsive that we can see I forgot to show you guys so this wraps the sidebar component so let's just quickly reiterate what we did um here we created a page layout and the reason is let me just copy and paste the thing that I said previously so instead of creating so okay I'll just read it so instead of adding the sidebar component to every page we only added once to this page layout component and wrap the children with it so this way every page that is in our app jsx that we wrapped with the page layout is going to see that sidebar but except the oath page because we're checking if the path name is equal to the oath page then we're not going to show this we're just going to return null but if it is not the case then we're going to show the sidebar and on the smaller screens it is only 70 pixels wide and in the uh like the large screens it's going to be a little bit wider and the sidebar inside the sidebar we used a couple of items which was the home search notifications create as well as the profile and some of them had link and some of them didn't so the ones that had link when we click to them it's going to take us to the link page so to the homepage or to the user page and we use we see something called Avatar with chakra where we just put the source as a profile picture and with a name field that is going to be kind of fall back while this uh image loads okay I just put my name here and we have this size which is small and then we Loop through this uh sidebar items down below here for each of them we showed something called tool tip with some uh props so such as is this uh tool tip is going to has the arrow it's going to have some placement on the right open delay and we're only going to show it in the smaller screens and yeah so basically this is what we did so basically I can just save this file so that you guys have this comment here and then we're going to go into the app jsx inside to the homepage and we're just going to add our homepage content which is let's just go to the demo app to the homepage so on the left we have the sidebar but on the content we're going to have our feed posts and on the right we're going to have our suggested user component so let's start with the feed posts and then we're going to get into this uh suggested users component and if we think about the HTML structure for this we have something on the left and something on the right for this we're going to use flex and to put everything in the the center of the screen we're going to use container so I'll just go to inside the homepage I will change this with container okay and that also should be container and we can say that this container is just going to have the max width of um that should be container. large you can change this if you want maybe you could make like x large 2 x large 3 x large uh it doesn't really matter but the LG should be nice and then we're going to have a flex as res said so let's import this something on the right and something on the left so let's say this box is going to be for the suggested users and actually it's going to be feed posts right so feed posts and the next one is going to be the suggested users because the suggested users going to be on the right hand side and Feit PO on the left so this Flex is just going to have gap of 20 so that these guys have something in the middle like they they are separated and this box is going to have the flex of two adding y of 10 and then this box is going to have the flex of three and margin right of 10 actually 20 and then we're not going to show the suggested users below the large uh break point so we're just going to say display only in the base and above so it's I mean don't display so base and above it's going to be none but on the larger sus and above we'll just say block and then the max width is just going to be 300 pixels and lastly let's just say the border is going to be one pixel solid red this is temporary so that we can see that so this should be suggested users I'll just save this and let's give this a border as well I'll copy this paste this and I'll just say blue now let's go inside the homepage something on the left something on the right which is suggested users they have a gap of 20 and now that should be working fine we're going to first build the feed posts and now if you just shrink our screen once we hit the large break point we're not going to see the suggested user component right do you see and this is the exact same thing in our uh demo application when we hit that break point it just gone just like this so let's go inside the um so here we'll just create this comp component let's say feed posts and we're going to go inside the components let's say feed posts and it's going to have the feed posts. jsx and let's say rafc to get the boiler plate and then this is going to return a container as well so you're going to see why so basically it is just used to give some spacing so let's say container this should be and we could delete the react import and and we could say that maximum width for this is going to be just container. small and padding Y is just going to be 10 as well as pading X of two and here we'll just basically return a feed post a couple of times so which is going to be a component that we're going to create so let's say feed post four times and let's create that component and I'll just put it into the feed post folder because all of them are related so feed post jsx and I will get this so save and let me just import pet post which is coming from here and let's save this and also we're going to get the feed posts here okay so let's take a look we have feed posts they are on top of each other and we are going to change all of them with one of these posts okay so we could close this and then let's get into the feed post and how are we going to structure this first it's going to have this feed post header where we hold this button as well as profile picture username and the create that date and then we're going to have the feed I mean the post body which is going to be this image as well as the post uh footer which is going to have this uh icons the username likes and number of comments as well as this input and post button okay so let's go into here I'll will create all of them so let's say post Putter jsx and post header. jsx so see delete this okay inside the let's close them for now inside the feed post first we're going to just handle here so I'll just give a little bit space for me delete this one and then let's get into the work so first of all we'll just have the post header okay and we should be importing that uh it doesn't give us so post header okay we're going to just import it manually and then below this we're going to have the post body which we can just really put it inside the box which is going to be that image so let's say we're going to get a image component and it doesn't gives us for some reason let's say uh image from Chakra UI and then this image is going to have a source let's say uh Source image so let's see public we could just give this image one okay image 1.png and then alt we could just say user profile pick and then below this box we're just going to have the post footer so post footer I'm not sure why it doesn't gives us so post footer um okay let's say import post footer from here and then post header from here so if you just say save this now we should be seeing that and see okay we got the post image but now we need to add the post header so let's delete this borders as well we don't really need them it was for showing purposes so I'll just delete this and now we're going to go into the post header it's going to be here so as we said something on the left right so again let's take a look so this going to be the left hand side and this going to be the right hand side so we're going to have a flex with justify uh space between so let's get into here and delete this one so let's start with the parent Flex which we said that is going to have the justify content of space between and then it's also going to have the Align items Center so that it is uh centered vertically and then with let's say width of full and inside this Flex we're going to have one Flex which is going to be for the left side and then we're going to have one box for the right side for that button that follow unfollow button and inside this Flex let's say align items to be Center and then gap of two so Gap is just going to be two and this Flex is going to have an avatar on the left so let's say Avatar just import it and then Source could be again the same picture so image 1 PNG let's say alt um so it should be user profile pick and then I think that should be it as well as the size of small and next to Avatar we're going to have a vertical stack we could say or we could basically use a flex because it's not going to be vertically stacked so inside this uh what should we say um so the username is going to be on the left and then the date is going to be on the left that we can see here right the username and then this uh create that date so inside the flex we could have the font size as 12 pixels font weight should be bolt and let's say gap of um two okay we'll just say gap of two and we're going to have the username let's just put the as a programmer and then below this we're going to have a box which is coming from Chakra as always and the color let's say it's going to be gray 500 and then we'll just have this thing that I'll just copy and paste okay it's just going to be one week now if we just save it like this um it's going to have one error I believe um okay so maybe we could just just give some uh spacing at the bottom so it is going to be this container we'll just say margin bottom or margin y of let's say two and that should be working nice and on the left I mean on the right we're going to put that button okay so it is going to be this box where we'll just say unfollow and it is going to have a couple of uh different props so first let's actually put this into a text so that it's just going to be semantic so import the text from Chakra and paste the unfollow of text into it into it and then this box is just going to have uh font size of let's say or maybe we could give it to the text so this is just going to have the cursor to be pointer and now this text is going to have the font size so let's say font size of 12 and then color blue 500 and then font weight alt and then hover is just going to be color white so I'll just say color color should be now white and we want to have some transition so I'll just say transition um so we could say 2 seconds is in and out so I will just save this now and let's take a look so we have the button when we hover over this we got this transition so as we can see and everything is working nice we have the header so what we did was one Flex on I mean one box on the left and another one on the right right and justify content space between and then here we basically did the same thing we have the avatar on the left and this guy on the right so we're going to get into the post footer now so inside the post uh we could actually close this and let's see inside the feed post okay we're going to have the post footer and we're going to just put the content now into this component so let's see how the footer is going to look like so it has this logos and then number of likes count and then the username as well as the description and then this com the count of comons as well as this uh input with the button on the right so let's go step by step just create all of them from top to bottom so let's open up here and then we're going to get into the post footer so I just want to have a empty fragment here so that we can return multiple children so let's say Flex and this is going to be coming from Chakra as always it's going to have the classic align items Center and then we're going to have the gap of four as well as the width full let's say width full we could just say padding top is going to be zero margin bottom of two and then margin top of Auto okay that should be working nice we're going to go into here first we're going to have a box that shows the like or unlike uh logo so for this we can create a state so let's say const because we're going to be changing this dynamically so liked set liked initially it's going to be false and then also we could have the number of likes we're going to use it in a second so let's say set likes count okay and initially let's say we're going to have uh maybe 1,000 likes um we can just give it a little bit space and then inside this box we just going to say um if it is not liked okay in this case we're going to return a logo and if it is liked we're going to return another logo and this guy is going to be the notification notifications logo I believe yes so notifications logo which is coming from our assets and then here we're just going to have the unlike logo and if we just now import this when we C click to this box we would like to change the state so let's say on click we're just going to say that um maybe we should say handle um so let's say handle like this is going to be an eror function so if it is already a liked we're going to let's say if it is liked which means that now we're unliking this so we'll just say set liked to be false and we're going to just decrement the number of likes and in the else case we're just going to do the uh opposite thing so satellite going to be true and just increment it by one and now let's see what are we going to get when I click to this now it is liked and when I click to that again now it's unliked and let's have a cursor of pointer in the into this box so I'll just give some props let's say cursor should be point pointer as well as the font size of 18 um that should be it for this one so it should be 18 um okay what is the error okay if you just save it's going to reformat this and then we're going to have another box that is going to hold the comment logo so I will import this guy from our assets as well and this box is just going to have the cursor to be pointer as well as the font size of a 18 and below this I say 18 and then write 17 okay and then below this what are we going to have after this flag we'll just have the number of likes so import the text from Chakra so let's say likes which is going to be the count okay it's coming from the states and the string of likes and this Tex is going to have the font weight so let me just give a little bit of space for us font weight of uh what it should be so 600 as well as the font size small we could just say and then below this we're going to have a couple of text as well so maybe at this point I could just copy and paste it because it is not anything different than this guy so we'll just say for the username I'll just put my name so as a programmer underscore so let's see so we just have one text okay okay we have one text font size of small that gives the username and then L bit space and then another text maybe we could just have it that one space just like this so username and then the description of the post or the caption and then the number of uh comments so color of gray font size small and this is uh okay so here we have a text but it is not a paragraph instead it is a span because we're using as span but if you use a text normally without this as text T it is just going to be a paragraph now let's save and let's take a look here okay maybe we could just give a little bit uh space for this so it is going to be this uh icons container which one is this so margin top so it's Auto let's say U maybe two okay let's say four now it looks better and then below this uh number of Commons we're going to have an input which is going to be inside the flags so that we can use align items and GAP so here I'll go inside the post footer below the texts I'll just create another flex and this Flex is just going to have a couple of props so say align items to be Center and then gap of two um justify content let's say space between and then width of full let's say and now if you can see here we have inside an input we have a button for this we can use something called input group so let's say input uh maybe only input we going to see it here uh left and right elements so as you can see there is something called input group and we're going to be using something on the right so let's search for it if there is something called right element yes there is so this is what we're doing we're creating an input group and inside we're just putting the left element or the right element as well as the input so in our case we're going to be using the input right element so I'll just go to here inside the flex I will say input it should be U input group so I'll just import this and it's going to have one input as well as input right element so I'll just say um so input I'll just import this input and then variant of flashed so we say placeholder that is going to just say add a comment with three dots and then let's say font size of 14 pixels and below this input we're just going to have an input right element which I will copy and paste it and then that should be a not selfclosing tag but rather just like this okay input right element is going to take something inside which is going to be a button so let's say this going to be the button that says let's import this from Chakra and import this one the button is just going to say post and button is going to have couple of props and or the Styles to's say so font size is going to be 14 and then it's going to have the color of blue 100 I mean blue 500 so let's see blue 500 and then font weight of 600 so I'll just scroll a bit font weight we 600 and then below this we'll just say cursor pointer and on the hover State we're going to change the color so let's say hover um we'll just say color should be white okay and then below the color we'll just say background should be transparent so whatever the uh background of the parent component and I believe this going to be it so let's save and let's take a look now that we have okay we cannot see the placeholder maybe we should change the color for this um let's take a look Place content no it's just going to be a placeholder okay it's working nice now we're just going to give a little bit of margin bottom so that we have some space so maybe that should be margin y h okay it's it is going to be for this so let say margin bottom or margin top it was and we could just say that maybe inside the a feat post um let's say margin y of 2 now that we have some spacing and below the post footer we're going to have it so we could just say box margin y of let's say four and now that should be working nice we have this um margin below each post and since we are uh rendering this four times that's why we are just seeing the exact same post but we're going to change it so let's say if the margin btom was 10 how it's going to look like okay now it's better let's say margin bottom of 10 so let's quickly rrate what we did we create the post uh header in the post body itself which is this image and then we have created this post footer with the input group element where we have something inside the input and we use the right element and now we can like this it's going to update the number of Lights as well as changing the icon and if we unlike that it's going to just decrement it and change the like icon and there is one thing that we're missing is that this image should have some border radius that we can see from our demo so it just has this border radius and for this we can go inside the feed post where we have this image this box is just going to have let's say border radius of four but if you just do this I think it's not going to work it's because now it's overflow the content and for this we'll just say overflow should be hidden so overflow is going to be hidden so that it doesn't so the image doesn't overflow this box so now that should be working fine as we can see here we have this uh radius corner so now every post has the same image same username um so the same Avatar and for this we could just change this by uh with props so for this we're going to go inside the feed post and we're just going to put the user name okay for each of them we're just going to do this so let me just give this cool spacing or formatting so for the username let's say for this this is just just going to be as a programmer and then we're going to give the uh so let me just take a look my notes so we're going to give the image username as well as the Avatar so I'm going to copy this and paste it and now I will just copy and paste all of them so so we're only adding this image field username as well as the Avatar so I will cut all of these and paste it so it is just the exact same thing we have the image username and then the Avatar so the image is going to be this content okay and the Avatar is going to be this one as well as the username so let's go inside the feed post and change it so we're going to take these props which is the image username and then the Avatar so we're using the uh Avatar as well as the username inside the post header so I'm going to just take this and put it inside here so let's say username and it's going to take the Avatar oops so it should be like this Avatar and inside the post footer we are only using the username so I'm going to copy this and then paste it here so for the source we are already getting this for the image we'll just say Source this is going to be the image and that should be working nice for the alt we could just put the username uh let's say uh username and for the Post header we're going to take the username and the Avatar so username avatar for the username we're just going to put the prop into here and then we're going to get the Avatar um it should be inside this source and I think that's it for this component we could save it so we have some errors okay that should be inside the Cur Braes right okay we have the username and then the this box and so we're going to close this and inside the post footer we're only getting the username so let's uh destructure this username I'm going to copy this and let's see it should be here I'll just say username now everything should be working fine we're going to go to the homepage okay so this is the first user if we just refresh and now we're getting the second one the third one the fourth one right so the jandoo Jano Josh as well as the Bak okay so we could see inside this we're giving this usernames and avatars which are coming from the public folder so these are the pictures that we can see and I hope now it makes sense since we are taking this destructuring it from here and pass it to the post header as well as the post footer and then just using it inside uh inside the source and inside this so let's say username as well as the Avatar and our application is still missing some feature that we have in our demo application so when we refresh we have this cool loading skeletons but in our case we don't have so how are we going to add this it's going to be inside the chakra they have this skeleton which you can just call it give some height or width so let's say width of maybe 100 pixels and there you go so this is the 100 pixels white and so so say like 20 pixels of height and then you can just put some uh HTML into that it's going to be contents wrapped and it it will not be visible so if I just copy this paste it multiple times the skeleton gets bigger and bigger but we don't see anything inside so this approach is really cool maybe we would be using this so now inside the feed posts we're going to go let's say close the footer and for each posts okay so here we just have a state so let say con is loading and set is loading and initially it is actually going to be true so when you first refresh the page the it's going to try to load the posts and after two seconds so let's say use effect I'm just initializing it after two seconds we'll just say set timeout 200 milliseconds we'll just say set loading to be false so first when you refresh the page it's going to loading state is going to be true for 2 seconds and then it's going to be false and while it is loading loading we're going to show that loading skeletons so we'll just say if it is loading then just run this array four times so let's say zero 1 2 3 so it is going to map through this uh four times we are just going to get the item or we could just say underscore and then the index so now we're going to see what we're doing here so we're going to have our skeleton four times when it's loading so we'll just say vertical stack for this let's import it it should be coming from Chakra okay it's going to have a key with index so that we don't get any errors from the react and this is going to have the gap of four between each uh children align items let's say Flex start and then we give the key margin bottom is just going to be 10 so we're going to have one flag with let's import it with the gap of two and then we're going to have skeleton Circle so let's see if they have something like this circle and take skeleton so we're going to have this Avatar skeleton which is this one I'm just going to copy that and paste it let's import it the size is just going to be 10 and then we're going to have another vertical stack and then this is going to have the gap of two line items to be Flex start oops so it should be start and then inside this we'll just have two uh skeletons with the width of 200 pixels and height uh 10 pixels I'll just copy it paste it and let's import these guys okay I'll just indent them so like this and after this vertical stack and flex we're just going to have one more skeleton I will copy it and paste it and so it is just going to be this approach where we see um so it is this one so we just put some uh HTML into that and it just doesn't show us but instead it makes this more it it gives this skeleton Al bit height so we are going to say this is going to be width of full and height of 500 pixels now we are only going to show this feed POS if it is not loading so I'm gonna cut all of these for a second and I'll say if it is not loading then just return this react fragment and put them inside now this should be working as expected so I'm going to just refresh as we can see we have this like let's just make this true for a second and then let's say it's going to be false okay okay so here we just see four times of this um so say skeletons first we have the profile picture as well as the so is it the same here okay actually we should only have one right this doesn't make any sense so let's go to here um so we could just delete one of them and okay so that looks nice but I think Instagram has it like this so that's why I used it I believe so we're just going to have it like that and we have all of these skeletons and once it is changes the changes the state we show the feed posts so let's say contrl Z and yeah that should be working nice and it should be responsive as well if we just test it out I'll just open up my console and just shrink it now as you can see it just works nice up until here and then suggested user components uh just unmounts and it just works nice up until let's say here which is one of the smallest phones okay so now we are going to add the suggested users component for this we are going to go into the homepage let's see um we're going to delete this and let's say suggested users and I will just create this component inside this components folder so I'll say suggested users and this is going to have the suggested users. jsx as well as the suggested user. jsx so it's going to be the same approach we are going to create this um so the posts so here we just had feed posts and inside we just return each uh feed post right so we're going to have the suggested users component here and then we'll basically return multiple suggested user and let's get this one as well I will delete the react import save it delete this one save it and let's import this guy and also we're going to have something called suggested header and I'll just explain in a second let's say rafc import I mean delete this import react because we're never going to be using this and it is not um so to say it is not required uh anymore in react so we're going to just delete this and save it and save here so the suggested user header is going to be this one where we see our profile okay we have the logout button profile picture as well as the username um so let's do create this one first and we're going to go into the let's say the suggested users um I'm just taking taking a look at my notes so we're going to just delete here and then we're going to have a let's say vertical stack because it's going to be in the stack format so let's say pading y of 8 and then we're going to have petting X of six as well as the gap of four and and then so that should be a vertical stack and now we're just going to have the suggested header first then we're going to have a couple of suggested user but before that we're going to actually have this text which says suggested for you and see all okay so let's first create this header and then we'll just go step by step so I'm just going to takeing I'll just take a look at my notes again so inside the suggested header uh we already imported this let's save and we're going to create this content so first we'll just have a flex okay let's import this it is going to be the justify content space between and why is this let's take a look so we have this should say spacing between these guys so that's why we're using justify content space between and then we're just going to align them vertically so align items Center and then let's say with of full so for the right hand side we'll just have one Flex which is going to be taking that Avatar as well as the username so at this point is pretty basic I'll just copy and paste it and just walk you through and this Flex is going to have the Align items to be Center as well as the gap of two okay so what we did here was to just create a flex and put the left child and the right child Avatar has this name as well as this size and the source goes into the profile picture.png which is this one and then on the left I mean on the right we have this box which just holds our username and maybe that should be a text so that we'll just get the paragraph and it will be more semantic so we could delete this box for now and that should be working nice so below this Flex we're just going to have that link that says log out so I'll just import this from Chakra and this link is going to be uh so to say import link so it's going to be rendered as router link I was trying to say so we'll just copy this router link as we did before so as router link is going to take us to the oath page so let's say SL oath and then it's going to have a couple of styles which I will again copy and paste because at this point it just doesn't any make the sense to write the font size font weight and color so it is not going to have this text decoration of none so let's just delete and we're going to paste in a second so let's say the content is just going to be log out if I save this and we're going to go into here so we see this header and when I hover over this it has this you know uh the underlining text and I don't really like this so I will just contrl + z which is going to be this style of text decoration is going to be none let's say log out and now when we hover over to this we're not going to see that uh underline and that is going to be it for the suggested header now we are going to build the next thing which is going to be that uh that text as suggested for you and see old so below this we just have one Flex again let's import this this Flex is just going to have the Align items to be Center so that we have vertical alignment and then justify content again was going to be so what should we add here okay I heard that you said space between so I'll just say oops I can type so we say space between okay it is because we would like to have some space between this guy and then this guy so we're going to go here just by cont content space between and then width should be full and then on the left hand side I'll just actually copy and paste again it doesn't make any sense on the left we have one box font size of 12 font weight bolt this color and that should be maybe a text that would be better so let's just delete this and this is the left side and now we're going to add the right side I'm going to copy and paste that is going to be a text again um so maybe we should just okay it says see all font size of again the same point we bolt hover we are just changing the color and cursor is just going to be pointer so that we have that button feeling now if we just take a look that should be looking the exact same and below this we're just going to add all of our suggested user components okay one by one so after this Flex we'll just say suggested user and we're just going to be calling this let's say three or four times okay we have three times and that should be working nice and Below all of these we'll just have this buil by and you can just put your name it's completely okay and I'll just put mine and I'll just go here so let's just give a bit space I'll have a box let's import this uh I think it's just going to have a couple of different props let's say align self start so that so we set that align items to be Center um to this so let's see is it inside this Flex okay let's just delete this and I don't know why we added this we're going to see okay bug um we'll have font size of 12 and then color of gray 500 and also the margin top is just going to be five so that we have that spacing and then inside this box we're just going to say I'll just copy and paste one line okay just say this uh copyright icon built by and just give a space and then one link that takes you to your YouTube account or your GitHub LinkedIn whatever that is so I will import this from Chakra let's say and Target blank so that it's going to open this in a new tab color as well as defont size and then you could just put your name now let's save and let's take a look um okay that should be working fine here okay that's why we added the allign self Center I mean start now it is centered in the in this container so if we just say that this box going to be align self to the start it is just going to be at the very left starting from here until the end and if I click to this it'll take me to my YouTube page and now we're just going to get into this suggested user component so it's going to take a couple of props it's because as you can see like the number of followers the username and the profile picture is different for each of them and we're going to be solving this by using props so let's go here and I will just put a couple of props and let me just take a look at my notes so the name for this guy let's say name prop we're going to give something like Dan abov okay and followers count as well as the Avatar profile picture so I'm just going to say like this we give the name followers and avatar for this suggested user which we can grab it like this so number of followers name and then the Avatar okay we're going to just be doing this for these two guys as well so I'm going to copy it and paste it you can grab this from the repo or just type it manually so we have the Ryan this uh number of followers with this uh profile picture and we have Christian with this followers and this profile picture so I'm going to save this component and inside the suggested user we're just going to be using all of them uh here so first let's just change it with this Flex import from Chakra we're going to have one Flex on the left and one button on the right so we could just say Flex so what should we use now so we have some space between so what are we going to use justify content space between and then here we'll just say align items Center so that it is vertically centered let's say width is just going to be full of the parent and then we are going to have one Flex on the left and then one button on the right and this button is just going to say follow or unfollow okay so inside this Flags we're going to have Avatar so let's say Avatar and maybe we could just delete this source is going to be the Avatar that is coming as a prop also we'll just have the name as name let's say and then what should we have lastly just going to be the size of medium and this flag is going to have align items to be Center as well as the gap of four or let's say two and then below this Avatar we're going to have one vertical stack it is because let's see uh these two things is just on top of each other and they have some Gap so you could use box as well but I'll just use vertical stack so that I can use the spacing property okay let's import the vertical stack I'll just say maybe spacing of two and on the top we'll just say box let's get this so this is just going to be say font size of 12 and then the font rate of Bolt so number of followers I'm sorry should be the name and then below this we're just going to have the number of followers I'll just copy paste this is going to be font size of 11 and then color just going to be the gray of 500 and this going to be the number of followers and we could give the number of followers and then text that says followers okay and I think that should be working fine let's see and in the button I will just say now let's have a state for this const is followed and set is followed initially it's just going to be false when we clict that we're going to change this state so let's say um if it is followed then just say unfollow but in the else case let's say follow and this button is going to have a couple of properties let's say font size of 13 and then BG transparent it should be a string let's see um let's say transparent and then after this PG we're going to have petting of zero height of Max content and then after the height we'll just have font weight of let's say medium not the bolt let me just scroll to give a bit space and then here I'll just say color of blue 400 I'll get this time and after the color we'll just have the cursor to be pointer as well as on the hover State we'll just change the color um to be I believe it's going to be white so let's say white and lastly on clict this function we're just going to negate this uh state so inside this Arrow function say set is followed whatever the value is just negate it if it was true it's going to be false and vice versa now let's test it out to see if that is working nice and there we go okay this is the demo let's see here um so yeah we have this follow buttons and this should be let's say align self start so that it is not in the center but it is on the starting from the very left so for this we could use in the vertical stack let's say align items to be flags start is this going to work yeah it is working now when we click to this follow state is going to be um I think yeah it's going to be true and the text is now going to be unfollow and if we click that again it's going to be follow and we can just use this for all of them and it's going to be working nice and if we just take a look if this is respon responsive or not and up until here it is responsive and then it is just uh disappearing so it is perfectly fine so yeah it's just looking awesome and this is going to be it for the homepage now we can go ahead and work with on the profile page but before that let's add our title as well as this Fab icon for this we can go into the index HTML let's just shrink everything and close it so inside the index.htm ml we can change the title I'll just say Instagram clone you can just put whatever you want and for the uh icon we can go inside the public folder and choose this Fab icon so I'll just change this with f fav icon. Ico and now if you just save this that should be working fine that we can see here so now let's just go ahead and try to add this user page so for this as always we're going to go into the app jsx and duplicate this route now since the user page is going to be dynamic okay we'll just say uh we put this column and then whatever we want so in our case it's just going to be username but you can put user ID and anything like that but in our case it's just going to be username and the page is going to be the profile page which we're just going to create in a second so the pages another folder called profile page and inside we are going to have profile page. jsx okay so here I'll just import this save and there we go we can see the profile page now what are we going to uh have here is that we're going to have a container large that we can see everything is in the center and we're going to have this profile uh header okay this is profile header and then profile tabs and then the profile posts so we're going to have two flags one at the top that is going to hold the header and then one at the bottom that is going to hold the tabs as well as the posts so we're going to go here inside the profile page and as we said we're just going to have a container uh we can just delete this and complete like this okay so here this is going to has a max width okay say let's say Max width if I can type it's going to be container large and it's also going to have the petting y of five and inside this we're going to have two flexes the one is going to be holding the profile header and then the second one is going to have the profile tabs and dsts so let's say this Flex is going to be ping y of 10 and then ping X of four let's say and ping um okay actually ping left is just going to be uh base of four and medium and above is just going to be 10 and I think that should be okay so the maximum width for this Flex uh let's say Max width or let's just say width is just going to be full and then we'll say margin X of Auto and also it's just going to be Flex direction of column so let's say it's going to be column and then here we'll just have the profile uh not the page but let's say profile header which is a component that we're going to create in a second and then here we'll just have the tabs let's say profile tabs and also the profile posts let's create these components so inside the components we can just create a profile and we're just going to put every component that is related to profile into this folder so let's say profile header. jsx and let's say profile tabs. jsx as well as the profile posts. jsx and the single post profile post. jsx now let's say RFC to all of them okay now let's import the header and let's say profile tabs posts um okay okay now that should be fine I will get some prop props into this Flex as well let's say a ping X of base two and Med small of four let's say and Max where WID let's say this is just going to be full width and then margin X Auto border top it's going to have one pixel solid and then border color just going to be white Alpha and 300 and then the direction is just going to be colume let's say okay now we can save this and we're going to work with the profile header so let's just close this for now and if we just take a look we can see the profile header with border and it holds the profile tabs as well as the profile posts so we're going to go and work with the header so the profile header is going to have two two things now on the left it's going to have this profile Avatar and then on the right this content so we can say flex and then on the left put the avatar on the right put the content which can be a vertical stack because everything is in the vertical um in the vertical Direction so we're going to go ahead and here we'll just say this should be a flex and we're going to have avatar on the left but this is not going to be an avatar actually it's just going to be Avatar group and let's see what that is from the chakra and we're going to say Avatar and we have a group here and it just gives you this kind of border that we use here if you use Avatar you're not going to get this border that's why we're using it and let's go here uh we're going to import this and this Avatar group has a couple of props but before that let's add this Flex props so the Gap is going to be on the base four on the small it's just going to be 10 and now this is going to have some padding y of 10 and then direction is going to be uh on the base it's going to be colume but on the small and above it's just going to be row which is the default for the flex and then Avatar group is going to have some props let's just put it um size it's going to have a couple of different sizes so let's say for the base it's going to be uh x large and then for the small uh actually let's say medium and it's just going to be 2 x large okay so after this size it's going to be justify self of Center and then align self Flex start as well as the margin X is just going to be AO okay inside we're going to have our Avatar and this is going to be where we put our source so let's say source for the name I'll just say as a programmer and the source is just going to be uh okay profile picture.png and now that should be working fine also let's add an ALT um so what is the problem okay that should be name actually not the source and ALT is just going to be as a programmer logo okay um after the Avatar group we're going to have the right hand side which we said that it could be a vertical stack let's import it and it's going to have a couple of different props let's say align items to be sent actually we start and then the gap of two margin X is going to be Auto as well as the flex of one so it is going to uh just contain the remaining part after the uh Avatar group okay so this is going to have one Flex okay and we're going to add a couple of different props so let's say Gap is going to be four direction is just going to be again on the base colume and on the other side like small and above it's just going to be Row And as far as for the justify content we're going to be doing the same thing so we'll just have two different values for the base this is going to be Center on the small and above it's going to be Flex start and after the justify content we'll say align items to be Center as well as width of full and now we're going to hold the username as well as that edit profile button so let's say one text okay import it um let's say let's say as a programmer and underscore so text is going to be font size of say it's going to have a couple of different values for the base it's going to be small and for the medium and above is going to be the large font size and that should be okay now let's save and let's take a look so we have the profile I mean the username and then the profile avatar on the left Okay so we are going to add this edit profile button so after the text we can put a flex here and let's just give a little bit space like this and this Flex is going to have gap of four and then align items to be Center as well as the justify content Center and then inside this Flex we're going to have a button that says edit profile so that should be button from Chakra okay edit profile and for the button properties this is going to have the background of white and color of black and on the hover State we are just going to change the background so let's say hover it's going to take another object with BG is being white Alpha 800 and then after this we going to just change the size on the base is going to be X small and for the medium okay let's say comma medium it is going to be small size and that should be it that should be it for the button and after this button after this flex and after this Flex we're going to have one more Flex which is going to be holding the number of posts followers and following count so let's say this Flex is just going to have align okay Flex um align items to be Center and the Gap is just going to be on the base two and on the small it's going to be before let's just scroll a little bit and then we're going to have one text that is that says like posts but we need to show the number of posts and for this we need to highlight it and I will use a text and I'll just say this should be as a span okay span tag and font weight of Bolt and let's say margin right of one and it says let's say four posts and now we can basically just copy and paste this a couple of times so this is going to hold the number of followers and then this is going to just hold the um let's say 149 and let's just duplicate this again I'll copy and paste it and this is just going to say following and maybe we could just say a random number say 175 and now if you just save this let's take a look so this is the result that we get and below this what are we going to have let's see the username itself as well as the description or the biography so we're going to go into our uh vs code and after the following count okay after the text after this Flex we're going to have another Flex that says Al line items to be Center and then the gap of four below this what are we going to have one text that is going to be holding the username let's say as a programmer and then this text is is going to have font size of small and font weight of let's say bolt and below this uh flx we're going to have one more text I'll just duplicate it and take it here um font size of small we could just delete this which is going to be the biography and I'm just going to copy and paste it so tutorials that are meant to level up your skills as a programmer now we just save and that should be working fine as far as for the um the profile header and if we just shrink our screen let's see uh after the small breakpoint okay it is not working at this point so maybe we could just make the font a bit smaller as we have here so for this we're going to go again back to here and let's see so for every text we are just going to make this a little bit smaller font size so let's say font size and on the base it could be X small small and on the medium we'll just say it's going to be small and I will copy this and paste it to here as well as here which holds the following count and followers as well as the posts so save and let's take a look again okay now that should be working properly so at this point it is going to go okay is each each rings and then here it it goes again to the very bottom so now that's that is working up until 300 pixels now we're going to add the profile tabs and then the posts so let's work with the profile tabs so the profile tabs is going to be relatively basic because if we just take a look at the demo so we just have these three guys and they are next to each other so we could use flex and just give a little bit gap between them so one Flex with three children so we'll just say flex and let's import it we're going to give a couple of props let's say width is just going to be full and then the justify content to be Center and then the Gap is going to be on the base four and then on the small is going to be 10 smaller and above the Gap is increased and then text transform so it's going to be uppercase and lastly the font weight is just going to be bolt inside the flex we're going to have three uh children so one flex two Flex three flexes okay the first one is just going to have a border top of one pixel solid white and let's go inside and it's just going to have um let's say box let's import the box it's going to have font size of 20 and then this box is going to be holding one icon which is BS grid 3x3 and it is coming from react icons so let's import it from so let's say import um BS okay it already gives us this suggestion and that should be working fine below this we're just going to have one text that says posts and import the text it is going to have the font size font size of 12 and display of on the base you're not going to show the um post uh text so on the base it's just going to be none on the smaller screens and above it just could be block and that should be it but we need to add a couple of props here as well so let's say align items Center and then we're going to have ping three on all directions on the four directions and then gap of one the cursor is just going to be pointer oops cursor okay so that was the first child actually we're just going to we can copy this okay and just delete the these guys and we're going to just duplicate that twice so one and then like the second one and this these are not going to have border top we could delete that because if we just take a look at the demo only this guy uh looks like it's active so we can that's why we're just deleting deleting this border tops I cannot talk clearly and then here we're just going to change the icons as well as the text so after the post we had the saved and then the let's say likes now you could put uh reals which Instagram has but in our case just save should be okay and as far as this uh icon we'll just say BS uh bookmark it should be we're going to just put this and then the last one is going to be BS sweet heart and for the size actually the font weight let's say it's going to just be bold and I think now we can save this and that should be working fine and okay it is not working let's just refresh okay so it is almost the same thing that we have here now we're going to go and work with the profile posts which is going to be one of the longest uh part because um it's going to have this model when you click to that it looks pretty complicated on the left we have the image so like uh the common section the footer section as well as when you shrink that uh it is also responsive so we need to take care of it and then it's also going to have this loading skeletons okay in the first load so let's go ahead and try to implement this it is going to be here in the profile posts and we're going to just have the exact same behavior or the approach where we just did in the feed posts so let me just open that up so here we're going to have a loading state with the use effect after 2 seconds we're going to say is loading should be false and while it loads we're going to show our skeletons but if it is not loading then we're just going to show our posts okay but it is not going to be the feed post instead it is going to be the profile post and I think we have already created it so let's see here okay it's going to be this profile post and yeah okay and it's going to take some s so let's close maybe everything the profile header tabs um app and then index HTML so we can open up the profile post as well then we can start to working so here um let's delete everything and then here we'll just import the profile post maybe four times and before we import that we just need to just put a grid here so it's going to be the grid uh component or the grid container that is going to hold the grid items so why are we using grid it is because like we're just going to have three of them at the same uh at the same width so we can use fractions for this and once we hit the small break point it is just going to be one fraction so the entire width so it is okay to use grid for this and you can check for it from the documentation as well so here we have grd and GD item and GD is going to be the contain the grid item is just going to be each child so here we can see they they are using this template columns which determines how many times uh it's going to be in the same row if we just say four times like this it's going to have four times and then it's just going to repeat if we just add two then on the each row it is going to have two columns and then again and then again so on and so forth so this is what we're going to be doing and we can give a gap column Gap and anything so let's go here inside this grid we're going to have this template columns but in our case it is going to be responsive so that's why we're just going to put an object and let's go to bottom on this small we'll just say repeat and let's say on the smaller it's just going to have one okay it's going to just take the full width and then on the medium we're just going to repeat three times so let's say repeat and I'll just Auto accept this and change it to the three and the Gap could be one I think this is going to be the uh row Gap but we want to also give the column Gap we could say one as well and we're going to have a loading state for now maybe we could ignore this um or actually let's just do it right now so as always we're going to say const is loading or maybe you could just pause the video here and just try to implement this because we already did this so set loading initially is going to be true and now what are we going to have here yes we're going to have a use effect let's initialize it on the on Mount and we're going to have set time out after 2 seconds we're just going to update it to be false that should be 200 milliseconds and then we are going to say inside this grid if it is loading let's say if it is loading then we just want to um okay and and so we're going to have uh let's say six items okay 1 2 3 4 5 6 do map and we're going to get each item as well as the index we're going to return some loading skeletons so I'll just say vertical stack for this so let me just take it vertical stack and import it it is going to have this key as the index and then inside this vertical stack we're just going to have one skeleton let's say and import this we could just put a box with uh 300 pixels so box height of did I say width that should be height okay height 300 pixels I will import the box and we could just say content CRA and now what we can do we'll say this skeleton should be with of full and for the vertical stack to say align items to be Flex start and so let's say Flex start and gap of four now if we just save this and what are we going to see okay that's it that's what we see in the first initial load six loading skeletons and now we're going to actually be uh building the profile posts so I'll just say if it is not loading and in this case we're going to so let's say end end and then we're just going to go here and with a react fragment then we're just going to have profile let's say profile poost component and we're just going to import it four times and for each of them they're just going to actually be taking an image so let's say image uh we could just say image 1.png for this and we're just going to take this so I'll say control alt and the arrow key down three times or two times and then I'll just paste it now we can just add all of them at once so that was a cool shortcut in vs Cod that you can use now inside the profile post we're just going to go inside and since we use the grid now we're going to use the grid item in here because this is the child or the children for that grid item I mean for the grid container okay that was the grid container the parent and this is going to be the child so now if we just take a look at the demo that we're going to see something now we only see the images but when we hover over it we see this overlay with the number of uh comments and likes so we're going to add uh two things which is going to be the image as well as this overlay so let's go here we're going to have a grid item which is coming from Chakra it's a grid item here as well and it's going to have a couple of different props so let's let me just take a look at my notes okay it is going to be first cursor of pointer and then below this border radius of four so that we can get this uh rounded corners and then overflow of hidden so that it doesn't overflow our images and then border say one pixel solid and then the Border color that just going to be white Alpha 300 and then the position is going to be relative because we're going to use absolute positioning inside uh this parent component and then aspect ratio one uh one to one so it's just going to be a square and on click we're going to use onop function but we can use it in a little bit because we're going to add the model uh at the end okay so we'll say one Flex this is going to be our so to say the overlay when we hover over it so how can we do this so we'll just say opacity initially going to be zero but on the hover state it is the opacity is just going to be one and this will make it uh visible on the hover state so position going to be absolute and top zero left zero so we could also say right zero and bottom zero that will make it width of full and then we'll just say background should be let's say black alpha maybe 700 and for the transition we just want to have a smooth transition you could say all 3 seconds or 0.3 seconds and then e okay this is going to be uh our transition so we could say Z index is going to be one so at the top and then justify content to be Center and inside this uh we're going to have the number of likes and comments so we're going to go inside and let's say Flex um this is going to have the Align and justify content as Center so align item Center justify content Center and then let's see gap of uh maybe that should be 50 50 pixels and then one Flex for the number of uh so to say likes and another Flex for the comments so this Flex is just going to have uh AI fill heart this is the icon that is coming from react icons you could just say size of uh maybe 20 so let's just give it like this and then we're going to have the text let's import the text number of seven and then font weight of bolt that should be a lowercase and then margin left of two now let's import this icon okay we'll just say import AI f part from react icon SL Ai and after this text we're going to have this Flex I mean this one I believe yes and this flx is just going to have fa comment so maybe at this point I could copy and paste it and it is nothing complex we just have the icon as we had here we give a size for it and the text that says uh seven comments now let's import the icon so import fa comment from react icon slf and now let's save and hopefully that should be working fine we're going to go here but we don't have the image so let's show the image as well um after this flexes at the very bottom so we have one two and three okay after this it should be I believe yes this is our overlay and then we're just going to put the image and at this point we could just say image um source which is coming from let's import this first the source is coming as a prop so that was the image so for the source it is going to be taking the uh the image and then we could just say alt um let's say profile post and then this is just going to have width of 100% And then height of let's say 100% and lastly we could to say style or maybe the object fit should be cover so let's save and let's save it here um okay we have the loading skeletons and then the images when we hover over it we got the overlay for each of them and that should be working fine when we click to that now we should uh we should have a this model so for this we are just going to go here and let's say model and how are we going to use this so a model just has this uh first the parent and a button that hover I mean the button triggers the model to be open so that uh that button for us going to be this image so when we click to that it is going to call the open function so at this point it is onopen let me just zoom in and on click we're going to add it so this model is going to has the is open variable or the state that checks if if current this model is open or not and the on close function and it's going to have a mod model overlay it's going to have model content close button and the model body that we can see here also you could add model footer in our case we're not going to add it so let's see how that look like so this is the model footer and then the body so this is the header where we see the close button and this is the overlay when we click to that on close function runs and model closes so now now let's implement this in our application so first of all I will just copy this three lines okay our states and functions I'm going to just paste it after our state and let's get this use disclosure Hook from Chakra and for the on open function we're going to be adding it into here uh okay I just paste it into the wrong place so I'm going to cut it delete this one and that should be inside the profile post okay for each post when we click to this grid item we're going to call this onopen function so I will say import the use disclosure and on click to this let's say onclick just call the unopen function and that will make the model to be open and now I will go here and I think I'll just copy all of this and maybe I should first delete this model footer because we're never going to use it and like this I'm going to copy this and maybe at the very bottom so after the let's say a maybe not the grid item okay so here I'm going to put a fragment uh oops so I'll just delete okay what is going on okay I think I messed it up so I'm just going to delete it and okay this is the grade item that we have I'm just going to wrap it with a react fragment so that we can both return the grid item and then the model at the end so this is what we're doing so we had the grid item we just put a fragment at the top and we just close it at the very bottom and after the grid item we're just going to paste what we have just copied and this is going to have the model let's say model overlay content header uh close Button as well as the model body or here we could just say hey this is a model and if we just save this now let's test it out when we click to any of these we're going to get this model and now we're just going to make it look like this so uh we're going to go inside and let's start to work on we're going to be basically changing the model body content so on the left we're going to have the image and on the right we're going to have the comment section so let's just see again um here on the left we have the image on the right we have just everything the comment section and then the uh post footer so we're going to get into that so that's why we're going to use a flex container on the right one child for the image and another child for the comment section so let's open up our application and then we're going to go inside first let's add a couple of different props into here now there is something called is Centered for the model and if you just say true for this that is going to be that's going to take the model to the center of the screen and we're going to be changing the size depending on uh depending on the break points so it's going to be resp iive so let's say base 3x large and on the medium screens and above it's just going to be a bit larger which is 5X large so that should be it for the model and we're going to go into the model body and we need to change the background color to be completely black and it is going to also have padding bottom of five so here we're going to have one Flex container so let's just indent this properly and this is going to have two Childs or or two children and this Flex let's say Gap okay that should be gap of four if I can type and then it's going to have the width it's going to be uh responsive so let me just copy and paste really quick uh on the base it's going to be 90% of the parent on the small and above uh 70% and medium and above is going to be the full screen and then we'll just have the margin X to be Auto so after this we're going to have the box that is going to be holding our image so we'll just say box import the box and it is going to have a couple of different props so let's say the Border radius of four and since it's going to hold the image let's say overflow hidden it should be and then the Border one pixel solid and then the Border color of uh White Alpha 300 and then we'll just say Flex of 1.5 and this is going to be taking the image so that could be a self closing tag and for the source uh we're just going to put the prop that we're getting as this image so source is just going to be the image itself and for the alt we could again say maybe the profile post and then below this image we are going to have another Flex after the Box actually and this is going to be holding the right hand side so let's say flex and the width of this going to be Flex one so this is uh a half point is just bigger than this one or the wider and then the flex direction is going to be let's say column and then we could add padding X of 10 let me just scroll down a little bit and give a bit space for us and pading X of 10 display of uh let's say on the base we not going to see this the common container and then medium and above is just going to be flex and now we're going to have the user profile picture or the Avatar as well as the username so I will just create another flag that says let's say go here align items to be Center and then the justify I can type justify content space between and then this is going to have the Avatar as well as the the text so let's say Avatar self closing tag this is going to take a source as let's say slash profile pick. PNG let's say size is just going to be small and then name could be just your name and after the Avatar we're going to have a text that puts the username I'm just going to copy and paste it so we have text component with the text content font weight of Bolt font size of uh 12 pixels and after this Flex We are going to add the delete icon so say after the flex we could have a box let me just scroll a little bit and this box is going to have an icon inside let's say MD delete and size of 20 and let's say cursor is just going to be pointer and this is coming from the react icons so let's import it okay that should be working fine and we're going to add a couple of props into this box so we'll just make the color to be red on Hover state so let's say hover another object we're going to change the background to be white Alpha 300 and the color let's say red 600 and basically it's going to have a border radius let's say radius and then it's going to be four pading let's say one now let's save at this point and let's take a look how that looks like so we're going to go here um when we open up our model okay this is the model title maybe we could actually just deleted the content at least so let's say this is going to be a self closed model header like this okay it is not working properly uh let me just let me just check really real quick so what happens if we just delete this completely now let's take a look okay we don't have the model header in this uh component and now this is not working proper properly we should be having this next to the um so let's see it should be looking like this one Flex on the left and this guy should be on the right so let's take a look at it okay so the problem here is that this Flex has the direction of column so this is going to be at the top and this delete icon is going to be at the bottom that's why we're having this Behavior so instead so let's just first delete this this is not related so we're going to wrap this with another Flex okay so I'm going to cut this from here and then paste it here so what we just did is we created another Flex so this is going to be our first child on the left and this going to be our second child on the right and we're going to say align items iner justify content space between to this guy and we are just going to say that this Flex is going to have align items to be Center and then let's say gap of four okay okay that was a bit complicated but this is what it is uh so here we have the delete icon on the right and these guys on the left and let me just quickly iterate what we did um we have a flex okay this is our container and on the left we have the username as well as the avatar on the right we have the box so we were missing one Flex container at this point so sorry about that so after this Flex We need to add something called the divider and it is going to be this thing that we have let's just refresh okay so this is called the divider and if we just take a look okay you just call the component and you can give orientation you can give height and just Center it with this components or you could use absolute centering um anything like that so we're going to be using this divider after uh this component so we are going to go here after the box after the def Flex we'll just say divider and import it so it is going to have the margin y of four and then background of let's say gray 500 and then below the divider we're going to have our actual comms which you can use vertical stack for this because they're going to be in the vertical uh Direction so I'll import the vertical stack and let's say your width of full and then we're going to have the L align items if I can type properly align items to be Center or start it should be actually and then Max height of 350 pixels and we're going to use overflow y let's say overflow y should be Auto and I will show you what this means but basically when the comments are too large so let's say if we have multiple components it is not going to overflow but instead we're going to have a scroll bar that we can scroll through it and we will see how we can how we are going to use it and then inside the flex we're actually going to have common components so in our case let's say we're going to have three common component so we're going to create that in a second it's going to take a couple of props let's say created that uh we could just say one day Echo and it's going to have a username let's say as a programmer and then below this it's going to have the profile picture so let's say this is going to be SL profile pick. PNG as well as the text uh maybe I'll just copy and paste it so dummy images from unsplash and we're going to put two more comments which I will copy and paste the exact same thing so let's see uh we have the created ad username profile pick and text so these are the comments different comments that this post has so let's create it so it should be inside the maybe let's say com components comment and we're just going to have comment. jsx so we're going to export this and then import it here um so it should be this one actually right we can delete the model header we're not using it and now let's see it was taking the created at username profile picture and text so let's say created at um the username let's say and then profile pick as well as the text and now we could save and let's take a look okay we have three comments now we're just going to create one of them and it's going to work for the others so let's go here inside the commment component so it is going to have a flex with the gap of four let's say and then inside the flex we're going to have the avatar on the left and then the comment content on the right so import the Avatar let's say the maybe source is just going to be the uh profile pick and for the name we could just give the username name that we are getting as a prop and then the size is just going to be small and after the Avatar we're going to have one more Flex that says direction of column because it's going to have the created that as well as the column I mean created that as well as the username uh field so let's say colume and then one Flex that says gap of two and this is going to take the username as well as the comment so let's say text import the text it is going to have the user name and font weight should be bolt and then font size is just going to be 12 pixels and after this text we're going to let's say create another text that says the text or the comment so let's close off this text and it's just going to have the f size as 14 and not any colors okay after this Flex we're going to have one more font or one more text I'm going to copy this paste it it is going to be having the 12 pixels as well as the color of let's say gray and this is going to be the created at date and that should be fine now we're going to save and let's see okay we have all of our uh comments in the vertical Direction so now we're going to add this uh post footer at the very bottom and for this we're going to add another divider after the comments and then the post footer which we already created so we are going to go here profile post and then after the vertical stack let's say we want to have a divider okay let's say divider margin y of four and then background okay margin y of four background GR let's say 800 and after the divider we'll just have the post footer component that we already created so post footer it was okay this one uh it doesn't give us any Auto Imports so let's say so let's import it we'll say import post footer it's going to be coming from we're going to go one up it was inside the feed post slost footer and if we save now that is going to be working fine in our case okay it is here but we need to just push it to the very bottom which we can uh achieve this by using margin Top Auto so we're going to go into the post putter let's say do we have that margin uh Auto no we don't so let's say this should have the margin uh top of Auto let's say and let's see okay this is what we have but we don't want to see this view all uh comments section here we can just delete it um for this we are going to go into the post footer and this is going to be taking a prop called is profile picture I mean if the profile page if you are in the profile page and we're looking the post footer we don't want to see this uh content here so maybe all of these I'm going to cut this actually and then I will say if it is not the profile page each and then uh just return this jsx and it should be inside the fragment and then paste it and we're going to go here and we'll say this is the profile page let's say true and now we are not going to see the section we're only going to see the number of likes and the comment section with the icons so the exact the same thing that we have here and now let's check if this is responsive or not I will just open up my console and if we just shrink this okay let's see we have some errors uh okay let's just refresh to get rid of those errors and let's open up this and when we just shrink that at this point uh let's say in the medium we're not going to see this Comon section it's going to disappear and you only see the image and it is working fine up until 300 pixels and even if we close it so up until here it is looking pretty nice we have all of our posts and the last thing that I want to show you is that when we add multiple commments now instead of three let's say we're just going to put a couple of more okay let's say maybe 10 or 15 so when we get to here let me just uh make this a bit bigger okay when we have this here we just see now we have this scroll bar where once the content overflows we say that overflow is just going to be Auto and specifically the Y AIS is going to be Auto so this allows us to have uh this scroll bar if you just didn't put this uh prop if you just delete this then it's going to overflow the content did you see and that's why we're adding this the maximum height is 350 pixels and then overflow Y is auto so the last thing that I want to add is going to be we're just going to change this uh uh so to say this scroll bar and we're just going to make it a little bit better for this we can go into the index. CSS okay we're going to go here and we'll just add a couple of styles basically we're just going to make our scroll bar in the dark mode and just make it a bit thinner so this is how we can change it so we'll just put three I mean two columns and then slash webkit uh so it should be webkit Das scroll bar okay and inside we'll just say the width should be 10 pixels and then there is something called track and uh thumb so for the track we're just going to have this color uh so # 1 E1 e24 and then for the thumb let's go down below and then the thumb color is just going to be uh 3 F 3F and 40 so this is going to have this kind of uh grayish color and at the end when we hover over this we would like to change the background color and we can just accept this it's going to be uh 555 and now now let's save and let's see how this is going to look like I'll just go here um let's wait okay this is our new scroll bar and I think it looks better and even in the homepage we can see that so this is our new scroll bar so to say okay so after a quick and short break let's continue to the project so this is where we left we only have the UI design and nothing else about back end so as you might know we're going to be using Firebase which is a backend as a service that is provided by Google so it allow allows us to build a web and mobile applications without having to manage servers or any databases so it provides us a lot of useful features such as authentication realtime database um cloud storage hosting I mean hosting and much more and in this tutorial we're going to be using the most common three services uh which is which are going to be the authentication fire store and storage so first thing that we need is to create a Firebase project and even before for that we need to um just create a Firebase uh account so I already have one so you need to just uh go to the console. Firebase google.com and just uh create an account for free and then you'll get to this page where you uh where you're going to have your Firebase projects so this is the project that I showed you in the demo so I'll just uh create another one Let's uh click to this and uh you could just say insta colone but I'll just say YouTube and let's continue with this uh we could have analytics or you can just uh s of say disable it but I'll just have it so let's continue uh select an account so let's say default account for Firebase right and we're going to create the project so while it installs we need to uh install a couple of packages so let's go here uh I'll just open up a new terminal and the first one that we need is going to be the Firebase so let's say mpm install Firebase and we're going to be using something called Z okay let's say uh Firebase uh and just press space so zent this is going to be a uh s to say library that we're going to be using for the global State Management and uh you're going to see how that works and then we need to install another package called react Firebase hooks so this is going to allow us uh with the authentication just to make uh our code a little bit cleaner and S to say just like reacti is because it is going to uh provides us some Hooks and lastly we need to install another package so let's say add chakra D ui/ icons so this is going to give us some icons that we're going to be using uh from Chakra so let's press enter and now while this installs we can go to here now our project is ready let's say continue and then it sorry it's going to take us to here let's uh select the web and then we could give a name again let's say I'll just give the same name insta clone D yoube so I'll say Register App we could um so to say just ignore this hosting for now okay so it gives us some uh some script that says mpm install Firebase we already did already did this now we can just um s to say copy this thing I'll just copy this which is going to be our Firebase um so to say configuration we're going to go into the vs code and this has been installed as well let's k this terminal and Shrink this so we're going to go into Source let's say Firebase and we're going to be putting our Firebase configuration to here so let's say Firebase JS and now I'll just copy I mean I already copied so I'll just paste and now here we need to just uh explore some uh stuff so first of all let's just ignore the analytics for now okay we have this initialization of the app let's delete all of the comments okay just delete delete and now we are going to get the authentication uh service so I'll just say import get oath okay from Firebase SL o this is going to give us the authentication and then we're going to get the fire store as well as the storage so just get them from this Firebase slf fir store and storage now that we have our application so what this does is basically we have a configuration so this tells our code that this is the Firebase project that we want to connect so we are passing this object into this initialize app and then it returns us the application uh so the Firebase application that we have on the cloud so we are going to get the authentication system let's say con out and will say get out and then we need to just pass the application and then we're going to get the fire store in the exact same way so you could say cons DB but I'll just say fire store just to make code a little bit uh more readable so we know uh uh which database this is so it is fire store we say get fire store and pass the app so now we are we have the fire store so to say instance as well and then lastly we will just get the storage so at this point I'll just Auto accept this and at the end of our file we need to just export all of these because we might want to use them in our projects and indeed we're going to be using them so now let's save this and we can put them into the environment variable but for now let's just skip that we could maybe to that uh at the end of the project so now uh we have this oath fire store and storage but we don't really initialize that so let's go into our uh console so let's see continue to console and now we need to add those services so let's add the authentication we're going to say uh get started with it and now it is going to ask us uh which providers do you want so let's say email and password you can just enable that and then we also want to add a new provider which is going to be this Google um let's say enable um okay we don't really need to okay let's select our support email and then we could just say say save and it's going to initialize it for us as well let's see and while that is been uh added in the background let's take a look at this throwing that we have so Firebase gives us some services and there's actually a lot of services that we can use even for machine learning stuff but in our project we're going to be using these uh three okay so authentication fir store and storage in the storage we're going to store our images for the posts and profile pictures for the fir store we're just going to be storing our users and posts and in the authentication it is going to actually store us the users but the thing is this users does uh I mean this users has nothing to do with the users that we're going to be storing here so so it is because authentication and Fir store are separate Services okay so authentication handles you the uh so to say authentication so it just checks if this user is logged in or not and this fire store uh it is a database that I uh typed it here so we're going to store our users and posts so we are storing our users here it is because we would like to know how many followers this user has how many following this user I mean how many users uh this user follows how many posts this user has so what is the full name profile picture biography email username Etc and then also there's like create ad and user ready and then for our post document uh for our post doc I mean collection I'm sorry so this is a collection by the way this is also a collection okay so we're going to have for each post an ID a caption of the post and image URL which we are going to be storing them inside our storage so we're going to have uh how many likes this post has and we can store it as an array of string and each string is going to be the IDE of the user that like this post and then we're going to have the comments and each comment is going to be this comment document that I put it right here so each comment is going to have the comment itself okay maybe it says hey man this post is really great and then this post is created by some user right and then which post this comment is belonged to and lastly when this comment has been posted which is the create that date so also this post is going to have when this post has been created and who posted this post right so these are going to be our collections so the users collection and posts collection and each post uh is going to have this comments array maybe it's just going to be an empty array right a post might have zero comments or maybe it'll have like multiple and each comment will uh will be in this format so yeah this is what we are doing so we just initialized the authentication let's initialize the fire store and storage as well we're going to go here into build let's say uh where is the fire store okay it is a database like it is realtime database okay so whenever something uh changes it just gives you immediately back so kind of like a socket so I I'll just say create the database so database ID is default let's say Lo um okay let's see okay let's say next and then we could start in the test mode and once we deploy this project we could uh we're going to go into the production mode and we'll just put our security rules here for now don't worry about that now we can just uh read and write this database until uh 1 month later so I'll just say enable Okay it's going to enable it in the background let's see okay it's been initialized now we have an empty fir store database and lastly we're going to go go into the storage okay this is going to be for storing images let's say get started and in the test mode again um okay let's say done and let's wait okay so we got the uh storage as well uh and it is like there are no files here yet and we're going to be adding all of them in the uh incoming sections so first things first let's go into our project and we just want to First handle the authentication so let's go to here and there is a problem that we need to fix so let's go to the oath form okay so here we have the entire Logic for sign up and login which is not optimal we would like to just create one component for login that is going to handle the login functionality and then one component for the signup that is going to handle the signup functionality okay so let's just delete this for now and then we are going to delete that uh let's see so we're going to delete this on click because you're not going to use this and then we are going to let's say delete the navigate and the inputs could be here for now let's just create our components so one for login. jsx let's say rafc give me the boiler plat delete the react import and save it one for the let's say sign up. jsx and we'll just say rafc and then delete this save it and one for the Google o and it is because when we click to this button you would like to log in with Google so that's why we're going to create a component for it as well and just put the logic into there so let's say Google um o. jsx let's say RFC which is going to give us the borderer plate we could delete this line save it and then let's see what are we going to do now in the login form we would like to have the email and password right so we could actually copy this and let's say uh I mean we're going to copy this and then we're going to go into the login let's just have an empty fragment and we could paste this let's import these um so say we imported the input from Chakra and we're going to get this inputs so I'm going to copy this paste it to let's say here okay let's import the use State and we could delete the confirm password from the login page and now that should be working fine and below this uh inputs we would like to have a button that says login right for this we could go let's say which one is going to be let's say it's going to be this button I'm going to copy this and then paste it right here and it is just going to say login okay we could delete like this and okay that should be like this and then let's import the button okay it's going to have the withd full color schem blue font size small uh I mean size small phone size 14 and this is going to have an onclick function for that we could uh skip that and it's going to have a loading uh so to say state but we're going to add all of them once we had the login functionality so let's just save this now and then we're going to go and let's say we would like to just delete these inputs and then what are we going to do so actually let's copy these inputs and we're going to paste it into the sign up as well so let's have an empty fragment okay we are going to have this email and password as well because when we sign up we're going to ask uh those inputs as well so let's get this inputs which is going to be holding the let's say email password it is going to take the full name as well as the username right username and it's not going to ask the confirm password and there is a reason I'll show you so let's just take the full name above as well as the username let's let's import the use State okay so we have these two inputs and let's just copy this and paste it again and actually for now let's just ignore the password okay we are going to copy the email and paste it again so we're going to have we're going to be asking the email and then let's say we're going to ask the username so username and then I will just copy this and paste it again I'm going to say so to say just ask default full name so full name so it is going to be having the type of let's say text this is going to have the type of text and this is going to be taking the value as inputs. username and when we type in into this input we're going to be changing the username field so I'll say change the username when we type in and for this it's going to be the same inputs. full name and then for the email I mean the on change we're not going to ask the email but the full name so these are going to be our inputs okay email username full name and for the password we're not going to have the confirm password but instead we're going to just do something else so I'm going to just cut I mean cut this for a second we're going to let's say input group okay we are going to uh I mean okay yeah we're going to import this and then inside I'll just paste this input which is the password so for the type I'm going to cut this and before that I'll just create a state that says const show password and satual password initially it is going to be false so the type is going to be depending on that state so I'm going to cut this and I'll say if we are showing the password then the type is going to be text and if you are not showing the password the type is going to be the password so that it is uh invisible so for the value it is just going to be inputs. password and when we uh change it okay on change event fliers we're going to be changing the password and lastly let's just say the size is just going to be small and I will copy this line and I'll just paste it to each input because we have multiple inputs so they should be in the size of small so that they fit in the screen okay we could save this and before that now we have added input group and we put the input and why did we addit this it is because we're going to show a button when we click that it is either going to show us the password or is going to hide it okay so we could say input write element and all of them are coming from the chakra documentation so if you want to check that out just ask the input group and input right element and you're going to see the exact same thing so I will just have the height of full for this and in the right element we're just going to have a button so let's get the button it is going to have variant of ghost uh uh if I can type okay it's going to be ghost and then size is going to be small and when we click to this it's say onclick we are going to call this Anonymous function which takes the set show password and just negate the value okay so let's say show password and then inside the button um we are going to just have two different uh icons so I'll just come to here and I'll just say if we are showing the password we are going to say we icon which is coming from uh from the chakra icons and then in the other case we'll just say VI okay it should be whe off icon okay so let's uh have it like this and then I think we can save this and let's see how that look like so we are going to go into the all form we could delete this inputs we are going to delete this inputs as well because we took them into their own uh so to say comp components we're going to delete this as well so also we forgot to take this button and put it into the sign up so after the input group we are going to have this button that says sign up right so you're going to see what we're doing now I'm going to save this and let's delete this and we're just going to here we'll just put so if it is login right this state says initially we are in the login page if if if so like we'll just say login show us this login component but if it is not in the login State then we're just going to show the signup component let's import that as well and now let's save this file and let's take a look so here I'll refresh so the login is true now okay so we see the email and password when we click to the sign up it changes right we see email username full name password as well as the button so if I put some password here and if I click that now now the type of this input is text and if I click that again type of it is password so that this is kind of like secret and in the signup form we have this sign up button and in the login form we have this login button and these inputs are bigger than this one so let's make them smaller so that we are consistent okay we're going to go into here into login let's say size should be small and size of this also should be small let's save and let's take a look okay now it's better I think and we would like to take this uh button okay this login icon as well as this text into its own component which we created so Google o it is going to be so here it is this one okay I'm going to just cut this and import the Google out instead and now let's go into the Google out we're just going to paste it like this let's get the flex as well as the image and the the text um okay there is a problem let's see we're going to import the image and then the text okay if we just save and let's save here now the output is exactly the same but now it is uh in its own component which is the Google off now we can put the Google out logic into here and login logic into here and sign up logic into this component so that this o form is looking really clean so let's delete this button and input because we're not using them so let's see we can save this and now I think it is time to build the sign up functionality first and then we're going to build the login as well as Google off so I don't really want to put all this signup logic into here but instead I just want to create a hook so for this I'll just go into the source create a folder called Hooks and then inside the hooks let's create our first hook which is going to be used so it has to start with with the use keyword so that react knows this is a custom hook so I'll just say use sign up with email and password. JS okay the name is kind of long but it is selfexplanatory so we could just say rafc to get the boiler plate but this is not going to return any HTML it is going to actually be returning some object with values so let's say an empty object for now but now how are we're going to do the uh so to say authentication so let's say I don't know how to do this but I know that I'm going to be using Firebase so we have this um the package that we installed do you remember the name so it was react Firebase hooks let's go into Google and say react Firebase hooks authentication okay so we're going to go into here this is the mpm uh so say npmjs.com so we're going to go into the repository and the get GitHub and then we could close this so there are a couple of services that it provides so fire store functions all of them but we're just going to be using the authentication so we could click that and there are almost every every single example that you can see here now we would like to create an account with email and password so I'm going to click to this and there we go now it it gives us a full example okay so you just call this as a hook and put the authentication object that we created and it's going to give us the error State loading State user credentials and that function that actually creates the user with email and password so we could use the Firebase documentation to do this if we don't use this package at all we could still can do the authentication but this makes our code really clean because it gives us the loading State error State user State and the function itself so that's why I prefer to choose this one but you can um still do this operation without using this package so I'm going to just actually copy this and I go here into this sign up hook and I'm going to just paste it to here okay so here let's import this it doesn't gives us so let's import the O which is coming from the Firebase that we have created here right this is the authentication Service that we're going to be using and then let's go into the Chrome and copy this import which is coming from our package so we could replace it with the import and now we got the error State loading in user as well as the function so now when we want to use this hook we are going to just come to here let's say use sign up I mean yeah it was the use sign up with email and password so this is going to just return us some values so let's say const it's going to return us the loading State the error state if there is any and then the sign up function that we're going to be calling to sign up the user so let's say when we clict to the sign up button we'll just say on click call the signup function with our inputs now we need to just create this signup function into this U signup hook okay so we're going to come to here and in the return let's say uh just return the loading State the error State and then the sign up function that we're going to create so let's say const sign up which is going to be an async function so async it is going to be looking like this then it's going to have a TR catch block so for now we could just ignore the catch and just say console.log the errors if there is any but we're going to be handling that soon okay so let's say before we even try to sign this user up so this is going to be taking the inputs by the way right so we'll just say if any input is empty then just show some error then then just return out of this fun function so I'll just say if inputs. email is empty which we could just put a question mark Or if inputs. password is empty right or inputs. username is empty or the full name is empty so inputs. full name if this is the case then let's just console The Log please F all the fields and then just return so which means that it is is not going to run this Tri block okay but if this is not the case then we're just going to go into the try so I'll just say con new it should be like this new user which is going to be equal to a wait so let's take a look at the documentation so when they collected this register button they are calling the create user with email and password and they are passing the email as well as the password so we're going to be calling this exact function so I'll just copy this actually then which is this function that we're getting from this hook so we'll say await create user with email and password and then pass the email as well as the password so if this is successful then it is going to return us the new user okay so inside we'll just say let's check if there is any errors so if there is not new user and if the error we have then we'll just say console do log the error and just return out this function again but if this is not the case if we have this new user okay if this has been created in the authentication so this is the diagram that we need to go so if when we sign up the user is going to be created in the authentication Service but we need to also create it in the fir store service so that we have something like this document right so we're going to check the followers the following counts and all these thing that you can see in the screen so that's why we're going to come back to here and we'll say if this user has been created in the authentication system now we would like to create a user document in the fire store as well so let's say if this is the case const let's say user document and then it is going to be an object and it is just going to have this Fields so the user ID we could say new user okay dot it has a field called user and it has the user ID so comma we're going to have the email which is coming from our inputs we're going to have the username which is again coming from the inputs as well as the full name which is also coming from the inputs and then we're going to store the bio so let's say biography of this user and initially it could be empty string and then user can edit it once uh once you logged in so we'll just say the profile picture URL is also going to be empty string so this user doesn't have a profile picture and then the followers it is going to be an empty array Following also going to be an empty array as well as posts so this user has zero post when they log in or they sign up uh in the first time so we say create at field is just going to be data now so that we can show something like uh this user is member since let's say 20 and 23 and then just put the date so we are going to create this user document in our Firebase uh I mean fire store and let's say you don't know how to do that we're going to go into Google and we'll just say fir store add a document so we could click to this one and it is going to show us the documentation which is really really well structured and easy to read so here let's see set I mean add a document so here they actually show us in the first example how to add a document so I'm going to just copy this line okay we are going to go into vs code and then paste it up here so we're going to get this set document as well as the document method from let's see Firebase slf fir store and this DP is actually going to be our fire store object that we have it here okay it is this one we're importing and then let's see we are going to create inside this users collection and the idea of the user is just going to be let's say new user. user. uid okay it is this ID that we just created and then the data is going to be this user document this object that we are going to create so if we paste this now the user has been created in the database and we would like to set this in our local storage as well it is because we're going to be using it uh later okay so I'll just say local storage. set item and I will explain once we use it so this uh local storage first just takes the key and then the value so we could put something like user info or maybe you could say user Instagram or anything like that I'll go with the userinfo so in the right hand side we're going to have djs. stringify and we're going to just create this user document in our local storage so let's save this okay um I think we could save this file I don't know why we're getting this I'll just say okay so in the TR catch we are handling our authentication or registration now in the sign up let's go here we are going to say in the loading State let's show it in this button so button takes is loading prop which is coming from Chakra okay we're going to say it is going to be loading if this state is true and for the error we can show an alert okay uh you will I think just copy and paste paste it after this input group and I'll show that so if we have an error we're just going to show an alert that shows the actual error message so what is this alert let's take a look we're going to go into chakra documentation and let's take a look at the alert and this is in alert okay it has this alert icon if you delete that we're not going to see that icon but we could put alert title description or just the message as well so this is what we are using Let's test it out now I think we can save this file um okay let's go and try that so we're going to go into the sign up form and let's say email John do@ gmail.com username full name as well as the password from one to six we can see it like that and if I click to that and let's see I think it has been created so I'll just refresh in the authentication and there we go we have this j@ gmail.com it has been created with this ID which which is start with one PS okay so we're going to go into the fir store database we have a users collection and we have a document which is this ID one PS which is the J so we got the bio created at email followers array so is empty following array is empty full name posts array is empty and these uh Fields as well now let's actually handle the errors for this we are going to be using something called toast in Chakra okay when you click that okay it's going to be something like this if this is the success toast that says account created and let's see an error toast if there is any so let's see um let's take a look so you can customize this as well okay I think they don't show us but I know how to use it so actually it's going to be in the status okay show error show warning success and info and basically this is where I took the uh toast so from the documentation and every time you want to use a tost you need to let's go here you need to call this function and it takes this object so every time using it is going to be pretty boring okay you need to just put all these things but instead we don't want to write that much code every time so we're going to create another custom hook so I'll just call it use show toast. JS and let's say RFC we are going to return the function let's say return show toast and this is going to be the function that we'll have so let's say con show toast and this function is going to take the let's say title the description of the toast okay description as well as the status so either it's going to be warning success error or anything like that so inside this um we are going to call the toast function so which we need to import it as in the documentation so con toast it is going to be use um toast right it which is coming from Chakra UI react okay so inside we are going to call this function toast with the object so it was taking the title right it was taking the description the status as well as kind of like duration we could say it's going to be 3 seconds and is closable you could say true so this is what we have in the documentation so duration status description title is closable ETC so if it was an error let's see lowercase I'll just zoom in a little bit and if I click to that we're going to get an error tost and this is basically we're customizing it in our hook so we can call this function now in any component we can give the title description status and it is going to call it for us so I will now save it and let's just format this a little bit like this we're going to go into our Hook when we have an error instead of console logging it we are going to just call that so let's say con show toast function which is coming from this hook that we just created okay so if we have an error let's say show toast the title is going to be error the description is going to be please fill all the fields and then the status is just going to be error and then we're going to return out this out of this function so now every time we want to use an error we'll just going to show this toast so error and for the error State we could just put the error whatever that is and then the status of error now if we haven't created this show toast um if we have haven't created this show toast function inside this hook we all always need to do something like this we would have so instead of this we would have something like this that says the title we would just put this error okay into here something like this and then we would be taking this description and then put it here and then we would put the status into here the duration let's say 3 seconds is closable is going to be true and then we would be copying this and pasting this into here and change the let's say the description with the error so you get the point we are just uh saving us from writing much code instead we are just calling the function with the parameters and it is handling that for us so I think we could delete this line and then in the catch we're going to be using the exact same thing so show toast if there is an error with the title the error message being the description and then the status of error so now let's try to do this again okay we could save and we're not using this user object or the state we could just uh skip it like this okay if you just delete that it is not going to give you any warnings so let's try to create another account um so we're going to go here we'll just say never and then sign up again and now I'll just put the exact same credentials j@ gmail.com jandoo now it should say us it should give us an error that says this user already exists so if I click to sign up let's see okay we see the error it is because we have this um alert right we showed up here so if you have an error show the alert but we didn't get any toast it is because here that should be error. message now let's try to do this and if we have the exact same uh document in our database so if the email is same or the yeah if the email Emil is same we're going to hit this if check which says this user has haven't been created and then we have an error so just show this tost so let's save this and let's take a look so if I sign up again it is going to show the alert as well as the show toast and if we take a look at in our database that we're going to see this user hasn't haven't been created twice and in our database as well so now that we have signed up so when you sign up by the way Firebase immediately logs you in now let's handle the log out so that let's go into the homepage okay when we clict this it should log out and when we clict to this it should log out uh log log us out again so let's first do the inside the let's say sidebar we're going to go into here let's just put a comma I mean comment let's close this we'll just say log out and then so instead of having this as a link so we could just delete this because it is not going to take us to the authentication page because of we have it as link but instead we're going to be using this state so let's say this is a flex okay so it is going to have a on click function and when we click to that it is just going to log out us okay so we'll say maybe handle log out let's say and this function is going to be coming from another hook which is going to be log out so I'll just say use log out. JS and in order to Lo in order to add this functionality we can again go back to our so say documentation so let's see we have this use sign out let's click to that it is going to give us this line I'm going to copy this and when you click to this sign out button it just calls it this Asing function that AIT the sign out and then it says your sign do so this is the logic that we're going to be adding so let's say rafc and then let's delete this return statement but instead it is just going to return the log out function that we're just going to create so let's say log out and maybe it should have something like loading State as well so logout slash loading and I don't know if we need any errors but let's just take it for now and we're going to paste that line that gives us the sign out function let's import it all of these all coming from our Firebase uh object so I'm just going to shrink it and then we are getting this function from this uh hook or the package so now we're going to have a so let's say let's say const log out when we click to that logout button we're going to be calling this function so let's actually rename this to be handle log out okay I'm going to copy this and just change the name so it is going to be a try catch and for the catch we are again show the toast so let's say c show toast and then use show toast which is coming from our hooks folder and then here we'll just say show toast which is taking the title description as well as the status in the try we're just going to do the exact same thing in the documentation we're going to call the sign not method and then after this once it has been done we're going to remove the item from the local storage which was the user info so that our application know this user has been logged out so we could actually now save this file and this is all we need to do this is our use log out hook that is handling the log out functionality so we are going to go here let's shrink this and we're going to be removing this in the incoming sections so let's say use log out hook call it and it is going to return us three things so let's say uh con is going to give us the handle log out and and loading State as well as the error and now this loading doesn't make any sense like what is loading it is not readable right so let's say instead of loading I'm just going to call this is logging out so when when is this load logging out we're just going to show a spinner and let's save and let's just rename this as is logging out and we're going to go into here instead of having this as a box I think that could be a button right so I'll just change this with a button okay it is let's import the button from Chakra and then we're just going to add a couple of different props so we'll just say variant should be ghost as well as the on Hover State underscore hover it is just going to be background of transparent so let's say transparent and when it is loading so when we logging out it's just going to have this this prop so we we will just get a spinner for that and the display of none medium block could be still the same so let's save and let's see if we have something so error so maybe we should show some errors or maybe let's just delete this and I think there's almost never going to be an error when you're logging out so we could delete that and if you wanted to you can handle that but in this case I will not so let's go here um into our application now when we clicked that we would like to say user logged out so for now there is no way to check that so instead I'll just say console. log log. okay let's go here open up the console and then if I click to that okay user has been logged out and it is successful but now how are we going to make sure that user logged out and take this user to the authentication page and we're not going to allow the user to see this homepage so for that we're going to use the zent okay let's search for it zo react so this is the so to say the documentation let's click to that and it says that this is a small fast and scalable Bare Bones State Management solution using simplified flux principles so this is something like react alternative or context API but it is just much more simple to use so you can check out the documentation to understand how that works what that is but or you could just watch me explaining it so in our case we are going to uh go to here and let's Shing everything inside the source we're going to create a folder called store and this store is going to store all of our Global so to say Global States so first we could have something like oath store maybe oath store.js so here we are going to use the create function let's say import create from zent let's say zo and I don't know if this is the correct pronunciation but um let's just continue so we're going to have something like a um so say variable so use oath store and this is going to call the create function which is taking the set as the first argument okay so this is actually going to be an arrow function okay okay and it is going to take the setter function um if I can type correctly so set close that and then it is going to have this Arrow function now we are going to have this state which we could just say store I mean user and initially it is going to be null okay so when you first open up the application no user is been authenticated so we are going to have a function that logs the user in okay we're just going to say log in take the user whatever the value is so set call this Setter function and update this user State and we're going to have the log out function which is going to take the user and set it as null so let's say log out is going to be this function no arguments needed and it is called the setter function and then just uh set the user as null okay and then what are we going to do is to use the setter function so we're just going to say set user and we're going to all we're going to be using all of them so if this looks complicated don't worry I'll just explain all of them so this is going to be calling the setter function and just updating the user State whatever the value that we're getting and we have a warning let's see um okay so this actually should be wrapped with parenthesis so I'll just cut this open up parenthesis and then return this object so otherwise it is going to think as if this is the function body and then we just say export default the use oath store so initially no user has been logged in and when we sign up we are going to actually update that state with the user that we are getting okay so this is the user that we have but we're going to set this with this user document that we just created so that our state has this followers count following count and basically all these all these things so after the local storage we're just going to let's save file first and we'll just say login user so how are we going to get this function so from zent will actually say con uh I mean equal on the left hand side we could just say use oath store so use out store and we are going to and it is going to be taking this state okay so this is the first argument and we could just say state. give us the login function okay so now we have the log function and we could just rename it as login user so if you want to get the log out function we'll just do the exact same thing we're going to call the use out store state. log out okay and then we could just anything that we want to put here so you'll just say log out or log out user in our case so okay this is how we use the state or the functions from the zent you call the create function put the setter uh Setter function as the call back and then the state that you have and then any function that manipulates this state so in our case we have the login logout as well as the set user so even though these two guys are doing the exact same thing I just created this set user function so that our code will be just more readable and you're going to see once we use this function so let's go here we are not using this and then we'll say a login user with the user document that we just cre created so user Doc and then we can go to the application so app.jsx so here we're just going to say const oath user we could say and then we'll just say use oath store okay and we'll just get the authenticated user which was just user that we have right so let's just close these so it should be here so this is the state that we're getting okay so this is the authent authenticated user and when we visit the homepage so we're just going to say if user is authenticated so let's say oath user then we're just going to show them the homepage but in the else case we're just going to navigate the user to the let's say navigate to the authentication page SL o and we're going to be basically doing the exact same thing for other routes so if user is not logged in so let's say if there is not oath user then they can visit the authentication page but in the else case you're just going to navigate them to the homepage so let's put it like this and now if we save let's see what are we going to get okay now we are in the authentication page because we are not logged in let's go to here you cannot see the homepage if you can see like there's a flickering effect but it just takes us to the oath page and we're going to handle that flicker effect as well so let's try to log in uh we already have an account but we didn't handle the login functionality so I'll just sign up with another user let's say Jan do gmail.com okay so I've just put all the credentials for Jano uh the password username full name email I will just sign sign up and there we go now we're in the homepage we cannot go to the authentication page let's try to go okay it turns out that we can actually visit this it is because when we refresh the page our state is null initially right do you remember so here the user state is will always be null when you refresh the page so we need to fix this and this is why we're using local storage we'll just say Json pars from the local storage get this user info and if there is not it'll just be null in anyways so let's save this and now let's take a look in our when we just try to go to the oath page okay it is not going to take us to the O page but instead it'll take us to the homepage it is because it is checking if this user has anything in the local storage and in our case we have actually because when we sign up we store that in our local storage so here we have the user info which is this user the Jano and when we log out we are going to be clearing this user info from the local storage so I'll just click to this button there we go now we don't have that user in our local storage so when we click to that log up button it should take us to the authentication page so I will go into here into the use logout hook instead of console logging the log out we're going just going to call the log out function from our oath store so I'll just say C log out the user and it is coming from use o store right so state do give me the log out function which is going to be this one and it is setting the user as null so that we can update our user interface so I'll just delete this and let's say log out the user and just call it now we are removing the user from the storage as well as navigating them to the homepage it is because in in the app jsx it says if there is not authenticated user okay it should be here I'm sorry if o user is empty then navigate it to the homepage so let's save and I have explained a little bit too much but I just want to just make it clear so if we refresh this page there is nothing in the local storage it takes us to the O page and there is no way to go into the homepage okay so there is one small problem that we have here so if we try to go to homepage I'll just try to go there for one Split Second we're going to see the sidebar here when I click to enter so let's see there we go we see that sidebar even though we are not logged in so we need to fix this and for that we're going to go into the page layout and it is wrapping our entire application so I will go into this component and here we're checking when should we uh render the sidebar which is that if you are not in in the authentication page but now we need to actually update this so I will just cut this okay instead of having it like this I'll just say can render sidebar okay and this is going to be a variable so let's say cons can render the sidebar so it is going to be equal to this thing that we just uh cut or we copied and if we are not in the authentication page and also if user is is logged in okay if user is logged in then we can we should see that uh sidebar and now how are we going to check if user is logged in or not so we could do something like this where we are getting it from our store in which uh in the background checks in the local storage but there is actually even a better way to check it so for this we're going to go into the Firebase documentation let's scroll to the very top and okay so we have this thing called use o State and let's click to that it says it is going to retrieve and monitor the authentication state from Firebase so there is a full example here um in the background it checks if this user is logged in or not so we are going to copy this and let's go into vs code and we could paste it up here and import this uh hook as well as the oath object so now this is the user that we are relying from Firebase so it is going to be null if you are not authenticated and if you are logged in or if you are authenticated then this is going to be holding that user value so now this says can you render the sidebar and it is going to be true if the path name is not equal to the authentication page and if we have the user that is logged in so now if we actually save this and let's take a look here I'll just try to go to the homepage again uh let's see okay we don't see that flickering effect now and it is because we're checking for that so now even if we go to a page like let's say the user page or the profile page we're not going to see the sidebar right it is because we are checking for that if user is authenticated then show the sidebar and in our app jsx we didn't put any uh s to say Protect protection into this route because because uh even if you are not logged in in our application we should be see um the profile of a user we are not going to be able to follow them or unfollow them so we we will not be able to edit the profile we're going to check for that in the incoming sections but we should be able to see the posts and the comments they have and let's say the number of likes and that kind of stuff but in the profile page if you are not logged in if you are not authenticated then we shouldn't be see that sidebar in instead we can put a nav bar here that says login or sign up so for this we're going to go into here into page layout let's say const can render navbar and we should be able to render this Navar only if the user is not authenticated okay and this is how we check for it and we'll just say if it is not loading as well so it is not checking in the background and we're just going to say if the path name is not equal to the authentication page as well so it is because if we go to let's say slash oath so here even if I am not authenticated it I shouldn't see that navbar that says login or sign up because I already see that form here right so it just doesn't make any sense so I will just say if there's not User it's not loading so it just basically checks if user is not authenticated and path name is not um is not the authentication page so if this is the case we're going to render the Navar I have a typo here can render navbar and I'll just copy this maybe after this so after the sidebar let's say Navar and we'll just say can we render the Navar if this is the case show the navbar component which will'll create in a second otherwise just don't return anything so we'll just go into the components let's say naar and just create it so at this point this is going to be a component that only holds um so to say um something like only styling okay it doesn't have any logic at all so at this point I'll will just copy it and paste it so it's about 30 lines of code and you can just grab it from the GitHub repo and it's going to be into this file and I think we are never going to change this content at all so it just have a container with a Max width and then a container flags that holds the image which is our logo on the left and on the right it holds two buttons so the sign up button and login button and it is wrapped with a link so when you click that it'll take you to the authentication page so let's save and then we're going to import this from the components Navar and Navar jsx so let's save this file and if we go to a page like let's say jandoo and okay there we have a problem which is that they are next to each other but the thing is we will go into the page layout we we are going to change this Flex Direction and we're going to say the flex direction is going to be column or row depending on a uh condition so let's see Flex direction if we can render the Navar then the uh Flex direction should be column so that they are in the uh horizontal uh Direction so let's a column but if we cannot render the Navar then it should be in the wrong direction let's save and I think that should fix the problem so there we go now we see the uh Navar at the top and our content at the bottom so this content is not centered so for this we're going to go into here and let's say the margin X could be just Auto and if we save now we're going to see that this is been centered as well and I think we could delete this with because we already have this Flex one which means just contain the remaining part so if we just save that shouldn't be any difference if we refresh um actually there there is uh okay there is not so let's refresh um okay in the loading state it doesn't look proper so let's just put it and let's see how that look like if we just refresh okay so it is just better if we have that with so lastly let's do one more optimization which is just going to show a loading spinner while it checks if the user is authenticated so I'll just say if there is not user and it is loading in the background so when you first uh refresh your page this loading uh state is going to be true and this user is going to be null because it will try to fetch in the background if this user is authenticated or not and this is what that really means and let's make our code a little bit more readable I'll just cut it and I'll say const check if let's say checking user is authenticated and I'll just paste it so we'll just say if checking user is authenticated then we could just return a loading spinner so I'll just say page layout spinner okay so this is going to be our component that we can just have it at the bottom of our file so let's say const page layout spinner and this is is just going to be holding a flex which in indeed has a spinner inside so I'll just copy it and paste it which can grab it from the GitHub again so I'll just return this thing and let's import this spinner and let's see what is a spinner is so let's go here so basically just a loading spinner you can give a size a color and anything like that so let's say size is just going to be uh x large there we go so now if the internet connection is really slow then this will take a long time to check if user is authenticated and at that point we would be showing a spinner to indicate the user that they should just wait a little bit while we check in the background and we're not using this error state so we could just delete that so this is going to be the page layout component at this point we could just save this and let's quickly reiterate what we did so we are checking when should we render the sidebar and when should we render the Navar and depending on that we are just rendering them in our template so here we just change the flex Direction depending on the nav bar if it's going to be rendered or not and we are just centering this uh box content which is going to be the page content and lastly we have an if check that checks if this user is authenticated and while it checks uh we are just showing a spinner in the screen so that if the internet connection is slow our user is know that they should wait a little bit so this is going to be our component we could uh close this and we're going to go into this hook which we have a problem or let's say we could do one optimization so here let's say there is already an account called Jano gmail.com so if this is the case another user try to create an account with this email this will uh throw an error and it is not going to create this user do doent in the database but the thing is if we have a username let's say j i mean jandoo and another user come and try to create an account with this username so this will not throw any errors so instead we should check it manually because this function only checks for the email if it exists or not so even we try to take a look at here we're just going to have a if check here and how are we going to check if a user already exists with that username for this we are going to go into the Firebase documentation and we're going to see something like query so I'll just say query fire store and let's say you don't know how to use this we're going to go here and let's take a look at the examples so they have some simple queries let's take a look so they are getting the reference okay passing the collection database and the let's say it's going to be users collection for us and create creating a query with that and then they are calling a function called get docs so I'm going to go here and actually I'll just copy this two lines okay and then I'll just paste it here so I'll say this is going to be the users rep and import the collection from so let's see from here and then our fire store so we already have it it is coming from here and let's say it's going to be the users collection so now we have a reference to this collection and we're going to do a query so let's say query it's going to be the users rep and then we CLA so let's get that and we'll just say where the username is equal to this inputs. username so this is going to do a query for us in the background and we'll just say const query snapchot and we'll just say await get docks and passing the query not the get doc but that should be um so say plural so we'll say get dogs and just pass the query and this is what they are doing in the documentation as well okay so this is kind of give us a snapshot which is going to be type of array so we will just say if this is not empty which means that this user exists so we'll say if query so let say query snapshot. empty there is a property like this if this is not empty then we'll just return an error so let's say show toast it is just going to say user already exists or let's say username already exists and then we'll just return out of this function so let's save and let's try to do this we're going to go here let's say into the sign up okay so I'll just say sign up with the email we could just put anything so gmail.com but the username let's say jendo which we already have in our database so let's take a look in the authentication okay we have the Jano and jando so let's try to for the Jano we'll just say um okay that was the email let me show you the so to say username okay let's see so this is the jando but we're checking for the Jano that query is just going to check if there is a user like this so full name we could just put anything it doesn't really matter for the password one to6 if we just try to sign up okay it says username already exists and it just doesn't create it in our database so let's refresh we had two users and we still have two users and that was the optimization that we just uh put it right here and with this this hook and this function should be completed now and we have our sign up with email password logic extracted into its own hook where we are just calling that with the function uh with the loading and error State we're getting and we are passing our inputs when we submit that okay when we click to the sign up button it takes inputs and just do that for us so this component is really readable we just see all of our components HTML CSS and the logic has been extracted from us so this is the beauty of using custom hook so now we can close this sign up and this hook we're going to just do one more thing before we get into the login functionality which is going to be that we're checking if user authenticated from the store in which in the background checks from the local storage but it is actually better to check it like this where we're getting it we are relying to Firebase okay it is a bit more safe I think so we'll just going to uh copy that and paste it here so let's rename this this as oath fuser and let's import these get the oath object and we're not going to use the loading State we could delete that and we're not using this store so yeah we are just checking if this user authenticated and we we are relying to Firebase and not the local storage so we could just save this and now let's get into the login function so we are going to create another hook called use login. jsx and we could say RFC delete this delete this return and let's just get our boiler plate so we'll just say show toast function to show some errors so show toast import that and then now let's take a look how do we even log in so let's go to the documentation so we're looking something like sign in with email and password let's click to that it is going to give us this uh so to say one line I'll just copy that paste it and get this hook the oath object and this is going to give us the function the user loading and error state so let's get into the function so just say const login is going to be an asnc function it's going to have a try catch in the catch we'll just show toast so let's say um error title and then error message as being the description and then the status which is going to be error and then in the try now this function will take the inputs okay again the email and then the password so inputs we'll just say if the inputs. email is empty or the password is empty we'll just return out this is function by showing a tost that says please fail all the fields but let's just take take this out of the try even if before we try we'll just uh check this if check and then we'll just say const user credential we could say and this is what they do in the documentation so when they sign in they call this function okay which in turn just returns us a user credential so we'll just say const user credential await this function pass email and then as as well as the password which is coming from inputs so if the email and password is correct this is going to give us the user credential so just say user cred and then we'll just get the fetch the user from our uh collection so let's say const and let's see so let's say you don't know how to fetch a document so we can go to here and let's say get a document so here I'm just trying to show you how you can use the documentation and I'll just zoom in a little bit so here let's take a look so get a document if we click to that it first get the reference and then the document snap so I'll just copy this let's go here um paste it so document reference import this fire store is going to be our database the user's collection and then the ID of the user which we could say user cr. user property. uid this is going to be the ID of the user that we are trying to fetch so we'll say get the dog and pass the reference so this is going to give us the user that is logged in so we're just going to try to set this in the local storage so let's say local storage. set item and the name was user info if you remember and then we'll just say json. stringify which is going to be this document snap and there is a method called data that just gives you the data of this um so say this document so it is going to be something like this if you are fetching this user it is going to give us all this fields and we are getting this by calling this function and lastly to update our user interface we're going to be calling this uh login function which we have here so it takes the user and set the state with it so let's go into the use login by the way that should be JS not jsx okay so I'll just say const login here say const login user from use o store and it's going to take this state and give us the login function so we'll just say login user it should be a lowercase we'll just say Doc document snap. data which is that document it is going to be and at the end of of this file we'll just say return an object with the let's say loading error I mean loading State error State as well as the Logan function so we're not using this we could just skip that by deleting it let's save and there we go this is going to be our function that first checks if the fields are empty then just return an error but if the if they are not empty it is going to check if the email and password is correct if so it is going to fet the document set the local storage and log the user in by updating the user interface so now let's test it out I'll just uh okay we already saved this so let's go here um so we had an account called Jane So Jano gmail.com we just say 1 2 3 4 5 6 we just log in and we cannot log in because we didn't implement it in our component we're going to go into login component okay we'll just say oops um okay let's say con equal use login um so say hook and then this is going to return us the loading State error State as well as the let's see the loogan function so when we click to this button that says login um so here let's say on click just call the login function with the inputs which is the email and password so we could have a is loading State here as well is loading and we'll just put it and then we could have something like the error we had here so I will just copy this and paste it before this login um lugin button okay so if you have an error just show an alert that shows the error message so let's save and let's try to log back in again so jendo gmail.com 1 2 3 4 5 6 if so let's say seven which is the wrong password if you try to login it's just going to say uh invalid login credentials if we are logging with the correct one so from 1 to six and it's load it loads and there we go now we are in the homepage let's see in our so application in the local storage we have this user info and the value is this state that we have here so we can also log out from here but we would like to add that log out functionality to here as well so for this we're going to go into this suggested header okay that was the component and when we click the logout uh button that was a link but that shouldn't be really that was for only design part now we could delete this okay and let's see what are we going to do so let's say this is actually going to be a button that has so let's say size of X small small and then background of transparent maybe I should just copy and paste it um these two lines background transparent and on the hover the background still is going to be transparent so font size 14 font weight medium color and it's going to have actually not going to have this style because in button it doesn't really need it so lastly we'll just have a loading State as well as the on click so we already had this use log out function or the hook plus say use log out which returns us I think three states so let's say const give me the log out function and the is loading State and we could take the error but I think it is not really needed so we're going to go here and we'll say on click to this function just call the handle log out and is loading is going to be if we are logging out and we could delete this as well as this line so now in instead of just having this um so to say hardcoded values we could get the authenticated user so say const o user so use o store state so state. user so state. user this is going to be our zand store or the state and now instead of this we'll just say oath user. username and then we'll just say instead of this Source let's say oath user. profile pick URL so let's save and we're going to add a bit more thing so now we see the Jano which is a username in this profile picture and let's just remove this name it doesn't really need it okay now we're just going to see an empty user profile picture and when we click to that it should take us to the page of Jano so we are going to go here and let's make this Avatar prep it with a link so I'll just say a link component which is coming from react ROM and we'll just say to this URL so back Tex dollar sign Cur braces oath user. username and we're going to just do the exact same thing for this text okay let's take it like this and then put it right here now when we collect this name or the profile picture just see in the left hand side it just shows the uh the URL that it'll it'll take us so if I click that now I am in the page of Jano so let's go into the homepage and if I click that it should log this user out so I'm just going to click it there we go it is not in the local storage and now we're in the authentication page so again this is the beauty of using a custom hook we didn't write this logic from scratch and we just reuse it in this component as well as that sidebar component so lastly let's just handle this Google authentication and then it should be completed but first let's fix something so if you are in this sign up I just want to have this text that says sign up with Google and if I am the I am in the login it should say login with Google so in our case it just has login so we can change this with a prop so I'll just say prefix okay and change this with the prefix okay and when are we calling this o form inside s form we're just going to show a prefix that says if it is the login okay then we'll just say log in and in the else case which means that we're in the sign up we'll just say sign up and if we just save let's take a look now I am okay let's just refresh this page okay now now it says login and if I click the sign up it still says login and I think I didn't save that so just say into here if we just save so it says sign up with Google and if I go to login it says login with Google and it is because we are adding that prefix depending on the state so when I collected this I would like to log this user with the Google let's go into the documentation again let's see how that works so up here we have something called um um so you sign in with Google if we click to that it is going to show us an example I believe so you sign in with Google so I'm just going to copy this entire line and we could create another custom hook for this but we're never going to be using it in other places and if you wanted to you can still create it but I think I'll just put that logic into here so I'll just get this I mean by pasting it import this hook get the authentication object and then let's just get the our boiler plates so const show toast in case if we have any errors so use show toast and then we're going to get the login function so let's say login user so that we can update our um so to say user interface so use o store and get the login function okay it was like this and then when we collected this Flex which is that entire uh container so let say onclick I'll just maybe put it like this on click I'll just say this function handle Google o and I'll just create it up here so it is going to be an async arrow function it's just going to have a try catch as always in the catch so this just save to get this formatting show toast uh that should be the title so let's say error description and then the status so in the try we're just going to do the exact same thing in the documentation let's take a look quickly see full social example so when you click that button it just calls you sign in with whatever the provider is so I'll just copy this and let's go here and actually it should be this function so I will just copy and we'll say const new user it is going to return us a wait if this is successful so sign in with Google and if there is not new user which means um so there is some kind of error and let's even check for that if there is error then just show a tost that shows the error message and then return out of it so here we'll just check if this is successful which you could say if there is new user we're just going to create a user document as we did up here so I think I can just copy this and actually we can even copy this because we're going to be uh setting this document into our collection and we're going to be setting that into local storage as well as logging the user in so I'm going to copy this entire thing and then just paste it but the thing is now we don't have any inputs because we are logging with Google so the email could be new user. user. email so let's see if there is in yes that we can see here the username is going to be something like this so let's say if this is the email so jando gmail.com we're just going to take this part and make that username so we can achieve this by using something called split and I think I'll just copy it and paste it okay so it takes the email of the user split it from here this add symbol and it just returns you the first part which is here okay so now this is the username it is going to be let's say jandoo and for the full name we could just take the full name uh from the Google account we'll just say new user okay that should be new user. user. display name so this is coming from Google as well uh for the profile picture we could take the profile picture of this user by doing something like this from the user object there is photo URL and the rest is just going to be the same no biography no followers no following no posts and the create that is just going to be uh dat. now so let's get the set document the document as well as the fir store object or the database instance and also we could just delete this comment as well as this one and we're not using this user or the loading State okay we could just ignore it and yeah that should be it and even if you are signing up or you're logging in that doesn't really matter you could use this function and it is going to either sign you up if you don't have an account or if you have already it'll just uh sign in okay so we could save and let's test it out I will go into here um into the project if I I click to this it is going to ask me this thing so let's see I'll just choose it and now I don't have an account but it'll just sign me up so there we go this is the user info that we got and in the console we have an error so let's see but first let's check it here so we got this user okay so this is my account and if you go into the authentication there we go we see this is the provider which is the Google and this is the user that is just logged in or the signed up so let's go here and check for the errors so here we have the cannot read properties of null so I think the oath user is not defined so let's see so inside the suggested header let's go there so just say suggested header and so while this is null it still tries to get the username or user profile picture and things like that so we could say if the oath user is empty then just return null and once this is available then we just going to return this content so let's save and there we go now we got the um so let's just refresh again okay we got the username as well as the profile picture and then this log up button so everything works fine now so we just had an error in the console and I just refreshed the page now it works it shows me this profile p picture that is coming from Google and in your case if you still get that error so here's the solution I just asked it to uh stack Overflow and a guy just posted this you need to just copy this entire line and then go into the HTML page so it's going to be index at HTML and just paste that to here and that should be working fine okay so now you should be seeing that Google profile picture so if we click to that it is going to take us to this user profile so I don't know if you have realized but we have one problem with the Google authentication it is that when we first sign up it is going to create this user document in our fir store users collection but when we sign in back so when we log in it is again going to try to this uh user document and it'll just try to create it in our database which is not optimal because it would be overriding that current document with this one so instead we should just make our code to realize if user is logging in or they are just signing up for the first time so how do we going to do that is just going to be we'll just check if this user exists or not which we can check by getting a document so I will copy this two lines and then let's go here I'll just paste it and I'll just say this is going to be the user reference and then the user snapshot okay so let's get the document function we already have let's get the get dog and the fire store so it's going to be the users collection and this is the user that we're checking so new user. user. uid so we should pass the ID as the third argument and then we'll just say user reference now this is going to give us a snapshot for that document and we could just check it by doing something like this so let's say users snap. exists which is a method and in this case we are not going to be doing this so because this is logging in oops I didn't mean to do this so we'll just go here and say log in and then I'll say const user document give me that uh user object which we can do with the data method and then we're going to set this in our local storage as well as the oath store um to this state so we'll just say local storage. set item that should be user Das info and then it's going to just take this user document and then let's say login user with this user document it's going to update that Global state so it's going to be this function and in the else case which means this user is signing up so let's just put a comment sign up and then we'll just paste what we have cut so we are creating this empty user document set it in our fire store in the users collection and set the local storage with this new user as well as with our uh Global state so now our code knows that if this user is signing in with the Google account or they are signing up for the first time so let's just save and maybe we could give a little bit spacing like this okay it just ignores that anyways so now you can add other providers which is like GitHub uh Facebook Apple Microsoft Twitter any kinds of these hooks that you want to implement so I just let that as a challenge for you but now we are going to go next and just uh try to fetch this data for the user profile and after that maybe we could add this edit profile functionality so in order to create this functionality where we just fetch this data it's going to be pretty simple but there is one thing that we need to add which is going to be another store object or state and it is because we're just going to store which user profile we are checking now we are in this profile and we're going to store that because we're going to be using it in multiple components so we're just going to have that as a global state so we could just share it into all of our components with that one hook so let's go ahead and create that user so say this store so what can we call this I'll just say user profile store.js and press enter now we'll just get the create function froment so import create from zent let's say so let's create this store I'll just say const use user profile store it is going to take the create function call it with this call back which returns us an object so we're going to go ahead and then just create the state I think we need to close that off okay so the state is just going to be the user profile initially it could be null because we not visiting any profile initially and then we'll just say set use user profile and it is going to take the user profile which is a function so this is kind of like a Setter function when you are having a use state so this is the state value and this is the setter function so we're just going to say set the user profile with the given user profile so this is actually looking like this but we can just make it a bit short and just delete it so this is going to have another function or method which is going to be the ad post but but we're going to be adding that later so now I'll just comment that out so that we know how we should be adding that and let's at the end just say export default this use user profile store so now we can save this file and maybe close it and then we're just going to create a hook that fetches the user profile so that we can show their data in this user header component so we're going to go into our hooks folder and let's say use get user profile by username so kind of a long name but again as long as it is selfexplanatory it is okay so let's say rafc and then we're going to delete this for now so let's get the boiler plate since this is going to fetch some data it should have a loading state is loading set is loading let's delete this and import the use State initially it could be true because it's going to be running immediately and then let's get our show toast hook in in case we are showing some errors so let's get that and then let's see what do we have so we're going to have a use effect let's just initialize it for the unmount initially and now this is going to just get the user profile by the username so what does that mean it means that we're going to be using a query so I already showed you how we can use that which you can check from the documentation so I'll just go ahead and type it so let's have a function that gets the user profile which is going to be a async function and async function and then here at the end we're going to be calling that function and this is going to have a TR catch in the catch it will just show the toast with the error message I mean show the error with the error message and then before even we try anything let's just say set is loading to be true and then in the try we're going to get I mean we're going to have a query let's say query and this is going to be taking a collection as we show see in the documentation so the fire store our database and then inside the users collection because we're fetching a user where okay a query takes where Clause so where the username is equal to the username that this hooks get okay so username I think this is going to have a comma so is equal to and this is something that we have in the documentation and I think I just have to show that so we're going to go here let's say query so here there are things like not equal oops so here equals or not equals so in not in and I think we're going to be using a couple of these but um so just know that there is something called this equal okay and if you do it like this then it just means not equal just like we have in the programming so where the username is equal to the US username that this hooks gets as a Prem okay or the argument so this is going to be our query now we need to just call it which we can do by wait get dogs and then pass the Q or the query this is going to return us a query snapshot so const query snapshot and now we can just check if this is an empty uh empty snapshot or not so snapshot so we'll just say let's save so that we have this formatting if the query Snapchat is empty which means that this user is not found so we can set our user profile State as being null so let's go here use user profile okay that wasn't the hook so what was the name I'll just copy this at this point let's go here use user profile store okay now we need to import this let's go here that was a default export it's coming from here okay use user profile store and this is going to give us now uh the way we were using it up until now we were getting the state and maybe from the state the user profile or the set user profile function and then we were calling it here but if we just don't pass anything inside we're going to say con open up Cur Braes which we are just destructuring we just get the user profile and set user profile okay so this is a new way of using it that we just see so if we didn't use it like this the normal way that we were doing up until now would be something like this so let me just show that we would say the user profile okay let's just delete here and then call this with the state that gives you the user profile but instead we can just call it like this without any arguments so it is going to give us all of the values so let's just delete here and then comment out this so if the query Snapchat empty which means that user doesn't exist so just return out of this function and just say set user profile to be null but if this user exists then we're just going to get the data and set the user profile with it so here is how we do that so we'll just say let user document so initially it do just going to be undefined and we're just going to go here and let's say query snapshot which is going to have this for each and then there's just going to be one document but we're still using for each because it is in the format of array so we just say set user document with this doc data and then now we need to use it where we'll just say set user profile with this user document so yeah basically this is what we're doing and here we have some warnings let's just give a little bit formatting I'll just save and there we go so maybe like this it is better so here it says add the set user profile show toast and username so that any of these values change this use effect will run again so if we just let's just put set user profile username and show toast now if we just put it this show toast like this we're going to get an infinite Loop error it is because let's go here so this is a function and on each render this is going to be stored in a different place in memory so we need to cach this this is something related to react and I'm just going to cut this function and we're just going to wrap it with something called use call back so call back call it paste the function and as the second argument we're just going to put the toast so this basically caches so use callback is used to an infinite Loop that copilot says I think it listens us so here infinite Loop and then let's say also it caches the function so basically instead of Also let's just say by caching the function okay we could save and now we're not going to get any errors because this is not going to cause a infinite Loop and at the end end of this hook we're just going to return this state is loading user profile and we have a warning here let's just delete the react because we're not using it now we can basically call this hook in our profile page so let's go here into the profile page and then we're just going to call that hook up here so use get user profile by username and we're going to pass the username and how are we going to get that so let's say const so there is something called use location and I think we have used it so far so or maybe something like use prems I'm sorry so we're going to use the use prems hook which is coming from react router D so it is going to give us the username so let's go here import that it doesn't gives us so let's go here okay so we have the username and this is the username it is because here in the profile page we have this as a username is this is the dynamic value if it was U ID then we should come to that profile page and then call this as uid okay so this is what we are doing let's go into the app jsx and change it with the username so let's go into the profile page okay we are getting the user profile by the username and it is going to return us to States so const is loading and then the I think user profile itself now if the user profile is empty then we could show something like user not found and go back home so let's say if the is loading is false and there is no user profile which means that user is not found so let's just make our code a little bit more readable by doing something like this con user not found and then paste that so now it just reads as an English sentence so if user not found then we could just say return this user not found component which we can create at the bottom of our file so I think at this point I can just copy and paste that because it is just 10 lines of HTML and CSS from Chakra so it has Flex text component as well as the link which is coming from Chakra and let's get the router link so import link as router link from react router D so it says user not found and go home link when you click that it is going to take you to the homepage and we're going to be using it once we have no user okay so this is going to be our component at least so far so here we are showing the profile header but we should only be showing that if the user profile exists okay so I'll just cut that and I'll say if it is not loading and if user profile exists then return okay and return the user profile header but while it loads we could put something like a skeleton so I'll just say is loading and then again I'll just copy and paste maybe 10 lines of code so it is going to be the profile header skeleton and I'll just put it at the bottom of our page or the file and you can get that from the GitHub so it is the profile header skeleton which has Flex component uh skeleton Circle and then two skeletons in the vertical Direction so we're going to go up here and then just paste it and let's make it a component okay so if it is loading we're going to see this uh skeleton and if it is not loading then we're just going to show the profile header so let's import this vertical stack and then the skeleton now let's save and we're going to go into the profile page there we can see um it says cannot get snapshot maybe we have some typo let's go here get snapshot okay so I just refreshed and it is working now but we have this loading skeleton for the rest of our lives it is because we didn't set this loading to be false in the finally block so either we success or fail this loading stage should be false and let's say console. log the fetched user so let's say user document and let's save let's refresh this again we have this loading state for one second did you see that let's refresh again okay it shows us that loading skeleton and then we got the user document which is this user we are checking from we are fetching from the username so we got the profile picture just basically every information every field that we have so now let's go into the user profile header and just render all these information right and I have added this followers in the background so in your case maybe that would be an empty array okay so if you're seeing why this user has this follower it's because I was testing off camera and I just added that so let's go here and just delete that sorry for any confusing that I just made so initially it should be in this empty format that we have for each user and we're we're going to be adding that follower I mean follow functionality in the incoming sections so okay enough talk let's go into the user profile header so profile header I think it was we're going to go here and then just render this data so first let's get the uh user profile state so just say const maybe Cur Li Braes and then user profile which is coming from our store so let's say use user profile store and just import that so this is going to give us the user profile now we can delete this name and as the source of this image we'll just say user profile. do profile pick URL and then we're going to go into let's see this is going to be the username I'll just delete that I'll say C Braes user profile. username so let's see what are we going to have else so this is the number of posts we'll just say user profile. posts. length so since this is an array we can just get the length and this is the number of followers so user profile followers and get the length get the following and then this is the full name okay so full name as well as the biography so user profile. bio now I think we could save this and let's take a look in the browser okay okay we got the profile picture username full name and number of followers following in posts if we just refresh that should be zero because we just fixed this in here right so let's go here and refresh that should be zero followers there we go now we are going to show this edit profile if we are visiting our own profile and if we are visiting profile of another user this should be follow or unfollow button so we are going to go here and if we are not authenticated then we shouldn't be seeing this button at all not the follow button and not the edit profile so let's have that if checks which we can again just make our code a little bit easy to read that we just do here so in the profile page we're just going to put this something like this okay it is the if check into a variable so you're going to understand now we'll just say const visiting own profile and authenticated so let's get the authenticated user first const oath user so use oath store and then give us that user so we'll just say if oath user exists and so if the user is authenticated and oath user. username is equal to the user profile that use do username so if this is equal to each other so if this is the true then user is visiting their own profile and we're just adding this o user to check if this user authenticated so I'll just copy this and we are going to wrap it like this so C races paste this if user is visiting their own profile we are just going to show this button so cut this paste this and there we go we are going to copy and paste this thing again and it is just going to say follow button okay so that should be visiting another user profile another say profile and authenticated and let's create this constant or the E check con visiting another profile and O So if this user is authenticated in username is not equal to the user profile. username so let's go here and check that if that works now we are there now we are in our own profile so we see the added profile button if we just go to the profile of let's say jendo there we go now it says follow button and we are getting the user profile of the chain if we go to the profile of John so say J there we go it is still in the follow button and then the data of the John now we could change the color of this button I believe so we are going to just go into here in this button and let's see what is going to be the styling so the background is actually going to be blue. 500 and then let's see color is going to be white on the hover State I'll just copy and paste it the background is going to be blue 600 and save it there we go and it didn't work okay so let's just make the color to be white as well so color should be white and now that says follow button with this styling it has hover effect and let's go into our own profile so I'll just click to this it says edit profile with this styling so now we cannot see bio for this user and it is because this user doesn't has any so let's go here and add it manually so if I just put something here random okay and if I update that we're going to go here refresh and we should see that up here there we go this is the bio of this user so now let's add this functionality where when we click this button we see a model that allows us to edit the profile so I don't know if we need to take a look at in the documentation for the model component but let me show that again so this is the model where we just call this three functions or import it from use disclosure so I'll just actually copy this and go here paste it import the use disclosure okay I already did I think from here and when we clict this function or the button it is going to call the on open so okay I think okay we have some warnings it's because we're not using this variables but we're going to create a model so let's say edit profile. js6 okay so here let's get the RFC and then we're going to get to here at the very bottom of our file we're just going to say if it is open if the model is open then just show this model so edit profile component import that and it is going to be taking the is open function we're going to be using that and then also the on close function give it as a prop so we could save this file and then let's go here before we just save this let's create this small model so for this model we can use something called the chakra UI templates so let's go here and let's say chakra UI forms template so you can go to this link and in the forms authentication at the very bottom you're going to see this edit profile uh component and if you go into the code you can copy that and paste it into your component just to have this exact same behavior that you can see here or this output so I copied that and I just Chang this a little bit and make it uh make it usable for us so I'll just paste it like this and you can get this in our GitHub repo so I will even comment this out and put it at the very bottom of our file so I'll just say copy and paste it as the starter edit profile model let's say okay at this point you should be copying and paste it so I will just put it as a comment and then just paste it up here so this is just 90 lines of code which is just basic HTML and CSS that has some inputs um form controls labels heading stack and all that kind of thing that you can take a look it WRA it is wrapped with a model that is taking the is open and on close functions or the props that we're sending so yeah so let's save and let's see the output so we're going to go here in our demo uh um okay if we just refresh I think we shouldn't have any errors in the console when I click to this there we go this is our model that we see now we are going to add the functionality where we can select an profile picture from our uh machine and then update this information and just submit it so first things first let's go ahead and add a state so that we can take care of this inputs so we're going to go here and let's say const inputs and set inputs which is going to be a use state with an object okay let's initialize it like this import the US state and give a little bit of space so this is going to take the full name username as well as the bio if you wanted to you can add email and password here and go just here and take a look at how you can update the email and update the password so I don't want to make it any complicated I'll just go ahead and update these fields and it should be enough in our case so we have this now we're going to go for each input and add that as a value so we'll just say value this is the username so inputs. username and we just skip the full name so let's go say value inputs. full name and inputs. bio so now when we type something in into this inputs we would like to change that state so for this we can add the on change function so let's say handle input or actually let's just immediately update it right here so if we are typing in into this input we are going to be only updating the full name because this is the full name input right so now here the exact same thing but we're just going to change the username so on change take the event get the value from this e. target. value and update the username so let's go here and update the so when we clict to this button where it says submit so let's say onclick and let's just call handle edit profile function which we will create in a second so let's copy this and by the way when need click this cancel button uh it should close the model I believe so here it is we have this on close um so if we clict this it doesn't close the model so let's go ahead and add that so let say on close I mean on click it is going to call the onclose function now if we save this we're going to get an error so let's just delete this for a second let's save and test it out if you open the model close it I mean click that cancel it's going to close it so let's go here take the handle edit profile function and for now it should only um the console log out the inputs so let's say console log CLG the inputs open up here so we have some errors let's refresh okay so this is let's say John or let's just put something so like this 1 2 3 just submit there we go we got all the inputs as expected bio full name and username values we can do one optimization so let's refresh and when we open that model initially the input values are empty that we can see here so what we can do is just take them take the value from the authenticated user and just put it here as the initial value so we're going to go here and we're going to get the authenticated user so const oath user and use um so it was oath store right and get the state. user so this is going to give us the authenticated user where we can say for the inputs the value is going to be the inputs. username or if this is empty then we can take the default value which is from o user object so we're going to do the same thing for this and for the full name as well we always skip that so let's go here now in the initial value the inputs are empty right so if we just refresh this there we go it checks and get the full name from the uh authenticated user user object get the username and get the bio since it is empty we just have this empty field so let's refresh so even though we have some bio it just gives us empty for some reason let's take a look bio here is empty and maybe we are setting state in a wrong way so full name username and okay we didn't set the bio or we actually did so let's console log the bio I don't know why this doesn't work so console log of user and let's see so it is coming from 30 okay so bio is empty for some reason it is because when we log in okay so when we logged in that was the state that we set in the local storage and then we go manually update it in here so that's why this is a not really important error so for now we could just ignore that and just know that if we had a bio information that would be here so we just have some kind of bug because we updated that later so anyways let's go in at this functionality when we click this button we would like to select an image from our computer and just show it here so how are we going to do this we can use an input for this so let's say if we had something like this input that should be self closing and then the type of of file okay and then okay let's see so we're going to just save this and let's go here it shows this choose file button so there is not enough space so it cannot show it but if we click that it is going to show us the pictures from our computer so I'm just going to click that okay so this is what I see but this looks really ugly and I don't want to see that instead I would like to click this button and still see this window okay so for this what we can do is to just say this is going to be hidden okay hidden and then this is going to have a ref so let's say file ref we're going to go here delete this console log const file R it's going to be a reference okay it could be null and when we click to this button it should actually go and click to this input so we'll say on click to this button file r. current. click so when you click to this edit profile button in the background it is just going to go and click to this input file and it is going to open that window for us let's test it out we don't see that choose file button now and I'll just click to this one and there we go this is the window that we got so now what happen if we select an image nothing happens right we need to render that image here for this we can create another hook and if you have watched my previous tutorials then you would see uh you would understand what we are going to do next so we are going to create a hook called use preview image and this is something uh common in react you would just create something some hook like this and you just call it whenever you want to render an image from your computer so so we are making this a hook it's because we would like to make our code readable and reusable because when we create a post we are also will be able to select an image from our computer so we can use that hook again and again so we're going to go into that hook and just try to add the logic so it was the use preview image right so let's get our Ace this is going to give us a boiler plate let's just delete that and this is is going to have one state which is going to be the selected file and set selected file the seter function so initially it could be null because there is no selected file so let's say we're going to get the const show toast which is going to be for the error handling and then let's say this image I mean this hook only allows 2 megabytes of images so we can just say con Max file size in bytes so if the image is larger than 2 megabytes we'll just say uh maybe size is too large please select a file less than 2 megabyte or something like that so this is how we can uh measure it in bytes so 2 * 1,24 * 1,24 so which is 2 megabytes and then this is going to have a function so const handle image change once you select an image this function will run in the background and then it is going to let's say const file so this is going to take the file that you choose from your machine and then we're just going to do one check let's say if there is a file that has been selected and file. type. starts with image slash okay so this is just going to check if this is an image file if this is not we could render something so let's say if and in the else case we're just going to render a show toast or we'll just show a toast so show toast please upload an image file or let's just say please select an image file and we'll just say set selected file to be n but if this is an image file we're just going to check for the size if file. size is greater than Max file size in bytes which is 2 megabytes then we just have we'll just have another error that says uh file size must be less than 2 megabytes okay that that is a nice error message and set the selected file to be null just return out of this function so don't run the remaining part which we will add so we will create a reader okay const reader by the way you can get this function from the uh SE overflow or chat GPD so it is really common function or hook so con new file reader and we're just going to add this function so reader on load and it is going to take this reader result and set it into the selected file and reader. read data as read as data URL and just pass the file so basically it is going to take the image file and convert it it into a base 64 string and then just set it into this input so at the end of our file we're just going to let's say return oops so return the selected file the handle image change function as well as the let's say set selected file now we can save this and remove this react import okay there we go we're just going to go into edit profile and let's say here use preview image so this is going to return us that values so con control space handle liit change control space selected file and control space get the set selected file function now what are we going to do with this function is going to be when this input file so where is it so on change so let's say on change when you select an image that function should run which is the handle image change and if it is successful then it is going to give us the selected file as that um Bas 64 string which we can put it here here so we just say selected file or we'll just say oath user. profile pick URL so this is going to be that default value if user didn't select any image so let's go here and save this there we go we're going to go here edit profile picture now we didn't choose any so we have this profile picture of the user if you select let's go I'll just change I mean select the John and if I open that up there we go now this is the profile of John and now if I clicked this cancel I would like to remove that selected file but if you now go here um okay it's already been removed so maybe we don't need to select that I mean set that so we're going to go here I think we're never going to be using this so let's just delete that okay there we go and I think the only thing that we left is going to be this function that actually it is the profile now we could put that logic here but instead let's just create a hook and maybe you could just take a challenge post the video and try to add that by yourself if you do do that now let's watch my solution so use edit profile. JJs so this is going to be our hook we are going to call it into this file and then it is going to update it for us in the background so while it edits our profile it is going to show some Spinners or maybe maybe something like that for that reason we would like to have a state called is updating so you can call this as loading or yeah like loading is loading but I'll just say is updating so it's just preference so let's import the use State and then we'll just get the authenticated user because this is the user that actually updates their profile so use oath store and give me the user okay this is not oath okay not o us but the user and then let's go we're just going to take the set off user oops maybe I'll just add that in a little bit so let's just get const show toast use show toast and then this is going to have that function cost edit profile that actually updates the users's profile so this is going to be a kind of Long Function but we will make it so this is going to take the inputs okay as a argument as an argument and then selected file to update their profile picture if they wanted to and let's go here we'll just first just do the optimizations or the error handlings so is updating or if there is not authenticated user you'll just return so when you click to this button okay for one second it'll update and at that exact moment if you click to the that button again it shouldn't call that update function again so that's why we are just adding this we'll just say if it is updating then just return don't try to edit the profile again but if this is not the case set up Ting should be true and then we would like to create an image in our storage right for the profile picture and then we would like to update the profile picture URL in the users document so how are we going to update or upload an image to storage let's go here let say Firebase storage upload so always just check documentation so we're going to go here upload from a string because I didn't show you I think so let's comment this out for a second so that we don't get any errors and here let's say console. log the selected file okay this is going to be the file that we select let's clear the console if I select an image so this is that giant string and this image has been represented by this long string and when we upload this image to our storage we're going to be uploading from a string okay so we'll just take the string convert it to the image and upload it to the so the storage so let's take a look how they do this so basically they are taking a storage reference and then they put the um so what do we call this they say child but this is going to be the path and you're going to understand that so now we will say something like profile pictures and then the ID of the user and then the example that we're going to be looking is going to be this because this is the data URL string and this is the image okay represented by that string we're going to call this upload string function pass the storage reference the uh image message and then this data URL as being the parameter and then just call it and it's going to upload it for us in the background so let's go here this is how we're going to be doing that um in the use edit profile let's contrl Z and here we'll just have a TR catch so now we are only going to be updating the profile picture if there is a selected file okay if there is a selected file then we're just going to upload that in image to the storage so let's get that storage reference above the try we let's give it space and let's say const storage reference and then ref call that get the storage let's import it and then the path could be something like the profile pics so that we know we are in the profile pictures so this could be anything okay but uh we need to make it readable so that we know what is going on and let's say o user. uid so it is going to be in the path of the user ID and con we're going to get the user document R so this is for another thing that we'll see so let's say con document and get the fire store users so this is not the path actually sorry that should be like this so users collection and then give the user ID so this will have that user document reference for this user and if there is a selected file a wait upload string that we see from the documentation pass the storage reference the selected file and the data URL as oops as this argument now once this has been uploaded we should update a variable let's say let URL initially it could be an empty string so let's say this is the initial value and once this picture has been uploaded we going to get that so let's say URL is going to be equal to await if I can type await get download URL so you can see that from the documentation it just gets the URL of the image so ref storage this is how you call it and then from the profile pictures give me this um this pictures URL so so this should be fine and let's handle the catch we forgot that show toast show a toast and if user select the image okay we are going to um so to say reassign this URL otherwise it's just going to be empty and let's create a object called updated user which is going to be having the full name as inputs. full name or if user is not updating their full name you'll just have the default value so again update the username with the inputs value or if the user is not updating their username then we'll just have the username that the user has and same thing for the bio get it from the inputs otherwise get the default value and for the profile picture URL if user has just uploaded a new profile picture get that otherwise if they are not up updating their profile picture just get the old one I hope it is readable and we also need to let's go here put a comma Three Dots and oath user now we don't really want to overwrite the other data out outside of this so the user had followers following count created that and if we don't put this it is going to delete all that arrays and just put these for values so that's why we are only updating the these fours and just keep the other fields as they are so I hope that makes sense let's go await now we're going to update this user document so update document and how are we doing this let's go into the documentation update document so just ask it basically click the first one then this is what we have get the reference from the users and pass the user ready from the users collection and then call this update document function with the reference and then the data that it should update with so we're going to do the exact same thing we got the user document reference from the user collection and then call this update document let's import this and then we'll say user document R and then just pass this updated user object and now we would like to update our local storage with this user as well so that everything is in sync with each other local storage set item user info and that should be Json stringify of this updated user now we would like to also update the authenticated user State okay so that's why we had something like this so This set user does the exact same thing with the login function but it just makes it more readable that it says this actually Updates this state so we're going to go here and let's get it I'll just duplicate this and let's say set oath user and then just call that set user function so we are going to go here and let's say set oath user with this updated user document and then we would like to update the user profile so let's say set user profile and which is coming from use user profile store right we're going to get that function and call it with this updated user so why are we doing this and then this so we just like to have every state in sync the user profile State should be now this updated State and the oath State also should be this updated state it is because we are in the edit page right uh okay so so when we update this we are in our own profile so that user profile State should be in sync I hope it makes sense if not just pause the video and think about it a little bit okay and at the end we will just show a toast that says profile updated successfully with the status of success so I think this is everything that we need for this component right we got the shos and everything up here maybe we could just give a space here save like this and then we're just going to uh export this edit profile function so that we can call it as well as the updating State let's delete this react and comma so let's save and then we're going to go here call this um hook so delete this const it is going to give us the is updating as well as the edit profile function so use edit profile we're going to get that and this should be let's say an Asing function so when we click to that button it is going to run this function we'll just say try catch and in the try we'll say await edit profile and pass the inputs as well as the selected file if there is any and in the catch let's say show toast but we need to get that first so say con show toast use show toast we're going to get this with the error message show the toast and then set selected file to be null okay I think we should get that from here and lastly we'll just call that on close function so that it close the model and and hopefully that should be working fine lastly let's use this updating State we're going to go into the submit function and let's say is loading is going going to be this state let's save and cross our fingers that it should work so let's take a look at this document I would like to just update my bio okay I'll go here and I'll say hey this is new bio if I click to that it loads and profile updated successfully now we got that immediately here because we have updated our user profile State and if we take a look at the local storage let's go Application there we go now we got this new bio and we also updated our oath user State now let's take a look at the database here this is the new bio that we get so in the storage we don't have any images yet because we didn't updated our image right right or profile picture let's go here and I'll just select one so I'll just select the Bob let's say open that up and submit that and it uploads there we go so this has been updated and let's take a look here I'll just refresh so this is going to be the path that we had so a folder called profile pics that we had here okay it is going to uh put the profile pictures into this folder called profile pcks and then whatever the ID of the username so let's take a look if we go inside the ID of the user and then this is the image itself okay so this is the name of the image which is the ID of the user and it is just created now so I think this is the edit profile functionality let's just quickly reiterate what we did so first let's go into the profile page right so let's say profile page so we had this profile header and we are showing this if there is a user profile and also I forgot to show you if we just go here and search for a user that does not exist in our database so I'll just search for it and there we go it says user not found and go home it is because we are showing that if user not found then return this template that we have at the bottom of our page so if there is not user show that return statement and if you are loading show this skeleton and if you have the user profile show the profile header and inside here we were fetching this user profile information so the user profile which we are storing inside This Global State and when we click to this edit profile button we are opening that model so which is this one and inside that we are calling this hook which one is that so use edit profile which in turns update the user profile for us in the background so it takes the reference for the ref I mean storage as well as the user document it checks if so if user updates their profile picture if so upload that into the cloud into the storage and then update the user profile with these values if there is any any of these and then update the document set the local storage set the authenticated user State set user profile State and show a toast that says profile updated successfully and we are using this is updating and edit profile return statements or the variables in our component so yeah that was it now let's move on with the next functionality which is going to be follow and unfollow users so let's go to page of John so here we have the follow button if we click that we would like to follow this user for this let's go in create a hook and the reason is we're going to be using it in multiple places so the first follow feature will be here and then in the homepage we can follow users from this suggested component and then we can follow and unfollow users from this um post header that's why if we create a custom hook that we can use multiple times that would be pretty helpful and let's go into our vs code we're going to create a hook let's call it View follow user and you can call this as use follow and unfollow user but I'll just go with this name so let's get the boiler plate and delete the return at least for now so since we are going to be doing some asynchronous operation we could have a state called is updating so con is updating and set is updating let's get the use State initially is going to be false and then we're going to have one state that checks if we are currently following this user or not so let's say is following and set is following initially it is just going to be false and now we need to check in the initial state if we are following this user or not and that user will be the ID so let's say user ID that we're going to be following or unfollowing so in order to initialize it in the first render we'll use use effect let's initialize it like this and we're going to get the authenticated user so let's say const um o user use oath store and then get the user from the state so inside the use effect we are going to check if this user is authenticated okay if oath user is not empty then we're just going to say const is following is going to be a buan oath user. following array so let's say following that includes the ID of this user ID okay if it includes this user ID then it means we are following that user so we'll just say set is following to this state and this user effect will run whenever the O user value changes or the user ID changes and at the bottom we'll just say from this hook return the is updating is following and we're going to create a function let's say handle follow user so and this is going to be handling the uh following functionality let's create that cost handle follow user and async function we would like to get a couple of more things so maybe we could just delete this so that we can import other things so o user and then maybe set of user Setter function and then const we're we're going to need the user profile set user profile from our store so use user profile store and then also let's get the toast okay this is going to have a TR catch and in the catch as always show the tost with the so this is not correct the title the description and then the status and then even we try to um So Def follow the user we'll just say set is updaing to be true and then finally this state is going to be false now in the try we will would like to do two things let me just show you a diagram that I have here um let's go up here okay so this is John this is Jane the ID of JN which is one ID of Jane is two now JN wants to follow the Jane So when he sent this request what is going to happen is that the following array of John now will include the ID of Jane and followers array of Jane will include the IDE of John so now if we just take a look at this picture we see that John follows the Jane right the IDE of two and then Jane has a follower which is John and if it was an unfollow then we would be removing this idea of Jane from here now JN doesn't follow anyone and then followers would be removed from here and Jane doesn't have any followers so that was the two things first updating the follow following array of the current user and then followers array of the user to follow or unfollow so with that in mind let's get into the coding we are going to get two references so cons let's say current user reference and this is going to be document and at this point I'll just fast forward this because I already showed that in multiple times from the documentation so maybe you could just take a look at that so fire store from the users collection get the authenticated user by passing the ID so let's get this function and now we're going to get the other user so I'll just say con user to follow or let's say unfollow let's say ref as well then we're going to get document fire store users collection this user that we are getting as an argument and let's delete this import from here and now we're going to just update the document both of the documents so let's say a wait update document and now this is going to take the current user reference and then the object which is going to be the data that you would like to update so the following array of the current user right so if it is following already then we are just going to be removing the ID so we can use a function from Firebase which is called array remove and you can still see this from the documentation we are going to remove the ID of this user ID and then if it is not following which means that it is going to follow that so we'll say array Union which is adding that user ID into this array and we're going to be doing the kind of similar thing to the this user okay so I'll just say await user I mean update document I'm sorry so update document pass the reference and then the object so here we are going to update the followers array so followers and it is going to be if it is following then we're just going to remove that so array. remove the authenticated users uid and then in the else case we're going to be adding the ID of the authenticated user so now we actually update this documents in the database now to to update our user interface we would like to update these states which we have have this in the store so set user profile we'll take the new profile and set that state with that and in the oath store we're going to be doing the same thing where in the set user we're just taking the new user and set the state with that object so this is what we have let's go here and we're going to have one if check that says if it is already following so if this is true which means that now we will like to unfollow this user and if this is false in the else case is now we are trying to follow this user so we're going to go here and then update the oath user first let's say set oath user which we're taking a new object let's say supet the oath user fields and then we are going to change the following array by filtering it so o user. following. filter so we could just say U ID for each ID just check if it is not equal to the user ID so we are removing this ID from the following array of the authenticated user and then we're going to do the same thing for the set user profile where we're just going to return an object let me just scroll down a little bit so we're going to just spread the user profile and we're going to update the followers array so user profile. followers filter and just extract or remove the ID of the authenticated user so this is what we are doing that I showed you in the diagram and lastly let's update the local storage so that we have our applications state in sync with with each other so let's say local storage set item which was the user info and then this is going to take the Json stringify and then a new object so since we are keeping the authenticated user in the local storage we are just going to take take this exact same thing and then just paste it so in the local storage we're going to have the previous values of the authenticated user and just new updated following array and lastly the set is following will be false now let's handle the follow case it is going to be looking pretty similar but instead of removing or filtering we would be adding them so let's go set oops set o user we are going to just sprad all the fields and inside the following array we're going to add the new user ready and let's do the same thing for the um set user profile so set user profile and we are going to maybe I would just accept that okay we'll just sprad the user profile and in the followers array we're going to add the ID of the authenticated user and lastly let's just update the local storage so after here we just say local storage set item the user info take this object um close off close it like this and then let's go here and we would be just copying and pasting this thing because again in the local storage we are holding the authenticated user which is current user right which is us so let's go here and then now let's say set is following to be true because now we just handled that operation and finally we said set updating is going to be false we have that use effect that checks if it is following or not and yeah basically this is the entire function so let's just save and quickly reiterate what we did so we have state for updating and for the following and we are updating this following state by checking if the current user following array includes that user that we would like to follow or unfollow so if we already following that so which is here we are updating the state to be unfollow by removing it from the both arrays and we also did that in the background for the fire store database and then if it is unfollow I mean if it is follow then we are just adding those user IDs into the both States as well as the local storage to keep our application in in sync so now now when we use this function I think it'll be just clear so for this let's go into the user profile and let's just take this and then put it here okay I think this looks a little bit better so let's get the other hook which is going to be let's say it is going to return us const is following is updating as well as the function name I think it was handle follow user and then use follow user hook call it with the user ID and what is that going to be so in this case we are in the user profile page so this is the user that you would like to follow or unfollow so let's say user profile. uid and then maybe we could just put a question mark in case it is null so now when we clict to this follow button on click call that function and then it is going to have is loading to show that spinner and now instead of just follow this is going to be dynamic so if it is following which means that it is going to say now unfollow and if it is not following then it's going to say follow okay let's save and test it out we're going to go into the application so let's see okay this is our profile let's go to the profile of John okay so this user doesn't have any followers and now we would like to follow this user let's take a look at in the database so this is us and I think we removed this but maybe I added that in the background so I'll just delete that and let's go here in our profile okay we don't have any followers or any following and John also doesn't have so let's see joho okay there we go so followers following empty for this user and then for the John it is okay this is John it is also the same thing now if I try to follow this user okay it says cannot read properties of of of undefined reading U ID let's go here okay so the error is coming from here we are destructuring destructuring it from this use o store but it is not called user profile but it is instead called as user so we need to fix this and I think I'll just delete this line and just call it one by one so con o user give me the use o store give me the user and then the seter function so now that should be working fine let's go here and let's refresh okay now that should be working let's try to follow the chn I will click to this it is updating and there we go now it says one followers and the button is unfollow let's go here now John has one followers which is the ID of that user and this user is following this ID which is John so it is working fine even if we refresh this page it is still going to say unfollow because in the initial render we are checking that and setting that state so I hope it makes sense now we can use this hook in any component by only calling this line This hook and getting these function and then these two states and then just bind it to any button or anything like that and we're going to be adding this follow functionality to the homepage later to this component and then this one it is because we haven't created them for now and once we created the suggested user in the pulse component we will add that functionality but for now let's go into the sidebar and try to add this search user functionality first off we need to go and update the sidebar component because currently it is not really readable because because we have the sidebar items and we can't really put all this logic into this component but instead we're just going to create one component for each of these items so that each component has only one responsibility so I'll just delete this delete this icon and maybe search logo notification logo create post and the Avatar because we we are never going to use that in this component so instead of this sidebar items what we can do um so let's copy this thing okay we're going to go here let's say sidebar items. jsx and then get that boiler plate as always so here we are going to create one component for each of these so the home component search component notifications create and profile link so let's go here start with the home so sidebar home. jsx and the content is just going to be the same thing that we just copied so I'll just paste so it is going to be wrapped with a tool tip and then it is going to have a link so I think I can just copy and paste that home component okay so it doesn't have any logic at all you can grab that from the GitHub link it is going to be inside this home. jsx it has a tool tip that is going to be shown in the mobile uh Dimensions or mobile phones in the link we are going to take this user so that should be coming from Chakra and then let's import the router link from react router D and when we collected this link it is just going to take us to the homepage that we can see here get the icon get the box that says go to go to the home so if we just save this we're going to go here let's say an empty react fragment and then the first item we're going to have is going to be the home and let's import it okay so we're just going to be adding all those components one by one so we just added the home and let's add the search or we could just add that later and then we're going to go and add that notifications create and profile so let's go here notifications. jsx get the boiler plate and I think I'll just copy and paste it and don't get angry with me just copy and paste it it is because 30 lines of HTML CSS no logic at all and this even has a link okay so it just says notifications with the icon so we'll just save and let's get it so we're going to have a search here and below that we're going to have the notifications import that um okay okay we already have and after the notifications what we had to have the create as well as the profile so let's go here say create and it's going to be the create post. jsx actually and then the profile a link that takes us to the profile page so let's say get that rafc and maybe let's copy and paste all of these again same thing 30 lines of code no logic at all that only takes you to the O page okay so this is coming from use o store okay and for the Avatar Source it just checks if this user has a profile picture if not just have it as an blank uh profile picture so we're going to save and let's go here by the way you can take all these components from the GitHub so I just need to mention that again we're going to have the create post here so create post and below that we're going to have a profile link so now I will provide you this create post link I mean create post component as well and let me just copy and paste it okay so I copied that and now I'm just going to paste it and I will paste it again and comment this out at the very bottom of the page okay it starts from the line 36 you can grab that and I'll just put a comment copy and paste as the starter code for the create post component okay so you can get that from the GitHub uh repo if we just save let's go here get the create post and lastly we're just going to get the search component and I'll do the same thing so let's say search jsx and then I'll copy and paste it so I copied that and I'll just paste it and I will paste it again to here so that you can have it as the starter code let's say which component we did that okay I'll just type it down copy and paste as okay copy and paste as the started code for the search component and now we're going to add the search functionality into this component but before that let's save this let's save this import the search save this file and then just delete everything here put these sidebar items here okay do we have have any errors no we don't let's save and the output should be exactly the same as before but now we see the profile picture of ourselves which is coming from the oath user state so now let's add this functionality where when we click to this button we're going to see a model that fetches the user for us so first let's create the model or let's first create the hook and then we're going to integrate it with the model so let's go here inside the hooks that says use search user. jsx or JS and then boiler plat delete the return for now let's have a loading State initially it's going to be false and once we call the function it is going to be true so let's go here we're going to fetch a user so let's say user set user this is going to be the searched user initially it could be null and then for the errors get the toast so now we're going to have a function let as C get user profile or let's say search user but since that will just return us the user profile we could just say get user profile sorry for for any confusion so async function this is going to take the username so Arrow function the argument will be the username and it's going to search it by the username of the user so for this what we can use as we did before we're going to be using a query so let's say try catch and finally set is loading to be false and then in the catch let say show toast to be uh um like this where we'll just put the error title description and then the status and let's say set user to be null because this is an error State and then in the try we'll just say con query and which was calling this query function we're taking a collection fire store the inside users collection where let's import the fire store so where the username field is equal to this username that we are getting as an argument so equals to the this username so let's import that I think this is too much so let's um okay it should be like this we're going to import the we clause and then now we can call this with the get doc function which is going to return as a query snapshot so call it this is going to be the result if query snapshot is empty which means that user not found so if this is the case let's just return out of this function by showing a toast that says user not found oops so let's get this and then what are we going to do but if this is not the case we are just going to set the user with the user document so even though this is a for for each there is only going to be one user and it'll be set to this state finally we are going to go and say return these three values from this hook and delete this react import save it and we can go into the search so here when we collected this search box or so this entire thing we would like to see a model so first let's build the UI and then we're going to integrate that hook with it so as we know so far the first thing that we need for a model is this three values on open function is open State and on close function so let's import this from Chakra and then when we collect this entire flag we are just going to call the unopen function that is going to open the model for us and after this tool tip we can just put the model and at this point I don't know if I should copy and paste it but let's try to write it at least a little bit so we're going to get the model where it is going to have the is open so maybe I'll just say is open and then it's going to have the on close and there is one more thing that we can add which is optional SL motion preset and if you just say slide and left this will make the model to come from the left side and we're going to see that and a model is going to have a model model overlay okay inside the model paste it let's import the model overlay from Chakra and then it is going to have a model content so I'll just say model content import that and let's give a little bit styling so background of black and border of one pixel solid gray and Max width of 400 pixels and then it just going to have a model header as as well as a close button so model header is just going to say search user and then the close button will be that button to close the model and then inside we're just going to have a model body which can have let's import that padding bottom of six and then we're going to have one form that has the input field so form not going to have any actions inside we are going to have one form control okay I will maybe let's just type it down so let's go here form control and then it's is going to have the form label let's say it's going to be the username and then after this label so let's just so it's going to have one input we should import that and it is going to have the placeholder let's just say something like as a programmer and then to get the state from it we could use a reference okay you could use a use State as well but I'll just go with the reference which are we are going to create and then at the very bottom it is going to have a flex let's go here after the form control that says the button that says search Okay import the button and let's go here for the input import it and onsubmit we're just going to call that handle search user so con onsubmit handle search user now let's just create all of these okay but first um okay let's do so con handle search user we're going to have which are taking the event because it is a form submission so we just say event. prevent default and then we're just going to call that function from our hook so let's get that con it is going to give us the user is loading as well as the get user profile function if we just call it like this then we'll just say let's get the reference as well const search reference from react user ref and we're just going to call this get user profile so let's say get user profile with the input value which is that reference we have here so if we just save and then let's say console log the user so I hope it wasn't any confusing we just created a model and have a for that has an input and then a button when we submit the form it is going to call this function which internally call this other function that we have created in our hook which returns us the user is loading in user profile function these are the states and this is the function and for the button we have is loading to be that is loading state so that we see that spinner so yeah we are keeping track of this input value by using a reference instead of US state I just wanted to show you how you can use that instead of a use state so you can grab that value from search draft. current. Val and once we call this function we would like to see the user let's save and let's go here if I click to this model will show up from the left because we added that motion preset and I'll just open up the console now user is null let's search for someone like Jane though which we have in our database so if I click that it is going to have that loading state okay it doesn't for some reason we'll just take a look and this is the profile of Jane that we are getting so which means that this function works if we search a user that does not exist so it is going to give us an error that says user not found so let's go here why this doesn't have that loading State um so is loading we put that into the button okay so maybe it is in the hook let's go here okay okay before we try we'll just say set is loading to be true and finally it's going to be false now let's search it again now it has that spinner for one second and if the if it was correct it's still going to has that loading so now that we got the user we would like to render it here and we can use a component where we had like this so this is the suggested user component we see the profile picture full name number of followers and then the follow button to follow that user so we're going to be using that exact same component so after so inside the search after this form I believe we're just going to say that if there is user if this is found then we'll just say render the suggested user component which are taking a user and let's close that off import the suggested user so it doesn't gives us so let's go and import it manually so suggested user it is not from here we should go one up from the suggested users and then just get the suggested user component so let's go here so it doesn't take the user it takes this because that was in the design part so let's get the user um if we do it like this we're going to get a couple of Errors so let's say user for the source user profile pick URL we could just delete the name and for the followers we'll just say user. followers. length and for the name user. full name we are fetching these data from this object so we have all these which is coming from the database so let's say full name uh number of followers username all this thing that you can see here so we're going to go here and let's take a look and for this state we would be also taking that from the hook but for now let's just save and let's see what are we going to see I think we are going to have an error that is coming from the homepage so if we go into the homepage for now I will just remove the suggested users so that we don't have any errors okay so we don't see that because we remove that but let's go search Jan do and let's search it okay this is the profile of chain if we search for someone like jando which is us uh okay it is not us right okay this is our profile I forgot sorry if we just search for jandoo it has one followers and we are following that user now let's handle this follow functionality it is going to be pretty simple because we already have that logic in place so inside the suggested user component we are going to delete this but instead let's delete the use State as well we are going to call that hook so const it is going to return us is following State um is updating State and then the handle follow user function so use follow user and then pass the user ID into that it will was accepting a user ID that we would like to follow or unfollow and it's going to be this suggested users ID and then we can have the con oath user we're going to be using that so I'll say use oath store give me the user from this state so let's give a bit space and when we call when we click to this follow button all we want to do is just call this handle follow user function so Hand handle follow user and it is going to handle the following and unfollowing for us and let's say is following then show the unfollow text in that button in the else case show the follow and the reason that we are getting this o user is because if we search for our own profile so let's say this user we don't really want to see that follow button for this user it is because we cannot follow ourselves so we're going to go here and cut this button for a second and we'll just say that if the oath users uid is equal to this user ID which means that I mean if it is not equal to this then we would like to show that button so if it is if this returns false then this is not going to run it is because we would be checking our own profile so if I save now we are not going to see that follow button because this is our own own profile so let's go here lastly for the button we just say is loading to be this is updating State and let's save and let's test it out so I'll just go and follow the Jan so let's search for him there we go so if I clicked that now this user has one follower even though it didn't update we're going to handle that let's go the profile of Jane Jane has one follower which is this user and now this user following these two users which is Jane and John so the reason that number didn't increment when we follow that user is because we didn't update this state so we are going to go here uh it is going to be this user state which is the searched user right this is where we set that document and from this hook let's just export the set user um Setter function we are going to use this let's go here um we are going to get this let's say set user function and then we are going to send it to the suggested users I mean suggested user component let's say set user is going to be this Setter function save this file and then we're going to go into the suggested user which is going to be coming as a prop so when we clict to this follow button instead of immediately calling this handle follow user function what we can do is just to create another function so let's say on follow user so I'm going to copy this and just come here let's say const this is going to be an async function so now when we call this function internally we would like to call this function that is coming from the hook so that it handles the follow for us in the background so we are just going to say await handle follow user and now we would like to update this St state where either we are going to increment the number of followers by one or just decremented so we can just come here and let's say set user and the new state is just going to be spreading the user and then the is following I mean the followers array is going to be changing so let's just go here and format this maybe okay we are going to spread the user and then we'll just say followers array so either we're going to filter this or we're going to add the authenticated users ID so we'll just say followers if it is already following which means that now we're going to filter the O users ID it is because uh we are unfollowing so user followers. filter and we're just going to remove the O users ID and if it is the else case then this user got a new sub I mean new follower which is going to be the oath user and if we just save this save it like this and maybe we should just put the ID let's say U ID and let's test it out so we're going to go here and maybe I'll just refresh to have a clean state so now we are following Jano so let's say Jan though and we're going to search so if we just unfollow that that number should decrement it is because is following is now true so which means that this filter function will run and remove this o users ID and the followers length will be minus one which we are showing it here so let's go and unfollow and okay it did not work so let's see why that is um so we send the set user right let's take a look okay this is the set user which is coming from user user and this is the setter State or the function and let's go here and maybe let just say o user that shouldn't really make any difference but let's test it out so I'll just refresh so let's see we are going to go here let's say Jan do and then if we just search Okay zero followers let's follow and now okay it has been updated we have one followers and if we unfollow that that should decrement and this is zero followers so this search user functionality is also working fine in future just try to take a look at that in the so let's close that in the mobile Dimensions it should also work fine let's open that up there we go this is the search user and let's just search for ourselves and we don't see that follow button and the next thing that we can build um could be that suggested user component so let's build that first let's just create a custom hook that fetches the suggested users so let's create this use get suggested users. JS oops we have one problem okay not KS but that should be JS okay so let just say rce delete the return and let's have a loading State as always so this could be true initially because this function or this hook will immediately run whenever we call it and then let's get the suggested users so let's say suggested users State and initially it could be an empty array and then we're going to fill that and let's get the oath user you're going to see why so use oath store and then get the user lastly get the show toast function so we would like to call a use effect to fetch that users so let's say use effect so inside we're going to have a function that says get suggested users an Asing function and we're going to be using collect I mean query for this so let's say try catch in the catch show the toast with the error message and then in the try we're going to do the query so first let's get the reference so users ref this is how we use uh queries so collection fire store and then the users so inside the users collection we are going to create our query so let's say query and this is going to be a kind of long one so I will open up parenthesis and then just go below so I'll just say users rep and it is going to take a work class where the U ID so we can use something called not in which is from documentation that I showed you previously and the third argument should be an array so uid shouldn't be inside here so it is the oath user. uid it is because we don't want to suggest ourselves in the suggested user component and also we want we don't want to suggest the users that we already follow so we are just going to say oath user do following and this is an array so it is going to be a n array for that reason we are just going to put this three dots to to get the following items one by one so that it is not necessary and then we'll just say order by order by with u ID and then lastly we want only three uh pre users to uh suggest so it's going to be limited by number of three and then this is going to give us a query Snapchat so let say cost query Snapchat aate get docs past a query in it and we're going to have a users we say const users array and then we'll just map through or for each to push the user to this array and we want to have the ID so I'll just cut this so users start push and object three dots document data so this is going to spread that and we'll just say the ID should be document. ID so this is a really really common usage with Firebase when you get a query snapshot you for each that and for each document if you are pushing into an array then you create an object with spreading the document. data and then creating an ID getting that ID from this document so that in react when you use map method so you don't get any key errors so lastly we'll just say set suggested users should be this users array and finally let's say is loading should be false and here let's just say set is loading to be true and then we are going to call this suggested user functions only if the oath user exists okay if user is authenticated then just call this function and the thing that we need to add here is going to be the oath user as well as the show toost function and at the end let's just give a little bit space we're going to return the is loading as well as the suggested users component so this is the entire function let's quickly reiterate what we did let's Del this react okay so we have a loading State suggested user State and this is initially true and this is an M array so we got the oath user show toast and we are calling this use effect which has a function and this function is only being executed it if the user is authenticated and inside this function we are getting the suggested users which uses a query and we are making a query to the users's collection where the uid is not in this array so we don't want to suggest ourselves so the O user uid and then we don't want to suggest users that we already follow and we put three dots to get the elements one by one instead of having a necess array so order by uid and only give us three users and execute this query with this get doc function which will give us a snapshot and for each that snapshot get the document as well as an ID set suggested users to this user array so this users array I hope it makes sense now we're going to be calling this uh custom Hook by getting this is loading and suggested users function I mean state so let's go into the suggested users component so it is going to be this one and here we are just going to call that function or the hook so let's say use or before that let's say const we are going to get the is loading State as well as the suggested users array and then we're going to say call this hook we're getting it from here and let's say if it is loading you could return something like uh a skeleton or spinner in in my case I'll just null but you can add that so I'll just put a comment optional so optional render skeleton okay so we have this suggested user component one by one which is only for design part that we created so I'll just uh Delete all of these and instead I'll just say suggested users. map for each user call this or return this suggested user component where it was taking the user and as well as just set a key so we'll just say user. ID okay so we have a warning let's just delete this one and map close that off so okay if we just save we can't see that because in the homepage we don't show the suggested users component let's comment this OD and then we're going to go and let's take a look I'll just refresh okay we only see the Jano here because this is the only user that we don't follow and let's go and for the jle you would like to unfollow that user as well okay so oh we have one error what that says so we are getting this error it is because it is related to this use follow hook so let's go here use follow user and the reason is we have created this fun function in a way that it always update the set user profile and we are only having this state if we are in a profile page so now we have this set user profile to be this user but when we are in the homepage there is no user profile that we are visiting and when we do a follow or unfollow from this homepage this is still trying to set this state and in this case we don't have anything inside the state so this followers thing just gives gives us an error so we are calling the set user profile here as well as here now we need to just um s say put a if check before that so we'll just say if the there is a user profile then just call this set user profile and update it but if there isn't only update the oath user and this is completely fine let's say if there is user profile and then just then call it okay we we could save and let's test it out again I'll just refresh to have a clean State and we're going to go let's say John do from here that hopefully shouldn't give us any errors I'll just say unfollow okay now we don't have let's refresh again so in the suggested users we have jando as well as Jano because these are the users that we don't follow if we go here and follow one of them so the suggested users component has been updated and we only see the J now because John is been followed by us let's follow this user as well and this has been updated again we don't see that and if there is not any suggested users we should remove this header as well so let's go into the suggested user component or the suggested users I'll just say suggested users so here we only want to see this header if there is a length in this state so I am going to actually cut this for a second and I'll just say suggested users. length if it is not equal to zero and only then render this portion so if we save that should be working fine okay we don't even see that suggested for you thing or the title let's unfollow one of those users I'll just say call the jendle and unfollow that and let's take a look now this is the suggested user that we can see in this component so with that we have created the suggested users component so far we don't really have any uh so we don't have too much accounts so that it just doesn't look any nice but if you add other accounts so if you create and add profile pictures maybe some followers this section would look really great So currently it just fun functions really well it's because so let's go here we only have three users so imagine you had like 10 20 30 users here then on every every refresh maybe these users would be different so you would follow them unfollow them and that would be changing in like continuously so let's add one more optimization to this search functionality it is because whenever we search for a user let's just say joh do if we search that while it search this state should be null so let's go here and before we try to call this query we'll just say set user to be null and this will just reset the state and I think we could save and here we have the set user okay so we're going to go and test it out if I just search that again so it is null and then we are getting that user and this is this slight optimization that we just made now let's continue with the create post functionality so when we click to this uh create post button we would like to have a model to put our caption as well as to select the image we're going to go into the create post component and at this point I will just provide you a model so this is the first thing that you would copy and paste to create this component and then the second thing is I'll just say two and and again copy and paste for the model and I will just paste it to here and comment this out so that so that you guys can copy and paste it from this file in the GitHub repo and below this tool tip we're just going to paste it and the reason that I'm just pasting it is because we see that models multiple times and I don't want to waste any time to writing this components so let's import all of these overlay content header close button body text area input so this is going to be an icon coming from react icons get the footer as well as the button let's get the is open and un close before that let's get the icon and then const get these from this hook so when we collected this FL let's say onclick call the onop function let's save and let's take a look I will click to this and let's see there we go this is the model that we see so it has this Tex area the icon and then the post um button so this is exactly the output that you can see maybe just uh 20 many lines of code so now let's just store this caption in a in a state so for this I will create one state say const caption and set caption I'll just say use state of an empty string and then we're going to go here value is going to be the caption on change we're going to set the caption to the E target. value and for the input so this is hidden okay if we just delete that we would see this choose file button so let's see where that is okay it is here now we're going to hide that and when we clict to this we would like to open that window to select images we're going to go we're going to goad head and say hidden and let's create a ref con file ref or let's just say image ref call the user it could be null and when we click to this so we say on click image R current. click and we just say ref this is the image ref and that should be working fine and what are we going to do next now we also want to render the selected image for this we are going to go ahead and call our hook which was the use preview image I believe let's say let's see so use preview image okay we are going to call this it doesn't gives us so let's import manually it is coming from here is this correct yes use preview image let's say const three values the handle liit change function select file as well as the set selected file we are going to go below the um this icon and it is going to be here so below this we would like to so we would like to render the image here so let's go and say if there is a selected file then render this right hand side so we are going to have a one Flags let's get it and this is going to have a couple of props margin top of five with full position relative so position and then justify content to be Center and then inside it is going to have the selected image so I'll just say image as the source to be so let's import that first from the chakra Source will be selected file and for the alt let's just say selected image and below the image we would like to have a close button which will just say position absolute and just put it at the top so top two right to onclick um remove the selected image let's import this so I just copyed and paste it maybe you could just uh do the same or type it down from scratch and let's save but we have one okay we have one warning that says you're not using this function and we're going to add that into here so on change whenever a user changes or selects an image we're just going to call this function let's save and let's see okay we're going to go here and click to that icon we got all of these images and let's just select the chain and it has been rendered here if we click to this it is going to make the selected state to be null where we just see that here or MP string or null it is just the exact same thing so let's try to do again we're going to go here select an image it has been rendered we can close that or delete that now that we have added the design for this create post model the only thing left is to add the functionality let's go into the profile page and let's just think about it so when when we create a post in this page we would like to see that latest post in this so like as being here and then we would like to uh increment this number of posts so for this we can use a global state to store the posts we are going to go ahead and create another store object so let's say post store.js and get the create function from zent and then we are going to have let's say const use post store that was taking the create function call it and the Callback was taking the set function as the first argument and then we are going to return an object so parentheses Cur braces and then we're going to have our post store which is going to be an empty uh array initially and then we're going to have the create post function that will take the newly created post and add it into the array so I'll say say create post which is taking the post calling the setter function which takes the previous state and then returns an object updates the posts by getting the first post at the top so that we can see that post being here the latest one and then just sprad the other posts so state. posts and we're going to add a couple of more functions such as the delete post it is going to filter that we are going to add let's say add comment so that it'll update the UI and then we're going to have set posts okay let's say set posts and it is going to be so that we can update this state as well but we are going to be adding those later so for now let's export default this use post store and we're going to be using this and then also in the user profile store we said that we're going to have a add post function and we're going to use this so that we can increment this number of posts when we create the post so for this we are going to add that function it is going to look a little bit complicated but bear with me so we're going to get the post and this is going to call the setter function um maybe I should accept this so okay I'll just call the set function and it is going to take the state as the previous value or the first value so this is going to be the state which is going to be this user profile and then we are going to return an object so let's go here the user profile state is going to be just uh spreading all the previous state and then for the posts we'll just add the newly created posts ID so posts get the post. ID and then just have the previous posts so dot dot dot state DOT user profile. posts so this looks really really complicated but basically let me just put a comment here um okay not like that okay this is used to update the number of posts in the profile page so when you create the post now we have zero posts it'll be one post and then it will be incremented as you create posts so how how achieve this so it takes the newly created post call the setter function by taking the previous state and in the posts array it only adds one more ID so that when you say posts. length this will be incremented by one so I hope it makes sense we can save this file and maybe close this we're going to go into the create post we can create a hook to create the post or we can put our custom hook at the very bottom of our file and in this case this will be this is going to be what I will be doing and let's go here let's say function use create post so this is going to be our hook so let's say const show toast the boiler plate as always it's going to have a loading State initially it'll be false and we're going to set that so let's get the oath user use oath store give me the user we're going to get the create post function so let's say use post store give me let's say just call it like this and we could just take const create post function so I think we have created it yes it is this one and below this we're going to get the add post function so maybe we should say State state. create post and remove this Cur Braes it is the exact same thing so we're going to say const add const add post from the use post store I mean use user profile store because this is where we added it and we'll just say add post call that function and lastly we're going to get the path name and you'll see why for now just get the path name from use look so now we would like to create the function to create the post let's say con handle create post which is going to be an async function it'll take the selected file or the image and then it's going to take the caption of the post as arguments so we're going to go here and let's first say if there is not selected file uh we'll just return or let's throw an error so let's say Throw new error please select an image so since this is an Instagram colone you can't really post without having an image and then let's say set is loading to be true and then we're going to have to create the new post so let's say new post which is going to be an object so it the caption will be the caption that we are getting as an argument zero likes so likes and empty array uh comments zero comments and then we're going to have the created at as well as the created by so created at let's just say date. now and then lastly create by which will be oath user. uid now this should also have the image URL which will'll add in a second so let's get the TR catch in the catch show toast um let's say error error. message and then the status of error finally we'll just say set is loading to be false and in the try we're going to do a couple of things so first we need to create the post document and then add the post image to our storage so let's say const post document R await add document Quality Function from Firebase pass the collection from fir store the posts collection and we don't have any posts if there is not post collection it is going to create it and add the document so the uh second argument here will be the new post and then this is our reference so let's say const user document ref and then we also add the post ID into the user document so we'll just say document so let let's import that fire store users collection and then ID which is going to be oath user. uid and then let's get the image ref so let's say const image ref from let's say rev storage and then get this rev function and the path let's say um maybe back Tex and then we'll just say posts slash and then dollar sign cra says post document rev. ID we could just say and that should be nice if you I mean that should work fine if you wanted to you can change this path as you wanted to but I'll just put all the posts under this post folder and then whatever the IDE of the post and then we'll just say await update the document we're going to pass the user document reference and we're going to update the posts array so object oops so post posts and we'll just say array Union add the ID of the post so that should be fine and then we'll just say AIT upload string so we did this previously as well the image R the selected file and in the type of being data URL so this is going to upload the image now let's get the down URL so just say con download URL which will be let's say await get download URL and pass the image reference now this post don't have any image URL we would like to update that both in the database and in the front end so I'll just say await update document and then it is going to be the post document R and image URL will just be this download URL we could accept it like this and that should be working fine and let's say new post this is the object that we would like to update we are going to add the image URL field being this download URL and now we want to update our user interface so we'll just say create post oops not the create function but the create post and then we're just going to pass the pass an object so new post and we would like to add an ID so that we don't have any errors when we render the posts so post document r. ID and lastly let's just show a toast that says post created successfully let's export these uh variables so not con but return is loading State and handle create post function so we are not using these so this one and this one let's add them as well um after we create the post so this is going to add the image to this user interface now you would like to update this number of posts we're going to go ahead and call this add post function so it is going to be something like this add post and then we'll just put the new post so spread that and ID is going to be post document r. ID so let's give a bit space maybe something like this so we have this references and updating this document now we could save this file and let's go above where we'll just call this function use create post hook and then this is going to give us two different states so is loading in the function handle create post so when we clict to this post uh button let's say on click call the handle post creation so there going to be another function that will create creation okay this is going to have the is loading state to be that is loading now the reason that we're creating this function is going to be so you're going to see so let's say cost we're just going to put it async where it is going to have a TR catch and in the catch we are just going to show a toast so let's import that okay and in the try we are going to call that call this function by passing the selected file as well as the caption so let's say selected file I mean just call the function handle create post pass the selected file and then the caption so once this has been uh the post has been created we would like to close the model say on close and then we would like to set the caption to be empty and then set selected file to be null if we save I think that should be working fine we're going to go ahead and create a post so I'll select an image let say this is Jane and if we post that this is going to have a loading State and let's see okay post has been created successfully the number of post has been incremented we cannot see the post here because we didn't fetch the posts which will do but let's take a look at in the our database so here this is the account now this has one post right the ID of the post let's refresh so now we have the posts collection if you click to that we have one post which is created by this user and that post has this image URL as well as this caption let's take a look in the storage it should have one folder called posts and inside it it has that Jane image right this is the post that we just created so let's quickly reiterate what we did so when we click to that post button this function runs which internally calls this function and it takes the selected image as well as the caption and here that function checks if there is no selected file no selected image then throws an error that says please select an image and then if there is then we create the post and then in the fire store we are adding that posts into the post collection update the users document and then we are creating an image ra to create the image itself and adding that post into the post array as well as updating the document with the image URL and then we are adding that post so that this number increments that we can see in the post header and lastly we have this create post that adds that adds the post into the post state so for now we cannot see this uh working because we are not fetching any posts but once we do that this will be working and then we just show a tost that says post created successfully so now let's try to create an error so I'll just create this and without any image if I post this it is going to say please select an image but if we just put some uh caption it is still going to say select an image because image is mandatory one more optimization that we can make is to when we are creating this post we will just say if it is loading and user still tries to click to that post button we'll just say return out of this function so that it doesn't overload our servers so we are going to save this and now it is time to go ahead and fetch this user posts and we didn't use this path name so far and once we get there we're going to use that and I'll explain so let's create one more hook that says use maybe get user hosts. JS so we'll say rfca and then we are going to delete the return statement that's going to have con is loading State initially it'll just be maybe let's say true because it is going to run immediately within a use effect so we're going to take the posts so say const so posts as well as the set posts function it is coming from the use post store okay this set post function is something that we haven't created so let's go ahead and add that so let's say set posts it is going to take the new post and update our state with it we're going to save and then we are getting the set posts and then show tost we're going to get the user profile because we're going to be updating it so let's say user profile from the use user profile store and pass this so that it gives us user profile and then we're going to have one use effect so we're going to go inside let's create a function const get posts async Arrow function that just first check if there is not user profile then we cannot fetch this posts because user not found so that should be user profile and then we are going to say set is loading to be true and set posts to be false I mean an empty array initially and then try catch we are going to in the finally let's say is loading to be false in the catch we'll just say show toast with the error message and the then maybe we'll just say set posts to be an empty array and then in the try we are going to just do a query so we'll just say const query call the query function call The Collection call the fire store inside the posts so we're going to get the posts where so where the created by so let's say created by is equal to the user profile uid so it is going to get the post of this user and then we need to call this so await get docs not doc but docs it should be plural and then pass the query it is going to give us a query Snapchat Snapchat okay and then we're just going to create an array in for each so const posts query snapchat. for each for each. document or for each post we are going to push it into that posts aray so posts. push and object with the document data as well as the ID so again this ID is when we use something like posts. map and we were taking that post and just returning some jsx if you remember so something like let's say div and this is the post. title and re wants us to have a key here so we'll just say key it's going to be post. ID so that's why we're adding this ID so that we don't get this key error so yeah this is the reason that's why we're adding the ID let's delete this two lines and then so now we would like to set the posts but before that let's uh sort this so that the latest post is going to be in the very top so I'll just say posts do sort with the created ad so we're going to get the A and B and this is how we do it in JavaScript so the second one is coming from the first one which will just make it in the so to say like the latest post is going to be here and then it'll be going in descending order lastly let's just say set posts to be this posts and here we have let's say set posts user profile as well as as the show toast and oops and then here I don't know why we are getting this error okay so we just say return and is loading as well as the post state so we have some warnings Let's see we are never calling this function let's say get posts and then maybe give a little bit spacing okay we can save let's go ahead delete this delete the get dock now let's go ahead and use this post that we are fetching so we're going to go into the profile posts component and then let's delete this we're going to delete this is loading use effect use State and for the is loading instead of showing six let's just show three skeletons and instead of these we're going to delete that let's call the hook so use um uh what was the name use get user posts okay we are going to call that let's say const is going to give us the is loading as well as the posts so now let's check if there is no posts found so const no posts found if it is not loading and the post. length is equal to zero then we will just say if no post posts found then just return a component that says no posts found okay it should be something like this where I will just copy and paste it five lines of HTML CSS at the bottom of our file with flex and text okay it says no post found with this Emoji we're going to save let's go ahead and here if it is not if it is loading we're going to show this skeletons which is the post skeleton and then if it is not loading we're just going to map the posts and show a component so let's say post. map get each post and we're going to return a jsx so here let's say okay this is so annoying we're going to show a profile post which is going to take the post as well as the key so now we are using that ID where we added when we were using for each so I think this is going to be our component we can go into the profile post and we're going to take the post and we're just going to render these things so image is going to be the post. image URL and let's see this is also going to be the same let's say post. image oops image URL okay if we save hopefully it should be working now we're going to go ahead and this is not working let's see what is the reason maybe we should console log the post console. log post okay let's see open up the console um refresh oh okay it is imagei not IMG so it is kind of long version let's say select these two and say image URL let's save and there we go this is the image that we have if we click to that we still get that image in our model so let's close that off let's visit a profile that don't have any posts so we'll just go to jle so zero post and it says no posts found if you go to our own profile one post and we see that now let's fix this number of likes and posts we're going to go into here and this is where we'll be updating it so this is the number of likes it says heart so just say post. likes. length and same thing for the comments let's save now this post has zero likes and zero comments and what we can improve else would be the user profile name so let's get that this is the beauty of using zotin with global state so user profile you can use this state in any component by only calling this function use user profile store and give me the user profile where I'll just go down here I'll just say user profile. full name or let's just say the username and this is inside the model if I save let's go here this is the user username of this user that posted and we'll just change the profile picture um it is going to be here let's delete that user profile do profile pick URL if we save we're going to get that as well which is the profile of this user and let's see if we have anything else so for now let's just delete every comment that we have here we're going to add that once we get there so for now maybe we could just hold two comments and this looks good to me now we are going to go into the model this Flex where I just want to add a couple of different styles so maybe only two one we'll just say maximum height and maximum width would be changing so maximum height 90 VH and minimum height 50 VH so that it even looks in smaller pictures as well and lastly let's take a look we are going to add a couple of different styles so that the image is centered in our model so let's make this a flex which is inside the model that holds the image we are going to add two more things justify content to be Center as well as the Align items to be Center so that the image is being centered if we just save let's take a look now image is in the center and in the previous case was it not so let's take a look okay so do you see it is not in the center if we just added that two lines so justify content align items Center and now it has been centered also we would like to show this delete button only if we are the owner of this post we are going to go ahead and where is that delete button so let's see it should be before the divider okay it is going to be this where we could just say this should be a button and let's add a couple of different styles import the button and let say size should be small and BG transparent and then hover effect what do we say Okay white Alpha red and then border radius ping and on click to this we are going to delete the post but more on that later for now let's delete the button and we'll just say if the oath user. uid is equal to the user profile. uid if this is the case which means that this is the owner of the post we can show that delete button let's get the oath user so delete this get const oath user from use o store oops which is going to give us the user and we need to add one optional chaining to that so where is it um here in case user is not authenticated so let's save and let's take a look okay we can see this here but if another user was posted this we shouldn't be see that delete icon now let's go ahead and add this delete functionality for this we are going to first go into the store which is the post store and we're going to create this delete post function so that it can update our UI so let's say delete post which is going to be taking the idea of the post and it calls the setter function so I'll just give a bit spacing like this maybe it should be something like this we're going to get the state and we are going to return an object it is going to take the posts but it is going to filter the post that we are just deleting okay it is going to check where the post ID is not equal to this ID okay it's let's say maybe we don't even need to add a comment because the name is delete post we can save and let's go into the profile post when we click to this onclick let's say handle delete post and this is going to be the function that we'll just create at the very bot uh at the very top of our file so const handle delete post Asing function it's going to have TR catch let's get the show toast let's first add a confirmation to this user we just say if pulse window. confirm are you sure you want to delete this post if they say cancel then we'll just return out of this function but if I if they say okay delete that then we are just going to delete it so let's have a loading state so const is deleting set is deleting initially it's going to be false and you could create a custom hook for this as well but let's just keep it simple and we'll just say const so first we're going to delete the image from the storage and then we're going to delete the post from the post collection and then from the users collection okay so in the users collection let's go here so inside users collection we had this posts array we're going to remove that ID from here so let's go here const image R maybe we could just copy and paste it at this point we're going to get the reference we're going to get the storage from the posts and posted ID so this is the post that you like the delete so await delete object just pass the image R and then const user R so document file store inside users collection let's just paste this is the user reference that we like to update we're just going to say first AIT delete document and we're going to delete the post document so let's say document fire store and then the posts delete this post and then we're going to update the user reference so await update document pass user ref yeah user ref and then array. remove from the post array so we should import these functions and then in the catch show toast finally set is loading to be false I mean set is deleting to be false and basically that's it we also need to upate the user interface so let's call the delete post function so let's get that from our store const delete post use post store and we're going to get this delete post function and then this was taking the ID of the post so I'll just say post. ID and maybe lastly we could just show a toast that says post deleted post deleted successfully let's save and let's test it out we are going to show a spinner to this button where is it um delete button let's say is loading to be this is deleting and one more optimization you're just going to say if we are deleting at that point just return if user clicks to that button again let's save remove this box and test it out we're going to go ahead refresh so we'll select the post and let's delete that it says are you sure you want to delete this post if if we say cancel it is not and if we say okay and there we go post deleted successfully and this number of post hasn't been decremented we forgot to do that but at least the post not found we updated this portion so now let's take a look at the database let's go into the storage so we don't even have any posts okay that folder has been deleted because we only have had one post if you go into the storage I mean fire store we have no posts and this user had that post but now posts is zero so we're going to go ahead and update here as well we forgot to do that so it was related to this store where we just call it user profile store and we would like to decrement the number of posts for this maybe we could add a delete post function let say delete post and I'll is how to accept this so it gets the post ID and it is it is going to call the set function with the previous state it is going to return an object with the user profile being as exactly was before but it's only going to update the posts array and it is going to remove or the filter the post that we just deleted so I hope it makes sense basically it just delete the post from this state now let's refresh and I'll just create create one post and then delete it again so let's select the picture of bath I'll just say this is bath and let's go ahead and post this post created successfully let's create another post we just say this is John and select the picture of the John and post it okay post has been created and it says this user has has two posts let's delete the bth okay and there we go this didn't work so why it is not working let's see it is because we didn't call this function sorry it's my bad I forgot to do that so we're going to go ahead and let's say const delete post but we have the same name so let's say delete post from profile and we'll just say use user profile store get the delete post function now we're just going to call this and delete post from profile pass the post ID if we save we might want to refresh this page and if we just delete this now it should hopefully decrement this by one let's go ahead delete the John and there we go it has been updated so yeah success so this is how we create posts and delete posts now let's go ahead and try to comment to a post for that let's just create a post so that we can see what we're going to be doing let's say um this is Bob and post it okay let's wait post created successfully and there we go this is the post now let's delete the comments so that we uh have a clean State and also I want to change uh something here which is going to be this delete post from uh profile F I think the name is really bad so when you read the code it feels like as if we are deleting the post from here but instead we are just decrementing it from uh the profile header so I'll go here and I'll just rename this as I'll say controll d uh decrement posts count okay if we just save okay now this is more readable and this deletes the post from the profile file so when you deleted it delete the post it'll be removed from here this is what this function does and also when you delete the post this number will be decremented and this is the function that does that so when you read the code now it makes sense so it is not going to be uh confusing when you come back to this code maybe one or two months later okay with that in mind let's go ahead make this a bit bigger and create another hook that will post the comment so let's say use post comment. JS oops it doesn't gives us for some reason okay delete the return and let's just get the boiler plate as always we're going to have a loading state but I'll just call it as is commenting instead of is loading so is commenting just preference and initially it is going to be false let's import the use State and then we are going to show toast in case there is any errors so use show toast and then we are going to get the oath user so use oath store and then just give me the user and let's go ahead and create the function const handle post comment this is going to be the Asing function that takes the post ID that we're going to be commenting to and then the comment text itself so so let's say try catch finally and before we even try we'll say set is commenting to be true and in the finally set is commenting to be false now in the try and maybe before that let's say if is commenting so this is something that we always do so I will not even explain this and then we're just going to say if not o user so user is not authenticated and for some reason user still tries to comment this we just say um let's open the title we could just say you must be logged into to comment so and just put the um status which is the error and then we say set is commenting is going to be true and then let's create the comment so con it's going to be an object and as I showed you in the diagram so let's go here here um okay this is what we had so the comment document is going to have the comment field created by post ID and then the created that so this is going to be the things that we'll be adding so it is going to be have the comment which is coming as a prop or I mean an argument so comment we're going to have the created ad created ads we are using date. now for this and then we're going to go ahead say created by which is going to be the O user. uid and then we're going to have the post ID again it comes as an argument so if the left and right hand side is equal we could just only have it like this so it looks a bit more elegant and then in the try I mean after this maybe we could just take this put it right here and then in the try we'll just say a wait so we'll be updating the document so update document which document is just going to be let's get the function from the fire store and then the posts and then the post ID so this is the post that You' like to update and the field that we're going to update is just going to be the comments array so we'll say array Union to add the new comment so this just just like you can read it as an English sentence and then after this now this has been updated in our database and we would like to update our user interface so let's say I go here and then I just write something okay if I post that the comment will be added into the database but now we would like to also see that here so for this we are going to create a function in our store so it is going to be called as ADD comment so let's say const add comment and we're going to create this so let's say use uh post store and then give us the add comment function delete this react import and then here we would be calling it let's say add comment with the post ID as well as the new comment and in the catch we'll just say show toast the error with the message and lastly in this function we are going to return is commenting as well as the handle post comment function so now let's go ahead and create this function save this file um it is going to be inside the post store that we have here um to be honest this is going to look a little bit complicated but if you if your JavaScript background is strong that shouldn't be a problem at all so add comment um so this is going to take the post ID as we uh write so we just say comment it is going to take the post ID and then the comment so it is going to call the setter function so let's open that up Setter function and this is going to take the previous state and then just return an object where it is going to be only updating the posts array so we'll just say posts so this is going to be colon so basically I'll just accept this and then let me just explain that um so we have some errors here let's see we are missing some parentheses let's get that and then up here okay okay that should be looking like this so basically we are sending the post ID and then the comment so we are setting our state which is the posts and we are mapping all posts and once we find the post that we are commenting we are updating the comments array with that new comment and that should be at the very end instead of putting to the uh in the top so here I'll just add it at the very bottom and then if this is not that post we're just going to return the other post as they were so and the reason that we're adding the this comment to the very end it is because let's say we're going to go up here and if you um put a comment here and once we post it we would like to see that new comment at the bottom of the latest one so we don't want to take this comment and put it up here so that's why we are just having it having it at the very end of the array so again I hope this makes sense this was kind of complicated I I admit but this is nothing else than a JavaScript code so we can close this and we're going to go into our hook we are even adding the comment so we can go into the profile post where we had that comments so we want to delete this comments and then instead we'll just get the post. comments so post. comments in this post we are getting it as a prop if you remember okay this uh component takes it as a prop so let's go here post. comments. map get each comment and then just render the comment component so comment pass the key as well as the comment itself we can save this and let's go into this component and then this is not taking any of these that was for the design part that I need to mention and then we'll just get the comment we could for now um just comment these out and then this one but here we'll just say comment. comment which was the comment text itself so now we have created it but we didn't actually Implement I mean we didn't call this function in any place which is going to be inside the post footer I believe because this is the component uh that has that uh input field that we can post so we're going to go inside post footer so let's go up here and then we might want to add that uh custom hook so use post comment and on the left hand side we are going to get two things which is is commenting and then handle post comment function so when we go click to this button we would like to call another function so on click handle submit comment let's say and again this is for one reason that we'll see so we could create that function up here so const handle submit comment which is going to be an async function so it's going to be an arrow function so let's implement it like this and let's see if this was inside the for so it is not we could just make it um so we don't need to take the event and make prevent default because this is not a form so just say await call the handle post comment with the post ID so let's say post. ID but now how are we going to get that post it is going to be coming from here as a prop so let's say post and put the post ID as well as the comment which is going to be a state so const comment set comment and in the it's going to be use State let's say an empty string so we're going to go here into this input let's say on change take the event set the comment and then the value will be that comment now how are we going to get that post where are we calling this it is going to be inside the profile post where we had this post footer so let's say um so this is the profile post component right which had that model when we clicked to that it shows us this um it shows us that model so we are just going to say post and send it to here so post just like this we could save this file into here and now since we handled the post comment we just want to set the comment to be an empty string so let's save and let's use this state as well when we are commenting we will like to have a loading state that shows us a spinner and do we have any errors here okay it's just a warning so let's go ahead and test it out hey this is my first comment and if I post this let's see there we go we got the comment and we had that loading State let's take a look at our database so these are the posts and we have one comment that says hey this is my first comment and it is created just now created by this user and post ID so it is working nice but the thing is this comment doesn't have the profile Avatar of that user right the only thing we know about the user who posted this is the ID so we are going to get the user ID from uh I mean we're going to get the user profile information by this ID so we need another hook to fetch user profile from the ID we are just going to create that in a second but this is how it works we just put some comment storing that in our state and we when we click to that post button we are calling this function so let's go here we are calling this handle submit comment which internally calls this function that takes the post ID as well as the comment and this function creates the comment in our database as well as updating our state and it is happening because it calls this function called add comment and it just takes our post array and at the comment at the very end so that we can see that so if I just put another comment another comment of mine so since it is going to be added into the very end of our array we are going to see that after this comment so let's pause this we have loading State there we go this is the latest comment that we have and one more thing that we only want to see this add comment input in this button if the user is authenticated so just imagine if a user is not logged in then they shouldn't see this input that just doesn't make any sense so let's go into the post footer where we'll just take the authenticated user so let's just give a bit space const oath user let's say use oath store get the user from the state and then this is the thing that we don't want to see if user is not authenticated so cut this for a second and if there is oath user so it should be like this then render this okay so if you logged out you will not see this entire thing and now let's imp Implement that hook that actually gets us the user profile picture as well as their um maybe username and just every information that this user has and we said that we're going to be creating a custom hook and it is going to be called as use get user profile by id. JS and we had another one called get user profile by username and this is going to be different than this hook so we are going to go inside let's say rfca it is going to have a loading state so let's say const is loading you can call it as is fetching as well doesn't really matter so you state initially it could be true because we're going to be calling this within a use I mean use effect so it is going to be an immediate call so let's say cost this is going to return us a user profile right this could be empty initially so I'll just say null and and then we're going to get the show toast to show some errors and then use effect which is going to have a function called con get user profile if I can type profile oops okay it's going to be an asnc function and we are just going to call it it is not going to take the user EP it is because this hook will take the user ID okay so here let's just say get user profiled and then this is going to have a TR catch as always try catch and maybe that could be a challenge for you that you could Implement and just pause the video at this point so finally loading SE will be false and when we start to do this operation loading will be true set user profile will be null because we didn't fet it yet so const we are going to get the user ref so get so let's say a wait get doc call the function and then the document is going to be from fire fire store within the users collection and it is going to be this user that we want to fetch and we are going to say if user ref. exists which is a function that we can call then just can you please set the user profile with the data and in the catch where they'll say show the toast with the error message and this is going to take the show toast set user profile and most importantly the user ID whenever this user ID changes it is going to run this user effect to fetch the user profile so let's say return is loading user profile and maybe set user profile as well in case we use it and there is a typo here that you can see user profile that it should be okay we are going to delete the react import as always and it is getting a bit annoying but let's just save and we're going to be calling this inside the comment. jsx so we got the comment now we would like to fetch the profile of this user depending on the ID which we can call it as use get user profile by ID and then the ID will be comment. created by okay this is the field that we have inside the comment so let's say const give us the user profile as well as the is loading State and we could say if it is loading then just return the comment skelet 10 which I will provide you in a second again just 10 lines of code literally nothing else skeleton Circle UT the skeleton so this is a flex on the left it shows a Circle skeleton and then two skeletons with this width and height so we'll just get that and what we can do so now that we got the user profile we would like to show it so let's just delete the name it doesn't really need it but we will say user profile. profile pick URL and that should be uppercase size could be small and then we are going to get the username so user profile f. username and what should we add else so this is the comment that we are already getting and then at the end we're going to show the created that and more than that in a little bit so if we save hopefully that should be working fine we're going to go here okay this is the user that has the comment the username as well as the comment itself now this doesn't look really correct to me so it is not aligned Center so we'll just go into this and I'll just say align items to be Center and hopefully it should fix um okay so it looks like they are in the uh so they are centered in vertical Direction and now when we click to this I would like to go to the profile of this user so let's add a link so into the Avatar I'll just say link import that from react rou D to not the profile but slash the oops so we have some errors let's just delete that back text close that and close this as well and we're just going to wrap this Avatar with this link so two slash uh dollar sign and then Char Braes user profile. username so it's is going to Tak us to this page and let's copy this also wrap it with our text that says the username okay we'll just close that link oops o not the Avatar but that should be slash link um okay so this looks good to me and if I click to this profile picture it'll take me to my to this profile which I already in so it just didn't and if I click to this it'll also take me to that profile so if those were another profiles it would take me so let's add another comment my third comment and if I post that it has been added here and it even had that skeleton so let's just add something else for a second you will see that loading skeletons one Circle and then those texts there we go now we would also like to add this created at time here for this I will provide you a function called time ago and it just takes the Tim stamp and convert it it something like 2 days ago two weeks ago 2 hours ago and stuff like that we're going to go and into the source create a uh folder called utils and I'll just add that so time ago. JS you can copy this function and paste it which is to many lines of code and I didn't write this by myself I just get that from the chat GPT so it basically takes a time stamp which is dat. now and it converts it something it converts the time stamp to something like seconds ago minutes ago hours ago days ago and eventually weeks ago so it is not going to say like one year ago but instead it will just say 52 weeks ago this is how Instagram implements and this is how we will be doing so let's save and we're going to go into here delete this import the time ago function and we'll just say comment. created at if we save this it should be working and it just says 1 minute ago 12 minutes ago and 30 minutes ago so everything looks fine but there is still one problem which is that we don't see the caption of this post which actually have one so let's go here this is the post the caption that we said that this is Bob so how are we going to get this which is going to be creating another component so profile post we are going to go before the comments right inside the vertical stack so let's just put a comment that says these are the comments maybe we would make it uppercase so comments and then here we'll just put the caption so we will just say that if this post has a caption and then render a caption component with the post okay we're going to now create this component so let's go maybe we should put it into the comment you could create another um folder but I think just to make it simple I'll just go and say caption. jsx because it is kind of related to comment component so RFC and the content is going to be looking really really similar to the comment component so I'm going to be copying this and just paste it into here so let's get the flex the link the Avatar the text um the text from Chakra and then the time go we're going to get this was taking a prop called post and we'll just say post. created add and then post. caption we're going to show it so post. caption and then the pro username of the user profile but this is going to be coming from the authenticated user or the user that posted actually okay so if we are in a in a profile and we are looking to their post then the caption will be written by by this user which is the profile of the user so we had a state for this I hope I make it clear so we just say user profile which was the use user profile store and give me that state so with this I think that should be working fine and um okay so let's save and we're going to go here uh get this component save it as well and if you open that up this is the caption that we see it says this is Bob and it has been created 24 minutes ago also what I want to add is when I collected this icon I would like to have this focused so we can use a ref for this let's go into the post footer and I'll just create a ra by the way we can just delete this handle like functionality but for now let's just keep it so that it doesn't gives us any errors so say const um maybe comment ref use ref should be null initially and then we're going to take this ref and put it into this input okay let's say ref comment ref and when we click to that icon so the comment icon which one is that um comment logo which is inside this box I'll just say on clict to this call this Anonymous function which Focus the common TR so let's save um okay so no warning at all we're going to go up here if we click to that this has been focused and we can just comment something like this now that we have handled the comments let's go ahead and add a like and unlike functionality so as always let's just create a hook for this we're going to go into hooks maybe we could just call it as use like post. JS and then this is going to have the everything that we have in our boiler plate basically const is loading you could call it as is liking or I'll just call it as is updating okay set is updating initially it is going to be false um okay like this import the use State and then let's get the oath user so const oath user from the store and then let's see what are we going to have number of likes so const likes set likes which is going to be us State and how are we going to get this is because is via the post so use State and we're going to get the post as an argument so this is the post that we are liking or unliking so post. likes. length this is going to give us the number of likes and then if we already like this or or not so is liked and set is liked and initially it is going to be so let's say use state so if the post that likes includes the ID of the authenticated user so includes Au oops so this is really annoying includes the oath user. uid and we need to just put a question mark here so that we will check if this user is authenticated and lastly let's get the show toast use show toast we have the function and let's create it so con handle like poost which is going to be the async arrow function if is updating it will just return and if there is not oath fer we just going to return a show toast that says You must be logged in to like a post and if this is not the case then we just pass these if checks then we'll just say set is updating to be true and here we go try catch and finally set is loading to be so set is updating to be false and then what are we going to have in the catch show toast um error message and then in the try you'll basically update the documents uh likes count which is going to be the post now let's get the post reference obviously con post rep document fire store import that um posts and then this is the post that we would like to update which we pass the ID and then a wait update document has the post graph and then the object which is going to be the data that we'll take to update with so update document and then likes array and we'll just say if it is light then array. remove function so which means that this user already liked it right and if he still tries to call this function which means that it is unliking it so it is in this state so he already liked it and now he clicks that one again so now is like is true and if it clicks that it is going to run this portion I hope it makes sense array remove um get it from the Firebase pass the oath user. uid and if it is not the case so it is liking so array oops array Union let's get that and pass the oath user ID so we are going to go here and whatever the liked state is negate and we'll just say if it is oops if it is liked then number of likes will be decremented and if it is not liked it is going to be incremented by one and finally at the end of the this hook we'll just say return is updating is liked so let's say okay is liked likes handle like post and then is updating if we save we delete this and now we're going to go ahead and implement this function or call this function so we're going to go into the post putter this is where we add that logic so let's delete the likes liked handle like function and instead we're going to be getting that from our hook so use like post which we're taking the post if we remember right it takes the post and this is going to return us four values so let's say con give us the handle like post function is likeed is updating in number of likes so on click to this like button we'll just say handle like post and if it is liked I mean if it is not liked show this notifications logo and which is this logo okay the naming could be a bit bad it is because we're using that icon as well up here so let's go okay and if it in the else case just show this unlik logo and we're going to use the updating State as well or maybe we don't so I don't really want to show a loading spinner when I click this like button instead I would love to just have it immediately this red color so I don't really want to show a spinner so that's why I'll just delete this if you wanted to you can keep it and add your logic so if we save this we need to test it out so this has zero likes as we can see if I click to that it is going to update in the background now this post have one like let's check it out um this is the post and in the likes array let's go ahead so these are the comments let's close that up off and likes okay it has one like which is been liked by this user which is let's see it's start with ik okay it is this user that just liked so let's go into that post likes array shrink this it has one like if we just click that again it is going to have zero likes it is because it has been updated in the database as well so with that now we have even our like comment functionality as well so I think this is pretty much everything that we need for the profile page let's refresh so we can create posts and we can edit our profile edit profile picture we can see the posts with the model so we can delete that we can add comments like it unlike it and I think that's it for the profile page if there is anything else that I for forgot I will be adding that in the incoming sections but now we can go into the homepage and actually fetch the feed posts but now we have an error let's see um okay it is related to this likes because we didn't implemented in the homepage so with that now let's get started with the feed posts and fetch them as always let's get started with the hook that actually gets us the feed posts into the hook hooks folder another hook use get feed posts. JS get the B plate and then we are going to have a loading State set is loading react state to be initial value I think that could be true because again we're going to using a use State use effect and then here we're going to have the let's say posts and set posts and this time they will be equal to the feed posts right we are going to fetch that and these are coming from the use post store and if we just call it like this then we can get these values and const oath user so let's get that as well from our oath store and then what do we need else show toast get that from our hook and then lastly we're going to have the const set user profile and you're going to see why once we use that not the o o store but use user profile store and State uh okay we don't need that because we are destructuring it and then we are going to call a use effect so inside the use effect we are going to have a function that gets us the feed posts so feed post Asing function and then it is going to have try catch finally in the finally set is loading to be false in the catch show the toast with the error message so let's say error with the error message and in the try we're actually going to try to fetch the posts but before that let's say is loading will be true and if the user let's say if oath user. following do length so dot length is equal to zero which means that this user doesn't follow anyone so we'll just reset our state set is loading to be false and set posts let's say to be empty array and then just return out of this function and if this is not the case then we are going to do our query so let's say const query which is going to be this query it was taking the collection P store and then it is going to take the posts collection where function okay the created by is in oops so where created by field is in the oath user. following array so this query will gives us the posts of the user that we follow and inside the try let's uh execute this so const query snapshot await get dogs so get dogs pass the query in it and then we are going to for each this so let's say const feed posts and empty array and then we'll just push it into here so query snapchat. for each get the document where we'll just return an object so feed post. push the object with the oops not so it should be Cur Braes the ID of the document and then all of the values just spread that so document. data and we would like to sort this posts with the created at field so that they are going in descending order so the latest created one at the above so feed posts. sort depending on the created at field and we'll just say set posts to be feed posts and as the dependency array we are going to add the oath user so whenever that changes show tost as well as set post and set user profile and we are going to call this function only if the oath user exists so if user is authenticated then get the feed posts so with that this function should be completed let's save maybe give a bit space and at the end we'll just say return is loading as well as the posts okay so we could save let's go ahead into the homepage so what do we have let's take a look we have feed posts so inside there we will try to actually get those feed posts so delete is loading delete this thing we're going to be say con we're going to be saying that is loading and then the posts get them from the use get feed posts custom hook which is going to give us the loading State maybe we could have only three skeletons and then what are we going to have else is so let's say this is going to be 400 pixels delete these use effect and use States and let's render the feed posts so I can delete all of these and we'll just say if it is not loading in the posts. length is greater than zero and we'll just say posts. map so I think I could delete this for now we say post. map give me the each post and return a feed post component for them and just pass the post as an as a prop so we could close that off and that should be working fine for us we're going to go into the feed post let's see it is is going to be only taking the post comp I mean post prop so let's say post and inside the post header okay inside the post header we'll just say that send the post and nothing else so let's go into the post header we are taking the post so we'll just say post. um so the Avatar of the user profile so for now we don't have that value so instead I will just contrl Z I don't want to make it any complicated I will just remove this okay and let's see I will remove the post footer as well and I just want to show the post image for now so we'll just go step by step so that you guys don't get confused so post. image URL this is going to show the post and let's say uh feed post image and let's save we are going to go into the post header save this as well let's take a look now um so if we just save it like this and we have an error so let's take it back now what is going to say in the console Let's see we refresh um so we don't have any any posts okay we don't have any errors and we don't see any post it is because none of the users that we follow has any any posts so let's go ahead and create some we're going to go and login so this is the login I'll just say Jano 1 2 3 4 5 6 and then login um okay J at gmail.com let's log in we are going to create post as being Jane or if we just follow this user we should see their Post in our profile and there we go we see the post in our homepage not the profile page and if we go into our profile we can see that we are following one user which is this one and he had this post now we can add the post header as well as the post footer so let's go ahead and render the post header but the thing is in the post header we would like to see the profile picture the username that has posted this and we don't really get that it is because in a post document the only information we have about the user is their ID which is they created by and this is okay because that's why we have created one hook that is called use get user profile by ID okay get user profile by ID sorry about that we're going to go into the feed post and just call it so let's say use get user profile by ID and the ID is just going to be post. created by so this is going to give us the profile of that user so let's get that const user profile there we go we're going to get the post header where we are sending the post as well as the let's say Creator profile which is going to be the user profile this is the user that created this post and we are getting that data which we will render in a second so let's go here we're going to take the post as well as the Creator so what was it uh Creator profile so from the post header we can also follow follow and unfollow which will come back in a second so let's say in the Avatar we'll just say that Source will be Creator profile. profile pick URL and then the username is just going to be the exact same thing Creator profile. username and if we just save this that should hopefully work fine let's go here there we go we see this user profile picture username and then this follow button which will just change in a second but now we would like to go to the profile of this user when we clict this image or the username so what should we do is going to be just wrapping this thing with a link so before the Avatar I'll just copy one line which is this link component that takes us to the profile of this user and I will close that off down here so slash link import the link and we're going to be doing the exact same thing for this uh usern name field so I will copy this line and paste it here then just close it maybe down here if we save Let's test it out we're going to go here if we click that it should take us to this profile and let's go to the homepage and we have one error which we'll check in a second that is coming from post header the reason that we are getting this error is because in the homepage we are trying to get user profile and while it gets that there is a loading state so for that we can show a skeleton instead of showing these avatars and this username so let's go before the link we'll just say Creator profile if it exists render this or if it is not then render this so so in the uh exist place we're going to put that link so I'll just cut it paste it and if it is not exist we will just show a skeleton so I could just say skeleton circle with the size of 10 and import the skeleton Circle and we'll just do the exact same thing so let's go here instead of copying and pasting I'll just say if Creator Creator profile exists question mark render this else render this and in the else case we're going to show a skeleton in the correct case we are going to let's say we'll just show this thing I'll cut that paste it and for the skeleton we could have width of 100 pixels and height of 10 pixels and I think this should have um okay we'll just take this box out of this place get the skeleton save it and now sorry if that look looked any confusing but this is what we have for the loading State we just show a skeleton and skeleton Circle so that we don't get any errors so hopefully let's refresh and we don't have any errors but instead we have that loading state so I will refresh do you see like we have that loading skeleton and now we would like to add this um follow and unfollow functionality to here and you might think that it is really hard how are we going to type that functionality again but this is not the case we already created that so use follow hook right we're going to go into the post header and we'll just say use follow user so just call it with the user that you would like to follow so just say post. created by so if you remember this hook we're taking the user ID that you would like to follow or unfollow that's why we are passing the ID of this user which in turn will return us so handle follow user function is following state so either true or false and the loading state which is updating so let's save and how are we going to handle that will be from this button for now it says text but I think we should change it with a button so that it actually makes sense and font size 12 let's say say size is just going to be XM small and then background of transparent and lastly after all these styling we will just add that onclick function handle follow user and for the updating state is loading will be is updating so let's save and do we have any errors is following okay the text that says follow or unfollow will be depending on that state so if it is following then it is just going to say unfollow so un follow and in the El case it's going to say follow and that's it this is the beauty of custom Hooks and I just set that 100 times but I'll just say it again and again that's why this is what makes your code clear so let's save and with only one line we are able to follow and unfollow a user so let's go ahead if we refresh we are going to get a clean State now we are following this user that's why it says unfollow if I click that now I am unfollowing that and now this user is inside the suggested user component and I don't see any post in my Prof I mean in my homepage and in this case user might say hey why I don't see anything so let's go into the feed posts component and show something like hey man you don't uh follow anyone just go ahead and make some friends so after this feed post we are just going to check for one condition so if it is not loading so let's say not is loading and post. length is equal to zero which means that this user don't have any friends so it is not following anyone so we are just going to create a text so I think I'll just copy and paste it so it says damn looks like you don't have any friends stop cutting and go make some so we could save and let's take a look this is the output that we got and if we follow this user let's see there we go it has been updated in our feed and we see this post and let's follow this user as well but it doesn't have any posts so we will not be able to see that in our feet but let's just follow him as well and there we go now we would like to add the post footer as well so let's go here here we'll go into the feed post where we have the post putter instead of rendering the username that was for the design part I need to say that again so that you remember so we're going to have the post send that and also the Creator profile which is the user profile so that we can show some information about the user I will save this I'll go into the post foter and then let's see what are we going to be adding so this will also take the Creator profile okay that was this prop and we are going to go down below and where we have this if it is not in the profile page so which means that now we are in the homepage and we are rendering the post footer instead of showing the username we are going to say Creator profile. username and we should put a question mark so that uh we don't get any errors if it is in the Lo loing State and then we would like to see the post post. caption so post. caption and then what do we want to see instead of this uh so 1,000 hardcoded value we'll just say post. comments. length and we are only going to show this if this post has any comments so we don't want to say like we all zero comments if this post any post I mean if this post doesn't have any comments then we are not going to even render this so I'll cut that for a second I'll say post. comments. length is greater than zero then render this thing that I just copied or I cut it and let's see font size of small color gray and let's say cursor will be pointer and we're going to be adding another functionality so that when we click to that we will see all of the comments um we'll just delete this let's save and hopefully it should be wor working okay we see the post footer where we have view all five comments it is because this post has five comments and if you don't want to believe me let's go to the profile page we're going to wait so if we hover over this this post has five comments so 1 2 3 4 five and this is the caption so let's go to the home so after this likes count we would like to show when this post has been created it but we don't really want to see that here it is because so let me just add that and you will understand so below the likes I will go ahead and I'll say if it is in the profile page so not in the homepage because we are using this component both in the homepage and in the profile page so I'll say give me a text that has the font size of 12 not family font size 12 and then let's say color will be gray and inside this text you'll just say post it time ago and then post that created at so import the timeo function scoop this thing in and save it I think we're going to go ahead and save it like that so if we go into the homepage we don't see that but let's go into the profile page of this user and if we click this post now it says posted 1 hour ago after this likes so it is because we have that after the likes we say post it our ago and then we only see that if we are in the profile page so at this point I feel like I am explaining a bit too much but hopefully we are understanding everything as we go also Let's test it out if we can like the post from the homepage and that should be working I'll click to that now this post has one like let's take a look this this post um let's see cancel it has one like if I say unlike and it is updated now this doesn't have any likes so we can just like unlike and let's add one more comment one more comment from the homepage and let's post it and it immediately says view all six comments because we have built our application in a way that every state is in sync with each other so this is absolutely fantastic and yeah I'm just proud of the application that we have built so far with that Flex out of the way let's go ahead and add this functionality where when we click to this view all six comments button it is going to open up a model that shows all of the comments and we are going to be doing that I think if we are only in the homepage um it is because in the profile page if we click the post we already see all of these and in fact we don't even see that we all six comments in this component it is because all of the comments are here so here we have a little bit of styling error but I just let that as a challenge for you so you would just fix that but in this case it's okay and I don't really want to waste any time so let's go ahead and build it in this component where when we click this we are going to open up a model so I'll just give a break and then come back to this functionality okay let's go ahead and build that model so when we collected this text we would like to open up that model so we are going to be using the model component from Chakra when we click to this text inside the post footer so before that let's create that component you can create it into this comment folder because it is related to comments but instead I'll just create another folder called models and I'll just put my comment model here jsx and at this point I will copy and paste it about 30 lines of code and I will copy and paste it again so that you can copy and paste this it is nothing than just a model so let me just put it here copy and paste as the starter code for the comment comments model component okay we should rename this let's say comments and it is called as comments model so what it has is just a basic model which is taking is open and on close as props so we're going to go ahead inside the post footer and we're going to call it right here so since we are using a model we'll just say use disclosure hook it is going to give us three values is open let's say const is open on open and on close so we are going to go and say when we collected this VI all comments unclick open up the model so onop and we only want to see this model if we are in the homepage so if it is not profile page so we're going to go ahead and let's say comments model only in the home page let's say if it is open then just render the comments model and we're going to pass the is open and on close oops so that should be here on close it's going to take on close as well as the post so that we can fetch the comments from this post let's close that off and maybe it is just better if we use it like this I'm going say null okay so that should be working hopefully let's save and let's take a look we're going to go here if you click that it is going to call the onop function where we just get this model and when we post a comment we're going to see that comment here and currently we are not fetching any comments because this comment has I mean this post has six comments we would like to see all of these so we don't really need to fetch it because post already have it and we already fetch that in other components so we are going to go ahead into the comments model into this Flex we're just going to render that so this component will be taking a post as a prop that we sent right here okay this is taking the post itself so we'll just go ahead and inside this Flex we'll just map that so post. comments. map give me each comment and then render this jsx which is going to be the the comment component itself it is going to have the key as well as the comment so we don't have this comment component so let's import that um it is coming from from the comment folder um and then get the comment so if we use it like this then we have an error before that let's comment this out it is because we don't have this ID inside the comment object so I'll just say console.log the poost save it let's take a look if we open this up there we go this is the post and comments array but each comment don't have an ID in this object at least in the database so let's go here posts so these are the comments array that we have but we didn't really put an ID maybe we should um in at this point it is not really a problem so we can use uh the index as the key but I would suggest you to just add a comment when you create that so it is going to be here so you would somehow add an ID into this comment and there are other uh functions that Firebase actually handles that for you so just check out the documentation and add that so let's not waste any time I'll just delete this and let's go here comment this out and then we'll just say key is going to be the index let's get that so adx we're just going to say key will be idx starting from zero let's save and hopefully that should be working we are going to go ahead and there we go these are the all of the comments that this post has so when we click to that it has the All loing State and it shows up so we can even comment from here if we wanted to let's add that functionality we're going to go into this comments model and when we collected this or when we submit this form we would like to uh post the comment so you might think that we need to create this functionality all over again but not really we have a hook that post the comment so we're actually going to be calling it so let's say use post comment this hook will give us two values so the function let's say const um so the function was handle post comment as well as the loading state which was the is commenting so we're going to go ahead and let's say when we submit this form on submit call a function called handle submit comment and you'll see why we're using this function we'll just say const it is going to be an async function e. prevent default so this is the first reason we don't really want to refresh our page so do not refresh the page prevent it and then after preventing this we'll just say a wait call this handle post common function and if you remember it was taking the post ID as well as the comment itself and we can get this comment's value by using a ref so let's say const comment ref you can use a use State as well but I'll just go with a comment ref and then this is going to be into the input let's say ref comment ref so when you type it into this input you can get the final value by saying comment r current. value and this is going to post the comment for you so let's import this one and use the loading State for the button is loading will be equal to is commenting and once we post the comment we would like to clear that input so just say comment R current value is going to be an empty string so that should be handle for us actually let's save and again be of custom hooks where we just call it in on line get the function call it have the loading State and everything works flawlessly um let's go ahead and test it out I'll just refresh in case we have any errors um so yeah so this the question mark we have it is because I submitted off camera so let's take a look um one more comment from the comment model so let's say comment from comments model and if you just post okay it says n. index of is not a function so what this problem is okay that was taking the post ID and I just sent the post if we save let's test it out again one more comment let's say uh let's post this it it has the loading State and there we go so now we can scroll and this is the comment that has just been posted one second ago and here it also updates the state where it just says view all seven comments so let's add one more I'll just say one more and that should be eight okay it has been updated and here we go the new comment is here but when I comment so if I just put something here I want to this scroll bar to scroll for me and we can use a use effect for this we're going to implement that inside this commments model jsx component you will just say get a ref initially so const comments container ref and it's going to be null and we'll just put it into the commments Container which is this Flex that holds all of the commments so let's say ref and the reason that we're putting this we are just going to scroll to the very bottom in this container so max site is 250 and once there is a new comment we'll just scroll to the Bott bottom and also on the mount when this component so when we first open that up we will like to just scroll to the very end so let's add that we'll just say use effect for this now we're going to go inside and create a function that actually scroll to the bottom okay so it's going to be only one line so let's say comments container ref. current. scroll Toop is going to be equal to this uh scroll height so that will just scroll to the very end for this uh container and then we'll just say if this is open so on the on Mount we'll just say scroll to bottom and this should run whenever the is open changes as well as the post comments. length so whenever a new post comment I mean new comment post it it is going to scroll to bottom so if if we save it like this then we're going to get an error so let's see I will click to this and it says that um so it cannot read properties of null which is scroll height so it is because when this use effect runs for the first time so on the on Mount this uh thing is empty the container. current is null and this is because I think how react renders things so we could maybe just delay this I'll cut that set time out and just delay it for 100 milliseconds not 1,000 but 100 so if you just call it like this then it should fix the problem let's go here um close here let's say we all 11 comments and there we go it's scroll to the very end for us I'll just say hey scroll for me and post it there we go it scroll for us to the very last comment so this is going to be it for this component and function fun ality in the homepage where we can see all comments and even comment from this component and I think this is the entire application that we have just built in the homepage we see the posts of the users that we follow we can like that or unlike that we can see all the comments or even we can comment ourselves as well so we can follow these users or unfollow them and it is going to update our user interface depending on that we have that suggested user component where we can also follow users from there we can visit our own profile and edit our profile by adding editing profile picture as well as these inputs so we could create a post that will update our user interface as well as the post State and we were even handling the error States so if you just post without an picture or image it'll just say please select an image file and then we could search for users if we search for ourselves so let's say jandoo it is not going to show show that follow button or if you just search for someone like jandoo it is going to actually show that follow or unfollow button and besides all these we have authentication going on where we can log out create an account with email and password log in with that or we can basically sign up or sign in with our Google account so let's see if there is any optimizations that we can add and then we're going to get into the fire store add our security rules and then just deploy the application the first optimization or fix that we can add will be this uh posted time so we're going to go ahead instead of having this hardcoded value inside the post header we'll just say call our function maybe I'll just give a bit space time ago function call it with the post do created at timestamp so let's save and you'll just see that it has been updated to the actual value another optimization that we could add will be inside the create post component so so I said that we are going to create this path name and we're going to use it later so it is now time to use it so the thing is when we are creating a post we are updating this state and it is because let's go here it is inside the user profile sore that is used to update the number of posts in the profile page so if I create a post in this page which is my profile then it is going to update the number of posts but I only want to increment this if I am in this page so if I create a post in the homepage I don't really want to update this state because this is null when I am in the homepage so I'll just go ahead and say that if the path name is not equal to the home so I'll just say not equal then actually call this function so we could make it on line and save it now this is that optimization that we just added but now I think we have another problem so if I am in the profile page of this user which is not me so I'll just create another post so I will just select the image of Bob and maybe not Bob so let's go ahead and say John okay I'll just say this is John now if I post this this is not the profile that this is not our profile okay if we post then now it is going to look like if if this user has two posts which is not correct so we are going to add if this is not the homepage and we're going to say if user profile do we have that value no we need to get that so we'll just say duplicate this give us the user profile State okay we'll say user profile. uid is equal to the oath user. uid so if this is our profile then update that number of posts so let's save and I'll just create another post by refreshing this so this user has one post now I'll just create another one so I'll just just say this is B and if we post that hopefully it shouldn't increment and there we go but we have another problem that it adds this post into this profile and it is because we are updating this state whatever happens so I will just copy this maybe or actually cut this I'll just say if this thing okay if user profile. uid is equal to oath user. uid then actually update this state by creating the post function so let's go ahead refresh and test it out so I'll just say please work let's post so it shouldn't update anything in this page and there we go post created successfully number of posts didn't increment the posts um so to say the post hasn't been added into this field and if we go into our own profile page there we go we have three post and they are all posted just now so 1 minute ago and 2 minutes ago so even test out further I'll just create another post but in my own profile page so I'll just select it maybe John not the John so let's say Bob I'll just say this is Bob or even I don't have to say anything in the caption if I post that now it should add it into this component and there we go number of posts has been incremented by one which means that it works as expected now one more thing that we like to add is that when we click to the suggested users profile picture or the name we would like to get into his profile so for this we can go into the suggested user. jsx and we're going to wrap our Avatar with a link so I'll just paste this line where it just uh links to the user. username it's going to take us to his page and let's close that off and we're going to import the link from react router D which I already had okay and for the uh full name we're going to just do the exact same thing I'm going to copy this line and then wrap this box with it so let's paste the link closing tag and now if we click to their profile that should take us to their page so these were the fixes and optimizations that we could make into our application and now I'll just pause the video here and I will add a couple of more users into this application and then I'll just add a couple of more posts so that our homepage looks a little bit cooler okay so I have added three more accounts the first one being is Jesse Pinkman which we are logged in as Jesse so let's go to homepage we don't have any friends so let's just make some we're going to follow the Walter as well as the Skyler so let's wait for that okay it's been updated and let's follow this girl as well there we go now we have all of our posts in our feet the users that we actually follow so we could like the this looks insane let's just uh post a comment and there we go we have one comment let's see that Jesse says this looks insane so we could follow other users and the feed posts will be sorted from the latest created one to the very first one so this is the entire application now let's go ahead and add our security rules into our Firebase console so now I am in the fire store database and I click to this rules tab so here we can see our security rules and this is not secure at all it's because it always allows to read and write operations as long as we are within this Tim stamp which we are so we don't really want this so we're going to delete that and inside this statement we're going to go ahead and write our rules so we will allow every user to read users collection so even if they are logged out they are not authenticated they can still come to to this page the Jessi Pigman page and they can see this informations such as biography of Jesse username number of posts followers uh number of following and that kind of stuff so we're going to go ahead and we'll just T and match the users collection and then a placeholder so this value could be anything I'll just say user ID because this is what that is and then Cur races we're going to write our rules so we would like to allow read operations always so even if you are logged in or you are logged out it doesn't really matter but we only want to allow to write operations so Colin and your rules so or the conditions if request. oath is not null so if user is authenticated this is what it says and a user can only wrun write into their own document so they cannot go and update or write into another user's document so let's say request. oath which is the which is the user that actually sends the request. uid is equal to this user ID document if this is the case we are going to allow the write operation and now let's go ahead and write the post security rules so we are going to allow everyone to read posts so such as post info maybe like the post text right the caption the post image number of likes and maybe also the comments so let's just write it down and then we'll just write a couple of more so I'll say match the posts collection and then post ID again this is a placeholder that could be anything but it should be meaningful right so let's say allow read operations in any case so always and then you're going to say allow they should be able to create posts only if they are authenticated so I'll just say if request. oath is not null so same goes for the update so allow update operations if request is request. O is not null so if user is authenticated and so we have an end here it is that a user can only update a post if he is the creator right so we'll just say request. oath. uid is equal to now how are we going to get the posts um so like post created by field if you remember we had that so this is how we get that so we just say resource in this case it is going to be the post. data not date data and created by so that was the field that we had if you remember and it's going to the same thing for delete operation so maybe I will just copy this line and paste it so allow delete operations if user is authenticated and user is the owner of this post and that's it now if you wanted to you could add more uh rules so you would just think of it what can I add to here just to make it more secure so I'll just publish this rules and let's see so okay it says publish changes can take some time so you should just readit a little bit so while it is being done in the background so maybe I'll just zoom in a little bit so that you guys can see that in a better way okay like this I think it is better and let's go ahead and just add our environment variables in case you push this repo to your GitHub and we're going to go into the Let's see we had this inside the Firebase these are going to be our environment variable that we're going to put into aemv file the first thing that we need is to create an EMV file so I'll just go into the rout and I'll just say EMV and now in V if you want to create EMV I mean environment variables you need to prefix it with vcore so something like so this is the API key let's say and I'll just say vcore Firebase uncore API uncore key and it is going to be equal to this value I'll just copy and paste it and now I'll just do the same thing for all of these values okay maybe I'll just spit up this part or maybe I'll just cut it okay so I just put them side by side there you can see we have the API key Vore Firebase uncore API uncore key and then just put the value and I just uh do the same thing for this remaining six ones so the O domain uh the project ID storage bucket messing and ID app ID measurement ID so just do the same thing copy and paste that now instead of putting this string we'll just use that value from that EMV file so I'm going to save this file from here and then the way to do this or to use this will be with import so we'll just say import. meta do EMV do and you just get the each value one by one so in our case Vore Firebase API key and I'll just do the same thing thing for each of these so here I just basically did the exact same thing I got the O domain project ID storage bucket all of them from The Meta EMV and now I think we could save this and let's take a look if our application still functions but maybe we need to just kill our terminal terminal and open that up um I think that might be required some cases when you update the EMV file so let's say contrl B to open up this panel and inside the get ignore we will to add this EMV file so we are going to go ahead let's see maybe at the very bottom we'll just say EMV just ignore this file uh this file in our GitHub repo so let's see if our application has been initialized or started yes it is in this port let's go ahead and we'll just say and let's see if that still works okay it is loading and it's been loaded actually say hey Jesse nice car and if you just send that and hopefully it is still working so it is still connected to our Firebase account and one thing so in the terminal you see this as um so this IP address instead of Local Host address right if you put that you might get an error while while you are logging in or signing up with your Google account and for this you need to go into the Authentication as far as I believe so into the settings let's see so authorize domains you need to go here and add one more domain and it should be this so let's see okay we need to take this and just paste it so you could either do it in that way or you would just use something like just like me just Local Host 517 uh 73 this port address and you'll not get any errors when you login or sign up with your Google account so just keep that in mind if you if any of you get that error and I think with that our application is ready to go so we can even search for other users let's say Walt or maybe Heisenberg that was the username that I created so let's search this is the Walter White that we are following we could go into his profile and there we go this is all of his post we can like um okay so missing or insufficient permissions so I think we did something wrong in the Firebase rules so let's take a look um this is not our error okay we cannot like maybe it is so it is definitely related to security rules and it is nice that we see this error so let's check that so I think it is related to this line I haven't tested out so I'll just delete this so we here we are just saying that if we are the owner of this post then we can update it but this is not the case so this post has been posted from this user but we are the Jesse right so when we like that we are actually updating this post likes count so we should delete this line and let's publish this and let's see if that will solve our errors now I will go into this application maybe I'll just do a quick refresh and now let's try to like a post and there we go now we can like and unlike and I am really happy that we got that error while doing some live coding or live checking so now we can like or unlike so let's just put a comment hey dude let's post that and there we go post has been posted if we refresh we going to still see that post and and yeah I mean we can still see that comment and we can like that post again so this is going to be it for the Firebase rules and implementations now the only thing that we left should be to actually push this repo into our GitHub account so this is a git repo if yours is not you should just say git in it and press enter that will initialize it as a git repo but mine is already a git repo so I even have I think two comets so I'll just say git log d1 line and there we go I have one commit that I have committed when I uh completed the design part and then one more to update the read me file and now it is time to add another commit and I think this is going to be the last one hopefully so I'll just say get add all but before that let's check if there is anything that we don't want to push um so EMV is ignored and okay that should be it I think there is nothing important other than that EMV file in our case right so we are even storing them and yeah so get add all and we'll just say get commit maybe we should say um as the message completed the entire application so you never so you actually never complete a project so I'll just say addit or maybe something like connected design to the back end and let's just commit this now we are basically going to just push that to the GitHub so to say get push and that should handle that for us okay so we're just going to go into the versal and import that git repo and then just deploy it okay so now I am at ver.com slne if you don't have an account create one for free and then get into this route so we're going to import this Instagram clone uh project so I'll just import that and we need to add our environment variables for this we're going to go into here and just copy all these and let's go here environment variables just click to this and paste it is going to paste all of them for you and you'll just deploy that so let's wait while it deploys and there we go it says congratulations you just deployed a new Pro to ourself so let's continue to dashboard so here it gives us two uh or maybe yeah two domains so let's just click to this and here we have three domains actually so let's click to this one and it's going to take us to this page we could go to this one okay so we got in security error it is because uh Google thinks that you're actually doing some really bad operations because Instagram is a very wellknown application so it just thinks that you are trying to cheat people so for this we can go and just change our domain so that was the so let's go into the settings this is our project so we're going to go into I think maybe advance or deployment so let's see what we have environment nope um so we okay we have domains so we're going to click that and we'll just edit this so here I'll just change it I don't know what to say so I don't want to think about it I'll just say social app as a programmer and you could just put really anything that you want and I'll just save so this is the new domain we have if we click that we are never going to get that security error so because Google doesn't think now this is it we are cheating someone okay so we're going to go ahead and try to log in so maybe I'll just say Skyler at gmail.com from 1 to 6 that should be 1 2 3 4 5 6 let's log in and hopefully it should log Us in and there we go Skyler doesn't follow anyone so let's go ahead and follow the husband and we have again unsufficient permissions we're going to go into the Firebase rules so I am sorry that we are getting these errors and again we are trying to update the users do collection it is because when we follow someone we are incrementing the number of followers and we are trying to update that but this rule doesn't allow us so we could just delete this and save and maybe there would be a better way to write this rules but you get the point and after this video maybe you could just improve this and yeah so we just published that so let's go ahead and test it out so now we are here I'll just refresh this page and let's see so this user has one follower now let's try to follow it again and there we go now we can follow that and update that user document and we can just see any post we can like it hey nice post we can even comment and we have comments we can see that and just everything there is one more thing that we are missing so if we go to the homepage in this application it works but if we try to go let's go to here inside the application we can go to this page but let's um just press enter to directly go to this page so we're going to get an error because routing is not handled for us so we cannot just copy this and open up a new tab and just paste it so it doesn't work it is related to V and we need to go and create a file called versal Json so into the root of the project so we'll just say unal do Json and then just just paste this line which you can grab from the preo so basically with this above code we are telling your cell to map incoming roads to the file that points to the index HTML so we're going to save this and let's get add all kit commit DM uh ver cell. adjon file addit and we'll just get push that so once we push this the versel is going to take a look at so let's go into our versel account so versel is going to take a look at the project and it's going to see there is a new commit so it's going to try to redeploy this so if we go into the deployments here we should see that okay it has just been deployed and it just says just now so we're going to click to that or let's just refresh this page and hopefully it should work now so we can copy this row other than homepage and just paste it into a new tab and it is going to immediately work so that was kind of like a trick that you need to know when you're building a VAB in versal in viral.com so I just realized there is one more problem or error if we try to log in with our Google account currently we cannot and it says unauthorized domain so we just need to copy this domain and we're going to go into the authentication settings and authorize domains so we'll just say add domain and paste that we're going to just delete this only have the root domain up until this veral do app and let's just add that and hopefully it should work now so I'll just do refresh and now if you just click to that it is going to use our Google account and then just log Us in so I think it is the end of the project we just built our own Instagram clone I hope you enjoy it as much as I do and learn something new from it and now you should be able to add all kinds of features to this app because now you know how to work with authentication fire store and storage Services of Firebase and if you add more features to this app let me know in the comments and with that I wrap up the video here don't forget to like And subscribe and thanks for watching