the napstack problem is a classic optimization problem in computer science it's often used to help teach dynamic programming and greedy algorithms this is an important problem to understand especially if you plan on interviewing soon for a programming job in this course Gavin long will explain the problem and show how to craft an efficient solution using csharp Gavin has created many popular courses for our Channel and he's also a free code Camp team member let's start learning hi everyone I'm Gavin long look I'm in trouble I've recently been asked to leave my apartment by my landlord he says the neighbors have been complaining about me causing noise pollution thank you the bottom line is the police are on their way to forcibly remove me so I need to grab as much stuff as possible and cram it into the snap sack here and leave as fast as possible the problem is I've got a lot of stuff so which items do I take with me I need to take the most valuable items so that I can come up with the money for a deposit for a new apartment but I can only realistically take a few items in the snap sack I don't even really know what a knapsack is so I guess this is my knapsack okay it's kind of a rucksack knapsack whatever it's a sack so the bottom line is I have a knapsack with a finite capacity which means I can only take a few items with me so I need a way to fit as much value as possible into my knapsack this is called the knapsack problem luckily I've been kicked out of a few apartments in my time so I'm very familiar with the knapsack problem so I have a solution to the knapsack problem which I'm going to share with you before the police come and cart me away let's get into this video in this video we are going to create an algorithm using C sharp to solve the famous zero one knapsack problem let me briefly describe the problem so we have a number of items in this case four items each item has an Associated weight and value so for example the first item weighs 8 kgs and has a value of fifty dollars the second item weighs 2 kgs and has a value of a hundred and fifty dollars the third item weighs 6 kgs and has a value of 210 dollars and the fourth item weighs 1 kg and has a value of thirty dollars the problem is we are trying to decide which items to include within a container that can only hold a certain amount of weight I.E the container has a fixed capacity so in this example our container will only be able to hold 10 kilograms of weight so this is called the knapsack problem but in this video I'll refer to a container in place of a literal knapsack we are trying to maximize the total value that can be included within our container our code needs to consider each of the relevant items and decide as it were if the considered item must be included in the container which can be represented by a value of one or the considered item must not be included within the container which could be represented by a zero when we first look at this problem it looks really difficult if our code is considering each item and making the decision as it were to include or exclude the item the total number of potential Solutions is 2 to the power of n in this case 2 to the power of four because we are dealing with four items so the time it takes to solve the problem can be expressed in Big O notation as Big O of 2 to the power of n time in this video we'll demonstrate that by using dynamic programming we can solve this problem in Big O of n times W time n denotes the number of considered items and W denotes the maximum amount of weight that our container can hold if you would like to read more detail on Big O notation I've included an appropriate link below in the description so we are going to go through the code to solve the zero one knapsack problem step by step to ensure that we understand how the relevant algorithm works so basically the problem is we need to choose the items where the sum of their values gives us the greatest amount of value when compared to the other possible combinations of items that can be included within our container so this is an optimization problem that we need to solve for the purposes of this video we are going to keep this problem really simple we have a container that can fit items that weigh less than or equal to 10 kgs if the sum of the weight proposed as it were for a potential solution is greater than 10 kgs this combination of items will not work we cannot take all of those items because their combined weight exceeds the 10 kg limit so we need to include the items where their combined weights do not exceed 10 kgs and the sum of the value of the items that we wish to include in the container is greater when compared to the other possible combinations of items that can be carried within our container the problem is drastically simplified in this example if however we were to scale up the problem where for example we have a large shipping container and potentially hundreds of items this would take most human beings too long to calculate in a time frame that could be deemed as efficient so this is where our algorithm becomes essential in for example shipping this type of algorithm that we are about to implement would run on a daily basis we are going to use the bottom up approach to dynamic programming to implement the relevant algorithm to solve our problem this is in contrast to the topdown approach we could write our algorithm using the topdown approach but we can avoid writing recursive code by using the bottom up approach the approach to writing our algorithm will involve a strategy called memoization very basically memoization ensures that a function doesn't run for the same inputs more than once by keeping a record of the results for the given inputs let's briefly look at a depiction of how the algorithm processes each item in relation to the capacity of the container the algorithm appropriately considers each item's relevant data IE weight and value each row denotes a considered item each column denotes the container's capacity which grows as it were by a value of one until the final value is reached which is the capacity of our container in this case 10. the algorithm traverses each row from left to right for each cell in the table or each position in the twodimensional array the algorithm appropriately evaluates the weight and value of each considered item in relation to the currently considered capacity of the container the algorithm then appropriately computes the maximum value that can be included in the container depending on the considered data the computed value is then recorded at the appropriate position in the twodimensional array the relevant twodimensional array used for memoization is depicted by our table here this is so that we can visualize how the algorithm progresses and calculates the relevant values our algorithm will repeat the relevant computational pattern until it arrives at the final result which will be recorded in the bottom right cell of the table here or position 4 comma 10 of the twodimensional array used for memoization the final result is the maximized value of the items included in the container right let's write the code for our algorithm let's create a.net core console application within Visual Studio so let's write the pertinent details of the relevant items and the container involved in this particular scenario in a comment at the top of the main method we are going to store the detail of each item's weight and value appropriately within two separate arrays so let's first create a onedimensional array named weights and add the relevant weights of our items appropriately to the weights array let's create another onedimensional array named values and appropriately add the values associated with each of our items to the values array I briefly mentioned the technique of memorization earlier so let's create a twodimensional array named data this array will enable us to keep a record of essential values that are computed as the execution of the algorithm progresses let's define an integer constant named n that stores the number of relevant items let's define the capacity of our container so in this example our container can hold a maximum weight of 10 kgs let's create two for Loops an outer for Loop and a nested or inner for Loop the outer for Loop Loops through n number of items which in this example is a value of 4. each increment of the inner for Loop denotes the weight that can be held within the container at a particular point in the execution of our algorithm so for example at increment 3 of the inner for Loop the algorithm will consider whether an item can be included within the container if the container can only hold a weight of 3 kgs when the increment is 4 for the inner loop the algorithm will consider whether an item can be included within the container if the container can hold a weight of 4 kgs and so on until the incremented value of the inner loop hits the Max Capacity which is a value of 10. at which point the inner loop is exited so here we have a table that depicts the twodimensional array we have named data as discussed the data array is used to store the results of computed values which are appropriately recorded as the algorithm progresses towards a conclusion this represents the twodimensional array that we have named data in our code So within the inner for Loop we need to implement code that will appropriately compute the values of the items that can be included in the container at appropriate points in the execution of our algorithm the computed values are then inserted at appropriate positions within the twodimensional data array so firstly we need to write code that evaluates the value of the item num variable that represents an item in our example so if the item num variables value is 0 code to insert the value of 0 into the appropriate position in the data array must be executed so if you look at our table you can see that these cells in the top row will all contain the value of zero considering zero item or zero capacity for the container may seem redundant but having these values within the data array is essential to the working of our algorithm this will become clear as the video progresses if the item number variables value at this point is not zero our code must evaluate the value stored in the capacity variable so let's write the code that must execute if either the item num variable is zero or the capacity variable is zero all we are doing here in this line of code is recording a value of zero at appropriate positions in our twodimensional array then if neither the item num variable is zero or the capacity variable is zero we need to write code that makes another evaluation so we can implement the relevant evaluation code using an else if statement like this so here we are saying with this else if condition if the weight of the considered item is less than or equal to the considered capacity I.E the maximum allowable weight for items to be held within the container at this point to the execution of the code we need to make a specific computation before storing the relevant computed value at the appropriate position in the data array so if the else if condition returns true we need to use a formula to compute a value before storing the value at the appropriate position within the data array so let's take a quick look at the formula we can use C Sharps math.max static method to implement the relevant formula so the first argument that we need to pass into the max method can be computed like this the second argument is as follows the max method simply Returns the greater value of the two arguments passed to it then we can write code to record the value returned from the formula in the appropriate position in our twodimensional data array like this so if the conditions in the if and the else if statement both return false we need code to execute that inserts the values stored in the cell directly above the considered cell as it were at the appropriate position in the data array so to do this we must write this line of code within the else block and that's it that is the code implementation for our algorithm then we can write codes to Output the final results to the screen the final result is found at position n comma Max Capacity so position 4 comma 10 in our data array let's run the code and you can see that we are presented with the correct answer the result is the value of 390. we can include the Drone the Monitor and the kettle within our container which gives us the value of 390 dollars so let's go through the execution of our algorithm in more detail so we can get a clear understanding of what is going on during the execution of the algorithm so for the first row in our table all of the cells will be set to zero because at the points of execution of our algorithm pertinent to these cells in the top row the item num variable is equal to zero so the code in the if block will execute so we can fill in zero for the top row in our table remember this depiction represents the twodimensional data array that we are using for memoization in our algorithm so now let's consider the data associated with the first cell in the second row which maps to position one comma zero in our data array our algorithm at this point is considering relevant data for the first item which in our example is the microwave the considered capacity is equal to zero so the value for the first cell in the second row will be zero then for the second cell on the second row the considered capacity is one and the item's weight the microwave's weight is eight so the if condition returns false and the else if condition also returns false if we look at the condition in the else if statement the weight of the microwave is greater than the considered capacity of the container in the elsif condition and so the else if condition returns false so this means that the code in the else block will execute so in this case we can insert the values stored in the cell directly above the cell that is currently being considered as it were into the cell the cell that we have just considered this depiction of course analogously represents the appropriate value being recorded at an appropriate position in the twodimensional data array you can see that the code within the else block implements this functionality if you think about it in Practical terms at this point in the execution of the algorithm the code is considering if the microwave which has a weight of 8 kgs can be stored in the container when it has a capacity to hold 1 kg of weight this is of course not possible so by recording zero at this point we know that no item can be stored in the container at this point so this same logic applies until we reach a capacity of 8. so let's record zero up until the capacity is equal to eight so when the container can hold 8 kgs of weight capacity is equal to eight this means at this point we can include the microwave in the container because as discussed the microwave has a weight of 8 kgs the relevant condition can read as if the weight of the currently considered item is less than or equal to the currently considered capacity run the formula I.E the code within the elseif block so the else if condition returns true because the weight of the considered item is equal to the currently considered capacity which is a capacity that can hold 8 kgs so let's look at the formula that runs to calculate the value that will be recorded at the appropriate position in the data array so the algorithm at this point evaluates using C Sharp's Max method which of two values passes arguments to the max method is greater the greater value of the two is returned from the max method so let's get the values that will be plugged into the formula I.E the values for the two relevant arguments that will be appropriately passed to the max method let's look at the first argument so here we are considering the microwave the microwave has a value of 50. so we can plug 50 into the formula here then in order to get the value for the first argument passed into the max method we must add the value stored at this position in the data array to the value of the microwave I.E the currently considered item so let's get the value stored in the data array at position 0 which is the currently considered item number 1 minus 1. comma the current considered capacity 8 minus the weight of the currently considered item which is also eight so we add the value stored at position 0 comma zero in the data array to the value of the microwave which is a value of 50 so we pass 50 as our first argument into the max method the second argument can be found at position 0 comma 8 in the data array which as you can see in our table is zero so obviously the greatest value between 50 and 0 is 50. so the max method returns 50 and our code runs that stores the value of 50 at the appropriate position in the data array so when the considered capacity is nine the considered capacity is greater than the weight of the considered item the microwave which is 8 kgs so the code that we have just examined also applies for when item num equals 1 and capacity equals nine so we can record 50 at the appropriate point in the table representing that this value has just been recorded at its counterpart position in the data array the same code is also run when the code considers the microwave which weighs 8 kgs against the capacity which can hold 10 kgs so let's record 50 at the appropriate position in our table next the code execution moves on to consider the second item the Drone in this case so the incremented value in the outer loop item num will be 2. the inner loop will evaluate each capacity consideration from 0 to 10 for item two incrementing the capacity by one with each iteration of the inner loop so at zero capacity of course we need to include a value of zero here when the considered capacity for our container can hold one kilogram the Drone has a greater weight than one kilogram the Drone weighs 2 kilograms so the code in the else block is executed so let's record this value at the appropriate position in our table then the code considers a capacity for our container where it can hold 2 kgs our drone weighs 2 kgs which means the Drone can be included in the container so the code within the else if block is executed so let's plug in the relevant values into our formula so the first argument passed to the math.max method is the value of the Drone which is 150 plus a value of zero the second argument is zero so of course 150 is greater than zero so let's record the value of 150 at the appropriate position in our table the same values are processed by the formula in the elsif block until the capacity reaches a value of 8. I.E where the code evaluates the container's capacity where it can hold 8 kgs each considered capacity from 2 to 7 for when the Drone is considered has resulted in our formula processing the same values however the values that will be plugged into our formula will be different when the capacity is 8. so let's appropriately fill in the values up till when the capacity is 8. so when the capacity is eight the first argument passed into the max method is the value of the Drone 150 plus zero found at this position in the data array the second argument passed into the max method is the value of the microwave 50. so obviously 150 is greater than 50. so here we record the value of the Drone 150. when we consider the scenario presented to us with the next iteration of the inner loop I.E when the capacity is 9 we need to record 150 once again this is the value returned from our formula implemented in the else if block however when we consider the scenario presented to us with the final iteration of the inner loop for the currently considered item IE when the capacity is equal to 10. at this point we can include both the microwave which weighs 8 kgs and the Drone which weighs 2 kgs within our container because at this point our code is considering a capacity of 10 and our code is considering the second item the Drone so here you can see that the first argument is the result of a calculation of the value of the microwave plus the value of the Drone which equals 200. the value of the second argument is the value of the microwave 50. so 200 is obviously greater than 50 so 200 is returned from the max method which means 200 is recorded at the appropriate position within the data array at this point our code has recorded all relevant values in the data array regarding the microwave and the Drone these items have now been considered against all relevant capacity considerations so the next increment for the Outer Loop executes and the next item the monitor will be considered against each relevant capacity so our code now considers the third item the item number variable defined in the outer loop is now equal to three three represents the monitor the monitor weighs 6 kgs and has a value of 210. so at position 0 in the fourth row zero must be recorded because the value stored in the capacity variable is zero so the code in the if block is executed so in the capacity variable is equal to one code in the else block is executed because neither the capacity or item num variable is equal to zero and the weight of the monitor which is 6 KGS is greater than the currently considered capacity one so this means the value in the cell directly above the position that is being considered as it were must be appropriately inserted into our table at the appropriate position the cell that we have just considered so now the capacity is equal to 2. we can see here that the value directly above the considered position as it were is 150 which is the value of the Drone the code within the else block is executed and a value of 150 is filled in at the considered position so the code within the else block will repeat until the capacity variable is equal to 6. which means if the container was empty and had the capacity to store a maximum of 6 kgs that the monitor could be included in the container let's appropriately fill in the values in our table until the capacity equals to 6. at this point the weight of the considered item is the same as the value of the capacity variable so the code in the else if block is executed so let's plug in the relevant values into the formula so the first argument passed into the max method will be the value of the monitor 210 plus 0 which gives us a value of 210. the second argument passed into the max method will be a value of 150 the value of the Drone 210 is obviously greater than 150 so 210 will be stored at the appropriate position in the data array here the same value is appropriately recorded for the scenario that is presented to us in the subsequent iteration of the inner loop I.E when the capacity variable equals to seven so we can record 210 here so when the capacity is equal to eight the values that are plugged into our formula are different to the values passed into the formula when the capacity was six or seven so let's plug in the appropriate values into the max method the first argument has a value of 210 plus 150 which equals to 360. the second argument is 150 so 360 is greater than 150 so let's fill in 360 here so when the capacity variable equals to nine so the value of 360 is appropriately recorded let's plug in the appropriate values into our formula when the capacity variable reaches 10. the first argument will be 210 the value of the monitor plus 150 which is the value of the Drone this gives us a value of 360. the second argument comes from the cell directly above the current cell which is the value of the microwave 50 plus the value of the Drone 150 which gives us a value of 200. so 360 is obviously greater than 200 so we can record 360 as the value in the current cell so we can now consider item four which is the kettle the kettle has a value of 30 and weighs 1 kg so in the first cell of this row we can record a value of zero then in the second cell where the capacity value is one we can plug relevant values into our formula to compute the value that needs to be recorded in the current cell the kettle weighs 1 kg and the code is considering a capacity of one so the weight of the item equals to the considered capacity so code within the elseif block is executed so the first argument passed into the max method is the value of the considered item so the value of the kettle is thirty plus zero which gives us a value of 30. the second argument passed into the max method is the value recorded above the current cell which is a value of zero so we can record 30 in the current cell so in the capacity variable is equal to 2 we can pass in the value of the kettle plus zero as the first argument into the max method so here we pass in a value of 30. the second argument we need to pass into the max method comes from the value that resides in the cell directly above the current cell which is the value of the Drone 150. so now when the capacity that we are considering is three the first argument's value will be 30 plus 150 which gives us 180 so that is the value of the kettle plus the value of the Drone the second argument will be the value of the Drone 150. so of course 180 is greater than one hundred and fifty so let's record 180 here the next values we need to record are derived from the same computation as the one made when the capacity equals to three until the capacity value reaches 6. so let's fill in the value of 180 appropriately until the capacity is 6. so let's plug the values into our formula for when the capacity variable is equal to 6. so the first argument that we need to pass into the max method is the value of the kettle plus the value of the Drone which gives us a value of 180. so we can pass 180 as the first argument to the max method as always the second argument that we need to pass into our Max method comes from the cell directly above the current cell this cell contains the value of the monitor so 210 is obviously greater than 180 so we can record 210 in the current cell when a capacity of 7 is considered the first argument passed to the max method is the value of the kettle plus the value of the monitor which gives us a value of 240. 240 is greater than 210 so we can record 240 here when a capacity of 8 is considered the first argument passed into the max method is the value of the kettle plus the value of the monitor which gives us a value of 240 when compared to the value directly above the considered position as it were which is 360 360 is obviously greater than 240 so 360 is returned from the max method and appropriately recorded within the data array when the capacity of 9 is considered the first argument passed into the max method is the value of the kettle plus the value of the monitor plus the value of the Drone which gives us a value of 390. When comparing the value of the Drone plus the value of the monitor which gives us a value of 360 to the value of 390 of course 390 is greater than 360. so we can record the value of 390 here the final considered position as it were involves the same calculation as when the capacity was equal to 9. so we can record the value of 390 here this is our final result we have maximized the value of our container with a value of 390. and you can see how this algorithm works when we look at the results in the table the maximum value is being calculated for every scenario until the final capacity and number of items has been considered so if our container could only accommodate a maximum weight of 6 kgs and we were only considering the following items the microwave the Drone and the monitor we must only include the monitor in our container to maximize our value we can see what the value will be if we look at our results in our table here at this position if we were considering those same three items and our container could only hold a maximum of 8 kgs we would include the Monitor and the Drone within our container which would give us a value of 360 dollars we can see this in our results here at position 3 comma 8 in our data array if we were only considering the Drone and the microwave and our container could hold a maximum of 8 kgs we would only include the Drone in our container to maximize our value so as you can see in our results when we are considering all four items and our container can hold a maximum weight of 10 kgs we must include the Drone the Monitor and the kettle to maximize the value in our container this gives us the value of 390 dollars using the bottomup approach to dynamic programming we were able to calculate this value in Big O of n times W time complexity n represents the number of items considered and W represents the capacity of our container the capacity is the amount of weight that the container is able to hold so let's now write the code that will use the data accumulated by the algorithm we have just written to tell us which items need to be included in our container to achieve the maximum value calculated by the algorithm that we have just written before we write the code for this let's neaten up the existing code a bit so we can put the code for the algorithm in its own function like this the values that Define the problem can be passed into this function from the calling code which will be code implemented in the main method the function of course Returns the result computed by our algorithm that we have implemented to solve the zero one knapsack problem let's run the code great so let's create a new function that will output the inclusion or exclusion status for each of the items considered in our application you can see here we have a parameter which is a string array named item names so we need to pass in an array containing the names of the items that are relevant to our problem into this parameter so let's go to the main method Define a onedimensional string array and appropriately add the names of the relevant items to the array the appropriate details of the items that are excluded from the container will be outputted with a red background color the appropriate details for the items that are included in the container will be outputted with a green background color so in the method that runs the algorithm that accumulates the relevant data in the data array the algorithm started from position 0 comma zero in the data array and worked from left to right for each row in the twodimensional array named data Computing relevant values and recording those values at the appropriate positions in the data array when the algorithm completed the final result could be found at position n that defines the number of items relevance to the problem comma Max Capacity that defines the maximum weight that the container can hold the container's capacity so the final result can be found at position four comma 10 of our data array in contrast to the way the algorithm worked the code that we are going to write here will work backwards from the position of the final result IE position 4 comma 10 until all relevant data has been considered and all relevant data has been outputted so firstly let's initialize two variables let's set a variable named I to the value that will be passed as an argument to the parameter named n n denotes the number of items relevant to a particular problem let's set a variable named J to the value that will be passed as an argument to the parameter named Max Capacity the Max Capacity parameter denotes the maximum weight that the container can hold let's create a while loop that terminates when either I or J is equal to zero so the while loop will continue to execute while I is greater than 0 and J is greater than zero the loop will terminate when either I or J is equal to zero So within the while loop let's include an if condition that evaluates whether the value at position I comma J the considered item is equal to the value at position I minus 1 comma J if the compared values in this condition are equal code must execute to Output the details of the considered item with a background color that is red indicating that the item is excluded from the container we'll write the codes to change the background color of the text accordingly in a bit conversely when the if condition is false code must run that outputs text denoting that the considered item is included in the container this will be indicated by giving the relevant text a green background so at the position immediately after the if else code codes to decrement the I variable by a value of 1 must be implemented so we are looping backwards through the items in the data array after code is run in the case when an item is deemed to be included in the container I.E within the else block here we must update the value of J by subtracting the weight of the considered item from the current value of J so the code within the while loop will repeat until either J is equal to 0 or I is equal to zero so that is the logic for the code that outputs text denoting items included in the container and the items excluded from the container let's write a reusable function that outputs text with appropriate background colors a red background denotes an item that is excluded from the container a green background denotes an item included within the container so let's first write an enum that contains three list items let's name these items normal success and danger respectively let's write a method named write text to screen this method contains two parameters so the logic for this method simply changes the color for the outputted text based on the argument passed into the second parameter so for our purposes here if the item is included in the container the text is white and the background color is green if the item is excluded from the container the text is white and the background color is red so we can now use our right text to screen method appropriately in our code let's run the code excellent