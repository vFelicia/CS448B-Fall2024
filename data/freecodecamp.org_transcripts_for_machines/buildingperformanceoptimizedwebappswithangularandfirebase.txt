all right um thank you very much for having me my name is richard zitole i am an angular developer at standard bank i am fairly new in the industry but yeah i've i've played around with uh different tech and today i'm just here to basically share my story um about some of the things that i've discovered along the way um yeah here's my twitter handle if you want to know anything anything about this presentation afterwards you can reach out to me um we've got a few slides so i will go through rather quickly but yeah feel free to stop me to ask questions if you have any or you can save them for afterwards all right um let's jump right into it um oh another thing before we continue is that i noticed that we have a few gdes here so if you have any hard questions please just point on it to them [Laughter] all right so yeah genie is google developer experts there are there's a few around here so please point those difficult questions to them anyway um agenda so i'm gonna take you through basically a this is a very opinionated um presentation in other words it's uh it's a stack which i have chosen and i've you know built applications with it and um so i'm gonna take you through quickly through angular for those of you that have not used it before and then we'll talk a little bit about firebase and what it entails and all its features after that i will introduce you to a wrapper which is called angularfire2 we'll talk a little bit about offline first strategies um using the service worker and then after that we will build a hacker news pwa so there's a demo coming up after that we'll do some we'll basically just benchmark that pwa to see how it sticks up in terms of performance and then we'll use lighthouse and other tools to optimize and see how we can improve the um the performance um yeah i will test this stack which is pretty much what i've i've just mentioned now and then we'll share some some some learnings and findings and i'll also show you some resources where you can learn more about this technology stack all right so moving right into it the stack javascript frameworks there's quite a few of these [Laughter] and sometimes it feels like there's a new one coming out every second week um actually there is one there's one that comes out quite frequently but i think it's arguably you can say these three are pretty popular i got the screenshot from the other day from john papa um he did a little uh so i was looking for a what do you call it a a cloud word cloud uh for for uh the different javascript frameworks i couldn't find one and then i happened to come across this and i asked john papa if he if i can use it and this was his response he says of course but keep in mind that polls are not perfect this captures people on twitter who follow me who happen to see it and who want to reply which i think was pretty fair so i thought i'll put in that disclaimer but i think if you look at other comparison or um polls react is pretty much in front but this is not a popularity contest it's you know it's about you know using a framework that is fit for purpose um and clearly you can see which one i i went for so that's what we're going to talk about tonight angular so you might be asking yourself why angular for those that have not used angular before angular is for me personally i actually started with vue i did a few for a couple of for a short while but then because of work i had to move on to angular which i love to bits at the moment i'm still learning it so correct me if i you know miss spell or miss say something but uh basically under the hood this is basically the the basic um components of of an angular the most basic one is an angular module or ng module it comprises of a template and a component which gives you your angular view we use event bindings um to take input from the user and we process it through in in the component um and then we return application data via property bindings directives and bindings you basically just it's some logic and business logic that modifies your template before you render it to to your user um it has this very cool piece of technology called dependency injection and that allows you to use shareable services which you can import into your component it helps keep your component nice and dry and you can reuse them so the idea is basically just you know if you have a specific feature maybe a user login you want to keep that as a single module um for there's benefits for that uh which i will delve into in the next couple of slides uh but yeah basically that is um angular under the hood um the the most the most uh benefits that people always is exactly what it says there you're able to use your angular skills to basically build for not only mobile not only web but mobile and native desktop as well it is possible uh things like ionic they heavily use this under the hood um angular by design is built for speed and performance um if you add things like web workers and service workers and server side rendering you just basically make you up you can make your applications um pretty fast other benefits or other reasons why people love angular is because of its incredible tooling and its community behind it um i mean we've got the english cli i think it's one of the most beautiful pieces of software with the latest release of angular 6 we've added extra features like schematics and elements and all this kind of stuff which i'll delve into in later slides and it's loved by millions myself and some of the web developers here i hope you have tried it if you haven't tried it uh please dive in and and have a look at it um angular.io is the website you want to go to to get started so the next piece of technology that i'm going to talk about is firebase how many of you have used firebase before okay quite a few cool have you used all the features that are there at the moment not okay so right absolutely so that's yeah i've i've gone through that route i've tried to use all of the features that are available for the web um but it's basically if you don't know what firebait firebase is you can think of it as a backend as a service so if you do not want to tinker with um provisioning servers and infrastructure and managing all of that um you people who've worked in in big organizations where you know you're serving millions of customers you will know that you know as as your application grows or as your user base grows so does your infrastructure um but firebase allows you well it basically abstracts that layer for you because you know it's a backend as a service so you're able to build applications fast without managing infrastructure it is backed by google um yeah and and i think the one cool thing with with firebase is the fact that you know most of the features they work nicely together um as you'll see now the first one that i'll quickly uh touch on is authentication authentication is basically just you know managing your user authentication the cool thing with this i think it's um the fact that you have you can use multiple providers um whether it be google twitter i'm not sure facebook is there um yes um as well if if say you also want to use um passwordless so you don't want your users to to to create a password you can use that as well or you can go old school and use it you know your email and password um the next feature uh is is the firestore cloud firestore this is the actual database um that you interact with the nice thing with the database is that it's a nosql database um it's based on the concept of collections collections you can think of it as a json object within collections you have the actual documents documents is where you would store your id or user id email address and and all the uh all other properties that you want to store for the user um and then cloud storage so if you want say say you have an application that you you know you uh you offer file uploads um you can use cloud storage to to store the those images um couple that with cloud functions which is one of my favorite uh features is that so cloud functions is basically you can think of it as like web hooks so you imagine a scenario where um you offer our clients or it's an it's an image sharing service or application typically users will upload anything that they can as long as they see an upload they can put in anything in this with cloud functions you're able to basically detect what they're uploading the size and file format and you can do some sort of transformations before you store it up into your storage and you can also create records in your firestore database once you're done building your application and you want to host it you can do so the firebase offers a hosting service which is very very generous here um the very cool thing is with this is that they've got cdn uh distributed globally so as soon as you upload your your your application it basically gets distributed across the globe through the cdn network and that means for your users that regardless whether you're here or in dallas or in china you know you can just pretty much have a low latency access to to the application and your assets which is a very cool thing ml kit um i i heard through the slovak that someone is going to do a talk on that we don't have it in web as yet correct me if i'm right yeah but i think it might be in the pipeline i hope um yeah we'll see the future is bright firebase all right now just give me a sec who of you have heard of angularfire or have used angular fire before in your application okay i see one two hands um angle of fire is basically fire two because we want um that's the latest one is basically it's a marriage between angular and fi and firebase um it's an angular wrapper for firebase so all those features that i've just spoken about just now um your authentication your database storage and all that stuff it's they're all available but you because we are angular developers we like to do things the angular way um so we do we built a wrapper for it the cool thing with this library is the fact that it is um it is an official library it is developed by the guys i think davies david east is one of them and the angular core team um and many other guys from from google as well uh use it um the one thing that i will show later on what i like about it about um this rep is um the persistence so you just call in uh one method and allows your application to um to basically um persist your data so imagine you're busy capturing a form and all of a sudden telcom i mean scom decides to cut electricity and your you don't have internet connection all of a sudden um it will persist your application once the connection comes back you you will you'll be able to access the locally cached data from the from your firestore database and once the internet connection comes back on then you'll be able to you know continue where you left off which is that's a very good cool feature um it's pretty pretty popular this was taken about a week ago i think it's just over 17 000 downloads a week it's currently at rc release candidate 11 but they moved pretty fast so by the time you go and check it out it might be on 12. um there have been some breaking changes in the past i learned the hard way but yeah it's something that you need to keep in mind but it is it's got a very good support and community behind it um how am i doing on time all right um how would you get it in your project um you do it like that the the nice thing about it is that you only import the stuff that you need so if your application only uses the the database module you only need to install angularfire store module if it's authentication or storage you just import the stuff that you want to use and to initiate it down there at the bottom this is where you obviously enter all your secrets and and whatnot the nice thing also is the fact that you do not have to so typically it would be on your main module with angular you you have at least one root module and one root component um but with you know depending on your in the structure of your application um you you just need to import this way you are using it in the module that you want to use it um for benefits that we'll discuss shortly um how do you use it using it is pretty straightforward if you've written uh if you've worked with typescript before this is what it looks like angular by the way is also written in typescript typescript which gives you strongly typed powers to make sure your applications or your code is resilient um so to to get started with angular firestore you would because it's a rxjs base so you will have to have rxjs um you'll need angular firestore you just import it like that and through dependency injection you you pull it in through your constructor and this is what i was i was referring to earlier on collection so this will be your high level um uh json object in your database and the name of the collection is items and it's got this very nice methods that you can call value changes will basically return you an observable array um if you want i think there's another one called snapshot change i'm not 100 sure what it's called but it will return that observable area with meta with metadata as well so if you have ids stored and all those kind of things you will be able to pull them through as well and to display it in your template you just call it on ng4 um you iterate through your your observable but because then observable you need to use the asic pipe to unwrap that observable and through interp interpolation you be able to extract all the data that you need through there so it's pretty straightforward it's everyday code that we write if you use angular on a daily basis i should not assume that [Laughter] a lot of mobile developers are looking at me like no don't do that all right um moving along oh so yeah the time has come for you know i think everyone is looking forward to this but uh not quite yet if you're still wide awake by now and if you remember what i mentioned at the beginning or in the agenda is that um this talk is not about angular's it and it's not about firebase um it's not about pwas it's about everything it's about using all these technologies together to to get the the most out of it um so i'll just quickly take you through um the service worker specifically we'll focus specifically on the angular service worker um in its simplest form a service worker is simply a javascript file it's a it's a js file um where you define how your application how your application requests how it requests um network requests so it basically intercepts network requests and it stores the response into your cache api that's that's its simplest definition um and you might ask me wondering why you want to do that um i think it's pretty much i think it's for obvious reasons because cache is obviously on your browser itself so i'm talking about the the browser cache um so the idea behind service workers is that you want to show something on the screen as quickly as possible so first time around when you make an extra call the service worker will jump in and say okay let me have a look you want to make a call to this api and it will cache their response and put it into the cache api on the browser itself so next time when you request the same api or the same address it will basically look into the cache or if it doesn't find the information that it's looking for or the cache is expired then it will make a network call the cool thing with um with the angular service worker specifically is that you can define how all these things work but first before we get to that this is something that uh tricked me over when i when i started looking into service workers it looks very simple it is a simple diagram i think so basically this is what happens when your application loads the service worker gets registered schedule installed and you get activated and it starts doing its magic um but it's very important i think for me i did this mainly for me actually because i think it's very important that you understand how the life cycle works um because it's very easy to get tripped over you you'll be expecting a certain behavior and meanwhile this thing is bringing back something completely different so depending on how you configure it and so forth um yeah it helps to basically understand how the life cycle works um browser support who can tell me what's wrong with that picture well except for that lonely outlier over there i think everyone is in agreement that this is a cool idea right so yeah i think you guys can go ahead and use this stuff because it is supported across orbit i mean look at even samsung internet you know they're right they write up theirs or they've been supporting it since four which is pretty cool so yeah guys please go ahead and start tinkering with this um with this uh sort of stuff now um so we because we are angular developers i'm looking at youtube rebecca we will talk about service workers in the context of angular um so so if you look at this step there's a six six part yeah it's about six steps most of these steps you would have to do it by hand not so long ago if i'm not mistaken in fact i am not mistaken because i had to do some of this stuff by hand but with the latest angular angular 6 we have added a new uh schematics basically this at angular slash pwa so you just throw in there you just go ng add angular pwa and it basically goes ahead and does all the stuff it configures this stuff for you i think the one key thing that i maybe is worth mentioning in this in the steps is the manifest json file um as you will see shortly um so basically the manifest json file it basically you that's where you define how your app your your pw how you want your pwa to look like once it's downloaded oh um i'm not sure if if you've come across a pwa as yet you should have because most of the south african websites they basically telling their applications to pwas um but basically so you'll notice on the address bar there you you might have um like the same color theme with the rest of the application so you you define those kind of things in that manifest json file um another very important um file that that the angular pwa schematic does for you is create this ngsw config json file this is if you remember what i've mentioned earlier on what i said earlier on was that you can basically tell the service worker how to deal with network requests um when to look into the cache uh first or whether to look into the cache first or if it should go to the network first you define all those kind of things all those things in the ng sw config.json file and once you've done you just basically build the project make sure you build it with double dash prod that allows you well it builds that project in ahead of time compilation uh basically just tree shakes all the unnecessary polyfills and all the other stuff that is not necessary for you app to run makes it very lean and then you just run the project um yeah so now let's i think let's look at what is being cashed are you guys still with me are you still following you have i lost you completely please uh do raise your hand if i'm i'm moving too fast or if you've lost me completely um this is what has been guess so there's two groups um uh so so this is obviously how angular have um decided or have defined how to um to cache your assets there's two groups the first one is called asset groups asset groups basically it um it's it's where you tell your service worker what your cash flow so your your um your app skeleton um so if if you guys are not 100 sure a a web application usually comprises of an index html css and javascript uh files so what we're saying here especially on the install mode we're saying that as soon as the application loads go ahead and cache all this all these files so your html index html anything that ends with bundle.css and bundle.js and chunk.js we have another one here called assets this one's install mode is lazy what that means is that it you do not immediately start caching the stuff wait until the user navigates as soon as the user navigates to a certain url certain path then it will cache those assets the other group is called data groups in data groups we have two types the first one is called freshness or uses strategy called freshness in simple in simplest uh terms it it just means network first so go into the network first and um so in this specific example you know when you hit that url go to the network don't look into the cache first um and yeah you can also specify you through the cache config the mixmex age and the timeout so after 10 seconds if this thing doesn't return anything it'll look into the cache the other the other option is performance this is for all the other the remaining routes of your application however many you want um this one will look into the cache first so it'll say cache if the max age has expired excuse me then it will go out to the network and fetch those assets all right moving along if you've done everything correctly um then you will you know you'll you'll look at when you look at your dev tools you look at something like this as you can see here we are in offline mode um so this prior to this you would have to have gone to the app face because obviously it has to case from somewhere else so you first have to visit the app it will cache that using that asset group strategy it will cache all the the the basic files and when you refresh then it will save it from the service worker so this is how you know that your your application is being served from the service worker so what you're looking at now is a good thing you want to to see this when you've uh turned your application to a pwa all right okay so i've covered that so yes show the thing here's the demo do you guys want to take out your phones and go to that url i'm sorry i should have tiny urls yes you can use them um side by side you don't have to have one or the other they can work in tandem everyone there okay awesome so that is a pwa if you are lucky or if you have a smartphone using a browser which is up to date you might get a little banner that asks you if you want to add to your home screen have you guys seen that okay you can go ahead and add it if you want it's not a must but if you want to see how these features all come together that's um yeah that's one of the benefits of going to pwa route uh yes george you good okay cool um yeah that is a pwa so and if if you're accessing that url through a browser through a desktop um and you run it through lighthouse lighthouse let me just quickly speak about lighthouse is basically it's one of the tools that you can use to access a website or web applications performance with that specific one as you can see there that's the same url that you guys went to now it was done a couple of days ago so it's all green so you want to be hitting you know you want to have greens here so so the most important ones obviously here is performance and progressive app you don't have to check for this other stuff but it's good to know that you are you're all in the green um yeah i think the key matrix for me uh for this screen is well i think not just for me but like for most applications is time to interactive what that means is that you know how long does it take for your application to become to get to a state where it's responsive to user input um so you want to have that definitely a degree in fact if it's over 10 seconds right now it's 4.6 seconds if it's over 10 then it'll start affecting your progressive web app um matrix um so this will probably go down to around 70 or something like that and then at the bottom here you see this is a film strip it shows you the timeline shows you how quick your application loaded first meaningful so another very cool thing about matrix performance matrix specifically things like netflix tv ui so they have specific matrix that they've decided to focus on and optimize for them is tti is as it's also known they also look at if i'm not mistaken is that estimated input latency or input responsiveness so it's how long it takes when a user taps on something how quickly does the application respond for them that is very important um and then also the the cpu usage so those are the three ones um that they they track so every application will obviously be different depending on you know what you're optimizing for what what the app does and what what you user base look like but you know it's always good to have greens all around i just like looking at the greens all right so if you're not getting those grains guys this is some of the ideas that you can follow to basically get to the greens the first one is called the purple pattern i really enjoyed your your talk mr geyser yeah he talked a little bit about the pebble person but it's pretty cool so the idea is i think it's it's it's always been there but um i think it was coined the first time at google i o 2016 by the polymer team and the idea is basically um and you'll see how this all comes together it's you push critical resources first um so your app shall the asset groups you render initial routes with a very lean app module so in the in the angular context is that you know on your on your core um module you don't want to have as many depend or imports in there you want to have you know you want to keep it as lean as possible um you precache the the remaining routes with the service worker and then you lazy load the roots with angel modules so this goes back to to that idea of you know making sure that um you keep all the features together and modularize your application that helps you to basically apply lazy loading and those kind of stuff um this is just basically a diagram that shows you how your application loads you first get the index html well you guys saw the splash screen right there was a splash screen then um that's contained within the index.html file um your up your app module gets loaded and then obviously other stuff happens but eventually you get to fully interactive which is in my opinion that you know you want to get there as quickly as possible all right now you may be wondering where do i start i've got an existing application but you know how do i know how it's performing um you can do a bundle analysis you install webpack bundle analyzer through npm you add that to your json package.json file and then you run the analyzer this will basically scan through your node modules it will scan through all your files your application and it will give you it will give you a breakdown of um the you know the the size of your application so you will get something that looks like this uh this is is for that um i can use pwa as you can see here angular is the biggest sticking the biggest space closely followed by firebase and you've got all these other files as well and there's your source file there um so clearly i mean just by looking at this you can say okay so maybe i should be thinking about lazy loading firebase or modularizing that part so that i can i don't have to load it immediately when the app launches so that's something that i would do i would first i would make sure that um that is a separate module um and by doing so you would basically cut your your bundle size in half or roundabouts um this is another tool this is a very very cool tool tool i actually got to play a little bit more uh with it today um and discovered new features as we're going along and got so excited um but basically so uh this basically you put in a url um you can specify the sort of connection so think about your user base let's say you're a big company and you've got users all over the world um and let's say business is starting to become sluggish in a certain geography and you want to find out how you up your obviously an online shop or online application and you want to find out how are people experiencing your application within that geography so you can specify basically the type of network connections that are typical within that area once you've done that once you've run that and i'm just going to show you one example there's many things that you can do with it you'll get something like this which is called the waterfall view basically shows you how your your application loads so once it's connected it first loads your html you see it's pretty quick so because i've inlined everything the css html um you can see that you get the first paint very quickly you know just under half a second half a second um so that's just your html loaded and then it it it does your uh pausing compiling and um rendering your javascript that is actually the the the biggest chunk of work with browsers javascript is if you can optimize that part if there's any part that you can optimize it should be that that part um through things like lazy loading and all the other things that we've discussed before um but you can see here our application gets fully interactive you um i don't know about the um yeah so this is this is one of the tools that you can use there's many others um there's also websitegrader.com it gives you similar matrix um but it goes into detail in terms of um you know what's the reasoning behind the the associated matrix um if you're old school you can still use your dev your dev tools um yeah so this one is very similar the cool thing with that first one that i showed you this one um is that you can actually simulate what dev tool does under the hood um most of it actually is is is encapsulated in there but yeah you can also do it that way i think where you want to focus in is just obviously looking at how your your application gets loaded and then you'll be able to well you'll identify the way that browser is taking long or your application is taking long to getting loaded and you can optimize for those things um this is one talk that i really enjoyed it's by a guy called maxim salnikov he's an angular gde um yeah so he basically goes into detail all the stuff i've that i've covered or the slides that i've covered so far he delves a little bit deeper into those so i would strongly suggest that you check out this presentation it's very cool um so what have we learned now i'm asking you the question what have you learned nothing all right what i've learned is that um so to get started i think you know it's you wanna um let's say you've got a big application or you've got an existing application you don't know where to start i would say you know look look at this quadrant look at where there's low effort and where you get the the most value high impact so go for the low hanging fruit um by using the things that we've discussed following the purple pattern modularizing your application laser loading those kind of funky stuff um you will use more value by doing so angular maybe i should also add that angular does have a style guide basically best practices of how you structure your applications um yeah it i would strongly recommend that you follow that as well by default you will basically build very optimum applications um what's coming next mike what's coming next [Laughter] there's i mean with angular 6 is is was released recently and with it came pretty cool stuff like schematics you've already seen it how we do the pwa stuff elements is also another cool feature that you can use today um going to the future i think i don't know i haven't been following very closely lately but think they not um available for all the cool stuff coming out from firebase um as a as a side note as well uh today what was yesterday david east tweeted um he said if you're using he says if you're using firebase i've got this new thing it's a secret thing but you know if you want to know what it is dm me so so i cannot freaking wait i did dm him this morning but yes i'm still waiting to see what the hell it is but i'm pretty excited i'm sure it's going to be fun um i think at this moment i should want to take a moment to say thanks to people that have helped me along this journey uh jeff is a very very cool cool guy he's got a um on angularfire.com he has tons of of tutorials of learning material um yeah he's he's simply the best he's he's very good at what he does maxim's helped me with some pwa stuff questions and john papa i like listening to him and his adventures of angular podcast yeah and also my my teammates at standard bank we have the wealth team the web team and free code cam free code camp is a nonprofit organization if you're new into programming or if you want to or you just started and you want to you know hang out with people in a similar boat i actually try and organize once a month a meetup we meet at rose bank just basically just networking but there is if you go to freecodecam.org um you can basically get started in this journey there was a gentleman that mentioned it on that is not from the uh it's not in the web space that's how i got started selftaught um but i really enjoy what i'm what i'm doing now and yeah and obviously you guys judy g johannesburg thanks for for the invitation i really appreciate that um yeah and i've got some resources for you so if you look at that app that you downloaded um right at the bottom the source code um that will take you to github my github account if you want to optimize and you want to help me out with something just send me a pull request i'll be happy to manage it yeah and with that i'd like to say thank you very much and i cannot wait to see what you build next thank you questions if i'm using a service worker and i'm going to fetch data in my banking through an api or json api um if you say can you just repeat the question from the backing yeah yeah yeah no okay so the service worker the angular service worker you don't i should have shown i don't have that slide but anyway there's when you look at the service worker file that that angular generates for you it's about correct me from wrong it's about 2000 lines of code you don't have to touch that if you want to get to the nitty gritties of it if you want to add some some of your own stuff um what is it called workbox workbox web yeah workbox um there's other similar tools but you can go that way it is possible to use more than one uh jeff the guy that i showed earlier on he's got a video on that um but yeah i think workbox if you want to just really get into the nitty gritties of it you can do you can go that route yeah yes yes so you saw that life cycle right this i only saw that i only showed the the the main components but there's sort of like interim steps that happen in between and you are able to intercept those and um yeah just add event listeners basically and then you can respond depending on the state of the service worker or the network request another questions on both questions does this work with node.js primarily what is this oh yes yes if i'm not mistaken right so this thing works or not so there's an sdk the firebase sdk you can just download it download it and then you can interact with the with the firebase that i know with cloud functions they definitely they use uh node node.js um basically trigger send a message to your project and that will on your servers so in that case are you specifically interested on the upload status how far you are with the upload is that what you're asking configuration of the service worker notifications based on the second question of how do you check your cache okay okay okay um oh yes no no definitely absolutely we at the bank we use a lot of some features uh correct me from wrong uh pj oh wait wait he left it by the time he ran away when they introduced me a piece um yes you can use it in production um i've i've used so everything that i've shown you know i know i've showed you a sort of like a toy app but um this is still under production i've built something for a nonprofit organization it uses all the features for angular uh i mean it uses angularfire too um with all the features we don't have internet connection but um yeah anyway but it's um it is ready for product you can use it today well if it's good for google i think it's pretty safe um i think maybe one thing that i didn't mention was the fact that with angular specifically um they you know most of the apps within google they they build using angular so before they release a new feature they'll have to make sure that they don't break any of those apps um so you know with that rigorous testing i think you know it's pretty safe for us to use as well cool all right well thanks richard cool stuff thank you so much