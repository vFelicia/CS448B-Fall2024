hi everybody welcome to free code camp i am sam from python basics and this video we are going to be looking at the td ameritrade apis and we are going to be going from start to finish dropping in some pandas it has everything json objects how to dig into and build your own stock screener so what what is an api an api is an application programming interface so basically what that means is all right we know you are going to want information from us we're going to control how you get that information we're going to make it a little bit easier and then we're going to get it to you and we'll go through all these steps so first off i think i've made this a little challenging so behind me so for you the register is going to be where you're going to want to start and also it's developer.td ameritrade.com fill this in and of course then after you do it the login is right beside there so i'm going to go ahead and well actually we can even look at this so this is getting started so first you have to create an account then what you're going to do is you're going to create an app and we'll just uh just so my apps so i'm going to go ahead and log in sorry here we are getting started creating a developer account then new apps so right here when you go to my apps there's going to be add a button and you just name it the only thing that is very important right here is the callback you can just do the http local host colon 8000 and that's all you need not anything fancy so we get that set up and the verification process goes uh very quickly so if you saw that right there new app when you get to this place and here is mine and there's going to be a little bit a couple of blurred things out here but this is going to be your key right here and we're going to go through all of this and we have that set up yes right here http localhost 8000 i'll have that down in the description below uh if you're not quite sure if you've not seen uh the django series and you have no idea what this is referring you can just copy this and place this in here so all right now the apis that we're going to be working with are instruments and this is how this data is going to be returned and we're going to go through all this but right now this is just a little warm up and then you can actually then choose and we'll go through all this type of data i know this can be overwhelming right now but real quick video today and actually tomorrow's video is going to be a challenge video that is a challenge that you'll run into uh when we do this so and then we'll pick back up uh tomorrow and then the following week and we'll just delve into this and we'll go slowly but surely like we always do and today we're going to be looking at all of the different apis that the td trade td ameritrade uh have to offer and also after that we're gonna have the answer for our challenge eight so if you're new here thanks for joining us make sure you hit that subscribe button uh notification bell and if this type of video you like go ahead and hit that like button for me and also make sure you stay in tune until the end to watch right here because uh over 800 videos there's a good chance that you may not have seen all of them so all right let's just get into it so the apis that ameritrade has for us are uh pretty impressive and after we get done i'll show you the one that we're going to be using next all right so accounts and trading so i'm only going to be showing you stock data but everything that i'm going to be showing you you can extrapolate out and use for any of these and i was posed the reason why i'm saying that specifically is i was posed the question am i going to be showing you how to make a trading bot no one i don't want to be liable for anything like that but two i want you to understand and see this and really kind of get you interested in investing not in um trading so there we go all right but here are the accounts uh here are the apis of how to trade place an order cancel an order uh you have your authentication token right there uh here's here's the uh instruments and most of these as you'll see especially like markets and i'll show you another way you're going to have a single you're going to have one for a single search and then multiple searches so you can have look at the multiple markets because there are many many markets around the globe not just the nyse and the nasdaq then you have the movers which are companies stocks that are moving making big moves in one day excuse me guys i'm sorry and also i am going to have the solution or a solution to our challenge 8 after we get done after i announce which api we're going to be using option chains so options are a tool that you can buy and it locks you in and gives you the option to purchase a share at a certain price price history that's pretty explanatory you can go back in time and any length of time in any interval quotes of course then you can go and get single quotes multiple quotes then you have your transaction history user information and watchlist so you can then create uh an actual lists of things that you want to watch that you don't then have to go and check every day this is very very handy and it can even go in and do multiple accounts so all right all right so the one that we are going to be begin using and interact with the most is going to be our uh search search instruments and we will and each api has its own address very very useful so now let's deal with our challenge eight so there is a limitation to our queries it is a max actually i found that 500 worked so i don't know what the max is i think i toyed around with it i think 600 fails so it's somewhere between uh 5 and 600 so 500 real easy round number so let's just go ahead and look at our solution so let's just say and then let me get my notes and so all right our dilemma was we have 5450 so we're going to start at zero and end and end at 500 so we're going to cycle through 500 so while end less than x then print start end hey is somebody in there okay good i want to make sure it wasn't calvin and then now here's the part so all that would happen is right now i would just go and it would print 0 and 500 repeatedly because i'm not changing so now after we print it this is this is the coolest one that i think i remember so i'm gonna just reassign that i'm going to add my to my endpoint i'm going to increment or in place all right so let's see how i did all right so now i'm close but i have a dilemma right here so now i'm outside the loop start equals end then i'm going to minus 500 then my new end is x and print start and end saboom so here i go i have zero through 500 500 to a thousand thousand to 1500 so on all the way through to the end it is literally that clean that simple and i will show you how to integrate this into our queries and we're going to use all of the tools that we've used so far and it's quite interesting and then we're going to really delve into some very cool stuff with pandas and we're continuing our series with the ameritrade api so i said last video on this subject that we are going to be using the instruments so let's just go ahead and familiarize ourselves with this so if you're new here thanks for joining us this is what we do we do micro videos one video upon a time micro videos and we build upon it so we are doing our series on the ameritrade apis and we are looking at the one api that we are going to be concentrating on so they search instruments and the way that this api works is here's actually the web address right here for it and the way that this works is you're going to pass in your your key oops here we go your key then the symbol that you might be interested in we'll just do boston scientific and then now here is the way in which you're going to look at it so let's just peek over here so for the bonds like this stocks fundamental data and then the the instrument search so in the projection we're going to type in fundamental and then oops i guess i spelled it wrong last time fundamental the actual returns the fundamental data of a single stock instrument and if we wanted to we could pass in a more than one but let's just go ahead send this off and look back at it so here we go here is all of the information associated that with this api returns it returns the symbol and as you can go through you can see all these tags um and as if you look very carefully this is a dictionary so key value pairs and it has a tremendous amount of data and uh in a couple videos we're gonna we're gonna touch on how the type of information this is and how to then begin to extract it and then place this into a pandas pandas data frame and really start crunching this stuff down today we're going to be continuing our series uh for the ameritrade api i'm going to be kind of branching a little bit off of it so we're beginning to build and uh our extend our knowledge and understanding and really our access so really what i want to do today is one so you don't have to have it around don't need to retype it copy it we're actually going to talk about how to handle keys so as you can see right here i have a keys dot py and that is actually because i don't want to have to blur and forget and go through and scroll and keep my key guarded so you can't see it and it's really a good practice so from keys but if you're new here thanks for joining us this is what we do we do micro videos one video upon another and i actually have the key just named ameritrade ameritrade and as you can see right there spider knew what i was doing and then now the only error i have is saying it's brought in but it's not used so now i don't have to worry about you guys seeing it i can place it in where i need to use it and move on from there this is an outstanding actually it's best practice so you're going to have multiple places that you're going to go and you just place it in the same file so you won't have to lose track now like i've always said don't ever delete anything now you can start organizing these things at a time because you're gonna you're gonna start spreading your wings out and going places and using multiple apis where you're going to have multiple keys so now you store them all in one place title it the tool that it is and place it in your keys.py or whatever config config py however you want to do it but this is best practice and i thought this was a perfect place to add this into our toolbox so there we go guys so all right let's just go ahead and get after it so if you're new here thanks for joining us this is what we do we do micro videos so last video actually i guess two videos ago we talked about uh which api we're going to be using and we're going to be using the instruments for multiple for multiple tickers but today we're just going to be doing doing one right now because what we're going to be focused on today is the actual response because we need to start unpacking that so if you're new here thanks for joining us this is what we do we do micro videos we do one video at a time and we build upon it so here is our dilemma symbol actually we'll leave that so all right here is our key right here here's our address and this is how it works so we're just gonna do our payload then here's our dictionary that we're going to be passing in so our api key then it's our ameritrade and then come down then our symbol and we're just going to pass it let's pass it google yeah let's see did i do that right is that google symbol yeah all right then and then wha how do we what were how do we want it how what kind of information we wanted and i said we were going to load the projection we want that to be the fundamental dementor and tell all right all right so we're done with this so now uh results and i just realized i have left out because we have left out a ton right here so import requests all right and that's all we need right now yep requests so then requests dot get then what are we going to use we're going to use our this is where we're going and what are we going to what are our params and we're going to pass it payload all right all right so now we need to really look at we haven't really delved into what in the world comes back and ways in which to look at it so here's our response so let's look at dur on results okay so what we're going to be looking at today is a json object and this is how we're going to begin to unpack this so you can what we can see results then dot what text okay so that's that's that so here it is as as a string okay then that's okay so then i got to go in and get stuff or i can turn this into aha so now i just get the whole object so now i use a json i pull the json object out and i can go through and i know how to unpack this dictionary right here so i have a dictionary then a dictionary inside that and then here we go with the symbols so and all of the information 52 week high 52 week low p e ratio peg ratio which is i am a huge believer in the peg ratio and we'll we'll break down the ones that i truly believe but there we go this is the building block of where we're going to go from here and we're going to add all of the things that we've done before especially our loop of how to handle 500 uh i can't remember if we're doing that one next or if we're doing uh no next video we're going to be handling um something very interesting it's going to become handy but we'll do that later so there we go guys please please please drop any comments questions video requests make sure you join in that discord server i don't if you're brand new here i don't want you feeling alone somebody's on over there at all times uh i have an admin and a moderator we are literally around the globe so join up there somebody's always on answering questions so all right um here's our main layout but we want to test all of the ticker symbols so let's just go ahead and bring this in so if you're new here thanks for joining us this is what we do we do micro videos um we break them down one at a time and build upon them and probably the reason why i love that so much is because that is one of the subscribers ways to describe it so we have a pretty large growing community uh especially over on discord um so if you are learning python alone go ahead and join the server and you will not be we have usually somebody on over there answering questions all the time so all right if you haven't seen before this uh is also the this file is on my github so you can go and grab it and pull it down let's see company list it's saying what is it saying i'm not using it oh all right i need to bring in oops import pandas as pd alright so what i'm going to do is i'm going to bring in this spreadsheet and then what i want to do is i want to then grab only these symbols so we're going to do this too symbols if i can spell today but i hope everybody is doing well all right so then in that in that uh file there is a column named symbol and we're just going to grab that and then what we're going to do is i only want the values of that and then i want that put into a list so we are covering a lot of things right now that pandas can do for us so i'm grabbing this and then i don't want this put into a pandas series i only want the values and then i only want that to be put into a a list and it's going to be assigned then to symbols so all right so now i have where i'm going now let's throw in all of this right here all right now we ran into a problem last time where we or i i had expressed that there is a problem where we can only screen 500 at a time i've learned i don't know exactly what the number is but i know 500 works so we are just going to do that so now we need to do this in a loop and we've done this loop before so while oh yeah also let me get this around so we need our starting point equals zero our end equals 500. so whoa so while now there was also a flaw in the way in which i did this we could do this one more time outside the loop and print but we're going to use this while start is less than uh and we also need to do len of no we don't have it yeah len of symbols because what we're doing is here's our list here's our list of symbols and we're going to then iterate through these 500 at a time so as long as start is less than the end we're going to do this one more time so let's bring this all over and then now we're going to make a new one right here tickers because this is going to change so then we're going to symbols then our start through stop or excuse me end and and we're going to change this right here to tickers all right then when we get done we need to then increment up start is going to be now end and then end end is going to be 500 larger than before all right let's do that again so i know i've just changed a lot so we brought in our symbols this is all of the symbols of all of the nasdaq and all of the nyse it's going to be 4 000 excuse me 5456. all right so we also know that there is a problem where this api will only well it will at least i don't know only it will at least search for 500 at a time so now we're going to check 500 at a time and this is how we're going to do it we're going to go through now i think we're about at a good stopping point right here and we'll pick up on this next video because i know i just dumped a lot on you so but right here we're going to iterate through and the reason why we chose start is so we don't have to do a loop because if we did end right here we would then have to do this one more time outside of this and i don't want you to have code here i remember the first time i tried this i ended up i had code here and then code here it's the same code but accomplishing the same task so then it dawned on me i could just change start from end because you can have your endpoint be larger than what are the choices you just can't have the start be out of index all right i'll say that one more time you can have your end out of index range it won't care but you cannot have your start be out of index range so there is a nice little tidbit so there we go guys so where we left off was we changed this over we brought in all our tickers right here we changed out our api to multiple because before it was google goog but now we have this where we've also i've also shared you the pain that i know we can check 500 at a time so right now we are going to be looping through these in 500 we're going to increment we're going to iterate over our symbols and it's going to be tickers and we're going to be doing 500 at a time now we need to then capture this data and go through it and then come back and revisit it so we're going to pickle these responses and come back and touch them later so we're going to do this now then we kind of need to deal with a couple of things so we're going to add in time because we're going to need to pause this because if you have a fast computer when you we're gonna grab time and use that as our file name if you've seen how to handle changing multiple characters that's actually where this came to be and automating um file names that's also where this came to be these uh this problem that i have and then we're going to use regular expression if i can type correctly regular expression to change all of the problem characters for that windows does not like to have file names named all at one time so all right so let's just go ahead and get at it so we have our results now we also looked last time at how to look at json coming back so we're going to take our data then it's going to be results dot json all right then then now we need to then save this file so our file name file name is equal to time dot so what this is going to do is it's going to spit out uh the time down to the second because we don't want date uh because that's not differential a differential enough and then if you have a very fast computer it may have this took me a while to realize why i was missing data i was getting all these back so we're actually going to pause one second in just a minute all right so let's do that then we need to add our pickle file dot p k l and i just realized we also need to bring in pickle didn't do that yet so if you've not seen and you don't not sure exactly what any of these are you can go back and search all of these i've done videos on every single thing nothing is new here yet and actually i don't think anything is going to be new here at all we're just cramming it all together so now now we have all right let's see where we are so we've got our data we've got our file name now to save you a little bit of pain there's going to be two things that windows is not going to like it's not going to like the space in between the time and it's not going to like the colon in between the 9 the time so we're going to change this name equals re sub substitution then space then colon then close out and we're going to replace it with underscore and what are we going to be replacing file name there we go so all right so there we go let's go through this one more time so our data then that's our json object here's our automated file creation then we need to replace the space and the colon in the file name because windows will not like it and then now now we're going to create the file and then dump the data in so here we go with open file name oops there we go as oh no right i'm gonna close that out as file then pickle dot dump not jump data comma file all right now yeah file yes file all right so here we go let's just go ahead and get this running and let me just show you as this occurs we're going to be now having the files show up and come through oops ha ha if you add two t's it does not know what you're talking about all right so we need to fix this i did not reference this import pickle as pkl sorry guys hopefully that will be the last mistake that i've done but these are all the type of things that you're going to make mistakes on and you become very very proficient at understanding the code this is why typing is so very very important so all right oh man i meant to have these sitting here and popping so boom this worked out i think but let's just also make sure we do time dot sleep just for one second i forgot to have that in there just in case i think i'm a little bit slow today let's see yeah i got i'm eating up a lot of ram so let's just make sure i realized that we didn't i think i lucked out i got a lot of programs open so make sure you're putting sleep one second right here to make sure that you're not going to have and miss any any file names because that is exactly it as you can see right here boom each second apart and if i were to close some programs i got a lot of stuff running right now uh i could have missed some files but as you can see this is down to the second and that's what you want because you need all of the entire time or your files will have the same file name and we'll go and you'll have a problem and you'll start losing data so that is why time is very uh handy now if you want to do more and you want to come up with specific file names and increment that's great i wanted i always go the easiest route and time was the first thing that came to me so there we go guys so where we left off last time is we had a bunch of pickled files right here so now we need to figure out how to extract and merge all this information here so if we really think about it we need to find out what files we want or we could track the files that we are creating right here or right here and then we have our variable name right here so we could do something like this as we as we create them we could then add them to our files list and just append 5 f name the reason why is because then the next step that we're going to do is we need to look and see let's go ahead and rerun this we now need to see how in the world we're going to pull from all of this stuff that we have and how in the world are we going to use it and you'll see that yes it is a dictionary after we grab it as a json but it's not the most userfriendly dictionary that you may have seen before so i'm going to show you a little template so let's see len of results i think is that's right len of its data there we go so let's see is this uh all right so let's grab the keys data let's see you can see that all right so here are all the keys so let's just grab one of them data ugp i don't even recognize that ticker symbol all right so holy moly okay so we have inside this then we have our fundamental then inside that it then has a key of symbol aha okay so we need to then unpack the fundamental which all right so i will show you then what we need to do so then we need to we need to come down here so what we're going to do is then we're going to throw this into a list and then this has everything and then we're going to throw this into a data frame so we need to go and grab we need to grab every single we're going to go through each pickle file move everything over then throw it into a data frame and we're going to extract what we want so what we're going to look for is what i have found to be the most telling of what the way that i look at things is we're going to look at we're going to pull the symbol the net profit margin for the quarter then the pe then the peg p e ratio peg ratio and the 52 week high so those are all keys so let's just see how far we get in this so now we're gonna make a new list empty list data let's bring this up here and for file in files then with open and file rb as as file i have written this one in a while then we're going to call this info and we're just going to use our keep our pickle kl dot load and everything that we have done is there is a video on each specific thing that i am talking about that's why these are micro videos all right so now so now i'm going to pull all of my tickers because then i'm going to go through because each file has a key and i don't know exactly so i'm going to pull these all out so let's look at this to tickers equals list info then i'm going to go then i'm going to make my points of interest and these are the keys that are here see this is very specific symbols then net here i'm going to copy all this because i know i'm going to type this wrong and yes you're correct i don't like this but all right i will have this down in the description below for you guys to look at all right let's move that back over points then for ticker and tickers for point and points ticker dot append info now check this out i'm going to throw in ticker then this is always fundamental because it's the first layer let me make sure i typed that right so i'm going to cheat okay did not and then my point gonna grab that out then my data append each tick all right okay we did that in about seven and a half minutes so i'm going through each each pickle file 500 500 symbols at a time of a returned there we go of a returned uh fundamental of all of these market movers okay all of these market datas right here so you may like can you be you might like different markers so then you would have different points that was why i decided to use the the term the variable points you might want to be looking at volume i know i had a question uh not too many days ago about wanting to see change in volume this has average daily volume so i can show you how to merge and pull from different data frames we'll be doing that very soon but this is a great stopping point we are now we are about to merge and just dump this all i wanted to do this right here ah one last super important thing so now i just realized so if you do not do this you will have your system overrun with with files that just build up throughout the day so now we need to throw out throughout the day or weeks os so as we go through it as we pull out all the useful information for us we will then delete that file forgot that one last part so cool got through all this good okay so now like i said we have a we have a list of lists with this data right here it's going to look just just like that and it is literally this this simple right here so now we need to make our column titles so we're going to call those points all right and then literally it is just a we're just going to copy this boom right here so this is what we're going to call them this is what the keys are in the j json response but we're going to title them symbol margin p e peg and 52 52 high so because we know what that is and then literally it is this simple let's just start and go from here so df df results get this out of the way so you can see results mpd data frame the f is capital just two uh i always had a hard time with that and up here all the list of lists is data then we drop in i might have to stare at this i can't spell column columns and we get pass in points close that out and literally that is it so let's run this and as we can see over here oops i need to be right here run this and as that's going through we can literally just see but this this is this is one of the neatest things that i have seen that when i started learning to program that now because when i when i was doing it as you can see they're just building here that before i would put in to my computer and have stuff come out on the screen that was very cool now that then it got to the point where i'm now having criterium and i'm going out and i'm touching another computer and it's sending back information and i'm in control of the information that i'm getting and when i saw that i was i thought i was hooked before when when all these all of these things uh were happening but after after this it was it was uh no holds bar so then now we're going to have these as they were building so now they're going to go through now we're running through each of them and placing them in uh the list and they will start now going away boom there we go okay and it's literally done so now df results and here i go so now we don't need that so now we slide over so to remind you the way that if you've not seen any of the pandas pandas series again try we'll try not to take that personally you can go and see uh two playlists one one is a pandas and one is a pandas project but the way that this is is there's my index here's how big how this is this is a 5289 5289 rows by five columns and what that what this automatically does is it prints out the head and the tail of the data frame just so you can get an idea and we'll go from here uh we're going to be looking at how to slice a data frame with a pandas series and with multiple series so all right let's just go ahead and jump into it so if you're new here thanks for joining us this is what we do we do micro videos so as you can see we're going through and we're pulling down our our pickle our pickle files and then we're going to then go through them and we're going to then be building our data frame and as you can see down here we've we've dumped this in so if you have not seen in these other videos there are nine of course and everything that we've done here before there's been a micro video on but this is going to be something new that we've done so here's our standard that we have uh i'm going to delete this so i have a this is our standard i know how to now slice with we got data frame peg so now this is going to be so i've gone from my df results data frame which has 5288 down to 450 so i've i've gotten rid of i've sorted out i've sliced out a pretty significant amount but the issue is is i want to have a certain range of margin a certain range of pe a certain range of peg that i care about so there is a way that i have we've done a video on this and so we know and so we have the keyword the condition and but now we also learned about the bitwise operator the and sign so we have true and true so true and false so this is the technique that we're going to use to create what i prefer and what i have found over time is the best practice of how i sort so we'll just go ahead and look at this and it's going to look something just like this so i have my results so i'm going to do df boop i'm going to change this df dot peg we're going to change this out and then just like normal df results and i'll show you how to do this so then we open it up now these are uh these are tuples okay so df results then we pass it in just like this is how we're passing in our multiple series so then peg just it's it's these over here so capital i have my peg capital and then start then i have it i want i want the peg ratio to be less than one so to remind you what the peg ratio is is it is the p e ratio divided by growth so if you have a p e ratio of 12 but you're growing at 12 times your peg ratio will be one so you can have a high p e but as long as you're growing at the same rate you're basically back at zero so that's why i like less than one so now and and then so we'll do this and then df results oops whoa df results i don't know why i capitalized that so i want it between a range so i want it greater than zero but less than one so then peg again oops close that out and also greater than zero sorry greater than zero close this out another and then i want df results and then margin then close this out and i want this to be i want you to be making a substantial amount of uh margin so i have that as 20. then another one the last one is i think this is the last one yeah and then i want df results and i want the pe to be greater than 10. then i close this out then boom let's see if i typed all this right nope all right so we're just going to copy this and i'll show you let's see and i forgot some parentheses so all right i knew this was a long shot all right so here all right so yeah i didn't wrap so make sure each one of these is wrapped in a tuple and going forward so i think that's what i forgot right somewhere right there right there i didn't close that that one out so all right so peg less than one and peg greater than zero and margin greater than 20 and p e greater than 10 so then now let's check this out boom 149 different companies that then i can examine are they healthy and then there's ways that i sort this out but this is a very good starting point for you so there we go guys and we're going to be looking at two ways to view large data frames so if you're new here thanks for joining us this is what we do we do micro videos uh one video upon another and we build upon it so all right so i'm gonna show you one that one way i like to do it so we can see the um the column names and then i will show you another way that you guys will probably like because you won't need to remember the column names but i have a very short term memory and i like to be reminded so all right so we're going to make a function and basically it's going to be like a loop oops sorry i've been a little off today so i can already feel that the typing is going to go so basically we're going to kind of do a looping through but we're going to change this as the size of however large you have your little your little window right here so we're going to go our start oops start equals 0 then stop is basically going to be the size then while stop oops less than length of our df peg then i'm also going to show you show you how to sort in place we've already done sorting by columns but i'm going to show you in place and how it's going to give you maybe a little bit of what's going to look like an error but it's not df df peg then we're going to go start and then stop close this out then start oops start becomes stop and stop is incremented by size and we could have changed this to uh ooh and i misspelled view and i haven't said this in a while but this is not a spelling channel and we could have used start and only done that once but i've already committed to the stop so df peg and then one more time start stop close and close so all right let's run this and it has another w i i apologize everybody like i said been a little off today so all right as we're going through this you can see wrong one there we go they are starting to build and we're building our but yes if you have are just joining if this is your first video of the api there are 10 previous or no's to today's 10. today's 10 and um well now i want to check today's 11 and uh we are now touching hey was it already done it's already done so now we have our so we have our results which is everything all 52 88 then our s our skimmed down are sliced with all our conditions now it's today it's 150 so now now right now when you type this in you only have view let's see if 40 fit here all right oh okay so it looks like so the reason why i like this so i could have made it a little bit smaller the reason why i'm having this done in groups is so because i made the mistake one time where i go okay that was the peg but right now this is not sorted oh we didn't sort it yet so let's sort it so we we do uh df peg then we're sorting by this is what we're going to sort this is the method sort value then we're going to sort it by in ascending order by peg i want to know the lowest peg now you're going to see this and it's going to look like it's going to throw throw an error ah it's values i am so sorry everybody with all this wonderful typing so now i have it in ascending order and then so now you don't have to rerun the reason why i'm making a function out of this is you can do this so you don't have to run this script you can toy with this and then now you can go and view dfpeg or if you wanted to do this and you change change your data frames you can add that so this is why i like this so let's let's change this to 35 and then now it fits right here so i only have to remember just a little bit then i have my reminder of my columns and i come through now for those of you who have exceptional memories and do not need that reminder there is a way so we have as as we have here we imported pandas as pd so there is a function pd dot set option then we're going to be displaying all the rows so display dot max underscore rows so we want as many so basically this is kind of arbitrary you could set this to 10 000 but we know there's only 150 so i'm going to type in 200 so boom so now i'm saying every data frame that i call right now print print them 200 at a time all right um and then move on as as a head in the tail so this is going to encapsulate all of them and their data frame is yeah df dot peg so now i have all 150 at one time without any of the columns being reprinted so there we go guys two separate ways to view very large data frames we have one more thing to do we're going to be looking at the pandas data frame is in method what this method is so very cool let's just go ahead and see so if you've heard about join in uh sql i was about to type join so we got uh our data frame peg i forgot it's still set on all of them so we have and then also we have our all right let's clear this out our data frame all right okay good so what we're gonna do is let's say this information that i've screened is proprietary and i don't want anybody to know about it but let's just say i'm making a um making a list and i have a newsletter and i'm sending these out but i only want to give you the symbol the company name the sector and the industry but right now my data frame only has the ticker and then let's see what else did it have so it has the peg the pe the profit margin and the 52 week high that's all our original data frame had or the one that we're most interested in and let's see and it's still there but our df so this is oh yeah because we have that only doing 200 at a time so this is where this is in method comes to be so i want to pass you this information i don't want you to know the other information so now i'm going to take since there is a similarity just like our join in sql we're going to use our symbol our symbol column and our symbol column and that's how we're going to associate and then this data this data frame only with this information will come out so let's just go ahead and do this so we need to pull out it needs to it takes it as a list so df symbols equals dfpeg symbol close this out then i'm going to put this into a list because like i said my my uh it is in method takes a list so now now i have from my here df symbols so boom here's my list of tickers and then i'm going to pass this into all right then i'm going to pass it into this and this is going to make a boolean just like all of our other series so i pass this and once you do this a couple times it makes sense so now this is my my my df my data frame is my data frame that has my symbol uh my company name my sector and my industry and that one was capital s capital s y and vote symbol close this out is in then i'm going to pass it the list and we call that df symbols this is just like our index indexing just like this over here so it's a little odd at first when you when you think about when you see it but once once you do it a few times it makes it makes a lot of sense so now new i just have true and false so is it in or is it not so then then i pass this and here's my new series excuse me data frame so then i'm going to pass this boolean just like if it's passing or failing just like this scenario just like here equals in my my data my df my data frame is my symbols uh name sector industry then i pass it new my boolean so now companies so now here i go i should have changed that setting so now unbeknownst to the recipients they have no idea how i've come up with this list all they know is that this list is highly qualified companies to move up higher they don't know the criterium that is i keep that on my end and there is no no extra work i don't have to touch but this is a perfect example of how you would go through and use that api to check for um anything moving that is perfect for what you deem is ideal for uh perfect movers if you're interested in i know i've gotten a question on volume so you compare these two databases excuse me data frames to each other and then you go the is in and these data frames act exactly like tables and you use the is in to do your joins so there we go guys