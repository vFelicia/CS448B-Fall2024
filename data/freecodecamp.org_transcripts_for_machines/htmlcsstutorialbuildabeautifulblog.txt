hello and welcome to how to build a beautiful blog i'm zadek and you learned to make this website from scratch and these are interactive scrimba screencasts so you can actually pause me go edit the code make a change that you'd like to see save it and come back to it as you like now if you haven't seen the cosmos definitely just stop what you're doing and go watch that don't worry i'll wait all right so let's go back to our website now one of the cool things is that it's responsive which means that it can respond to some change and in this case it's responding to with as the width changes so can our website and that's what allows us to have a mobile and a desktop version all without having to build two separate websites i don't know that i've seen this before and if you have that's really cool this is a debugger and it allows us to understand our website so we'll use this and some other techniques as we build our site again i'm zadek and if you have any questions or comments even feedback can reach out to me on twitter by clicking my face otherwise you can follow me here and without further ado we are ready to begin welcome back in this screencast we'll cover four quick lessons that are essential for us to get started so the first lesson is to recognize that all websites are are really just trees and to be even more clear than that they're upside down trees so take a look at the following we have a tree with the root at the bottom instead of at the top and it has two children elements or call these branches and these branches are our head and the body the head is where we put our website's style and any metadata about our website whereas our body is where we put the content of our website so really when we write html what we're really doing is adding branches to one of these two different branches so we're adding information to our tree okay now next lesson understand that these branches or what we can call elements or tags in html they can have up to three different appearances now this is a selfclosing element it neither has a value nor does the value required to be closed this is how we'll most commonly use html elements now finally elements can have an optional attribute and an attribute can have its own value and going even further than that elements can have multiple attributes and attributes can have multiple values now this is probably how we'd start writing any website the difference from the code that i showed you here is that this would be a modern website as we've added a few necessary tags this element tells the browser that we want to use html5 and we don't want to omit this because by doing so we let the browser decide for us which version of html to use and in most cases you really don't want to let the browser make too many decisions we want to be explicit here so you definitely want to include this now we have inside of our head tag the meta car set and the car set is acting as an attribute whereas the utf8 is the value and this tells the browser that our text is unicode which allows for all sorts of things including unicode emojis now we have a title element and this titles our website to our browser so if you look at the top of your window you'll probably see titles and this is how we assign a title we have another meta tag and we have multiple attributes this basically just tells the browser how to render our website on mobile devices now last we have a little bit of content and a little bit of style so this is the text hello world and we've wrapped it in a p4 paragraph i'll just show you in the browser will look like this now the reason that the text is not black is because we've used some css to style our paragraph css is a combination of a selector a property and then value what we've done is we've selected the p for paragraph element property color and then the value of green and that's why we have a green text web page okay now the final lesson and we've talked about this in the first screencast is responsive design which is this bit of code here i'll just show you what it is and then i'll explain what it is so as we resize our website you'll note that the color changes and this is possible because of responsive design our website can now respond to some event and in this case it's responding to the event of whether our website's width is at 8.5 inches or less now there are tons of events that you can use for what's called a media query that's what this piece of code is but the point is that this is how we can plug into our website and it makes some changes and to be even more clear take a look at the following what we're actually doing is if this event is true then we are overriding paragraph with the following color so we're overriding css in some circumstance or event and that is the essence of responsive design all right i'll see you in the next screencast welcome back now you'll note that our website now has three extra elements and these are importing css files we don't have to use our style tag for everything we can actually import css files using this syntax so what we're doing is importing a font from google fonts and then i have two local files in the folder styles and then the two files reset and debug css which you'll see over here so i mentioned it before but this aesthetic is our debugger it helps us understand our website but what is a css reset so by default browsers make some decisions for us and it's kind of nice but at the same time it's pretty annoying so what's happening is that browsers set their own properties and this can be really frustrating because we don't really want to assume anything when we start our website we want a blank slate and css resets are one way to do that so what we're doing is telling the body and all of the body's children that's what the asterisk is for all the body's children which in the last screencast would include the paragraph hello world to apply the following properties universally and this makes it much easier for us to start with a clean slate because we don't have to deal with any opinions or properties that are predefined for us now you can find other css resets online i'm just going to create our own for this screencast now here you might be wondering what is root well if you remember it's the root of our tree so it's another way to say html and we are defining a font for our entire website now you might be wondering why do we not need an asterisk here and that's because the font property actually inherits from its parent so by defining just for the root element all of its subsequent children elements will automatically inherit from it this is an example of where we can set it once and it applies everywhere now finally the debugger that you see here i'll show you how we achieve that we are just setting three properties to all of the children of our body and then using a special important value which i know looks ridiculous so that we can apply css no matter what if you remember back our media query allowed us to override css in some circumstance well the important would prohibit that from happening because it's asserting that under no circumstances can these properties and values be overwritten using important in general is often a pretty bad practice but for a debugger it's a perfect use case now if you wanted to disable the debugger you could just as easily misspell it and now it fails to load the file and this is great because we don't need it anymore and if we want to back we can just fix it again or you could just as easily remove the whole line all right in the next screencast we are ready to build our website i'll see you there welcome back now in this screencast we'll make the following design this is our website on a mobile and a desktop device and on the left it's pretty straightforward whereas on the right we have this extra column to the left and the right of our article so let's go ahead and make that now start with an article element and then we'll put the text article inside of it okay here's our website and it looks pretty terrible so let's add some things open up the article element and then we're going to say i want you to be a grid what we need is three columns so we can template three columns by using the property grid template columns and what we've done here is we've defined three columns each column is now occupying a third of the website's width that's what the fr is doing it's a fraction unit so we take whatever the leftover width is and we divide it into thirds now our website doesn't really look like that that's because the article has fallen into the first column and so to fix that we need to tell any of the articles children that i want you to fall between the second and the third column which is from here to here now what's great about css grid is that it's so easy is that it's so easy to make changes take a look at what i mean if i make this 3 over 4 then that would refer to here to here and you'll see that that is now reflected and again if i wanted this to occupy the full width you can just do one over four because this would be one two three and four now what else is cool is that if i wanted this to be instead of a third fifty percent i can just change that to two okay so this looks better but it's still not big enough if we look back here it really needs to be real wide and what we can do is make this a fixed width of 8.5 inches okay now if i open this up you'll see that it looks that it looks right and to make this look a bit better we'll add a height so that it occupies the available height now we won't keep this permanently it's just for this screencast now next is if i view this on a mobile device you'll note that we have all this extra space and that's because of the fixed width here so what we need to do is make this responsive we can add min max which now means that this column is responsive it'll go from 8.5 inches down to zero and we don't have any extra space this is really great and you might be wondering what happened to these guys they're just gone and that is that these are the remainder if our website is less than 8.5 inches we don't have room for these and so they're just simply not displayed all right now finally the last thing that we can do is see how the text is centered here well we don't have that in our website but one way we can do this is to add a utility class this is a really fast and nice technique to add some css that may or may not be permanent so right here this would be permanent css we have written it and we have the full intention of keeping it now alternatively we can use a utility class to temporarily to temporarily add some css that will be very easy for us to remove later i'll add an attribute that is a class that we can use to style now this doesn't do anything yet what we need to do is we need to create a class called debug center and then our article's text will update okay so i'll open up debug.css and then here we'll add the following class classes are prefixed with the dot that you see that's how we know that it's not an element like you see here it's an attribute or to be more specific it's a class we're going to use flexbox which is a fast way that we can position elements inside of a box so what we want is to center it horizontally and vertically this is how we center horizontally and then now is vertically all right so we saved that and opening up our site now article is centered because we added the utility class which is an attribute and then we created a corresponding class to add some properties to this element the paragraph and now we can have multiple articles or what would be a blog post by simply copying and duplicating our article now every article occupies our windows height and you can see the next article after it cool all right now we are ready to add some more complexity to our grid and i'll see you in the next screencast welcome back this is our website i've just removed the centering class and you'll note that the text is not really readable at the top left corner so what we can do is add some room so that it can breathe we'll add a padding to the top and the bottom as well as an extra column for the left and the right sides as compared to our previous design okay so what we can do is first i'll add back our class and then now we'll add a padding to the top and the bottom you can see that that is now updated now you might be wondering what is this zero for and if we look at our website our padding is only applied to the top and the bottom there's no padding to the left or the right side we could put a value here and that would reflect the left and the right side of our article but instead we're going to use css grid for this because it's a lot more flexible going forward okay so what we can do is we'll break up this 8.5 inch column into three columns but the left and the right columns will act as the buffer between the left and the right walls of our website what we've done is we've broken up the 8.5 inch column into three but the sum is still 8.5 inches okay look at our website it looks terrible and what happened is is that this line is no longer meaningful we could update this to three over four which would indicate from here to here because one two three four five because these are the actual positions that we would need so three over 4 represents the constant column okay but instead because that's kind of annoying it's referred to this position as a value and just like that our website now understands where the start and the end of our content is so this is a much better solution than having to count every time we make a change okay now the next thing is that when we make this a mobile device you'll see that these columns are still too wide and that's because they are fixed now i can't actually use a min max here because css won't understand how to deal with multiple min maxes in this way but instead we can use a media query to deal with this so now if our website is at 8.5 or less inches we'll override the previous articles grid template columns with whatever we put here so instead of a fixed width here what we can use is a percent and now you'll note that that column will resize with our website's width and that's how we achieve the responsive design here okay now this might look a bit weird to you why do we have a min max if we have a media query and we can just fix this real quick instead what we can do is say in this case just be 7.5 inches and then in this case we can say be 90 so that's a bit simpler on the eyes let's take a look it's all good all right that's it for this screencast i'll see you in the next one welcome back in this screencast we're going to focus on the content starting with images okay so you'll note that we have multiple with images and what's going on that these images their widths are actually the grids that we've defined okay so i've moved the css into its own file called article.css and we're linking to it here you'll note that we actually have up to four different sizes so the first two look the same on a mobile device but on a desktop device they're actually different widths now there are two more sizes we can accommodate for the first three but the fourth one we actually need to change our grid so all we need to do is add another column to the left and the right of our center column and then make this one smaller okay now our content has stayed the same because we use start and end but we can represent a five inch image and still provide a margin to the left and the right okay the next thing is that we need to update this because this is no longer true so we can just take these proportions and then represent them as percents all right that was super easy now whether we're on a mobile or a desktop device we'll have a consistent grid that is also responsive all right so going to our index you'll note that i've cleaned up the article because we don't need any of the other elements we'll start to add our image so i'll show you in the browser and this and this looks terrible so we have a couple of things to fix first is that we don't want our image to be greater or less than 100 of the available width so i can say 100 now i don't need to say height because css will just resolve that for us going back to our web now it's starting to look now it's starting to look better so we're ready to add three more images and then give each image its own size now this won't actually do anything yet so now we've defined four classes and it doesn't do anything yet we need to actually add some rules so what we've said is that any article marked with one of these classes for it to then begin on the fourth column and then end before the fifth and so our website now everything is the smallest size image so what just happened is that the image is now rendering at five inches because it's starting at the fourth and before the fifth column now it's really easy for us to add support for multiple width images and just like that we have multiple with images and they're all responsive because because they're following our grid that's really cool and really powerful now the last thing that we want to do is to clean up our css we want to be careful and not use really general rules like this one where anywhere in our website if we have an image it would automatically adopt these properties and that's a bit and that's a and that's a bit too much what we really want is that any image marked with a size class well then it should have a width of 100 so what we can do is just that we'll only apply the following property if an image has one of these classes and the reason that we don't need image here is because we'll reuse these classes somewhere else and so this is the right balance of generality and specificity all right that's it for this screencast i'll see you in the next one welcome back in this screencast we'll focus on the text of our website and in the next screencast the text will get a bit more appealing every time so to start i've moved some css from the previous screencast into its own file and then we're linking to it here you'll see me do this a lot in the next screencast and now you'll note that our article now has all these new elements so let's look at our website it's a bit hard to read and that's because we have the debugger turned on it's a bit hard to read so let's turn off the debugger by misspelling the file it no longer loads and inadvertently disables it all right so let's talk about these elements we know what the p is the p is for paragraph and we have em to emphasize in text so looking here this text is italicized now we also have a link here and to link something we use the a element which is for anchor and the attribute href now points to a website so if i click carl sagan it'll actually bring us to his wikipedia page similarly down here i have a strong tag and this will bold in text now i also have multiple headlines and the reason that we use different headlines and not the same one is because when we style our website these headlines will have different styles so it's better if they're different elements so we have an h3 here and here instead of h3 i have time and this is our article's timestamp so we have text to represent when we post the article and we have a datetime attribute to represent the same time but this is in a standard format so it's much easier for machines to read okay and the last thing is that our article has an id and the id allows us to not just link our website but link a part of our website so if i scroll just slightly and i click here it brings us to the article you can see that here this is what the id can do for us it's a way that we can make an article linkable and so here if i click the first line anywhere in the first line it will link to the start of the article this is a really nice feature if you send someone a website and you want to link to some part of the website and not the whole website okay that's really it for our elements now let's just add some visual breaks so we'll say anywhere there's an h2 and a paragraph we margin beneath it and 2.4 rem is an expression that we can use to describe two lines and so we see that here now how do we know this well looking at our reset one line is 1.2 so we just use 2.4 but we need to be careful here because if i said em it would scale proportionally to the font size of our h2 and our paragraph if we always want two line heights to be the same height then it's important that we use rem because 1.2 line heights is now based explicitly on 20 pixels and not whatever the size of the font is so this will give us a consistent break now last is if i turn back the debugger you'll note that we have all this extra room at the bottom and that's because it's combining the padding and the margin so what we really want is to only have a break after a paragraph so long as it's not the last paragraph so we can use some logic here so what this does is we select any paragraph so long as it's not the last one so every paragraph except for this one would get a break and you can see that in our website that that is now reflected all right that's it for this screencast we're ready to move on to the next welcome back now in this screencast we're going to start to style our text so we're going to go from this to this so all we need to do is create a css rule for each of our text elements i'll do that now all right now each of our elements has its own rule so now we'll change their size all right so this is a start now everything is the same size so nothing has changed but the point is that font is a really really powerful property so we can start here and then really add a lot so let's say i want my h1 and my h2 to be slightly bigger now if you remember rem is referencing the 20 pixels here okay so let's say i want our h1 and our h2 to be bigger so i can make this two rem and we'll make this 1.5 okay now you can start to see our website take shape and now i'll introduce you to fault weight so 400 is the default font weight and it's doing nothing now where you saw the bold text before is a font weight of 700. so if a font supports it you can have anywhere from 100 to 900 font weights and if you look here you can see that we've imported a few different font weights so to match this let's make some elements bold so we'll make h1 time and h3 bold oh cool it's looking better now let's look a bit closer at the paragraphs here there's a bit of height between them and it looks good it's nice and readable but if we go back to here it's really compact so we need to open this up a bit now if you remember if we go to our reset we decided that the default line height should be 1.2 which is the same as 20 times 1.2 which would be 24 pixels now here the only element that i want to have a slightly bigger height and so 1.5 is a pretty readable line height all right that looks great okay now looking back to here our header and our link has an underline so how can we achieve that well if you remember our header is a link and so is carl sagan so what we can do is tell our anchors to have a box shadow that looks great alright so how do we do that we use the property of box shadow and then i used a special version of it which is the inset version typically a box shadow would be outside this however is an inset box shadow so we have inset here and the numbers represent the x and the y axis so our shadow is just going down we don't need an x axis so that's zero now because we're using an inset shadow we have a negative number where normally you would just have a number like this so this would be a normal shadow it would fall below the text but we want it to be inside the element so we can use inset and then a negative number and here we use em because we want the shadow to be proportional to the font size and so if i use rem here the shadow will always be the same height if i want it to be proportional this is why and where i would use an em and then our shadow for now is just black now what's cool is that our website is responsive so we get this for free but you might want your website to be slightly smaller or maybe even bigger if you're on a mobile device and if you look closely the text on the left is actually slightly smaller it's really easy to do this so let's look back at our reset everything in our website is based in one way or another off of 20 pixels so what we can do is write a media query that will change the root's font size so at 8.5 inches we can tell the root that your font size is now instead of 20 pixels instead 18. and now the text changes we can even take this a step further and have a second media query but at 5 inches we do 16 pixels that's really cool alright that's it for this screencast i'll see you in the next one welcome back in this screencast we're going to add color to our text so we'll go from here to here okay so all we need to do is add some color and you've seen this before we did this in our debugger but i didn't really explain it then so i will now however there's different formats that you can use to represent colors the format that i like is hsl which is for hue saturation and luminance here i'm using hsl a and the a is for alpha that is if we want to make our color transparent so this is the h s l and a the h is for hue and that's which color we're using so 210 represents a blue 100 is for the saturation of a color and 100 would be a fully saturated color if we want a grayish blue you could do 50 instead now l is for luminance and if we want a white color we would just put 100 if we want black you would put zero percent and if you want to see the color i'd recommend starting with 50 because that would show you what the color looks like and then last is alpha and that just makes it transparent like we said so in our index we're not going to use any alpha instead we'll just use hsl so add a color property to each text element and we know that we're going to use hsl so let's start with black and if you notice the black that we have here there's no actual black here the darkest color that you see is not actually black but dark gray this is a nice technique that we can use because the text will look less harsh so first we'll make it black and then gray alright so this would be black and you can see that here nothing has changed now it's a slightly gray and let's make the link color gray as well that's a start so now looking here you can see that we have we have three colors there's an underline and then the two purples for the time and the h3 elements so let's start with the link 55 is a good yellow and we can do 100 and let's make this pretty bright all right that is our link let's move on to the time and the h3 let's make them both a purple for now 250 is a nice purple value make it fully saturated and we'll make it pretty bright all right and let's just make the time a bit lighter nice looks great and that's really all there is to colors and if we're on a mobile device you can see that it scales too this is really starting to look great all right that's it for this screencast i'll see you in the next screencast hey welcome back in this screencast we're going to do three things so we'll add back our images put a caption beneath them and then at the bottom we'll put social media buttons okay so let's add an image between our paragraphs now before we give this a size attribute in html5 it's actually recommended that we wrap this in a figure element that's because we want to think generally here if we weren't going to put an image but maybe some other media type it'd be better contained in a figure all right and now instead of giving the image the size we'll give the size to the figure looks terrible well what happened let's look at our css actually i think it'd be better that we renamed this article figure and i'll just update that here all right so the problem is is that this rule is actually too specific and i know that i was hammering on about this earlier but now we need to refactor it so because we've changed the relationship where the images are not standalone they're actually inside of a figure so instead of this let's change the order now anything marked with a size one class with an image will then get this property nice and we can just as easily change the sizes oh i forgot to add forgot some sizes all right and let's take a look we can do three and we can do and we can do four nice all right now we're ready for the figure's caption and there's a convenient element for this that's fig caption and let's give it a paragraph and i'm going to italicize cosmos now obviously we need a break and i thought that we'd get that for free i mean after all we're using a p element right i thought p elements were supposed to get breaks but the problem is is that because we're using this logic we're actually discriminating against this paragraph so because we used last child the last paragraph in the fig caption is this one and that's why there's no break so so we'll just delete it and it's not a problem anymore when we introduce our social media buttons there should be a break between them too so we just don't need that anymore all right going back to our index let's go ahead and center this and make it slightly lighter so in our figure file i'll add a fig caption and if you remember we already know how to center so i'll just copy this and we only care about centering it horizontally we don't care about centering it vertically so we can skip align items it's centered let's just make it a bit lighter now we have a rule just for fig caption paragraphs and let's make it pretty light i'm a bit ocd so i noticed this and maybe you didn't but the image actually has a slight gap beneath it and maybe you wouldn't notice that just by looking at it but this is exactly why we have a debugger you look closer now you can see that there is a gap here where does it come from well by default images can go on the same line as text we don't notice that though because this image is so big there's no space for text so we need to add a reset here we need to change the default behavior okay now it goes all the way up to the image now technically this would fix it but it's not the best way to do it this would be too general of a rule what we can do is say if it's a figure it's child needs to apply this property and the block value specifically means that it blocks it doesn't need to be on the same line as text therefore we don't need a gap above or beneath the text and now it's too close to the image so we'll go back and i'll just quickly add a margin all right the last step are social media buttons and so we'll put them at the bottom and i have the image here that we are importing from here and i'll add empire so like figure i actually want to wrap this in a container now i wouldn't use figure here so instead i can use diff div is just a generic container that you can use if there isn't a semantically meaningful one right let's give it a class and now we can style it because the image is huge all right so we'll make two rules one for the class and one for its contents let's fix the size so we'll do width and height i'm using an svg so i'm going to add height just because i'll get some side effects if i don't looks good these icons would never hug each other so let's give them a padding nice we've centered a few times so it should be pretty familiar we just tell the container that this is a flex box and that i just want to horizontally center it but these they don't do anything so i need to make them links to emulate that i have a link i can just put empty links here because i don't have a link that i would link these to yet and what's cool is we get that nice underline for free if you didn't like that you can make the underline a class and you would apply it where you'd want it rather than just have it apply everywhere all right that's it for this screencast i'll see you in the next one which is also the last one welcome back this is the final screencast and in it we'll learn a very subtle trick to differentiate one article from another we've just been working with one article but realistically we're gonna have multiple articles and we want to make it more clear where an article begins and ends right now there is a slight change from the last screencast i don't know that you can see it i'll go ahead and try to make it more obvious at the top we have a slight of various like gradient and that can help us understand where an article begins and ends let me just demonstrate why we need it oh by the way i've just put the share css into its own file and we don't need a style tag anymore so i just removed that we have multiple articles and to make them unique i'll just make this the cosmos one because we are living in a multiverse and the cosmos ii now technically there's infinite cosmos but we're not going to focus on that all right so here is our website and we scroll we scroll and okay so technically an article is ending and beginning here but i'd argue that it's not clear and it's not visible i mean yeah we know that this is a headline but still it just bleeds into the next one now the tent is only at the top of the article it's not at the bottom so as we reach the bottom of an article it'll become really obvious where the next article begins let's go to our article and i'll just rearrange that okay the way to do this is to add a background okay so too much but the point is that so far our article actually didn't have a background it was just white by default let's go ahead and make it a gradient okay i don't know if this is better or worse what's happening is that our gradient is scaling all the way from the beginning to the end of the article it's definitely not ideal so we can actually add another value and now you can see pretty clearly that an article begins here it ends here and another one begins here but this color is like really really bright so let's go ahead and fix that we can use hsl and we can use 55 again with a 100 saturation and finally we'll use a really really bright luminance nice nice it's really subtle but it's also a really nice hint now if you're like me you want this to be as precise as possible how would we for example say that we want our linear gradient to stop at the bottom of here if we're smart about it we could say oh well that's half an inch plus what was that 40 pixels plus was that 30 pixels right we could convert the inches to pixels and then and put it in there and that's one way to do it but i'll show you another so what we so what we can do is add a value right this value indicates where the article should become fully white one inch down well when we shift the yellow an inch down two it becomes a line because there's no area for there to be a gradient it's just a hard line and i gotta admit that that looks pretty cool so how would we get it to here well as long as this value is bigger than this one we're going to get a line instead of a gradient and this will make it pretty easy to line everything up instead of using inches we use rem so that as we resize our gradient will actually resize as well all right that looks good so all we need to do now is put this on the right side and then get rid of this one now it'll naturally fade to the bottom of here everything will resize dynamically based on the root's font size so you've done it you've learned how to make a beautiful block design from scratch so again i hope you really enjoyed this course i had a lot of fun preparing it for you if you had any questions or comments or even feedback from me again just reach out to me on twitter at usernamezadik otherwise i hope you learned a lot i hope you can now create something that you can have before now go now go watch cosmos if you really enjoyed this course i really encourage you to share it with your friends or anyone that you think might benefit from this learning these technologies can be painful and so try to help other people in the same way that this course might have helped you alright see ya