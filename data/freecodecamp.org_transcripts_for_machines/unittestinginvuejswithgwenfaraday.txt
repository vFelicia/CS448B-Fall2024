foreign hi everyone welcome back to another vojs stream i hope you're doing well i took a couple weeks off and i'm excited to be able to do this stream on vjs testing this is the app i'm going to be working on so it's called regex breakfast i worked on it on my channel which if you don't know it's faraday academy it's linked in the description below and i basically do lots of django and view content between twitch and youtube so this is a app that i'm in the process of redesigning but i figured it would be good to add some tests to it and go ahead and install just today so if you're here feel free to say hi in the chat and keep a conversation going if you have any questions or you want to give input which is the whole point of a live stream so feel free to do that i do have some bad allergies today so if i take myself off camera for a second that's why um yeah so let me go to the project board on this github repo and let's go to the testing board okay and so these are the steps and the different areas of the application that i'm going to test starting with setting up the view cli plugin for jest and which will install again installs um view test utils and some other things so let's take a look at the app and give me one second here okay i'm back um yeah so this is the app i'm working on so before you say anything um we were trying out some different designs uh trying to get this to be a retro kind of diner theme um yeah and so it was a couple developers on my stream we were trying to design it obviously it didn't turn out that good so i hired one designer and now i'm working with another designer trying to get this to where it looks good the point of the app is basically to help people learn regex through going through these different challenges kind of like the game css sushi if you've played that it's similar except you're learning regex here so basically i get a hint down here or challenge instructions i guess and i'm supposed to match the characters here and then i hit enter and then it gets more complicated and you start yeah using flags and different patterns and stuff like that so i'm going to be writing tests for this app today and the first thing is setting up the just plugin so let me go to my terminal i'll stop my server my view server since this is already this application's already set up so it already has a lot of i guess components it also has a router not really going to be testing that today i might get into store testing with the view x store and then the rest are just regular views and components vue.js components okay but i don't have any testing at all right now so what i'm going to do is i'm just going to add it from the terminal so i'm going to do view add and then just let me make sure that's right so let me go to the docs for okay this is this is the cookbook for unit testing in view and i don't think they actually have how to install it just the just docs just have how to install just plainly so before i do this let me actually just open the view ui and that way i can search for the right plugin for jest okay it opened in the wrong place let me copy this okay so here's the view ui it's basically a ui interface um that i can use instead of the cli and let's see let me zoom out so i can see the sidebar okay so um nw view okay that's the different app i was doing before so let me jump to the correct application import let's see it's in projects and i need to find regex breakfast are you see regex breakfast here it is frederick's breakfast and rojak's breakfast front there is no back end it's just front i just called it front so okay i'm going to import this folder and now i can install plugins inside of this folder and it shows me what plugins i already have i designed it with viewify and i used all these other plugins so i'm going to search for actually i have to click on add plugin and now i can search for just so it's giving me view cli plugin just puppeteer cli plugin unit jest and it says official here so i'm going to grab this one and let's see if i hover over this the plugin has a generator okay so i'm going to click on this and install ucli plugin unit jest okay so that's uh taking a while to install oh sassy sorry i think i forgot to say hi um yeah i'm doing well i've been meaning to put testing in some of these apps for a while so i figured now is a good time to do it okay i'm not sure how long this is going to take um anyone else in the chat i know only subscribers can chat but if anyone else is there and is a subscriber or can subscriber to help or can subscribe to help support free code camp it would be awesome to get to talk to you okay it's going to take another minute i guess um after this it should create some setup files for me there's no configuration that i need to do for it so i'll do finish installation all right so it's invoking invoking here this means it's invoking the generator which might be creating files or updating commands or something it might have added a testing command to my package.json here yeah it did so it added this command which is test unit that i'm going to be using to run the tests because this will run the just plugin oh it added this testing folder too and one example test okay but this test won't work because there is no more hello world component it's just adding a default test all right um let's see continue okay so now that's installed now sometimes here let me zoom back out sometimes you can go to configuration and okay i guess just doesn't have configuration options here that's fine i'm going to get out of the view ui and now i can run my app again now that that's set up so npm runs serve to run the vgs app and oh no wait i don't want to run the app i think because i want to go ahead and run the tests oh it also created this just config file for me with the preset okay um yeah so it's all set up so i should be able to just do and actually one more thing i'm going to run this testing command or no i'm going to change the testing command so instead of test unit i don't have end to end test or anything else so i'm just going to change this to test so i can use the shorthand all right and i'm going to get out of this build it doesn't want to exit the build so it might take a second control c is not working okay it's almost done with the build anyway so i'll just wait a second there we go all right and i'm actually going to move my terminal so i'm not switching back and forth across the browser for it so i'm going to do okay regex breakfast front now i can do npm test or there's also the shorthand npm t that i can use and that runs my test command and it's running that one example test that i have okay and it's failing obviously because it is trying to import this component which doesn't exist so what i'm going to do in here i have test slash unit i'm going to start adding folders that kind of match my components actually i don't have a very complicated folder structure here because it's only five so i'm just gonna add a views folder and a components folder and test those so let me add those folders i'm gonna add what about the hour tracking app i'm going to be working on that more on my channel so i want to get this app done and the curriculum app and i'm going to finish up the hour app after that um yeah uh it's i want to work on it more on this channel but a lot of people if i'm working on the same project too many streams a lot of people drop off and there's not as much viewership so i'm gonna i think i'm gonna finish working on that on my twitch channel um yeah plus i'm gonna be taking a break from these dreams after today so i just wanted to get in one kind of different stream on here and then take a break um mostly because i have a lot of other stuff i have to work on okay so i added a views folder and a components folder okay um let's see okay yeah let me start with components because those are easier so i have body draw and top bar and let me go back to my list of things so i set up the just plugin that's done and i need to implement snapshot testing so let me do that real quick just these three components and if you don't know what snapshot testing is it basically is a rendered version of your component that you can see in a second because it shouldn't take me that long to set it up and then over time you compare different versions of your component and you make you basically make sure you haven't created unintended side effects that affect your rendered html so it can be useful in that way uh so let me do body and then i need to put a dot spec suggest we'll find this i think you can use like dot test or dot spec but just automatically picks up files and runs tests against them if they're if they're called dot spec if they have a dot spec in them um okay draw and top bar uh draw.spec.js and top bar yeah top bar dot spec dot js okay i have those three components and then i have views i'll leave those alone for right now so let me start with this body and basically what i want to do is mount this component and then create a snapshot from it which is like a stringify html of the component so uh let me go to um so just actually has um the just testing suite has a lot of things like an inspect library and it does snapshots it takes care of snapshots for you it has like a two html method or something but i think it's um or view test utils oh wait here it is view test utils adds a lot of methods so it's better to instead of using the html functions of jest you can mount it with view test utils and then create a snapshot and the view test details basically gives you a lot of methods for handling view components um so installation so it's already it should be installed with the just plugin um let's see mount let me go to mount so i need to import mount from view test details and okay and then it imports the specific component that i want to mount so in this case i want to map body so be import and import body from i think i can do at which represents source i think i can use that in my test and then slash components slash body and then okay dot view and let's see if that works let me write a quick test so this is from just the syntax so describe um which is going to wrap all of my tests for this component so i'm just going to put describe body.view for right now and then i need to pass a function so let me pass just an arrow function there and now i can write tests inside instead of it i really don't like the it syntax that much um i'm going to use the test function which is the exact same i think one is alias to the other but i can't remember which one okay so i test and then i write a short description about what what the test is about um and then i can mount the component and i'm actually going to do a snapshot instead of some other kind of test here so um yeah so this is the same syntax i need to pass a string and i'm gonna test uh snapshot yeah i'll just put snapshot and then another function and now inside of this test i'm going to mount the component which mount the body component and now i can do wrapper oh wait i need to do expect i'm going to look up the syntax in a second so something like expect wrapper to match snapshot and then the first time i run this it creates a snapshot for me and then future times it compares any updates to the old snapshot um okay so let me search for that so snap shot um to match oh i think i need to look in the just docks for that snow so here it is because it's a method on me on the just expect library so basically here expect whatever component to match snapshot which is the same thing i have here because i've mounted my body component and now i can expect it to match the snapshot so let me try running this now it might complain that i have these three these two files empty but let me see let me run my test again and see if it works four failed okay draw body top bar example.spec.js oh i need to delete that file let me delete that example file i don't need that okay so um and let me actually if this one's failing let me see why that one's failing um you're trying to use sass oh node sas is missing um okay i don't know if i've run into that before but um i have i have sas installed in my project but it's a peer dependency through i have sas and sas loader yeah but basically view set up sas for me so i can use it inside my components or import it into my main view file um okay let me just try installing it like it recommends is the dev dependency and see if that works can you see the bottom yeah sometimes these stream tools cut off the bottom of my screen all right okay maybe note task is going to take a minute and then i don't know if there's any config i guess i'll see if there's any config that i need to do with sas and the project but i don't think there should be let me do npm test again all right cannot read property getters okay good good good good so now i'm getting actual errors with the component which is good um so and let me just run that one test file so i think i can do npm let me look back up through my commands yeah so then i just pass the component name to it so i can do npm t and then pass the component name so i'll do um body body is my first one so i'll do mpmt body and then i think it will just run that one test now yeah good so i just wanted to run that one and cannot read property getters of undefined so let me see if i have to um do something with that so let me open that file body dot view okay i'm using a couple um utility methods getters oh i think um let me let me search for this getters yeah so i think i'll have to mock getters here um let's see i have to create a local view store ux store and let me look up the syntax for that so i think actually it's um wait part of you test utils so let me look up local not local view okay this is a section on testing view x new view x dot store all right i i import a create local view and then i create um a new view x store basically all right so let me try this let me and then i'm gonna have to import these at the top and see um and actually these are absolute imports so i should put them here their library imports okay oh cool that's awesome when i save because i set up eslint auto fixing so it actually fixed all my imports too i didn't see that before all right so now i need to create a local view instance and i could actually create a regular view instance by importing just few but this way i'm not polluting any global state or anything um so let me see i have store i don't think i need i don't think i have any separate store config here i might import my state clone deep um yeah so let me do i need to create a new local view and then do local view dot use view x and i'm going to do that here um i might create a before each for this later now i need to create a new store so let me create a new store and all right so i think i'll just pass an empty object for right now oops and let's see expect um store okay and then i can make expectations on the store but i think i need to when i mount this component i think i can um let's see pass in an options object and pass the store into the component so that way i have access to getters so um yeah let me see if i can or i might have to mock the getters but let's see so i've created my store and oh yeah i need to look at the options that i can pass in so let me go to mount the mount function and see okay so i can pass in props data um does it have the whole api for this component options okay the first argument is the component the second is uh any number of options so i have mock stubs i can pass in local view which is what i want to do um yeah because that will have where is it yeah local view here so that will have the store because i'm doing view oops view.use view x actually wait i need to i think i need to put passing the store too let me see uh config.box store i wonder if this is this is better to just mock the store like stubs because then i can mock the getters the store.getters so actually i think this is what i want to do and then i'm going to save this local view because i'm going to need that in other tests as well so let me actually i think here i can define mocks but um oh yeah and for the local view i'm going to need that for my beautify setup as well because i think i'm going to get some errors about this after i fix this error but yeah so let's see let me set this up real quick um all right so config.mox dot store um i think actually what i'm going to do here is oops i can do or let me do i don't know let me just call this store moc this is just an object oh wait this is not proper javascript right and then on here i can also do a getters object and then put getters on there and then um config.mox um oh yeah this will be mocking it for all the components not just the but i just want to do it for the mount so let me look for mount again go back to mount let's see and where is it um here are mocks so yeah so i can create a mock and just pass it in to a mox object so i'm gonna do that here so i'm gonna create an object here and then i'm going to pass in i guess the syntax it wants me to use is dollar sign so let me go ahead and do that and i'm just going to take this and put it inside of the test as well so in here okay and now i can pass in this store mock so let me take that and store is not defined store here oh that's right so let me do let's store okay fine um and now getters so in my body i have this current challenge getter um which gets back an object of the current challenge and then i pull the name off of that so what i'm going to do is just mock that so the current challenge which will be a function that returns in object oh wait to return an object i have to wrap it so okay all right that should work but i'm going to be getting some more errors before this actually works so let me try this out okay npm test that body component and yeah so now it's complaining about the snack bar which is because i'm using the beautify component library and it doesn't recognize that so oh the snapshot actually passed so let me look at the snapshot it makes this so inside every folder where i create snapshots it creates this dunder snapshots folder and then it basically rendered yeah the output html but um it's using these beautify components because it doesn't know what they're supposed to be because just can't see beautify so i need to set up beautify to work with just and let me i'm just going to set this up in this file for right now on a local view instance and i think it's in the what is it the beautify beautify library and then they have like a just unit testing section oh wait no no oops here it is on all right it's taking a minute to load there we go um go to new docs okay i just need to set up just so bootstrappingvedify that's fine test runner setup okay i'll just click on just all right and now okay um oh wait this is the actual vcli plugin just get rid of that um so it's just linking me away but i need to know with beautify specifically okay here it is so it's saying to create a local view which is what i already did and now okay running before each to create new beautify um and before each basically runs before every test in the file so let me do this and last time i set this up i did it as a global beautify setup because i needed it in so many different tests but i think it's just easier here just to uh oops set it up in here just in the testing file of course i have to do it in each testing file but let me do it this way first okay and then when i map components i need to pass in local view and beautify so i need to pass it in here so let me do that above mox some passing in local view and beautify and uh one second let me go into my vs code setup because for some reason it's yeah it's doing four spaces instead of two um usually it auto finds it but in debt spaces so let me do two okay um let's see do you unit test all your projects i would like to say that i do but i don't especially if they're personal projects hi tom um companies i've worked for often off and on some of them have full testing suites unit testing integration testing you know endtoend testing and then some of them just say they want testing and then never get around to testing because they say features are more important um yeah so i don't test i would like to test all my projects and so i want to get faster at testing because it feels like every every time i start testing an app which is almost always for a client i have to relook up all this stuff because it's off and on when i test so i want to start testing all my personal projects so that i just get better at testing in general um yeah so let's see i was into tdd a couple years ago i was trying to tdd everything like i don't know 2016 or something and then i think i got out of it because the other developers around me weren't or it's very hard to convince people to write so many tests i think i went overboard with it so there's a balance between you know testing and yeah going too far okay beautify beautify okay i did the beautify that's good now it's coming into i'm well i'm passing it in as options in the wrapper so let me run that test again one failed all right um so let me wow that's a lot of failure um unknown custom element v row uh so these are all the beautify components so it should be it should know about these i mean i could technically stub them um so uh was it jess or um you test utils lets you stub things so then i could say what is it v row like v row and just say div or something um but that wouldn't render any nested components i'm avoiding that um and then i could also do a shallow mount where is it instead of a full mount because of shallow mount automatically stubs child components and a full mount um doesn't basically but i want to do a full mount so i get more of an idea of everything that's going to be rendered on the page so i have to figure out why it's not recognizing these beautify components uh so let me see expect rapper um okay great local view i got those am i importing wait i might need to import so here i'm importing oh that was really dumb i'm not importing uh beautify and view so let me import those there um i think i need view even though i'm not necessarily using it i think i need it in the scope um maybe let's see okay running a test one more time all right let's see if it's the same error okay well the snapshot passed but that's because the snapshot's not changing because i'm getting these errors did i register the component correctly it's saying that i didn't is before each running so let me see and here it's doing wrapper.html which is that jest which is the jest function the html but since i am mounting this with view test utils i shouldn't need to do that um so let's see beautify creating a new beautify i wonder if i need shouldn't need any options i'm mounting let's see mounting creating a local view um local view dot use let me just comment these out because it's because i'm not using them right now so let me run this one more time i don't know if that's going to do anything but i'm just getting rid of anything extra here let's see state getters wrapper yeah unknown custom element all of these vcard recall the text field all of the vidify components are still unknown um so let me take a look at this let me go to beautify um props describe mount function okay mocking beautify blang okay i shouldn't need to mock keep in mind you only need to stub the surfaces that are being used such as laying our application you can also import these services manually um i'm just i'm gonna look at one of my other projects because i think i'm a little stuck here unless anyone in the chat has an idea of what i should be doing i just can't remember the exact setup steps that i did for beautify so let me go to this app and okay so the curriculum let's see tests so unit tests and i do have this set up so this in this project i have a setup file for viewify and um yeah i basically set up vuedify and then have this imported into my just config so my just config is has a lot more stuff in it here um so let me just copy this because actually a lot of this was set up because i installed just yeah no ideas because i installed just with the regular setup of the app because in the vcli you know when it asks you if you want to set up testing right away so it set up some of these things and then i added a couple and i added this set up files and basically this setup files this file runs before every test so i can get viewify wait let me just copy this whole thing copy that and now i'm going to put it into my just config and wait undo because i want to save the plugin there or preset um okay that's fine uh module extension okay so now i have this test unit setup test file so i'm going to go ahead and copy that file as well and that file is basically doing almost the same thing i'm already doing in that one component except it runs before every single test so i don't think i need the export here but i'm just going to copy the whole thing and let me go into my tests new file setup tests dot js okay so i set that up import view viewify view.use vidify um okay i am doing view dot use here i think that made it globally available and then i created a local view yeah that's weird what was i doing so i do view.use vidify but then i create a new view and use it with a local view instance i'll have to look at what i was doing there because it seems like i'm using a global view dot use and then i'm using a local view.use beautify and okay but there were a lot of errors i was getting with the jest setup so maybe i did it to alleviate one of those errors okay and then let me just go to one of my tests let me look at i don't know what's the easy test home test let me look at this is just in like a standard html section okay so it's just mounting and that's it i am using a full mount here and um let me make sure that the snapshots aren't rendering with the v dash yeah it's not it's rendering as actual divs actually how it would render out in the dom which is what i want okay so now i have this setup file um i wonder if i have the serializer installed um i think i must i think that comes with jest when i add it as a plugin okay anyway i don't need local viewer view to fi now so let me take this out um i will i might still need it for a store maybe so i'm testing the snapshot i am mocking the store because i still need to do that since this is a full mount let me delete these two imports at the top don't need those okay let me try this and see where it's at npm test body okay setup files option was not found um root directory projects regex breakfast okay tess unit setup oh set up tests.js did i spell it right oh it's outside of the unit folder so let me put it inside of the unit folder because if i do other tests in here i'd have an end to end folder and other folders and the js setup would only be for unit testing so let me try one more time okay now it must have found the file because it's running the test oh and it failed oh this is a good failure though because now cool um now see how it has v row here well now it's rendering it as a div with class of row which is actually how it renders out in the dom so that is very very good okay so it's failing because it doesn't match my current snapshot so i have to tell it to update the snapshot because the new one is what i want to save as the snapshot so let me tell it to update here so i'll do npm or mpmt and then i need to pass it past the command to u dash u is for update snapshot um oh i forgot i forgot to run just that one file okay but now i can copy paste these into the other files two failed one passed so my body one passed and the snapshot is updated um okay let me get rid of that oh let me take a look at the snapshot yeah now it's rendering all the divs everything is rendering out correctly um what is this v snack oh that's a transition i can stub transitions which uh i'm not going to worry about it i think it automatically stubbed the transition for me so if i want it to be different like not be automatically stubbed i might want to put something else in there but that's okay i'm happy about that let me go to draw and okay the draw menu is so app bar toolbar so this is the top um nav bar the menu v now why is this let me look at this navigation i think draw i'm not even using right now this is very strange because all draw is is an app bar which is a top nav bar and okay so let me just delete draw i'm not going to worry about that for right now um so let me go to top bar and test the top navigation bar that would be more useful so let me get rid of draw i think i just didn't separate the components yet that's what i didn't do i created the draw component was going to put the draw in there and then i didn't so i'm going to test this top bar and where is it topbar.spec.js so let me i'm just going to grab this whole thing because first i'm going to be testing the snapshot and i actually don't know if i need the state yet um oh i will need to mock the store because i do need the state some state off of the store um let's see challenge and challenges yeah i definitely need some state here so let me actually undo that oops and redo i'm gonna get rid of these for right now okay and i need to import the top bar component so let me import top bar and yeah it's much cleaner without setting up view to find every single file that was a better decision okay so now top bar so i'm going to describe top bar dot view here i'm still doing the snapshot first i'm going to mock the store here i don't need any getters but in state i do need to i don't know why i have the id here actually i think that was just the default thing that i had so in state i need to mock um oh wait i do need the percent done okay never mind so i will need to create getters percent done um yeah i'm gonna have to mock that getter correctly later um but for right now i'll return like a zero or something okay so uh let me do getters which is an object and i'll do percent done and then return zero for right now and then in state what do i want to mock and state so i need to mock the challenges which is an array and current index which is a number um yeah challenges let me do challenges and current index so challenges in array and then and actually i'm going to be importing the challenges at some point so because i have a challenges dot js file here with a list of all the challenges so i can just import those in my tests and test off the actual challenges so let me do what was the other thing it was current index so current index i'll put this at zero as well okay so i've mocked the store so let me create a snapshot for the top bar let's see times it's just after 11. it's been about an hour um do npm test run both my tests all right maybe testing is a is a dry topic there's not much chat about it cannot read property small and down oh right um i might need to mock that because let me see small and i thought i was using it here let me see if i'm using it small and no then why is it doing that that's a so that's um a break point um property that i get from beautify for small and down but why is it saying it can't mock it here that's weird i'm not using it i'm not specifically referencing small and down so why is it saying that i might look this up oh maybe beautify is undefined here so there are some weird things in testing vidify like i had some issues with the modal testing the modal because it renders an extra specific component inside the modal so yeah let me see so this component i'm not doing anything different importing that um oh wait let me do medium no okay so yeah let me search for this and see if anyone else has this problem with beautify okay yep it seems like someone else had this same problem from this year i'm trying to solve this issue but i can't oh this is very poorly formatted okay everyone render type error cannot read property small and down of undefined um surely you'll be loading beautify as a plugin that's where the error comes from to solve this issue delete it from plugins and load it as follows um nope that doesn't really i don't know why this person is giving this advice i don't think that's very good advice testing done by the clients in real time yeah as everything crashes and burns um unfortunately that's how it's done a lot of the time actually with this i don't want to say too much but this django app i'm working on i've been dying to write tests for it for a while and the client is testing it and some business people are testing it so hopefully i can write a test suite at some point i would love to i just haven't gotten around to it yet um beautify js at least like the finicky parts of the app like that's you know a minimum for testing let's see um i want to look at their github actually how to specifically ajs warn yeah i don't know okay this is the same thing after install view to find my webpack i have this message in the console yeah let me just look at their github and see if they have okay they have foreclosed issues on this same topic it seems causes type error using webpack error with apple actually i am using app bar so this is probably the error i'm getting because the error is in this app bar component so i oh okay so i'm guessing that beautify renders this under the hood beautifies using small and down because the app bar is very specific to the screen size and since i am collapsing it adding a draw at different screen sizes so this appears on x small and on every other screen size it shows all of the things in the top oh no actually on this app this appears on every screen size because this is where the challenges are listed okay but i'm guessing it is a problem with the v app bar so okay so this person isn't writing entirely in english but he's saying he has a problem with the app bar um okay they're saying if you switch to beautify 2.0 there's probably a problem with that um yeah i've been using vidify 2.0 for a long time so it's not an issue with that but let me just rethink how i'm doing this app bar i'm guessing so let let's see if i did oops shallow i'm gonna try some different things so shallow mount um which will stub all of the beautify i think every single beautify component actually will get stubbed but let me try this um oops i do undo okay um where's that oh yeah mount that was it it's like where was i okay shallow amount um let me do a shallow mount so npm test and just that component so top i don't know why i called it top bar seems like it should be top nav or just nav because well the draw is going to go in a different component but yeah nav might have been better um right now actually it's only mostly one page so maybe top bar is okay yeah just thinking out loud okay so invalid prop type check for value expected number um oh yeah i have to mock the props on this too and i think i do that with props props data since i'm passing props into this component and let me see what the props are oh no i guess there aren't any props okay uh so i do need to mock so i guess that's just data maybe it was data i'm confused uh type check failed for prop value expected number oh on the progress bar got string so let me see what the progress b progress linear value okay so store dot getters dot percent done expected number got string i mean it is returning a zero not sure why it thinks that's a number um okay well i'm fighting with my own unit test right now good jared maybe you can help me with mine take a break from yours okay so all right so i'm i'm over an hour through the stream i'm actually gonna push what i did so far um just because it makes it easier if anyone wants to take a look at it and it only takes a second so get status um store index uh this match does not match let me look at those files i didn't think i updated them does match um okay i wonder what the diff is for that so let me look at the diff for these so get diff and i know i'm just uh not part of testing but i'm just curious because i didn't think i updated these files and now it's saying they're updated so let oh i know what happened uh my automatic eslint changed some things like it changed lint or change let to const because i'm not updating this variable anywhere okay uh that's fine i'm guessing if i diff the does not match file yeah it turned let to const okay that's fine i'm just gonna add everything then uh code from live stream on what's today uh august 21st august 21st uh 2020 part one okay i'm just gonna push oh rejected oh i know i know why um yeah because of these dependencies dependabot updated some outdated dependencies oh merge conflict and package lock.json let me look at the merge conflict real quick um i don't see it let me see here we go uh i don't know there's a command supposed to be able to fix this i can't remember off the top of my head let's see except except both oops okay i think i fixed it we'll see all right let me put fixed not fixing fixed merge conflicts okay this took a lot longer than i thought just to push the code okay now let me do in mpmi locally because i did update those dependencies uh yeah it doesn't have to convert lead to const but i think i'm not stopping it oh unexpected token uh what should i do this i mean this is a live stream i'm just gonna delete my package lock um because i already updated it and committed it and i'm not too worried but yeah don't do that at work okay um you missed free code camp what do you mean i missed free code camp are you telling i don't know i think i missed that because it's probably been 30 seconds since you sent that message okay now it's creating a new package lock for me which is unfortunate that i messed it up but it should be okay in this project let's see npm run surf yeah i think if you don't stop the automatic uh like what is it prettier and um beautiful beautifier or something and then there's the eslint one which is the one i use the auto eslint i think if you don't stop it from doing things then it's just gonna do all of its default things okay mpm run serve which is change everything to const unless you're redefining it somewhere oh wait i don't need to surf because i'm testing actually let me make sure the app is still running after that let me try to run it all right so how is everyone doing with the testing is this uh too dry of a topic for a live stream seems maybe hard to chat about i just wrote my own eslint rules yesterday for just and even added in auto fixes for them oh nice which repo is that in do you have it in your i know you do your uh whatever uh what is it yes lint or no tjw right tjw lint on github so uh everyone else who might not be in the inside of this conversation jared runs a vue.js group and um yeah does a lot of open source and has a bunch of open source libraries for linting and uh yeah all good all different kinds of stuff on github so that's why i know about them and he has this group of libraries called like tjw lint um with different linting options okay so the app is running let me go to the browser and see don't look at the app jared it's very very ugly okay yeah everything's working fine so i didn't break anything that's good there's a bug in here um i was going to submit the rules to the official just islip plugin but it's written in typescript so okay so they're adding in an extra layer of difficulty for you um you could always raise an issue and say hey i have all of these rules does someone want to convert them make it typescript friendly for me um what was i doing oh yeah so get rid of that i just uh deleted my package lock reinstalled it seems to be working okay and now oh yeah the whole reason behind that was to um push my code live so that everyone can see the code so if you joined i don't know if this is in the description of the video but that's the repo that i'm writing tests for today and i did just push some tests um now wow it changed like uh every single folder oh that's because of the auto eslint so i added linting accidentally with the testing but that's okay and now for projects i have the testing project implement snapshots didn't quite finish that although i should have a checklist for this let me turn this into an issue so that i can add a checklist here so um body dot view component and let me go ahead and check this off because it marked down because i already did it so i do need to test the was it top bar dot view component and then i might test other other things for snapshot testing i think i'll leave snapshot testing it here today and try to get to some other testing in five time but so now because i convert it into an issue i can have a checklist in here so i have yeah so i can check them off as they go which is cool so let's see get rid of that okay so top bar let me run the test again now and see where i'm at okay so it's still complaining about value um expected number string got oh it got function okay this was um percent done okay so i'm just gonna all right i'm just gonna put a zero there because it's returning a function to call and yeah anyway let me see if that works okay now i get a new error which is oh yeah this is just updating the snapshot so let me just update the snapshot real quick and that should pass yeah so that passed but the only issue is i'm doing a shallow mount not a full mount and i want to be doing a full mount but here's the top bar so basically it's stubbing um so because sorry because i'm doing a shallow amount it's stubbing all of the components inside um these auto stub which is really ugly and doesn't help me out a lot so i'm going to now try to mount this so let me see if i can mount it actually i don't need this props data i didn't need that because there aren't any props i thought for a second there were but there aren't okay so now let me run this with a full mount oh wait wait stop stop stop without the dash u because that will automatically update my snapshot that would destroy the point of snapshots okay failed again what is this doing you cannot read property with the fun to find well this is good this is a new error it's complaining about the v navigation draw i cannot read property width of undefined uh oh yeah and it's also complaining about this so aaron getting watcher computed height typo yeah it's the same error plus the other errors that it's getting so i think for right now um because i have like 30 minutes left on the stream i am going to just leave it at shallow mount and try to fix it later let me put it to do in here to do get because most of the issues are with vidify and i need to actually be able to sit down and debug vidify on this so get this to to work with a full mount okay so let me run all the tests now npm test the full mount is working in body it's just not working in top bar okay and i'm gonna um check this off here so yeah okay so i'm gonna check that off and i'm gonna add um let's see update just like it to do for the future so update top bar note update top bar snap shot test to use full mount okay so i'll put that there um now i want to do some component testing so let's see so test that it moves to the next challenge when correct challenge is input so let me run the app real quick so npm run serve and i'm going to open the challenges file and so each challenge object has all of these attributes it has the correct pattern any forbidden patterns like you can't use the period because um it's too easy it matches any character you're supposed to learn how to do this you know just as it is so i have some forbidden patterns i have um flags the name of the challenge which which you don't have to match the full text is this part of the text you have to match and then info is what appears in that info box below the challenge so let me go here all right um so here it's telling me to match the whole word just by typing out the letters for the first challenge and then i can hit enter so there's no like submit button here so when i test it i'm going to have to test that enter that once the enter key is pressed that it moves to the next challenge so um let's see and that would be in the body component yeah because this is where it shows all of the current challenge the current challenge here so i'm going to have to set the current challenge in the mock to one of these challenges so i need to import that so let me test let's see and just have these three open okay so let me import the challenges here and right now i'll get rid of these although i do want to fix my view x set up in a bit so let me but now i'm just like doing a very basic mock here so i'm going to import challenges and let me do that from here so import challenges from at no at data slash challenges and now current challenge here is i'm just going to let's see i'm just going to set it equal let's say challenge zero so um okay uh yeah this will change the mockup actually or this will change the um what do i call it the snapshot actually so let me run this oh no i'm still running the app um so oh yeah i don't think i need to be running the app because i already know like the flow of it how it's supposed to move from challenge to challenge and i need to be testing that in my tests so i can stop the app here and now let me do um let me run mpm test again and see okay didn't match the snapshot i already know this because it's actually rendering you know a real challenge so what i'm going to do is actually just i think i'm going to update the snapshot so let me just update that snapshot real quick um dash u because i want it to because it's never going to be an empty object in real life or it's never going to be an empty object it's always going to be an actual challenge um so i think that's good and i'm going to move this out to before each actually so i'm going to do before each and i'm going to define this store here outside of it so i'll do let dollar sign store um yeah i just want to initialize it as an object and then i'm going to redefine it before each test as this object okay and now i need to write a second test down here so let me do test and this time i'm going to be testing that challenges advanced okay and now i need to mount so i'm going to mount this again mount the component and i have the mock which is the store and let's see i can write expect statements now so what do i expect to happen at first so i expect um and let me actually look at this body.view component so there's no props but i do have a lot of data here that i'm not um locking let's see um yeah there's a lot going on in here with the regex testing and stuff and then i also want to test if the snack bars show up so i don't need to test too much about the dom traversal so i feel like that's for endtoend testing where i get to render this in an actual browser um but who knows when i'll write run endtoend testing for this so okay so i've mounted this and now i want to test that let's see currentchallenge currentchallenge.name currentchallenge.info and then in the middle i can see that well let me go back to i need to test that it moves to the next challenge when correct challenge is entered so let me step through that and here i'm gonna do okay so i'm gonna have to enter uh correct answer into input so i'm gonna have to grab the input and then enter the correct answer and then i'm going to have to um yeah i'm gonna have to press enter to to submit the challenge and then i'm gonna have to check that chat uh challenge advanced to second challenge okay so those are the steps i need to do and um let's see let me first grab the input so that's the first thing i need to do and i can do that let's see if i don't uh remember the syntax for it so let me see if it's in here or else i don't need wrapper functions i actually just need um to grab the input which i think will is just from just i mean yeah it's yeah uh okay so i don't need this is just a vgs unit testing cookbook that's not helpful with what i'm looking for so i'm going to um let's see uh dom manipulation i just need to grab dom elements and i can't remember exactly expect has assertions um dom manipulation okay so that's a jquery document.body require okay um it's not helpful let me see uh i wish i wish more people could chat on this um let's see um okay let me look for ingest oh yeah this is easy uh sorry i had a brain fart there okay so uh rapper dot find and then i find divs i think this will return in array or maybe the first div a first dom node okay that matches um how many inputs do i have on this page let's see input um what would it be oh it's oh that's right i was like why isn't it called input it's a beautify component so it's called like v text field okay so v text field and that will render since this is fully mounted that will render as an input so i should be able to find that as an input and yeah i only have one v text field so one input um oh no i have two because i have um i have this one and then i have the other one on the page which is for flags which should be disabled so i need to check that also that's disabled when basically what happens is it's disabled for all challenges unless yeah no flags here unless they need flags so some of the later challenges use the global flag like this one yeah these use the global flags so then it's not disabled basically but if they don't if the challenge doesn't need flags then that input field is disabled yeah i know i need to use oh thanks jared i don't know why i didn't see chat um wrapper.find thanks uh data.testtoken datatest yeah i need to do use that definitely so let me do wrapper.find let's see and i need to put that on my component to reference it so here's the text field that i want to reference and i don't know this is weird i don't know why the other text field isn't rendering like why is there only one text field here placeholder enter regex where let me look for enter flags what happened where's the enter flags did i accidentally delete it wait i need to see this now run my development server i might have accidentally done something so i might have to put that back either way yeah i do want to use the data test thanks i'm going to put that in as soon as i figure out what i did to my other input all right the chat's so quiet how are all of you i don't know if anyone can sit through two hours of watching someone figure out testing but kudos to any of you who are wow um yeah so let me look through my whole app and enter flags did this just appear this wasn't here before and now it's here and now i'm confused okay um anyway so i have this one and now i have this one and let me put add a data test here i'm just going to add it to the top data test um and let's see what should i call this um yeah i'll just call it regex okay and now i can reference that here so i can do what is it data data test equals projects i think so this would be better on twitch yeah so i'll have a stream so i have a stream on sunday on twitch every sunday and wednesday i do stream on twitch and sometimes like other random streams but yeah this is a good way basically for free code camp to earn money um and help support free code camp and having millions of followers basically their chat gets out of control if they don't have or if they don't have some stipulations on the chat so yeah so i don't fault them for making a premium chat if i had millions of followers i don't know maybe i would need to do that but uh the two of you yeah jared and i have collaborated i've had inter i've interviewed him on my channel as well you can find over on my channel faraday academy i've interviewed jared about vjs and i don't think we talked about testing maybe we'll do a testing one coming up that would be fun um okay so let me do const input equals this input that i just found and now i need to do let's see input dot value something like input dot value and then i can change the value i'm not sure if this is the exact syntax but cool um yeah jared maybe we can do a testing collab if you're free at some point um i did a views on view podcast where i led a discussion on unit testing oh yeah that was a really good podcast episode um if you're interested views on view is a view podcast and jared did an episode about testing on there and i listened to that um i think twice so yeah it was really good so input that that value and then i need to put the um value of this challenge of the solved challenge which i am just going to take from here so dot pattern and i'm going to put that in here because that's the solution so dot pattern and so i'll change the input value to that and let me just see if that's the correct syntax uh let me search see if they have input here okay so you can set checked um check box input you can trigger click i do need to trigger but i'm going to trigger an enter so set value here's what i want set value of the input so this will be oh episode 99 cool um input okay it's not okay so i do set value so let me do this i guess it's asynchronous so i can make this function a sync and now i'm going to do this input input dot set value and the value will be this so let me do that and get rid of that so enter the correct answer to the input now i need to press enter so they had some examples here where it's man i can't even remember now trigger trigger trigger so i need to do there's no wait okay so i need to do input dot uh trigger and then the event so i need to trigger um what is it key i guess key press dot enter and i think this will work um check that the challenge advanced and here's where i actually write my expect to test it so expect let's see expect uh oh what was it i just had a brain fart okay uh expect that the challenge has advanced so what metric would i be able to test that with um i could spy on the function so i probably should write a spy for the function and make sure that next challenge has been called because when i hit enter it should call next challenge and then um and then oh i couldn't check that the store that this gets called navigate to challenge and i could check also that the snack bar shows up maybe the snack bar stuff is better for endtoend testing i think so yeah okay so next challenge i'm going to spy on this somehow so let's see check that uh next challenge has been called so i have like 10 minutes left uh let let me see should i do spy um i wonder if they have any spying docks in you test you tills call your test runner to spy on it set methods deprecation warning set methods is deprecated will be removed there's no clear path to replace that methods because it depends on your previous usage flaky tests okay so whatever that is i'm not going to be using it let me look for spy again um detecting styles okay um i think i'll have better luck in here i was just seeing if there was something in there okay keeping track of usage spying on a mock so i basically need to run this just.fn yeah i know i just thought they might have an example in the v test details that uses it specifically with view but i guess i can just do um yeah let's see i need to set that as a spy so where would i put that i guess i would put it in let's see because i need to i need to set it on the component so i have access to let's see if i have a wrapper here i have access to i think the vm so and then i have access to the methods on the component so now i can do um next oh wait uh next challenge and here i can do i think this is how i do it i set this particular function as a spy and then i can see if it's been called let's see respect usage of the mocked class okay is that how i use it um i can't remember exactly let me look in just search for it so let's see view just spies see if someone has a quick example tips for unit testing the just object installation view test details the beginner friendly guide to unit testing in view let me see if this has spies in it it's taking a while to load the page all right let me search the page for spy expect spy to have been called okay get rid of that um okay that's fine so rapper dot vm dot on rubber dot find just a function map okay oh did you send me an example of how to use it so basically they're expecting the spy to have been called um but i don't know if they give an example of writing the spy but basically i just want to spy on that function maybe i'll open discord let me see where did you post it okay you posted it in javascript so if you don't know everyone this is my discord channel you're welcome to join it's a public channel and so jared just posted an example of how to use this um so i'm going to copy paste this into my code so i can zoom in on it let me see so body dot spec let me just put it down here for now okay so he's doing just.spy on wrapper.vm.router dot push okay see i can spy on the method i'm not using the spying on the router method but that's just the example that he sent me uh okay expect rapper.vm.router.push to have been called with these options basically so let me keep this down here and so i guess i had this function all wrong so i'm going to do this dot vm i'm going to yeah get rid of that i'm going to spy on um i guess it's rapper dog oh wait i have to spy on would this be on methods oh wait wait would this be on methods so if i did methods yeah um or no this is the this context right so yeah because you're just doing dot router so no it's not a yeah okay so i guess this is how it would be so wrapper spinewrapper.vm the next challenge method this.methods.thing yeah it makes sense um so expect that this method to have been called and because i have five minutes i'm going to take out the two have been called with and just do two have been called and see if this passes real quick april.vm is the same as this yeah thanks so that's just this context cool thanks for the help um keypress dot enter i also i'm pretty sure that this will work let me stop running that and do mpm test and i'm going to test just the body component that looks right good oh it failed what failed syntax error just encountered an unexpected token you're trying to import a file which just cannot parse it's not plain javascript i don't think that's the problem um syntax error unexpected token uh unit components body.spec.js 570 um okay well that's weird oh wait i must not be closing something there let's see what am i not closing um because now it's it's complaining about this closing bracket so i must have deleted something or done something wrong but it seems like i have closing methods for everything so let me look at this oh okay i'm not closing my inner test okay i see i see so i think that that's right clear that try running the test again okay snapshot failed and that's because wait um yeah i don't know why the snapshot failed oh um underscores not defined my um lowdash library must be because there's no semicolons i don't think so must be because there's no semicolons i don't understand why the test would fail on that right now it's complaining that received number of calls zero and expected number of calls oh he's teasing me okay okay i get it i'm not very good with jokes obviously um expected number of calls makes you a stronger developer oh because you're using your pinky more let's see that's a very opinionated statement so it's not calling it so i think that's a problem not with this spy but with um my key press dot enter if that's actually triggering here so man i have like one minute uh let me search for next challenge here and make sure that that is what's getting called yeah so when i press enter it should be calling this next challenge method and let's see why is it not calling the next challenge method let me look up this key press syntax because that might be what's wrong input dot trigger key press i don't actually know let me get out of that i don't actually know if that's the right syntax for it testing key mouse and other dom events so let me look for keyboard keyboard example here we go um component under test this component allows to increment decrement the quantity using various keys okay so it's capturing a key down event and let me make sure that my commit i don't know lol okay thanks um let me see i'm doing key press here so yeah i'm triggering the key press here so that's good now i'm testing it and yeah they're doing wrapper dot trigger key down and then the name of the key so it's the up arrow key um okay mount yeah so why isn't it triggering that function assuming that it's getting the correct input and it's setting that input i mean can i log out i think do i have to set a just option to be able to do console.logs from tess um so console.log and then input yeah let me see what that is uh let's see all right uh tests okay i'm not worried about that other one expect just a function to have to be called or two have been called to match snapshot oh this one changed um slightly oh because i messed up this before so i think i do need let me just update that snapshot real quick because that was just a mistake that i made why the snapshot is different okay so now i can just test the body and now it should be just this one failing test so there won't be a lot of other noise selector um okay um so maybe expect it to have been called this is a reference error underscore is not defined and that's because i think i'm importing yeah lowdash here is defined but never used okay then i just don't need it oh yeah because that's right because i moved it into these other files here so um does match does not match let's see i got rid of that but so i wonder because it's trying to call this whole function here i think maybe it's throwing an error because the function does a whole bunch of things and maybe i'm just not mocking everything that i need to be mocking for this function to run okay the stream died anyway so um this test isn't quite passing i'm getting the correct input um i don't think this the function is having some errors uh so i need to figure out why it's having this particular error and i think it's because saying reference error underscore is not defined which is only when i call some external functions like does match and does not match so i think that's the issue is in those files somehow um yeah maybe i need to stub that function or something or you know make a mock of it but yeah i am out of time now so uh thanks for joining me i'm just going to take a few minutes here and make sure everything is pushed to github i did get some things done like i got all the testing set up i got a couple uh snapshots done and then i started to test the other components you think the input trigger might be wrong in the docs it said oh where is it in the docs it said input.trigger and then i could do keypress dot enter um i don't know if i need stop because that's what it is in the dom here okay let me let me run this one more time although the error didn't seem to have anything to do with stop but i can just run it and see oops yeah it failed again all right so yeah i am going to uh just add those files commit um code from live stream on august what's today uh august 21st on august 21st 2020 this is part two okay and then i'll push that yeah so like i said i have a youtube channel that's in the description below and i also have a twitch channel which is also faraday academy if you want to check it out and that's where i do my coding live streams from twitch i do other coding related videos and sometimes interviews here on youtube so i'll be live on sunday if you want to see some view and django coding the input trigger needs to be a native js element like click or key up wait key press isn't made of js i thought key press was um because where is it here oh i'm taking more time uh let's see keypress.enter.nextchallenge i mean i could do key down i guess so um i can't remember why exactly i have key up and key press to do the validate oh because i wanted to run validation after this i guess oh okay that's interesting so key press but it is key press dot whatever um i don't know because key down here so key key down dot down works in triggering so i think it can be a view event because these work um yeah keydown.escape you can even pass in the key as in an options object which key you want to trigger i guess they change it and view test details okay yeah so i really don't know exactly what's wrong but i did just push the code so if you're interested in the code i didn't quite finish this challenge but i started working on that test then here's the repo i've been working on yeah thanks for the help jared thanks for tuning in everyone and yeah like jared said i have a youtube channel check me out on twitch and if you want to continue the conversation you're welcome to join me on discord otherwise i will see you later thanks for a fun stream today