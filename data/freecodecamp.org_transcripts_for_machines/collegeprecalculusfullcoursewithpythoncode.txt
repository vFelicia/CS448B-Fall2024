this college precalculus course is different from other college precalculus courses like many other ones you will be learning all the concepts from an experienced University Professor but in this course Ed pertowski will also show you how to implement the precalculus concepts using python this course is for anyone who wants to learn precalculus but especially for those who are learning computer science welcome to precalculus with python so we're going to use python on code to do all your math and we're going to look at topics like triangles trigonometry solving triangles finding out all the sides and angles and area of different triangles even starting with just little bits of information we're going to look at a lot of the graphs of the trigonometric functions and one of the things with these graphs is they're repeating patterns so we can graph things like Tides or you know phases of the moon or something like that that a repeating pattern to it and we're going to look at bringing data in and especially data that might have repeating patterns and using trigonometry and other precal tricks that you'll learn to analyze that data and being pre calculus all of this we're going to get uh a little bit further into math what are some things we can do with all these points how can we graph things how can we graph different sorts of functions and how can we solve um maybe some problems you haven't looked at solving yet and then lead up to things like sequences series limits and that brings you up into some things you'll be able to do in calculus so let's dive into it and let's take a look at precalculus with python so the first thing we're going to do is set up your collab you might remember this from before but remember click on new more and we're going to click on Google collaboratory and if you don't have that already you can go to connect more apps and you know it might not show up there and you click in here um you can search for uh collab and you know mine's already installed but you could click and then install it if that's the case so you know new but we're not going to do doc or anything more all these other things um Google app script by the way uh is more like uh this runs in all of your documents and sheets and everything and it's kind of based on JavaScript so that's also good but we're going to focus on the python and Google C laboratory there we go you create a new cab give it a title now what you're going to do is you're going to build this throughout the course um like we did in the algebra course so you're going to give this a name um you could even call it uh precal if you want um there you go uh if you something like that um I think in the algebra course I just called it your notebook um and we're going to add to this throughout the course so what you can do is you know it just gives you this code block if you give text and then if you double click if you put uh the hashtag now in the code that would be a comment in here that's going to give it a a title for the table of contents so um you know I might have like uh get data because that's the first thing we're going to do and then you know I'm going to you know I'm going to put the code here um you know code here we'll we'll get to that later I just want to show you that um if I add other text here um you know next topic but notice I'm not putting the hashtag there so over here I go to the table of contents and get data is in there and we can find this so you see you can minimize that so within this topic you can have your two cells and that's what we're going to do we're going to build this throughout the course and yes the first topic is going to be how to get uh data into collab so that then we can do math to it so we'll look at that in in the next uh in the next video so let's take a look at some different ways to bring bring your data into Google collab so uh and all this we're going to have like a m Focus there's much more you can do with grabbing data from different places but our goal here is to get numbers get arrays of numbers and you know then we can do some math to it so I'm going to really focus on that in a few different ways yeah so maybe you have a CSV comma separated values you know that type of file um which can open in a spreadsheet you know like Google Sheets or Excel but you know you can get the CSV directly if you have that online I have this um you know a few of these examples here um yeah this guy um at Florida State he actually has this website that has you know a bunch of different examples so I picked a few of them here so you know we're going to import um all these things pandas uh import files IO all this and I usually like to Define whatever the URL is as its own variable that way you know you keep it organized all these different possib abilities here and then this code doesn't have to change so there we go that builtin pandas function read CSV and all these things I'm going to store them all as table one this and the other examples so that you get the idea that here's all the ways you can get this data in as a table and then now once we have a table we can do all kinds of stuff to it one of the things we're going to do is um uh that function table one. head The Heading and the first few rows this is usually you know you don't let's say you're getting this data and you don't know how big this table is you want you want the heading because you're going to use that for some other things and you know the first few rows you want to get a sense of what what that that data is um so the last line of code here you don't have to put print or anything if I just say table one. now if I just said table one without that head it'll actually just print out the whole table here you don't even need a print statement uh that that may be overwhelming so I just want table one. head and we're just going to see what this looks like here so this one was you know you know cities. CSV and we see we have latitude and longitude of different cities interesting but also just to show you that hey you can have like you know um numbers that you can work with maybe you want to import this into into some sort of uh you know I don't know plotting lines or something like that on on a map there we go so we have that I also want to show supposing and we've seen the heading so I'm going to comment that out now but let's run it instead table one. describe so we see it gives uh certainly all of your headings or your headers that's what you want and then with each of these you get that description of each column this is going to be really important now the count if you're counting something it's going to be integers but somehow it always puts this as a floating point with all these decimals so there we go now we we can look at the count and see first of all that's great all the row all the columns have the same number in them so I'm not going to have in data I like that but there you go mean standard deviation minimum maximum these are also really important minimum and maximum because if I want to think about graphing this or you know some sort of range I get an idea of what I'm looking at here so these are some of the things you know heading the describe I'm going to show uh this other one here so if I comment this out and if I have this um let's do this one um the people one actually maybe I'll skip this one the people one that's kind of NE it's there's like there's like four things in there all right um letter frequency um let's see we have this and I'm going to show you this just again just some tables as some examples here and from some document it has each letter and the frequency how often this came up and what percentage it was um there we go now we might know from stat other statistics that e would be the most common and we see that you know shows up 12.6% of the time which for one out of the 26 letters you know instead of showing up you know less than 4% of the time if it was all evenly distributed no e shows up 12.6% of the time so there you go just interesting and we could have this described now notice um if you have both of these I didn't comment out the heading or the describe see notice no print statement so just saying table one. head table one. describe it ignores this or it was going to do this but then when we had this it just bumped that out of out of the contention so even if you didn't comment that out you know without the print statement just saying that last line you know table one. describe that's the that's the thing it's going to run and so we see you know um frequency count um scientific notation even though it didn't need it so 2.6 time 10 to the first power is 26 there we go mean median so just some interesting things so I just want to show you this so this is one way um that we can have uh you know the uh you know different URL and some of the key things we want just stored as a table and then something The Heading or the describe now you could also upload the CSV and this this is all the code you need it will give you you know this creates this dialogue um this files dialogue so then if we're going to call it uploaded so that you know if if I had this without the uploaded equals I mean it has a file dialogue but it might not do anything meaningful whatever you pick it's going to store it then whatever you pick it's going to store it as this variable and then that this is the way to get the file name so whatever you just selected to upload and you know it's going to pick that one um yes you're going to iterate through exactly one thing so that's why you can just say next so there's your file name and I'm saying that this is a CSV so that way I already know that I'm going to do read CSV um file name and once again what am I doing I I could actually just have this without the table one equals and again it'll do that but it's not going to really accompl anything I want to store it again as table one so now I have this you know uh data frame table and from that storing it is table one we can do all kinds of other things so pretty cool maybe I have a table on a web page and remember we see a lot of web pages um that have tables the couple examples I have are you know Wikipedia Pages you might have with you know a web page with a lot of tables so this one uh my importing you know pandas I'm going to read read HTML and I'm going to you know just knowing I'm not just reading a table or CSV I'm reading the website read HTML but this one I'm going to store it as a variable tables so that's going to be my list of tables and we see I do want to print this so this you can use this for exploratory situations you know there are how many tables all right well I just stored that as all my tables here and I can say now having already looked at this like I might not even need you know these last two lines at first I could just or these last three lines I could just print out this one you know how many tables do I have um I happen to already look at this I'm like oh table number four that's the one I that I want so you see now I'm just going to have this tables element number four from that array and again what am I doing stored it as table one and I'm going to print that out now there we go it happens to be different managers and the years and wins and losses I I just thought that was an interesting thing because we can have some uh names and dates fine but I also have a bunch of numbers I can use wins losses winning percentage there we go so you know that that's the one I decided to pick now notice um you know I picked this one um Wikipedia for the Philadelphia Phillies because the Phillies but you know I also put another one you know Cricut World Cup and similar similar data if you want to analyze that and now we can do some other things with this one also once I have this stored so let's say I run this block of code and now this table is stored as table one I can continue that and I don't have to go through like once you import that it's good for the session which can be hours or up to like 20 or 30 minutes of inactivity if you aren't running any code um you know this this cell or another one you know for like 2030 minutes it still might stay there in you know the current memory if not um then you might have to go you know you leave and come back then you might have to go and run that other one but that that's this is good for anytime you're in reporting all this great now now I have all this I don't have to go through and do that again now we can say this and what I did is just you know as just to show some of the things we did I just calculated my own uh winning percentage just because so just to show you so I can have this table one because now that I have that I see all my headings so I'm going to take table one wins and table one losses so you see looking at this I can pick these table headers and this is going to be an array np. array because I'm going to I already imported numpy even in that previous code cell and I'm going to create a numpy array from there wins and losses and then what I did is I just made my own average equals wins divided by you know wins plus losses you could print that out you know I just put that in there but here's what else I did um I created another table column so now I have table one average this didn't exist before that equals this so I create this average which is you know if these are numpy arrays look at this I can make this other uh array of all the averages and then I can create a new column now that's there so I could print this and I could have like you know manager winning percentage and then now that I created that I can just add this other there we go I probably don't you don't really need the extra space average I can create this other column so now I'm going to print table one now first of all notice it did print it and you know really this create this python creating the averages it really just to you know this table was correct in in the winning percentages um the pyth python calculation just takes it to more decimal places but that's okay the other thing these subtle things notice this time I decided to use a print statement which I didn't before and just notice the subtle differences if if I do print this is what it looks like whereas this is what it looks like if I didn't use the print statement and early on I like doing this it tends to format it in a way that might be easier to read at first um but if I already know that it's going to be just a few columns I just might want to use the print St and it really just it it just displays it differently um you know that's that's all so pretty cool things you can do um I'm going to do another example here again reading you know URL um so importing everything um date time and calendar we're going to use that later but you see this one again I'm just going to here's the URL of you know again I just picked place you know Tides I think that's pretty interesting because you know goes up and down that's going to link with some stuff we do later with periodic data and now the URL um again my array of tables and we'll see this now if if I just comment these out you see because if you're doing something exploratory maybe you're not as familiar with this site or you're like oh how many I see it but how many of them are really formatted as tables we can run this and it'll say boom there's only one table there we go so knowing that there's only one table then I can go back to this this and say oh okay print table zero and again I'm using the print statement you could just put table zero without the print statement that's fine um there we go um I happen to know that you know this is not going to be too big to be overwhelming and then we have all this so Tides date time and the height in feet high tide low tide high tide low tide there we go and it should alternate I think yes it should alternate so there we go now this next line I may or may you know I don't necessarily need to do this I could have just kept tables zero element zero um but just to be consistent I'm just doing the same thing converting it to this variable table one because now um we can do anything you know if I had a bunch of other code you know boil plate code of all different things I want to do with table one now I now I've stored that as this variable so there we go and again table one. head so notice this I'm printing it and then when I do this without the print statement we'll see how it formats it a little bit differently oh because I already printed it here so um instead of scrolling down I'm going to comment this out there we go yep so there you know that's another way to print it now what I want to show you with this is continuing this example if I want to do some math to this again connecting with some things we're going to do later with periodic data and being able to graph this but I have a date and a time which is of course AM and PM so down here continuing that example I'm trying some different things I'm going to convert all this to uh all that date and time look at this I have you know the day the month the day and all this time I want to convert this to some sort of numerical data that I can graph so I'm going to take this time list date list and I'm going to create these arrays hours minutes days and convert this to Epoch time so I'm going to call it Epoch array and really that's going to count the minutes from a certain point um by default it goes to January 1st 1970 so you know that's a way to make you know compare times because you can convert everything to this and then you have everything consistent minutes since January 1st 1970 so I'm going to go through this you know I have my time list and I'm I'm going to Loop through this for T and time list I'm going to split it I know it's a time so it's going to have the and then I'm going to take the first part convert it to an integer that's going to be the hour I'm going to take the second part and I know that that's minutes so I'm going to convert it to an integer but I'm going to take it just that first part because I I know we had AM and PM so I just want the first part as minutes but then if the last two digits say PM then um and this if statement I put the Co in and I did not make it on the second line that works um if you just have one little thing you can do it all in one line so my if statement here if the last two digits are PM or last two characters are PM then I'm going to add 11 into the hours um and there we go so I'm going to each time then I'm going to for each of those then I'm going to append the hour array append the minute array um I and then you could do this I commented it out here but you could print it out to then show okay what do my times look like just to see that it's right that it is doing what you want it to do so a lot of times when you're trying some things you know let's say exploratory you can print things out to test it out and then I'm going to go to date but now notice I'm going to have this date well I wanted to skip over the I I just want the day um and this is just because for this particular data I'm just going to grab everything that I already know is in the same month so that that really is why so I'm skipping over the day of the week I'm skipping over the all August so I'm skipping over the next three characters and I just want starting at character 8 to the end of the array and then that's going to be just the number so then I'm going to cast it as an integer and append it to that and then now I have my hour and my minute my day I'm going to store this you know in the range so in range of the length of that so all of these are the are the same so I I'm just I just picked one list and the length of that so now um see in in that range so notice if I say d in date list it's going to D is going to be each element in that date list but C in range I don't want each element I just want the number how long this is so now I'm going to convert this to a date time so you know I it's going to be this year this month and then each one day hour minute and then seconds I'm just going to make it all0 seconds because now I have that T I can uh convert that to a Time topple calendar. time GM which is grenage meantime and cast as that as an integer so this this line here then converts all that to an Epoch array pretty cool um we'll print that out but we'll get to that in a second and then I just want the the heights to float numbers so um you know table one. feet it's all height and feet um uh so that's why I call it f array because H was already done for hours so I can't use H for height so f for feet and I'm going through each of those and I'm G to append this so the first four parts so I'm taking that substring which is just the heighten feet or the first three 0 1 two three um because they all work out to three characters in that array so it works out I'm going to get those three which will be the number cast it as a float because they all have decimals appended to that so just showing you some some of these acrobatics that you can do hey you have a table I I I know I have numbers in here and I know it's numbers I want to work with and I'm going to print out that array so just to show you what this looks like so you see that first one is going to be the array of times um there we go and the next one is going to be the array of heights and once we have these two arrays you can do anything with them you can bring them into um you know some sort of graphing utility you can you know graph and do all kinds of things with that so you know pretty cool um we'll get to that other graphing later but I this is really all about getting this data into some sort of math form getting it from different places and into some sort of math form now I have two arrays of numbers that I can do math to I can graph or whatever you may have data in your Google spreadsheet um there we go and this is another one I you you you need to authenticate um you know you mount you can mount your Google Drive um so I have this um this Google code snippet if you're looking in Google cab down on the left hand side it you know it looks like brackets you'd have like an HTML or XML tag in you know you can click on that and it'll bring up various code Snippets you can search through them and then when you pick one you can even insert it like right in here um I inserted I I modified a tiny bit uh just to simplify what I wanted to do but there we go so you can get these code Snippets authorizing this um all these Imports you know and and you know the code Snippets help because see this like creds comma space uncore um equals default these are the things you know I I I would never think of that on the off the top of my head and there we go so I'm going to authorize this and I'm going to open um I just I I I made a silly uh spreadsheet with just a few lines comparing file types so that's the name of it and then do sheet one there we go um but all I'm doing is authorizing this and then I'm storing this first sheet in here I open that file that I wanted first sheet and I'm ref in as that value variable work worksheet notice I didn't have print statement nothing else happened but now I can continue that and now it's already stored there as that variable worksheet and I can keep going back to that and working with that doing different things and I don't have to like make that connection with the Google drive again every time you know um this and you know if you're ever doing things with Google app script the fewer calls to the Google Drive the better so if you can like call at once and get everything you need and then work from there that's that's great so you know now I have worksheet and so I'm going to use that variable worksheet doget all values and I'm going to store that as rows so this is pretty cool I can print rows um if if you know what your uh you know how you like it's your it's your Google sheet and you know how how much stuff this is and it's not too much you might even just say print r and just print all of it you can do that um and then I'm going to print the length and here's what I'm doing oh what I'm going to do is I will uh print this uh print the length of the rows it it it it's just a a silly sheet but it's fine so I'll print the rows how many and then now I I just want what I did is I made uh the third column the other ones have words the third column has numbers in it so um I'm going to create this integer array and number in range all right so the length of this and what it does is even though you have this spread sheet each row is its own element so now I have um you know I can say the length of the rows here and that's going to that's going to be how many rows even though each row will have an element so it's a it ends up being a twodimensional array here this rows when I say get all values it ends up being a two dimensional array rows columns okay so um and I have a header so my range I I want to started it at one because zero would be the header all right so now I have that range uh and I'm just going to go through these numbers I know they're numbers so I just call the variable numb so here's what I'm going to do remember it's a twodimensional array so for each one I know this is the third row so I want the numb is what row it is and then I know or it's the third column so I know it's what row is numb that's what we're We're looping through and I know it's the third column so that's why this is a two remember start at zero so there we go I know that I'm going to take the you know going down that column you know each row and then I know the numbers but I need to make sure I cast it as an integer and then I'm going to append this to the integer array so there we go and there we go I so again ways to get to this and now once again I have an integer array now what you could have is you could you know you could have a length of rows and it's just a sequential count so um you could store this um you know as you know X or something you know you could you could always make this you know like x equals um length you know you could you could always have a a a variable like this x equals the length of rows and that way you know you know it's sequential and you could you could count up through that as some index or something like that and then now you have this array of all these values in each row and and you could pair them up then okay you know plot um different things you can do so again ways to get data in from different places and you know select hey I might have columns with words in it um you know this course we're talking about math so we're going to skip those but even when they have numbers I need to get it in the right form usually some sort of array and then I can do some other stuff with it and I'm not going to go through all the different file types but just as an example you can let's say if it was you know XLS with or without that X so all our Excel files if that's online as a URL and you can work this you know sometimes people upload it to their website some people have it as something on GitHub um all that it all works you can see if it was just uploaded from your local drive you can use the other ex the previous example here of of um just uploading a file from your computer but if it's anywhere online um there we go it's an Excel file and just knowing that I'm going to do this pd. read Excel and once I have that now it's stored as a sheet and I can you know print it out or display the heading the header so I just wanted to show you this this works out as long as you are pointing to an Excel file there you go um because if it was pointing to um actually I this I this this this would work for a Google sheet too um but also you can use that URL as well if it's a public Google sheet that would work too so just all these different file types you know how you can get um you know all this all this different data in Google Drive and as as you make this you know from different things you know you can even make them all headers so you have some examples of you know you you can have a table of contents for all the different ways that you can bring this in and remember table of contents you know if you're putting this in there you put the hashtag which in the python code would be a comment but in here it would mark it as a as a head as a headache so some things you can do getting data from different places bring it into bring it into collab and now all different ways get a table um you can do some a lot of things with it get different arrays and then we can do some math to it so now let's get into some of the math that we can do with all this stuff so we'll take a look at that stuff next so I just want to briefly talk about drawing lines on the graph even when there's no function really but you can get a bunch of points and you can write the code so most of this we're going to talk about with the code but just to give you the perspective you could have you know a few points and you could write the code to rather than develop a function say hey I'm going to draw from this point and it's line to this point line to this point line to this point line to this point and you can finish it up and close it out and go back to the first point and make a shape or you could create all these other drawings or shapes that you want um whether it be to make art or whether it be to represent data that is definitely not a function so there's a lot of different things you can do it doesn't have to be a math function but there's still some code you can do to get data from a list or something and we'll look at that and you know represent it in different ways and sometimes times maybe you can draw lines and uh represent different shapes that way and we'll look at some applications of that so let's look at the code so let's look at drawing lines with code and sometimes on like introductory learn how to write code uh activities you'll find things but this is the full code that also work things like this but this is the full code that works behind the scenes so we're going to import a few things um I'm going to import uh map plot library and I'm going to import this other one um from within the same Library path and then again from the same Library patches and we'll see how they come into play so I still want to set up an array or two arrays one of them an array of each vertex and then I'm going to create another array of all the different steps I'm going to do so if I wanted to just do this one at a time I could do this here's here would be my starting point I'm going to take this vertex array verts do append and I'm going to append this 0 0 notice um I do use decimal places um I I want to make it uh floating Point numbers rather than definite integers um so I have this you know I'm going to append this X and it's going to end up being an X x y coordinate notice the double parentheses and everything and then to each step steps. a pen that's going to be the first step it's going to be path. move to and so the first step is going to be I'm going to move to this point 0 0 and I could just continue adding I'm going to add a line now verts do append to2 so now this is my second point and notice this one is path line to so move to will give you the path you know that's where essentially a starting point without Drawing the Line and then line two will go from that point to this one with with a line and this is where I could keep going and you know I could always put you know more here as many lines as I want but I'm just going to show this simple I'm going to start here draw a line to this point all right and then now here's the graph uh as before um set up the graph I'm going to set up the Axis and for here you know five in every direction that's going to be fine for what we're doing so this is where we get I'm going to create this variable called path and what it is is this python on function path and it's going to take these arguments of these two arrays verts steps so you know that function I'm going to store as the variable path because then I'm going to use that agre this other variable called patch and then it's going to work on this python function patches. path patch and then this variable path is what in the parentheses so probably easier to write the code than to say all this path path patches patches path P patch path anyway so then on my other variable axe for axis I'm going to add patch that python function and then patch so we see create the vert create the two arrays and they go into this function for this variable then I'm going to use this variable in here to create this variable and I'm going to use that variable in here when I'm going to add them to my Axis and then I'm going to show it so if you were going to draw lines it it really is good to start out with your array you know you have your Imports and your arrays that won't change and then all this however many points you want you can just add add them all right here and then all this graphing code doesn't have to change so this is just going to be a simple line when we run this there we go I didn't even draw XY AIS Lines Just 0 02 22 draw this line all right if I wanted to put more I could and here's what I'm going to do I'm going to append this and if I drew another line so maybe I'm going to call this two 2 I'll go draw a line down to that one and then I'm going to do one more thing which is going to be I'm going to go back to 0 0 my original point and so that gets its own special close poly function so I can move the point and then draw you know start there line to that line to that and then close the poly going back to the original and you see as many different points as I want to create here I'll run this and there we go boom boom boom makes a triangle all right good times and there we have it so I'm going to show you a couple things that we can add and tweak to this you can definitely do these all each step and sometimes that helps because then you can really just picture you know that what lines up you know this point and then going line to that point this point close poly but you can create your arrays right out of the gate and here I'm G to create my array verts and you see just each point in this array and then I just call this one codes but here's the array of steps and you just have to me uh uh keep track of lining these up also notice um I can continue it on one line like I did with verts or I can hit enter and then just put them in line here here comma and then on the next line and put the array here which it actually is just fine to have a comma at the very end of this array that works out so then we just match it up you see move to line that first point line two that second point and then you just keep track line two line two line two close poly and I should have one 2 3 4 5 6 7 1 2 3 4 5 6 7 and that works out so just another way I could Define all these especially if I know what points I have this might this method might be easier and I'm still going to use that same code um B see vers and then codes because I need that and then I stop the variable here for patch but I can add some other things you see I can change the face color and I can change the line withd so let's take a look at that now it was a light blue but if I just say blue here it makes it this nice uh royal blue and the line width you see it makes it a little bit thicker pretty cool so I mean you know let your artistic mind go and see what you know different things you can create just by drawing lines and you know running it this way pretty cool things and you know this is again just scratching the surface you can build upon this and do all kinds of all kinds of cool things with this so I I'll leave that up to your imagination right now we're going to talk about trigonometry and trigonometry this long word we can break it down into three parts so try means three gone means shape you know like polygons and metry means measurement so metric would make it an adjective like the metric system but with a Y we make it a noun so trigonometry and these old Greek words we read them backwards so it's the measurement of shapes with three sides triangle class as as many of my students mentioned so let's uh focus on triangles with right angles so our right triangles we will get even beyond the right triangles so trigonometry applies to a lot of things and we really can break down anything into triangles any other shape can be made up of triangles so that's why it becomes so uh Central to figuring out a lot of other things and with that we're going to start with right triangles so the reference angles here and the reference side it's all these relationships to the sides and the angles so if I call this angle a then this side is a cross from so it's the opposite side so instead of saying a cross from we're going to say opposite kind of mean the same thing but the these are the uh this is the notation we usually use in in trigonometry so if that's the opposite side now then this would be the adjacent side but notice they're adjacent meaning meaning next to but notice from this angle I have two sides that are next to it but the hypotenuse is always its own thing and the hypotenuse is the you know the longest side it's across from the right angle so since I have two sides that are adjacent to angle a but one of them is the hypotenuse so then the other one I'm just going to call the adjacent side so now I have from angle a the opposite side the adjacent side and the hypotenuse now again these are reference to how they relate so if I was talking about angle b instead then this side is no longer the adjacent side and that's no longer the opposite side then if it's angle B this is the adjacent side and then this is the opposite side because now this one would be across from angle B this one would be to and then hypotenuse is still its own thing now this matters because in figuring out a lot of things about triangles we set up these ratios relating to the sides and the angles so we're going to talk about three main ratios and then um later on we'll add three more um which are you know the inverse the the reciprocal of these three but these three main ratios and you you'll we'll see as we talk more about uh trigonometry how this comes up in different ways so we have the sign is our first ratio and the sign of whatever Angle now officially I'd put it in parentheses because this is a function but you'll see a lot of times you know in the notation people might skip the parenthesis um certainly as you get into writing the code we need the parentheses again this is a function so the sign of whatever angle is the ratio of the opposite side over the hypotenuse and I'm just going to abbreviate those here so that's the so when I say the sign it's the relationship so if I was talking about the sign of angle B you know whatever the measure of this opposite side divided by whatever the measure of the hypotenuse and that's this ratio and if that's a certain angle no matter how big the triangle is that ratio you know the sign of 30° a sign of 35° it's the same each time you know you can plug that into your calculator s of 35° and that's a constant so I get that relationship the opposite over the hypotenuse and notice remember the hypotenuse is the longest side so the opposite side's always going to be shorter um you know we're going to have these decimal numbers um usually really long decimal numbers but we may round it to like four decimal places and we'll also look at some other patterns in that too so the other relationship is the cosine of whatever angle I'm just going to call it angle B for now and the cosine is the adjacent side over the hypotenuse so that's the coine ratio the adjacent side over the hypotenuse and then the tangent is the relationship of the opposite over the adjacent so now with these three ratios one of the things we might notice is that if I you any now having all three of these depending on what situation I have or what angles or sides I might know or not know I can use one of these three it you know that that it'll apply so that's why it's good to have these three the sign the cosine and the tangent and later on we'll look at like how they all uh where we got these numbers from how they all relate so a lot of things that we're going to do in in uh trigonometry we'll we'll learn one thing and then that'll come back around again when we learn the next thing oh it relates to this it's it's very like you know it's not linear it it's very uh circular and all kinds of you know hyperlinks in your knowledge uh when we talk about trigonometry so uh it you'll find it to be a pretty interesting subject so I have these three you know um ratios how can we remember these ratios well there's that you know s opposite over hypotenuse cosine adjacent over hypotenuse um tangent so and also remember it is the same ratio whatever angle I'm talking about so if instead of angle B I was talking about angle a you know whatever you know it's the s or cosine of that angle and then you know that's that's still the relationship so how can we remember these there's one um interesting way that a lot of people found so s is opposite over hypotenuse so cosine with a big c is adjacent over hypotenuse and then tangent with a big T is opposite over adjacent so if we write it like that then uh and a lot of people then pronounce this as soaa it's catchy because then you oh soaa so you know this is the soaa is the numic device that you know Le leads us through um our journey of trigonometry and so we follow soaa and that reminds us that s cosine tangent and what the ratios are because they're going to be very useful and we're going to look at how we can use these ratios to figure out some things um if I don't know an angle if I don't know a side I can I can figure this out and that's what we're going to do next all right so here's how to draw the triangle in code and I want to show you this because it's going to be relevant we'll use this as a display and we you might remember that P plot we'll import that um import display import math for some of the things we use and time because I comment this out here but you could delay for like 1 second you know the drawing of each line to make it more dramatic so I just want to include that as a possibility and remember we set up the subplots here and I'm going to set this axis this is how I decided to set set it up for this triangle the x value goes from 2 to 12 the Y value goes from 2 to 8 and I'm not going to draw any other lines to show The X and Y AIS but that just seems to be a decent size window here then I will display this text which is the letter A I'll display that at this 0 01 and here I'm going to draw a Red Dot at that point well what does that mean I'm drawing the points for my triangle so this line draws one one line for the triangle from X from the remember these are the X values as an array these are the Y values so the line goes from 1 one to 71 and it's going to be blue then we go from 71 to 74 that vertical line is going to be blue and back to that original 11 and then to the other point 74 that line will be blue and we'll display it like I said don't you know you could draw each of these lines um and pause and make it dramatic also the fact that I'm drawing a bunch of these lines python wants to draw each of these as a different uh grid Al together so every time I do that that clear out put inight um doing that after each line here um enables it to uh not have multiple graphs so then I'm going to have the text there we go adjacent side the text opposite side and then we see you know I just tinkered with this and this was a good place to put it text that say hypotenuse so when we draw this then it ends up drawing our triangle here so we see a DOT that I'm going to label angle a and because this is angle a this is the adjacent side it's next to it now the hypotenuse is also next to angle a but the hypotenuse is always its own thing as we were talking about this other uh complimentary point or angle that's B and the right angle would be C so from a we have the adjacent and then opposite because it's on the opposite side of the triangle just as a way to show you that you can draw the triangles with code um we'll we'll Tinker with that and uh draw some other triangles too so that'll be a good basis so what can we do with this we can um get the S cosine and tangent functions for each of those angles now we'll talk about radians in more detail um it's another way to measure angles um related to you know one radian is about 50 something degrees because it's the measure of the radius along the outside of the triangle we'll we'll talk about that in more details but the short answer here is that all of our trig functions use radians so if I want my angle in degrees then inside my trig function I just have to convert it to radians and so that's why I imported math and we'll do math. radians so math. cosine but it radians um tend to be a lot lower numbers so you'd get your answer and you that doesn't make any sense so um I just for now we'll do the angle in degrees and convert it to radians inside there so what I have is there we go U given that angle and you know change the angle we can just change this one variable there and we'll calculate the sign and I switch these for some reason the S the cosine and the tangent so I just saved them as these variables s c and T so the S cosine and the tangent and then we're going to round it four decimal places is good most of these will be really long decimals if you let it go so four decimal places is good and then we're going to calculate the sign and print the sign cosine and tangent so looking at that angle a and it'll print out s and I pick 30° so the S of 30° is 0.5 cosign is 866 which this one actually works out to something else a little bit more elegant if it wasn't a decimal but we'll get we'll get to that later too and the tangent is 5744 again four decimal places that's good so there we go and once we're talking about doing Cod code with this hey maybe I have this one angle but I also want the complimentary angle so you remember I didn't label it up here but the other angle that's not the right angle would be angle B and so the complimentary angle once I know angle a then B is just 90 minus a and if I want both then I'm going to change my variables here sa a CA and ta for S cosine and tangent and I just usually remember them or think about them in the same order so you really don't have to but there we go so s cosine tangent and then I'm going to print it out s cosine tangent and then I put this down here so the S cosine tangent of B and that's what we'll have S cosine and tangent of B and we'll print it out the S cosine and tangent of B so when we run this there we go so we have our s co sign sign tangent but then we also have the other angle would be 60 so the s cosine and tangent of angle 60 so there we go and we there's we're just starting to dive into a lot of these patterns here so this is just the beginning just noticing how for whatever angle you can easily find S cosine and tangent as well as those three trig values for the complimentary angle all right so not bad one of the other things remember all these trig functions they are constants so the S of 60 is always 866 and knowing that then whatever the sides are if I know one remember it's if it's opposite over hypotenuse if I know one of the sides I can figure out the other and just as a another thing we can do we can Loop through you know the sign and you know I just decided to go from you know 0 to 180 and the only thing here I'm going to import is math and I'm going to Loop through the sign and just show you that for a second here so notice this one I didn't round it python will round it and jump all the way down there so s of 0 0 um and just degrees I just got to you know one degree and we see these little T you know a lot of decimal numbers a lot of decimal places but look at the really tiny numbers zer0.1 and you know we keep going I'm already past the sign of 30 which oh because that work notice that worked out uh you see it really is 0.5 or 1/2 the sign of 30 um sometimes the way python calculates things you know it doesn't round it but that really is uh 0.5 is the exact answer and then we get to all these others and we get down to 789 and this one did round it properly the sign of 90 is exactly one and what do we notice about these values let's go somewhere around here so look at the sign of 89999 847 and the sign of 91 999 847 the sign of 889 99 390 and sign of 92. 99939 we're going to dive into some of these patterns here but for right now looking at the S cosine and tangent and you see it'll go back down so the sign of 180 um is actually zero so um now this next thing supposing I know those ratios so this is whatever those those sides are if I divide them um you know whatever those sides are then I can figure out if I you know this is the ratio and U you know if I know the angle I know one of the sides I can figure out the other but supposing I know both sides but I don't know the angle and so that's an inverse function you know the sign of I'm expecting angle and then the answer is this ratio which you know for like 161 would be like 325 so supposing I know that ratio um I know the two sides I can divide them get the ratio but I don't know the angle inverse function and the reason why it's a sign is because the full word is arc sign um another way to look at this as inverse sign and there's some other notation for that so you know now we get AR sign and if I do the arc sign let's say I knew this ratio you know four over five um so the opposite side would be four the hypotenuse would be five then um remember I'm you know this would do the this would return radians so then I would have to make it degrees so there we go in my you know 3 four five triangle the sign the you know if I know oh one side's four the hypotenuse is five then that one angle is 53 and then I can do the subtraction to get the other angle so now let's take a look at what we can do with the next thing we'll do is uh some things we can do with this information you know how to figure out uh each side or each angle so let's see how to use some of our trig ratios to solve triangles and here's the normal naming convention for a triangle capital letter for the angle and then that lowercase letter for the side across from it so capital A see lowercase a capital B and then lowercase B capital c for the right angle and then for the hypotenuse um that also follows classic Pythagorean theorem a s plus b s equal c^2 so I'll make C the hypotenuse all right so supposing I know some of these angles or sides and I want to figure out another one so let's say I know that angle a is 30° and then if I know that the hypotenuse is 10 but supposing I want to find the measure of the side a so I know enough to figure this out so I can see that from that 30 angle I want to know the opposite side but I do know the hypotenuse and so then that tells me oh I these three I must be involving sign so I set up my equation so the sign of 30 equal a over 10 and remember that the S of 30 that is a constant it's always going to be the same number and therefore I only have one unknown and I can solve this and I'm going to do one step of algebra first get a by itself I'm dividing by 10 so I multiply both sides by 10 so 10 * the S of 30 = a and that you can do in one step on the calculator or you can write the code which we'll talk about in a minute so 10 * s of 30 and I'll tell you that s of 30 is2 they don't all work out so nicely but that one happens to be 1/2 so 10 * 12 so 5 = a and then we can figure out the measure of of angle a um if I wanted to figure out this and maybe maybe I didn't know this maybe it was um angle B that I knew now we always can do subtraction because I know know that that's a right angle but let's just say that angle B I knew that that was 60 so instead of doing the subtraction let's just say I still want to figure out the measure of angle a oh well in this case it would be the adjacent and hypotenuse that I want to involve and so then that brings me to cosine adjacent and hypotenuse so what I would do is I would write the cosine of 60 equals a over 10 there we go one step of algebra and I'm going to do 10 * the cosine of 60 equals a and I I I pick these as examples cosine of 60 also happens to be 1/2 and we'll look at you know these interesting patterns in a little bit but then that works out because 10 * 12 still gets me to that same answer 5al a pretty good so now I'm going to do a tangent example and let's let's say if I now tangent would not apply here because either of these angles opposite and adjacent I don't know either of them but let's just say I didn't know either of these but maybe I'll go back to this one um being 30 and let's say I know this one I'm going to change it up here a little bit and let's say I know this one I'll I'll still say that that's five let's we'll stay consistent with this so the tangent so I'm not going to use S or cosine because I don't know the hypotenuse and I know that angle but I I know which is the opposite side and I want to know the adjacent side so then that tells me oh then that's tangent so I'll set it up that the tangent of 30 = 5 over a and I'm also going to do two steps of algebra with this because a is in the den denominator so my first step a * tangent of 30 = 5 but notice not quite there to solve I need one more step divide both sides by the tangent of 30 a equal 5 over the tangent of 30 there we go and tangent of 30 that is also a a constant and then when we divide um 5 / the tangent of 30 U without doing this on the calculator the it's going to end up being so a would oh sorry I meant I meant to make that angle B but that's okay um angle B because that's the one I wanted to know so um 5 / the tangent of 30 um is going to be 5 < tk3 because so um b equals um 7 * 5 so it's somewhere around like nine um yeah so it's really five times the exact answer is going to be 5 * < tk3 but then uh it's like 8.5 something like that which is why it's you know we will get to the point that we're doing this stuff on the calculator or writing code because all of these you know U the one half that was a nice example because occasionally we get that you know nice 1/2 um 5 tk3 is the exact answer but you know about 8.5 most of the time when you when you're solving these you're going to get you know uh weird decimals um I mean at this point a square root answer that's a nice exact answer but even most of the time you're going to get some weird decimals and you know all these three angles and sides yeah it's very rare that you'll get something where they all work out to like you know even like one decimal place so you know solving now I have how can I use each of these to solve for for the sides if I know an angle on one of the other sides but what if I it's the angle that I don't know so let's have a Twist here so if I keep this maybe it's if I don't know this angle and I'll tell you this it's not going to be a 3 30 6090 triangle so let's just say let's do a nice 345 as as a nice example good Pythagorean triple and let's say I want to know angle a I mean right now I know all three sides I can do whatever trig ratio but let's just do a sign so if I have angle a the sign is 3 over 5 I know that ratio but I don't know the angle so let's write that so the S of angle a is 3 over5 great so I set up my equation equation but how do I figure out the angle and remember inverse functions are when we switch the RO of X and Y so when I do sign I'm expecting an angle and then the answer is this ratio but when I know the ratio but don't know the angle that's the switching that's inverse so outside of code we would I might even use this inverse sign no notion to show it's an inverse of 35 and that works and a lot of calculators have that notation uh but the other the other word for that is arc sign and we can write it as Ark sign of 3 over5 equals a so that's you know the other word for that function arc sign which is the inverse sign I know the ratio and then I'm expecting an angle oh and actually all these are going to be capital A because it's the angle that I don't know and then we'll see in the code that it's actually going to be you know um math. aign but we'll get to that so you see you want to know you know on the board or on paper how to set this up but then we're going to take that and we're going to write code to do all this because at any point you will be breaking out the calculator or writing code to get to these you know um yes you're you want to remember these ratios you want to remember how to set it up you're not um and certain values you might remember but you you know of all these different you know you're not expected to remember you know the ark sign of three over five or something like that so you're always going to be at that point you'll be breaking out the calculator or writing code so let's take a look at how to do all this in code and you know set it up so that you can plug in what you know and quickly output the answer so let's take a look at that code but right now everything that we're doing in trig depends on C being a right angle so that's something that we would already know if we don't know that then it's a different situation so I have my angles capital A B and C A and B are complimentary because C is 90 and then my sides across adjacent and however so you know we see the the naming convention and it's helpful then to Picture This triangle even though as some of these angles get bigger or smaller it's not necessarily drawn to scale you know um someone famous said all models are wrong but some of them are useful and that's kind of what we want to get to here here this is useful that we can picture the relationship between the sides and the angles so we can use I I broke this down into three parts here um finding sign using sign to find angle measures so what you would know is you would know the angle and you would know the opposite hypotenuse if you're using sign so if you make the unknown value zero now for all these I'm going to make it like a 3 four five triangle and you know something like that so let's just say I know that the angle is like 57° and then I'm picturing side a and I'm going to say that that's three um actually that would be four and then hypotenuse let's say I don't know so I'll put that as a zero and see then that way you know if it's something else you you know if it's the opposite side you don't know then um here we go so if you can picture the equation that we were talking about you know s equals opposite over hypotenuse so then if I knew if I didn't know the hypotenuse then I have two steps of algebra um so the unknown x equals the opposite divided by the sign and if I did know the hypotenuse you know let's say I knew that and it was the opposite side that I didn't know then it really just would be you know my hypotenuse you know opposite over hypotenuse that's the denominator so hypotenuse times the sign would be my unknown angle all right so there we go that we have these two ways so if I had you know this is five um 57 that works and notice each time you know what would be the unknown and then what would be the answer so then we're going to print the unknown is answer and we'll see how this goes and there we go so again I'm rounding this as just an example that you see that this answer is reasonable um yep we would know the opposite side or if I knew the opposite side was something like four and hypotenuse I don't know I could run it there and yep so um again a 345 triangle the angle would be like you know not exactly 57 so we get the idea here um or if uh you know we could have it as you know different angle all right so same thing with cosine um cosine adjacent over hypotenuse so if it's the adjacent side we don't know multiply both sides by hypotenuse and we get uh we get this if it's a hypotenuse I don't know then two steps of algebra and I get adjacent divided by math Co cosine so similar idea so you know let's just say uh there we go 57 and if it's the adjacent that I don't know and the hypotenuse then there we go um because then that would round you know the adjacent side would be three and you know that would round but again the angle wouldn't be exact if for a 3 four five triangle the angle would not be exactly 57 just using these round numbers to get to show you how this would work and let's say if I knew that that was three but the hypotenuse I didn't know so and you see our two if statements and you know we get to that and same thing with Tangent you know angle hypotenuse or opposite and adjacent if it's tangent that I want to use so I would do the same thing um which one you know did I not know now supposing that it's the angle that I don't know so I have this that we have the sides a b and c and um there we go so if I you know if I don't know this now notice I'm not solving for this I could I could just throw Pythagorean you know again this all works if it's a right triangle so given that I could do Pythagorean theorem also and figure out the unknown side but I just want to take this whatever side I I don't know I just want to kind of factor that out so if I don't know a then I'm just going to use B and C so um AR cosine of B over C equals angle a so you know if we again if we picture that like we were talking about on the Whiteboard you know if I don't know angle a then it's you know AR code cosine of b c um or if I don't know side a I'm just going to not worry about that I can figure out angle a AR cosine of B over C and then what I'm going to do is subtract because once I figure out angle a then just subtract to get angle B and then I can print that out so that's really what we're doing here just three sides and if there's one I don't know I'm just not going to include that in my calculations because I can do AR s cosine tangent um to figure out the one angle and then subtraction to figure out the other angle there we go um you know depending on what we don't know so what I what you know if if I don't know B then I'm going to use I'm just going to factor that out so that would be S arc sign using a and C to figure out that angle or if I don't know C then it' be tangent because I wouldn't know C the hypotenuse so I must do opposite over adjacent and we're going to put this together it does seem like this is a lot of different formulas and we're going to add a couple more and then put it all together to be able to take input you know anything you know or about a triangle um our eventual goal is you see three sides three angles that's six things that if you know any three of them you can solve everything for the triangle that's what we're building up to so we'll get to the next thing so let's talk about radians and a radian as we mentioned before we could measure degre measure angles and degrees or radians so what is a radian a radian is the measure of the radius along the circumference because remember the circumference of a circle is 2 pi * the radius so the measure of the radius Pi is 3.14 twice that 6.28 so if I measure the radius I could get that around the circle you know um about six times not drawn to scale but we see you know 1 2 3 4 5 six and then we pretend that's only 28 not drawn to scale so if I measure the the a radi the measure of the radius along the circumference but then this angle that opens up to that that is one radian so we're not talking about the radius we're talking about a radian and you know this measure this angle is one radian degree wise it's like 50 something degrees and why do we use radians instead of degrees well degrees it's it's nice you know carryover from the ancient Babylonians they like things base six and 60 works out for a lot of things but in a lot of applications there's no real reason to use that number whereas radians it's always proportional to the radius and so however big or small my circle is if I'm talking about radians it's going to be proportional and then therefore relevant to some other things we're doing so we get into some Physics applications and such by default that's usually going to be radians but sometimes we just you know people not using those applications might just reference you know degrees so we want to be able to convert between the two and given this you know radians um that 2 pi radians is the whole circle so if I if I have 360 then that matches up to 2 pi radians and I can set up a proportion so as long as I have degrees on the top and radians on the bottom like I have over here then if I know one I can figure out the other so if I have like you know 60° and I don't know how many radians that is I can cross multiply so 60 * 2 pi is 120 Pi / 360 and so that' be 120 Pi divid 360 and then that cancels to nice pi over 3 and most the time we're going to have radians as some fraction involving Pi so if you just come across an angle you you know and nothing told you whether it's degrees or radians if it's some fraction involving Pi probably radians if it's a larger number and possibly a decimal involved then that's going to be degrees so um we can convert from degrees to radians and we know python has that buil in already you know you can have this function you know degrees uh put input the radians out it'll output degrees radians vice versa so this is just showing you that what first of all what's it doing behind the scenes you know proportion and then also if there's some other application you just want to convert you can do that all right so this is degrees to radians but if I go the other way and remember radians might already have you know let's say I have like pi/ 2 so that might be how radians show up again some fraction involving radians uh involving Pi so how can I figure out degrees cross multiply > / 2 * 360 and then / 2 pi so I'll do some simplifying there Pi / 2 so that becomes 180 Pi because I'll do that dividing by two and then divided by 2 pi and we see converting radians to degrees then Pi will cancel out whereas degrees to radians you're going to get Pi in your answer Pi cancels out here 180 / 2 is 90° and pi/ 2 that radians is 90° so we see how we can convert one to the other we see that we have um radians as a really good measure because it's proportional and different ways we can convert builtin python functions as well as setting up a proportion depending on the situation one might be more useful than the other so let's take a look at the code and see how we can do this so first of all as we were talking about this is the ratio 2 pi radians is the same as 360° so we set up your our proportion then as long as you have radians over degrees you know you know one you can figure out the other and we're we're going to cross multiply so we just picture that as we set up our code to do the cross multiplying so here I'm going to say and put it in the comments and radians omitting Pi because remember radians will have Pi it's by default it's a we're going to write it as a fraction involving Pi or integer involving Pi if necessary so we have radians which will have Pi but then we cross multiply and then we divide by 2 Pi Pi cancels out so omitting Pi I'll put that in the answer so whatever the radians time 360 / 2 pi and I'm just looking at this and seeing how Pi cancels out and it's 360 / 2 every time so I'm just going to say um the um radians to degrees if I know my radians then multiply by 360 / 2 is the same as times 180 and Pi I'm not going to put it there for radians and then I will reference it in the answer so if I have pi/ 2 radians I'll just enter that as one2 you can use fractions or decimals in this but really radians be expected to be a fraction so Pi over2 would be 12 and then I'm going to print out Pi radians equals 90 de true statement and we can even do our proper fractions we can have 1/2 u remember on the fourths so we could have you know anything you know three halves let's do something over the fourths and um there you go 5 over four you know in different quadrants and still it's 5 pi over 4 I'll write that as the fraction and convert it now this this will always give uh this part I know that it was 5 over4 but this display will be decimals and that's fine for now yes equals 225° and degrees whatever the answer is decimals are fine for degrees so there we go converting radians to degrees just do that now converting degrees to radians notice if I know degrees time 2 Pi / 360 and and you see degrees won't have Pi but when I do that cross multiplying I now I'm including Pi * 2 pi but then ID by 360 so * 2 ID 360 is really divided by 180 and I'm also going to add Pi in there manually so because I do want a fraction in my answer here then I have to do some other acrobatics um python has this nice builin fraction module so fraction Library so we take a look so if I have my degrees let's say 120 um you know interesting because it's in another quadrant so uh not not everything in the first quadrant so if I have my radians now we think we're done here oh okay you know math. radians which is the same we can do that with degrees too math. degrees um but remember I didn't use math. degrees here because I really wanted to not have radians as a decimal um you know I would have to it would not 54s Pi that wouldn't work I'd have to you know that number times 3.14 even go into a few more decimal places you know uh this is the normal way that we would expect the the input so math. degrees I really would need uh to already have converted radians to a decimal so that's why I didn't use that there but I wanted to show this here that degrees oh okay I can use math. radians that's great but guess what that's not the end of the story because math. radians will give me a decimal answer for radians and that's not what I want so um here's some things um if I convert that to a string um and you know if I do this then if if I do R2 um divided by so convert this to a string and then this fraction to a string and then I have this nice function limit denominator because you know that won't always be necessary but I picked a number here to illustrate that because 100 12° it's going to be 2/3 which would be a repeating six and there's all kinds of you know that can get into a mess but now I have this degrees equals this number of pi radians so if I do that it will give me 120° equals 2/3 Pi radians so we see just the straight conversion in other things if I'm converting it you know behind the scenes yeah to degrees to radians it works out and I don't see all those long decimal numbers um that's you know if it if I wasn't trying to output something that might be a good way to do it yeah math. radians math. degrees but when I do want to Output this conversion this is how we would do it you know we get these few lines of acrobatics so that's why I just made my different steps R R2 R3 convert it radians oh but we're not done convert that to a string and dividing it by pi because I want that fraction and then take that string convert that to a fraction limiting the denominator and those are our steps for converting degrees to radians and radians to degrees in ways that I want to display it this is the unit circle and unit because it's one unit that we're really zoomed in on on the graph here so there's still zero Z but this is just one and then one in every direction um even down here but I wanted to focus on this we're going to talk about that part but that's why it's the unit circle because I have a radius of one if we could zoom in on the graph like that and what makes this so useful and most things in trig are based on the unit circle because if I have you know one in every direction that means the radius is one so let's let's look let's talk about this what's the if I have an angle here and I'll call this central angle a so what's the sign of a so the sign of a equals y over one H over one I mean I don't have to write the S of a equals the Y value and then the cosine of a equals x over one so every XY point along the unit circle based on this central angle every X Y point the x value is the cosine and the Y value is the sign and that's where we get our trig ratios from the unit circle so then I have all the s cosine and then of course then tangent is y overx because it's you know s over Co and and it's y overx the Y value over the x value or the sign over the cosine and that works out I have you know all these different values so here you know cosine remember that starts at zero and then we we go around this way so the cosine of 0 is one and the S of 0 is 0 and then we get up to here so this would be 90° or pi/ 2 radians then the cosine is zero and the S is one and every angle whether it be degrees or radians um all along the unit circle you know we have this value for the sign or the cosine and then we get our pythagorean identities because we remember Pagan theorem x^2 + y^2 = Ral R 2 and then therefore s cosine squ plus sin squ = 1 pretty cool so there's you know and then all of these then it works out nicely if you're in this other quadrant for certain things that you might remember you know notice uh for the Y values this this would be symmetrical so if I'm at different points along each side you know in different quadrants you know I could have symmetrical points here but the difference is the sign because you're in this quadrant you know the x value would be negative or you know in this quadrant you know then it'd be kind of symmetrical about the xaxis but then the Y value would be negative or here both of them would be negative so you know we we have some some patterns here now there's most of the trig values you don't need to know but certain ones we tend to remember because they work out to this nice pattern and so let me take a look at this if we have I'll remove our triangle so we we I mean we know that that exists but what about some of these key values here um so so if I have um you know if this one is 30° 45 60 and then up here would be 90 and then down here would be 0 de or zero radians and then if I have these as radians so 30° so then that's pi over 6 45 that's pi over 4 60 that's pi 3 and then 90 that's Pi / 2 so for these angles it actually is worth it to remember these because it works out to this nice pattern and I'm going to start this pattern by changing this yes that's still one zero but supposing I wrote this as I'll erase this one too so supposing I wrote this instead of one I'm going to write this as the < TK 4/ 2 so of 4 is 2 divid by two is one that's still one but if I write it like that for these angles then the pattern is the x value in this one is the S < TK of 3 over2 and the x value here is the < TK of 2 over2 and the x value here is the sare < TK of 1 two again if I don't simplify it then we see the pattern and then here it would be the square < TK of 0 over two I'm going to erase that part so the x value does decrease as we go around but these particular angles it works out to these nice patterns here > of 4 3 2 1 0 over two pretty cool and then the Y value does the exact opposite so the Y value here is z and I'll write that as a of 0 over two and then the Y value increases as we go up so that becomes a square of 1 over two that becomes squ 2 over two that becomes sare 3 over two and < TK of 4 over two so given these you know we are going to look at the code and how to write a code to get all these and that's going to especially help for all these in between angles but certain major angles you can figure this out and even though we're writing code we still want to be able to work out some stuff in our head you know and looking at that then given this quadrant you can say oh well what angle am I talking about and just picture oh if I want cosine that's the X and so just count 4 3 2 1 0 where which angle am I talking about or if I want sign that's the Y value 0 1 2 34 and which angle and like I said they they correspond to the other angles because if I was in this quadrant I'll just pick one of them here so if that's 60 so 90 minus 30 is 90 + 30 so that would be 120° or if that would be Pi 3 then that would be 2 piun 3 radians and it's symmetrical here so the the values are the same but I'm in this quadrant so the x value is negative so we see remembering them in this quadrant then we can see the the the Symmetry here but the x value is negative because I'm over here and and then the Y value be the same so 45 and then or pi over 4 is the same as 135 so 1 pi over 4 2 pi 3 pi over 4 and we see same values but the x value be negative nice and symmetrical here um zero and then remember in radians then this is 180 or Pi radians so if we get huge numbers then we can count like how many multip of Pi Pi 2 pi brings us around full circle and you know 3 Pi would be the same the beauty of these trig values is that they're repeating functions um we can just keep going around the circle and again things we can we can write the code for this and we can look at those patterns and we definitely will do that but it's also good to see see this beyond the code and see how it all fits together because a lot of times you won't see it written like this but if you picture it like this it's you know easy to remember and then you know all the nice symmetry so this is one of the many great things about the unit circle that all of our trig values come from this there we go s is your yvalue cosine your x value tangent is YX and then you know all these nice patterns for those particular angles and you know we'll we'll look at some other some other interesting patterns here but just to see here's what the unit circle is and let's talk about you know different ways we can create this with code and see this on the graph so let's take a look at the code so here's the unit circle in code and besides the fact that this is going to look a whole lot better than my drawing um just to show you how you can represent a circle we've been graphing some things but you can also graph a a circle if you want and this graphing should sound seem familiar notice I just made the axis um 1.5 in every direction so really it's you know we're zoomed in on that part of the graph you know you know only one unit in every direction hence why it's the unit circle and we have uh you know each axis and um this and so I'm going to save this as Circle which I don't necessarily need to do but you know I'll do this because it'll still run this code which is PLT do Circle okay I can plot a circle um you don't need this uh extra space but you can have it if you want and this is what we have here uh 0 0 that's where it starts and the coordinates of the center radius is one and R we're I'm going to do fill equals false because I'm going to do some other stuff with this um and the reason I added this is because then down here I can add artist Circle so we're going to use this for unit circle but you can use this for other shapes and this connects with some of the other things you know if you've done other you know drawing in Python for you know different things you know I can save the here's my circle and I add the artist um I also am going to add this um set aspect equals most of the time that wasn't an issue because you know I'm graphing something and you might notice that the xais is extended a little bit and our coordinates are more rectangular but for the unit circle I want this to be equal so that you actually see it as a circle and not an oval so as we run this and the suspense here this is our unit circle so we see it is one in every direction the radius is one starts at 0 0 and this is where all the trig values come from as we were talking about that uh and I'm going to show you what that means but this is our unit circle and what does that mean it means in the circle we have triangles so here I'm just going to redo this um all my circle include this there we go but here's triangle that I'm going to put so uh you know AAL 1 uh we'll get to that but notice I'm going to have there there's my angle um but uh we're not worried about that right now um math. cosine of a math. s of a remember the default is radians so one radian that's you know a decent angle to illustrate our point so notice the cosine I'm going to store it as X and the sign I'm going to store it as y and after all this now here's some text I put you'll see where this shows up in the graph um text to display but what I'm also going to do is I have the plots here and these other lines that I'm drawing so now that I have my X values and yv values I'm going to draw some lines put some text on the graph and here we have have it so this is our unit circle with a triangle now notice the hypotenuse of this triangle is still the radius which is one and that works out nicely given this central angle it's a our rectangular coordinates so if I plot this point XY well how do I plot the point go from 0 0 over X up Y and that makes the sides of my triangle rectangular coordinat so we know that this angle is a right angle and if we remember everything then we notice that we can do trig here because my cosine is adjacent over hypotenuse X over one which is really just X and my S is y over one which is y so whatever this angle this central angle is inside the triangle then my cosine is my x value my S is my y value so if when we were doing before the just you know displaying the decimal numbers for S and cosine that is going to be our X and Y values all along this unit circle so you know that's where they come from and here's the triangle inside so we can see this visually and I did one more thing for you to animate this and the animation is pretty interesting um all the other things and I'm going to import time but here's the triangles now notice this is all in a function here so I have it I think this animation Works sleep for 3/10 of a second clear the output and then yep clear the output and then I'm going to do all this you know and you know in this loop I just called it a for a in range 70 that ends up being enough so a is my you know my counting variable so this is still in radian so I just did 0.1 * a that ends up being enough of a difference so my angle you know when a is 1 it's 0.1 radians when a is 2 it's 2 radians and again you'll see that that ends up being enough of a difference in the angle so based on this Loop that counts through variable a I'm going to have these different angles and then cosine and S are my X and Y values so going through this Loop I'm doing all the same things I just did in the cell before but this Loop is counting through plotting that triangle and then you know wait you know 3/10 of a second clear it and plot the next one so you can see as this central angle increases we can just see these adjusting then you have you know your XY and this still works for that angle for all in all these different quadrants because I can actually count the angle from you know 0 0 in the first quadrant you know along the x axis in the first quadrant or I can count you know other ways oh keyboard interrupt excuse me so I can see this showing that I have the sign and notice this angle keeps increasing so it does go up through 2 pi radians the entire circle and it'll still draw those triangles um and you you'll see that that works out you know when we're at one of those points in you know in another triangle um the s or cosine there you know there's when we do inverse sign it actually works out for two possible angles and we'll look at that and again the Pythagorean aspect because given those triangles sign sare plus cosine squ because these this equals 1 well 1 squ because of that triangle and so I just put this little Loop here to to show this again I'm just looping through I'm not even graphing this but given those angles so the S and then squared cosine squared and one so I just to show you we have the sign and cosine squared gives us these huge decimal numbers but look at that every time and just the way python calculating works out every so often you get things like this but it really is sin squ plus cosine squ equal 1 so we see how all this comes together now in this right triangle um you see we have this uh in this triangle in inside the unit circle um all of our X values and Y values are points along the triangle for those given angles and remember um at three you know if it were a clock at 300 then this would be the angle zero and we also saw that you know at certain times it seems to close up and you wouldn't even be able to make a triangle so now as I mentioned that this would be three a clock so the animated unit circle what if I plotted um this point here so I plotted a line and so what if I plotted from 0x from 0 0 to XY and what if I comment out all the this is actually going to be useful for you in a project that's upcoming just to show you so we have this and um here's another trick if I wanted to make this a clock clocks go the other way so what I would have to do is just make everything negative and then if I ran this you see and we see this moving around and as another bonus here supposing um I wanted to start it at 1200 instead of what would be 300 you know our normal trig starting point then my angle I really want to graph the angle that that's um right be that's before that so I would make it minus uh I would graph this as uh plus uh math do I'm I want to do this exact so I'm going to say math. Pi um over two instead of giving the decimal equivalent and you see how this starts then at the top and given these you know you could have this tick any number of seconds um can look at that okay and just uh that I said that might be helpful for you in an upcoming project all right and Pythagorean um there are other Pythagorean triples but let's focus on this that sin squ plus cosine squ equals 1 often useful thing to know so let's take a look at how we how else we can graph these values not just in a unit circle and we'll see some other cool patterns here so let's talk about how we can graph these trig functions if if I make X the angle and y the act the trig function so unlike the unit circle X and Y are values on that but if I just make X the angle so and I'm going to make it in radians so if x is the angle then our angle you know we have zero but in radians I'm going to go to the major points pi/ 2 which corresponds to 90° Pi which is 180° and then so 3 pi/ 2 and then 2 pi come full circle so we're going around the unit circle every 90 you know 0 Pi / 2 pi 3 Pi / 2 you know we're going around and if x is the angle then let's just picture what's happening to the Y value if I do y equal the S of X so as that angle increases going around the circle what happens remember y the the S of X starts at zero so we do have this point and then the sign being the Y value on the unit circle what's it doing the as we're going around a circle it's going up then down then it's negative and then back around so at pi/ 2 you see the Y value really only goes one to negative 1 so at Pi / 2 the sign is 1 and then at Pi it goes back to zero again and then going around the circle 3 pi over 2 down now it's down to Nega one and then back up to zero here and I'm going to draw this with a nice curve to it to try to you know estimate these in between values but that's a sine wave and the name of this sign the comes from the adjective sinuous which means curvy because that's what the graph looks like it's this curve and you know it continues you know forever in both directions it just keeps going um because as X increases you know beyond 2 pi you're going around the circle again so it just goes around and around and we get this up and down sine wave so and it works out well when we're doing this in radians because degrees that arbitrary number of 360 to get that full cycle I would have to go from 0 to 360 but yet the Y value only goes up and down you know one to negative one so you know if we did it proportionally then you wouldn't even be able to see it on the graph so that's sign so what about Co cosine I just did s first so if I take cosine and I'm going to keep these same major angle values but what happens with cosine when I go at cosine at zero it starts at one and then at 90 degrees or pi over two then at zero and then at pi so remember we're going around cosine is 1 0 1 and then so 1 zero down here it's negative 1 when we're at pi and then goes back to zero and then back up to one so again I'll try to draw this with a nice curve to it but there we go one Z and again that also increases and if we Sol them you know continuously you know this continues the sign the cosine graph they are very similar but there's just a shift to them and that's why Co when I have y equals the cosine why it's the why we have Co because the graphs are similar but there's a shift to them and so that you know sign because it's sinuous or curvy and cosine because it's like that but it goes along with it but there's a shift to it so we have S and cosine and being familiar with the graph we can you know plot out a few of the key points and then sketch it out in between we'll also show how to do this in code um built with the builtin functions or even with you know one point at a time you know so that's pretty interesting so we have S and cosine um let's do one more here let's talk about tangent because tangent is s over cosine but if we remember that's going to cause some problems because I can't cosine is zero sometimes so if tangent is s over cosine so what happens um what happens at uh 90° well first of all if it's s over cosine then when s is zero then the value is zero but then when cosine zero I can't divide by zero so what we would do is I'd put a ver vertical line dotted line there that's our ASM toote it's that x value can't exist so therefore there's no possible way for any y value to be along that and then if we go at Pi so s is zero yeah X is negative but the sign is zero so then that value exists and 3 pi/ 2 x is z so undefined and then at 2 pi it's zero now just knowing that information is not enough to know the tangent graph but I'll tell you what does it do it actually ends up looking like spaghetti so that's what the tangent graph looks like and if we continued it on you know it would be like this so tangent graph and most of the time we won't see these dotted lines that's just if we were drawing this that's that's our guide um you'll just notice that hey there's that x value that there is nothing and then it gets you know Tang can approach this but never get there now at least for the 90° then or Pi / 2 that makes sense inside a circle because if that or inside a triangle because if the triangle um I'm just going to draw this here if I have a triangle so you know AB C so if that angle gets gets to be you know if that angle's zero then we're at zero and as that angle increases the tangent would increase B over a because that would keep increasing but it can't be 90 because then I wouldn't have a triangle so you know for that part it also makes sense you know looking at that comparison but for the graph it definitely goes back to you know the explanation is s over cosine and again let's take a look at how to do this with code and and you know a couple different ways from a loop and plotting points to some of the builtin functions to graph this all right so let's take a look at the code so now let's graph the trig functions not as as a part of the unit circle um though I want to start with this and just keep that as a reference here so here I'm just going to recreate the unit circle um in this case using degrees so uh I'm going to recreate it using points so I'm going to Loop through this here where you know from a for the angle in range 360 I'm going to Loop through and each one remember s and cosine have to convert it to radians um and then I'm going to plot this so you know that works there's my unit circle I didn't put the axis each each axis but there we go we can draw our Circle as again um you you know another way to draw a circle you you can plot all these points uh so I did that with degrees because now let's take this as so a which is the angle if that's my x value and then my yalue I'm going to start with s my yalue is the sign so the sign of a um and I made this AIS here this is going to you know look silly but it you know now it's all equal x goes from 0 to 360 um y goes from 360 to positive 360 and when I graph this this is what it looks like when it's equal axes because remember the sign only goes up to one and down to negative 1 so if I use degrees you know it's so stretched out and we can um we can make this I'll make it like NE like two or something so we can see you know the edge of the graph so I we can just completely change this aspect ratio and I still have X going up to 360 and why just going up you know to one and down to negative one you know that works and you know that illustrates that we can do this but beyond that it's still radians are nice because they're proportional you know it's the measure you know that angle corresponds to the measure of the radius on the circumference whereas 360 really that's kind of an arbitrary number you know we came up with um I think it goes back to the ancient Sumerian so many things they did were based on six and triangles so that's where we get 360 and you know dividing things up that way so how about we do it using radians so again I just go back to the circle um rather than just drawing the circle as we were doing uh before we can just you know plot X and Y as points and that works and it still looks like so many individual points that's what I wanted but you know plot even more points and it'll definitely look like a smooth Circle so we can plot those where you know radians and then you know X and Y so then if I was graphing this again my range um for radians um I want it to go all way all the way around but I want to give enough different value so I want maybe 70 points and so radians you know uh 2 pi radians for the circumference so that's 2 * 3.14 6.28 and so each time you know for a then we go up you know it will count up these you know tiny increments and end up at seven and that will work out so X is the angle that will increment enough for us to see our graph and Y is our s sign of that angle so now we really see you know a nice illustration of our sine wave where our ratios you see I can have this normal 1 to 7 and even if I had the Y value go up to seven we would it would look a little more zoomed out but you would definitely recognize the sign wave so all of our trig graphs are going to use radians it just makes more sense so there we have it um sign using radians and I absolutely could do the other thing do this with cosine too I'm going to show you this in the next step but I could just as easily do s and cosine um but rather than the points um I'm going to use this to start using numpy because we were using numpy before in the algebra with python that's a good goto because numpy it creates this array of X Val of well array of values which in this case I'm going to use as X values so that way I can base this all on my graph Dimensions which I can change here if I want you know I can just Define it X Min x max y Min y Max and then I create how many points do I want based on those graph dimensions and if I want more points you know this is going to be enough for us four times this but I could always add five make this you know increment that number four and then I create this np. linspace you know min max and then how many points in that range so I create this array and for so many of our functions that's just going to be a goto create this x array or this np. linspace array of X values and then we're going to use that to plot everything and then I can Define this hopefully this is looking familiar if you did the algebra with python course then my plots um and you know my I my Axis and then I'm going to draw the X and Y axis um still making them blue I just kind of like blue so there we go np. sign and now I have this and I can graph this you know there we go np. sign and you might notice this should have a nice curve to it and you might notice some you know not perfectly curved aspect so that's where I can say well more points would smooth that out so even if I just increment that to five that might be enough Smooths it out a little bit you see and and I could certainly increment that to 10 takes a second longer and you see how that really Smooths it out so that's where using that np. linspace helps a lot of these things we're going to be dealing with uh you know very curvy lines I mean that's really why it's called sign because the adjective is sinuous which means curvy and you know that's our sine wave and this is usually the goto for modeling a lot of up and down Trends we're going to get into some of that but then also um you know anything curve because it starts at 0 0 and now we're going to look at cosine you know why is it called cosine so I'm just going to model this one and I'm going to comment out sign here so cosine looks very similar but notice it starts at one and if you remember the unit circle because at zero you know when the angle is zero Co the S the Y value is zero but the cosine was one the x value so very similar graph but it just starts at a different place you could use this a lot of times modeling something with cosine would be like a spring that already is stretched out so that's why it starts at one but some you know starting at 0 just works out for a lot of things so that's why we model so much with s and we see cosine is name that because the graph is similar all right and next we're we'll get into tangent um in the next one actually let's get let's do tangent now uh just tangent and remember tangent is y overx so in our unit circle it's the opposite over the hypotenuse which is y/x and so if I look at these I'm just going to graph tangent I'm actually not going to I have other things down here but we'll get to that if I just graph tangent spaghetti and we also notice that um you know it starts at Z 0 because when Y is zero then we're at zero and we have these jumps in the spaghetti because it's y overx so at 90° or pi/ 2 radians X is zero which zero in the denominator makes it undefined so I have a vertical ASM toote here no you know undefined and then we keep going there we go so we we see the spaghetti um not a lot of things that we can model with Tangent graphs but it's definitely it's interesting um so there we go and in the next thing we're going to look at all these other trig functions and other graphs but for now you know taking a look at the sign and cosine graphs and how we can use it how we can do that with nump so here's a look at all six trig functions and it all comes back to a a triangle like this a right with right angles that if I have the angle here then this would be the adjacent side this would be the opposite side this would be the hypotenuse just as a reference so if we have S then that's opposite over hypotenuse and if we're in the unit circle then that would be the Y value because y would be the opposite from the central angle and the radius would be one cosine adjacent over hypotenuse and in the unit circle that' be the x value the horizontal over radius of one tangent opposite over adjacent and in the unit circle that' be YX and another way to do this because sometimes this is useful It's s over cosine then now we get into the reciprocal functions tangent and coent so tangents opposite over adjacent cotangent adjacent over opposite or another way to write that is one over the tangent that works out secant is the inverse of cosine so instead of adjacent over hypotenuse it's hypotenuse over adjacent or sometimes it's useful to see that it's one over cosine and then cosecant the inverse so it's hypotenuse over opposite or again I can write it one over s now we'll look at the graphs the the CO as we talked about with sign and coine the co functions are named that way because the graphs are similar and then the reciprocal functions so they're not named Co because of the reciprocal they're named because the graphs are similar so tangent and coent um you know spaghetti but different and we'll look at secant and cosecant but here's I always remember them in this order s cosine tangent cotangent and then secant cosecant so to think about remembering the reciprocal functions tangent and coent are reciprocal and then cosine and secant are reciprocal and then s and cosecant are reciprocal so remembering this way sometimes that that visual helps to remember you know what the reciprocal functions are and when we see that and we see the graph we'll we'll see how secant and cosecant match up with s and cosine so just a good overview of all this before we get into the code you know how all this fits together the reciprocal functions and how they're all all these six trig functions are related to each other we usually see we often don't use these because for a lot of triangle applications s and cosine and tangent work like if I have this I don't also need the reciprocal to solve certain problems but it's good to see all of these together and again the big picture as we get into the code and see what uh what these functions look like and what the graphs look like so let's take a look at the code so we have our graph Dimensions as we were doing before and tangent so mentioned before tangent you know um np. tangent and this line of code why I put this in there so that um tangent will always be this spaghetti because it's Y overx and then you know that's that's always going to work out to be a positive slope and it looks like this and then it's y overx so every so often the x value will be zero and that makes it undefined and so that's why we have these breaks here and so that the python graph doesn't display that as like a vertical line which is not really a part of the graph I have this that if the you know that slope is that difference is always going to be positive so if it's ever less than zero I'm going to take that as not a number and then therefore it won't graph it so this line of code just makes the graph look better by eliminating those undefined points and that's tangent but what about coent so it's co so we expect that the graph is going to be similar and it's a reciprocal function so you know I don't need a tangent button on the calculator most calculators won't have that because of this reason I can just put you know one over tangent is cotangent and that works and being one over I'm still going to include this line and it's just different because I have to make it if it's greater than Z if that difference is greater than zero then make it not a number I'm not going to put these on the same graph so I'm going to comment this out and let's take a look at cotangent so we remember tangent here and then we have the graph of cotangent so we see the slope is negative each time very steep still but negative each time and shifted a little bit tangent graph did go through 0 0 and cotangent doesn't because as the reciprocal yes it's 1 over tangent but that also means it's X over y instead of Y overx so X over y now it's undefined when Y is zero at these points so that's the tangent and cotangent graph um interesting we don't do use them a lot for modeling things but you know we see see these graphs all right our next major grouping is secant and secant does also have a CO graph cosecant let's we're going to start with secant though and there's reason why I mentioned secant and cosine in the same breath um as we were talking about they they they are reciprocals so one over cosine is secant you know that's just how we're going to do it and then we have this and it just works out this way um sometimes you arrive at this um by tinkering a little bit that if the difference is greater than two um then I'm going to make it not a number that still gives me a good graph um sometimes you know I found two Works more or less than that it doesn't it it it kind of distorts the seant graph so there we go I'm just going to graph this seant seant and we'll take a look and see what interesting things this looks like so look at that parabas but you see it kind of Parabola up Parabola down up down up down all right there we go and you see you know our values here so um at 0 0 when the cosine is one you know there's secant and then we start you know when the cosine is zero then it's undefined you can imagine like vertical dotted lines there for these values that don't exist so that's cosecant that's secant but now I actually want to graph this along with the cosine graph um so there we go so I'm going to graph this along with cosine which means I'm going to uncomment this all right and graphing SE graphing these reciprocal functions see and cosine we see how it matches up so you see look at that I looks kind of cool and you see when it one when cosine is one one over one is still one so they'd be the same value and cosine zero that's when secant would be undefined there we go pretty cool and cosecant now so remember we were say that's the inverse of sign um the the uh inverse of s so if I comment this out and we'll take a look at this so just as we expect just as we know that the S and cosine graphs are similar secant and cosecant would be similar to each other I'm only going to show one of it for now and so just graphing the seant graph uh and you see this is what would happen if I don't have the right think it it it graphs that vertical line so when I uncomment that to remove those those values then the graph looks much better and this is the true seant graph that vertical line just wants to connect you know the python graphing wants to connect it but that is not that line is not a part of the graph so that's the true secant graph uh Co graph here and just like the other one comparing it with s so cosecant is one over sign so if I compare that with s we're going to see that that pattern also and there we go sign starting at 0 0 making cosecant undefined and then you know one they the same so pretty cool so so now we have all of the now you're familiar with all of the trig functions so truly there are six trig functions and we see that you can imagine that there's not a lot of applications for the graphs of cosecant and secant you know you know think of something that moves along you know that particular Trend some sort of Parabola then an opposite Parabola not necessarily um but you know they're they're there they're useful they're interesting and you know we also see um tangent and and cotangent um not a lot of uh applications but you know we could have some and so it comes back to modeling a lot of behavior still comes back to sign and you know um yeah even if I was doing something with you know seant you know or then I still might or cosecant I still might you know go back to sign because it's a it's the reciprocal but it's still you know there are the six trig functions but we see why you know it's still all of them based on those X and Y values from the unit circle and so just going directly to them the sign and cosine that ends up being the most useful and we have all these we'll get to Transformations next things we can do to to change these graphs but for now these These are the six trig functions and what their graphs look like let's talk about how we can change the graph of sign now we can apply transformations to any of the trig functions but the sine wave is really the one that we apply it to most of the time um uh number one because that up and down pattern is a common pattern um the other ones don't just don't seem to show up a lot in a lot of applications also uh sign let's say compared to cosine um the fact that it starts at 0 0 again a more common pattern that you know we see um so we apply to a lot of Transformations on the sine wave so I put the regular sine wave here as a comparison so what can we do to transform well I can change the amplitude so I can make it y equals um let's say two times the S of X and so you know working with radians X is the angle in radians uh the Y value is the S ratio so if I have a multiplier of two so what that does is that changes the amplitude and it goes up to two now and down to 2 now notice that the zero still stay the same because if it's zero multiplying by two is going to still keep it at zero but that's one of the things it does the the the this becomes the amplitude and you know whatever multiplier you know goes up and down so that's a pretty good transformation um if I was applying this to let's say sound the amplitude would be the volume um other times just whatever we might be modeling the amplitude might change you know not everything goes you know um up and down the same uh you know just only up to one so one of the other Transformations we can do is um supposing I have the sign of instead of X I'm going to call it 2X and I'm putting uh just number two in here easier for me to draw we're going to get into the code and you're going to see how you can apply you know sliders and you know really Tinker with a few of these and see what the results are but for now you know to illustrate the point so if it's two so if I have the sign of X then multiplying by two here makes it go through that whole cycle twice as quickly so the S of 2x instead of taking you know 2 pi to go down you know that's that's the end point here um instead of taking 2 pi it's going to do that twice as quickly so instead of just going up and down it's going to go like this oh it actually would not change the amplitude though so it's going to go you know up and then down like this and then down and then back up so notice the whole cycle happened here and then we're going to go through that again the second time here hopefully my drawing isn't isn't too bad so you know these are the things a multiplier in there um so for a we can amplitude we can call it a for the multiplier and here we can call it B so um the the per if this is B so the sign of BX so the period is always 2 Pi / B so without any number there it's 2 pi and then if I have this here so then the period is half of that so it's pi and you know we can get smaller and smaller if this was applied to sound um that multiplier would be frequency so these potentially could get to be really high numbers um so we can take a look at that then one of the other Transformations we can do and my graph's getting crowded here so I'll erase all of these and I'll start out with the basic sign graph again so one of the other Transformations we can actually just put a horizontal shift on this so there's my um let's say you know Pi / 2 pi 3 pi over 2 and then that that's 2 pi over here so the normal sign graph and there work it's going to work better with the code um there we go somewhere like that all right that'll be the reference point and if I have a u phase shift so if I have over here you know y equals the S of x minus I'll make it a nice even Pi / 2 so we see if I apply this phas shift x minus Pi / 2 so that every point it's graphing it shifts it to the right which seems counterintuitive because you're subtracting but remember you're graphing what was pi/ 2 before that so instead of here it's going to shift pi over two and then it's going to go like this you see and then down and then it's going to continue like that so that gives it the horizontal shift and there we go and we can shift it as much or as little as we want horizontally um so notice then if we shift if it was X plus pi over 2 it shifts the other way which then would line this up at one so s of so the S of X so the S of x + Pi / 2 would shift it the other way and then that would equal the cosine of x so remember you know very similar graphs but they're just shifted so if we put that exact shift on there then that that would equal to cosine of x so we have all these um we we can also do a vertical shift that after all of this it's the same shape of the graph and then just shifts it up that's a pretty common shift um especially when we talk because the sign value goes into the negative so maybe if we're talking about Tides or you know phases of the moon or something um we can uh apply a vertical shift so that it doesn't ever go below zero or that the minimum isn't zero it might even be some other number so we see all these different shifts here that I can apply um an amplitude or the uh change of the period or a horizontal shift and then we can also have a vertical shift but let's take a look at this in the code and we'll see the different things we can do and then you can create this and then you can add some sliders and Tinker with this and see some of the effects so let's take a look at this in the code I decided to do this with an interactive which will create sliders so with that we need to import uh the interactive and uh math in line so all these other things were things that we used before set up the graph Dimensions here and I decided to just give these minimum and maximum values um you'll see that you'll see how that plays out um the points uh 10 times that so you know uh 110th that would be that should be pretty good and here creating the x value so remember Lin space um creating the X values that we're going to use and with that interactive we're defining this function I just decided to call it graph um and we're defining this function which we're then going to pass these values uh from the interactive and in this function everything that I would do to graph um the plot subplots and here this is just you know um something here to display the graph that we're going to have on the on the plot so um I made these EQ and eq2 to split out these function these uh strings really um you could actually have put them in here directly if you wanted to that works just as well um and then the values a b and c so I put this in the title so F and then the single quote we have a EQ b eq2 c so these are all my variables that's how you would display the variable without having um extra quotes sometimes if you if you do it in a different way it displays with quotes looks different so you know taking these values that I have and I threw in two more string values so I just put all them that's going to be the heading for the graph the title for the graph and then down here we have the interactive um that's going to create our slider so um the interactive and then I'm going to say I'm going to run the graph function and here's my sliders a equals b equals C equals and I give my ranges that's probably a good range to illustrate what we want to illustrate here so all of that and then the last line of code is just I called I called it IG so it's just IG and that's it so when we run this it's going to give us these three sliders here and we see at the top um now when you first run it everything's going to come into zero and your graph is just zero out but as soon as I have um a is one well that's still sign of zero is still zero so that's still zero is out but if I have B is one now that's my normal sine wave so you know sine of X and then C is the shift so if I move C we see that shifts it up I can move it again it'll display it here so you know what you're graphing and we can move these down so we see the shift here and a is the amplitude let's get this back to zero I like that so if I increase the amplitude I get graphs like this so remember zero is still zero but the amplitude increases and if this was something a sound wave the amplitude relates to the volume and B increases or uh increase the number of waves incre if this was music it would be increasing the frequency um just the regular graph we're saying it decreases the period of the graph so we can have these and you see I just increased it a little bit that's enough to illustrate what we want and we see you know I made um you know 10 points for every integer and as we start increasing the frequency like this we start seeing it get a little bit choppy not quite as smooth you know this is still a nice smooth sign sine wave so we see this and then still we can always move that up or down there we go so creating the uh we we can see the shift you know that uh first number um the multiplier that's the amplitude you know the default is one um zero would just zero everything out that wouldn't accomplish anything and sign so in this case the sign of 2x so that two represents that's B um and increasing B decreases the period of the graph or we could say it increases the frequency and C is the vertical shift so we could change this you know you could change these if you want you know Tinker with this but you you get to see what um these different values do with your graph so what if we have two waves and we're interacting and again I just picked sine waves um that illustrates our Point um I have this I'm not doing this as an interactive so I just have the graph Dimensions here the plot information here and you know just down here um I have Chang these I can I can go in and change these to whatever we're going to run this first and then um then we'll come back and change these and then the last few things just you know plotting one of them is blue one of them is green and then the the combination is red so what do I have here my first one I'm graphing your normal sine wave the second one I'm graphing it with a shift so other than multiplying something times x in inside that s function if I add or subtract that shifts it to the left or right so it's the horizontal shift and I'm just going to say minus math. Pi so when I have Y3 which is the inter fraction of these two so look my one graph my blue graph is my sine wave my green it shifts it enough that it lines up perfectly to be exactly the opposite and so the red line is the combination of two and it zeros out everywhere so um I mean this is really how also you know thinking about sound frequencies this is how noise cancelling headphones work and there's enough time to do all of this um and still process the audio that it detects the waves and then generates the exact opposite so that what you hear is this zeroed out sound but what if I make it I if I make them both the same that's not going to well actually it'd be really interesting here you won't notice this in the red in the blue and the green but if I make them exactly the same he say see the blue and the green are on the are on top of each other so we can't see that but the red adding them it increases and decreases you see not not quite the same as just increasing the amplitude um but you know it adds them so actually it is the it it would be the same as increasing the amplitude because two times sign so if I have a little shift here I'll say minus three so you see not quite pi and so it you know quick glance it looks like they kind of line up but then this red line you know adds it up a little bit now supposing I if I have um you know some shift like that like one and what do we see we see that as they get close um and look at this this interaction you know not the highest point for the blue or the green but almost the highest for them and then you know in between that is the highest combination and so we see now this is what we have when we talk you know if if this was audio this would be beats if we have you know different frequencies and then when they line up we it magnifies them because it gets louder so if we had this um if if I just changed it to it's two and we see now this is where it would just be um uh we could call it dissonance it doesn't line up it's you know we see um the Blue Line the green line and then given that combination then the highest value would be in between and so it kind of it would just if this was audio it would just be all muddled together because the the highest point isn't really you know lined up with anything now here's one of the interesting things we can do for the second one I'm not going to do a shift I'm going to have this one as two times that so it's going to be a higher frequency so we see the blue is our sine wave the green is the higher frequency and you see again we have the red line the combination the highest point is you know not quite the highest point of both of them here but you know in between that and then we get the lowest point so we get these other interesting relative highs and lows but then we get the lowest point here and that again would correspond to you know a beat in sound or something uh you know regular when it lines up so if we multiply it by three we see these interesting patterns you know the comparison a little bit more muddled as it's multiplied by three but watch this what If I multiply it by four we still start seeing um this and very interesting that the red line seems to follow the green line a lot more than the other so um what we what makes things harmonious would be if I multiplied this by three and this by two so now we get something that these won't always line up you know where where some of the other face shifts who made made them line up you know keeping One S of X the other one s of 2x 4X or 8X they're going to line up on regular reg reg regular spots but if I have this so now we really see times when they line up kind of nicely and then that leads to a higher beat and this is harmony so the you know these are the things that that lead to Harmony we want it to seem clear you know yes there's times when they don't up but then there's times when they do and then that's really clear and as Aristotle said that the things that we look at these patterns the things that please the eye that please the ear that please the mind are all very similar types things it's these interesting patterns so in this you know you can Tinker with all sorts of things and see how it plays out um you know what looks like it leads to more Harmony and not and not um there's even um we can even do like python um playing audio sounds related to that um most audio sounds are much higher frequencies than we're talking about here it would be more like the sign of like you know 200x or you know everything from you know 20 30 x to a really low beat to you know 4,000 x you know the highest notes on the piano so you they're much higher numbers and looking at the graph would be a much more dense graph but you'll still be able to see where those beats come up um if we have this like um 200 and this would be 300 so we see much higher frequencies but we can see where these beats line up yes and again cool things for you to Tinker with um but you see here the normal graph code and really what we're doing is we're just graphing you know two different sine waves and then the third one is the combination so that's what we wanted to get to you know we look at waves we look at trig we look at waves and then we look at interacting waves and this is just the beginning there's a lot more we can do with this so some of the things that we want to talk about here now that we've looked at you know transformations of sine waves is if I have data that shows some sort of periodic trend um phases of the moon levels of Tide you know higher or lower um possibly even you know um a store and then the crowd levels you know how many people fewer people anything that tends to go up or down on a regular basis because if it's irregular then I can figure out this pattern but then it's going to change so you know it becomes not that predicting um but if it if it's established that it's regular then we can start looking at what formula can I use to predict this and very often it's a modification of a sine wave we could modify a cosine wave and really you know the the difference is the shift or the difference is where we want this to start so if we shift a sine wave you know it's cosine so very often we we use a sine wave but if I have something you know I have some data and it doesn't even have to be a perfect sine wave we're going to look at just ways we can grab that you know some of the key points and sketch out a sine wave that matches this so that that's really what we want to do we want to see if we can you know match up something well enough to make it predictable um you know can I match something well enough that I can use it to predict um and and that's the thing if I can that that's great this is also as we get into we're going to do a lot more of this in like other you know uh font you know stats statistics classes um you know more on data analysis but I definitely wanted to include this throughout this uh throughout this course just some different things that you can do um you know one of the things is you know grabbing data from somewhere another thing would be you know what can I do to you know display this and um you know uh use uh some adjustments to see what what sort of sine wave might approximate this but as we'll see it you know things aren't going to be exact we're just going to see can we get a good approximation that's really kind of the goal here can I get a can I get a good can I get a good enough approximation that I can use this to predict and you know if we can that's great if not then we have to keep looking so let's take a look at this um I just want you know just with this sketch I just want to introduce it but with the code we're going to look at you know how we can do this and this is really going to connect with a lot of our how a lot of our trig functions even um help us with you know data analysis so let's take a look at that let's look at the code so let's just take a look at a little bit like what we can do to model these repeating functions and you know I like I like to go back to Tides because it's a repeating uh pattern you know high tide low tide up and down reasonably predictable but it's not perfect and that's that you know that that gives us that ability to say hey can I predict this um knowing that you know my prediction might not be exact so we're going to look at as we looked at before ways to get the data and in this case um I already um downloaded this uh CSV and then we have this dialogue to upload it from the computer so you know we upload it and um I'm going to store that so I'm going to read this and store it this time as all data and I'm going to make this table um uh tie data uh there we go I probably didn't need the extra variable here but in some other things I was doing I used tie data so I just wanted to make that connection rather than re rather than rewrite other things that I was trying um I also you know good sometimes if you get the data from somewhere put the comments in there of where you could get this and I'm going to do a couple things here so like I said I already have this uploaded and then in the code because I wanted both of these I wanted this describe but then if I just print out the headers if I just do this um I could just do tie data. describe and if I just did that it would print it out if I just did TI dat. head it would print that out but it wouldn't do both so I have to put the first one in a print statement and then this one can be the last line of code here so everything for uploading it and then I have this description here so I can see all my different headers water level um and everything this is kind of what I want um all these different water levels and uh the count and then we have the headers and what do we have date time and water level there we go so we can convert this date time into something and use that and water levels and graph this you know pretty cool um we we've been doing some things like that before so far in the course so I just wanted to show you that once we have this um I actually used uh jet GPT for this one part to show you um I I did modify it but I got a lot of this from there and and that's the whole thing like if you have data now sensitive data you wouldn't want to use use that for but you know this was already public data um I already knew um that this count was 169 but it's kind of weird going right up to that limit seems to not work properly so I really made this tie data um you know all data uh head but see if you just put head the header by default it'll just give you you know the first five but you can put a number in here and in this case I wanted the first 100 so now that's the tie data extract the necessary columns um there we go I'm so right away I'm just going to convert it to date time and given the format that it was in that works out nicely that just converted it to time so I now and I know that I have this Val value water level um and this extra space because as I found out that um who whoever made this table put the extra space in there and so I needed to include that in my code um so now I have time and height as two different arrays so um you know convert it days since the first measurement so we're going to convert this um and in total seconds so really this is just you know the math U minus the minutes uh so you know we're going to convert this to this time and this defines a sinodal function so we're going to take a look at this um there we go so remember a for the amplitude sign so it's a numpy function so np. sign B uh determines the period of the function um that shift here xus C and then D the vertical shift so we just Define the sinodal function here um taking in these values x a b c and d and now what we can do is this curve fit function based on that sinal function taking in time and height and create this you know the predictions as a sin ofo function so what we have here we can plot the original so we you know plot um plotting the original um actual and predicted tide height and we're going to have their X label and Y label and what we have is this now doing this um you know on your own that that might take some time oh you know thinking about these Soso functions and you know writing some of that code it it's nice to be able to to do that in like a few seconds and what we get is that sign your toal function based on the data we can get that estimate and it's pretty good so we do see that you know the height gets a little bit higher than expected here um and a little bit lower than expected over here so we get that V variability here um we could possibly do more analysis for a better graph but um quite honestly in tinkering I'll give you the insight and save you the time in tinkering with this I wasn't able to get a better graph than than this one so pretty good just some examples of what you can do um creating that sinodo function and you could work it out to you know predict if you have the same type of thing you know this happens to be time and water level but you could have you know time and water level of a larger data set um remember going back and just putting all this you know in this table name um you know we could call we could always call this table one as as I've done in other examples um once we have that you can always go back and do and you know all these very similar functions you know to estimate the sinos staph and that's often what we want to estimate if I have something that's periodic data some it goes up and down up and down can I predict when it goes up and down up and down um and certainly you know as as bonus knowledge for you here there's a um certainly you know things like stock prices go up and down so people would love to be able to use this to model different prices and um on the stock market and what happens is you can create these great models but it really doesn't hold up so you know you end up saying oh my mathematical model says it might be this but you know that's less predictable than the tides so there you go some you know some useful predictions um you know try it with some other data and you know see see how close you can get here's just some ideas for building an analog clock based on tree so the clock I need a clock face and that would be a circle we could talk about the unit circle but there's actually also a builtin draw Circle function in in Python uh Matt plot Library so then my angle would you know referencing the unit circle would be an angle something like this and remember I probably easiest to just make it start at 0 0 and then the end point of whatever hand of the clock would be the x value you know if that's my angle cosine of that angle would be the x value s would be the Y value and I'll tell you this remember as the angle goes around it's going to go this way starting at about 300 going counterclockwise two things we don't want so we want our shift we want it to start up here so we need to apply a shift to this and then also we want it to go the other way so we could actually have the angle be negative and that would make it go the other way so we could just make each of these negative to make it go around the other way and then apply the shift um we could and then you could Loop through this um you could have uh radians and then 2 pi ided 360 for each second um 2 Pi / 12 for each M um each hour and you know adjust the minutes so um it might be more interesting to also see the second hand so you could have you know the three hands and you could make these a little bit shorter or a different color for each you know that might be interesting um so I want to give you some some hints here as you work on it and then you know we'll go over you know exactly how you you know to make this happen but give it a try um you know set this up this would be and I I'll tell you this to make this shorter you could have some multiplier here in front of s and cosine so the radius is one if I have my unit circle so s and cosine but if I made and cosine you know some other multiplier if it was two then this would be twice as big if it was one half it would be a little bit less so we can you know you can apply some of those so that would that would be it you know set up your Loop set up your drawing a line from here to here um showing you some animation that you can do on the on the graph um you know decide how long each thing pauses you know have your animation and uh you know give it a try Tinker with it run it see how it goes all right let look at the Cod we will just show this first part displaying a clock with the hours and minutes we're going to get the current time and then display it once interesting and you'll see then how we can build upon that the next thing we'll do is the set to show the seconds um all right so let's jump jump into this here so displaying the clock this is nice because it'll give you an illustration of putting together displaying a circle drawing a line plotting points and using sign and cosine and how those how we have those adjustments here to uh take the time of day and translate this into lines on a graph so you see all our Imports um P plot display um importing math time and date time okay so um I'm going to set up the plot for the clock face so classic setting up you know subplots now I called my variable Circle here's what we're going to do we're going to plot a circle um Center rad uh radius and fill equals false because I want it to be open uh you could probably put this you know make a different colored clock face if you want but I want it just open right now this a lot of times I graph and I don't worry about this um but remember python skews the X and Y axis a little bit so I make this equal so it's a nice Circle for our clock here um rather than having a weird oval clock all right and creating the circle up here then add artist and I'm going to add the circle to my plot and each axis there we go um so the radius is one I'm going to make this 1.5 in each Direction I know just to tie in the math and you know give us a little bit of buffer around the edges there we go um dots to represent the 12 numbers I said Dots here um but I actually I'm going to make it blue triangles okay so in range 13 because remember it's going to start at zero which is fine and then um if I have range 13 the less one it will do is 12 and that's what I want okay so what am I plotting here I'm plotting notice these square brackets that's going to be one x coordinate and then after that it's going to be one ycoordinate okay so what do I have um math. cosine and what do I I want um B is my variable that I'm going to Loop through from 0 to 12 and each of these um so if the circumference is 2 pi in radians and then 2 pi divided by 12 for each number so that ends up being math. Pi / 6 and so you know I'm going to plot that that times so these are all my angles btimes math. Pi / 6 because each time so that value Pi / 6 * 0 > 6 * 1 > 6 * 2 all my different angles and then the x value will be the cosine of that and then the Y value will be the sign of that and notice again these are just one po you know that's one point I can do all the math right there within the brackets here and each of them I chose to make it a blue triangle just because all right so there we go so that's going to plot and we could put the numbers there I actually decided to just make it triangles so now we have our Circle we have a triangle for where each of the numbers would be around the clock and minutes each of these I'm going to get this variable datetime do now um that's why I imported date time and then I'm going to call you know my my variable time now the uh and and actually just to confirm uh you know cuz writing some different code in different languages the syntax is a little bit different I looked up um you know another free code Camp uh colleague of mine colade wrote a great article about you writing a code in Python to get the date and the time hours minutes seconds nice brief article uh so that was what I Ed as a reference you know so thank you clad all right so um get the time now and then time not now so I like this Str strf time so really it's probably a shorten version of the word stringify so uh that percent sign capital M in quotes so that's going to get the minutes and then I want to cast that as an integer so there we go so I get my my time now which is my date time object I want to get the minutes cast it as an integer and then what am I doing for these minutes so I have to do again 2 pi for the whole circumference divid by 60 minut 60 60 Minutes is going to be 2 pi ID 60 is pi ID 30 then I have the minutes is going to be whatever minute this is um but I want this to be negative because as this goes through for whatever minute remember uh remember the way the angles go where they would start part for an angle of zero in the at the bottom of the first quadrant and then the way the angles go around in trigonometry for S and cosine I need this to be negative because I need my minute hand to circle around the other way so that's why that's negative and then remember they would normally start at what would be 300 so I have to have this shift of pi over 2 so that it starts up at noon or at 1200 so that's where we have this part here for the angle I have this part for the shift so it starts at what would be 1200 and then you know calculating the minutes and this is negative so that it goes around in the correct direction so now that I have this uh minute and my minute angle I'm going to plot this so the minute a you know get the time stored for that variable minute and then for this variable minute angle Min angle so now I'm going to plot and uh zero so the the x value is zero and then for the minute hand I decided to call it 0.9 it's we're in the unit circle so I wanted to make this uh 0. n uh for the minute hand as the length of that hand and then I'm going to do the cosine of that angle because I already worked out what what that angle should be so there we go starting at zero and then the coine of that angle and then the Y y value starting at zero and then the sign of that angle and in this case notice B without anything else so that line that minute hand is going to be a blue line going from this point to this point and hours now very similar I already got my time now variable so now I'm going to stringify hours cast it as an integer now that's going to give me hours um for mine I put minus 4 because that's Eastern time and that's what uh that's what my uh uh computer is going to display so store that as hours and then very similar to the way we did minutes negative because I needed to go around clockwise and then the shift because I needed to start at what would be noon so then also hours 2 Pi / 12 which is Pi / 6 so there we go so I have how many hours and there we go so that's my H angle and then here's what I'm going to plot starts at 0 0 um I decided to make this 7 as the length of that so the x value is the cosine of that angle and then the Y zero there we go and there we go so I didn't just do this so that it showed up as7 but it's a happy coincidence so sign for the yv value and again that Line's going to be blue too and then after all this I'm going to show the plot so there we go so we have this set up the clock face the numbers how to set up the minutes how to set up the hours and then when we run it it looks like this so this is the time right now you see 335 and this is what our clock would look like nice it gives you just one simple um display but what if I also wanted the secondhand so I'm going to do the same thing but I'm going to put everything in the loop um for seconds same Imports but now I'm going to do a loop and you you could make this you know whatever number you want I just decided to end it here which is you know just over a minute um you display this it looks neat and then you know maybe at just over a minute you're not looking at it anymore I don't know I just decided there so times sleep is one because I do want this to happen every second and what am I doing each time I'm going to clear the output and you'll see then it'll display this I I I have this first uh I have the the waiting and then the clearing the output first because as it goes through the loop I just would rather have this come come up first I probably could have put it last but I I think it works out better to put it first and the rest of this is very similar you know all these same subplots um same thing for the 12 numbers and minutes and hours are the same so let's look at seconds what am I doing for the seconds here all right so this angle um you know 6 seconds so I'm still doing you know 2 piun / 60 Ork / 30 um still negative angle uh this one is just a because that's my looping variable a for the for the angle and you know still the same shift so there we go just just like the other hands the the shift so it starts at 1200 and then the negative angle so that it goes in clockwise Direction and then I have I just made this X and Y for cosine and S and now um what I have is I'm going to plot there we go um the X Val this is a line from zero the x value goes from so the first XY value is 0 0 the second XY value is XY as I have defined it up here and then second hand's going to be red just because so there we go so all of this and just notice the indent all of this is in loop again I think it works out better because I have to Loop for the second hand it really just kind of redraws it all and it this is not that many lines of code and it redraws it in a reasonable amount of time so now I have same time and we see the second hand there we go and it seems like it's right on track with you know every second and that's good and so this will continue on it'll loot for just over um just over a minute and then it'll stop you could always change the loop or you could do something else with this if you wanted to make something that displays it um you know on a you know even longer so so but there you go and hopefully um then this clarifies maybe you tried this already and you know we're kind of getting a you know you might have gotten a little lost on exactly what the shift should be or you know maybe you forgot the negative or something like that you know to make it go clockwise so hopefully this clarifies it and you can see U how to make the clock all right so enjoy I I think this is a just a fun project putting it all together so here we're going to go beyond the right triangle we don't even need a right angle anymore to figure out angles and sides and the first rule that we're going to look at at that does this is the law of signs so every side is proportional to the angle across from it so if I have you know that angle C opens up to side c angle a opens up to side a angle B opens up to side B so we have this three ways you only need you know two of these parts but a is proportional to side a b is proportional to sign of or angle b c is proportional to the sign of angle C so if we have any of these you know if I if I know an angle in the side across from it that's the key an angle on the side across from it to set up that proportion and then if I know one other angle or side I can figure out the other one and you see once we know some things we can figure out some more and then you know maybe then I know two angles I can do subtraction to figure out the third I can do law of signs again to figure out the other side and there we go knowing three things about a triangle I can figure out everything else so let's see how this would work so let's say you know I know that angle C I'm going to use degrees that angle C was 60° and maybe side C was five all right so what else would I know maybe I know that angle a was 50° and so given that what I can figure out is then side a so I would set up that proportion here I would set up you know a over the S of 50 equals 5 over the S of 60 and there we go I have my proportion here and I can figure out you know cross multiply and then figure out what I have so 5 * the S of 50 / the S of 60 equals a and we can figure that out so since things like this you definitely would break out your calculator you know R rarely you're going to come across one of those angles where we definitely know you know I know the sign of 60 deges but you know s of 50 is not things that we're expected to memorize so what we would have is you're going to break out the calculator anyway let's write code to do this set up the ratio that that you can set up maybe even prompt for input and calculate the side or the angle that you know if it was the angle that you didn't know then let's say we'll do this the opposite there's going to be one more step here and let's say I'm going to keep this so um let's say if I have um you know 5 over the S of 60 and let's say it was the side that I didn't know so um it may or may not work out to be a 50 Dee angle again but let's just say that this is a little bit less um so maybe that's a four okay and I don't know what angle a is so then that would be 4 over the S of angle a and we see that when we do the cross multiplying you know 4 * the S of 60 / 5 now when we do this we have S of 60 is < tk3 over2 * 4 so it's 2 < tk3 * 5 so now we have um you know 10 < tk3 equals so we do this um actually not 10 so we would have four times uh so be 2 < tk3 divided by five so there'll be 2 < tk3 divided by five and normally we would have a uh a decimal for this we would do this on the calculator but if I had this two root3 over 5 equals the S of angle a we see that the next step is inverse sign because the sign of angle a equals this you know that's what we end up solving for so then to get angle a I need to do the inverse sign and so that becomes comes the inverse sign or arc sign of 2 < tk3 over 5 or the decimal equivalent and then that's what would give us angle a so we see you know we're building upon proportions and solving we're building upon you know co uh s and cosine or you know whatever our trig ratios are inverse when it's the angle that we we need to know and still knowing these steps then you know certainly you know that happens to be an angle we know most of the time it's not going to be so um even this you know we probably want a decimal equivalent so we're going to write code to do all this prompt for what we know run it through the formula and you know if it's an angle that we don't know then we have this Step at the end if it's a side then you know just cross multiplying and we'll build upon that to be able to solve any triangle but let's take a look at the code uh to solve using the law of signs so if you find yourself in this situation that you know the as at least one of these angle and the side across from it and then if you know one other thing an angle or a side then you can do law of signs and remember if I if I I do law of signs you know if I know side B then the only thing I can figure out is angle B at least in the first step you can run through this now that you know more things but that's another story so you know you're going to set up a proportion remember two of these but this remember for this formula shows that you can do it with any of the three so I'm just for all of this I'm just going to picture the first part A and B and remember you know you can call them A or B as long as you know one side and the angle across from it and then one other side we're just going to call them A and B so these are our known values we're going to I would know angle a and side a and then um I'm going to do the simple version here where I would know angle B so if I know these three then I'm just going back and picturing this cross multiplying so I know angle a and side a and then I would know angle B so what do I have S of angle B cross multiply time time side a divided by the S of a and so that's what we have and I just need to convert this all to radians math. sign math. radians angle B times side a / math. sign math. radians angle a all right so we see just my cross multiplying here and then I get side B but each time I'm converting it to radians because I'm expecting that people would put in degrees for these a lot of times in triangles and the situations these come up it's degrees inside the triangle that's tends to be what people use so you could have radians here and which which simplifies this a little bit but very often it's going to be degrees so there we go C you know there's the formula you set up uh the known values and if I'm trying to find a side then there's my formula if it's an unknown angle very similar um but a little more complicated I'm going to add another step so if the unknown angle known values are very similar I know angle a and side a and this time it's side B that I wouldn't know and so with side B then here's my cross multiply now notice I just made this variable B that we're going to deal with and change later but my cross multiplying remember if it's side B that I know then side B time the sign of a / a but what does that give me that gives me the sign of angle B not the final answer yet so I have side btimes s of angle a divid by side a but again not my final answer yet uh divided by side a and I think I just clicked there accidentally yep okay so side so just this variable B I do my cross multiplying but I'm not done because angle B is the arc sign of that so I I solve for b but then I have to do the arc sign of B so math. a sign of B and then it's going to be that's all automatically going to be in radians so then I'm going to convert it to degrees and then output and angle B so then then I'll print that so we see same cross multiplying but remember that last step is um arc sign because I'm going to Sol I'm going to get the ratio and then it's the sign of angle b equals that so there we go then we can get fancy because this is the value of putting all this in code that you can set this up once and you can have you know prompt for input you don't even have to change the code here you know up here I you know to make it simple I just have it built in that you could just put your known values in here but we can set this up if either angle or side is unknown so prompt for the known values all at the known ratio and here I'm going to ask for the known angle input and then cast cast it as a float called angle a um side across input float side a and if you don't know the value put it X um sometimes I have it as a zero so in this case I have it as an X so input the other angle or the other side and somebody's going to enter a value for one of these and then an X for the unknown and then if we have this so if angle B is the unknown then we're just going to take this oh okay well we already would have had side b as an input um and you see each input here I didn't convert it yet because the X could be a string and then once I found out which one it is then I'll convert the other one to a float side B and then I do my ratio here there's the ratio I remember it's the unknown angle so it's ratio I do my uh law of signs but then I convert it because that that just gives me the ratio so I have to do AR sign and that gives me that in radians and then there we go notice this one I just did it a little bit differently and made it here just the formula there we go radians times 180 divid Pi gives you the angle so notice this just manually you know converts it to degrees and and different things sometimes you know you can just use math. degrees math. radians to convert and sometimes you can you know set up the cross multiplying yourself either way and that's if we have the unknown angle and then the unknown side so if that's X now convert the angle and with the angle there we go all one formula very nice convert everything convert to radians behind the scenes so you don't have to see all those decimals and then just right away output side B There we go so now we see how we're starting to build upon these formulas you know we now we have a formula for the sign um s cosine and tangent if I know that I have a right angle we have law of Signs Now for this situation if I know the angle on the side across and there's more that we can do to work with triangles where I don't even have a right angle as long as I know some things so next thing we'll get to the law of cosiness now let's talk about another way to find the angles and sides in the triangle also we don't need a right angle for this so we have the law of cosiness and if you take a look at the setup of the law of cosiness U the first part of it looks like Pythagorean theorem c^2 = A2 + b^2 but then we're subtracting something here minus 2ab time the cosine of C so we know notice that if it were a right triangle if angle C was a right angle the cosine of 90 is zero so then we wouldn't be subtracting anything and then you go back to that formula but this is the adjustment here as angle C gets bigger or smaller minus 2ab * the cosine of C so that's how we would get and remember in doing this we would be solving then for side C so as the angle gets bigger or as the angle gets smaller then you know that gets smaller and then the cosine actually gets bigger so that we're you know subtracting more and you know that corresponds to a smaller side C also notice that I I usually remember it is this one one way sometimes people rearrange these a b and c and everything but you can solve for side C or I could rearrange it to solve for angle C because they each show up once so you if you if you knew everything else um you could solve for angle c as well notice the setup then of what we do know we solving it this way if I'm solving for side C what do I know I would know a side a and side B and then I would know angle C which is the angle between them so that's the situation for law of cosin if I know side two sides and the angle between them law of cosin and then the other way then if I do this then I know the angle then the only thing I can solve for is the side across from that angle and and this is where some people um rearrange the you know uh whatever uh letter they want to put for the side that they that they're solving for and then the other two sides but remember whatever it is it's two sides the angle between and then you're solving for the side across from that that angle whatever letters you decide to call them or if I knew all three sides that works out because I could plug in everything and then my last step would be inverse cosine to figure out the angle so we could do that um and remember the rearrangement of that is I would subtract c^2 minus a^ 2 minus b^ 2 um equals just to show you the setup of this so then that would if I subtract these over then that would equal 2ab times the cosine of angle C and what do I want to do I want to divide both sides by this so it would be c^ 2 a^ 2 b^ 2 divided by 2ab equals the cosine of c and we'll look at this in the code that then after I would solve all this then I'm going to do Inver get that number and then I would do inverse cosine to figure out that angle so you know we we'll look at this in the code how we can use this because at any point of this you know you're going to be plugging this into a calculator anyway and you know possibly even having a formula already on your calculator for it so what we want to do is we're going to look at the code to prompt for these sides or these angles these sides and possibly an angle and then use that to solve um depending on which side you know and then we'll build upon that you know now that I if I have that situation two sides in the angle between or if I know all three sides whether I have a right angle or not I can solve and solve one thing solve you know once I have one more I can do law of cosiness again maybe if it's another angle I can do subtraction and we can put this all together to know everything about the triangle so let's take a look at how we would use a code to prompt for what we need and then use the law of code signs so here's the law of cosin in code so the known sides are A and B and if we if you can picture the triangle then we have a and b well the other side would be C so angle C would be between A and B sides A and B and we see that that if I have a and b and the angle between them is C that's the situation that we know so if we take a look at this let's say I do know side A and B and angle C we see that that's everything on the right side and I can do all this and then I might even just break it up into two steps do everything on the right hand side and then one more step to to square root everything to solve for C also that if I wanted to I could if I knew a b and c if I knew all three sides SES then I could plug this in and I still only have one unknown so I can solve this and I would do that in a couple steps we'll get to that so unknown side let's just work with that first so remember that I've seen this in textbooks that there's multiple formulas for this just because they're changing what they label as a b and c just take it that the two sides you know call them a and B and the side you don't know call it C that way you don't have to worry about it seeming like multiple equations so that's it I'm just going to whatever two sides I know I'm going to call them A and B C is the angle between them and then that side that I can solve for is across from that angle so I would know side A and B I would know angle C and you see how I'm going to do this in two steps c um and I just made up this variable um but that's not going to be my final equals so side A squar plus side b^ squ Min 2 * side a * side B * math. cosine and normally we would expect uh inside a triangle people would tend to use degrees so that's why I'm going to do the cosine of math. radians I'm expecting that c would be degrees so um angle C so there we go so we have all of this um and remember then it's it should be equal c^ s so then the next step I'm just going to square root it and then that side C so really good this is another good use of code because any of these complicated formulas you're going to break out the calculator anyway hey might as well write code to do it and then and you just have to change these values and then output what you need so if I have an unknown angle so very similar when I have I know side a side B and I would know side C so remember this I I I like to just have one formula and you know think about algebra beyond that so if it's angle C that I don't know that's what I can solve notice I still only have one unknown so I can solve this but here's what I'm looking at I'm going to subtract a squ from both sides subtract b^ squ from both sides and then what I'm left with I'll divide by 2ab and that's what I'm going to do in these couple steps here so so I'm going to have I just called this part one so c^ 2 a^ 2 b s and then what do I have left on the other side I'm going to divide 2 a NE * 2 * the side A Time side B and then I have those so then I would divide and I'm just going to call it part one divided by part two and remember that Division I have cosine equals that so I would do AR cosine so remember that still gets me my ratio but I want to know the angle so Arc cosine and then I that's in radians I would I would expect that we would want degrees as the answer so then we store it as that pretty good and then if I have either side I could I could get really fancy with this so I definitely would need to know side A and B so I would expect that input and right away convert it if you don't know the value put an X so side C or angle C and then I just work this in if angle C is X then I'm working in these you know how I would do this um there we go side a side b side C and there we go so same equation side you know if I know the angle I have to go through all this side C minus side b^ 2 minus a^ 2 there we go um step two the ratio divide step one divid step two and then the arc cosine and then I did I just split it up here as one more step then convert it um the angle so the the angle here so if I have side C that I don't know then there we go I will take that and run everything through and notice I just did this and then the next step square root okay so and then also notice instead of doing like math that radians I just did the conversion here here I didn't need to do the conversion I just need to square root it so now we have this if I know either side either a side or an unknown angle putting this together with the law of signs we might start thinking hey I can solve other things but we're going to add another formula and then we're going to get to that how we could you know solve different triangles but here we go different situations for the law of cosiness so here's another area formula when we learn area formulas for triangles we think you know it's 1 12 time the base times the height now this doesn't contradict that but what we're adding is also time the sign of this angle C so let's just say that this if C was a right angle then a would be the base and B would be the height so it would be 1/2 * base time height and then again if this was a right angle the S of 90 is one so times one wouldn't change the answer so we see how that works but then as this angle gets smaller the sign gets to be smaller so we're multiplying and then it gets to be less and less of an area so just a really cool useful formula here because I don't need base and height I can just find two sides in the angle between them and that's all I need for calculating area now we notice that's one of the things we need for law of cosiness and then in using those law of cosiness law of signs I could eventually pretty easily get a situation where I have two sides and the angle between them so we'll be able to find the area so we'll take a look at finding the area and then we're going to put it all together finding every you know any three things I know about a triangle I can find everything every side every angle and the area and this one more formula here was kind of like the last piece of the puzzle and here's this new area formula in code so not yes so notice I just put the formula here if a and b were the actual base and the height like If This Were a right triangle or something then that angle C would be 90 and the sign of that would be one so you see it doesn't contradict but then as C changes then the area gets smaller so we can just put this all in one step here 1 12 * a * B * C and here instead of just putting it in code I right away jump to the user input so we're prompting for the input side a side B and then angle C and again don't get hung up on which one you're calling it it's the two sides you know and the angle between them and this works any two sides and the angle between them we can figure out the the area here so given these two sides and the angle input cast them as float and then just run to the formula .5 * side a * side B times and I I would expect that angle to be in degrees you know as usual for inside a triangle um so angle C convert it to radians and do the sign there we go now let's put it all together let's solve a triangle so that's you know any three things that I have for this example I said we we'll start with let's say I know all three sides but none of the angles so if I have that um how can I get all three angles well we have a law of cosin that if I know all three sides I can figure out one of the angles so then let's start with that let's say I'll figure out this angle here so if I do that then law of cosine I'm not worried about like whether I call which one I call a b or c so remember then we have that um c^ 2 = a 2 + b^ 2 2 A Time cosine of angle C which we don't know so if I have that then let's plug in um if I want to figure out this angle so then I'm going to call this side C and again same formula we just decide which one we want to call side C so I'm going to do that as 7^2 equal and we'll call it a and b so you know 8^ 2 + 9^ 2 2 * 8 * 9 * the cosine of angle C all right so if I have this then you know I get that that's 49 um so 49 64 81 minus 9 * 8 72 so * 2 so then that's 144 um and only this gets multiplied times the cosine of angle C so if I subtract these over then I'm going to get um there we go 64 and 81 subtract it actually is 96 and um then I'm going to do a couple steps here then I'm going to divide by that so if then I have over 144 equals the cosine of angle C so we see you know we'll subtract these and bring them over and now I can even put this if I was doing it on the calculator remember we're going to write code for all this but then the negatives do cancel but we would just write code for whatever these numbers happen these variables happen to be and then remember we're going to do inverse cosine so it's really the inverse cosine or in the code it's going to be the arc cosine math. a cosine inverse cosine of 96 over 144 and that's going to give us I'll round it and then that's going to give us an angle of 48.2 so we would know that one angle and you know in degrees then that would be I'll put it on the inside that would be 48.2 and what I can do then is then I'm going to do this again for one of the other size um if we weren't using a calculator writing code we might debate oh what what what would make the numbers you know more manageable writing code we just want to have a formula that works every time so yes some of the numbers are going to get larger some of the numbers might be weird decimal places but that's fine the code is going to work all that out in a fraction of a second for us so I'll pick this angle next and so if I do this using that same formula again not worrying whether I call what I call a b and c so if this is the angle that I want next so then nine is what I'll put in for angle C so it' be 9^ 2 = 7^ 2 + 8 2 2 * 7 * 8 time the cosine of angle C and again whatever I happen to call it so we see I want to show you like on on the board here's how we would use the formula you know whatever the angle the side is that I know and then the angle of cross limit that I want to know you know these are the two things that might change depending on you know situation so there we go so what I would have now you know it'd be 81 = 49 + 64 7 * 8 is 56 so times it's 112 time cosine of angle C and if I subtract 81 49 64 again then I get a 32 um and then if those are all subtracted then it's this is what's left on this side of the equal sign and I would divide by 12 so it' be divid by 112 equals the cosine whatever of angle C and again negatives that cancel out so we will do inverse cosine and we're going to use AR cosine you know math. a cosine when we get to the code of 32 over2 also if if I was trying to do all this in my head then I might reduce that fraction but remember writing code it'll work that out no problem in a fraction of a second so we're just going to have it when we set up the code it's going to be you know whatever variables happen to be there it'll work it out so inverse Co sign of that then that's going to get us an angle of 73.4 there we go rounded so there we go let's call it this 73.4 and then if I have two angles I'm just going to use subtraction and even in writing the code we'll use subtraction to get that third angle so we would add these up subtract it from 180 and then that would make this angle 58 .4 there we go so we have all three sides we just figured out all three angles and then what we would do is I could do one more step to figure out the area because very often that's something that we'd want so um I'm going to pick this this angle here so just because so the area remember then that's 12 um a b * the S of C so then that would be 12 * 7 * 8 * the S of 73.4 and there we go so I I would work that out in the calculator so you know 28 * sign of 73.4 um there we go and we could figure out the area of of that so then I would um as we get to the code we'll look at putting all this together and then setting an output um one of the things that you know I rounded in all these steps but in the code and behind the scenes we would store these variables and we would not want to round them until the final because they will end up being a lot of decimal places we want that for our in between steps but at the very end when we are about to display it then we'll round them so um we'll we'll look at this setting up all these to have a definite method you know what are we starting out with and then work from there um just using the variables um not rounding till the end and then we'll look at outputting you know then no matter what we input it will output every side every angle and then the area so let's let's take a look at how we do that in the code to solve any triangle and here notice I'm also importing the matap plot library because I want to just give a a triangle even though it's not drawn to scale and you'll see I'm going to have some points and some lines just as a reference so then I'm going to label this you know a b and c don't worry about these numbers you'll see it's just as a reference um and you know taking out the axis lines so after that I'm going to put um a menu here where I'm where I'm just going to print out each menu option and this is you know how we can put how we can put it all together of all the different things let's create a menu what do you know do you know two sides in the angle between three sides side angle across another angle and notice each of these correspond to a different situation two sides in the angle between then we know we're going to do law of cosiness three sides also law of cosines but it's going to be different side angle cross and another angle side angle across another side so the two situations for law of signs a right angle and two sides so Pythagorean theorem if I know that um right angle side in another angle so that would be trig um s cosine and tangent um I could do subtraction to get the third angle um and you see how given each of these starting situations we can build our way to knowing the whole triangle so given the options this is what you're going to end up doing the angle uh these variables we'll just initialize these at the beginning just so that you know here's what I'm using angle a side a angle b side B angle C side C and then the area and throughout all these we're going to keep these variables consistent and then we'll we'll work with them so I did this one as an example so law of cosine so to find the unknown side if you pick option one that you know two sides and angle between it's law of cosiness so having picked that option we're going to prompt for side a side B take them as float integers and angle C again we expect it to be a degree and so I really took these from what we were doing before solving so step one and then uh I'm going to run through my law of cosiness and then I made another step where I'm going to square root step one to get side C so now prompted for these now I also have side C I can do law of signs to find another angle because you see now I do know angle C and the side across from it so I can use those to find another angle so again just copying this from La of Co law of signs and remembering our cross multiplying so I would know side C and angle C and let's call a is with the one I'll work with next so I'm going to do side a times cosine of angle C Time s of angle C / side C and that's going to get a and I just decided to break this up into two steps because that's just an in between variable um a I need to get I need the angle so I need Ark sign and then convert it to degrees so now I also have angle a which having all three sides from earlier I just got angle a and I just can do use subtraction to find the next angle 180 minus angle a minus angle C and then we have our newer area formula so I don't need base and height I can just do5 * side a * side btimes the sign of the angle between them and now with all of these it will overwrite all these variables here and I'm going to print this out you see angle a side a angle b side B angle C side C and the area and each of them I just have this built in that I'm going to round it to two decimal places only at the very end here because sometimes um it gets to be you know really long decimals and we really don't need that we don't want to round in the in between steps but we also um you know chose plenty um because dealing with any trig it's very rare that you're going to get uh sides and angles to all be nice or even decent decimals there's going to be something in there that gets to be a weird decimal so when we run it so we see this is the setup here so I just wanted a general triangle that you can see the reference angle side and not drawn a scale these can be any size but as we we get that General reference and then right under it what do you know there we go so I'm going to enter an option number and if I enter the option one so I'm going to input what do I have side a I'm going to in my mind picture a nice 345 right triangle so you see like C would be a right angle and I'm going to do a b and c that um and I'll say that I know the angle between them so side a I'm going to say three side B I'm going to say four and angle C I'm going to say 90 and you see then it'll run through and give me every side every angle and the area 3 four it figured out that side five and yep these are the angles for a 3 four five triangle the area would be six so look at that 34 56 that's why I picked that as an example I just like how that works out so I work this out this so this is all of these then I have the comments here law of cosiness to find the unknown angle things we were doing before and then you would complete the code here I'm actually going to leave this to you because this is going to come up um little uh hint here this this will come up in the big certification project so I'll leave this for you to do the others but you see expect it to be using those variables and if you copy the code from somewhere else make sure that your variable names are the same that you have like if I have side a you know uh underscore and then capital A that that matches every time I'm referencing side a so there we go all signs and you see I have the comments here of what you need to do and you're going to each of these finds one thing you know law of science it will find one thing the unknown sign one thing the unknown angle and then you'll follow it up with the other things that you need to do to find everything else usually it's like you know two more steps that aren't that bad once you do the law of signs or cosiness once Pythagorean and Theorem and if you pick that option right away it's going to print out make C the right angle um and take that automatically that way it works out that you can do pathagar theorem a s b^2 and trig ratios if you know you could take a look at that um you know that would be hey I know an angle and a side and I know one of the angles is a right angle s cosine and tangent we can figure some stuff out so that's what we want to do and I want to show you here that yes you can put it all together and have something that you can solve any triangle and then this will give you a chance to practice and put together a lot of this code and we'll look at some other applications of this this later we can even at some point put this in functions so that you can just um run run run a function to do whatever you want with the triangle now let's look at getting a triangle from three points I don't even know the sides or the angles yet but let's say I have three points and I want to first of all say hey that they would make a triangle let's get the measure of each side so as I look at these sides that I want to get you see then I will make my triangle and what we're going to do is the distance formula three times so remember the distance from this point to this point any perfectly horizontal distance is going to be the change in X X2 X1 and then any you know so exactly across here and then any vertical distance is going to be Y 2 y1 and since we are on our cartisian in rectangular coordinates this will be a right angle and then so then this is going to be the distance so that's what you remember so the distance formula comes from Pythagorean theorem so when I look at this I'm going to do um the change in so that's going to be A2 + B2 = c^2 so I'm going to do the change in X so X goes from 1 to 7 so it's going going to be 7 1 SAR and then b^2 is going to be the change in y only goes from 1 to 2 so it's going to be 2 1^ 2ar equals c squared but instead of squaring it here I'm going to say square root both sides so then we get to this so you know there's our distance formula applied to these two points and so what do we get 7 1 is 6 squar is 36 so then I get the square TK of 36 2 1 is 1 squar is still 1 + 1 so C is the square Ro T of 37 so I'm going to say C equals uh we'll round it to uh 6.08 um I don't want to round it to one decimal um I guess I could but um I'll round it to two decimals for this one 6.08 so there we go I can label this and when we do this in the code we were going to save this as a variable because it would have more decimal places but you know this side here is going to be 6.08 I'll put on the outside 6.08 and then I'm going to do Pythagorean theorem or the distance formula again for the second side so if I take a look at this so I get um if I take a look at um this next one here so from you know one so the change in X it goes from 1 to three just over a little bit so there we go I get so from 1 to 3 so I'm just going to do 3 1 SAR and then the Y value goes from 1 to 6 so then it's going to be 6 1^ 2ar and then I'm going to square root all that again we we'll have this in the formula and it's just going to import and we're going to run this through um you know three times distance formula each time so what do we get 3 1 is 2^ squar is 4 6 1 uh is 5 squar is 25 there we go and so there we go so we have um 25 plus so the sare < TK of 29 and then I'm going to get the third one so same thing I'm going to do the distance formula again for uh from here to here so notice it doesn't uh since we're squaring it the negative values um are going to get squared anyway but if I take a look let's say I take this one as X1 so if I did that so then um it would be 7 minus 3 so that's fine 7 3 squared and then I'm going to do 2 6 squared even though that's going to end up being negative but then I Square it and then we square root each of that so there we go SE so it's four squar so then that's 16 and then four 4 squar is still positive 16 so then I get the square root of 32 um there we go so then this one's going to be uh 5.66 and let's say then that I want to do the uh the angles well then what I want to do I want to do um law of coin for the angles so if I have two sides then I can do law of cosines to figure out the angle between them you know any two sides um there we go and the uh yeah so the law of cosines I can get you know any of these two sides and do the law of cosin and then I can do the law of cosin again you know now that we have the sides we can we can apply that um again each of these steps I'd be St uh storing them as a variable and um you know we're just adding that other layer here the the distance formula so from three points getting all the sides getting all the angles from the law of cosiness um I'll do that maybe I'll do it twice and then subtract for the third angle then I can use our area formula so this is good to be able to get this from three points because a lot of times you know when we're dealing with like vectors in space we might have the points and then I can use these distance formula and other things to figure out um you know the uh components of the vectors all right so let's take a look and uh see how to do this in the code now maybe we already if we already had the sides or angles that we already looked at that but supposing you just have three points and we can use this in other things from drawing to you know possibly some other you know physics applications so that's why I made this a function and you see here the first line Define the triangle function and it's going to take this input of three points X1 y1 X2 Y2 X3 Y3 and here what are we going to do I just put the overall um we're going to do the distance formula three times law of cosiness uh three times because then we get the three sides law of cosin twice for each angle and then the third angle we can just use subtraction so defining this and then everything here we're going to put the import math inside our function and then we're going to go down here and I just put comments for yourself too if even if you're the only one looking at this you you want to keep it organized put comments so what are we going to do we're going to get side a and there's our distance formula and we REM remember this you know change in X so X2 X1 and then Square it Y 2 y1 and then Square it and then it's like Pythagorean theorem those would be the two sides and then is equal c^2 so math that square root to get the whole thing and what I Al already did is I actually just copied this and then changed the numbers or letters but when you do that be careful that you copy it correctly or that you change what you need to change so if this gets stored to a so B um what I did is instead of taking X1 and x and y1 now from here to there I went from 2 to three so you see I'm going from second point to the third point so this gets x3 X2 Y3 Y2 and then I'll store that as B and then the third one I'm going from the third point back to the first so the order doesn't matter because you're it would just make it negative and then you're squaring it anyway so I just put it this way x3 X1 Y3 y1 so we see you know the first side the second side the third side and store that as c um I called it a and C instead of side because knowing that I'm going to use that a bunch of times it's less to rewrite all right now to get angle a so what are we doing here to get angle a and remember there's some algebra involved the cosine the law of cosiness and I did this in two parts here so remember that you'd have if I want angle a then I have side a^ s equals as the default formula and so I would have to subtract side B squared I would then subtract side c^2 and then what I have left on the other side of the equal sign I'm dividing so that's why I have divided by this but that doesn't give me my final answer yet that gets me the cosine a which I just put cosine underscore a as a variable and the first way to do it I'm going to get radians and so if I have the cosine of a then I'm going to do a cosine the inverse to get the radians and I want that variable and then I'll do this to convert from radians to degrees so I have both and notice in each of these I'm not rounding anything in my in between steps I want to keep all those that's going to help especially when you do these and you're dependent on solving this one variable and then using that more than one place or even more than one place later you don't want to round um you're not going to have to see these displayed but it just makes your final answer a lot better keep as many decimal places as you can so now to get now to get angle B very similar so if I want angle B then you know side B and then I'm subtracting A and C um same variables over here and that gets me the cosine then the next step inverse cosine and then convert it to degrees and angle C so you see each of these I'm doing it just in parallel getting the radians then getting the degrees so how many rad in you know inside the circle is 180 degrees or inside the triangle is 180 degrees so that's also Pi radians math. Pi minus these gets me the other angle 180 minus these gets me the other angle and the area remember our uh our formula instead of base and height 12 B * C time the S of the angle in between them if B and C were base and height then the sign would be one so that's 1 and half base times height but then we can modify it as the angle changes so and and to have one less conversion you know I kept the radians on this and I'm doing the sign involving radians now that I have all of these a B and C are the sides a radians a deg you know are the angles and then I have area now in the final display I will in the final display I will round it here we go and in this I just rounded them all to one one place you can always add more but again it's the final display you definitely don't want to round it in between but there we go so this is all within a function you could have it return values if you want uh I just had this within the function that it would just print and again you can use these I I give you some things that give you a start and you can you know have this return other values or whatever you'd like um okay so then that's all within a function I'm going to call the function you see how I would call it triangle and I decided to make it you know easy values 03 0 0 and then 40 and I put them in that order to make it a nice simple right triangle where angle C was a 90° angle at the origin and this is what we get angle a side a angle b side B angle C side C Good Times okay so this project is the foundational math certification 4 where we're going to go through uh you're you're going to go through a lot of the things you've already been learning and working on and hopefully also practicing from the analog clock to to the triangle solver to um all the trig we'll also add a couple trig applications uh more about waves and syncing up waves um for harmony so go through this if you haven't already you know I designed it to go for you to go through on your own work through each step this is going to be the walkth through so if you've already done that or if you're stuck on anything then this will give you an explanation of each step so this is the walk through of the foundational math certification 4 so hopefully you already gave this an attempt on your own but then you know you want to go over some things and here so we're going to do that and just like the other certifications um first thing you need to do is acquire the testing Library this just shows you how you can import that or any Library um in this case I have I have that posted on GitHub so when we run this it's just going to go through it's going to get the library um save it to your working directory and import what you need and then the test that we run at the very end outputs yep past go onto the next step so we're going to do that so drawing shapes so we're going to get to some other things we're doing in graphing and here's where where you know you don't have to have a function per se you can draw based on any points so here we're going to draw a polygon and we're going to get an array of various XY vertices um and we're going to plot each point and then align from that point to the next one so that first function here is path. move to so I'll move the cursor you know that you won't necessarily see a cursor move but we'll move it to that point and then path. line too so I go from that point to the next draw a line and at the very end path. close poly and we'll see this so here's what we're going to do um you're going to like a lot of these I have something where it works when you first run the code and then you're going to make some changes so you're going to run the code then you're going to add these points and change the two arrays so here's how it's working um all the things we're importing plot path patches all right so right now I have these vertices and we're going to leave it at that so notice each of these is an XY point and I do have them with decimal points um just because I I'd like to rather use them as floating points rather than integers so I put everything with a decimal point so now as it is you see the codes move to line two and each of these then I'm going to have this we're going to keep the code here path verts codes so we're going to create this path using this array of vertices this array of steps so you know I called them verts and codes and patches there we go face color blue and you'll see you'll see that um all right so now I have my plots and what I'm I'm just going to add this patch so you see we Define these two as an array of vertices an array of steps to find this in the path patch um incorporates the path and then patch goes into the plot all right and I just made this axis 5 in every direction there we go so let's see what happens when we run this so you see I just made this you know given these four points from 0 0 um there we go all these four points and it goes around and there you go makes a circle or makes a makes a rectangle it actually is supposed to be a square but remember uh python often stretches out the x axis a little bit so then we want to go through and we want to add these points here to make a hexagon so I would rather add um 11 I would rather add that from0 0 I think I would rather add that after 0 0 over here so that's where I'm going to put this one Nega 11 one and I'm going to put this here and then there we go 02 22 um and then here 22 and then two because we're picturing it's this point and then down to two 0 so I'd probably want to add that other point out here for a hexagon so I'm going to make this um there we go there okay and now what I need is line two again twice because otherwise I I I have more vertices than directions and that that won't work so I'm just going to copy that and there we go two more times to account for those and there we go so let's run this and see and there we go so we have a hexagon so that that's that's part of this and because it works code t p Code test P so there we go we if I put them in in any other order they would have it would have wanted to draw the lines in that other order and it would not necessarily have made a nice looking hexagon so there we go all right and now we get to this one so Pythagorean theorem all right A2 plus b s = c^2 and this is really we're going to build upon this a lot for the trig that we're doing um but we'll get to that um so side lengths all right so write the code to prompt for a b and c so notice I do have this that I think it will do something if you know you didn't do anything and write it but um there you go prompt for a b and c and there we go so C string um notice instead of zero I actually really would want this to be this something like this I'm just going to copy this because I think that that's a little bit quicker and then change that to C so there we go so we have each of these it prompts for the input but here's the thing if I want C is always going to be the hypotenuse so if a is you know if I just type in a um because remember I first of all how this if you don't know a side length just enter the letter so if a string is a then that means B and C I have values for convert them to float and then what do I have c^2 minus b^2 and then square root that answer to get a if B I don't know then it's going to be very very similar we just have the letters changed so if B I don't know then I'm going to prompt for a and C c^2 minus a^ 2 and square root the whole thing and then this if C if C is there then what do we have then I have if C is what we don't know then here I would would make it C equals um uh math.sqrt of remember C would be the hypotenuse so we would have a 2 plus b^2 a squar plus b squar and so that's what we would have for Pythagorean A2 + b^2 and then get that answer square root it and then that's what would be and there we go I could um and then I would have to print that out notice can't skip the print statement so then print and I would print C equals c so there we go and then if we ran it all right so let's uh let's run this um let's do a 3 four five triangle and let's run this to show you that um supposing B we don't know so the original code let's say a is three B I don't know and then C is five you see 3 5 b must be four um It also says Code test pass because we did make we did uh add that code but let's say let's say a is three B is four and c I don't know C is five there we go and and then of course it will work the the value of that is when it is not a nice 345 all right so we have the distance formula and here I'm just going to show you what this looks like um remember that it's really Pythagorean theorem so I have this that you're just going to run this code which I'm going to do in a second here and you're going to see that how I plot the points and you know take a look at the code I just put a delay so it's going to plot the nice triangle the points and then you run the code and you'll see how this relates to Pythagorean theorem so you see you have your two points and then change in X Change in y and then that would be the distance because on the cartisian plane change in X is perfectly horizontal change in y is perfectly vertical so that makes this a right angle and that's how we would get the diff the distance formula and that's all you needed to do for that one because now part two we're going to solve this and remember Pythagorean theorem a^2 plus b s c^2 so then that translates to change in x squared change in y squared and distance squared so we see you know that could be a b and c as sides and then change in X is X2 X1 change in y is Y2 minus y1 and then the distance there we go I'll just call it D so here I'll use these same example points 1 1 and 74 so change in x is 7 1 change in y is 4 1 and there we go then we solve square you know subtraction Square solve and then we square and then remember you're solving for D squ so then the last step is square rooting everything so this is what we're going to do we're going to prompt for these points and you see we're going to say without input um enter the first XY point the second XY Point all right and here we go so we expect input that someone is going to put a comma so we'll take this input remember as a string split it at the comma and then convert each to a floating Point number X1 and y1 so your job here then is to do this for the second Point split it at the comp take the input from point two split it at the comma and now this really is an array with two elements so X2 becomes this now I'm even just going to copy this but remember it is not first but second and here it's not first but second and remember it's element one so splitting at the comma into this array called second so second element zero second element one there's my there's my X2 and Y2 points there we go so now let's write the formula to calculate the distance so we are just going to say um I'm going to do this and I'll do this I'll still do the square root last so the distance parenthesis there we go um X2 X1 close the parentheses and square it plus Y 2 minus y1 there we go close the parentheses Square it and then my last thing is square root the whole thing so I'm going to put math sqrt and remember to close the parentheses here at the end there we go so there we go distance formula and print it out so let's run it all right enter the first XY point and let's do the same ones that we were doing before um 1 comma 1 and the second XY point is is there you go 4 comma 7 and there we go we could if we wanted to round this at the very end so you know this you know past that's all we need to do and we'll see in a lot of trig usually at least one or two sides or angles will end up being really you know long decimal places because things just don't often work out to nice integers or even nice like quick decimals so we could easily round this out of two decimal places so there we go round and I could round it to a whole number in which case I could just close the parentheses there and you see so um one one 1 and 47 that's okay but you see now you should use this because you know you rounded it that was not a part of what we were looking for but I just wanted to show you you could you could throw the rounding in there and then but now you have this there we go so let's you know let's uh think you know 0 0 and the next point would be three 4 and see 345 triangle works out nicely but it's not always going to you know you're not always going to have nice like that so we have the length of each side now we also have the midpoint formula so no matter where the angle is the midpoint of that side is adding the X values you get the average of the X values and the average of the Y values and that's your midpoint so you see that works out I'm just going to use this other as a reference here that if I have this midpoint which I guess might be around the e at the end of distance it really is the you know halfway down this x line so you just take the average of the two x values and you see from uh the vertical it really is halfway up so you take the average of the Y values so that works out it's a nice formula we can just get the midpoint notice how we can do the same things we're doing you know prompt for X1 y1 split it at the FR at the at the comma convert you know X1 y floating point just like we were doing before but now we want to calculate the midpoint all right so what do we have we have X1 plus uh X2 close the parenthesis divid two there you go getting the average of two numbers and we have um in parentheses y1 plus Y 2 close the parentheses / by two and now we get the average of the X's add them together divide by two average of the Y's and there we go now I have the midpoint so we can run this all right and I might go back to our same one that we were doing before and there we go the midpoint is 2.5 4.0 there we go now we're we're done we don't have to do anym you could you know INR with this go back and also plot this point and you'll see that it's exactly the midpoint all right so we're VI with triangles all all this time but trigonometry is really triangles um you know the measurement of shapes gone with three sides so it's really triangles but trigonometry then takes it to the next level we have some more formulas here there we go Tri means three gone means shape metri means measurement so the measurement of shapes with three sides all right so all of these we're going to look at other formulas and I have some more triangles that I'm going to display this one I'm just going to run this and display it and so we see if I'm talking about angle a that's the adjacent side that's the opposite side and that's the hypotenuse the hypotenuse the longest side across from the right angle that's always its own thing but notice adjacent because this you know next to angle a I have a hypotenuse and this other side so this is the adjacent side because the hypotenuse is always the hypotenuse then see the side is opposite because it's on the other side of the triangle the opposite side so there we go now another perspective I'm going to run the same thing but instead of a I'm going to reference this other angle B and you'll see that if that's angle B this is the opposite side that's the adjacent because this is this if I'm talking about angle B it's it's that's the reference angle so this is the one next to it and then this is the one opposite so we we need to just be familiar with that you know it is relative within the triangle and then the hypotenuse is still always its own thing you know the longest side so the S ratio is the ratio of the opposite side over the hypotenuse so opposite over hypotenuse and we're just going to run this and we're going to see that the sign of a and the sign of B are different because the different angles have different opposite sides so we see this code is just going to generate a triangle and when we run it we're going to see a 3 four five triangle and then look at side look at angle a the opposite side is three and the hypotenuse is five so the S of a is 3 over5 angle B the opposite side's four hypotenuse is still five so the sign of angle B is four over five and now let's take a look at calculating the sign ratio so this code is going to generate a triangle also right triangle and what I did is Generate random integers for the two sides and then C I did Pythagorean theorem to and rounded it to get a reasonable hypotenuse and here we go it's still not drawn to scale but it it looks at least reasonable so you can see these sides side measures and what we're going to do is we're going to prompt four you know what's the measure of the opposite side and what's the measure of the hypotenuse you know so input gives us a prompt and then the user input comes in as a string we're going to cast it as a float and store it as op or hypo opposite or hypotenuse op p p or hyp and then now yours would have S of a equals z so if you ran it it would still just output zero but your goal was then just to change this to S is opposite over hypotenuse and then we're going to run this and then you'll see each time you run it it'll generate different numbers and given these so if we look at angle a the opposite is 8 and the hypotenuse is 8.1 and then it prompts you for that what's the measure of the opposite side eight hit enter what's the measure of the hypotenuse 8.1 and then it will give you the sign of that there we go cosine very similar cosine is adjacent over hypotenuse and so this just like before we have this is going to just generate the triangle so you're just going to run this and then we see from angle b or angle well from angle a adjacent is 4 five four is the adjacent and five is the hypotenuse even though both of these sides are next to angle a the hypotenuse is always its own thing and then from angle from angle B three is the adjacent and five is the hypotenuse still so we see these different ratios so now we're going to calculate that just like we did with the sign we're going to get you know random integer for side a side B to Pythagorean and we'll see for this one calculating the sign ratio the cosine ratio doing very similar things random integers Pythagorean theorem to and just rounding it to one decimal place to get the hypotenuse and then we're going to prompt for the measure of the adjacent side the measure of the hypotenuse um for right now don't worry about that red underline and when we prompt for these remember you know what's the measure of the adjacent side comes input comes in a string cast as a float and that's adjacent so if I store these as these two variables then the cosine this is just what you need to change you need to make that adjacent over hypotenuse there we go the cosine ratio and then we're going to run this and you see this is what it gives you not drawing scale and it gives you these random integers you know may or may not look reasonable in the hypotenuse and then it's going to prompt you for for angle a what's the measure of the adjacent side oh it's seven type it in hit enter what's the measure of the hypotenuse 11.4 and hit enter and then what it does is it gives you the cosine of that angle so there here we go so we can see that you know these are some things we can do to generate the cosine we'll do the same thing with Tangent and remember tangent is the ratio of the opposite over adjacent so this one when we run it it's just going to display this so you can see from angle a three is the opposite four is the adjacent and we also could imagine that the other angle B it would be 4 over 3 because different opposite and different adjacent so now let's calculate it generate integers and when we prompt for these measures then you know what's the opposite store it what's the adjacent store it and then yours would be equals zero but then you're going to this is what you're going to change it to that the tangent is opposite over adjacent and then print out the tangent so we get to this and you know two random sides Pythagorean theorem we get the third one and what so from angle a what's the measure of the opposite side oh it's one hit enter and then the adjacent oh it's six hit enter and there we go the tangent is opposite over adjacent which is 1 16 then there's the decimal so remembering these there's a nice formula here um and it's written like this because you see the big S for sign and then a little o h opposite over hypotenuse The Big C for cosine and then the little a over H adjacent over hypotenuse Big T for tangent opposite over adjacent and you can imagine you know using this and you would pronounce this soaa there we go you could see that soaa but that way in picturing this it's easy to picture soaa easy enough you know nonsense word to remember and then it reminds us of s cosine and tangent ratios there we go and what you're going to do here is you know we see s cosine and tangent ratios and we're going to calculate the actual values and we're going to use this as a practice app so not only you going to practice you know remembering s cosine and tangent ratios then we're also going to write some code to generate a practice app so here we have randomly generated side lengths and display the triangle so then what we have is um angle a I'm going to use the same triangle that I've been using for the other examples so the S of a and remember so a is going to be lowercase a for the side C for the for the hypotenuse and for round it to four decimal places so what do we have um we want to use this for the same for the other function so the cosine of a and I can copy this but we have to remember what what to change so the cosine of a of a is going to be side B over over C because B is going to be the adjacent side and then the tangent I'll just p this also so opposite over adjacent so that's A over B so we see we'll get these and then the sign of angle B if you can picture sign of angle B the opposite side the opposite side is going to be B because that's what it is you know uh the naming convention capital letter for the angle lowercase letter for the side across from it so the sign is going to be B over C the cosine is going to be a over C and you see that works out it is um the S of angle a is the same as the cosine of angle B and then the tangent is going to be for angle B so the opposite side is going to be B and the adjacent side is going to be a so we have the actual values here now of s Co s cosine and tangent of those two other angles the other angle in the triangle is a right angle and uh we we'll get into this s and cosine but setting it up like this it almost seems like it it doesn't uh quite compute because we have undefined and anyway so we have um you're going to ask somebody to enter a fraction but notice when we do this um I can't just automatically do that math and then output the answer because this um input that we're going to get for the sign this input it won't parse that dividing line it wants to take it as a string but then when I convert that to an integer it's it's not going to quite work with that dividing line so we're going to take that input and then what we're going to do is we're going to split it at that dividing line and so when we split it this ratio is now an array with two elements so the first element that one we're going to convert to a floating Point even though realistically it's probably going to be an integer I'm still going to say float and then the next next element and I'm going to convert that to a float and I stored them as n and D numerator and denominator so there we go so now we have numerator divided by denominator that's the ratio that we're going to get and again round it to four decimal places so what we're going to have here is these uh you know it's going to print the actual and then print um the input and we can see the the comparison here you know um all right so in each of these it's going to you know round it all rounded to four decimal places so it matches so when we see this it's going to prompt for the input of all these s cosine tangent which each of these we calculated up here and then all of this you actually don't have to change but I just want to show you how this works taking the input it's going to be some ratio using this dividing line so each time we're going to split it and calculate it and this is just good thing to have you know tool in your toolbox taking in you know a fraction that somebody types but then C converting it so there we go and we're going to test the app so let's take this and run it and we see that we generate these random side values hypotenuse and you can enter in you know as a practice s of a 19 over 2062 so we'll put that in there 19 or 2062 and there we go as you see the actual compared to the input and then you can check yourself is it correct yep cosine of a 8 over 2062 and we put that in there we go and again compare tangent of a 19 over 8 s of B 8 over 2062 and so in addition to testing out your code you're also practicing your trig ratios cosine of B 19 over 2062 and hopefully you're also recognizing that you know some of these calculations are similar because the sign of angle a is the cosine of angle B and we have tangent of angle B B is 8 over 19 and with that one there we go and the code test has passed not because of these correct answers you know if you got if you put in an incorrect answer you would just see the comparison and realize nope that's not the right answer but the code test is passed because of the formulas in there so as I mentioned the familiar pattern so what we're going to do is we're going to look at just a loop here and um we're just going to change the ratio here so if I have range um uh 37 I just uh pick that number as a random number but it's enough to show some some values here but if I have a as an angle so there we go 1 to 36 and then a * 10 so you know every 10 that's going to be every 10 degrees that's going to be enough than 360 because it's going to stop at 37 uh well if the range is 37 the last would be last number would be 36 and that' be 360° so we're going to talk about radians in a little bit but for right now um the sign we are going to take that angle but um that I have in mind as degrees so we're going to convert that to radians because math. sign works with radians so we have the S value math. sign and it works in radians so I have to convert that angle to radians and all that we know the S and cosine tangent values tend to be long decimals so I'm just going to round that to four decimal places so that's going to be the ratio ratio underscore s for sign so ratio cosine I'm going to do something very similar I'm going to take that value in fact I am even just going to copy this and really the only thing I'm going to change here is cosine so it's going to Loop through this you know every 10 degrees um which radians it's not that's not going to be a nice round number but every 10 degrees and what's the sign of that what's the cosine of that and this is what we're going to do we're going to print that out so I have you know the ratio and I have the tab so we'll see this in a nice so we see you know each I just put a lot of extra spaces so we can see all these values s and cosine is one and then if we look at the S value gradually increases the cosine value gradually decreases now 45 degrees they're they are actually the same so we see this flip you know 40 to 50° you know we really see the flip there s of 90 is one where the cosine 90 is zero and then we get into some negative values um for these angles that are beyond the triangle but we'll see where they come into play with the unit circle so we see all these and that's all you needed to do take a look at those patterns it's pretty interesting um we'll come we'll revisit that as we as we look at some other aspects of this so we have radians now we've been alluding to this and a radian is the measure of the radius along the circumference of the circle so that measure so uh 2 pi * the radius is the circumference and so there are two Pi radians in a circle and there we go one radian it's about 57° and then and exactly 2 pi is exactly 360° so um you know radians it's good because it's proportional to the radius so a lot a lot of uh actual physics applications and such use radians because it it makes a difference it's proportional to the radius that that has an effect whereas degrees we're used to using degrees and a lot of things that's it's kind of an arbitrary number so for some applications that's fine because that number doesn't affect other things but there we go so we have 2 pi radians or 3 pi over 2 if I see it as 3 pi over 2 I'm going to say oh yeah that must be radians but then that's 270° here we're just going to run this and just see the comparison um you you'll see I have just you know um some code in here to to display Pi yes this is the um Sim pi to display Pi so anyway we have pi and I'm just I just decided to do you know pi over one so that's really Pi it's 180° pi over 2 90 pi over 3 60 pi over 4 45 um P five six so 1 2 3 4 5 and six it works out nicely 300 you know we get to Seven you know all right that's a messy number Eight's not horrible and 9 10 great 11 another messy number and then 12 back to um for a lot of ratios a lot of radians just remembering pi over 12 is 15° and then just doing multiplication from that most of our important angles the like the major round number angles um are going to be multiples of 15° so you know PI 12 reduce the fraction if you need to so we just see our comparisons here that's really this one in the last one I just wanted you to run this to start seeing comparisons seeing some patterns and this all does relate to the unit circle so it's called the unit circle because it's a circle with a radius of one so radius of one unit hence the unit circle and the center at 0 0 so here's the interesting thing when you plot an XY Point anytime you plot an XY Point you're counting you know from z z you're counting over X up y so perfectly horizontal that's X and then perfectly vertical is y and it makes a right angle because of our rectangular coordinates and then the hypotenuse um there we go you which is one if it's the unit circle so there we go when we make that I'm going to run this and then I'm going to go back to talking about this um so we see if I'm on my coordinate plane I didn't draw the axis here but from 0 0 if I were to plot a point I count overx up y plot the point well then that makes that adjacent side x the opposite side y because of my central angle here and if it's a unit circle then that's because the radius or the hypotenuse in this case is one so at every point I get what's the what's the cosine of this angle or what's the sign of the angle opposite which is y over hypotenuse which is one and the cosine is X over one so that's what we always have here so s is the sign the center Tri angle is y over one the cosine is X over one so with this we have the cosine and sign for our unit circle and that's really where all of our trig values come from that you know based on that unit circle then my cosine and my sign are my X and Y values and so that links up with here we see each of these XY and plot this point so we see you know sine value of 1736 cosine value 9848 there you go plot the point and each of these plotting these XY points and when we get Beyond 90 the you know you're in that different quadrant so that's why the cosine is negative it's negative X values and then when we get to Beyond 180 which you know X is NE 1 Y is zero and then beyond that you're in the third quadrant both of them are negative we'll start see we'll see this come up again in a second so in this this is just you know interesting if you want to take a look at it it's similar to what we were doing before about just plotting a display to show this so we have the unit circle here and here's you know connecting with that earlier step that I was just showing you all right so we know now that the coordinates are the cosine and the sign and we know we did that Loop a minute ago looping through all the s and cosine values and then we're going to connect this to that earlier step of creating a path line two so I'm going to start it with path move two and then from that point it's going to be path line to every other point and then path close the poly and that's what we're doing here we're just going to start with this one Zer so that's my coordinate point and each of these because there's enough that are uh floating Point um even the ones that turn out to be integers I'm still putting 1.0 0.0 with a decimal point so there's my uh my vertex array that's that I'm going to build and then I'm going to move the the point to there and now I'm going to Loop through just like I did before and here um I'm going to put this I I I made one less step here because I did a * 10 here still going through uh degrees so from 0 to 360 um because it'll stop at 36 * 10 360 so same thing I'm going to but now I'm storing that that's my X that's my Y and then I'm going to append that to my my vertex uh my verts array and and I'm going to append this to the line two so each of these you know I start with this and I'm going to append each of these XY points and this and now when I complete the array after looping through all that then I'm going to append this last one back to one Zer codes that a pen close poly and it all comes together now I have those two arrays and then here's my path uh capital P path and then that takes these two arguments these two arrays verts and codes as stored as this path so now when I do the graph I can add so you see I have to create this patch so patches path patch and right here I add the path I decided to make it blue face color blue um and then the the weight the line weight I made it two I just think that looks nice and then I'm going to add that so we see how it builds we're building our arrays of points and um steps and then I put that together as path that path variable shows up here in my patches and that patch variable shows up here in what I'm adding to My Graph um I did I don't always but I did make this equal so it it just looks much better when we're doing the unit circle because it's a unit circle not a unit oval and there we go we're going to plot this and then we run it so this is what we see you know we started here at one Z and appended you know 10 you know 36 around every 10 degrees and that was enough to give it a pretty smooth Circle but there we go at every point about every 10 degrees we plotted an XY point and then connected the line and that's where we get our unit circle and this one I did put the grid so we see that the center is at 0 0 and our radius is one in every direction and this is our unit circle so you can really see that that's where all of the trig values come from because at any point in here from 0 0 I can count over some x amount up some y amount and I'm on the on the circle and plot that point and it makes a triangle so it we we we loop around a lot and we revisit things that we've done before in trig um not just because it's full of triangles and circles but because these all relate and you want to see these and you know see how one thing relates to the other and then you come back around and see how something else relates to it we're even going to take this um you know a step further in the full course and uh look at you know imaginary numbers and how that relates to all this but there we go so we see see our unit circle by creating this circle of points in a path so now we're going to solve triangle solve for an unknown side now the way I have this here this is going to display something and we'll just run this and we're going to see that we have their Imports we're going to display a triangle and I'm just going to give it a random angle then I'm going to put that text in there and I'm going to give a random hypotenuse measure as well as display side a and side B so let's take a look at this and then we'll go back and look at what the code is doing so the first thing is we'll come back to that output is that we're going to display this triangle with an angle I'm going to randomize this so so every time that angle is going to be a different degree ree measure and then hypotenuse same thing random number and then I have side A and B so if I want to set up my trig ratio for side a we see the angle so the sign is a over 8 and that's what I have here the sign of 32 is a over 8 one step of algebra multiply both sides by 8 so I have 8 * the S of 32 = a and then when we solve s 32 is always the same number so we figured out that side a is 4.24 and that's what it want to do you can do this on on a board you know without a calculator um you know at some point you probably need a calculator nobody's going to remember the s s of 32° but the here we go showing the steps how we set up our understanding of trig ratios and set up here's my unknown and how I can solve for an unknown side so what we're going to do is we're going to do that for side B so we see solving a triangle I can you know this works because I know that this other angle is a 90° angle so to get the other angle I you know I have this one the other one's 90 to get the third angle I just subtract 90 30 32 I'm going to do s to figure out side a and then I'm going to use cosine to figure out side B and there we go I have you know all three sides all three angles so we're going to take a look at what we do here for sign and we can copy all of this um so we want to get to this cosine value um we can copy the sign value um if we want so we can see um the the key feature is getting to these variables but we can solve um we can even copy this for this one step of algebra solve we can copy all of this as and then um I'm going to put this all here and then we're going to change it so first of all we have the cosine of that angle is going to be B over side C one step of algebra because at times the cosine again um it's going to give us B and then so here's what we're going to do how do I get that cosine value um which here was just set to zero just not give it error when you ran the other part cosine value is math. cosine and remember it's going to be the coine of you know that angle and here we go cosine because then it's going to be that side C which is the hypotenuse times cosine value equals side B so we see we're walking through um you don't always in you know in in your future endeavors you not always going to write out all these but it also it helps you learn what steps you're doing and then you know display it and see that everything works well okay so then side a which we're actually going to make it side B is there we go that times cosine value so there we go side C times the cosine value and I'll round it to two and then that's going to be side B and after doing all that there we go we have the code that you just wrote great and copy the model above and after all of this we already we we copied it so we already have side B and that I mean it's not interrupting but we can just delete this and the question is did you change every line except for the three static print statements say the print here uh solve here so it looks like we did set up the ratio and let's run this and see what happens so we have our value there so we see random angle two degrees side A and B hypotenuse 5 so side a the S of 2 degrees equals a over five one step of algebra and we solve so side a is very tiny not surprising the angle is only 2° set up for side B the cosine of 2° is B over 5 one step of algebra yep 5 * the cosine of 2 = B and cosine is Tiny so side B is five rounded it looks like a and it looks like side B is the same but it's just really because of rounding they would not be exactly the same at all um the hypotenuse would be a little bit more so you know maybe maybe B is you know 4.99 or something like that and there we go so we have this uh maybe we could now this is code T code test pass so we can go on to the next step but you could always go back and change this to round any of these to you know multiple values um you know make this round it to four decimal places or something but there we go so now we see how we would set this up and how we would use this to solve and we're going to apply this to the length of a ramp now here we go um this one once again I I I like to have these where you're going to run the code and then do something to it but if we have a ramp so if you know the height that you want to get to and if you know the angle then we can use sign to calculate the length of a ramp all right so we're just going to run this and as you see I put some of the animation in so there's a slight delay but it it will give you a different angle each time and if you just run it it's going to tell you the length of the ramp is zero and now write the code to solve for side C and each time it'll give you a different angle there and the height and we can use sign to figure out side C because knowing that angle I know the opposite and I want to know the hypotenuse so then we go up here and we see it's already built in you get the same animation here you know random side random angle and then down here we want to write the code for side C which is sign and if we remember opposite over hypotenuse and that's we don't know so we are going to have two steps of algebra like before so we have so the S of 58 equal 5 over C and multiply both sides by C divide by 558 so side C equals that angle which we have here that that side divided by the sign of that angle so we're going to have and we I even put in this step here for you radiant angle so we have side a ided by math. sign of radius angle and it'll probably be a decimal number but we'll leave it at that and there we go so different angle different side but the code should still work the length of the ramp should be 20.7 there we go and as you can see see that way you can build in these variables and write the code so no matter what the angle you can figure that out you know oh I want to get to this height you know what angle you can apply this to other situations in life I want to get to this height what angle do I want and then therefore how long of a ramp all right now we have rope tension so here's another one now this one rope tension will be cosign and we'll see why so tension is the force pulling on the ropes if I have two ropes hanging straight down then that works that tension is divided by those two ropes but if that angle increases then the tension is more so we'll look at this then we'll go back and look at the code so these blue lines if I had if I was hanging something you know a light or a shelf or something if I had these blue lines that are perfectly vertical I would just divide the tension divided by these two lines these two ropes great but these green lines would be an angle and as we see the angle ends up being a hypotenuse because if the UN the line that's not there would be the ceiling and so that would make a right triangle so given that upward force on the blue ropes then the green ropes would be more of a force and as we can see as that angle gets to be more then that green line ends up being a lot longer than the blue and we see this that you know if you you know practical applications if you were hanging something and you have the the ropes perfectly you know 90° with whatever you're holding up great but the more of an angle the more tension on that rope and if you're hanging something heavy that's going to make a big difference so we can figure this out what's the diagonal Force well given that upward force and I would know that angle in this case 25 degrees then what do I have adjacent over hypotenuse and then that's cosine so we see just like a lot of the codes very similar and I just have no for each of these the vertical forces and there we go um but I have the random angle or the rad you know I have my angle and then I even converted it to radians for you um and I have the side that we know so side C is going to be so remember cosine the cosine of in this case 25 is going to be 8 over side C and so two steps of algebra side C is um 8 / the cosine of the angle so we get side C equals but I'm not just going to put a number in it's going to be that side side a divided by math do cosine of radian angle there we go so when we run this now we see the force on the diagonal rope and as you see every time you run it it's going to give you different amounts but that's why we want these as variables so then the code will always work so you see look at that upward Force three we can call this Newtons upward force would be three Newtons but if I have an angle of 78° which you know that that'd be a huge angle not drawn to scale here but an angle of 78° then that force on the dagal Rope ends up being 14.4 Newtons wow um you know almost five times the amount because it's such a huge angle and if you're trying to hang something heavy then that really makes a difference so you know an application for sign like a ramp an application for cosine like tension on a rope an application for tangent surveying so just like the other two we're going to run this code and certainly not drawn to scale but if I have the distance I would have some really tiny angle here because this is what we do with surveying I look ahead and I have something he here again very much not drawn the scale but I would look ahead at some post and I have some markers so I would know ahead of time the distance you know in this case I'm calling it 0. five but I would know this distance um and uh from one point to the other so given that you know some post I have like way down the road I would know this and then so I have my surveying equipment and I measure this exact angle so I'm calling it 4° here but really it might be something with you know a lot of decimal places and that's what surveying equipment does it it it ends up making sure that something is level on the bottom and then measuring an exact angle down to multiple decimal places so then if I wanted to figure out this distance what do I have I would know this opposite I would know this angle and it's the distance I want to know tangent opposite over adjacent so there we go by default it'll just say you know distance is zero but just like we have before so the tangent of four is05 over this distance and two steps of algebra this distance is05 over the tangent of four and like the other ones I have radiant angle and and the other side I have it as side a there we go not as a ver not as um a random number but it's for this one I put it as always 05 again if you're if you're surveying you know your post that you put somewhere you would know that distance ahead of time so really then what you're measuring is that angle so side b equals I'm still going to use the variable because just in case I want to change this later I don't have to change it in multiple places so side a divided by tangent of radian angle and there we go so when I run this again so given this now this time the angles 2° and it gives me the distance of 14 and who knows maybe you know maybe this is in meters you know 0.5 MERS um and then I have you know uh my surveying equipment oh this is only two two degrees oh so then it's 14 M which you know doesn't seem that terribly long of a distance you could walk walk that off but we illustrate the point and you can use this for you know a th000 m and if you have a good scope that you can see then you can that the process still works so there we go applying tangent you can use this for surveying okay so now all those we applied s cosine and tangent this is also a very useful the law of signs now we're going to get Beyond the right triangle you can use this for any triangle and you know if you've gone through the other part of the course you might remember when we were doing this setup but here's the formula this is these are all proportional in any triangle um side a over the sign of angle a equals side B over the sign of angle b equals side C over the sign of angle C and there we go these are all proportional in any triangle so if you have two of these then you can use the law of signs because you know now even without code let's say add two of these cross multiply you know I given these two if I that's four things in there and if I know three of them I can figure out the fourth or any any of these two so if it's the angle that I don't know remember then that's inverse sign and the code we're going to use is arc sign so here we go we're going to prompt for I'm not going to um I'm not going to draw a triangle here I'm just going to show you that what we're going to do is given any of these two and I'm not necessarily going to call I may just call them A and B even though it can be you know whatever A and B and I'm going to prompt so the known ratio and you see I'm going to ask for the known angle and then I'm going to ask for the side across because I do need to know that I need to know an angle in the side across from it that's my starting ratio and then if you don't know the value put in X so then it's going to prompt other angle and then it's going to prompt for other side and you see one of these you're going to put a number and one of these you're going to put an X so see angle a inside a I'm I'm going to cast those as float right away but angle B inside B I'm not because then if angle b equals x I'm going to do this this is going to be the model if angle b equals x what are we going to do now then that means we must know side B so then I'll cast it as a float and then I'm going to do my ratio side B time math. sign of math. radians angle a/ side a cross multiply I'm going to do side B time the S of a / side a so that gives me my ratio so then I need to do Ark sign of that ratio to get radians and if I want degrees um I could have just converted it but I just decided to do the prop the proportion um the radians * 180 / Pi so there we go so this all works if we you know if it's the angle B that we don't know then we can write the code to solve for angle B now if it's side B that we don't know so now the next thing is convert angle B so what do we have so side b equals so remember now if I know angle B cross multiply the sign of angle B time a / the sign of angle a equals B cross multiply so side b equals the sign um now notice for each of these um I used MP P but I also imported math you can actually use um either one here which is kind of cool but I'm going to use math math. sign of um and I would expect that somebody would enter an angle b as degrees so I'm going to do math. radians angle B all right so there we go so I have the sign of angle B times side a um divided by um we have already math um math do s of math do radians and that's angle a okay so that's what we have here so side B should be so s of angle B time side a / the S of angle a and so side B should be sign of angle B taking that input and that will be in degrees convert it to radians the sign times side a and then divided by the sign of angle a which we would already have up here angle a there we go there we go pretty good and so we can run this so the known ratio um let's I'm just going to uh pick one so let's say let's say it is an equilateral triangle so the known angle let's say it's 60 and the side across I'm going to call it five and we're going to test if it's a side B that we don't know so the other angle I'm going to say it's 60 and then the other side is going to be X look at that good time times so now we now you have it you know law signs any anytime you have that situation I know the angle and the side across from it and then one other thing an angle or side you can figure this out now we're going to build upon this that you you do this once now I have you know both two angles two sides I can do subtraction for the third angle and I could always do law of signs again for the third side and there we go then I have the whole triangle but we'll build upon this because now we also have the law of cosiness and the law of cosiness this works if I have two sides in the angle between them so that's the key and remember from from the course so notice it's I the formula looks a lot like Pythagorean theorem but then minus this and if this was a right angle if you know if C was if it was Pythagorean theorem and C was the hypotenuse then angle C would be 90 and then the cosine of 90 would be zero so that means you would be subtracting you know zero and then all that zero is out and then you'd be subtracting nothing but as that angle changes so then you are actually subtracting something um and therefore we see how it applies this also works I always remember just this formula um but notice C shows up once if you don't know side C um if you know side C you can figure out angle C or if you know angle C you can figure out side C if I know angle C it it it seems to be maybe a little bit easier because all the things that I know are on one side of the equal sign solve all this then square root the answer and get C but if it's an if it's side C that we don't know then I can do all this if you know if it's side C that that we don't know um or if it's angle C that we don't know then I can do all this um subtract everything divide and then do inverse coine few extra steps but it's doable either one you know and then whatever I call them a b or c it's always you know two sides in the angle between them and then I'm either figuring out that angle between them if I know that side across or you know so you potentially could know all three sides and no angles and whichever angle I'm calling angle C that's the one I'm solving for or if I know two sides in the angle between then I that angle between it's the side across that I'm figuring out so this one also we're going to prompt for input um side a side B and then either side C or angle C all right and so I'm going to solve um for angle C and then have this code over here for side C so if it's angle C that you don't know so now side C Cast that as a float and then I just have this notice is a bunch of steps here so I'm just going to call this step one because um side C squared and then I'm subtracting side b^ squ I'm subtracting side a squ and then there we go so then step two if I have if I have these then if we take a look at side B um I just am calculating this part here 2 * a a * B which I just expanded as side a side B I'm just doing this part here because you see the first part I'm subtracting these over to the left side of the equal sign and then step two I'm just doing this multiplying and then ratio C I'm dividing step one divided by step two and then now that I have that ratio I'm going to do AR cosine and we know that that becomes radians and I'm just going to do the conversion radians time 180 / Pi becomes angle C so in doing a lot of these steps you know that's it math is a bunch of steps you can write each step in code you know come up with your own in between variables um I I think that works out it kind of keeps it in keeps it organized for yourself and for you know anybody else you might be sharing the code with and you really see the steps because I probably could do all this all in one step now um python code convention we saw we kind of push the limit on the last in the last step that we only kind of shorter lines I don't want the line I don't want to have to sides scroll to get to the end of the line so python code convention if I did this I'd probably be a much longer line of code so I also like to keep shorter lines of code but the uh you know the the other thing is it just it just works out just you're seeing each step you know these independent variables these in between steps there we go so now let's take a look at side C so let's say this is the one we don't know so if that's the case so we have angle C is my variable all right so I might even just keep keep this here but let's look at it in between step here so um yeah just checking the four spaces to make sure that we're still in here so what do I have I have side now notice each of these I have side a side b side C that I already know so um so we have side uh side a squared plus side B squared minus 2 time side A Time side B times math. cosine of math. radians of angle C now I need to store that as a variable um be now given all this um this equals c but it equals c^ squ and then I could square root it we'll see um I don't use just c as a variable here so I could um see ah let's see if if we have yes and you see it it get this I'd rather a shorter line um so I'm I'm actually just going to call my variable C2 and then down here C2 so you can come up with whatever in in between variable you have here and then you have there you go angle C once I have that then I do this the full side a^ 2 plus side b^ 2 minus 2 a times cosine of angle C there we go and I know that that's c^ squ so I'll just independ in between variable C2 and then I'm going to square root it so let's take a look now let's say um it would be if I would know AB so let's say let's say this is a three um and it's side C that I don't know so three four and then the angle between them uh side C I don't know but the angle is 90 and we'll make this a nice 3 four five triangle look at that there we go and once you have this code you can you you can test it you know apply it to a bunch of other triangles that you might know there we go so now we're you know we're building these and remember if you've been going through other parts of the course this you know hopefully it's enough of a review and extra practice and make sure that you know you're even better at at writing all this code and we're building upon you know these situations okay right angle but I don't need a right angle I have my situation for law of signs my situation for law of cosiness and then the next part is well how do I calculate the area if I don't know the base and the height so we take a look at this here's this new area formula now notice how similar this is 12 AB now if this was a right a right triangle where A and B were the two sides the angle would and the and the angle C was a 90° angle they would be the base and the height and it would be area equals 1/2 base times height but if that angle is anything other than 90 then that changes but this is the exact adjustment AB time the sign of angle C because if angle C was 90 s of C is 1 and then there we go it becomes the area but that changes proportionally as the angle changes so look at that but also what you need to know is very similar to the law of cosin two sides and the angle between them so I'm just going to plot here side a you know in this case there there's no other options it's it you know it's the area that I don't know but I would know these three these three things so I'm going to prompt for side a prompt for side B prompt for angle C and then just write the formula there so 0.5 times side A Time side B time angle see I expect it to come in as a degree so it' be math. sign of math. radians of angle C and there we go and this one I I will do other ones other than uh side B and then if that's 90 there we go all right oh that's interesting so there we go and that is the area we did write the code and I will change that for you because that is the code to write the area so now we're going to put this together and solve any triangle so you know depending on what side we have what sides what angles our our goal is that if I know three any three things about a triangle I can figure out the other four things including the area and so this as we put it together draw the sides so this is I'm just going to draw a triangle not draw the scale but here's here's a triangle and I'm going to label the sides and the Angles and then I'm going to show the options you know what do we know two sides in the angle between do I know three sides uh do I know side angle across and another angle notice side angle across another side and you see the different situations you know uh two different ways to work with law of cosiness two different ways to work with law of signs and then other trigonometry a right angle and two sides Pythagorean theorem a right angle and a side and another angle other trig functions and so we're going to keep all that display the triangle and the options and then here are all the variables we're going to solve for there we go angle a there we go all these and then if option if you get option one then here's what you're going to do um input so if option one then it goes to this input side a and then you're going to complete this code well you can if you want then go back and copy the code from from this so option one is do I know two sides in the angle between and you can absolutely go back to the law of cosiness and we know the side so I know two sides and angle between I'm going to solve for side C so we're going to we're going to do this and all right so do I have if I have side a we have to prompt for side a side B There You Go Side a side B and side C and angle C mhm so th this is you know just an example of being able to reuse your your your code but then make sure it applies to this we you don't ever just want to copy and paste you want to see so um so in this one we did uh side B I'm going to make it a capital letter I'm going to make it an equal sign and I am also going to apply the new line so that this is going to be consistent and I don't need this because from picking that option all right and I know I don't know side C all right so so again we're side a side B and then angle C and we're storing it as those variables that match up with this again the little things you don't want to misspell your variables so now if I have this um now I have this extra um Step here which that's fine if you didn't you know if you didn't feel like rewriting it you don't have to but remember since I already know this I can keep this I can make it more consistent here and I can change that to a float which means I don't need this and then that means I definitely need to make sure that that variable matches and now we figured out side C which the variable that I want has no underscore and there we go if you want you can delete this and so what we have here is I now will take that input um and then I know now side a and I know side B and I know side C and we'll come back to this uh but then what I can do is after here I can so um angle a angle B and angle C and area there we go so then we'll add the area variable up here and down here we don't need angle C again because we already have it so we can delete that from here and there you go you have an example of what we would do with just that situation and filling in the rest of this I'm not going to repeat that it's it was in the other video about solving any triangle and there you have it displaying a triangle getting different inputs and no matter which input you would have a complete example here of starting with that how would I get every side every angle in the a area and then starting with something different how would I get every side every angle in the area so now let's look at just a refresher on the look of a sine wave so remember sign comes the word sinuous which means curvy and so we're just going to run this to show a graph of a sine wave and how we Define the array of X values remember the the graph is in radian so um I'm going to go from 0 to seven and 280 points that should be plenty detailed enough and then the Y value is just s of x uh both of them you know importing numpy I'm importing time for no major reason there and there we go just setting the figure size and here's the angle measure so let's run this and that's it just a refresher on the sine wave yal s of X and then we see the graph here angle measure and radians and we go from zero up to one down to netive 1 and there we go so let's talk about how that relates to sound and of all the different transform a we can do I'm really just going to focus on two of them here a so that's our multiplier which would give the amplitude of the wave and with sound that would represent volume and then B so as B increases then the wave gets more compressed and that would represent frequency so just some examples here of setting up sliders for you know notice I'm defining this function and I just call it f just to make this part short so that this line doesn't get too long but I'm going to define the function and do all the graphing in the function um I'm going to import inline import interactive and then we'll see that I just defined it like this we show you here the slider is always default to right in the middle but then we can see if I change B to be a smaller number and if I bring it down to one that should be a normal sine wave um we're going through remember Radiance of 6.28 there's your full cycle and we go through a little more than twice so just looking at b as B increases and then you can play with these sliders here you see it gets more and more compressed there we go and a being the amplitude there we go if it's one then you see it goes up to one down to negative one or normal this would actually be our normal sine wave I just decid to increase this a little bit and then as a increases notice the zeros stay the same but the amplitude increases and you can play with this and change these values here um I I mentioned the sound reference a lot of times then frequencies are much higher than this um you know 20 at the very smallest number but we're talking usually in the hundreds and you know can go up into a few thousands and that would be you know the range of frequencies we would normally hear in music but there we go and with this now this one I didn't make sliders um I just notice some of these here at the end just some things to to Tinker with so you can see um change the frequencies I did make the frequencies pretty high here and they would represent a frequencies right in the middle if you of piano keys if you're looking at that all right you know defining the array for the X values and here I'm just having I'm just graphing two things here so the frequency one * X and frequency 2 not changing the amplitude just changing the frequencies and I'm going to make the title of the graph illustrate that so uh yep there we go and it's pretty cool if you put these frequencies together now notice I didn't even add frequen uh you have these frequencies and what I did here is I'm plotting y1 plus Y2 so if you heard both of these frequencies together and and even though it's a little bit muddier than your normal wave at this scale you can see that it still kind of follows its own wave here and that's what makes Harmony whereas if I changed this to like you know uh 4 and let's say 31 um some awkward number uh there there's there's some values you can Tinker with this there's some values that would be um you know that make better waves and others so you can Tinker with this you could even rewrite this and make it all sliders you know this is all that you needed to do for this I wanted to give you some chances to combine these frequencies and I just put them in changing the code instead of a slider I think that works out better for these higher numbers and there you go you can see how some of these combine yep and you'll notice you know which numbers and which combinations produce better patterns all right so pretty cool then this All Leads up to the certification project um bringing back some of the things that you were doing before and this is creating um for the certification project I have buil an analog stopwatch though what we have is you already have the video and the assignment of creating the whole clock so um this one I just said build a stopwatch and you know that would just be the secondhand cycling around but you already have the project that looks at the entire clock hour hand minute hand and second hand so really this whole uh certification is um a little bit of a review a little bit of a uh culmination uh you know cumulative uh review of some of these topics so far and some of the projects and you know going through this you can borrow code you've already written you know use some things you've already done and that should strengthen your knowledge and understanding of all this so by now you would have you know completing all these you know you should have a good understanding of you know trig s cosine but all the other trig values degrees and radians graphing solving any triangle um plotting points for unit circle plotting points for um you know a stopwatch and all sorts of other things so hopefully this is a a good start and we have more to come so let's talk about the Matrix and yes the Matrix was a math movie because it was all about what you can do with special effects which really are algorithms and math at the core of it and the structure of that that's a matrix the structure of a lot of things we can describe as a matrix and the root of a lot of other words are related to the root of the word Matrix Matrix structure matter material um the uh French word Matra the um you know English word matron um the you know the core the fabric that we're using as building blocks so in math a lot in a lot of things we want to translate things into a matrix so that we can do some math to it um and that's that's where we're going to get into some of the things that we've been doing we're going to show how to do some of these with it a matrix so let's start with you know how we um describe the Matrix let's you know so this is a 3X two which is it's always rows and columns so if this is a 3X two so then it's three rows and then two columns and then this one by contrast is a 2 by3 two rows and then three columns so you we we'll see how we can uh create a matrix and call them you know using code and you would Define you know row row row that's you know how you would Define you know when you're setting them up so if we take a look at 3x two 2x3 um I can name these you know I'll call this one Matrix a call this one Matrix B and if I wanted to call one element from a matrix I'm going to use row and column as my address so I would call it B and then a little subscript let's say you know Row one column two I'll usually put a comma there and Row one column two so then that's a two and then that's how I can call you know each you unique element in a matrix so you know setting them up um setting up this Matrix and uh we'll look at how to do this in code to but this is how it would display then what else do I want to do with it well the simplest thing we can do is we can add two matrices and yes that's the official plural matrices so if I wanted to add these two they need to be the same Dimension and then the you know I just add each element and then the answer is in that same place but these are not the same Dimension so I could not add these now we we'll get to multiplying I actually could multiply these because that's a whole different different situation but we'll get to that so if I wanted to add to well I couldn't do this but let's just say I have another one so it would also have to be a 3x2 I'll erase this so I could have another Matrix um you know three four you know let's just say I had these two and I wanted to add these two these I could because they're the same Dimension and then my resulting Matrix would be those same dimensions and so in the same place 1 + 3 is 4 and I would add like that 2 + 4 is 6 there we go 3 + 5 is 8 4 + 6 is 10 5 + 7 is 12 and 6 + 8 is 14 and then that would be my answer that would be the result so one way to match up things that are corresponding and if I want to add these I would I would use a matrix um and we'll look at some other applications of these but a lot of times it's really useful to have a matrix we we can even have a python array and convert it to a matrix um pretty easily and convert from a matrix to an array so that you know some of the tools for an array are more useful some of the tools for a matrix are more useful and we'll use both but we'll we'll we'll get into some other things solving equations and graphing and all kinds of things with with a matrix so let's take a look at how to do this with code I just had this to display to show you I made each of these an independent variable um a11 because we're in retrix a row one column 1 a12 because we're in row one column two a21 because we're in row two column 1 a22 because we're in row two column too and each of these is its own variable and then B same naming convention and this code cell I just made it that we have a place here to enter in all these values and we're going to do other things with it so this you can just run and you know they're all entered in so looking at these if I was just going to add or subtract I would just add the corresponding parts a11 plus b11 would be C11 and you know still go in that top left corner so when we add these then I just wrote out the code for each step so you can see um all the corresponding parts and I had it output I'll run it again just so I just had an output that this would be the resulting Matrix 6 8 10 12 um and there's other ways we can format that output but just to show you the steps um in setting up a matrix and adding two matrices that's the uh most basic thing you can do they have to be the exact same Dimension so that this works and next we're going to look at multiplying and doing some other things with the Matrix so let's talk about how to multiply two matrices and multiplying unlike adding or subtracting they don't have to be the same Dimension but as you order does matter and these two Dimensions need to match so if or order does matter and so if I multiply this times this then these inner numbers match which is the number of columns here and the number of rows here so then the the resulting Matrix will be these outside dimensions so my resulting Matrix will be a 2x3 we're going to fill that in as we as we multiply so then why do these need to match because what I'm going to do is I'm going to multiply everything in the first row times everything in the First Column and then add those together so we see if those match it's kind of like it turns this times this so what do we have here we have um I'm going to do 1 * 1 is 1 plus 2 * 4 is 8 and so that's everything in the first row everything in the First Column is nine and then that answer goes in the first row First Column of my resulting Matrix so then if I get um a three if then if I go the first row second column so then if I if I do you know 1 * 2 I'll erase this we'll put all our in between work right here so if I have 1 * 2 is 2 plus 2 * 5 is 10 so then that's 12 and so that was in the first row second column is 12 and we see it proceeds like that everything in the first Row Third column 1 * 3 is 3 and then 2 * 6 is 12 so then 3 plus up then that's 15 in the first Row Third column then and so we see how when this goes you know then this number here can be anything and then we see how then the result of that could make a matrix that's you know whatever dimens iions um then if I do the second row First Column so then if I do 3 * 1 is 3 4 * 4 is 16 so then we have 19 here and second row second column 3 * 2 is 6 and then 4 * 5 is 20 so then I have 26 and second row third column 3 * 3 is 9 and 4 * 6 is 24 so then I'm going to have 33 here and there we go so as we see it becomes a lot of small multiplication problems and we're going to look at how to do the code for this um you know in one time I I'll show you how to set up the code like even just writing out all these multiplication problems based on you know input storing them as variables but then we'll look at some other ways we can multiply um two matrices um without having to even write out the code for each of these in between steps so we we'll look at this and then we'll look at some applications of multiplying one of the applications and that's why I picked these particular dimensions a lot of times we can store um XY coordinates um as you know first row might be my x coordinates and second row might be my y so like the the XY pair might be this like 14 as a as a coordinate point and then you could have a matrix of two by however many points and having a matrix that came first um multiplying that does different Transformations like rotating it around the origin or things like that so we could have you know that and then we would store this a 2X two for transformation a 2 by whatever for all the points you know these are some applications we can get into um but here's how you know the setup of matrix multiplication and um let's take a look at how to do this in a few different ways with code so now here's how to multiply two matrices and I just have to display here Matrix a * Matrix b equals Matrix C and we're going to just enter all the values in I just made the we're going to do a 2 by two so here's all the values again just some basic numbers so you can see and I'm going to show you a few different ways to do it so the first way is these are the actual steps and remember then you know it's everything in row one times everything in column one 1 and the answer is in row one column one so you end up doing a11 * b11 you're doing that multiplying but then a12 * B21 so we see these you know you're doing that multiplying that multiplying and you add them together and all that comes together as C11 so we see how we're building this you know all these steps doing the multiplying so you can see that you know this works and I'll output you know no spe special formatting just outputting these and that's going to work out just fine I'm going to run all this at once so besides doing that we actually this is the same Matrix I still have it referencing all the original input value so we don't have to change that but if I just make this each of these in array so I can say you know each of these so Row one row two and I can make these an array and this is why we imported numpy so I made this capital a capital B referencing each Matrix and then if I'm multiplying a DOT dob you know uh put the period then write out the word dot so this is a * B and then then we're going to print that answer and that works too we'll see this in the output but also I can actually just make them a matrix also in the numpy library np. Matrix and notice it's actually the same dot Formula E do F because I just made each of these so um and I me each of these its own Matrix even though we're referencing the same numbers so we have it you know output you know you know WR writing The Code by hand for each step using this as a numpy array or np. Matrix and when we run this we're going to see 19 22 4350 same answer each time so each of these will work as different ways to multiply a matrix and we'll see um some examples uh in a little bit of what um why you would do each way you know maybe you have different reasons or different situations where you would use just you know writing The Code by hand or an array or a matrix but math wise they work out to be the same answer so let's take a look at a couple things we can do with the Matrix and both of these the determinant and the inverse you need a square Matrix to do this so 2x two 3x3 4x4 Etc so in doing this um the determinant gets the Matrix to one number and then one of the things we can do with that is you use the determinant to get the inverse of the Matrix now when we get to the code this is going to be you know like one simple step you know um builtin formula you know inverse or determinate but I'm going to show you the steps that to get to this um with it Beyond a 2 by two it actually gets even more involved but this will illustrate the point so let's get the determinant here so the determinant is you're going to multiply each of these diagonals and subtract them so um the determinant is going to be in this case 2 * 4 and then 4 * 6 or 2 * 8 and then 6 * 4 so we have 2 * 8 is 16us 24 so we see you know that's how we get the determinant that minus that if it was um a 3X3 it becomes even more steps and you carry over the other two columns but there we go so what we have is so if the determinant then is8 we might use that for some things um you know there's some ways we can um uh boil down a matrix too and determine it for other things you know uh encoding and decoding all kinds of things so here we have this but we're going to use it to get the inverse so then once I have the determinant then one over um I'll put the negative here um one over determinate times that original Matrix to 4 6 8 then that gets you the inverse so we're just going to take this and distribute that so one over so 1/8 * 4 so I'll just reduce that fraction so that's 4 2 over 8 and then there we go 18 so that's one2 and there we go 6 over 8 so that's 34s and 1/8 * 8 so then that's 1 and it worked out nicely to fractions I decided to put them as fractions but you know a lot of times are going to be uh decimals and this is another thing where you know I pick numbers that work out nicely very often you get decimal numbers and you know quite a few decimal places so what you would do is you would store each of those values um you know as a variable that just works out better but there we go so now this is the inverse so this is the inverse of the Matrix and we have these now one of the things If I multiply a matrix times its inverse I should get the identity Matrix so which is 1 01 so I would get the identity Matrix then this would be the the in the uh result if I multiplied the Matrix times its inverse um or you know if I multipli anything by the identity Matrix I get the same Matrix but there we go so we we often use the inverse for we can use that for solving equations we'll get into how we can use that application but there we go here's how we get um the determinant and then the inverse of a matrix and then now as we look at it you know how to do this with code we're going to find out that this is even easier because we have some builtin functions so let's take a look at this with a code so here's some other Matrix operations that will be useful in different situations um one of the things would be the inverse of a matrix and remember we really officially don't divide matrices we multiply by the inverse so if I already I'm going to build upon this I already made these uh Matrix A and B and you know I can run this again so there's Matrix A and B and now that that's stored um and remember you know with collab that VAR you know those variables will be active and available for maybe 20 minutes a half hour if you don't do anything else with that with that code cell um so we can build upon that if I get the inverse now notice within and numai we have linear algebra within that and then even that do inverse so I can get the inverse of Matrix a and the determinant the determinant tends to be um more you know messy decimal places so I will round that up and the determinant is uh a way to get the Matrix down to one number so and we're going to know that's actually used if you did this the long way that's used in the inverse um but also you know some other um some other things you might use the determinant for so I can just round that um and then Matrix multiplied by its inverse so now that I have the inverse I'm going to use r dot a DOT and then what am I multiplying it by I'm multiplying it by the inverse and I'm going to print that and the determinant will be be one number so I can just round that but I can't use that round function with a matrix I have to use np. around so that's how I get the that's how I get the rounding of that entire resulting Matrix so if I run this so we see still referencing Matrix a I have the inverse here and then I also have the determinant and then when I multiply Matrix a times its inverse this is what we expect to get this is remember the identity Matrix so if I multiplied this matrix by any other 2x two I'm going to you know it comes out as that other Matrix so multiplying a matrix by its inverse gives you the identity Matrix just like multiplying a fraction by its inverse equals one multiplying a matrix by its inverse gets you this identity Matrix so just some other things um within the numpy library things you might want to do with the Matrix um I just want to throw in here another way to multiply so here I just have I created these just right here Matrix c and d and just to show you you know you can output what type they are what what object type and here's another way to multiply these so instead of like we did here a DOT and then the second Matrix in parentheses you actually can just do NP Dot and then each Matrix in parenthesis CD it works it it works out the same so here we have this Matrix this Matrix both of them what class num. Matrix and and here's the product the dotproduct of two and remember as I set this up that this was a 2X two and then Matrix D was a 2x3 so the results going to be a 2x3 the order does matter and those middle those middle Dimensions need to match and then the outside dimensions are the dimensions of the answer so there we go another another way to multiply these sometimes this might be more useful and this is also just showing you know what type of object these are all right more cool things we can do with the Matrix and then we can make use of some of these things um and others in other operations all right next we're going to apply the Matrix operations and solve some problems so let's talk about re reduced row Echelon form of a matrix but to get to that let's talk about each part of this so first of all Echelon Echelon is a word Beyond math that means uh levels of command um potentially rows or status and in military formation echelons are rows where each row extends out a little bit beyond the one in front of it almost like picture a triangle and so that Echelon you know we can see that you know level status and start seeing how this can apply to a matrix and rows what do we want to happen in these rows so then we get so Echelon form but Echelon form in a matrix has specific rules that you know if you have a row of zeros that has to be um the you know the lowest row if you know you have sometimes people say the leading coefficient should be one but sometimes people say that you know that rule doesn't have to apply and it's really about how the leading coefficients um get to be you know uh further to the right of the other ones we you we'll see how this plays out but that's that's kind of like the where the idea of echelon form comes in then specifically to a matrix we have row Echelon form which again follows that there's is going to be a leading coefficient of a one and then there's going to be that leading coefficient of a one in the next row is going to be over not in the same column you know that we get into row Echelon form but redu and you know that limits what the The Matrix can look like we're going to be really interested in building upon all that to get to reduced row Echelon form which gets us to a unique Matrix where combining what we've been thinking about you know in terms of like the definitions of all these other words reduced row Echelon form is going to have our leading coefficients of one it's a unique Matrix that will give us the answer to our question and before we look at what that's going to that final form let's look at how we get to that and then it will all come together so we have a matrix we have a system of three equations here so we have um you know 14x + 11 Z = 3 now notice this one doesn't have a y value the next one 22x + 25 y + 4 Z = 7 and then 12x 34 y 3 Z = 4 so I can put this Matrix put this uh all these coefficients and what's on the other side of the equal sign in this augmented Matrix and we say augmented because sometime um we can put this as one Matrix a 3X3 and then as another Matrix for everything on the other side of the equal sign it is possible to do that and then um you know that's another way to solve it so this augmented Matrix now I have this and I can use reduced row Echelon form to solve this now the beauty of this is um that that's one function you know in math in a lot of calculators and certainly built into python um so what that does is that's going to give us one 0 0 and then the answer 0 1 0o and then the answer 0 0 1 and then the answer that's the idea that this becomes this reduced row Echelon form and that's you know that's follows all these definitions I have a leading coefficients of one and each one is to the right of the row above it and so then whatever comes in this last column ends up being the answer to our to our Matrix which is really cool how how that can work um so that's what we're going to do um for reduced row Echelon form we're going to look at how to do this with code but this is kind of you know what what our situation would be to set up the code I'd have a system of equations three equations three variables set up this way so that it's always XYZ equals a number and then notice the missing y value I have I need that zero as a place value so this is would be our situation um to get to reduce row ealon form I would have a system of equations put that in the Matrix and then I would would use reduce row Echelon form to get the answer now if you didn't have the computer to do this re the the the way to get this is essentially all of the different substitution elimination all the different um row functions that you would do to gradually solve solve this you know equation you know some substitution some elimination you know combining rows um so it would be very tedious but it's doable you know but here we have if we have it in this form it's going to be you know one function boom two seconds and then solve it so let's take a look at how to do this with code we want to see like this would be the setup of what we're uh what our situation would be and then we get to the code so uh let's let's write some code to use reduce row Echelon form here's how to solve a system of equations with a matrix and I like the row the reduced row Echelon form uh the best I I feel like it's just really straightforward so that's the way uh we're going to look at it here also in the code and in addition to that we're going to look at how we can convert we were looking at you know np. array or Matrix and I want to show you here we're going to convert from one to the other so I just put this in here I'm going to create an array um so right here I'm going to create a matrix as an array and then I'm going to create a matrix from that so I have the array and then I'm going to create a matrix now I'm importing numpy I'm importing simpai but I I feel feel like I've run this without importing that but um I still have that up there so right here we're just going to show you that uh when we run this that that this works and also noce just an interesting print statement the braces here inside the quotes and then format um The Matrix there so there we go create an array Matrix from that array and I just commented this out because I'm going to show you the other way but you could have just started with the Matrix um but the reason why I started started with an array is to show you that you can create a matrix from that and we're also going to convert it back to an array so it it works both ways you can do this um as I may have mentioned before maybe some situations you'd rather an array some you'd rather a matrix for a lot of the Matrix operations you want the Matrix so you know here we go you can convert from one to the other though and we are going to do the reduce Echelon function so it is a matrix and it's going to be m. rref now that's going to give you the reduce row Echelon form then I really wanted to split this out and um notice the first The Matrix is the first element so every one of these it's a twodimensional array but you have the first element is zero so my x value and this is going to make sense when we see the output is 03 my y value is 07 and my zv value 011 and so I created those and then we're going to print you know xal yal Z equals and that's the this is the output that I like I want to show you you know how we get to that here but then we're also going to print out the echelon form so you can see where this comes from so we run this and we have you know here's the Matrix so we see um you know it formatted there and it will just give you this Matrix here same Matrix and we see um there we go it was a you know we converted it back to an array and printed it that way so that's where we get this form which you you know you may uh you may or may not uh want that form and then now we have um the answers but I'm going to skip over that let's take a look once we get that down to the reduced row Echelon form so you see this whole Matrix was the first element and remember it would have been you know XYZ equals so you see the one here x is one and then y the coefficients the coefficient of x is one and the coefficients of y and z are zero so x equals this number and that's the same that we got here and you see the coefficients again y the coefficient would be one and the others would be zero they would drop out so the Y value is this and then 0 0 one so the coefficient of Z and there's Z and given that we see that the elements are 03 07 011 so it's not um row and column as you might expect but there we go so we get these um and if you're ever working on this you can you know output this form and then you know Tinker with you know what elements you need to put in here just to be sure but there we go so that way if you have a system of three equations with three variables you can you know put that into a matrix reduce row Echelon form and then output your answers and you know you could output these because then these would be stored as those variables if you needed to use them in something else or you could output here and you can see you know what what it would look like so that would be a way to solve any system of three equations three variables and then we're going to look at a specific example next um quadratic um and developing a quadratic equation so we'll take a look at that next so here we're going to look at developing an equation from three points and using a matrix to do that so I'm going to pick a quadratic because linear we just need two points quadratics complex enough to demonstrate this so if I have the standard yal ax^2 + BX plus C then here's three points let's say I have these three points and I want to find out you know I know this is going to be a parabola going through these three points what's the equation of that Parabola so I'm going to plug in the first point XY and we see plug in1 couple times for X Y is zero then I'm going to simplify it and we get down to this I'm going to go to the next Point plug in the second point there we go 1 Y is 6 simplify it and we get to this and I'm going to plug in the third point 22 there we go simplify it and so let's put all these three together notice I and it is important I put the equals on this side so I always have AB C equals something because all those coefficients become the augmented Matrix and augmented because I include what's on the other side of the equal sign as that fourth column in The Matrix there's other ways to do this uh you know uh make a 3X3 with just everything on the left side and another Matrix but this isn't augmented and I personally I just happen to like this method so we see all the coefficients from the first equation 1 1 1 again Z on the other side of the equal sign all the coefficients become our Matrix here so and I'll just call it Matrix M to give it a name so if I do the reduced row Echelon form of that Matrix abbreviated r r EF and then you know of Matrix M this would all appear at one time but let's look at it one row at a time so it would be it always has to be a b c and then the number on the other side of the equal sign so the only coefficient with a one is a a must equal one and then the next row b is the only coefficient with a one b equals 3 and then C the only coefficient of the one C must equal two so a = 1 Bal 3 Cals 2 we see that nice pattern diagonal ones and then this last column gives my abc values and then the full equation is y = x^2 + 3x + 2 we just put it in that ABC and there we go three points put it in a matrix re you uh you know reduce row Echelon function and we can develop an equation so let's take a look at how to do this with code and we're also going to look at the patterns that we did so that we can just set it up once and then whatever number shows up as you know the XY values of these three points we see exactly how to then plug in three points and do the rest automatically and output an equation so let's take a look at how to do this with the code so now let's apply this uh Matrix reduce row Echelon function to developing a quadratic equation from three points so here's how I would take the points and each of these you know X1 y1 X2 Y2 yx3 Y3 so these would be the three points and that's going to be enough information if I have any three points because if we take a look so here would be the standard quadratic equation and there you go ax2 plus BX plus Cals y so if we had any of these three points for the first point we would plug in X1 here X1 and then C would still be there and then y1 second point we'll plug in X2 and then Y2 and then third Point X3 and Y3 three and then converting these three equations into into a matrix so we see that to we're going to solve for a b and c so given those variables the coefficient for a is going to be X1 squared the coefficient for B is going to be X1 the coefficient for C is always going to be one and then y1 on the other side of the equal sign same thing for X2 Y 2 X3 y 3 so that would be the Matrix that we'd be using and I just have this set up here import numpy and here's just a place where we can enter in any of these I picked a couple you know points here so we can take a look so you would enter in in the points here and then Define this Matrix based on those points so here's the first row of our Matrix and then the second row and the third row so we're creating all these as a matrix points into this Matrix and from there m. RF and so I just made the variable name the same m. rref is the function I just made this variable name and given this mcore RF is r answer so now I'm going to take that and the x value would be at this part and I'm going to round it store it as a the Y value would be in this location round it stored as B and the Z Val C value so there we go couple steps and I'm going to print out a b and c now I could you I could do something else with this too but uh let's just take a look so row Echelon form um let's run this and so my first print statement would be these answers one five and six great and row Echelon form just so you can see it to compare then our coefficient is one here x uh so X is one y there's my coefficient is five or sorry A B and C A is 1 B is 5 C is six and we always could add another print statement if we wanted to knowing that the goal of this was the quadratic we could have you know a and then x squared the I I might I'll use the python notation here x s um plus and then I would have B and that would be X keep that space Plus and see uh there we go and a lot of times we put the Y equals in front so I would do I might do that y equals there we go so we could take this now that I have a and c and I could just print out that equation y equals ax^2 + BX + C and there we go so that works too and you see then now this quadratic if I have three points I can figure out the the equation and that's kind of what we want to do in in math and applying this to other things can I have just a few points in this case three and then develop an equation that would go along with that all right right we can apply this Matrix and RF to some other things too but there we go developing equations from three points a little bit about encoding and decoding and even if we're not using a matrix um so python has built in if you have any character so you can bring in a string and then run through U the each character in that string if you get any character we have builtin o um ordinal it turns that character into a number based on the asy code American System of computer information interchange so that's the standard that you know you can look up these tables so you can see you know every letter Capital lowercase um you know some with accents some uh numbers symbols punctuation all that every one of those corresponds directly to a number and then you can convert that to the standard number and then the other car the other function is CHR which you can take a number and then convert it to a character um if you had a number that's out of range it'll give you an error but you know you can type in the number you know character 65 and then it's going to Output a capital A so we're going to use that um in the code I'm I'm really going to show you how to you know prompt for these things get that string and then convert it and the the uh Cipher or the you know the code that we're going to use to transform it it's going to be pretty a pretty simple just shift I'm going to get that number I'm going to add something to it or subtract and you know there we go we could take this and convert these to you know each to a different Matrix that's another possibility and maybe in in a another video we'll explain all the uh levels of converting using uh using a matrix but for right now I wanted to show you um how to do this and then you know you you can modify this or expand on this on your own and you know create something you can send a secret message okay so let's take a let's take a look at it in the code so you can use a matrix to encode and decode messages and you'll see in here where you could potentially put a matrix but I'm going to show you this even without a matrix but we're going to use some math all right so the only Library we need to import really is numpy and here's some comments here so we're going to get the input and this input prompt for input remember it comes in as a string so I'll store that is inore text and then I'm going to set up this empty array here inore numbers and what I'm going to do then I'm going to Loop through all this text that comes in so for a in intext so then what that's going to do is every character from that string one at a time I'm going to go through and here's the inner function um I'm going to convert that to a number so or converts everything to a number um based on the um asky code so capital A is going to come in as 65 Etc so one at a time convert that to a number and then I'm going to append that to our array here so then I will have this array of numbers nice then I'm going to encode this I'm going to start I'm going to have this blank array of encoded numbers and I'm going to Loop through that so looping through every element in in numbers now I just put this commment here this is the here's just a simple example but this math can get more complex and this is where you could potentially put an array so all right here's the cipher I did just a basic shift and um the reason why I I picked uh 37 so capital A is going to come in as 65 you might have a couple symbols before that that you might use but most of the text is going to be 65 or more and so adding this gets it up to a threedigit number so everything come that comes through should be a threedigit number then um you know I add I could have added 35 I decided to add a couple more um so just a simple Cipher that's about what I would add anywhere between 37 and um you could have really big numbers so um you know anything in the hundreds all right so anyway this is the cipher and all we're going to do is just each of those in the array we're just going to add 37 to it and append it to our array here and I I I split this up because then this you know you can add something you do like linear algebra you could do um a quadratic formula you could do anything you want to change this I just wanted to do a simple example but you could do anything you want in that math and that's where this is really the only place where then a matrix if you wanted to um pretty much uh one at a time you wouldn't use a matrix two at a time you might do some matrix multiplication but we're not going to worry about that right now um and then you're going to I just have this that you're going to print out the encoded message so that would print it out now if you did this um you could run this print out your encoded message copy that and then paste it anywhere you you know whether it be text you know a text message an email or anything else you know and there you go that's one Le it it's one little extra layer of encoded message um but there you go you would copy it and paste it and send it to somebody now on the other side now we're going to decode and we're going to prompt for um input enter text to decode and I'm going to store it as this variable in code and this one since I know that this is going to come up you know uh the encoded numbers you'll see that array when you print it out it's going to be each number separated by a comma so here we're going to split it at that comma so now Inn num is an array um each you know each element then becomes an element of this array in Num but now I have to decode that so we decode and rather than an array I'm going to have a blank string so this string just starts out with a space called decoded letters okay so now as we Loop through that remember they're numbers but they're they all come in as a string so first of all the math of it um has to be the inverse of the encoding so if the other one I added 37 then this one I'm going to subtract 37 but first of all I have to convert that to an integer and I chose to do it in this step here convert it to an integer and then you know the math of it which is the inverse of the encoding and I'll store that as a variable decipher and then each of these so decipher then um still remember that's still just a number I converted it to an integer and decipher is still a number so then the opposite of the or is CHR converts that number to the corresponding character so we see that you know the encoding um convert it to convert the letter to a number um based on the asky code then do some math to it and then here I need to do the opposite I need to do the you know convert it to an integer do the opposite math to it and then convert it back to a character so then we're going to just um it's not an array so we're just going to append our string here that plus equals and then this should be a string decoded letter should be a string which is the message and then we're going to print that out decoded letters so we have both of them here and you could always split these up into their own um functions but for right now I'm not worried about that because you could always I mean you could just run this right here so text to decode you know secret message hit enter and then we see it prints this out so if I was going to send this to somebody I would highlight this and copy um now I would paste that in message the other person would get that and highlight it and copy run this program enter text decode so paste that into here and hit enter there you go secret message so interesting way and what you would have is um so you could potentially um you know the I would I'll keep this but you know you could potentially then just share this you know and and that's what I'm doing I'm going to share you share the code with you um this could you know go to anywhere and anybody could just change what math you do in this step that's pretty much it if you just change the math that you do in this step you know and of course then it's going to match the math that you would do in the cipher and um you know somewhere else you know as long as you and the person you're communicating with have that math that they're you know the same math that they would modif would modify this hey you can send a secret message and this could be encoding and decoding because if if I my main purpose is to decode and I don't care about encoding you know I'll just say a there we go and then I would have this other message that I previously copied and I could still then you know just run that one step that doesn't take long and then still print this me this in here there we go so pretty cool um you know always always fun to like make something that you know sends secret messages and you know applying some math to it um and as you see the math and very much a lot of the converting from one thing to the next there we go and this you know a simple Cipher but you can make it a lot more complex than that so now let's look at using a matrix to encode and decode and this is also encoding and decoding that works because I tried a lot of things so I'm bringing to you the stuff that works works and through that I'll give you some hints on how you can modify this for your own encoding and decoding so first of all the Matrix that I use I'm going to store the M the each message as a 1x two Matrix so we'll see how we do that and as a 1 by two Matrix then I'm going to have an encoding and decoding Matrix that's a 2X two and you see order does matter so when I multiply this 1 by two times the 2x two my result will be a 1 by two and that's going to be the message again so you could do this certainly um and and that one by two is going to be you know grabbing two letters at a time or characters two characters at a time you could absolutely do this as a 1x3 and you know use a 3X3 as the encoding and decoding Matrix I I feel like depending on how big the message is that's some extra processing power um but you could absolutely do that that's another way to do this and then um you know use that certainly would be more difficult to break the code um but I decided to do a one by two and this will also illustrate the example for you so I use a Rays even though we're talking about a matrix and we're talking about matrix multiplication as we looked at before you can use use an array you can use a matrix and you can convert from an array to a matrix well for this stuff I actually I I like the way it plays out with an array a little bit better so that's why I chose that we can still think about this as a matrix and the the setup but um officially I am going to use numpy arrays so I import numpy and I'm going to do NP array so this is where you can add yours you know I just have you know 2 468 I decided to do that and you know you can you can have whatever numbers you want this is where as you see you know I I call this one that this one that works I have a lot of other um blocks of code where I tried some different things and some numbers that you might pick for your array the end result looks weird and sometimes that might be I don't know um maybe difficult to break the code maybe or too easy to break the code because certain things jump out or maybe certain things uh put you in negative numbers remember um even though we're not going to really see this step but behind the scenes when you do an INT an inverse um you can't have a determinant that's zero so you know there's going to be certain things that that work or that look better um you know anyway and so but but there you go this is the main thing that you would need to change and then everything else see this decode Matrix just B builds upon that I'm just going to do the inverse of that other Matrix or array um and yes again even though it's an array the inverse is np. Lind alge um it's really the inverse uh you know it's an array we look like we're doing linear algebra and it's really the same thing as mathematically it's the same thing as a matrix inverse so some of this stuff is going to be the same here um from when we were just doing the simple Cipher you know a little bit of a shift um enter the text I'm going to store it as an array um and then I'm going to um get the order you know use this function to get turn that each character into a number based on the asky code so that's good but now knowing what I'm going to do with my array my array needs to be even if it's not it actually will just drop off the last letter and who knows maybe that's important so what I did is um you know because our array is going to be a 1 by two so um if the last one is not a 1 by two that might cause some problems well it will cause problems how severe I don't know but um the uh so I will do this and then to make sure it's even I just want to check if the length you know the modulus if that's if if that's not zero then it's not even and I'm just going to append this which in asky code translates to a period so maybe I don't have a period at the end of the sentence and therefore I would just add one and that'll make it work out in code some of this is similar I'm going to um but here's what I here's uh you know I have my array of encoded numbers but here's what I'm going to have because I'm doing this you know two at a time to make that a 1x two array or Matrix I have these temporary values that I'm going to initialize here as zero and PN that's a variable I like to use uh for positive negative so I'm going to start out as negative 1 so all those encoded numbers um remember it goes back to that variable in numbers um if PN is ne1 which is starts out at then I'm going to store that value as you know for B and in numbers as I Loop through that then I'm that that value becomes temp one and then I'm going to multiply PN by negative 1 so now it's positive so there we go the first time it goes through that value go becomes temp one and then the next time that value becomes temp two and that that way I go through a notice after doing all this then I'm going to multiply it again so that that's kind of why I like using the 2 by the 1 by two um if you used a 1 by3 you would have to go through and you know you have to count up three times and you know other things become more difficult but again this illustrates the the value point you can do here so here's what I'm going to do then I'm going to turn this into I called it I called the variable Matt like Matrix um I'm going to turn this into an array as temp one temp two boom that's an array and then I'm going to do the dot product so I just called it encode you know encoding using the dot product and Dot and I'm going to multiply and remember order does matter so um NP do dot Matt comma en code so that way here once I have this you know now I have the two values and store it as an AR as a 1x two array do product which will then also end up being a 1 by two array and then I'm going to encode the first one so that first one encoded numbers is going to be my my array up here and I'm going to append you know that one notice item zero and then item one so this is how we're going to do the encoding each going through each character um there we go turn it into array product multiplied by the encoding Matrix and then store it as this encoded numbers array and then I'm just to show I'm going to print out the message now if you using this for an encoded message what you would do is you could then copy that message and paste it in wherever you want to paste it and you're going to end up pasting this you'll see it's an array of numbers separated with commas so then to decode you would have that enter code text decode and You' be pasting this so then we would split it at the comma and now in Num is my array of numbers so with that array of numbers in decoding I'm going to turn this into a string so there's my string of decoded letters starts out with a space and I'm going to do the same thing I I changed it a little bit just to use it make a different variable here so PN um I just use the underscore here is negative 1 because now I'm going to take that remember this is these come in as an array and I want to make sure that I store it as a float number so there we go that for everything in that um in that array each one um I'm going to store it as a float now I go through again if it's NE you know the PN is negative 1 so then temp one and you see this is what I I just used this if you it's within my loop it's within my array and I'm overwriting it so I actually felt fine using the same variable because again it's a variable I'm overwriting and it only ex you know it exists here so therefore temp one is Def float and then I'm going to multiply this and then when I go through here then temp two is Def flat all right so now I have this I've brought these numbers in converted each of them to a floating Point number and the reason why I'm using the floating Point um a lot of times it does work out nicely and the numbers I picked I made it work out nicely for integers but that won't always be the case especially if you Tinker with using different encoding and decoding matrices um so I definitely want these as float values not integers so now these float values um once I have them both now I convert them to a matrix or an np. array temp one temp two I have that I have that array and like before I'm going to do the dot product and we see there that Matt again same I'm using this same variable but that's okay I'm overwriting it every time so Matt and then decode so now I'm doing the dot product here okay so once I decipher that I hope it's an integer um sometimes you know we might be dealing with a lot of weird variables and we hope it rounds correctly but I still need to get that item and I definitely want to cast it as an integer here so there we go and I just called that variable decipher so now that that's an integer my decoded letters I take that decipher integer cast it as a character CHR and I'm going to add it to my decoded letters string that I initialized up here so you see slightly different on in the encoding we start storing things as an array that I'm going to out put here here I'm going to put it all together as a string so I get the I get things as an integer and then cast that as a character um get you know the get the character that is associated with that integer again based uh this is again based on the asy code um that CHR will turn that integer into the appropriate character and I have and I just keep adding to my decoded letter string so here's the here's the next thing um the weirdest thing is I found that I use this um notice how this is very similar I have decipher here for that integer for that one character and then store it and then I have decipher two which I'm going to get from item one because my my array item zero and item one what I found though is that I need this rounding adjustment it seems that this one seems to be for whatever reason consistently good I haven't really had a problem with this but this one I do need to o round it it just happens to be that that seems to be the case um so I do that I throw in that extra that but that I I wanted to put that comment there that's why this one's rounded and the other one isn't I rounded It Again cast as an integer now this is decipher two and then convert it to you know that which is a which is an integer convert it to the appropriate character and add it to decoded letters so we see you know bringing in you know doing this matrix multiplication and then getting this item as a part of my decoded string and then the next item as a part of my decoded string and this is another thing you know the these are different enough steps that you know I'm not going to Loop through this little part twice I just I'm going to write the extra line of code and then I'm going to Output the decoded message so pretty cool and let's let's see it in action so I hit shift enter instead of just clicking the button enter text to decode there we go python is fun there we go and so we see this what I would do is then I would copy all this um and I would paste that somewhere that I wanted to send that message but here I'm going to paste it here because then you know if you got this message you would copy it from somewhere and then paste it in here and I'm going to hit enter and there we go python is fun um there we go so if if if if I didn't have that um adjustment you see fun I didn't put the period there but because this was odd we have the extra period there um because if it cuts it off then you know um might be uh there there there you go python is Fu you know that's probably not the message you were trying to send um so there we go we have this now I have this as one in just like it did with the other Cipher um because if you know I'm running this to encode and decode if if I just wanted to if I just wanted to encode something um you know just encode I mean I could take this now I'm going to copy it here just because um but if I just wanted to encode something and then send it and I have nothing to decode right now um You you know I could just type in you know like some random number 65 there we go and yep it might be uh yeah that's very interesting um so I I wouldn't have to you know I just typed in 65 and it didn't do anything um though I expected it to be like a period but anyway you know that's it or if I just wanted to decode something then I could again just type in I I just keep thing is 65 you know there's all the characters before the and then this is capital A but if I wanted to just um you know text this and you see it's odd so it would give me two different um two different things so if I just wanted to decode something I could just type in any number there and get that output it doesn't matter to me and then I will paste this in here so you see like I I didn't need to split this up as having an encoding function and a decoding you might as well do both of them together and then whichever if there's one you don't need then you know just enter a letter just enter a number and then call it good there you go just encode so this is a good you know I I I really think it's it's Matrix makes it interesting because you know now you're taking two characters at a time and you're doing this matrix multiplication you know the possibilities are pretty pretty big for all these different uh matrices you could have you could if you really wanted to also put a shift like once you get that encoded um you could um put a shift and if you did I would put it here I would do all the encoding and then like let's say if I wanted to do this and then besides that number I would just want to add something you know I don't know add 10 to that number or something like that you know or or you know 50 just I I I would do it there and then at the at the end I would um do this subtraction right away so you could do that you know Matrix encoding is complicated enough but you could also add the adding or subtracting but I would do that after the multiplying here and then just you know add or subtract something and then here right away when you get the number you know do the opposite add or subtract so these are some things where where you can you know that's why you you can see all this code you know what can I do to make a secret code but then you see where you can make it your own and you know who knows you know even even if you keep it just like this and the only thing you change is this that's four numbers there that um you know whoever you're sending the message to would somehow have those four numbers and therefore the two of you can encode and decode things so yeah seems like a lot of fun um you know sending secret messages so there we go um here's how to do with python Matrix so let's look at another way of solving a system of equations and this one connects more with a lot of algebra methods that you might be familiar with so I'm going to take this Matrix and I'm going to take this system and turn this into a 3X3 Matrix of the coefficients on this side of the equal sign and then it's that times a matrix of XYZ the variables equals a 3x1 matrix of the numbers on that side so this works that we can create a matrix of all of our coefficients times the variable Matrix equals this now how we solve it remember if you're multiplying you divide divide and you multiply do the opposite um to cancel things out so I want to get the inverse of this Matrix and multiply the inverse times each side so when I get the inverse of this Matrix so remember this is a 3X3 so we can get the inverse and the inverse will be also a 3X3 and then when we multiply this by this Matrix which is a 3X 1 then we'll see that we can do this because the three these Dimensions match up and then and the dimensions of the result are going to be 3x1 it's going to be a 3x1 so what we end up getting is this Matrix of the the resulting Matrix will be like you know XY Z equals a 3X3 Matrix of our answers here pretty cool so this this is another way to solve it I personally often use the reduce row Echelon function but this is just as good just as viable and for some other things beyond what we're going to do in this course but you get into other you know more advanced calculus some um Matrix algebra then you might end up using this inverse method you know more often so I wanted to make sure that you know we talk about it but now let's take a look at the code and we'll compare this also to the reduced row Echelon function you know how we do this in code and then what the answers look like so let's take a look at the code so let's look at doing this with code inverse Matrix to solve a system and I'm going to use the same numbers so notice I'm going to make them arrays I'm going to import MP n p I'm going to import um everything from simpai it's kind of weird that it just works out when I do that even though it doesn't seem like I'm calling Senpai for anything so I'm I'm still going to talk about them as matrices but I'm creating them as numpy arrays so here's the same and we see you know Row one in Brackets row two in Brackets Row three and notice this one are a number on the other side of the equal sign it's a 3X one and so I'm just going to make you see Row one row two Row three each of them have one number in the brackets all right so because I'm doing this then numpy has that linear algebra so np. Lin alge Dov to get the inverse of that array and I'm just going to store it as mcore inverse and then the dot product and so this function calls you know two arguments what am I multiplying and order does matter so I'm doing the inverse times A1 and then inverse time A2 now this second one is really what I need to solve I just did this because I wanted to show um that this should give you the um identity Matrix okay so I'm just going to print this and that's that's really the the answer that I'm looking for all right and what I also have is the answers that I got from doing reduce row Echelon function it gave remember it gave me those fraction answers so I'm just printing out those and this is fraction so the print statement we combine these or we we'll do the math and actually output a decimal this will also output a decimal so we'll see them to compare so this is what I'm I'm doing I did the dotproduct the inverse time A2 and I get my 3x1 Matrix of the answers here and then to compare so this one gave me 0.330 and the one I got before was 0.327 there we go so and then the next number is a six so almost three thousands off there might be a rounding error somewhere or just and but notice you know this is about the comparison here um there we go the so the x value would be that the Y Value Point 014 and this one G is correct to that many but then the next number is a seven whereas this one's a one so off by about 6 6 606 10,000 and then here negative. 1443 and negative. 1476 so again off by a little bit in the order of you know um 10 in the order of the thousandths um close but depending on what you're doing and depending on how you're rounding that might be fine um that might be as close is what you need to get um if if not it would be worth it to you know try some different things and see which one really is you know uh more correct um but there we go so the inverse and see just printing that m dot I have this that um there we go um m dot and there we go so uh I could you see create multiplying the inverse times A1 and that should give you the identity Matrix and I made this as two different variables so um maybe I'll just make this one M do a and then I'm just going to print here print M do a there we go now this is really the ID because all these are e Nega something so I need to go up here and then say um around and that gives you the rounded so notice we have the math function round but this is a round and it will round every element in that array pretty cool and so I just wanted to put that into to show you that that's what we're doing we we get this array multiply by the inverse which gets the identity Matrix and so it would be the identity Matrix XYZ on the left side equals this Matrix which X is 33 Y is 01 and Z is .47 all right pretty good so I just wanted to do another example here connecting with solving the system of equations to get a quadratic we can do the same thing and I followed the same you know using the same points here um I'd have you know two x value X1 y1 X2 Y2 X3 Y3 and just like we have here um I have the reduced row Echelon function and so so therefore I'm creating a matrix of these values and then I'm going to do that function and then get that so here we go now if I do this then here's remember this is how I got these values here for X Y and Z or for a and c and it's just one value here so therefore I'm using the round function so that we've already done and so just using the inverse Matrix now um I'm just doing same values here but I'm making it n p. array for each there we go and just like we were doing before therefore I'm going to do the inverse there we go of that array 3x3 and then I already have this written in I'm going to round it so just again into comparison you really don't need to do this I just wanted to show you um but then I multipli that inverse times that 3x3 should get the identity and then the values I multiply the inverse by the 3x one so when we run this with with numbers like this that work out to nice integers or easily rounded you're not not going to see the same discrepancies so yep a b and c become 1 five and six identity yep and the others were one five and six so I this is a lot of extra output just to show you you know how some of it works but there we go so this is getting the answer using inverse this is getting the answer using reduce row Echelon function or maybe I have it reversed but then and and the same so it it some of these become a matter of preference there we go but now we can see how to use an inverse to solve and write the code to do it so let's look at a few more things with matrices like Transformations okay so here's how to do a few key Matrix operations with code the only Library we need to import is numpy and here I'm going to create a matrix I'm just going to call it points because I have it in mind that these could be XY points so np. Matrix and then here I have you know there we go Row one row two Row three and these could be XY points so now I could just pull out one of these points and notice how we number these um row zero element one so that'd be a two and you know cuz this is row 0o row one two you know there we go I could pull out that one particular point and then I'll also just print the whole Matrix just so you can see that then let's transpose it so I'm going to create another Matrix called T points and I'm going to transpose that original Matrix and we'll see what that looks like because then I'm going to print that out transpose and then I'll print that Matrix and just for fun we're going to transpose it back back so I'm going to transpose it back and we see um same np. transpose so I can transpose points and then I can transpose T points and that will transpose it back and then again we're going to print this I did I did make it another Matrix called original points so that it doesn't overwrite that so now at this point I have three matrices points T points and original points so I can also convert it to an array and this one I went back to the original points and converted it to an array NP np. array and then take that and notice array has the same function r. item and there we go that's 21 so back to the original so it's row two row zero one two and then element one so that should be a nine then still keeping in mind that these could be XY points some of the things we can do we can pull out different elements for this I'm going to start a blank array for x a blank array for y and I'm going to append one item to that so x. append and then I'm going to pick an item all right so I picked 0 0 so as we see that's a one and then y. a pen 01 here we go so we have um one2 so therefore I just made this X and Y are just that 1.12 and we'll print that out so so we see Point item 01 that's a two because there we go and here's that array here's how it would display as an array Row one row two Row three or as a matrix and transpose so we see what this does transposed makes column one row one so the 133 there we go and 269 there we go row column two becomes row two that's the transposed and transposed back and you see we still get it back to column one row one so um sometimes the reason to do to transpose it could be to um do some multiplying that you'd rather multiply this way so there we go and again I picked one element there and then as an array you see I just made that array so that X array and that y array so it was one two which was the first point there so some different things that we can do with this all right so this is the part of the chus where we go into the imaginary world and we can even graph complex numbers so we have our whole new axis that we can graph where instead of X that's the real axis and instead of y That's the imaginary axis and the way we would graph complex numbers so let's let's get a complex number so if I have like 3 + 4 I so remember it's complex because I have a real part and an imaginary part and then I would graph this as the real part would be my x value and the imaginary part would be my y value so essentially this would correspond to like a point of like 34 not draw on the scale but I wouldn't that's how I would write it in the cartisian plane 34 but because we're in this axis I would still write it as this it would be 3 + 4 I so I would still write it like that but we would know that that's where we get the real part the imaginary part plot the point pretty cool so other than going into the imaginary world you know what are some of the uses of this well a lot of fractals work on on this and the equations that generate fractals do involve in some capacity you know the square root of negative 1 which gets us I and then iterations of going through these and therefore plotting the points here and how do we get those particular points only by dealing with imaginary numbers and those types of equations so so that's why it it becomes a useful axis another thing that's going to connect with something that we're going to build up to here is if I have um cosine of X+ I sin of X so if I have this then that's something on my unit circle um well remember X is the cosine Y is the sign so if I have cosine of x or I of X and again I'm going to say x is a variable because these are not X and Y it's real and imaginary so my real part would be the cosine my horizontal axis and my imaginary part would be the sign and so I could plot points on an imaginary Circle so we're taken you know from Plato saying that the perfect circle doesn't exist to now we're going to get into imaginary circles but that's okay uh that's where we get to some interesting patterns so we're going to continue on this but let's take a look at how to do this in the code how to get complex numbers work with complex numbers get the real part or the imaginary part and do some other things with that and then we'll build upon that and get some fractal so let's take a look at how to work with the complex numbers in the code all right so here's the code for complex and imaginary numbers so we're going to import math but we're also going to import C math to deal with complex numbers all right and that's going to work behind the scenes we're not going to see cmath do anything um but we will use math dot a few things but we'll get to that so if I want a complex number I'm just going to call this function complex and it's going to take two arguments two three so the real part is going to be two the comp the imaginary part is going to be three and to see how this plays out I'm going to just print this out what that complex number looks like and I'm also going to show you see if I have this as a variable in this case Z1 I can do Z1 do real and then I can do Z1 do imaginary so we can split those up because some sometimes that might be useful all right so we'll print that out but then I'm also going to show you another complex number and here's another one where my real part is zero but the imaginary part is math. pi so this is I Pi is really Pi I I pi and then I'm going to create this as another variable though we don't have to but I'm going to do this so math. e to the exponent in this case Z3 so that's going to be to the exponent I Pi so it's e to the I Pi pretty cool um we're going to get even more into this but this these two lines here we just made e to the IP all right so you can if you have a complex number you can even subtract so that's why I created a second one because I can subtract complex numbers I can take one of the complex numbers and I can take it to an exponent in this case I'll just Square it all right and here um yes even though I have Z4 as e to the I Pi I'm going to show you that I can even just do that math right in the in the print statement and print that out and then here um when we see what that looks like you'll see why I have it building I'm just going to round this so I'm going to round the real part plus and then I'm going to round the imaginary part and here I'm just going to concatenate all this so it's going to be this um it's going to display the plus sign and it's going to display I so it's going to look like a complex number so let's take a look here so here's my print statement for this Z1 so it it will print this out as 2 + 3j it's really interesting that the python code um it will use the letter J with nothing in between you know it's not multiplied by anything instead of I but that represents I the imaginary number so there's your complex number in in Python code and then we can split it up you see the real part is two the imaginary part is three and here I have um this next print statement because we subtracted um that and my other imaginary number so the real one 2 1 is 1 and the imaginary one 3 2 is 1 so we can do the subtraction here we took it to an exponent and there's the answer and then we have e to the I Pi This Is The Answer um but notice it seems like a long decimal but the key feature of this decimal this ironically is not the letter is not e like Oilers number it's exponent to the 16 J so um what that is this number here 1 * 10 16th is essentially zero it's so close to zero so when I have this build when I'm rounding it here it absolutely will round to the zero because that that's what we have so this is the notation um you might remember this from something else scientific notation so that's exponent 16 so yeah 10 to the 16th is really close to zero so what do we get we get here that e to the I Pi is essentially ne1 there we go um that might not be so amazing now but it's just one way to look at that and we'll look at some other even more interesting uh patterns within that that uh beautiful equation so you know some key features how to work with complex numbers let's graph them so I'm still just going to import numpy and M plot Library um I'm going to set my you know just like I would with normal graphing and I'm going to set my Xmen y Min Etc just like normal graphing um notice we're really zoomed in um 2 to2 really zoomed in on the graph I do want to add a label um I put this in here but I decided not to put a title um but I just I'll add a label so that we see it is the X label but that's our real axis now and the ylabel is the imaginary axis so so here's a complex number and if the complex number one and then 75 so then essentially that's 1 + 75 I is the complex number and we would graph this that the real part ENT essentially becomes our x value and then the complex part or the imaginary part becomes our y value so that's how we would graph a complex number the real part is the x value the imaginary part is the yvalue so it looks like one number but we take it as like an x y coordinate so this could just be um you know one you know 75 as an XY coordinate so I'm to skip over this for now um because I'm not going to yet so this is X2 and Y2 but I'm not graphing them yet so we're going to ignore this and we're just going to jump right down here to uh plot it so I have my X1 and my y1 and I'm going to plot those here we go and when I run this now I also did not put an axis anywhere but it just naturally will zoom in on where um where it wants to be so there we go so on the real axis there we go the x value is one and on the imaginary 75 we see the labels we see where it is um 0 0 would be you know off this graph but then you know it just zoomed in on that okay that's nice but we can see that we can plot a point all right so now we'll revisit this I actually also can create uh np. linspace so remember that is an array of values um so I want it to go from 0 to 7 and then I want there to be 70 points in between so every 1110th is a you know is a new array element so there's going to be 70 of them here from 0 to 7 and the reason why I did this is because we're going to be thinking about angles and angles in radians you know going around the whole circle is 6.28 so I just rounded it up to seven as the next integer And1 that's Pro that's enough of a jump you know that we'll see this see this graph so there's my array I'll just call it a and then points is going to be another array and notice I have uh so np. cosine so I have the cosine of a plus the S of a Time j i * 1 J so what we have here is I just created a complex number here um called points and the notice I use this without even creating complex but this is actually going to work very nicely um points. real so I'm going to get the real part of it is going to be X2 and the points. imaginary is going to be Y2 so if I change this instead of graphing one point it's going to graph all of these points points which would go around in a circle and I could have more points in there um you see instead of 70 maybe I'll make this 140 there we go and we graph all these points around in the circle and this is mathematically even you see on the Y AIS or the imaginary goes from 1 to one same with on the X or the real axis netive 11 but it displays it just um more rectangular we can uh also Square it up if we wanted to but I just wanted to show you this that that's what we're graphing here and in this real and imaginary axis we can have you know the cosine as a real part and the sign is an imaginary part because cosine is your x value s is our yvalue and in this real and imaginary axis we can graph a circle so these are two interesting things that in working with the actual equations we got that e to the I Pi so the you know the complex part is e to the I Pi ends up being ne1 and we also get that we can graph cosine Plus s i as a complex number and that would be a circle and we're going to build upon that to really appreciate the the levels of depth for this uh beautiful formula but these are some things that we can do with uh real and complex numbers y calculating them graphing them and we'll see what other interesting patterns these lead to the mandal BR set this equation seems to be very simple it's zal z^2 + C and really then what you would do is you would Define Z equals and C equals at the beginning and quite often Z starts out at zero that's pretty common and we'll talk about the C value here so so what makes this so cool well we're going to get into the visuals of this when we look at the code but it becomes this really great pattern especially when you graph it on the real and imaginary axis we're not talking about x x and y axis here kind of doesn't accomplish the goal so what we're going to do is Define c and it doesn't have to be an imaginary number but if you have something like you know C equals like you know I like 0.5 I or something like that so you would plug those in um 0^ 2+ so it would be 0^ 2ar + 0.5 I and of course that zero is out so then Z the next round then that's the Z value that's a zero so it becomes 0.5 I i^ 2 + 0.5 I and then we would get that answer and then plug that into Z now this one works out nicely I squar then um becomes 1 and then I have I in that part so we see it's a complex number that we can graph on the real and complex axis well anything that continues to get larger and larger that's not a part of the mandal BR set but there's these few values that tend to get not much larger and they Define you know they Define this central part and the edges of the mandal BR set you know they're saying that we'll say that those are a part of the mandal BR set and then some things on the edge that are not really a part of the mandal BR because at some point they'll get larger and larger the way we would usually do it is coat it to have you know how many iterations does it take to get Beyond this threshold and then I might color it so you know in the mandle BR set might be a really dark color like black and then I'll get to like blue if it's all a few iterations gets it beyond the mandle BR if uh it's a few more then I might go to you know green and then you know out through the Spectrum and then a lot of times you'll see these and then something like red on the edges where you know that right away wasn't even in the mandal BR set so yeah just really interesting um just a very simple equation and then just each iteration you know we just change the zv value plot the point and then count how many iterations it takes to get Beyond a certain threshold and really then what happens is these really cool patterns and the first view is pretty cool and then we could zoom in on different parts to get other views so that's what we're going to take a look at and in addition to looking at the code uh so it's mandelbrot because the guy's name benois Mandel BR um he did a really good Ted Talk where he just talks about fractals and everything um yeah just a really interesting guy so if you come across that Ted Talk uh with Mandel BR uh it's worth watching but let's take a look at the code and we're going to see some these and some other examples some other iterations and see how this leads up to um what the Mand BR uh picture looks like let's take a look at the code here's the code for amandel br set and yes I will admit that I actually Ed chat GPT to create this code um so doing this in I don't know five seconds saved me potentially a day because understanding the idea that we can take these points and then plug them back into this formula and then plot and then Co color code the different parts for how many iterations it takes to get to that point yes we can wrap our heads around it but writing the code to get that to work and to really generate the U good graph you know what um some things that uh AI does pretty well so we're going to still only need to import umpai in that plot Library um I'm going to Define this mandal BR um function and see here's what it is we're going to go through um taking what C value we want we're already going to Define that Z starts at zero and we're going to Loop through you know however many it ations we're going to Loop through and then this is what we do Z * Z plus C and then we're just going to keep overwriting that that's what we want to do um it would seem that the formula straightforward to but again to make it work um you know correctly you see any time Z gets to be greater than two so then we're going to return um I and then we're going to turn Max of iterations so that's kind of what we want from this is how many iterations it took to get to this point and then here's the plot um where we're going to take the inputs X min max y Min y Max the width and height of the graph Max iterations and here we're going to create np. linspace two different arrays for you know one for the X one for the Y Y and then we're going to create a mesh grid this was again um some nice Insight that the GPT gave that working with the mesh grid this works out nicely so we Define this XY mesh grid and then I'm going to say notice these are capital letters here z = x + 1 J * Y and here we go we're going to create this image and we're going to Loop through this calling this function so it's going to Loop through the height and width and take you know this Z function to generate variable C and there we go then we're going to call that uh the mandal BR um function and then see Max iterations so now we get to show this image um there we go the extent and some labels here so one of the things that we can do um these original numbers are the ones that uh GPT returned but I'm going to run this first and then show some other numbers that will zoom in but anyway so we have these um minimum maximum width and height and there you go Max iterations 100 that works and now we're going to call the plot function so after that then we call this plot function here so you could have this code you can change these values call that plot function which will then also call the mandal BR function and here we go um if you run it we get the mandal BR set and that one function saying that it was hot that that defines the colors a little bit and we see all these different patterns here for how many iterations it takes um to get to one part here and one of the things then we can do is change this probably could put these on sliders but that might be um that might be a little bit of a a little bit um take a while to process all right and so I'm just going to switch these around so that we have um there we go so we'll just switch that around and then um 1.5 here okay and oh and make this 1.5 comment there all right so in looking at this um I was looking at U one of you know one of these and zooming in to this you see this gives you the mandal brth that you might be familiar with this look well actually either either of them depending on what zoom level you often see but we see this mandal BR set here and so notice the zoomed out version with these different values here we get that zoomed out version this is nice and then the other one we can take a look and see like the zoomed in on all these edges that of course are blurry here but if we were to zoom in on them then we get to that that value that we had before pretty cool and again another usefulness of uh imaginary numbers a lot of the usefulness is the artistic or visual representation because it actually ends up being the math of imaginary numbers behind the scenes um other sorts of fractals um again things that might seem random um just because you don't you don't fully see all the the little calculations going on in the background but these are some of the uses of imaginary numbers and uh benoa mandr um you know he he was pretty good with these interesting character all right so again just some use of imaginary numbers um a little example of some AI code that you can generate to plot this and you know some things you can Tinker with go in there and change some of the values and see what you get so let's talk about sequences in series so a sequence is any uh collection of numbers kind of like an array but there's a definite order to them a sequence if you will and a series is when we have that but we add them up so so let's talk about the sequences first and then we'll see what we're going to do to add them up so few different types the first one we're going to look at is arithmetic and just like the word arithmetic arithmetic is when I add or subtract something to get the next number and one thing that uh binds these sequences I have an equation that I can use to generate the next number so here's my equation I I'll call it you know I'll call my sequence a and you know for arithmetic and the subscript n so a subn is you know the nth number in sequence and a sub one is the first number so a lot of times in Array we we you know we talk think about counting you know zero is the first term but for these and for this particular math one is the n is one is the first number so a sub one is the first number and then I see the common difference here so I start with the first and then Plus D times and we see the common difference um times n minus one because I already have my first number so when n is two then I have a common difference but when n is one I have my first number there so let's look at an example of this um supposing I have just odd numbers so I would have a subn = 1 + 2 2 * n 1 whereas I've already counted for my first number but then I'm adding two each time and so then if I generate that one comma then notice n is one so 1 1 is zero that's why then that drops out then when n is two for the second number then I have 2 1 is 1 * 2 is 2 + 1 is 3 and and is three for the third number so then 2 1 uh 3 1 is 2 * 2 is 4 + 1 is 5 and we know this pattern so we can see that you know the next one is seven which is the fourth number 4 1 is 3 * 2 is 6 + 1 is 7 Etc so we can look at this and we can um generate every number in the sequence here so as as I'm saying it's similar to slope intercept y mx plus b but the difference is the sequence is discret meaning that I only want uh n to be integers it's not continuous where n can like on the graph can be any decimal in between I have one I have two I don't have any the numbers in between one and two so I can generate this sequence here now what I can do then if that's the sequence my series is I'm just adding them and that's that's the difference between a sequence and a series if I just add them up and what we find is for various sequences or SE or series there's some cool patterns to adding them up so certainly for this one I can add them and you know I could um we'll look at the code in in a little bit and how we can uh run through a loop and just add them you know if if I have code at my disposal that's probably what I'm going to do because setting up a simple Loop is pretty easy but then I could there there's a couple other ways I can do it let's talk about the notation of this first so if I have the sum then I'm going to say that the sum in my specific case here is going to be capital Sigma for sum and then I'm going to have the sum of this as n goes from one to and I can pick something I you know I can pick um you know four let's say let's say we ended it here so there we go so this is the math notation of essentially a loop I'm going to you know what's the sum of this as n goes from 1 to four so I plug in again n is one then n is two then n is three then n is four generate my numbers and then add them up there we go so we we know we see you know we can make this but supposing I had the numbers one to 100 so then I would have all these I'm going to stop this plus um and then if n is 100 minus one is 9 9 * 2 is 198 so then plus one is 199 that would be my last term so how could I do this well certainly again if I have code I'm just I might just like create a loop and that's kind of how we're looking in this course like the difference if I have you know code at my disposal or am I crunching the numbers on paper but uh friedrick gal figured out this interesting pattern here that so what's 1 + 199 is 200 is 200 but then my previous number before that is going to be 197 because you know all the odd numbers so 197 + 3 also 200 and if we keep working backwards in there the one before that would be 195 + 5 is 200 and so in summing this up we have this interesting pattern here that anytime I'm summing up an arithmetic series it's always going to be the first plus the last and then remember I'm pairing them up so it's that times n over two so that's the sum of any arithmetic series and what's cool is as we get into these Series so we get the idea we can you know generate a sequence we can find any number in that sequence we can sum up that sequence which would be a series I can sum it up and then for a lot of things um we can find formulas to sum this up and having you know your brain paper code all at your disposal different situations you you see which one ends up being the you know the better you know which one's a better solution uh geometric is the other one and geometric series is well sequence or series is when we're multiplying something each time to get the next number and here's our formula I'll call it g g so G subn for any number G sub one is the first term and then R for the common ratio since we're multiplying so it's R to the exponent n minus one so that's how we would generate each term and let's you know come up with one you know let's say we have G subn equal let's say 3 + 2 to the nus1 just you know a simple example here so my first term would be three and then times two because you know when n is one then that drops out so 3 * 2 is 6 and then when n is three for the third term 3 1 is 2 * 2 is 4 um and 3 * 4 is 12 even if I and if I was counting in individually time 2 * 2 and then I'll do times two again since I know that's the pattern 24 and then we can continue so there we go so we have our geometric series and if I was going to that's a sequence if I just have this so then I can just switch this out to you know be a series if I wanted to and if I wanted to write the formula you know saying that I'm summing this up so then it would be again Greek letter Sigma as n goes from one in this case we'll just say 1 to four here we go so there's our geometric series and and you know we see the similarities there is also if I was going to sum this up if I'm writing code I'm probably going to write a loop but I would uh you know there is also a formula for this I feel like it's not as intuitive as the arithmetic but the sum in this case is going to be if we call a the first term a * R to the nus1 over r minus one kind of an interesting uh sum here though it works and that becomes the sum if I just wanted to uh generate it this way and sometimes that connects with some things as we'll see with um s and cosine when we have an interesting formula for generating a sequence um sometimes that's useful in other places so we we kind of want to have all these different tools available to us whether we use a loop or use a formula or you know just use our brain and do do the math that way we want to have these different things at our disposal so let's look at one more uh one one more sequence here so another type of sequence or series is recursive and with these we really can't generate um an equation like we did before because recursive means it depends on what came right before and one of them is the Fibonacci sequence so you know we're all familiar with this you know 1 1 2 3 5 Etc because how do we get this it's you know understood zero begin so then I have a one and then this one is 1+ 0 and then this two is 1 + 1 this three is 2 + 1 we're always adding the two previous numbers so as a formula it really is a subn equal a sub nus1 plus a subn minus 2 and you see that's recursive I need to know the two previous numbers to get that current number and it builds upon that so I can't just jump up what's the 50th term so this is what one of our other types of of sequences um getting into the code probably uh more likely something we would do with a loop because I can easily build that up quickly you know uh processors are quick so you know this is recursive and that Fibonacci Sequence you know why why does it show up everywhere this recursive sequence it's because the cumulative effects of things growing in nature adding and then the next thing is you know adding on to the previous two so um you know shells or things and like for example if I had you know the area of this Square it's one by one so the dimensions of this square is one by one so then if I put another Square so then this next one is 2x two and you see then this next one is 3x3 because it adds that one from before and then that two and then so now that was three and so then this next one is 5 by five and then this next one would be you know five 6 7 8 because that's the eight so then this one would be 8 by 8 and you know just with squares we can see how it builds that each of these are squares building upon um you know each side is the measure of the two previous sides pretty cool and then the Fibonacci spiral once we build this then we can just take a curved line you know imagine this you know 1/4 of a circle so if this was the center a curved line from that corner to that corner and then a curved line from that corner to that corner and then in each Square you know I'm taking a curved line from corner to corner and then a curved line from corner to corner and a curved line from corner to corner and a curve line from corner to corner hopefully my drawing isn't too bad but that's where we get the the spiral and that's where we get the recursive and that's sequence and series and that's where we get the you know this cumulative growth in nature and then we get this spiral so our goal is to build upon things and your knowledge of math and algorithms becomes cumulative growth so let's take a look at how we can do some of this stuff in code here's how to generate sequences and series with code and as we were saying we'll Loop through it um we'll start with an arithmetic sequence I just put as a comment that you know you could Define your sequence just so it's there for your own notes as a comment and here I I split it up um sequence what are we going to do we're going to create a an empty array or list and then as we Loop through um I just decided to make it range you know 11 as we Ro Loop through I'm going to generate each element store it as this variable next and then append it to the array and notice I usually will have a starting point um and then it's always always times n minus one mathematically because the first element is element number one but since in Python our our ranges begin with zero unless I tell it otherwise so I don't have to put that n minus one because it's already going to start with zero there we go and then we'll print that out I'm also going to do the series here we'll print this all out together so with the series I have a sum variable start at zero and then as we go through our range um also generate each next element and then I'm going to add it to my sum variable so then we can print that out so you know just a simple sequence here and what do we have we're going to generate starting with three and then we're going to do the odd odd numbers because it's two every time so there we go and then the sum you know for this particular instance here and we'll do this with a geometric series too notice how similar you know start out with your empty array you know comment up here if you want and then you know generate the next element a pendant to the empty array and at the end we'll print it out same with the series start out with a sum variable Loop through generate the next one add it to the existing s um there we go and we see so we can see the answer and the sum now I'll do one more and this time notice you were probably thinking hey I should put them both in the same Loop so I did that on this one so Su variable starting at zero empty array for the series and now for this one I just picked a range of 50 um and I'm I'm going to do a harmonic series 1 over two to an exponent so you see 1 over 2 to the A and I still kept this as a equals 0 um as the beginning so my first element we'll we'll have that and um that will end up being the element will be one and we'll see that here so then my next element appended to this series array add that to the existing sum and we're going to print out the series we're going to print out the sum and there we go so remember this is going to be one one 1/2 1/4 but this will put them out as decimals and the sum we see you know we remember mathematically then looping this you know the sum of this as the number of elements approaches Infinity it this sum approaches two because it converges these converge and um you know so I can have even more and it's just really going to approach two so you know that's the sum as and approaches Infinity but I only went up to 50 and we can still already see how close that gets to two so I could Loop this instead of 50 I can make it 100 I can make it a million and we're still going to be you know just about it two um you know just more nines there we go so we see the sum of the harmonic series you know as our other example now we also might have mentioned Fibonacci and the recursive sequences so I just want to point this out there's this online encyclopedia of integer sequences how cool is that so what you can do is you can type in you can type in the name of the sequence if you happen to know it and you can uh or or you can type in the first few if you type in the first few uh one of their tips for searching is you don't put the first number in sometimes people disagree over where the sequ particular sequence starts so the first one or two elements you don't have to put in and then you put in at least six more than that you probably don't need to so you know Skip the first number or two put in about six elements and search it up so that's what they you know they put out an example there I'm going to hit enter and you see it gives you this um that particular sequence is the number of trees with n unlabeled nodes kind of cool as well as some comments some references history and other links so you you can do this you can just type in so you know for Fibonacci I'm going to skip the first one I'm just going to put one two uh 3 five 8 and that's probably enough hit enter and look at that it tells me that it's the Fibonacci numbers illustrates this and you know all the other notes including um some other references and mentions of other people that came up with a similar sequence before Fibonacci so really cool stuff and and here we go just to expand you know beyond any of the sequences you might know and remember these are sequences but to make them a series all you have to do is just add them so once you have an equation to generate that you know you can add them up all right there we go and now we're going to go on to look at using sequences and series to generate other numbers um especially series uh to generate numbers like Oilers number e um even s and cosine there's it's amazing in how many different uh numbers you can get from like you know there's a sequence or series definition to that number so we're going to take a look at that so that's what's next let's take a look at e Oiler number and how we get this by definition there's actually a couple ways to get this but this is possibly the goto so e um equals the sum so let's look at this notation here this capital Sigma Greek letter Sigma is for summation so this is the math notation for doing a loop and adding every time so I'm going to say n equals zero at the beginning and then so n goes from zero to Infinity so that's how I Define my Loop here so I'm going to say n goes from zero to infinity and then every iteration I'm going to add this all up and so it's the sum of this 1/ n factorial and remember factorial is that number times every number less than that so let's work this out here so then 1 over Z factorial and so this is what we're doing we're summing this up plus 1 over 1 factorial + 1 over 2 factorial + 1 over 3 factorial and and it goes on forever till Infinity so this is how we get e but let's let's look at these values here zero factorial it seems weird that you have zero in the denominator and yet I'm also saying multiply that times everything wouldn't that zero out but by definition zero factorial is one because factorial comes into play really in situations where I'm calculating probability of things and so if I have no if I have no things how many ways can I arrange that I only have one way which is to do nothing so it's kind of weird you know um sometimes math explains um some other uh logic or written um things and in this case we need some verbal explanation to explain the math but that's that's why zero factorial by definition is one because if I have no things I only have one op option which is I can't arrange them so one factorial is one two remember so 2 * 1 which is just two 3 is then 3 * 2 * 1 and then it would go on four four factorial is 4 * 3 * 2 * one but even looking at this we're going to get this one over one so that's one that's one again that's 12 3 factorial so then that's one 16 and that would be four factorial would be 4 * 3 is 12 * 2 is 24 and again that would continue this this is almost enough for us to start seeing that e remember it's 2.71828 1828 well 25 6 and2 you know we're we're getting just that part we we're almost to 2.7 and then you see we keep adding smaller and smaller amounts but it gets up to that you know just over 2.7 and we'll see with the code that if we Loop through this um it might even take like you know 10 11 times that's you know that's enough to get us pretty a few decimal places you know correct to e as we know it um so that's pretty cool but that this is the factorial definition of e so then you know then that's what we get you know all this then will eventually equal 2.71828 1828 and after that the next number is of one but the pattern kind of breaks down a little bit so it doesn't exactly repeat those four digits so there we go summation of 1/ n factorial as n goes from 0 to Infinity cool let's take a look at how we can do this with the code here's how to generate Oilers number e but using the summation using the the series so the series remember it's the sum of one over um n factorial so I'm just going to give this range here up to 50 even though the official definition is up to Infinity 50 will Almost Do it for us um but then I'll show you so I'm going to just generate the sum and then we're going to keep adding to it each time we go through the loop we're going to add to one over math. factorial of a and then after we go through that Loop I'm going to print that out and then also print out just the general math. and we see how close we are so look at this even up to 50 we're close down to this many decimal places and it even rounds so that's why that's why I I stopped at 50 and you see we can generate e with this sum uh that this really is you know one of the ways you know we get e and now then we're going to connect this with s and cosine to build up to a a big reveal here so let's look at the series definitions of e to the X so another way way to to get e so it's always uh x uh x e to the X so this is not just e it's e to an exponent so this would be x to the 0 over 0 factorial which works out to One X to the 1st over 1 factorial plus x to the 2 over 2 factorial plus X the 3r over 3 factorial and that keeps going so each time you know the numerator X to an exponent then that exponent factorial so so as you can see even though the numerator is getting bigger the denominator factorial is also getting bigger and we're adding this tiny tiny amount uh we're we're adding a different amount each time and so uh that's how we generate e to the X you know how what's X and then you know however many exponents so we're going to connect this with s and cosine because first of all you might notice how similar they are um cosine as the even exponent so it starts out and I wrote it this way z x 0 over 0 factorial but then we alternate minus X the 2 over 2 factorial plus x 4 over 4 factorial minus again and then that continues that pattern and S similar to cosine but we have the odd exponents so we don't have x 0 that's even X 1st over 1 factorial x 3r 3 factorial plus X 5th 5 factorial and we go on like this so these are interesting in of themselves and we have ways that we can you know use summation notation there's you know a formula for this but I wanted to write it out this way so you can see this and we're going to look at how this connects to e to the X because I want to look at what if we have e to the IX x 0 0 so that would still be 1 IX over 1 factorial which is you know 1 I'm actually going to keep that denominator because that'll be important and then the next one X2 but then if it's IX then X2 so that becomes so we still have the we still have the X2 but the i^ S becomes ne1 which changes that sign and then we go to x to the 3 so we have we still have x to the 3 but then I to the 3 is NE I the 3 is I and still the same denominator and then we have the next one to the four fourth in just doing this a few times I want you to notice then that the I over one factorial um and then so that is a lot like sign but I but I'm multiplying by I this time and then minus x^2 that's a lot like cosine here this next termus i x 3 3 a lot like sign but I'm multiplying by I this one a lot like cosine the next one's going to be a lot like sign but multiplying by I so it ends up it's threaded together because instead of even out even out I have all of them but each one of them lines up with sign but multiplied by I so what we really get is e to the iix equals uh the cosine of x plus I * the S of X and that's the formula um that Robert coats you know many years ago uh demonstrated that when we look at the series version series definitions of these it's really cool how it lines up when we have e to the IX and if it's e to the iix doing that substitution it works out that the cosine ends up being the same and then the sign it's just like the sign but terms but multiplied by I each time so we can just do that out here and that's what we get e to the ixal cosine of x plus I * sin of x and there's some other cool patterns we can do but I wanted to talk about this as it leads up to our you know e to the I pi equals ne1 explanation all right so let's take a look at in the code doing things like this with values and you know showing that you know this does get to cosine this does get to S and how they how they connect so let's take a look at the code so here's how to generate s and cosine using a series and another interesting thing we can do with the series and also combined with e we're going to lead up to u a big reveal here so we looked at the formulas um how cosine we'll do that one first um uh I how we generate cosine with it's all the even numbers and zero is even um the numerator is X to that X exponent and then the denominator is that number factorial so what we're going to do uh have my sum uh variable zero I'm going to use x as the angle remember in radians and for our demonstration here that really does need to be an integer because we're going to end up using that in factorial okay and I created this other variable PN positive negative and I'm going to start it out at negative one so here if I have this range 50 um and uh that that might be enough we might even increase it to 100 this officially would go be be the sum up to Infinity but 50 to 100 sometimes you you'll see how many decimal places it goes to and that will be enough to illustrate this so remember this pattern goes for the even exponent so I'm going to start out with this if if our a um uh is even so a modulus 2 if that's zero and then each time I'm going to multiply by negative 1 because again that's the pattern become you know one's positive one's negative and then I'm going to keep adding to the sum here so the sum plus positive or negative times x to that exponent and then the denominator is math factorial so there we go so it goes through all the even ones there's another way to do this with count counting through each one and just multiplying some of these by two that you know that works also I decided to do it this way and we're going to print out cosine and we're also going to print out just the normal math. cosine so we can see the comparison and we'll do the same thing for sign I'll do this all before I run it so very similar formulas so I'm going to sum that up start out with that variable and then again my angle X is one there we go um I can make these different X values because it's going to overwrite it each time so that's fine um I can make it two just to compare and see we have that same range now here I want the range to start at one because if I don't have a number there it's going to start at zero but for sign remember it goes through all the odd numbers so I want it to start at one and then modulus if statement if it's not equal to zero that's what then I want to continue same thing same pattern it alternates positive negative and then here's what once we have that established this part of the formula is actually very similar well it this and um new line and I'm going to print out the sign again that sign and then um just calculating it and we'll see how close we are so look at the cosine using that we pretty close um down to that many decimal places I I you know if if it was you know anywhere from further away maybe these last two numbers changed I would I would increase and loop through it more and you would see it you know it would match up but yeah it really officially goes to Infinity but looping through 50 times is actually enough so we see that that that that works that we actually can generate s and cosine based on summation of a series all right so pretty cool and then we're going to look at combining that with E and some of the other cool patterns that follow so we're going to look at e to the I pial 1 and why this is such a beautiful equation so it connects with the real and imaginary axis if we are graphing notice I have I which is the imaginary number Square < TK of1 we can graph these and remember the real axis is the horizontal so it's not X and Y that horizontal is real and the vertical is the imaginary axis so when I plot a point there if I I would really have it as whatever real part that corresponds to the horizontal so I count over from the origin and then I times something the imaginary part you know then that would be you know the vertical point so if I have you know cosine of x plus I S of X and remember you know it's this complex number so it's real plus the imaginary part but we would graph that as you know if it were on the xycoordinate plane cosine X comma sin of X or you know that'd be cosine of theta or something like that so we see that you know writing it like this corresponds to plotting this point cosine s the real part the imaginary part what's cool is that this guy um Robert coats in like 174 he figured this out that e to thex equals this cosine of x plus I sin of X now when we get into the code we're going to look at all different ways that we can now demonstrate that that's true I'll show you like loops and see all these different values that for any value of x this works you know they come out the exact same complex number to many decimal places but it's kind of cool he worked this out you know that many years ago that e to the iix equals this so what that means is that I can plot this point and I can actually just write e to the iix as the coordinate of that point and it kind of just boggles the mind because because of the way we write the notation here as you know this complex number and then that's how I plot the point the real part the complex part plot the point which is really cool so Pythagorean theorem then also applies here because the you know in this case the horizontal is still cosine the vertical is still s so sin square plus cosine squared is one and then I get the radius one just like our unit circle so when we look at this I'm going to throw one more thing here in then since we've established that the radius is one if I think of polar coordinates so polar coordinates so we go from XY to real and imaginary polar they're not rectangular the coordinates there are R Theta so Theta remember is the angle so R is the radius from the origin so how far out am I going from the radius and then what's the angle um a lot of you know air traffic controllers or satellite uh dishes that like they'll use polar coordinates because that's what I want how far out am I and then what's the angle well then in this case if the radius is one and then the angle is Theta or I'll continue calling it X so therefore 1X and that is you know e to the I Pi or e to the IX just kind of cool how that works out everywhere so that's kind of why people talk about this being this beautiful equation e e the now let's talk about this exact value so if I have this equation here I'm just going to get this out of the way but it's just one more connection here and then if I talk about I Pi so this works for all those different values but some of them you know are more elegant Solutions than others but if this is pi so if I have e to the I pi Pi so then that's the cosine of pi plus I * the S of Pi and remember Pi radians you're going around so the coordinate here the cosine of pi is 1 and then the S of Pi is zero so e to the I pi that's where we get e to the I pi equals so we build upon this established uh equation here and then for this value when I plug in that the angle is pi radians e to the I pi equals 1 you know plus zero if you want to be official it's just really a cool thing because to fully appreciate the beauty of that besides the fact that it brings together all these you know e i pi1 all but the explanation of it brings in s and cosine and complex numbers and graphing on the imaginary axis and you know verifying it with Pythagorean identity and connection with polar coordinates it's just really amazing that as you've been going through math up to this point you can kind of bring it all together you needed to know all the things you've learned up to this point to fully appreciate oh it all comes together in this equation but that's just what why it's cool graphing on the you know this equation and then graphing on the imaginary axis and plugging in that particular value get you e to the I pi equals ne1 so when we look at the code what I'm going to go through is also look at other ways that we can verify this with code and you know some other uh sequences so let's take a look at that so now we're going to show this with imaginary with with code that we're going to import math and our code cmath for the complex and what we're going to do I have two variables here I probably could have done it with one but a and then X so I use that one just for complex so if a is one so then I have you know my real part is zero and it's one I so that makes this value comp is I so that's I I feel like that's kind of the best way to do it and now I have that's I um this is I Pi which I'm going to deal with later but notice my complex you know the real part is zero and the complex part would be math. Pi so the answer to that would be I Pi stored as this variable so anyway so this is how we could show a complex number so I'm just going to print out the complex number show you and then e to the iix so notice yes I can do math. but I'm going to do C.E because we want our answer to be complex all right so C.E to the exponent comp so this is to the exponent I so this is going to be e to the I all right and then these I have have math. cosine of x and my complex number I so I have I times cth times the S of X and I split this up just to if you copy this code you can Tinker with this and change some things so what we were showing on the Whiteboard was that e to the iix does equal cosine of x plus I sin of X that's the idea so I'm going to print out and show you there's e to the iix and I'm going to show you that cosine of x plus I sin of X is actually the same value and along the way we're learning how to work with and use imaginary number so there's my complex number python tends to Output yes we know it's I but python uses J for illustrating that this is a complex this is an imaginary number so there's my complex number so that one J is the python way of saying that's I the imaginary number so e to the iix we see does give us this complex number here like that's it if I have e to the IX that's what I get and notice cosine of x plus I sin of X is exactly that same complex number pretty cool so that's what we want show we can see it in the factoring way we can see it with sequences and with series and we can see it with code that we get e to the iix this does work and showing that Robert coach was right in 1714 we're also going to Loop through this with all different values but it shows that e to the iix equals cosine of x plus I sin of X really cool that that way in the imaginary graphing the real axis and the imaginary axis that this e to the iix ends up whatever X is it ends up being this imaginary this complex number that works out to this and so that's what we're going to do here we're just going to Loop through this and again just a way to represent I so I just didn't use another variable I just said okay yeah 01 that's my complex number and in my range I called it 63 cuz you know my first thing is my angle is going to be times that so it's going to go up to 6.28 you know one complete cycle in radians around the circle and I have in mind the left and right of an equal sign so the right side is going to be um cosine of a plus I sin of a and then the left side is going to be e to that uhome is my complex number but it's really I time a so whatever that angle is then I have e to the I a equals cosine of a plus I sin of a and that's what we're going to do and you know just in case I I threw this in if in an if statement just just in case you don't want to look at all these only if these are equal what print out on two lines because we'll see these are a lot of decimal places it's going to round you know that uh the uh um the angle round it to one decimal place and then give you the E value and then the left side and then it's also on the next line again because it's going to be a lot of decimal places going to print out the exact value so when we run this this you know Scrolls down here there's I have each of these angles in radians you see the E value is 1 plus there you because when it's zero you know um we're on the real axis but no imaginary numbers which would be equivalent to the Y value and then the cosine sign would be one plus 0 there we go and we see for the next angle the E value is exactly this complex number but cosine s is exactly the same complex number down to all those decimal places and this is just a way of showing you know uh Robert coats worked this out uh you know on a chalkboard probably in uh but definitely or paper in 1774 but here just showing you that yes we calculating this through all these decimal places these are going to be the same that at every point then we get e to that exponent equals cosine plus I and if we go through all this so this leads us all up to the grand finale showing that e to the I pi equals 1 so all these see and and we can see how all this fits together really cool um all these answers um e to the I pi equals ne1 is nice and elegant if I said e to the you know um 6 radians um time I yeah I don't know um equals this number you know you might say okay yeah all right I believe you but it's not that elegant of a solution here we're going to show that you know all it works for all those but what I'm going to do is my variable I Pi is going to be this remember the complex of it's math. Pi that's going to be the the imaginary part so this is is I pi and then so I have I'm going to print out that exact value e to the I Pi um but then what I'm going to do is that's my complex number so I'm going to um you know this answer is e to the I Pi but I want the real part so I want so notice I have my complex variable C answer and then I want the real part so it's C answer. real and then I want the imaginary part now I know this real side you know is going to be one or negative one but the imaginary part it's going to be zero but it's not going to look like that it's going to be this long decimal that rounds to zero easily but it's going to look weird so I do want to round that imaginary part so I take that c. image and it'll round it so now I'm going to print c plus c IM match and so what we're going to have is yes for when it's the I Pi I'm going to print e to the I pi and then I'm going to print that real and imaginary part and we get e to the I pi and you see that's the full thing but notice it's exponent this is not e like what number this is the exponent 6 so really we're saying that you know a decimal point then about 15 zeros then a one is where this is so that's essentially zero so when we rounded it's zero and that's what we get e to the I Pi if I don't round it it looks like this but when I round it it looks like this and it really shows e to the I pi equals ne1 so pretty cool and that's what makes this so EXC exting that it's just so interesting that it all comes together yes we see all these patterns but to fully appreciate all these patterns all these series that you know you learn about the the graphing the trigonometry the real and complex axis and how all that is true at each step and we see that it matches up but then when it comes down to the variable where the angle is pi radians it all lines up perfectly and it comes down to this nice elegant solution e to the I pi equals negative one and so there we go so we go from you know how many hundreds of years ago uh some cool patterns that people were discussing to more modern technology you know reproving that and just adding a a deeper Dimension to this that yes it's kind of cool that here's one more way to show this so there we go and and that that's a big part of what math is at this level is appreciating the elegant Solutions so that's what we want to be able to do we're going talk about probability and this really leads into a lot of things that we're going to do with uh statistics data science because we we can't always predict the future we we go on probabilities and what's likely to happen and the general probability equation is the number of correct options out of the number of possible options so that that's it if um you know if I'm thinking of a number from 1 to 10 and somebody has to guess they have there's one correct number out of 10 probability of them guessing is one out of 10 if um if I want to roll roll dice uh rolling one Cube um then you know whatever number I want to roll if I'm only rolling one Cube then I would have you know one number out of the six possible sides you know what that's the probability that I roll the number that I want one out of six so you know anytime we're always counting up and that's where we get into some of our counting rules you know how can I count up the number of possible options and then of those what are the ones how many am I considering correct options so let's go back to the rolling dice one out of six probability if I roll one but supposing I want to roll two and so let's let's think about like a 12 there's only one way to get a 12 I have to roll six then I have to roll a six so I have to roll the first one as a six and I have to roll the second one as a six and anytime it's and it's only correct if this happens and that happens then I multiply the probabilities so you know I roll two dice the probability of me rolling a a six is one out of six and then on the second die it's one out of six so I multiply them so then it would one out of 36 so if I roll two dice and I want to roll 12 I have a one out of 36 chance of rolling a 12 the same would be true for rolling a two because one in one same idea only one way to get it so that's how we get you know and I multiply the probabilities um this is where we can think about the you know lottery winnings um if I have uh a lot of the lotteries we pick you know um one number out of 10 and then might go to another bin and pick another number out of 10 and then they might go to another bin and pick another number out of 10 and so I'm only correct I only win if I get all three numbers I got th you know out of 10 I picked this correct number out of 10 this correct one so then that would be one out of a thousand and so that's the that's the probability of win winning just like a simple pick three lottery one out of a thousand and we see that one out of a thousand you probably you know I mean who knows you could the way the way you pick it it's not a guarantee that if you played it a thousand times you're going to win so that's where a lot of people you know spend a lot of money hoping that that one out of th000 you know lightning strikes and we get lucky but we really don't we really don't know um so then if it's or then I can add the probabilities so supposing um I'm rolling Dice and let's say I'm rolling one one one die so um let's say what's the probability of me rolling a five or a six you know you're playing a game you know you need a five or a six to to win so you know probability of rolling a five is still that one out of six because that's one number on the on the whole Cube and probability of rolling a six is also one out of six but I'm correct if this one or that one works so I would add the probabilities so that gives me two out of six or we could reduce it but there we go anytime I have that's correct if this or that happens then I add the probabilities and so the general probab ility we're always counting up how many possible options and you know number correct out number possible and if both of them have to happen then I multiply the probabilities if either one then I can add the probabilities and we can build upon these to look at other ways to calculate probability as it gets more complex we really end up having um a lot of different counting rules for how I can figure out the possible options that's that's kind of thing how can I figure out the possible options and then of uh you know each of these you know um all the different way ways we can combine this so we'll take a look at this and we'll look at how we can do this with code and here's the formula so the notation um big p in the middle for permutation so that means that order does matter and I have n on one side r on the other side so it's n things Tak an r at a time and then here's the formula n factorial over nus R factorial so two different ways to write it and you know you can put once you have specific numbers you can put that in here around the p and the formula um it's going to end up being pretty easy to do with code um you could just Define these here and just put a you know n equals and then overwrite this code and write a variable a number in there but I wanted to set this up as you know prompting for input so you don't even actually have to change this code because it's going to prompt for input how many things in the overall pool and then how many taking how many at a time and there we go and then that's that's what n and R are so um I call this P um I often do n for numerator D for denominator but I'm already using n so I made this P for permutation there we go so factorial and then the denominator the factorial of n minus r and then do that Division and then cast it as an integer so here we go um and the answer how many possible permutations so we can run this and see so it it it's funny that even you know some of the things um in the overall pool like let's say if I have like 10 things in the overall pool and taken you know three at a time 720 possible permutations um there were you know that it seems like wow there's you know maybe you know an ice cream place that you know lets you mix up to three at a time so 10 flavors they can say wow we have 720 possible combin possible ice creams that we can give you and a lot of places do that they have you know only so many um you know a little more than 10 even and that number is going to be quickly up to a thousand and they'll say wow we have a thousand combinations you know um but that would be order does matter so um probably not good with ice cream because like yes you could it looks different the order of the Scoops but it'll end up getting mixed together so that's what leads us to combinations when order does not matter and this would be more appropriate to things like flavors because you know just the fact that they're there they'll end up getting mixed so the order doesn't matter you're going to mix them together anyway but any time or if I'm selecting people for a team or a group where we're not defining the roles yet so it's just are you in this group or not or that's the cases where order does not matter so we have combinations so big c um N Things taking r a time and then the formula here so notice combinations just the fact that you're in the group that's enough so therefore there's fewer possibilities because order doesn't matter so I have that extra R factorial the denominator is bigger the overall number then is smaller so we'll same thing we'll prompt for how many things in the overall pool and then um I have this um I just use the same variables P for probability um it doesn't matter because that's is just my in between variable here anyway um math. factorial and then factorial R times and minus r so divide that and then cast as an integer so there we go so if I have this so yeah let's say um you know 20 um let's say uh drink flavors you know all the different juice or whatever they put in the drink 20 uh different drink flavors taken three at a time 11,000 and you know there's uh you know at least one place I can think of that has that they have you know you get your your you're slushy and you know all the different flavors but they only have about 20 flavors and they will mix up to three at a time for you so then they advertise that they have more than a thousand different drinks available pretty cool so there we go permutations and combinations once you have the formula then it's easy to then plug in the numbers and you can calculate how many possibilities you have and that's that's what you want to see with this math think about the possibilities all right so Pascal triangle simple enough to generate and so many patterns that seem to flow from this so we look you know understood zeros out beyond the triangle so we're always adding that number the two numbers next to each other so one and an understood zero you know there we go we're adding the two numbers next to each other to get the next number which goes in the row between them so we have a one and a one and then we add that to make two two and a one and we add that to make three you see and then there we go one and a three to make four three and a three to make six here we go so that's how we get Pascal's triangle each time each row straightforward really cool pattern all right but that's not all there is to it what else shows up as a Pascal's triangle pattern well I could have binomial expansion um and I could have you know if I have like a + b to the zero anything to the zero is one that's the first row I could have a + b to the 1 and then that would be 1 a + 1 B but then when I get a + b to the 2 so then I get so 1 a 2 B to the 0 plus 2 a to the 1st B to the 1st + 1 a to the 0 b s so we see then we get this all this other pattern of these are the coefficients but then the first term here goes to the second power to the first power to the zero and the second term does the opposite to the zero to the first to the second and the same type of thing continues here that it becomes a + b to the 3 so then that would be a to the 3 B to the 0 plus and then this one would be a to the 2 B to the 1st and then this one would be a to the 1st B to the 2 and then this one would be a to the 0 B to the 3 pretty cool and notice yeah if you had this then you you know in writing it out times one you might not write the one anything to the zero is one so you might not write that but to fulfill the pattern that's what happens pretty cool other things that come up with with the Pascal's triangle is 11 to an exponent and again anything to the zero is one but 11 to the first power is 11 and I wrote all over this but 11 to the second power is 121 1 121 11 to the 3 power is 1331 and you know this one would be 11 to the 4th power is exactly this 14,641 pretty cool it actually still continues but then when I get down to the next one then this has to carry over so you know it would be uh a zero and then well then that's a 10 so the one would carry over and then the one would carry over so then that would be a six so then it really would be then 11 to the 5th power 1, uh 600 uh or 16,1 105 then you know it carries over that's pretty cool but it it still follows the pattern we just have to remember to carry but you know down to this when you don't have to carry it really works out it looks nice other patterns and I think I'm going to also include with the code you know we'll do a little spreadsheet thing to show this because if you just look at the even exponents or just the even numbers that show up here then you get um kind of an interesting um I'm going to do one more row here so 6 plus 1 is 7 + 15 is 21 so then this would be 35 and then uh 35 21 7 so you see no more evens here but these evens 3 2 1 make a nice triangle and then there's other triangles that show up in the evens and actually the pattern of that is the sarinsky triangle which you can generate in other ways but putting out Pascal's triangle and then um highlighting or circling even numbers gives you sarinsky's Triangle really cool um other things that will work out more with the code um this also carries over to um combinations and you know how many elements taken how many at a time and you know that would be uh you know how many elements that you start out with that be what row you're in and then how many at a time going across then the answer to that is how many different ways you can combine these things I think that's pretty cool too there's just so many different things that um beyond what I could do justice with on the board so we're going to look at it in different ways uh we're going I'm going to show you one way to generate this with code and we'll look at you know just briefly maybe we look at a spreadsheet just because that spaces out kind of nicely um to show some of those different patterns patters and we'll look at some other things too um to see all all these different different patterns and and that's kind of again you know some of the themes here in in precal we're figuring things out but we're also appreciating the re the beauty of all these interesting patterns that come up in math and in code so let's take a look at that let's take a look at how this plays out in code okay so here's one way to generate Pascal's triangle and I wanted to use combinations I I I think in code this this way works about as well as any other way and remember with combinations you know how many elements do you have then for Pascal triangle that would be what row and then how many at a time and then that would be across each row so we're just going to import math and N is going to end up being our our number of rows here so I I put that as a variable up top that way you can generate different uh size triangles just change end right up here and row is an empty array spaces as an empty array and I did this this and the next one space string really just because I wanted it to try to space it out to kind of look like a nice equilateral triangle you know isoceles at least um rather than just everything lined up okay so um a lot of times for Loops I just do a and b um and this is first because after seeing it I wanted to get a a better space triangle so just going through the range um each time I'm going to add to this string so space string is going to have an extra an extra two spaces here and I'm going to append that to this array space spaces there we go we'll come back to that in a second so then here's the triangle so again everything's in range n and as long as if B is greater than a continue and then that way that will just uh continue on so I just wanted it to be you know P for the variable so there this is what we have um math. factorial a um and so that's that's our looping variable so each one I'm going to take that number factorial divided by remember um the denominator is um factorial uh factorial btimes factorial a minus B so you know there we go so I I can reuse A and B Because all these are just within this Loop so remember you know it's you know n factorial Over N minus r but I didn't want to reuse n um so this is really just the combination formula that we already talked about and all that stored as an integer or casted as an integer and that's p and then that's going to be the row so I really am just using this to append for the row and then notice what I'm going to do is I'm going to print that particular element of this array spaces which is going to give me the right number of spaces that I want and in this case it's n minus a minus one and you'll see how that kind of evens it out so each of these spaces gets to be a part of this you know each this array and then I'm going to print out that one and then I'm going to print out just the row and so you see that's what we're doing here we're going to print out you know couple spaces and then the row and then I'm going to clear the row because then I'm going to use it again in the next iteration of this Loop so you know this is just generating Pascal triangle I have no need to store it for any reason so that's why I have spaces so it displays how I'd like it and then each row you know I'm going to go across and then um output it so what we have is Pascal's triangle you see it's spaced nicely along the left Edge and then just because the cuz we start getting um double digit numbers now the spacing on the right Edge you know gets a little bit skewed but I'm not really stressing about that and we have one there we go Pascal's triangle I could always make it you know um some other sort of list of you know for each but I just wanted to show to display this Pascal's triangle um there we go we're only storing each row long enough to print it out there we go so that's again one way to display this and we can see you know some other just interesting uh things in the loop that we can do and from here now we can use this to generate you know all kinds of things so we'll go on to the next and we'll we'll make we'll make use of this and look at some other cool patterns so we also have geometric prob ility if there's not something that I'm necessarily going to count but I can look at the area and so the geometric probability is the target area over the total area so same kind of thinking but having to do with area not things we can count so if I have like a bullseye you know that that Bullseye if I'm playing darts in the center as a tiny area compared to the whole dart board so very low probability of being able to just hit that now straight probability doesn't factor in skill maybe somebody's practicing and is and is a lot better um it's just probability so there there's a lot of sports you know darts baseball works a lot on probability but there's still skill involved which changes the probability or somebody's tendency to throw to one side or the other that could change the probability but just straight geometric probability has to do just with the area Target area out of the total area so therefore you know lower probability to hit the Bull's Eye a little bit better probability to hit let's say the Inner Circle there because it's a larger area out of the total so we see how we can calculate that um a lot of weather reports work on this geometric probability too besides the probability that a particular C Cloud will actually rain but if there's this rain cloud that we expecting to rain what's the area of the cloud compared to the area of the ground so you know in you know in your town what percentage or you know of that town is covered by this Dark Cloud that could rain and then that's your chance of rain for the day so you know you see we still work on geometric probability you know or if there's cloud cover but you know it's spotty you know how much what's the area of the cloud cover out of the total area of you know the town or wherever and we get our probabilities of rain so there we go we take a look at that but where this really leads us into is other shapes like the normal distribution now we'll get into the equation for that and everything but you know our normal curve so I can have you know scores here and I can have a frequency like How likely these are and we get this normal distribution looks like this but connecting with Statistics then I can calculate the area under this curve and a particular equation for generating this like normal curve would make the area one so then probability works out and if I want to look at like the most extreme case I might want to look at you know what's that 5% so you know of that area you know the area of this little part out of the whole area then you know maybe if the total area is one and so I I want you know uh something like uh 5% so that would be you know like five out of 100 or something you know if the area of this was 100 and then this this little area was five or if this area was one and this would be 05 and given that we can figure out regard all these other equations we can figure out you know what what line would this be would be the cut off here to Define that 5% so this really the geometric probability actually leads us into some other things we're going to do with stats and with Calculus because great I could calculate the area of that I have my circle formula but how do I calculate the area under this weird shape here or any other weird shape and that gets into calculus breaking it down into things like rectangles and how we can do that so it leads into from probability to you know weather prediction to statistics and calculus area under the curve th this you know we're just scratching the surface of uh geometric probability here but let's take a look at how we can do some of this stuff in code so let's talk about that probability distribution and what we're looking at here I I think with rolling two dice it's a nice discreet way to show this distribution here where all right what can I if I roll two dice what numbers can I roll I can't roll one that's not possible because one on one dice and then I can't just ignore the other one but I can roll two because I can have a one and then a one on the next die I can roll a three in two ways because because think about the sequence I can roll the first die can be a one and the next one can be a two or if I roll a two I still have hope because the next one can be a one and same with rolling a four we see the different ways and again think about a sequence here of I roll one and then I roll the other um one then a three three then a one or two and two and we see all the different ways we can generate how many different ways can roll a five how many different ways can I roll a six and we see that right here in the middle of our range is a seven and there's the most ways I can roll a seven compared to Rolling any other number and we see how for the higher numbers it actually goes down it's very it's nice and symmetrical like this there we go and to roll a 12 again only one way because I have to roll a six and then a six and that's it so you know that gives us the so when I look at the probability I can look at like how many ways can I do this well if I roll if I look at all these and if I added these up it's actually you know 36 different combinations here um and remember our counting principle one out of six one out of six so 36 possibilities and um so if I want to roll two it would be one out you know one out of 36 same thing with the 12 probability is one out of 36 but for rolling a seven 1 2 3 four five six different ways so it's 6 out of 36 or one out of six you know probably the mo most you know it's would be the most common number so a very good way to show this so let's look at a couple ways we can see this as a graph you know just looking at each of these numbers and then how many ways can we do this and um we're going to go back to the matplot library. pipot import as PLT and I'm going to show you a couple ways one way I can create an array of X values for each different role and then an array of Y values for how many different ways I can get that see and it all matches up here so I can do that an array of each and what I'm going to do is PLT Doh s2d 2D histogram and these are each arrays so I'm going to plot XY and then I'm going to define the bins so that makes it we we sometimes it comes you know automatic that you know how am I going to divide up these uh bars or these you know areas of my bar graph and a lot of times you can skip th this argument bins but I recommend not doing it because then it might group things not the way you want to group them so codewise you can skip it and python will put in some default but I recommend not doing that so I'm going to have 11 bins for my X and then six bins for the Y and we'll see how that blocks that out so when I run this I'm commented out the other way so this is how it shows I think it's kind of cool and we see um you it displays it nicely uh just the maximum of what's possible so that's one way another way um and I'm going to what I'm going to do is I'm going to comment this out and I'm going to uncomment this so um notice when you do like you know up here figure X for fig a for variables and I'm going to use a doist so this is another way to get a histogram so here I'm going to create this array of all these values here and notice in my array I'm G to put two and then three shows up twice four shows up three times and I'm going to write it like this in my array this is a good use because a lot of times when we get data it might be in that way we want to from that data that we get we already have something like this where things show up um a certain number of times and so I might have an array like this and therefore I'm going to graph that look that's just the first ARG arent is that array and then here I'm going to again Define the bins specifically as not how many but exactly where I want my cut off to be and you see then um my highest one's 12 so then 13 I want you know to include in that last bin and so when I run this instead we get this our classic histogram so then we see again each value in the number you know so we see this nice regular distribution where some values in the middle are the most common and then as we get further away from that middle it's less common that's the concept of the normal distribution so we we'll come back to this in a second as we talk about you know the area here um but that's the normal distribution and if we had things that were even more continuous instead of making it you know some sort of bar graph like this or histogram this actually this equation actually defines the top of it defines a line that would be the top of a normal distribution so all we're doing is we're just going to graph this here but this is the equation and even though we see e to a negative exponent which could just easily put that in the denominator and just one in the numerator this is actually a pretty common way to write it I guess just because the denominator is already crowded enough I don't know but but there we go so um given this then I'm going to Define um my minimum and maximum values here and like our other graphs number of points and then I'm going to create that as an array n p. Lin space graphing these I I am going to include you know the window size I'm going to plot an X and Y AIS to give you a reference and then here is that equation just converted to code so in the code I did put it all in the denominator so I in the code I did have one over and then I just did math. E that exponent math.sqrt of 2 pi and then I'm going to plot these um we'll come back to this other stuff later so when I run this this is the normal distribution or that you know bell curve that you may have heard of so this would be this is like an ideal if there was like continuous data of all these different things whatever I'm measuring and you know how far away from the mean which would be in the center you know that would be a nice regular distribution and you know that's what we have the the the the x value would be um standard deviations you know um we'll get into that you know as we talk more about stats but you know essentially how far away if the the mean or the average values you know zero then how far away from the average are we getting above and below and then the yv value would be frequency what's the Frequency that this shows up that this a score like this will show up and these medium or normal values have the highest frequency and then it Trails off as we go and we can uh do calculus to get the area under the curve but I want to show I want to show you just I'm going to uncomment these um if I could just get the area approximate and what I did is I drew some triangles here to show you um you notice it's approximate um we're skipping a little bit you know a little bit here not under in my triangle a little bit here where it's too low a little bit here too much and it would even out but the reason I picked this particular triangle is because I went from 2 1/2 to postive 2 1/2 so the area of the triangle 1/2 base time height so half the base is 2 and a half times the height 04 and that area would be one and so really we take it as the area under the normal distribution is one and then we look at like percentages you know what values here here give me a cut off point of you know 2% 5% you know 1% of that of that area you know that's what we're looking at and something over there where I'm only in the under the top you know 5% I'm going to say that you know often that's that's extreme enough that wow that's news so there we go so just approximating this and here with a histogram because it's already blocked blocky we can approximate this and remember that the width of every one of these bins is one so I can just make this a bunch of rectangles and calculate the area the width is one so then the height is one so you know the area is one and this next one the area is two next one the area is three then four then five then six you see and then we can get an area under here and so we can look at another way to look at probability would be you know this area um I would Ju Just as we were adding up all the how many ways this can happen the area under this should be 36 and then so just the area you know what's the probability of rolling a 12 that should be one out of 36 so we get it you know we can see the numerical probability with the formula and we can also see the geometric probability and that's kind of we want to see that connection and see that overlap you know so there we go um now just connecting this with Calculus which we're this is precalculus but just to give you an idea we could break down this into a lot of little rectangles with really really narrow uh sides and and the idea is just like pixels or you know resolution on the screen the more rectangles the better the resolution the better the approximate area and calculus finds a way to take that number of rectangles to Infinity but that's where we get here so you know this is kind of like the the sense of the normal distribution um you see we see it as actual countable probability um but then we also see you know the theory here's this General curve and ways we can look at this and that's you know all of this it's good uh precal and then it leads us into our understanding of Statistics so much of it relates to probability and Counting um how many ways can something happen and you know what I'm looking for you know how many correct out of that like what's the probability of that happening so here we go some some cool things and some interesting distributions you can Tinker with the math of Bing the short answer is it's always against you if we're not talking about skill or anything else factoring in just probability of something any anytime you're gambling you have the probability against you if you flip a coin you still have one out of two chance roulette you know your uh wheel goes around you know even if you say all right I'm going to to bet on you know black or red that's still not quite half because you still have two green zeros you know a lot of other things then get you know lower and lower odds like for example you know winning the lottery um a lot of games you have like you know pick three numbers Pick Four numbers so you know let's just talk about this if you pick uh numbers and each digit you know they come out of a bin uh 0o through n so there's 10 possibilities you have one out of 10 chance of picking that number but if you have another number you have to you're only win if you get this and that one so that's also one out of 10 and you multiply the probabilities because you're only correct if you get this one and that one and then another one so that would be you know one out of 10 and you see you know one out of 10 let's just say three three numbers that's a pretty common Lottery you know pick three numbers but remember then the chances of winning are one out of a thousand and the payoff the idea is that the payoff is going to be less than $1,000 you know way less so you can't just you know buy every combination because you'll lose money um yeah it's you know interesting so the uh and and if we get to like the larger lotteries it works on the same principle um but you might have you know pick um you know maybe five numbers but maybe there's 50 total and they come out of the same bin so picking the first number correct correctly it would be one out of 50 but then it's all out of the same B so one number was used so then the next one would be one out of 49 and again we're multiplying those you know one out of one out of 48 one out of 47 47 and then uh times one out of 46 and that would be if you if you're picking five numbers and so still it's one out of all these multiplied it gets to be a large number and again usually the payoff is so much is such that it's not worth buying one of every ticket um some people have actually tried this and you know they've gotten together with investors when the lottery jackpot gets to be a certain amount and then they try to buy one of every ticket I i' I heard one person talk about gambling is attacks on people that aren't good at math I think that's kind of funny but still nonetheless any of us here and there we might say oh let me take a chance on this why not Charity Auction so we know that if I lose the money went to a good cause um but you know that's that's really it you know the math of betting and what we're going to look at in the code is um you know so that you don't have to play with your own real money is different ways that we can generate you know um place a bet pick a card something like that and you know did you win or not and then add add or subtract from your um you know from your bank and simulate this and see that you know after only so many attempts you you end up with no money left so we'll look at some of those you know simulators that we'll create with the code so let's take a look at that so this is just a gambling simulator just to show you um you know some probabilities here um we're going import random because we're going to generate a random number so from that range um I'm going to give you a bank account and we'll look at that and what we're do is we're just going to prompt for some input um there we go sounds like a sentence so maybe I'll capitalize that guess the number between 1 and 11 store it and here I'm just going to print the number in the guess once and if it's correct it's going to print you win increase the bank and or you lose and decrease the bank there we go so in this case you know essentially you WI a dollar that uh guess number between one and 11 all right five oh but it was 10 so I lose and see um I didn't worry I didn't print out a bank account here just to show you you here's one way here we're going to expand on that um uh start out with this bank here um guess the number between 0 and 999 um because we can have all zeros and we can have 999 but we can't have a thousand that's four digits so here I have there's a reason why I have this Loop because right now we're just going to do it once but I want this to Loop that we're going to have this bank account and we're going to generate a random number from zero to a th000 because remember it won't pick a th it'll pick $9.99 as the highest and later on in the walk through uh for certification five uh I'll do this random number generating in a different way but here's one just generating this random number and we're going to print out the winning number your number and we're going to say in this case if you win it's going to print that out and give you $100 or if you lose then you lose the dollar you spent on the lottery ticket and after doing all that then we'll print out what's in your bank account so there we go um 789 how about that 594 you lose so then the bank account's $3.99 and the reason why I have this so we can comment these out because if I want to Loop through this a bunch of times I don't need hundreds of print statements so we can comment out these print statements here and let's just say we play this every day for a year now let's even make it more than a year because if the bank you start out with 400 supposing you play for every day for 400 Days there we go uh and you have this you know if you do win boom you get the $100 so that's going to be even more if you lose you only lose a dollar what you paid and there we go um uh 629 bank account zero so probabilities against you or here we go 2 83 bank account zero and this is what you know sometimes in doing this you want to be thankful that we're just dealing with variables instead of real numbers because that could have been oh I lost another 400 oh I lost another 400 um you know that's kind of what I want to show you with some of these gambling simulators and you know we'll get into looking at a couple others but the uh yeah the idea is that the the because the odds are always against you you know I mean who knows maybe it's nice every so often to plunk down a dollar you know little bit of anticipation wonder if I win but long term the B the it's it's always against you and the gambler's fallacy is that oh it's been against me so long it's got to turn my I'm due to win but there's really no such thing so there we go um a couple different ways to look at this you know just generating random numbers and comparing you know your guest to the other random numbers and we'll take a look at how uh how this plays out again in other situations at the end of uh the the um foundational math 5 uh certification project so here we go some good things to think about and some code to write for this this is going to be a walkth through of foundational math certif ification 5 but please make sure that you do this or give it your best attempt before looking at this um because this walkthrough is going to show you but the goal is that in going through everything in this course that you you're able to do this on on your own and it's a little bit of a review a little bit of a um a little bit of a test and in going through this you'll see that you know oh I've been able to do this this I've been able to do that and I've been able to build this and that and you know it completes you know a lot of your math journey here to this point that you know you'll have all these skills for the next thing I mean so many things you'll be able to do so um yep so here this will be the walk through but hopefully if you're watching this you've already given an attempt and maybe you just want to go over some things so here we go the walkthrough for foundational math certification 5 so here's the walkthrough of foundational math 5 and hope you already did this and you're just going through checking up but here we go and like before Step Zero we just need to acquire the testing library and you should also see how you can you know post your own library of various functions on GitHub or wherever and use this to access that library and then you have access to all these functions so there we go and in running this it will then make that connection import this and run that first function which will output one more thing and this is about how long it will take and then running that function will output this code test past and it is so remember this one we're focusing on a lot of sequences and series and those sorts of patterns so a sequence is any group of numbers in a certain order following a pattern so here's how we can do a loop to generate that sequence and I'm just going to say you know here um this one you don't have to change anything uh just giving you an example of the loop for a in range um from 1 to seven and remember python then one will be the first number but then six will be the last number it will always be less than that uh if I say one to seven it'll end at six so there we go and it's just going to print you know a squar comma and this is a nice thing to add you'll see how this um displays that and you see so it ends this and puts the next print statement on the same line so notice this print statement is not in the loop but putting this here then will put that next print statement on the same line sometimes that's nice and in doing this then we can take a look 1 149 16 so there we go what would be the next number well we see here how we generated this is a squar so the next thing would be 7^ squar 49 so that's just eight one sequence arithmetic sequence is anything where we have something that we're adding or subtracting to get the next number so the nth number because n starts at one when n is one the first number so the nth number is the first number plus the difference time n minus one and that's because n equals 1 for the first number so here we go so you're going to do this and this is a carryover from before but what we want is we want this to be um write a we want this to write a loop that generates sequence beginning with three and adding two each time so getting three adding two each time so if we start here with the range one so we have 3 um plus 2times nus1 so if that's the first thing than a minus one is is this so you see it will start with one and so for the first number it's just three because 1 Min one is zero and then the next one it'll go 3 + 2 three you know Etc and you can there you go and you can keep this at the end which we will do why not and there we go starting with three adding two each time there we go so getting an error like this this is supposed to be a little bit of a give and take so you know don't stress about it notice it's just an adjustment um this will work and I was just going through and thinking of a different way when I was creating this so notice the the the adjustment instead of range 1 to 7 we could just say range seven which understood starts at zero which then means I don't need to have that a minus one so that's just something you know we we could do it one way and that is perfectly correct but you know take the the feedback as give and take as here's another way to do this we could just say range seven starts at zero which means we don't have to do that part and and it's just interesting converting always you know code and array usually start at the first element is zero and some things in math the first element is one so there we go so just you know these are some of the things that hopefully I can point out in this walk through all right and in a geometric series you're multiplying or dividing something so the nth number is the first number times the ratio to the exponent n minus one because again you know we want to take it as the first number n equals 1 all right so now we're going to take this and we want to write a loop that uh generates starting at three and doubling every time and since we're doubling I didn't want to start at two that you know want to start at three and make that one one more step here so if we just take this so we see it's you know not a squ but it's we're starting at three times um this to the exponent um times two to the exponent um a minus one now I could like we were doing before two to the exponent a and go like this and it starts at zero so we see that's what we have to to the exponent a because when it's zero then that works out and then we see three three and then doubling every time there we go so yeah you could do it the other way also but then it will it will give you that suggestion hey do it this way just WR you know and and again we're often going for you know this if if one way is a little bit simpler a little more straightforward we'll do that so there we go and now sequences as python lists so lists um you really could use the word array interchangeably there might be some subtle differences but um we'll call it a list here and there we go so lists are indexed means that I have each element has a number to it and the first index is zero there we go again contrasting with the math sequences so we have this and we can have the entire list so notice what we have here if I just call this a list and I'm going to say that the that I have five in the list there we go and the comment here a list zero is five element zero so I can do this um since I have element zero then I definitely want that one in there because um I don't want to start with element zero and then I have the next number well let's um so we're going to multiply by two and then add three so if I take the next number then I really want um notice n starts at one so if I want a list element n minus1 then that gives me my previous number which in this case is five and then if I want to create a sequence where I multiply by two then add three so I take that previous number time 2 + three and there we go so we have that previous number * 2 + 3 and then I'm going to append that to the list so a list. append next number and then that that way that's so that's another way we can do this and we can just append it all to the list and then print the list at the very end so there we go and we have this so the next one recursive sequences so recursive is when you know the previous number and you need to know the previous number to generate the next number so it's dependent on that um whereas some of the original arithmetic and geometric sequences that we were looking at you can just jump to you have the formula you can jump to like the 50th number but here if I have let's say a Fibonacci sequence so I'll call this fib1 one so that way I'm creating this list that the first element is one and the next element is one because then I need to generate the previous two elements so you know there's your hints here so if I have the Fibonacci sequence I already have the first element in the second one so we're looking at python list so it's zero element zero and then element one so then I'm going to start my loop with element two and so what I'm going to have is um next equals FIB n minus1 plus FIB n minus 2 and we see this so I'm adding the two previous elements to get the next one and then I'm going to append that to the list and that way I needed to generate you know these first two elements so that I can reference them here and element zero element one so my in my loop I start with element two and then doing this all right up to 11 that works so then I can print the whole sequence and there we go 1 one 2 3 58 Etc pretty good and yeah that's it so the Fibonacci sequence it'd be tough to jump to you know the 100th element because I still need the two previous ones now you can graph these sequences remember are discreet so that means it's not continuous the the I want these nice integers these in between decimal values and such um are not really a part of that so here's one way to do this I can just plot them as points so a list and then b list and you know generate the axis here and so um I can plot so um I can plot n because I'm going through this Loop um for n in range the length of a list so you see I don't have to count them I can just say in range based on this length and I'm going to plot this point so the first element and then you know that's the x value and then what is the element in the list that's the Y value and I'm going to print that as a red dot there we go all right so um we can run this and a a lot of these I have you run it see what this looks like and we see that curve but I just have the dots it's not a continuous line so you see you know element two is here you know element four and there we go so when we change bead list so then make be list the new Fibonacci numbers so I can make it however many 2 3 5 8 13 and maybe we'll stop at 21 and so the length of that list I could have made it any length because I'm referencing that here and so that means I should change this because I'm referencing b list now and down here I'm referencing b list so now I want the range of b i Chang B list and I want the range of the length b list and I want to reference here I'm going to plot the elements in b list and just like Bist could just sit there before a list can just sit there that didn't take up too much and I just I don't have to reference it later so now we have this and just given this range because I stopped here you know there we go we have um these dots and that would be again graphing that sequence so that's the way a lot of sequence graphs look like you know a sequence of plotted points but not the lines connecting them all right so if I have a series now the difference with a sequence and a series is you add them up when you add up all the elements in a sequence then it becomes a series so here rather than generate um an array or a list then what I want to do is I have a sum variable start out at zero and then I'm going to just add each of these so there we go so if I have some element and so here I have you know my element is 2 * n + 4 now notice I I just wrote it like this but it could be 4 + 2 * n that works just as well I could have changed this to start at one and make the N minus one but that seems a little bit excessive so really all I'm going to do is add this code here sum equals sum plus element there we go go so each time it generates the next element in the sequence but since I'm adding it up now it becomes a series and so we're going to print out the sum there we go and we could have also put in here you know uh add it to a list and display that as well as the sum you know we can combine those so as you see we're just going to keep adding and the numbers going to keep getting bigger but we actually have two different types of uh series we have Divergent and convergent so Divergent the sum keeps getting larger it diverges um and usually you know we'll just say toward Infinity if we have enough elements but a convergent series actually approaches a definite number which is really interesting so that happens usually if the denominator keeps getting bigger than the numerator so there we go so now here we're just going to run this code just so you can see this um and we see in range 11 so my element now is 1 over 2 to the N so the numerator still keeps being one and the denominator is 2 to the end so 2 to the 0o 2 to the 1 2 the second you know all these smaller and smaller numbers that will converge now my range is just 11 and we see the sum here not bad now same thing I'm just going to change the loop to 42 you know as just some random number that I just thought of it did not take me a million years to think about this number and if we run this so we saw before it was 1.99 and then a couple things 1.999 a lot more nines and then we get to this so now we're going to change the range to 100 and see what that does and look at that two so it does converge I didn't even put anything here to round it just it got so close 1.999 so many nines and it converged and we we often say well okay as n approaches Infinity it should converge we didn't even get close we just even went up to 100 so that's what we see you know because the denominator is you know two to the N so two to the 100th power that's a t that's you know that's a huge number so one over that's a very tiny number it keeps going you're adding tinier and tinier numbers and so it converges so factorial another way for numbers to get bigger and bigger factorial of a number is the exclamation point and that means it's multiplying that time times everything less than that so 5 factorial is 5 * 4 * 3 * 2 * 1 and I know that times 1 won't change it but it completes the pattern so five factorial then multip all that gets you 120 and so by definition zero factorial is one because zero factorial these come up in situations where it's like combinations how many different ways can things happen so zero factorial if I have zero things how many ways can I arrange them well zero ways I just I could just not do anything and so that's that's or that's one thing that's one way zero fact of zero things the only thing I I can do one thing which is not arrange anything and so that you know it's kind of like the verbal explanation for zero factorial but anyway by definition 0 factorial equals 1 so in Python we're going to import math and then we see we have math factorial function all right so there we go we're going to put something else here in the print statement so we see if I have the number we can keep it as seven and then what I have it is printing that factorial notice no space equals well let's add this let's make it math. factorial number and I'm just going to reference that variable that way if I change it I don't have to change it multiple places and then I have this code here just so you see for n in range number minus one so I have number minus n times there we go and we will see that this prints out seven factorial equals and you know we saw that we calculated that number up here and it'll also just display seven * six times there we go um because that's what we're doing we're always doing the number minus n so we subtract more each time just a way to display it as well so Oiler number which we usually see abbreviated as e and we talked about this in other parts of the math course so um there we go so e and and again you know it wasn't oil name in the number after himself of his other people much later you know calling it e as a tribute so this is a convergent series it converges on this odd number here but still and it's the sum of one over n n factorial so like we were looking at the harmonic series before so you know I have my sum the range you know will start here at 11 and you see one over factorial of that and you see I just have range 11 so it starts at zero one over Zer factorial is one over one which is one so we're going to generate that you know one over each of these and pretty good 2.71828 and then 18 I mean it's actually even just going up to 11 it's pretty close to that number but then if we change it to 100 instead of 11 we get that a little bit close 2.7 1828 1828 and then yes that pattern does break down after a couple times so you know a much more uh close approximation and remember it's as n goes to Infinity we stopped at 100 if you really wanted to go up to a th it doesn't you know this is more than what you need to do for the this and you see very similar even just going from 100 to a, 1828 1828 and then 459 yep oh and see it'll give you the error and and each of these errors you know there's no point value you know going through this hopefully you you've been you know tinkering with with different things as you go through this each of these um notebooks so probability very often probability and we'll see that factorial and such will come back around again Pro probability likelihood of something happening so we're always counting the number number of correct outcomes out of so we divide that number out of the number of possible outcomes so there we go so randomly selecting one's birthday if I'm just going to randomly guess somebody's birthday I have one there's only one day out of 365 so we can just count and look at this probability we can just say correct divided by possible and for you know for a simple thing here just these couple lines of code therefore you can always go back and change these numbers to be you know anything and there we go so you know one out of 365 or you know 02 7 all right so then when we have probability of A and B it's only correct if both of those happen so what we end up doing is we multiply the probabilities so like probability of of flipping a coin and landing on heads we're going to look at four times in a row so the probability once is just 0.5 yep because it's either going to land heads or tails then the combined probability is um 0.5 now we can do this probability um four times because I'm multiplying that same thing to the fourth power there we go I mean you could have written probably times prob times prob you know we this is a much more efficient way to write it and there we go so that's the probability of getting heads four times in a row and now it's still just a probability I mean that that chance is not zero so it's still possible so this is where we get into like the gambler's fallacy so because it's such a low probability you know if you were betting somebody and you know I I bet that it's going to land on heads and it was tails and then you know three times in a row it was tails and then so you still the next time you're going to bet heads again saying you know such a low probability then you know I'm due to be correct at some point but it's still they're each independent so each one flip it's still one out of two chance in the whole situation it's this low probability but you know if it's a fair coin each instance is still one out of two chance so the gambler's fallacy looks at these lower probabilities a you know as you string together multiple events and says oh wow it's you know it's been head so Tails so many times I'll bet on heads it's due to come up but you know um things don't necessarily work that way it's still you could land on Tails again you know same thing with you know betting on you know slot machine or cards or dice you know there there there's no it's due to come up um it may be a lower chance but it's still there is a chance that this could happen so probability of A or B we add the probabilities so it's correct if either event happens and so you know that's like you know buying one lottery ticket and then oh if you buy two lottery tickets you doubled your prob your POS you doubled your chances I mean it's still tiny but it's doubled or pick a number from 1 to 10 if I pick one number but then if I pick another number also now I have two chances out of 10 you add the probabilities so there we go combin so here we're going to calculate the pick three lottery if I bought 7 tickets so the combined probability so it's one out of a th because it would be 1 out of 10 * 1 out of 10 Time 1 out of 10 picking three digits correctly but then the combined probability if I have seven tickets I'm just going to say prob time 7 because really you know I'm not going to write it out to add them up there we go oh or we could do that so all right probability plus Pro Plus prob one two three four five six 7 just to really accent the fact that it is adding it up seven times there we go okay so instead of one chance out of a thousand you have seven chances out of a thousand and combinations so how many different ways can we arrange things so the numerator side I often know how many correct things I want but how many Poss possible ways the denominator part of it we have these counting rules because there's a lot of different ways to look at this how can I figure out how many different possibilities and so combinations are unique groups of size r that you can make from a pool of N Things So when we write this notation here so NR so we can say N Things take an r at a time and then we put the Big C because it's combinations so there we go and then here's the formula n factorial Over N minus r factorial but then the denominator is even bigger than that because it's times R factorial so how many five person starting lineups Can it have there's 12 people on the team now this is I guess this would be like a an informal game because we're saying order does not matter so five person starting lineups we're not going to assign any particular position whatever sport this is we're just going to say yep groups of five how many different ways can we do this um so there we go n is 12 R is five 12 five at a time so we have this formula so I already imported math so we're going to do math. factorial n divided by and then we have I I'm going to put all this in parentheses to in the denominator math do math. factorial R times math. factorial n minus r and that should be correct with the parentheses so n factorial over R factorial oh and not plus but times math. factorial n minus r close those close the denominator parenthesis there we go and so we run this so 792 and this will be a a decimal you you um you probably could cast it as an integer but I didn't worry about doing that um doing this we we would expect an integer value but also um dividing python wants to default to uh just a float because you're dividing that you could you could end up with decimals but there we go how many possible starting lineups 792 so you know if we think about that then you know wow a coach uh has 12 people on the team you know how many different combinations uh you know who's starting today uh 792 options wow it's pretty overwhelming for it's a lot of things for a coach to think about now permutations you're counting how many possibilities but order does matter so you know like it has the word mutation in there changing things around but the order does matter so there we go so if you have eight different participation trophies and you want to pick three to arrange on the Shelf um it's not just that they're on the Shelf but what order are they in that matters um if it would be the uh um people winning you know in the Olympics gold silver and bronze so it's not just three people on the metal stand it order does matter gold silver and bronze or you know like this books on the Shelf trophies on the Shelf um you know the order does matter so it's perm permutations and the formula is similar notice the setup but with the big p for permutation and the formula here does not have that extra R in the denominator so there so we have you know um more possibilities because you know if I have you know gold silver and bronze let's say on the medal stand in the Olympics but if it was rearranged the same three people but they won different medals that's a different permutation so we have more options here so in this example example so eight different participation trophies and um three to arrange so eight things taken three at a time and so we're going to have this math. factorial n divided by math. factorial n minus r so there we go number of possible Arrangements 336 wow so you see you know the possibilities become a lot a lot more now Pascal's triangle one of the things um you know if I just print this out um we can see Pascal triangle here it links into you we can generate Pascal's triangle with permutate with with combinations so I want to include this here because it's an interesting um it's an interesting pattern here but if you just printed this out this is what it is um you see so beyond the triangle it's like understood the zeros for the nothingness and you're always adding the number and the and whatever is next to it to get the one below so then I have 1 + 1 is 2 so that's how we get this two because adding to 1 + 1 and then down here I have 1 + two and then that's where I get the three and then here same thing on that side get to this three and then 3 + three get to this six and now let's look at how to use combinations to create Pascal triangle so you might already have this code if you were working along with some of the other assignments and I'm just going to recap here we're going to import math and I'm going to create these variables here n for the number of rows so that way you can change that once up here and you know have all different rows an array for what's going on in each row and another array for spaces because that'll just I think make it look more like a nice triangle otherwise everything just gets lined up on the left side and I don't know I think it loses some of the effect there and with that I'm going to have the space string that I'm going to incorporate here so this is what we're doing here with the spaces um so each time I'm going to add a or append another space to the space string variable so each of these is going to have you know so many spaces and we'll see how that plays out later then I'm going to go through and for everything in range I'm going to um so notice if uh if we go through here just for it still to be a triangle um you know we'll continue so this is the combination formula which might seem familiar by now and there we go so you know we're going through a and b so um you know a things taking B at a time and so therefore you know if B is greater than a that just can't happen and we go through and after all this factorial we just want to make sure we do cast it as an integer so there we go and then I'm going to append that to the row so what we're doing is this for each row and then I'm going to print those spaces and then the row and then I'm going to clear the row notice all that's still in this Loop here so it just goes through this and each time then we're going to create the row print it out but then clear it for the next time so notice how the spaces um our space array just gets larger and larger you know each element has more spaces so we are working backwards there than putting the spaces in so the first row has a lot of spaces and less and less as we go down so when we do this all right let's see eight rows and we run this and we will see eight rows appear and you see the spaces give it that nice triangle angle over here it falls apart a little bit because then we start getting into the double digits but these are minor things relating to spacing um you know if you wanted to change something but there we go so we have Pascal's triangle to eight rows and using the combinations which I think in terms of generating it I think that's a pretty good reliable um manageable way to do that and then from there we can use these numbers for anything we want all right pretty cool so this certification project now and I put this in here for you about creating a deck of cards and there's other ways that other people have done this um I just decided to do it this way to really write out um what cards but a lot of times um and we we'll look at this in some of these examples here but there's a lot of other ways people have like um just the one number or the letter J q k a and um just the letter for hearts clubs Diamond spad H C DS so I decided to write it all out and this is just one way to do this so here we go so I have an array of all the cards of all the suits my R which is going to be the complete deck right now it's empty and uh temp card for now so um notice then I'm just building this deck for a and range cards and B and range suits I'm going to go through and this temporary variable string variable is going to be you know that of that so it's going to be um we have a two of Hearts a two of clubs a two of diamonds a two of spades and then we'll go to a three of Hearts three of clubs Etc and each time that's just going to be the temporary string and then we're going to append that so that the deck has all the cards and we can print this out so when I do this to print this out there we go and as I mentioned a lot of times people might do this just um the number and then one letter that works out nicely um we could do that just as well so here's what I did as some examples of some things you can do and you might do some of these you might take it further but this cell I run this cell and creates the deck that's there and that's going to continue um remember the runtime in collab um is about a half hour um or um about half hour of inactivity maybe 20 minutes um or even if you keep going you know that might go 11 or 12 hours so that code and those variables still exist for a little while so I can do other things in these other cells referencing them and that's going to work so uh in this other cell I just have one thing let's just draw one random card now here's what I have um just as reference print the length of the of the deck here and I'm going to draw a random card and what I have is you know from zero to the length of that deck of cards and remember that's a random integer so pick is going to be a number it's going to be a random integer and then pick one is going to be that particular card so then we'll just print that out you know your card is pick one this if you know um have a game I I don't want to use that card again it's already been picked so I'm going to pop that out of and again I I needed that variable as the index I'm going to pop that out of the deck and then just for reference print the length of the deck again so you see 52 cards here's your card and now there's 51 now this goes um along with the next code block here um I decided to have one cell of just your points and computer points so I can run this and again now those variables exist because now I can uh keep this now the the deck is still there so um right now we have 51 cards and the Ace of clubs that highest card is now not in the deck for right now for our examples we can leave it like that but you could always go back and run that original cell and then generate the deck again so that is possible all right so this this challenge is you know create some card games I just decided to pick a few simple ones but you know there's definitely uh more complicated ones and I I really wanted to be more about the code and not so much about all the different rules for card games here so War you know each put down a card and who has the higher card so um what I have is so pick a so that's going to be the random integer and then the computer's card is going to be from the same deck that index um and we're going to print what the computer's card is and pop that off the array we'll do the same thing for your card pick B random integer um and then your card is a card from the deck with that index here we go print it pop it off the array so now when we compare and you see what I did is just um the uh if your card so each of these remember your card zero um your card is a uh um is a string so index zero is the first character in that string so there you go if it's one then your card is a 10 because that's the only way you know that's the only way one would just show up as the first as the first character J so I'm giving values to each of these so um you know if the first index in that string is one then the value of your card is 10 if it's j that must be Jack the value is 11 Q it's 12 K it's 13 a would be 14 and then everything else it's whatever that first index is and then cast as an integer so you know a two of clubs is going to be a two of of value a three of Hearts is going to be a three there we go so again these are some of the things you know um once you work that out once how to compare you can uh use that so I do this all for your card and then all the same things for the computer card so now each of these have a value so so we have your number and computer number for what cards you have and there we go we just now we just go through our comparison if your number is greater than computer you win and then this is where I have the point values increasing your points you see so I have this once that it initializes and then if you win you get a point if if you lose computer gets a point or it's a tie and it'll print that out so you can run this and you'll see the computer got a seven of clubs and you got a six of diamonds so you lose and the computer gets a point and the idea with initializing the at a separate so you see um the deck was created in a separate code block initializing the points in a separate code block so we can just keep running this for every hand and you see so computer got a jack you got a two computer one again another point and you can run this again look at this you won this one and we can keep going you can keep uh running this there we go and what I have here here is if it ever gets to if the length of the deck is zero then game over all right so there we go and that's just one example of a game um now here's another one um there you go five cards stud so like now this one um I just wanted to display five cards yours in the computer and then um and then take it from there um but there are again um more intricate ways to compare poker hands um you know that gets pretty involved so um you know you can even do things you know drawing cards and switching them out but I just wanted to show here just you know how it prints the computer's cards and how we can do the same thing you know I have a pick um and I'm going to create this random uh you know from the deck now this is also continuing on we're using that same deck so for our purposes this is going to be fine but to really play this I would go back again to that original and then um recreate the deck which ENT you know there we go so I'm picking a random card um and then popping that off the deck so I'm going to do this five times because you know each person gets five so the computer gets five cards printing them out and then you get your five cards and I just had to print who wins so it'll just you know here are the cards and then you can say you know who wins uh so just some interesting things we can do with displaying um now the initial thing said uh you know card games but you know any other gambling here I have um you know initializing that the bank uh this one I put it in a loop so initializing your bank account um is in the same code so then you know your bank account and it's going to print out your bank account equals all right and what you're going to do is you're going to pick a threedigit number and you can change this range here so I kept it as range one um for this first um in instance here and so picking three numbers I could have decided to pick a random integer from uh 0 to 999 but instead I decided to split it up here just because that's the way a lot of lotteries seem to do it so just to show you so you're going to you know get these random integer from 0 to 9 but you're going to get that for one for two for three and then since I want it to be a threedigit number I'm going to say you know 1 * 100 plus 2 * 10 + 3 and and then that'll give it a threedigit number there you go and then there's your winning um these are all integers so then the multiplication and addition works and it's an integer that I can compare so there we go and it's going to print the winning numbers and then you already have your pick up here so if your pick equals that great you win and let's just say I just picked you know maybe you win $500 let's say there we go or if you lose you lose a dollar because that's probably about the cost of the the ticket so I have these commented out um and after all that then it's going to print you know what's in your bank account there we go pick a threedigit number all right uh 456 there we go winning numbers oh so the winning number was four but it didn't print out the zeros it would have been 004 that's interesting so yeah maybe I'll think about changing that that display so what I have here is then yeah there you go so you played it once and know you lost lost money but I have this that you can change the range like let's say 365 let's say you play every day for a year and I'll keep all of this but then I will comment out all of these because I don't need 365 extra lines for whether you win or lose so you see now we can just everything you pick your one number let's say you play the same number every day and you can see that you know if you happen to win you're going to get $500 if you lose you're going to lose a dollar and if we run that so um here we go I'll pick you know 777 that's seems to be oh and look at that so we did win so you know you come out ahead if I I can run this again uh pick a number there we go um 789 and lost every day so $400 minus 365 you know we lost every day or there we go um 23 4 and what's interesting is you can do this um you you can simulate all these different uh gambling situations um you could make it you know the pick four pick six you could make it um you know you could change this to simulate you know the various you know other you know uh Lotto uh Power Ball you whatever you can change this to simulate various uh lottery winnings and you know see how lucky you get um so yeah just interesting one more thing um and I have this just um to show you just one other person online that um now all this is connected to project Oiler pretty cool um and this person put together I'm just going to um show you this link here and you see it's like you know this and now what I just did is I printed out some of these so I I'll show you this so that it's a little bit bigger and easier to see um but each one you know that whole page has you know like 500 lines of poker hands um let's let's take a look at the code for a second here so here if you know if you want to print all that out it's actually fewer lines than I have here uh import the URL Library um I split it up as a separate variable Target URL and then put it in quotes here so there we go um and I'm going to store this as my variable I'll just call data URL li. request.url open there we go and this is one of the ways to just open this and copy things from that page rather than you know store it as a variable here because you could I mean in this case I am I'm storing this data as as a variable but you could also store the whole page or even more but I'm using this variable here um opening that URL and I just included this you can do the whole thing but I just put a limit here uh um and so for line and data so there we go so I could just go through this um I call the variable line because when you do when you print this out what it's going to print out is one line and that's what that's what this is so the one line um when you print this out this doesn't show up um so you get you're going to get that b and the single quote at the beginning you're going to get the back sln and the single quote at the end but then um this is the line that we have and so notice you know each of these represents a card for two different hands of five cards each so the first hand is eight of clubs then um of Spades is that a t for 10 yep probably k for King of Clubs nine of Hearts there we go four of Spades and one two three four five and then five cards for the other hand so now again just print printing it out you could have just gone through there's your simple Loop and and done Loop through it for long line in data print line but what I did is um I wanted to store it as a temporary string and that's going to keep overwriting it so I I this is just for an example here so it's going to keep overwriting it and then later on I just use the last one that came up um but what I did for the limit in the count here so each time it counts it and then if count is greater than limit then it's going to break so you know that that's one way to limit hey I you know this is a lot of lines I just want to print out 10 to see what's going on um and then print out that temp string you know just as an example so this is going to end up being the last one that I that I Loop through but index to because I want zero one and then two is going to tell me that so there we go because it really brought it from here that last line that I took in index too so these are some of the things that you can do in here um you know take each of these and encode it as something give it a value um that might be something that you could do um a lot a lot of possibilities I just wanted to show you you know here's one example of a place that has a bunch of these resources um you know like 500 poker hands here's just one way to read that and display it and grab information from there and you know that's going to continue on the goal here is to make some sort of game more than one if you'd like some sort of gambling uh you know game and part of that is you know looking at the probability and calculating that testing it keeping score and if you do this and you run it lot um you know you can iterate through these then you might realize um you know how much how much money you are losing and you know the benefit of it being just variables instead of your actual bank account so you know seeing the probability and also seeing you know the math of gambling we want to put our our time and our effort and our money toward things that give us a good return like analyzing the data you know betting on it probably not a good investment analyzing the data good investment of your time so that's that's what you want to be able to do so if you've been building your uh notebook along the way this is a chance to check and see how uh It lines up with some of the things we've been doing you know maybe you forgot to put something in or you want to include something more and I'm going to add a few things and just talk about how I would organize the not notebook here all of these uh periodically if it's something major I I'll make this a heading like this so that it shows up in the table of contents and then we can see all the different major things that you'd want in the in your table of contents I have here the first few ways like some major ways to get data from you know a CSV online um or if you want to up load a CSV and so over here you know you click on these and you get to you know some code samples and what I do is I put like sample URLs in there just as um you know a placeholder you maybe can like test it and then you can you know comment out different things you know maybe have a few of the things that you want uh and you know comment this out or add add a different one you know upload because maybe you have you've downloaded it you have it on your computer and you know this creates a dialogue box um or just from a different web page so you know all these uh you know notice we're using pandas you know maybe there's a table on a web page you like so I like to put all these you know all the things we're working with we need to get the data somewhere um read data from other file types um and notice some of these you know if you get the table somewhere and then you have the URL or maybe you store it as a table a good way to put this in is have all this as one step so then you can continue the code you know now that you have it as a table you can do some things with the table here so I have this set up these are some good things like I have as like a document this you might or a notebook that you might want to include as yours and have you know all these references you could always copy the code into something else or you could just work on it from here you know maybe you have you know this code and you you know keep this modify one thing or easily add you know some more code or text in here as needed so you know we're trying to kind of build this like uh nice like notebook uh precal calculator for yourself and you know just here's some of the things you can do um you know another example so again reading data from different places um I noticed all of these I have you know the heading but then over here you know within that heading some of these it doesn't deserve a heading on the table of contents but you know if you get to this you know as example data on a table from a web page and then within here you have other examples you know Tex text but it doesn't need to be a heading and again you can organize the this your own way but this is just my suggestion um trying some different things so you know we put code in there that works and then you can have it to use um you know authenticating the connection if you want it from a spreadsheet you know maybe you have a spreadsheet in your Google Drive and notice this is the uh snippet that works and when you do this on your notebook it'll you can authorize this and connect it to your Google Drive so again do this once and then once you have that you can then reference that worksheet um and get the data from there other file types um especially if it's in the URL notice here this was just called fil name. xlsx and yeah an Excel file that somebody might have put up and within pandas we have the function read Excel so you know they have corresponding functions for other file types too so we have all these um drawing lines so just you know kind of going through what we've we've been doing with the course and you know you might have seen you know you remember the different code that I showed you but here's how it put together like certain parts of that some of these were nice examples as we went through it but here's just a nice uh notebook of stuff that works that you could use you know different ways you might want to just draw lines here um and then you know each of these with its own separate thing and that might be nice and you know show the graph or more elaborate you can have an array of points and that way again here here's the code that you have and you could you know maybe like this comment it out instead of deleting it and you can put another array in if you have um you know some different points that you have you want to draw something um and the triangle so notice the triangle uh gets to the you know it's another heading on the table of contents so you can jump right to it and we have everything here in the Triangle um drawing triangles you know and it'll display it like this and we we just might use that as a reference for all the python trig functions so here we have everything you know if we do it in degrees and then we convert it from radians here complimentary angles all the different things that we were doing and this way you can you know get the S cosine and tangent of various angles you can even keep you know this as an example so you see what you're expecting it to output and then as you change different things here then you can you know update that values I I kept this in here you know uh going through the range of the sign functions just in case you know you might be interested so some of these you know you may use more often than others but you'll have all these here um converting to degrees so we know we have ways to convert to degrees to radians but uh there we go um angles and sides conventional labels because it just gives you that you know again the triangle capital A for angle a lower case a for the side across from it all these things that you can include and you'll have all this I'm incl you know there's a link to this exact uh notebook so you you'll have all this code available to you but you know just going through you know using sign to find side measures using cosine because these are the things as your as your calculator hey you can just you know go in and type these angles um and one of the sides and then remember we went through this that you know the one that you don't know make it zero and it'll calculate it for you side measures inverse to find angle measures this one you know happen to leave blank for the A and C that you can put in there unit circle just different things you might want to use or display or use this code to plot a circle for different things there we go the showing the trig triangles animated unit circle if you like that you can run this code Pythagorean theorem and then just showing the different uh um X and Y values again some of these you may use more often than others but I wanted to include some of these uh just in case there you go converting radians to degrees and of course you know uh python has that built in you can just you know convert from radians to degrees remember we were doing this earlier that you have um you see math. radians so you take that angle and convert it to radians and the same corresponding math. degrees if you have an angle that already is in radians so we have that but then it's good to include this just to see you know that is our ratio so you know here's what we can do um degrees to radians graphing trig functions and again you have other graphing utilities but again might be useful to be able to do this so we include this in here graphing the circle in different ways graphing sign and all these so now as you see in this all this is in the table of contents so you know some of these you might have you if you go to the table contents you may or may not you know need to jump to these but we have all these so you know what you want to jump to graphing and maybe if you're looking to calculate something you might skip down to all these different graphs um sine wave transformations you know and then giving an interaction an interactive interactive sine waves so these are you know now you have you know interacting sine waves you know you could jump right to this and adjust some things and you know see some interactions here Tides as this one example tides and then you know you can make you know you could use use this um we'll look at some other uh uses of data in in in a little bit law of signs law of cosiness area solving any triangle some of these you might jump to more often triangle from points and there we go so you know these are some of the things you might jump down to hey I have three points can I draw a triangle all the different Matrix operations so again you see certain ones all this under this heading and then you have text here for each individual one so you can jump to that and then just you know look at which ones you want to use um and then you know here we go again from the unit from the table of contents an a quadratic equation from three points so you'll have this full example solving a system of equations inverse Matrix and you know you can jump down to this different ways of encoding and decoding messages the nonmatrix method we have this and you know this is something you could use and then if you wanted to you could you know change I think think this one had just a very simple Cipher and you could change this one so we have this um and then the Matrix method of encoding even with a little bit of direction here every two characters becomes a 1x two Matrix multiplied by a 2X two to encode it or decode it so you know there we go all the different steps encoding and decoding and again you can copy these change you know whatever Matrix you use and you know you have your useful in coding and decoding code complex numbers of all the things we did with complex numbers you know I is aare of ne1 I I wanted to include just these two things um calculating and displaying because again you might you know just it might be a nice refresher if you don't use this and want to use this you know how to create a complex number how to uh break out the real and the imaginary parts and display those um another way if you just want the complex part then just still make or you just want the imaginary part you can still make the you know complex and just the real part part is zero so we have these just some things graphing on real and imaginary so you know how you can import these labels um you know this one I kept it there but commented out any title creating a complex number and then again parsing out the real for x and the complex for and the imaginary for y and plotting it so some useful things maybe you don't come across complex they're plotting it often but maybe there's some fractal you want to do so this could be the basis of what you work with here and you would put your fractal uh um here in the points you'd somewhere in here you would change that and I included just the full mandle br um that uh that does work so just in case you know um and what I did is I I I used uh chat GPT to um get this and then I tinkered with it a little bit so then here's some just you know alternate uh values that might be interesting so then we're going to get into some other things like projectile motion um so in addition to all these things that we currently have the next few videos we'll look at projectile motion some things related to that some other more useful um trig functions um logistic growth all kinds of things few physics applications and we'll look at how you can just add these to your to your code here you know you know might as well you know make it one unified notebook as a reference so in in all the things that we have so far you can add some other things and some things that I show you and may you know whatever formulas you come across and hey I might use this formula pretty often um there you go write some code and and add it to this and you know you're you're developing your notebook calculator so hopefully this gives you a good uh sense of you know what it might look like so far and the next few parts we're just going to add to it so one of the other useful formulas and this collection of a few formulas here relates to projectile motion now we have projectile motion formulas the quadratics that if I'm launching something straight up in the air we can calculate you know height and everything like that but this depends on the angle so now we introduced Tri Tri to this this depends on the angle that we launch something and we see here from the formula you know v^2 uh times the S of 2 Theta so velocity that's the initial velocity of whatever we're launching and remember this goes for any projectile you know a ball that you kick uh from the ground or something you throw or toss in any way uh something flying something you know shot out of a cannon or whatever you know we have an initial velocity and then we have an initial angle so now if we notice and and certainly then divided by G for Gravity so if we notice then that if Theta you know it's a sign of 2 Theta so if Theta is 45° or Pi 4 radians then 2 Theta would make it 90° and then the sign of 90 is 1 so that's the optimal angle we can we can see this that you know you're not going to get higher than this you know a sign value of one so great now we know the optimal angle but then any other angle we would just put it in this formula s of 2 thet times the initial velocity squared and I I I like the default going to you know uh standard units so velocity would be in me/ second and here's all of this running you know running through the code initial velocity in me/ second initial angle and we can put this in radians so that we don't have to convert in the formula but you could always have it in degrees and throw another line of code here to convert to radians um and then the gravity in meters per second squared so we'll keep that as a as a constant here if for whatever reason you wanted to change it to feet per second it for velocity then Gra it you'd have to change according to that you know make it 32 but nonetheless here we have then the range we have V ^ 2 time the S of 2 Theta and notice a for the angle all that divided by gravity and then we're going to print three decimal places is fine so then you know I I like doing the formula here and then the print statement next you know round it to three decimal places so that gives the range of a projectile and then supposing the ground is sloping at an incline so we'll call the angle the incline B and this is the formula notice slightly more complicated and we can get into this s of 2 Theta minus B minus a s of B and then cosine the denominator now becomes gravity times the cosine squ of B all of this right and we have you know very similar we can have this initial velocity and I just picked values to plug in here but you could always change these and I this one as just an example I made um the slope just you know instead of Pi ided 4 you know this ultimate I did pi divided 4.1 make it a slightly lower angle so you know we're not running into the slope there and here's the formula notice with the extra parenthesis and there we go so we have you know all these that we can adjust and again useful formulas um you can figure out the range of of different things so this one's going increas you know at a slope that's an angle now on a slope declining and so declining I just called it d angle D from the horizontal slightly different formula and we have this um you know notice some similarities but different Formula 2 * initial velocity squar time the sin of th times the cosine of theta minus D and there we go so that's D is the angle of the angle of depression going down from the horizontal and we can plug in here again I just picked to an angle and here's the formula for the range you know all this just written in Python and I might want to find out the maximum height of a projectile because that's interesting maybe it's something I need to get over or maybe it's you know um I don't know a roof that I need to stay under so the idea is you can use these um and notice this one sin squar of theta in the numerator and then 2G in the denominator just slight variations so for each of these you know formulas you might happen to use you know if you happen to um you know work on uh you know I don't know designing something or planning out something then you know some formulas you might find useful and then you can have these built in you know change a few numbers and calculate so you know there you go who knows maybe if you have some sort of model rocket you can uh you can predict where you know where do I want this to land and we get um you know what initial velocity what angle and we can adjust that so you know these These are the three you know related to projectile motion and you can include these then in your overall notebook so here's one with a complicated formula but a brief explanation if you want to calculate the number of hours of daylight on any given day of the year so here's one um we'll take the latitude in degrees because normally north latitude south latitude um will reference them that way this one um not only is it less accurate Beyond 65 degrees but actually the formula doesn't really account for that so keep it you know 65° or less um it you you'll see at that point the hours and then you know it gets more extreme around the polls um and so capital L is the degrees latitude capital J day of the year and seever I have the link here of where I've got this formula it was an ask Dr math article from years ago so just here's the several steps calculating the you know taking into account the angle of the Sun the angle of north latitude and you go down here and then you're going to print the daylight hours rounding it to uh one decimal place is probably fine so there we go we get um you know just in case you want to plan out oh how many days of sunlight or how many hours of sunlight do I get on a particular day and again one of the other good ones you can add to to your ongoing notebook of formulas here's another good useful formula logistic growth and kind of connects with exponential growth where I have some sort of limit and that's what C in this numerator is the carrying capacity or the maximum y value so you could have a population that grows and there's only really a certain amount that the environment can sustain or you know any anything that that grows but does have a limit and then at some point it will stop growing as quickly it doesn't completely Flatline but there is a definite horizontal ASM toote there and it's zero so we're usually talking about things we can count so there is a horizontal ASM toote at y equals z we're not going to be talking about negative y values here there is a horizontal ASM toote at yals C which is that carrying capacity and what we have is in this formula a in this denominator so if that a value that a value will always be positive and we see that we're doing C divided by something so um we we can see that as this denominator gets really big then that's when we get closer to y equal 0 but this denominator could get small and then that's where we get to that carrying capacity but we see it will level off this negative in the exponent is a part of the formula and then B if B is positive then we're talking about growth and if B is negative then we're talking about Decay so you could these are the asmd does but you could have something that decays you start out closer to yal C and then the population dips down to you know closer to zero so this is the formula logistic logistic growth you know growth within limit and here we have let you know we'll import some things cuz we're going to graph this that would be the interesting thing to see what this graph looks like so you know we'll put in I just put in some nice except for this one integers um you know some C value Cal 10 AAL 2 whatever it is it's always positive and growth I wanted to make it a growth function so I just made it3 a lot of times this is the rate but that's a good way to understand but there are some situations where the rate's probably not the best definition but there we go so this would be something that you know we do have growth but a limit um now giving a function like this that you can graph for all sorts of different logistic growth formulas I mean you could have logistic growth like some small numbers here I had like 10 a is two you could have a and b be even tiny decimals you could have C be a huge number so we want we want to capture that Trend so what I did here is in our graph to find minimum and maximum X values so there is an inflection point in the middle as we as this changes so what we're going to do is you know you probably won't need to get anywhere near a thousand but I'm going to run through this Loop and then I'm going to plug this in you know once we have our values here um the X Val I just called it X test so this is the function then that y value all right if B is greater than zero we're talking about growth so then if Y is greater than C over2 because the inflection point will be right in the middle so if it's a growth formula and then we've gone be the yv value has grown beyond that inflection point we're about halfway so then what I did is uh I did multip * five five times that x value that actually seemed to be a pretty good um estimate you know get that round it convert it to an integer that's my X maximum and then my X minimum um they're not always centered right around zero but I just did 0 minus x max again really good it seems to apply to a lot of different things you know if you if you're working on something you can always um tweak this a little bit but it's a really good starting point so so it'll just go through this and as soon as we get beyond that inflection point you know now I have X minimum maximum and I'll break the other one is if it's actually a Decay formula so if B is less than zero and Y is less than that inflection point so if that's the case then we'll go through the same thing you know I want my X maximum my X minimum and then break so again that that should work for most situations you encounter and then if you look at your graph you're like hey I want to tweak it a little bit then you can modify some things um you could even you know I just commented these out but you could even um you don't even have to uh count this out if you want to overwrite that you just you know put here x minimum and X maximum and whatever you calculate up here it'll overwrite it as your Dimensions so y minimum remember ASM toote y equal 0 so just put y = 2 um just so that we can see the axis it's not right at the edge y maximum yep again that ASM toe plus two points uh like we've done before in graphs um the difference between the minimum and maximum times 10 and then that should give us enough points to plot a nice smooth curve you know import a numpy so Lin space and our graph um you know made it blue I like blue so here we are now this y value so you know X just X that's my x value going looping through that array and my yv value here all right and if we plot this then we see for those points we get that Trend and then there's 10 we can see that you know we see enough of this graph that we see it level off at zero we see it level off at 10 and and we see about where that inflection point is you know that's what we want to look at this is the logistic growth here and then if we wanted to if we wanted to make B something negative and I'll just do everything and just change it negative and if we run that then we will see now slight of hand I actually just change this and for making it negative it will switch it and you see that's that's when B is negative so it starts at a higher number and then gets lower but because the um X Min and x max ended up being really close it was giving an error so I added this other bit that if AB the absolute value and I rather than just making it equal I just wanted If I subtract x maxus x Min giving me my range if if that's too small then the absolute value of that would be I just said less than 20 because then if it is less than 20 then I'll just make X Min 10 and X maximum 10 so that's you know I like that as a nice standard window anyway so we're going to calculate it but if it ends up being Too Close you know you're not going to see the effect anyway so then we would overwrite that and then we would get this and these are ones where you can see hey maybe you wanted you know you want to see more of this that you have um you know you want to see you know instead of stopping at 10 I want to see it get close to the xaxis and it wasn't perfectly centered around 0 so you know I want to get it closer to that y equal 10 you could always do this knowing that we're going to end up invoking this one then you could change it here and make it you know 20 and you could make that positive 20 might not even have to make it as as big and we can run this and you see you just make that a little bit more and you can really see it get to that horizontal ASM toote and then it'll even off from there and then if we made the window even bigger you would see the extent of this so you see this one starting from high and then getting low that's when B is negative so you know it just goes back to this negative B value so there we go logistic growth you know we can we can use this for planning a lot of things lot of population and carrying capacity and you know sometimes even Investments um you know you can use this sometimes um things like uh you know um sharing information things go things start out really quickly um that would be definitely a a growth model positive B value but things could start out really quickly and then by the time everybody knows this information you know it can only spread so much or you know uh business saturation you know PE companies open so many businesses but at some point they're everywhere and then they can't open as many as quickly so you know there we go let's talk about limits and we got a glimpse of this from before we saw the logistic uh functions approach an ASM toote and so we could say the limit of that function the Y value that it can't get to but it gets really close to the limit of that function would be this carrying capacity um and a lot of times you yeah you can just put something in a graph and see the limit um you know even if it can't get exactly to a value you know what does it get close to so here's an example of a really interesting limit connecting uh preal with with Calculus so if we graph these are going to set the dimensions and then this is the graph we're going to plot here so s of x / X now we know that there's at least one value there X can't be zero so what happen happens when X is zero but if we take a look at this graph we can still plot it it will still plot that and go right around that notion that you know it can't exist here and you might not even see you know it doesn't even display an error you you know most graphs you won't even see uh the difference because it's really microscopic but exactly at x equals zero this doesn't work but we see that the value of that looks like when X is zero Y is one so you know the value of this when you know when we get to uh you know around zero is One S of 0 over Z but what if I just actually try that value so we see we see the value down here if I have everything else that I just ran that's still in the short term memory of the Google collab for a few minutes so what if I add this you know x value of zero and then I just print the value of that sine of x / X and I'm going to use this x value you see error and it'll say zero division error now certainly if I you know put any other value in there it'll give me the value that's fine but I can't do it at zero yep gives me the error so I'm not here's how I'm going to address it I'm going to assign this difference here and this difference can be any number but let's make it really tiny like Point one's fine I can make it 01 so now I know that X can't be zero and maybe I'll still put this x value down here just to not have to scroll up again so that x value is zero I'm going to make this difference here so a little bit to the right because if I if I'm looking at the graph if I add something to this x value it's a little bit to the right of the other point so X Value Plus the difference or a little bit to the left x value minus the difference now let's print these two values here and we see they actually match up really well down to you know many decimal places I could even make this difference you know well if they match up here they're going to match up there but the interesting thing with this is I can make that difference a tiny tiny number and look at that it it's so close that it rounds it that they're both one this tiny tiny difference is so close that that's why it didn't give an error on the graph that we we could you know we just call it one which it really was one notice when I got to you know even 0.01 it's still very close to 1. n999 eight really close but you know I I would certainly round that to one but you know it's far enough that it'll give me all those decimal places and you see if I make it even closer then we get this this limit and this is the notion of the limit here that you know this works because if I do this from the left and the right then they are different values now if I just went back and you know never mind sign um what if I just said you know like 1 /x now that one you see this middle line that's red that's a weird glitch here that it should just display that as the the axis um but you see x c be zero here but then it approaches from the right and the Y value gets really big it approaches from the left the Y Val gets really small and neither neither the twen shall meet so I can say that there's no limit like that just won't work I can't you know even if I try to make it an approximate value it's not going to do us any good so we see some interesting things like that where we have you know a limit that you know this limit does not exist because it's different from the right and the left whereas that you know s of X um cosine ironically also works like that um does not match up very nicely you see I right at zero this vertical line is actually not a not a value this it does not exist here so yeah cosine and a lot of them you know from the right from the left does not you know does not match up but our sign value matches up very nicely as one of many functions that if I have something that it can't exist exactly at this point but anything even really close works and if I go a little bit to the right a little bit to the left I get the same values then we can say this limit exists and in fact that limit is this number so I can't plug in zero and get one but the limit as X approaches Z is one and this you know you could graph a lot of things just straight up put it into a graph and see what it looks like but then you also have this notion here of testing the right and left values you know whatever function you have and then you can just test the right and the left values you know adjust the difference and then see what see what it does so this is really there's so many things in calculus that once you throw in you know the actual graphing utility or writing code um a lot of it just falls into place because you're just going to you know run it and see what it looks like so um you don't have to memorize all these limits but you know the more you work with them the more you'll get familiar with them and this is going to start connecting us with some of the things that we'll do in calculus so here's something that you might not have thought about doing on a calculator or a notebook but factoring trig functions and and as an example you know we probably you're probably familiar with it uh sin squar plus cosine squals one so this function here and this is just what we need to import import from Senpai import everything and then I'm going to just Define these two symbols you could Define more you could make them A and B whatever um and I keep this just to make sure that it prints out nicely and all of these you don't have to use a print statement it's just the last line of code is what it'll output so I commented out all these this is what it's going to display so if you do something like this trig simp sin squ plus cosine squar then it outputs one and all these things it can you know the fact that it can Factor this you know a lot of times you know I tell my students you know oh at this point the calculator won't help you oh but your Google collab notebook will help you um so you know we can just do this trick simp I wanted to show a few of these you see it'll do that Pythagorean identity and then it will also do this one 1 plus coent squared and if we run that see it's very interesting it does it it sometimes will output secant uh cosecant square but for the most part it wants to do everything in terms of s and cosine so 1/ sin squ is what it'll do and you know you you might hopefully remember that that's cant squared um you know the same thing here if we take a look now also um even if I comment even if I leave this one it it might run this but then this next line overwrites it so we won't see so you see if I do like one over secant you know not squared if I just do one over secant and I run that you know it did that it will give me cosine so you know it likes to put everything back into s and cosine but if I do one over cosine it won't give me seant it'll give me an error oh I also because I put no um that will definitely get you an error but you see one over cosine it just returns one over cosine it won't put it back to seant so I'm going to in in this notebook that um that I will will share with you I'm going to leave these here as you know some some notes and reminders and notice this it's that same function every time trig simp um because it really wants to simplify so as we look at this you know it it wants to simplify and in Python perspective that goes back to S and cosine so you see in terms of simplifying um I won't even uncomment this but this one sine of x + y that's simple enough so no this won't work it won't if you do that it'll just return s of X+ y but sin of X+ y equals this sin of x * cosine of x plus cosine time of x * s of Y so if you run this it will give you the S of X Plus y so you see it goes in that direction of simplifying because that's what the function is trig simp it will simplify it so if you put in the simplified version it won't make it more complicated um because you know certainly you know any simplified version you put there's a few ways to make it more complicated and it won't do any of them so you know you put this s of x sign y there we go um so if you want to do it the other way you know you're kind of out of luck there and in the same way put that comment back in in the same way it will you know s over cosine and when I run this it will simplify that that's pretty straightforward s cosine tangent but if I ran tangent it won't break it down into s and cosine and you might know from factoring trig functions maybe I have tangent I want to break it down to sign and cosine it won't do that now this would be like in conjunction with other things you're doing or maybe to check things you're doing so you know the fact that some of these you know can I take tangent right in s and cosine that might be you know a good way you know you'll know how to do that and you know you can use uh some of your brain not right code for all of it but there you go it'll it'll simplify that um the weird thing is the half angle formulas it won't do it neither so now this is the simplified version so I I would expect that it wouldn't complicate it but this should simplify to tangent of X over2 and it won't do that so the half angle formulas is for some reason and I'll keep that in there to remind you for some reason that just not buil it who knows maybe another version but yes the double angle formula it will and once again sine of 2x uh remember the one thing you know it'll it'll display it nicely here um you know the tangent of X or or this but when you put the input you have to remember these multiplication symbols you know um you know for Python and you have to remember you know the X you know for the exponent so um s of two you know s of 2x no but then you see if we go to this one that does simplified to the S of 2x so it will do that and you see simpai it will output that nicely sine of 2x but anytime here you have to put the multiplication symbols in still need that python syntax so we have this notice the other double angle formula uh I didn't do all of them here as examples but it will do all of the double angle formulas and you see this um will simplify the tangent of 2x nice um all these we'll just run through a couple more here trig simp so um and notice this one I I also included just a reminder so this sin of X Plus the sign of Y it won't do but it will do this one and simplify it down to that and notice it just put 1.0 times this um you know that's fine but yeah it will simplify this more complicated part and break it down into the S of X Plus s of Y so pretty cool but it won't it it won't take that and make it more complicated and even just you know one more um you know one more uh product just one more formula here shift enter and look at that you good times good times so you could um you know keep all these you could you know put some other ones in there but uh one of the things you know if if you're working on this in conjunction with um you know other other problems in the book to simplify you can use this to check or you could try it um you know put everything into one and see if it works you know hey I need to simplify everything on this side of the of the equal sign and do it trig simp give it a try see see if it works so there we go some good trig Factor ing for you so here's a bonus because remember we're building this you know Resource Center here Google collab one of the other things you can do and we'll do some math to this too is find all the elements of the periodic table so you know we import these modules for some things we're going to do and remember you can just you know run this then you don't have to do the import every time um we can re read this data that we we use and you know uh this guy Adam me he posted this so he's the one that created this you'll see the credits at the end you know run that and now that we have this hey we can display the first five rows um or the first or the first 20 and we see you know we can display the heading we can um not put a number in here remember and then we just get the first five put any number you know especially data sets you're not really familiar with how big it is you want to just get a sense of this um and then so this is all the headings but let's say we want just the names so we can do data. name and I don't have to comment this out it'll just do you know the second line will overwrite the first one and look at this it listed all the names so nice ordered by atomic number this is great and supposing I just wanted one then I could do a number in here so if I could uh if I could do there we go and we can see we can pick this so other things we can do we can look at uh the math and calculate you know pH of things there we go um so again all these different things we're referencing that data set that we just stored as data there we go and we can just calculate some things the mass notice negative log of the hydrogen concentration is the pH so here we go and we can just list the names of all the columns this way um you see um I can list you know like I did before name and list everything in that column or this one lists all the column headings maybe I want that there we go the shape rows and columns there we go this can give you some information that you need and more things we can do maybe we can you know do some math to the shape here we can graph some things and you know I commented this out but we have you know you can plot um if you know that this is going to be a number and we know that this is going to be a number there we go we can plot those and to arrays of these numbers and we see because what do we have going across the row the uh radius increases but then you're at the beginning of the next row so we have all these some things we can graph and you could always you know change this I think this is funny something versus something else but you know you could always change this um uh there we go number uh vers is radius and then when we run this there we go pretty cool so any uh data set in chemistry there's going to be plenty of math we can do so we can sort values you see we can sort the table in different ways and all of these you you know you could keep this I'll make a copy of this um you know and you see the way that this is sorted here boom and then the table of contents really just has you know three parts you could always like name the different parts to help you jump to the ones you need but there we go um the headings here and notice how they had the headings underneath if I double click you see two hashtags and then makes it a subheading so this will help you get uh more organized with some of the things you might be creating yeah you can keep it as one notebook maybe you just you know go go to it and you know enter values overwrite it and take it from there or you could always you know make some sort of customized analysis and do a save as you know save a copy and then do your customized analysis on your copy you know there we go uh um and as you see he has some nice uh directions here on some of the other things that you can do all right and here's where the data came from here's where the um you know formatting ETL exchange transfer load all very important otherwise it might be a mess there we go located it and um there we go and here's the guy that uh did this we have Adam L there we go so yeah given given props this is good there we go coding in k12.org so pretty cool so some other um some other things that you can do with all all of your your collab uh skills and really all this especially when we see these things that we're doing you know um we've been doing a lot in math with numpy so really that's like the winning combo pandas and numpy um get it in some sort of you know version that I can do math with and then use arrays and do the math so you see um so we could uh you know we could Loop through um so just like we have name um and notice the indexes here so we could look at some things we can do with this mathematically um now we could even really you know try to uh do some sort of like weird sinusoidal function for for this because it's up and down I think that's too choppy and we see it as too choppy so that wouldn't that wouldn't help sometimes it's good if there's something I can predict if it's you know not getting a better answer than what I already have then it's no good all right so we could have like melting point and boiling point um you know this could be interesting um you know maybe if I have this data dot melting point and notice how easy this is if there's no space because that would mess it up so you know encourage encourage your friends to you know make table headings with no spaces that way you don't have to mess with quotes and such and so we see all these melting points here um and what we can do is uh we could you know add up those melting points um and again you know summation we could do this as a list or we could do it as a sum um and we could you know graph these melting points um so the same way that we did you know some of these other graphs here so you see if we have atomic number number and radius you know we could do this and so if we really look back at um um atomic number we could even just overwrite this for now and what I like to do is comment something out and then and then you use that later so we could there we go atomic number and melting point there we go and there we go yeah very interesting how it goes you know up and down also yeah really interesting but the important thing is looking at this as some sort of graph that we can get these arrays of numbers and then plot these points so just one more bonus this is really you know all these different things we're learning um for preal with python we want to be able to also apply it to all these different things and this is really what I want you to see that then you know with that little bit connecting with what we were doing at the beginning of the course you know can I get find data in different places can I get it in a table um you know can I read it you know probably using pandas and then now all the things we've been doing in the course what can I do to um do some math to all this and then look look for interesting patterns do some calculations so hopefully this uh all brings it together and you enjoy the course I hope you enjoyed pre calculus with python hopefully now you really feel comfortable with your skills you know using trigonometry finding the sides and angles of any triangle even with little bits of information um working with tra graphs repeating patterns getting data analyzing repeating patterns um appreciating the beauty of e to the I pi equals ne1 uh working with sequences and series and all these things then now you can take this and run with it and um you know apply these skills to all kinds of new data that you come across so hopefully you got a lot of this and this is leading up to calculus where things are going to start to move and we're going to look at other sorts of interesting Trends so happy coding