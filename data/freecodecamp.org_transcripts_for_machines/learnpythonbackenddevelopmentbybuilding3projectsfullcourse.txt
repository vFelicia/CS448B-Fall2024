this course from Tomy Toco is a projectbased backend web development course you'll learn how to build three full backend web applications including an AI web app a Netflix clone and a Spotify clone by the end you'll have a good understanding of what goes into backend web development hi guys welcome to this project based backend development course in this tutorial you'll learn how to build three different backend projects now let's take a look at the agenda of this video first we're going to build out an AI web application that converts any YouTube video into a full blog post then we're going to build a Netflix clone using various backend Technologies like python JavaScript Jango postgress scale and more finally we're going to build out a full Spotify clone with all the necessary features now I'm currently working on a full backend development course called backend Mastery this course is aimed to take you from being a beginner to a full backend developer and if you already have some coding experience and you just want to improve your skills in back backend development then this course is for you I am still working on the course and if you want to know when the course launches go to backend mastery.com or click the link in the description below and you can just input your email and you'll get updates on the progress of the course and you also be the first to know when the course launches now if you like more tutorials like this please don't forget to check out my Channel at code with toy where I teach more about web development and coding in general now having that said let's get straight into to this video hi guys welcome to this video this video is going to be a course where we create an AI powered app and what this app is going to be doing is that it's going to be generating a Blog article from a YouTube video so we're going to create a whole system where a user will be able to input a YouTube link and once they click on a button a Blog article is going to be generated based on that YouTube video now for this we are going to be using python Jango Tailwind CSS postgressql and some other Technologies I'm going to talk about them later in the video now before we move on let me show you around and let me show you the end product of what we're going to be building so right here is the own page before I come here I'm just going to go to log out now I'm logged out what I can do now is just to log in or I could come here to sign up if I don't have an account so I'm just going to log in as my name and once I log in and click enter now you're going to see that it's going to take me back to this hom page and it's going to say welcome to me now the next thing I can do is to just paste in a YouTube link and it's going to generate an article from this YouTube link now I'm just here in my channel and I'm going to click on the latest YouTube video of mine I'm going to copy that link and I'm going to come back to the application we're building I'm going to paste that in and I'm going to click on generate now you're going to see this rolling Circle and this is just going to keep rolling until this process has been done so there's a few steps that actually goes on in the back end so the first thing that's going to happen is that we're going to use this particular link to first get the transcript of that particular YouTube video so the first thing we're going to do is to download the MP3 file which is the audio file of that YouTube video then we're going to convert that audio file to a transcript and then we are going to generate a Blog article based on that transcript so that's why it takes a few second for it to actually complete all of these tasks so he's using various apis from various platforms to do all of this so as you can see this has been generated right here and this is what we have right now and if I come back here and I go into saved blog post it's going to show me all of the articles I have generated so I could click on one if I click on this one you see it shows me what I just generated right now it shows me the YouTube title and it shows me the link to that YouTube video this is what we are going to be building in this particular video now let me explain what apis we're going to be using so for us to be able to get the transcript of a YouTube video we're going to be using assembly Ai and then for the postgress database we're going to be using a manage database from a platform called covery and for us to then generate this particular article from a transcript we're going to be using using open AI now the link to the complete project of everything that we're going to be doing is going to be in the description below the first thing we're going to do is to set up the folder structure now right here in my computer under document I created a folder and I named that folder AI blog app and under there I created another folder named front end and that front end is where I'm going to write all our HTML files and all the basically all the template files we need for our application and what I did was I opened up this folder right here on vs code so make sure you set up this project wherever you want and then open it up on vs code so the first thing we're going to do is to actually build out the front end of this old project so before we even open up jungle or do anything regarding the back end let's build out how this project is going to look so let's do that right now now the first thing we're going to work on is the homepage so I'm going to create a new h HTML file and I'm going to name it index.html so this is basically the HTML file for the homage and you can name it whatever you want but for this video I'm going to be naming it index.html now I'm just going to bring up like this boiler plate right here so this is what we're going to be starting off of what you just need to do is to click on let me go back and explain that so you just need to have the exclamation mark and then this is going to come up and click click enter and then all of this is going to pop up now before we move forward I'm going to be using a live preview so I'm going to show you what that is so instead of me having to save this file every single time and then come to the browser to refresh it what I'm going to do is just to open up live preview on here on vs code so for you to do that you need to come into extensions and then you need to say live preview so right here it says I have it installed you go ahead and install that if you want to follow along with every single thing I'm doing and once you have that installed we can continue I'm going to come back to this and for me to open you up on live preview I need to right click on the file I'm going to right click on that and click on Show preview so right now it doesn't show anything because it's blank but this is working I'm going to close that and then we're just going to continue with this and the first thing I'm going to do is to change this title I'm going to change it from document to AI blog generator now immediately after that the next thing I'm going to do is to just add in Tailwind CSS so I'm just going to bring in Tailwind CSS right here and that is just going to be a CDN so for Tailwind we're not going to be downloading it like locally on our computer or going through all those process I'm just going to make it faster and we're going to use a CDN now you can do whatever you want you know you can use it the other way where you have to go through the installation process so that you can customize it however you want but we don't really need that for this video so I'm just going to go through the CDN and make everything faster so for me to go use a CDN I'm going to paste in this code right here and this is just a basic link tag and then is link to the CDN of Tailwind so I'm just going to scroll through so you can see what that is and this is the latest version and then it's just saying real stylesheet so just saying this is a stylesheet as you can see it is a CSS file now that is working and as you can see this boiler P that we generated has every single thing we need it has the Ed tag it has the HTML tag the duct type and it has the body now that we have most of this thing configured for us the next thing I'm going to do is to just come into the body now we're going to have to work on a nve bar so before we do anything let's just come in here and let me have like a comment I'm just going to say Navar and in here I'm going to have a na tag and what I'm going to do is to give it a class so we're going to be using Tailwind CSS for all the styling I'm just going to give it a background of blue for the nav bar of 600 and let's have p four and as you can see it has a background of blue already and I want the text to be white so I'm going to say text white and I'm going to add flex and let's say justify between now this should be good enough and I'm just going to add like a title here that says something like AI block generator so right here under this nav bar I'm going to have a div tag and under that D tag I'm going to have an H1 and that just going to say AI plug generator so this is nice um let's change some stuff so I'm going to give it a class why isn't with CSS again and let's change the text to make it larger and another thing we can do is to make it bold so bold and good think this is perfect I make this like this that is nice and the next thing we can do is to have like our options right here so I wanted to say something like saved blog post or log out or login whatever we need so for now I'm just going to say let's have another div tag and on here I'm going to have a link and in this link let's just say something like log out and I'm just going to say it need to have an F tag and then let's just give it hashtag for now and now for the class we want the text to be white and um let's give it an over so once we over under it it should have an underline so we're giving it over of underline and let's see how that is so as you can see once we over under it over it it CHS that underline which is nice we can add more options later as we go but for now I think this should be okay and yeah this should be nice now before I move forward to styling the actual body the next thing I want to do is to sty the body tag so what we're going to is to create like a box on here that is going to have like input where they can input their YouTube link you know it's going to have where the blog article is going to be generated but before I do that let me sty the old body so we're going to use St wind as I said and let's give it flex and let's say Flex colum and you're going to see what all of this does in a bit H screen and we should give it a background of like let's see let's say gray 100 and let's give it the font of ss and I think this should be perfect yes this should be good for what we want to build and just going to save that and the next thing we're going to do is to come all the way here and then we're going to create like a main content so I'm just going to come here and I'm going to say let me just have a new div tag and up here I'm just going to say something like main let me comment that out nice and for this I want to style it again but before we style it I'm just going to leave it for now let's take care of all the tags I'm going to have another div tag you're going to see why so I'm going to have under this div tag let me have one more and in here this is just going to be like a text so first of all let's have an H2 and this H2 is just going to say something like welcome you know welcome to AI blog generator to the AI blog generator right and this should be nice although it's just right here we're going to change all the styling we're going to use DN CSS once again to do everything we need to do and under it I want to have like a P tag and I'm just going to have like a bunch of text and actually instead of typing in all this text what I'm just going to do is do this so this is the text I'm just going to CL close this a little bit so this is the old text right here let me make sure that you can see everything so generate high quality blog articles from YouTube videos using artificial intelligence simply enter the link to the YouTube video below and let the AI create content for you that is nice but it's not looking too good here it's just looking like a normal text now let's let's change that let's change that and what I'm going to do right here I just want to give it like uh just to make sure we know everything we're doing let me say introduction introduction section and Commander out now uh the first thing we're going to do is just to make sure that for this introduction section all the text is going to the center so let's give you a class of text Center good so now everything is in the center and the next thing we're going to do for the H2 let's style that real quick we're going to come up and style the whole main body the old main content but for now let's take care of this text and for this H2 let's change the text size so let's say to excel yes that is nine so now it distinguishes you know the title from the other text and the next thing we're going to do is to change the font so let's say font semibold think nice because I don't want it to be too bold like this but I think semi bold is okay and let's say mb4 okay I think I think that is good and for this text let's just let's actually change the color a little bit so let's say text Gray 700 yes nice this looks perfect so you can distinguish everything and um one thing I want to do is this is too close to the nav bar and I'm going to change that right now so right here before the main content I'm going to have a VR tag just going to paste that again and I think that should be good yes that is good and let's just close that up and now right here since we have all of this done the next thing I'm going to do is to come back in here and style the the D tag of the main content so right here I'm going to do class and let's give it Flex grow and container so yeah Flex grow container um let's say MX Auto and I'm hoping you have a basic idea of Tailwind just to follow along with this tutorial but if you don't that it's okay cuz I'm still explaining everything that we're going to be doing so you're going to see what all of this does in a bit and same let's say PX zero right and that should be good for the old main content and for this because this is where all of the section is going to be where all the input and every other thing with to input the YouTube link um let's change some stuff so let's say class max w3x and um MX A2 so and let's give it a background of white and H let's see let's say P6 and let's make this rounded as you can see now this is rounded this by the way just so you know for this div this is what we are taking care of this right here so I'm as I said I was going to put it in like a box so the main body has like a grayish background but this one that we're doing it's like a it's like a box isn't like a card if you if you understand CSS this looks like a like a basic card so this um we just made a round that was the last thing we did and let's see what next we can do let's give a shadow so let's say shadow um MD and as you can see a little bit of Shadow appeared let's say transition so I'm going to show you what this transition does and right now if I come if I I come here nothing happens but once I do the transition once I come on this it's going to like expand a little bit so let's let's make that transition happen so transition I think transform and um I say transform and also give it let's over cuz we want that transition to happen once we over on it so over scale 105 it's going to scale up to 105 once we over on it and let's just give a flex and then Flex column okay cool now let's test this out so if we come here great as you can see once we overrun it it expands this is nice this is exactly what we want now let there are the section under here where we have like the input bar where a user can input a YouTube link now let's just do that real quick right under this introduction section we want to have that so what I'm going to do is let me add a br first so we you you know there's a space in between it and the next thing I'm going to do is to say YouTube section let's comment that out nice and right here I'm going to have another div tag but this is you know doesn't really need to take any styling so say div and under that div tag I'm going to have an H2 and I'm going to have another div going to see what we're doing in a second and nice so now under this H2 I want to have something that says enter YouTube link and let's give it let's style it cuz right now it's looking mid class text Excel nice and mb4 nice and font semi bold good and what we need to do now is for this div tag let's I'm just going to give it flex and kind of space I'm going to say space X4 yes this should be okay and right here now we're going to have like an input and what this is going to do is where the user is going to be able to input you know the particular YouTube link so what I'm going to do is to give it an ID I'm going to say YouTube link and let's give you a type the type is going to be URL and the place older will be based YouTube link and I think the next thing is to sty it cuz right now it's just looking not really looking good right here so let's give you a class and let's say flex scoll and P2 and bro and yeah let's say border should be blue 100 nice and let's make this rounded cuz it doesn't really look good so say rounded and MD nice so this is what we need and the next thing we want to do is to have a button so button that just says something like generate blog or something like that so let's just say button and say generate nice and in here just going to have an ID so that IDE is going to be something like generated blog button nice generate blog button and for this we don't really need to give it any other thing like a type or whatever what we just need to do is to style it cuz right now it doesn't even look like a button so let's say let's give you a background color first background blue 600 nice and then let's change that text to White nice and then let's say PX4 and then py2 and then let's make this rounded and not just normal rounded let's say rmd nice so just on the right side and um let's give it over so once we over on it it gets like the blue gets thicker basically so let's say once we over the background color should change from Blue 600 to Blue 700 is that work now nice and let's see let a transition transition and colors this should work this should be nice so if we do this this is actually very good and um yes this this is good so we're basically done with that YouTube section and now we need another section where the article that has been generated will actually show now right here after this div we're actually going to instead of having div I think we should have a section tag now and under this just like usual let's say generated blog display section and let's just comment this out and right here on Section um let's first have an H2 and this HT we just going to say generated blog article cool and for this H2 let's kind of style it and let's say text X let me first see how it looks like in real time text Excel um let's say mb4 and um let's say font should be semi board nice and what I'm going to do is for this section let me give this a styling also so it's going to affect everything mt10 good nice and let's say Flex grow good responsiveness responsiveness is perfect so now what we're going to do is after this H2 what we need to do is to say div and for this div I'm going to give it an ID of blog content and let me style this let me give you a class mt2 and text the text to be like gray let me say 700 and let's give some space y four this is nice and I think this should be everything we need for now so if I say something like cool so this is how the generated text should show and later we're going to come here because like when we click on generate I want like a but there a loading ring to show here so like a circle that keeps loading until that blog is generated so later we're going to come here and do that so let's just say section for loading Circle let's just keep that comment and come back here and then for now I think this should be good uh let's just give it like a footer to wrap everything up so right now after this div we can say footer and let's say powered let me see in real time so I could know what to change okay that's what it looks like powered by code with told me but in this code with toldy let's give it a a tag put code with toy in there and let's link this to my YouTube channel and I'm just going to paste in the link of my YouTube channel in there so paste nice and for the fotter in general I need to give you some styling cuz it doesn't really look good right now class let's say text Center nice and P4 should be down good and text black want it all black and mt6 good now that is perfect and later when we're submitting this form we're going to be using JavaScript so let me just open up the script right now and we'll come back to that later so everything is done with this index. HTML so if I expand this this is how it looks like this should be good so generated article will show here the user will input their uh their link and once the user inputs their link I'm not sure why that happened but once the use okay let's quit this and then just open that again Show preview nice so once the user input their link and click generate some stuff is going to get run in this script and then it's going to generate that blog article right here now we're going to take care of the loading Circle so as I said earlier whenever a user clicks on this generate button so when they put in a YouTube link and click on this generate button it's going to actually take a few seconds for that particular article to be generated because there's a lot of process that will be done in the back end like that first downloading the audio file and then transcribing that audio file and then generating a Blog article based on that audio file so this will take a few seconds for that to process and we don't just want the user to be left with a blank screen without knowing what is going on so while all of that is going on I want like a loading Circle to show here just to show that user to be able to interact with that user so they know that whatever they want is being processed now let's do that earlier I wanted to put that particular Circle right here as you can see we had a comment that said section for loading Circle I was going to put it under this generate blog article but now I think I'm just going to put it on top here so the circle should be loading here and yeah we're going to do that so I'm going to take this away from here and I'm going to put it right before the generated blog display section now what I'm going to do is to have like a div so right here I'm going to say Dave to take care of this and I'm going to give it an ID of loading cycle and I'm going to give you a class of load so for now nothing is showing but what I'm going to do is for this to actually happen we need to use some CSS styling so this should be custom this is not going to be from Tailwind CSS so right here I'm going to use some key frames and web kit key frames and let me just show you what I'm going to do so right here in the Ed I'm just going to have a new style and I'm actually just going to put in the particular code for this instead of you know typing it out and once again all of this code is going to be available on my GitHub in the link in the description below so if you are stuck anywhere you just want to copy a code and paste it I'm going to have that code right in the description below now this is everything we need so first of all this is the key frame that is going to rotate it and what if you don't understand this particular CSS that we're doing what you just need to know is that this first Styles it like it shows the width you know the margin the height normal basics stuff and then all of this actually takes care of it being rotated and all of this takes care of like the animation and all the transition needed so this is the styling of the CSS styling that is going to take care of the loading Circle I'm going to save it and once we come here as you can see we have this circle that is just loading right now the problem is whenever a user comes to this page that ccle is just loading we don't want this to happen now what we want is just only when the user clicks on generate this cyle start loading so for us to do this what we're going to do is to come here and where we put that particular loading cycle we're going to give it a style and then we're going to say display should be none as you can see that is done now when a user clicks on generate we can have like an onclick button function in our JavaScript that automatically shows this so it can change the display from none to block so once that display changes to block you're going to see that it's going to be shown but we'll do that later in the JavaScript for now we're keeping it at none now the next thing that we're going to do is to create the template for our login so we're going to have a login and sign up page and let's start by creating a template for our login page so I'm going to have to quit this and what I'm just going to do is to open this up just do this and I'm going to create login do HTML file and in here I'm going to do exactly the same thing and open up this basic boiler plate and then what I'm just going to do right here is just to change this title to login and once again I'm going to have to use the Tailwind CSS CDN so I'm going to paste this in right here and the next thing I'm going to do this is more straightforward because we already done one so we're just going to take the same thing that we did there and now for the body let's just let give you a class PG gray 100 like we did before font s like we did before and then like we did before and what we just need to do is to have the nav bar and we could just copy this nav bar from here and then we could paste that Navar in and the next thing is to have the main content where we have the actual login page so I'm just going to do this and before I do this I'm going to open this up on live preview I'm just going to click on that right click on it and click Show preview nice just to make sure that everything is good and now right under here under this I'm going to have main content and then we're just going to make sure to comment that out and right here I'm going to have a div class I'm going to have another diff class the tag sorry not a class and then for the class I'm going to have Flex in here and then you want all the items in here to be in the center so every single thing and justify Center on each screen and for this second one I want the background of this to be like white so let's say BG white B8 Shadow MD nice it's coming up then let's make it rounded LG we're basically doing the same thing we did for the own page I'm going to say Max W MD give it a full nice so now it's filled that up and the next thing we're going to do is to create a form so right here I'm just going to say login form then command that out and let's just give you a form and for the class I'm going to give you some spacing so that you know it will just be all over the place I'm going to say space y4 and right here here we need to have like an H2 and H1 is quite big so we just say H2 that says login nice but let me style it a little bit and let me say something like text XL so extra large and font semi Bol nice so now the next thing I want to do is to have div tags for each input so right here I'm just going to say div and I'm first going to have the label and this will be username cuz they're going to be able to log with username and password and this label is for username so I'm going to create an input that has a name and ID of username so it's going to be four username let me sty this I'm going to say class give this block and mb1 and font should be like let's see medium good so the next thing we want to have is the actual input so now we're going to say input and then we're just going to close the input and then the type right here is going to be text and ID is going to be username and we also going to give it like name should be username and I want to give you a place order I'm going to say place order enter your username but right now you can see that it doesn't really look too good so let's style it the class and we're going to say w f and let's say P2 nice and let's give you a border and let's make that border around good so this is all we need for this and then we're going to do the exact same thing for the password what I'm just going to do is to copy this div tag and I'm just going to change this to for password and everything should remain the same and the type should be password ID should be password name should be password and place holder should be enter your password so that should work and then the last thing we want to have is the submit button so this shouldn't be here this should be outside this div tag so we're going to say button and this button should just say like login and I'm just going to say type submit and we don't really need any other thing than the styling so let's just style that button cuz now it's just a text so let's say class and let's say W4 and BG blue so let's give a background color and um of 600 nice and let's say text should be white right and once we need what what we just did basically was giving it making sure that the background color is 600 just matching what we did initially and giving this text color of white because it was black and giving the styling W full so once again I'll recommend you kind of no Tailwind CSS to follow along and yeah so um the next thing we want to do is p two and let's make it that rounded nice and let's give it over cuz right now if we over over it it doesn't really do nothing let's change the color from 600 to 700 so BG blue 700 nice so that change worked so now this particular login page is running successfully so everything is working fine as it should be the next thing I want to do is just to remove this I want to change this from login from log out to login and sign up so up here where we have log out I'm going to change that to login I'm going to change this to sign up this is nice this is everything we need now everything is working perfectly for the login page now the next thing we're going to take care of is the sign up page this is going to be very quick because we already styled the login page and the sign up page is not going to be any different the only thing that's going to be different is the amount of fields so I'm going to close this and I'm going to open up this and I'm going to create a new fold file named sign up. HTML so now on this sign up. HTML this is basically where I do everything related to the sign up page so now I'm just going to have to copy all of this login code and paste it in here now the only thing that is going to be different is just the amount of fields that we have so right here we're going to have username password so we're going to have email also so right I'm just going to copy paste and we're going to say this is for email and let's just say email and the type should be email and ID should be email and name should be email and I'm just going to say for the place older I'm just going to say enter your email so that is all for the email and the next thing is the password so we want them to type in the password twice just to make sure that they typing the correct password we're going to say repeat password and then we're going to say that here repeat password and for the ID we're going to say repeat password and for the name be repeat password and for the place holder we just going to say repeat your password now this should work let's change this to sign up which is the button and right here where we have the title let's change that title also to sign up now everything should be working perfectly let me open this in live preview so Show preview and it says login so let's come here and and say sign up nice so right here as you can see everything works perfectly fine we have this sign up page and this is too close to the top so what we can do is just to come here and right here where we have the main content we're just going to say BR just to give a little bit of spacing and good everything is working perfectly fine now we have the login and sign up have this AI blog generator the title says sign up and we have this sign up form which collects username email password and repeat password and the sign up button too is there so all of this works perfectly fine now the next thing we're going to do is to create a page where a user will be able to see all of the blog posts that they have generated so right now we have created the own page the login page and the sign up page now we're going to create another page as I said where a user is going to see all of the post that has been generated so when we build the application when a user use the AI tool to generate a Blog article from a YouTube video they are going to be able to save that particular blog article so that even if they log out of the platform and come back like 2 weeks later they still going to see that article there now let's create the template for that I'm just going to create a new file and I'm just going to name this all blogs HTML just a random name and once again I'm going to use this and for the title I'm just going to say all blog post and the next thing I want to do is to have the Tailwind CSS CDN so I'm just going to paste that in there so let me remove this this is the Tailwind CDN right here once again all the code is going to be available in the description below on my GitHub so now that we have this the next thing we want to do is right here in this body I want to give you a class let me just style this body real quick um let me change the background to like gray 100 and let me give it font sense and uh yes that should be good now let me preview this so that we can see all the changes in real time so Show preview right now nothing really nothing much and then the next thing we want to do is to take care of the Navar so we've created a nav bar before I'm just going to take that nav bar from index I'm going to come in here and right I'm just going to close this up right here where we have nav I'm going to copy that nav bar and I'm going to paste this nav bar in here so I'm going to go into all blocks and then I'm going to paste This na bar in the body good so this is what we need and right here I'm just going to say Navar and I'm going to comment that out now the next thing I want to do is to create a main container so right here I'm just going to type main content container just going to comment that out as this is just a comment and let me decrease this a little bit so that we can have space to see the actual code and right here what I'm just going to do is I'm going to have a diff tag so first let's create one diff tag and in there I'm going to create another one now in this second div tag this is where I'm going to have like a section where we have the blog post so I'm going to first type blog post section all right here I'm just going to comment it out and then I'm going to have a section and and I don't really need to start this section tag I'm just going to come down in here and do H2 and in here I'm just going to say all blog post and I'm going to give this a little bit of styling so I'm going to say style and let's change the text to XL and um let's change this to let's see mb4 so first of all it says we have an error this should be class not style and font let's make it semi bold good and now the next thing that we're going to do is to have a diff tag in here let's create a div tag and in here let me give this space y4 that should be good and then in here I'm going to have another div and this in this div time I'm going to have like an H3 and that is just going to say blog post Ty to one so this is the section that shows all the blog post and I'm going to have like a P tag to show the content of that blog post so the actual article so I'm just going to say this is the content of the blog post and I can just put the Lauren the general Lauren do let me just leave that the way it is go finish it like this so this looks good let me make this smaller once again and the next thing I'm just going to do is to have a class here and for this div class I'm going to give you a border right so like this so it can be like in its own box and let me say border gray 300 and I'm going to say P4 nice and now let me make it rounded good so now the next thing is to sty this H3 tag so I'm going to say class and let let's change the text to like LG good make it larger and let's give it a font of semibold so you can distinguish the title from the content good so this should be good this is looking okay and I'm just going to copy this and I'm going to paste it again and this time around I'm going to say blog post title two and down here I'm just going to keep repeating this I'm just going to say repeat I'm just going to comment that out right there so that is looking good but I feel like we could do more so let's like we could give it make it look better so right here let's come all the way up here where we have this first of all let's give make this be a container and we can say MX Auto and mt10 and the PX4 and let's say PX I zero right now that looks way better already and let's style this second div also so right here I can create a class for it and I can say Max W 3XL um what else can let's say Max MX O2 and we can give you a background of white just to distinguish it from the other one so as you can see this background is White and the other one is not is good and let's say P6 good and let's make a rounded too G nice and let's stop it up with like a shadow good perfect now this is basically what we need it should look good now if I swipe right here now this looks perfect this is okay and I think what we can just do is to come all the way to the bottom and give it its footer so let's add a footer and we're just going to come into like index and copy that footer instead of typing it out come here and paste it so we've given you the fter we've done everything necessary now let's come here and see the final product this is how everything looks like which is great the footer also works now when a user clicks on this each of this content like right now if I click on it nothing is happening we want to create another page that is going to show like the full content this just shows the list of all the content all the articles that has been saved but once I click on anyone I want to open a page that shows the title the YouTube link the title of the YouTube video the article that was generated basically all the details of that particular article well now let's create another page for that so now the last thing we're going to do is to create one more HTML file and this file is going to be called blog details so as I said whenever a user clicks on each of these blog post we want them to be able to see the details or the content of that blog so let's do that so we're going to quit this right now and right here I'm just going to open up this and I'm going to create a new HTML file called blog details HTML now what I'm going to do is to have this and then for the title to I'm going to have blog post details and then the next thing I'm going to do is that under this body I'm going to style it a little bit I'm going to say class and for the class I'm going to say background gray 100 and the font plans and then let's say initialized now the next thing we're going to do is to just bring in the nav bar and then we're also going to have to bring in the Tailwind CSS CDN so I'm just going to come back to all blogs and I'm going to copy this right here I'm going to paste that in there and then for the nav bar I'm going to come back in here and I'm just going to copy all of the nav bar content and I'm going to paste it in here so that is done now the next thing we need to do is to just take care of the main content of this particular page now this one is quite easy and what I'm just going to do is that right here I'm going to say main content I'm just going to comment that out just going to comment this out and the next thing I'm going to do is to have one div tag and I'm going to have another div tag and in that other D tag I'm going to have a section tag and in this I'm going to have an H2 and I'm going to have it say something like blog post details and now for the class of this H2 I'm going to do let me just make sure I can see what I'm doing so I'm going to click on Show preview good and I'm just going to close this up a little bit and then right here let's style this so let's give it text Excel nice and then mb4 and let's say one should be like semi bold good and then the next thing I'm going to do to create another div tag and for this I'm going to have an H3 and before I go into that H3 let me style this div tag so this is going to have a border nice and let's give the Border a color let's say gray and 300 nice and let's say P4 so they can be spacing and then we can say rounded LG so this is good and then the next thing we want to do in here we're going to say blog post title so this is where we're going to actually have the title of that blog post and then let's style it so for this we can say let's give a class of text LG and font it be semi Bol nice and then the next thing we want to do is to have right here we're going to have a P tag so the P tag is going to have the content of that particular blog post so let me just say this is the content and let's give you the class of text Gray just so we can distinguish the content from the title and let's say 700 cool now the next thing we want to have is like an HR just to give it a line and there we're going to have a class and let's say my4 good and Border gray let's say 300 nice and the next thing after that is an H4 tag and here we're just going to have the YouTube title so this is the title of the YouTube video Let's style this and for this let's say text LG and font semi let's say semi bold good and that should be okay for the title and the next thing is to have the right here I'm going to have like a P tag so this just says that this is the YouTube title but then we have another P tag that actually shows that YouTube title so we say title of the associated YouTube video and it's not looking too good so let's come here and let's say class say they just give it a gray color 700 so it matches the other gray colors and the next thing we want to do is to have an H4 and this is now the YouTube link and let's give this a little bit of styling so it's like you know so this is should be similar to this YouTube title so we'll say class and for this we'll say text LG and font semi B and one more thing is mt4 now the last thing we're going to have is the actual YouTube link so let's just give that an AAG and let's just give you like a demo YouTube link just https www.youtube.com so I just keep that as that and let's give it the link for now let it go to hashtag and let's give it some styling so let's make sure that it comes out as blue cuz right now it's just black so we'll say X blue and let's say 600 good that is good and let's say over let's give it over so that when we over on it cuz right now it doesn't show anything when we over on it we want it to show like can underline so as you can see that works so this is what we need for this section and we just going to come back here to this div and then we're going to give it like some styling and this should just be similar to what was here initially so if we come here just going to copy all of these classes and then we're going to paste that in here so let's make sure we have class paste that in there and then we're going to do the same for this div tag copy the class I'm going to come here and then we're going to paste it so this is just giving you all the styling we need but it's very similar to the other template so we just decided to copy paste instead of typing it out again so if I come here and look at what we've done you now as you can see everything looks fantastic this says blog post details this shows the actual title of the blog post and this is the content and then this is the says YouTube title and this actually shows the YouTube title and then this shows the YouTube link and we'll make it so that a user can click on that link and then that particular video will open uh the last thing we want to do is just to add the filter and then for us to add the fter that should be right before the end of body I'm going to come here and copy that fter tag copying everything and then paste that in there so that works successfully and then let's just see right here as you can see we have the Navar we have the whole content and we have the footer so everything works perfectly fine now we're going to set up our jungle project so the first thing that I did was to create a new folder in this AI blog app folder that we created earlier in this course created a new folder named back end and in this backend folder I'm going to create my jungle project in it so I open this up in vs code right here so this is just our browser and this is vs code and in this particular vs code folder I'm going to create my jungle project right here so for me to do this let me just open up a new terminal so I'm just going to bring up a new terminal right here by doing this and I'm just going to say jangle admin start project and then I can name the project project AI blog app and as you can see a new project has been created now I'm going to CD into that project so CD into AI blog app and then what I'm going to do is to say LS to make sure I'm in there now I'm going to create a new Jungle app Python 3 manage.py start app and I'm just going to name it blog generator now that we have that if I come in here you're going to see that I have the project which is AI blog app and the app which is blog generator now I'm just going to open up this particular project in vs code because right now what I opened up was this backend folder but what I want to open up is this folder AI blog app so I'm going to do that I'm just going to say file open folder and in back end AI blog app so this is what I want to open right here you can see that we have that opened I could just quit all of this and now the first thing I'm going to do is to just make sure I set up everything correctly such as like the URLs and stuff like that so first I'm going to come into settings right in here and under installed apps I'm going to have to add this blog generator app blog generator and and then the next thing I want to do is to come into templates and in this template I'm just going to add base there actually we're going to take care of this later let's leave this blank for now when we're setting up all the integrating the front end template we're going to take care of this but for now let's leave this as it is the next thing I want to do is to take care of the URLs so I'm going to come into the app and I'm going to create a new file named urls.py and from me I'm going to say from from Jango URLs import path to make sure and then I'm going to have a new list named URL patterns URL and this URL pattern list is going to basically take a list of all the URLs that we have in our application so for example let me just explain what this is so if we have like a a website named my website.com that my website.com is one URL then we can have another URL as my website.com /login that/ login is another URL so this URL patterns basically takes a list of all the different URLs we're going to have on this web application so the first one is obviously the H page so I'm just going to come in here and to specify the homepage in jangle what I just need to do is to put two codes and then leave it blank this means I'm trying to create a URL that is specified for the homepage now I'm going to say views I'm going to have to import from views so once again I you should have a basic understanding of jungle at least to be able to follow along with this tutorial but if you don't I'm going to try to explain everything that I'm doing so now we're going to create import views so I'm going to say from do import views now this views is basically like the back end of our stuff so when everything we're going to do is going to be done in this views.py file that's what we imported so what we are saying now is that whenever a user try to go to the homage we're going to go to views dot let's say index so index is going to be a function that we're going to create in views in views.py and then whenever a user try to go to the homepage it's going to go into the views file and it's going to look for a function named index and then whatever is being done in that function is what is going to be rendered for this URL I hope that makes sense you're going to see that practically in a bit now we're going to give it a name so by giv this URL a name let's just name this index and then we could just say save and for views we're going to come in here and now we're going to have to create that index function and it's going to take a request and for now we're going to pass now the reason that we are passing is because normally we're going to have to put put our you know our front end template but for now we haven't imported or integrated that into our application so I'm just going to say pass for now now the next thing I want to do is to specify this URL for our main project because right now I'm just saying you know specifying everything in here in our URL patterns in the URLs file of our app but the app is just a subset of the main project so we need to tell the main project where to go look for the homepage to do this we need to say include so this include basically tells us that let me just write it out and I'm going to explain what it does so we're going to save whenever Isa triy to go to the homepage include blog generator so URLs now what this is doing is that whenever is try to go to the homage this include basically says go into the blog generator app look for a URLs file so it's going to come into this blog generator app it's going to look for URL Pi then it's going to look for a URL that matches what we put here so what we put here was the homepage then it's going to come into this URL and look for the homepage so whatever is been done here is what is going to be rendered for the homepage so if we follow that chronologically if you come back here so a user tries to come to the homepage it includes blog generator. URLs which is blog generator. URLs and then it comes here and it goes into views. index so it comes into views into index and in here whatever we do here is what is going to be rendered for that homepage so the next thing that we're going to have to do is to basically set up the front end templates and you know the HTML files and all of that so that whenever user tries to come to the homepage they're going to see the HTML template now the next thing we need to do is to set up the front end so we're going to come into our project root folder and we're going to create a new folder named template now this template folder is going to be where all of our HTML files is going to be located now how does Jango know that this is where our HTML files are located we have to tell it so for us to tell Jango that this is where it should look for all our HTML files we have to come into this folder AI blog app and under settings we're going to come down here to templates and then we're going to say base there and I'm just going to say template so what I'm just telling it is that whenever a user try to access or render a template file what you need to do is to go into the base directory which is basically this root directory and go into the folder name template so it's going to come into this folder name template to look for that particular HTML file now I hope that makes sense now we could quck this file and the next thing that we just need to do is to actually bring in or copy those templates that we created earlier in this course into this folder so now I'm just going to drag all of that in here and I'm just going to copy that so I just copied all of this from my finder on my MacBook and I just pasted it right here in vs code so now we have all the HTML files and what we can now do is to actually set up this particular index page so now when the user tries to go to the homepage what we want to do is render this index. HTML template so I'm going to say return return render going to take a Quest and render index.html now this should work perfectly fine I'm going to open up my terminal and on here I'm going to say Python 3 manage.py run server now what this does is that it basically runs this project for us so we can see what we are building going to click enter and it says that we should go to this particular server to see our project so we're going to come into our browser paste it and let's see see what it gives us boom now this is nice as you can see it gave us the HTML template that we worked on and everything works successfully now the next thing we're going to do is to set up our database so we're going to be using post grq database for this application but instead of just creating normal progress C on our computer we're going to be using a manage progress database now a manage progress database is the best for production based application because once we are done with building we can just go ahead and deploy our application without having to you know change anything about our database so that's what is good about manage database and what we're going to do is to use a platform called covery to create this manag database now you can use there are various platform that provide this but I recommend this because I have used this so I'm going to show you how to go throughout the process of creating a managed database so it's kind of like a postgress database that is hosted on the cloud and then you can access it with your project so cover is just a you know it's a platform that provide all this like cloudbased features so anything you need like you know um database deploying your application and stuff like that they provide all of that so what you need to do is to go to console. cover.com and once you go to console. cover.com you just log in you can log in with your GitHub or your gitlab so I logged in with my GitHub and it's going to bring you to this particular page right here now the first thing we're going to do is to create a new environment and you can name this I'm just going to say new EMV something like that and create click on your cluster you could click on automatic cluster but I already created a cluster name Project work and this is basically already um connected to my AWS account so I'm going to leave a like a documentation in the description that shows you how to you know connect your AWS account to this so that everything that you doing on covery will be depl on your AWS account so what I'm just going to do is to leave a documentation or an article in the description below so you can see that that takes like 2 minutes to do and once you've done that you can create a new cluster or you can just use automatic but I'm using this cluster that I created and I'm just going to click on create so now this is my new environment the next thing I want to do is just to create a new database straight away I'm going to click on new service and I'm going to click on create database now database name I'm just going to say blog database going to leave the description optional and we're going to leave this as managed mode and for the database type it's going to be postgress q and we're going to use the latest version and for the accessibility right what we're going to do for accessibility is to leave it for now as public and let's just continue and we're going to leave this the way it is and click continue and then we're just going to click on Create and deploy now it says your database is deployed and as you can see it says deployment cued so we're going to wait a bit for that database to deploy and when it's done I'm going to be back so now as you can see it says that that particular block database has been deployed now we need to connect this postgress database to our jungle application for us to do this we're going to come back in here and then we're going to click on this credentials so this credentials is basically everything we need to connect to our Jango application basically all the connection details for this postgress database but before we even use this I'm going to come back into this jungle project and I'm going going to go into settings. pi and in here I'm going to scroll down to where I have my database so I don't need this what I'm just going to do is to copy this and paste and I'm just going to comment this out and right here this is going to be the same but the only thing that is going to be different is this particular jungle. db. backend. SQL light so this is the engine we're not going to be using SQL light for the engine we're going to be using postgress cure so you just need to change that to jungle. db. backend. postgress cure now for the name we're going to leave this blank for now we're going to come back to this and then the next thing we're going to have is the the user so we're going to have the user and we're also going to leave this blank for now so all of these details I'm leaving blank we're going to get it from this credentials and I'm going to show you how now the next thing is the password and then also blank for now and the next thing will be the host and just going to leave that like that and the last thing is the the port leave that like that now what I need to do is to get all the details I'm going to come back in here and click on credentials so let's first make sure we have everything set up so we have the engine we have the name we have the user we have the password the host and the port now these are all the details you need to connect to any postgress database now let me just close this up and what I'm going to do is here I'm just going to paste in what I just copied so as you can see when we copied this credentials it came in this format which is kind of a weird format but I'm going to show you how to decoding and get all of these details from this particular credential that we copied so the first thing is this covery admin this and this is basically the the user password combination so this is the user and then right here to before this at sign that is the password so we're just going to copy this covery admin and paste it as the user and then for the password after this colum we're going to start from there and then we're going to end at just before the add sign so that is the password and we're just going to paste in the password and the next thing we want to get is the host so after the add sign all the way to that is the host so as you can see this is the host it ends at do and we're just going to come back in here and paste in the host and then for the port 5432 I'm just going to copy that and paste that in here now we can just get rid of this credential now the last thing is the name so the name of the database will be postgress we just going to save that now that we have this done we're going to try and see if everything worked successfully I'm going to open up a new terminal and right here I'm just going to click on create new let's make sure we are in our page which is manage. pi I'm going to do Python 3 manage. Pi make migrations so this is how we migrate our database in Jungle and I'm going to do Python 3 manage. Pi migrate so this migrate is what is going to actually migrate to our particular database so we're just going to give it a few seconds to migrate so as you can see everything is working successfully it is migrating everything that we need and going to take a few seconds and that should be migrated successfully so good so as you can see it didn't give us any error although it took uh you know a little bit of time which is like 10 seconds but everything migrated successfully so that means we've successfully connected this our jungle application to this manage database right here now how do we even know that we've connected what can we see how can we see our database so the first thing that we're going to be able to do is two things so we can either use the jungle admin panel to view all our database to make sure that everything is connected successfully or we can open up PG admin and on PG admin we can basically use PG admin to just view our database so we can put in all of these credentials and then we'll be able to view our database so we can do any of the two but for now this has been successfully connected so if I cut out of this server and then I run it again you now see that I don't have this red warning that we had before before we had this red warning now we don't have that again because we have connected our database successfully now right here I just have PG admin opened if you don't know what PG admin is it's kind of like an interface where you can see your postgress database edit and do whatever you want with it so you can download it from chrome or from your browser just search up download PG admin but normally when you install POS ql on your machine you should have PG admin installed automatically so just search up PG PG admin on your computer and then open it up so I open this up and I'm just going to expand this now what I want to do is that I want to verify that we've actually connected to this database so remember that if I come back here remember that everything right here was migrated so all of this data that was migrated all of these user as you can see we had user migrated art admin all of this we're going to cross check if that is present in this particular database so if that is present that means we've successfully migrated and connected our database and our jungo application together so I'm just going to close this and I'm going to come back here and right here so as you can see we have so we could just input the password and it says databases so what I can just do now is to click on I'm going to right click on database and I'm going to create a new database actually no what I'm going to do is to just connect to a server we're not creating a database we already have like a database server created we're just going to connect to that right here I'm just going to say register a new server and it's going to ask me for all the information so I'm just going to come back here and name is going to be postgress and um we're going to come here and we're going to go to connection so for the host this host is going to be this particular detail I'm just going to paste that and the port is 5432 which is right and the username right here is covery admin so this is the database name which is postgress which is that and then the password we just need to copy all of this password right here and then I'm just going to paste in the password and everything should work but right here I'm just going to say something like cover postgress database now once I say save it should create that and once I expand this and come into databases you can now see that I have three database actually I have one named postgress I have one named this and I have one named RDS admin but this PR postgress was the one that we connected to our jungle application I'm going to expand that and under schemas I'm going to come right here and go into tables now as you can see all of the Jungle database has been migrated so we have the user database the groups database the jangle admin everything has been migrated in here that just tells us that everything is working if I right click now and I click on view data and say all rows you're going to see that it shows us every single row although we don't have any row right now any data in there because we just created it but you can see that it shows us every single thing that we need for this particular database so this is how we can verify that we have successfully connected and migrated our database now the next thing we're going to do is to take care of authentication so we want a user to be able to log in to our application register on our application and also log out of our application now let's just go ahead and get started with that now before we do that the first thing I'm going to do is to introduce you to the jangle admin panel so this is where we can basically see everything in the back end of our application all our databases you know every single groups and stuff like that so for us to access that admin panel we need to create a user that can access it so if I come here and I go to my website SL admin it's going to introduce me to this panel but we don't have any details that can be able to log into this panel so what we need to do is to create those admin details right here in our terminal to do this we'll say Python 3 manage.py create super user now this means create a user that can access this admin page now it says Python 3 so there's an error here and yeah so I'm just going to say admin just going to leave this blank I'm going to give a password and just bypass that and now we have an admin user so we're going to use that details we just created admin and we're going to give you the password and now you can see that we are able to access the admin page good so in this admin page instead of like opening up PG admin every single time we can just view all our database here like all our users and when we also create other databases later in this course we're going to be able to view all of that here so I clicked on user and we only have one user which is the admin user for now but now let's take care of authentication as I said so we want a user to be able to register on our website and you know when they register on our website we're going to come here and cross check if those that users data has been saved in our database so that's why I introduced you to this panel now I'm just going to open up this in another tab so right here I'm just going to open up the normal page we have the normal page here we have the admin panel right here so what I'm going to do is to come into URL so not this URL but the one of our app and I'm just going to copy and paste this three times so this is going to be login this is going to be sign up and this is going to be log out so views. login and we're going to give you a name of login and view. signup we're going to give you a name of sign up VI a logout we're going to give it a name of logout we need to make sure we have a comma right here because this is a list now what this is saying is that whenever is try to go to the login page which is/ login go into views. login and then do whatever it's been done there so right now I'm pretty sure that we're going to have an error that's just because it's saying as you can see our application is no more running because it's saying that views has no attributes login so right now if we come into views.py there's no function named login so so we need to create that so I'm actually just going to do Dev login going to take a request and then I'm going to pass I'm going to do the same for sign up request I'm going to pass for now and I'm going to do the same for log out going to take a request and I'm going to pass so this is what we need now the next thing that we need to do is to basically just straight away go ahead with signing up the user and you know doing most of the major stuff so what I'm going to do is right here so what I want to do just because whenever we so later in this course when we are creating when we are importing some libraries that library is going to have a function named sign up login log out and all of that so because we don't want that to clash we don't want there to be a clash of name I'm going to change this to user login I'm going to change this to user signup and for the logout I could also change it to user logout and I'm just going to come into my views and then update all of that sorry into my URLs it's going to be views. user login views. user signup and then views the user logout I hope that makes sense save this going to come here and save this now the next thing that we're going to do is to come in here and say for login we want to return I'm just going to open up this page right here instead of just saying pass we want to return this login. HTML page so return render request login. HTML I'm going to do exactly the same thing for sign up return render request and we're going to say sign up HTML and for user logout we're just going to Ste pass for now now if I save this and when I come here and let's say I go to SL login as you can see now we're able to access our login page if I go to/ sign up we're able to access our sign up page which is good this is what we want so now now the next thing we want to do is to come into our sign up so we're going to get started with signing up first and right here in sign up we're going to come all the way down here and right here where we see login and sign up we want the user to be able to click there and go to our login page and we're just going to say sign up if I hit refresh and I click on login it takes me to the login page we're going to come into login and do exactly the same thing so we're going to say login and then we're going to say sign up and then I'm just going to close that for the login and I'm just going to come into index also so if I come into index right here if I click on log out it doesn't go anywhere so I could change that right now and I'm just going to say that should go to log out we're going to take care of this later as we move on so we're going to come back to sign up and right here in sign up we have a form so we have this form form right here that says sign up that is basically our sign up form and this is the form that collects all the sign up details and sends it to the HTML page so we're going to have to take care of this form sorry it sends it to the back end so we're going to take care of this form right now so what we're going to do is to give it an action and if we leave this blank this means that we're trying to send this data back to this page so that is what we want and for the method we want to use a post method me now there are two methods you can use post and get so for this type of form we should use a post method because it's more secure and this is like sensitive information so we don't want to use get for this and whenever we use a post method in Jungle we must have something named csrf token now that this stands for cross sight request fery so it's like an attack that can be put on your application but this basically prevents that now the next thing that we're going to do is to create an error message so what I'm going to do is just to have a div tag here just going to have a new div tag and in here I'm going to have H2 and I'm just going to have like an error message I'm just going to say error and I'm going to sty it a little bit I'm just going to put it to the center and for the style I'm just going to make the color red so if I come back in here and go back here and it's refresh you can now see that we have error so basically if a user tries to sign up with like you know like let's say a username that's already been taken or the password doesn't correlate that error is going to pop up here but we don't want this to just show we only want this to show Whenever there is an error so for now we're just going to have this and say error message underscore message now this is like a variable that we're going to pass from our views right here and whenever we're doing that I'm going to reference it and come back and show you how that was done so I only want this to show if there is an error message so I'm going to do if error message so that means if there is a variable named error message that was passed in from our function right here that means there's an error then we want to show that error so let's just say end if and then we're just going to leave it like this we could do this to make it look neat and now the next thing we want to do is to make sure that all of this particular input have a name and an ID because that is what we're going to use to get the values right here in our function so as you can see the username as a name of username name of email name of password and name of repeat password so all of that is working perfectly for now now what this means is that we can come into our views.py and then we can get all of this data so anything a user input in here it will be sent in here so we can get it as a variable so what we want to do is to say if request do method is equals to post so what I'm saying is that if a user try to come to this page using a post method that means they are submitting a form now whenever I come to this page and just click enter this page is being rendered to me using a get method right the only time that this page is going to be rendered using a post method is when we are submitting a form and that is because we used a method of post in this form so that means if the request for this page is being done using a post method that means a user is trying to sign up that means a user clicked on sign up button and they are trying to register thems on our application so if that is true then we want to get all the details that the user wrote so we want to get the username we want to get the email we want to get the password and we to get a repeat password so we want to get all of this now what we're going to do to actually get here is to say request. post username now this is just going to get the value of this input right here which is basically this right here and then it's going to store it in a variable named username going to do the same for email request to post and then we're just going to say email we're going to do exactly the same thing for password and repeat password copy that and paste it copy this and paste it now what we're going to do is to say if these passwords are equal so we're first going to check to make sure that the user inputed or re wrote the same password in this Fields so we're going to come here and say if password is equals to repeat password if that is true true then we're going to do something else that means if this is not true if the password is not equal then we want to send an error so now remember right here where we created this error message variable we're going to come here and say error message will be equals to password do not match and then we're going to render this page again but this time around we're going to render it giving it the error message request sign up. HTML and now we're going to say error message we're going to give it a value of error message so what this is just saying is that if a user doesn't input the same password let's just do this then it's going to create a new variable named error message and it's going to give it a value of password do not match and then it's going to return that page basically this sign up page but this time around giving it an error message so that is what it is doing so right here it says there is an error so let's see what error there is right here we don't have a comma that is the error and this should be good to go but now as you can now see if since an error message variable has been passed it's going to come here this is now true because we said if there's a variable named error message that was passed into this template then show all of this and show the error message but if that didn't happen if the passwords are equal then we're going to try to create the user we're going to say user equals to first of all we need to import user right here so we're going to say from Jango contri do earth models import user and then we also going to say from Jango contri import authenticate we also want to import login or we want to import log out so remember when I said there will be a clash in functions this is what I meant so if we had created this function naming it login and then we're also importing login there might be a clash and we want to import something else named we say from Jango do shortcut import render and redirect so we already have render imported here but let's just remove that and I think that is what we need for now so we have all of this and then what we're just going to do is to come back in here to this page to this function I mean and then under this try except that we did what we're just going to do is to try to create a new user and then we're just going to say user equals to user so we're taking from the user that we imported object so this is how you create a new user do create on the user and then we're going to create it using the username email and we're just going to use one password so we could use any password of the two since they are equal and password and then we're going to say user Dove and then we want to login so this login that we imported right here is basically allowing us to log a user in using their details so we're to say login so after saving that user and creating them we then want to log them into application automatically so they don't have to start logging in again so log going to take a request and we're going to log in this user and after that after logging them in we want to redirect them so we're going to say return redirect back to the homepage now if this doesn't work if there's an error creating the account that now this might mean maybe the user name is taken or the email is taken or something then we just want to create another error message and say error creating account now you can go further by checking if the email is taken or the username is taken and then specifying detailed error message for every single situation you can also do that but for now we're just going to stick to this and what are just going to do is to copy this and paste it right here so this is what we need need so then we want to return this message if there was an error and this should work and let's just save this now and go ahead and try this so I'm going to come in here I'm going to hit I'm going to click on users so I'm just going to do this to check to make sure that any user has been registered on our application so click on refresh and let's just say Tomy Tomy gmail.com just give it a random password um don't use sign up now as you can see it brought me back to this page that means I will signed up successfully but let's come to our admin panel and hit refresh to check if someone was registered there as you can see it says you are authenticated as toy this is a sign that it has been successfully created and I have been logged in but it says you are not authorized to access this page would I like to log in as different account this is because as I said the admin panel is only restricted to admin users and Tomy is just a normal user that I created on the website so I have to log in back as admin to be able to access this page and then I'm just going to log in and as you can see right here we have a new user named Tommy so that was created successfully if I click on the user right here you're going to see details of that user like when it was created and stuff like that the only thing you can't see is a user password which is reasonable you can see every single thing the last time you logged in the last time the date you joined and stuff like that now the next thing that we're going to be implementing is the login so we want a user to be able to log to our application now if I come into this login page right here there's a form and we want when a user we want when the user fills this form and clicks on login they either going to give them an error message or log them into our application now let's do that the first thing we need to do is to come into login. HTML we're going to open it up from here and if we come down here you can see we have a form too very similar to the sign up and we're going to give it an action we're going to let the action come back to this page so we're going to give it the method of post now whenever we use a post method we need to have csrf token now the next thing we're going to do is to come into sign up and I'm just going to copy all of this particular error message tag now I just copy and pasted that error message tag right here so that we have it right here in the L page now the next thing that we're just going to do is to make sure that this input has a name and ID so right here you can see it as ID username and name username ID password name password now I'm going to save this and come back to views right here in login I'm just going to say the same thing I did in sign up by saying if request the method is equals to post then we're going to want to get the username and then the password so instead of typing it I'm just writing it again I'm just copying and pasting it now we're going to have to use this on 30k that we imported now this on 30k is basically going to check if this user name and password match is in our database so we're going to create a new variable named user not this we're going to say user so we're going to say authenticate authenticate is going to take a request and we're going to say username equals to username so we're saying the username that you're checking is this username and then we're going to say the same for password by saying password is equals to password now the next thing is going to do is to say it's going to check if this user is present so we're now going to say if user is not known so what this means is that if this user is not known that means it's not blank that means there's a user right there with these parameters in our database that means log that user in so we're going to say log in so now this login that we imported now actually logs the user in so Quest and then user now remember when I said I had to change this to user login instead of just loging if I left this at login and I'm also importing another function name login there might be a clash that's why I had to change this to user login I had to change it to user sign up now that we log the user in we want to redirect them so we say return redirect to the hom page after logging them in so direct is giving us error this is because we don't have it installed actually we do have it imported so this should be return not request so return redirect and that now if the user is none that means the user is not there then we want to create an error message and we're just going to say invalid username of password and then we're going to return render request login. HTML but this time around we're going to use send it a variable named error message and give it a value of error message now this should work successfully let's try this out now we're going to come back in here and right here we're just going to say let's first it refresh and we're going to say to me and to me and you click on log and right here for us to know that this has was logged in successfully if I come up here you can see that it says welcome toy which is the user we just created now right now we don't have anything for the log out so we're going to take care of that now let me show you what is showing this if I come back in here and go to index. HTML right here I created a new a new thing on the nav bar so I created a new Option but this option is not clickable and I give a value of Welcome user. username inside two craes now using this format it basically gets the user username it currently logged in user it gets the username and then shows it there if I say user. email you're going to see that right here it's just going to show the the user's email so we just want the username now that's how to do that if you want to now the next thing that we're going to do is to now take care of the log out so once a user clicks on log out we want to be able to log them out of our page now what we're just going to do is to come in here so let's just refresh this to make sure that this changes back to toy good if we come in here right here in log out this is the easiest part of the authentication process what we just need to do is to use this log out we imported from Jango doc. and right here we're just going to say log out request so it's basically what this means is that it's logging out whoever is logged in so we don't even need to give it like the username or anything it's just going to get if someone is been logged in if someone is logged in it's going to log them out now after logging them out we want to redirect them back to the own page now what we want to do is that after it logs out and redirect them back to the homepage we want only a user that has been logged in to access this homepage before we do that let's first cross check to make sure that this log out works so log out so it's going to bring us back to this page but you can see it says welcome but it doesn't say anything because no one is logged in but we don't want a user that is not logged in to be able to access this page so what we're going to do right now is to come here and use something named a decorator in jangle so we're going to say from Jango do contrib do. decorators import login required now this login required decorator means that it allows only currently logged in users or only a user that is logged in to access the particular view so for in this situation we want that view to be this index page which is the homage so to do this we're going to come here and just say at login decorator at login required now this means that only a user that is loged in can access this index view now the next thing that we're going to do is to tell Jango where to redirect the user because if a user is not logged in and they try to access this index page it's going to redirect them back to the login page to First login then bring them back here so but right now Jango doesn't know what login URL to redirect them to now for us to tell Jango what we're just going to need to do is to come into the settings. pi so we're going to come right here go into settings. pi and all the way on the bottom we're going to create a new variable named log inore URL and it's going to be equals to login so this is just saying that we're going to the login URL which is basically this URL right here now let's try it out now let me just it Refresh on this page as you can see it redirects me back to the login page now everything has been taken care of regarding authentication now the next thing we're going to do is to create a new view right here named generate blog underscore blog going to take a request and for now we're just going to pass now what this particular view is going to do is that once a user inputs a YouTube link here and clicks on generate that YouTube link is going to be sent to this generate blog View and then we're going to transcribe we're going to get basically get the transcript of that YouTube video and from that transcript we're going to get uh we're going to generate an article from that transcript all of that is going to be done in this view right here now what I'm going to do is to come into urls.py and in urls.py we need to create a new URL and we need to name that generate blog so I'm just going to come here copy the name and this is going to be generate I blog and views. generate blog and it's going to be generate I blow so this is good this is what we need now what we want to do now is to use JavaScript right here in our index at HTML now right here we're going to have a script under here and this script is basically going to do a lot of things first of all once the user clicks on generate it's going to Lo load up this loading cycle if we come back in here you're going to see that we have a loading cycle styling that we created but we made the display none because we don't want that to show yet only when it is click on generate we want that to keep showing until the blog article has been generated so the first thing that we're going to do is to make sure that once a user clicks on generate that blog article shows and then we're going to get the details of whatever the user input in this particular input bar and in this situation it is this particular input bar here and then once we get that we are going to send that details to this views so we're going to first send it to this generate blog URL and that's going to be sent to views. generate blog and then we can receive that information here and then we can do whatever we want to do from that so now let's just go ahead and do that so right here in index.html what I'm going to do is to just paste in a JavaScript so I'm just going to paste in a script right here and just going to over all of this and paste that in so I'm going to explain what all of this does step by step now right here you can see that the first thing that we're doing is saying document. get element by ID generate blog button so we're first adding an invent list now on this particular button so we're saying that whenever a user clicks on this button then as you can see it says to add event is listener so once it user clicks on it then we're going to do all of this that we want to do so this script is only triggered once a user click generate next thing is to get the YouTube link so it's going to get element by ID YouTube link so you remember if we come in here the ID of this input bar which is this input bar right here is named YouTube link so we're going to get the elements so we're going to get the value which is basically whatever the user input here and then remember the loading indicator we are also going to get that and then the next thing that we're going to get is the blog content so if I come back in here there's a space for the blog content this is so that when we've generated the article this is where the article is going to be shown this is that right here and the next thing we're going to do is to say if there is a YouTube link that means if we successfully got a YouTube link value then we want to set the style the display of that loading Circle to block so we then want to show that loading cycle and then we want to say load indicator class list remove eding and then blog content.in HTML want to clear it so whatever was here before we want to clear it right now there's nothing but imagine we put a YouTube link we click generate then we put another YouTube link and generate again we first want to clear the initial blog article that was there before another blog article is created that's why we do this to clear the previous content and now now we are setting an endo so this is the endpoint URL that we're going to be sending the value of this particular form to so that URL is generate blog which is what we created right here generate blog now the next thing we're going to do is to use try and catch so what we're going to do is to basically use um fetch to send this particular value right here this link using a post method to this end point so that is what all of this is doing and it's for the body that means the value that is actually being sent is using Json to send the YouTube link as a value of link so this YouTube link is basically this variable that we created here which is the value of this input bar and then we're just going to wait for a response basically and store that response in a data in a variable name data so once this is being sent to this end point which is basically this particular view once we've done everything all the processing we are going to return a response and that response is going to be stored in this variable name data and then we're going to say block content. inner HTML equals data. content so what we are saying is blog content which is this particular div which is basically whatever is under here then we want to set it inner HTML to data. content so what we're just saying is whatever response we got we want to showcase that in the blog content div and now we can add Ed in back and now we're going to catch so if there was an error we're just going to say error Ur and they were going to alert by saying something went wrong and then after all of this what we want to do is to set this display Back To None So that means once we've sent all of this data to the back end and we've received the response then we want to set the value of the loading Circle To None So so that it doesn't keep loading even after the processing has been done now we have an else so if this YouTube link if we did not get a YouTube link that mean if there's no value then we want to say please enter a YouTube link now this should be working this is all the script we need for this particular homepage the next thing we want to do is to actually come into views.py and under generate blog we first want to do one crucial thing so remember that whenever we're using a post method if I come back in here you're going to see that the method we are using to submit this data is post we have to send in a csrf token but in this case we didn't send in a csrf token so that's going to throw us an error to avoid this error there are two things we can do we can either specify the csrf token here or we could just use csrf exempt so this means that for this particular view we can exempt requ requiring a csrf token so I'm going to do the L I'm going to use csrf exempt and what I'm just going to do is to say from jangle views. decorator I'm going to correct this so from Jango views. decorators csrf we want to import csrf exempt and then right here we can just do add so right here add csrf exempt now this is not going to require csrf token for this particular view normally if you're in production you really need to add csrf token but for now we can just do this so the next thing that we're going to do is to F say if request the method is post so if some data is being submitted equals to post and we're going to do some stuff for now it's going to be pass and else that me if it's not a post method then there's no way we are even trying to access this view without a post method because it's not a normal like page or a normal URL it's only a URL specified for when a user submits or clicks on this generate button that is when it is triggered so if there is no it's not being sent using a post method then we're going to return a Json response so for us to reuse Json response we're going to have to come here and say from Jango HTP import Json response so now we can use that in here and we're just going to say so right here we're just going to say return and then we're just going to return a Json response so just going to say Json response and then we're going to give it just going to make sure you can see that give it error and we going to say something like invalid request method because we don't want a user to be trying to access this using a get method that's why we say that and let's say status you can set that status to 405 so this should work successfully for now we're just going to save this so so this is all we need for setting up this JavaScript stuff and making sure that everything send successfully to this page and what I'm just going to do is to get that detail so the first thing I'm going to do is come here and try to extract that YouTube link from this index. HTML I'm just going to bring that in here so remember this YouTube link I'm going to try to extract it from this Json because we sent in a Json value so I'm I'm going to try to to extract it from that Json value so I'm going to say try let me pass first of all then I'm going to say accept I'm pass again so try data equals Json do loads I'm going to say requestbody so right now we need to import Json to be able to use it so what we just need to do is to scroll up and say import Json that's literally all we need to do is that easy and I'm just going to come back in here now we can use json. load and requestbody so requestbody remember is basically this body right here and the value of this Json is what is stored in here so then we're saying request. load and store it in a variable name data now we are going to say YT so let's say something like YouTube link if equals to data so this data now is kind of like think of it like a dictionary because when we do json. load it basically converts that Json value into a dictionary python dictionary so we can now say data and let's see the name we gave it right here we gave it link so we're going to say data square brackets link so the value of the YouTube link is now stored in this Yore link variable and we we just going to say accept so we want to have a specific accept so we're going to say accept key error Json do Json decode error that means there's a problem with the Json value that was passed then we're going to return so I'm just going to copy this and I'm just going to say return Json response and the error is going to be invalid data sent and then for a status I'm going to give it 400 so this is what we need right here and for now we can save it but before we say let's just save it but before we move on there are a few things that we're going to do and let's just comment this add a comment so we can come back later to do them so we're just going to say we want to get the title of the video and we want to get the transcript and after getting the transcript you want to use open AI to generate the blog so these are the three things we want to do just going to comment this out these are the three things we want to do and then after using open air to generate the blog we also want to save blog article to database and yeah that is what we want to do and I think the next last thing that we're going to do is just return blog article as a response so this is all we need to do is kind of like a todo list for this particular View and for now we've successfully done the script and made everything work so I think what I'm just going to do right now is to come in here and I'm just going to basically say okay right here I'm going to have a I'm going to return a Json response so right here I'm just going to say return Json response and I'm going to say content equals YT link now if I come in here and let's say I put Let me it refresh and I'm just going to put random thing I say generate now let's see what happens it this keeps rolling but it doesn't stop so I think for now we're going to take care of that but for now I think the fact that this keeps rolling this starts rolling is good good but let's see when it's meant to stop so this is meant to stop rolling at this point right here none when we get a response and that response should be block content equal data. content and then we are meant to put that content which is what we did right here so let's see that should we're going to take care of that in a b but for now everything works successfully and we're going to move on to the next step now the next thing that we need to do is to first get the title of the YouTube video and we're going to be using a particular python Library called P tube and then once we do that we are going to be getting a transcript so first of all let's get the title of the YouTube video so what we need to do is to first come here and say from PBE import YouTube so you need to make sure you have PBE installed for you to do that you just need to open up your terminal right here you can just come here and type pip3 install P tube but I already have it installed so I'm just not going to install that but for you you should go ahead and install that now I'm just going to come back here and close this now we can use that particular python library and I'm just going to say going to create a new function to create this to run this and where it's just going to be is after this I'm just going to come here and and say Dev YouTube title link it's going to take a link and we're going to set a new variable named YT equals to YouTube and then going to give it link and then tile will be equals to yt. tile and then we're just going to return title so now this function is going to get the title of a YouTube video so now what we're just going to do is to come back in here and use that particular function just going to copy this and then right here I'm just going to say title that a YouTube title is equals to YouTube title but then I'm going to give it the link which is YouTube link so right here this is where we have YouTube link so this should work successfully it should work so now the next thing that we're just going to do is to get the transcript of this particular YouTube video so right now we're going to be using a platform named assembly AI I'm going to come into the browser and show you this platform so assembly AI is basically a website or platform that allows you to have a lot of audio or speech based pictures so for example something like turning an audio file to get to text like getting a transcript it allows you to do that it allows you to do a lot of AI powered stuff also like speech summarization it's sentiment analysis so it can tell you whether a particular audio is you know the sentiment in there negative or positive and there also a lot of pictures you can do but for this video we're going to be using the transcription picture and that just allows us to get the trans get the transcript of a particular YouTube video so you just need to go to assembly a.com sign up and then it's going to take you to your homepage and right here this is what you're going to see and right here you're going to have something called an API token you just need to copy that token and we're going to use that token later in this tutorial now what we're going to do is to first get the transcription of a particular YouTube video so for us to do this what we first need to do is to get the MP3 file so we're basically going to kind of like download the audio file of that YouTube video first and then once we download the audio file of that YouTube video the next thing we're going to do is then get the transcript of that audio file so right here it says it can't see this YouTube title I'm sure that is because the function is after this but that should still work but if it doesn't work we're just going to move this function above this particular function so now the next thing is to get the transcript and then what we're just going to do to be able to get transcript right here is we're going to create a new function and then we're just going to name it something like get transcription so right here I'm going to say def getor transcription and it's going to take a link also and what we're going to do is to get the audio file so we want to we need to get the audio file of that particular YouTube link and then once we get the audio file then we can get the transcript so for now let's pass this I'm just going to comment it out so we need to create so I'm just going to say pass we need to create a another function that basically downloads the audio for us and that function is what we're then going to access in here to basically show us the audio file now what we're just going to do is to create a new function and I'm just going to come up here and say Def downloador Audio so we're going to be using this P tube that we imported that we installed So Def and then the next thing we're going to do is to say YT equals to YouTube remember the YouTube We imported link and now we want to extract just the audio so we're going to say something like video equals to yt. streams filter I want to filter it to only the audio file I'm going to say that is equals to True DOT first now the next thing you want to do is download that audio file we're just going to say out file creating a new variable now named out file we're going to say video. downlo and for the output part so what we need to do is to set like a path where these files will be downloaded so we're going to say settings. media root so first of all we need to import settings and what we're just going to do is to come here and say from jango.com import settings but right in settings there's nothing named media root so we actually need to go into the settings.py file of this our project we're just going to open this up and go into settings.py and when we scroll down to the bottom I'm just going to paste in something and explain what that does right above this right here going to paste this in and I need to import OS so what I'm just going to do is to import OS and then right here going to scroll down and right here we're saying media URL is equals to/ media and we're saying the root file is os. pat. jooin based there media what this is saying is that anytime we are trying to work with any media file such as audio files video files you know any external media file let's say we want to download a media file or save a media file it's going to be saved into a folder name media that is in our root directory similarly to how we configured the template right here where we said root directory SL templates that's what we are doing for media so now we need to make sure we have that folder created we're going to say media that is good now we can close this and then we can come back back into our views and then what we now want to do is to since we already know that we've specified the media root which is the URL path to what we want to create now we can go ahead in making sure that that is basically saved so since what we did was we did video. download and then video download that and the output part is Media root so now we want to save the file so this is how we save it we say base comma EXT equals to os. path do split text so this should be OS split text we need to make sure we import OS right here so I'm just going to import OS and so right here where we say do split text and then we're just going to say out file now that does the job and now we're going to create a new file equals to base which is this plus MP3 so this is the name of the file but then MP3 is the extension because it is an audio file now we going to say o. rename out file as new file now this should work and what we just want to do is to return new file that is what we want and now we can go come back in here to use so where we add this get transcription we can now come back in here to use that audio file so I can get rid of this now and I can remove the comment so audio file now should be equals to download audio and now since we already have the link passed here as link we could give it the link now that is the file that is downloaded so we already have the audio file of that YouTube video now the next thing we need to do is to first of all you install the assembly AI python library before we can use it to transcribe because now we have that audio file downloaded so we're going to use assembly AI to actually get the transcript of that audio file so we need to first come in here and say import assembly Ai and let's import it as a AI so we don't have to keep typing assembly AI every single time now once again you need to make sure you have assembly AI installed just run pip three install assembly Ai and that is going to do the work for you now once you have that done the next thing you want to do is to come back to this get transcript and under get transcript we're going to use assembly AI but before we can use it we need to set our API key so we're going to say a AI do settings right here API key so remember we're going to say equals to is a variable remember when I told you to copy a particular API key from here now that is token you have to copy this API key from your assembly AI dashboard once you copy that you can come in here and paste it and then you can just decide to close the tabs now cuz that's all you need now the next thing we're going to do is to create a transcriber object so I'm going to say transcriber should be equals to transcriber do transcribe so this is accessing transcriber that has not yet been created so this is actually doing the transcription but to First create that object we need to say transcriber should be equals to A AI we need to access from this Library do transcriber this is what we need to do and then the transcript the actual transcript will now be equal to transcriber do transcribe this audio file so transcriber equals to ai. transcriber and then the transcript should be transcriber do transcribe audio file now what we're just going to do is to return I'm just going to say return transcribe do text now this should work and once we are able to get the transcription and just return the transcriber do text we can then come back in here just going to copy this particular function first I'm going to come back in here under get transcript what I'm going to do is to now say transcription should be equals to get transcript get transcription we're going to give you YT link so now this should work and what we're going to say is if not Transcription so if no just transcription that mean if we didn't get this right here then we want to say something like right here we're just going to say so first of all right here all of this is grayed out because there is an error somewhere so let's make sure that there is no error anywhere so right here it gives us an error for this else let's see what the error is okay it says there is no open AI key okay but that's weird because we're not yet using open AI okay we're going to take care of that in a bit so for now let's just say if not Transcription then we want to return a Json response and that we're going to send it an error because we didn't get a transcription of that particular YouTube video that mean something went wrong somewhere so this should be in a dictionary on a Json format which is very similar to a dictionary and for the value we're just going to say fied to get transcript and right here we're going to give you status of 500 now the transcription section should be working fine now the next thing we're going to do is to take that transcript that we created and actually generate a Blog article from it before we move on there's a bit of an error here because this is kind of grade out and if I click on it you're going to see that it's says code is unreachable that means this there's a problem here and I'm guessing it's from this return because we are returning everything and anything after return is basically not going to be seen so that if I remove this as you can see now everything is perfect now the next thing we want to do is to use open AI to generate the blog now what I'm going to do is to show you how to first get your open AI API key because we're going to need that so we're going to come here and then we're going to go to platform. open.com and it's going to bring you to this platform so you just need to sign up and log in once you've done that click on this personal right here and then click on view API Keys once you click on that you can click on create new secret key and then I'm just going to say blog app something like this and create secret key and it's going to create a new key for you then you can copy that key and then you can use that in your project so what we're going to do now is to come here and we are going to have to create a new function that takes care of this to actually generate blog from transcription so we're going to scroll all the way to the bottom right here so just before user login we're going to say Def and we're going to create a new function named generate blog from transcription and it's going to take the transcript so let just name it transcription and in here the first thing we need to do is to use open AI so for now let's pass so we need to download or install the open AI python Library what you just need to do is to open your terminal and type pip free install open AI just like this I already have open AI installed so I'm not going to do that but for you you should go ahead and do that and in here what you just need to do is to say import open AI it's as easy as that so we just say import open AI so once you import open AI that will allow you to use open AI right here in this particular function that we are creating and now before we even use open AI we have to specify the open AI key so we're going to say open AI API key equals to and then remember this key that we created we're going to copy it come back in here and paste it now we can use that key and the next thing I'm going to do is to have a prompt so what I'm what this prompt is saying is it's basically telling open AI what to do with the given information that we're going to give it so what I'm going to do is to give it a particular transcript which is this transcript in here that we're going to be passing into this function and I'm going to be saying based on the following transcript from a YouTube video write a comprehensive blog article and write it based on the transcript and um I'm also going to tell you to not make it look like a YouTube video to make it look like a proper blog article so I'm just going to copy the prompt and paste that prompt in and explain to you what it does as I said so right here I'm just going to paste this in and as you can see this is the prompt so we use the F and then we're saying based on the following transcript from a YouTube video write a comprehensive blog article write it based on the transcript but do not make it look like a YouTube video make it look like a proper blog article and then I did semicolon I press enter this just press enter on the prompt kind of like leing a bit of space and then I said transcription so this transcription is basically the transcript that we going to pass into this particular function and then I'm just going to say article so we're going to be using the completion picture and that completion feature allows requires us to like have article so once I say article open a knows that under this article it should generate a Blog content or a Blog article from all this prompt that we gave it now what we're going to do is to now make an API call to open ai's completion endpoint so I'm going to say response should be equals to open AI do completion do create and then I'm going to say model the model we're going to be using is text DaVinci so text I DaVinci I O3 and then the prompt is going to be equals to this prompt right here paste that in and the last thing that we're going to specify is the amount of tokens we're going to say Max tokens should be equals to 1,000 so now that we have that done next thing we're just going to do is to extract the generated content from the response so I'm just going to say generated content equals to response do choices 0. text. strip so I'm going to explain this two now this response is going to give us a response like in in a dictionary format and we're going to say get the first one under it get get a text and a strip so if we just print out response you're going to see it's in a dictionary format but this basically just gets us the text that we need and now we're just going to return generated content so now this function should be working perfectly fine now and what we're just going to do is to go back to the initial we're going to come back here to this so right here where we say open Ai and then now we're going to use that function by saying blog content equals to generate blog from transcription and then we're going to give it this transcript that we generated using assembly Ai and now that we can generate blog content we're also going to check if a block content was created or not so we'll say if not block content that means if something went wrong and it didn't create it then we're basically going to give it a similar response to this so we're going to say return Json response we're going to say fielded to generate blog article status should also be 500 now the next thing we now need to do is to just return so we're going to save blog to the database we're going to do this in a bit but let's first return this blog article as a response so right here what we just want to do is to say so I'm going to come here and say return Json response and then we're just going to say content should be blog content now this should work and let's just try this out and so we're just going to come back in here and what I'm going to do we don't really need this again so what I'm going to do is to open up my YouTube channel so youtube.com/ Cod withy SLV videos I'm going to open up my YouTube channel and right here I'm just going to copy the link so I'm going to share one of my videos and copy the link and I'm just going to hit Refresh on this page and now I'm going to paste this and click generate now let's see what this does let's give it a bit and let's see what it does so as this is doing we're going to come back in here and on media we're going to see if to make sure that the audio file was actually generated and saved downloaded and saved in here so let's see what it does right now so right here this is loading for more than usual so I'm guessing the error is coming from somewhere so right here I can see that there's a problem in downloading the audio file because an audio file is meant to be saved here but that didn't happen so if I open this up let me first see if there's any error there's no error right here it just got stuck at this particular loading so I'm going to close this and come into URLs in my project so I'm going to tell you why we are coming into these URLs right here so what I suspect suspect that is the problem it's because we didn't specify the media URL right here which we really need to it's very important so I'm going to say from jango.com import settings and from Jango doom. url. static then import static and now we are going to say URL patterns equals to so I'm just going to come in here and paste this in so we're saying URL patterns equals to URL patterns which is the initial list do plus static settings. media URL and document route equals settings. media route now what we're going to do is to come in here and right here the first thing we need to change is that there's an error with this transcribe so instead of saying transcriber text it should be transcript. text so that is where one of the error is coming from but that's not the main reason why that loading is not working if you come back into index.html we're going to see that under the script we have this particular line right here that says loading indicator do class list do remove hidden now if we come into loading indicator right here there's basically nothing that says so if I come into loading indicator get element by ID loading which is basically so there's no element per ID that is named loading first of all so that is um the problem and what we need to do is to remove that because it's trying to get that but it can't see any element of that so we're going to have to remove that loading indicator and we're going to have to remove this loading indicator too and also right here where it says loading indicator get element by ID loading we need to remove this now everything should be working successfully so let's keep an eye on this media folder and let's see if an MP3 file is going to be saved there I'm going to copy this I'm going to hit refresh and paste it and click on generate now this is doing it thing and then we're going to come here to see good so now we can see that a new audio file has been created and it's given the title of that YouTube video MP3 and that's what has been done and we're just going to come here and wait for it to then first of all transcribe this particular audio file that has been downloaded using assembly AI then once it transcribed that file the next thing is going to do is now use open a to generate an article from that particular transcript so let's give it a few seconds boom as you can see this is a very short article but this is what we want it generates everything successfully it says working with HTML and everything is basically working successfully so this is the article that has been generated and that is nice now this is good but the next thing we want to do is to make sure that a user can be able to save all of these articles so when a user clicks on generate and it shows here let's say user close this tab we want this article and the details of that YouTube video to be saved onto their account so there should be a link where they can click and see all the articles that they have generated now we're going to go ahead and do that now what we're going to do is save all of that particular article into a database and then we also want the user to be able to view all of that article we're going to do that right now now the first thing that we want to do is to go into our models. pip file and in there we're going to create a new database so I'm going to come into models of p and I'm going to create a new database I'm going to say class block post let me just say block post I'm going to say models. model and it's going to have user and for the user it's going to be a foreign key so it's going to be models. forign key and we need to import the user in here so I'm going to say dot contrib do modules import user now we can use this user in here and then we have to say undelete models. casket now the next thing is the YouTube title and that's going to be models. character field and let's say max length should be like 300 that should that is reasonable and then the link to YouTube link that's going to be models. URL field and then for the generated content which is the actual article generated _ content should be equals to models. textfield so it shouldn't have a max length and then the date it was created at so created at models. datetime field and then we're just going to say Auto now add equals true so this should work and let's just give you a title so string self and then let's just return this should be that and let's just return sa the YouTube title for each of it so that means on our database instead of just showing like object or whatever it's going to show the title of that YouTube of that particular blog post for every single database now once we create a database in Jungle we have to migrate we're going to come in here and then we're going to do Python 3 manage.py make migrations good and we're going to say Python 3 manage. Pi migrate now that should migrate and let's give it a second good so that has been migrated successfully the next thing we're going to do is to come into admin.py and we want to register this in the admin.py in the admin panel so we're going to say from models import blog post and right here we're going to say admin. site. register blog post so I'm going to show you why I just did this if I come back in here let me go into I'm just going to open this in a new tab but now I'm going to do slash admin it's going to ask me to log as an admin user so I'm just going to do that and now we have created our database as you can see under the blog generator app we now have a new database named blog post so the reason why I did admin. site. register blog post is so that that database can show can be viewed on this admin panel now let me show you something if I come back to home and right here let's I comment this out if I hit refresh right here you're going to see that now we can't see it although that particular blog post database is present in our database if I don't register it to the admin site I won't be able to see it right here so I'm just going to crl Z that and then it refresh it should connect back right now good so that is what I need and now the next thing that we're going to do is to now come in here so whenever in views whenever we if we come here right here where we says save blog article so just after we've created all the blog content transcription and everything just before we return the response we want to save that particular article and then for us to do this we first need to import that particular model and then once we import the model then we can save it so to import this model I'm just going to close this so that we can have more space to import this model we're going to say from do models import blog post and then for Save blog article right here now what we're going to do is to say new blog article should be equals to blog post doobs do create user because if we come back in here we have user YouTube title let's copy YouTube title user equals going to leave this blank for now YouTube title equals also going to leave it blank and then going to come back to copy all of the values so we make sure we have everything equals and then generated content the only thing I'm not going to copy is created at because it is automatically added by itself so equals and that now the user should be request. user request. user basically just Returns the currently logged in user and then YouTube title should be this title right here which was what we got initially and then YouTube link YouTube link should just be this YT link right here and then generate content should just be block content so now to finish it off we need to say new blog article Dove now this is going to save it to the database whenever a user I'm going to click save whenever a user search or try to generate an article so I'm going to copy this and I'm going to hit refresh it should say welcome admin because we're now login as admin I'm going to paste it now and it generat but now the difference is that this is going to be saved onto the database but not just generating a Blog article from a YouTube video now like the last time this time around what everything that going to be generated is going to be saved into the database so details like the YouTube link the YouTube title the whole article that we created and all of that is going to be saved in here so we're going to be able to come into blog post and then we're going to be able to view the database so for now let's just leave this as it is it says zero block post that means it's still in the works good now you can see that right here everything has been generated if I come back into our database now and it's refresh you can now see that we now have a new data or a new object in there so it gives us the title if you use jungle you need this vs code extension once we click on it we have all the details we have the US that owns it the YouTube title the link which is the URL and then the whole generated content which is the whole blog post or article that was created this is nice but now the next thing that we want to do is to basically show the user all of the article that they have generated so right now we just have it saved in our database but a user there's no way a user can just come here and then see all of the previously generated articles now we're going to do that now let's go ahead and allow a user to see a list of all the blog articles that they have created for us to do this I need to come into URLs and I need to create one URL so right here I'm just going to copy and paste this actually and I'm going to make this blog list and I'm just going to copy all of this and I'm going to have it here as blog list and I'm going to just paste this also as blog list now in views I'm going to come all the way to the bottom and for now I could just actually make all of this small cuz we don't really need that I'm minimizing all of that and right here I'm just going to say blog list and it's going to take a request for now I'm going to pass let me just reduce this and this if I open this up and come into template so we have an HTML file named all blogs so we're going to return that return render request all blogs that's HTML now if we go here and we come to slash BL list good we can now see this particular page but instead of just this static data we want to actually get the data from our database now for us to do this we're going to come into views.py and in here what we just need to do is to say that we're going to create a new variable and say blog uncore articles is equals to blog post doob do filter so we're going to get all of the database from this blog post but we're going to filter it to only the one where the user is equals to the currently login user which is request. user and then we're going to render that particular blog article to the HTML page right here we're just going to do blog articles blog articles so that is going to work that is basically what we need for this but the last thing we need to do because if I come here and itat refresh it doesn't make any change as you're going to see nothing changed because the last thing we need to do is to come in to all blogs and right here where we have after all blog post where we have after this so this is basically the diff tag that takes care of this particular border right here so I'm just going to remove one of it first of all when I remove one of this you just have one and now I'm going to Loop through this the amount of times that we have in here so in here that we have in here so this blog article is basically a list it's like a list of all the data object from our blog post database with the one where the user is equals to the currently logged in user so now I'm going to Loop through that list by saying four article in blog articles and in here just after this div tag I'm going to say end for I'm going to save it right here if I hit refresh it's not going to make any change because it's just one so actually what I'm going to do is I'm going to come here back to the own page so I'm just going to come here and get rid of all of this going to come back to my YouTube channel once again I'm going to open that up and in here I'm just going to take one of the videos here I'm just going to share and copy and I'm going to paste this and generate so what I want to do now is I want to generate another article with from that YouTube video and I'm generating that article just to show you something so I want to show you how it basically shows all of the Articles we' generated even if it's more than one it's going to show you them in like a list format and we'll be able to click on any one of those articles and see the details of each of those articles so that's why I'm generating more than one just so I can show you now let's come back in here and open up media and see if it downloaded that as as you can see it has downloaded the audio file that means it is working so we're just going to give it a few seconds for it to actually generate the article good so now the article has been generated and hopefully it should have been saved into our database so what I'm going to do now is to basically go back to block post now if I hit refresh you're going to see that I have two block post now that is because I've already generated two articles but it doesn't show me the detail that is because I haven't specified the detail here so for the blog title what I just need to do is to say article so I'm going to get rid of all of this article. YouTube title which is which I got from here so article. YouTube title and then the next thing I'm going to do is to say I'm going to copy all of this and this is the content so from the content I want to show like let's say like 10 words from the content the first 10 words just to show here like a spin it I'm going to paste that in there and I'm going to say dot generated content instead of showing all of the content I'm just going to show let's say to the first 80 characters for example I'm going to say truncate characters 80 so it's going to truncate or cut it off after the first 80 characters I'm going to save this and it's refresh and let's see what it does so it says if you use jangle this is the first one we created and then it truncates it and the second one in truncated and next thing I'm going to do is to make sure that it shows this in the order where it shows the most latest article that I created first because as you can see this was the first I created this was the second if it keeps going like this it's just going to as a new one is coming it's going to keep adding to the bottom of the list that's not what we want I want the most recent want to be at the top so with this very easy when we using a for loop we're just going to say for article in blog articles reversed so once you say reversed just going to reverse that particular list and that is going to do the work for you so as you can see now it shows the most recent one first now this is working but the next thing I want to do is that whenever a user clicks on any of this I want to show details of that particular page sorry of that particular article so once I click on any of this article I want it to take me to a unique page and show me all the full details of this particular blog article now we're going to go into URLs and in URLs we are going to create a new URL now this URL new URL we're going to create is going to show the details of a particular blog article so we're going to say blog details I'm just going to copy this paste this here and also for blog list paste that there this should be underscore now the only different thing is that in here I'm going to use this I'm going to have int so I'm going to be using a dynamic URL that is what it's called I'm going to save this and what this is doing is is just saying that we can't just come to slash blog details so we have to go to /blog details SL something now this will be the ID of that particular blog article that we are trying to view for example we want it to be under the same URL but the details of that page is going to be different regarding the ID so once I click on this because it's going to have a different ID it's going to take me to the same URL but different details same thing for this and I'm going to show you how we do that right now so what we just need to do is to come back in here we're going to go into views so we're going to create Dev blog details and on here we're just going to take a request and now what we're going to do is to say blog article detail equals to blog post post do object this time around do get I want to get the one where the ID is equals to PK so what we're going to do is that in here once a user clicked on this we're going to take them to slash Blog blog details slash ID of that particular blog post so we're going to get the ID of that particular block post and bring them here then that is going to be saved in a a variable named PK and then that is going to be passed into this blog details views and we're just going to say we're going to get the details by saying Blog post. object. getet the particular object where the ID is equals to PK remember PK is the ID pass in the URLs now that we have that particular one the next thing we're going to do first of all it says this is not seen we have to say PK right here so we have to add that we are requesting for a variable name PK and the next thing to do is to say if request. user so I want to First make sure that the user that is currently logged in is the owner of that particular blog article so we don't want someone else viewing another person article just because they have the ID so we're going to say if request the user that mean if the currently logged in user is equals to blog article detail do user so if it's the same person then we want to return render request and then we are going to render blog details. HTML so blog details that's HTML and then we're going to send this blog article detail right here into the HTML so that's what we are doing but if the user is not the owner of that email so else s if this user is not the owner of that article we're just going to redirect the user back to the hom page good now this is what we need this should be working the next thing that we want to do is to come into all blogs and in all blogs we basically want to add like an a tag so if I come in here I'm going to say a and I'm going to end that tag right here so we want to make this clickable this particular each of this want to make it clickable and we're going to use an a tag for this I just Tab and this and what we're just going to do is to say slash blog details remember we created blog details right here so/ blog details slash the ID so that is under all blogs slash the ID in this situation is going to be article. ID nice so this is basically what we need now if I hit save that and I come back here and hit refresh now I'm going to click on one and it's going to take me to another page this is what it shows in a bit we're going to show all the details we need but if I come here you're going to see it gives me the ID which is two if I go back and click on this page it gives me the ID which is one so it's the same page the same template everything but we're using a dynamic URL now what we're just going to do now the last thing to do is to come into so I'm just going to expand this and go into blog details so now we're going to come into blog details and then we're actually going to Showcase everything that we passed from here which is blog article detail so right here in Block details what we're just going to do is to look come down and right here where we have just going to click on one and then the first thing that we want to change is the blog post title so right here where we have blog post title I'm just going to delete that and in here I want to have blog article detail do YouTube YouTube title and for the content it's going to be the same thing but I want to have the whole content showing so just going to copy that and paste that in here going into models click on generat content copy that and paste that in there the next thing I'm going to do let me copy this actually what I need is this for the YouTube title so this is going to be the title Associated I'm just going to paste that straight away and then for the link it's going to be so right here we're going to have this link just going to paste this and then for the models going to come into YouTube link I'm just going to change YouTube title to YouTube link and then the next thing we want to do is that whenever a user clicks on that link we want to actually take them to that particular URL or that video so we're going to copy this and paste this in here now let's see how this works if we hit refresh you can now see that it show tells me the title shows me the article the same thing the title right here and then the link so we can actually click on this video to go watch that particular video click on the link and then we'll watch the video so now if I go back right here I could click on anyone and then it's going to show me all the details of that one so if I H click on this that works successfully so now everything is basically working but the last thing I want to do is to take care of this nav bar because on the nav bar I can't really go back anywhere I have to be using this I'm just going to come in here and we're going to start with we're going to start from here right here the first thing we want to do is to just have the welcome and then we want to have so I'm just going to come here and do this so we're going to have the one for welcome and then we're going to have the one that basically allows us to view all the saved plug post so I'm just going to copy this div tag and paste it everywhere save this in all blogs I'm going to come here and then paste that in there and also in index. HTML that needs to be pasted I'm just going to come here and then paste that in here so now if I come here and hit refresh let's say I'm on one of this I could then go to save blog post and then it brings me here and that is basically what we want so right now everything is working perfectly fine with our application so let me go back to the homepage right here everything is working I could put a link and click generate it's going to generate that for me and then once I click on Save blog post I'm going to see all of the blog post I have saved from the most latest and if I click on one I'm going to see details of that particular blog post so everything is now working fine now we're going to go ahead to deploy this application of ours to the web the first thing we need to do is to go into GitHub I'm going to go into GitHub and I'm just going to create a new repository and I'm going to call this repository AI article generator say AI blog article generator and then going to leave this public and everything is going to be as it is I'm just going to create repository now I'm just going to copy all of this command and I'm just going to come up in here let me just cut out of this server and I'm going to paste all of that command in here so right here it gives us an error and this is because we didn't do G ad so what I'm just going to do is to say get in it get add and now I'm going to say get commit I just want to make sure we're adding everything we need good and now we can say get Branch this it Branch to the main and this and then now we can push it just going to push it and we're going to give that a bit of few seconds just to do that and this normally doesn't take a long time and once you come in here once you open this up in another tab it should okay it hasn't yet deployed successfully cool so now it says that has done now if I come here and hit refresh you're now going to see that we have all of that in this particular page right here now that this is done the next thing that we're going to do is to now actually deploy this application onto the web so we're going to deploy this application using a platform called zit so I'm going to open up that platform right now so it's called zit to zit. co that's where you need to go to and I'm just going to log in so this allows us to deploy any application not just jungle applications basically any application they support it I'm just going to log in with GitHub you can log in with Google or whatever you want to and it automatically uses my GitHub to log in and now let's just go get started with deploying our application it's very easy and what we're just going to say is I've got my own I'm going to say deploy my own repo and what would I like to deploy and I'm just going to leave this as it is so for now this are the most popular right here so we're just going to click on on AWS Lambda and under that now what we're going to do is to come into GitHub and we're going to select this AI blog article generator and now it asks us to link our AWS account so my thews account is on my Chrome so I'm just going to quickly switch to Chrome and now what I'm just going to do is to click on connect and then it's going to try to connect to my AWS account and right here I'm just going to click on AWS and it's going to ask for my account ID so to get your account ID you need to log in and then you need to come to the top right corner and copy that account ID just going to make sure that we copy it and you're going to come back in here and P in that account ID and click on ADD now it says it has been added what we just need to do now is to authorize I'm going to click on that button to authorize and we're just going to wait for it to to load up I'm going to make sure that everything loads successfully and then it's going to basically show us this button that says create stack so we're going to wait for that button to show up before we do anything good so now we're going to come down I'm going to say I acknowledge this and then I'm going to create stack so it says create in progress but we're going to come back here and see so it's authorizing now as you can see see it says create complete I'm going to come back here and good it says connected yes so now this works perfectly fine I can come back here now and if I hit refresh it should show me that my AWS account is connected so I'm just going to hit refresh I'm going to click on this blog again and I'm going to now click on continue and now build template we're just going to click on jangle right here and then we're going to leave all of this as it is and then right here what we're just going to do we don't need this and we don't need this but for networking the port is 8,000 so we're going to change the port from 3,000 to 8,000 and we don't need anything here so we're going to click on continue and new name we're just going to say Tommy too let's just give this sandbox and now we can say deploy now this is is going to take a few minutes to deploy and it's going to take us to this page it's going to tell us that build pending and everything and right here you're going to be able to see what is going on in real time and when everything is done I'm going to come back now as you can see it says that the build was failed and the reason why is because it couldn't see a requirement the txt file so we need to go ahead and change that so right here in our code what we need to do now is to come here here and then do pep free requirement. txt so once we do that if I come here we should now have a requirement of txt file and then what I'm just going to do is to then take this into or update this into our repository now what I'm just going to do is after get in it get add and then commit second good one file changed and then after committing Branch we technically don't need to do some of the things again but let's just do it already exist and now we can push and that should be done now if we come back here it's going to start building again so once again that is going to take a few minutes and once we're done I'm going to be back now this says it has deployed successfully so as you can see it says your project is successfully deployed now it's going to take take me to the overview page so here I can see all the details of my project what I'm going to do is to just click on this particular endpoint so this is the URL where my project is hosted you can add your own specific domain but for this video we're not going to be doing that so as I open it you can see that our project successfully loaded so we've successfully built this application and also deployed it to the web so that's going to be all for this tutorial thank you very much for watching and I hope you enjoyed it I hope you got value out of watching this tutorial and if you did please don't forget to click on the like button and subscribe and I'll see you in the next one hi guys welcome to this video in this video we're going to be building a full Netflix clone using Jango so we're going to start from scratch and we're going to be using python and jungle to build out this application that you see on the screen so this is a Netflix clone it basically have all the main functionalities that a Netflix site should have and I'm going to show you how to build all of this in this tutorial and at the end of this video I'm going to show you how to deploy this Netflix clone onto the web using a platform called flow so this is the platform right here you can go to flow.com to check out the platform so we're going to use it to deploy our application onto the web and we're also going to use flow to deploy the postgress database that we're going to be using in this tutorial so in this tutorial we're going to be using Jango and we're also going to be using postgress for the database and for that database we're going to be using flow to deploy that database and we're going to connect that to our Netflix clone so flow basically allows us to easily deploy our applications and also deploy databases very quickly so there'll be a link in the description where you can check flow out and make sure you sign up and have an account so you can follow along with this tutorial and having that said let me just show you what we're going to be building so this is Netflix clone right here that we're going to be building it has all the main functionalities so if I log out right now you're going to see redirects me to this login page and there's also a sign up page I'm just going to log in right now and once I click on login you say not now it's going to log me in and it's going to take me to the home page so as you can see right here it takes me to the homepage and I can browse bunch of films in here and I can click on this and it's going to show me details of this movie so it's going to show me the name the year it came out the length of the movie and I can also click to play so if I click on play you're going to see right right here it's going to take me to the page to play so we just input or we just fixed like this basic video right here but this is not the video you're actually going to be using if you're building this out but just to make things simple we put this basic page right here now if you go back and let's say I click on Breaking Bad now I could add Breaking Bad to list and you're going to see that this is going to be added to the list to my list and it's going to say added now that Breaking Bad is added to my list if I go to my list right here it shows all the list of the films that I have on my application and if I click if I go back home and I click on let's say the breaking bad again and I try to add that to my list so if I try to add this to my list it's going to tell me that this movie is already in my list so I can't really add this again so movie already in list now all of this is being done without the page refreshing now there are also more functionalities that we're going to be talking about we have the search functionality we have genres and you know more that we're going to be talking about we have the features section and that's everything we're going to be doing in this video so without wasting any time let's get started with this course now the first thing we are going to to do is to create a new Jungle project so I'm going to go into a folder on my document and I'm going to create a jungle project in that folder so what I'm just going to do is to say CD documents right now I am just in the default the root directory of my computer but now I have gone into document and I'm going to go into a folder name projects and in this project I'm going to create I'm going to say mkd and I'm going to create Netflix and I'm going to CD into Netflix if I press LS this is going to be blank and let me just clear this to let everything look neat now the next thing I'm going to do is to now create a new Jungle project in this folder so I'm going to say jungle I admin start project Netflix I'm just going to say something like Netflix site I'm going to say LS and now I can CD into Netflix site if I press LS now you can see that we have the manage. pi this means that a jungle project has been created successfully and we have Netflix site now the next thing I'm going to do before I move forward is to just create a jungle app right here I'm going to say Python 3 manage.py start app I'm going to name it call and if I press LS you can see right here that call is there now what I'm just going to do is to open up this particular project now in vs code so if I swipe right this is my vs code right here and I'm just going to open up a new project so just say open folder and right here in open folder I'm just going to navigate to where it is and I'm just going to go into a project Netflix and Netflix site now once I open this it's going to pop up a new window I'm just going to close this now as you can see a new window has been popped up and the project that we just created is right here we can see every single thing right here so I I'm hoping that you have a basic knowledge of jungle for you to follow along with this tutorial but if you don't don't worry I'm going to take you through everything that we're going to be doing in this tutorial now the next thing that we're just going to do is to basically just set up the static and template files so right here what I'm just going to do is to create a new folder or before I do this let's just make sure that this application is successfully running so I'm going to bring up a new terminal right here I'm going to bring up a new terminal I'm going to say Python 3 manage.py run server so this is the command used in Jungle to run your application to see what you're actually building now this says you have 18 unapplied migrations your project may not work properly until you migrate for apps that me until you migrate all of this app now it's saying we should run this command to migrate them don't worry about this we're going to take care of this later in this video so don't worry about all these migrations right now this is where is we're going to come this is going to come into play when we are dealing with databas so don't worry about this for now and I'm just going to close this right here and what I'm going to do is to come here on my browser and I'm just going to open up this so once you go into 127.0.0.1 with the port of 8,000 this link or this basic URL right here is going to open up the jungle project that you're building in this case this is what we are building so as you can see it says the install work successfully now this just means that the jungle project that we created right here has been successful and it's just showing us the default jangle template but now we don't want to it to show us this what we want is our own front end our own design now what we're just going to do is to set that up and we're going to change it from showing this to our own Netflix design I'm just going to come back here and then what I'm going to do is to create a new temp we're going to create a new directory we're going to name it templates we're going to create another directory and we're going to name it static and now this is a file we don't need a file so we're just going to go ahead and delete this file we're going to move this to trash and the next thing we want to do is to create a new directory and name it static now right here in template I'm just going to bring in some files that we going to be needing so I'm just going to come here and what we're just going to do is to copy all of these files so these are the files that I have created for this particular Netflix clone so all of these are just the HTML files and if we open up asset we have the CSS files so I'm just going to copy all of this right here and I'm going to swipe it and go into vs code so we're just going to go and open right here in vs code let's just make sure that it's working in and nope that didn't work so um what we're just going to do is to use like a shortcut so I'm just going to drag my vs code right here and right now since it's beside this finder I could just easily copy and paste just going to drag it and now that it's here now what we can just do is to paste it right here on template so as you can see everything now has been pasted on template we copied it from here and pasted it on template now what we can do is that when a user tries to visit this homepage we can just say we want to show this index. HTML file or let's say we want to show login. HTML file we're going to go ahead and do that in a bit but the next thing we want to do is to take care of static so just the way we added the HTML files which is going to be the face and the front end of this particular project we also need the static files which are the CSS files that is going to be used right here in this project so let's go ahead and copy that we're going to do the same thing and then we're just going to take that and then we're going to copy that so we're just going to make sure this works right here okay let's make sure that works so we're just going to do that again so we do this copy yes that has been done and paste so now this is done successfully now the next thing is just that now Jango basically knows where to find all of these template files I mean till now it doesn't really know where to find it but this is the first step in telling Jango where to actually find all of these files now what we need to do is to go into just going to collapse this I'm going going to go into Netflix site and once you come into the main project we're going to come into settings. P before we move forward let me explain something so remember when we created this jungle project we also created an App so the name of the project is Netflix site but the app is core so once you're creating a jungle project you need at least one app on that project so think of a project as the main application or the main project the main website that you're building and think of an app as like a subset or like a subsection of that whole project so for example think of facebook.com as the project as the main project of that website and then think of let's say messages on Facebook as one app so it's it's a section of the Facebook platform so that is the difference between a jungle app and a Jango project well for most apps or most projects that you're going to work on with Jango you you mainly need one or two apps but most of the time as I said you need one or two apps but sometimes depending on how large your project is of course you might need more than that but for this particular project we're just going to be using one app and that app is core now the next thing that we're going to do right here in settings so settings is in the project directory which is Netflix site and what we just need to do is to First import OS so what we're doing right now is we've created this files where we've stored the template file and the static files but we want to tell Jango that whenever we're trying to call this template files they should jangle should go into this template folder to look for those template files so let's say we want to return a user comes to the homepage and we want to return index. HTML we need to tell Jango that you need to look for that index.html file in the template folder now let's do that right here in settings we have to scroll down to where we see templates and where we see dares right here in dares what we just need to do is to say Bas there now what this Bas there is saying is base there just basically means the root directory now the root directory of a jungle project is the directory that has this manage. py file so where you see this manage. Pi file that is the root directory of that project so now we're saying in the root directory go into template folder so that is what we're saying so whenever a user try to come access a template the directory should be the template folder in the base directory which is this particular directory and that's where it can look for the template files now the second thing is the static as I said static is very important because if once we write this index.html or whatever HTML we need the CSS file to actually style it so it can look nice and that is where the static Files come in we also need to tell Jango where to look for the static files for us to do this we're going to scroll down similarly to what we did in templates as you can see automatically jungle has this variable name static URL because automatically it knows we should use static but the next thing we're going to do is to add two particular variables and I'm going to show you what we are adding so the first one right here is static files there files underscore D now this is going to be a list I'm going to say os. path do join base directory static so now what this is just saying is whenever we try to get a static file go into the static folder in the base directory or the root directory which is basically this folder now this is a list so let's just add the comma here to avoid any errors in the future now the second thing we need to specify is called Static root we're going to specify it under here going to say staticor root and that's going to be equals to os. paath do join and then we're going to say base there static files so you don't really need to worry about what this does for now we're going to talk about it at the end of this tutorial when we're actually deploying this project to the web so this is used for when we put our project to production so when we are deploying it so we're going to run a command called collect static and it's going to move all of the static files to another folder named static files so for now just write this but don't really worry about its functionality so now that we have all of this done the next thing we can now do is to just get started with actually setting up the URLs so now instead of a user coming to this particular page we want a user to be able to go into this index.html page that we already created right here now to set up URLs we can close up this settings.py file and we're going to come into the app which is score and we're going to create a new file named urls.py now in this URLs we're going to say from Jango URLs import path and in here we say URL patterns equals 2 and now we're going to say path blank views do index name equals index I'm just going to explain what all of this does so we're just importing the path from URLs from Jungle or URLs to be specific so this path basically allows us to create a new URL now in a URL in jangle is basically every single page so this own page is a URL if we have let's say this/ login this is another URL login so that is how we specify every single URL in Jango we use this path and right here this just means that we are specifying for the home URL so whenever a user comes to our site let's say our site is mysite.com so once they go to www.mm mysite.com this specifies what should be done if we wanted to specify for what should be done when a user goes to the login page then we just write in here login but that is not what we are doing right here so I'm just going to undo that and now it's saying views. in index so what this is saying is that when the user tries to come into the homepage go into the views file and then look for a function named Index right now we don't really have a function named index so we're just going to leave that blank for now we're going to come back to that but what we can just do is to now write Dev we could just say index should take a request and for now we could just pass so this is what we can do just create a new function that passes and now we have an index function right right here but you can see it still gives us an error this is because we are trying to use this views file but we haven't imported it so what we need to do is to say from dot import views so now that should work and this name is basically just the name of this URL right here so that is what that does now everything should work not yet the next thing we need to do is to specify what should actually be done when a user try to come into this home URL so right here we're just going to return so when a user Tred to come to this home URL we want to showcase this index.html file so we say return render and then we'll say request it's going to take a request and we requesting for the index. HTML file now because we already specified in the settings Jango now knows where to look for template files like this so now that we say we are rendering an HTML file it automatically knows that it's going to have to come into template folder to look for that file now the next thing we want to do is to test this out and you're going to see that it doesn't work yet so we're just going to go to the own page like this as you can see it doesn't work yet it still shows us the initial Jango template now this is because we were specifying all these URLs right here in our app but as I said the app is just like a subset or a subsection of the main project so we also need to tell the main project where to look for you know files or what to do when a user comes to the homepage now what we are going to do is to kind of like copy this URL that we already specified here so we don't need to rewrite it in the project URLs so I'm just going to come into the project folder Netflix site and I'm going to go into URL pi and I'm going to import something named include and what this is just going to do is that we're going to say path we're specifying A New Path for the Ownage and now we are saying include call. URLs now let me explain quickly what this does this is just saying that when a user tries to come to the Ownage this include means go into call. URLs so call is this particular folder or this particular app then go into the URLs file and then look for the same URL which is the homepage now it's going to come into call. URL and it's going to look for the same URL which is the homepage whatever is been done here or rendered here is what is now going to be done now let me just come back in here and it refresh so as you can see this now works successfully everything is working fine so as you can see this shows all the styling except one problem so once we click on one of this nothing actually happens and all of the mod out that was created in this HTML page is just showing on the bottom this is not what we want now this is because we have linked the template files and now Jango knows what to Output when we try to go to the Ownage but for the style we haven't actually connected the style to this particular index.html page I'm going to show you what I mean so right here we could just close up this and I'm going to collapse this and collapse this and in template folder I'm going to come into index.html and right here what we are seeing is that we are using certain files like assets style.css so this asset style.css is basically what we have in here so we have log again CSS profile. CSS style. CSS so there's a mistake we actually made all of our styling are not just in the static file they are meant to be in a folder named assets and this asset is meant to be under the static folder so what I'm going to do is to First create a new folder named assets so we're just going to say assets like that so it should be that and now I'm going to kind of like move all of this in here this should be in here move and then we're going to move the last one in there now if I now come back in here so I'm just going to open up index.html again so now as you can see it just says go into asset / style. CSS but this is not actually how D Jango links CSS files or any static file to HTML file what you need to do is to add something called or something known as the static tag so the first thing you need to do is to come to the top of the f file and then say we're going to do this so we're going to add two craes and then two percentage tags like this and then you're going to say load static so what we're just saying is we want to load all the static files so we can access them right here in this HTML page right here so this works fine now the next thing we're going to have to do is to every single time where we are linking a particular static file like for instance in this case we are linking style. CSS we have to add this syntax right here so just right before we link it we're going to say craes percentage static then we're going to have this and then we're going to have to close it right here and like this so we basically have to do this for every single time we are using a static file so as you might already guess this is going to be a pain and this is going to be a long process there actually is a vs code extension that allows you to just simplify this process because imagine you have like let's say something like 100 CSS files and we have to manually do or type all of this to all of those CSS files that you're linking of course that is going to be a long process now as I said there is a vs code extension and I'm going to show you how that V extension Works quickly so I'm just going to remove what we put right here I'm going to save this and now what I'm just going to do is to say command shift p and this is going to open my command palette before I even show you this let me come into my extensions right here and I'm just going to open up that particular extension I'm talking about so it's called Auto jangle right here this is the extension and what it just does is that it basically automates that process of linking static files in Jango so once you install it what you just need to do is to come here and press command shift p to open up your command pet and you're going to type Auto jangle and you're going to see that auto jangle come out and you're going to click enter now as you can see it says static tags have now been added please drop a review now if you now come here you can see that the tags was automatically added every single time will require a CSS file if you scroll down I think that is the only time where we require a CSS file in here so that's why we only have it in that case but imagine you have and in another file that we're going to be dealing with I think we're going to have more than one so you're going to see how that comes very helpful in linking static files with your HTML file so now let's see and let's save and what we're just going to do is to come back in here now it refresh as you can see it ends here if I click on this now it comes up with this with which is very good so this is what we basically need and this is what we want now the last thing that we're going to do in this section is that we're going to just complete all of the whole links so if I open up this and come back in here so we have log in movie Prof we have all of this now what we're just going to do is that right here in the so I'm just going to come into URL so right here in call. URLs what we're going to do is to just write some links for you know for example the login page sign up page and all of that so what we're just going to do is to come here and say fora say path login views. login and name equals login we're going to do the same for sign up path sign up and we're going to say views do signup and then we're going to give it the name of sign up and now we can just save this now as you can see this is basically what we need and then we're just going to come into the views and then what we're going to in views is that we're going to create a new function for both login and sign up as we specified here and we're just going to return that page I'm going to come back to views and right here I'm just going to say def login request and now we're just going to say return render request and we're going to say login. HTML now Jango knows that it's going to have to come into template folder and look for login. HTML we're going to do the exact same thing for sign up so we're going to say sign up request return render let's spell that correctly and then request and right here we're just going to say sign up HTML so this is what we need now we come back in here and we hit refresh and let's say we go to slash login boom as you can see login shows and if I come to sign up okay this says is not working we're going to take care of that later but now if we change this to sign up as you can see sign up shows but of course the static files or the CSS file hasn't been reflected and this is because as I said we haven't done what we need to do so I'm just going to quickly do that now the first thing I'm going to do is to just copy this load static right here and in login I'm just going to paste it on top and then in sign up I'm also just going to paste it on top and now that doesn't solve the problem completely it just allows us to start solving a problem the next thing we need to do is to just run command shift shft P Auto Jango now the static tags will have been added if you come here you can see the change we're going to save that and for sign up also if you come here you can see there's no static tag once we do command shift p and it say Auto jangle and it enter you can now see that the static TX has been adding every has been added everywhere we need it if I now come back in here and hit refresh you're going to see the difference can now see that we have a very very good looking sign up page where we can do everything want by signing up and now we're also going to get a login page which is a very nice looking login page also where we can get what we want now we're going to be creating a database for our application and we're going to be using flow to create a postgress database that we're going to connect to our application so flow right here as you can see is a platform is a cloud platform that allows us to deploy backend applications and databases very quickly so it basically allows us to deploy our application and also allows us to deploy databases so we're going to be using their database feature to create a postgress database and we're going to connect that database right here in our application and at the end of this course also we're going to be using flow to deploy this application onto the web so I'm going to show you how to do both of those things using flow so it's actually quite easy and simple to use flow what you need to do is to go to flow.com as you can see right here there will also be a link in the description below where you can just click and you go there so go to flow.com and it's spelled f LZ so flow with a z so fl.com and then just get started so once you click on get started it's going to take you to a page where you're going to sign up but I already have an account so what you need to do for me is to just login so you can either decide to log in with Google guub or just normal email address so what I'm going to do is I I already have an account created with my GitHub so I'm just going to continue with GitHub and log in with GitHub so it's going to log me in with my GitHub right now let's just give that a second and we should see that logged in right now so as you can see I am logged in this is what you should see when you first create a new flow account and now it's going to tell you to create a new workspace so now let's just say something like to me workspace and then we can create that workspace now this is going to create very quickly as you can see the workspace has been created now as I said the first thing we want to do is to create a database so I'm just going to click on new project and I'm just going to call this something like Netflix Netflix project and I'm going to create the new project so in my workspace you're going to have to create a project now that project you can do whatever you can create a postgress database you can deploy the application so everything regarding this Netflix application that we're building is going to be deployed or it's going to be deployed right here in this project so the database is going to be deployed here and the actual application is also going to be deployed here so for now let's click on create a postgress database and let's just leave it as database so it says get your database a name we're just going to say database and then we can just create database so we're just going to wait for that to create and that shouldn't take take a long time so let's see let it load up as you can see that has created successfully that was actually quite quick and fast compared to other database platforms so now what you need to do we already have this created what I'm just going to do is now to connect this postgress database to this Netflix that we're building right here and I'm going to show you how to do this right now so now what you need to do is to come back in here and go into to connection info now right here in connection info we have all the details we need to connect to this database so we're just going to kind of like copy and paste all of this information and then paste them into our settings file so I'm going to show you how to do that right now so now let's just go back in here and then we're going to come into our project so our project folder is Netflix site and we're going to go into settings now we can close up this so we have more space now we're going to scroll up all to where we see this database now right here in database what we're just going to do is to comment this out we don't need this this is using the default SQL light that jungle uses but we want to use post gr because it's it's better so now what we're going to do is to say databases equals going to open that and then we're going to say default then we're going to open that now we're going to have a dictionary and we're going to say engine now if you could see the engine that was being used there was sqli 3 but now we're going to change that engine to jangle DB so we're going to say jangle do DB the backend the postgress ql underscore s c so it's PS y c o p g 2 and this is how we specify the engine being used now before we move forward I have to say you have to have two things installed before you can actually use this use or connect postgress to your jungle application in general so I'm going to open up this terminal and show you what you need let me just create a new terminal and you need to have something cyop 2 installed so you're going to say pip fre install cyop 2 now most sometimes when you try to install this it does pop up an error if you try to install it and it gives you an error just install cyop to Binary now any one of these two will work as long as you have any one of them installed now I already have both of them installed to be honest so I don't really need to install that now the second thing you need to install is pillow so pillow is going to allow us to be able to use like images videos and all of that in this our database so just make sure you have those two things installed once you have them installed you can move forward with what we are doing so I'm going to close this and now the next thing is to specify the name of that databas we're going to leave it blank for now come back to it and the next one will be the user again we're going to leave it blank we'll come back to it and let's just make sure we're having the right thing this should be a comma not a semicolon this is python or JavaScript and password blank again and post blank again and Port I mean we don't really need to leave the port blank we already know what the port Port is going to be so most of the time the port is 5 432 now let's go and get all of this information so we start from the name so the name right here as you can see is database name we're just going to copy that this is a database name and then we're going to come in here and paste this and then the user so the user right here is just this which is flow user we're going to copy that and we're going to paste it in user which is what we want and then the next thing is password this is the password we're just going to copy the password and then we're going to basically paste that password and then the last thing is the host so the host right here this is the host we want and then we're just going to copy that and paste that host in here now this is basically all you need to connect this your database this postgress database to this application right here so with done that successfully we can now save this file and close it so we successfully connected this database to our application now the next thing we want to do is to now migrate everything from this our application into the database so remember when we were creating this database right here so if I come back remember when we were running this project and it says you have 18 unapply migrations so this is because Jango automat ically gives us some database tables like admin authentication sessions just so we don't have to do all this manually but it expects us to migrate all of that into whatever database we're going to be using the reason why I didn't migrate it earlier was because automatically or initially as default Jango uses SQL light and that is why if I had migrated it we migrating it to sqlite but now that we've connected the actual database we want to use let's migrate all of that right now so to do that I'm just going to say Python 3 manage. Pi we could say make migrations first although there's really nothing to change so it's going to say nothing detected so no changes detected and now we're just going to say Python 3 manage. Pi migrate now this is going to migrate that into our postgress database let me just make this a little bit bigger as you you can see that it's being migrated it's just going to take a few seconds cuz this is the first time so it says o migrated okay admin okay so the three admins have migrated okay and so off for the permission the email username everything is been migrated and let's just give it a second now sessions is starting to migrate that is done and it should be done any second from now so let's give it bit a moment done so as you can see everything has been migrated successfully now this database that we created is connected to our project so now we can move forward with other aspect of this project but how do we even know that this database is connected so we can verify this by doing two things the first thing we can do is to create a new data and then check in the database that when we created the data is actually showing as a table so we can do that but how do we even see the database that been created so we can either open up PG admin and then connect this database right here to PG admin or we can just use the Jango admin panel so Jango gives us a default admin panel that just allows us to see all our tables and all our values we can basically use that for this so what we're going to do is to quickly I'm going to show you how to use that so right here I'm just going to create a new private tab going say file new private window and I'm going to run my project on that window right here so okay it says log out no this is not what we want we want to run/ admin so this is the admin panel right here this is what Jango gives us and once we log into this admin panel we will be able to see all the data all the database tables and everything in our application but how can we get the credentials to log in here so this is the admin credential not anybody can just log in we have to create this credentials right here in our terminal and then the credentials that was generated is what we're going to use to log to the admin panel now I'm just going to scroll up bring this up now to create that what we just need to do is to say Python 3 manage.py create super user that is going to do that for us and now we can just say admin as the we're going to say admin as the username going to leave the email blank and then we're going to give it a password and it says the password is too similar and too sure I'm just going to bypass that by saying why and that has been created successfully I can close this now I can come here H refresh and then I can use those details I just created to login so let's just make sure we're inputting the right thing and click on login now once we click on login it should log us into the application good so as you can see it says welcome admin because we just created our admin details now if you come into users you're going to see that we actually have a table so these are two tables that we migrated into the postgress database now this is basically how we are viewing the data in that postgress database so we have a table named users and on here we have one data which is one user which is the admin that we just created so when we actually take care of authentication logging in and signing up on our website you're going to see how when a user signs up all the details are going to be stored right here now we are going to take care of user authentication on this website so we're going to allow a user to sign up and log into the website this is actually very straightforward so I'm just going to walk you through all the steps to just follow along and the first thing we want to do is to take care of the sign up page so when a user wants to sign up to our website we want them to be able to go to the sign up link and we want this HTML page right here to be rendered so let's do that so right here in views we already have the sign up page and when they go to/ signup sign up. HTML is rendered so now what we need to do is to create a form here so if I come down here we as you can see we have this form it collects email address using name password repeat password and it has a button that clicks on get started so what we're just going to do now is to say Action Now action I'm going to leave it blank now when we leave action blank this means that when the user clicks on submit we want this particular all the details that the user input in here to be sent back to this page so it's going to be sent back to this sign up page then we're going to collect all those details and then submit it to the database so the first thing I want to do is to come in here we could quit this for now and then I'm just going to go into the sign up page so now this is the sign up page we're talking about now let's make sure everything is working fine with it now what we just need to do is to say method so for this method we're going to use post and you should always use post whenever you're dealing with sensitive data like passwords emails and stuff like that so that's why we are using post and whenever you're using a post method in Jango you must add csrf token so csrf csrf token so csrf stands for cross site request fory it's kind of like an attack that someone can basically make on your application but this token just prevents it that's a summary of what this does now the next thing we need to do is to make sure that this form all the inputs has names so this email we need to give it a name of email now this is kind of like the ID that we're going to be using to get the value that the user inputs in this input tag in our views.py so if it doesn't have name there's no way we can collect or refer to this particular input so let's say user input the email right here for us to get the in the value that the user put in here we need to refer to the name of that input that's why it needs to have a name now the name for username too we're just going to leave that as username and for password let's just give it password and for the second password let's give you a name of password to and that is all that we need for the name now we can save this now and when the user comes in here input all the details and clicks on get started all of that value is going to be sent right here in so first of is going to be sent to this sign up page and since this sign up page is going along with views. signup is going to go into views look for the sign up function and now we can collect all of those data now what we're just going to do the first thing we're going to do is to say if request so we need to check the type of request or type of method that the request method that is being used to access this page so if I say if request the method is equals to post then we're going to do something and what we're going to do is basically collect all details sent going to comment this out for now so we're seeing that if the request the method is equals to post do this else we just render it normally so let me explain what this this means so when I come in here and I just go to my website SL sign up I'm requesting for this page using a get method I'm not submitting any form I'm not submitting nothing I'm just requesting for this page automatically it uses a get method but if I input some data here and then I click on get started then this all those details is going to be sent back to this page then I am requesting for this new page which is the same page using a post method so that's why we're saying if the the method used to request for this page is a post method that means some details are being sent to this page we want to collect all those details then we're going to do whatever we want with those details else that means if it's just any other method which is just a get method just render the sign up page normally this is what we're doing right here now what we're just going to do is to now collect all of those details so right here where we have if we come back in here let's just bring a closer we have email username password password to so we're going to collect all that so say email equals to request post so this is how you collect the value square brackets and then you put the name of that input so this is the name of that input so this should be the same as this names right here now we're going to do the same thing for the username so username equals to request post and now we're going to collect the username going to do the exact same thing for both passwords so password equals to request. post password and password two is equals to request dopost password to now all the values that the user has input in this input field the values are stored in these respective variables so we can access all those values using these variables we can do anything we want now we can print them we can send it back to the user we can do anything but now what we just want to do is to check that all of these values are correct so the first thing we want to do is to check that these both passwords are equal because once the reason why we are asking for the password to be written twice is because we want to make sure that the user knows what they are writing and they writing the right password so both of these must be the same so we're going to check if both of this is the same if that is true then we're going to check if the email already exists in our database then if that is not true we're going to check if the username already exists if it bypasses all of those checks then we are going to create that user and save that user in our database but before we go forward we need to import some stuff so I'm going to come up here and import a few things the first thing is redirect so we're going to use this when we want to R direct a user to another URL from our views right here the next thing is to import user so I'm going to say from Jungle before we go move forward let me explain what I'm importing so I said I'm importing user basically what I mean is this user table is what I'm importing right here so we want to be able to access this user database in our code so for us to access it it's a builtin model by Jango so we're going to import it from Jango to cont sc. earth. models and import user and the next thing we're going to import is Earth so o just allows us to basically authenticate a user which means log that user into our platform next thing we're going to import is messages we say from Jango do contri and you're going to see when we use all of this right now import messages so for these messages let's say remember when I said we're going to check that the if the password is if the email exist let's say the password is not the same and we want to send back an error to that user saying yo your password is incorrect that's where we use messages so we use messages to actually send back those responses and now that's what we need for now so let's just come back in here and actually do the sign up so to move forward what we're now going to do as I said we're first going to check if the password is same so we say if password is equals to password two so if they are the same then we want to continue but if they are not the same then we want to send a message it say messages doino this is how you send the message back to the HTML page to the front end request and now we type in the message password not matching so what we're just saying is if password is same then we're going to continue with the other checks but if it's not the same we don't even want to continue we just want to tell them Yo your password is not the same and now we're just going to say return redirect sign up so we're just redirecting them back to this same page so after telling them the password is not the same we're sending this back to this sign up page and they we back to this page basically now the next thing we want to do if the password is same we then want to check if the email exists so for us to check if the email exists we're going to say if user which is the user model that we imported right here so we say if user now just follow along doobs filter email equals email. exist now what this this means is that it's just checking the database to see if user doob future so it is filtering all the details all the values or entry we have in database and it's filtering with the one where the email is equals to this email so what that means is that it's going to go into the user database right here then it's going to filter with only the value the users that have an email address that is equal equals to this email address that was provided by the user so if that is true that means we already have this email address registered in our platform then we want to send an error that this email is already taken so now we're just going to say messages doino request email taken and now once again we're just going to redirect back to this page so this is where we're using redirect again sign up right so if this exists we're going to do this but what if it doesn't exist so let's use an else if in this situation we say l if so the next thing we want to check is if this is not true then it's going to come and try this second one so we want to check the same thing so we're going to filter to see if the username is ready taken so say if user do objects do filter username equals username do exist and then we're going to have a colum so if the user name exist as I said it's going to do the same thing it's going to come here look for the Val the users that have the same username as the value that the user input on the form if that is true if there is a user like that then we already have a username corresponding to this that already exists and we're going to tell them that the username is also taken messages doino request username taken and we're just going to return redirect sign up let's make sure we're having the right syntax sign up so we're redirecting the user back to the sign up page now this is good we already basically this does all the checks right now but the next thing we now want to do is if all of this is successful if the password is same the username doesn't exist the email doesn't exist now we want to now sign up this this new user and registered them on our platform so we're going to say l that means all of this we successfully checked when now say user equals user so we're going to use the actual user that we imported doob do create user so create user is the method that we use to actually create a new user so right here just going to say create user and then we're going to create the user by giving it all the details so we're just going to say user name equals to the username that we just created so we're saying the username in this database right here username should be equals to this username that was gotten from this right here and then we're going to do the same thing for the email we're going to say email equals email and we're going to say password equals now we could give this anyone password one or password two because they are the same so we're just going to say equals password now this is right this is what we need and we're just going to come here and say user Dove now that is saved the user has been saved successfully on our database but we could do two things we could now redirect them to the login page to make them now log in with the detail they just created or we could just log them in directly to our page and take them to the own page so I think we're just going to do that now let me just write a comment we say log user in we're just going to write that out and now we're going to say user login equals to earth. authenticate so now this is when we are using the Earth that we imported remember I said we're going to use this to actually log the user into our platform that's what we're doing right now so we want to authenticate them with their username and password so username equals username and then password equals password so that is what we need and now we're now going to say off do login request now we want to log this particular user this user and the password I we just say user login and once they are logged in we want to redirect them to the homepage return redirect to Homage just like this now this should take care of everything everything should be working perfectly right now the next thing we need to do is to just go ahead and test this I'm going to save this I'm going to come back in here and hit refresh so it says you can't connect to the server now let's see what's going on I'm just going to bring this up oh go back here okay I think it has solved itself so let's come back in here and it refresh again good now let's just say Tomy gmail.com and let's give a username of Tomy let's just give it a random password another random password making sure they are the same and let's click on get started and now let's see what it does boom as you can see it brings me back to this homepage now this just basically means that this works successfully now if I come back in here and I now it refresh right here you're going to see that there's now a new user register start on our database good so Tom me Tom me@ gmail.com and as you can see right here in staff status it has an X now this is just showing that this user is not allowed to come into the admin platform because it's just a normal user registered on you that is very good because that is what we need so this has worked successfully but we didn't check it well so we need to check for if the user inputs password that is not correct or if a user like inputs a name that's already taken or email what is going to happen so we're going to come back in here I'm just going to go back to sign up for now normally when a user is logged in they shouldn't even access the sign up page you should just redirect them back to the own page but we're going to take care of that later in this video for now let's just stick to this now we're just going to come here for us to do this so we sent all the messages back to the sign up page but we didn't actually show them here so what we need to do now is is to come on top of this form right here and we're just going to create a new div tag and then I'm going to add a little bit of like styling I'm going to leave that blank for now and so what we're just going to say is four so we're going to Loop through all the messages for message in messages showcase the message and let's end that for Loop let's just say H5 like this so this is what we need but let's give you a styling let's just make the color red right so we could do that here we could just do that here anyone is fine so we're just going to say h 5 color red this is what we need this should take care of that so We're looping through the messages that was sent from here is this messages and let's see if that works so I'm going to come back in here now and I'm going to use an email that has been taken so Tomy gmail.com I'm going to use a random one and let's see what it says as you can see it says email Taken good let's try for the username we already have Tomy registered so let's give this a random email get started now this should say username taken as you can see it says username taken now let's say let's give you random email random username but different passwords let's just say uii some random thing and then let's just give this way different passwords and let's see and as you can see it says password not matching so we have successfully implemented the sign up functionality into our platform the next thing we want to do is to make a user log to our platform when they go to the login page now the next thing we want to do is to take care of the login page so this is quite easier compared to the sign up page what we just need to do is to come here and we're going to do something similar to what we did in the sign up so right here in the login. HTML we're just going to do something similar so we're just going to create we come right here under form so we're just going to create a form and say action and we're going to say blank and then we're going to give it a method of post and then we're going to say csrf token because we're using the post method and we're going to give it a name also so name username and name password now this is what we need and we're going to come back in views and right here we're just going to say if request the method is equals to post and then I'm going to say username equal to request do Post username and password is equals to request the poost password now we're just going to do the same thing what we're just going to say is user so now we're just going to log them in directly equals to off. authenticate and then we're going to authenticate them using the username equals username and password equals password just like that and what we're going to do we have to check if this user actually exists in our database because if they don't exist then we can't actually log them in so to check we're going to say if user is not not known now if the user is not known that means the user is actually present in the database then we'll say o do login request user and then we say return redirect to the Ownage now this is basically what we need but else if the user is none then we want to send a message messages. info I'm going to say request credentials invalid and now we're just going to say redirect them back to this login page so this is basically what we need so if request the method is post we're going to do all of this but if it's not post then we say else just return this normally and now let's just test this out I'm going to come in here and I'm going to go to slash login and we're just going to say let's give you a random details that is not in the database so right now okay so it says this multi so what we just need to do is to come here where we have password so the first thing is it says there is if we come in here on line 12 which is this so I think it's saying that whenever you have this it means you are basically using a value before assigning it so what you need to do is to come in here and then we're just going to say okay so what this is because we're saying if request the meod disos do this but if it's not what we can just do is to remove this like this and then just do this let's try this out again so log in now let's see if if I go back and we do tell me so it still gives us that same error now most of the time as I said this is because we're assigning something before we actually use it so let's just make sure that everything is correct so username equals username then password is equals to password the request post post password and then we have this so what we're just going to do to make this easier is to we could just copy and paste what we did here and just twe up some stuff but first let's make sure because everything should be correct so if request method is post the username equals request post password equals that and then user equals password user is not known after login then redirect else messages. info credentials invalid login so the next thing we want to do first is to make sure that we have the styling for the messages right here so right here where we have this form we're just going to paste in this messages that we did and then we're going to come back in here to see why this is not working once again let's save this save it's not correct so let's see what's going on it's running again so let's refresh and let's try to login and let's see what it gives us so it still gives us this error so the reason why we might be getting this error is maybe because there's no value here so let's come into login and make sure everything is correct so this is where the problem is where this should be password now let's try this out again this should work successfully now let's go back it enter and let me use random credential and it should give us credentials invalid good but now when I do to me and then I log in with this particular one it should log me in and redirect me back to the homage good everything is working successfully now once the user is logged in we want to show them that they are logged in so right here we want to have something that says like welcome year or something like that like welcome back user and it's going to say the username so we want to have something like that and we're just going to do that right now so what we just need to do is to come up here where we have so I'm going to come back to the code and then we're going to scroll down to so if we come here we're going to see that we have about where we have login log out so that's going to be somewhere here and we're just going to create new one so here we going to say welcome and then we're just going to show them their username we're going to say user. username and then it's just going to be hashtag like this so this is what we need if I save this and now I come back in here you're going to see that it says welcome to me and now we have log out this is what we want this is working perfectly now the next thing that we want to do is to just go straight into creating uh databases so I'm going to open up models I'm going to close this I'm going to come into call and open up models.py so this models of p is where we create our jungle database it basically allows us to create whatever database we want and for this we're going to have to create two databases so the first one we're going to create is the database where we store the movies of that are going to be in the website so we're just going to do that right now so the first thing we need is to create a new class so we're going to say class movie models do model and genre choices and we're just going to leave this blank for now now the next thing is to actually take care of all the details so we want to have a title so we say models. character field let's say max length for title should be like like 225 or 255 and we're going to have a description and you're just going to say models. text fi and we're going to have a release date so the date when this movie was released so say models. date field going to have a general so this is going to be a character field but it's going to be chosen from this General choices going to show you what I mean so character field and we're going to have max length of like 100 and then choices so the choices is going to be General choice ches and now we're going to come into General choices and then we're going to actually have some choice so say action is the first one we want to have the actual value will be action and then we want comedy and then the actual value will be comedy and we're going to do the same for drama and we have drama and for the rest I'm just going to put the rest in like this and this is all we want so we have aor romance Science Fiction and Fantasy now we have that done for the general choices and we're just going to come for the length so we say length so this is the length of the movie for these let's use a positive integer field not just a normal integer field because if you use a normal integer field then it could be negative but a movie or time cannot be negative so we say positive integer field so we use that like that and then we're going to have an image cover say image card so this is like the card right here this is the card of the movie but this big one is the cover of the movie so we're going to have two images the image card we say models. image field and then we'll say upload to so this is the folder where all the images will be uploaded to and we will just say movie Images slash something like this is what we need and then we're going to do the same for image cover so we just change this to image cover and then there the image field we also want to upload it to Movie images same folder and now we're going to have the actual movie video so this is going to be a file field models. file field and then we're going to upload this two movie videos so we're going to say moviecore videos SL the last thing we're going to do is to kind of like count the movie views so we just want to know how many views a movie gets we might use this we might not use this let's just add this for now so models. integer field just going to be a basic integer field and as default it should be zero so when a new movie is added as default the views should be zero then we take care of that later now the next thing we want to do is to add like an unique ID we don't want to use the def jangle ID jangle just uses normal integers we want to have a unique ID so say _ ID equals to models. uid field and then let's give it default and we're going to use the uu ID Library so we're going to say import uu ID so default equals U id. uuid4 like this and then now we're going to save this this is what we need and the last thing we're going to do is to say deore St Str and then self return self. tile this is what we want so this is working now but there's one more thing we need before we move forward with migrating this to our database so whenever you make a change to mods file you need to make migrations and migrate it so this is just a file right now but we need to kind of like push all the changes to the actual database but before we do that there's something we haven't set up so we are dealing with images and videos and files here but we have we haven't actually set up the folder where it starts so right here we says upload to Movie images but where does that movie images folder lie so just the way we set up static files right here we also need to set up something called media I'm going to create a new file a new folder called media so this media is just saying that this is where every anything containing a media file is going to be stored so for us to do this now we need to go back to the settings again and then we need to add something there so I'm going to come into project file open up settings now I'm going to scroll all the way to the bottom and right here I'm just going to say media _ URL equals to/ media slash so this is just saying the media URL should be/ media and then the next one is Media root the media root is going to be os. path do join base directory media so once again what we're just saying is that the path to this media file is going to be in the root directory SL media so if I open that up you're going to see root directory so right here is the root directory SL media so we Sav that now the last thing we need to do containing this media is to come into the project folder once again and open up URLs now the reason why we're doing this is because we need to add this media URL to the URL patterns right here of this particular project so what we just need to do is to come here and then we're just going to import two things so we're going to say from jango.com import settings and the next thing we're going to import is static so from jango.com URLs do static then import static now once we have this imported we're now going to say URL patterns equals to URL patterns plus static settings mediacore URL have a comma we can say let's just close this up and let's remove this so we'll say document underscore root is equals to settings media root so this is what we need to make sure that that works and everything should be working perfectly fine now so now we can come back to models and now we can actually migrate this model and see the change in our platform so we're going to come here and we're going to say Python 3 manage. Pi make migrations it's going to show you the change that is going to be made to your database so it says no change detected now this is just because we are making all this change in our models but if we come in here to our settings right here we didn't add this core as part of an app under this project so we know that we created this app under this project but Jango doesn't know that so we need to come into installed apps and we just need to add this app named core so once we add that now Jango knows that anything dealing with this app is part of this project and that also goes for the database so now let's try to run that again and now you should see the change that is going to be made to the database as you can see it says we're going to create a new model name movie now let's migrate so let's run that migration Pyon free manage. Pi migrate now let's see that should migrate for us yes applying call. 00001 initial good that has been done but the thing is if we come back into this admin panel and I go to home I'm not going to see that database right here so as you can see I don't see that movie database right here this is because we have a file named admin.py if you come here you're going to see we have admin.py and that file is basically where we can register what database we want to be shown here so right here now we're going to import so we're going to say from the models import movie so now we want this movie database to show there to do this we're going to say admin. site. register movie let's make sure everything is being shown done now if I come in here and I now hit refresh you're now going to see that under the call app I now have a new move movie database table and if I click on it I'm not going to have any details for now but I can add a movie from here like this and you're going to see that I'm able to add a movie so automatically generates a unique ID but then I can add a title description the release day General I can choose the image card videos and everything that I need I'm just going to cancel so this is good I'm just going to go back to home right here and then now what what we just want to do is to just going to remove this is to make sure that once we come in here this movie is created successfully as you can see everything is done and we just want to make sure that there's no errors with all of the field so uui is a u uid field this is a character field text field date field character field integer image image file and integer so that has been created successfully now what I'm going to do is to take care of how the page looks so right now nothing really works none of all this are just dummy values and dummy buttons now I want first of all user needs to be able to log out I want a user to be able to search and all of this should actually work so the this HTML file that we already created is linked to a static file right here which is basically style. CSS and we have all the styling here for the film card the model content the modal and everything we need so what we're just going to do now is I'm just going to basically Implement so if I come up here I'm going to close this up and right here I'm just going to paste in some code and explain what I'm doing so I want to make some changes right here so where we have this nav I'm going to just change this nav so I'm going to just come in here and leave some spacing then paste all of this so now this nav right here is basically the same thing that was there but I just added a drop down for the ACT for the all the genres and I added home so once a user clicks on home they go to the home page and right here which is my list so when a user adds a list to their to their movie list I want them to be able to click on it and go see their list now the next thing that we're going to do is right here I'm going to basically change this particular input button so this is what I'm going to do right now so right here where we have this input it's the same form but I am just adding this action search and this method post so we're going to take care of all of this right here you can see when the user clicks on action it goes to j/ action we've no created a general URL we're going to do that and right here once a user tries to search there is a form that is sending that all these details to the search page we have also not created a URL name search but we're going to take care of that so let's save this and then let's come in here and H refresh and then when we come in here and we click on General so this should drop down so there is something wrong there we're going to take care of that too so don't worry about that and now what we just need to do is I'm going to come into right here so for this styling so we have styles. CSS so I wrote a style for the genre that is why it's not dropping down note that all of this code is going to be in my GitHub in the description below so don't worry about if you might not understand like this CSS that we're going to write because we're not really focusing on the front end in this tutorial but so what we're going to do is I'm going to paste in the code for the drop down and um basically so I'm just going to come here and I'm just going to paste in this code so this is just the code that takes care of the drop down menu so once we click on drop down we want everything to be done so this is the CSS code and I'm just going to quit that and now once I come here and H refresh you're going to see that once I click on drop down this should drop down okay so that doesn't drop down and I'm just going to come back in here open up style. CSS so first of all we need to make sure that index.html is linked to style.css yes it is linked to style.css so right here everything should be working not sure why it's not working so let's just quickly check so we have the F card we have the card over we have the modal modal content and then we have the display okay so we are going to take care of that later let's just keep going with this and now what we can just do is since we already have all of this done right here and now we user can search and all of that the next thing we can do is that we want a user to be able to actually view movies then so they can watch those movies add it to their list and stuff like that so let's just go ahead and do that so the first thing we want to do is actually add a few movies so I'm going to come into my database right here and I'm going to click on ADD and now it's going to tell me to add a new movie so what I'm going to do is I'm going to add one named a four From Grace let me just say the best movie release day I could just say today and genre we could say drama and let's just say so this is going to be in minutes so let's say like 60 minutes now I have a folder right here where I have a few movies that I created and what I'm going to do is I'm I'm first going to click on the video and so this video clip so I just have like this 15 seconds video clip that is going to stand as the actual video but in a real scenario of course you're going to have the actual 1our video and for image card under a Fall From Grace I'm going to click on the card and for the cover I'm going to click on the poster so this is what I need and the movie views is going to be zero automatically and I'm going to save and add another and now the other one I'm going to add is let's wait for this to save and then we're going to add another film so let me say the night agent a good movie and for release day we can say today genre we can say something like action and let's just say this is also 60 minutes and for the image card we're going to go to movie files and then in here we're going to look for where we have the night agent and then we're just going to click on the card and then for the cover we're going to click on the poster and then for video now we're going to go back a little bit so movie files and then we're going to click on movie clips and let's just save so those two is enough for now I'm just going to click on Save good now this is what has been saved and I'm just going to come back in here if I hit refresh nothing is going to show but what I want to do is that I don't want all of this dummy data to show and all of this I want it to get all of these movies from the database so to do that we're going to come in here and we're actually going to go into the views file and in this views file what we're going to do is that that under so we're going to come here under the homepage so I'm just going to close this a little bit now under this homepage first of all we need to import that model so we're going to say from the models we're going to import movie so we need to kind of import that databas into this file so we can use it now what we can now do is to get a list of all of the movies that we have and then when we get a list of all of the movies we can pass it to the front end so let's just do that right now so we're just going to say movies equals movie doobs do all and then what we can just say is copy and we're going to create something like a context so a new dictionary we're going to say movies is movies just add a comma and now we're going to send context to the front end so we can access these movies now that is basically all we need and what I'm now going to do is to come into index.html now right here in index.html I can now Loop through these movies and then show the details so I'm going to show you what I mean so right here in index. HTML we're going to scroll down all the way to where we have the list of movies so we have the list of all of these movies movies as you can see we have all of this right here so this is okay good yes so what we just need to do is to get just one I'm going to remove all of this so we just need one of this and then we're going to Loop through it so right here what I'm just going to do is to say four four for movie in movies and for so we have two movie in the movies database if we come here now we should just see two of the same thing so we have two but the only difference now is that we are not getting Dynamic data this is just static data that we input in here what we now want to do is that right here where we have so where we have this image URL what we want to do is to remove this right here so just make sure we're removing the right thing okay let's go back again remove get rid of that and then we're just going to get rid of all of this and then right here what we're just going to do is to get so that movie for for movie in movies we're going to get that movie do image cardor card. URL so this is how we get the URL of that particular movie image so now we can come back in here and hit refresh now it should give us two different images a four from grace and the night agent so as you can see that works now if I come back in here and then I create a new movie and if I create a new movie and let's just look for a new movie let's come here image card let's just say something like Homeland and then let's click on this card and then let's click on the same cover and then for video let's go back and click on over Clips so let me just come here and say Homeland good one release date today General drama and then length I could say 60 movies and I could just say save and now once we say save that's going to take a few seconds to save and now we can just go back here and once I hit refresh you're going to see that one comes up here so once we add anything to our back end right here in the panel it automatically shows here as a new movie added so this is good this is actually what we want and we're just going to leave this blank for now we're going to take care of this later so this is what we want we want to change this from my list to popular on Netflix so we that shouldn't be my list so we just say let's just copy this and we'll say popular on Netflix we just save that and it refresh to see that that changes and now what we're just going to do is that as you can see once we click on this all of it gives us the same details so we want this to have so it says movie title it says detailed information the year and all of that so we want all of this to just be this specific V movie so if I click on this movie I want to see the card and details of this movie and I want to be able to play that movie let's go ahead and do that now going to come back in here what we need to do is after film card let me just open this like this so you see this and right here where we have the styling also that will take care of itself and for this this div tag let's just bring that here now what we're going to do is we're going to use JavaScript so right here we have a model right as you can see we have this model that says move information here all of that so so we're going to use JavaScript to trigger this we're going to have an unclick function so as you can see it says unclick show model so once we click on a specific image a specific movie card we want to get the details of that specific movie and then show that details here even if we are still using the same model but we want the details to be dynamic every time any one of this is clicked now let's do that for us to do this we're going to have to pass certain information and I'm going to show you that right now so I'm just going to paste something in and I'm going to explain what it does so right here where we have that so right here right here is where I'm going to paste it in I'm going to paste a few data and I'm going to explain why I'm pasting that so we're just going to do paste so as you can see let me just give you a space so you can see the difference now what I'm doing is when a user clicks on this we have an unclick function and the name of the function is show model but then I want to send all these details alongside when they click on that so I'm naming this data title and the value is movie. title data description movie. description so I'm basically giving it everything we need and I'm also giving it like a video URL where we can actually watch that video we're also going to take care of this where we create a URL where a user can watch the movie so this is all that I'm giving it and and this is how we can pass data from this to the JavaScript file or to the JavaScript so when we come down here now right here in show model normally this just has like a basic show model it just shows this so this is what we're going to use for now but I'm going to remove all of this and I'm going to paste something else in here so for this show model I'm going to use a different show model and I'm going to show you why so I'm just going to paste in the show model function so right here where we have this this is the new show model function so this is what we are doing now this is the function but then we are getting all the details sent so the title description as you can see is data title data description so we are using element. getet attribute to get all of these details if I come back in here you're going to see all of the details so data title data description they are attributes so we are getting all those details and storing it in a variable now that we have all of those details what we can now do is update the modal content with the movie details so this modal content that we have right here instead of just having movie title length that has a static data we're going to update it with this all of this particular details and then we're going to show the model let's save this and now let's test it out so if I hit refresh once I C click on this so as you can see it doesn't click it doesn't work right now so let's go back now the problem is because when we come up here where we have if I come here where we have show model we didn't input this so we need to add this just to make sure that we are sending this particular div tag with all the attributes to this function now once we come back and then we hit refresh we hit refresh and then we click on one you can see it pops up with that particular one and if I click on the night agent it pops up with details of the night agent the year the description the name the movie poster and same for Homeland so this works successfully so now that all of this works as you can see I click on one everything works the next thing I want to do is to create a page where I can watch these movies so once I click on play I want it to take me to a page where I can actually View and watch these movies now let's just do that so what I'm going to do now is that I'm going to come back in here and I'm going to go into my urls.py so I'm going to look for that need to delete this and come to urls.py so right here in urls.py I'm going to create a dynamic URL I'm going to explain to you what that is so a dynamic URL is kind of like a URL that changes so let me first write it out and I'm going to explain so I'm going to do path I'm going to say movie slash string column PK close then slash and I'm just going to name this views movie and this will be name equals movie now what I'm just doing now is that I am writing a new movie right here and this is a new movie URL and what it does is that when a user goes to slov slash a particular ID based on that ID is going to play a movie so this is a dynamic URL as I said so this is how it's going to look like so once I click on play right here it's going to take me to SL movie something like this slovie slash the ID of that film so let's say the ID is this so because it recognized that ID then it's going to play and show me all the details of that particular film when I do the same for here once I click on play I want it to be a new link so it's going to be website slov but slash an ID of that film so this string is what is kind of what identifies that ID so the ID is is a string but we are giving it the name of PK kind of the variable name is PK and the data type is a string now that we can save this what we just want to do is to come back into views and then here in views we can now get started so now we're just going to create a new view and we're going to name this view we're going to name it movies so I'm just going to come here we can do that under here we're going to say death movies so one thing before we even let's finish this I'm going to say pass so one thing before we move forward before a user can access this hom page I want the user to be logged in for us to do this we're going to import something so we're going to say from Jango do contrib do. decorators import login required now this login required will allow us to restrict A View to only users that are logged in so the user must be logged in before you know a user can actually view that page or access that page now let's add it here so we say at login required then we have to specify the loging URL so if the user is not logging we want the user to be redirected to the login page like this so we're going to do the same also for movie so we don't want just any user to watch a movie want only logged in users so we don't need for this good now what we can just do is in here for this movies because we have PK that is being passed in here we can basically get that particular movie and then display it so what I'm going to do is we're going to collect PK from the URLs which was what we collected here PK and then we're going to go back here and now PK is basically the movie ID so we can just say something like movie uu ID equals PK so now once we get the movie ID we can now get that details of that particular movie so we're going to say movie so say moviecore details equals movie do objects but now we're going to say dot get so now that we say do get what we are just saying is get that particular ID so going to say object. get the one in which The UU ID is equals to U movie id id is equals to so so just so you know what I'm looking at so this uu ID is basically this so I'm looking for the one in which this uu ID is equals to PK which is also movie uu ID so once we get the details of that particular data now what we can now do is to just say context create a new dictionary and then we can say movie detail give it mov details and now right here we can return render request movie. HTML context now what we can do is to make sure that we actually have an HTML page so let's come in here right here we have movie. HTML which is good now the next thing we want to do is to kind of like test this out so now let's say we have let's go in here and then let's click on home land so it says it can't connect let's see why it can't connect come back in here it says code of view as no so now let's views as no movie so this is move should be movie that should work now let's give it a second good we come back in here and once we hit Refresh on this it should open up that particular page for us and once that page is open we're going to get the ID good so now we've gotten the ID what we can now do is to say this/ mov and then we can paste in that ID and then it should take us to a movie page to kind of show us a movie so let's see what it does so as you can see it takes us to this page right now it's just demo data it says movie title back to movies you know it says all of this there's nothing really playing it's just there and about movie now what we want to do is we're going to get the details of the this particular movie that has this ID so now to do this we're going to come back in here and then we're going to open up movie. HTML so right here we're just going to go into template and we're going to open up movie. HTML so in movie. HTML now what we just need to do is to basically come here we're just going to close this right here close this and then for movie. HTML what we're just going to do is to say we're going to come here and we're going to say we're going to look for the movie title so for the movie TI to we're just going to say movie moviecore details. title that's going to show the movie title and back to movies when the user tries to go back to movies we're just going to take them back to the homepage and then for part to the movie so now what we're going to do is let's paste this we're going to say movie details _ details Dov video. URL now we're going to say movie details. video. URL so we're basically in that movie. video. URL so it's going to get the URL of that video and play it now if the browser doesn't support video then we're just going to tell them your browser does not support video type but if it does it's just going to show the movie now the next thing is just to show about the movie so right here where we have about the movie we're just going to say I'm just going to do this like this and I'm going to say movie details dot description save and that is the main thing that we need and we can just come back in here now and it refresh just to see what this does so I'm just going to mute it now as you can see as I said earlier the video I uploaded was just a quick 15 seconds video but now as you can see we have Homeland the name we can go back to the homepage and we can watch a movie and we can just see about this movie so as you can see this is basically the movie right here we can skip we can do whatever so this is just the demo so this is just an image from a free stock image website that I took and I'm just using it to demo how you can actually do this so this works but the thing we want to do is that we want to let's go back to the Ownage by just clicking on this once we click on this we want that when we click on Play We want it to take us to the movie page for this particular movie now let's do that we're going to come back in here and now we're going to go back to index.html and what we're just going to do is that right here where we add the data so right here so we're going to have to pass data video URL so once we pass this data video URL right here as you can see we said slov slm movie.id remember when we pasted this in and I said I was going to explain so that is what this does so now we basically have the movie URL that we need slov slov ID which is what is going to use to access it we have that and right here in the JavaScript you're going to see that it update once it gets that data video URL so not this one so once we have the movie URL it should be let's get this yeah this the data video URL is basically the movie URL we are updating it right here with this that has an a tag so we're updating it with the modal content that has an a tag and we're updating the actual link to data video URL if we come into modal content let's go into modal content so we have this mod content let's look for the a tag so the a tag right here is this now is replacing this with the URL that we specified in here which is this slov slid now if we come back here this movie. HTML is not what is going to be shown it's going to replace it with it and that is going to be triggered once this button which is play is clicked now if I come back in here this should be working already once I click on play it should take me to that page as you can see it says a fall from grace and then it says the description if I go back and let's say I click on homeland this time around and I click on play now you're going to see that it says Homeland it gives me the video that I uploaded and it says good one so this is working perfectly fine now we want a user to be able to add a movie to their list so what we're going to do now is that we're going to come into models.py and and right here in models.py let's just open up this and come to model.py so right here models.py we're going to have to create a new model and we're just going to name this model let's come down here we're going to name this model movie list we're going to say class movie list models. model and now this is going to have two foreign Keys actually so we're going to have one for the user so the owner of this list so we're going to say owner user and we're just going to say models. forign key and now we're going to say we need to import something we need to I'm going to scroll up right now I'm going to import settings so we need to import settings because we're trying to use the user model as a foreign key so we need to import that from settings jungle.com import settings now what we're going to do is when we scroll down here we're going to have two models one for the user and one for the movie so what this is basically like it's just like a model that connects two different models together so I'm going to say settings dot o user model and since the foreign key we say UND delete models. Cascade this and now we can now have another foreign key for the movie so it's going to link to a movie model or movie Object say models. foreign key and we're going to link it to this movie right here this one so we can say that and then once again we will say UND delete Cascade that should be models. Cascade now once again once we make any change to model.py the routine is that we run make migrations and migrate so let's run that going to come here and then we're just going to say Python 3 manage py make migrations it's going to show you that you're trying to create a new model named movie list and now we're just going to migrate that change so we're migrating it now and it should be done in a second so let's give it a second and see done so now it is done the next thing we want to do is to come into admin and we want to register that mod model in our admin panel so we're going to say movie list and now we you can just say copy paste and if I come back in here in our admin panel and go to home under call you're going to see that I now have movie list good so now that we have a database table that can store the list of a users's movies what we can now do is to come into so we're going to come into views before we even come into views we're going to come into URLs and we're going to create two different URLs so right here in urls let's scroll we're going to create two new URLs and this is going to be a URL to view the list and a URL to add a list so I'm just going to say path and from path we're just going to say this and then we're going to say my list this just a URL that's going to show a user a list of all their movies that they have saved and we're going to say views do myor list and we're going to give it a name of my list so now that works we going to add our comma and the next thing is to now create add to list so this is kind of like a URL that is going to be adding a particular movie to a user's list so we going to see what we're going to do so say views do addore 2core list and then name equals add to list it's going to add a comma so this is done right now and actually one more thing we didn't add the log out so I'm just going to copy and paste this and just say log out we also need a log out functionality so a user can be logged out I'm just going to p P all of this now all of this is done before we move forward with adding to list let's just take care of the logout that is very very easy I'm just going to come into views and in views I'm going to scroll all the way to the bottom and right here I'm just going to create a new logout so I'll say def log out and what I'm just going to do is to say request and now I'm just going to say o. logout request and then once the user has been logged out I'm going to say return redirect back to the login page so if a user has been logg out want to redirect them to login this also we want need to be at login required loging required so we don't want the user to try to log out when they are not even logged in so if a user tries to access the log out page without being logged in it will first redirect them to the login page before bringing them back to log out so now this is done and then let's quickly test this log out and see so we're going to come into come back here hit refresh so that doesn't work and I am pretty sure I know why because we haven't created the views so we haven't created views for my list and add to list so what we're just going to do is I'm going to close this up close this up and right here what I'm just going to do is to say def I'm going to create my list going to take a request and I'm going to pass for now I'm going to say def I'm going to create add to list going to take a request and once again we're going to pass for now I'm going to save that and now we can come back here and it refresh now we have views for them now if I click on log out you're going to see so right now nothing happens and I'm pretty sure I know why so I'm going to come back in here and I'm going to go into index.html I'm going to go up to the where we see log out so right here we want it to go to/ logout so if we come back in here now and hit refresh and then we click on log out you see that it's going to log us out and bring up back to the home the login page now let's try to go to the own page without being logged in we try to come here without being logging you see it redirects me back to the login page so what I'm just going to do now is to log in back and now it's going to take me to the homepage let's see that and that should take only a second good welcome toy back in the login page now the next thing is to just continue with what we were doing so now we have created this add to so right we have created this add to list page so what we want to do now is that once a user clicks on one of these and then clicks on add to list we want to send the user that is currently log in and then we want to send the the name of the movie or ID of the movie to this page and then this page will add that list to this movie list database now let's go ahead and then let's do that so for this we're going to use JavaScript and I'm going to explain why we're using JavaScript specifically we're going to use Ajax and once again I'm going to explain why now this is because if we come back in here once a user clicks on add to list we don't want this to go to another page so we just want it to kind of add it to list and then show the user right here that this movie has been added to list that is what we want to happen we don't want it to add to list and then refresh the page because that's not a good um it's not it's not really a good ux so what we're going to do is we're going to use Ajax to make sure that once a user clicks on this button this mve is going to be added to their list and saved in the database without this page having to refresh nothing is going to change you're just going to see a message right here saying added to list now let's do that the first thing is that we want to come into we're going to come back here and then we're going to come into index.html so right here in index we're actually going to have like a basic so I'm going to come here and then we're going to have like a basic script tag so I'm going to show you why we have the script tag and you're going to see that so right here under going to scroll all the way to the bottom so right here under all of this what we need to do is to create a new function and you're going to see why we are creating this function so this function is going to be called add item to list so let's say function add item to list going to open and close this function so let's leave this blank for now and then we're going to come back to this now before we can even do this this we need to make sure that in the model right here where we have the add to list button we need to set like an event listen now so once a user clicks on that button so let's make sure we're in the right button so that is this button so once a user clicks on this button that says add to list we want this function to be triggered so this function right here that we're creating we want it to be triggered so let's copy the name of that function and then let's go back right here to that model where we see add to list so what we're just going to do is to give it an ID so we can access this function so we're going to say ID and we're going to say add to list button and then we're going to say unclick so that means on once this button is clicked trigger the add item to list function in our script so that is what this does and now we can go back to JavaScript and set some stuff so as I said we're going to be using Ajax for this in this function and before you can use jQuery or Ajax you need to kind of import it right here in your heading so what we're just going to do is I'm going to show you how to import that so you just need to have a script so right here we're just going to say script and then we're just going to close that and we're just going to say the source is this URL so this is the URL to import Ajax or jQuery to be specific now once again all of this code is going to be in the description in this video so if you're stuck or you can't really see anything well on the screen just get it from the source code so now that you've added that we can come down in here and then actually add our code so what we need to do is to as I said submit this particular this particular form so it's just a button so we need to submit this form so the form is just the basically the movie ID and what we're submitting is the user that is adding it to list so what we're going to do now is that right here we're going to create a new Mo variable say con model equals to document do get element by ID so we want to get the old movie model model so that ID is this if we come up here you're going to see this movie model so want to get this old model and the next thing we want to get is the movie ID so we're going to say the movie ID is equals to model so now we're getting it from this model right here do query selector now what we want to get is we come up here under movie ID on movie model we're trying to look for where we see an a tag so right here where we see an a tag this is what we're looking for so what we just seeing is like under the modal content so under modal content we're going to look for an a tag and then we want to get the link so the link right here is movie. HTML but remember we wrote a script that's is going to change this link to the specific link that we need so we're going to get that so we need to make sure we're copying the right thing so we're going to get it from this class under this div tag then we're going to get this link so what we're just going to do is right here we're going to say do model content get the a tag and then I want the value of the iPad link like this now we have the movie ID and the movie ID is what we need for the user we can get that in the back end now what I'm just going to do is to kind of paste in a an Ajax code right here so it's like a jQuery static code and you're going to see it and I'm going to explain everything so this is the code so this is just an Ajax so this is how we submit basically we're submitting a form it just allows us to submit a form without refreshing the page that is how to explain it in a basic way so now the URL is like the action where we sending this form to so we're saying we're sending it to the add to list URL if I come here you're going to see that that is this URL we're talking about so we're sending it to that specific URL and then if we come back in here we're using the type post we're giving it the movie ID the data that we submitting is movie ID and that is this and we're giving it csrf toing because we're using a post method and this success so what we are just doing I'm going to explain this later after we basically do the back end in the views or I could also explain it now so what this is just saying is that once we get a response we are just going to say add to list button data. message so add to list button is basically this button right here so if we come into the model right here so add to list button is this button so instead of add to list we want the text on there to change to the data. message and the data. message will be something like item is added to list or this has been added to list we're going to take care of that in the views but then if every something goes wrong and we have an error we just want to show that error now let's go into this add to list and collect these details I'm going to save this and now we're going to come back into views and right here in views we're going to write a a block of code now what we're going to do here once again we're going to say if request the method is equals to post so if it's post then we want to do something but if it's not post then we want to return an error so we're just going to pass again but I'm just going to say return error so let's just comment that out so this is the basic syntax of what we are going to do so now if the request. method was post what we want to do is to get the ID so what we're going to do is to say movie we're going to say moviecore URL ID will be equals to request poost doget moviecore ID so now this is the movie ID but the thing is that we actually need to get the main ID so I'm going to explain what I mean remember if we come in here what we are passing is if I can look for it is the movie ID the movie ID right here is the hyper Link in this a tag and remember that this hyper link is not just the ID it is basically the whole link if you can remember right here when we did that so if I come all the way right here so where we have this this is the IP Link right here so data video URL this is the ID we need but this is the whole thing that is being sent right here into views so right now we have move slov SL the ID so what we need to get is the actual ID and to get that ID out of that we're going to use rejects of course there are various ways we can do this we can even try to just strip it out right here and maybe pass it directly or some way but this is just another way we can do it so after getting the movie ID the whole movie URL so this is basically the movie URL not the movie URL ID so let's just leave it like that though and we're going to use re regular Expressions to basically strip out the ID from this and I'm going to show you how to do that so we're going to have like a pattern so we're going to write a uuid pattern so we're going to use reject to recognize the uid pattern from this URL movie URL so I'm going to paste this in and this is the reject that recognizes it so it's a regular code that recognizes it and once you have that what you need to do is match so we need to match we're going to say re do search so we need to make sure we have our imported so we're going to say import re so that's basically how we import reject let's also import one thing while we're still here so from Jango HTTP import Json response so this Json response is how we're going to send the response back to the back to this index. HTML right here where we can actually get the response where is it right here so we're going to use Json response now let's scroll back down right here and now that we're here what we can just do is to now say read. search so we're looking for this pattern uid pattern in movie URL ID once we get that what we're just going to do now is say movie ID so the actual ID now is going to be match. group so match do group so this match. group I will say if match else none so this is basically going to get the ID and store it in movie ID now that we now have the movie ID what we're going to do is to say we're going to come here and say the movie now the actual movie that is going to be added to the list we're going to get that so we're going to use get object of 404 so I'm going to import that from shortcuts so we're going to say from Jango do shortcut import get object no get object of 404 now the reason why we're doing this is because it's a very quicker way to just kind of like search through uh a database or search through all the objects in a model so for us to do this now we're going to say get object of 404 and what he's doing is that he just gets a specific object in this case we're getting an object from the movie model in which The UU ID let's make sure we can see that The UU ID so if we come here we're looking for the movie model in which The UU ID this U ID is equals to the movie ID that we kind of like generated or created or collected right here so now he's going to look for this if it doesn't find this it's just going to return a 404 error so once we have that what we can now do is to just say I'm going to come here and say created actually we want to say movie list underscore list let's just create that and let's also create created equals to now we're going to say movie list so now since we already got that movie we now want to create that into the database so first to do that we need to import it so we're going to say from the models import movie and import movie list now we can go back here and now say movie list doob do getet or create create now get or create means if the user has already added this list to this movie to their list then we just want to get that movie and it's going to tell us if that movie is basically already in the list if the movie is already in the list we want to tell them movie already is in the list but if it's not in the list then we want to create a new list so we're going to say owner let's just make sure we're writing the right thing so the owner which is if we come here owner user that is the name we gave it we're going to create and say it's going to be request the user so this is how you get the user that is currently logged in we say request. user and then the movie let's make sure that is movie yes should be equals to this movie right here so we're just going to say movie equals movie so that is what we need but this is now done it has been successfully added to the database but we wanton kind of send a response we have to send a response so we want to check if this has been created if it has been created then we are going to say that we've added this to the list but if it kind of got a response and says this is already in the list then we want to say a movie already in the list so we're going to say if created say response data let's just create a new variable _ data just going to create a new dictionary and say status stus is going to be success and then the message it's going to be added and we're going to have like a tick mark just to show that it has been added like this now this is if it just created a new object in that movie list database else if it didn't create a new object that means it kind of got a response that means this object was already present in that particular movie list database then we're going to say response _ data equals status so we just give say something like info and then we say message this is the actual response message we say movie already in list so this is what we need and now we can just return that data to the a to the front end so we're going to say return Json response response data so we need to return it as a Json response so this should be working but the last thing we want to do is right here for the error we're just going to kind of copy this paste this here bring this back like this and the status is just going to be error and the message is going to be invalid requests and we're just going to say so we want to actually what we can just do let's just return this directly so we just say return Json response so we just going to return all of this as a Json response and right here we're going to say status status equals 400 like this and this should be working perfectly fine now let's go ahead and test this if we now come in here before we test it let me just make sure everything is working so now once we get the response data it shows it in the button and it kind of yeah disables the button and yes so this should be working now let's see PR it refresh and now let's come here and click on add to list and let's see what it does so it should add to list good it says added now if I come back in here and I come to movie list we should have one object in there and that object should have my details so if I click on it you're now going to see so once this open let's give it a second to load so we have one object and the owner is Tomy and the movie is a fall from grace now this is what we want this is what we need it is working successfully now let's make a user be able to view their list so the first thing we want to do is to actually create a new HTML file named my list so I'm just going to come here and create a new file on templates and I'm just going to name it myor list. HTML so this is just the basic file and right here in views I'm just going to drag this closer right here in views where we have let me just close this up my list I'm just going to say return render request my list HTML context so this context right here I'm just going to have a basic context so this is when we get all the list of this particular users of this particular user we're going to put it here in context and pass it to my list. HTML for now let's just save this and leave it as it is and once again again we want this to have login required so we're going to say at login required and then we just say login URL equals to login let's copy this and paste that here also so that we can also have it on add to list now what we're going to do is to take care of how this looks because right now my list is just a blank page so what we can just do is we can make it look very similar to the homage but instead of having this right here we're going to remove this and this is just going to say your list a very basic page so we're going to come here copy the this we're going to copy this come to my list paste it now what we're going to do is everything is going to literally be the same but right here where we have so let's see going to come down all of this should be the same this should be the same but where we have the fixtured section so this it shouldn't be here so what we're just going to do is to get rid of that section and let's go to slash my list and let's see how it looks so as you can see this is how it looks and right here we can just have something like we're going to get rid of this also so this second one just close it get rid of it so it refresh good so now we have all of these details and all of this is working so what we're just going to do is to change this to my list and this should be good so now it says my list and we can I think this should be all right or we can just have like a like a line so we can have like a basic line so right here before my list before this section we can have an HR and let's just see how that looks compare yeah that looks all right so now right here we can have my list and right here instead of this we could have it so we could say div just copy all of this and paste it in here and like this just to make it look nice so now we could align this to the center because it makes more sense align equals Center let's see good so now it makes more sense and what we can now do is because we copied it from the index it already has all this for moving and movies it's looping through also the modal is working let's see what happens okay there's no one here so we can't really see anything but all of this is working the only difference we need to make is that we need need to get where this movie is going to be fetched from so we kind of need to send this movies list from this right here this right here to this so what we're going to do now is right here we're just going to say movie list underscore list should be equals to movie list do objects now we're going to filter with the ones where the owner username owner user is equals to request do user so we're just getting the list of the currently logged in user and what we're going to do is to say user uncore moviecore list give it as a list and then we can just then say for Movie in movie list user movie list append now I want to open movie. movie now we can now take movies right here as user movie list so now let me explain why we did this so we could have just passed this list straight here but if we did that remember that this movie list model right here is not the actual movie it's just a list that shows the user and the movie but we need to get the actual movie from that movie list so what I did I come back in here was that after getting the movie list I created uh an empty list and I looked through that movie list and I appended the movie from that movie into this user movie list list so let me break that down more so what we did was after looking through all the movies in this movie list so basically we Loop through all the objects that was gotten from this movie list and we just called them movie so now we could get the own the user of this movie by saying movie do user or we could get the actual movie by saying movie movie so what we did was we got the actual movie by saying movie. movie so if you come in here you're going to see a a one object is basically what we refer to as a movie and so we're saying that movie movie so that gives us the actual object of the movie then once we set that movie. movie we appended it to this user movie list now we have just the movie list and then we're sending it adding it to the context giving it the variable movies and now once we come back in here into my list we can Loop through it so now saying for moving in movies give us all of this now let's test test this out if I come in here and it refresh we already have one movie added to our list so we should see one movie this is good this is basically what we need this is working perfectly fine now if we click on play Let's see what happens now it takes us to play that particular movie A4 from grace before we move forward right here where we have this so right here is going to come all the way in the model so where we have this for now let's just remove this let's save it and see how that looks good and we could just get rid of this and then let's do the same for index going to go into model and we're going to get rid of all of this so now we a user is able to see the the movies in their list and if they come home they can see as you can see they come home they can see this and if they go to my list then you can see they can see their list so let's just test this now if I say if I add the night and I click add to list it says added now if I come to my list you can see that the Knight is now in my list so this is good good and what we can do one more thing we can do is I want the list that was recently added to show first so I just added the N but as you can see it shows second so I want it to be in the other way around we can come back here and just say so we go into my list and When We're looping through it we can say for movies in movies reversed so that is just going to reverse it and give us the most recent one first so let's see good so gives us the most recent one first now we can go home let's test something we haven't tested yet so we already have the night in our movie list if I click on it and say add to list again let's see as you can see it says movie already in list so we can't really add this again so that works perfectly fine now the next thing we are going to do is to add the search functionality into this application so we want the user to be able to search for any film they want and get results from that film so what we're going to do is to First create a new URL so we're going to come into urls.py right now we're just going to come going to copy this paste that in there I'm going to say search and I'm going to copy paste paste and in views right here I'm also going to create a new view so right here I'm just going to create a new one nameit search request for now we pass and let's also copy this login required and save now we have that the next thing we want to do is to create the template file for it so we want to create search. HTML search. HTML so now that we have search. HTML we can close this and right here what we can just do is when we come back to views instead of just passing we can return R request search. HTML so now if we come into SL search let's see what happens yeah it's just Blank That's because there's nothing here right now but what we can do is to just come into my list where we have a list let's just copy that list and then paste it in here so now that we've pasted that list in here I mean that we're pasting the whole code of my list into search. HTML this is because we're going to use this basically the same template in here but just the only thing we're going to change is to just change this from my list to set result and now right here in set result we can save this and we're going to go into views and right here in search what we just want to do is to so if we come into let's say Index right here in index where we have this so remember let me go back remember when we add this this search bar so this is basically like a form and this form is using a post method so once a user clicks on something and clicks on search we want that particular search term to be sent to the back end and then we want to query the database using that search term so now what we're just going to do is to come back in here and then if we go into index right here where we have the heading right here you're going to see the search and for this search I'm just going to come all the way yeah we're just going to look for where we have search so search is just right here so we see we have this form and we are submitting it to the search URL which we already created and now it has a name of search term so what we want to do is that we want to collect this search term in right here in views so we're just going to say if request the method is equals to post then search themm will be equals to request post search term and now once we have this we can now query the database to return the movies that has this search term in the title now we're just going to say movies equals to movie so we're going to filter but this time around we're going to do something different so we're going to say the objects the filter titlecore I contains equals search term now what this means is that we are filtering all the objects in the movie table or in the movie model to the title so we come in you remember in movies we add an attribute named tile right here now when we say TI two and then we add this underscore 2core and say I contains it means we are looking for the objects that contains this search term in the title so this I contains means in the title does this search term is this search term present in there so we're basically looking for any movie that has this search term in the title now once we get that we can then just say context equals and then we could just send the movies that we got and then the next thing we could just send is a search term search term so that is basically what we need so if all of this is true then yes we do this else just redirect them back to the own page so you they just trying to go to that page without like sending any request take them back to the own page let's try this out so now we're just going to hit refresh and now let me search for so we have three we have homeand let me search for home and click enter so set results it shows blank let's see why if we come into search we have for movie in movies and right here we have movies sent to search. HTML and so we say if request up this is post so that is because we didn't send context to the HTML page now let's come back in here and hit refresh and let's see we search for home good so now we can see Homeland as part of it we can pop it up we can play this is good this is basically what we need now as you can see that is working perfectly fine now let me let me look for a term that is in both so this is the night agent the okay what we can just do is to come in here I'm going to come into movies and I'm going to change a fall of Grace I'm going to say the fall of Grace so I'm going to change this to the fall of gars so let's see save and continue editing so we can change it back so that is saved it should be saved let's see done and now if I come here and I say so let meit refresh and then I come here and then I just say the b of Grace search as you can see the brings out two different thing cuz the follow of gra and the night agent so let me just change it back to the actual one so let's just say save and now that is going to be saved now that is working the search ter is working let's just change one more thing and that thing is if I come right in here into search. HTML so right here where we have so where we have search result what I'm just going to do is say search result for let's have the search term here let's go ter so now if I come back in here I H refresh and I say night and I hit search now you're going to see that it say search result for night and this is the search result for night so now we can just go back to the homepage and this should be working perfectly fine now we've successfully added this search them and that is working fine now that that is done the last thing we need to do is to create the general page so first of all remember when we came here this genre if I H Refresh on the homepage this drner wasn't showing so wasn't too sure why it wasn't showing but the reason was because we wearing linking so if we come here come all the way here we very linking the Styles correctly and the Javascript file so if I come into index.html so I'm going to come into index.html right here so you need to make sure that this style is being linked correctly and also you need to make sure that your script is correctly placed in the same place but then apart from that what we need to do next is to create the genre page so we're going to come in here and right here I'm just going to close this and I'm going to come to templates and I'm going to say genre. HTML now what I'm going to do is to create a new URL first of all that URL is going to be for the genre and I'm going to come into this and I'm going to copy this movie as it's quite similar to what I want I'm going to change this genre and then views. gen name should be genre so let's get rid of this so genre now good this is what we want and right here in views going to come to views.py just going to close this up and we need the general page I'm just going to come down here also going to kind of copy this all of this like this and we're just going to have General now as you can see we are doing the same thing we did for movies where we add a dynamic URL now this is because we want to have something like genre slash so if we come here we want to have genre slash the name of the genre then it's going to show all the movies relating to that General so we're going to come back in here going to get the name and store it as PK and for now we're just going to return render request for general. HTML I'm going to save that that is what we're going to do for now and then the next thing we're going to do is to get the movie genre so movie genre equals to PK and then we're going to get the movies so for now let's leave this and we're going to come back into General and I'm just going to copy this search like this and I'm just going to paste it in here because we're going to use the same basically the same code is going to look the same the only thing that's going to change is right here where we have search for we're going to say movies something like movies for this gen so we're just going to do that right here and we're just going to say let's say something like drama films so let's imagine the was drama so we say drama films and let's just give this like this so this is how this should look like so let's say we come to slj SL drama that is how it looks like good right now there's no film nothing so what I'm just going to do is to get all the movies that are in this genre and we don't really need it to be reversed we're just going to get rid of that and now we're going to come into views so we need two things we need to get the actual movie genre we already have that from PK and then we need to get all the films in that genre so now we're just going to say it's very easy so we just say movies equals to movie do object do filter General equals movie genre so this is just gives us what we need and now we can just have context equals so we can just say movies and give it movies and also movie General and give it that make sure we have our comma and our comma so now we can pass this context into general. HTML so if I save this let's just make sure everything is nice automatically this should be reflected the only thing that's not going to be reflected is the movie gen name so we're going to come here and under so right here we have genre right here instead of drama I'm just going to say movie Dr films now let's try this for drama I think the movies we added were dramas good so two movies was drama Homeland and a Fall From Grace if I click on it we have all the details of everything that we need if I click on this we have all the details of everything that we need we could add to list remove from list whatever now one more thing is this is not really looking nice we want the cap the first letter to be Capital so we could use that using going to do that using title once you just say movie General with this and tile it's going to change that now it refresh good drama films now this is nice this is what we need if I come back to home right here now what I want to do is that when I click on any of this it should take me to the movies so I'm going to come back and what I'm just going to do is to go into index.html right here and on this we already did this when we pasted this code in earlier in this tutorial so now automatically when we go to/ General action it's going to take us to action General SL drama is going to take us to drama let's try it out so drama is just going to take us straight to drama as you can see that works and now that works perfectly fine now the next thing I'm going to do before we move on is I'm going to add a bunch of movies so we're going to have like a lot of movies to work with and I'm kind of going to get rid of this because we don't really need that and that's what I'm going to do right now so actually I'm going to add a bunch of mov movies but I'm not going to waste your time by showing you all of them so what I'm just going to do is I'm going to pause the video right here so I'm going to add it myself and once I'm done I'm going to be back now I have added a bunch of movies here and if we come back to our application and we eat refresh you're going to see that we have some movies right here good so now we have all these movies we can add to the list we can watch them and everything is working perfectly fine now the last thing we're going to do is to add a fix section here so this picture section is not really showing anything it's just some static data so what we're going to do is to come back in here and right here in let's first go to views and actually get a fixtured movie so how do we get a fured movie let's just get let's say the most recent movie that has been added so to do that we're just going to say pictured uncore movie equals to movies and then we'll just say let's let's get the length of movies so the length how many movies is here and then we're going to get minus one so what we're doing is we're getting the amount of movies that is in this so if the amount of movies is 10 we want to get the 10th movies so this is basically going to be 10 so we're saying Movies 10 so we're going to get the movie with the index of 10 but because this is index number L does movie is going to give us the actual number but remember index number starts from zero so we have to put minus one to get that actual last movie so that is what this featured movie section does and now what we can just do is to copy this right here and then we could just paste this in here right there featured movie now we could copy that featured movie and come into let's go to index. HTML and right here where we have this section we're just going to say this is the feature section but instead of this we're going to say this feature movie. title and then for the next one which is the description we're just going to say picture movie. description and close that and then for the URL so when they click on play video we're going to take them to fured movie dot actually this is going to be different because this is going to be U idore ID but remember that the URL is SL movie slash uid and for this button we could just get rid of this button we don't really need it and now once we hit save come here and hit refresh let's see what it shows us so it shows us suit this is the description suit you and then we could play for this this background we can change it also so right here where we have this background I'm just going to change this real quick get rid of all of that just going to go back get rid of that okay that's still a lot so I'm just going to keep going back and getting rid of that and let's go to where we see HTTP good so now what we're just going to do is to say pictured movie Dot let's come back to models and see what the name is we want to get the cover not the card so cover. URL let's come back in here and H refresh and then let's see what it shows us good so as you can see we have this right here so this is not really nice because this is a white background and this is also white so we could just manually change that to Black and what we can do is right here where we have the title we can say style or we could just say style for the old diff actually let's just style only this color black and we could just copy that paste that in here and it refresh and let's see how that so that looks nice now we could write like an advanced system that detects the back ground color and then you know right gives this another color based on the background color but we're not going to do that we're just going to keep this as it is so this is how it looks like right now it looks quite nice it looks decent now the last thing we're going to do is just to clear up the whole application so right now we don't really need this we could do something here instead of having this we could have like your list we could show the user their list right here like the movies they've added to their list but we already have a page for that so I think this is fine we're just going to get r of this let's come back in here to index and where we see right here where we have this section get rid of that get rid of it and this and now let's it refresh again and now everything should be perfectly fine and as you can see everything is perfectly fine so this is good this is nice everything is working fine now I'm just going to come in here and just check everything so now we can click on General and we can see the action we can see films for that can go back to the home you know we can go back to list you know we can search for movie Let's search loin and then it shows us this and then we can play that movie we can add it to the list and this is it right here and we can go back to the homepage if you just go back to movies going to take us to the homage so now everything is working perfectly fine and this is the end product of this application that we've built now we are going to deploy this application onto the web so once again we're going to be using flow to deploy this but before we even use flow we need to make sure that this application is already pushed to GitHub so we need to create a GitHub repository and push it to GitHub and before we do that there are some things we need to set up to be ready to actually deploy this application so let me show you what they are right now so the first thing we need to do is to have so I'm going to come back in here right here in my settings so right here on the top we need to make sure we have OS installed now that we know we have OS installed the next thing is under allowed host we need to allow host so that I'm going to just put this to so this is going to allow any like um multiple any basically any host to be application to be hosted on any domain and we can make it specific when we deploy our application we can then change this to just that domain to be allowed you know just for more security but we could leave that as that for now and then the next thing that we want to do is to scroll all the way down we're going to scroll all the way down we need to make sure our static files are set so this is done and we going to run the collect static command just to make sure that is good and we're then going to come down under media right here we actually going to add some stuff so the first thing I'm going to add is csrf trusted Origins now this is because when we are you know having a post method or a form that using a post method we need to specify The Trusted Origins so this trusted Origins just like allowed host we could specify just our domain we might change that after deploying it and we already have our domain so we could specify our domain to only be you know allowed to be as a trusted origin so that only that domain can receive or send a post request but for now let's just allow all Origins and then the last thing that we're going to do is right here we're just going to I'm going to kind of paste this in so csrf cookie through session cookie through and we also need to add the secure proxy either and this is what you need to set now this is basically what we need to do regarding our basically regarding our settings. PI we also need to make sure our database is set correctly that is done now the next thing you need to do is to come here and open up this just going to close this up close this up and this and the next thing that I want to do is to just right here I'm just going to create a new new file and I'm going to name that file requirement txt so in this requirement. txt I'm just going to kind of paste the so I'm going to paste this in so these are just the libraries and modules that we used in this application that are required so you can just type this in directly or if you want to generate yours what you can do is to run so open up your terminal and run PP three freeze the greater than sign requirement txt once you run this it's going to generate it for you and that should take care of that once you have that done the last thing that you need to do this is quite important you need to have your Pro File I'm going to save this let save this file and then you need to create something named proc file so once you create this Pro File this is how we basically create or this is how we are able to tell our deploying so the platform we using to deploy this how we're able to tell it what port we're using and all of those type of settings so right now I'm just going to paste this in and let me show you so this is what we are doing so the this Netflix clone should be the name of the application now let's see let's open this up so the name of ours is Netflix site so we're going to change that from Netflix clone to Netflix site cuz that should be the name of your of your jangle project the wsgi application as I said it specify what port that our application should be running on let's make sure all of this is good so Netflix site and Port this port is going to be taking from the environment variable which we are going to set in flow now all of this is done the next thing we need to do is to just create a new so what we just need to do is to create a new GitHub repository and then push this code onto that repository so now I'm going to come in here and I'm going to do GitHub so log to GitHub and I'm going to create new repository and I'm just going to say Netflix clone or I could just say Jango Netflix clone like this and now I'm just going to create the Repository and what I'm just going to do is to start like this and say get in it so right here I'm going to open up my terminal I'm trying to push this code onto the GitHub reposit we just created so going to initialize and then what we need to do is you just say get add we're going to add everything and that should do it and then right here we're just going to copy all of this command because GitHub already gave us and actually we're not going to run that because that is going to give us we're going to run it one after the other so let's just cancel all of this and this so like this good and then let's Branch to main good and then going have to run remote ad origin good and now let's just push it so let's give it a few seconds to push that shouldn't take a long time and this should push in a bit so right here this has been successfully pushed and I could just close this and what I'm going to do is to just come in here and if I hit Refresh on this just also open it in a new tab same thing right here you can now see that every single thing has been added here so now that we have this in GitHub the next thing we can do is to open Flow I'm going to open a new tab and I'm going to go to flow come and I'm just going to sign in again and I'm going to sign in with my GitHub account so I already signed in before it should automatically recognize that now the next thing I want to do under Netflix project I'm going to go in there and this time around I'm going to add new I'm going to create a new application so I want to deploy a new application so I'm going to connect my GitHub repo and this is what I'm going to do so I'm going to click on this I'm going to give it access to all rep cies and then I'm going to sign in so right now it's going to redirect me back here so now it's going to load up all of my as you can see everything is loaded up and now I'm going to click on the one so the one I want to deploy is jungle Netflix clone it's very easy and very straightforward as you can see it says gives your application a name let's leave it as it is and we want to deploy Main and we're just going to leave this as it is and for the environment variable the port is going to be 8,000 because Jango responds to 8,000 and now we can open up this first what we just want to do is to say we're going to use build pack so this build pack basically detects and builds automatically kind of detects the application that you have without you know you having to input a docka file that is going to give you full control of the whole build process so just click on this and it already just we can leave this blank because the root directory is already the directory we've provided so just leave that blank and click on deploy your app now we're just going to wait for that and as you can see it has started deploying it says cued so it's going to deploy and it's going to show you everything right here and I'm going to be back once this has deployed now as you can see everything has been deployed successfully it says deploy if I open this you're just going to see all the logs of everything that deployed now this is nice everything deployed without any error so this is good as you can see it says it is listening at the Port 8,000 now let's actually test this so let's copy the URL this is the URL it deployed at it has been copied and now we're just going to paste it on here as you can see our application has been has been deployed so as you can see right here we can see here the only problem is that we don't have the static files so we don't have no CSS files we don't have no styling and this is going to be a problem so what we can do is we need to change something so right here before we deployed our application so right here if I pop up my terminal back again we didn't run something called collect static so you need to run Python 3 manage. Pi collect static so whenever you are deploying your project to production you need to make sure you run it and once you run it it's going to create another file name collect static that has the styling for the admin and your Assets Now that you have that what we just need to do is to redeploy so we're just going to do get in it again and then we're just going to come here and just take all of this code and then we can just basically copy everything and then we could just make this and say update yes and it has seen what to include static files we already branched all of this but I just like doing the same routine again and then we could just do this again and then this again so now as you can see it says okay now it says everything is up today but everything isn't this is because after reinitializing let's just start it again we didn't do G ad so we need to do G ad now once we do that we can say commit we can just say changes good that is what we want to see and after committing Branch should say we already exist because it already exists and then we could just push now let's give it a few seconds that has been done successfully and now right here if you come back to flow you're going to see that automatically it has seen the changes we made and it's just going to start redeploying so let's view the logs again once we view the logs so this is going to start redeploying I'm going to pause the video and I'm going to be back once this has been done so as you can see it has been deployed successfully now when I come back in here and when I click on refresh you can see that right here it shows with the styling and everything is working perfectly fine now this has been done we have successfully deployed this application to the web using flow so let me just show you around so right here this is what we've deployed and we can just come to the settings and you can see this is first of all this is the domain and right here is the GitHub repository that we deployed and you can see that flow automatically detected that we were using Jango we didn't have to specify we didn't have to you know put in our docka file or anything like that flow spec flow automatically knew that which is why I really like this and right here you can just have all the settings so you can change the name you can't really change the name I think you can view the name you can view the source repo and this is the custom UR L I believe you can change that if you want and for to get a custom domain that is coming soon but once you have that you can also add your own domain and this just shows the region this allows us to choose automatic deployment and this allows us to delete our application so these are just other settings for build and scalability and right here you can also set environment variables and we set the port for 8,000 as the environment variable so apart from that everything has worked successfully we are able to deploy our application and able to deploy our postgress database using flow so that was how easy it was to build all of this so that is the end of this whole tutorial and I hope you enjoyed everything we did in this course and I hope you learned a lot and if you did please don't forget to smash the like button and subscribe once again there will be a link in the description below where you can access flow or go to flow.com and sign up and you can access all of this that we're doing so having that said thank you for watching and I'll see you in the next one hi guys welcome to this video this video is the first part of a tutorial Series where we'll be building a Spotify clone using jangle so we're going to be building a full Spotify clone with all the necessary features such as listening to music viewing artist profile searching for songs and stuff like that now in this video as I said we're going to be using Jango and we're also going to be using a platform called zit zit is a cicd development platform that helps you get to production and operate in production the platform is great for teams running kuber netics workload and also great for multicloud in this video we're going to be using zit for a lot of things and I'm going to highlight two major things that we're going to be using zit for so we're going to be using zit to deploy our pogress database so in this application that we're building we are going to be using a pogress database and we are going to be using zit to deploy that progress database and at the end of this video we're also going to use zit to help us deploy our application onto the web so when we are done building I'm going to show you how to use zit to take your application from your computer and deploy it onto the internet so before getting started with this video click the link in the description below to create an account on zit so you can follow along with this tutorial now let me show you around what we are going to be building first of all let me log out and I'm going to show you the login page so I create we added a feature where a user can sign up to our application and and also login so if a user doesn't have an account they could click on this button to sign up and create an account but I already have an account so I'm just going to come here to sign in and I'm just going to input the sign in details and click on the signin button and that is going to take me to the homepage so as you can see right here this homepage has all of the details it has all the top artist it has top songs so I'm going to start with clicking on an artist so I'm just going to click on let's say Taylor Swift now as you can see this loaded up Taylor Swift's details so this shows a cover image this shows a name this shows a monthly listeners and right here you can see that this shows a song and it also shows the amount of streams and the duration now I could click on one song and this is going to take me to the page to actually listen to this song so right here as you can see this song has been loaded right here you can see that we have the image of the song we have the name of the song and the artist that sang it now I could play this song but before playing it I'm just going to mute my audio because I don't want this song to play out loud due to YouTube copyright so I'm just going to click on this song and you're going to see that it starts playing and I could click on this to fast forward the song 10 seconds and click on this to put it about 10 seconds I could also click on anywhere in the whole progress bar it's going to jump to that part of the song and I could pause and play the song so we're going to be adding all of this in this video now I could just click on this to go back to the homage now we're back in the homepage and this also shows me the top songs so I could just click on any of these songs so I could click on this one for example called paint the town red and as you can see this loads the paint the town red song once again gives us all the details and we can listen to this song the next thing we can do is to search I'm going to go back to the homepage and right here if I come to this search bar let's say I search for Drake and I click on the search button so as you can see it loads up result for that search term so if I scroll down I'm going to see a lot of songs by Drake and not just only Drake songs songs that Drake is featured in so right here you can see that we have a song by Travis SC featured Drake now if I click on any of this song Let me just click on the first one it's going to take me to listen to the song so right now you can see that we're in the page to listen to this song now I can just also come back to the Ownage and browse around the old platform so this is what we're going to be building in this video I hope you're excited if you are please don't forget to click on the like button and subscribe and let's get straight into it now the first thing we're going to do is to create a new jungo project before we even create a project we need to make sure that we have Jango installed on our computer so so to have jle installed we need to make sure we have python installed so to check if you have python installed open up your terminal if you're on a MacBook I'm on a Macbook so I have my terminal open up right here but if you're on Windows just open up your command prompt and then type python so once you type python if you're on a Windows it should bring out like a python ideally but if you're on a Mac type python fre and it's going to bring it out also so if you're on a Windows just type Python and it should show you all of this so it should show you the particular version you have and it should bring out like a basic editor where you can just print whatever you want to print right so something like this so that just shows you that you have python installed and once let me just clear this once you have python installed you can now install jangle by saying pip three install jungle now only run this if you are on a MacBook but if you're on a Windows once again just omit the three you don't need to add three just say peep install jungle and that should do to work for you I already have it installed so I'm not going to be running this command now that you know you have it installed the next thing you need to do is to actually create this jangle project now for this Spotify clone I'm going to be creating a new project and I'm just going to name it Spotify under clone but the first thing is I need to know where I'm going to be working so I need to navigate into the folder or into the directory that I'm going to be building this project on so I'm just going to come here and this is just my finder on my MacBook so I created a folder in my project named Spotify clone and in there I created a front end folder and a backend folder so this front end folder basically has all the front end files are going to be needing so the index page login music profile and the CSS styling it has everything there's going to be a GitHub Link in the description where you can get access to the front end folder so you can continue or build along with me without having the finished version right so there's going to be two different GitHub links both the front end and both the completed version of the whole entire project so this is the front end and I'm going to import this later into my jungle application but now we're going to be navigating into back end and this is where we're going to be building the jungle application now what I'm going to do is to navigate into this folder right here in my terminal now you can do this wherever you can actually just create a folder your jungle project right here but I just want to make sure everything is organized as why I created a whole folder for it and I'm going to be doing everything here so I know where it is and I'm just going to say c document and I'm going to say CD project and I'm going to say CD Spotify uncore clone and if I do LS I should have front end and back end then I'm going to say CD back end if I do LS it should be a a completely empty folder so right now I know I'm in back end now I can create my jungle project now I'm going to say jungle admin start project I'm going to name it Spotify uncore clone now I'm going to come back in here if I right here in back end remember it was empty now there's a new folder named Spotify clone I'm going to come in here and we're going to see this files so right here I'm just going to say LS it shows me the Spotify clone I'm just going to navigate into Spotify clone now I am in the Spotify clone jungle project if I say LS it's going to show me the same thing that is here that is in this folder so now that we have that the next thing before we move forward is to create a jangle app so in Jango when working with projects you have to create an app which is kind of like a subset of a project so imagine you're building a full like a full Facebook clone or full social media application you might want to have different different applications under that jungle project that does different things but for this project this project is not really a huge project we're just going to have one application so if you're not too sure what jangle apps mean just think of it as a subset of a project so for example let me give the use the Facebook illustration so we could have facebook.com as the main jangle project but then we could have an app just for messages so just for the Facebook messages we could have an app that is just for the authentication just for user authentication we also have another app just for the Facebook Marketplace so because it's such a huge project that's why we kind of divide it or separate it into different apps but for this particular project we just really need one making more than one for this would just be you know doing too much so I'm just going to create one new app and I'm just going to name this app music because that's literally the only thing we need right here in this Spotify clone so I'm just going to say Python 3 manage.py start app music so you need to make sure you are in the folder that says manage.py that is the root directory of this old project so once you there you need to run this command Python 3 manage.py start app and then the name of the app the name of the app in this case is music so that what we're going to do once again we on a Windows omit this three just type Python and everything should work I'm going to hit enter if I come back in here now you see we have a new folder named music also if I run LS you can now see that I have a new folder named music so this is good this is literally what we want now what I'm just going to do is to open this up in vs code let me do that real quick I'm going to come into vs code I already at this Open Door prior and I'm just going to come here and I'm going to say file open folder and right here I'm just going to navigate into document I'm just going to go into project which I should have created a long time ago so right here project and today Spotify clone back end I'm going to open Spotify clone so I'm going to open the root directory of this project which is the directory that contains the manage.py file I'm going to open this up and now that I have this opened up as you can see this is working and what I'm just going to do is to make sure that this project is running successfully then we'll know that everything works successfully I'm going to drag up a new terminal and to run this python project or this jungle project I just created I'm going to say Python 3 manage. Pi run server so we omitted a right here we just have to take care of that and good so just ignore this error that says you have everything not applied it's not really an error it's just a warning but we're going to take care of that later so now we need to go to this particular development server just going to copy it and right here in my browser I'm going to paste it so as you can see it shows me this jungle project that I've been created it says good you successfully created a jungle project it's working but now we're just going to go further into like actually developing on this jangle project because this is not what we want the users to see now the next thing we're going to do is to just make sure that we are signed up to zit because zit is a platform that we're going to use a lot in this project for a lot of stuffs so we just need to make sure that we've created an account here and we're signed up so that when we need it we don't need to do that again so what I'm just going to do is to click on sign in cuz I already have an account but if you don't have an account you just need to so you can also click on this page and then it's just going to bring you automatically to the sign up page but because I already have an account I'm just going to click on login so you could sign up with GitHub or Google I already signed up with my GitHub so I'm just going to click on login and now I'm going to log in with my GitHub so it should just automatically log me in because it already recognize that my GitHub is logged in on this browser so this is how it should look like once you come into zit for the first time and this is just showing you that you've not deployed or you don't have any project that is running right now that is why it says let's deploy your first project so I'm just going to tell you or show you how we're going to use this in this project later but for now make sure you have zit you have an account created at zit and you successfully logged in and once you have that done we can now go back to the jangle project right here and what I'm just going to do is to basically just set up the homepage URL so the first thing I'm going to do right now is I'm going to come right here and I'm just going to create a new actually I'm going to create right here in music I'm going to create a new file named urls.py so once again I just is good for you to understand the basics of Jango but I'm going to try to explain everything as I go on so this URL file is basically a file that contains all the URLs or all the parts in our project so for example let's say our project is Spotify SL I cone.com and let's say we want to have this is the home URL right and we want to have another URL like SL login so this is where we create that URL if we want to have another URL like/ signup we have to create our URL here so all of this we have to do here so for us to do this we're going to say from jungle. paath import URLs so path is kind of what sorry from jungle. URLs import path so path is kind of the pattern that jangle uses to create new URLs so for us to do this we're going to create a new list I'm going to show you how this works so this list basically it's going to take a list of all the URLs in this application and the first URL is just going to be the home URL and to do this we're just going to say path we're going to open a bracket and close it and I'm going to add the codes and if I leave this blank this means I'm trying to define the home URL right if I leave if I put something like log here this means I'm trying to define the URL for/ login but since I leave it blank it means this is the home URL I'm going to say comma views dot going to say index comma name equals index I'm going to explain this once again and I just always have adding a comma right here in list so I don't get any buggy ER or later so this views. index is basically saying that when a user try to come into the login sorry come into the homage go go into the views file and look for a function or maybe even a class but normally this is how we Define for function because a class we have to do something like sl. as class but we're not talking about that now so we're saying going into the views file and look for a function named index and that views file is this particular views file right here but we're having an error because it doesn't recognize any views file this is because we didn't import it into this particular file so we're going to say from the current folder import views now what this is going to do is that it's going to import this views. P which is in the same folder as url. Pi into this url. Pi file now we can access all the all the functions all the classes everything from this views file now we're saying go into the views file and look for the index function and whatever is being done there or whatever is being rendered is what should happen when a user try to come into the homepage now this is how this works and this name is just basically giving this URL a name so we're saying the name of this URL is index now if we run this if I actually bring my terminal back up this should give us an error okay it doesn't give us an error yet and I'm going to tell you why so for now what I'm just going to do is to actually just come into views I'm going to talk about that error later but let's just take care of all the views for now so let's actually create that views and it's going going to take a request and what I'm just going to do for now is to just return an HTTP response to do that I need to import I'm going to say from Jango HTTP import I'm just going to say HTTP response and now I'm just going to return that I'm just going to say return HTTP response and this HTTP response I could basically give you like a basic HTML so like an H1 and just say hello guys or let me just say hello world I'm just going to close that like this so once I save this this should be done right but if I come back in here and itat refresh nothing changes even if I've specified everything here this is because everything I have been configuring has been only in the application so in this music application but remember this music application is under the Spotify clone project so we also need to tell the project about what we just defined so we're going to do two things first thing is we're going to have to come into settings.py and this doesn't actually relate to the URL configuration but we just need to make sure that whenever we create a new app we need to add come to settings.py file under the Spotify clone project and add that app under the list named installed apps this is just so that this project recognize that this particular particular app that we're adding is actually part of this project because for all we know it could just be any folder right so what we're just going to do is to say music so we're adding a new app named music right here so what you just need to do is to write the name of the app and that is done so now for us to actually make sure that these URLs work we need to come into urls.py in the main project we don't need to create this this is automatically created by jangle and we need to First Import in include so going to explain this now we're going to have to create a new URL and we're going to say include once again I'm going to explain this music. URLs so what this is saying is that if a user try to come into the homepage include music. URL so this include is kind of saying copy this same particular page from the URLs file in the music app so when it says include music. URLs what is saying is a user tries to come into the homepage go into the music app which is basically this app then go into the urls.py file which is basically this file then look for any URL that matches this and once it comes here it's going to find that this URL matches this then what it's going to do is that it's going to look for what operation is being done so the operation is to go into views which is this views look for a function named index which if we come here is this function and whatever is being returned here or rendered here is what should be rendered or is what should be done for that particular URL now I hope you're able to follow that with me because now once I come here and make sure I save this if I come back in here and hit refresh so it says we have an error let's see why we have this error just going to bring back the terminal so it says URL pattern okay so for music if we come into music you can go into URL so we just add an error in the name so it should just be URL patterns and not URL pattern so I'm just going to save this and I'm just going to come back in here and hit refresh so now you can see it says hello world now as you can see we successfully created our first page for this Spotify clone and what we're just going to do next is just to move forward with actually importing that front end I talked about so if I come back in here remember I talked about here this particular front end pages so this just going to quit this click on this and open this up so this is just the basically the front end or the HTML pages I designed for this and we're just going to talk about bringing this into the project I'm going to come back in here and so for now we've been able to successfully run this jungle project and as I said the next thing is to now set up the front end and make sure everything is working so to wrap up in this video I showed you the final product of what we're going to be building and we also set up the jungle project for this Spotify clone so we I explained everything on the jangle side and we also signed up to Z because we're going to be using the platform extensively in this project build and we also from Jango we also set up all the URLs and explained all of that so in the next video what I'm going to be doing is to be integrating the front end template into the project so it actually looks nice and we actually get a few of what we're going to be building and we're also going to be setting up the databases and more in the next video and to the end of this series so thank you for watching this video If you enjoyed it so far please don't forget to drop a like And subscribe and you can also drop a comment if you have any question or if you have anything to say about the video thank you for watching the video once again and I'll see you in the next one this is the second video in this Jango Spotify clone series now in the last video we created a new Jungle project and set up everything we needed so we set up the jungle project the jungle app the URLs and that's what we did to this point and I also introduce you to zit which is the platform that we're going to be using for databases and we're also going to be using zit to deploy our application later at the end of this series so now in this video what we're going to be doing is to first of all touch this up because right now all we just have is an hello world text so we want to integrate our front end temp template in here and we're also going to create a database so we're going to be using a postgress database from the zit platform so I'm going to show you how to create the postgress database here and integrate it into the jangle project and let's get straight into that now let's get started with integrating the front end template into this project so what we need to do is to come here I'm just going to close this terminal so I'm not quitting the terminal I'm just like minimizing it I could close this up and I could actually close this up I'm going to leave this for now so what I'm going to do is to come into the project folder which is Spotify clone and I'm going to go into settings. Pi so right here in settings. pi what I need to do is to actually look for uh I'm going to come down here and I'm going to look for a variable name template so it's actually a list and in there I'm going to look for where I see dares and right here in there I'm going to add WR base Dore there I'm going to say template right now what I'm just doing is that I'm saying whenever we want to use a template file in this case a template file is just HTML files so whenever I want to use any HTML file go into the base directory I remember earlier in this series I said the base directory also known as the root directory is the folder or the directory that contains the manage.py file so basically it's going into this directory and he looking for a folder name template so in that folder that is where it's going to look for that particular template that we're trying to use we have to come in here now and create a new folder name template to make sure that folder is there and what I'm just going to do is to make sure I have all of the HTML temp files in this templates so as I said when we're trying to request for a particular HTML file so for example for the homepage we need this particular index.html file because this is the this is basically the view for the homepage so if we want to use that what we're going to do right here is you just return that particular file by saying return render index.html but when we say that Chango is automatically going to look for that index.html file in this template folder which is the folder right here because we specified this if we don't have this it's not going to work so now what I can just do is to quit this for now and write in templates I need to make sure that this HTML files are here so I'm just going to select only the HTML files so we have index login music. HTML profile sign up this is CSS CSS CSS and this is HTML so now that I can see the HTML files I'm just going to drag it into vs code right here so need to make sure that it's being dragged and I'm going to copy it and paste it into template file so now that I know I have all of that I can actually use this HTML file now I'm just going to say return render request index.html very easy and very simple this is how I do it now when we're saying render this index.html file jangle automatically knows that it needs to go into templates to look for that file because of what we set in the settings. pi so now if I come back in here and hit refresh you can now see that we have this particular Spotify template it's not looking really good right now I'm going to explain why but you can basically now see that we have the Spotify template right here instead of just the basic Hello World app now the reason why it's not looking good is because we brought in the HTML file but we actually still have a c some CSS files that needs to be connected to this HTML file to give it it required styling now we need to go to another process for that first of all we're going to just create a new folder named static so just the way we have a folder name templat that contains all the template files we also need to have a folder name static that contains all the static files static files is just CSS files JavaScript files images basically any other external file that is we're going to be using in connection to our HTML file so that is what a static file is in jangle so now I need to just import or drag and drop this CSS files so I'm just going to copy all of this I'm just going to do the same thing and just make sure I'm bringing it in here and pasting all of that in static so now that we've ped it in static the next thing we need to do is to now also come back into the project which is if I clone and go to settings. Pi so you see the way we did or we specified the directory for the template we need to do exactly the same thing for the static but kind of in a different way so as you can see right here we have static URL and what I'm just going to do is to come here and for me to actually get or specify this or configure the static files I need to have two things the first one is static root and what we're just going to do is to say OS so before we use OS we need to make sure we have that imported so we're just going to say import OS that is imported we're going to scroll back down and now that we have OS we can see os. path do join base the static we also saying go into base directory and look for the static folder which is this now we also need to have one more thing named static files _ D and this is going to be at least actually and now we're just going to write exactly the same thing I'm going to say os. path do join so we need to make sure this is dot do join based there static so this is the actual directory so static files directory is saying go into static let's just because it's a list let's just add a comma but for the static root so this root is quite it's quite more complicated than just the static files de but what you just need to know is that this shouldn't be static this should actually be something like static files is a better name it shouldn't really be the same name so this is where we actually configure the directory for the static files so as you can see we say go into static we can save this if we come back in here into index.html you're going to see that it is being connected to the style the CSS that it needs but if we come back here still doesn't make a difference now the reason why this doesn't make a difference is just because jangle uses a different way to connect static files to the HTML file so for us to do this we need to scroll all the way to the top and actually add something named load static and then right here what I'm just going to do is to say qu bracket percentage sign static I'm going to add a Cod Mark I'm going to do the same I'm going to say just call bracket actually just percentage sign and close call bracket now you need to do this for every single place or every single time you are trying to connect a static file you need to have this format right immediately in the link section now if I save this and come here and it refresh now it's a whole different thing you can now see that every is align successfully the static file is working now there's just only one problem that you might tell so as I said you need to actually have this style you or this format every single time you're linking a CSS file an image whatever it is you need to have this the reason why we don't we're not having that when we're linking all of these images is just because these images are links from the internet so as you can see all of these are actual HTTP links I scroll down very well you can see all the HTTP links if there were images from the static files we also need to have all of this particular format so imagine you have like let's say 20 different places in your HTML file where you're using this or where you're trying to link different static files it's going to be quite time consuming to add this format for every single one manually because and I feel like it's it's kind of it makes you less productive because it's it's important but it's something that could be quicker could be done quicker so this was why I created a jungle extension called Auto jangle so if you come into extensions so I actually use it a lot myself I created it because it was a problem I faced and now I use it so much so you just come into extensions and search auto jangle and you actually see this extension once you install this extension you can quit it and if you come back here what you just need to do I'm actually going to remove this so I can show you how it works if you come back here what you just need to do is to say command shift P so just say command shift p type that and you're going to see auto jangle or you could just type to look for it auto jangle so once you get it just click on it and it's automatically going to add all the static files every single place on your HTML project this is very good the only thing you need to do manually is to add this load static and I'm probably going to also fix that later but this is very good because all you just need to do is to say if you just say command shift p and that is going to add the static styling or the static format for every single time you're trying to link a static file so I just decided to add that in there cuz I thought it was very helpful so now we save that once again and if it come here it shouldn't really make a difference because we've already added the front end so this is what we need to do in terms of the front end I think this is working and for we've done the main part of the styling so we've added the template the static files and we've also connected the index of HTML so this should be good for now now the next thing that we're going to do is to use Z to create our postgress database this pogress database is actually going to be deployed on AWS so we're going to be using AWS as the cloud so we're going to create as I said a postgress database on zit and we're going to connect it into our jungle project but before we can create this particular database we first need to connect the cloud into our zit application into our zit profile so as I said we're going to be using AWS so what you need to do once you signed in to zit so first of all go to zit. and make sure you have an account and you signed in once you've signed in come under clouds right here and then click on connect cloud and click on Amazon web services now once you do this it's going to ask you to input your AWS account ID now make sure you log to AWS and then on the top right corner click on the drop down and copy the account ID once you copy that account ID you can head back over to zit and paste that account ID in there and all you just need to do is to click on ADD so this is going to add the AWS account but now you need to authorize it so authorize with I am and that is going to basically open this link so just follow my steps and what you just need to do is to scroll all the way to the bottom you don't need to touch anything click on you I acknowledge and then create stack so this is going to create the stack in uh it's not going to take a long time probably in a few minutes sometimes seconds and once that is done I'm going to be back so this has successfully created now we can come back in here I'm just going to close this up and actually close the AWS tab to and as you can see it says that my AWS account is successfully connected what I'm just going to do is to come back into project and for me to create this postgress database I'm going to come under blueprint so under blueprint I'm just going to say view blueprint and what I could just do is to search postgress and right here as you can see we're going to use AWS RDS so right here where you see postgress RDS let's just make sure post right here this is what we want so we don't really want this postgress cuber netics one we're just going to click on this and we're going to create project so what we're just going to do is to use this cloud provider which is the AWS that we connected and right here I'm just going to say continue and for the input so I'm just going to say the engine should be 15.2 which is the latest one and the database name can be postgress and the database username can be root and this is going to be the password we don't want to see right now so now I'm just going to click on continue and right here this is the group name subgroup name and the project name we could just deploy and this should deploy in a few seconds or minutes so as you can see right here it's deploying once again I'm going to be back once this has been successfully deployed so now as you can see this postgress database has been deployed successfully and right here you can see that we also have our database connection info now this database connection info is what we're actually going to use to connect this data base that we created into our jungle dat into our jungle project so what I'm just going to do right now is to actually come back into our jungle project and right here where we have this settings. Pi I'm going to scroll all the way down to where I see databases so in this databases I'm actually going to just let me just copy paste I'm just going to comment this out but now I'm going to change some stuff in here so right here in databases we have default so from the engine we're going to be using a different engine so as default Jango uses SQL light but for this project we want to use postgress Q so instead of saying jungle. db. backend. SQL 3 we're going to say do post press ql and now for the name of the database just going to get rid of this and the name of this database right here is going to be this database database right here in the database connection info so we're just going to copy postgress and I'm just going to paste that in there and the next thing that we want to do is the user I'm just actually going to write all of this out before moving forward and the next thing is the password and after writing the password we need to have the host and then we need to have the port so now what I'm just going to do is to come back in here to get the user so the user is this database username which is root so you just need to copy that and then paste it in and for the password we're going to come back in here so I'm just going to make sure that is pasted password come back here just copy the password paste that in for the host I'm going to come back in here and the host is basically database host name copy that also paste that in and for the PO so I'm going to come back here the p is 5432 I'm just going to paste that in and it's save so so this is how to configure this database that we've created this is how to connect it from zit into our jungle application now I'm just going to quit this settings. pi and just open up a new terminal and run that again so Python 3 manage.py run server that should run this so it's taking a bit of time right here and most of the time when this is not working is either because the post is not configured properly or it hasn't basically connected but what I was going to explain is remember when we created uh when we tried to run this server earlier in this tutorial in the first series in the first episode of this series and it showed us an error saying there have been some unapplied migration now this unapplied migration is just basically saying that we have some database that jungle has created as the fall but they haven't migrated into the database we are using for this project so the in j jungle basically create database table as default they create user tables for authentication they create group tables they create a bunch they also create session tables so you can know when has the user logged in stuff like that so jangle creates all of those tables and when you create a new database you need to migrate all of those tables into that new database now for you to do that you just need to run python free manage.py we should first run make migrations but it will it's not going to change anything so it's also stuck at this now we can just come into settings. Pi let's remove this and just put this as an integer value and just make sure that we save that and also we're going to come into zit and in this particular post that we created in settings we're going to switch to the settings tab so on here where you see Expos to public yours won't be toggled on so make sure you tole that on and click on Save once you have that let's come back now and try that command again so we're just going to say Python 3 manage.py make migrations and that should just say no changes detected and I could actually just close this it says it's not saved just going to this should be what we need and now what I'm just going to do is to save Python 3 manage the pi migrate so this migrate now we migrate all those database tables I talked about into this postgress database that we just created so as you can see it is successfully doing all the migrations that we need and that should be working so it's just going to make sure that all the migrations Works we're just going to give that a second as you can see it says Earth Earth Earth so this is for the username the email last login you know every single thing that we need and this was the sessions I also talked about everything that we need jungle kind of provided that as default so everything we need in terms of authentication jungle provided that so now that we have this we can now finally run the project again without getting any warnings so Python 3 man.i run server and that should just run successfully good so now that that is running I could close that and I could finally come back in here and just hit refresh and that should be good so now what I've done is I connected the font end and I also sign set up the database that we need so what we can just do to actually view this database is two things we can just open up this postgress database on PG admin but we're not going to need to do that that is because Jango created or gave us a default jungle admin panel where we can see our database edit our database add anything change anything so I'm also going to be using that a lot in this video and I'm going to show you sorry we're going to be using that in this series and I'm going to show you how we're going to use that in the next episodes of this series so just to recap what we did in this video is that we configured the template for this particular homepage now we can see this Spotify homepage as a nice looking UI and the next thing we did was to create our database on zit so we created a postgress RDS database that was deployed onto AWS using terraform so you don't even really need to know all of those details because zit kind of just makes everything easier so what you just need to know is that we created a postgress money database and we connected that database right here to our jungle application and everything is working perfectly and in the next video what we're going to do is to now move forward with building most of the actual features of this particular Spotify clone series but thank you for watching this video and if you you enjoyed it please don't forget to click on the like button and subscribe that really helps the channel a lot and if you have any question or you have anything to say don't forget to drop a comment about it in the comment down below so thank you so much once again and I'll see you in the next one this is the third video in this Spotify clone Series so up to this point we've built out this nice UI and we've also created our database and we've connected our postgress database to our application so to connect our progress database we use a platform called zit so zit is a cicd development platform that helps you get to production and operating production so it has a lot of cloud features and one of them is creating and deploying managed databases so in the last video we created a manage postgress database on zit and we connected it to our jangle application in the next video we're going to be using zit to deploy your application onto the web so make sure you have an account on Z and you are signed in so you can follow along with this tutorial there'll be a link in the description below so you can easily access zit so once you have that done without wasting any time let's get straight into this video the first thing we're going to do is to take care of user authentication so we're going to allow a user to sign up to our application log in and log out of our application then we're going to add a feature that is going to allow a user to see the weekly Top artist and we're also going to do the same to allow a user to see the weekly top songs and after that we're going to introduce a feature that is going to allow users to actually listen to music then the user is also going to be able to see the profile of an artist and the user is going to be able to search for songs and we're also going to add a couple more pictures so let's get started now the first thing that we're going to do is to take care of authentication so when a user first come to this application if they are not logged in we want to First redirect them to the login page to make sure they are logged in and and make sure that they have an account before being brought here so what we're going to do is to just go back into the code and I'm just going to quit this index tab so right here in views I'm actually going to create three views and I'm just going to copy this to save time so I'm going to say paste this I'm going to say login and this should also be if I come into template the the HTML page for this view it is login. HTML so this should be login. HTML and we also going to have sign up just going to say sign up and then we're also going to have one more view which is log out for this log out is going to be quite different we're not really going to return any of this so I'm just going to pass for now now that we have this the next thing to do is to take care of the URLs so I want to add three new URLs the first one is going to be sign up actually we can just make it log in first same order as the views doesn't really matter I'm just going to get rid of this I'm just going to say sign up sign up and sign up and I'm going to say log out copy this and paste it now that we have all of these views done the next thing to do now is if we come in here into so if I come here and go to sign up you can see automatically it opens up the sign up page which is this nice looking UI that I built and if I come back in here into sign up. HTML you can see right here the reason why the styling worked automatically is because we're not really using any external CSS file yeah so as you can see we're not connecting to any external CSS for this I just used the CSS because I didn't really need to do a lot it was just basic styling so I just quickly used ta win CSS for that that's why we have this nice looking UI now what we want to do is to make is to take care of the actual implementation I'm going to go back in here and I'm going to come into views now right here in views we want to first so we have this form let me explain this real quick we have this form whenever a user input or fuse this form and click on register we need to get all of those details then submit it into our database but before we submit into our database we need to do some checks so we need to check if that username has already been taken if that email has been taken or if the password that the user input is not the same so we need to check and test for all of that before we actually registered our user in our database I'm going to come back in here and so before we can even do anything here in the view we need to come into sign up. HTML so right now I'm just going to close this and right here we're going to have a form and that form is where so right here you can see that we have this form so this form I'm just going to make this separate so you can see a variable now this form is basically the represent or the code that outputs this so what I'm going to do now is I'm going to say action and I'm going to leave it blank now when I leave this blank this means that when a user clicks on the submit button so this register button it's going to take all those form it's going to take the value that the user input and submit it to this page now if I leave the action as blank this means that it's submitting it back to this same page so now if you submits this back to the same page with is/ sign up it's going to come here and submit it to this sign up URL then it's going to take all those values and go into views and look for the sign up function now we can access those values in the sign of function so that's what we're going to do I'm going to explain this to you and so if we come down here after inputting the action the next thing is to input the method so this method is just ask asking us how do we want to submit this form how do we want to send this form to the back end basically so there are two methods you can say get or post so for this particular situation post is more secure because whenever we're sending whenever a user tries to submit if we're using a get method it's going to take all those values and display all of those values in the URL bar we don't want this because this is password you know this is emails we don't want all of that details in the URL bar but when you use a post method you it's not going to show in the URL but it's kind of more secure so post method is always used when you need to submit data that is more secure now whenever we're using a post method in Jango we need to add csrf token we just going to say csrf token and now right now the next thing we need to do is to just give all of these names so for this username I'm pretty sure this is username I'm just going to say name equals username that's literally all we need to do and for the email also we just need to say name equals email for the password I'm just going to say name equals password and then for the repeat password I'm just going to say name equals password two this is good this is literally what we need and then if I come in here where we have this submit button or this register button what you need to we need to do is to give it a type so for now Jango or HTML just sees this as a normal button so if we click on register it's probably not going to submit that this form the reason why is because it's just a normal button but if we say type equals submit now it knows that because this button is under this form right here whenever a user try to click on this button which is known as submit it basically submits all of this form or the values in this form to this page now that that is done we can now access whatever the user inputs in our views so now in our views what we're just going to do is to come here in sign up and the first thing we need to do is to make sure that whenever a user come to this page using a post method we need to get all the requests so let me explain the difference between that post and get again so if a user just comes to this page normally like just goes to this URL this URL or this particular page is being rendered using a get method right so but if a user submits this form then it's going to be sent or that form is going to be submitted using a post method that means the new URL or this page is going to be reloaded but this time around with a post method I hope that makes sense so that means what we can use to distinguish now we can use to this method to know when a user is just coming to this page normally or a user is trying to submit a data right so if a user is trying to submit a data the method is going to be post so we're going to say if requ Quest the method is equals to post now if a user trying to come to this page using a post method that means form is being submitted right so now we're just going to say email equals request to post so this is the format and then we have to put the name of that particular field if I come in here and the name of the email field is just email and I just paste that in now what is going to happen is when a user inputs their email and click on register because we are sending all of this to this particular view whatever the user inputs in that field is going to be saved in this python variable now we can do whatever we want we can submit it to the database we can make different checks but this is literally what we need for now so now that we have this we can use this same tactic for the rest of them so say username and because we know the name of that field is username can say password and we know the name of the first password field is password and this one is just password two and the name is password two I'm just going to come here and write two so now we know that we have every single thing that the user inputs so once the input of fill this form and click on register all the values in here is now being stored in this python variable now we can do whatever we want with it so the first thing we want to do before I even continue I just want to First have an else statement so all of this we said if the request or method is post then we want to start doing all of this but if it's not post so else that means the user is just trying to come to this page normally then we just want to render that page normally so that is why we're doing this well if it's a post method the user is trying to sign up or register to our platform so we've gotten all the details the first thing we need to check is if these two pass passwords are same because if the user input password are not same then we want to tell them yo this password is not the same you need to check that we're going to say if password is equals to password 2 that means if they are the same but now let's pass we will do something but else that means if this password are not the same then we need to tell the user that there is an error so for us to pass a message back to this page saying there's an error saying your password is not the same we need to use something called messages but before we can use messages we need to import it I'm going to come here and say from Jango contri import messages this is how we can import messages so now we can send a message to our template so for us to send a message to our template what we're just going to do is to now say messages so I'm going to come me and say messages doino and then we're going to say request like this and this is just saying we can say the password now we have to input the message we're trying to send just say password not matching now once we have this we can now redirect them back to the sign up page so we say return redirect back to this sign up page so redirect is not being shown so for us to import redirect we just need to come here and say redirect because we can import redirect from jangle shortcut so we can just import it directly now we can come back here and we can actually test this for now let me just say print password same so I want to test if this messages is working so but before I can test it I actually need to have like a HTML code that shows this message if there is a message I'm going to come back to sign up. HTML and right here what I'm just going to do is on top of the so I'm going to come right on top of the form so right on top of this form I'm just going to paste in a div tag and I'm going to explain what that does so if I come here like this so what this D tag does is that it Loops through the messages so as I said once there's an error and we send a message this message is being sent back to this sign up page now we can access it so we say for message in messages just print out the message and we're giving it an H5 tag and we're just ending out for Loop and then we're just adding a little bit of styling here to say that that H5 tag should be color red now this is just so that it shows that there is an error now if I save this and I come back here I'm just going to F this form let me just say to me I'm just going to say to me@ gmail.com and now I'm going to input password that is not the same by it register you can see that it gave me that error saying the password is not matching this is good now we know that works we can continue now I'm going to come back in here and what I need to do is to continue after checking if the password is same so if the password is same we now want to check if the email already exists that means if another user has already signed up to this platform with the same email but for us to do this we need to import the user model so this is kind of like importing the user database that Jango created for us as default so from from jungle. trip just going to say do models import user and also Import off so this user is the user model and this Earth is what we're going to use to actually authenticate or log a user in now that we have this we're just going to come back here and what we're just going to do is to say I'm going to remove this I'm going to say if userobject filter email equals email we're going to see do exist so if this is true that means the email is taken so we're going to do the same messages thing and say messages doino request email taken and then we're just going to return redirect the user back to the sign up page so RN so that is taken care of but now the next thing we want to check if this is not true it's just going to bypass this we're just going to say l if so we want to check if the password is same and this is not true so that means the password is same and the user email is not already taken the next thing we want to check is if the usern name is already taken so say if user doob do filter username equals username do exist then we're going to do exactly the same thing so I'm just going to actually copy all of this to save time and now I'm going to say username taken username taken I'm going to save this for else so if all of this if all of this is true that mean if this is true the password is same and if the email is not taken and the username is also brand new is not taken then we want to register this user on our platform to do this you're just going to say user equals user do object do create user and now we going to give say username is equals to this username right here username equals username email equals post email which is this email right here and then password so password so we can just give it any of these two because it's the same thing so we're just going to say password equals password we need to make sure this is one dot and now what we're just going to do is to say user. save now what we can now do is we can log the user in so this has successfully registered the user but after registering the user let me just say log user in just going to comment this out so after the user has been registered instead of taking the user to then log again which is going to be long we're just going to automatically log the user in so we say user login equals o do authenticate and username we're going to authenticate the user using username and password username equals username and then we're just going to say password equals password and we're just going to say off. login request user login and return redirect back to the own page now so if all of this is true we've successfully registered the user then we're going to log the user in and then read direct them back to the own page now let's actually test this out I'm going to come to this page again now I'm going to say to me toy at gmail.com just going to put in password and register now let's see if this takes us to the homepage that means we have successfully been registered boom we are in the own page we didn't get any error this simply means that we have been registered on the platform which is good but one more thing how does the user know that I am logged into this platform because for all we know this is how it looks like even when the user is not logged in what I'm going to do is to put a specific message here that says welcome user so instead of user I'm going to put the user's username so to do this is actually very simple and just going to take a few seconds so open up this and come into index.html so right here where we have welcome so just going to scroll to where we see welome user you just need to do user do username so you need to have two call braces and in that call braces type in user username and you could actually put whatever you want here you could show the user the email and you could just say user. email but that doesn't really make sense for this use case so we're just going to leave it at username now if I come here and it refresh you're are now going to see that it shows me to me because I am logged in as toy so we've successfully added the functionality for a user to sign up to the the platform now the next thing we're going to do is to take care of the login and log out function so right now a user can sign up to our application and they will automatically be logged in but now let's say I want to log out of this page and then log into another account or sign up again as another user and how do I do that the first thing I'm going to do is to make a user be able to log out because if they don't log out there's really no way they can log in so first of all I'm going to allow a user to log out so what I'm just going to do is to come back in here and I'm going to come into URLs we already have the URL but for the view I'm going to come into logout so in this log out view we just need to make a user be able to log out so the first thing I'm going to do is to make sure that a user is logged in before they can access the logout view for me to do this I need to use a decorator named loging required so I'm going to say from Jango do contri Earth import actually decorators because now we want to use a decorator we can say import login required now we can use this login required not just for this logout but also for index and any other thing we need so let's say we don't want a user to be able to even access the own page if they are not logged in that's where we use this loging required let me show you how to do it right here in log out what I'm just going to do is to say say are login required now when I say are login required it knows that for a user to access this view they need to be logged in but what if they're not logged in how does Jango know where to redirect them to so I'm going to give it login URL I'm going to say login so if they are not logged in it's going to redirect them to the login URL and they have to do that before accessing this page so now for us to actually make a user be able to Lo out is so easy we just need to say off. logout so take a request and that is going to log them out but what do we want to do after we want to redirect them to the login page return redirect to login after they are logged out they should go to the login page now what I'm going to do is to come into index and right here where we have this log out as you can see we have a L this log out just so you know is this particular button right here so I'm just going to say slash logout when I say SL log out once a user clicks on this you're going to see that it works so I'm just going to refresh this page and I'm going to click on log out and you're going to see that it's going to take me back to the login page but we haven't even taken care of the login page so a user can't really loging right now so what we need to do is to take care of that but before we take care of that I want to to add login requir to the hom page I'm going to come into views I'm just going to copy this real quick and I'm going to scroll up I'm going to paste this so now I'm pasting this so that if a user is not logged in they won't be able to access the own page so what I'm going to do now is try to go to the log H page this is the H page and as you can see redirects me here back to the login page but there's something good that Jango does so he knows that after we finish loging in the next page to take the user to is slash now this is because I tried to come to this/ URL which is the Ownage without logging in so it first redirect me to log in and then once I've logged in it's going to take me back to the page I was trying to access initially Jango does this automatically we don't need to write anything to do that ourselves which is good so now that we have that we can take care of this login page so similarly to what we did in the sign up page just going to come into opening my login HTML and what I'm just going to do is to distinguish the form so I'm going to do exactly the same thing and I'm just going to say action equal blank and I'm going to say method equals post and I'm just going to actually come here and copy the csrf token paste that in here so like this and I'm going to give this names and I'm just going to say name equals username and for the password the same thing name equals password now I can save this the next thing I'm going to do before I leave this is to just come here and copy this messages so this error messages so if there's an error it's just going to show that automatically and I'm just going to paste that in and right here I'm just going to make sure the inations is right now this should be good the last thing I actually need to do is under the button we need to make sure the type is submit so now that the type is submit that should be good and one more thing so right here where we have where it says don't have an account sign up when a user click on this sign up it doesn't go anywhere so we want to take them to the sign up page so what I'm just going to do is to say slash sign up like this and I'm actually going to do the same thing for sign up sign in here I'm just going to say slash login good so now that we have all of this we can come back to views and we're just going to come into login now login is quite straightforward compared to the signing up so we just need to do exactly the same thing we did we're just going to say if actually we're just going to copy this like this this is literally what we need but instead of email we need password so we're going to get rid of this so now if request. method is equals to post and username and password we're going to get those two but now I'm just going to say pass and actually we don't need to pass because I wanted to have an else but we don't really need that for this we could just go straight forward and say user equals to or. authenticate username equals username so authenticating using this username and I'm also going to do the same using password and password equals password good so the only thing we need to check for the login view is just to check if the user is not in our database we're just going to say if user is not known then I'm just going to say log the user in log user in just going to comment this out for now but if the user is known so I'm just going to say pass else and I'm going to send a message so let me explain what I'm doing if user is not known means so if a user is none that means this particular credential is not present in our database that means this user hasn't registered so that means the user is known but if the user is not known that means it's the opposite of that that happen that means we actually found this user in our database so that means we can log the user in I'm just going to try to log the user in right now and I'm just going to say au. login do login request user and I'm just going to redirect the user to the own page after being logged in good so now that we've taken care of of that view what if the user is none that means we didn't find this user in the database we're going to send an error message so say message doino request we're just going to say credentials invalid good and then we're going to return them back to this login page to return redirect login good so now I'm just going to come here and try it because this view is done I'm just going to come back in here and I'm just actually going to refresh this page and let me try to log with the user that we haven't registered so I'm just going to say team just going to give you some random password nope and as you can see it says credentials invalid check the database it didn't find his user that means the credential is invalid but if I try to log in with the to me user I created earlier you're going to see that is going to take me to the homepage successfully so that should log me in so as you can see right now I've successfully been logged in to this page now before we move forward I want to introduce you to the API that we're going to be using in this video so for this video to build this Spotify clone we're going to have to access an API that already has a ton of music on it it has all the artists all the details you know so we don't have to start like building all of that ourselves so that is what an API is for and I'm going to be utilizing an API in this video so what I'm going to do is to go to Rapid API so this rapid API is kind of like an API up where you can just search for different apis and you know you'll find whatever you're looking for this video is actually not sponsored by rapid API in any way we're just going to use it for this video because I can easily find a Spotify API or a music API for this particular course I'm just going to quit this so you can go to Rapid ai.com or there's going to be a link for the particular API that we're going to be using on rapid API in the description so you can also just check it out directly from there and right here this is the API so when you go to Rapid API you have to create an account then click the link in the description which is this Spotify scraper and this Spotify scraper is just an API that is constantly updated so there's always music and everything is there it's kind of like an API that is that scrapes all the details from Spotify and YouTube and sound Cloud so we're not just going to be using data from Spotify I decided to go with this particular API because it has YouTube SoundCloud Spotify and it also allows us to have playback so playback meaning like we can actually play music on this particular app that we're building so this is the Spotify scraper and I'm just just going to show you how to use it so first of all the first thing we're going to do is right here this top artist right now is just like dummy data that I just like made but what I'm going to do is to actually use if I come here you're going to see that we have something just going to close this so this Spotify scraper once again it has various different end points so it has tracks home search everything you need so we're going to utilize most of this for this course now if I come down to the Chart end point and if I see list stop tracks so under list stop tracks you're going to see that I'm able to list the top tracks okay this is actually top tracks but what we need for what I'm talking about which is this is top artist so we're going to come over to list stop artist and as you can see under this list stop artist we have an API that is able to do this for us so all you just need to do is to have an API key but you don't even really need to care about that because once you create an account and come to this Spotify scraper rapid API automatically places your API key when needed so all you just need to do this two so right now I'm just going to switch to Python and I'm going to use requests right here and now this is the code this is literally the code that you need to run this endpoint so I mean to send a request to this endpoint so if I scroll down you don't really need to input any of this so I just really hope that you have a basic knowledge of apis you know so that you can kind of understand what I mean by endpoint and what apis actually are so if you don't have a basic knowledge of AP I have a video on my channel just search introduction to API you see that there and um so as you can see this chart end point right here we can see list stop artist and if I just try to run this so I'm just going to say test endpoint that's actually going to run that endpoint and going to give me a result so you can see that right now it's this is the response it's saying weekly Top artist so this is the top artist for this particular week so when we implement this AP when a user come to our application every week there's going to be new top artists so it's not just going to be the same artist forever so as you can see it gives us the top 200 artists which is a lot so what we're just going to do is if I open one you're going to see the artist and the artist ID now this ID is the Spotify ID to the artist profile right this is the artist name and then this is the artist Spotify URL and this is the visual so this visual is where we can see the artti artist profile picture if I come here you're going to see we have a URL to the artist profile picture now this is good this is what we need what I'm just going to do is to come in here and I'm actually going to copy this code now for us to implement this particular top artist into our code and for us to print some data here I'm going to show you what we need to do so we're going to come here and on top of this index we're actually going to create a new function and this function is just going to build a function that get the top artist I'm just going to say top artist but now I'm just going to pass so what we're going to do is this function is going to run all of this so it's going to run so send a request to this particular endpoint run all of this and then this is going to just return the response so the response which is going to be the full artist so the artist name the artist URL and the artist ID so it's going to return all of that right here whenever this is run so what I just need to do is to paste in what I copied going to do this and for this import I just need to import it like right here which is good import request I'm going to report that outside and this is what we need so we don't need to touch any of this and we have our response so this response right now if I print this response. Json it's going to be right here it's going to be all of this which is what we just run so let me just like this this is the response is going to give us all of this but we don't want all of this response right it's going to get printed as a Json response and I could actually test this out but there's no point because we can already see what the output is right here so what I'm going to do is to come here instead of saying print response. Json what I'm just going to do is to put response. Json into a variable so I'm going to say response data going to be equals to response. Json now we can do whatever we want what I'm going to do is to create artist info I'm going to create an empty list now this empty list is where I'm going to store all of the artist data so the data I'm going to get is the artist URL the artist name and the artist ID those are just the three I need and let me tell you why is because we need the artist name that is what we're going to show here we need the artist URL and what I mean by URL is the artist image URL that is what we're going to show here and the ID so when a user clicks on this artist we need to know what artist they clicked on so we can take them to that artist profile page right that's why we need the ID now I'm going to come back here and what what I'm just going to do is to say I'm going to have to Loop through all the artists in this response data let me come back in here and see how we can do that so if I come back in here so in this I'm just going to see right yeah I can do this so in this just going to do this so you can see that a little bit better um we don't really have too much of a flexibility I'm going to put that back so in this here you can see that we have a something in the response which is a list in the response that says artists so what I'm going to do is to check if this artist is present in that response so I'm first going to say if artists should just to make sure we don't have any typographical error that's actually no point let's just type it out if artist like this in response data remember this response data is basically all of this so we're checking if there is an artist list in this response data so if that is true then what we're going to do is to say for artists we're going to Loop through all of this list remember this is a list as you can see here with the square bracket so we're going to look through all the values in this list and we're going to say for artist in response data artist right so this is what we need to do but we need to make sure this has parenthesis now for artist in response data artist now what this is saying is for each of these artists right here in this artist so we say response data artist remember that this is think of it like a like a dictionary so you think of this Json like a python dictionary so if we're trying to get this artist in the response data we use a square bracket and this artist is the key name that's what we're saying for artists in response data what we're going to do is to then say name equals to artist so let's say we want to get I come in here now for every single artist anything we are doing here is for each of these artists right here each of the element in this list so let's take one for example so we want to get the name so we're going to say artist do get name so I'm just going to say artist do get open a bracket name now we could leave it like this but let's say there's there's a problem with just that particular element and it doesn't show the name or it doesn't display the name we're just going to have a default message that says no name right so no name shown now we have the name the next thing is to let's see we need to get the ID so the ID is right here we're going to do exactly the same thing so I'm just going to say artistore ID equals to I'm just going to copy all of this paste it now I'm going to say the ID right here I'm getting the ID but if there is no ID for some reason we're just going to replace it with no ID so we have the artist ID the last thing is to get the Avatar URL so I'm just going to say Avatar URL now this Avatar URL right here if I come in here Avatar URL is if I come into visuals Avatar we're going to open the first one this is the URL we need to get but as you can see this is going to be quite more complex than just getting this because this is the first thing we see in each element so this is the first values in each element but for us to get the actual Avatar URL or the profile picture of that particular artist we need to come into visuals then we need to go into Avatar then we need to get look for the first element in Avatar then we can get URL so let's do this let's kind of do it step by step so what I'm going to do now is to say artist so get what is the first thing the first thing is visuals we're going to say comma let's just leave this blank so this once again this blank just means if for some reason we don't have visuals in that particular element it's just going to be a blank dictionary because this visuals as you can see it is a dictionary now the next thing we're going to do is to say dot get now what is the next one after visuals aat Avatar now Avatar is a list so I'm just going to say square brackets but in there what we have in that list is as you can see is just a blank dictionary so we can just come in and just give it a blank dictionary so we don't have a blank dictionary in that list but what I'm saying is for some reason if we don't we're not able to to get Avatar we're just going to return a list that has a dictionary that is blank hopefully that makes sense so what we're now going to do since we are now in Avatar we want to get the first element in that list which is this so we're going to say to get the first element because now we dealing with a list we use square bracket zero and now we can say do get so we in the first element in that case it is this particular element now we can just say getet URL do get URL and once again if for some reason we can't find URL we just say no URL now I really really hope this makes sense we're going to test this out later now what I'm just going to do is to append all of this info that we got into the artist info list that we created I'm just going to say artist info do append now I think I should append it like as a topple right and and each of the elements is going to be name going to append name then we're going to append the Avatar URL and then we're going to append the artist ID good so now that we have that literally this is done what we just need to do is to return artist info now this is good so if anywhere in the old program anywhere in the views of this page page we just run top artist it's going to get us the current top artist now let's try that so the first thing that we're going to do to try this is I'm just going to take top artist just going to copy that and write here in index I'm going to come into index which is the homepage and I'm just going to say artist let me just say artistore info equals to top artist so what I'm just doing is top okay there is a problem just going to say top artist so what I'm just doing is I'm calling this top artist and it's going to return me with the current top artist and all the information and it's just going to store it in a variable called artist info right so now what I'm going to do is to just send this into the index. HTML so I'm just going to create dictionary code text and I'm just going to say artist info like this should be artist info like this and then I have a comma at the end and for me to pass it to the HTML I'm just going to do this just going to copy that once again properly good this should work but before we test this let's make sure this actually works so what I'm going to to do is when we run this homepage let's just print artists info so now I'm going to bring this up and I'm going to come back in here I'm going to come here and just run this homepage again and let's see if it prints us the artist info so I'm going to scroll here it's going to look a bit messy but look it literally prints us all of the information we need so as you can see we have a list and the list come powers of topples so it gives us the Taylor Swift gives us the Avatar and it gives us the ID next is Drake The Avatar and the ID Bad Bunny Avatar and the ID good this is literally all we need now we can just get rid of printing this cuz we don't want to do that every single time a user comes to the hom page just going to save this but now we know that those details was successful we retrieve those details successfully and we've passed those details to the index. HTML now we can come into index. HTML and we can make the changes to make this artist each of this the actual top artist so for us to do this what we just need to do is to come here into where we have top artist and I'm actually going to remove a lot of stuff so I'm going to remove all of this artist I'm going to remove this going to remove all of this so this gone and this so I'm just going to have the first one we don't need to add more no more because this is going to be dynamic so I'm just going to have the first one right here which is just this artist card so right here and right here so now that we have that list of artists what we're going to do is to Loop through it so I'm just going to say for artist in artistore info and I'm going to end the four Loop here and four what I'm going to do is to now say instead of this particular image right here I'm going to say artist dot so what is this image is this image the first second or third element in the topple so I'm just going to scroll up to the topple that we printed out here and just check so if you can see the first element is Taylor Swift so this represents zero the second element is the image which represents one and the third element is the ID which represents two so for image it's going to be t.1 because that is the second element now the alt the alt which is also known as the name is going to be artist. 0 because that's the first element now the actual name is also going to be artist. 0 right here like this this should actually work right now let's go and test this out just going to come here and itat refresh so what is doing sending a request to that particular endpoint and as you can see this works successfully so Taylor S Drake it basically gives us all the top artist and we can just keep scrolling to see more good now we have seen that this top artist feature has worked successfully the last thing that we're just going to do is to add like uh an a tag so once a user clicks on one of these artists we want you to take them to a particular link and that link is going to be the page of this artist we're going to do that later in this video where we're going to be you know taking care of or building the profile for each artist we're going to do that but for now let's just make these cards clickable I'm going to come back and right here where we have the under artist card in this div just going to say a going to give you an a tag I'm going to end that a tag right here like this and all of this is just going to be under it and the link it's just going to be let me just give it let it be blank for now or I'm just going to give it ashtag for now and so I'm going to give that an hashtag and let me save this and see how this looks like going to hit refresh and okay so as you can see that works if I come on this and click click it it should take me somewhere but it's not going to take me anywhere because uh the link is taking me to is an hashtag so it's just going to remain on this page if I told you to like log me out or take me to the profile page we're going to do that later in this video but the only problem is now that we clicking as you can see having this like weird red lines is having some decoration so let's just get rid of that real quick because we don't want that to be there so we just going to have a styl into the a tag and let's say text decoration set it to none we set text decoration To None there shouldn't be any colors and it should be default and let's try this out again and let's see so as you can see there's no line under it even if I click it you don't see any line now this is good because we're able to get the top artist and actually show that data right here now that we've taking care of this top artist the next thing we're going to include is the top songs so right here where we see browse all normally I just made this template for it to just show different kind of genres but I think what we can just do is to just show the top music right now and display everything here that's what we're going to do and let me show you what Endo we're going to use in this Spotify scraper API so right here just under the on top of the top artist so if you come here you going to see list top tracks this is what we're going to use so you click on it it's going to bring you to this code code spinner now go to the python and click on request let's make sure we have that done Python and then request so this is actually what we're going to use but now let's go back to vs okay not this uh let's go forward let's make sure that is good and we want to go into chart and list stop tracks I want to make sure that is in Python request good so now what we're just going to do is come back in here and let's go into views so right here we're just going to do something similar to what we did in this top artist so just the way we created another function for the top artist we're going to create another function for the top tracks or the top songs we're going to do that right now and then once we are done creating that function we're going to use that or the response from that in this index so what I'm just going to do right now is to come come here and create a new and just say top tracks I'm just going to pass for now this is what it looks like I could just go ahead and collapse this and I'm going to copy this code this is the code I need and just going to come in here and paste it so I actually don't need this to import this and so right here what we're just going to do we're going to do the same thing something similar so what I'm going to do is to show you the response so if I just test this Endo this top track Endo let's see how the response look like so we're going to know what to get so right here very similar to the top artist we have the title top songs Global so the weekly songs so this is the description says your weekly update for the most Play Tracks right now and this track is as you can see it gives us top 200 songs again and the only difference with this is that this is giving us tracks and not just the artist so what we can do now is to get all of these details so we kind of already have this so what we're just going to do is to say right here we're going to say after getting response we're just going to say data just going to get rid of this we're going to say data equals to response Json and then we're going to create a new empty list and say trackcore details so this track details is just going to be an empty list and this is where we're going to store all the tracks later so we just need to first of all make sure that we have the empty list to take care of that and now what we're just going to do is going to come in here and similarly to what we did right here where we check if so if I come here in this response we checked if there was tracks so we're just going to come back in here and say if tracks this needs to be in quote in data now what I'm going to do is to kind of get so I'm going to what I want to do is I want to get all of the tracks but I just want to get let's say just the first like 18 items if I come back in here as you can see it gives us 200 if I come here and I scroll down you're going to see we have just three different rows and each of those has 1 2 3 4 five six so it just add six so in total that is 18 so we want to get 18 and what we're just going to do is to shorten this data so I'm going to say shortened _ data equals to data tracks I'm going to get just the tracks the tracks list from the data and I'm going to shorten it to the first 18 right so this is what I need and now that we have shortened it and we have all the tracks what we can now do is to extract the specific detail so we can say for track in shorting data so instead of saying for track in tracks now we just say shorting data because this shorting data is also the tracks list but it's the tracks list that but it only has the first 18 elements in that tracks list which is basically what we want so for tracking shorten data we're going to say track ID so let's just kind of write down everything we want to get I'm just going to put it here we need to get the ID we need to get the track name we need to get the artist name so the owner of that song and the cover URL so we need to get the URL of of the image of that particular song I think this is just all we need and we're going to get that now so say track _ ID equals if you come in here so if you come here in each track let's see let's just open one so we already have the ID we can just say track and we're just going to say square bracket ID so we just say track square bracket ID this already gives us the ID we can do the same for the name because if you come here you're going to see that the name is also there we're just going to say track name instead of ID now it's just going to be name next thing is the artist artist name this going to be quite different because if I come here and we come to artist so this is not just the first you know like a chain it's not just the first value so under each track right we have to come to artist and then under artist we have to get the first element then we can get the artist name right so let's do that this is the name right here so what we're just going to do is to say artist so we're going to say track but now we're going to say artist and we're going to get the first element under the artist and we're going to get the name so we can do it like this or we can also use this format if you come back here remember we use another format right here where we like artist. get and this but I just want to show you another format so just to increase your knowledge on that so we can also use this format to get the name and everything but now what I'm going to do is so I'm saying get track artist get the first one and then get the name right so I only want to get this if track artist so what this is saying is I want to try to get all of this only if there is artist on that track if we come back in here remember under this track there's artist so he's going to get it right but else that mean if there's no track under there's no artist under track then the value of this artist name should just be none I'm going to do the same thing for the cover URL cover URL I'm just going to say track but now let's see what we need I'm just going to actually close this and just open it up again open up this time as you can see instead of artist it is album Now under album we have to go into cover under cover we have to get the first one under the first one we can get URL let's Remember album then cover then the first one the first element and we can get the URL let's do that so we need to get the album and inside the album we need to get the cover and in the cover we need to get the first element and then in that first element we need to get the URL so this is going to give us but we also want to say if track so we only want to do this if track has an element called album and if album also has something called cover else none that should work now what we're going to do is to just say track details so I just want to append all of these track details right here into this track details list I'm going to say the append but this time around I want to append it as a dictionary so if you remember the last time we appended it as a topple but now a dictionary so I'm going to say ID we can use anyone to be honest but I just feel like using this one so we want to say ID the ID of that track is going to be track ID which is this then we say name and then the name of that track is going to be track name and then the next thing we want to say is the artist and that's going to be the artist name underscore name so this is a variable we don't need codes and the last one is going to be the cover URL which is going to be cover URL like this so now that we have this what we can just do save and now we said if tracks in data then we want to do all of this but what if track is not in data we just want to return something so we can just say print like track not found in response so this is just going to help with like debugging if there is an error so now what we can just do is to return track details this should be good now what I'm going to do is to come into index and in index I'm going to call this so if I just try to copy the name to tracks let me collapse this and in index I'm just going to say topor trackcore list equals to top track going to make sure so top track list is just going to be this top track and what I'm actually going to do is to print out this top track list just to make sure everything is working I've printed that out let me bring the terminal back up scroll down to the latest now let me try to refresh this page and when I refresh this page if I come back in here as that page is being refreshed as you can see it gives us the top track but it's not that much because remember we shortened the data to only the first 18 elements so now you can see we have ID name artist and the URL of the cover of that particular song good now we know we have this next thing we want to do we have to take an approach here so remember I said this is in chunks of six so as you can see 1 2 3 4 five six so because of the UI and the way this is done I think we could just break this data that we have because it's 18 right we could break it into three parts and each of those parts will contain six elements and then we could just serve each of this right here we could do that or we could tweak the UI to make all of this one so that but only I'm only doing this because in the UI like when I try to swipe you know when we swipe it's kind I kind of made all of these separate components in itself each of these rows I made them separate component just to take care of that but I'm pretty sure like we can also just make all of this one component and we could just Loop through it once but um we can do any any any of that to be honest but for now we're just going to try to split this data into three chunks so what I'm going to do is to say let just say divide the list into three part and I'm going to say first six tracks going to be equals to top track list six so what this is going to do is that it's going to filter this top track list by only the first six elements I'm going to copy that but this I'm going to say second six tracks top track list 12 so this is going to cut you tie to the next six I'm going to do the same thing for the third third and now this going to be 12 to 18 this is good and now in context what I'm just going to do is to pass all of this to the HTML like this just going to copy second second six trct and third like this so now that we have all of this we can come into index. HTML and right here in index. HTML what we can just do is to scroll down to where we see browse all can change this browse all to top songs now in each of this you can see 1 2 3 four one 2 3 4 5 6 I could just remove all of this and leave just one like this and do the same actually contr Z back I'm going to remove this and this okay good so this should be good and I'm going to remove this too okay this should be good and um it should be like this yeah and I'm just going to do the same for this also 1 2 3 4 five remove all of this I'm going to do the same for this also remove all of this and now what I'm just going to do is to say I'm going to Loop through it I'm just going to say four for track in I come into views press six tracks and four and I'm just going to do the same and I'm just what I'm going to do to just select this and also select this just copy that come here paste that in here just going to make sure this works going to paste that option paste this in here the same thing option okay that taking more time I it shoot so I'm just going to cut this out and just paste it here like this okay good so now what I'm just going to do instead of first six I'm going to say come here copy the name second six and for this I'm going to come here and copy the name and say 36 now we're going to say right here where we have image going to say track dot remember if we come here we come into this list so we're going to come here in each of this we have cover URL so that is the image track the cover URL and ALT for the alt I'm just going to give it the track name so track the name so let's make sure that that is it so name artist I'm going to write here the name and um what we're just going to do is to do the same thing I'm just going to copy this paste that in here paste that in here also I'm going to do the same thing for this paste that in paste that in I'm going to copy this cover URL paste that in and paste that and replace this right here so now we've successfully done on this and as you can see we have the track name showing we should have the URL and stuff now let's just try this out I come back in here and E refresh let's see what happens when or everything loads successfully good as you can see we have the songs greedy loving on me um cruel summer so we have all the songs right here I swipe you can see it filters it to just six songs we have everything right here that we really need which is good so now as you can see we are making a lot of progress in this and it's it's it's working so what we just need to do now is when a user actually click on one of these song we want to take them to a separate page so like a separate music page where they can actually play this song that's the main part of this whole thing so let's just make sure we can do that but before we even get to that just the way we allow this to be clickable let's also allow each of these song card to be clickable I'm going to come back in here and right here where we have category so this category card D I'm just going to have an a tag and I'm also going to end it right here going to Tab and this and I'm just going to for now say f should be like hashtag once again I'm going to use the same styling I'm going to say style text decoration should be none just to make sure we don't have no underlines or anything so I'm going to eat refresh and let's see how that looks okay good there's no text decoration but as you can see if I click on it bringing me back to this page which is good but you can see there colors we don't really we don't want no colors right let's just change it back to Y we could just say color should really be why okay not this why like this unless it refresh and see how that is looking good now we can click on this should be working if I scroll up and click on this it takes me back to this page good but this only works for the first so let's do the same for the rest I'm just going to come here put this right here put this here and then indent I'm going to do exactly the same thing for the last one cut this out put this here tab tab now this should work if I come back in and refresh everything should be fine should be working as plan let's just refresh good so as you can see if I click on any of it brings me back to this page now the next thing we're going to do is when we click on any of this music it's going to take us to actually listen to this music now we're going to do that next now the next thing we're going to do is to allow a user to click on a music and actually listen to that music what we need to do is to come back into our code and we're going to go into URL so right here in URLs we need to create a new URL I'm just going to copy paste and this URL is going to be music and we're just going to say views. music and the name should be music the only different thing about this URL is we're going to use a dynamic URL so we're going to have something like if I come back in here when the user clicks on this we want to have something that says slash music but then we want to say slash the ID of that song right and the ID of every single song will be different so what we're going to use to represent the ID of that song in here is going to be this so what this is saying is that we can go to music slash and then whatever is going to be here is going to be have to be a string and it's going to be stored in a variable called PK that is basically what I saying now we're going to come back into views I'm just going to bring that down a little bit and then bring this down a little bit and right here I'm just going to have the so I'm just going to come here I'm going to create music going to take a request but now remember that we have this PK right here so it's also going to take this PK and then we're just going to return render request and then if we open up the files we're going to see that it is music. HTML just close this and just say music. HTML I could save this now if I come and let's say I say just click on this okay it says as you can see okay right now because we didn't so if I just refresh this this should work so okay we didn't save this if I come back here you're going to see that URLs is not saved but now that it's saved if I refresh you can now see that we have this page even if it doesn't really look nice right now but this page is working so what we just need to do is to come back in here go into music and the reason why the styling is not working because we have we are connecting it to the styles. CX CSS file which is basically this file right here style. CS but we're not adding the format so first of all we need to come here and load static and for us to add this I'm just going to say command shift p and run auto Jango which is this and as you can see automatically it has added or updated that for us so that is what we need and what I'm just going to do you can also do that manually if you don't have Auto jangle installed but if you want to Quick fasten that process let's just come to extensions and install auto jangle so now that we have that we can save and if I come back in here I'm just going to come back in here and hit refresh you can now see that we have this good looking UI which is good this is what we need so now the next thing I'm going to do if I come back and go to home now once the user clicks on any of this we want to take the user to that page how do we do this so I'm going to come back to index but right here in index what I'm going to do is where we have this particular a tag so where we have this link we're just going to say SL music but then remember that in this first six tracks if I come back into views just going to close this up open up index so in this track this was from Top track so I'm going to open up top track remember that we have ID so what I can just do is to come in here and say slash just going to copy all of this and say slash track. ID I'm going to copy this and paste it in the other places going to do the same here and then do the same here so I could just log in I me come back here collapse this come back to music now if I come back in here and it refresh if I click on any one of this you're going to see what it does I'm going to click on this song even if it doesn't show that song right now but you can see right here that it goes to music/ the ID of that song note this ID if I come here and I click on just any other song you're going to see that the ID is different now we're going to use this unique ID to get the details of that particular song so the song name the artist the duration the actual song we want to play and also the song art so we going to do that in a bit so what we just want to do um also in this music I just want to come here and where we have I'm just going to come in here and this add a br hit refresh let's just add more H refresh so I'm just trying to bring this image down what we can just do to add it here right just right before the image and that should come down and let's increase this back um just so it's going to be bigger and um I'm just going to cancel this actually and what I'm just going to do is paste this like six times just so it could fit the screen there's there's probably also a better way to do this but let's just have this as well okay good good let me just remove like two of this and that should be fine okay good so this is what we have this should become um now what we're going to do is to get the song details we need to get all of the details right I'm going to come back in here and come into views and what I'm going to do is in music let's actually first come to the API and see how we are going to do this so let's first start by getting the details of that song So now that we have the ID I'm going to close this chart if I come into track and I click on get track metadata so I'm going to use this Endo if I look at results actually let me test this particular one so if we input an ID of a track and we test the end point this is how the result is going to look like so it's going to give you the duration of that particular song is going to give you the name it's going to tell you a track it's going to give you all the details and from this we're going to get some of these details right the only thing it doesn't give you is the actual playback which means the actual link to play that song right but we're also going to take care of this later but that's the only thing this track metadata doesn't give you so we're kind of going to do that ourself later so now what I'm just going to do is to click on this code spinner and copy this I'm going to come back in here and paste it in music just going to add indentations and remove this so now what we just did was first of all let me just say trackcore ID equals PK so I'm just storing this PK which is a track ID into a variable named track ID just for better code readability so now what I just did was to use that end point to get the metadata and from this metadata what I'm going to do so right here we have the URL and then we have this query string so this query string instead of just having this particular track ID I'm going to have my track ID instead which is this track ID also known as the ID from this link right here so that is what we have and now what I'm just going to do where we have this response and remember we also have response. Json so what I'm going to do is instead of printing this I'm going to get rid of this and right here I'm just going to say if I first want to check if this response was successful so I'm going to say if response the status code is equals to 200 and data should be equals to response. Json right then I'm storing it in a variable called Data now I can extract the information we need so once again let's write down the information we want to extract we want to extract the track name we want to extract the artist name and that's basically what we want to extract track name and artist name so I'm just going to say extract I'm going to comment that out now how do we do this so to get a track name if we come back into results let just just collapse all and in this result we can just say track. name and we basically just going to get that particular track name I'm going to say track name equal to data which is this do get name so that easy now the next thing I'm going to do is to just get the artist name so the artist name is not shown here if we come here you're going to see that the artist name is a is part of a list so first we need to get this artist list so what I'm just going to do is to say artistore list equals to data. getet artist and if we are not able to get this let's just return a blank list so now that we've gotten this artist list we now to get the artist name so this artist could be multiple so the way this API works is that if three different artists sing a song it's going to kind of like put all of them into this list but for this for this particular song is just one artist that sung this song that's why there's just one element in the list but if it's multiple it's going to be like multiple elements but for now we SK this application simple we're just going to get only the first artist which is the main artist or the owner of that song right and that is the first artist name so what we're going to do is to just say first artist name going to be equals to artist list so from artist list let's see what we're trying to get under artist list we want to get the first element and then we want to get the name so we're just going to say artist list first element do get name now we're going to have a condition only only want to get this if arst list else say no artist found right so we only want to get this if this artist list is true so if we're able to see or get a response or list from at Leist called artist from the data then we want to do all of this so now that we have this artist name there what we can just do now is to create a context so this is a new dictionary called context and I'm just going to say track name just copy the name and let's give it track name value and the next one is just going to be the artist name we're just going to say first artist name right and then we're going to pass this dictionary into our music. HTML now this is part of what we need we're not done yet but we've was gotten started so now we can use this two information in our music. HTML let's just use this to make sure try this out to make sure that everything we're doing is working so now what we can just do is right here here where we have song name can just say track name right which is what we have right here and for the artist the owner of the song where we have artist name and just say artist name now let's try this out let's come here I'm going to go back right I'm going to click on this greedy song by Tate McCrae and as you can see it says the name of the song and it says the artist that suang that song let's try for another one let's say this this should be by Jack Alo right so it says the name and it says the owner of the song so that is good but the only thing is that is just the basic information we still need to get the actual song we need to play the actual song we still need to get the image of the song right so we still need to do all of that and we also still need to get the duration so that this is not just going to be you know just this four minutes for every single song and we also need to use some JavaScript to kind of track the song as we're playing it so as we're playing we need this to be moving and when a user click back we want the song to go back by 10 seconds when a user click on the forward button we want the song to go forward by 10 seconds also going to do all of that in this video so I'm just going to come back in here now that we've successfully been able to get the artist name and track name let's come back and then bring the next thing that we should try to do is to get or play the music to actually play the music so what we're going to do is to use so I'm going to come here and show you the end point we're going to use so you see this download track on YouTube this is what we're going to use so this is very good because all it just needs is that we just need to input the name of the song and the owner of the song the person that sang the song and it will come into results and we come into okay so let's just test this particular Endo to this Lego house by Ed shiron and let's see the result so if you come under YouTube video and you come under audio and just click on anyone to be honest it's going to give you the URL to actually play that song which is very good so if I just come here I copy this let's say I open it up I'm going to quit this but I quit immediately because if I play it it's actually going to play out that song and you know I could get copyrighted by YouTube but um as you can see that actually gave me a link to play the URL the to play the audio of that particular song so this is the end point we're going to use to get the audio and we could also use this to get the duration which is what we have here so let's just do that right now I'm going to come back in here right but for this I'll say we should create a new a new function instead of having it in this same music function let's create an external function for this just so our code is not messy so I'm going to come up here so right here where we have to tracks I'm just going to create another function and say Let me say something like getor audio _ details and it's going to take a query now this query is going to be the name of the song and the artist of that song or the owner of that song Let me just collap this so now what I'm just going to do is to come in here and copy this I'm going to copy this python code and paste it in this particular function I need to give that indentations good now the only thing I just need to change is to actually change the query so right here where you see query string the query is going to be this query that we getting as this parameter that is been passed into the function so now the next thing we want to do is to remove this print response because we do not need it so now we're just going to make an audio we're going to say audio details equal square bracket so this square bracket this audio details what is doing is just that it is with we're going to store all the details of that audio later when we're done getting all the details so the details we need is just the audio URL so we can actually listen to the song and the duration of that particular song so now what we're just going to do is to say if response do status code equals to 2 200 then we can say response uncore data equals to responsejson and now once we have the response data the first thing I want to do is to extract the first URL from the audio list so if I come in here as you can see in the result I'm just going to close everything so in the result if you open YouTube video and you open audio and you open the first one you see URL so that is how we're going to get the URL so what I'm just going to do is to go under YouTube video and then order audio so I'm just going to come here and say if YouTube video in response data and all audio in YouTube video audio in response data YouTube video so what this is just saying is if this is basically present and this audio is there then what we can do is to say audio list let's bring this up a little bit should be equals to response data then now we want to get the audio list so YouTube video and then on that YouTube video we just want to get audio and now since we have this what we can just do to say if audio list so that means if this is true so we're just kind of checking this twice just to make sure there's no problem and it will be easier to debug if there is a problem so if audio list I'm just going to say first audio URL you can use anyone the first one the second one cuz all the same thing so I'm just going to say audio list let me just make sure you understand what I'm doing so this audio list is basically all of this list right here but then I'm getting the first one right now right and under the first one I'm going to get the URL now I'm going to say audio list I'm going to get the first one and under it I'm going to get the URL that is how I'm going to get the URL I'm going to do exactly the same thing for the duration text so under there if I scroll down you're going to see we have duration text and I'm just going to say duration uncore text right and I'm just going to come here and say duration let's make sure we're writing it correctly scroll back duration cap T So duration capital letter T and EXT so that is duration text but now we're going to append these two values onto this audio list just going to copy that name and I'm going to say audio list do append first audio URL and I'm going to also append duration text so now that we have that appended so if audio list but if this is not true that mean if we can't find audio list and we can just print no audio data available and let's also have another lse statement for this and we can print no YouTube video or audio key found right so that is if this is not found we're going to print this and else so if let's have another else for this and this time around it's for if the response status code is not 200 then we're just going to say print failed to fetch data like this now this should be good and what we just need to do is to redion return this audio list just going to say return audio list I'm sorry audio details now if we call this particular function and we give it the correct or the right query it should return the details we need so we're going to do that now in this music function so right here in the music function so the name of that is get audio details and what we're just going to do is to actually get those details so I'm going to come here to write on first artist name I'm just going to say audio _ details _ query so what I'm just doing now is to first come up with the query before I can try to call that particular function and remember the query is if we come back here the query is the name of the song followed by the name of the artist so we're just going to say track name which is name of the song followed by artist so which is first artist name so this is the correct query and now we can get the actual details audio details so we can now get the actual details by saying audio details equals get audio details but now for the query we're going to have to use this query we're just going to paste this in and now that we have this audio details we can then get the audio URL we're going to say audio URL underscore URL equals to audio details we're going to get so if we remember correctly the first thing we appended was the URL so we first appended we come back in we ping the URL then the duration text so the URL going to be the first and then the duration text going to be the second one right here now what we're just going to do is to add that right here in the context dictionary so we're just going to say audio URL give it a value audio URL and then duration text and then we're just going to give it the value duration text like this this is good this is actually what we need this is what we want now the next thing that we're going to do is to just kind of show this in the page so I'm going to come back to music and the first thing I'm going to change is the duration text I'm just going to change this to the actual duration text so if I come back to views and copy that duration text I can update Del it with this if I save it and come back in here and let's say I click on one of this let's see what that does or the update that that change to the music page so as you can see now it's saying the actual duration text of that song If I scroll back and I click on this it should also say the same thing and as you can see the duration text but now what we want to do is to actually now play the music now this this is where it get we have to use a little bit of JavaScript I'm going to come into music. HTML and right here I'm just going to move go straight forward by creating a div tag sorry a script tag so I'm just going to say script like this now I'm just going to kind of paste in some block of code but I'm going to be explaining all of this code so what I'm just going to do is WR right here I'm going to paste this in so what this is doing is that we are getting access to all of these elements and storing that access think of it can of be like in a variable right so audio player now if we come here we are going to have we are getting with with the element of ID right and we need to have we coming here where we have we need to have a div tag or we need to have a tag that has has an ID of audio player and that is going to be stored as basically the audio player right and the next one we want to do is talk about is the pause button so if you come in here where we actually have this you can see we for this play pause button it says get element by ID play pause you come in here you're going to see that we have the ID play pause and the same for the progress bar you can see that the ID is PR progess bar and for the actual progress you can see that the ID is progress and for the current time element so we need to access this so we can be updating the time every as the user is listening to the song current time and then total duration total duration now we are able to get this the next thing is to we want to update the duration text so what we can do is to update the duration text with this duration text that we got from here but we already done that so we actually don't need access to this but we could just leave it there cuz we my later we don't know yet but we already updated it right here we already have the duration text shown so we don't really need to write anything to update the duration text but the next thing we want to do is to first of all play the song right so what we're going to do is I'm going to going to come here and right here where we have audio Source URL so this audio now if I show you this this audio ID right here so this is the audio player right here that we trying to get this is the audio tag now instead of this just playing some run whatever this is so what we want you to play is I come here I want you to play the audio URL so remember this audio URL that we got here that is what I want you to play right so what I'm going to do now is I'm first going to add before we actually play the song what I'm going to do is to add uh a block of code that takes care of the user being able to play and pause the track so this is the main thing we need so right here you can see play PA button adding an event listener so this play PA button is basically this button right here this button I come in here it is this button so if so once they user click on it if the play is post right if audio do Post then we're going to say audio player. playay right that's what we're going to do but and then if we're now playing it we want to change the inner h HTML that play button to this now this what is going to do is that it's going to change this from play to pause it's going to have like the pause button else that means it's already playing then we just want to pause it and change it back to the play button now that is what this does and the next thing we need to take care of is actually updating the bar as the audio is being played so as the audio is being played we want this bar to be moving moving till the end so what we're just going to do going to paste in this block of code once again I'm just going to show you everything so you can be able to see what we're doing that is the old code and we're saying audio player. add event listener so we're also sticking with if I come here this audio player but now we're saying add event listener time update so what we're saying is as the time update so every single change of that time then we are creating a new variable and calling it progress percentage and what we're just doing is we are saying audio player do current time we're dividing it by the total duration and then we're multiplying it by 100 so we can use that to get a percentage of how so a percentage of how much of the song has been played already right and this is just how we get our percentage then we can go into that particular progress remember when we got this progress right here which is basically this actual progress if I come in here to show you it is this green line that you see here now what we're going to do is we're going to update so we're saying progress style do width we're going to update the width with the progress percentage which is this now I'm going to show you something in the styling so this uses the style. CSS what I'm going to do is to open up style. CSS and show you I'm just going to search for progress this is the progress bar but this is actual progress so this progress do width remember right here that is what is being updated progress if we come in here progress do style. width so that is it right here progress dowith right now is at 1% that is why you can only see just 1% of it but what we want to do I could close this what we want to do now is that as the song is being played and the percentage of the song that played is been calculated we want to keep updating the width of that particular progress bar so it can keep moving until the end of the song and that is what that does and the next thing we just want to do is to just update the time so instead of just having 0 0 right here what we're just going to do is to create a new variable called current minute and then we're just going to use the math and then we're going to say math Flor and we're going to say audio player. current time we're getting the current time but this current time is going to come to us in in um seconds no not in seconds it's going to come to us in hours so but what we're going to do is to divide it by 60 so if we divide it by 60 is going to give us the minute if I'm correct that should be what it is no actually it's not going to come to us in hour it's going to come to us in seconds um I just realize because uh whenever we're using the current time in an audio tag if we have an audio tag right here and then we use current time in JavaScript this current time returns it as seconds so then we divide that seconds by 60 to get the timing minutes now we can store that minute in this current minute and we can also use that to get the current second so we are saying to get the current second we have to say audio player the current time minus current minute first have to subract from the amount of minute already played then multiply by 60 that gets the second and now we can just update the context the the text content which is this particular one right here where we have current time can update that by this format using this format right here now that we've done that the next thing is so going to add like a sick functionality so what what I mean by sick functionality is let's say I'm playing this song and I want to skip to like this part so when I click on this part I want to to the song to skip to that part or when I click on this part it Should Skip to that part I click back it Should Skip back that's that's what I mean by seek functionality and this is the block of code that does that so we're also getting the current the progress bar but we're adding an event listener this time around a click event listener on that progress bar so we are getting the progress bar with by saying progress bar client withd and click xals e do offset X so we basically getting where the user is clicking and then we are getting the width of that particular part and then we're just saying duration equals audio player dot duration right that's what we're just getting the current duration and then we're saying audio player. current time we are setting the current time we're updating it with click X which is where the user clicked divided by the progress withd bar right times duration so that gives us the time the short time we want to jump into so that is done the next two things we want to do is to just write the code that moves or skips the song forward so if I click on this I want this to move forward by 10 seconds every time so for us to do that we're going to bring this code in just going to show you the old code right here I'm going to get rid of this so this code moves forward by 10 seconds when it user clicks on the button so what we're doing is we're getting element by ID next so if I come in here so you can see this button this is the next button it has an ID called Next the previous button has an ID called previous we're using that to get those button and we're adding an event listener so click event listener and what we're just saying is once it is clicked we want to update the audio player current time and what we want to do is to update it by 10 seconds for this if the previous button is clicked you want to update it by moving it back by 10 seconds now I'm saving this just going to crl Z I'm saving this and everything should now be working perfectly because this should be the script for everything now what I'm just going to do is to come back in here and I'm going to eat on refresh right and now this is going to load everything up for me it's going to load the the song is going to load everything now in here if I just going to make sure that this is muted just because of YouTube copyright but this is going to be working so I'm just going to play this song and you should see as you can see the time is being updated and the progress bar is moving so if I unmute it you're going to hear the song but I'm going to I'm not going to do that because of YouTube copyright but when you try it this should work I'm going to try these buttons If I go back as you can see it went back 10 seconds if I go forward as you can see it went forward 10 seconds and I could go go to anywhere on the old progress bar and it's just going to update for me as you can see everything is been updated alongside with the music so we've successfully added the feature that allows the user to listen to music this is the most probably the most important feature and the next thing is to just show the music image so right here is just showing the same image for every single song so we're going to update that to make sure that the image is the image of that particular song now what we're going to do is to update this image if I open any song every song is just going to have this image right here but we don't want that so what we want to do is to be able to update that image to the actual image of that song So to do this we're going to use a concept called Web script I'm going to come back in here into views what I'm going to do is I'm going to create a whole new function to get this let me explain what I'm going to do so if I come here I just open my browser and I opened an Cognito Tab and I open the song on Spotify so I'm going to open up developer tools so you come here by going to more tools and open up developer tools I'm just going to drag this all the way here and as you can see this is the image of the song what we need to do is to get the link or the URL of that song so I'm going to click on this and then click on that URL so if I come here you're going to see that on this page this is the tag that contains that particular particular image URL what we need to do is to get this URL that's literally all we need to do and we need to know that it's inside the image tag with the image tag that has an attribute named alt and that alt just has the title of that particular song right so that's what we need to know and then we will just get this particular image from here so I'm going to show you how to do that using web scripting once again you can use plenty ways there's probably an API that can do this you can also use API you know but um this is just another way of doing it and you can also learn web scraping using this method so now what I'm going to do I'm just going to come back in here and as I said I'm going to create a new I'm going to create a new function just going to come here and I'm going to say Dev get Track image now what I need is just the track ID and the track name for now I'm just going to pass let me just collapse this and now what I'm going to do as I said is called Web scraping so the first thing I need to do is to make sure that I have two things imported I'm going to come here and I'm going to import I already have reest imported but I'm going to import beautiful soup so beautiful soup is a python library that is used for web scraping I'm going to say from bs4 import beautiful soup as BS so we don't need to keep typing beautiful soup all the time I'm also going to use reject so I'm going to say import Ray just remove this CU I'm going to use reject later you're going to see why and if I come back in here I'm going to come here now we're going to use web script in I talked about so what we're going to do is I'm going to come to this place and copy this link so this is the link to access I'm just going to say URL this is the link to access the Spotify track page of every song as long as you have the ID what I'm just going to do is to remove this ID and just append the ID that we getting from yeah of the argument that been passed in so that is the URL and for me to web scrape I'm going to say R equals I'm going to send a request. get going to send a get request to that URL it's kind of like sending a request to an API endpoint right well this is going to be requests and I'm going to say soup equals to BS R which is this the content so what this subp does is that it allows us to edit or get data from the HTML content of that particular page so once we have that what you can now do is to get the HTML content for the image so what we need to do is to know so let me first say image links HTML equals to so we're going to say soup which is this do find so we already know we're looking for an image tag but what attribute does he have that is going to allow beautiful soup to be able to look for that image tag easier so if I come back in here remember what we said in this image tag right here it has an alt and the value of that alt is the name of that song or the title I come here you can see that this is the title and that is the value of that Al we can use this to get the specific URL I'm going to come back in here and I'm going to say alt and that Al is going to be track name because that is the value so once we have this now we're going to that this basically gives us the whole HTML tag so I'm going to say if image links HTML right so that means if we're able to get this then let's let see what we want to do what do we want do we want this so we want to we could get this SRC but the problem with this SRC is that the quality of the image is quite bad so as you can see it's just 128 to 128 pixels that is rended size but if you come into SRC set so it gives you a list of all the all the source or all the URLs of this image but it gives you different sizes right so this is what we want that's why I'm going to get SRC set then from this SRC set we're going to get the biggest size from there then we can render it however we want you can also just directly get this SRC from here and just display it that is going to be easier but it's just that the image quality is going to be quite low so we're going to get SRC set instead of just getting SRC so right here I'm just going to come in here and what I'm going to do is to say image links because that SRC set is a bunch of links it's going to be image links HTML and in it I'm going to get SRC set right now else that means if we're not able to get image links HTML I'm just going to say image links let me just leave it blank but now as I said this the value of this now is basically let me just come back to where we right here so the value of this is basically all of this so if I click on on this and then I click on SRC set you can see we have a bunch of links so we have this link and it says 150 w we have this link says 300 W comma we have this link 320 all the way to 640 so that is the value that is basically stored in this variable now but what I want to do is to use Rex to just get the biggest size and the biggest size is the link right beside 640 W that is the best quality so I'm just going to use Rex to filter that out and what I'm just going to do is to actually just bring in that Rex code I'm going to use regular Expressions right now I'm going to say match it equals to R do search it's going to search for HTTP this is basically the format for getting that URL I'm just going to search for the one beside 640w because that is the best quality going to search for it from image links which is the SRC set now if if m if the match is found then we're just going to I'm just going to say URL 64w let me just name it this and that is the highest quality so I'm going to say match. group but I'm going to have to remove this 640w because I only want the link just going to say match. group. R strip just going to say 640 W so this is just going to remove the 640 W part for us or else if there is no match we're just going to say this should be blank and now we can just return this so This should work everything should be fine and let's just try this out so now let's say we're trying to run this just going to copy this get Track image close this come into music right here in music we're going to have to get the Track image so right before context I'm just going to come here I'm going to say Track image _ image should be equals to get Track image but we're going to have to give it a track ID and this track ID is should be this track ID right here that was already passed into music so that is this track ID and then the track name is just going to be this track name right here that we already got so now that we have those two what we can just do is to get the Track image and now I can just do this right and once we have the Track image I can now go into so what I'm just going to do is to come here and go into music and right here in music where we have this particular cover so this music cover I'm just going to input save so this is just what I I'm doing right here and I'm just going to come back in here so as you can see everything worked perfectly and you can see that it gives us the image so we can reduce the size of this image just to make it look better well I think that is fine so this is very good because this works and if you play the song the song also plays everything works perfectly fine so this our music page is working fine now I'm just in the own page and what we want to do now is to create artist profile page for every single artist on this platform so when a user clicks on this artist we want to take them to the profile page of that artist so they're going to be able to see the monthly listeners of that artist see all the songs the top singles and you know any other information that is necessary so for us to do this we need to come back to the code and in URLs we're going to have to create a profile URL and this profile URL is just going to be profile right here also going to take uh an ID because we need to have the ID of the particular artist that we are creating for and right here we just say views. profile and name profile now let's go straight to views quickly and right here let me say let me just get it right yeah just going to have a d and say profile and it's going to take a request and PK and then we're just going to say and just copy this return render profile HTML I'm going to get rid of this for now and we need to have this so now let's try to go to profile I'm just going to try to go to SL profile slash random ID and as you can see it gives us this what we need to do is to come here and open up profile. HTML and we just need to put the style here so we can either write it manual or first of all we need to add load static so we need to also add static here we can do that manually or use the extension called Auto jangle so I just clicked on command shift p and it automatically added that static TX for me now I could save this and if I come back not here I come back here and need refresh refesh as you can see we have this demo page working now what we want to do is we need to get the artist for that particular artist that the user is trying to see we need to get the name the image we need to get the monthly listeners and then we need to get the top songs so what I'm just going to do now is to add back to views so just going to remove this and get rid of this so now in views we are going to have to use the same API I'm going to before we come into views I'm just going to come back here and come back to this API this time around we're going to be using the artist API and we're going to click on get artist overview this is the end points that we're going to be using and this is just going to take the ID of the artist that the required parameter now let's just test endpoint and see how the result is going to come out so as you can see it gives us the name of the artist URL we don't really need this the biography we also don't really need that going to scroll down past the biography gives us all the other details we need visuals just such as the Avatar the Eder it gives us disc discography where we can see there singles and also like their top tracks it gives us all of that details so we have all of these details right here and we we can use this in our code I'm just going to collapse this and what I'm going to do now is right I'm going to copy come back in and copy this code spin it and right here in profile I'm just going to say artistore ID equals PK now what I'm going to do is to just paste all of that code I copied I'm going to get rid of this request now this should be good but now for this query string instead of having this ID I'm just going to replace it with the artist ID so now that we have this we have the replacement and we have this response I'm just going to get rid of this now we just want to get all of the details from that response so once again we're just going to say if response do status code is equals to 200 then we want to say data equals responsejson and now we want to extract the relevant information so the name of the artist we need to get the name we're just going to say data we come back in here and click on result so you can see that we can just access the name directly instantly so we can just say data name so now we have the name of the particular AR now we need the monthly listeners I'm just going to say monthly _ listeners so this is the monthly listeners equals to data so under data we come here and go all the way to the bottom we go on that stats we're going to see monthly listeners so we just go back there I'm just going to go under stats and under there we're just going to say monthly listeners now the next thing is the Ed URL so like if we come back in here this particular image so we need to get the URL for that image if we come back to okay we need to test this end point again and this is in track it needs to be an artist and get artist overview let's make sure we change it to record Quest and let's test that Endo so now we need to get the other URL and the other URL if we come down we're going to see that it is in visuals and it is in Eder and it is the first element in other so visuals then Ed then the first element then we can get the URL let's do that so we're going to say Ed URL will be equals to data I'm going to get visuals and then we're going to get erer and then we're going to get the first one press element and we're going to get the URL now we've successfully gotten the name the monthly listeners the other which is what we need right now what we want to do is to get let me just come here and just say artist data I'm just instead of saying context or typing context as the name of the dictionary I'm just going to say artist data and now we can just input the name of the artist we can input the monthly listeners I'm just going to say monthly listeners and the other URL same thing other URL and now I can pass this atst data in here but one thing we need to know is that this will give us an error because we are saying if response is 200 then we are creating artist data but what if it's not what if it's something else then we want to say artist data should be equals to A blank dictionary sorry and this should not give us any error I come back here now and eat this Refresh on this let's see okay so this is not going to work because this has an ID that doesn't work so one thing we need to do I'm just going to go back one thing we actually need to do is to make sure that once the user click on one of these one of these artist it takes them to the profile of that artist to do this we have to come back to index and remember in index where we have this artist and then we add this a tag now we're going to say SL profile slash artist2 pretty sure two is the ID so let's try it let's it refresh let just make sure okay cool let's see now if I tlor Swift okay so that still that gives us the ID but that doesn't give us the data let me eat Drake so um we come back to views oh okay so um we have successfully passed this data into profile. HTML but we haven't actually displayed the data there so what we need to do is to now come here and where we have the name in this case the name is Rema it should be just name I'm going to change that to name and for the monthly listeners I'm just going to get the name of the key and I'm just going to also use that in here multi listeners and what else do we have the other URL an important one too I'm just going to come here where we have this image and I'm just going to say head that URL and for the out I'm just going to say name now let's try this out again and see and let me just say Taylor Swift and then let's see what happens so good as you can see we have Taylor Swift We have the monthly listeners and then we have the Eder which is good now the next thing is to just take care of all the songs so we want all the songs to show and for us to do that we're going to come back in here so remember that in this API we add something called disco discography and right here in discography we add top tracks so we're just going to take these top tracks and basically display it on their profile now let's do that what I'm going to do now I'm going to come back into views and right here before anything I'm just going to create a new empty list called top tracks and now I'm going to have to iterate through this stop tracks under discography let's do that so I'm going to say for track in data disco graphy and then under a top tracks right so for this then we can get the track ID which is what we need we just going to say track let's see how the ID is being got being got so under track sub tracks come here and then you can just say track the ID right I'm just going to say track I'm just going to get the ID and I'm going to do the same for the name I'm just going to say track name it be equals to track I'm pretty sure is also name let's PR check so name so now we have the track ID and track name and let's just convert this into Strings so just to be safe because we don't know what data type is being returned as good so now we have this and the next thing we want to get is the Track image so Track image so to get the Track image remember we created a function for that so get Track image we need to give it the track ID and the track name we're going to come back here and get going to say get Track image and then we're just going to give it the track ID and that track ID is going to be this right here and then we also need to give it a track name which is basically this now it should get the image once it has this two details now once we get that before we move forward let's let's do like a little trick because sometimes it might not get image successfully maybe there's a problem or the AR didn't upload the image or something just didn't work right so when that happens what we want to do is to just give it like a a default image right remember prior we are like a default image on every single one so what we want to do is to give it like a default image for the ones that don't have image or the ones that not successful in get an image so to do that what we're just going to do is to say if I'm just going to copy this I'm going to say if get track so if you run this and you get a response then good then set the Track image to be that else if you don't get a response then set the Track image to be equals to so this track image now I'm just going to give a link to like a default image equal to this link if I open this link on here you're going to see that it's just this image right so that is what we want to do to be that link and now we can just store so right here we can just create track info I'm just going to create a new dictionary and now we need to store the necessary information in a dictionary just going to say track info now the ID of that track should be track and so the reason why I converted this to string was just because I was concatenating it right here so remember when we pass it into this get IM Track image is going to concatenate it that's why it was turned into string but now for the track ID we could just take this and just say track ID directly and for the name we could do the same thing just copy the track name and just say track name and the next thing is so what we just want is the duration text so that we can show that right here so we need a duration text so we can show it here so to get the duration text we come into a track you're going to see that we have duration text so the duration text and we just going to say track duration text and we also want to know the play count so the amount of times this song has been streamed so as you can see we have something ined play count just going to add that play count and we're just going to say track play count and now for the last thing which is the image just going to say trackcore image just going to say Track image now we can pass this track Ino into the dictionary artist data so we're just going to say right here I'm just going to say actually we don't want to pass this directly so remember we had this top tracks list then we could append so because right here remember we're still under a for Loop and this track info actually should be under this for Loop because for all of this is what we want to do then we're going to append each of that to this subtracts list list to append track info now we can come here and add sub tracks I just set up tracks good now this should work perfectly fine and what I'm just going to do is to basically test this out we need to come back into profile and now in profile we're going to do a little bit of rendering so we need to show all of this information so once again this is top tracks so I'm just going to copy that name specifically I'm going to come back to profile and right here where we have the songs so this single track row right below single track row I'm just going to say for track in subtracts and I'm going to end it I do this right before repeat all choices and I'm just going to say end for right here and it's going to give me the list of all of that but now what I'm just going to do is to say instead of this image I'm going to say track dot track underscore image just to be sure it is right here trackcore image I'm going to copy this and right here actually what I'm going to do is to just say for this play count I'm just going to say track do play count and for this duration text I'm just going to say track. duration text and then for the track name I'm just going to say track. track track. name CU that's what is here name duration text play count and then for the artist for the artist I'm just going to say track dot so we need to know the artist actually the artist is just the current artist name uh I don't think we got that we didn't actually get that but what we can just say right here is if I come in here name as the name of the artist so the artist is basically the current artist like this now let's see how this P out so right here let me click on refresh and let's see what shows so once again it should show us the old details of Taylor Swift right now it shows us the model listeners and everything as you can now see it gives us this so right here we have all the songs we have everything we have the play count we have the this is the particular one which is the duration and this is good so now all of this is working the next thing we just want to do is to first of all this is not really looking nice we're going to take care of that and the second thing is when a user clicks on any of these song we want these songs want to take them to the music page so they can actually listen to any of these songs now let's take care of the way this looks so what we're going to first do is to we need to arrange this so right here we are using Tailwind because we imported Tailwind I can just quickly fix that so what I'm going to do is right here instead of using Flex I'm just going to say grid and I'm going to remove justify between I'm going to say grid colum fre right and right here I'm just going to say justify self end I'm going to do the same for the duration text and this should fix that I'm going to save this and what I just did was I just make sure that all of these aligned and they aligned mostly at the end so you're going going to see what I mean when this run successful so as you can see everything aligns at the end right in both so now it's looking way better and now that we have that the next thing we want to do is to take a user to listen to each of these songs so what we can now do is to come back in here and we're just going to say if I open this div going to say a close it right here just going to paste that and now in here I'm going to say f and just going to say slashmusic slash track. ID if I come back in here you can see that track the ID gives us the ID of that particular song and we can take them to the music page now let me save this and once I H refresh again this should Now update but it should be clickable so not sure what happened let's hit refresh to make sure this loads successfully and everything should load so as you can see everything loaded and now let's just let me click on this just one and this is called creel Summer by Taylor Swift so as you can see this works perfectly fine it's showing all the details correctly now if I go back you can now see that we've successfully been able to show a user's profile and also all their songs so we can now see all the songs an artist has done we can click on it to see every single to listen to the song But the last thing we want to do now is to search for a song so we want a user to be able to search for a song and let's go straight to doing that the next thing we're going to do is to implement the search picture in this application so if we come back to the homepage I'm just going to go to the hom page right here now this page is going to have a bar where we can search for a song so right here you can see where it says what do you want to listen to so we want to use that to be able to search for an artist or a song and then like all the results will come out so we're going to do that right now the first thing we need to do is to go back into our code and right here in index.html that is where we have the code for this search bar so in index.html we're going to have to change that search bar into a form I'm going to come here and this is where we have the search bar I believe and we're going to change this search bar into a form so right here what we're just going to do is to come under this eror and we're going to create a new HTML form I'm going to create this here going to cut this out and then I'm going to end it or close that form just right under the div tag so what we going to do is to just indent this properly and now that this is done we're going to have to say action now this time around we want the action to go to another URL called search so we have to come here and in URLs we have to create a new URL and this time around the URL is going to be called search just going to paste this I'm just going to change all the inputs to search so it's going to the name is going to be search and then then it's going to go into the function search from the views.py and the name of this particular URL is going to be search and we're going to come into views and we're going to have to create so I'm just going to collapse this so we can have a better viewing so right here I'm just going to do it right on that Index right here just going to say Dev search going to take a request and then for now we're just going to say return render request and if I open up the template you're going to see right here that we have a page for the search so search. HTML I'm just going to say search. HTML I'm going to save this and now I can come back in here and save this URL and I can come in here and say search so let's just make sure there's actually a URL called search if I come here and go to/ search let's see okay so we have this before we move forward let's make sure this search page is search page is looking good I'm going to come back in here and I'm going to open up search the HTML as you can see we have we have a external CSS file that this is being linked to so what I'm just going to do is to use load static and I'm just going to use an extension called Auto jangle to add the form the format to this particular CSS file so right here what I did was I press command shift p and it brought out my command palet and you just need to search auto Jango and then hit enter so once you hit enter what it's going to do is that it's going to look around your old code and wherever we're using or linking a static file is automatically going to add this static format needed by jangle so that is what I did you can also do that manually if you want I just use that EX cuz it is helpful so now if we come back in here and E on refresh you can now see that we have a decently looking page so now what we're going to do is to come back into index and I'm going to close up this and we want to send this we can send it using uh a post or get method I just prefer to use a post method so I'm just going to say method equals post and now whenever we have a post method or use a post method in Jungle we have to say csrf token now that we have that the next thing is for this input we need to give it a name so we're going to give this input a name of search query now that we have that the next thing is to make sure that this button has a type of submit now that we know that this whole form is complete now we can use this in the search view right here because remember when a user is trying to search or when the user input something right here no not right here if I go back to the own page so when the user input something right here and clicks on search that input or that search term is going to be sent to views.py and specifically is going to be sent into this search function so now what we're going to do in this search function is just to say if I'm going to come here I'm going to say if method dot actually if request the method is equals to post then we want to get that search query so search query will be equals to request. poost search query and for now since we already have that search query we don't really need to do anything else the only thing we're going to do is to just say if this is a post method then we want to do this but else it's not a post method we just want to render this page normally so that is what we're doing and we're going to take care of this everything under this in a bit but before we continue what I'm going to do is to head over to the API that we're using which is the Spotify scraper API and I'm going to show you the end point we're going to be targeting so right here if you see this search once again this Spotify the link to this will be in the description below so you can just easily access this so if you come here and click on search you're going to see that we have this particular code and if I come into example result what you can see is that when a user inputs a term so this is a term right here we could input something like Drake or Michael Jackson we can input any term to search and when a user inputs that term it's going to bring out a bunch of results it's going to bring out different types of result like albums results artists episodes genres um playlist and singles also known as tracks but for us we're only really concerned about the tracks so we just want a user to be searching for a song that's what we want to do so what we're now going to do is when a user search for something we're just going to take out the result of the tracks basically so now after that we're going to get all of those data and then show it to the HTML page or in the front end of this website like this now I'm just going to copy this code which is the code for the search and what I'm going to do is right here I'm just going to paste this like this so just going to make sure it has the correct indentations and I'm going to remove import requests so we have this the next thing we need to change is jazz so instead of jazz we want the term to be the search query that the user is trying to search for right so now we're just going to paste this and if I come back in here there's something so if you come here once again as you can see in the example results it gives you so many data like as I said podcast playlist everything but we just want tracks just singles so if I come into type we're just going to come here and click on track now if you come here and click on track this is just going to show you only results for tracks right instead of showing all of this so that we don't have too much data to deal with so we're just kind of minimizing the data to the ones we need now as you can see the query string has changed what I'm just going to do is to just copy everything once again and come here and I'm going to get rid of all of this and just update it I'm just going to do the same thing again and right now I'm going to make sure it has the same indentations and remove that so instead of jazz I'm going to say query search query now that is good and the type is track now once we have this the next thing is to have the erors which is already done and then the response we don't really need json. response cuz we're not printing anything for now we're just going to store that in the variable so what we're going to do first of all I'm going to create an empty list so I'm going to say track list once I get all the details of the track list corresponding to that search query then I'm going to update this track list with those details but now let's just create an empty list and what I'm just going to do is to say if response the status code is equals to 200 so I'm just trying to get if this this request was sent successfully and we actually got some response if that is true then I want to say data is equals to responsejson now I want to actually store that response in a variable called Data the next thing I'm going to do is to so if I come back in here I'm going to test this end point so let me just setch something like Drake and now I can test it so I search Drake and I filtered it to only tracks let me test it and then see the response so as you can see we have a simple response now compared to all of this so what we're just going to do is I'm just going to come here and as you can see there are two things we are going to get the first thing is going to be the total count so this is just the set result corresponding to that term I think it limit it to 1,000 result which is quite good and under items it limits and it shows us the first 50 so what we're just going to do is to get all of these 50 results so as you can see this item is basically all the tracks this is the first track this is the name of the song the ID you know the duration in milliseconds the duration in text and also the artist name you can see and everything we need so we're going to use this and get all of the track I'm going to come back here now and the first thing I want to get is to say search result count I'm just going to say data now on that data we're going to say tracks so we have to come into track to get anything I'm just going to say tracks and under tracks let's see what the name is under tracks just going to say total count now the next thing we're not going to get is the whole tracks itself so we just got the total count but now we want to get all of these items right here which is a list of all the songs or all the tracks in Diary in dictionary format so now I'm going to say tracks equals to and we're just going to say data square bracket tracks we bracket items good so now we have this particular result all of these items all of these 50 tracks stored in this variable called track now what we want to do is just to get the specific information we need so so what do we need from this track we're going we just need the track name we need the artist name the duration of that track we need the track ID and then we need a track image so we're going to get all of those details let's do that one after the other so the first thing we're going to do is to First Loop through this track list so you're going to say for track in tracks trackcore name going to be equals to track because it is a dictionary so each of this track is a dictionary that's why we're using this format right here so now we need to get the key of the name so under each track the key is name so we're just going to say name the next thing we're going to do is to get the artist name so this we just want to get the first artist which is the main artist of the song we're going to say artist name is equals to track square brackets and if I come back in here so in each track to get the artist name we need to come into the artist list and let's see what else we need to get the first one and then we just need to say name so this is what we need so we're going to go into the artist list and then we're going to get the first one so like this and then we're going to get the name like this now the next thing we want to get is the duration of that song so we're going to say track and I'm pretty sure this is just on its own if I come back here and I close all of these items and open it up if I open one I can just see duration text to get it in minutes I'm just going to say duration text like this and the next thing I want to get is a track ID so I'm just going to say track ID going to be equals to track square bracket and we're just going to see what that is just ID directly ID good now we have all of these details the next thing we need to get is the image of that track now remember this doesn't actually give us the image directly but we wrote a function to get the image of that track as long as we have the ID of that track and the name of that track so we actually have those details so this is the name and this is the ID now the next thing that we're going to do is to get the image of that track so to get this we need to use this get Track image right here remember this image Returns the URL or the link to the image of that track so what I'm just going to do actually what I'm going to do is to come into profile so in profile we already wrote the code for that and I'm just going to copy so this is it right here so we actually already wrote the code to do that I'm just going to show that visually as you can see we have this code and it just says if get Track image and track ID which is this track ID and track name we need to update this track name because it's not the same thing and we also need to do the same for this strike name so what we're just saying is if this is if this gives us a response then we want to store that response in a variable called Track image I'm just going to give it underscores to make it more readable or else we're just giving it like a default image so that's what we're doing so now we have the Track image also and what I'm just going to do let me just make this look a little better so now what I'm going to do is outside this if else I'm going to come here and say track list which was the empty list we created earlier do append and I'm going to append the dictionary I'm going to start with the track name I'm going to say track name going to be given the value of track name and artist name going to be artist name and duration going to be duration and then we're also going to set the track ID and we're just going to say track ID and also the Track image we're going to say Track image like this now that we have all of these details I'm going to create another so right here under this initial if I'm going to create another dictionary I'm going to name it context and I'm just going to give it two details so the first thing we need to give it is the search result count which we got going to give you a value that and then the next thing is this whole track list and then we're going to give it a value of track list also so now that we have this what we can just do is to render the search. HTML page but this time around we're going to give it or pass this context dictionary into it so this is good this whole function should be working now and if I go into search. HTML I'm just going to open up search. HTML I'm going to drag it closer and right now in search. HTML I should be able to now give it all those details or use all those details so what I'm going to do is right here where we have this the first thing I'm going to do is I'm going to come into search results and I'm just going to give you like the amount of results that we got I'm just going to say right just come in here and copy the key going to say set results and I'm just going to say results so that is the amount of result that we got and so I'm going to come here and what I'm looking for is under this single track row I want to Loop through all the track in the track list going to say for track in track list and I'm going to end the for Loop right here like this just going to say end for like this now for that right here where we have the name of the song we're just going to say track the track name going to copy this and for the artist we're going to say track. artist name and right here where we have the alt of the song I'm just going to say track the track name as the alt and for the image of that song I'm just going to say track track image so this is what we're going to do and right here where we have we don't really need this amount of streams and right here where we have the duration I'm just going to say track do duration like this now this should be working we could just try this out and see what comes up I'm going to come back in here and I'm going to H Refresh on this index page so what I'm going to do now is to just test this out I'm just going to search for an artist I'm just going to say Drake and I'm going to hit enter and this should query that this particular API right here and it should get all the response we want so it's going to get the image it's going to get the list of artist the list of artist song that correspond to that particular search term and it should render it I'm just going to swipe here it should then make all of these operations get the details and then render it in the search. HTML page right now we should be redirected to to the search. HTML page and since we correctly looped through all the results this should work perfectly so let's see what that does so right here as you can see this worked perfectly it gives us the amount of search result and you can see we have all of these songs by Drake every single song is by Drake and it also has songs that Drake is featured in which is good so as you can see this is by Travis cot furing Drake so yes and it gives us a lot and a lot of response now this is good but the last thing we need to do is to make sure that when a user click on any of this song it takes to the page to actually play this song so they can listen to this song cuz right now if they click on it nothing happens so for us to do this it's actually going to be quite easy what we're going to do is to come here and just create a simple a tag so right here in this div just going to create an a tag and I'm going to close that a tag right here and this a tag is just going to go go to I'm just going to say f slashmusic slash track dot now let's make sure we are giving it the correct ID track ID this should do the work we're going to come here and just hit Refresh on this so what we did right here if I come here real quick what we did was we just gave made this a link a clickable link so if a user clicks on the track name or the artist name under this SE result in our in our page right here then it should actually take them to the page to play that song So as you can see we said SL music which is the URL we created right here and it's taking an ID and that ID in here is track the ID so what we did was redirecting the user to listen to this music and taking them to this page this should work successfully theoretically but let's see what the result is so right now if I click on any of this you canot see that it's click clickable I can drag it I'm just going to open it in new tabs I'm going to open two different ones and I'm just going to wait for that to load so as you can see this is one of the first song and this is the second song right here which is good this is what we need let me just see another song so this is a song by Nicki Minaj picturing Drake let's see how that looks good it has its own album or its own music cover and I'm as you can see the duration are different so you come here just so you can see that everything is working and we can also play this song I'm just not going to play it because of copyright but now you can see that everything is working fine in regards to the search feature now what we also want to do is to make sure a user can search from this page as well cuz right now if I search something and click on enter it doesn't really do anything that's because we only made a user to be able to search from the homepage so to make changes to this what I'm just going to do is to come into index. HTML and right here where we have this search bar or this search form I'm going to copy the whole Eder right here like this and I'm going to come into search. HTML go into that same eror and I'm going to paste it I'm just updating it with the form so basically with the new eror and we don't need this this is all we need so if I come back in here right now and I just go to this page normally as you can see it shows a blank result but now if I try to search someone I'm just going to say Travis and let's see what happens so that what I just did was to update this particular form with the form that we created in index because we already added everything we need which is that the action should go to search the method should be post csrf token should be there the name right here and this should be a type of submit if I had to do all of that manually again here it's just going to take unnecessary time so now let's just come back and we just want to see the results once again if we make sure this actually what we can do here is instead of saying this should go to search we could remove this and this could be blank that could work also but taking this to search directly works so if that goes to search that comes to this URL right here and that goes to views. search which is this views. search and that should render search again again so it should work so as you can see this works so we have Travis C SEO mode basically have all the songs right now now this is good this is what we want now the last thing that we need to do is to just clean up the old site so the old site right now is not really I'll say in the best state just because like there are some links that are not working like if I click on this search if I click on home it doesn't take me anywhere and this is for the whole site so I'm just going to clean up the whole site and I'm going to come here and this is just for the front end so I'm going to start with index. HTML let me just go to the homepage so as you can see for me to go to the home page I have to come to the URL and start going there uh so I don't want that so I'm just going to go to the hom page and as you can see what I'm going to do is to leave this and just remove this and remove this we don't really need that so I'm just going to come right here scroll all the way to the top so this is where we have top section of the sidebar just going to get rid of this and do we even need a bottom section no we don't so I'm just going to get rid of the whole bottom section like this and this so this should be perfect I'm going to save it and it refresh so this should be perfect and if you come here we have a good looking head so let's just come back to see good so this should be okay but one more thing is when I click on ser I want you to take me to the search page and when I click on home I want you to kind of refresh this page so for me to do that it's quite easy right here where we have home just going to give leave that AS Slash and right here where we have search I'm just going to say SL search like this and that that should take care of that for us um so let's just come back in here now if I click on this is you can see it took me to the search page so I want that to be consistent throughout the whole website so I'm just going to come back here and I'm going to copy all of this actually I'm just going to copy the whole sidebar so this sidebar div I'm going to copy it and I'm going to open up this bar we don't need it for the login but in the music we need that so I'm just going to close close up this sidebar and paste that in like this save that come to profile going to do exactly the same thing so we also going to so going to do that sidebar paste that in save for search same thing so we have the sidebar right here let's paste that in and we don't need it for sign up now if I come back in here to the search page so if I click on search it should just take me directly to the search page and if I click on home I should be able to come back to the home page and if I want to log out I should be able to log out and all of the good stuff so now the old site is good it should be ready for deployment so if I click on let's say this song any of this songs it should open up that song and it should give me the options to play Fast Forward and all of that so as you can see we have all the details for the song the duration and we can play the song so this is good this is exactly what we want we've come to the end of this tutorial video in the next video we're going to deploy this application onto the web using zit so I hope you understood everything we did in this video if you did please don't forget to click on the like button and subscribe and also drop a comment if you have any question or if you have anything to say thank you for watching this video and I'll see you in the next one in this tutorial series we've successfully built out a Spotify clone now this is the Spotify clone right here on my screen and as you can see it shows a list of artists we can check out all the artists we can search for an artist a song it shows a list of songs this are just demo songs we could click on it and we could listen to any song as I said we could search for a song you know we could log in log out we've basically built a good Spotify clone and what we're going to do now is to deploy this Spotify clone onto the web so anyone can use it now to deploy this we're going to be using a platform called zit so zit is a cicd development platform that helps you get to production and operating production zit is also great for teams running kuber workloads and also great for multicloud but in this particular video I'm going to be showing you how to use zit to deploy our jungle application onto the web so earlier in this tutorial series we already used zit to deploy a postgress database and that postgress database was deployed on AWS so we use AWS relational database service but we didn't even have to interact with AWS that much because zit already did all of that for us on the back end so I just showed you how to basically fill some forms right here and create a database which is quite good but now as I said in this video we're going to be deploying our project onto the web so without wasting any time let's get into it before we get started into this video we need to sign up to zit so there will be a link in the description below where you can sign up to zit so you can continue with this video or just go to zit. and then sign up and login so once you have your account logged in then you can follow along with this video the first thing we need to do is to create a repository for GitHub and push our code onto GitHub so let's do that real quick right here I'm on GitHub and what I'm just going to do is to click on this addition sign and click on new repository once I click on that I'm going to say Spotify I think clone I'm just going to say jungle Spotify clone right uh I'm just going to say Spotify clone okay so this is good and what I'm just going to do now is I don't really need any of this I'm just going to say create repository now once I have this done it gives me the code I can use to push my code onto this repository I'm going to come back here and all of this is good so what I'm just going to do is you know the good thing is we don't really need to set up anything again because this is just because we have already we come into settings right here we have already basically set up everything we need we've set up all the static files all the all the template everything we need has been set up now we don't really need to set up everything also the database has been set up so we don't need to change anything what we just need to do now is to let me just collapse all of this to make sure all our files is good now this right here is what I'm going to push onto GitHub so I'm just going to open up my terminal I'm going to open one up and I could close this and I'm just going to create a new terminal right here so I have two Terminals and I'm just going to say get in it just to initialize a new repository let me make sure I'm in the correct folder so we need to push this folder which is the folder that has the manage. pi file because that is the root directory of our project so I have initialized a new git repository and I'm not going to add any um read me file now the next thing is to commit before I commit I'm going to add all of my files I'm just going to say get add and now I can commit good and I'm just going to take this to Branch to main G Branch Main and and then I'm going to copy the next one is why I like GitHub it just gives us all the commands also good to know these commands sometimes and good so as you can see that has successfully pushed our code onto GitHub so I'm going to come in here and refresh good so now as you can see we have our code on GitHub so we have our full jangle code right here on GitHub now we can move forward with deploy deploying this on zit one more thing we need to do before going over to zit to deploy is that we need to have a requirement. txt file now this requirement. txt file is going to have all the libraries that we need for this project so let me explain what I mean if we come over to views you're going to see that we're importing a lot of libraries we're importing rejects beautiful soup requests you know some external libraries that don't come automatically with jungle now because we are importing these libraries when we are going will be deploying on zit we need to tell zit what libraries we need so it knows what libraries to install or deploy with our project now this is why we use requirement. txt now this requirement. txt is a file that is going to contain all of those libraries now to actually generate that file you just need to run this Command right here so pip 3 freeze then greater than sign requirements.txt once you run that command it's going to generate a requirement. txt file right here in right here in your code in the root directory of your code now the thing is that if you are working on a virtual environment it's only going to generate a file just for that virtual environment but if you're not working on a virtual environment then you it's going to generate a file that contains libraries that basic that basically has all the libraries on your computer and you don't want that so this is why you can you have is you can just come here and basically just choose the ones or filter it out if you're not working with the virtual environment so just come here and filter the ones you don't need out but if you're working in a virtual environment then you don't really have to do that so this is good now this is what we need um this requirement. txt file is going to be in the GitHub link below that is going to be for the completed project for the final product so if you don't even want to generate this file just go over to GitHub and copy all of this and just paste St in your requirement. txt so now that we have this we actually need to update it with our GitHub because we deployed our GitHub without this requirement. txt so I'm just going to reinitialize and I'm going to get add and get commit but this time I'm going to say second commit and yeah that's see that I added requirement. txt file and we don't even need to do that again so don't need yeah because already exist so don't need to do that again but then we just need to push and that should have updated it for us so now if we come back in here and go over here and hit refresh you can now see that we have the file requirements.txt now that we have our code push to GitHub we can now come to Z to actually deploy the code once again there will be a link in description below that will take you to zit so you just need to log into zit and I logged in with my GitHub you can log in with whatever you want to log in with and what I'm going to do now is to click on new right here on the top right corner and I'm just going to click actually I'm just going to come right here and click on new project this one and we're going to be using AWS Lambda to deploy this so we are deploying our code basically as a serverless container so right here you're going to see AWS Lambda If You Don't See just search AWS we just search AWS you should see AWS Lambda automatically I'm just going to click on this one and right here automatically because I logged in or I created an account on zit with my GitHub you can see that now I have GitHub all my GitHub repositories shown here but let's say you logged in or created your account with like Google or something else then you have to connect your GitHub but so I can I can just select this repository what you just need to do is to search the repository for the Spotify clone we just created but as you can see mine is already at the top and I'm just going to select it now this is very good because Z just automatically makes this very easy now I'm just going to click on continue and right here where we have build and run it just tells you to pick the framework you're using so right now you can see all the Frameworks they support I am using Jango so I'm just going to click on Jango and I'm going to leave the python version the way it is I'm going to leave this and I'm going to leave this buot command because that is required and I'm also going to leave this the way it is and right here where we have listen Port jungle listens to 8,000 so as you can see if they said the port your app will be running on for example 3,000 is for express.js but we know that jangle rose on 8,000 so we're going to leave it going to continue and right here where we have this organized I'm just going to click and I'm going to leave this as it is and I'm just going to click on deploy so this is going to take me to a page where this is going to be deployed and this usually takes around 5 minutes or 10 minutes max um but for my from my past experiences it doesn't take more than 5 minutes except there is a problem so I'm just going to wait for this to deploy and I'm going to be back once this has been deployed successfully so as you can see it shows that this has successfully been deployed now it's going to redirect me to the page where I can view this deployed project what I just need to do now is to click on visit deployment and it's going to for the first time it's going to take a few seconds to load it up just because it's getting everything together but as you can see our project has successfully been deployed to the web so this is the login page this shows that our project has been deployed now we have successfully deployed our project there is one thing I want to show you in zit that is very useful if we come back to zit there's something called preview branches now let me explain this to you now if we come to Z and we come into settings and in settings if we come into source and Branch so first of all you need to go to the project you just deployed coming to settings and coming to source and Branch so you can see the cicd settings and you can basically see the geub repo that is used to deploy this particular project you can change the source you know and if you come under Branch rules you're going to see that we see autod deploy branches now this means that if we create another Branch apart from the main branch if we create another Branch or a separate branch that branch is going to be deployed automatically and zit is actually going to create or generate a new Endo so a new URL for us to preview that Branch so this is quite good because let's say you have a problem with your application and you want to kind of fix it or you or you don't even have a problem and let's say you just want to make a minor change you can use this preview Branch to do that because you can make a change on your code then you can deploy that change or you can push that change to GitHub on a new branch and you can see how it looks like before actually affecting your main project now I'm not just going to say I'm going to show you how to actually do this so let's go back into our code quickly and right here let me say I want to change something I'm going to come into login so right here where it says let's just look for something different so I'm going to scroll all the way to the top so we can see that we have the Spotify text here so let's just say Spotify but this time around let's say something like preview and just do this so let's do this and then let's save it now that we've done this we've made a change but we don't want this to be directly affected on our main actual deployed application so what I'm going to do to test this or see how this looks like is to use a preview Branch so what I'm going to do is to say get so I'm right here in my command and I'm just going to clear it out so I'm right here in my terminal and I'm going to say get Branch so right now you can see that we are just on the Main and what I'm going to do is to say get check out B and let's just say something like new let's just say new and now we've switched to a new branch called new and I'm just going to add I'm going to say get add and I'm going to say get commit M and I'm just going to say preview Branch so as you can see it that says that one file has been changed and now I'm just going to get push set Upstream origin new good now as you can see this has been done and it has been successfully pushed to that repo now I'm just going to open up this git this GitHub repository as you can see it says new as recent pushes 14 seconds ago so what I'm going to do is just to create a pull request I'm just going to compare and create and you can see the title automatically is preview branch and I'm just going to say create pull request and that is going to create a pull request for us but if you come here you can see that is building something so if we actually give you a second you're going to see it say we are building your P request over on zit click me to find more info right and you can say once buil this Branch can be tested at at this particular end point before merging this is good so this is just telling us because zit has already started building something on this uh pull request and if we come back over to Z right now if you come into deployment you can see that right here we have this branch which is the main branch and that is still deployed but now we have another branch which it says as active Branch this is the other branch that we just created and this is currently being deployed so I'm going to come back when this has been deployed so now you can see that this has successfully been deployed and we now have a new branch of this particular project so as you can see it's a new Branch under this active Branch list so I'm just going to zoom in and what going to do is to click on this active branch and right here you're going to see that this is a new project that has been deployed but on another branch and this is the branch called new so if I now click on this it's going to open up this endpoint and you can see that it's different from the main project so this is say specify with preview in Brackets but the main project is still this if I refresh this you're going to see that the main project is still intact but we have a preview end point for project now this is very good this is very useful just in case you want to maybe make some changes but don't want it to affect the main project immediately now you've seen how easy it was to enable preview branches in zit zit has a dozen more features like that there are a lot of features that could help you deploy your application and maintain your application very well if you deploy with it another one I'm just going to quickly talk about is autoscaling so enabling autoscaling for your application it allows you to automatically adjust the amount of computational resources provided to your Cloud application or your cloud service so it's basically going to adjust the amount of resources needed based on his current load or usage demand now it's a very useful tool and you can head over to zit documentation and you're going to see how to use autoscaling static erress there's a lot of features that you can use to make sure that your application is solid once again there'll be a link in the description where you can directly sign up for zit or you can go to the documentation on zit so you can easily access all of these features or see how you can make your application better now this is also why I chose it for this video because it allows us to easily deploy and also maintain our application so not just deploy but also maintain our application now I hope you understood everything I've talked about now we've come to the end of this Spotify clone series that is the end of this whole tutorial if you enjoyed it please don't forget to click on the like button and subscribe and drop in the comment what you think of the video thank you so much for watching and I'll see you in the next one