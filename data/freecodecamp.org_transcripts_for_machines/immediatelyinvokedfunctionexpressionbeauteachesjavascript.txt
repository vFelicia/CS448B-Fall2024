an immediately invoked function expression or ify for short is a JavaScript function that runs as soon as it is defined so let me give an example and if I run that you'll see in the console my favorite number is three note that this function has no name and is not stored in a variable the first enclosing parentheses right here makes the function an expression and the last two parentheses right here tell the JavaScript compiler to invoke or call this Anonymous function immediately hence the name immediately invoked function expression so it's just a function that runs right away we can also create a named immediately invoked function expression and we can pass in arguments so I'm going to copy this here make a new one and we're going to name this so here I use a default parameter that means if you we don't pass in anything it's going to set num to equal three however if we do pass in something it will set num to equal whatever we passed in so here it's just going to do exactly what we did up here and say my favorite number is three so if we run that we should see two times in the console yep it does it twice for up here and up here but now we can also call this and now look it immediately invokes it and we can call it again later and pass in a different argument the most popular use of the immediately invoked function expression is to avoid declaring variables in the global scope and to create closures many JavaScript libraries use this technique so that variable names don't conflict between the library and programs that might use the library here is a simple example so if we run that you can see this function is going to be invoked immediately and it's going to console.log the a but it's going to use the a from within the function three and when we console.log a again down here it can't access anything within this function or within this closure so it's going to use the a that we defined up here so you can see it's going to do three and then two because JavaScript has function level scope all the variables declared in this Anonymous function are local variables and therefore cannot be accessed outside the anonymous function see my closure video for more about that with es6 you can now accomplish some of the same things as an iffy in a different way let en const variables use block scope so as long as they are placed in a block they will not pollute the global name space so let's just change this example to use block scope I'm going to change this to b b and now we're just going to make this into a block so it's no longer an an immediately invoked function expression it's just a block and we're going to change these variables to let and if I run that see the first three and two are where we used a up here but the second three and two here are where we use B before es6 all variables had Global scope but now with constant let you can have different Scopes so you don't always need immediately invoked function Expressions as much as you used to well thanks for watching my name is Bo KS don't forget to subscribe and remember use your code for good