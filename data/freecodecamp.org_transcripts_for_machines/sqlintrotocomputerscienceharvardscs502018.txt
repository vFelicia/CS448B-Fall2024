so without further ado where have we been these past several weeks we'll recall that over the past couple of weeks we've been introducing web programming and most recently did we try to tie together a lot of the topics from the past few weeks html and css and javascript and then python and then another framework another piece of software called flask that just made it easier and more possible to build webbased applications and the simplest example of that last week recall looked a little something like this and this past week with the problems on similarities and survey have you been building your own webbased applications but they haven't quite had all of the pieces that you might want to assemble into a webbased app and so today we'll fill in those final blanks but recall that we've been trying to frame these applications not as oneoffs or just tools that you built but it's part of a common paradigm or methodology and indeed when you're learning computer science and software engineering you start to notice patterns in the software and the code that you're writing and humans tend to adopt these patterns because they save you time and then everyone can kind of speak the same language so to speak so mvc was the acronym we introduced last week model view controller and that just speaks to this paradigm whereby you organize certain type of code in one file certain types of other code in another file so your python code goes in application.pi your html goes in your html files your css and your css files and so forth but what we didn't have last week was this thing here really model generally refers to your data and while survey your most recent problem did have data a csv file that's arguably a model csv is not terribly expressive you can pretty much just write rows text file rows to a text file not unlike a spreadsheet but you can't really query it you can't easily insert or delete you pretty much would have to reconstruct the whole file and indeed that's exactly what i did back in the day the very first webbased application i wrote back in sophomore or junior year was the freshman intramural website and all i had available to me both technologically and conceptually were csv files i had no idea what databases were didn't realize how much easier they could make my life so i stored all of the data behind these links here just in very simple text files but today will give you so much more power and especially if you're coming into the class with an interest in applying cs to other fields in medicine or the arts or any world in which there's data particularly in stem and data science and the like realize that sql has really become this uh this uh incredibly powerful language with which to solve problem in those and so many domains and ultimately what you're build this coming week your very last cs50 problem set you have now peaked just about um will be cs50 finance a webbased application by which you can buy or or buy and sell stocks and so what you're going to do this coming week is write code that implements a web application that resembles this whereby your users and yourself will be able to register for an account log into that account you'll be given for free thanks to us 10 000 virtual dollars and then you can go ahead and buy and sell stocks via their symbol using this application so for instance if i go ahead and register myself here let's say username mailin password12345 shouldn't have said that go ahead and register here you'll see that by default i get this free ten thousand dollars in virtual cash you know what i'm gonna go ahead and buy myself a share of maybe netflix whose symbol is nflx i'm gonna go ahead and try to buy one share voila and now you'll see that not only do i have less cash left about nine thousand six hundred dollars i now own a share of stock and if we reload this throughout the lecture frankly the price might go a little up or a little down because this web application you'll build will also talk to an api an application programming interface so some thirdparty website that provides you with stock data so you ask it for the current price of a stock it gives you an answer in json format if you recall our short discussion of that and you'll integrate it ultimately into this interface so this will be the culmination of so many of the ideas and the building blocks which you've experimented but we need a few final pieces today so first and foremost when i registered for this site i created an account and indeed i can go ahead and log out now and if i go ahead and log back in if no one's stolen my password yet i can see my account and only my account but we haven't yet seen any mechanism in code whereby you can implement this notion of logging in right what is the underlying logic by which a website knows that you are logged in or you're not logged in right clearly when i went to this website just a moment ago it prompted me to log in because i was not because i had logged out but how did it know that and now that i am logged in how does it know that i can click on quote to get just a stock quote or buy just to buy a stock or sell why does it not prompt me every time i click a link to log back in with my username or password what do you think little files that saves the data inside your browser's cache to let you know that they know what's going on yeah cookies little files that get saved by websites on your computer now odds are most everyone here has probably heard in some form cookies bad maybe bad privacy invading yes okay so true but most of the web would not work without them so someone else what do you understand a cookie to be what is a cookie basically yeah it saves your information somehow you don't have to so you don't have to put it in every time so in simplest form it's exactly a combination of those answers whereby when i log into a website you could imagine that website just remembering my username and my password by just saving them in a little file on my mac or pc so that the next time i visit a web page it just automatically sends them for me so that the human doesn't have to type them again and again now let's find fault with that feels like that would work but what's the downside of that naive implementation what do you think instinctively the data's just out there right you know i have people in uh you know in the office or at home or in a uh in a library that i might not want to just be able to walk up to that computer and just see this little text file planted on my computer because then they could log into my account by just digging around so it feels a little invasive indeed that's one of the threats of cookies so it turns out cookies or websites tend not to do that at least if they're implemented well they instead just plant a really big random number on your hard drive or in your computer's ram or memory so one two three four five six seven like some really big number maybe with letters and numbers maybe even some punctuation that uniquely identifies me and thereafter anytime i click a link on that same website after logging in my browser thanks to http the language that browsers and server speak that we discussed a few weeks back just magically sends that same big random number to the server again and again and so long as the server remembers that that big random number corresponds to username malen it can figure out whose account to show and why is it a big random number why is it not just my password or my username why am i proposing that it'd be a big random number exactly in computer science randomness is this incredibly powerful ingredient if you pick a big enough word or a big enough string or sentence the probability that some random adversary or bad person on the internet is going to be able to guess or try to guess that value is just so low it's just not realistically ever going to happen in your lifetime statistically and so randomness gives us that capability and so you can think about this metaphorically in the real world as being like a hand stamp if you've ever gone to uh like an amusement park or a bar or club where you have to show your id or you have to pay for a ticket on the way in sometimes they'll stamp you with either visible or invisible ink and that's largely for efficiency so that thereafter when you're in the amusement park you can kind of come and go and you don't have to repay or reprocess if you're in the bar the club you don't have to keep showing your id they can check once and then more efficiently let you come and go as you please because you're just presenting your hand or this virtual hand stamp to the the bouncer or to the gatekeeper at those places so cookies are exactly like that unbeknownst to us all this time anytime you visit a website into which you've logged in your browser is secretly but usefully presenting a hand stamp to that server to remind it who you are or rather not really who you are but of that big random number so that if the server remembers who that number belongs to it can figure out whose account to then show so put more concretely if i actually pull up some of the http examples that we looked at in the past let's consider this in context so almost everyone here has probably used gmail at some point and you log in generally via page like this so it might be infrequent because you're not often prompted to log into gmail because of surprise surprise cookies from google being on your computer but let's see where those come from so when you request google or gmail.com you might send in a virtual envelope so to speak from your mac or pc to the server a message like this families who have not seen this before this is what your browser is actually sending to a server in order to request a home page of gmail.com now i'm going to simplify this a little bit because there's a bunch of redirects http 302s and 301s involved that aren't that interesting today so let's just assume that gmail responds immediately typically gmail would respond with this saying 200 okay here's the login page and here's a web page in text slash html format but once you've logged in what gmail actually does is it also sends this recall that we called these things h http headers key value pair separated by colons that are sort of semisecretly sent from browser to server and from server to browser now we more sophisticated developer types can see this stuff right you can open up chrome's network tab and start poking around and it's it's not secret per se it's just most people don't know it's there and what google and other companies are doing is they literally send a header called set dash cookie the value of which is that big random value that the server has decided for you your browser assuming that it speaks http properly should then save that value in ram your computer's memory or on your hard drive and then every other click you make on gmail.com should send not just headers like this but it should send kind of the opposite header just cookie not set cookie but cookie which is the presentation of that handstand and so every time you click a page on gmail or facebook or almost any website into which you've logged in those cookies have been planted on your computer now recently in both the europe and in the us have laws been passed that are increasingly putting pressure on companies that operate internationally to present you with cookiebased information right you get these little popups increasingly and you've been getting them for years in europe saying are you can we plant cookies on your computer so given all of this what might happen if you say no no cookies on my computer you're going to have to keep logging in right if you take away this fundamental http feature much of the web breaks or the user experience deteriorates significantly now the flip side is cookies can be used not only for good so to speak but also for evil it turns out that there's a lot of ads on the internet of course and that's what drives a lot of the revenue that makes it all possible those ads typically come from image tags in your html or script tags or some of the html tags we have seen in the class but they go to third party servers somewhere else dot com and the problem arises with cookies when those third parties are allowed to plant cookies on your computer because if you go to google and you go to facebook and you go to twitter bunches of websites suppose they all have some middleman advertising service advertising on each of these websites that middleman so to speak because they have their ads and therefore their http headers on this site and this site in this site there are big third parties out there lots of them advertising networks that know everywhere little old you is going because they see your cookie appearing from multiple different other sites and so here's where cookies become not a computer science engineering feat but really a threat to one's privacy because they can be used so easily for tracking and frankly at t and verizon as an aside got into trouble then even not enough people know this some years back when they started injecting forcibly additional http headers similar in spirit to this to all of people's cell phone traffic so not things you could even opt out of initially because this was a way too for advertisers and for themselves to be able to track users so these http headers on which cookies are based are very powerful but also very invasive and we're only now starting to see societally and politically pushback on this very simple mechanism that hopefully we as cs types just understand the mechanics of and therefore now the implications so let's see this in context for instance let me go ahead and open up a relatively small example in cs50 ide for those unfamiliar cs50 ide is a webbased application by which you can write programs in the cloud just using any browser on a mac or pc i'm going to go ahead and into my account here and i'm going to go into store and i'm going to go into the templates directory and show that this example here has a few files this will look familiar to students in the room application.pi is the webbased application and then we have some template files so to speak in my terminal window here i'm going to go ahead and adjust my keyboard go into this directory called store in source 8 which is available online and i'm going to go ahead and do flask run which for those unfamiliar is the command via which you can start a web server and start running a webbased application so now that i have that i'm going to go ahead and visit exactly this url here and we'll see a relatively simple and super ugly web store let me go ahead and zoom in a bit and this web store allows me to buy three things foos bars and basses whatever those are and this is a very simple ecommerce like site where i just have to type the quantity of foos bars and basses that i want and then i can go ahead and buy them so i'm going to go ahead and say give me one how about zero bars and two bazes and i'm going to go ahead and click purchase and now you'll see my shopping cart but if i continue shopping you'll see that it resets just like if you keep browsing amazon or whatever other website but if you want to check your shopping cart again notice it's remembered what i'm looking for and in fact you know what i'm going to go ahead and close the window oops i actually lost the website but you know what if i go back to that url and reopen i see the storefront but if i view my shopping cart it has remembered my state so notice the power now of cookies is not just to remember with a hand stamp who you are but now you can remember anything about that user that you want right a shopping cart on amazon or any website is like the best example of this because it would be horrible horrible horrible for user experience or ux if every time you click the darn link you lost the contents of your shopping cart because the website forgot who you are so this is a compelling feature to remember and it's cookies that implement this feature too because more generally what's going on with cookies is this when you set a cookie using the set cookie header that looked like this there is a key value pair to the right that we might call session and that has the value value is the hand stamp session is just a term of art that refers to this abstraction that you can think of really as a shopping cart but it doesn't have to have anything to do with actual shopping or ecommerce it's just a container in which you can store stuff so this is telling the website that my session value my hand stamp is one two three four five and big really random number the website can then say you know what i'm gonna store a container for you let's call it a python dictionary or dict for you inside of which i can put anything i want and so in fact when you go to a shopping cart like this what is the server actually doing well upon seeing your hand stamp and realizing oh you are user one two three four five six seven oh that's user name malen let me go ahead and grab the dictionary the python dict from memory or even from a csv file if you want and show you the contents of your shopping cart meanwhile if someone else brian visits the same exact website and logs in with his account he's going to present a different handstand presumably and so the website can look for a different dictionary and show brian the different contents of his shopping cart and the same for everyone in this room so this simple mechanism i mean consider the power this is just a stupid text value key colon value and from all of that does all of the web's capabilities now come and we won't look in too much detail into the code here but let me show one snippet of it if i go into application.pi the magic that makes this possible in flask is just to import this additional feature you'll recall from the past couple of problems you've worked on you import from flask a few things render template redirect request well if you add session to that list which is the code abstraction of this hand stamp idea what you can now do is this let me scroll down to the juicy part here and notice that you can do lines of code now and for the next cs50 finance problem lines of code like this session is just a python dictionary or dict you can index into it using any word foo or bar or baz just like you could with dictionaries more generally and you can store and knit anything you want in my case i want to store a number zero foos or one foo or two foods or whatever so i can simply convert to an int the user's requests forms item whatever that is and let me wave my hand at some of the code above because it just kind of sets the whole thing up but the new line of code the new feature that now will empower us to build something like a stock trading website is quite simply this line here because what you can also do to remember that a user is logged in just go ahead and store in this socalled session a value of like true and if the value true is there you can infer that the human is logged in and if there's no such value in the dictionary they are not logged in and so we'll hold your hand a bit more in the next problem set with this introduction of cs50 finance and we'll write some of the code that handles the login so you can see by example how to do this but it'll be up to you thereafter to start remembering what stocks a user actually has using sessions to retain the fact that they've logged in already alright so that was a lot all at once but any questions on cookies and the future they provide these things called sessions anything at all yeah is the session saved on the user side or the server really good question and the answer can be it depends you could store it on the user's client on their browser and as a gentleman up here proposed earlier you could or over here propose you could theoretically store like literally their username and password maybe i proposed that earlier on their computer and that's bad for the reasons that we surmised earlier but you could also store the contents of their shopping cart foos bars and basses that's not quite as invasive as storing their password but if you're buying things you don't really want people knowing that is then invasive so maybe we can do better and better is often stored on the server so a welldesigned website will typically store only this big random value the hand stamp on the mac or pc and then all of the interesting and maybe sensitive stuff is stored in a database or a csv file or just the server's ram or memory like in a global variable good question other questions other questions all right so that's one problem solved we know now we can implement login forms and we know that we can remember that people are logged in so let's just stipulate that is now possible but over the past couple of weeks it's not been incredibly powerful to only have access to things like csv files comma separated values which create the illusion of like excel and google spreadsheets and apple numbers like columns and rows why well it's pretty much linear search for everything right a csv file is just rows and rows and rows and rows of data and if you want to search for anything in that file like you might have wanted to for your survey implementation how do you find it well you open the file with open you maybe use a for loop and iterate over every single line looking for some value and then you close the file that is big o of n in the worst case the thing you care about is at the very end and that's not terribly efficient now you can append to files pretty efficiently recall that when we open files with quote unquote a for append mode we did this with a brief example instead of w for write you can help get the operating systems help and add rows to the file at the very bottom which is more efficient but you can't insert things in the middle very efficiently you can't delete things very easily you would have to literally for those kinds of scenarios open the file read the whole darn thing then write out parts of it or add to it as you're writing out and so humans years ago realized well this is stupid all of us humans in the world are constantly writing code to open files change files save files why don't a few of us do an even better job of implementing that feature and then share it with the world and thus were born effectively databases and these days there's so many different types of databases you might be familiar with tools commercial software like oracle or sql server or microsoft access and an open source world there's postgres and mysql and sql lite and others and many of them as even those names imply use a special language called sql structured query language which is the very last language we'll introduce you to in cs50 unless you go off on your own with final projects to pick up something more but with sql do you have the ability to select data from a database to insert it to delete it to update it all of the things that you could absolutely do with python and csvs it would just be so darn tedious to write those lines of code yourself so what's the right mental model here is i claim essentially a database like most everyone in this room has probably used google spreadsheets and if you've not probably excel or maybe apple numbers uh so these are spreadsheets and they're essentially what you could call a relational database relational implying that there's relationships among the various data in the rows and the columns decided by you or whoever made it and this is a spreadsheet of course and it has uh rows where your entity your actual data goes and columns and what's noteworthy about the columns it's just conventional to do what with the columns especially in that first row yeah put some header values right you could certainly put them in the left it's just humans prefer it seems to read top to bottom instead of left to all the way to the right so we just adopted a convention years ago that your columns represent different types of data and the rows represent different uh values for those fields or for those columns so to speak so if you wanted to store like a spreadsheet of values for a bunch of students in a class or in a university one column might be id number like their harvard id or their yale id another column might be their name their email address phone number age and so forth and you could just lay that all out you can make it pretty and boldface the top and organize things and sort it but at some point this isn't quite the right tool and in fact i ran into this in grad school years ago where i was analyzing large sets of data and it was just convenient to double click on a csv file open it in excel and just manipulate it and do answer the data questions that i had but back in the day excel actually had a limit of 65 536 rows sounds like a lot and that's 2 to the 16th power if you caught the reference there but so humans at microsoft decided years ago that's enough um and frankly it kind of was because even in the thousands of rows like my mac just became unusable because there was just too much memory being used so it was a just impractical limit anyway but at some point you might want to store 65 537 rows of data or hundreds of thousands of rows or millions of rows or even more i mean there's so many websites google and facebook and others that surely do this already you can't just use a program on your mac or pc anymore you need to use fancier software but that fancier software often still works the same way you have one main file called a spreadsheet in our human world but in the server world you might call it a database instead and whereas in our human world we might have things called sheets or individual spreadsheets within the bigger file in a database you're going to have things called tables but they're the exact same thing with rows and columns and so when we want to actually store data we can actually store it in exactly those ways so let me go ahead and do this let me go ahead and open up google spreadsheets just as representative of a database and let me go ahead and create a new file here so new spreadsheet and just so that we can represent things like students i'm going to call this spreadsheet students and over here i'm going to put their id number and their name and what are some other fields i rattled off for that come to mind email say again dorm good sport okay so sports they want to do sure that's fine a little longer what else graduation graduation year age okay good so graduation year age concentration okay and we could probably keep going and it just gets wider and wider and these are my my columns if you will or the fields in the database and you know frankly i could name this if i really want to be tidy here and i could call this students and you know what maybe i should call this not students but university because i might want to have another tab here that i will preemptively name to say faculty and faculty probably have id numbers and they have names and they probably have departments for instance and they also probably have emails and so forth so phone number is another one but i might want to kind of cluster these different types of data in different spreadsheets because they're kind of apples and oranges there might be some overlap but they're distinct and so i have different sheets in the database world you do the exact same thing except you call the whole thing a database and you call these things tables to be clear but more importantly with a real database so to speak you have to be a little more proactive about telling the database what types of data you want to store now those of you who've used google spreadsheets and apple numbers in excel know that you can go to like the format menu or the data menu or whatever and you can show things to different decimal places you can turn things to percents and you can format the data but that doesn't tend to have any functional impact on your data it's just an aesthetic detail like how long or short do you want to show the numbers to be in your columns and cells but with databases you can actually provide juicy hints to the database that will help that database store and find data for you more efficiently for instance there's this laundry list of data types to which we have access in sql so sql is the language with which we're going to be able to query a database frankly in uh something like google spreadsheets and microsoft excel how do you find data we usually hit like command f or control f and you search for it that's not very programmatic you can do it with macros and such and we'll do this with code but with sql you're going to have to make a few decisions first sql supports a few different data types at least in one of its forms so it turns out there's a lot of competition out there sql is a general language but different companies and different nonprofit groups have come up with their own dialects so much like we humans might speak uh bunches of us might speak spanish well there's different variations of spanish not to mention many many many other languages and so similarly in the programming world is there sort of a common subset of words in a language but then different companies and different people might have added and subtracted their own features just because they think that's better for their use cases so in sql lite which is the database technology we will use in cs50 ide and android uses this and it's very popular in other contexts too ios as well they only have a few data types blob of all things integer numeric real and text now what does that mean well it turns out it means different things with different databases and another popular database is called postgres or postgres sql this is a very popular one for high performing websites so if you're trying to build a business you're trying to make an application used by everyone on campus generally you would use a fancier technology than sql lite which is by definition lightweight and you'd use something like postgres and so we'll introduce you to both of these dialects along the way because each of them allows us to do different things with a different degree of precision so in sql let's claim even though it's a simplification there are at least these data types when deciding what type of data to store in your database table you have to decide not just what it's called like id and name and email and dorm you have to decide what data type it is so we've kind of come full circle because the last time we did this was in what language c so in sql 2 you do this but it's not to be nitpicky it's to actually improve performance so this is to help you get at that data more efficiently because the more the server the database knows about your data the faster it can find it essentially so in the world of databases you generally have to decide not just to store an integer but either a small int an integer or a big ant and generally speaking at least in most databases this might be two bytes this might be four bytes this might be eight bytes so let's maybe impress the families here if you have a 32bit integer or four bytes what's the biggest integer you can store in your database four billion someone please impress four billion is exactly correct and it might be 4 billion positive values or maybe it's only 2 billion if you also want to have 2 billion or so negative numbers as well big int uses 64 bits which is just massively massively bigger and tiny int or small inch rather there's also tiny int and some dialects small ant is just two bytes and it actually counts up as high as 65 535 as i alluded to earlier so you just need to decide now why would you choose one over the other when you could just use big int and store small numbers and big numbers alike well why might you just intuitively not want to make all of your integer values in a database big ends it's just simple give me as much headroom as i want yeah you're just using memory unnecessarily right why use more memory than you need to now arguably got memory's so cheap these days computers are getting bigger and faster so in some contexts it's not a big deal but if you have lots of data and every one of your rows in a database is two bytes bigger than it needs to be and you have a million rows i mean that's already huge numbers of bytes that you're just wasting and throwing away so it behooves you to actually give some thought to these data types of course you don't want to go too small because if you use a small inch or maybe even an integer but business is so darn good that you have over 4 billion users or 4 billion rows or 4 billion foos and bars and basses that have been sold which absolutely happens to the googles and facebooks of the world you better start using 64 bits to represent unique values instead of just 32 because eventually you'll run out well what else besides integer values in sql you might want to use floating point values those are real numbers that have decimal points in them this is quite like c they're called a little something different and annoyingly it uses two words in this case but a real number is a 32bit value that is a floating point value like a float in c and double precision is like a double in c which is 64 bits and that just lets you get even finer grain control over the decimal point as we've seen because of course you can't represent numbers precisely because of imprecision as we've seen in both python and c numeric is kind of a catchall for a bunch of number related things that aren't quite integers or reals necessarily boolean a true or false value dates if you want to literally store like year year year year dash month month dash day day in a standard computer format even though human cultures vary how they write that date time if you want to have a date and a time right after it uh numeric is actually a solution to a problem turns out that finally after all this time we have a builtin mechanism for storing numbers precisely and this is perfectly timed because in cs50 finance when you're dealing with money it'd kind of be nice if you don't accidentally round off how much money someone has either slightly lower slightly higher those of you may be families especially because from a few movies back in the day if you ever saw superman 3 this is how some money was made by shaving fractions of pennies off of computer systems and more modernly office spa office space did this as well big scam trying to round off these pennies well you if you use the right technology in language with sql you can actually specify a numeric data type which is like a floating point value but you specify essentially the total number of digits you want to handle and how many of them should be after the decimal point so it's common in stock markets to actually use four decimal points of precision so not just cents the uh to the tenths and the hundreds place but to the thousands and ten thousands place you can now specify that with a value of four for precision and you don't have to worry about those round off area errors we've talked about before time and time stamps just how much time has passed since a gate and date and time are also available to you in sql and then lastly here text values turns out you have a choice of values for when it comes to deciding how many characters to use to store your data you can use char which just like in c with an array you have to decide in advance for a string how many bytes to use and if you say char 8 you are getting 8 bytes and if the name is malen malan you are wasting three or if we null terminate it two of those bytes but sql introduces a solution that python kind of gave us too varchar as the name kind of implies variable number of chars allows you to specify just an upper bound so if you know that one of your columns is going to be called name and a person's name might be malan like five letters or maybe certainly more for people with longer last names or first names you can say varchar 100 and that's the upper bound on how long it is but the database will be smart if you only need five characters or five bytes it won't waste 95 others for you it will optimize that for you and then lastly text if you want to store tens of thousands like paragraphs or pages of text that's even bigger than varchar where you don't necessarily want a welldefined upper bound you just want a good chunk of memory but there's implications here and just quickly char and varchar seem like not even complementary just char seems unnecessary why paint yourself into a corner and say give me only eight bytes when you could just say ah give me up to 100 bytes and you the database server figure out how many to actually use like why do these two data types exist yeah time yeah so time is spot on it might actually take longer to use one data type or the other how could that possibly be well if you've got a value like char where you specify a precise number of characters like eight if you think about the columns in google spreadsheets in excel every one of those columns uh that sells is exactly the same with right it's eight bytes eight bytes eight bytes eight bytes and as soon as you have perfectly constant offsets this is by 0 this is 8 this is 16. this is 24 this is 32 and so forth you reintroduce the capability that in c we had with arrays you have random access doing simple simple arithmetic multiplication addition and subtraction you can just jump to any element in a column if it's using the same number of bytes for every cell but with varchar if you need to have small uh very narrow cells and wide cells you're going to have what's called a ragged array where one side of it the lefthand side so to speak is going to be very straight and rigid but the other side might kind of vary based on how long the word is in that column and to your point about time it's going to take the computer more time to search a varchar field because it can't just jump to the third element it has to search all of them potentially but thankfully at the end of the day databases don't do that they don't just evolve into linear search csvs dissolve for our purposes into linear search the magic and the sort of intellectual property and the secret sauce so to speak that goes into databases oracle sql server microsoft access postgres mysql and sqlite is that really smart computer scientists have decided to implement algorithms and fancy data structures often tree based if you recall our discussion of binary trees or tries and hash tables and those fancier data structures they have baked those kinds of data structures and designs into their database software they've made it freely available or commercially available and so we now just have an abstraction called the database into which we can store data and just read it update it write it and change it quickly without having to implement all of that lowlevel plumbing ourselves and so that's ultimately what a database is going to give us but we have to actually have access to a database to do that and we need to actually decide first to help the database by telling it what to store where and how to store it as a type so why don't we do this let me go ahead and do exactly that with a couple of examples let me go ahead and open up cs50 ide again our webbased programming environment and let me go into our terminal window so for those unfamiliar terminal window is just this black and white or this blue and white window in which you can type commands and rather than point and click and double click on things you can only do things textually in this window and it turns out that in the world of sql lite we can actually use a command called sqlite3 which allows us to create a database so in our human world for csvs you've seen how in code you can just create rows and columns you can literally type it in a text box uh sqlite and is a database technology that uses binary format zeros and ones and so you're going to have to actually store your data differently using a program so if i want to make a file called for instance frosh ims.db i can literally say sqlite3 frosh imdb and then i'm in this program this is a text based program by which i can create my rows and columns and it by design is going to be a little arcane for a moment it's going to look a little cryptic but if i want to go ahead and create a table like a spreadsheet in here i'm going to literally type create table i'm going to call this registrants just like last week when we were looking at frosh i am's examples and the freshman intramural sports program has students registering for sports so i'm going to have a registrance table here i'm going to go ahead now and specify that i want a few columns for this database table one of which i want to call id one of which i want to call name and one of which i want to call dorm so i'm going to keep whoops i didn't mean to hit enter let me just clean this up so now i have three columns id name and dorm and if i were to hit enter theoretically it should create a database it's not going to be graphical like excel or google spreadsheets but it will exist in my ide in a file called froshims.db but i can't just hit enter yet because i have to tell the database a bit more i need to tell it that you know what my id value should probably be an integer and you know what my name should probably be char varchar what should the name of a student be stored as varchar okay so varchar because they're going to vary right if you can think of bunches of your friends they might have short names or long names okay what's the upper bound what's the length of your friend's uh your friend's longest name 16 hi is anyone in here having a name first name and last that's longer than 16. oh 50. sorry i heard 16 i thought because you're not going to be able to register for frosh iems because the database is going to truncate it and as an aside if you've ever gone to a website and tried typing into a form field and either your keyboard stops working or you do type a long word or paragraph in and then you hit enter and it's some of it's gone well that's because the database likely can only store so many bytes and frankly this often happens on customer service forums right if they don't really want you being too verbose with the customer support staff they'll cap the length of the field into which you're typing and they're also doing that on the database but also probably for practical human reasons they don't want to read a big complaint that's this long as well so 50. anyone have a name longer than 50 characters and jersey and not many names but you know what we have technology to answer this longest name in world um and it's this guy guinness book of world records is probably right so his name is uh barnaby marmaduke aloysius benji cobweb dartanian eggbert felix gasper humbert ignatius jaden casper leroy maximilian nettie abba julio pepin quillum rosencrantz sexton teddy upwood vivatma weyland xylon yardley zachary usansky but he also goes by nick apparently so but okay let me go ahead and highlight this and i just i could count this manually but i'm sure someone has made a website to count characters in a string there we go letter count.com okay let's go ahead and paste that in count the characters 225 so nick will not be registering unless we don't support just 16 or 50 looks like we need at least 225. so at some point you do have to make a decision and honestly it's not always obvious you do have to specify that varchar is going to be could be 16 could be 50 could be 225 but you know what if he has kids so let's just round up a bit and call it varchar 255 honestly only because it was a convention so back in the day 255 tended to be the max length for this field in older databases and that at least feels like it's probably enough wiggle room for names but you have to make a judgment call at some point we could ignore the problem and say a thousand characters but if that's never really going to happen and you're potentially wasting space you probably shouldn't because even though it's an upper bound you're sacrificing something like time potentially to search that field if you're just uh telling the database uh that it's going to be bigger than it ever actually will be it needs to be more finely hinted so what about dorm oh god now we have to do this again how do we do it with dorm what's the longest length of a dorm or a house on campus i don't like like ker for timer house maybe but you know honestly at some point it doesn't matter too much but being consistent is what matters it's a matter of style it's a matter of design at some point you know you don't have to nitpick every little value but you should probably pick some reasonable value that you could justify to a roommate or to a colleague or to a teaching fellow and then say this feels like enough without it being actually excessive and there's one last thing i'm going to do here is just end my thought with a semicolon i apologize they're back but at the end of my thought here if i haven't made any typographical errors and i'm going to go ahead and hit enter nothing seems to happen and ironically in cs50 in programming nothing happening is usually a good thing because it means no errors have happened if in sql lite i type schema i can actually just see a regurgitation of the table i just created but more importantly i can start to insert data into this now unfortunately it's not yet graphical but if i want to insert data into this i can do this insert into registrants well what do you want to insert i want to go ahead and insert an id a name and a dorm well with what values well with these values uh the id will be the first registrant will be one the first one to register will be brian and his dorm brian where'd you live penny packer so it's good that might be close to four time or two uh lengthwise so i'm gonna go ahead and do this here is an example of a sql statement create table is one verb or expression you can use insert into is another you specify the name of the table the fields of the table and then values and now i'm capitalizing just to make clear what are sql commands and what are actually just words i the human developer chose but it's just a convention these uppercase words could probably be lowercase in most contexts too but it helps things i think visually to distinguish now i go ahead and hit enter nothing seemed to happen that's probably a good thing let's go ahead and register one other person i'll be the second registrant so maybe david from matthews and so matthew's here enter and now if i want to select all of the students in the database i can go ahead and say select from or you know what let's select everything as denoted in many languages by star from registrants semicolon enter and there we have it it's kind of a tiny super simple lightweight database but there are my rows and columns much like excel and google spreadsheets would lay them out for me but it gets better than this suppose i want to search this database for all of the students who registered for matthews and suppose that time passes and more students actually register for frosh ims i can actually filter this data i can do something like select star from registrants where dorm equals quote unquote matthews and so i can filter it hit enter and now i get back just one row and if you mine starts to wander wow if i could introduce python or javascript into this you know what i could do i could probably get back not this this ascii based table this text table maybe i could get back an actual list of rows so that i can actually do something with that data and that's indeed where we're going with this so if i want to select someone else i could do maybe select uh just the name from registrant where dorm equals matthews if i only care about knowing who registered i could do that and whittle it down to even less data so already in just these few commands i can express so much more functionality than you could with a csv to do this in csv you would have had to write all of these lines of python code yourself what if brian moved so brian really didn't like the union dorm so we're going to go ahead and update registrants and set dorm equal to where do you want to move to canaday uh where i could do this a few ways what's your instinct how could i identify brian and only brian so i don't want to move to uh canaday uh how do we move just brian yeah maybe we could do whoops where name equals quote unquote brian and enter i like this but someone find fault with this if you could uh if there's two brians we're moving both of them or all three of them so maybe better honestly would be to say let's just say where the id equals one now of course i need to know brian's harvard id number or whatnot but this is going to be more precise because the supposition here is that the leftmost column our id field by human convention should be unique so that it uniquely identifies the room so we can have as many brians as we want but we're not going to confuse them if i go ahead and hit enter now nothing seems to happen but if i select star from registrants again and hit enter notice now brian has indeed been moved to canada so there's so many other things brian you know what you're not very good at sports the team concluded so delete from registrants uh where id equals one and now if we select star from registrants we have i guess just me left but brian is gone as well so we have the ability to insert to select to update and delete and create all the while while filtering and we've only just scratched the surface here of what's possible because it turns out we can store so much data in these databases all of our students all of our faculty if you're a company you can start to store all of the products in your database all of the orders all of your customers but as soon as you start going down that road well gee what's a customer customers have names and id numbers uh and maybe email addresses and postal addresses those are going to get messy phone numbers which are kind of like integers but not quite so there's so many questions we still need to answer but feels like it's time for some fruit and some muffins so why don't we go ahead and take a five minute break turn on some music parents need to depart that's fine and we'll see you back here in five or so minutes all right so we're back and where we left off was exactly here using sequel light 3 which is the version 3 of the sequel light command which is just a textbased interface to the technology that we should think of as sql lite sql lite is interesting and it's lightweight in the sense that it's not a server it's not fancy software that you have to run it literally stores all of your data in a file but that by convention ends in db or maybe even dot sql lite but it's just a binary file zeros and ones it's not text that you can open with excel or something like that so it's not a csv so it's stored on file this means that you don't need a particular experience with setting up a database server you don't need memory and software to actually run on the computer you can store everything locally but you do pay a price because recall from our past discussions disks are slow and if you're storing your data on the disk it's not going to be nearly as fast as storing it only in ram and that's why these other technologies like postgres and mysql and microsoft access and sql server and oracle exist those are fancier products where someone literally does double click an icon or run a command that runs a program that stays running in the computer's memory and gives you even better performance but for our purposes pedagogically sql light is handy but we're still going to ask the questions about data types because sqlite does support fancier data types like those in postgres and sql server at mysql and oracle and those are the lowercase ones we introduced a bit ago but honestly this is going to get tedious quickly like even i rarely remember exactly the right syntax when creating tables the order in which everything has to go so i tend to use a graphical user interface or gui myself and there's lots of tools out there but we've built one that's free and open source into cs50 iede that just makes it a little easier to edit your sql tables so i'm going to go ahead and exit out of sql lite whoops exit out of sql lite and i'm going to go ahead over here and you'll notice that we have all of the files from today including most recently frosh iems.db that is the file i created with sql lite3 but if you double click it when using cs50 ide it's actually going to open a program that's called php light admin it happens to be written in another language called php has nothing to do with databases just the name of the product here but it's a tool that using pretty simple html tables just gives us a graphical user interface over the exact same functionality and personally i just find this easier to use and pedagogically it's going to be better because it's going to show us the available data types for our table so for instance notice here there's a lot going on on the screen but a lot of this is just uninteresting details but notice here i see a table called registrants and then i can browse it i can see its structure i can execute manual sql by typing it in i can search it insert i can do bunches of things to it and that's why this graphical user interface is just convenient let me go ahead and click on registrants and by default you'll see these tabs now browse structure sql and then a bunch of others and notice over here you'll see the one row and the one registrant who actually remains because when we last left off we removed brian forcibly from the team so suppose i want to go ahead and add more rows just for the sake of discussion i can just do it manually here i can go in here and i can say let's say the third player is going to be veronica i think she was also in matthew so i can just type that in here and i can just go ahead and click insert but what's nice about php lighted man is that it will not only insert the rows for you it will show you the sql like code with which you could have done it yourself so it's a nice visual reinforcement of that exact same command and you'll notice they use double quotes instead of my single quotes before they're sometimes interchangeable but not always so it's a wonderful way of just learning how you can actually do this with the right sql code so you're not over simplifying it with the gui but you know what let's do this i'm going to go ahead and start over because i want to make some better decisions i'm going to go ahead and literally right click or control click this delete frosh i am db and let's actually start this from scratch now previously when i did this i could have in my terminal window gone ahead and done sqlite three and then uh what was it frosh ims.db and created the file for now i'm going to actually just go ahead and touch a file called that name which is a simple command that just literally creates it but puts nothing in it just so i have an empty file and you'll see that it just popped up again on the left hand side which is handy and now i can double click this version of it which has nothing in it yet and i'm back to php light admin but notice no table in database so let's start to ask some of the harder questions as to actually how to create data in a database so let me go ahead and go to this field here create new table on database frosh iems i'll go ahead and call it registrants again but how many fields um so let's go with id name and dorm what else email i heard earlier age i heard earlier sorry sports do you want excuse me sports you want to be in okay six fields six fields let's go with that so it's actually you know seven fields i want phone numbers too this time so let me go ahead and click go and now you'll see just a gooey way of prompting you for all the answers to the same questions as before and maybe this is clear or maybe it's not but it's just an alternative to the memorizing exactly what the commands need to be so top to bottom here's all of the fields i need to decide on ironically the fields is just a synonym for columns and yet my columns are currently laid out in rows but that's just a ui issue so let me go ahead and decide by convention my first field is almost always id or probably should be and we'll see why this is powerful in just a little bit the data type for that by convention should be integer unless you've got a lot of data like a facebook and then big it might make more sense but notice this drop down actually gives us a nice menu of options just as before and you'll see in gray text the category or in fancy terms the affinity of these various types in sql lite and in lowercase black words here you'll see the actual data type supported by big popular databases like postgres that you might want to use for your final projects in fact we're introducing these with an eye tour you're using these for final projects in the cloud not in cs50 ide but actually getting your own domain name and putting your website if you do a web app out there so here we have all of my available types and under integer i'm going to go ahead and literally choose integer for my id all right next go ahead and zoom out let me go ahead and choose a student's name before did we do did we decide on char varchar okay varchar in what size 255 so the user interface here just allows me to type it in so the syntax is a little different because it's a gui but 255 but you know what the last field was dorm that too i think we said var char so let me choose that and 255 though this one's a little more debatable i'm not sure what the right number is so in the absence of clarity i'm just going to standardize on some same value without being too wasteful but notice there's a few questions here that we haven't come to but our perfect segue earlier hinted at this it turns out you need to make a few other decisions when designing a database if you know in advance that one of your fields is like the primary piece of data to uniquely identify users that's what's going to be called a primary key the column or field that guaranteed is going to identify users uniquely so if you've got two brians each of them is going to have its own id that therefore is your primary key not the name field brian so i'm going to tell the database this is the primary key and it's going to help me keep track of that uniqueness moreover this is a fancy feature before i was manually and very arbitrarily saying brian will be number one i'll be number two veronica will be number three that's tedious like computers should be able to solve that problem for me i don't want to think about who is id number what you can auto increment a field so if i actually check this box sql for me will just plus plus plus plus the id field every time i insert a new name in a new dorm i don't have to even bother specifying an id anymore now there's another column here not null where you can specify this column should never be null and this is important because if you're building a website that has important data that you must have from the users like your app won't work without the user's uh username or their password or their email address you can say not null and your database will ensure that you can't even insert a row into this database unless you give it a value for that field so it helps you protect you against yourself because you could certainly implement that logically in python or any language but the database is a final gauntlet as well default value doesn't really make sense here but for certain types of fields you can say database insert the current time or the current uh date for me now why might you want that why date and time by default why might that be useful when the account was created when they bought a foo when they shipped the bar any number of reasons you might just want to know what is the time right now we don't have to write code for that the database can answer those questions for you so just so much more functionality than we got of course with csvs alone so name should it be a primary key no otherwise we couldn't have two brians and generally your primary key will be one field though theoretically you could make joint columns if you wanted but generally it'll be a single one should we auto increment brian so it's like well brian 28 or brian 2 brian 3 and so forth no doesn't really make sense not null probably i want all of the freshman's names so that we know who's signing up for sports and dorm yeah not null but oh corner case can anyone think of a corner case where dorm maybe should kind of sort of be null they commute they're off campus you know it's not many students but if you have one percent five percent of students living off campus this is a design question now and you all of us have probably visited some website where you just can't fill out the form in the right way because you don't fit their mold or their expectations and that's just because of a poor design decision so let's allow it to be null just in case now what else we said a phone number was one i proposed gosh there's no fun phone number type so what do you want to go with i'm sorry varchar okay so we can pick varchar and maybe use like 10 or so for 10 digits in the u.s at least though maybe like 12 with the dashes or 13 with the parentheses or what's that oh i hear murmuring sorry a small ant and just treat it as a number maybe that could work too another alternative anything else a precision so a specific number good so not a bad instinct but it turns out with uh the numeric data type where you specify scale as it's called the total number of digits in precision that's almost that's generally meant for floating point value so real numbers with decimal points because even though you're specifying a max limit you don't require that many digits it's just a max yeah we can kind of find faults i think in both of these ideas though both of them are reasonable if you allow for char or varchar i could type in like foo or bar or baz and not a number so maybe we should go with in but can someone think of a counter example to why you shouldn't use integer variable length but if we actually do the math maybe 65 maybe there's enough bytes there we could use a big end and that gives us a really long phone number so there's probably a reasonable max yeah hyphens in parentheses we have to decide do we want to support those and honestly all of us are perhaps a little u.s centric right now uh but most of us here but you know when you make a local call in some zones like you type 0 first and some human might type 0 as their number but what's going to happen if you type 0 into an integer field you're going to ignore it so now we're there's that corner case so damn it like there's no way to solve this problem it would seem so what's best we have to make a compromise and just accept that we have to solve this with code varchar all right so varchars or char all right so let's maybe let's simplify the problem no one from outside the u.s can take freshman intramural sports that simplifies the world because if we only support u.s phone numbers now we can say 10 digits and if we say you know what i don't care about the hyphens or the parentheses i can use code javascript or python to throw away the syntax and i can just store 10 digits maybe char 10 is sufficient 3 for the area code then the rest of the number the all seven digits thereof but you could find fault with this too and we're really alienating the international population on campus and so but again these are just nonobvious design decisions and so here we are at the end of the semester we don't always have good answers and reasonable people will disagree but let me simplify our assumptions and just do us numbers 10 digits and trust that i will use code in python or some other language to throw away the syntax the punctuation and whatnot of parentheses and hyphens and i'll make sure the human hasn't typed in any letters of the alphabet i can do that in code and you know we can do that even in javascript when the human submits a form um let's uh we'll leave for the end sports what was it sports sports they might want to do so this is a good example of you shouldn't really have spaces in your field name so the convention would be sports they really or might or let's just call it sports um in this case we'll come back to that i think there were two other ideas we had phone number email email okay email is a good one what should that one be there's no email type unfortunately even though there is an html an input type for email what's that var yeah var i feel like we probably need a vartar here and but here a little nonobvious what is the longest email address in the world maybe it's nix nick so i i don't know but let's pick a reasonable upper bound that we can maybe be comfortable with as a group and let's see anything else here no okay and then what's the one more field oh great oh but age let's go with age so age finally something simple what do you want this to be small ants right you're not gonna you can we will not support people older than 65 535 years old someone want to find fault with this idea though i would argue there's no one right answer to any of these months well but oh it depends do we want months so you're assuming we want birth date i think i've called it age so maybe that's the problem like if it's age small it's fine like you can be zero years old or 65 000 years old we have a good range if it's age i think we're okay but i think you allude to a good point which is why would we maybe want to store birth date and not age and the damn thing's always changing otherwise right like i'm gonna have to update my database tomorrow and then the next day let alone every hour or every minute just because my users ages are changing like that seems silly let me instead fix a value so do something like birth date birth date maybe specify not an in but let's actually use the date field not time we could store time if we really care what time they were born on a certain day but here i can say date is going to be a little better because now i know in python javascript even c i can do a little bit of math and if i know they were born on such and such a day and month and year well i'll just subtract that from the current day month and year and figure out how many days or years old they are so better design decision there perhaps but we do have to standardize the format we can't just allow people from the us and europe and asia to all kind of choose their own formats sql standardizes this year year year year dash month month dash day day and that's the value of having these data types again all right so how about sports the last one varchar all right what's the longest number of words in the sport i did say might want to do so i could get up there but uh 255 probably makes the most sense maybe unless they're very athletic yeah i here too i don't know but just for the sake of opening up possibilities when you think the human might be a little expository and actually write a paragraph of all the sports they're involved in or whatnot or even bigger than a paragraph text is even bigger sports this probably isn't compelling and i'll change it back to varchar but if someone is typing in like their college essay into the um the the common application or if you're asking people to paste their resumes or the like you might want to use text because i have no idea how many words someone's going to have text allows you to store even more data but it stores it a little differently it tends to store it not in the column but using pointers if you recall from a few weeks back it uses the equivalent of that to store it like over there which takes a little more time to get to so again there's just a tradeoff here so uh we could do varchar 255 makes me a little nervous so i'm going to go with another common value 1024 it's a power of two but there's no one right answer here but these are the nonobvious design decisions we have to make if i didn't make any mistakes here i'm going to go ahead and click create and table has been created you can even see now all of the data that's been created there and voila if i go back to frosh ims and i go back to the registrants table not only can i browse it there's nothing in there yet i can look at the structure and actually see all of those same values and edit some of them like renaming but you can't completely mutilate it you might have to start over if you make too many changes all right any questions then about this yeah uh why do i use 10 24 instead of 10 23 typically when you choose a mac oh uh convention i i can't justify this 255 was the max because i think one of the bytes was reserved for some value historically but that's not really the case that bound has been lifted and uh no good reason the nowadays yes back years ago 255 was an actual limit and so it got adopted now i don't know i just picked powers of two often my next goto would be 2048 4096 and so forth just because yeah what's the difference between our charge varchar what's the difference between varchar and char char uses a fixed number of bytes no matter how many of them you are using the advantage of which is your columns conceptually are perfectly straight on both the left edge and the right edge which means you have random access because every cell is some fixed number of bytes from the rest varchar uses like a ragged array as it's called where one side the right hand side is shorter longer in different cells so there's only a maximum length on each of those cells but searching it can be slower as a result because you can't just jump to sell to sell you have to follow the lengths of those things that's the tradeoff yeah oh if i wanted to add the edu an education field now and modify the table if you realize too late oh darn like i need to actually add something to this in the gui tool we can add one fields to the end of the table literally so let's do that let me go ahead and click go i'll be prompted with a similar form but smaller i can go ahead and type in something like education let me propose this is varchar maybe 255 that we could have that debate too i'm going to go ahead and say add field and now notice that the table has been altered successfully it actually it's for whatever reason it's not showing me the code for that particular command but there's literally an alter command in sql that would allow you to change it and if i go back to the structure now you'll see that i have another column called education shown ironically here is a row yeah good question does the order of the columns matter fundamentally no by convention you would typically put the id first and then i personally by design put like the most important fields next like name feels like the right choice maybe email feels like the right choice though i clearly thought of it a little too late this time it's not easy in sql light to reorder things but in other databases you can so there it's more of a human convention uh yeah good question is it a convention have one single primary key or can you have multiple by definition you can only have one but that primary key can span multiple columns so we haven't seen a use case for this yet but there are scenarios in which you would want to say i want to guarantee that these two columns together are unique but not each individual one unique but we won't encounter that just yet other questions and yeah was a not known field really good question what if you had added uh education after you already had real data in there but you specified not null which is problematic because what is the educational backgrounds of the previous people typically what the database would do is either reject it or it would just put the empty string quote unquote so it's not technically null but there's nothing actually there it's just a string of length zero really good question all right so what can we now do that's a little more powerful about this well let me go ahead and quickly insert some data here i'm going to keep most of it blank but you know what i'm not even going to bother with id brian you're back on the team let's go ahead and insert brian let's go ahead now into registrants again let's go ahead and add veronica again so i'm just inserting a few rows manually and again notice it's executing all of this for me without me having to bother typing it out but i absolutely could in fact just for good measure let's do one manually if i click the sql tab notice that i get a default suggestion here that is the syntax with which you can select everything or i can just type in uh insert into registrants but now if i only want to insert a name i don't have to do all the columns i can just say go ahead and insert here aaron for instance semicolon zoom out and click go that seemed to work if i go back to browse now aaron is in there as well but you'll see the difference the query that's being generated automatically by the gui was lazily just inserting quote unquote this socalled empty string of length zero i by omitting even mention of those columns was deliberately inserting null so frankly my database is getting a little messy here so you generally don't use php light admin or gui to insert data you might use it to conveniently create your tables and kind of get your application ready but then you're going to write code ultimately and that's the direction we're going i'm going to go ahead and insert one more person oh i forgot i'm not on the team at all because we started over so let me put myself back on the team david and let me go ahead and click insert go back to registrants and now you'll see there's four of us my id change because they've been inserted in different orders but notice all of the auto incrementing has been happening magically for me and that's useful because i don't have to even think about it and who cares what my id is i just need to have in many cases in a database a unique id so now let's actually write a little bit of code right thus far we haven't done anything useful we've shown you like this black and white window in which you can like select insert and update data but that doesn't really solve any problems we know about yet we have this graphical webbased interface via which you can create tables and add data but who cares we're trying to solve actual problems and the problems of late have been to build software that solve any number of human problems like surveying users and showing the results or finding similarities and documents so suppose the problem at hand now is to actually build something like the frosh im's website and let students register and then see who is registered well back in my day i fairly lazily for lack of technical knowhow just emailed the registrations to the proctor or the ra who was managing the intramural sports program but i they later started putting it in csv files suppose now version three 20 years later i want to store it in an actual database how can i actually do that and then see the results well let me go into the ide again and open up for instance a new file that i'll go ahead and call lecture.pi and suppose i just want to write a simple python program via which to select data from a database so it turns out i can do a few things here first of all let me go ahead and do let's say from cs50 i previously have done things like import get string and get int and so forth it turns out that the cs50 library for python also supports sql and it's going to give us a function called execute that will let you execute any sql command but in python code so instead of pulling up sql lite3 via my own hands or going to a graphical user interface php lighted man i can write code that talks directly to froshims.db and eliminate all of those tools altogether and just now write code so how do i do this i'm going to declare a variable called db for database so i could call it anything i want and i'm going to go ahead and call this sql function and i'm going to pass in a somewhat funky looking string as an argument but it's a standard convention to say what database technology do you want to use then you do colon slash slash so it's three slashes not the usual two in a url and i'm going to specify um frosh ims.db this now will give me a python variable called database that is kind of like a portal if you will into that database file that i can send selects and inserts and deletes and updates to how do i do this well if at the end of the day i want to execute the equivalent of select star from registrants how do i do that well i'm just in a text editor right this is cs50 ide i'm just typing text moreover i'm typing text in a python file and this is not python and indeed the ide has this little red x saying can't do this but i could pass sql code as an input to a python function and let that function talk to the database and indeed that's what we're going to get here from cs50s library i'm going to go ahead and do this you know what access the database and execute the following sql code quote unquote that close parenthesis now what is select return by convention what should it return well in in sql light 3 we just saw kind of a pretty textbased table right with like lines and slashes that looked like a table but it was just text php light admin we actually saw html tables when i browse the database and i proposed verbally a bit ago that you know what if i were to get back all of this data in code what data type would i like it to be handed to me as you know rows i want rows from a table show me all the students who've registered what data structure in python seems apt and just a list right a list that's ordered from first row to last row so we'll call that a list or an array back in the day of c so you know what i'm going to assume that's correct and if i read the documentation i would see that it's correct cs50s execute function if you use select returns to a list of rows it might have zero rows if there's no matches but it might have a thousand rows if there's lots of matches i'm going to store those results whatever they are in my rows array now suppose i want to print out who has registered in my database from whatever frosh i am's website exists i'm assuming students have registered on the web now i'm just the proctor or the ra who's actually now trying to manipulate the data and do something with it so what can i do well for row and rows what do i want to do let me go ahead and just print out that so and so registered so so and so registered well how do i plug in so and so well there's a few ways to do this and let's see first of all i could use my placeholder syntax for print and then i want to print out the row but what do i want from that row what columns are in any row in this database id and name and dorm and phone and sports well it turns out those are going to be handed to you as python dictionaries or dict structures so i can just say row quote unquote name here and i'll use single quotes just to make more clear what's going on here and then i need to make one fix how do i f for format string so it looks a little cryptic but this is just python stuff now the only thing that's new is sql but if we stipulate that sql when using this execute function it's just going to hand you a list of rows each of which is a dictionary so that you can get at this column or this column id your name or dorm this would seem to be now a nice convergence of this week now with the past couple of weeks so let me go ahead and save this let me go ahead and view my console so i have a terminal window and let me go ahead and run python of lecture.pie and in just a moment if i cross my fingers i should hopefully see who has registered amazing i've seen who's registered now there's one line of output that i didn't uh expect which is just this one this is the library just being pedagogically helpful it's showing me every command that i sent to the database but you'll see that so and so has registered so this is kind of interesting it's kind of a stupid program right because most proctors aren't going to be like hacking frosh ims by using a terminal window and running python scripts they're probably going to want to do this via a web page and actually see who is registered but if we have the ability in python code to do this like iteration what could i do instead of instead of just printing to the screen what could i print out per last week and per the past problem set i could print out html right like each of the students who registered kind of feels like an opportunity for like an unordered list or an ordered list or a table or whatever you can now generate html so let me do this let me actually go into an example made in advance what if i went ahead and opened up layout.html here is a simple layout for a web application using flask for those unfamiliar this is mostly html plus a technology called jinja which is a webbased technology for generating websites dynamically the body of this page is clearly what's of interest and you know what i bet i could do some logic right in there so let me go ahead and do this let me go ahead and create uh let's say a new file let's call this application dot pi i'm going to go ahead and just for time save do a little bit of copy paste to save myself some keystrokes so here's a very simple web app and this is going to be my todo so if i go in here to templates let me open up index.html and let me go ahead into here so long story short here's where we're going with this what if i instead generate an unordered list using code from last week but i use my for loop here inside of my web app instead of actually just with a simple lecture.pie file well recall that i could do something like this i can have a jinja loop so i could say something like for row in rows and then down here i can whoops preemptively say something like n4 which is our weird syntax from last week and then in here i can just do a list item and then if i want to show who registered what do i type here in between these curly braces if each row represents a registrant row name registered i can just do something like this so same idea i'm just wrapping it with a little bit of html now let me go to my application.pi file because i'm going to have to fill in some blanks and let me see how can i do this well ultimately i want to return the result of rendering a template called index.html for families unfamiliar this is just a line of code that says go show that file to the user but i don't want to just show them the file as is but let's at least get this set up i'm worried that it might not work yet because i need to get the actual data so how can i get all the rows for my registrants well i can do rows gets db.execute and i can go ahead and select star from registrants and store that in there this file is called froshims.db that i created earlier and everything else is just flask stuff from last week nothing else is new the only thing that's new is this line here this line here and now this line here where i'm using sql inside of a python call by passing it as an argument to a function called execute how do i pass the rows to index.html yeah like rows equals rows is the convention we've adopted you could call it anything you want x equals y but this is a little more straightforward so this is saying hey database get me all of the rows for my registrants and then render the template index.html and pass in these rows and now if i hold my breath and run flask run no syntax errors if i go ahead and visit this here and open damn it the tab i see an internal server error so teachable moment families let's go back into the browser window here and see what happened okay template syntax error so pretty stupid mistake it looks like i expected a square bracket instead of a curly brace that's fixable let me go into index.html and oh i didn't finish my thought so that's some of the frustrations of programming for those who are seeing this for the first time let me save that let me go back to the browser here and we'll just reload oh my god voila now i have a web page via which you can see who has registered but you know what we can make this more powerful recall that we've been playing with http for some time and if this is the url i'm accessing recall that we played around with like reimplementing search functionality well what if i want to support search such that i can just visit q equals and then search for people named say brian and see how many brians are registered could we add support for something like this well maybe let me go back into the ide into application.pi and let me go ahead and say something like this q equals request.args get q to see if anything is actually there and then let me go ahead and do this select star from registrants where let me see q where what's name equals q but i need a placeholder so maybe i should do this and as soon as i do this i need a what f for a format string so i could just create on the fly a sql command that plugs in the value of q between those curly braces to express the logic of select all of the registrants whose names equal brian or veronica or whoever's name i typed in let me go back to the browser here let me go over and do something like this now uh question mark q equals brian cross my fingers as before damn it okay and what did i do wrong here what did i do wrong here this is subtle and we're seeing it for the first time it thinks there's a column called brian but why would it think that well what i've effectively done is sent in this brian is not a keyword in sql and because it's an actual string that i'm comparing against what i really need to be doing is this otherwise sqlite is going to think it's like the name of a column or something i precreated so we have to fix this but that's okay i can put the quotes there but i should probably put the queue there in quotes let's save this go back to the browser reload and there we go now we have functionality for brian and so with this basic building block what have we done well in sql we have several commands at our disposal creating a table which frankly gets tedious by typing it out i myself tend to use and recommend php ligament just to create your table and get it going but then you can certainly manually with sql light 3 or php light admin insert or update or delete or select information once it's actually in the database and that's pretty powerful but once you do that you can now use that same new syntax that new language sql passing it in as an input with a string to our execute function and now start pulling any data you want from your database last week with csv files if you wanted to do this you'd have to open the csv file use a for loop to iterate over it look over every column in row for your data then pass it in and that's fine that's correct that's not bad but it's tedious and you're reinventing the wheel again and again and there's no filtration built in as there is to sql itself so you now have a more sophisticated tool in your toolkit so to speak with which to solve that same kind of problem any questions then on this technique all right well let's look at a bigger database and see how where we can go with this so if you go on the course's website you'll see a larger database that's actually available in multiple formats sql lite which we'll see in a moment but also google spreadsheets because frankly it's a lot more pleasant to like look at your rows and columns in a gui than it is necessarily with uh the file itself so this happens to be a free and open source sample database like some guy years ago took his actual itunes database all the music he'd ever bought he wrote a program to like analyze apple's file format in itunes and extract all of the data that seemed to be stored about him i think was the story and just made it publicly available as a sample database for students and teachers to just use to manipulate data but what's interesting is that this database demonstrates some other principles that we really haven't touched on for instance if i were to store again and again all of these students who are registering for frosh ims what do you start to see in certain fields well i was a little lazy and i didn't bother typing in everyone's dorm but suppose that hundreds of students have registered for frosh iambs a lot of them are going to be from matthews some from pennybacker some from canada some from weld and bunches of other buildings on campus it starts to get a little ridiculous when you see matthews matthews matthews matthews matthews like a hundred or more times if there's like 1 600 freshmen there's a lot of kids in matthews that's a lot of bites to store matt uh hew i don't know it's not doesn't matter how it's spelled that's a lot of bytes to actually store in your database again and again and again feels like there should be an opportunity to factor out the commonalities and what humans do with databases is once they recognize that a recurring pattern of data same darn strings again and again and again you know what rather than use m a now it matters m a t t h e w s which is eight bytes or p e n n y p a c k e r which is 11 then we have a lot of bytes being used again and again and again to store all of these storms you know what what's better than 11 bytes or 8 bytes let's just use an int or let's even use a small ant 2 bytes or four bytes to represent dorms so instead of storing matthews let's just store the number ten and instead of penny packer let's just store the number eleven thereby using some bytes but fewer and therefore saving bytes in the long run and so what this database demonstrates is exactly that principle certainly when it comes to music where artists have multiple albums and artists have multiple songs it's probably a little silly in a musical database to store the name of the album again and again and again and again for all 10 or 12 or 20 tracks or songs on that particular album so what this person did was this notice here we have a whole bunch of sheets or in database speak these would be tables and notice that these tables have columns and notice that these columns are album id in the album table album id and title but notice what he did very cleverly with this field artist id artists or singers have lots of songs to their name eventually and so he's assigned each of them a unique value or apple did and itunes underneath the hood so how do i know what this artist's name is how would you figure this out i mean it's not that interesting to us humans to know ooh artist id number two this is j what's that yeah we need another table with artists which is right over here so let me go ahead and look there so if i want to see let's see let there be rock artist number one let's go to the artist table and turns out ac dc the band is who created that now we've added a step here which maybe is costing us a little bit of time but it's going to save a space in the long run if i'm not storing long artists names although acdc isn't terribly long again and again and again now which is better well it's a tradeoff are you more comfortable wasting space and storing everything together or do you prefer to save space and just spend a little more time joining the data back together but it's going to be really annoying if now if i want to make a website that shows me the names of the songs that i have in a database and the artists for them let alone the albums and more of that the titles of the tracks and so forth feels like that's three queries right like select the album select the artist select uh the the titles but no with sql you can collapse that all together because notice in this table here artist there's a column called artist id that's numbers and notice if you kind of picture this it's like the fingertips here let's propose metaphorically represent the artist id if i go into album now notice that we have album id and title but we also have artist id and so if you imagine these two tables sharing this common this common column what if we kind of stitch them together like this lining up one on the left the other on the right thereby reconstructing all of the information and duplicating it as needed so that i get back just the album and the title and the artist well how can i express that well let me go ahead into cs50 ide where i have a copy of this file let me close all of my tabs from earlier and go into this file called lecture.db and in lecture.db in php light admin will see all of those same tables and i literally just imported it into sql lite you'll see all the same tables we can browse album just as before and we just see a different format for the same data it's the same data from the google spreadsheet which is just more userfriendly and let me go ahead and do this i could of course select star from album where uh artist id equals one to get back all of acdc's albums and indeed here i have two they have for those about to rock uh we salute you and let there be rock they have two but notice the rows i got back contain only what information album id title and artist id i just know as a human that oh these are ac dc's albums but what if i want to know well okay i see that artist id is one so all right well let me open like another tab here and now let me select star from artist where artist id equals uh one and so if i want to learn something about that artist let me go ahead and zoom out click go and okay now i get ac dc well this is great now i have two results two sets of rows this is stupid like now i'm just creating work for myself by having two return values i could call db execute twice but there's a better way it turns out sql allows you to join tables just using sql itself so i'm going to go ahead and do this i'm going to go ahead and select star from album but also from artist uh where album dot artist id let me scroll to the right equals artist dot artist id so notice i'm saying select everything from two tables but only do so where the album tables artist id column has the same value as the artist tables artist id column that's kind of the stitching metaphorically of my fingers together looking for that common column if i go ahead and click go wow look at what i've just constructed it's a lot of information but i have album id and title i have artist id still but i have the name of that artist all together so if you now uh let your mind wander back to the php the python code oh i could now get a whole bunch of rows containing everything i care about all at once i don't need two select queries i can join these tables in this way and i use join very deliberately it turns out that there's another way to express the same thing instead of using that comma syntax i did you might see as well this select star from artist join album on artist uh dot uh artist id equals let me scroll over album dot artist id this is gonna have the exact same effect but you might just find that it reads a little more intuitively to you select everything from the result of joining these two tables how do you want to join them well join them on this equaling that just another way of expressing the same id and if i click go i get back the same information so ultimately with joins do we have the ability to reassemble data so on the one hand it's just good practice to normalize your database identify columns that have lots and lots and lots of redundancy and only store that information once for instance cs50 finance if you're supporting many different users every time malin or brian or veronica buys a stock feels like it'd be a little silly to store malen or brian or veronica along with netflix the symbol and the number of shares one of us bought because male and male and male and mainland can appear all throughout the database and what if i change my username or my name or someone gets married and therefore it changes like why do you create that messiness for yourself instead give brian and veronica and me and everyone else a unique id and when they buy something just store their user id or customer id or however you want to think about it just like with album id and artist id and so normalizing a database is all about finding those commonalities and moving the data into its own table and if you care about rejoining it just use sql to reconstruct that view of the data so to speak so what else can we do here as well it turns out that there is in sql not just primary keys but there's unique constraints in some databases where you can specify this isn't my primary key but i want it to be unique you can specify that something should be indexed so it turns out that if you just know there's a field in your database that you want to be able to search on very efficiently you can index it in advance and you'll see or be able to do this if you like for final projects or even for the next problem set if you'd like but what this enables are queries like this if i want to go ahead and search for for instance um let's say what would be a good example rock i'm interested in rock so if i want to go into my sql tab here i could say something like this select star from album where name not equals but where name is like and then i'm going to say rock but if i want any number of characters to come before that word i can use a percent sign and if any number of characters after i can use a percent sign these are like wild cards in most languages you would use star in sql you use percent signs but it means the same thing and if i go ahead and say go now i get back oh i got wrong lecture album oh title i think is what i wanted let me try that again sorry where title like rock let me go ahead and click go and voila here are all of the albums in the database that have the word rock in them now as an aside this table has a lot of more albums in it and it frankly it's small enough though it has hundreds of rows maybe a few thousand rows none of us humans are really going to notice how slow linear search is but if you start having thousands of rows tens of thousands of rows millions of rows not having an index means that searching for something like rock is going to start at the top and search every darn field all the way to the bottom big o of n if you instead tell the database i know i'm going to be searching on this column a lot please index it for me here comes the secret sauce sql light oracle microsoft access and so forth they will using their own intellectual property build up some fancy data structures trees or hash tables or whatever in memory store the data for you in uh trans uh uh invisibly in that format so that when you do ask for a question like show me all the albums like rock they can answer you in a much faster time than linear and that too is what you get with sql that you don't get with csvs csvs are by nature only linear so we can do better but you the programmer have to help the database and actually give it those hints not just the types but also hints like this and as an aside there's also the notion of foreign keys where if you really want to lock things down you can specify that if you ever see an album id in another table it if it's a primary key in the album table by definition any other table it's going to be called a foreign key because it doesn't really belong there but it's referencing a column elsewhere so there's a lot more technology and vocabulary and you're welcome to dive in deeper and odds are many of you will for final projects by nature of wanting certain features among them even the ones we've seen like auto incrementing and not null as an si2 sql even has functions and for data scientists and statisticians it's super useful to be able to just do math and summaries of data right within sql without ever writing python code or r or anything else built into sql light and other and other databases or functions like this for average counting things getting the min max sum and so forth all of that you get for free with a lot of databases all it takes in the context of python is a line like this but but but but there are some problems and let's end by taking a look at two fundamental problems and threats that are too often underappreciated and in fact we have to fix a very serious vulnerability that i introduced into my very own code earlier but first the socalled race condition in survey uh you or rather let's see suppose that we think back at the very start of the semester most of you signed up for a github account for the very first time and you went to github.com signup for those unfamiliar github is a website where you can save and store a programming code that you've written and want to collaborate with others on and you chose a username and let me go ahead and try choosing a username like say j harvard for john harvard notice that the website immediately said the username is taken all right that's useful and you can probably guess how this is done maybe a little javascript using ajax talking to the server getting the response changing the html or the css or whatever might take some time to wire all that together but that's probably what's going on so let me try like a really long random username that is not taken hey it's available but probably it's not a good thing that i'm streaming this on the internet because if i wait long enough i bet someone could for playful reasons just sign up for this let alone anyone in this room but you've just told me it's available okay so good i'm really excited i've got my username let me go ahead and type in my email address mainlandharbor.edu my password one two three four five take a few moments there verify my account and so forth and i click submit suppose that i'm told momentarily sorry that username has been taken could that happen yeah i mean if any of you were trying to mess with me like right now you would have signed up for that username and beaten me to the punch so that when i hit join i get an error that's the definition of a race condition where two people or two users or two computers or two threads if we really roll back to our discussion of threads in scratch are trying to do the same thing at roughly the same time and if those two things threads or humans check the state of a variable which is a fancy way of saying is the username available they both get back answers but then some number of split seconds later then they make a decision based on that information there is a window of time either split seconds or even seconds or minutes where the state of that variable could of course change so if you too literally right now on your laptop type that very long username all of us would probably be told like green light it's available but only one of us is actually going to get it and that's because of a race condition literally all of us might be racing to sign up for that value and it's when state can change in between things happening this is a bad thing because it makes your data vulnerable to changes by someone you don't necessarily intend or if the database isn't smart you might be able to do especially bad things atms are a canonical example of this if you had a malicious adversary trying to log into like two bank accounts at once or two physical machines at once either with two cards or with two counts and two laptops you could imagine both of them trying to deduct like a hundred dollars from the same account instantly because imagine a poorly implemented bank website it checks the accounts account balance of the user logged in do you have a hundred dollars if the answer is yes maybe both websites are going to say yes you may deduct a hundred dollars you hit enter and voila you deduct 100 the user gets it somehow because it's transferred to some other account but the bank thinks it only did that once deducts a hundred but you've just walked away with 200 because you got i made a decision based on the same answer in two different threads or two different programs or two different computers so long story short this can happen even in the real world an example i was taught by my advisor years ago was this uh suppose um you and your roommates have a little dorm fridge and you're in the habit of course of of drinking a lot of of milk and so uh the the fridge has run out of milk and you come home the first roommate after classes and you're like oh i really need a drink of milk and so you check the fridge there's nothing there so you close the fridge and you walk into the square go to cvs and get in line and to buy some milk meanwhile your other your roommate comes home also they really need a drink of milk and so they check the state of the variable ah no milk close the fridge and then walk to like tommy's convenience or some other place nearby and get in line for some milk you of course then both get home eventually and what happens now damn it now you have twice as much milk and you know one milk goes bad quickly so now this is a problem a very bad problem you have twice as much milk as you could possibly drink but what's the origin of that problem fundamentally because you're out of something you're out of something but you need it but why did i end up with two there's no flag right there's no indication there's no sharing of state you both inspected the value of the variable made a decision independently on it but the state of that variable changed on one of you because when one of you came home the later person damn like the milk has already been refilled so how do you solve this in the real world how could you avoid this problem you could just one never do errands for your roommate it says get this mag yes a shopping list right gone for milk arrested development always leave a note right you could you could convey that information you could more uh dramatically lock the refrigerator right padlock the thing and so your roommate can't inspect the state of the refrigerator while you are gone therefore not making us vulnerable to this and i use the word lock deliberately because in databases that's how they solve this there is a feature in databases called locks or fancier versions of this are called transactions whereby you can guarantee something called atomicity where atomicity means you can do multiple things back to back to back without getting interrupted so in the case of a bank it is possible with sql using slightly fancier syntax that we won't dive into today to solve this problem by saying you know what begin the following transaction check the state of the bank account deduct this amount of money and now commit the results and while i'm doing that lock everyone else out don't let any other customer or any other user do exactly that information that touches the same data until i am done long story short you pay a price perhaps you're literally preventing your roommate from accessing the fridge and that's annoying or you're preventing other customers from doing transactions so hopefully the computer is fast at this and you're fasted shopping but you've at least ensured that you have atomicity no operation can get inserted into your sequence of operations as by your roommate or some other computer or threat so that's a problem with databases that we're only going to skirt over and github might solve this how well by just not caring potentially i don't know what's going to happen if multiple of us try i'm guessing they will just give n minus one of us an error message saying sorry that username is no longer available think about this if you've ever bought airline tickets this is a solved problem in that industry it would be really annoying if you just spent like an hour of stressful price hunting for a good airplane ticket you start checking out after adding it to your shopping cart and five minutes later after your name and email address and credit card number the ticket's gone so what do airlines do they often give you like a five minute window and some of the fancier websites show you the clock saying we guarantee this for the next five minutes hotels might do this too where they lock the refrigerator for you by somehow altering the database to say no one else can buy this ticket or this room for the next five minutes much like the note or the padlock so those kinds of things are all around us but let's look one final example that's the worst uh threat of all is this previously i allowed myself to search by name so q equals brian or q equals david or veronica or the like and what did i do with that information well if we go back into the ide and actually look at that file in application.pi i simply formatted it using an f string inside of this sql string but what if my users were a little bit malicious and suppose that someone doesn't want to just search for brian but you know what suppose they do something like my query is delete from registrants where sorry brian name equals brian something like this now this is not valid at the moment because this string while i'm certainly allowed to type it in is going to get plugged into my code but in the wrong place logically like i'm going to look for someone's name called delete from registrants where name equals which is just nonsensical it will return zero results but what if i do something like this where i say brian or delete from registrants where i kind of finish the thought that the programmer had and then start my own new thought or another way of doing this is to use special syntax semicolon something like this long story short i could contrive a human malicious input that finishes the programmer's thought and returned zero rows but by the way also sneaks one additional rogue query into the database this is what's known as a sql injection attack and if you naively and very very very and badly and incorrectly write code like i did don't ever do this you will be vulnerable to exactly this attack because you are blindly plugging in the user's input to a string that you are then passing to a database this is a fundamental flaw in lots of applications lots of languages where you have to distrust your users it doesn't matter if it's for just students on campus or it's just for you and your friends never ever ever trust users input because either someone's going to mistype something and something's going to go awry or you're going to have like a bad apple trying to hack into your website or your application by trying these kinds of commands and you have to always write code defensively so how to do this there's a bunch of ways but it turns out that what's dangerous about something like i just typed in is that it's the semicolon for instance and it's the quote marks over uh elsewhere so the safest thing to do is no matter what the user types in escape things you can use special syntax we saw this in c generally putting a backslash in front of something means don't have let it have its default behavior instead treat it specially so you could use special code in python that just says remove any bad characters or replace things frankly you've probably been to a website where you've been told sorry you can't use that character in your password or sorry you can't use that in your username that's just dumb like that is the lazy approach to this there is no reason to prevent users from typing any characters into their keyboard for their password maybe even their username that's kind of a lazy way of defending against this by saying i don't trust any percent signs any semicolons any dashes any apostrophes rather just escape things but it's silly for all of us in this room to write our own code for scaping user's input or scrubbing it as it's called or sanitizing it as it's called same things why don't we just use a library now there's many libraries out there the one that we're using at the moment is cs50s and the execute function does this for us instead of using f strings which you should not use like this you should instead do this if you want to plug in a placeholder value to a sql query you literally use a standard convention that we have adopted too where you just put in a variable's name but with a colon in front of it and it can be anything it can be q it can be x it doesn't matter but you want to just plug in some value there so i'm going to call it name by convention then you close your quote and finish your thought and then you go ahead and pass in the actual value name equals q and now you have constructed dynamically a sql string with a placeholder that is not python's own curly brace placeholder this is a special sql convention where you say plugin value here what value will plug in this names value cue whatever the human is typed in and what our execute function will do for you is all of the fancy backslashing and all of the escaping and will protect you from the user's data and this is how truly simple it is it doesn't have to be cs50s library this is ever so common in all languages but too few people know about it and use it and so half the time you read about some database getting hacked or your data getting stolen it is because of a stupid oversight like that so just use libraries and escape users input we can see this now more concretely all the undergrads in the room have surely logged in to either yale's website or harvard's website which looks a little something like this here you're prompted for your login name and your password or your harvard key or the like well how does this take effect in real terms if i were to type in my email address but then weird syntax like this let's look at an example quote or quote unquote 1 equals quote 1. notice it's not balanced like it's kind of missing a quote over here missing a quote over here because the presumption is that maybe harvard is vulnerable to this i don't think they are but suppose that the code running harvard key and harvard's login page looks a little something like this this is bad this is dangerous because they're just using f strings or format strings which are just going to blindly plug anything in there but if you instead uh use and so if you let the human type in something cryptic like that notice what has happened logically where username equals me at example.emailprovider.com and password equals quote unquote so nothing or one equals one and y one equals one well notice if i go back notice that there's a quote here and a quote here and the reason that i didn't finish my second quote here or my second quote here is because i'm assuming as a bad guy like i think harvard is just going to blindly plug my input into a single quotes of their own therefore i can finish their thought nonsensically but notice logically what happens select all users from the database where the username is me at exampleemailprovider.com and the password is nothing or one equals one well when does one equal one like always so this will always return users from the database and presumably therefore let me log in as one of those users so incredibly simple to defend against this just use placeholder syntax and distrust and sanitize user's input the syntax and sql in the cs50 library is quite simply with that colon but in other libraries it might be quite the same so now you are all uh families and students alike inaugurated into the small class of folks in the world who understand particularly geeky humor you might notice this meme that's gone around the internet for many years now where someone either maliciously or humorously decided to paint this over their license plate let's enhance why would someone do this scanners yeah like toll booths are kind of going away at least in the us and they instead have like cameras or readers that are scanning the front of your car and trying to optically do ocr optical character recognition on your license plate and the presumption here is maybe in some municipality there's some badly written code where they just blindly plug your license plate into their code and hopefully you finish the thought where zu066 whatever that is as part of the license plate but semicolon drop database table dot dot dot and we don't even look at that because drop is pretty extreme it literally deletes a database itself but this is a nice way of of getting off the hook from a toll price and most canonical perhaps xkcd is a very popular cartoon strip it's particularly geek oriented and you'll perhaps understand this joke now as well among cs circles i can hear the laughter making its way through so for here on out if you take nothing else away remember little bobby tables with pset or final will you actually implement cs50 finance and coalesce all these ideas thank you so much to all of our families for joining and we will see you next time