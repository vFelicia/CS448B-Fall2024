all right good morning it's a pretty good turnout um thank you so much for coming uh my eyes are a little red and blurry this morning um not because i've been up all night drinking fine wine and sonoma because i woke up with a slight eye irritation so i gotta have my slides here my notes here so i could see them and if at any point i'm no longer facing the audience during my talk if you could be so kind that's just to give me like a polite shout out and uh let me know where you're at um just kidding it's not that bad anyway i'm austin collins i guess i'm an instigator of this serverless movement uh i in 2015 i created a very popular open source project called the serverless framework and this is an application framework that allows you to build apps exclusively on serverless infrastructure like aws lambda and i think that this framework in particular had a lot to do in showing the world kind of how powerful this technology and this trend can be i'm also the founder and ceo of a startup called serverless inc we're based in san francisco we make tools and services to help developers and teams build and operate serverless applications regardless of platform and our company's also helping out with the standardization efforts happening within the cncf around serverless concepts which i'll dig into later in this talk anyway this is serverless state of the union special open source edition special exclusive in this talk we're going to analyze what's happening uh in the serverless world we're going to try and forecast you know what's going to happen next and we're going to discuss leveraging open source to smartly adopt serverless today so let's get started boom emits containers orchestrators vms paths out of left field out of nowhere basically came this this serverless trend i don't think anyone was really expecting it and it picked up momentum rapidly it has won hearts and minds of developers and it's not slowing down uh we we clearly have a trend here on our hands and now what's the big deal why why is why is this trend catching on um why is this important uh so first off to clarify if you aren't already aware serverless means that those servers exist developers don't have to think about them it's not a very technically accurate term it's about as technically accurate as the term the cloud i'd say but once you say once you say that word to a developer and you see that enthusiasm that it invokes that emotional response uh you know there's there's no um there's no reason why it's easy to recognize why this buzzword caught on why it is the buzzword because it invokes all the right emotions and it's all about you know using tools using infrastructure that get out of your way so you could focus on solving business problems and this simple idea has been around for a long time and obviously has has mass appeal um and this simple idea you know a reason why we we get uh why this has become such a big trend is that because first off this does a great job of solving ancient problems um in our serverless framework uh we have significant enterprise adoption and when these users uh come to us we always ask them you know why are you here what's so interesting about this uh to you and they always tell us the same you know that they're looking to solve the same problems that is number one they want to move fast they want to reduce time to market number two they want to increase innovation they're saying heck our competitors are moving very fast our competitors are doing all these cool things we want to do the same and they also want to reduce operational overhead of course and reduce cost and despite how far we've come without so much great uh change and innovation in i.t uh we still have not solved these ancient problems yet and the serverless movement is kind of a testament to that and it's why servless has has picked up so much momentum at the same time serverless solves new problems uh problems that are just starting to come into fruition and i don't know how to characterize these um more concisely than to say you know the the digital world is storming into reality right now uh we've got internet of things devices uh everywhere uh with sensors collecting all types of data generating big data we've got machine learning artificial intelligence uh infused into all this uh building systems of intelligence systems that can make decisions in real time creating autonomous machines selfdriving cars we've got computing running in the edge all over the place voice devices technology is is everywhere and if you're a business you have to pay attention to all this because your competitors are and amidst these ancient problems and all these new problems you know one of course has to ask themselves a very important question and that is do you really want to be running your own infrastructure uh is that kind of a good position for you right now is that kind of the going to be on the right side of history that choice and that's you know i think you could see where the people in the serverless movement stand but they're you know they're very nervous about burdening themselves with this especially in this era of upcoming hyper innovation and hyper competition so serverless a brief history i'm not going to go into paths i'm just going to start with the serverless trend uh starting back in 2014. um this kind of got kicked off with amazon web services when they came out with a new way to do compute in the cloud called aws lambda and in the early days you know they were kind of marketing this as glue code as event driven code and it was very limited the use cases were very limited but at the core there was a revolutionary way to do compute and it was revolutionary because all you had to do as a developer was upload some code and you'd write this code in the form of a function enough code to perform one task like save a user to a database or send out a transactional email you'd upload that code to aws lambda's platform and that would create an aws lambda function this independent unit of deployment and this function would require very little to zero administration the provider handles everything and it scales automatically to meet massive levels of concurrency and also aws lambda had this payperexecution payperuse pricing model that was incredibly efficient and this cannot be understated when people come join the serverless movement it's this pricing model that really brings them through the door and then they kind of stay for once they look at all these qualities together they realize that there is a lowest total cost of ownership scenario here that is absolutely compelling but this pricing model is super important you're not going to get charged unless your code runs and when you do get charged you get charged at 100 millisecond increments very exciting and lastly this code is event driven these functions will spin up to handle any type of events a lot of events mostly coming from the underlying platform so when something happens in your aws s3 bucket it'll automatically trigger a function or when a record gets saved to a dynamodb table it'll trigger a function or an http web request in the serverless world even these http requests are being considered as as events so back in back in uh 2015 you know aws lambda the use cases were very limited the you know it was i don't think it had great packaging i don't think it had a great uh developer experience and it certainly was not being considered as an application platform and this is where kind of our company stepped in you know we came out to try and define the application experience around aws lambda because at the core we saw that revolutionary compute service and we basically wanted to use it for everything right and we needed some tooling to enable that uh so we started working on this serverless framework mid2015 um and it solves a lot of problems that need to be solved if you want to build serverless architectures uh most importantly when you build a serverless architecture it's pretty complicated first off you have all these independent units of deployment all these functions and there are a lot of these this is very much like a traditional kind of microservice architecture however the difference in the serverless world is that uh the overhead burden is not there uh with these serverless functions because the provider is managing scale managing you know all aspects of administration and what happens and what we see regularly is that people who are doing serverless development could be one or two engineers and they they're provisioning hundreds of these functions um it's pretty awesome and it's all because that overhead burden is not there uh so you have a whole bunch of functions whole bunch of independent units of deployment and all these functions have infrastructure dependencies they need infrastructure to trigger the functions via events and they also need infrastructure to perform their business logic whether it's a database caching mechanism or storage anyway so we looked at all this in the early days we said you know this there's there's a there's an application story here that's that's pretty compelling and how can we express this in a simpler format so that people don't have to think about things um in this very complicated way so the one thing that i think the surplus framework did very well is they said look this is serverless is simply a story of functions and events and that's what we presented to developers we gave them a simple configuration file you could list all your functions containing your business logic and every single function in that configuration file could have an events property and that you could list there all the events that would trigger that function all the events that happen in your digital business and this this whole experience was very very compelling to users all they'd have to do is type serverlessdeploy and the serverless framework will go provision all the infrastructure necessary and wire it up so that it works together in this event driven model and the user and the developers won't have to think about that as much so again i think this open source project had a lot to do and kind of show in the world the serverless architecture introducing the serverless application to the world and up next in 2016 given the massive success of aws lambda a lot of the other public cloud providers took note and they started to offer very similar services google came out with google cloud functions azure came out with azure functions ibm came out with ibm cloud functions uh and overall uh these serverless functions also known as functions as a service they're a great way to use these cloud platforms they're a great way to adopt cloud platforms if you want to use a cloud platform and gain access to all the cool services that that cloud platform offers stick a function there it's auto scaling you know it's paper execution it's a very very trivial way to start leveraging leveraging that cloud platform and this is this is exciting because i think that this is going to enable more venture vendor choice and multiprovider capability in the future in 2016 uh we also saw more open source heroes enter the scene and they started coming out with uh open source versions of serverless compute platforms essentially and these projects seek to give organizations the ability to make their own serverless computing platforms you know largely based on containers and kubernetes we've got great projects in this space like cubeless oracle's fn project there's open faz and ibm's openwhisk and a lot more these things are popping up a lot right now there'll probably be two more by tomorrow now in this scenario you're still managing your own infrastructure right you kind of bring one of these into your organization you have a few people operating the serverless platform and it's their job to expose it to developers so developers can focus on solving business problems with the least amount of friction so is it serverless uh i don't know um but but what it does borrow heavily from the cloud experience is that application experience is emulated in these platforms that simple story of functions and events these things can be perceived as past 2.0 and one of the biggest changes is simply this model of doing things it's a simple story of functions and events and now you can kind of selfhost this anywhere you want and that's that's pretty exciting uh in 2017 um we started to see uh the you know the serverless term continue to grow and all of a sudden a lot of cloud infrastructure beyond computing was being called serverless amazon kind of took a lead on this they started referring to kind of their their traditional sas products as serverless so aws s3 which has been around for a very long time they started to call that serverless sns they're starting to call that serverless a lot of their new services like uh their aurora database is now being referred to as serverless and a lot of these independent sas providers are kind of using the term serverless to refer to their um to their products like algolia i've seen them do this auth0 and that's pretty interesting i think it has some implications for the serverless application in general and the service application now is kind of being perceived as using serverless compute and pairing it with infrastructure that has these serverless qualities auto scaling you know paper use and combining these things together to make end results or applications that have extremely low total costs of ownership their paper execution their auto scaling they're almost like set it and forget it and these applications are very efficient and and very powerful so that's what has happened uh here's here's kind of what's happening now and um and some things to pay attention to uh there's there's clearly a collision happening between serverless computing functions as a service uh and containers i think it's getting a bit awkward actually um traditionally containers offered great isolation you know packaging portability but not low latency provisioning or an efficient pricing model for running them in the cloud meanwhile aws lambda offered low latency provisioning runtimes ready to go sub second billing and this simple kind of functional model in the serverless world people have been using both these things for different use cases containers have been great for asynchronous longrunning tasks and functions are great for short tasks where you don't have to think where you don't want to have to kind of think about containers only the business logic and um how and if you want to benefit from that efficient pricing model but now containers as a service are looking more like serverless container platforms azure container service has a per second building model you know no virtual machine management aws has fargate you know it's a managed container platform also with the per second building model both these are going to continue uh to probably collide and exist and evolve and this is still the beginning of this story but it's certainly something to watch furthermore software as a service is continues to expand and this is important because sas's value on top of serverless computing cannot be understated in the early days of the serverless framework we noticed amazing innovation and creativity coming from the users and first off it's because you know when you reduce operational overhead you liberate a lot of productivity and you also liberate creativity um but a lot of this also came from simply pairing kind of serverless compute from pairing aws lambda with other kind of sas other serverless infrastructure and we kind of realized that you know lambda is only half the value you've got to have other great serverlesslike infrastructure to pair it with to build these these end results these applications it's a very exciting time because you know a lot more sas is coming the cloud providers are aggressively innovating new products with sas models and so are startups so you know amazon of course has s3 dynamodb lambda they have the new aurora they've got comprehend their natural language processing service they've got transcribed for speech recognition meanwhile google has a ton of cool cloud ai products like cloud speech translation their vision api video intelligence apis that whole cloud ai category i think is just going to explode um will continue to explode and you know overall this is this is exciting um this is like the golden age of software development i mean never has there been this like greater time to be able to use all these kind of these pieces of infrastructure to make things faster to make things at scale to get your vision out there and make some type of meaning in the world so overall this is you know a lot of stuff is going on but it's all pretty exciting another big trend to look out for is serverless functions are kind of running everywhere now they can clearly run in multiple cloud providers uh now that every cloud provider has a serverless experience they're running on premise uh thanks to these uh open source serverless platforms uh and they could also run in the edge cloudflare's got a great cloudflare worker project lambda has lambda at edge and we're quickly entering this world where these these functions can live all over the place and that's great because events data is all over the place um so what with all this stuff going on there's a lot of change a lot of innovation a ton of options now and projects how do we adopt this today and here's kind of the most important lessons that that we've learned over at serverless inc uh first off you know we we talked to you know these uh enterprise organizations regularly and uh they're in a tough bind a lot of them are kind of caught in this this adoption challenge you know they want to avoid lockin they will also want total control and oversight but at the same time they want to move fast they want to innovate and many are choosing to kind of diy their own serverless platforms so you know we've seen several companies working on their own service platforms for a number of years now to avoid vendor lock and give them the control and oversight they need on the other hand we've seen the cloud providers unrelentingly add innovative services serverless offerings to their whole platform and we've seen a lot of companies embracing those and being very successful at delivering innovation at record pace so how does one how does an organization kind of kind of navigate this and this is where open source especially can save the day um so so what we've learned of course and a big serverless principle is that first off it's all relative to the use case einstein actually said this the second half just got cut off um but uh you know this is you know something that's very popular in the serverless community uh and it's just central to the serverless culture and that is focus on the use case focus on the outcome first not infrastructure and platforms figure out what is most important to best serve that use case you know do you need to move fast you need to be be innovative you need to capture the market or do you want to kind of avoid lockin and maybe some public clouds in general and if you do that if you run your own platform kind of at what is the opportunity cost of doing that the great thing about serverless is that lower overhead appeals to all types of use cases um it's often used for kind of critical data processing pipelines backend services but also equally used for marketing projects internal tools random event driven automation business process automation you know do you really need to roll out your own platform to do kind of all this stuff you know maybe not if the one platform approach is going to block you from being able to solve a problem best you know that's that's not super that's not good so you could deal with serverless a lot of different ways now and the best way will be revealed always by focusing on the outcome so focus on that first and you know what i'd strongly recommend is that before adopting any serverless platform and again there's so many great options out there whether it's aws or one of these cool open source servles platforms i would absolutely prioritize investing in tools that offer vendor and platform choice um and organize your strategy all around that there are a handful of great tools that do this you know like our serverless framework or terraforms another fantastic one but these things are going to give you options and that's of critical importance right now and they're also going to give you a single experience for using for using these options and again this is where open source especially has to play a big role you know open source communities have to come up with more tools like this because you know these big platforms have big biases you know towards their platforms and if that future is running serverless functions everywhere we need the tooling to help make that easy so again first focus on your outcome and then adopt the tools that will flexibly allow you to deliver on those outcomes best the future is uncertain change is constant you know tools that give you options a diversified approach should absolutely be prioritized and further you know serverless is all about moving up the stack to the application level and we think serverless is going to evolve these developer tools and infrastructure in general and infrastructure provisioning tools to focus more on the application level and this is something that this is a theme that we think about a lot at serverless inc we're always trying to figure out how to how to express this team you know we think software tooling should be designed more around outcomes and apps and not infrastructure and this is also what serverless is strongly about we kind of started this with the serverless framework and we also have a new project which we're opening up uh in a beta in a few weeks it's called serverless components it's simply open source reusable vendor agnostic serverless building blocks it's a packaging system for application features or entire applications you know built using serverless infrastructure across all vendors you can compose these building blocks together to rapidly build apps and these components are very outcome focused whether it's you know your data processing pipeline a user's credit api an sms subscription service subscription payment service or an entire serverless forum or an entire serverless ecommerce application you should be able to compose this stuff together to build end results with that serverless efficiency we're opening this up as a standalone public beta we're going to incorporate it into our framework if it's interesting to you you could go to serverless.com and you know sign up for the newsletter but again focus on your outcomes and then adopt the flexible tools that will allow you to best deliver on those outcomes and after that lean on community driven standards uh these the standards uh the harmonization conversations are just getting started in the serverless space uh and it's exciting because it could solve a lot of problems uh for example making functions more portable so they can move around to wherever they need to go or event data more consistent the cncf is kind of where these conversations are taking place there's a serverless working group within the cncf and we're meeting every thursday 9 a.m pacific time to talk about this stuff the serverless working group recently authored a great white paper talking about serverless in general and now they're focused on harmonizing these serverless concepts to give users vendor choice and flexibility uh first effort of the service working group or the next effort is uh you know that we found that an uncontroversial starting point when it comes to harmonization uh was around events and we've we're working on this uh this concept called cloud events it's a specification for um for describing event data in a common way again serverless is a story of function and events this is half that story and event data is being transported across environments uh increasingly and unfortunately all the platforms that are publishing events they're kind of ubiquitous events are everywhere but they're all publishing them in different formats which limits the ability to transform event data wherever you want it to go so we think this this might actually have a huge rising tide effect it could be bigger than serverless events are kind of bigger than serverless at the end of the day uh it might affect all of it but we're kicking this off in the service working group because it's part of the service story it's an essential part there are a ton of major industry stakeholders involved now and it's super exciting so if you're if you're curious about this i strongly recommend you jump in to wrap up you know whether you're adopting serverless or you're looking for a role open source has to play in the serverless space uh you know first off focus on outcomes not infrastructure that is an important serverless principle adopt tools to flexibly support those outcomes not tools that kind of support a specific platform and embrace standards when they mature or help us build them right now if any of this sounds interesting to you here's my contact info you can learn more about the service framework at servles.com and if cloud events is of interest to you or the serverless working group in general go to github.com cloudevents there's a ton of information as how you could join the effort and start contributing anyway thank you all for your time and next up we've got dan khan the executive director of the cloud native computing foundation uh who's gonna show you something special that they've been working on anyway thanks again hi there i'm dan kahn i'm the executive director of the cloud native computing foundation i want to really thank austin for that great talk and talking about serverless which is really one of the most exciting spaces in open source right now i also want to thank him for donating three minutes at the end of his talk so i could just show you a cool project that we've been working on at cncf and i also do want to thank him for his leadership with both the serverless working group but then particularly cloud events so a quick show of hands how many people have seen some version of this document before okay more than half so this is the cloud native landscape many people have said that it's incredibly useful and valuable it has also been referred to as the hellscape and uh so we've gotten a little criticism for the tyranny of choice for seeming like it's uh too complicated and so we went back and looked at how we could make this more useful for real enterprises and vendors and and the end users that are and the developers that are make up our cloud native community and we decided to do two different followon projects so the first uh that we're launching is called the cloud native trail map and this is a one page it's actually a portrait but it takes you through the steps of how you might approach cloud native and so containerization and this real focus on continuous integration continuous delivery which is arguably the area that's going to have the very highest value the biggest return then talks about orchestration and then as we go forward you look at some of the other projects so service meshes are incredibly hot right now and you have envoy and linker d and core dns but that's not where you want to get started in this space and we'll actually have handouts for you of this at the at the next break and it's also available online so that was uh the sort of the zoom out version of how can you just approach cloud native and begin thinking about it and begin learning about it but then for the practitioners and the folks that are really eyebrow deep in it we also wanted to have the zoom in version and so that is the new interactive landscape that we're launching here at the conference and you can actually pull out your phone or your laptop and try typing this in right now it's l.c ncf dot io or landscape.cmcf.io and it will show you the 460 different projects and products that we're monitoring and following in this space and so i will go ahead and i'm no kelsey hightower but just try and do a a quick demo for you so you can see that we show kubernetes which um goldberg announced that we graduated yesterday are incubating cncf projects our sandbox projects and then um a lot of other logos this has been a a project um for the last couple months and uh jim and i and a few other uh linux foundation folks were traveling through china three weeks ago uh beijing and hangzhou shanghai shenzhen hong kong in five days and i got the feedback of why do you keep staring at all these logos but uh as i was dealing with data caps this was the the project that we've been working on but the part that's particularly neat about is the ability to actually zoom in and kind of think about it in different ways so for example here's open source projects by first commit and so we're pulling this data from github and if i click in i can see that postgres was actually found started 22 years ago but uh their latest commit was today which is just such an extraordinary accomplishment of an open source project maria db being a fork of mysql are both 18 years old and i can click through and see a lot of other ones and for each of these i can then pull up the the twitter info to see what's been going on most recently the funding info that we're pulling from crunchbase so you can see they've raised 10 and a half million dollars and another view if i come here to open source projects by stars i can see uh here's kubernetes at number one with 33 000 stars but look at that austin's project serverless is here as the fifth entry and we're very happy to have them as a cncf member and i'll point out their three million dollars in funding according to crunchbase so any of the venture capitalists in the audience might want to go up and talk to him so uh i do encourage you to take a look and um if you pop it up later today it's uh fun to click those example filters to uh look at your organization and see the projects that uh come up and then in any project this size there's going to be errors in it so we're really eager to accept pull requests it's something you can do right from the github web interface and we can approve it and get it live almost immediately so this is really designed to be a collaborative editing project and so we do have an updated version of the landscape with even more logos on it we now list our kubernetes certified service providers all of the 50 certified kubernetes platforms and distributions and everything else and we'll keep coming out with a new version of this every month that's going to map to the interactive landscape this is also the serverless version of it that was a project that austin and everyone else from the serverless work group worked on so um please feel free to tweet about this if you have issues or questions or suggestions please reach out to me at my email and thanks again to austin for giving me those five minutes you