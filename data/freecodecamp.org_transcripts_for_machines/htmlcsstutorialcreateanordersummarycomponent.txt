this beginner's course will help you learn html and css by building a real world project madison connor teaches this course she's an experienced frontend engineer she is excellent at breaking down things for beginners and explaining the fundamentals of web development hey everyone i'm madison and today we're going to learn html and css by building an order summary component this course is for complete beginners if you don't know any html or css then this course is for you this course is also for you if you do know some html and css but you want to cement your understanding of them by building something by the end of this course you will have a professionally designed project that you can use in your developer portfolio before i got my dream job working as a software developer which is what i do now i actually taught myself how to code using free code camp so i'm really excited to be here with you today building this let's just dive in and get started the order summary component is a challenge from frontend mentor in case you aren't familiar with frontend mentor we'll talk for a second about what it is if you're already pretty familiar with frontend mentor you can just skip over this section frontend mentor is a place where you can improve your coding skills by building professionally designed projects many of their projects are completely free and today you won't be paying anything as we build this challenge the main reason why i love frontend mentor is that you can build coding projects using professional designs each challenge on the site comes with starter files where you can see desktop and mobile designs of the app you're going to build today we're going to build this order summary component that we see here the first thing you need to do is sign up for a free account on front end mentor and start this challenge again you won't be paying anything in this course if you haven't already go ahead and go to frontendmentor.io and sign up for your free account next let's actually go to our project here's our order summary component before we talk about what an order summary component is i want to talk a little bit about how websites work and how we use html and css to build websites let's talk a little bit more about how websites work right now you're likely using a web browser so maybe you're using firefox or chrome or safari as an aside in this course i'm going to use google chrome and you can use whatever web browser you'd like but i suggest you use google chrome so you can follow along the course as closely as possible okay you're using your web browser and your browser's job is to interpret html and css files into a website that can be displayed for visitors every website that you go on today has html and css today we'll write html and css we'll put that html and css into files and then the browser will interpret this html and css and display our site to us all websites have files these are html css and javascript files as well as other files like images that you see on the web all of these files will determine how your website will look and act another part of websites is the server the server stores all the files on a website you can think of a server as just a computer that's connected to the internet and the server sends web files to the browser these are two core pieces of websites the server and the browser the browser can also be called the client when you build websites you might be called a web developer but there are also these terms called frontend and backend developer let's talk real quickly about what these mean and how they relate to the client and the server backend developers focus on the side of a website that users usually can't see the server side meanwhile frontend developers focus on the visual elements of a website or app that a user interacts with in other words the client side frontend developers work with html css and javascript among other tools to build the frontends of websites these are the fundamentals of how a website works let's talk a bit more about html html is the foundation of all websites html allows your websites to display text images videos like anything you see on websites today frontend developers such as me use html and css to make websites look good we also use other things such as javascript and other tools and frameworks but that's a bit beyond the scope of this course html is the foundation of all websites html allows your website to display text images videos anything you see on websites today html alone might look ugly but that's where css comes in css styles your html in other words css makes your web page look nice frontend developers like me use html and css to make websites look good now that we know some about how websites work and how we use html and css to build websites let's go back and look at our order summary component your next question might be what is an order summary component think about anything you buy on the internet chances are you landed on a page and you bought something and then you saw an order summary maybe you bought a movie on youtube or you bought an online coding course from udemy or maybe you bought a subscription to spotify usually you will see an order summary that tells you either like what you're about to buy or what you bought already so it's just a summary of your order and it might show how much money you're spending and things like that for everything you buy on the internet it's likely there is a web developer using html and css to build and style that order summary page that you were on now this project is not just called an order summary it's actually called an order summary component you might be wondering like what is a component a component can mean different things for example like a component in react can mean something different than a component in a different library or framework however for our purposes here today we call this an order summary component because it's creating a piece of something a component in other words is a building block when a user goes and they see this component they might see this data here that tells them what plan they've bought but this data could change depending on the user what doesn't change is this component that will always render the same view and the same html the data on the other hand will be different so this component could be used several different times if we look at this design this kind of purple color in the background this is the page so maybe it's the web page that you're on after you've purchased something and then this looks like kind of a card and this is our component itself here an order summary component is absolutely something that you might build when you start working as a developer so you can add this project to your portfolio by the end of this course if you want to have an extra challenge i would say pause this video now and try to build the order summary component completely on your own if you get stuck you can just come back to this video and see how i wrote my code if you do this route your code might look different than mine but that doesn't mean there's anything wrong or bad about your code there are some best practices when it comes to coding and there is some code that is cleaner and more efficient than other pieces of code but there's also just different code writing styles so just because your code looks different than mine doesn't necessarily mean one piece of code is better than the other okay so let's look a little bit more at this challenge let's just exit out of here now let's go down to this brief section now here we can see our challenge is to build this order summary card and get it as close to looking like the design as possible this says our user should be able to see interactive states interactive states are for example when you hover your mouse over a button the button might light up or the button might change color we can also see here that we have this amazing slot community if you get stuck at any point in this tutorial you can join this free spot group and get help if you get stuck you can also look at my completed solution or you can look at all of the other solutions for this challenge that have been posted here on frontend mentor okay let's scroll back up and we'll hit visit challenge hub now mine says i've already started the challenge if you haven't started the challenge yet then you might see a slightly different screen but this view should look pretty similar for you here okay so next we want to hit download starter files next we see this step 2 which says download design files we are using a free membership so we don't have access to the design file but let me explain what this is if you don't know when you start working as a developer you will often be given designs from your designer at your company and these will essentially be pictures of how the application you are building is supposed to look figma and sketch are really commonly used tools that you can use to see the designs of the application that your designer gave you as a quick example we can go to the sigma ui design tutorial on free code camp next we can scroll down and we can see what the figma app looks like okay so say you're working as a software developer and the designer at your company they gave you this design and they said this is what this part of the app looks like you as the developer would go open up your figma app and you can click on things such as this new arrival text and when you click on it you'll be able to see the exact font color used you'll also be able to see other things that will help you build the app and help you make the app look as close to design as possible if we go back to our order summary component challenge we don't have our design files in figma because we're using a free account but that's actually okay because we're essentially going to eyeball it we're going to look at the pictures that were given in this download starter files kit and we're going to kind of guess what colors we'll use and this is going to work out really well for us i wanted to explain what figma was real quick in case you weren't familiar with design tools like sigma or sketch and i also wanted to explain it because when i was learning how to code i didn't know about tools like figma and sketch and i always wondered like how exactly does the developer turn a design into code okay so let's get to building we already hit download starter files so let's open these starter files in our text editor the next thing i've done is i've opened up my downloads folder and i found the starter files folder this says main three because i've already downloaded this a few times so yours might just say order summary component main let's actually grab this and we're going to drag it down into our vs code down here when we dragged our download starter kit folder into our text editor it opened up our text editor as we can see here okay so it might feel like a lot just happened let's pause for a second if you're not familiar with a text editor yet a text editor is where you'll write your code if you think about writing maybe when you go write a blog post you use notion or maybe you use google documents to write an essay for class in google docs you write words when you're writing code developers use something called text editors i use vs code which is pretty popular but you can use any text editor that you like if you're looking right now at my text editor you might see a bunch of things and you just have no idea what they are and that is totally okay there are a lot of features inside of a text editor and you don't need to know all of them or even most of them right now let's expand this i'm going to make my screen a bit bigger okay now we're in our starter files let's briefly go over what our starter files include first we see this design folder and here we simply have different pictures of what our app or our component will look like and again if you work as a developer you will usually be given designs by your designer in a tool like figma or sketch but for today we will be looking at these pictures to reference as we build our app as a side note throughout the course i'm going to call what we're building either an app or a component and sometimes i might just call this a card because it kind of looks like a card just wanted to note that in case you get confused later on when i'm saying card or app or component i'm really just referring to this project that we're building okay so we see that we have our order summary component and then we also see this thing called active states now this is the view or the design of what our card will look like when we're in an active state in other words when you hover over the card with your mouse you might have this experience when you're on websites and there is some interactivity you go and you're about to click a button you're hovering over the button and maybe the button looks like it bounces or it changes color or something like that now these are considered to be active states we also have mobile and desktop designs and these designs tell us like what the card should look like when you're on your phone versus when you're on your computer for our purposes today we're just going to focus on building the desktop view if you like as an extra challenge when you're finished with this course you can work on building the mobile view that's when you'll learn about things called media queries okay so moving on we also have this folder of images and this is just going to be all the images that we use in our app earlier i noted that web files are html files but they can also be other files such as images so we'll be putting these into our app now this is a bit beyond the scope of the course but the next file we have is this git ignore this is if you're using git and github to commit your code and then put it on github if you're going to commit your code and put it on github then this file just says what files should github ignore that is if you committed this whole folder to github right now then anything specified in this file would not get committed or in other words it would not get included next let's go to this index.html file right here in this index.html file we have a html setup as well as the information we need to build our cart or our app and we actually could start coding in this file but we're going to create a new folder to build our app we're going to create a new folder to build our app because i want us to build this app completely from scratch next up we have a few readmes now these are all really just telling us about the project and how you can complete this challenge lastly we have our style guide and this is going to show us the font colors and the font family that we need for our application this is going to help us style our project so that it looks as close to the designs as possible okay so like i said we're going to be building our project completely from scratch so we're going to leave this folder here and we'll reference it later next up we're going to open up our terminal and start building our project okay next i'll come over to my desktop and as a side note i'm on a macbook pro the next thing i'm going to do is come down here and click on my terminal so i'm going to click i term okay so this is opened and then i'm going to make it a little bit bigger so you can see it if you don't know what a terminal is yet a terminal is just a tool you can use to work with your computer you can type commands into your terminal terminals can seem really scary at first but they're not too bad once you learn a bit more about them okay next we're going to create a new repository for our order summary component a repository is just a place where all the code for this project will be stored repository is also just another name for a folder really if you want to you can put your repository on github github is a place where developers can share their code so other developers or really whoever can see it and read it again we won't go over github in this course but i would definitely recommend that you put the code from this course onto github and then you have that github link in your developer portfolio that way as a developer when you're showing off your developer portfolio others will be able to see the code that you wrote okay so next up we're going to use the command mkdir and this will create a new repository or a new folder and we're going to name it order summary component this creates this new repository with this name the next thing we want to do is we want to open up this order summary component repo that we just created and we want to open up this project inside of our text editor so this project is just an empty folder so far and we want to put files inside of that folder so we can add code to those files in other words we want to build our website so let's open up this order summary folder inside of our text editor we can do this by saying code order summary component and next we'll hit enter and as you can see this opens our order summary component folder inside of our text editor if you run this command that i just ran and it's not working for you then you can google openvs code from terminal on mac and there should be instructions on how to set that up if you're using a different computer or a different terminal or that's just not working you can also manually open vs code so you can go down here and click open and then you can go to file open and you can go find the repository that you just created okay next up let's expand this okay i just took a quick break and now i'm back and we're ready to start creating our files so here i'll right click and i'll hit new file and i'll write out index.html and i'll hit enter this is where we'll be writing our html earlier if you remember we talked about how websites are made up of web files such as html files javascript files and css files what we've done here is we've created our first html file which is really exciting i think in this moment you might feel like we're doing something really basic and you want to get to the advanced stuff but right now we're really learning the fundamentals and you will use these fundamentals throughout your career as a developer you might be wondering like why did we name this file index.html index.html is a special name that we can use and it will tell our browser that this is the home page of our app the index.html page is the default page on a website if no other page is specified this index.html file will be the file we'll view in our browser we're going to hit this button which will close that tab there so we have more space on our screen the next thing we're going to do is we're going to write out an exclamation point and then we're going to hit enter i'm also going to hit command plus which on my macbook will make the code a little bit bigger when we hit that exclamation point we just created some boilerplate code using emmett emit is a tool that's built right into vs code if you're using a different text editor you can just look at our finished code for the project that's linked below and you can grab this html boilerplate or you can pause the video and write out what you see here on the screen just make sure there aren't any typos otherwise some part of your app might not work okay so we have this html boilerplate but what is this code and what is it doing when developers say boilerplate code they mean pieces of code that are included in lots of places without any alteration in other words code that won't change and could be used for many projects this html boilerplate is just some code that provides a foundation for any website we built let's look at a bit more of this code here we have this title tag this is an html code tag that allows you to give your web page a title so we can switch this and we can say our title is order summary component and we can hit save if you notice that when i hit save my code jumped around a little bit and that is because i have an auto formatter on so every time i save my code gets formatted right now you probably don't have any auto formatting on but at some point you might be using it so now we've added this title to our site instead of document it now has the title of order summary component and instead of having to write out the title tag ourself we just use that exclamation point that automatically added the title tag as well as these other tags that we need we can also see that we have this html tag right here or in other words we see these words html and then we have these odd brackets side by side so this is an html tag this tag just tells the browser that everything inside of this tag is html we also see we have this meta tag so utf8 is a kind of unicode we need to use encoding so we can translate the letters we use into bytes that computers use this might be a little bit confusing and you certainly won't need to know any more about bytes in this course the next thing you'll see here is another meta tag with this viewport value here this might look super confusing at first but essentially we need this for a responsive site a responsive site means a site that can work on all devices like your iphone or your tablet or your computer we want our app to look good on all of our different devices next we see we have this body tag here the body tag defines the document's body the body element contains all the contents of an html document such as headings paragraphs images hyperlinks tables lists and so on so in other words inside of our body tag all of our html will live here this is where it all goes let's actually write out some html we want to create our order summary component but first let's just write a hello world we're going to use a bold tag and we're going to say hello world and we're going to hit save again you'll see my auto formatter which is just pushing this tag over here kind of indenting the code and making it look nice okay so we'll talk more about what exactly this is doing in a moment but we want to next go and look at our app in our browser as a refresher we've created our html file inside of our order summary component repo we've added our boilerplate code this basic html setup here and then we've added this b tag with the words hello world now we want to load this in our browser as briefly mentioned earlier websites are usually made up of web files web files are usually html files css files and javascript files let's go to our browser chrome and let's open up this file okay so i've opened up my browser and i hit command o which opens this here and now i can see that my repository is already open here you might need to search inside of here to find your repo or in other words find your order summary component folder that we created next i'm going to click on index.html and hit open and now we've opened this up and we can see our hello worlds i'm going to hit command plus and make this much bigger so i'm just zooming into the screen here so here we can see that we've opened this file up in our browser we can see our app but this is just local to our own computer right this is not some url that is live on the internet uh you won't be able to send this to your friends as a link or anything like that in other words we are just viewing this index.html file locally on your computer but it has not been deployed to the internet we could deploy our application to the internet and that means we could go buy a domain like ordersummary.com and we could deploy our app so that anyone who visited ordersummary.com they could go to that link and see our app but for now we just have this locally on our own computer we just wrote this html that says hello world and i mentioned this thing called a b tag let's remove this b tag for just a moment so over here we're going to move this away and hit save now back in our browser we can see that this text hello world still looks exactly the same but if we go back to our app we can see that the b tag is gone the b tag is supposed to apply bold to these words uh and so we removed the b tag but we notice if we go back to our browser go back to our app etag looks like it's still there it looks like it's still getting applied and this is because we have not yet hit refresh on our app so we can hit command r or we can hit this button right here which will refresh our app so we need to refresh our browser so that it can see the new changes that were made every time we write new code or tweak our code over in our text editor we need to save that code and then come back to the browser and hit refresh if we want to see new changes that show up so if i hit command r now we can see that the bold tag is gone it seems silly to be hitting refresh every time you make a little change in your code and it is kind of cumbersome and slow to hit refresh every time many developers use tools that make an automatic refresh happen so that you don't have to manually refresh your page to see your new code changes however since we are basically just getting started and we don't have any fancy tools yet we're just going to be manually refreshing our page but if this drives you crazy don't worry it drives a lot of developers crazy and there's a lot of tools these days so that you don't have to manually refresh every time you write code that is different or new as i said once we have refreshed we can see that the bold we had before is gone now we just have this plain text that says hello worlds this text does look big but again that's only because i've zoomed in my screen a little bit if you zoom your screen back out this text will be pretty small here we just have this regular old text of hello world it's just some content here on the screen but when we added the bold tag we told our browser to display this text in bold we can start to see a little bit of why html is useful to us as developers back in our app let's add a h1 tag and we'll write our hello world inside of there and we'll hit save this h1 is an html heading tag html heading tags are used to format headings on your page in order of importance an h1 tag is much like the title on a cover of a book or the title on the front of a newspaper heading tags also have their own style so let's go back to our browser and see this style back in our browser if we hit refresh we can see our text got much bigger and more bold and this is the default style that's applied to h1 tags i've been talking a lot about html and these things called tags let's go over these html basics a bit more html is short for hypertext markup language no one really remembers what this stands for and it's really not that important what is important to know is that html isn't actually a programming language html is absolutely a valid language that programmers use however it is not a programming language it is actually a markup language what's the difference then between a markup language and a programming language programming languages like javascript use logic to control things on the page for example let's think about our buttons that are in the order summary component design because we aren't using a programming language today nothing will happen when we click on our button in the app that we're creating however if we had added javascript to this project we could say okay if we click on the button let's make something happen let's add logic to control what happens here maybe we'll move to a new view or maybe when we click the button a piece of text will pop up that says ok all done but because this project is only html and css our buttons in this application won't have any interactivity to them in other words they won't do anything you might be wondering well if programming languages like javascript use logic to control things on web pages then what does a markup language like html actually do html is the code that is used to structure a web page and its content html consists of a series of elements which you use to wrap different parts of the content on your web page we saw this a moment ago when we created our hello world websites can have only html on them and nothing else you can build a site with just html and css however it will probably be a boring and ugly website because it won't have any interactivity using javascript and the site will also not look very pretty because it wouldn't have any css and we'll go more into css in just a bit for now let's get a bit more into html syntax so first we'll learn kind of the concepts and ideas of html and then we'll go use them as we're writing out our application let's go into html syntax more first we'll go over the syntax and then we'll take that syntax and we'll use what we learned to build our application when i say syntax what do i mean the word syntax can seem kind of scary when you first hear it but syntax refers to the rules that define the structure of a language when you know the syntax of a language you can use that language first up let's talk about html elements here this entire thing is an html element an html element is a basic unit of html everything here from the hello world to the weird brackets you see to both of the h1s on either side of the content this is all part of the html element we see here now here when you see this odd looking like greater than and less than this is the html tag itself this is the opening tag and this other one over here is the closing tag tags are a special kind of text that you use to mark up your content on your web pages these tags will tell your browser to display whatever is inside of the tag in a certain way for every single html element there is an opening tag and a closing tag if you go back to our app and we go outside of the closing tag and we just write hello here and we hit save then we refresh and we see that these styles that the h1 are given here bigger and more bold are not applied to this hello and that's because this hello here is outside of the closing tag of the h1 here let's talk a bit more about html tags so here we have the opening tag first this opening tag states where the element begins or starts to take effect and then next we have the closing tag over here this is the same as the opening tag except it includes this forward slash before the element name the closing tag tells us where our element ends in this case this closing tag tells us where our h1 element ends again this whole thing here is one html element our html element is made up of these tags and it's also made up of the content the content is whatever is between the opening tag and the closing tag in this case hello world is our content and again this whole thing with the content and both the opening tag and the closing tag this is all one html element itself we'll learn more about html as the course goes on but let's go on to the second topic that we'll be covering in this course which is css we're going to right click again and hit new file and we'll say styles.css before we start writing out our css let's dive into some css basics what is css anyways css stands for cascading style sheets it's a styling language that modifies the appearance of the content of web pages css by itself can't do very much the purpose of css is to style markup language in other words the purpose of css is to style html elements and make them look great we can actually inject a bit of css right into whatever html tag we went to style let's go do this next we're going to add a style sheet which will be our way of adding css to our html and connecting the files so our app knows that it'll use this css that we're about to write so we'll say link rel stylesheet rel is short for relationship and then we'll say styles oops styles.css you see i have an extra quote here just making typos all the time i'm going to remove that and hit save now we've connected our css to this index.html file and we want to go to our browser and test that this actually worked so let's remove this so here in our opening tag and in between these two brackets we can say style uh quotes background color i'm using autocomplete there your text editor might have an autocomplete and then we're going to say let's do aqua and then we're going to hit save if we go back to our browser and hit refresh we see that this now has the background color of aqua next up what if we want to add another h1 tag that says the hello world again let's do that so we'll write h1 and here you might notice again that if i just wrote up the first h1 i suddenly this second closing tag just appears again that is an extension i have that makes it a little easier and faster for me to write html so inside of here we'll say hello worlds again and hit save what if we want the second hello world again the second html element here to have the background color of aqua well what we have to do is add this same style attribute again so i'm being lazy and i'm being a true developer and i'm going to hit command c in other words i copy this and then i'm going to paste this here and hit save now we've accomplished our goal of having both of these h1 tags have the background color of aqua if we go back to our app and refresh we can see that we have both of our html elements and they both have the correct background that we want them to have now this is okay but it's going to get tedious if we need to add this so many times imagine if we have dozens of html tags on our real website and we're going to have to add this in several different places all over there is an easier way to do this instead we're going to use css selectors we'll be using css selectors all throughout the rest of the course a core piece of css syntax is the selector a css selector is the first part of a css rule it is a pattern to tell the browser which html elements should be selected to have the css property values inside the rule applied to them a css selector like this part on its own is the first part of a css rule so this entire thing is one css rule a selector is a pattern of elements that tells the browser which html elements should be selected to have the css property values inside the rule applied to them next we have these curly brackets that you see here these curly brackets are used to signify the start and the end of the styles that will be applied to this selector everything in between these curly brackets are styles that are applied to the html elements that match this selector inside of these brackets are property value pairs each property has a value let's go over an example so here where is the selector the selector is this h1 element here we are essentially saying okay go select all the h1 elements and make them all have a background color of aqua back in our app we had to write this code twice here and as developers we really don't want to be writing the same code over and over again if we can help it so instead we'll use our selector to grab all h1 tags and set their background color to aqua let's go back to our app and we'll remove this style attribute here so we remove it and we remove this and we hit save now let's go into our styles.css and we'll say exactly what we saw on the screen a second ago we'll say h1 we'll do the curly brackets so this is our selector and then inside of our brackets these are the css styles that we want applied we'll use the property of background color and we'll use the value of aqua and we'll hit save if we go back to our app and refresh we see no difference which is exactly what we want the background color of both of these h1 elements is now aqua and we didn't have to write the same code twice okay so we've learned some html and css basics and we're ready to jump into building the rest of our project we will learn more html and css on the way as we go one quick thing to note before we keep going let's briefly talk about how javascript works with html and css i mentioned javascript earlier and javascript is beyond the scope of this course it's something that we won't be covering but i want you to understand how javascript works with html and css so you can kind of understand how they holistically work together as a front end developer you're going to use html and css to build and style the content of your website you would also use javascript alongside the html and csx so these three languages html css and javascript you will use them all the time as a frontend developer what's always helped me is to think of a house analogy think of your application like it's a house so the html is the building blocks of your house uh the css is the styles of that house and javascript is the interactivity of the house javascript is the moving parts of the house back in our app again we have two different h1 elements here and we've created this rule which says for every h1 element give it the background color of aqua now if we go back over here what if we do not want this second h1 tag to have a background color of aqua what if we just want this to have a regular color of black for example the problem is we already wrote this css rule that says we want all h1s to have this background color of aqua every single h1 tag that we create on this page we'll get a background color of aqua and we no longer want that so instead we're going to use another css selector that solves this problem we want to say okay i want this h1 tag in particular to have a background color of aqua but i do not want this h1 tag to have that color we somehow need to differentiate these two html elements we need to somehow get this element specifically uh target this element specifically and make sure it has a background color of aqua but not this one and to do this we're going to use a class selector the class selector selects elements with a specific class attribute back in our app inside of our h1 opening tag we're going to create a space and we're going to say class and then inside of our quotes we're going to say aqua element and we're going to hit save i'm also going to just copy this next we're going to go back to our css and instead of this h1 we're going to paste in that class name and we're going to add a little dot right there and hit save now we are using a class selector in here we gave our h1 tag a class with the name of aqua element and then we created this css rule for this specific class if we save this and go back to our application and hit refresh we see that we did exactly what we wanted this second h1 element no longer has the background color of aqua this is the power of class selectors and again we'll use a bunch of different selectors as the course goes on let's start building the very first part of our application let's go back over here and we'll remove this css rule and then back over here we're going to get rid of our hello world next up we are going to write out our first div so we're going to say div and then we're going to write out for now we'll just write card and we'll hit save you might be wondering like what is a div what is this the div tag defines a division or a section in an html document the div tag is used as a container for html elements this div is going to be the container for our order summary card we'll give this a class of card so we'll say class card and we'll hit save actually we're going to make this lowercase you might be wondering why did i call this card well in my eyes this whole order summary component seems like a card on a page conceptually if we go back to the design in front and mentor dot io we can see that this is the whole page and then within the page is our component and we could also call it a card it kind of looks like a card on a page here so the card kind of symbolizes the whole order summary component on the page the div that we just created with a class of card this div will be the entire component that we see here everything inside of this div will be the image the text and all of the buttons in other words everything inside of this div with the class of card will be everything inside of our order summary component okay let's save this and then if we go back and refresh we can see that so far we just have this div with the class of card and it just says card so far back in our starter files i'm looking at the design of the card or the design of the component the first thing i'm going to do is give this card a width so we can see we have this whole page and there's a certain width of this card so back in our styles we're going to use the class selectors and say dot card width this is the property and then the value is going to be 450 pixels and we'll hit save next up we need to give this card the background color that it needs it just needs a white background so we can say background color white and hit save again now so far it doesn't look like much has changed we just have this text of card but again if we go to inspect and we look at our developer tools we can see that this card now has a width of 450 pixels and a background color of white you might be able to notice the width more if we change this so we can change this to orange for example and here we can see that our card only has the width of 450 pixels and not anything more the next thing we're going to do is grab our css variables first of all let's go back to our starter files and let's go back down to the style guide now that we've opened our style guide we're going to take all of these and just hit command c so we're going to copy these if you've never seen this hsl before this is just one format for a certain color you might have seen a hex code in other css examples and these are just different ways of representing a certain color in code back in our application and back in styles.css we are going to push this down and we're going to write out roots and then brackets and we're going to paste in our colors here and we'll get rid of this code comment if you're wondering what root means this root is a place where we can declare global css variables so variables in other words that we can use within all of our css now we want to turn these into css variables to create a css variable we need to write two dashes and then the name so we're going to say dash put this into lowercase and then create a dash here so this will be the name together and then we're going to do this for all of the other ones awesome and then we're going to hit save we also need to make sure that we remember our semicolons on each of these okay so we can see we have a typo where we need another dash here next up let's test that these variables work and then we'll see why they're useful so our card just needs a white background but for now let's use a css variable so we'll write out var and then inside of here we need to add the css variable that we want so we'll say var dark blue and we have this nice auto complete here so i'll just hit this add the semicolon and hit save then if we go back over here and we refresh we see we have this background color with the dark blue that we want we don't actually want this background color this isn't the color of our car but we just wanted to demonstrate that this css variable works let's remove that and hit save we'll also switch this back to just plain white and hit save again you might notice that this white right here we didn't actually create the css variable up here it just comes with css by default so it's kind of like a css defaults variable whereas the specific colors that we need in our app we assigned those to css variables that we created and we gave them custom names so these names could really be anything next up let's give our page on the application a background color if you go back to our starter files we can see we have this beautiful like purplish or blue background here and we see this kind of squiggly wave right here now this is actually a mix of two things on the page it is a background image and it is also a color back in our app we want to take this body tag and give it not only a background image but also a color the body tag is really the rest of the page and our card or our component is sitting inside of that body tag the body element contains all the contents of an html document such as headings paragraphs hyperlinks tables lists and so on there can only be one body tag in an html element we are going to give this body tag first of all a background image let's first add the image that we need if we go back to our designs like i said we're actually using an image here to create this kind of wave effect it's a little bit hard to tell but that's what we're doing so let's go ahead and grab this image we'll hit this button and we'll go down here and we'll copy this pattern background desktop so we'll hit copy next up we're going to create a another folder inside of our order component summary folder so we'll say new folder and we'll write out images and in here is where all of our images will belong we can create folders inside of our main repo or inside of our main order summary component folder to keep our files really organized after clicking this images folder we're going to hit command v next we'll close this again and then back in our styles.css we're going to write out body so our selector is the body tag in this case and then our styles or our property values are going to be in here and we're going to write background image and then we're going to say url images and we have this nice autocomplete and we're going to grab the pattern image that we want and we're going to hit save we also want to remove this and make this white again and we're going to again hit save back in our app we hit refresh and we also closed our dev tools and this looks okay so far but we have to remember that we're actually extremely zoomed in here sometimes i forget about this so i am actually zoomed in because as you're watching this i want you to be able to see the code on my screen really well but zooming in can also sometimes make your app look funky so let's go back to a hundred percent i'm going to hit command minus right now we're at 300 and we're going to go back down to 100 now we're back at 100 of the correct kind of zoom size and we can see the problem is that we have this wave effect but it keeps repeating on the screen like it's much too small for the screen it seems like and so it's just repeating once twice and then three times down here let's fix this we can say background repeat no repeat and we'll hit save we don't want our background here to be repeating if we refresh now we see this is exactly what we want our background is not repeating and filling the space the next problem is that we do want this background image to be a little bit bigger so back in our app we use the background size css property for this the background size css property sets the size of the elements background image for this particular use case we want the value of cover so we'll say background size cover and we'll hit save if we go back to our app and refresh this is looking fantastic it's very similar to our design back to our design we can see that we've already done this wave effect and then the rest of the page has this slightly different kind of purple gage looks like the pale blue css variable that we created earlier so we'll use that back in our application i'm just going to copy this because again i'm too lazy to write it out and then we're going to say background color and then we're going to save bar and then paste in our css variable of pale blue we'll add our semicolon and we'll hit save or command s if we refresh our app again we can now see this is looking fantastic this is exactly what we want going on and looking at our design figuring out like what should we build next uh we can see that most of our text inside of our order summary component or in other words inside of our card is this kind of light color so let's go add that color to the div that has the card class so in here we'll say color var and it is desaturated blue and we'll hit save if we go back to our application we're going to zoom back in so we're going to hit command plus a few times just to make this a bit bigger we'll hit refresh and we see this has changed to the color that we want we can also see this change if we open up our dev inspector tool so we can hit inspect and we can use this and select our div with the class of card and we can see that it has this color if we toggle this it will go away and toggle it back the color will be applied again we used the color property because the color property specifies the color of the text so if we wanted we could change this to anything we could say pink and it would show up here and of course if we refresh this page again that pink is gone uh if we refresh the page the original styles that we coded up in our styles.css are back and the pink will be gone so when we fiddle with these colors down here and we change these in the browser this isn't actually changing anything in our code base itself it's just momentarily showing us like what these changes would look like in the browser so we can tweak things here but it's not going to affect any of our actual code in our app this dev inspector can work amazing if you are debugging because you can see which styles actually got applied or not for example back in our app let's say we take away one of these dashes right so maybe we just forgot the dash we made a typo this happens all the time and then if we go back to our app and we refresh again and we look down here we can see that this color is no longer getting apply it so our developer tools will actually give us this little warning sign right here so you might come into the app and you see okay the color is not there i wonder why and you can inspect this and look down here and see this warning and this says invalid property value this is kind of like an awesome clue that css is giving you it's telling you that there's something wrong with the code we can go back here and add this dash again and then know that it's working let's stop for a second and notice something really interesting so back over here in our index.html we have this word cart let's add another div nested inside of it and inside of this div we'll have the content of i love coding and we'll hit save let's go back to our browser and we'll refresh next let's inspect this second div and one thing we notice about this div here is that even though this div does not have the classic card it actually has the soft blue color right its text is this soft blue why is this this div does not have a clasp that is telling it to have this color of soft blue and yet it is still this soft blue color we can find the answer by scrolling down a bit and we see that we are hovering over this div right and then we see these words inherited from div dot card what happened here was that this child div i love coding it actually inherited its color from its parent div that has the class of card and our dev tools are actually telling us that right here so we are basically saying okay any children inside of the div with the class of card will also have the text color of soft blue think about this card div as being the parent div this div with the content of i love coding this div is inside of the parent div in other words the parent div has this opening tag and the closing tag and this div is between the opening and the closing tag and so this is the child of this parent div and here we're really saying okay any children inside of this div with the class of card are going to have the text color of blue think about this card as being the parent div and the card inside of it is the baby and the baby inherited the way that it looks from its parents this inheritance is a fundamental piece of css css cascades in other words this means that styles cascade down or are inherited from parent to child this can be really tricky because sometimes you have a div and you don't know where it's getting its style or something on your page looks really funky and you're like wait i didn't make that div that size and so it's inheriting some sort of style from somewhere else the next question you might ask is what if i don't want my child div to inherit its color from the parent dip okay so if we went to rebel we can use the class selector here so we can say class and we'll just call this child for now and we'll hit save and then back in our styles we can say dot childs and we can add another color property here so we can say color and we'll say red and we'll hit save if we go back to our app and refresh we can see that this child div now has the color of red so this child div has this color of red and it's now overriding its inherited color if we scroll down a little bit we can see that this is now slashed out because we have a more specific color property with a value set here and so this inherited style will no longer be applied here this can be a bit confusing because if you go back to our app and you say okay we have this card div with this color of desaturated blue and then we have this div inside of the parent div with the color of red you might sometimes wonder like okay which one wins here right like which css rule actually gets applied is it the blue one or is it the red one and css answers this by saying the most specific rule wins and in this case the most specific rule is the child div with the color of red because this rule is more specific to this div this is called css specificity i can never say css specificity right so i'm going to try to say it as infrequently as i possibly can but css specificity is the means by which the browsers decide which css property values are the most relevant to an element and therefore will be applied now this can seem complex so let's look at a great cheat sheet for this okay so this is a really fun little site called css specificity i again cannot really say that without getting tongue tied but here you can see when you are applying styles to your divs like what styles will win in other words what styles will actually get applied in order of importance okay so now that we've learned about css specificity let's move on and let's work more on our order summary component let's keep building we're going to remove this child div we're not really going to need it now and we're going to go over here and remove it here back in our designs let's create our title next this is our order summary title now back inside of our car div we're going to actually remove this word cart this was just kind of placeholder text we don't need it anymore next we're going to add an h2 element and we're going to say order summary and we'll hit save next we want to add styles to this h2 tag if we go back over here and we refresh we can see it doesn't really have much style on it yet let's use a class selector so we'll give this a class name of title and we'll hit save back over here we'll say dot title and then we'll add our styles within here first we'll say color so we want this order summary text to have a color of dark blue so we'll say bar dark blue next up we want to give this a font weight of 900 and if you're wondering i got this font weight from inside of our starter files lastly we also want this to have a font size of 32 pixels and we'll hit save again we're deciding how this style looks from looking at the image that we have in our starter files of the design if we go back and hit refresh we can see that this is looking a bit more similar to the design i am going to make this a tiny bit smaller because it's a little bit bigger than it's really necessary right now that's better the next thing that we want to do is add this cool image that we see here back in our starter files so within our starter files we're going to go and grab this image from the images folder that they provided for us this is the illustration hero so we're just going to copy this back in our application we're going to go to our images folder and we're going to hit paste awesome so now we have this here now when you see all of this you might be thinking okay this doesn't look like an image here this is an svg which is just a different kind of an image file so it's kind of like a jpeg but there are differences that we won't go into in this course so now we can just close this and we're actually going to close this as well and then lastly we'll close this so we have more space and go back to our index.html file next up right above our h2 tag we're going to use an image tag and this will allow us to display our image so we're going to say image src and then here we need to write out the file path to our image so we'll say images and then find it here again we can use our awesome autocomplete and say illustrationhero.svg and then we can use a closing tag and hit save one last thing we can do is add an alt tag so we can say alt hero image and hit save an alt tag also known as an alt attribute or an alt description it's an html attribute applied to image times to provide a text alternative next we can go back and refresh and we can see that our image is here and it's looking awesome the great thing about this image is that it's fitting perfectly if we inspect this image it has a width of 450 pixels which is exactly the width of our car but this width is actually not being inherited from the car so where are we getting this width from like why does this image have a width of 450 pixels if we go back to our app and we go look at this svg we see that there's actually a width hard coded into this svg now this is fine but imagine if we went to use this same image in other places in the application for example what if we want to use this image as the background of another page in our app if we use this image as the background in another page in our app then we would not want this image to have the width of 450 but because this file is giving this exact width of 450 that means that anywhere that we use the image as many times as we use it it's always going to have this width of 450 pixels this isn't great for when our app scales right so if we do want to at some point add another page in our app and use this image again then we'll be stuck with this hardcoded width of 450 pixels and we don't want that let's go ahead and actually remove this width so we're going to remove this and hit save now if we ever use this image again elsewhere it's not going to have this hardcoded width of 450. if we go back to our app and we refresh we can see that this image no longer has the width of 450. this seems like a problem at first but we're going to actually fix this let's go back to our app and we're going to close this for now we don't really need it anymore and we're going to give this image a class and we'll call it hero image and we'll hit save next in our styles we're going to go down here and use the class selector so we'll say hero image and then we're going to use the property of width and we're going to say 100 and we'll hit save with 100 means that we want to make this image element have the width of its parent element whenever you see a width of 100 on a div you'll know that that div is just going to be the width of its parent now if we go back to our app and hit refresh we can see that our image tag now has the width of 450 because that is the width of its parent we've added our order summary title and we've also added our image let's start adding some of the stuff down here okay the first thing we're going to do is create a new div and we're going to give it the class of container and inside of this div is everything inside of that white space that we saw including this title so here i'm going to hit option up arrow and move this guy so he's nested inside of this container div right here and then we're gonna hit save let's go over to our styles.css and then down here we'll say container and let's give this some padding we can say 30 pixels and we can always go tweak this if we want cool so if we refresh we can see we have a bunch of padding we just added some padding right now and we talked a little bit about padding and margin earlier but we haven't really gone into like what exactly are padding and margin so let's dive into that right now to talk about margin and padding we're going to talk about one of the most important concepts in css which is the css box model okay so the css box model in css you can think of every element as a box so everything you see on a website whether it's a footer or a menu bar everything is a box if there is a parent div and there are some children divs inside of it that parent div you can think of as a box with certain properties and all of the children divs inside of it or different tags inside of it you can think of as a box as well and once you kind of understand this you'll understand how the html elements on your page are working better and you'll be able to write better css okay so every box consists of four parts you have the content so the content is the content of the box the content of the box is where things like text and images appear earlier we had that one div that just said hello world and so for that box the content was just the text of hello worlds um so you can have some text or video or several images and all of that is the content in a box and there can definitely be a ton of different content next you have padding so padding creates space inside of an element you also have border every box can have a border and a border goes around the padding and the content a border can have like a texture and a color and things like that you also have margin so margin creates extra space around an element so during the pandemic we had that like keep six feet apart roll so if you think of yourself like as a box um you could say you have you know six feet of margin between you and other people it's space between you and other elements padding and margin are easy to confuse and i used to confuse them all the time but margin is when you want to have space around the outside of your box so you're pushing that box away from other boxes on the page and padding is when you want to have more space inside of the box so space between the content and the border okay so this is called the css box model and for every single element on your page you can think about that element as a box with these four properties this is more of a visual representation that you'll see in your dev tools and we can see we have our content padding border and margin now every html element can have all of these things but it doesn't have to have them so in other words you could have padding set at zero margin set at zero etc okay so let's see this in action and back in our app we're going to add a paragraph tag and we're going to put our text inside of it and hit save paragraph tags are used to define a block of text as a paragraph now we hit save we can refresh and then see our new text showing up here and then we're going to go back to our inspector okay so we're gonna hit this and then we're going to click on our paragraph tag here now let's write a little bit in our css dev tools and again just to remind you when we write in here in our browser these are just showing us some temporary styles but of course this won't change any of our code in our repo now let's say we want to also add some padding to this paragraph tag so we can say padding and earlier we had that 30 pixels so we can say 30 pixels and if we look and see what happened here padding is in the green and so when we said 30 pixels with just one value here we gave padding to the top the left the right and the bottom so when there is just one value right here with this property of padding that one value gets applied to every single side of the top the right the left the bottom so what if we just wanted to give the top of this div some padding and nothing else one thing we could do is we could say padding top and then if we look again we can see that there's that green right there only at the top of the div so padding is zero on the left and the right and the bottom of the diff if we wanted to give padding to just the bottom of the div we could say padding bottom like that okay so say that you wanted to have different values on the top the left the right and the bottom so you could say padding bottom 30 pixels uh padding top uh 25 pixels padding right 10 uh padding left 5 pixels now okay so you probably will never do this because your padding right and your padding left should generally but not always have the same values but we can see here that we just wrote four separate lines of code and instead we can use something called css shorthands okay so you might not always do this where you have your padding right and your padding left at different values generally you'd want them to be the same value generally but not always but i want to illustrate a point here which is what if you need different values for the bottom the top the right and the left so you won't be able to use that just you know padding where you put in one value and this goes everywhere top right left and bottom so you'll have to use these or you can use something else called css shorthand so if i uncheck all of these which means they won't get applied and then oh this isn't getting applied because i have a typo here where i didn't put 40 pixels you can see so i'm going to take this right here and then i'm going to write in four properties right here okay so instead of writing padding bottom top right and left we can just write out padding with four values you might be wondering like how do i know um which value is applied where so you can always think about a clock so a clock goes from the top to the right to the bottom to the left so this first value would be at the top then we head over to the right just like a clock then we had to the bottom and then finally to the left so this is a css shorthand property okay so we've learned about padding uh next let's look at margin a bit so again margin is used to create extra space around the outside of an element so we could say margin 50 pixels and you can see this element now has more space around the outside of it with margin you can use all of the same shorthand properties that we use with padding we also have the content which we've already gone over so the content in this paragraph tag or in this box is simply these words and lastly we have border we could give this a border we can say border um one pixel solid orange and there you can see a border showing up if we go back to applying padding we can understand padding a little bit better because by applying this padding we are giving space around the inside of the element so you can see that between the border and the content there is more space okay so i've just refreshed the page one thing that you'll notice here is that there's actually a little bit of extra space right here i don't know if you can see that just in the corner there if we hover over our body tag we can see that we have a margin of eight pixels this is odd because you might be thinking like i never remember writing this this is actually what is called a default style so certain tags will come with default styles like we said let's go and remove this default style back in our app we are actually going to make a little space here and we're going to say star and we're going to say margin 0 oh margin 0 and padding of 0. and we're going to hit save here we're using the all selector so this star looking thing this will select all the elements on the page and we're going to give them a margin of 0 and padding we want to do this because we don't want to have any default margin or padding applied if we refresh we can see that the space we saw a second ago is now gone the next thing we're gonna do is add box sizing border box so we'll say box sizing border box okay so what is border box and why are we applying it to every single element on our page border box tells the browser to account for any border and padding in the values you specify for an element's width and height okay so first let's remove um box sizing and we'll remove it so we can kind of see the problem that it solves when we add it back later okay so here we have our card and has a width of 450 pixels and if we hover over here we can see just below our card just below the paragraph tag and the content we can see that we have the width of 450 pixels let's say for whatever reason we want to add some padding right so we'll say padding right of 50 pixels and here we can see our card now has a padding rate of 50 pixels let's also notice what else changed if we look over here we can see that we now have a width of 500. okay so our card even though down here it says we have the width of 450 pixels if we hover over our card div we can clearly see that it now has the width of 500 and this is because the browser looked at the width of the card of 450 pixels and then it looked at the padding which is creating more space inside of the card and it said okay so we have the width of 450 plus the padding rate of 50 pixels and so that equals a total width of 500 pixels here's the problem we set this card to be a width of 450 pixels but it's not actually that width anymore and this is really confusing for a lot of developers because we want our card to have this width that we clearly defined but then we're adding padding and it's going to increase our card width to 500 now what we can do is add box sizing border box and this is going to tell the browser that when determining the height or the width of this div simply account for the padding so we'll fit the padding into the total size of the box in this case we'll fit the padding into the total width in other words the browser will see this padding right of 50 pixels and it will fit that padding into the original width of 450 pixels let's go back to our app and we'll uncomment this out and we'll hit save then we need to come back here and hit refresh and then again we'll give some padding right just here in the browser hit save and we can see that we have our padding but we can also see that our width stayed at 450 pixels so our padding was kind of shoved into this total width i'd say most front end devs add box sizing border box to all of their elements just like this when they get started with a project because it's just more intuitive and it solves a lot of problems where our elements are much bigger than we expected them to be next up back in our designs we can see that this text has some space between it but if we look in our app this text has almost no space between it so we'll use line height for this which can be used to set the distance between text back in our app we're going to give this paragraph tag a class so we'll say class order description and we'll hit save then over in our styles we're going to come down here and we'll say order description and we'll say line height and we'll try out 25 pixels and we'll hit save again we come back and refresh we can see that there's now some space between this text okay so let's keep going if we want we can really build any part of this app next next up i think i'll add the border so if we look at our design again we can see that this design has a nice rounded border we'll go back to our card and we'll give this a border radius of 20 pixels back here if we refresh we can see we have this nice rounded border next up let's grab the font that we're going to be using so let's come back over here and let's look for our font okay so here we see the font family we're going to follow this link okay so now we're going to add the font weights that we want so we want 500 we want 700 and 900. awesome the next thing we're going to do is hit import and we're going to copy this link right here okay so next up we're going to add this import to the top of our app like so i'm going to hit save then inside of our body tag down here we're going to say font family red hat display sans serif we go back to our app and we refresh we can see that we now have the font that we want awesome while we're here we can also give our body a font size of 16 and i saw that over in our starter files if we refresh we can see we have more of the size that we want keep in mind that i am again zoomed in here so if we zoom back out we'll start to see more of what our app actually looks like but i want you to be able to see this really well while you're taking this tutorial so i'm going to zoom back in one bug that we'll see here is that our borders got this really nice rounded border on the bottom but up here everything still looks like there's absolutely no border radius to fix this issue we'll use something else we'll use the overflow css property in this case we're going to use overflow hidden so when the content of an element is too big and overflowing we can hide that overflow in our case here this image is overflowing because this image is inside of the car div but its square edges are overflowing in other words we have this car div that has rounded borders but the image is overflowing with its square borders it's hiding the rounded border of the card so let's add overflow hidden to our card div and this is essentially saying okay when the content of the card div overflows or in other words when it's too big for the card then we are going to hide that okay so back here we're going to say overflow hidden and we'll hit save if we go back to our app and refresh we can see that overflow hidden did its job perfectly okay so next up we want to add some margin to each element inside of this container let's go back to where we created our container styles and we're going to say container and then we're going to say margin 13 pixels zero okay so we're using this greater than star which says all of the children inside of this container they will all get this margin with this value when you have a margin property with two values this means that the first value is for the top and bottom and the left and right are at zero we just gave each element a top and bottom margin of 13 pixels and a left and right value of zero next up let's build these buttons that we see here okay so inside of our container div and just below our paragraph tag we're going to add our first button the button html element it's an interactive element and it can be activated by a user and you can use it to add programmable actions such as like opening a form or opening a new page we won't go into that in this course but those are some of the actions that you can use a button tag for since this course is all about html and css our buttons won't have any interactivity so nothing happens when we click on our buttons they won't be very exciting but we're going to make sure that they're styled correctly to look just like the design okay so first off i'll write out button and then i'll give it a class the first one we'll call the proceed button and then inside i'll say proceed to payment which is from the design and i'll hit save next up i'll essentially create an identical button but this one will say cancel order like how it says on the design and we'll give it a class of cancel button alright if we go back to our app and refresh we can see that these buttons look like total garbage these buttons also have a style already which is kind of odd because we didn't add any styles to these but like there's already a background color of gray and there's a border and again these are default styles from the browser the browser has a basic style sheet that gives a default style to certain elements so we're going to override these styles and make these buttons look how we want okay so over in our styles we are going to first focus on the proceed button so we're going to say proceed button and we'll give it a background color of bright blue and we're going to hit save now let's go ahead and add everything we need for this button so i'm going to go a little bit faster i'm going to give this some padding a color or text color in other words of white and i'm going to give it a box shadow let's give our button more of the styles that it needs so we'll say width 100 border none we want to get rid of that default style border font weight of 700. cursor pointer this means when you hover over the button there will be a pointer so it kind of indicates to the user that you're going to click on something next we're going to give it a font size of 0.9 we're going to give it a border radius so it's a bit rounded we'll go 12 pixels if we go back and refresh this button is looking so much better you might have a few questions here like for example why did we add a width of a hundred percent we said width of a hundred percent because if you remember when you give an element a width of a hundred percent then it's going to take the width of its parent container next up if we look at the designs we can see that this button here is a certain color and when you hover over this button it changes color slightly it almost looks like it's just a lighter or more transparent version of the same color for this we're going to use the opacity property so here we'll say proceed button hover and we'll give it an opacity of 0.8 and we'll hit save the opacity property specifies the opacity or the transparency of an element so if we refresh we can see once we hover over this button now it has this opacity applied next let's build the cancel button over here we gave this button the class of cancel button so we're going to copy this and come back to our styles and we'll say cancel button and we're going to start to add what we need first we'll give it this background color of white you can see it had this white color in the design then we want to give it a text color the text color was desaturated blue next we want to get rid of its border that came in the default style so we'll say border none then we want to give it a margin top of 22 pixels similarly to the proceed button we'll give it a width of 100 next we'll give it a font weight of 700. i got this from the designs again next we'll give it a font size 0.9 next we'll add a border radius of 12 pixels and finally we'll say cursor pointer this button also has a hover state where the text color changes slightly so for that we'll say cancel button hover and then we'll say color black let's go ahead and hit save and then we'll look at our second button if we go back over here and refresh we can see that our button is looking much better much more similar to the design and it has this hover when we hover over cancel order back in our application we can see that for both of these buttons there are a lot of similar styles applied for example both of these buttons have the css property of width with the same value of 100 percent instead of repeating ourselves by writing a lot of the same styles twice we're going to write them just once so let's go up here and we'll say button so this is selecting the button tag because there are only two buttons in this app we can use this tag to select both of our buttons so here we'll grab the styles that are used on both the proceed button and on the cancel button so they both have a width of 100 they both have border none which is getting rid of that default style they both have a font weight of 700. they both have a font size of 0.9 they also both have a border radius of 12 pixels and lastly the cursor pointer great so now in our proceed button and our cancel button we can go and remove these styles so we'll get rid of the width border basically just all of these we can start getting rid of them you can do the same over here for our cancel button so you can say border none get rid of this basically all of these and we can hit save if we go back here we can see that our buttons are still looking great for this app there are only two buttons here and both of them need these styles but you should be careful using this button tag because this will select all of the buttons on the page and give it these styles so if you had other buttons on this page you might not want to use this button element here next up if we go back to our app we can see we have this purple box with a bunch of stuff in it let's get to building this by first adding the html first up back in our index.html let's add a plan container that will hold everything that we see in the purple box this will go right below our paragraph tag and above our buttons so we'll create a div and we'll give it a class of plan container and then next let's add the image that we see we go back to our starter files and we hit images we need this icon music so we're going to copy this back in our app we're going to paste this into our images folder like so back in our plan container div we're going to say image src and then we're going to say images icon music and we'll give it an alts of icon music and save if we go back to our designs we can see that we have this middle section here with annual plan and then it's telling us the price we will wrap a container div around these two smaller divs so that we can line them up where one is stacked on top of another so let's add these back in our plan container div we're going to create a another container div and we'll give it a class of plan description next up we're going to add the annual plan and we'll use a strong tag for this so we'll write annual plan then next up we'll use a p tag and we'll write out 59.99 slash year and we'll hit save if we go back to our design we can see that we also want to add this change link right here right below our plan description container we're going to write an a tag so we'll say a and this is linking to nowhere for now since we're just focusing on styles and html and then inside of it we'll write change if we go back to our browser and refresh we can see that we have the html that we want i'm also going to zoom out a little bit so we can see everything better okay so we have the html that we want but this isn't looking so good so let's add some styles first let's work on the plan container back over here above our buttons we'll say plan container and first we're going to give it the correct font size of 16 pixels then we're going to give it the background color of that kind of light purple that we saw the app calls it blue but to me it looks much more purple so we'll say very pale blue and we'll hit save next we'll give this container some padding so we'll give it 25 pixels of padding and then finally we'll give it a border radius because if you notice in the design the borders are a little bit rounded so we'll say border radius of 12 pixels if we go back and refresh this is looking a bit better however we need to get these things all lined up the next thing we'll do is add display flex the flex property sets the flexible length on flexible items the next thing we're going to do is say flex direction of row if we go back to our app and hit refresh we can see this is looking much closer to the design lastly we want to add justify content space between the justify content property defines how the browser distributes space between and around content items space between is a value that will distribute the content evenly which is what we need we also want to write out a line item center this will align our items to the center if we go back to our app and hit refresh again we can see things are looking much better the justify content property with the value of space between allowed us to evenly space out these items how we want them next up let's work on our a tag if we go back to our design our a tag or in other words the tag that has the content of change inside of it looks a little bit different than what we currently have so let's add some styles to fix that so let's write out plan container a and we'll add some styles here first we'll add the color so var bright blue next up we'll add the font size which is 13 pixels and we'll add the font weight of 700 and we'll hit save if we go back and refresh we can see that our a tag is looking much better next up we can add the hover state so when you hover over this change h i it actually changes color again we'll use opacity so we'll say plan container a hover and we'll give it an opacity of 0.8 we'll also give it a text decoration of none we wanted to add text decoration none because when you hover over this link there is actually no underline underneath the link anymore go back to our app and we refresh we can see this is looking much better next up we can see that our annual plan text right here is very faint but if we go back to the design it looks much more bold let's give it the correct color so we'll say plan container strong so we are selecting the strong tag and we'll say color var dark blue and we'll hit save next up if we look at our app so far we can see that everything inside of this white space inside of this container we created is not looking exactly like the design we need to kind of center things here and make them look a bit better let's go add some styles to do this back in our container div that we created we're going to add a display flex which we talked about earlier we're going to give it a flex direction of column next we want to center the content so we'll say justify content center we'll also center the text on our page so we'll say text align center as well lastly we want to say font size of 18 pixels if we go back and refresh this is looking much better and much closer to the design awesome something else we'll notice is that in the design this card is in the center of the page but here it's just hanging out off to the left so let's go back and fix that we'll go back to the styles for our card and we'll say margin 50 pixels auto now when you have just two values here the 50 pixels is going to be for the top and the bottom of the div and auto is going to be for the left and the right that is auto will be applied on the left and the right of the div and the 50 pixels will be applied on the top and the bottom you might be wondering why are we using auto right here when we say margin auto for the left and the right margins of an element equal margin is given on either side of that element and so this is how we can center our card in the middle of the page if we refresh we can see that our card is now centered okay this is looking so close to the design let's go back over the design and see if there's anything that we're still missing if you go back to the design we can see that there is a bit more space here between the annual plan and the price then we have in our current application it also looks like the annual plan and the price are a little bit closer to the music icon than they are to the change link so let's make these changes really quick let's add some styles to our plan description which is the container for the annual plan and the price first we'll give a line height of 20 pixels and the next we're going to give a margin right of 75 pixels and we'll hit save if we go back to our app and refresh we can see that this is looking much better okay so we are all done we have officially finished this course we have learned html and css from scratch and we've built our very first app we've built an order summary component that you can use on your developer portfolio thank you so much for watching this course