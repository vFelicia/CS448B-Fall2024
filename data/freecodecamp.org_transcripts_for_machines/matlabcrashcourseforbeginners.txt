learn Matlab from Phil Parisi Phil is a PhD engineering student and his teaching style is clear and to the point Matlab is a programming language and software suite used for data analysis scientific Computing and visualizations and it's widely used in Academia and Industry Hey There YouTube we are going Zero to Hero today in Matlab thanks for joining me we're going to Jump Right In right in front of us is the first screen you'll see when you open up Matlab for the first time this is called the Matlab IDE integrated developing environment this is the place that we do all of our programming in Matlab center of the screen we have the command window this essentially serves as a powerful calculator let's type some stuff in here let's just do seven plus eight or nine that gives us 16. we can do 10 minus five that gives us five how about the square root of 225 15. what about square root of 15 times 9. 34.8569 right these are just quick in and out commands to give us information now if you look in the right we've already got something popping up in our workspace we've got something called ants and if you see after every time we run a command we're getting this output ants which is short for answer and it equals the value of the previous statement that we entered in ants is our first variable that we've created if I just ask Matlab for the value of ants it'll spit it right back out to me as the most recent answer that was spat out if I were to do this again and say 8 plus 2 answer is now 10 you can see the workspace variable has been updated to 10 and I can ask for ants and it's 10. I can also do ants plus nine and we'll get 19. Matlab is holding this ants variable in memory we're getting kind of clogged up here to clear the command window CLC and hit enter and that'll remove all that crap in the command window all of our previous statements are now gone but they were executed which is why ants still holds its value right here and still equals 19 even though we just cleared away the lettering with CLC if you want to actually clear the workspace variables you'll need to use the command clear vars this is one word you hit that boom now there's nothing in our workspace and if I ask for ants I get nothing out because ants doesn't exist right now let's try creating some more variables with actual nice names that we can use such as x equals 10 and Y equals 20. here in our workspace we now have two variables X and Y with values 10 and 20 and we can use those variables to do further mathematics here we've used X Plus y equals 30 and 30 is saved to our ants variable of course we can ask Matlab for just the x value and just the Y value that we created CLC to free up our Command window there's another cool way to see our workspace variables and that's by typing whose just type that and we'll see the names of our variables that exist here notably this column the class column will describe what type of variable these are in many programming languages handling the types of variables are very important luckily in Matlab 95 percent of the time we're only going to be dealing with doubles double is just the way that Matlab holds the data that belongs to x y and all the other variables that we create this is a nice Bridge into other types of variables such as strings let's call W equals the word new no problem this isn't a number right this is the word new and if we type whose we'll see that Matlab has now created w as a Char this is short for character characters in Matlab are defined when we use single apostrophes around a string of letters or numbers if I do two apostrophes such as Z equals York with double apostrophes on either side and I do whose now we're seeing w is still a char and Z is now a string these three chars doubles and strings will cover almost anything you need to do for basic Matlab and we're not going to go any further beyond the data type discussion for now that's clear on workspace and start fresh one thing you may have noticed when we Define these variables every time we hit enter Matlab provides an output here if we don't want that output we can simply add a semicolon at the end of the sentence like this these semicolons are called suppression they prevent Matlab from outputting a line of code so Matlab still runs that everything we do in this before the semicolon Matlab still acts on for example if we Define x equals X plus seven we run this this line is still run but we just don't see an output by the way you'll notice that our X variable is now 26. why is that the programming language moves sequentially in this line X was defined as 19. when we run this line X right here is replaced with 19 adds 7 to 19 and you get 26 on the right hand side of this equation that value is stored to X if we ask for X Out X is now 26. another piece of useful Punctuation is the comma let's say you want to add multiple things on one line I'm clearing out everything right now let's say you want to do Define U is 25 and then me is 10. if I run this I can now act two things on one line two commands for one line they both output here if you didn't want them to Output what would you do you'd add semicolons at the ends of these lines in fact at the end of each expression so after 25 and after 10. briefly hit the up arrow in your keyboard and you're going to see that you can access all the old commands that you were using I'll bring this one back at a semicolon here and a semicolon here and we'll see no output but these two lines are both run we've seen a few popular operators I can do U plus me I can do U minus me I can do U divided by me U times me you to the power of me use that carrot on your keyboard to do the power we've seen square root as well square root of U is five one thing to note you can do compound Expressions if I do the square root of 8 times 9 . that's going to give me the correct answer the same as the square root if I defined X as eight times nine and then did square root of x these two expressions are essentially the same thing X is just holding 8 times 9 and we're plugging it in here whereas here we're just putting 8 times 9 in directly but it's the same thing mathematically and you can see we get the same answer out in both cases again you can always check to see what variables exist if you use the whose command and they're all displayed here that covers how our workspace works on the right if you want to view these variables in further detail you can always double click on them this would be useful when we have matrices and things like that that are not just a single number in a corner other aspects of the Matlab IDE on the left we have the current folder this should be the place that you're actively working in and saving your Matlab scripts to this will be more important later the toolbar is up top this is where you can create new scripts and files open things import data you know it's kind of just your overseen software component of the actual Matlab syntax you might be envious of the dark mode I've got going on if you want to also change that go to your preferences go to colors and this screen should show up uncheck the use System colors box set your background color to Black and your text to White you can also copy all the remaining colors that I've got set up here it's up to you though what your color preference is I like high contrast this is also a great place if you're looking to modify other things in your editor and debugger you want to change the font sizes things like that you can all do it from this preferences tab you've seen so far that Matlab can act as essentially a calculator on steroids but it's not very useful if we're just typing line by line and having to use the outputs that we create let's create a new script to do this you can click the new script button in the very top left or click new and then script these are very powerful and you're going to do the majority of your programming in these Scripts the power of them is that you can type multiple lines of code without anything happening to the Matlab command window you can see I typed clearvars but yet the workspace hasn't been cleared and that's just because I've typed these but I have not run these commands yet to do an actual running of your script you have to click the Run button save and run we need to save this file I'll just call it basics we run it and now look our Command window is giving us the output of x equals 10 which was the result of this line also it cleared all the previous stuff we had in our Command window and we cleared all the variables so now we only had X after we created it this is the real way we're going to code in this beginner course and the way that you should structure all your programs from here on out you can do things like x equals X plus seven add in W equals X plus y suppress those run this and we'll get no output because we suppressed every single line of code but w x and y all exist in the workspace because we ran these lines and they were all assigned during this process if we wanted to see a variable we can check in the command window or when you run this script you can just ask for that variable to be outputted and there we run it again and you get W equals 27. I'm running this the cheating way I love doing it control and enter is the quick way to run your Matlab Scripts you can always use this run button at the top as well let's clear out our script and our workspace using CLC and clearvars and start fresh here for a new topic vectors and matrices let's add a heading for our script and you can do that using the percent sign yes it's percent I know it's weird but it's Matlab standard for adding comments comments are very useful you can add them all over your scripts so that you know what values you're defining and why very often we know why we're doing stuff in the moment but many many days later even minutes later you're going to come back and wonder why you needed to do something you can add comments on whole new lines like this you can also add comments in line like this new line and inline comments and then when you run your script using control and enter you'll see that the lines these comments aren't even included Matlab still goes through and creates the variables as such this section will call matrices and vectors you're in The Matrix laboratory I hope you know some linear algebra and some basic Matrix operations if not stay tuned we're going to learn them first things first let's always start off our script by clearing our Command window and doing a clear vars operation that ensures that every time we run this script we're going to have a fresh output anything that was previously outputted will be cleaned out and we're always going to have any new outputs that we call Fresh in the command window and then clearvars will always wipe away the stuff from our last script and allow us to Define new variables that'll be available in the workspace at the end of the script this is good form for our first vector and vectors and arrays are going to be used interchangeably let's say x equals 1 through 10. I typed a colon when I said the word through if we run this with control enter here x is defined as 1 2 3 all the way to ten it's not just a single value anymore X is a vector or an array even in the workspace we see here it's defined as such holding these 10 values let's type who's in the command window and we'll see that X is still stored as a double but it's a 1 by 10 in size this is because Matlab uses the standard and linear algebra to do one row by 10 columns this is a horizontal array it's one row of values 10 columns across if you want to switch this I could do X transpose transpose is just a single apostrophe I run this and now we see the answer out is a vertical array X start out as horizontal I took the transpose and ants is now a vertical array we take a look in our Command window ants is a ten by one it's ten rows by one column X is one row by ten columns very important to keep this straight As you know we can also Define arrays and vectors using the linspace function x equals the Lin space and the arguments here are going to be the value you want to start with and then the value you want to end with if we run this oh my gosh we have a ton of stuff in our output it's because linspace will automatically generate 100 values between 20 and 50. and that's we're seeing here and these are evenly spaced values if I did from 0 to 100 we're seeing 100 at the end and we start at zero you can add one more argument to Lin space and that will be the number of terms you want the default is a hundred evenly spaced terms but if I ask for 101 for example now I get even numbers here because a hundred and zero are included in these 101 values I can also do 20 and now we're only a one row by Twenty values a 1 by 20 double as our workspace tells us linspace is the first function we've encountered and will cover functions extensively throughout this training when you have a function this is a builtin tool that Matlab has for us to use freely you're going to always open up functions with parentheses and functions take arguments these are the values that are inputted to tell the function what to do here our first argument was Zero our second argument was a hundred and our third argument was 20. each argument is separated by a comma note that Matlab doesn't care if you have spaces or things in between as long as you have commas separating your arguments no difference in the output another way to define arrays and vectors is simply to do it manually to do this you start by opening a bracket and then you type the values you want let's say 12 50 negative 8 negative 100. close the brackets and run this there's y 1250 negative 800 just as we specified here the only separator I'm using is a space you can add different spaces in here run it and Matlab won't care at all it'll give you the same output I'm going to suppress these outputs for now as well the important thing is that there is at least one space between you can also separate these with commas or no comma run this still the same output nothing's changed here so commas or spaces to separate values in an array or vector let's call our first Matrix a and we'll Define it as a two by two we'll call the first row one and three separated by just a space and to do a new row you have to use a semicolon and then 2 and negative 10 will be our third and fourth values if I run this here's a 1 3 2 and negative 10 ordered as we discussed because I have this semicolon here I could also add optionally commas between those values and we'll get the same output if I want to add another row no problem 88 and 99 we run that and we added a third row here Matlab will follow every single rule of linear algebra and it assumes you want to do linear algebra throughout your mathematics for example if I want to add a value to a it'll follow the linear algebra rule which is add that scalar value to each of the positions in The Matrix 99 plus 2 is 101. same thing with multiplication a times eight every single value will be multiplied by eight what happens if I do a times a if we run this and we've gotten our first error in Matlab just grow to love these errors but they're trying to help you it's going to be frustrating when you get them read these errors extensively you'll see here incorrect dimensions for matrix multiplication ah okay a is a three row by two column Matrix linear algebra rules state that we cannot multiply a three by two by a three by two that inner Dimension has to match what we could do is take the transpose of a and do this a is a three by two but a transpose is a two by three right here two rows by three columns and thus when we do this multiplication it works out it follows the rules of linear algebra but what if you don't want to follow those rules let's say you've got x equals Lin space 0 to 100 you've got your 100 evenly spaced values and you want to take I don't know the square of X so you want to do x squared well matlab's going to throw you for an error once again because this is a one by a hundred Matrix and you can't multiply one by a hundred by a one by a hundred but what if you just wanted the square of every value you wanted zero squared 1 squared 2 squared to do elementwise operations that's the difference here you can do Matrix operations or you can do element wise operations element wise operations need a dot in front of them it's going to be weird to get used to I know but the dot is exactly what you need if I run this it goes through X and takes every value squared it's not the best example let me just add 101 here so we get even values and now you'll recognize this is 0 squared 1 squared 2 squared 3 squared 4 squared right all the way down we should get a hundred squared to get 10 000. remember arrays in vectors are simply along one dimension like x equals 22 to 100. along one dimension matrices are along two dimensions there's a few more handy ways to Define common types of matrices if you want to make a matrix of all zeros you'll do ones and then add an argument here this creates a three by three Matrix of ones very simple if you wanted to change those Dimensions you could do something like this and it gives you purely a three row by one column array of ones if I wanted to do B as all zeros I'd do zeros let's give it the argument of ten it gives me a 10 by 10 matrix here you can always check that in your workspace too similarly if I want just to do a two by eight Matrix of zeros here's two rows by eight and the last one that we'll cover briefly is going to be the identity Matrix you'll use I I just like the eyeball in your face I of three and we'll get an identity Matrix which is just ones on the diagonal again can I add B and C together of course not the matrix dimensions must agree and Matlab will continually remind you of that I can add C and C together that's not a problem same dimensions and I'll get twos along the diagonal because of the summation a cool trick here as well when I had X was one to ten there's actually one more argument that we can add here and it's going to be this value between the colons if I do this we get what we've been expecting one to ten but think of this as start at one Jump by one value end at 10. if I wanted to jump every two values run this and I get one plus two is three plus two is five plus two is seven plus two is nine if I added another two I'd be beyond our upper limit and thus it stops at 9 and doesn't go to ten kind of Handy if you ever need to jump values quickly let's clear everything out and start fresh here an important part of working with our matrices will be grabbing certain values out of those matrices to use them for further calculations let's start for another example here basic a 5 3 4.2 it's going to be a that's a one row let's do eight nine and zero as our second row easy good start let's say I want to grab out one of those values how about this nine how would I do that we can use something called the index the index goes through a matrix or array or any variable and pulls out elements of those variables here a is a combination of all these individual elements including nine to use the index you're going to have to use parentheses then within those parentheses you specify the location of the element that you want here it's nine I'm going to call a second row second column and our output is 9. if I want to access that zero that's in the second row third column let's say I want to add that 0 to that 9 just like this we're specifying this value second row third column which is zero and we're adding it to the second row second column value of nine if you just have an array say a was only this it's just a simple 1 by 3 Matrix to grab a value out of that you can just specify a single number so A1 would be 5 A2 would be 3 and A3 would be 4.2 this is going to be very frustrating for programmers of other languages because Matlab uses something called one indexing that means that in the memory Matlab stores the first value of something as the first index this is because of the nature of doing Matrix algebra linear algebra needs this to be in the first spot there is no such thing as a of zero array indices must be positive integers or logical values final note on this you can also use end as an index that'll grab you the last value in a matrix this is convenient for let's say you've got a equals Lin space you know I don't know 220 to 900 and then you've got b equals one by every five to 98 980 like this and you want to find the last value of these well I could tell you right now Lin space has a hundred values in it but for B I have no idea how many values are in this so I can just call B end and I'll get the last value out of B from there you can work your way backwards if you want you can call B end minus 10. it'll go back 10 spots okay this isn't the end quantity minus 10 this is go to the last index and then pull back 10 spots so if we open up B here go to the end of B 976 and go 1 2 3 4 5 6 7 8 9 10 9 26. that's what we got right here very different from B and end parentheses here which grabs 976 and then subtract 10 which is simply 976 minus 10 which gives us 966. important differentiation there we will use these indices further when we get into Loops the last thing I want to note on it is that we can use these indices to change values of our matrices I've just got another very basic array set up here and I want to do this one value I want to change it to a hundred let's say it was a typo or something I can do a 1 comma 1. and then set that value equal to a hundred I'm going to Output a afterwards and we'll see that I've now corrected this value the first row and First Column value to 100. and we see it here in our Command window you can also pull out entire rows and entire columns I've only shown you how to do this with single stuff right now like asking for the first row second value of two let's say I want the entire second row here to be outputted you're going to use that colon again what you'll do is you need to determine what you want so here we want the entire second row so that means that we want the second row and instead of specifying a single value I'll just say give me them all and the colon will give you them all boom you can also think of this as giving you the first value through the third value this is the second row First Column second row second column second row third column and one to three just gives us the one two and three if you want just the second row first and second values the five and the four there you go and if you ever want everything you could just do one to end in case you didn't know what the end of this Matrix actually was short and sweet we're moving along well let's keep going let's take a look at a real world problem that you're likely going to be solving what is the maximum value of the following equation on the Range 0 to 5 we have the expression for y here what is the minimum of that function what is the x value where the maximum occurs and then Part D is what is y if we input 20.7 for x this is exactly the type of problem you guys are going to see in the real world let's go through step by step but you need to unthink how you typically solve these problems if you just had pen and paper you take the derivative of y you'd set it equal to zero and then you'd find what points are the maximum and minimum right typical very standard approach however we have a computer we have processing power we can calculate a bunch of different things so rather than solving this for One X value what we're actually going to do is generate X values from 0 to 5 and then calculate a bunch of Y values that correlate to those X values and then we'll just pick out the largest y value and pick up the minimum of the Y values and then part C and D we'll have to learn some more stuff as we go but no problem your brain is putting right now because you are learning so much let's get back into Matlab here we are with a fresh slate as I mentioned let's first generate a bunch of values between 0 and 5. I'm using linspace so that'll give us a hundred then at each of those X values let's calculate a y value and let's start easy here because it's very easy to get lost when you're writing these equations we want to do x minus 3 for the equation and let's just run this for now let's make sure that as we progress and add terms we're not getting errors this works we've now calculated what x minus 3 is and this is element wise stuff X is technically a vector it's a 1 by 100 vector and so is y right now 1 by 100 because every value in X is just being subtracted by 3 right now let's take the opposite of that for the equation and now we need to multiply this to the second power squared if we run this we're going to get an error why because this quantity here is an array it's a 1 by 100 array and it's being multiplied by itself right we're squaring it math in Matlab is Matrix algebra thus it's trying to do a one by a hundred times a one by a hundred matrix multiplication and that's what we're getting this error think how do we do element wise operations we just want each of these X's the first value of x to be squared the second value of x to be squared technically first value minus three to be squared second value minus three to be squared that's an elementwise operation add a DOT it even tells you right here to perform element wise Matrix Powers use Dot and then the carrot that's exactly what we want let's add the dot in there good and then finally we need to add 10 at the end to ensure that order of operations are happening and by all means Matlab is extremely smart and will do these appropriately it's more so for us as the programmers I like to add in extra parentheses do not do not do not add any other type of brackets or braces no no no no brackets are used when you define matrices right a equals zero and one that's only only only for matrices and arrays all right parentheses are dedicated for orders of operations and for indexing so use multiple multiple you can do double things here whatever you want do not use brackets do not use braces don't use these things no no no no no those are for other things in Matlab just the parentheses here and then I'm adding 10 afterwards great so I've got X on the Range 0 to 5 y taking those X values subtracting 3 from each of them squaring that quantity taking the opposite of it and then adding 10 to it fantastic but I'm a visual person I love to see things and that's how I learn and understand if you are too then this just isn't doing it for you yes you have all these values and we can find the maximum one but let's first plot this we're going to use matlab's plot command and just give it the x value and the Y values that you want to plot against each other hit enter and we've made our first graph in Matlab and it's beautiful xaxis are our X values from zero to five Y axis we see goes from about 1 to 10 and we have to find our Max y value looks like it's going to be around three right now but this just gives us a good idea of what we're working with we're going to cover plotting more advanced later in this but for now basic plot what's actually going on though is that this isn't a contiguous line these are just all the 100 data points that we've plotted really quickly just change this and add this argument you're adding a character star put that in there and you'll see on this graph all these little stars are the data points that we calculated that's what I'm talking about we've got a computer here that can do mad computation let it do its thing also now that we've got plots being made I've added this close all command that will close all those figures that we have up every time we run a new script and when we plot it'll be on a brand new figure so we get the new plot showing every single time but we still have to answer the question what is the maximum y value and this is where matlab's builtin functions come into play Matlab literally has a function called Max if we give y as the argument we'll get the maximum y value out right here you can see it's just about 10 . the reason why it's not 10 is because we're not checking every single infinite value that exists between 0 and 5. we're only checking a hundred of them because that's what linspace gives us is this answer correct just about it's pretty darn close to 10 but note that this is a numerical solution whereas 10 would be the actual theoretical solution if you want to find the minimum value how would you do that well you've likely figured out that minimum Y is probably the one that'll do it for you and this one comes out to an even one but let's say you didn't know the name of a function right I clearly know Max and Min those are easy but if you're looking for more advanced functions how would you even begin to find this Matlab provides awesome ways to get help first and foremost is my favorite you click this little FX down here and this opens up a search for functions boom I've already got minimum searched in here and you can see all the functions that in the description have minimum in it if you want to take an integral of something you're going to search integral in here and boom numerical integration all these different things that are built into Matlab that you have at your disposal maximum again here we are let's say you want to round values ceiling floor fix you've got all these options take advantage of this tool simply by clicking the little f of x in the bottom of your screen however I've now found these functions how do I know what their arguments are Matlab has this covered by doing help and then the function name if you run this in your command window and then open it up a bit more you get documentation on this function men minimum elements of an array it's the smallest element in the vector X what's X right here it's your argument and it tells you all these conditions for what this function does you can also type doc and then the function name and it will open up matlab's online documentation for this function it's basically the nicer version of what we saw in just plain text there before you've also got this help bar that you can search in I can look for the maximum search this and I'll see that there's a cumulative maximum function some sort of name length Max and moving Max this is the max that we're going to be using here just the maximum elements of an array there is so much help and guys if you aren't peeing your pants right now and subscribing to this YouTube channel oh if you've lost your mind this is gold as a programmer you are never ever ever ever expected to know all the functions and all the possibilities of a programming language no no no no you need to know the basics and then you need to know how to find information that you need almost every time that I program in Matlab I end up going online going to this documentation and searching for something new the other way to do it you open up a new browser on the web and you say how to find the minimum of an array in Matlab look this up boom MathWorks website has a hint boom right here all this help is available guys you are not alone do you see when I was searching for this right here look in Java python C plus plus JavaScript they're in Matlab already in C everyone everyone has to get help in these languages the internet is the best resource for you guys the world is your oyster here take advantage of it anyway I digress let's get back to our problem all right we found the Max and the minimum using the Max and Min functions at what x value does the maximum y value occur okay with a maximum y value I think we found was about 10 so we need to go back and find that x value in our script let's take a step back we've got Max of Y that's good but we need the index of that right at some x value we put it through this function here and we got some y value that was the maximum so if we work backwards we might be able to get that index and this is where reading about the functions help Max let's take a look here this third paragraph m i max of X also Returns the indices into operating Dimension corresponding to the maximum values oh that's exactly what we need the index is what we want let's try a couple things here let's try first let's just save this to Max Val and do Max y I'm going to suppress some output here we don't need a plot right now so I'm going to comment this line out so Matlab won't even run this and now if I run boom we're just getting that maximum value out as we saw before though in that help thing it said if we do M and I we're going to get the maximum value and the index of it if we run this we get two outputs now this is how you take multiple outputs of a function you actually pass it in a matrix of values and then the function will assign appropriate values to these outputs now I've got I equals 60. that means the 60th value of I if we open up sorry of Y if we open up y one two three four five six you know if you go all the way over to 60 should be boom right there the value we're expecting that means the 60th value in X is the One X value that gives us the maximum y value 60 right here so 2.9798 of course guys you don't have to go and open this up every time we're smarter than that we can just do X of 60 and that'll give us the x value better yet let's come here and let's do x max Val equals X of I what is this I it comes out of here and it has the value of 60. if we run this we'll get X maximum value 2.9798 this really gives us the maximum value of the Y function the last question they asked us was how to find the Y value of Any Given X this is not something we can do by just generating all these different points right that'd be exhaustive I could give you any x value right 9.99999957892 right and I there's no way that I was going to calculate that in my Lin space so at this point we need a different approach what we're going to do is Define something called a custom function more specifically Matlab calls these Anonymous functions but they're just what we're used to when we plug in a simple value into an equation and we get one output and we're going to say at X Y at x equals this if we run this we get an error guys I can honestly never remember how to define Anonymous functions you know why because I can open up a new browser and type Anonymous functions in Matlab heck I've even made a YouTube video on this but I don't remember these things because they're very quick and easy to look up here we are we do at uh okay I just forgot to add parentheses around X not a big deal I come here parentheses around X and we're good I run this no more error but why is defined differently if I output y right here it's no longer just this entire thing put through our function it's actually a function handle what the heck is this don't worry so much know that you can now use Y and plug in any x value that you want run that script and there's your answer it's a massive number also note that Matlab uses scientific notation here this is times 10 to the sixth power but now I think we were asked the Y value of 20.2 something like that we can run this and there we go if we input this value of x we get this value of y out these are called Anonymous functions and they're very quick and easy methods to get outputs the problem actually called for us to do y of 20.7 so I'll go ahead and do that for you we run that note can be a little bit confusing because previously we've done something like this where X of 2 is actually the second value in x note that these are very different X here is a matrix it's a 1 by 100 array of values y isn't a matrix or array there is no index to y y is defined as a function handle these function handles they don't have multiple components like X does X has all these values we can choose from y does not when we give a value to Y and it's a function handle it simply inputs that value and then runs it through the equation and that's why these look similar but act very different here is another question to consider plot the equation from x equals negative 10 to 10 of it's that same formula we saw previously Part B is going to be we have to change the curve to add 15 instead of 10 and then part C is change that curve again but we're going to do x minus 5 quantity squared in the parentheses this is prompting us to think more about plotting we're going to cover that for the next few minutes let's start fresh in Matlab here we've got X and I've changed this to negative 10 to 10. we aren't going to be using this Anonymous function form anymore I'm just going to clean this up to what we need is the bare minimum and let's run this to make sure things are working I've called our y y1 because for Part B and C we can create a Y2 and a Y3 I'm just gonna copy this for now it's gonna be the easiest way to make this work there's our Y2 and our Y3 will be like such very good and our Y2 we add 15 and our Y3 we do this as a minus five excellent this will get us our three curves and if we run this good we've got 100 values for each of these y's and then we can plot all those values because it's against the same X right we're using the same x value negative 10 to 10 for all these different y's and these will give us our three curves essentially right now we have three different pairs of data but before we get into plotting these and I want to plot them all side by side around the same graph potentially let's just start talking about plots and figures in Matlab Matlab calls these things a figure in our Command window let's just do figure one and hit enter it's going to open up this window and it contains a blank figure not very eventful but as we begin to plot things on it for example let me do a split screen here it'll be easier to see here we go here's our figure that's just all blank let's do plot X and y1 right we do this and there we go the plot is starting to be populated now if I did plot X and then Y2 we'll see there's a slight very slight change there actually not substantial but let me plot the third one now Y3 and there's a that was a much bigger change the curved shape is staying the same but if you look at our axes those are shifting what matlab's doing it's rewriting this graph on the same figure see we still have figure one right here the proper way to do this to add multiple curves of the same plot is going to be using the hold on command okay so here I've got Y3 plotted this is the most recent one that I ran if I did hold on and then plotted X versus y1 aha there's our other line let's do that again hold on and plot X and Y2 there's our third line in yellow there matlabs automatically recognizing that these are going to be different lines and hence it changes the colors being used but let's make it ahead of ourselves this graph is actually pretty crappy we don't have any actions labels there's no title this is this is kind of garbage for now let's let's start a new plot here let's call figure two and you know what let's do all this second figure work back in our script I'm gonna go full screen here again this close all is going to wipe out all those figures and we're starting fresh let's start with our plot so plot of X versus y1 we run this we get what we expect let's add an X label that's gonna be our xaxis this is simply X great same thing for the Y axes let's do y label and Y could not be simpler you can I like to do these with a comma but you can put them on separate lines it doesn't matter you run these and it's created we can be more specific here and specify what figure we want because we can create multiple figures and plot Y2 on that second figure now two figures will pop up here's our first figure which has the X and Y on it and the first curve and here's the second figure which has our second curve notice that these X label commands when they follow a plot they go on that plot here the X label and Y label commands come after this first figure plot and then right here we plot the second figure but we don't have any X axes Y axis labels once you command a plot anything that follows will go on that plot until you start another plot let's keep rolling with this one let's add a title using the title command we call this Y versus X and we kind of had this as like problem a from our problem sets so be nice to have that graft on there too so it specifies there's our problem a I like having grid lines on here it makes things a lot clearer you're just going to call grid on run this and we're pretty much there guys this is looking like a very nice graph the only thing and this is getting Nitty Gritty at this point we should be plotting data points because these are just simply raw data points right now right this isn't a curve this isn't one continuous curve y1 and X1 are 100 data points so we really should be plotting these as those Stars as I talked about earlier and that way it's a bit more clear I'll go full screen here to see that we're just calculating y values at different X values along the way it creates a shape of a curve but it isn't overly misleading of what's going on here if you want to change the color of these the shapes of these how do you think you'd do that what have we talked about so far when you need to get extra help on a command throw this in your command window help plot scroll up a little bit and you'll see there's a whole plethora ugh Gold Guys gold right here blue green red these are all your oh blue green red these are all your colors you can do different shapes and things and then for your lines you can create different things here let's go ahead and do that you add all those things right in here so if I wanted to do blue stars I'd do blue and then star what about blue circles the o how about magenta squares let's do MS I'm not going to plot this figure for now just the one and there we have magenta squares kind of fun but very useful to make sure you're separating out the different things that you're plotting on the same graph and that's what we want to do I want to plot all of these curves on the same graph to do that we already discussed the hold on command let's do plot X versus Y2 and let's make it something different let's say we want these to be I don't know blue triangles I think that's going to be triangles we can do that and then those will be added on note that we didn't have to add any more X label and Y label and title stuff because we already added that to the figure and now we're just adding another line here another data set onto the figure very cool how this works but you can see every every Diamond here is simply a little bit higher than every Square you can click these points to get the actual values that you're calculating by the way and you'll see that we're just slightly above as you go along the curve here last thing we have to plot is going to be that final curve let's do Y3 and let's plot that as I don't know Green let's do plus signs for now we'll go ahead and do that and now we have our green plus signs on there too but if you just showed someone this graph they have no idea what equations you're using they don't know what these belong to or how they relate what you need to do is add a legend go ahead and do the legend command see this is so straightforward I love plotting a Matlab I hope you're seeing how easy this is and straightforward you just keep adding the things that you want and Matlab will keep adding those to your figure we'll do Legend and then we need to name the legend entries I'll do y1 Y2 and Y3 note these have to be given as characters or strings and then Matlab will add these to our graph and it goes in order okay so the first thing you plot will correlate to the first thing that you name we do this and Matlab will add an automatic legend in the top right you can click and drag this by the way and move it around so you can make it easier for your viewers you've also got a lot of tools built into this chart look on the right here you click this hand that's your panning hand and then if you go and click on the graph click and hold I can scooch this and now change the viewing area let's see how my axes are changing right now pretty cool after that I can click the home button to go back to the actual View you can zoom in click the plus magnifier and I want to zoom in to where all these Peaks are happening click and drag and now we've zoomed into all these Peaks pretty cool I can also zoom out by just clicking the zoom out and clicking around the screen here and you can always go back to the home at the end if you want to copy this figure and put it in another document you'll click the copy figure button right here and that'll enable you to open up a PowerPoint presentation a Word document or something like that you'll copy the figure you can also save this figure and do a couple other things here but mainly edit copy figure and paste it into something else if you want to change the axes ranges for example yeah we did X from negative 10 to 10 but maybe I just want to hone in on a specific part you're going to do xlim and then pass a matrix here okay this Matrix is going to be what you want for your lower limit I'll say 0 to 2. so this Matrix is your actual limits okay you run this and then you'll see our xaxis is now just from zero to two if I wanted to change the yaxis you guessed it y Lim and I can do this from zero to a hundred run this and now you'll see that the y axis has changed only looking from zero to a hundred remember I can still use my pan tool to look around here and see the other curves I can use my magnifying glass to zoom out a little bit more see some more of that curve look around these tools are here for your disposal last thing if you want these to be filled in you have a couple attributes that you can change so these symbols let's say I want to fill this in you're going to do an attribute name and then the value of that attribute so here we want to do Marker face color and then I want that to be Magento and let's say I also want to change the marker size and I want that to be size 10. you're probably thinking where is he getting these things where are these attributes stored where can I learn more about these attributes use matlab's help scroll around read these things Google them you can always find more information on the stuff online and using the stuff that I've shown you in the command window I think it's got them here somewhere it's going to look for marker size and see if they use this at all on the page here we go we've got marker size 10 we've got marker Edge color oh okay so here they change the edges to kind of a blue and I did a marker face color change the face values you can change the lined width so those lines that I was plotting earlier you can change those let's go back down here let's plot what we have here you can now see how our axes are still kind of off here but there we've got those squares that are now filled in a little bit easier to see these green things are kind of difficult right now but you get the notion you can play around with these things you call an attribute and then you call the value you want that attribute to be and then with your lines if you want to plot this as a line you can add a dash dash in front we do this and you'll see we get a dashed line with the squares on it if you want to get rid of the squares well then you don't specify the shape that you want to plot I'm going to get rid of our our limits here because these are kind of annoying if you don't specify the shape then you'll see we just have a dash dash line that's magenta representing our y1 curve you'll notice that we've put all of these three curves on one single plot and we did that with the hold on command Matlab also offers us the option to split these into three different plots or put them on side by side plots I'll show you what I mean we can create those different figures remember when we did the figure one the figure two let's put these all on separate figures so instead of hold on let's just do a new figure and a new figure and we don't need a legend anymore because we're putting these all on different figures in fact three figures let's run this and you'll see that we now have three figures each for a curve that's one way to split things up and then you'd have to add for every figure these you have to do the X label you have to do the Y label you have to do the title you need to add all that stuff to populate these graphs as well another option you can do and depending on your application this could be very useful is using something called subplots can do help subplot and you can learn more about the subplot approach but what subplots do is basically you're creating this like a matrix of graphs you know how we have a two by two Matrix and we have values in all those two by two spots we can do that with plots we can call subplot I can call two by two here and then specify the place I want my first plot let's just call it one for now but this will create two rows by two columns of plots get rid of my other figure commands for now let's just comment these out so we don't get confused and I'll show you what this looks like there okay see how this plot is in the top left of a two by two looks like a matrix of graphs almost right if this is the layout so you can put these plots it's in the same figure but it's in a different area of the actual plotting area it's kind of hard to describe this with words but I think you guys are seeing it from the visual let's say I want to add all the other curves then in these other spots I would do subplot same same subplot here so you keep the same dimensions then I'm going to add two because I want this one in the second position let's go plot and do this one we'll see this one come up now in the second position and it goes top left is one and then two then three then four let's get this third plot on there as well two two let's put this sorry this one should be in the second spot this one should be in the third spot uncomment it and we'll end up with this beautiful graph again we need to add all the the labels and the titles for every one of them if we want that let's go ahead and just copy those in right below those plotting commands those all be populated but this a two by two isn't the appropriate approach for these graphs right what would be better what would be a more visually appealing method for this what type of Matrix a 1x5 a 10 by 10 hopefully you're thinking maybe a 1 by 3 or a three by one we've got three graphs here let's go ahead and do that let's do one by three for all of these and this will give us one row of three charts then as we expand this out we get a nice side by side visualization of these three plots and that'll be a sufficient answer to that problem we started with about how these curves change with different parameters let's take a stab at another question here we see based upon the following equation what percent of Y values are greater than 0.8 for x equals 0 to 10 we have y is the sine of x this is one that if I'm being honest I don't even know how I'd solve this analytically you know with what we said our equation would be solve for values at x equals zero and x equals 10 and try to plug these in and then look at the the period of the sine wave so this would be a tough one to do with paper I honestly don't know how to do it I'm sure there's proofs and things like that but if we break this down we know that the sign of any any input there will be from negative one to one so we know that some values should be greater than 0.8 right we'll have something between 0.8 and 1 for I don't know how many X values but that'll happen so that's at least good so it's not zero but we'll need to essentially check some data points similar to when we plotted we developed x from 0 to 10 we calculated some y values and then we had those individual points that we plotted remember that we're essentially going to do that but now we need to check if those values are greater than 0.8 and then we'll have to sum those up and see how many we have and divide that by the total amount that's going to be the approach for this problem we have a clean slate and Matlab and I've got our X going from 0 to 10 and our Y is just the sine of x nothing too eventful here I like to plot things again I'm very visual I'm going to go ahead and make a plot of this just so we see we've got an idea okay let's pop this as as points again we don't want to confuse ourselves what's going on just do dot that'll give us just points now if we look closely here's 0.8 and it looks like it's going to be some portion I guess this is around 15 you can hold me to it we'll see how this problem goes I have not solved it yet but we can mean if we were really desperate we could just count these points and divide by the total number of points but I'm trying to teach you guys basics of logic in this problem we have our points and we're getting real fancy what we can do let's do hold on plot another thing let's plot just the X values let's do one at zero and ten and then let's do Y at 0.8 and 0.8 see what I'm doing here I'm not creating actual X and Y things to plug in here I'm just giving them the direct arrays so that'll plot point zero zero point eight and then 10 0.8 that'll give us a line let's make that a red line that's dashed all right let's do that really quick and now we can get a better visual for we're looking for all these dots above this red line kind of cool and we're going to add some more line I'm sorry we're going to add some more points here let's make this geez hundred thousand points mat level have no problem for this by the way it still takes like no time to run but we have a lot more points now you can't even see that it's not a line these are individual points that'll give us a more accurate answer than if we did I don't know just 10 points right this is a very inaccurate approach you can hardly even tell this is a sine wave so it's always better to run more points especially when we have the computation ability with modern computers sounds good we need to check if these values are greater than 0.8 this is the bases of logic logic gives true and false values out after you present a logic statement let's start by just saying x equals five no problem there we're just back to our Command window and let's do X is greater than two run this and we get the logical of one this is telling us yes your statement here was true remember cute computers started with zeros and ones and they still are zeros and ones by the way we've just progressed to languages like Matlab we don't have to type zero zero one zero one one zero zero but the bases of these things are still zeros and ones let's do X is less than two which would be the answer here if one is true zero will be false and you can I can even type true here and get the logical out of one and I can type false and get the logical out of 0. thus if we want to check multiple values let's define a as just a matrix of ones let's do a 1 by 10 matrix of one so a will just be a bunch of ones here what if we did a is greater than zero what will come out mat level performed this logic assessment on every element of a one is greater than zero one is greater than zero one is greater than zero and thus we're just going to get the Matrix out of all trues maybe not the best example let me do a is ones and then multiply this by five so we'll have a bunch of fives and now we can do our logical test a greater than zero and we get a logical array of ones out which is telling us true true true true true true true true right this is exactly how we get this information in zeros and ones and now we can use zeros and ones to easily count I can use the sum function having been discussed you probably know it existed sum of a will give us 50. this is just summing up these 10 values but if I save result to the logic statement a greater than zero my result is this true true true true true array and if I sum result I get 10. this confirms that 10 of the values in a are greater than zero there's tons more logic to do guys I'm going to run through really quick some of these other logical operators you could do eight greater than or equal to eight true you can do 19 plus 5 is less than a hundred true you can do 55 does not equal to this is a fancy one here a tilde 20. and that gives you logical of one because 55 does not equal 20. by the way on your keyboard this should be like the very top left shift and hit that one the dash is what's next to it this little thing jig I call it a tilde maybe it's an e tilde I don't know other stuff you can do compound checks so maybe 10 is greater than 5. and 11 is greater than negative 100. so this will check is 10 greater than 5 that's true this will check is 11 greater than negative 100 that's true and if both of these are true then it'll output true okay this is kind of getting to the whole field of logic you may or may not be familiar but these ands require both of these correct if I did an or actually let me make one of these false this is false right 11 is not less than 100 so we get false because both of these are not true we get false that's the power of the and if we look at or when we take this and do or which is just a vertical bar or 10 is greater than 5 that's true 11 less than negative 100 that's false but only one of these has to be true only 10 greater than 5 or 11 less than negative 100. if I run that I'll get true okay that's all I want to cover on the logicals but let's go back to our problem we have to figure out what percentage of our values and Y are greater than 1.8 how do we do that well if a value of 1 is greater than 0.8 that'll give us a one out so maybe we can compare this entire Matrix of y's y greater than 0.8 let's see what our output is oh my goodness yeah we have a lot of values here we're going to get a ton of stuff a bunch of zeros here let's keep scrolling through and see if we find any ones there's so many values ah here we are found a bunch of ones that's good that means our test worked to some degree let's sum up those values let's save this as y I'm going to do y underscore greater that's going to hold the array output of this so now this will be saved to y greater I'm going to stop plotting this for now and y greater is the same size as our y value but you can see in our workspace it's got a check next to it because if we do whose take a look our y grader is a logical array it's not the typical double that we see before but we can treat this as something that we can sum up let's do the sum of y greater and that'll give us the total number of values that are greater than 0.8 then we can divide this by the total number of values that we generated and that'll give us the percent of values that are greater than 0.8 so let me do final percent as a variable here some y we have those values and I'm just going to divide that by yeah if we could cheat here we could change this to be you know we could just copy and paste it there that's bad form because what if we change this to 100 values now we have to change this to 100 values instead let's do the length of Y new function Here length of Y will give us the length of Y how many elements are in y you can also call height of Y which would give us the number of rows and you can call width of Y and that'll give us the number of columns length will always give you the larger of height and width great we call length of Y we run this and we get final percent is 0.25 kind of cool and now let's actually ramp this back up make sure we have more and you can see that our number changes just slightly here it increases to be more accurate if we just do one value yeah we're gonna get to zero because the one value we sample didn't actually do anything if we do 10 samples we say it's about you know 20 of the values and if we increase this to a thousand we start honing in and the value doesn't get any any more accurate so we're just dealing with 0.2574 as the answer to our question if you want to technically make this a percent you can multiply this by 100 and then change this to be 25.74 percent this was a super quick intro to logic statements but very often these things are super useful for quick checks of things like we did in this problem one cool thing we can do is change this 0.8 value and we can now check if things are greater than 0.5 let's say but we're also going to want our plot to update let's create a new variable and call it y check that's the value we're checking against and I'll call it 0.5 for now and we can replace this with Y check and Y check and then this with Y check this is good programmer form you want all your parameters to start at the top then come in and do your actual actions and then have your final output I'm being sloppy here but work with me you get the idea we start out and we Define parameters these are the things that we change very easily and quickly and it commands the rest of the code imagine you've got hundreds of lines here you don't want to go back searching for wherever this value made sense or whatever you know you want these things to be consistent so you can update one value like why check to zero and then automatically your code follows suit and updates in those places now if we run this code look our line adjusts to zero and the final percent is updated as well if you're wondering why half the values right if it's a sine curve you should have should be greater than and then half should be less than it's because we're going over like one and a half periods of a sine curve here if we adjusted this to be right right here as where we cut things off looks like it's about let's see what is this point here um let's actually change this to prove what I'm saying here looks like it's around I don't know 6.3 so let's change this to 6.3 what else do we have to change this value right here to 6.3 so let's now create a variable called Max X and do Max X and then this equals 6.3 0 to Max X we run this and there we go we have got about it's about one period then one Crest one trough and our final percent is just about fifty percent there I was eyeballing it but that makes sense it's a good logic check to know that our code is running as we expect it to that's the final lesson to take away from this as well don't just blindly send stuff out into the ether and hope that Matlab is doing it correctly matlab's doing what you tell it to do your parents at some point probably told you that computers are stupid and they are because they listen to everything you do and if you're stupid then you're going to create a stupid output I'm not calling you stupid but garbage in is garbage out you can write a crappy program and it's not going to give you a good answer you need to write good programs that you are confident in and those will give you confident accurate answers let's take a stab at this problem part A is to generate 10 random numbers from one to five so randomly generate a three randomly generated two a four one five this would be from a uniform discrete distribution and then we want to count how many threes there are in Part B we're going to display the word wow if there is more than twenty percent of the numbers being three in part C we're going to do a and b again but using a for Loop we'll introduce the for Loop mentality here and then we're going to extend this instead of 10 random numbers to 10 million random numbers and we're going to compare the speeds and the time it takes to compute using the two different methods we are back to a blank script in Matlab I'm now using Ubuntu as my operating system for those using Linux distributions out there Windows was the first half of this class nothing changes by the way it's basically the same exact approach the same syntax that Matlab is using you'll only notice some differences in the IDE but for learning purposes it's the exact same just offering potential Comfort to those of different operating systems first thing here as always we're going to clear everything in the command window and clear our variables we need to generate our random numbers and I'm going to call this Matrix a a will hold our random numbers if you want to find some other random commands feel free to look around the webs I'm going to use Randy we can find more about Randy by taping help Randy Randy is going to generate integers with a uniform discrete distribution that's exactly what we need let's go ahead and give the arguments five so if I just run this a is four if I keep running this script over and over we're going to see that that random number changes so this is generating just one random number from one to five I want 10 of them I want a 1 by 10 matrix and here we're getting random numbers 10 of them from one to five great the first thing we need to do was to count how many threes there were if you recall we've done some logic checks if something's greater than 3 if something's Less Than 3 if something does not equal three well let's try just running something like this the fifth term equals three so we can check a single term if it equals three or not and you'll see in the output there we just gotta hit logical is one as our answer and the first second third fourth the fifth term is three we were basically just checking this single term here remember as we learned we can do this for whole arrays so we can just check in general if a is equal to 3 and we'll get a entire logical array out in this case we didn't get any threes so our logic array is just a bunch of zeros but as we do this in this run we had looks like four threes to count this all we do is add a summation around our logic statement there which will sum these up and give us the number of threes so here we have two two one two zero two occasionally we should get three all right here's three and we wanted to display wow if this happened this is where we can introduce the if statement the if statement will act if a condition is true for example if this value here which we discovered was just outputting three it outputs the number of Threes that we have in this a matrix if that is greater than or equal to three then we will output using the display command wow and then we have to end at the if statement you'll notice that every time we open an if you have to do an end to the f this display will simply output to the command window and we can begin to run this there we go there's our first time we have one two three four threes in this one and that time we were able to display wow to the command window when this statement right here that I have highlighted evaluates to true then we get an output to the command window because we asked for it right here and to be thorough for the problem it wants us to Output the number of threes so let's go ahead and do this as num threes equals the sum of a equals three and then we can just replace right here num3 then with our outputs we'll get the random Matrix a the number of Threes that we had in The Matrix and when num3 is greater than or equal to three we'll display wow run this a few more times so we get one more hit here there we are wow we had three sorry we had five threes in this run and we displayed wow that's the basics of the if statement from here our instructions were to go ahead and do a for loop with the same mentality I'm going to introduce you to a section notation to percent signs side by side introduce a new section you can see this blue highlighting here it might be white it might be black depending on your system setup we're creating a new section right now and we can run each of these sections differently this will be section one up top foreign we can be more specific on what we're calling them this is the if statement approach and down below in section two we have the for Loop approach it's these double percent signs that Define a new section the benefit of this is that in each section we can kind of run them independently and they act independently of these other scripts that it's involved with in the same dot m file so if I run this script down here and just say x equals 10 and run this everything up here is still the same nothing changed I only ran this section got my output of x equals 10 and a new variable was created if I do CLC and clear vars down here and run this it's as if I'm just running this own section here which is what I'm doing Matlab only runs each section independently control enter is the best way to run your independent sections you can also come up here to your run button you've also got run section on the left and that'll be your section depending on where you're running if you use the Run button in general it'll go through and it will run the entire script as you can see we end up with just x equals 10 at the end because of this CLC and clearvar statement run will always run the entire script run section just runs the individual section that your cursor was in that's because that's the active section and Matlab assumes you want to run that individual section let's start with a clean slate to discuss for loops for Loops are more advanced programming techniques and can be very challenging for beginners so please don't be put off I promise you you'll get it they're useful when you need to do the same thing over and over again you do a for Loop for a specified number of iterations and then it stops and the rest of the code will continue to run of course it's best demonstrated with an example let me go ahead and write a for Loop for I equals 1 through 10. let's just output I and then end the loop I'm going to run this and we're going to see in our output that I is just being outputted 1 to 10. so what's going on here well you know one to ten right you've seen this before if we just do that in our Command window it's going to do what just give us 10 values one to ten no surprise here but we're using this variable I and this could be any variable it doesn't have to be I I is just what's typically used you could call it a counter if you want to and then change this to counter and counter is going to go from 1 to 10 you could call it your friend in case you don't have any friends now you're oh look at the end you have friends that are you have 10 friends see look at that programming's beautiful the fact is we're going to call this I and it's a placeholder value that you're using in each of your Loops but what's actually looping what's what is this Loop iteration that we talk about every time this runs the value of I will change I starts at 1 I equal to one and then this code is executed if I have multiple lines like I plus 1 and display I and all these things in here all this stuff between the four and the end is run with I equal to 1. so if I run this and scroll up during that first iteration oh let me just clear some stuff here sorry about that so you'll see and clear vars so we just have a clean output here we get I equals one and then I added I plus 1 and then I just simply displayed the letter i which happened right there see how I displayed the letter I and not the actual value which would be I like that just the letter i so every Loop every time we run this code the value of I will change it starts out as I equals one because we asked it to right here in the next Loop once it hits end it goes back up it goes back up and I becomes 2. right here I equals 2 because of this statement here then we add I plus 1 and we get the answer out to be three and then we display the letter I right here I that's all the commands so we go back up I now becomes three I equals three three plus one is four display the letter I and we do this over and over and over until we get to 10 which is why the last Loop is I equals 10 I plus 1 is 11 and display the letter i we get to set the number of Loops right we're telling Matlab we only want I to go from 1 to 10. if I want I to go from 1 to 10 skipping every other number there remember just like we did earlier this will go one three five seven nine if I run the code I is 1 then I is 3 I is 5. i7 I is 9 and we have all the other outputs that we asked for as well this is for Loops while Loops are different and we'll cover them later how does this relate to what we're trying to do though in our problem we're trying to count the number of Threes how is this even useful for Loops are very useful for going through numbers and a matrix we can use this I as an index so we could go through and if we called I or sorry a like we had up here we could call a of one we could call af5 and we can go through and then do checks on each of the individual components let's generate this random a matrix down here now and instead of going from one by you know 1 to 10 here let's just go from one to the length of a and the length of a will be what it will just be 10 because it's a 1 by 10 matrix and 10 is the longest dimension we'll go through from 1 to 10 and I'm going to check all these values inside a I will start with this let's run this what will happen I is 1 to start we run this and this is equivalent to running a parentheses 1 which gives us the first term of a on the next loop I becomes 2 this becomes a 2. which gives us the second term of a so it'll end up printing out line by line here what a is here a two one four four two one four four it's just going through each of those indices we want to do a logic check right we want to see if that value is going to be greater than or equal to 3. count the number of threes so we can do a is equal to 3 here and we'll get logicals out right we're getting all these logicals now zero zero zero zeros all the way down we get oh geez three threes in a row at the end there they are now we need to count these ideally we'd establish some sort of num3 variable again that will equal the previous value and we'll just add one to it so every every Loop that we get this to be true ah we should make this an if statement so we should do if AI is equal to 3. then we run this and we'll end that if statement this is called a nested if statement because it's inside of another loop nested if so if this term of a is equal to 3 if that evaluates to true then we do this we say num3 is equal to the previous value of num3 and we add 1 to it we're counting these values of three as we go through the Matrix if we try to run this we have no threes in that one but here we have a three and we're going to get an error and that's because we didn't Define num3 before this Loop started so Matlab tried to grab num3 it doesn't exist we need to add num3 equals zero to start because our count of numbers of Threes is zero we have no no threes yet until we start going through the loop and we count every time that this is added let's run it there we are num3 equals one run it again we get two outputs here right because the first time we had a hit we outputted and the second time we had a hit we outputted and it added one great and then at the end we can add just the same logic statements right here we can display wow if num3 is greater than or equal to three run this a few times let's see if we get there we are with our wow if you don't want to have that output every time you can just simply add a semicolon there and we'll just get wow a bit more complicated and it is for this simple example but it's often good to learn on examples where you know the answers are true so that you can check your for loops with it the final part of this problem was to calculate it with 1 million variables as in we're going to generate one million random numbers and let's run these side by side now I like to make my sections when I'm initially learning how to do these things so it keeps it separate now that they're both running let's go ahead and bring this together going to get rid of the section notation I'm going to add a comment down here still so we know this is the for Loop area and just for Loop we only need to generate one Matrix of random values and then let's see what else we need to do num3 here we don't want to have the same variable that we're using for these different areas so let's go ahead and name this one num3 underscore if because it relates to the if statement stuff we're doing and then we can just leave these as number three down here and actually we should be good programmers and name it num34 right and you can see too Matlab offers depressed shift and enter to rename the other two instances I like that and now we have num34 and we have num3f in the other section we can run this all together and we should get outputs only when we have the Wows you'll see we get two Wows because both sections are displaying them here we can suppress this output as well if we want and we'll just get the random Matrix and our Wows out the last thing was to compare the times with a million I got distracted there so we want to make this a million so here's a hundred thousand million 10 million I believe is what it asked for 10 million points let's run this oh dear make sure that you no longer output a as you can see your computer is going to try to output a million values now in your uh command window make sure you suppress that and notice how greater than or equal to 3 no longer is applicable right we're always going to get that with a million 10 million values we want to make this 20 percent so 0.2 times the number of values generated so times the length of a same down here greater than or equal to 0.2 times the length of a good so that way this comparison statement here will change as we change our a value sorry change the length of a now if we run this oh I have an error this should be length fully spelled out and good we're able to run this now sometimes we output wow sometimes we don't makes absolute sense to time it to get the duration of time it takes to run a specific section of code what you need to do is use matlab's builtin function tick and talk tick is where you want to start timing something and talk is where you want to end it if we run this Matlab will automatically give us an output about the elapsed time between tick and talk to save these as variables let's call time if which is the time it took to run the if section you do that equal the talk we run that and you'll see we get time F here 0.0040 so these are in seconds by the way seconds let's do the same thing for the four section add tick and at the end add tuck we want to save that as time underscore 4 equals talk run this and we have two different times here the time to run the if statement what is this four thousandths yeah tens hundreds thousands point zero zero four seconds here a time to run the four statement section is .0450 it seems pretty insignificant right that's both less than a second we have all the time in the world right now we're in no rush but this is actually a huge huge insight into some of the challenges that we see in Computing for Loops in general are going to be slower and right now does it matter in our script no we're not even waiting a second to run this it's hardly significant but imagine if you had a script that took four days to run write your if statement version of it took four days and you're for your for Loop statement version of it took 45 days right that's that's a pretty big deal and even if it's the difference between four minutes and 40 minutes is a big difference right so when you're making your code and your scripts you want to consider the most optimized method and this is something that takes years of practice I just want to introduce you to it now so you're aware tick and talk are great ways to know what's fast and what's not the if statement method this is typically called vectorization because you're just dealing with vectors here I'm not going through each individual term I'm doing whole checks on entire vectors right these logic checks I'm performing rather than going through and looking at each individual term of that random Matrix so try to vectorize as much as you can but again write stuff that's simple and understandable when you start and then you can look towards this optimization later on we ran to a couple things here that I want to point out the first are going to be naming conventions you'll see I'm using some underscores I'm using some you know capital letters there's a couple good ways you want to create variables there's two main methods the first is going to be called a camel case and that's where you do this camel case under under what is this lowercase first letter and then when you have a compound word you capitalize the second part of it this could be then let's just total revenue equals seven you can also do total underscore Revenue equals eight or whatever these are the two main methods underscoring you just keep everything lowercase and that underscores between compound things and then total revenue is an example of camel case where you uppercase those other letters for the compound words you want your variable names to be as descriptive as possible a bad variable name for example would be four right four is a word that Matlab already assigns for doing for Loops so you can't say four equals nine it's going to be thrown off what you're trying to do here similarly you shouldn't name your variables after any functions like the sum should not equal 10 that's bad because what if you're trying to use the sum function you know the things that you want to keep clear so don't use variable names that are the same as function names you also can't use numbers to start your variable name so I can't do 2016 total revenue if I run that well I could try doing yeah see okay matlab's already telling me look you're missing multiplication it thinks I'm doing this multiplication here multiplying between something else if I still insisted no I want to save this as a variable 2016 whatever whatever year that might be right it's going to give me that error because it thinks I'm trying to do math so you can't start with numbers you have to start with letters here foreign the other thing I want to show you is how to do your file names we can create new files using the new script here you can also use the plus sign right next to your current and go between and you can have multiple scripts open here this is very useful when you're working on things at the same time you can use Ctrl s to save these really quickly and make sure you have the dot m file extension the dot m extension is needed to save Matlab files let's say I want to name this file 2016 Revenue like before dot m if I click save matlab's going to yell at me I cannot start with a number Matlab file names must start with a letter and contain only letters numbers and underscores home stretch guys the last topic we're going to cover are while loops and custom functions while Loops are in the same family as for Loops they look similar the way we construct them but they have one key difference in a for Loop you decide how many times you want to run right for I equals 1 to 20 for I equals 5 to 50. you're going to display the variable I and then end you know how many times this is going to run right it's predictable you're telling it how many Loops to run here output is as expected just explain the I as we go through this case I'm displaying the variable I not just the letter I like we did previously here we just see a bunch of eyes in a while loop while we have to give it some condition here and then we do actions and then we end let's do well the condition and the condition will be something like Z is greater than five or the sum of values is greater than nine it'll be one of those conditional statements we've been doing such as 10 greater than five and whenever that condition is true the while loop will run once that condition is false the while loop stops so you can see that we no longer have direct control over how many Loops are run but instead we have control over the conditional statement Let's do an example Z equals 100 while Z is greater than 75 we do stuff we display let's just say the square root of Z I don't know up to you and then we have to add a key statement which I think of as the reduction statement you have to force eventually this statement to become false otherwise you get in an infinite Loop scenario okay if I were to run this right now and I'll do it for you I may crash the computer but let's go ahead and run this it's just outputting tens you can't tell right now this thing is just going going going going I have to force quit with Ctrl C okay you might even hear my laptop it's revving up right now it was just infinitely outputting tens I can show you my like I'm scrolling right now look at it's just 10 10 I mean infinitely this would have gone on forever force quit with Ctrl C if you ever hit this issue why did that happen well Z was a hundred right so the square root of 100 was 10 which just kept outputting and then it went back up to the top evaluated as Z greater than 75 well yeah it absolutely is oh you don't need that semicolon by the way every time is z greater than 75 sure Z is still a hundred is 100 greater than 75 yes do this yes do this yes do this over and over and over until you've got a ton of outputs that you just have to control C to stop this so we need a statement in here that's going to reduce the value of Z to make this statement false simple one Z equals z minus 1. we run this it stops we have a set number of values and we're just giving the square root of Z and this we decrease the value so now Z becomes 99 99 is greater than 75. 98 is greater than 75 all the way you can see we get to 81 at some point here because the square root of 81 is 9 and then eventually we hit a stopping point when Z is equal to 76 this will be true one last time we'll decrease 76 to 75 and then 75 is not greater than 75 that will be false and it ends and then anything you want here I'm gonna add Loop ended it's a little reminder for us we run this and we get our little display afterwards because the script keeps on running afterwards the last thing I wanted to show you guys was how to make this into a separate function you're going to end up with a very complicated things very complicated Expressions very complicated mathematical formulas you know even all these the nested Loops the nested if statements it becomes easier at a certain point to create a separate.m file to handle all those things and then you can just run those that mfiles from your main dot m file let's create a new script and we're going to use it as a function Matlab has a great builtin feature for this click the drop down by new and select function it gives you all the basic structure that you need to create a function you're going to start with function and then Define what output arguments you want this should be the name of the function here and then you're going to add input arguments all this inside will be using your input arguments to create your output arguments in our case we're just going to be running our while loop let's take this stuff right here and let's replace it in here while Z is greater than 75 display square root of Z yes we're going to get rid of this line we don't need to display these things but we just want to reduce it down so let's let's plan for this to be more General case so let's have our output be the final Z value Z final and we'll have our input just be Z let's call this function reduce Z with an underscore in there and we need to save it as that same name reduce underscore Z dot m this is where the current folder matters we need this file this dot m file to be in the same folder as our main script which I have Basics here that way these two files can interact with each other because they're in the same current folder now for reduce Z what we'll do is we receive a z value and let's say that's Z initial let's set Z equal to Z initial no output needed and then while Z is greater than Z initial we're going to reduce the value of Z and this will become Z final so actually no let's keep this as Z for now and then at the end of everything we'll save Z to Z final equals z okay so we bring in z let's think how this is going to go through so if we give an input of 75 like we did before as our argument to this function reduce Z 75 is saved to Z while 75 is greater than Z initial this doesn't work let's do this divided by 2. so while 75 is greater than 75 over 2 then we reduce Z every Loop until it gets to this point which will happen because we're reducing it eventually we'll get down to you know Z over 2 and then we'll be final this is a little bit complicated guys I know I'm just trying to show you this function notation and we'll output Z here and this is the final is what we have is our output to our function let's save this we'll go back to basics don't need this anymore all we need to do is run our function which we called reduce Z let's give it the argument of Z and we'll see what happens here we run this and we get our answer out to be 50. don't need this anymore either does that make sense to us we're giving a value of a hundred this is the one argument that we're giving to our function so the value of 100 is passed to the function reduce Z we go into reduce Z here Z initial is set to 100. 100 is saved to Z is 100 here while 100 is greater than 100 over 2. so while Z is greater than 50 we take Z which is 100 to start and we decrease it by one so it goes down to 99. now we're 99 greater than 50. we Joe would go again we reduce so now it's 98 97 96 95 all the way until Z is going to be what 51 Z is 51 greater than this oh no 51 will be true so 51 greater than 50 yes Z is reduced down to 50. 50 greater than this no false we end the while loop and then we save 50 which is z to Z final Z final is then our final output for the function and that gives us this answer of 50. I know it's crazy it is very hard to get your mind around this if you're struggling do not worry I have entirely separate YouTube videos on these topics these last ones these for Loops while loops and functions they are challenging don't back down think of it as a way that you need to push yourself to understand these Advanced parts of the programming language question for you what if I put 75 here what would be the final answer well think eventually we're going down to the Z over two that's the initial over two so it'll be 75 over 2. which would be 37.5 when Z is 38 this will still be true because 38 is greater than will reduce down to 37 and that should be the last Loop so let me run this and 37 is inevitably our answer holy cow guys I think we did it we covered so many topics in this video I'm amazed if you stayed to the end kudos to you this is one of the best beginner crash courses that I could come up with for you guys more videos on the channel This was meant to give you foundations now from here I encourage you to dive into specific topics that you need to do for whatever project or whatever you're just curious about doing a Matlab thank you for watching seriously this channel has been growing because of people like you who are committed to learning programming and I'm committed to helping you learn the program thank you so much for watching please like this video please subscribe engage on the channel I answer any single question that you guys want to ask I'm happy to clarify I'm happy to make more videos just let me know I am here to help you excel in your programming experience cheers and have a great day