hi my name is Chris Gagne and I am an agile coach I've coached over three dozen teams in both huge enterprises and small companies prior to that I have close to a decade of product management experience that makes me a bit unique among agile coaches who often come from scrum master project manager and engineering manager backgrounds I've been in the trenches just like you and I've seen more than my fair share the good the bad and the ugly this video will introduce you to the five most common events in scrum I've included dozens of unique tips and tricks that will help your team get the most from these events with a lowest time investment the five events that I'll cover are backlog refinement sprint planning daily scrum sprint review it's Brett retrospective you can watch them all or click the links in the description to jump just in the section that you need enjoy and thanks for watching backlog refinement is the work of refining estimating the ordering items in the product backlog as a product manager I used to spend about a quarter of my time working on my backlog the scrum guide suggests that the development team also spent up to 10% of their capacity supporting backlog refinement this usually happens in regularly scheduled event such as backlog refinement and sprint planning but it also occurs ad hoc such as in a parking lot discussion after the daily scrum although backlog refinement isn't an official event and scrum guide I've never met a scrum master or coach who didn't advocate strongly for teams making it one as a general rule I discourage work from being introduced at sprint planning unless has been previously been through a backlog refinement event with the team the biggest reason for this is to reduce risk if your team can't clarify an items requirements during sprint planning it won't be ready to pull into the sprint and will likely have to wait for the next one if the product owner attempts to force it into the sprint anyway the team sprint forecast will not be very accurate however if you hold a backlog refinement event a few days in advance of the sprint planning and the team discovers an issue you'll have time before the sprint starts to do more research besides every hour your team spends in backlog refinement is at least an hour your team won't spend in spring planning before you start I suggest having a product owner communicate a proposed list of items for refinement to the team at least a few hours before the event this gives the team a chance to look at the stories earlier if the product owner or scrum master are willing to conclude the event when all of these items have been refined rather than move on to new topics it can also be highly motivating for the team to begin gather the whole team and start discussing your highest ranked backlog Adam remember the phrase card conversation confirmation the card is the index card sticky note or software entry that acts as the token for our discussion our discussion is the conversation the updates we make to the card especially the acceptance criteria lead to the confirmation what's the scope hata scope dependencies target chip date keep talking about and updating each backlog item until it meets your team's definition of ready then estimate if you're using planning poker to estimate items do so immediately following the discussion so that is still fresh in your mind if you're using affinity estimating you can place the item in its correct relative location immediately after discussing it or wait until you've discussed everything to sort them once the user story is ready and estimated market is ready I'd like to preface the items title with an asterisk to indicate that it's ready this works great when you've got several pro forma sprints lined up following your release planning session if you don't do release planning you can simply create a pseudo sprint called ready and place items in that sprint schedule your backlog refinement events as your team sees fit I generally suggest one shorter backlog refinement event per week lasting in about an hour for mature teams and products some teams like one longer session per sprint if your sprint planning event seemed to take forever you probably need to spend more time doing refinement this is especially common for new teams or products sprint planning is an event in which the entire scrum team collectively determines what work can be delivered in the next friend and how that work will be completed there are several steps in sprint planning first close up the last sprint if the team hasn't done so already update and close last friends board any remaining work should be carried over to the next friend unless the product owner feels that it is no longer valuable otherwise the team should assume that some work in process on those tasks will have been wasted this is because it takes more effort to recruit and pick up where the team left off when they stopped working on a task for a sprint or more second determine your story point budget for the next sprint based on your historical performance and capacity and next friends capacity there are a few techniques for calculating your budget the most common are rolling historical average in yesterday's weather but describing them would take too long what really matters is to stress how important the team treat this empirically if the data tells a team that they consistently complete about 20 points of Sprint they should not attempt to complete 25 points the following sprint out of wishful thinking better to sign up for 20 and pick up the five points mid sprint when all of the work has been accepted I find it here instance evidence based limit to be a powerful predictor of the team's overall capacity for empirical process control and thus our overall success of agile third all those good practices start sprint planning with one and a half to two Sprint's of stories that meet the definition of ready pilot owners and teams often find that they will want to introduce a new unrefined story for consideration in the next sprint for instance many teams find that they almost always have an improvement item from the retrospective or a customer may have requested a small but important change in the sprint review this debt looks just like backlog refinement discuss refined split and estimate backlog items fourth load stories into the sprint backlog respecting this branch story point budget based on a good faith estimate that the complexity uncertainty and effort required for new and old backlog items the historical performance and the calculated budget for next sprint the team publicly forecasts that they will complete these backlog items by the end of the next iteration especially for new teams it can be helpful to use the fists of five voting technique to gauge the team's confidence in the forecast fifth the team should discuss and commit to a sprint goal this break goal guides the team as to the purpose of the work they will be doing over the next iteration for instance a Sprint goal might be launched the new analytics beta to 10% of her customers it should be possible to meet the Sprint goal without completing the entire sprint backlog for instance most of the Sprint backlog might be a musthave for launching the beta well a couple the backlog items might be should house the beta can be launched and thus the Sprint goal can be met without these should have items being completed six the team should discuss how it will complete the items in the backlog this typically takes about half the time allotted for Sprint planning so be sure to allow enough time for it starting at the top of your sprint backlog the development team will discuss each item and decide how it will deliver this functionality in the sprint as you do so create a sub task on your board for instance suppose the team wants to add a new validation error to the page there may be a task to write the test another to change the logic another to update the CSS and another to kick off automated testing and deployment some teams especially newer ones will also estimate the number of hours each task will take to complete so they can watch these burning down along with story points over the course of the sprint following sprint planning any member the development team should be able to articulate what the Sprint goal is what the team expects to complete in at least of a high level how the team will complete that work one of my favorite tricks as a product owner was to ask the team to spend the 24 hours following sprint planning validating their plan for the iteration especially if the last step of planning how the work will be completed is cut short through the time box when that grace period ends I would send an email to all of my stakeholders reporting on what we completed last Brent what we forecast we will complete this brand and the Sprint goal that we've committed to you this is a great followup to the Sprint review because it give stakeholders a preview of our next iteration one of the biggest mistakes I seen teams make is not allowing enough time for sprint planning or doing enough backlog refinement in advance sprint planning should take one to two hours per week planned so to experience should take two to four hours to plan if you're finding that it's difficult to complete sprint planning in this time box including determining how that he will do the work you may need to do more backlog refinement or evaluate how this event is facilitated let me start by setting with the daily scrum is not the daily scrum is not a status review or report for anyone including product owners scrum masters or steak lovers this is both destructive and common enough that I feel it's important to call this out right at the beginning instead the daily scrum is a chance for the team to transparently inspect and adapt how their sprint is going it is an opportunity for course correction not micromanagement even the physical orientation of the participants at a daily scrum is telling are they collaboratively huddling in circle or is there one person in power at the front with the rest of the development team meekly answering questions I say this because the driving ethos and daily outcomes of your team's daily scrum are more important than its exact manifestation that said here's a format that I found works reasonably well first start the daily scrum at the same time in place every single day some teams like to skip the daily scrum Mondays that they conduct sprint review and/or sprint planning but this is a missed chance to reconnect before these important events ideally your team should have a dedicated space with either a physical or electronic task board and burn down chart visible to everyone if you are distributed or remote video is better than audio start at the daily scrum on time even if much of the team is missing within a few days attendance should improve this being late to a meeting in progress is more uncomfortable than being late to a meeting that hasn't started yet next each development team member answers three questions right from the scrum bride as concisely as possible what did i do yesterday that helped the development team meet the Sprint goal what will I do today to help the development team meet the sprinkle and do I see any impediments that prevent me or the development team from meeting the Sprint goal as the member of the development team is speaking watch out for the following first is everyone else looking directly at the person speaking and paying full attention it can be a fun game for the speaker to look for anyone who isn't paying attention and nominate them as the next speaker second are they speaking directly to tasks that are visible to the whole team on the board or they're working on something else I once had a mentor who told me that we should consider any effort towards working not on the board as an act of sedition because it deeply impacts the product owners ability to support the team and saps a team of velocity made good against the Sprint goal third sometimes answering these questions can spark an intense discussion in order to get the dalish come to 15 minutes or less any team member has the authority to designate the current topic of parkinglot item to be discussed with any interested parties immediately following the daily scrum any individual who does not wish to be present for that discussion need not attend next examine the team's burned down chart and incomplete sprint backlog items does the team still feel confident that they can meet the Sprint goal and finish everything in the sprint backlog by the end of the Sprint and no meeting the sprinkle and finishing everything the Sprint backlog are not the same thing if not why is there a course correction that will enable team to succeed if not should one or more backlog items from the bottom the Sprint backlog be removed this inspection and adaptation will improve the team's chance of success and give the product owner a chance to provide really warning to their stakeholders if the goal will not be met a couple of other useful hints it's not the scrum masters job to always facilitate the daily scrum only to ensure that it happens smoothly and within the 15 minute time box also people who are not on the team are always welcome to attend so long as they do not interfere with the event for instance watch out for stakeholders demanding status updates or addition to the current Sprint's backlog these sorts of requests should be directed directly to the product owner that's the essence of the daily scrum feel free to experiment with a format be sure to track whether or not your experiment helped your team meet the Sprint goal or provide an early warning sprint review is held at the end of every sprint to celebrate the team's success inspect the product increment delivered by the development team and adapt the product backlog is necessary it's also an opportunity for the scrum team to demonstrate transparency about their output and process to their stakeholders so as to foster mutual trust the event is attended by the entire scrum team and the stakeholders and customers invited by the product owner some teams find it useful to complete their first review or to privately so they can get the hang of it before inviting stakeholders and customers that stakeholders to attend many disorganize events may not come back for more here's a sample agenda that covers the most important points of a sprint review first the product owner welcomes their stakeholders and exists finds what product backlog items have and have not been fully completed second the development team briefly talks about their experiences during the Sprint including any impediment set of rows and how they resolve them know that most teams complete their sprint retrospective event after the Sprint review so they think include what happened at the sprint review in the retrospective so be aware that you might not have the most refined responses yet also this isn't an opportunity for stakeholders to criticize the team's process if a stakeholder has this type of concern they should discuss it with a scrum master and/or product owner after the event third the development team this demonstrates each fully completed backlog item ideally from the end users perspective show results not code demonstrating backlog items in stage and can illustrate that the work integrated correctly while demonstrating from production is nice it's not necessarily required stakeholders should be encouraged to ask questions and provide feedback and anyone on the team can answer forth the product owner can share for looking updates what's the current state of the backlog have any longer term forecasts such as release date and scope changed 5th all attendees participate in an adaptation exercise having inspected the product increment and backlog presented transparently by the scrum team what adaptation should we make it can also be helpful to talk about the changes in the market or other team external events that could impact the team's future plans the primary output of the sprint review is an updated product backlog that reflects the event this event can take up to one hour per week of iteration but most teams and stakeholders will want to complete it in less time typically 30 to 60 minutes for a twoweek sprint the retrospective is far away the most important event in scrum if not for all IGEL practitioners although empirical process control is omnipresent scrum no where is it better representative than at the retrospective put another way ISIL envision a team being highly successful even after they've jettisoned every other rol artifact an event so long as they're still doing retrospectives this is because a team can experiment of changes to roles artifacts and events not to mention plenty of other factors using retrospectives for instance suppose a team decides during the retrospective to reduce the time spent doing backlog refinement by 50% and there's still generally happier that choice a few Sprint's later who as I said that shouldn't make the change so how can we conduct our first retrospective personally I'm a huge fan of the five step retrospective popularized by us or Derby and Diana Larson authors of the book agile retrospectives making good teams great retrospectives can get stale really quickly so teams find it helpful to change how they do retrospective often so long as you're a retrospective covers the following five steps you're in good hands step one is to set the stage this is a good chance to break the ice with your team and remind yourselves why this is so important I have a few activities I like for this step and I recommend choosing two of them first I suggest reading norm curse retrospective prime directive as a team which is regardless of what we discover we understand and truly believe that everyone did the best job they could give him what they knew at the time their skills and abilities the resources available in the situation at hand this helps to create a collaborative environment for learning and continuous improvement instead of blaming individuals second I like to ask each team member to share just one word about how the Sprint went for them this will give everyone a good sense of the mood in the room third I'd like to invite team members to share a genuine word of specific appreciation for another member of the team step two is to gather data what happened in a misprint I like to use a positive Delta's and insights collection device ask each team member to come up with as many positives deltas or things they'd like to change and insights as possible have them write each positive Delta and insight individually on sticky notes or their digital equivalent when the team is run out of thoughts where the time box has elapsed place the sticky notes on the wall in group like items together step three is to generate insights I like to add a brief intermediary step which is to choose the top positive Delta's and/or insights that we'd like to focus on about one to three total once you have the top one three items dig in more on each one the book agile retrospectives has a good activity called prioritize of thoughts that can make this go faster if a positive reads the team is doing a good job of collaborating with one another then a delta reads our staging server keeps going down try to understand the root cause of these conditions some teams find it helpful to ask why five times give or take until you get to your root cause as all retrospective suggests other exercises as well as a hint if you're rarely surprised by your root causes you may not be digging deep enough step four is all about actions I like to expand those into decisions and actions for each item discuss as a team suggestions about how you can persistent deep and positive change or minimize the Delta and capitalize on the inside you'll find that your suggestions naturally fall into two buckets decisions which are changes to your team's working agreement and actions which was simply new backlog items suppose the team is tired of event starting late due to tardiness the team could vote to add a rule to their working agreement that imposes a penalty for being late or suppose a team discovers that their staging server needs several hours of maintenance the team could decide to add a user store to the backlog that reads as a developer I have a more reliable staging server so I can develop software more effectively trying to stay focused here it's better to have one or two improvement items for the next iteration and then have to much to change all at once step 5 is wrap up if you haven't done a round of appreciations yet this is a nice time it's been a few minutes retrospective on the retrospective how did it go for the team what would they like to try next time your team should run a retrospective at the end of every sprint if your team is doing Kanban or oneweek sprints it's okay to do retrospective every two weeks it's also useful to hold a retrospective at the end of any significant event chose as the multi team release planning a large release or following an incident if your rest respecting an outage or incident don't call this event a post mortem this makes the event a little too negative in consumption suddenly implying that the team killed something or someone instead just used retrospective or the military term afteraction review so that's a reasonable retrospective format that you can use for your first several sprints talk to your team's agile coach for more ideas on how to keep your retrospective fresh and interesting you