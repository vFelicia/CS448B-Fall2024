hello and welcome to this tutorial i've actually added this part after i finished the tutorial of course i realized you may be completely beginner at json web tokens and i didn't talk anything about what a jwt token is so i'm going to do that shortly before we start creating stuff in this tutorial i recommend you to check out jwt dot io slash introduction on that page they'll describe everything that you need to know about json web tokens and we can check out the first part here what is json web token json web token is an open standard that defines a compact selfcontained way for securely transmitting information between parties as a json object so that's what we're going to do we're going to build this in our application and send along a json web token and that is a json object and also this information can be verified and trusted because it is digitally signed and the token can be signed using a secret or you can encrypt it we are going to use a secret meaning that on our server part we are going to have a secret that will sign or json web tokens with so a json web token is a json object that we can use to transmit information between our server and our application in the client and you can also read down below here they tell you why you should use it and when you should use it in our case we're going to use it for authentication and authorization and i think as they say this is the most common use case because when using a jwt token we don't have to send along our login and password on each request we can just send the token and the token can guarantee that it's the correct user that sends the request so that's the main advantage of using a token we don't have to send along the login and the password on each request we can just send along the token and we will know that the user is legit and they also mention that the overhead is small and it has the ability to be easily used across different domains so that's the main advantages of using a jw token in your authentication and authorization system so in our case we're building this very lightweight server and from this server we're also going to generate this token and send it along to the client when the user logs in all right we can continue to scroll down here they also describe what parts there is in a json web token and you have a header a payload and the signature and here is how it looks first you have the header then you have a dot and then the payload a dot and a signature so the header will mostly contain data about that this is a jwt and also the signing algorithm for the token and then we have our payload we can send along what we want here in our case we're going to send the user and we're going to have the email address in this very very basic example that we're going to build so the user can log in and we send along the email address to the client so the email is going to be the username in our case but you can put some other data here also of course and in this case i think they yeah they had a name and they have if this one is admin and other stuff here okay and then we have the last part that's the signature and we're going to sign our token with a secret that we set on our server that way we know that this token is guaranteed to be generated from our server because we're always going to verify that it's signed correctly all right so i think that's about it that's a very short introduction to jwt tokens and we can get started to create our application and our server i'm going to talk a little about json web tokens and how you can authenticate your application with refresh tokens and access tokens and there's actually a few good tutorials out there but they are using a lot of stuff that you don't need to understand the concept of json web tokens so my take on this is that i create a very simple express server where we set up our endpoints or just regular rest endpoints and i won't even use a database we're just going to use a fake database object for this one so it won't persist the data of course you don't need that if you're just learning the basics all right so nothing fancy in the server in the back end and i'm just going to use react for the frontend and you're going to fetch the endpoints with no external library or anything like that so hopefully this will be a good way for you to learn about json web tokens if you're new to the subject and also i will say this that i'm not a security expert i'm mostly a frontend developer but i do some backend stuff also so this is not in any way any code you should use in production and the code may also be a little bit verbose because i want to show you all the details on how this work my main goal with this tutorial is to show you how the json web token flow works between the server and your application and how you can use it it's not to create a very secure api that you can use in production all right so let's get started first of all create the folder of your choice i call mine jwt auth and inside of this we're going to create another folder that's called server we're going to have two folders for this one one is the server and one is for the front so first we set up all the routes all the rest and points for us that we can use in our application all right and we are going to use express for this one first we have to type npm init to create our project yeah and it will give us some defaults here this one will call it jwt auth and that's fine version is one description you can have a description here if you want api server or entry point it's going to be the index.js file so that's fine and test command we're not going to do any tests here and git repository none keywords none you can just press enter here is this okay yes enter all right so it's created a package.json file for us and let's go inside of our code editor and we can have a look at that file and as you can see it created this stuff for us here all right then we have to install some packages we're just going to use express but there's some packages that are going to help us in the creation of our api so we are going to install something that's called bcrypt.js and with this one we can hash our password because you don't want to store your password in the database or in our case a fake database we have to hash it and also sort it you can read about bcrypt at this page here or you can yeah i'm not going to go through it in detail here then we're going to install something that's called cookie parser and this will help us to get the cookies from the request so what it will do is to create an object that's called cookies where we just can grab our cookie that we're going to use for the refresh token then we're going to install a package that's called course because we don't want to have any cross origin issues here so we're going to install this and configure it and we're going to use environmental variables for this one so we install the package.n and i'm going to show you this in a second and of course we have express that we're going to use and then we're going to create json web tokens so we have a package for this also and lastly we are going to use something that's called nodemon and this one will yeah it will make our development a little bit easier because it will restart the node server as soon as we make any changes and we don't have to do that ourself manually okay and then i'm using postman to test our endpoints it's free so i think postman is very good to use for this all right so let's get back into our terminal and install these packages so we type npm i and we have bcrypt js we have our cookie dash parser we have our course or doten and we have express we have our json web token and the nodemon is actually going to be a dev dependency so we install that one after this one okay let's take a look inside of our code it installed here as we can see that's good and the nodemon we just install it like a dev dependency here so we have npm by nodemon dash dash save dash dev and it will install it for us as a dev dependency okay you can see that it added it here as a dev dependency and that's great so that's all that we need for this api to work and we're going to start coding it now first we can create a new file that we call dot n because we're going to create some environmental variables here and the first one is going to be called access underscore token underscore secret and it's going to equal you can select whatever you want here i will of course use weben rules yeah okay maybe i should spell this correctly also to see synaxis okay then we have a refresh underscore token underscore secret and this one is going to be web and rules even more and then we have the port it's going to be on port 4000 all right so we just save this one then we're going to create a new folder here that we call src and inside of the src we can create a new file that's called dot index.js okay so we're going to start importing some stuff here first of all we're going to require dot n forward slash config and this one will make sure that we can use the environmental variables here then we create a const named express and we require express we are not using es6 imports here because this is node and this is the standard as you do it in node you can do it with es6 imports if you install some packages but we're not going to do that here so we import express then we have our cookie parser require cookie dash parser we have our course and we have or verify that we're going to grab from the json web token library and make sure you have these curly braces here because we're just importing the verify from that one then we're going to grab hash and compare require bcrypt js right so that's all what we need for now we're going to do a little bit more imports here later on when we create more files and stuff here so what are we going to do now we have a few steps here one we're going to create an endpoint where we can register a user to we're going to have an endpoint for login user 3 we also want to be able to log out the user for we're going to set up a protected route and five get the new access token with a refresh token and of course you should have something that you can revoke the refresh tokens with but i'm not going to go through that in this tutorial because i want to focus on the most basic stuff here just to show you how json web tokens work okay first we create our express server const server equals express that's the one we imported up here so that will create the server for us and then we want to use express middleware for easier cookie handling so server dot use and we call our cookie parser and this will make sure that we can handle the cookies a lot more easier then we're going to set up our course because we don't want to have issues with that later server.use and we have a course that is going to take in an object we have an organ http colon forward slash forward slash localhost and we are going to have our frontend on port 3000 because we're going to use create react app and that one is default port 3000 then we're going to set the credentials to true okay so this will make sure that our frontend and our server can communicate with each other then we need to have a couple of rows here so we can read our body data and we can actually type out the comment here needed to be able to read body data okay we grab a server and use and from our express we can just call express.json like this and this will make sure that we support json encoded bodies i can make a quick comment here also to support json and encoded bodies then server.use from express yet again this is builtin express url encoded for this one we sent in an object with extended the set that wanted true and this one support url encoded bodies all right so this is our configuration for our express server and we can actually get it up and running also and then we're going to create our endpoints and to get it up and running we can just server.listen and from our process dot n we have our environmental variable called port inside of here so we just grab this one with this now we have an inline arrow function here and we can just console log out something here server listening on port this is a template literals we can just grab process dot n dot port and we end it with another backtick and i should of course remove this one you can save it and then go inside our terminal clear it and we actually don't have a start script for this one so we can create this one also so let's go back inside of our package.json file and where you see this property named scripts we can create another one here that's called start and we are using nodemon for this one as i said this one is going to make sure that we don't have to restart the server every time we change something in our code so we just call our index dot js file here and this is an object so make sure you have a comma there also so we save this one go back inside of our terminal and type npm start and as you can see it's starting up our server here and that's good so we know that it's working and then we can create our endpoints and i'm actually going to go through this quite fast because i think this course is more focused on frontend developer that want to learn about json web tokens and not how to create the backend itself but i have to create it here to be able to show you how the json web token and the flow between the front end and the server will work so that's why i create the back end here also and you probably will learn something about it even if you're not a backend developer at all so back into our code and inside our index.js file so first of all we're going to create an endpoint for register user so we have a server and this is going to be a post request and we're going to have register in our endpoint url so it's basically going to be our server that's localhost and then forward slash register for this endpoint this one is going to be async we have our request and our response and we're going to send in the email and the password with the body so we can grab these ones from the body with the structure them out email and password from the request body and we have to do a few things here now we're going to type our code inside our try block and then we have our catch that is going to catch the error for us so inside of here we're going to do a lot of stuff first we're going to check if the user exists and we're going to do that from our fake database but i want to populate the fake database with a user so i'm going to need a hash password for that one so that's why i'm going to create a hash password and console log it out and then i can just copy and paste it inside of my fake database that i'm going to create so const password we await hash and we have our password that's the one we got up here and we're going to sort it and this is how many times you want to calculate the salt so i think 10 times maybe something like that so this will give us a hash password and we can console log this out and save it i'm going to start up the server again and i'm going to go inside of postman now and use that one so i have this endpoint that's called register and i actually have it up here on our localhost and port 4000 we have the register endpoint and i've attached an email and a password to the body so it was send this one hopefully it will cause log out a hash password for us and it did so i'm just going to grab this one from the console copy it go back inside of my code create a new file inside of the source folder here and call it fake db.js then i'm going to export fake db and it's going to be an array that's going to have different objects with the different users so we create an object we set the id to zero the email is going to be my mail you can of course use your own here like this and then we have the password and inside of this string i just pasted in this password can also make a note here the password is test so this is a fake database that we're going to use save this one can go back inside of our index.js file and we can finish this register endpoint so first of all we're going to check if the user exists const user from the fake db of course we also have to import it up here so const fake db equals require and we grab it from dot forward slash fake db dot js okay in our fake db this is just an array so we can just use the array method find and we have our user we check if our user email equals or email so we check if this email exists in our database and this one here is the one that we got from the body and of course in the real world here you should do some connection to a real database and check for that there so this is a fake db this is just an array with javascript objects but you're going to use a real database here in the real world in production but for now this will do for us okay then if we have a user we're actually going to throw an error here because if the user exists we shouldn't be able to register a new user with the same email so we throw new error user already exist if not user exists hash the password and we've already done that here so we don't have to do that again we have it stored in the password const so three insert the user in and i'm going to put this inside of quotes because this is not a database this is just a fake database but you insert the user in your database and we can just push the user inside a fake db array fake db push so we create an object we have an id fake db dot length the length is always going to be larger than the index so that's why we can use the length here because if we have one post in our database as we have now this is the index zero but the length is going to be one so that's why we can use the length here then we have our email and we have our password and this one is going to be the hash password and we have a coma there of course okay so we have stored the user in the database so we can send back your response to the client res dot send and we have an object with a message of user created like so instead of console.log out the hash password here we can actually console log out the fake db all right then we also have to catch if we have some errors so we send back your response with an error and we just send the error message air dot message all right and do a little bit of auto formatting there so this should be it for the register endpoint so we try it out in postman and i created this once now so i have to actually kill the server now and start it again because i want to clean up my fake database so i go back in postman i put the email and the password in the body that's my email address with three and also the test as password so i send this one used to create it that's great and as you can see we are console logging out the database we have two users here now and that's great go back inside of postman i try to register the exact same user and it tells me that the user already exists and that's great so we can't register the same user twice so we know that it's working that's our register endpoint now we're going to create our login endpoint yeah and i should of course move this one to the bottom like this log in a user all right yet again we have a server.post we create a post request and it's going to be login we have an async inline function here we have the request and the response and an error function and yet again from our body we want to grab our email and our password so we destructure them out from our request dot body then we have a try and the catch with the error like so and inside the try block we're going to type out our code so first find user in array or in or in database if not exist send error right const user fake db dot find this is the exact same step as we did before so just check if the user email equals the email and now we check if not user if we don't have a user throw new error user does not exist all right so if we don't have a user we cannot log in to compare encrypted password and see if it checks out send error if not so create a new const that's called valid we await and we have this compare function from the decrypt library so we compare our password that's the one we got up here from the body and then we have a password stored in our database from the user password so we compare these two and see if they are the same so if not valid throw new error password not correct so if it not checks out we just send an error and tell the user that the password is wrong but if it's correct we can create a refresh and access token like this and the id today is to have a refresh token and an access token your access token should have a really short lifetime and the refresh token should have a longer lifetime and stored for example as a protected cookie that you cannot use from inside of the javascript in your client we're going to create two tokens one refresh and one access token so first we have our access token and we're going to have to create this somehow and we have a refresh token that we also need to create somehow i'm actually going to create a new file here just call it tokens.js and inside of this file we first import sign require we require it from json web token then we create the function here create access token we're going to send in the user id as a parameter and from this one we're going to return something and we're going to return sign we call that sign that we imported up here we give it an object with the user id and then from our process dot n dot access underscore token secret so we sign it with that secret and we also include our user id then we have an object where we can set the expiry time expires in now for this one we're going to set the 15 minutes so this is how we create the access token and we can just copy this one and paste it in and we can rename it to create refresh token and we change this one to refresh underscore token underscore secret and it expires in seven days that's a week okay and for now we just model export and we export our create access token and or create refresh tokens so we can use them in our index.js file so of course we have to import them up here at the top first const create access token and create refresh token require and it's going to be from dot forward slash tokens dot js all right we're good to go we can use these ones inside of this file now so first we create an access token create access token we send in the user.id that's the one that we got from the database and here we create the refresh token and we also send in the user.id and in the real world in the real life you could also create different versions of the refresh token and store it in your database or just store a version number if you don't want to store the complete refresh token and you can compare it you can sign it as we do here you can also sign it here with the uh that's the access token the refresh token you can have a version number here and then you can check the version number and when you revoke the refresh token you just increase the version number and that way that token could never be used again but for the sake of the simplicity of this tutorial i'm not going to do anything of this i've just created one refresh token so if you want to make some function to revoke it you just can delete this one from the fake db but keep in mind that you can have different versions of refresh tokens so for now put the refresh token in the database and we already have our user here so we can just mutate this one we create a new property that's called refresh token and we just give it the refresh token so we save that one inside of the database there and if we want we can also console log out the fake db here so we can see that this actually gets created all right so we have our access token and our refresh token created that we have to send them to the client somehow so five send token refresh token as a cookie and access token as a regular response all right and we're going back inside our tokens.js because i'm going to create two functions for us that is going to handle the send of the tokens so just below here we create another function send access token and we have the response the request and the access token and we just do a response send you could of course do this inside of the index file also but i did this to yeah kind of structure it a little bit so we send the access token and we can also yeah we can send the email also from the request body dot email right and then we have a const send refresh token for this one we are going to have the response and the token we can call it refresh token all right and for this one we're selling a cookie instead we don't want to send it with a regular response so we have rest cookie we're going to call the cookie refresh token you can of course call it something more secret because now you can just check the cookie and see that this is a refresh token but i do it like this so we easily can track this token that's why then we have our token and we have an object we're going to set it to http only and this makes sure that we can't access this cookie from our client you can't modify the cookie with javascript and we're also going to set a path because we don't want to send this cookie along with each request we just do it when we're on the refresh underscore token endpoint this is the endpoint we're going to use when we want to get a new access token with our refresh token and i'm going to come back to that later all right we also have to export this once send access token and send refresh token like this so that's all for our tokens.js file let's go back inside of index.js and inside our login user function here of course we first have to import them up here so we import send access token and send refresh token all right now we can go back inside of this one here just below here we first send a refresh token we have the response and the refresh token itself and then we call send access token we have the response the request and the access token maybe they should be the other way around here maybe have the request first and the response as the second parameter but yeah hey it's like this now okay all right so that's it we just have to catch any errors if we get that here so where rest.send just as we did before we have an object and an error message backticks it's a template literal we grab the error dot message and end it with a backtick like this order format it and save it so we can go back inside of postman and we can try to log in here as you can see in the body i send the email and the password so we try to send it okay we have some error here create access token is not a function all right yeah i know why it should be exports here not export so make sure you have an s there also if you also miss that one so save it and go back inside of postman and we try this again then we have another error here token is not defined all right yeah of course i renamed this one here inside of tokens.js it should be refresh token and save this one i actually called it token first but i changed it now when i record this to refresh token because it makes more sense so it should be refresh token and back again inside of postman we try it again and as you can see we get an access token back and we also get our email back and did we get something inside of the database yeah you can see i constantly logged out the database here and the refresh token has been created and it's now in the database so we can try to register a new user here i have this one with a three in my email so i'll just create that user and as you can see that one is created but it don't have a refresh token now we haven't logged in and got the refresh token so it seems to be working now that's great so let's get on with it we also want to be able to log out to user three log out a user this one is going to be see we have the server dot post and we're going to have log out as the endpoint we have the request we're not going to use that one so i mark it with this underscore and we have the response so when we log out we just clear the cookie rest.clear cookie and we call it refresh token that will make sure that we wipe out the refresh token from the cookie and we also have to clear the access token from the client of course when we log out but with no refresh token we can't get a new access token before we log in and then we just return the response.send and a message logged out that's our logout then number four we are going to create a protected route just to show you an example of how you can do this authorization with the token so we have server.post we can just call it forward slash protected this is an async function so we mark it with async and we have the request the response and an inline arrow function then we try we catch the error now we have a const user id is auth and we send in the request we are going to create this one now so we create a new file inside of this source that's the last file we're going to create here we call it is auth dot js and first we are going to import verify we require it from json web token and that's the way we can verify the token that we have in our header then we create the function called is auth we have the request an error function const authorization and from our request and the headers we are going to grab the one that's called authorization and this will give us our token if we don't have any token if not authorization then we throw new error you need to log in because if we're not sending a token we know that the user isn't logged in so that's why we can throw this error and tell them that they need to log in otherwise we can get the token so from authorization we split that one like this and we grab from index one in the array and this is because the authorization in the header is going to look something like this beer and then you have the token here this is a string so we just strip out bearer and we just grab this one and that's what we do in here so that's how we get the token so this is the standard as you use beer and then have the token after that word that's called bearer yeah that's very difficult for me to say because i'm not used to that smooth rs r are yeah yeah you know it's it's tough to be from sweden and try to speak english all right so we have our token then we're going to grab our user id and we get it from verify and that's from json web token we have our token and we verify it with the process dot n dot access underscore token secret so this way we make sure that this is a legit token and then we just return the user id okay module dot exports equals is off or you could of course just export it as we did with a fake db exports dot fake db instead if you want to do that all right back inside of index we need to import is off const is auth equals require dot forward slash is auth.js and now we can use it here this is getting a little bit messy here i i know that um as i said the code is going to be a bit verbose and there's a lot of code here maybe but i think it's necessary to fully understand something when explaining advanced stuff like this if the user id doesn't equal null and that's because we could just do it like this but that will give us a false answer if the id is zero so that's why i'm doing this we have res send the data and we can just type this is protected data all right and then inside of catch just as before rest send we send an error message like so so we save this one and we can see if the protected route works you can log in again protected and as you can see in the authorization here we can just grab the access token that we get here and this is actually an old token also it shouldn't work now it says that you need to log in so if i just paste in the new token here it hopefully should work and it doesn't all right yeah and of course i can see now i forgot an s here it should be headers it's very easy to forget something like that so i save it and then we can try it again yes you can see this is protected data so now we're accessing it with our token and that's great really really easy to do something stupid like this and forget an s i hope you didn't do that that's the second time in this tutorial i did something like this right i have to slap myself in the face because i'm that bad at typing this stuff out right back inside of index we know that this one is working and we just have one more route to create and then our api will be finished and that's the route for getting a new access token so five get a new access token with a refresh token all right we have server dot post forward slash refresh underscore token we have our request and a response and an inline arrow function we have our token and now we can just grab it from the request cookies refresh token that's why we installed the library that's called cookie parser and if we don't have a token in our request if not token return response dot send the access token we just clear it out so we just send an empty access token you could also send a message here also to the client of course otherwise we have a token let's verify it so we let we create payload and we set that one to null for starters and we have a try and a catch with the error inside of our try we set the payload we're going to verify we have the token that's the one that we grabbed from the cookies and we have our process dot n dot refresh token refresh underscore token underscore secret we verify that our token is legit error is return response dot send and yet again we just send an empty access token we know that the token is valid so check if user exists const user we go inside our fake db and find user we check if our user id equals to the payload id the payload user id because we signed or token with the user id we get that one when we verify it if this verify it will give us the id so we can just compare this one with the one in the database and see if it exists there the lid it should say if not user return response send yet again we send an empty access token because the user didn't exist in the database user exists check if refresh token exists on user if user dot refresh token not equals token if we have another token registered to the user we don't want to send a new access token so we just return response send and we set the access token to an empty string again whoa there's many steps here whoa whoa token exists create new refresh and access token so again we create our access token create access token send in our user id as you can see here this is repetitive code we did this up here before so as i told you before this code is very verbose you can refactor it to make it more effective and look a lot more cleaner but it's good to have it here now so easily can understand every step and how this works then we create the refresh token also with the user.id then we need to update the refresh token in the database and as i also told you before you could have different versions here instead of the refresh token but i will just grab the user and refresh token and mutate this property here with a new refresh token so this will update it in our temporary database object all good to go send new refresh token and access token so we send the refresh token we have the response and the refresh token and then we return rest.send and the access token whoa that was a lot but hopefully you'll understand all the steps needed here and you can also see that you need to have some connection to a real database and users that you save somewhere because this is just fake so let's save this one see if it works no errors that's good we can try this out now first of all we can log in we have the refresh token so we try this and as you can see we get a new access token back that's because our refresh token is saved in um is saved in the cookies i think we should be able to see it somewhere yeah here you can see the refresh token that is being sent but we won't be able to grab it in our javascript from the client and then if we log out like this we shouldn't be able to get a new access token obviously it has not cleared it from here yeah and i think i know what's wrong we have to set the path here also it has to have the same path refresh underscore token like this because we told it to just send this cookie on this path so when we clear it we just make sure to include this path here also so i save this one and go back inside of postman and hopefully this will work now i'll log out yeah and as you can see it won't give us an access token now and then we can also try out we try to login then a new cookie should be set so i try this route again and as you can see we get a new access token so it's working now make sure that you include the path here otherwise it won't work all right so that concludes the server in the next part we're going to create a frontend with react and use this api okay this is the second part in this tutorial and we're going to build the front one in this one and as you can see i'm inside the jwt auth folder now that i created in the last part and i also have this server folder and i hope you didn't make the same mistake as i did because i didn't navigate inside of this folder when i created the api so i had to move all the files manually inside of the server folder so i navigate inside of that one and all our files are here for the api and also we can open up the code it can always be good to have it here if there's something that we need to change in our api and actually i had this typo again i had forgotten i in the origin in the course in the index.js file i hope you didn't do that mistake also so make sure that it says origin here otherwise it won't work okay so back inside of the terminal we can just npn start and fire up our server then i have another tab here in my console and i'm going to create a react application for a frontner now i assume that you know react i'm not going to teach you react or css or anything in this course i'm just going to very quickly create this little application that we can use to communicate with our server to get our json web tokens and show you how json web tokens work all right we're going to create this application with create react app so we type npx create dash react dash app and we're going to call it frontend and this will create a folder here that's called frontend and it's going to put all the code inside of that one so just have to wait a little bit now so that's it we navigate inside the frontend folder and open up our code editor so this is what we've got here we have a package.json it's installed everything for us and we also have this src folder with different components that it created for us and we can actually remove some of them here we can remove the service worker we can remove the logo we can remove the app test and the app.css we're going to create some css in this index.css file and we also have to go inside index.js so we remove the service worker and remove all of this stuff here and just save it and inside our app.js remove the app dot css import and the import of the logo and for now we can just remove everything of this and just type out app and then we can go back inside our console that we're going to install to dependencies so mpmi we're going to need the reach router for this one at reach forward slash router and also i think we're going to need a es lint dash plugin react hooks and while this installs i can grab some coffee here that's always a good idea and as you can see i'm getting these errors here they started to appear just recently i think it is because i'm using both yarn and npm they create react app create the app with yarn and now i'm using mpm but i'm going to show you how to get rid of these if you get these errors so just wait for it to finish here so what you can do is you go inside of your code just remove the node modules folder and also the package lock file and go inside of the terminal and type mpm install i haven't got time yet to dive deep in this and see what's causing this so i don't really know actually but i know that this works so that's it we can try mpm start and we navigate to localhost 3000 and as you can see we're showing up here so we know that it's working that's good so back inside our code editor and we're going to create a new folder here inside of our src folder create a new folder name components and we're going to scaffold out five components we have one that's called content dot js one that's called login.js and navigation dot js protected dot js and register.js now we can just scaffold out them now and we'll come back to them later so we import react from react we create a functional component called content equals an error function and for now we just return a div that says content and we export default content all right so we can just copy this one now make sure you save it also of course and go inside login and change this content to login and save it move on to the navigation change content to navigation save it and inside protected the same thing protected and the register register so this is just the scaffolding of this we'll come back to them later and i can also say that this application will also be a bit verbose in the code and has a yeah maybe a lot of redundant code for example the login and the register component will have almost the same code inside of them that's actually intentionally because i think that i will make this as easy as possible for you but this is not in any way just as with the api a production finished application we're just creating it in educational purpose so bear with me with that one okay and we have to create some css for this one also so we can do that right now when we're at it so inside of the index.css file we have this body we can actually remove this code and up here we can add the background and it's going to be steel blue just keep everything else here it doesn't really matter then we have the dot app class and with text align we set at the center we set a min height of 100 viewport height we display flex we set the flex direction to column we align items to center and also justify content to center we set the color to white fff and the font size to 16 pixels okay then we have a class that's called login dash wrapper we set the min height to 200 pixels we set the min width to 300 pixels we set the background to white the padding to 20 pixels the border dash top to 5 pixels and light blue and solid set the color to black zero zero zero okay that's our login wrapper and we are of course going to use these classes in our components in a production app i would use style components but in this case we're just importing a regular css file and yeah that's no good to do it like that but it it'll work for us in this application then we have dot login dash input and we're going to have a button in that one so we set the background on the button to light blue we display blocked we set the width to 100 percent the height to 50 pixels yeah and that's it for that one then on the same class login dash input we're going to have our input fields and we can display block we set the padding to 20 pixels the width is going to be 100 percent the height is going to be 50 pixels and the margin 10 pixels zero we set the box sizing to border box okay just a few more we have to style our unordered list that we're going to have for our navigation so we have our ul list dash style dash type we set that one to none set the margin to 40 pixels auto we set the width to 300 pixels and the padding to zero then we have the uli element we display inline dash block and set the margin to 10 pixels right and then the last one and that's the link that's the a tag we set the color to white fff and text decoration to none so that's our css and we can already see that it's changing here and that's good okay we can move inside our app.js file now and we're going to create this one first we're going to add some imports here we're going to use state and also use effect for this one and then we import router and navigate from at reach router okay then we import all our components so we import navigation from dot forward slash components forward slash navigation we can just copy this one paste it in four times and we change these ones here this one is going to be the login this one register protected as you can see i'm changing it in two places at the same time here so make sure you also change the path here and the last one is going to be our content all right so that's our component then we're going to create a context that we're going to use for yeah almost like a global state here by creating a context we can access the state inside of all our components in the application so we export const user context and react dot create context and for now it can just be an empty array so that is going to be our context and inside of our app component we are going to create some local state first we have our const with our user and set user that is going to hold our access token so use state and it's going to be an empty object for now let me create another one loading and set loading and you stay and we set that one to true because when this application run we're going to have a use effect that will fire off and send or refresh token to get a new access token if we have a refresh token so that way we don't have to log in yeah in a production app you wouldn't do it this way you probably will have a library for example apollo or something that will handle this for you when you have a real database to connect to but for now for this tutorial as i said i will do this as simple as possible so we're just using the thing we got in react and we're going to grab it with a use effect we're also going to have a couple of functions in this one so we have const log out callback and this one is obviously going to be for our logout button and it's going to be a sync and we leave it empty for now then we're going to have our use effect and that one is also going to be empty for now we give it an empty array here also as a dependency so then we can create our jsx for this one so we have this div with the class name of app we're going to wrap it with our context so we have our user context dot provider and the value is going to be an array with our user and set user so this is the way we can pass this state down to all our components we close it move this one inside of that one all right then we have our app and then we're going to have our navigation the navigation is going to have a logout callback logout callback so this is a prop so we send in our logout callback function so that one then we're going to have our router we're going to change routes here depending on what page we're on so we have an id of router and then we just have our components here we have our login component that's going to have a path of login then we have our register that's going to have a path of register and or protected that has the path of protected whoops it should selfclose like this and then we have our content and this one is going to have the path of a forward slash because that's our main landing page that's our home page and i think this is it for this component actually for now of course we're going to fill this out with more code later but we can save it let's see what we've got so we've got the navigation and content here and that's great so we can actually create our navigation now so make sure you navigate inside of your navigation.js file so we're already importing react we're also going to import link from at reach router okay then we've got our navigation here we're going to destructure out our prop or logout callback and here we create parentheses and actually you can remove this one because we're going to have an unordered list here and then we create our menu items so we have a an ally element we have a link and it's going to link to a forward slash that's our home page so we name it home and we can actually copy this one and paste it in three times and this link is going to go to protected and we type out protected and this one is going to go to register and register and the last one is not going to have a link actually it's going to have a button so we have a button with an on click handler that's going to be our prop logout callback and we can just type out log out so this is it for a navigation we save this one and see what we've got yeah we have our navigation here and as you can see it changed routes here and that's good and it also changed component here so our navigation is working and our routing is working that's nice okay so we can move on to create our content component so inside the content.js file up here we're also going to import use context that's a hook that we'll use to grab our context then we import a component that's named redirect from at reach router and we also import our user context we grab that from dot dot forward slash and it's in our app all right now we have our content component we can remove this one and create curly braces because inside of here we're going to check if our context if our state in the context the user contain our access token so we can grab that one first const user we use context that's the context hook that we imported up here then we send in our user context and this will give us our user so if we not have a user.access token we just return and we have the redirect component from the reach router library from we set that one to an empty string two and we're going to redirect them to the login because if we don't have an access token we want them to log in and we don't want to show the content here and we can also have no throw like this otherwise if we have an access token we return a div and here we can have our content so this is the content okay so this is it if you're using something like as i said apollo or something you should have that one to check if the access token has expired or not or and if it has expired you can automatically in the background grab a new access token if you still have a valid refresh token but i won't go through that here i'm not doing that here so if the access token expire it won't grab a new one from the refresh token endpoint automatically okay we save it and we can go to our start page and as you can see it's showing us the login page we don't have an access token so that's why it's redirecting us to the login page and that's great so we can actually create our login page now so make sure you're in the login.js file up here we're going to import some more stuff from react we're going to use state use context and use effect and we're also going to import navigate from at reach router and we import our user context from dot dot forward slash app all right and then we have our component here we can remove this one and create curly braces first we grab our context const user and set user equals use context and we send in our user context then we're going to have two local states for this one it's going to be one for the email and one for the password that's the input fields that we're going to have in this one so we create a const email and set email use date and it's going to be an empty string for now and then we have the password and set password equals you stayed and an empty string like so then we're going to have two functions in this one we're going to have one that's called handle submit and it's obviously going to handle the submit of the form it's going to be async and we have the event and an error function and we leave it empty for now then we're going to have one that's called handles change and this one is going to be when we type something in the input boxes and we have the event and an error function for this one also so we can start typing out our jsx that we're going to return for this one so return parenthesis we have a div with a class name of login dash wrapper we have our form that is going to have an on submit and we just call our handle submit function on that one and inside of our form we're going to have our inputs fields but first we're going to have a div with a header or maybe yeah we can actually have an h2 tag that says login and then we have an input it's going to have a value we grab that from our state email this is going to be a control component so on change we call our handles change it's going to be the type text name is going to be email the placeholder is going to be email and i think we need to have something that's called autocomplete email and we can copy all of this and paste it in below all of these will change to password play so maybe a capital p and this one i think should say current dash password so make sure you change all of these here then we of course need a submit button so below here we create a button type submit and it can say login yeah yeah and we also have to wrap these inputs in a div that's called class name login dash input so move this everything here inside of this div something like this the order formatting isn't working here now for me so i have to do it manually okay we save that one and we can see what we've got so far yeah this one shouldn't be all the way out to the edges i don't know why we look into that later okay so let's get back inside of our login.js file so first we have this handle change because when we type something here it doesn't show anything now at all so we have to hook this up to our state so we'll show the values so we have these handles change we got the event here so we can just check if the event dot current target dot name equals email then we can set email e dot current target dot value all right we just have two input fields in this one so we can just make an else here we know that otherwise it's the set password we should call e dot current target dot value so we save this one and we can see if it works and as you can see we can type something here now and that's great it works all right then we have our handle submit and this one is going to do all the job for us to grab the token from our api so the first thing we have to do inside of here is to prevent default we don't want to send the form because we want to handle this ourself then we have const result we're going to await and we await again we fetch from http colon forward slash forward slash localhost and our server is at port 4000 and we're going to hit the endpoint login then we have a coma and an object because we need to send in some stuff here also we set the method to post we set credentials to include then we have our headers and our headers is going to be content dash type application forward slash json all right so we're setting the type of our headers here and then we have our body and that is going to be json.stringify we have to make it a string and we have our email actually as it's the same here we can just type out email and the same with password and here we have dot json we call that one that's why we wait two times here first we await the fetch and then we await when we convert it to json so that will give us the result in this const here so if result dot access token if we've got an access token we can set the user so we set the access token and we grab that from the result.access token then when we have set the access token we want to navigate back to the home page else if we don't got an access token we can just console.log the result.error all right and if we want we can also create the use effect here when the users change we create a dependency array with the user and we can just console log out the user so we see what's changed inside of that one all right so we save this one and we can try it out so let's go to our application and inspect i want to look in the console we reload it you can see we have an empty object here to start with because we console log out our user state or access token state we can try to log in here then you can see we can't log out the error here and it tells us that we're not sent along a valid password and my password is going to be test and as you can see we got the access token here and now we redirected to the start page and it's showing us the content so that's good but we're not grabbing a new access token now as you can see here so it will wipe out the state every time we reload this but we'll fix this later so we store the access token in our state in the application we're not storing it in local storage or anything like that we're just having it in our application and the refresh token is being sent to the client as a protected cookie so we can't really do anything with that cookie with our javascript code so back inside our code and we can actually go inside of the app.js file and in our use effect here i can make some comment first thing get a new access token if a refresh token exists right so inside of reduce effect we're going to create an async function check refresh token so we yet again have cons result and we await and we await again fetch and this time we're going to hit our endpoint for the refresh token so localhost port 4000 forward slash refresh underscore token coma and we have an object here method post credentials this one has to be include otherwise the cookie won't be included and it won't work so needed to include the cookie we have our headers we set the content type to application forward slash json i actually think that this is the default but it won't hurt to have it here and then here dot json so we can set the user the access token we grab it from result access token so this will set it in either case because either we got an empty access token or we got the access token so it will set it to an empty string or we set it to the actual access token that we got now we can set the loading to false all right and just below here we call the check refresh token and we have to do it like this because you can't have an async use effect so you just create an async function inside of the use effect and call it like this and this means that it will just fire off this when we mount the application so this will just run one time and we can actually before we return our jsx we can actually check if loading then we just return a div ah we return a div that says loading so we save this one and we can try it out as you can see here now as i reload the page you can see that it loading flashes here so it grabs the new access token from our refresh token endpoint so that's good we don't have to log in as long as we have a valid refresh token so that's how a refresh token works as long as it's valid you can just call that endpoint with the refresh token and it will send back a valid access token for you to use in your application so that's very convenient to have that one and don't need to log in every time then we can create our logout function here as we're in this component now so we have this logout callback for this one we can just await fetch and from our localhost port 4000 we have this endpoint that's called logout and we set the method to post and we can also include the credentials like so and then this will wipe out the cookie but we also want to reset our application on the front end clear user from context set user and we just give it an empty object for this one and then we also want to navigate back to start page so navigate and forward slash right we save it and we can see if it works we log out and you can see we go to start page you can see that it redirect us to the login that means that we don't have a refresh token now because we logged out so we log in again and it's showing us the content and that's great and if we'll reload it it will grab a new access token as long as we don't log out but if we log out it wipe out the refresh token so we have to log in again all right great it works you can also see here in the console.log that the access token is just an empty string okay we can create the register component also and we can actually just copy all the code from the login component and paste it in the register component of course we're going to rename this to register and also export default register and we have to change a few things here now we're not going to need the context for this one or the use effect just to use state so we can delete these ones here and delete the context we are going to use the email and the password local state and this one we change this to register so we hit the register endpoint instead the method is going to be post credentials yeah we can try it we don't need to include the credentials here because we won't send along the cookie the headers can stay the same the body the same everything is the same here and we're not setting a user here so we can just remove this one and if result.error we can just console.log we want to know the error so console.log result message no this is actually if we don't have an error so we just can console.log out the message we get back and then we want to navigate to the front page to the home page else then we console logout the result.error all right we can remove the use effect the handles change is going to be the same and we can change this one to register instead everything else is going to be the same yeah and also this one here should say register and we save it and we can see if it works so we go to the register and you can see it changes here it's the exact same otherwise but we just changed this once here so we can just try to register without the user as you can see we can now create this is a bug here actually we can create an empty user and that shouldn't be possible so we have to check that in our api also of course but not for this tutorial okay so we just created an empty user and we can see in our console if we go to our our api here you can see that we created this one with an empty email and this password that gets generated is from an empty string and that's no good of course but if we try to create a user that's the same as already in the database it should warn us yeah user already exist and it doesn't matter if we write another password here or something but we can create maybe put a 2 there every register and you can see the user is created and we console log it out here so we can see that it gets created and is put in the database that's not the database that's our fake database maybe you should get logged in automatically when you create a user and we're actually logged in as another user now because yeah this is not a production app and i just want to show you how this stuff works now so yeah we just created the user but we logged in as another user and that's no good of course but it works we can register user and we can log in and we can log out so if we log in with the new user we created you can see first yeah it says that the password is not correct and i had the same password we can log in with that user instead so that's great okay it's working so this is how the flow is when you send tokens to your client and to your api and yeah it's very convenient that you don't have to log in all the time and you can just have these tokens that will simplify everything for you that will simplify everything for your user it's not simple to do this stuff actually okay so we have one more thing to do we have to create a protected route to show you how you can protect data and use your token to get that data yeah and i just realized why our css isn't working as it should and that's because if we move inside of the app.js file the class name is a capital a here on app so just change that one to a lowercase a and save it and it should work yeah it's a little bit nicer now you can see it looks more like a regular login form now and yeah it's centered and the nice stuff like that so yeah that's great move back inside of the protected.js file for this one we are going to need the use effect the use state and the use context we're also going to import the user context from dot dot forward slash app and we can remove this one and create curly braces so we have the const user and we use context and send in our user context then we create the local state content and set content you state and we give it an initial string of you need to login and of course there's many ways of doing this so this is just one way to show you a simple solution how we can get the protected data and show it in our component then we're going to have a use effect and this one is going to fire off when the user changes so we create an async function that's called fetch protected we have yet again the constant result we await and we await again the fetch and from our localhost forward slash protected we are going to grab our data we have a method of post the headers are going to be content type application forward slash json then we have authorization and this is really important here we stand along this property here that's called authorization we give it a string we have backticks here now with a beer and then we give it the user access token and it with the backtick so this is the standard of sending your access token you have this bearer in front of the access token so that's what we stripped away in our api when we get the access token and we actually can look at it here up here you see we get the token by splitting authorization and we get an array with the values and the value at the index one is going to be our access token so we remove the bearer this way or the bearer beer beer yeah i really don't know how you pronounce that um yeah so yeah it may be wrong but i hope you understand what i mean so that's how we send along the access token and down below here we just convert it to json and then if result.data if we get some data back we set the content with result.data and here we have to call or fetch protected down below here we just return a div with the content so obviously this is not going to change if we don't get any data we're just displaying you need to log in otherwise we display the data we get back so we can save this one now and see if it works yeah you see we could log in now with not a user or a password because we created a completely empty user and you shouldn't be able to do that but we logged in now and we can see if the protected works no it doesn't work actually so we have to figure out why yeah and i've done it again i can see here now there should be an s there i missed that again i think that's the third or fourth time in this tutorial so it's really easy to do something like this especially when you sit there and record everything and i'm going to show you this stuff so yeah make sure you have an s on the headers so i try to log in and i go to the protected route and it says this is protected data so that's good that's fine it was just that little s that messed everything up here that's the beauty of coding one little small typo can ruin everything for you so as you can see we're getting the protected data because we send along the access token here so that's how you protect data with your api and you need a user to send along the access token to get the data so this is it actually maybe it seems a little bit much and yeah it is authorization and authentication is really advanced stuff so it should be a lot i think i actually find it a bit hard to explain also because it's a very advanced topic and i hope you learned something from it i will appreciate if you want to subscribe to my youtube channel and you can also add me at twitter at wabenfalk i also got a few premium courses in react out there they're on my own platform www.webenfarc.com and i have a few on udemy also now but i'm going to move them to my own platform in the future so hope you enjoyed it see you in another one